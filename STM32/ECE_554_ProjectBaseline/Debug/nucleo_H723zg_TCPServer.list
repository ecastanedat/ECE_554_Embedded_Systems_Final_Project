
nucleo_H723zg_TCPServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000139d8  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002cdc  08013ca8  08013ca8  00023ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016984  08016984  00026984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801698c  0801698c  0002698c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08016990  08016990  00026990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  24000000  08016994  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003404  24000094  08016a28  00030094  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24003498  08016a28  00033498  2**0
                  ALLOC
  9 .lwip_sec     00001900  30000000  30000000  00040000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 11 .debug_info   0004804d  00000000  00000000  000300c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000074b3  00000000  00000000  0007810f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001ae8  00000000  00000000  0007f5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001a08  00000000  00000000  000810b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003f93c  00000000  00000000  00082ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002ee28  00000000  00000000  000c23f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0015a734  00000000  00000000  000f121c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0024b950  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000077b4  00000000  00000000  0024b9a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000094 	.word	0x24000094
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08013c90 	.word	0x08013c90

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000098 	.word	0x24000098
 800030c:	08013c90 	.word	0x08013c90

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96e 	b.w	80006b4 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	SM_STATES state = INIT;
 80006be:	2300      	movs	r3, #0
 80006c0:	73fb      	strb	r3, [r7, #15]

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006c2:	f000 fac1 	bl	8000c48 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006c6:	4b47      	ldr	r3, [pc, #284]	; (80007e4 <main+0x12c>)
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d11b      	bne.n	800070a <main+0x52>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006d2:	f3bf 8f4f 	dsb	sy
}
 80006d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d8:	f3bf 8f6f 	isb	sy
}
 80006dc:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006de:	4b41      	ldr	r3, [pc, #260]	; (80007e4 <main+0x12c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006e6:	f3bf 8f4f 	dsb	sy
}
 80006ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006ec:	f3bf 8f6f 	isb	sy
}
 80006f0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006f2:	4b3c      	ldr	r3, [pc, #240]	; (80007e4 <main+0x12c>)
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	4a3b      	ldr	r2, [pc, #236]	; (80007e4 <main+0x12c>)
 80006f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006fc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006fe:	f3bf 8f4f 	dsb	sy
}
 8000702:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000704:	f3bf 8f6f 	isb	sy
}
 8000708:	e000      	b.n	800070c <main+0x54>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800070a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800070c:	4b35      	ldr	r3, [pc, #212]	; (80007e4 <main+0x12c>)
 800070e:	695b      	ldr	r3, [r3, #20]
 8000710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000714:	2b00      	cmp	r3, #0
 8000716:	d138      	bne.n	800078a <main+0xd2>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000718:	4b32      	ldr	r3, [pc, #200]	; (80007e4 <main+0x12c>)
 800071a:	2200      	movs	r2, #0
 800071c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000720:	f3bf 8f4f 	dsb	sy
}
 8000724:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000726:	4b2f      	ldr	r3, [pc, #188]	; (80007e4 <main+0x12c>)
 8000728:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800072c:	60bb      	str	r3, [r7, #8]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	0b5b      	lsrs	r3, r3, #13
 8000732:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000736:	607b      	str	r3, [r7, #4]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	08db      	lsrs	r3, r3, #3
 800073c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000740:	603b      	str	r3, [r7, #0]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	015a      	lsls	r2, r3, #5
 8000746:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800074a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800074c:	683a      	ldr	r2, [r7, #0]
 800074e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000750:	4924      	ldr	r1, [pc, #144]	; (80007e4 <main+0x12c>)
 8000752:	4313      	orrs	r3, r2
 8000754:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	1e5a      	subs	r2, r3, #1
 800075c:	603a      	str	r2, [r7, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d1ef      	bne.n	8000742 <main+0x8a>
    } while(sets-- != 0U);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	1e5a      	subs	r2, r3, #1
 8000766:	607a      	str	r2, [r7, #4]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d1e5      	bne.n	8000738 <main+0x80>
  __ASM volatile ("dsb 0xF":::"memory");
 800076c:	f3bf 8f4f 	dsb	sy
}
 8000770:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000772:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <main+0x12c>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	4a1b      	ldr	r2, [pc, #108]	; (80007e4 <main+0x12c>)
 8000778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800077c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800077e:	f3bf 8f4f 	dsb	sy
}
 8000782:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000784:	f3bf 8f6f 	isb	sy
}
 8000788:	e000      	b.n	800078c <main+0xd4>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800078a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800078c:	f001 f8e0 	bl	8001950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000790:	f000 f82e 	bl	80007f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000794:	f000 f930 	bl	80009f8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000798:	f000 f8da 	bl	8000950 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800079c:	f000 f924 	bl	80009e8 <MX_USB_OTG_HS_USB_Init>
  MX_LWIP_Init();
 80007a0:	f006 ff80 	bl	80076a4 <MX_LWIP_Init>
  MX_I2C2_Init();
 80007a4:	f000 f894 	bl	80008d0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  tcp_server_init();
 80007a8:	f000 fcd4 	bl	8001154 <tcp_server_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch(state)
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d014      	beq.n	80007dc <main+0x124>
 80007b2:	2b02      	cmp	r3, #2
 80007b4:	dc14      	bgt.n	80007e0 <main+0x128>
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d002      	beq.n	80007c0 <main+0x108>
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d006      	beq.n	80007cc <main+0x114>
					 state = IDLE;
					 break;

		  case STATE_2: break;

		  default: break;
 80007be:	e00f      	b.n	80007e0 <main+0x128>
		  case INIT: print_to_serial("TCP Server with LCD16x2!\r\n");
 80007c0:	4809      	ldr	r0, [pc, #36]	; (80007e8 <main+0x130>)
 80007c2:	f000 fa23 	bl	8000c0c <print_to_serial>
					 state = IDLE;
 80007c6:	2301      	movs	r3, #1
 80007c8:	73fb      	strb	r3, [r7, #15]
					 break;
 80007ca:	e00a      	b.n	80007e2 <main+0x12a>
			  	  	 ethernetif_input(&gnetif);
 80007cc:	4807      	ldr	r0, [pc, #28]	; (80007ec <main+0x134>)
 80007ce:	f007 fb29 	bl	8007e24 <ethernetif_input>
					 sys_check_timeouts();
 80007d2:	f00f fc6b 	bl	80100ac <sys_check_timeouts>
					 state = IDLE;
 80007d6:	2301      	movs	r3, #1
 80007d8:	73fb      	strb	r3, [r7, #15]
					 break;
 80007da:	e002      	b.n	80007e2 <main+0x12a>
		  case STATE_2: break;
 80007dc:	bf00      	nop
 80007de:	e7e5      	b.n	80007ac <main+0xf4>
		  default: break;
 80007e0:	bf00      	nop
	  switch(state)
 80007e2:	e7e3      	b.n	80007ac <main+0xf4>
 80007e4:	e000ed00 	.word	0xe000ed00
 80007e8:	08013ca8 	.word	0x08013ca8
 80007ec:	24000388 	.word	0x24000388

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b09c      	sub	sp, #112	; 0x70
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fa:	224c      	movs	r2, #76	; 0x4c
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f012 fa08 	bl	8012c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	2220      	movs	r2, #32
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f012 fa02 	bl	8012c14 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000810:	2002      	movs	r0, #2
 8000812:	f003 fabd 	bl	8003d90 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000816:	2300      	movs	r3, #0
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	4b2c      	ldr	r3, [pc, #176]	; (80008cc <SystemClock_Config+0xdc>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	4a2b      	ldr	r2, [pc, #172]	; (80008cc <SystemClock_Config+0xdc>)
 8000820:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000824:	6193      	str	r3, [r2, #24]
 8000826:	4b29      	ldr	r3, [pc, #164]	; (80008cc <SystemClock_Config+0xdc>)
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000832:	bf00      	nop
 8000834:	4b25      	ldr	r3, [pc, #148]	; (80008cc <SystemClock_Config+0xdc>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800083c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000840:	d1f8      	bne.n	8000834 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000842:	2321      	movs	r3, #33	; 0x21
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000846:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800084a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800084c:	2301      	movs	r3, #1
 800084e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000850:	2302      	movs	r3, #2
 8000852:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000854:	2302      	movs	r3, #2
 8000856:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000858:	2304      	movs	r3, #4
 800085a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 800085c:	f240 1313 	movw	r3, #275	; 0x113
 8000860:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000862:	2301      	movs	r3, #1
 8000864:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000866:	2304      	movs	r3, #4
 8000868:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800086a:	2302      	movs	r3, #2
 800086c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800086e:	2304      	movs	r3, #4
 8000870:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000872:	2300      	movs	r3, #0
 8000874:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087e:	4618      	mov	r0, r3
 8000880:	f003 fac0 	bl	8003e04 <HAL_RCC_OscConfig>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800088a:	f000 fa0a 	bl	8000ca2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088e:	233f      	movs	r3, #63	; 0x3f
 8000890:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000892:	2303      	movs	r3, #3
 8000894:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800089a:	2308      	movs	r3, #8
 800089c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800089e:	2340      	movs	r3, #64	; 0x40
 80008a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008a2:	2340      	movs	r3, #64	; 0x40
 80008a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008aa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008ac:	2340      	movs	r3, #64	; 0x40
 80008ae:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	2103      	movs	r1, #3
 80008b4:	4618      	mov	r0, r3
 80008b6:	f003 fe51 	bl	800455c <HAL_RCC_ClockConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80008c0:	f000 f9ef 	bl	8000ca2 <Error_Handler>
  }
}
 80008c4:	bf00      	nop
 80008c6:	3770      	adds	r7, #112	; 0x70
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	58024800 	.word	0x58024800

080008d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008d4:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <MX_I2C2_Init+0x74>)
 80008d6:	4a1c      	ldr	r2, [pc, #112]	; (8000948 <MX_I2C2_Init+0x78>)
 80008d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x60404E72;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_I2C2_Init+0x74>)
 80008dc:	4a1b      	ldr	r2, [pc, #108]	; (800094c <MX_I2C2_Init+0x7c>)
 80008de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008e0:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_I2C2_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <MX_I2C2_Init+0x74>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ec:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_I2C2_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_I2C2_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_I2C2_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_I2C2_Init+0x74>)
 8000900:	2200      	movs	r2, #0
 8000902:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_I2C2_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800090a:	480e      	ldr	r0, [pc, #56]	; (8000944 <MX_I2C2_Init+0x74>)
 800090c:	f003 f918 	bl	8003b40 <HAL_I2C_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000916:	f000 f9c4 	bl	8000ca2 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800091a:	2100      	movs	r1, #0
 800091c:	4809      	ldr	r0, [pc, #36]	; (8000944 <MX_I2C2_Init+0x74>)
 800091e:	f003 f99f 	bl	8003c60 <HAL_I2CEx_ConfigAnalogFilter>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000928:	f000 f9bb 	bl	8000ca2 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800092c:	2100      	movs	r1, #0
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_I2C2_Init+0x74>)
 8000930:	f003 f9e1 	bl	8003cf6 <HAL_I2CEx_ConfigDigitalFilter>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800093a:	f000 f9b2 	bl	8000ca2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	240002d0 	.word	0x240002d0
 8000948:	40005800 	.word	0x40005800
 800094c:	60404e72 	.word	0x60404e72

08000950 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000954:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 8000956:	4a23      	ldr	r2, [pc, #140]	; (80009e4 <MX_USART3_UART_Init+0x94>)
 8000958:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800095a:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 800095c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000960:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000968:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800096e:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 8000976:	220c      	movs	r2, #12
 8000978:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097a:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000980:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 800098e:	2200      	movs	r2, #0
 8000990:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000998:	4811      	ldr	r0, [pc, #68]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 800099a:	f005 fc87 	bl	80062ac <HAL_UART_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009a4:	f000 f97d 	bl	8000ca2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a8:	2100      	movs	r1, #0
 80009aa:	480d      	ldr	r0, [pc, #52]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 80009ac:	f006 fdb0 	bl	8007510 <HAL_UARTEx_SetTxFifoThreshold>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009b6:	f000 f974 	bl	8000ca2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ba:	2100      	movs	r1, #0
 80009bc:	4808      	ldr	r0, [pc, #32]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 80009be:	f006 fde5 	bl	800758c <HAL_UARTEx_SetRxFifoThreshold>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009c8:	f000 f96b 	bl	8000ca2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 80009ce:	f006 fd66 	bl	800749e <HAL_UARTEx_DisableFifoMode>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009d8:	f000 f963 	bl	8000ca2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	24000240 	.word	0x24000240
 80009e4:	40004800 	.word	0x40004800

080009e8 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
	...

080009f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08e      	sub	sp, #56	; 0x38
 80009fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0e:	4b78      	ldr	r3, [pc, #480]	; (8000bf0 <MX_GPIO_Init+0x1f8>)
 8000a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a14:	4a76      	ldr	r2, [pc, #472]	; (8000bf0 <MX_GPIO_Init+0x1f8>)
 8000a16:	f043 0304 	orr.w	r3, r3, #4
 8000a1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a1e:	4b74      	ldr	r3, [pc, #464]	; (8000bf0 <MX_GPIO_Init+0x1f8>)
 8000a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a24:	f003 0304 	and.w	r3, r3, #4
 8000a28:	623b      	str	r3, [r7, #32]
 8000a2a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a2c:	4b70      	ldr	r3, [pc, #448]	; (8000bf0 <MX_GPIO_Init+0x1f8>)
 8000a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a32:	4a6f      	ldr	r2, [pc, #444]	; (8000bf0 <MX_GPIO_Init+0x1f8>)
 8000a34:	f043 0320 	orr.w	r3, r3, #32
 8000a38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a3c:	4b6c      	ldr	r3, [pc, #432]	; (8000bf0 <MX_GPIO_Init+0x1f8>)
 8000a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a42:	f003 0320 	and.w	r3, r3, #32
 8000a46:	61fb      	str	r3, [r7, #28]
 8000a48:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a4a:	4b69      	ldr	r3, [pc, #420]	; (8000bf0 <MX_GPIO_Init+0x1f8>)
 8000a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a50:	4a67      	ldr	r2, [pc, #412]	; (8000bf0 <MX_GPIO_Init+0x1f8>)
 8000a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a5a:	4b65      	ldr	r3, [pc, #404]	; (8000bf0 <MX_GPIO_Init+0x1f8>)
 8000a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a64:	61bb      	str	r3, [r7, #24]
 8000a66:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a68:	4b61      	ldr	r3, [pc, #388]	; (8000bf0 <MX_GPIO_Init+0x1f8>)
 8000a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6e:	4a60      	ldr	r2, [pc, #384]	; (8000bf0 <MX_GPIO_Init+0x1f8>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a78:	4b5d      	ldr	r3, [pc, #372]	; (8000bf0 <MX_GPIO_Init+0x1f8>)
 8000a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a86:	4b5a      	ldr	r3, [pc, #360]	; (8000bf0 <MX_GPIO_Init+0x1f8>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8c:	4a58      	ldr	r2, [pc, #352]	; (8000bf0 <MX_GPIO_Init+0x1f8>)
 8000a8e:	f043 0302 	orr.w	r3, r3, #2
 8000a92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a96:	4b56      	ldr	r3, [pc, #344]	; (8000bf0 <MX_GPIO_Init+0x1f8>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9c:	f003 0302 	and.w	r3, r3, #2
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa4:	4b52      	ldr	r3, [pc, #328]	; (8000bf0 <MX_GPIO_Init+0x1f8>)
 8000aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aaa:	4a51      	ldr	r2, [pc, #324]	; (8000bf0 <MX_GPIO_Init+0x1f8>)
 8000aac:	f043 0308 	orr.w	r3, r3, #8
 8000ab0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab4:	4b4e      	ldr	r3, [pc, #312]	; (8000bf0 <MX_GPIO_Init+0x1f8>)
 8000ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aba:	f003 0308 	and.w	r3, r3, #8
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ac2:	4b4b      	ldr	r3, [pc, #300]	; (8000bf0 <MX_GPIO_Init+0x1f8>)
 8000ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac8:	4a49      	ldr	r2, [pc, #292]	; (8000bf0 <MX_GPIO_Init+0x1f8>)
 8000aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ace:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad2:	4b47      	ldr	r3, [pc, #284]	; (8000bf0 <MX_GPIO_Init+0x1f8>)
 8000ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ae0:	4b43      	ldr	r3, [pc, #268]	; (8000bf0 <MX_GPIO_Init+0x1f8>)
 8000ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae6:	4a42      	ldr	r2, [pc, #264]	; (8000bf0 <MX_GPIO_Init+0x1f8>)
 8000ae8:	f043 0310 	orr.w	r3, r3, #16
 8000aec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af0:	4b3f      	ldr	r3, [pc, #252]	; (8000bf0 <MX_GPIO_Init+0x1f8>)
 8000af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af6:	f003 0310 	and.w	r3, r3, #16
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	f244 0101 	movw	r1, #16385	; 0x4001
 8000b04:	483b      	ldr	r0, [pc, #236]	; (8000bf4 <MX_GPIO_Init+0x1fc>)
 8000b06:	f003 f801 	bl	8003b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b10:	4839      	ldr	r0, [pc, #228]	; (8000bf8 <MX_GPIO_Init+0x200>)
 8000b12:	f002 fffb 	bl	8003b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2102      	movs	r1, #2
 8000b1a:	4838      	ldr	r0, [pc, #224]	; (8000bfc <MX_GPIO_Init+0x204>)
 8000b1c:	f002 fff6 	bl	8003b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b32:	4619      	mov	r1, r3
 8000b34:	4832      	ldr	r0, [pc, #200]	; (8000c00 <MX_GPIO_Init+0x208>)
 8000b36:	f002 fe41 	bl	80037bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000b3a:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b50:	4619      	mov	r1, r3
 8000b52:	4828      	ldr	r0, [pc, #160]	; (8000bf4 <MX_GPIO_Init+0x1fc>)
 8000b54:	f002 fe32 	bl	80037bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000b58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4821      	ldr	r0, [pc, #132]	; (8000bf8 <MX_GPIO_Init+0x200>)
 8000b72:	f002 fe23 	bl	80037bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000b76:	2380      	movs	r3, #128	; 0x80
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b7a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b88:	4619      	mov	r1, r3
 8000b8a:	481e      	ldr	r0, [pc, #120]	; (8000c04 <MX_GPIO_Init+0x20c>)
 8000b8c:	f002 fe16 	bl	80037bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000b90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4818      	ldr	r0, [pc, #96]	; (8000c08 <MX_GPIO_Init+0x210>)
 8000ba6:	f002 fe09 	bl	80037bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000bbc:	230a      	movs	r3, #10
 8000bbe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4810      	ldr	r0, [pc, #64]	; (8000c08 <MX_GPIO_Init+0x210>)
 8000bc8:	f002 fdf8 	bl	80037bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be0:	4619      	mov	r1, r3
 8000be2:	4806      	ldr	r0, [pc, #24]	; (8000bfc <MX_GPIO_Init+0x204>)
 8000be4:	f002 fdea 	bl	80037bc <HAL_GPIO_Init>

}
 8000be8:	bf00      	nop
 8000bea:	3738      	adds	r7, #56	; 0x38
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	58024400 	.word	0x58024400
 8000bf4:	58020400 	.word	0x58020400
 8000bf8:	58020c00 	.word	0x58020c00
 8000bfc:	58021000 	.word	0x58021000
 8000c00:	58020800 	.word	0x58020800
 8000c04:	58021800 	.word	0x58021800
 8000c08:	58020000 	.word	0x58020000

08000c0c <print_to_serial>:

/* USER CODE BEGIN 4 */
void print_to_serial(char *myString)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b09c      	sub	sp, #112	; 0x70
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	uint8_t buffer[100];

	strcpy((char*)buffer, myString);
 8000c14:	f107 030c 	add.w	r3, r7, #12
 8000c18:	6879      	ldr	r1, [r7, #4]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f012 f85a 	bl	8012cd4 <strcpy>
	HAL_UART_Transmit(&huart3, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fb73 	bl	8000310 <strlen>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	f107 010c 	add.w	r1, r7, #12
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295
 8000c36:	4803      	ldr	r0, [pc, #12]	; (8000c44 <print_to_serial+0x38>)
 8000c38:	f005 fb88 	bl	800634c <HAL_UART_Transmit>

}
 8000c3c:	bf00      	nop
 8000c3e:	3770      	adds	r7, #112	; 0x70
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	24000240 	.word	0x24000240

08000c48 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c4e:	463b      	mov	r3, r7
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000c5a:	f001 f803 	bl	8001c64 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8000c66:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000c6a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000c6c:	230e      	movs	r3, #14
 8000c6e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000c74:	2301      	movs	r3, #1
 8000c76:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c80:	2301      	movs	r3, #1
 8000c82:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f001 f820 	bl	8001cd4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c94:	2004      	movs	r0, #4
 8000c96:	f000 fffd 	bl	8001c94 <HAL_MPU_Enable>

}
 8000c9a:	bf00      	nop
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca6:	b672      	cpsid	i
}
 8000ca8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000caa:	e7fe      	b.n	8000caa <Error_Handler+0x8>

08000cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <HAL_MspInit+0x30>)
 8000cb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cb8:	4a08      	ldr	r2, [pc, #32]	; (8000cdc <HAL_MspInit+0x30>)
 8000cba:	f043 0302 	orr.w	r3, r3, #2
 8000cbe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_MspInit+0x30>)
 8000cc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cc8:	f003 0302 	and.w	r3, r3, #2
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	58024400 	.word	0x58024400

08000ce0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b0b6      	sub	sp, #216	; 0xd8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cf8:	f107 0310 	add.w	r3, r7, #16
 8000cfc:	22b4      	movs	r2, #180	; 0xb4
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f011 ff87 	bl	8012c14 <memset>
  if(hi2c->Instance==I2C2)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a24      	ldr	r2, [pc, #144]	; (8000d9c <HAL_I2C_MspInit+0xbc>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d141      	bne.n	8000d94 <HAL_I2C_MspInit+0xb4>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d10:	2308      	movs	r3, #8
 8000d12:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d1a:	f107 0310 	add.w	r3, r7, #16
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f003 ffa8 	bl	8004c74 <HAL_RCCEx_PeriphCLKConfig>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000d2a:	f7ff ffba 	bl	8000ca2 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <HAL_I2C_MspInit+0xc0>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d34:	4a1a      	ldr	r2, [pc, #104]	; (8000da0 <HAL_I2C_MspInit+0xc0>)
 8000d36:	f043 0320 	orr.w	r3, r3, #32
 8000d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d3e:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <HAL_I2C_MspInit+0xc0>)
 8000d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d44:	f003 0320 	and.w	r3, r3, #32
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d52:	2312      	movs	r3, #18
 8000d54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d64:	2304      	movs	r3, #4
 8000d66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d6a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480c      	ldr	r0, [pc, #48]	; (8000da4 <HAL_I2C_MspInit+0xc4>)
 8000d72:	f002 fd23 	bl	80037bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d76:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <HAL_I2C_MspInit+0xc0>)
 8000d78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d7c:	4a08      	ldr	r2, [pc, #32]	; (8000da0 <HAL_I2C_MspInit+0xc0>)
 8000d7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d82:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_I2C_MspInit+0xc0>)
 8000d88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000d94:	bf00      	nop
 8000d96:	37d8      	adds	r7, #216	; 0xd8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40005800 	.word	0x40005800
 8000da0:	58024400 	.word	0x58024400
 8000da4:	58021400 	.word	0x58021400

08000da8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b0b6      	sub	sp, #216	; 0xd8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	22b4      	movs	r2, #180	; 0xb4
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f011 ff23 	bl	8012c14 <memset>
  if(huart->Instance==USART3)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a25      	ldr	r2, [pc, #148]	; (8000e68 <HAL_UART_MspInit+0xc0>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d142      	bne.n	8000e5e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000de2:	f107 0310 	add.w	r3, r7, #16
 8000de6:	4618      	mov	r0, r3
 8000de8:	f003 ff44 	bl	8004c74 <HAL_RCCEx_PeriphCLKConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000df2:	f7ff ff56 	bl	8000ca2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000df6:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <HAL_UART_MspInit+0xc4>)
 8000df8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dfc:	4a1b      	ldr	r2, [pc, #108]	; (8000e6c <HAL_UART_MspInit+0xc4>)
 8000dfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <HAL_UART_MspInit+0xc4>)
 8000e08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <HAL_UART_MspInit+0xc4>)
 8000e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1a:	4a14      	ldr	r2, [pc, #80]	; (8000e6c <HAL_UART_MspInit+0xc4>)
 8000e1c:	f043 0308 	orr.w	r3, r3, #8
 8000e20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e24:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <HAL_UART_MspInit+0xc4>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2a:	f003 0308 	and.w	r3, r3, #8
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000e32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e4c:	2307      	movs	r3, #7
 8000e4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e52:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e56:	4619      	mov	r1, r3
 8000e58:	4805      	ldr	r0, [pc, #20]	; (8000e70 <HAL_UART_MspInit+0xc8>)
 8000e5a:	f002 fcaf 	bl	80037bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e5e:	bf00      	nop
 8000e60:	37d8      	adds	r7, #216	; 0xd8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40004800 	.word	0x40004800
 8000e6c:	58024400 	.word	0x58024400
 8000e70:	58020c00 	.word	0x58020c00

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <NMI_Handler+0x4>

08000e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <HardFault_Handler+0x4>

08000e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <MemManage_Handler+0x4>

08000e86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <BusFault_Handler+0x4>

08000e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <UsageFault_Handler+0x4>

08000e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec0:	f000 fdb8 	bl	8001a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
	return 1;
 8000ecc:	2301      	movs	r3, #1
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <_kill>:

int _kill(int pid, int sig)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ee2:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <_kill+0x20>)
 8000ee4:	2216      	movs	r2, #22
 8000ee6:	601a      	str	r2, [r3, #0]
	return -1;
 8000ee8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	24003488 	.word	0x24003488

08000efc <_exit>:

void _exit (int status)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f04:	f04f 31ff 	mov.w	r1, #4294967295
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff ffe5 	bl	8000ed8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f0e:	e7fe      	b.n	8000f0e <_exit+0x12>

08000f10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	e00a      	b.n	8000f38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f22:	f3af 8000 	nop.w
 8000f26:	4601      	mov	r1, r0
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	1c5a      	adds	r2, r3, #1
 8000f2c:	60ba      	str	r2, [r7, #8]
 8000f2e:	b2ca      	uxtb	r2, r1
 8000f30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	3301      	adds	r3, #1
 8000f36:	617b      	str	r3, [r7, #20]
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	dbf0      	blt.n	8000f22 <_read+0x12>
	}

return len;
 8000f40:	687b      	ldr	r3, [r7, #4]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b086      	sub	sp, #24
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	60f8      	str	r0, [r7, #12]
 8000f52:	60b9      	str	r1, [r7, #8]
 8000f54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	e009      	b.n	8000f70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	1c5a      	adds	r2, r3, #1
 8000f60:	60ba      	str	r2, [r7, #8]
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	dbf1      	blt.n	8000f5c <_write+0x12>
	}
	return len;
 8000f78:	687b      	ldr	r3, [r7, #4]
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <_close>:

int _close(int file)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b083      	sub	sp, #12
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
	return -1;
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000faa:	605a      	str	r2, [r3, #4]
	return 0;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <_isatty>:

int _isatty(int file)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
	return 1;
 8000fc2:	2301      	movs	r3, #1
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
	return 0;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
	...

08000fec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b087      	sub	sp, #28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff4:	4a14      	ldr	r2, [pc, #80]	; (8001048 <_sbrk+0x5c>)
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <_sbrk+0x60>)
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001000:	4b13      	ldr	r3, [pc, #76]	; (8001050 <_sbrk+0x64>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d102      	bne.n	800100e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <_sbrk+0x64>)
 800100a:	4a12      	ldr	r2, [pc, #72]	; (8001054 <_sbrk+0x68>)
 800100c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <_sbrk+0x64>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	429a      	cmp	r2, r3
 800101a:	d205      	bcs.n	8001028 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <_sbrk+0x6c>)
 800101e:	220c      	movs	r2, #12
 8001020:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001022:	f04f 33ff 	mov.w	r3, #4294967295
 8001026:	e009      	b.n	800103c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001028:	4b09      	ldr	r3, [pc, #36]	; (8001050 <_sbrk+0x64>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102e:	4b08      	ldr	r3, [pc, #32]	; (8001050 <_sbrk+0x64>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	4a06      	ldr	r2, [pc, #24]	; (8001050 <_sbrk+0x64>)
 8001038:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800103a:	68fb      	ldr	r3, [r7, #12]
}
 800103c:	4618      	mov	r0, r3
 800103e:	371c      	adds	r7, #28
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	24050000 	.word	0x24050000
 800104c:	00000400 	.word	0x00000400
 8001050:	240000b0 	.word	0x240000b0
 8001054:	24003498 	.word	0x24003498
 8001058:	24003488 	.word	0x24003488

0800105c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001060:	4b34      	ldr	r3, [pc, #208]	; (8001134 <SystemInit+0xd8>)
 8001062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001066:	4a33      	ldr	r2, [pc, #204]	; (8001134 <SystemInit+0xd8>)
 8001068:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800106c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001070:	4b31      	ldr	r3, [pc, #196]	; (8001138 <SystemInit+0xdc>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 030f 	and.w	r3, r3, #15
 8001078:	2b06      	cmp	r3, #6
 800107a:	d807      	bhi.n	800108c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800107c:	4b2e      	ldr	r3, [pc, #184]	; (8001138 <SystemInit+0xdc>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f023 030f 	bic.w	r3, r3, #15
 8001084:	4a2c      	ldr	r2, [pc, #176]	; (8001138 <SystemInit+0xdc>)
 8001086:	f043 0307 	orr.w	r3, r3, #7
 800108a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800108c:	4b2b      	ldr	r3, [pc, #172]	; (800113c <SystemInit+0xe0>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a2a      	ldr	r2, [pc, #168]	; (800113c <SystemInit+0xe0>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001098:	4b28      	ldr	r3, [pc, #160]	; (800113c <SystemInit+0xe0>)
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800109e:	4b27      	ldr	r3, [pc, #156]	; (800113c <SystemInit+0xe0>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	4926      	ldr	r1, [pc, #152]	; (800113c <SystemInit+0xe0>)
 80010a4:	4b26      	ldr	r3, [pc, #152]	; (8001140 <SystemInit+0xe4>)
 80010a6:	4013      	ands	r3, r2
 80010a8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010aa:	4b23      	ldr	r3, [pc, #140]	; (8001138 <SystemInit+0xdc>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0308 	and.w	r3, r3, #8
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d007      	beq.n	80010c6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010b6:	4b20      	ldr	r3, [pc, #128]	; (8001138 <SystemInit+0xdc>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f023 030f 	bic.w	r3, r3, #15
 80010be:	4a1e      	ldr	r2, [pc, #120]	; (8001138 <SystemInit+0xdc>)
 80010c0:	f043 0307 	orr.w	r3, r3, #7
 80010c4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010c6:	4b1d      	ldr	r3, [pc, #116]	; (800113c <SystemInit+0xe0>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010cc:	4b1b      	ldr	r3, [pc, #108]	; (800113c <SystemInit+0xe0>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010d2:	4b1a      	ldr	r3, [pc, #104]	; (800113c <SystemInit+0xe0>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010d8:	4b18      	ldr	r3, [pc, #96]	; (800113c <SystemInit+0xe0>)
 80010da:	4a1a      	ldr	r2, [pc, #104]	; (8001144 <SystemInit+0xe8>)
 80010dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010de:	4b17      	ldr	r3, [pc, #92]	; (800113c <SystemInit+0xe0>)
 80010e0:	4a19      	ldr	r2, [pc, #100]	; (8001148 <SystemInit+0xec>)
 80010e2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010e4:	4b15      	ldr	r3, [pc, #84]	; (800113c <SystemInit+0xe0>)
 80010e6:	4a19      	ldr	r2, [pc, #100]	; (800114c <SystemInit+0xf0>)
 80010e8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010ea:	4b14      	ldr	r3, [pc, #80]	; (800113c <SystemInit+0xe0>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <SystemInit+0xe0>)
 80010f2:	4a16      	ldr	r2, [pc, #88]	; (800114c <SystemInit+0xf0>)
 80010f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010f6:	4b11      	ldr	r3, [pc, #68]	; (800113c <SystemInit+0xe0>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010fc:	4b0f      	ldr	r3, [pc, #60]	; (800113c <SystemInit+0xe0>)
 80010fe:	4a13      	ldr	r2, [pc, #76]	; (800114c <SystemInit+0xf0>)
 8001100:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <SystemInit+0xe0>)
 8001104:	2200      	movs	r2, #0
 8001106:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <SystemInit+0xe0>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0b      	ldr	r2, [pc, #44]	; (800113c <SystemInit+0xe0>)
 800110e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001112:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001114:	4b09      	ldr	r3, [pc, #36]	; (800113c <SystemInit+0xe0>)
 8001116:	2200      	movs	r2, #0
 8001118:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800111a:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <SystemInit+0xf4>)
 800111c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001120:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001122:	4b04      	ldr	r3, [pc, #16]	; (8001134 <SystemInit+0xd8>)
 8001124:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001128:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00
 8001138:	52002000 	.word	0x52002000
 800113c:	58024400 	.word	0x58024400
 8001140:	eaf6ed7f 	.word	0xeaf6ed7f
 8001144:	02020200 	.word	0x02020200
 8001148:	01ff0000 	.word	0x01ff0000
 800114c:	01010280 	.word	0x01010280
 8001150:	52004000 	.word	0x52004000

08001154 <tcp_server_init>:
   3. Listen for the  incoming requests by the client
   4. Accept the Request, and now the server is ready for the data transfer
 */

void tcp_server_init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;

	tpcb = tcp_new();
 800115a:	f00a f9f9 	bl	800b550 <tcp_new>
 800115e:	60f8      	str	r0, [r7, #12]

	err_t err;

	/* 2. bind _pcb to port 7 ( protocol) */
	ip_addr_t myIPADDR;
	IP_ADDR4(&myIPADDR, 192, 168, 1, 200);
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <tcp_server_init+0x4c>)
 8001162:	607b      	str	r3, [r7, #4]
	err = tcp_bind(tpcb, &myIPADDR, 10);
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	220a      	movs	r2, #10
 8001168:	4619      	mov	r1, r3
 800116a:	68f8      	ldr	r0, [r7, #12]
 800116c:	f009 f94c 	bl	800a408 <tcp_bind>
 8001170:	4603      	mov	r3, r0
 8001172:	72fb      	strb	r3, [r7, #11]

	if (err == ERR_OK)
 8001174:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d109      	bne.n	8001190 <tcp_server_init+0x3c>
	{
		/* 3. start tcp listening for _pcb */
		tpcb = tcp_listen(tpcb);
 800117c:	21ff      	movs	r1, #255	; 0xff
 800117e:	68f8      	ldr	r0, [r7, #12]
 8001180:	f009 f9fa 	bl	800a578 <tcp_listen_with_backlog>
 8001184:	60f8      	str	r0, [r7, #12]

		/* 4. initialize LwIP tcp_accept callback function */
		tcp_accept(tpcb, tcp_server_accept);
 8001186:	4907      	ldr	r1, [pc, #28]	; (80011a4 <tcp_server_init+0x50>)
 8001188:	68f8      	ldr	r0, [r7, #12]
 800118a:	f00a fa61 	bl	800b650 <tcp_accept>
	else
	{
		/* deallocate the pcb */
		memp_free(MEMP_TCP_PCB, tpcb);
	}
}
 800118e:	e003      	b.n	8001198 <tcp_server_init+0x44>
		memp_free(MEMP_TCP_PCB, tpcb);
 8001190:	68f9      	ldr	r1, [r7, #12]
 8001192:	2001      	movs	r0, #1
 8001194:	f007 fd1e 	bl	8008bd4 <memp_free>
}
 8001198:	bf00      	nop
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	c801a8c0 	.word	0xc801a8c0
 80011a4:	080011a9 	.word	0x080011a9

080011a8 <tcp_server_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	4613      	mov	r3, r2
 80011b4:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 80011b6:	2101      	movs	r1, #1
 80011b8:	68b8      	ldr	r0, [r7, #8]
 80011ba:	f009 ffd7 	bl	800b16c <tcp_setprio>

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_server_struct *)mem_malloc(sizeof(struct tcp_server_struct));
 80011be:	200c      	movs	r0, #12
 80011c0:	f007 fb08 	bl	80087d4 <mem_malloc>
 80011c4:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d01f      	beq.n	800120c <tcp_server_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	68ba      	ldr	r2, [r7, #8]
 80011d6:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	2200      	movs	r2, #0
 80011dc:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 80011e4:	6939      	ldr	r1, [r7, #16]
 80011e6:	68b8      	ldr	r0, [r7, #8]
 80011e8:	f00a f9ba 	bl	800b560 <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_server_recv);
 80011ec:	490d      	ldr	r1, [pc, #52]	; (8001224 <tcp_server_accept+0x7c>)
 80011ee:	68b8      	ldr	r0, [r7, #8]
 80011f0:	f00a f9c8 	bl	800b584 <tcp_recv>

    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_server_error);
 80011f4:	490c      	ldr	r1, [pc, #48]	; (8001228 <tcp_server_accept+0x80>)
 80011f6:	68b8      	ldr	r0, [r7, #8]
 80011f8:	f00a fa08 	bl	800b60c <tcp_err>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_server_poll, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	490b      	ldr	r1, [pc, #44]	; (800122c <tcp_server_accept+0x84>)
 8001200:	68b8      	ldr	r0, [r7, #8]
 8001202:	f00a fa3d 	bl	800b680 <tcp_poll>

    ret_err = ERR_OK;
 8001206:	2300      	movs	r3, #0
 8001208:	75fb      	strb	r3, [r7, #23]
 800120a:	e005      	b.n	8001218 <tcp_server_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_server_connection_close(newpcb, es);
 800120c:	6939      	ldr	r1, [r7, #16]
 800120e:	68b8      	ldr	r0, [r7, #8]
 8001210:	f000 f965 	bl	80014de <tcp_server_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8001214:	23ff      	movs	r3, #255	; 0xff
 8001216:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8001218:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	08001231 	.word	0x08001231
 8001228:	08001365 	.word	0x08001365
 800122c:	08001389 	.word	0x08001389

08001230 <tcp_server_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
 800123c:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d105      	bne.n	8001250 <tcp_server_recv+0x20>
 8001244:	4b43      	ldr	r3, [pc, #268]	; (8001354 <tcp_server_recv+0x124>)
 8001246:	22c3      	movs	r2, #195	; 0xc3
 8001248:	4943      	ldr	r1, [pc, #268]	; (8001358 <tcp_server_recv+0x128>)
 800124a:	4844      	ldr	r0, [pc, #272]	; (800135c <tcp_server_recv+0x12c>)
 800124c:	f011 fcea 	bl	8012c24 <iprintf>

  es = (struct tcp_server_struct *)arg;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	61bb      	str	r3, [r7, #24]

  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d116      	bne.n	8001288 <tcp_server_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	2203      	movs	r2, #3
 800125e:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d104      	bne.n	8001272 <tcp_server_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_server_connection_close(tpcb, es);
 8001268:	69b9      	ldr	r1, [r7, #24]
 800126a:	68b8      	ldr	r0, [r7, #8]
 800126c:	f000 f937 	bl	80014de <tcp_server_connection_close>
 8001270:	e007      	b.n	8001282 <tcp_server_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_server_sent);
 8001272:	493b      	ldr	r1, [pc, #236]	; (8001360 <tcp_server_recv+0x130>)
 8001274:	68b8      	ldr	r0, [r7, #8]
 8001276:	f00a f9a7 	bl	800b5c8 <tcp_sent>

      /* send remaining data*/
      tcp_server_send(tpcb, es);
 800127a:	69b9      	ldr	r1, [r7, #24]
 800127c:	68b8      	ldr	r0, [r7, #8]
 800127e:	f000 f8db 	bl	8001438 <tcp_server_send>
    }
    ret_err = ERR_OK;
 8001282:	2300      	movs	r3, #0
 8001284:	77fb      	strb	r3, [r7, #31]
 8001286:	e05f      	b.n	8001348 <tcp_server_recv+0x118>
  }
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8001288:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d00b      	beq.n	80012a8 <tcp_server_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d005      	beq.n	80012a2 <tcp_server_recv+0x72>
    {
      es->p = NULL;
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f008 fb0f 	bl	80098c0 <pbuf_free>
    }
    ret_err = err;
 80012a2:	78fb      	ldrb	r3, [r7, #3]
 80012a4:	77fb      	strb	r3, [r7, #31]
 80012a6:	e04f      	b.n	8001348 <tcp_server_recv+0x118>
  }
  else if(es->state == ES_ACCEPTED)
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d110      	bne.n	80012d2 <tcp_server_recv+0xa2>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	2202      	movs	r2, #2
 80012b4:	701a      	strb	r2, [r3, #0]

    /* store reference to incoming pbuf (chain) */
    es->p = p;
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	609a      	str	r2, [r3, #8]

    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_server_sent);
 80012bc:	4928      	ldr	r1, [pc, #160]	; (8001360 <tcp_server_recv+0x130>)
 80012be:	68b8      	ldr	r0, [r7, #8]
 80012c0:	f00a f982 	bl	800b5c8 <tcp_sent>

    /* handle the received data */
    tcp_server_handle(tpcb, es);
 80012c4:	69b9      	ldr	r1, [r7, #24]
 80012c6:	68b8      	ldr	r0, [r7, #8]
 80012c8:	f000 f930 	bl	800152c <tcp_server_handle>

    ret_err = ERR_OK;
 80012cc:	2300      	movs	r3, #0
 80012ce:	77fb      	strb	r3, [r7, #31]
 80012d0:	e03a      	b.n	8001348 <tcp_server_recv+0x118>
  }
  else if (es->state == ES_RECEIVED)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d115      	bne.n	8001306 <tcp_server_recv+0xd6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d107      	bne.n	80012f2 <tcp_server_recv+0xc2>
    {
      es->p = p;
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	609a      	str	r2, [r3, #8]

      /* handle the received data */
      tcp_server_handle(tpcb, es);
 80012e8:	69b9      	ldr	r1, [r7, #24]
 80012ea:	68b8      	ldr	r0, [r7, #8]
 80012ec:	f000 f91e 	bl	800152c <tcp_server_handle>
 80012f0:	e006      	b.n	8001300 <tcp_server_recv+0xd0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	6978      	ldr	r0, [r7, #20]
 80012fc:	f008 fbf8 	bl	8009af0 <pbuf_chain>
    }
    ret_err = ERR_OK;
 8001300:	2300      	movs	r3, #0
 8001302:	77fb      	strb	r3, [r7, #31]
 8001304:	e020      	b.n	8001348 <tcp_server_recv+0x118>
  }
  else if(es->state == ES_CLOSING)
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b03      	cmp	r3, #3
 800130c:	d10e      	bne.n	800132c <tcp_server_recv+0xfc>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	891b      	ldrh	r3, [r3, #8]
 8001312:	4619      	mov	r1, r3
 8001314:	68b8      	ldr	r0, [r7, #8]
 8001316:	f009 fa45 	bl	800a7a4 <tcp_recved>
    es->p = NULL;
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f008 facd 	bl	80098c0 <pbuf_free>
    ret_err = ERR_OK;
 8001326:	2300      	movs	r3, #0
 8001328:	77fb      	strb	r3, [r7, #31]
 800132a:	e00d      	b.n	8001348 <tcp_server_recv+0x118>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	891b      	ldrh	r3, [r3, #8]
 8001330:	4619      	mov	r1, r3
 8001332:	68b8      	ldr	r0, [r7, #8]
 8001334:	f009 fa36 	bl	800a7a4 <tcp_recved>
    es->p = NULL;
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f008 fabe 	bl	80098c0 <pbuf_free>
    ret_err = ERR_OK;
 8001344:	2300      	movs	r3, #0
 8001346:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8001348:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3720      	adds	r7, #32
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	08013cc4 	.word	0x08013cc4
 8001358:	08013ce0 	.word	0x08013ce0
 800135c:	08013cec 	.word	0x08013cec
 8001360:	080013e9 	.word	0x080013e9

08001364 <tcp_server_error>:
  * @param  arg: pointer on argument parameter
  * @param  err: not used
  * @retval None
  */
static void tcp_server_error(void *arg, err_t err)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_server_struct *)arg;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d002      	beq.n	8001380 <tcp_server_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f007 f8c4 	bl	8008508 <mem_free>
  }
}
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <tcp_server_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_server_struct *es;

  es = (struct tcp_server_struct *)arg;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d017      	beq.n	80013cc <tcp_server_poll+0x44>
  {
    if (es->p != NULL)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d008      	beq.n	80013b6 <tcp_server_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_server_sent);
 80013a4:	490f      	ldr	r1, [pc, #60]	; (80013e4 <tcp_server_poll+0x5c>)
 80013a6:	6838      	ldr	r0, [r7, #0]
 80013a8:	f00a f90e 	bl	800b5c8 <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_server_send(tpcb, es);
 80013ac:	68b9      	ldr	r1, [r7, #8]
 80013ae:	6838      	ldr	r0, [r7, #0]
 80013b0:	f000 f842 	bl	8001438 <tcp_server_send>
 80013b4:	e007      	b.n	80013c6 <tcp_server_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b03      	cmp	r3, #3
 80013bc:	d103      	bne.n	80013c6 <tcp_server_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_server_connection_close(tpcb, es);
 80013be:	68b9      	ldr	r1, [r7, #8]
 80013c0:	6838      	ldr	r0, [r7, #0]
 80013c2:	f000 f88c 	bl	80014de <tcp_server_connection_close>
      }
    }
    ret_err = ERR_OK;
 80013c6:	2300      	movs	r3, #0
 80013c8:	73fb      	strb	r3, [r7, #15]
 80013ca:	e004      	b.n	80013d6 <tcp_server_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 80013cc:	6838      	ldr	r0, [r7, #0]
 80013ce:	f009 f80f 	bl	800a3f0 <tcp_abort>
    ret_err = ERR_ABRT;
 80013d2:	23f3      	movs	r3, #243	; 0xf3
 80013d4:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 80013d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	080013e9 	.word	0x080013e9

080013e8 <tcp_server_sent>:
  *         is received from remote host for sent data)
  * @param  None
  * @retval None
  */
static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	4613      	mov	r3, r2
 80013f4:	80fb      	strh	r3, [r7, #6]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_server_struct *)arg;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	2200      	movs	r2, #0
 80013fe:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d008      	beq.n	800141a <tcp_server_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_server_sent);
 8001408:	490a      	ldr	r1, [pc, #40]	; (8001434 <tcp_server_sent+0x4c>)
 800140a:	68b8      	ldr	r0, [r7, #8]
 800140c:	f00a f8dc 	bl	800b5c8 <tcp_sent>
    tcp_server_send(tpcb, es);
 8001410:	6979      	ldr	r1, [r7, #20]
 8001412:	68b8      	ldr	r0, [r7, #8]
 8001414:	f000 f810 	bl	8001438 <tcp_server_send>
 8001418:	e007      	b.n	800142a <tcp_server_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b03      	cmp	r3, #3
 8001420:	d103      	bne.n	800142a <tcp_server_sent+0x42>
      tcp_server_connection_close(tpcb, es);
 8001422:	6979      	ldr	r1, [r7, #20]
 8001424:	68b8      	ldr	r0, [r7, #8]
 8001426:	f000 f85a 	bl	80014de <tcp_server_connection_close>
  }
  return ERR_OK;
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	080013e9 	.word	0x080013e9

08001438 <tcp_server_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8001442:	2300      	movs	r3, #0
 8001444:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 8001446:	e036      	b.n	80014b6 <tcp_server_send+0x7e>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	6859      	ldr	r1, [r3, #4]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	895a      	ldrh	r2, [r3, #10]
 8001456:	2301      	movs	r3, #1
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f00c ffbf 	bl	800e3dc <tcp_write>
 800145e:	4603      	mov	r3, r0
 8001460:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 8001462:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d11d      	bne.n	80014a6 <tcp_server_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	895b      	ldrh	r3, [r3, #10]
 800146e:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d004      	beq.n	800148a <tcp_server_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	4618      	mov	r0, r3
 8001486:	f008 fabb 	bl	8009a00 <pbuf_ref>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 800148a:	6938      	ldr	r0, [r7, #16]
 800148c:	f008 fa18 	bl	80098c0 <pbuf_free>
 8001490:	4603      	mov	r3, r0
 8001492:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8001494:	7b7b      	ldrb	r3, [r7, #13]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0f7      	beq.n	800148a <tcp_server_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 800149a:	89fb      	ldrh	r3, [r7, #14]
 800149c:	4619      	mov	r1, r3
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f009 f980 	bl	800a7a4 <tcp_recved>
 80014a4:	e007      	b.n	80014b6 <tcp_server_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 80014a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ae:	d102      	bne.n	80014b6 <tcp_server_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 80014b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10b      	bne.n	80014d6 <tcp_server_send+0x9e>
         (es->p != NULL) &&
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d007      	beq.n	80014d6 <tcp_server_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	895a      	ldrh	r2, [r3, #10]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) &&
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d9b8      	bls.n	8001448 <tcp_server_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 80014d6:	bf00      	nop
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <tcp_server_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 80014e8:	2100      	movs	r1, #0
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f00a f838 	bl	800b560 <tcp_arg>
  tcp_sent(tpcb, NULL);
 80014f0:	2100      	movs	r1, #0
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f00a f868 	bl	800b5c8 <tcp_sent>
  tcp_recv(tpcb, NULL);
 80014f8:	2100      	movs	r1, #0
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f00a f842 	bl	800b584 <tcp_recv>
  tcp_err(tpcb, NULL);
 8001500:	2100      	movs	r1, #0
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f00a f882 	bl	800b60c <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8001508:	2200      	movs	r2, #0
 800150a:	2100      	movs	r1, #0
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f00a f8b7 	bl	800b680 <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d002      	beq.n	800151e <tcp_server_connection_close+0x40>
  {
    mem_free(es);
 8001518:	6838      	ldr	r0, [r7, #0]
 800151a:	f006 fff5 	bl	8008508 <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f008 fe7c 	bl	800a21c <tcp_close>
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <tcp_server_handle>:

/* Handle the incoming TCP Data */

static void tcp_server_handle(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 800152c:	b5b0      	push	{r4, r5, r7, lr}
 800152e:	b0a0      	sub	sp, #128	; 0x80
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
	struct tcp_server_struct *esTx = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	67fb      	str	r3, [r7, #124]	; 0x7c

	/* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	673b      	str	r3, [r7, #112]	; 0x70
	uint16_t inPort = tpcb->remote_port;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	8b1b      	ldrh	r3, [r3, #24]
 8001544:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
 8001548:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800154c:	4618      	mov	r0, r3
 800154e:	f010 fb81 	bl	8011c54 <ip4addr_ntoa>
 8001552:	6778      	str	r0, [r7, #116]	; 0x74

	esTx->state = es->state;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	781a      	ldrb	r2, [r3, #0]
 8001558:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800155a:	701a      	strb	r2, [r3, #0]
	esTx->pcb = es->pcb;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001562:	605a      	str	r2, [r3, #4]
	esTx->p = es->p;
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800156a:	609a      	str	r2, [r3, #8]

	char buf[100];
	memset (buf, '\0', 100);
 800156c:	f107 030c 	add.w	r3, r7, #12
 8001570:	2264      	movs	r2, #100	; 0x64
 8001572:	2100      	movs	r1, #0
 8001574:	4618      	mov	r0, r3
 8001576:	f011 fb4d 	bl	8012c14 <memset>

	strncpy(buf, (char *)es->p->payload, es->p->tot_len);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	6859      	ldr	r1, [r3, #4]
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	891b      	ldrh	r3, [r3, #8]
 8001586:	461a      	mov	r2, r3
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	4618      	mov	r0, r3
 800158e:	f011 fba9 	bl	8012ce4 <strncpy>
	strncpy(globalCluster.myString, (char *)es->p->payload, es->p->tot_len);
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	6859      	ldr	r1, [r3, #4]
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	891b      	ldrh	r3, [r3, #8]
 800159e:	461a      	mov	r2, r3
 80015a0:	4824      	ldr	r0, [pc, #144]	; (8001634 <tcp_server_handle+0x108>)
 80015a2:	f011 fb9f 	bl	8012ce4 <strncpy>
	strcat (buf, "+ Hello from TCP SERVER\n");
 80015a6:	f107 030c 	add.w	r3, r7, #12
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe feb0 	bl	8000310 <strlen>
 80015b0:	4603      	mov	r3, r0
 80015b2:	461a      	mov	r2, r3
 80015b4:	f107 030c 	add.w	r3, r7, #12
 80015b8:	4413      	add	r3, r2
 80015ba:	4a1f      	ldr	r2, [pc, #124]	; (8001638 <tcp_server_handle+0x10c>)
 80015bc:	461d      	mov	r5, r3
 80015be:	4614      	mov	r4, r2
 80015c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015c2:	6028      	str	r0, [r5, #0]
 80015c4:	6069      	str	r1, [r5, #4]
 80015c6:	60aa      	str	r2, [r5, #8]
 80015c8:	60eb      	str	r3, [r5, #12]
 80015ca:	cc03      	ldmia	r4!, {r0, r1}
 80015cc:	6128      	str	r0, [r5, #16]
 80015ce:	6169      	str	r1, [r5, #20]
 80015d0:	7823      	ldrb	r3, [r4, #0]
 80015d2:	762b      	strb	r3, [r5, #24]


	esTx->p->payload = (void *)buf;
 80015d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f107 020c 	add.w	r2, r7, #12
 80015dc:	605a      	str	r2, [r3, #4]
	esTx->p->tot_len = (es->p->tot_len - es->p->len) + strlen (buf);
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	891a      	ldrh	r2, [r3, #8]
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	895b      	ldrh	r3, [r3, #10]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	b29c      	uxth	r4, r3
 80015ee:	f107 030c 	add.w	r3, r7, #12
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7fe fe8c 	bl	8000310 <strlen>
 80015f8:	4603      	mov	r3, r0
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	4422      	add	r2, r4
 8001602:	b292      	uxth	r2, r2
 8001604:	811a      	strh	r2, [r3, #8]
	esTx->p->len = strlen (buf);
 8001606:	f107 030c 	add.w	r3, r7, #12
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe fe80 	bl	8000310 <strlen>
 8001610:	4602      	mov	r2, r0
 8001612:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	b292      	uxth	r2, r2
 8001618:	815a      	strh	r2, [r3, #10]

	tcp_server_send(tpcb, esTx);
 800161a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ff0b 	bl	8001438 <tcp_server_send>

	pbuf_free(es->p);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	4618      	mov	r0, r3
 8001628:	f008 f94a 	bl	80098c0 <pbuf_free>

}
 800162c:	bf00      	nop
 800162e:	3780      	adds	r7, #128	; 0x80
 8001630:	46bd      	mov	sp, r7
 8001632:	bdb0      	pop	{r4, r5, r7, pc}
 8001634:	2400031c 	.word	0x2400031c
 8001638:	08013d14 	.word	0x08013d14

0800163c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800163c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001674 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001640:	f7ff fd0c 	bl	800105c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001644:	480c      	ldr	r0, [pc, #48]	; (8001678 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001646:	490d      	ldr	r1, [pc, #52]	; (800167c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001648:	4a0d      	ldr	r2, [pc, #52]	; (8001680 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800164c:	e002      	b.n	8001654 <LoopCopyDataInit>

0800164e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800164e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001652:	3304      	adds	r3, #4

08001654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001658:	d3f9      	bcc.n	800164e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165a:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800165c:	4c0a      	ldr	r4, [pc, #40]	; (8001688 <LoopFillZerobss+0x22>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001660:	e001      	b.n	8001666 <LoopFillZerobss>

08001662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001664:	3204      	adds	r2, #4

08001666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001668:	d3fb      	bcc.n	8001662 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800166a:	f011 fa93 	bl	8012b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800166e:	f7ff f823 	bl	80006b8 <main>
  bx  lr
 8001672:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001674:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001678:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800167c:	24000094 	.word	0x24000094
  ldr r2, =_sidata
 8001680:	08016994 	.word	0x08016994
  ldr r2, =_sbss
 8001684:	24000094 	.word	0x24000094
  ldr r4, =_ebss
 8001688:	24003498 	.word	0x24003498

0800168c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800168c:	e7fe      	b.n	800168c <ADC3_IRQHandler>

0800168e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00b      	beq.n	80016b6 <LAN8742_RegisterBusIO+0x28>
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d007      	beq.n	80016b6 <LAN8742_RegisterBusIO+0x28>
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <LAN8742_RegisterBusIO+0x28>
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d102      	bne.n	80016bc <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80016b6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ba:	e014      	b.n	80016e6 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	691a      	ldr	r2, [r3, #16]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b086      	sub	sp, #24
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	2300      	movs	r3, #0
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d17c      	bne.n	800180c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d002      	beq.n	8001720 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2220      	movs	r2, #32
 8001724:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	e01c      	b.n	8001766 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	f107 0208 	add.w	r2, r7, #8
 8001734:	2112      	movs	r1, #18
 8001736:	6978      	ldr	r0, [r7, #20]
 8001738:	4798      	blx	r3
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	da03      	bge.n	8001748 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001740:	f06f 0304 	mvn.w	r3, #4
 8001744:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001746:	e00b      	b.n	8001760 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	f003 031f 	and.w	r3, r3, #31
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	429a      	cmp	r2, r3
 8001752:	d105      	bne.n	8001760 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800175a:	2300      	movs	r3, #0
 800175c:	613b      	str	r3, [r7, #16]
         break;
 800175e:	e005      	b.n	800176c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	3301      	adds	r3, #1
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	2b1f      	cmp	r3, #31
 800176a:	d9df      	bls.n	800172c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b1f      	cmp	r3, #31
 8001772:	d902      	bls.n	800177a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001774:	f06f 0302 	mvn.w	r3, #2
 8001778:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d145      	bne.n	800180c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	6810      	ldr	r0, [r2, #0]
 8001788:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800178c:	2100      	movs	r1, #0
 800178e:	4798      	blx	r3
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	db37      	blt.n	8001806 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	6810      	ldr	r0, [r2, #0]
 800179e:	f107 0208 	add.w	r2, r7, #8
 80017a2:	2100      	movs	r1, #0
 80017a4:	4798      	blx	r3
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	db28      	blt.n	80017fe <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	4798      	blx	r3
 80017b2:	4603      	mov	r3, r0
 80017b4:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80017b6:	e01c      	b.n	80017f2 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	4798      	blx	r3
 80017be:	4603      	mov	r3, r0
 80017c0:	461a      	mov	r2, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017ca:	d80e      	bhi.n	80017ea <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6810      	ldr	r0, [r2, #0]
 80017d4:	f107 0208 	add.w	r2, r7, #8
 80017d8:	2100      	movs	r1, #0
 80017da:	4798      	blx	r3
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	da07      	bge.n	80017f2 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80017e2:	f06f 0304 	mvn.w	r3, #4
 80017e6:	613b      	str	r3, [r7, #16]
                 break;
 80017e8:	e010      	b.n	800180c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80017ea:	f06f 0301 	mvn.w	r3, #1
 80017ee:	613b      	str	r3, [r7, #16]
               break;
 80017f0:	e00c      	b.n	800180c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1dd      	bne.n	80017b8 <LAN8742_Init+0xc6>
 80017fc:	e006      	b.n	800180c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80017fe:	f06f 0304 	mvn.w	r3, #4
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	e002      	b.n	800180c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001806:	f06f 0303 	mvn.w	r3, #3
 800180a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d112      	bne.n	8001838 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	4798      	blx	r3
 8001818:	4603      	mov	r3, r0
 800181a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800181c:	bf00      	nop
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	4798      	blx	r3
 8001824:	4603      	mov	r3, r0
 8001826:	461a      	mov	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001830:	d9f5      	bls.n	800181e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2201      	movs	r2, #1
 8001836:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001838:	693b      	ldr	r3, [r7, #16]
 }
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b084      	sub	sp, #16
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6810      	ldr	r0, [r2, #0]
 8001856:	f107 020c 	add.w	r2, r7, #12
 800185a:	2101      	movs	r1, #1
 800185c:	4798      	blx	r3
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	da02      	bge.n	800186a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001864:	f06f 0304 	mvn.w	r3, #4
 8001868:	e06e      	b.n	8001948 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	6810      	ldr	r0, [r2, #0]
 8001872:	f107 020c 	add.w	r2, r7, #12
 8001876:	2101      	movs	r1, #1
 8001878:	4798      	blx	r3
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	da02      	bge.n	8001886 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001880:	f06f 0304 	mvn.w	r3, #4
 8001884:	e060      	b.n	8001948 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	d101      	bne.n	8001894 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001890:	2301      	movs	r3, #1
 8001892:	e059      	b.n	8001948 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	695b      	ldr	r3, [r3, #20]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6810      	ldr	r0, [r2, #0]
 800189c:	f107 020c 	add.w	r2, r7, #12
 80018a0:	2100      	movs	r1, #0
 80018a2:	4798      	blx	r3
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	da02      	bge.n	80018b0 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80018aa:	f06f 0304 	mvn.w	r3, #4
 80018ae:	e04b      	b.n	8001948 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d11b      	bne.n	80018f2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d006      	beq.n	80018d2 <LAN8742_GetLinkState+0x90>
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80018ce:	2302      	movs	r3, #2
 80018d0:	e03a      	b.n	8001948 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80018dc:	2303      	movs	r3, #3
 80018de:	e033      	b.n	8001948 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80018ea:	2304      	movs	r3, #4
 80018ec:	e02c      	b.n	8001948 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80018ee:	2305      	movs	r3, #5
 80018f0:	e02a      	b.n	8001948 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6810      	ldr	r0, [r2, #0]
 80018fa:	f107 020c 	add.w	r2, r7, #12
 80018fe:	211f      	movs	r1, #31
 8001900:	4798      	blx	r3
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	da02      	bge.n	800190e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001908:	f06f 0304 	mvn.w	r3, #4
 800190c:	e01c      	b.n	8001948 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001918:	2306      	movs	r3, #6
 800191a:	e015      	b.n	8001948 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 031c 	and.w	r3, r3, #28
 8001922:	2b18      	cmp	r3, #24
 8001924:	d101      	bne.n	800192a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001926:	2302      	movs	r3, #2
 8001928:	e00e      	b.n	8001948 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f003 031c 	and.w	r3, r3, #28
 8001930:	2b08      	cmp	r3, #8
 8001932:	d101      	bne.n	8001938 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001934:	2303      	movs	r3, #3
 8001936:	e007      	b.n	8001948 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f003 031c 	and.w	r3, r3, #28
 800193e:	2b14      	cmp	r3, #20
 8001940:	d101      	bne.n	8001946 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001942:	2304      	movs	r3, #4
 8001944:	e000      	b.n	8001948 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001946:	2305      	movs	r3, #5
    }				
  }
}
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001956:	2003      	movs	r0, #3
 8001958:	f000 f952 	bl	8001c00 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800195c:	f002 ffb4 	bl	80048c8 <HAL_RCC_GetSysClockFreq>
 8001960:	4602      	mov	r2, r0
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <HAL_Init+0x68>)
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	0a1b      	lsrs	r3, r3, #8
 8001968:	f003 030f 	and.w	r3, r3, #15
 800196c:	4913      	ldr	r1, [pc, #76]	; (80019bc <HAL_Init+0x6c>)
 800196e:	5ccb      	ldrb	r3, [r1, r3]
 8001970:	f003 031f 	and.w	r3, r3, #31
 8001974:	fa22 f303 	lsr.w	r3, r2, r3
 8001978:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800197a:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <HAL_Init+0x68>)
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	4a0e      	ldr	r2, [pc, #56]	; (80019bc <HAL_Init+0x6c>)
 8001984:	5cd3      	ldrb	r3, [r2, r3]
 8001986:	f003 031f 	and.w	r3, r3, #31
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	fa22 f303 	lsr.w	r3, r2, r3
 8001990:	4a0b      	ldr	r2, [pc, #44]	; (80019c0 <HAL_Init+0x70>)
 8001992:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001994:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <HAL_Init+0x74>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800199a:	2000      	movs	r0, #0
 800199c:	f000 f814 	bl	80019c8 <HAL_InitTick>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e002      	b.n	80019b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019aa:	f7ff f97f 	bl	8000cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	58024400 	.word	0x58024400
 80019bc:	08016710 	.word	0x08016710
 80019c0:	24000004 	.word	0x24000004
 80019c4:	24000000 	.word	0x24000000

080019c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80019d0:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <HAL_InitTick+0x60>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e021      	b.n	8001a20 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80019dc:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <HAL_InitTick+0x64>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <HAL_InitTick+0x60>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 f929 	bl	8001c4a <HAL_SYSTICK_Config>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e00e      	b.n	8001a20 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b0f      	cmp	r3, #15
 8001a06:	d80a      	bhi.n	8001a1e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a10:	f000 f901 	bl	8001c16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a14:	4a06      	ldr	r2, [pc, #24]	; (8001a30 <HAL_InitTick+0x68>)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	e000      	b.n	8001a20 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	2400000c 	.word	0x2400000c
 8001a2c:	24000000 	.word	0x24000000
 8001a30:	24000008 	.word	0x24000008

08001a34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_IncTick+0x20>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_IncTick+0x24>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4413      	add	r3, r2
 8001a44:	4a04      	ldr	r2, [pc, #16]	; (8001a58 <HAL_IncTick+0x24>)
 8001a46:	6013      	str	r3, [r2, #0]
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	2400000c 	.word	0x2400000c
 8001a58:	24000380 	.word	0x24000380

08001a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <HAL_GetTick+0x14>)
 8001a62:	681b      	ldr	r3, [r3, #0]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	24000380 	.word	0x24000380

08001a74 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001a84:	4904      	ldr	r1, [pc, #16]	; (8001a98 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	604b      	str	r3, [r1, #4]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	58000400 	.word	0x58000400

08001a9c <__NVIC_SetPriorityGrouping>:
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aac:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <__NVIC_SetPriorityGrouping+0x40>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aca:	4a04      	ldr	r2, [pc, #16]	; (8001adc <__NVIC_SetPriorityGrouping+0x40>)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	60d3      	str	r3, [r2, #12]
}
 8001ad0:	bf00      	nop
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000ed00 	.word	0xe000ed00
 8001ae0:	05fa0000 	.word	0x05fa0000

08001ae4 <__NVIC_GetPriorityGrouping>:
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae8:	4b04      	ldr	r3, [pc, #16]	; (8001afc <__NVIC_GetPriorityGrouping+0x18>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	0a1b      	lsrs	r3, r3, #8
 8001aee:	f003 0307 	and.w	r3, r3, #7
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <__NVIC_SetPriority>:
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	6039      	str	r1, [r7, #0]
 8001b0a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	db0a      	blt.n	8001b2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	490c      	ldr	r1, [pc, #48]	; (8001b4c <__NVIC_SetPriority+0x4c>)
 8001b1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b1e:	0112      	lsls	r2, r2, #4
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	440b      	add	r3, r1
 8001b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b28:	e00a      	b.n	8001b40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4908      	ldr	r1, [pc, #32]	; (8001b50 <__NVIC_SetPriority+0x50>)
 8001b30:	88fb      	ldrh	r3, [r7, #6]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	3b04      	subs	r3, #4
 8001b38:	0112      	lsls	r2, r2, #4
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	761a      	strb	r2, [r3, #24]
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000e100 	.word	0xe000e100
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <NVIC_EncodePriority>:
{
 8001b54:	b480      	push	{r7}
 8001b56:	b089      	sub	sp, #36	; 0x24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f1c3 0307 	rsb	r3, r3, #7
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	bf28      	it	cs
 8001b72:	2304      	movcs	r3, #4
 8001b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	2b06      	cmp	r3, #6
 8001b7c:	d902      	bls.n	8001b84 <NVIC_EncodePriority+0x30>
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3b03      	subs	r3, #3
 8001b82:	e000      	b.n	8001b86 <NVIC_EncodePriority+0x32>
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	f04f 32ff 	mov.w	r2, #4294967295
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43da      	mvns	r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	401a      	ands	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba6:	43d9      	mvns	r1, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bac:	4313      	orrs	r3, r2
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3724      	adds	r7, #36	; 0x24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bcc:	d301      	bcc.n	8001bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e00f      	b.n	8001bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <SysTick_Config+0x40>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bda:	210f      	movs	r1, #15
 8001bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001be0:	f7ff ff8e 	bl	8001b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be4:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <SysTick_Config+0x40>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bea:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <SysTick_Config+0x40>)
 8001bec:	2207      	movs	r2, #7
 8001bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	e000e010 	.word	0xe000e010

08001c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff ff47 	bl	8001a9c <__NVIC_SetPriorityGrouping>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b086      	sub	sp, #24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c24:	f7ff ff5e 	bl	8001ae4 <__NVIC_GetPriorityGrouping>
 8001c28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	68b9      	ldr	r1, [r7, #8]
 8001c2e:	6978      	ldr	r0, [r7, #20]
 8001c30:	f7ff ff90 	bl	8001b54 <NVIC_EncodePriority>
 8001c34:	4602      	mov	r2, r0
 8001c36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff5f 	bl	8001b00 <__NVIC_SetPriority>
}
 8001c42:	bf00      	nop
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff ffb2 	bl	8001bbc <SysTick_Config>
 8001c58:	4603      	mov	r3, r0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001c68:	f3bf 8f5f 	dmb	sy
}
 8001c6c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001c6e:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <HAL_MPU_Disable+0x28>)
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	4a06      	ldr	r2, [pc, #24]	; (8001c8c <HAL_MPU_Disable+0x28>)
 8001c74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c78:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001c7a:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <HAL_MPU_Disable+0x2c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	605a      	str	r2, [r3, #4]
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000ed00 	.word	0xe000ed00
 8001c90:	e000ed90 	.word	0xe000ed90

08001c94 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001c9c:	4a0b      	ldr	r2, [pc, #44]	; (8001ccc <HAL_MPU_Enable+0x38>)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <HAL_MPU_Enable+0x3c>)
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	4a09      	ldr	r2, [pc, #36]	; (8001cd0 <HAL_MPU_Enable+0x3c>)
 8001cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001cb2:	f3bf 8f4f 	dsb	sy
}
 8001cb6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cb8:	f3bf 8f6f 	isb	sy
}
 8001cbc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	e000ed90 	.word	0xe000ed90
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	785a      	ldrb	r2, [r3, #1]
 8001ce0:	4b1d      	ldr	r3, [pc, #116]	; (8001d58 <HAL_MPU_ConfigRegion+0x84>)
 8001ce2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d029      	beq.n	8001d40 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001cec:	4a1a      	ldr	r2, [pc, #104]	; (8001d58 <HAL_MPU_ConfigRegion+0x84>)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	7b1b      	ldrb	r3, [r3, #12]
 8001cf8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	7adb      	ldrb	r3, [r3, #11]
 8001cfe:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d00:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	7a9b      	ldrb	r3, [r3, #10]
 8001d06:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d08:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	7b5b      	ldrb	r3, [r3, #13]
 8001d0e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d10:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	7b9b      	ldrb	r3, [r3, #14]
 8001d16:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d18:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	7bdb      	ldrb	r3, [r3, #15]
 8001d1e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d20:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	7a5b      	ldrb	r3, [r3, #9]
 8001d26:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d28:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	7a1b      	ldrb	r3, [r3, #8]
 8001d2e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d30:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	7812      	ldrb	r2, [r2, #0]
 8001d36:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d38:	4a07      	ldr	r2, [pc, #28]	; (8001d58 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d3a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d3c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001d3e:	e005      	b.n	8001d4c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <HAL_MPU_ConfigRegion+0x84>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001d46:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <HAL_MPU_ConfigRegion+0x84>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	611a      	str	r2, [r3, #16]
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	e000ed90 	.word	0xe000ed90

08001d5c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e0c6      	b.n	8001efc <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d102      	bne.n	8001d7c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f005 fdd0 	bl	800791c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2223      	movs	r2, #35	; 0x23
 8001d80:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d82:	4b60      	ldr	r3, [pc, #384]	; (8001f04 <HAL_ETH_Init+0x1a8>)
 8001d84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d88:	4a5e      	ldr	r2, [pc, #376]	; (8001f04 <HAL_ETH_Init+0x1a8>)
 8001d8a:	f043 0302 	orr.w	r3, r3, #2
 8001d8e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d92:	4b5c      	ldr	r3, [pc, #368]	; (8001f04 <HAL_ETH_Init+0x1a8>)
 8001d94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	7a1b      	ldrb	r3, [r3, #8]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d103      	bne.n	8001db0 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001da8:	2000      	movs	r0, #0
 8001daa:	f7ff fe63 	bl	8001a74 <HAL_SYSCFG_ETHInterfaceSelect>
 8001dae:	e003      	b.n	8001db8 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001db0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001db4:	f7ff fe5e 	bl	8001a74 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 0201 	orr.w	r2, r2, #1
 8001dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dd0:	f7ff fe44 	bl	8001a5c <HAL_GetTick>
 8001dd4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001dd6:	e00f      	b.n	8001df8 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001dd8:	f7ff fe40 	bl	8001a5c <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001de6:	d907      	bls.n	8001df8 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2204      	movs	r2, #4
 8001dec:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	22e0      	movs	r2, #224	; 0xe0
 8001df2:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e081      	b.n	8001efc <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1e6      	bne.n	8001dd8 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f001 f95c 	bl	80030c8 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001e10:	f002 fed4 	bl	8004bbc <HAL_RCC_GetHCLKFreq>
 8001e14:	4603      	mov	r3, r0
 8001e16:	4a3c      	ldr	r2, [pc, #240]	; (8001f08 <HAL_ETH_Init+0x1ac>)
 8001e18:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1c:	0c9a      	lsrs	r2, r3, #18
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	3a01      	subs	r2, #1
 8001e24:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f001 f8af 	bl	8002f8c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001e44:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001e48:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d007      	beq.n	8001e66 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	22e0      	movs	r2, #224	; 0xe0
 8001e60:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e04a      	b.n	8001efc <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	f241 1308 	movw	r3, #4360	; 0x1108
 8001e6e:	4413      	add	r3, r2
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	4b26      	ldr	r3, [pc, #152]	; (8001f0c <HAL_ETH_Init+0x1b0>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6952      	ldr	r2, [r2, #20]
 8001e7a:	0052      	lsls	r2, r2, #1
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	6809      	ldr	r1, [r1, #0]
 8001e80:	431a      	orrs	r2, r3
 8001e82:	f241 1308 	movw	r3, #4360	; 0x1108
 8001e86:	440b      	add	r3, r1
 8001e88:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f001 f974 	bl	8003178 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f001 f9b8 	bl	8003206 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	3305      	adds	r3, #5
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	021a      	lsls	r2, r3, #8
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	3303      	adds	r3, #3
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	061a      	lsls	r2, r3, #24
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	3302      	adds	r3, #2
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	041b      	lsls	r3, r3, #16
 8001ec8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001ed4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001ee2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001ee4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2210      	movs	r2, #16
 8001ef2:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2210      	movs	r2, #16
 8001ef8:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	58024400 	.word	0x58024400
 8001f08:	431bde83 	.word	0x431bde83
 8001f0c:	ffff8001 	.word	0xffff8001

08001f10 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b087      	sub	sp, #28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
 8001f1c:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	3310      	adds	r3, #16
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d002      	beq.n	8001f38 <HAL_ETH_DescAssignMemory+0x28>
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d904      	bls.n	8001f42 <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e021      	b.n	8001f86 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00b      	beq.n	8001f78 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	371c      	adds	r7, #28
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  if(heth->gState == HAL_ETH_STATE_READY)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f9e:	2b10      	cmp	r3, #16
 8001fa0:	d14c      	bne.n	800203c <HAL_ETH_Start+0xaa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2223      	movs	r2, #35	; 0x23
 8001fa6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 0202 	orr.w	r2, r2, #2
 8001fb6:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0201 	orr.w	r2, r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f042 0201 	orr.w	r2, r2, #1
 8001fd8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	f241 1304 	movw	r3, #4356	; 0x1104
 8001fe4:	4413      	add	r3, r2
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6811      	ldr	r1, [r2, #0]
 8001fec:	f043 0201 	orr.w	r2, r3, #1
 8001ff0:	f241 1304 	movw	r3, #4356	; 0x1104
 8001ff4:	440b      	add	r3, r1
 8001ff6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	f241 1308 	movw	r3, #4360	; 0x1108
 8002000:	4413      	add	r3, r2
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6811      	ldr	r1, [r2, #0]
 8002008:	f043 0201 	orr.w	r2, r3, #1
 800200c:	f241 1308 	movw	r3, #4360	; 0x1108
 8002010:	440b      	add	r3, r1
 8002012:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8002026:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800202a:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2210      	movs	r2, #16
 8002030:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2222      	movs	r2, #34	; 0x22
 8002036:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002038:	2300      	movs	r3, #0
 800203a:	e000      	b.n	800203e <HAL_ETH_Start+0xac>
  }
  else
  {
    return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
  }
}
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  if(heth->gState != HAL_ETH_STATE_RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002056:	2b00      	cmp	r3, #0
 8002058:	d040      	beq.n	80020dc <HAL_ETH_Stop+0x92>
  {
     /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2223      	movs	r2, #35	; 0x23
 800205e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	f241 1304 	movw	r3, #4356	; 0x1104
 8002068:	4413      	add	r3, r2
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6811      	ldr	r1, [r2, #0]
 8002070:	f023 0201 	bic.w	r2, r3, #1
 8002074:	f241 1304 	movw	r3, #4356	; 0x1104
 8002078:	440b      	add	r3, r1
 800207a:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	f241 1308 	movw	r3, #4360	; 0x1108
 8002084:	4413      	add	r3, r2
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6811      	ldr	r1, [r2, #0]
 800208c:	f023 0201 	bic.w	r2, r3, #1
 8002090:	f241 1308 	movw	r3, #4360	; 0x1108
 8002094:	440b      	add	r3, r1
 8002096:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0201 	bic.w	r2, r2, #1
 80020a6:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f042 0201 	orr.w	r2, r2, #1
 80020b8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0202 	bic.w	r2, r2, #2
 80020ca:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2210      	movs	r2, #16
 80020d0:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2210      	movs	r2, #16
 80020d6:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	e000      	b.n	80020de <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
  }
}
 80020de:	4618      	mov	r0, r3
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b086      	sub	sp, #24
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	60f8      	str	r0, [r7, #12]
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d107      	bne.n	800210c <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002100:	f043 0201 	orr.w	r2, r3, #1
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e073      	b.n	80021f4 <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002110:	2b10      	cmp	r3, #16
 8002112:	d16e      	bne.n	80021f2 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002114:	2200      	movs	r2, #0
 8002116:	68b9      	ldr	r1, [r7, #8]
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f001 f8d1 	bl	80032c0 <ETH_Prepare_Tx_Descriptors>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d007      	beq.n	8002134 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002128:	f043 0202 	orr.w	r2, r3, #2
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e05f      	b.n	80021f4 <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	3206      	adds	r2, #6
 800213c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002140:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002146:	1c5a      	adds	r2, r3, #1
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	629a      	str	r2, [r3, #40]	; 0x28
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002150:	2b03      	cmp	r3, #3
 8002152:	d904      	bls.n	800215e <HAL_ETH_Transmit+0x74>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002158:	1f1a      	subs	r2, r3, #4
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	3106      	adds	r1, #6
 800216a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800216e:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002172:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8002174:	f7ff fc72 	bl	8001a5c <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 800217a:	e034      	b.n	80021e6 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d011      	beq.n	80021b2 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002192:	f043 0208 	orr.w	r2, r3, #8
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	22e0      	movs	r2, #224	; 0xe0
 80021ac:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e020      	b.n	80021f4 <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b8:	d015      	beq.n	80021e6 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 80021ba:	f7ff fc4f 	bl	8001a5c <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d302      	bcc.n	80021d0 <HAL_ETH_Transmit+0xe6>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10a      	bne.n	80021e6 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021d4:	f043 0204 	orr.w	r2, r3, #4
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	22e0      	movs	r2, #224	; 0xe0
 80021e0:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e006      	b.n	80021f4 <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	dbc6      	blt.n	800217c <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	e000      	b.n	80021f4 <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
  }
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b089      	sub	sp, #36	; 0x24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3344      	adds	r3, #68	; 0x44
 8002208:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	69fa      	ldr	r2, [r7, #28]
 8002214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002218:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d06b      	beq.n	8002306 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 800222e:	2300      	movs	r3, #0
 8002230:	e0ce      	b.n	80023d0 <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	3301      	adds	r3, #1
 8002236:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d036      	beq.n	80022b2 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	3301      	adds	r3, #1
 8002248:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d101      	bne.n	8002254 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	3301      	adds	r3, #1
 8002258:	61fb      	str	r3, [r7, #28]
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	2b03      	cmp	r3, #3
 800225e:	d902      	bls.n	8002266 <HAL_ETH_IsRxDataAvailable+0x6a>
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	3b04      	subs	r3, #4
 8002264:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	69fa      	ldr	r2, [r7, #28]
 800226a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800226e:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	2b00      	cmp	r3, #0
 8002276:	db11      	blt.n	800229c <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00b      	beq.n	800229c <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2201      	movs	r2, #1
 8002288:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3301      	adds	r3, #1
 800228e:	61fb      	str	r3, [r7, #28]
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	2b03      	cmp	r3, #3
 8002294:	d902      	bls.n	800229c <HAL_ETH_IsRxDataAvailable+0xa0>
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3b04      	subs	r3, #4
 800229a:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	69fa      	ldr	r2, [r7, #28]
 80022a0:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e08e      	b.n	80023d0 <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d012      	beq.n	80022e4 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 80022c2:	2301      	movs	r3, #1
 80022c4:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	3301      	adds	r3, #1
 80022ca:	61fb      	str	r3, [r7, #28]
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	2b03      	cmp	r3, #3
 80022d0:	d902      	bls.n	80022d8 <HAL_ETH_IsRxDataAvailable+0xdc>
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	3b04      	subs	r3, #4
 80022d6:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	69fa      	ldr	r2, [r7, #28]
 80022dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e0:	61bb      	str	r3, [r7, #24]
 80022e2:	e010      	b.n	8002306 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	3301      	adds	r3, #1
 80022e8:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3301      	adds	r3, #1
 80022ee:	61fb      	str	r3, [r7, #28]
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d902      	bls.n	80022fc <HAL_ETH_IsRxDataAvailable+0x100>
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3b04      	subs	r3, #4
 80022fa:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	69fa      	ldr	r2, [r7, #28]
 8002300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002304:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	2b00      	cmp	r3, #0
 800230c:	db02      	blt.n	8002314 <HAL_ETH_IsRxDataAvailable+0x118>
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	2b03      	cmp	r3, #3
 8002312:	d98e      	bls.n	8002232 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d056      	beq.n	80023c8 <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	69fa      	ldr	r2, [r7, #28]
 800231e:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	69fa      	ldr	r2, [r7, #28]
 800232e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002332:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	e03b      	b.n	80023b2 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	691a      	ldr	r2, [r3, #16]
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002348:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d009      	beq.n	8002366 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	695a      	ldr	r2, [r3, #20]
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d005      	beq.n	8002386 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	3b01      	subs	r3, #1
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	429a      	cmp	r2, r3
 800238e:	d20d      	bcs.n	80023ac <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	3301      	adds	r3, #1
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	2b03      	cmp	r3, #3
 800239a:	d902      	bls.n	80023a2 <HAL_ETH_IsRxDataAvailable+0x1a6>
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	3b04      	subs	r3, #4
 80023a0:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	69fa      	ldr	r2, [r7, #28]
 80023a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023aa:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	3301      	adds	r3, #1
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d3bf      	bcc.n	800233a <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6819      	ldr	r1, [r3, #0]
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	f241 1328 	movw	r3, #4392	; 0x1128
 80023c4:	440b      	add	r3, r1
 80023c6:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2200      	movs	r2, #0
 80023cc:	619a      	str	r2, [r3, #24]

  return 0;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3724      	adds	r7, #36	; 0x24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08a      	sub	sp, #40	; 0x28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3344      	adds	r3, #68	; 0x44
 80023ea:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023fe:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d104      	bne.n	8002414 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e07d      	b.n	8002510 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10f      	bne.n	800243c <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff feed 	bl	80021fc <HAL_ETH_IsRxDataAvailable>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e071      	b.n	8002510 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800243a:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 800243c:	2300      	movs	r3, #0
 800243e:	623b      	str	r3, [r7, #32]
 8002440:	e031      	b.n	80024a6 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	461a      	mov	r2, r3
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	695a      	ldr	r2, [r3, #20]
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00b      	beq.n	8002474 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	461a      	mov	r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	695a      	ldr	r2, [r3, #20]
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800247c:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	3301      	adds	r3, #1
 8002482:	627b      	str	r3, [r7, #36]	; 0x24
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	2b03      	cmp	r3, #3
 8002488:	d902      	bls.n	8002490 <HAL_ETH_GetRxDataBuffer+0xb4>
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	3b04      	subs	r3, #4
 800248e:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002498:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	3301      	adds	r3, #1
 80024a4:	623b      	str	r3, [r7, #32]
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	6a3a      	ldr	r2, [r7, #32]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d3c7      	bcc.n	8002442 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	461a      	mov	r2, r3
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d803      	bhi.n	80024dc <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	e018      	b.n	800250e <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d012      	beq.n	800250a <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	695a      	ldr	r2, [r3, #20]
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	461a      	mov	r2, r3
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	1ad2      	subs	r2, r2, r3
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	605a      	str	r2, [r3, #4]
 8002508:	e001      	b.n	800250e <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3728      	adds	r7, #40	; 0x28
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	3344      	adds	r3, #68	; 0x44
 8002526:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d107      	bne.n	8002546 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff fe60 	bl	80021fc <HAL_ETH_IsRxDataAvailable>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e017      	b.n	8002576 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	699a      	ldr	r2, [r3, #24]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	4413      	add	r3, r2
 800254e:	3b01      	subs	r3, #1
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2b03      	cmp	r3, #3
 8002556:	d902      	bls.n	800255e <HAL_ETH_GetRxDataLength+0x46>
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	3b04      	subs	r3, #4
 800255c:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002566:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3718      	adds	r7, #24
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 800257e:	b480      	push	{r7}
 8002580:	b089      	sub	sp, #36	; 0x24
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3344      	adds	r3, #68	; 0x44
 800258a:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	69fa      	ldr	r2, [r7, #28]
 8002596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800259a:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e057      	b.n	800265e <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	3301      	adds	r3, #1
 80025ba:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80025bc:	2300      	movs	r3, #0
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	e03b      	b.n	800263a <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	691a      	ldr	r2, [r3, #16]
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025d0:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d009      	beq.n	80025ee <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	695a      	ldr	r2, [r3, #20]
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d005      	beq.n	800260e <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	3b01      	subs	r3, #1
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	429a      	cmp	r2, r3
 8002616:	d20d      	bcs.n	8002634 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	3301      	adds	r3, #1
 800261c:	61fb      	str	r3, [r7, #28]
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	2b03      	cmp	r3, #3
 8002622:	d902      	bls.n	800262a <HAL_ETH_BuildRxDescriptors+0xac>
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	3b04      	subs	r3, #4
 8002628:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	69fa      	ldr	r2, [r7, #28]
 800262e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002632:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	3301      	adds	r3, #1
 8002638:	613b      	str	r3, [r7, #16]
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	429a      	cmp	r2, r3
 8002640:	d3bf      	bcc.n	80025c2 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6819      	ldr	r1, [r3, #0]
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	f241 1328 	movw	r3, #4392	; 0x1128
 800264c:	440b      	add	r3, r1
 800264e:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3724      	adds	r7, #36	; 0x24
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b086      	sub	sp, #24
 800266e:	af00      	add	r7, sp, #0
 8002670:	60f8      	str	r0, [r7, #12]
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	607a      	str	r2, [r7, #4]
 8002676:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e03e      	b.n	800270a <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002694:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	055b      	lsls	r3, r3, #21
 80026a0:	4313      	orrs	r3, r2
 80026a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	041b      	lsls	r3, r3, #16
 80026ae:	4313      	orrs	r3, r2
 80026b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f043 030c 	orr.w	r3, r3, #12
 80026b8:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80026cc:	f7ff f9c6 	bl	8001a5c <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80026d2:	e009      	b.n	80026e8 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80026d4:	f7ff f9c2 	bl	8001a5c <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026e2:	d901      	bls.n	80026e8 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e010      	b.n	800270a <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1ed      	bne.n	80026d4 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002700:	b29b      	uxth	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
	...

08002714 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
 8002720:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e03c      	b.n	80027b0 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800273e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	055b      	lsls	r3, r3, #21
 800274a:	4313      	orrs	r3, r2
 800274c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	041b      	lsls	r3, r3, #16
 8002758:	4313      	orrs	r3, r2
 800275a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f023 030c 	bic.w	r3, r3, #12
 8002762:	f043 0304 	orr.w	r3, r3, #4
 8002766:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	b29a      	uxth	r2, r3
 8002774:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <HAL_ETH_WritePHYRegister+0xa4>)
 8002776:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800277a:	4a0f      	ldr	r2, [pc, #60]	; (80027b8 <HAL_ETH_WritePHYRegister+0xa4>)
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002782:	f7ff f96b 	bl	8001a5c <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002788:	e009      	b.n	800279e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 800278a:	f7ff f967 	bl	8001a5c <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002798:	d901      	bls.n	800279e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e008      	b.n	80027b0 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1ed      	bne.n	800278a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40028000 	.word	0x40028000

080027bc <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e1c3      	b.n	8002b58 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 020c 	and.w	r2, r3, #12
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0310 	and.w	r3, r3, #16
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	bf14      	ite	ne
 80027ec:	2301      	movne	r3, #1
 80027ee:	2300      	moveq	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	461a      	mov	r2, r3
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002812:	2b00      	cmp	r3, #0
 8002814:	bf0c      	ite	eq
 8002816:	2301      	moveq	r3, #1
 8002818:	2300      	movne	r3, #0
 800281a:	b2db      	uxtb	r3, r3
 800281c:	461a      	mov	r2, r3
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800282e:	2b00      	cmp	r3, #0
 8002830:	bf14      	ite	ne
 8002832:	2301      	movne	r3, #1
 8002834:	2300      	moveq	r3, #0
 8002836:	b2db      	uxtb	r3, r3
 8002838:	461a      	mov	r2, r3
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002848:	2b00      	cmp	r3, #0
 800284a:	bf0c      	ite	eq
 800284c:	2301      	moveq	r3, #1
 800284e:	2300      	movne	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	461a      	mov	r2, r3
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002862:	2b00      	cmp	r3, #0
 8002864:	bf14      	ite	ne
 8002866:	2301      	movne	r3, #1
 8002868:	2300      	moveq	r3, #0
 800286a:	b2db      	uxtb	r3, r3
 800286c:	461a      	mov	r2, r3
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800287c:	2b00      	cmp	r3, #0
 800287e:	bf14      	ite	ne
 8002880:	2301      	movne	r3, #1
 8002882:	2300      	moveq	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	461a      	mov	r2, r3
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	bf14      	ite	ne
 80028b6:	2301      	movne	r3, #1
 80028b8:	2300      	moveq	r3, #0
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	461a      	mov	r2, r3
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	bf0c      	ite	eq
 80028d0:	2301      	moveq	r3, #1
 80028d2:	2300      	movne	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	461a      	mov	r2, r3
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	bf0c      	ite	eq
 80028ea:	2301      	moveq	r3, #1
 80028ec:	2300      	movne	r3, #0
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	461a      	mov	r2, r3
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002900:	2b00      	cmp	r3, #0
 8002902:	bf14      	ite	ne
 8002904:	2301      	movne	r3, #1
 8002906:	2300      	moveq	r3, #0
 8002908:	b2db      	uxtb	r3, r3
 800290a:	461a      	mov	r2, r3
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800291a:	2b00      	cmp	r3, #0
 800291c:	bf14      	ite	ne
 800291e:	2301      	movne	r3, #1
 8002920:	2300      	moveq	r3, #0
 8002922:	b2db      	uxtb	r3, r3
 8002924:	461a      	mov	r2, r3
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002934:	2b00      	cmp	r3, #0
 8002936:	bf14      	ite	ne
 8002938:	2301      	movne	r3, #1
 800293a:	2300      	moveq	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	461a      	mov	r2, r3
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800294e:	2b00      	cmp	r3, #0
 8002950:	bf14      	ite	ne
 8002952:	2301      	movne	r3, #1
 8002954:	2300      	moveq	r3, #0
 8002956:	b2db      	uxtb	r3, r3
 8002958:	461a      	mov	r2, r3
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	bf14      	ite	ne
 800297a:	2301      	movne	r3, #1
 800297c:	2300      	moveq	r3, #0
 800297e:	b2db      	uxtb	r3, r3
 8002980:	461a      	mov	r2, r3
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	bf0c      	ite	eq
 80029b0:	2301      	moveq	r3, #1
 80029b2:	2300      	movne	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	461a      	mov	r2, r3
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	bf14      	ite	ne
 80029cc:	2301      	movne	r3, #1
 80029ce:	2300      	moveq	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	461a      	mov	r2, r3
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	bf14      	ite	ne
 80029e8:	2301      	movne	r3, #1
 80029ea:	2300      	moveq	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	461a      	mov	r2, r3
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	bf14      	ite	ne
 8002a04:	2301      	movne	r3, #1
 8002a06:	2300      	moveq	r3, #0
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	0e5b      	lsrs	r3, r3, #25
 8002a1a:	f003 021f 	and.w	r2, r3, #31
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	bf14      	ite	ne
 8002a30:	2301      	movne	r3, #1
 8002a32:	2300      	moveq	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	461a      	mov	r2, r3
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f003 020f 	and.w	r2, r3, #15
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	bf14      	ite	ne
 8002a5a:	2301      	movne	r3, #1
 8002a5c:	2300      	moveq	r3, #0
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	bf0c      	ite	eq
 8002a76:	2301      	moveq	r3, #1
 8002a78:	2300      	movne	r3, #0
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a98:	0c1b      	lsrs	r3, r3, #16
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	bf14      	ite	ne
 8002ab0:	2301      	movne	r3, #1
 8002ab2:	2300      	moveq	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	bf14      	ite	ne
 8002ace:	2301      	movne	r3, #1
 8002ad0:	2300      	moveq	r3, #0
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002ae4:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002af4:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	bf14      	ite	ne
 8002b0c:	2301      	movne	r3, #1
 8002b0e:	2300      	moveq	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	461a      	mov	r2, r3
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002b22:	f003 0310 	and.w	r3, r3, #16
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	bf14      	ite	ne
 8002b2a:	2301      	movne	r3, #1
 8002b2c:	2300      	moveq	r3, #0
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	461a      	mov	r2, r3
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	bf0c      	ite	eq
 8002b48:	2301      	moveq	r3, #1
 8002b4a:	2300      	movne	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	461a      	mov	r2, r3
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e00a      	b.n	8002b8e <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7c:	2b10      	cmp	r3, #16
 8002b7e:	d105      	bne.n	8002b8c <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8002b80:	6839      	ldr	r1, [r7, #0]
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f860 	bl	8002c48 <ETH_SetMACConfig>

    return HAL_OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	e000      	b.n	8002b8e <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
  }
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
	...

08002b98 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ba8:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bb0:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002bb2:	f002 f803 	bl	8004bbc <HAL_RCC_GetHCLKFreq>
 8002bb6:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	4a1e      	ldr	r2, [pc, #120]	; (8002c34 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d908      	bls.n	8002bd2 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	4a1d      	ldr	r2, [pc, #116]	; (8002c38 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d804      	bhi.n	8002bd2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	e027      	b.n	8002c22 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	4a18      	ldr	r2, [pc, #96]	; (8002c38 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d908      	bls.n	8002bec <HAL_ETH_SetMDIOClockRange+0x54>
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	4a17      	ldr	r2, [pc, #92]	; (8002c3c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d204      	bcs.n	8002bec <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	e01a      	b.n	8002c22 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	4a13      	ldr	r2, [pc, #76]	; (8002c3c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d303      	bcc.n	8002bfc <HAL_ETH_SetMDIOClockRange+0x64>
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	4a12      	ldr	r2, [pc, #72]	; (8002c40 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d911      	bls.n	8002c20 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	4a10      	ldr	r2, [pc, #64]	; (8002c40 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d908      	bls.n	8002c16 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	4a0f      	ldr	r2, [pc, #60]	; (8002c44 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d804      	bhi.n	8002c16 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	e005      	b.n	8002c22 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	e000      	b.n	8002c22 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002c20:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002c2c:	bf00      	nop
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	01312cff 	.word	0x01312cff
 8002c38:	02160ebf 	.word	0x02160ebf
 8002c3c:	03938700 	.word	0x03938700
 8002c40:	05f5e0ff 	.word	0x05f5e0ff
 8002c44:	08f0d17f 	.word	0x08f0d17f

08002c48 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8002c5a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	791b      	ldrb	r3, [r3, #4]
 8002c60:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8002c62:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	7b1b      	ldrb	r3, [r3, #12]
 8002c68:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002c6a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	7b5b      	ldrb	r3, [r3, #13]
 8002c70:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002c72:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	7b9b      	ldrb	r3, [r3, #14]
 8002c78:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002c7a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	7bdb      	ldrb	r3, [r3, #15]
 8002c80:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002c82:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	7c12      	ldrb	r2, [r2, #16]
 8002c88:	2a00      	cmp	r2, #0
 8002c8a:	d102      	bne.n	8002c92 <ETH_SetMACConfig+0x4a>
 8002c8c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002c90:	e000      	b.n	8002c94 <ETH_SetMACConfig+0x4c>
 8002c92:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002c94:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	7c52      	ldrb	r2, [r2, #17]
 8002c9a:	2a00      	cmp	r2, #0
 8002c9c:	d102      	bne.n	8002ca4 <ETH_SetMACConfig+0x5c>
 8002c9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ca2:	e000      	b.n	8002ca6 <ETH_SetMACConfig+0x5e>
 8002ca4:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002ca6:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	7c9b      	ldrb	r3, [r3, #18]
 8002cac:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002cae:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002cb4:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8002cba:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	7f1b      	ldrb	r3, [r3, #28]
 8002cc0:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8002cc2:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	7f5b      	ldrb	r3, [r3, #29]
 8002cc8:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002cca:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	7f92      	ldrb	r2, [r2, #30]
 8002cd0:	2a00      	cmp	r2, #0
 8002cd2:	d102      	bne.n	8002cda <ETH_SetMACConfig+0x92>
 8002cd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cd8:	e000      	b.n	8002cdc <ETH_SetMACConfig+0x94>
 8002cda:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002cdc:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	7fdb      	ldrb	r3, [r3, #31]
 8002ce2:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002ce4:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002cec:	2a00      	cmp	r2, #0
 8002cee:	d102      	bne.n	8002cf6 <ETH_SetMACConfig+0xae>
 8002cf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cf4:	e000      	b.n	8002cf8 <ETH_SetMACConfig+0xb0>
 8002cf6:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002cf8:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002cfe:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d06:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002d08:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b56      	ldr	r3, [pc, #344]	; (8002e74 <ETH_SetMACConfig+0x22c>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6812      	ldr	r2, [r2, #0]
 8002d20:	68f9      	ldr	r1, [r7, #12]
 8002d22:	430b      	orrs	r3, r1
 8002d24:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d2a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d32:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002d34:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d3c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002d3e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002d46:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002d48:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002d50:	2a00      	cmp	r2, #0
 8002d52:	d102      	bne.n	8002d5a <ETH_SetMACConfig+0x112>
 8002d54:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d58:	e000      	b.n	8002d5c <ETH_SetMACConfig+0x114>
 8002d5a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002d5c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002d62:	4313      	orrs	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	4b42      	ldr	r3, [pc, #264]	; (8002e78 <ETH_SetMACConfig+0x230>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6812      	ldr	r2, [r2, #0]
 8002d74:	68f9      	ldr	r1, [r7, #12]
 8002d76:	430b      	orrs	r3, r1
 8002d78:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d80:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	4b3a      	ldr	r3, [pc, #232]	; (8002e7c <ETH_SetMACConfig+0x234>)
 8002d92:	4013      	ands	r3, r2
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	6812      	ldr	r2, [r2, #0]
 8002d98:	68f9      	ldr	r1, [r7, #12]
 8002d9a:	430b      	orrs	r3, r1
 8002d9c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002da4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002daa:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002db2:	2a00      	cmp	r2, #0
 8002db4:	d101      	bne.n	8002dba <ETH_SetMACConfig+0x172>
 8002db6:	2280      	movs	r2, #128	; 0x80
 8002db8:	e000      	b.n	8002dbc <ETH_SetMACConfig+0x174>
 8002dba:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002dbc:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002dce:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6812      	ldr	r2, [r2, #0]
 8002dd8:	68f9      	ldr	r1, [r7, #12]
 8002dda:	430b      	orrs	r3, r1
 8002ddc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002de4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002dec:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002dee:	4313      	orrs	r3, r2
 8002df0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfa:	f023 0103 	bic.w	r1, r3, #3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002e12:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002e2e:	2a00      	cmp	r2, #0
 8002e30:	d101      	bne.n	8002e36 <ETH_SetMACConfig+0x1ee>
 8002e32:	2240      	movs	r2, #64	; 0x40
 8002e34:	e000      	b.n	8002e38 <ETH_SetMACConfig+0x1f0>
 8002e36:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002e38:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002e40:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002e42:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002e4a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002e58:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002e68:	bf00      	nop
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	00048083 	.word	0x00048083
 8002e78:	c0f88000 	.word	0xc0f88000
 8002e7c:	fffffef0 	.word	0xfffffef0

08002e80 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	4b38      	ldr	r3, [pc, #224]	; (8002f78 <ETH_SetDMAConfig+0xf8>)
 8002e96:	4013      	ands	r3, r2
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	6812      	ldr	r2, [r2, #0]
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	6809      	ldr	r1, [r1, #0]
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8002ea6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	791b      	ldrb	r3, [r3, #4]
 8002eac:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002eb2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	7b1b      	ldrb	r3, [r3, #12]
 8002eb8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	f241 0304 	movw	r3, #4100	; 0x1004
 8002ec6:	4413      	add	r3, r2
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	4b2c      	ldr	r3, [pc, #176]	; (8002f7c <ETH_SetDMAConfig+0xfc>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6811      	ldr	r1, [r2, #0]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	f241 0304 	movw	r3, #4100	; 0x1004
 8002eda:	440b      	add	r3, r1
 8002edc:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	7b5b      	ldrb	r3, [r3, #13]
 8002ee2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	4b22      	ldr	r3, [pc, #136]	; (8002f80 <ETH_SetDMAConfig+0x100>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6811      	ldr	r1, [r2, #0]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	431a      	orrs	r2, r3
 8002f02:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8002f06:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	7d1b      	ldrb	r3, [r3, #20]
 8002f10:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002f12:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	7f5b      	ldrb	r3, [r3, #29]
 8002f18:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	f241 1304 	movw	r3, #4356	; 0x1104
 8002f26:	4413      	add	r3, r2
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	4b16      	ldr	r3, [pc, #88]	; (8002f84 <ETH_SetDMAConfig+0x104>)
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6811      	ldr	r1, [r2, #0]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	431a      	orrs	r2, r3
 8002f36:	f241 1304 	movw	r3, #4356	; 0x1104
 8002f3a:	440b      	add	r3, r1
 8002f3c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	7f1b      	ldrb	r3, [r3, #28]
 8002f42:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	f241 1308 	movw	r3, #4360	; 0x1108
 8002f54:	4413      	add	r3, r2
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <ETH_SetDMAConfig+0x108>)
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	6811      	ldr	r1, [r2, #0]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	431a      	orrs	r2, r3
 8002f64:	f241 1308 	movw	r3, #4360	; 0x1108
 8002f68:	440b      	add	r3, r1
 8002f6a:	601a      	str	r2, [r3, #0]
}
 8002f6c:	bf00      	nop
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	ffff87fd 	.word	0xffff87fd
 8002f7c:	ffff2ffe 	.word	0xffff2ffe
 8002f80:	fffec000 	.word	0xfffec000
 8002f84:	ffc0efef 	.word	0xffc0efef
 8002f88:	7fc0ffff 	.word	0x7fc0ffff

08002f8c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b0a4      	sub	sp, #144	; 0x90
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002f94:	2301      	movs	r3, #1
 8002f96:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002faa:	2301      	movs	r3, #1
 8002fac:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002fc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fcc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002fe4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002fe8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002fea:	2300      	movs	r3, #0
 8002fec:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003000:	2300      	movs	r3, #0
 8003002:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003006:	2300      	movs	r3, #0
 8003008:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800300a:	2300      	movs	r3, #0
 800300c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800300e:	2300      	movs	r3, #0
 8003010:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003012:	2300      	movs	r3, #0
 8003014:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003018:	2300      	movs	r3, #0
 800301a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800301e:	2301      	movs	r3, #1
 8003020:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003024:	2320      	movs	r3, #32
 8003026:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800302a:	2301      	movs	r3, #1
 800302c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003030:	2300      	movs	r3, #0
 8003032:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003036:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800303a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800303c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003040:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003042:	2300      	movs	r3, #0
 8003044:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003048:	2302      	movs	r3, #2
 800304a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800304e:	2300      	movs	r3, #0
 8003050:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003054:	2300      	movs	r3, #0
 8003056:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800305a:	2300      	movs	r3, #0
 800305c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003060:	2301      	movs	r3, #1
 8003062:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003066:	2300      	movs	r3, #0
 8003068:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800306a:	2301      	movs	r3, #1
 800306c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003070:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003074:	4619      	mov	r1, r3
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7ff fde6 	bl	8002c48 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800307c:	2301      	movs	r3, #1
 800307e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003080:	2301      	movs	r3, #1
 8003082:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003084:	2300      	movs	r3, #0
 8003086:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003088:	2300      	movs	r3, #0
 800308a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800308e:	2300      	movs	r3, #0
 8003090:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003092:	2300      	movs	r3, #0
 8003094:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003096:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800309a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800309c:	2300      	movs	r3, #0
 800309e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80030a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030a4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80030a6:	2300      	movs	r3, #0
 80030a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80030ac:	f44f 7306 	mov.w	r3, #536	; 0x218
 80030b0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80030b2:	f107 0308 	add.w	r3, r7, #8
 80030b6:	4619      	mov	r1, r3
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f7ff fee1 	bl	8002e80 <ETH_SetDMAConfig>
}
 80030be:	bf00      	nop
 80030c0:	3790      	adds	r7, #144	; 0x90
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80030d8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030e0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80030e2:	f001 fd6b 	bl	8004bbc <HAL_RCC_GetHCLKFreq>
 80030e6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	4a1e      	ldr	r2, [pc, #120]	; (8003164 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d908      	bls.n	8003102 <ETH_MAC_MDIO_ClkConfig+0x3a>
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	4a1d      	ldr	r2, [pc, #116]	; (8003168 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d804      	bhi.n	8003102 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	e027      	b.n	8003152 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	4a18      	ldr	r2, [pc, #96]	; (8003168 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d908      	bls.n	800311c <ETH_MAC_MDIO_ClkConfig+0x54>
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	4a17      	ldr	r2, [pc, #92]	; (800316c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d204      	bcs.n	800311c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	e01a      	b.n	8003152 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	4a13      	ldr	r2, [pc, #76]	; (800316c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d303      	bcc.n	800312c <ETH_MAC_MDIO_ClkConfig+0x64>
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	4a12      	ldr	r2, [pc, #72]	; (8003170 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d911      	bls.n	8003150 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	4a10      	ldr	r2, [pc, #64]	; (8003170 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d908      	bls.n	8003146 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	4a0f      	ldr	r2, [pc, #60]	; (8003174 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d804      	bhi.n	8003146 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	e005      	b.n	8003152 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	e000      	b.n	8003152 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003150:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800315c:	bf00      	nop
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	01312cff 	.word	0x01312cff
 8003168:	02160ebf 	.word	0x02160ebf
 800316c:	03938700 	.word	0x03938700
 8003170:	05f5e0ff 	.word	0x05f5e0ff
 8003174:	08f0d17f 	.word	0x08f0d17f

08003178 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003180:	2300      	movs	r3, #0
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	e01d      	b.n	80031c2 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68d9      	ldr	r1, [r3, #12]
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	4613      	mov	r3, r2
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	4413      	add	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	440b      	add	r3, r1
 8003196:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2200      	movs	r2, #0
 80031a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	2200      	movs	r2, #0
 80031a8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2200      	movs	r2, #0
 80031ae:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80031b0:	68b9      	ldr	r1, [r7, #8]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	3206      	adds	r2, #6
 80031b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	3301      	adds	r3, #1
 80031c0:	60fb      	str	r3, [r7, #12]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d9de      	bls.n	8003186 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	f241 132c 	movw	r3, #4396	; 0x112c
 80031d6:	4413      	add	r3, r2
 80031d8:	2203      	movs	r2, #3
 80031da:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68d9      	ldr	r1, [r3, #12]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	f241 1314 	movw	r3, #4372	; 0x1114
 80031e8:	4413      	add	r3, r2
 80031ea:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68da      	ldr	r2, [r3, #12]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80031f8:	601a      	str	r2, [r3, #0]
}
 80031fa:	bf00      	nop
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr

08003206 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003206:	b480      	push	{r7}
 8003208:	b085      	sub	sp, #20
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800320e:	2300      	movs	r3, #0
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	e024      	b.n	800325e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6919      	ldr	r1, [r3, #16]
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	4613      	mov	r3, r2
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	4413      	add	r3, r2
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	440b      	add	r3, r1
 8003224:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2200      	movs	r2, #0
 8003230:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2200      	movs	r2, #0
 8003236:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	2200      	movs	r2, #0
 800323c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	2200      	movs	r2, #0
 8003242:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2200      	movs	r2, #0
 8003248:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	3310      	adds	r3, #16
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	3301      	adds	r3, #1
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2b03      	cmp	r3, #3
 8003262:	d9d7      	bls.n	8003214 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	f241 1330 	movw	r3, #4400	; 0x1130
 800328a:	4413      	add	r3, r2
 800328c:	2203      	movs	r2, #3
 800328e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6919      	ldr	r1, [r3, #16]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	f241 131c 	movw	r3, #4380	; 0x111c
 800329c:	4413      	add	r3, r2
 800329e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	f241 1328 	movw	r3, #4392	; 0x1128
 80032b0:	4413      	add	r3, r2
 80032b2:	6019      	str	r1, [r3, #0]
}
 80032b4:	bf00      	nop
 80032b6:	3714      	adds	r7, #20
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b08d      	sub	sp, #52	; 0x34
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	3318      	adds	r3, #24
 80032d0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 80032de:	2300      	movs	r3, #0
 80032e0:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ea:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80032f2:	2300      	movs	r3, #0
 80032f4:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003302:	d007      	beq.n	8003314 <ETH_Prepare_Tx_Descriptors+0x54>
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003308:	3304      	adds	r3, #4
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003314:	2302      	movs	r3, #2
 8003316:	e24a      	b.n	80037ae <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d044      	beq.n	80033ae <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	68da      	ldr	r2, [r3, #12]
 8003328:	4b72      	ldr	r3, [pc, #456]	; (80034f4 <ETH_Prepare_Tx_Descriptors+0x234>)
 800332a:	4013      	ands	r3, r2
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003330:	431a      	orrs	r2, r3
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8003336:	6a3b      	ldr	r3, [r7, #32]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800333e:	6a3b      	ldr	r3, [r7, #32]
 8003340:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003350:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b00      	cmp	r3, #0
 800335c:	d027      	beq.n	80033ae <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	b29a      	uxth	r2, r3
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003368:	041b      	lsls	r3, r3, #16
 800336a:	431a      	orrs	r2, r3
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003388:	431a      	orrs	r2, r3
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800339c:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80033ac:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0310 	and.w	r3, r3, #16
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00e      	beq.n	80033d8 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	4b4e      	ldr	r3, [pc, #312]	; (80034f8 <ETH_Prepare_Tx_Descriptors+0x238>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	6992      	ldr	r2, [r2, #24]
 80033c6:	431a      	orrs	r2, r3
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80033cc:	6a3b      	ldr	r3, [r7, #32]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d105      	bne.n	80033f0 <ETH_Prepare_Tx_Descriptors+0x130>
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0310 	and.w	r3, r3, #16
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d030      	beq.n	8003452 <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80033f8:	6a3b      	ldr	r3, [r7, #32]
 80033fa:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340a:	3301      	adds	r3, #1
 800340c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800340e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003410:	2b03      	cmp	r3, #3
 8003412:	d902      	bls.n	800341a <ETH_Prepare_Tx_Descriptors+0x15a>
 8003414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003416:	3b04      	subs	r3, #4
 8003418:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800341e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003422:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8003424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003426:	3301      	adds	r3, #1
 8003428:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003432:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003436:	d10c      	bne.n	8003452 <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003440:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 800344e:	2302      	movs	r3, #2
 8003450:	e1ad      	b.n	80037ae <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8003452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003454:	3301      	adds	r3, #1
 8003456:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	461a      	mov	r2, r3
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	4b24      	ldr	r3, [pc, #144]	; (80034f8 <ETH_Prepare_Tx_Descriptors+0x238>)
 8003468:	4013      	ands	r3, r2
 800346a:	69fa      	ldr	r2, [r7, #28]
 800346c:	6852      	ldr	r2, [r2, #4]
 800346e:	431a      	orrs	r2, r3
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d012      	beq.n	80034a2 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	461a      	mov	r2, r3
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	4b1a      	ldr	r3, [pc, #104]	; (80034fc <ETH_Prepare_Tx_Descriptors+0x23c>)
 8003492:	4013      	ands	r3, r2
 8003494:	69fa      	ldr	r2, [r7, #28]
 8003496:	6852      	ldr	r2, [r2, #4]
 8003498:	0412      	lsls	r2, r2, #16
 800349a:	431a      	orrs	r2, r3
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	609a      	str	r2, [r3, #8]
 80034a0:	e008      	b.n	80034b4 <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	2200      	movs	r2, #0
 80034a6:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	4b13      	ldr	r3, [pc, #76]	; (80034fc <ETH_Prepare_Tx_Descriptors+0x23c>)
 80034ae:	4013      	ands	r3, r2
 80034b0:	6a3a      	ldr	r2, [r7, #32]
 80034b2:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0310 	and.w	r3, r3, #16
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d021      	beq.n	8003504 <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	04db      	lsls	r3, r3, #19
 80034ce:	431a      	orrs	r2, r3
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	68da      	ldr	r2, [r3, #12]
 80034d8:	4b09      	ldr	r3, [pc, #36]	; (8003500 <ETH_Prepare_Tx_Descriptors+0x240>)
 80034da:	4013      	ands	r3, r2
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	69d2      	ldr	r2, [r2, #28]
 80034e0:	431a      	orrs	r2, r3
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	60da      	str	r2, [r3, #12]
 80034f2:	e02e      	b.n	8003552 <ETH_Prepare_Tx_Descriptors+0x292>
 80034f4:	ffff0000 	.word	0xffff0000
 80034f8:	ffffc000 	.word	0xffffc000
 80034fc:	c000ffff 	.word	0xc000ffff
 8003500:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	68da      	ldr	r2, [r3, #12]
 8003508:	4b93      	ldr	r3, [pc, #588]	; (8003758 <ETH_Prepare_Tx_Descriptors+0x498>)
 800350a:	4013      	ands	r3, r2
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	6852      	ldr	r2, [r2, #4]
 8003510:	431a      	orrs	r2, r3
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d008      	beq.n	8003534 <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	431a      	orrs	r2, r3
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0320 	and.w	r3, r3, #32
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	431a      	orrs	r2, r3
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	2b00      	cmp	r3, #0
 800355c:	d008      	beq.n	8003570 <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356a:	431a      	orrs	r2, r3
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 80cb 	beq.w	8003738 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	431a      	orrs	r2, r3
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80035b4:	e0c0      	b.n	8003738 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80035c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c4:	3301      	adds	r3, #1
 80035c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	d902      	bls.n	80035d4 <ETH_Prepare_Tx_Descriptors+0x314>
 80035ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d0:	3b04      	subs	r3, #4
 80035d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035dc:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035f6:	d007      	beq.n	8003608 <ETH_Prepare_Tx_Descriptors+0x348>
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fc:	3304      	adds	r3, #4
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d026      	beq.n	8003656 <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003614:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8003616:	2300      	movs	r3, #0
 8003618:	627b      	str	r3, [r7, #36]	; 0x24
 800361a:	e016      	b.n	800364a <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362a:	3301      	adds	r3, #1
 800362c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800362e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003630:	2b03      	cmp	r3, #3
 8003632:	d902      	bls.n	800363a <ETH_Prepare_Tx_Descriptors+0x37a>
 8003634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003636:	3b04      	subs	r3, #4
 8003638:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800363e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003642:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003646:	3301      	adds	r3, #1
 8003648:	627b      	str	r3, [r7, #36]	; 0x24
 800364a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800364c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364e:	429a      	cmp	r2, r3
 8003650:	d3e4      	bcc.n	800361c <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 8003652:	2302      	movs	r3, #2
 8003654:	e0ab      	b.n	80037ae <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 8003656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003658:	3301      	adds	r3, #1
 800365a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	461a      	mov	r2, r3
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	4b3a      	ldr	r3, [pc, #232]	; (800375c <ETH_Prepare_Tx_Descriptors+0x49c>)
 8003672:	4013      	ands	r3, r2
 8003674:	69fa      	ldr	r2, [r7, #28]
 8003676:	6852      	ldr	r2, [r2, #4]
 8003678:	431a      	orrs	r2, r3
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d012      	beq.n	80036ac <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	461a      	mov	r2, r3
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	4b31      	ldr	r3, [pc, #196]	; (8003760 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 800369c:	4013      	ands	r3, r2
 800369e:	69fa      	ldr	r2, [r7, #28]
 80036a0:	6852      	ldr	r2, [r2, #4]
 80036a2:	0412      	lsls	r2, r2, #16
 80036a4:	431a      	orrs	r2, r3
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	609a      	str	r2, [r3, #8]
 80036aa:	e008      	b.n	80036be <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	2200      	movs	r2, #0
 80036b0:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	4b2a      	ldr	r3, [pc, #168]	; (8003760 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	6a3a      	ldr	r2, [r7, #32]
 80036bc:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0310 	and.w	r3, r3, #16
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00f      	beq.n	80036ea <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	4b25      	ldr	r3, [pc, #148]	; (8003764 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	69d2      	ldr	r2, [r2, #28]
 80036d6:	431a      	orrs	r2, r3
 80036d8:	6a3b      	ldr	r3, [r7, #32]
 80036da:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	60da      	str	r2, [r3, #12]
 80036e8:	e017      	b.n	800371a <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	4b1a      	ldr	r3, [pc, #104]	; (8003758 <ETH_Prepare_Tx_Descriptors+0x498>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	6852      	ldr	r2, [r2, #4]
 80036f6:	431a      	orrs	r2, r3
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b00      	cmp	r3, #0
 8003706:	d008      	beq.n	800371a <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	431a      	orrs	r2, r3
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	3301      	adds	r3, #1
 800371e:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	2b00      	cmp	r3, #0
 800373e:	f47f af3a 	bne.w	80035b6 <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00f      	beq.n	8003768 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	609a      	str	r2, [r3, #8]
 8003754:	e00e      	b.n	8003774 <ETH_Prepare_Tx_Descriptors+0x4b4>
 8003756:	bf00      	nop
 8003758:	ffff8000 	.word	0xffff8000
 800375c:	ffffc000 	.word	0xffffc000
 8003760:	c000ffff 	.word	0xc000ffff
 8003764:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003784:	6979      	ldr	r1, [r7, #20]
 8003786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003788:	3304      	adds	r3, #4
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	440b      	add	r3, r1
 800378e:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003794:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003796:	b672      	cpsid	i
}
 8003798:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	4413      	add	r3, r2
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80037a8:	b662      	cpsie	i
}
 80037aa:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3734      	adds	r7, #52	; 0x34
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop

080037bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037bc:	b480      	push	{r7}
 80037be:	b089      	sub	sp, #36	; 0x24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80037c6:	2300      	movs	r3, #0
 80037c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80037ca:	4b86      	ldr	r3, [pc, #536]	; (80039e4 <HAL_GPIO_Init+0x228>)
 80037cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80037ce:	e18c      	b.n	8003aea <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	2101      	movs	r1, #1
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	fa01 f303 	lsl.w	r3, r1, r3
 80037dc:	4013      	ands	r3, r2
 80037de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 817e 	beq.w	8003ae4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f003 0303 	and.w	r3, r3, #3
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d005      	beq.n	8003800 <HAL_GPIO_Init+0x44>
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f003 0303 	and.w	r3, r3, #3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d130      	bne.n	8003862 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	2203      	movs	r2, #3
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	43db      	mvns	r3, r3
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4013      	ands	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	68da      	ldr	r2, [r3, #12]
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	4313      	orrs	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003836:	2201      	movs	r2, #1
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	43db      	mvns	r3, r3
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	4013      	ands	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	091b      	lsrs	r3, r3, #4
 800384c:	f003 0201 	and.w	r2, r3, #1
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4313      	orrs	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	2b03      	cmp	r3, #3
 800386c:	d017      	beq.n	800389e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	2203      	movs	r2, #3
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	43db      	mvns	r3, r3
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	4013      	ands	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	4313      	orrs	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d123      	bne.n	80038f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	08da      	lsrs	r2, r3, #3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3208      	adds	r2, #8
 80038b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	220f      	movs	r2, #15
 80038c2:	fa02 f303 	lsl.w	r3, r2, r3
 80038c6:	43db      	mvns	r3, r3
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	4013      	ands	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	691a      	ldr	r2, [r3, #16]
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	08da      	lsrs	r2, r3, #3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3208      	adds	r2, #8
 80038ec:	69b9      	ldr	r1, [r7, #24]
 80038ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	2203      	movs	r2, #3
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	43db      	mvns	r3, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4013      	ands	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f003 0203 	and.w	r2, r3, #3
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	4313      	orrs	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 80d8 	beq.w	8003ae4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003934:	4b2c      	ldr	r3, [pc, #176]	; (80039e8 <HAL_GPIO_Init+0x22c>)
 8003936:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800393a:	4a2b      	ldr	r2, [pc, #172]	; (80039e8 <HAL_GPIO_Init+0x22c>)
 800393c:	f043 0302 	orr.w	r3, r3, #2
 8003940:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003944:	4b28      	ldr	r3, [pc, #160]	; (80039e8 <HAL_GPIO_Init+0x22c>)
 8003946:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	60fb      	str	r3, [r7, #12]
 8003950:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003952:	4a26      	ldr	r2, [pc, #152]	; (80039ec <HAL_GPIO_Init+0x230>)
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	089b      	lsrs	r3, r3, #2
 8003958:	3302      	adds	r3, #2
 800395a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800395e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	220f      	movs	r2, #15
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	43db      	mvns	r3, r3
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	4013      	ands	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a1d      	ldr	r2, [pc, #116]	; (80039f0 <HAL_GPIO_Init+0x234>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d04a      	beq.n	8003a14 <HAL_GPIO_Init+0x258>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a1c      	ldr	r2, [pc, #112]	; (80039f4 <HAL_GPIO_Init+0x238>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d02b      	beq.n	80039de <HAL_GPIO_Init+0x222>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a1b      	ldr	r2, [pc, #108]	; (80039f8 <HAL_GPIO_Init+0x23c>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d025      	beq.n	80039da <HAL_GPIO_Init+0x21e>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a1a      	ldr	r2, [pc, #104]	; (80039fc <HAL_GPIO_Init+0x240>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d01f      	beq.n	80039d6 <HAL_GPIO_Init+0x21a>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a19      	ldr	r2, [pc, #100]	; (8003a00 <HAL_GPIO_Init+0x244>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d019      	beq.n	80039d2 <HAL_GPIO_Init+0x216>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a18      	ldr	r2, [pc, #96]	; (8003a04 <HAL_GPIO_Init+0x248>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d013      	beq.n	80039ce <HAL_GPIO_Init+0x212>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a17      	ldr	r2, [pc, #92]	; (8003a08 <HAL_GPIO_Init+0x24c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d00d      	beq.n	80039ca <HAL_GPIO_Init+0x20e>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a16      	ldr	r2, [pc, #88]	; (8003a0c <HAL_GPIO_Init+0x250>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d007      	beq.n	80039c6 <HAL_GPIO_Init+0x20a>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a15      	ldr	r2, [pc, #84]	; (8003a10 <HAL_GPIO_Init+0x254>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d101      	bne.n	80039c2 <HAL_GPIO_Init+0x206>
 80039be:	2309      	movs	r3, #9
 80039c0:	e029      	b.n	8003a16 <HAL_GPIO_Init+0x25a>
 80039c2:	230a      	movs	r3, #10
 80039c4:	e027      	b.n	8003a16 <HAL_GPIO_Init+0x25a>
 80039c6:	2307      	movs	r3, #7
 80039c8:	e025      	b.n	8003a16 <HAL_GPIO_Init+0x25a>
 80039ca:	2306      	movs	r3, #6
 80039cc:	e023      	b.n	8003a16 <HAL_GPIO_Init+0x25a>
 80039ce:	2305      	movs	r3, #5
 80039d0:	e021      	b.n	8003a16 <HAL_GPIO_Init+0x25a>
 80039d2:	2304      	movs	r3, #4
 80039d4:	e01f      	b.n	8003a16 <HAL_GPIO_Init+0x25a>
 80039d6:	2303      	movs	r3, #3
 80039d8:	e01d      	b.n	8003a16 <HAL_GPIO_Init+0x25a>
 80039da:	2302      	movs	r3, #2
 80039dc:	e01b      	b.n	8003a16 <HAL_GPIO_Init+0x25a>
 80039de:	2301      	movs	r3, #1
 80039e0:	e019      	b.n	8003a16 <HAL_GPIO_Init+0x25a>
 80039e2:	bf00      	nop
 80039e4:	58000080 	.word	0x58000080
 80039e8:	58024400 	.word	0x58024400
 80039ec:	58000400 	.word	0x58000400
 80039f0:	58020000 	.word	0x58020000
 80039f4:	58020400 	.word	0x58020400
 80039f8:	58020800 	.word	0x58020800
 80039fc:	58020c00 	.word	0x58020c00
 8003a00:	58021000 	.word	0x58021000
 8003a04:	58021400 	.word	0x58021400
 8003a08:	58021800 	.word	0x58021800
 8003a0c:	58021c00 	.word	0x58021c00
 8003a10:	58022400 	.word	0x58022400
 8003a14:	2300      	movs	r3, #0
 8003a16:	69fa      	ldr	r2, [r7, #28]
 8003a18:	f002 0203 	and.w	r2, r2, #3
 8003a1c:	0092      	lsls	r2, r2, #2
 8003a1e:	4093      	lsls	r3, r2
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a26:	4938      	ldr	r1, [pc, #224]	; (8003b08 <HAL_GPIO_Init+0x34c>)
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	089b      	lsrs	r3, r3, #2
 8003a2c:	3302      	adds	r3, #2
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	43db      	mvns	r3, r3
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	4013      	ands	r3, r2
 8003a44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003a5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	43db      	mvns	r3, r3
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	4013      	ands	r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d003      	beq.n	8003a88 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003a88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	43db      	mvns	r3, r3
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	fa22 f303 	lsr.w	r3, r2, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f47f ae6b 	bne.w	80037d0 <HAL_GPIO_Init+0x14>
  }
}
 8003afa:	bf00      	nop
 8003afc:	bf00      	nop
 8003afe:	3724      	adds	r7, #36	; 0x24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	58000400 	.word	0x58000400

08003b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	460b      	mov	r3, r1
 8003b16:	807b      	strh	r3, [r7, #2]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b1c:	787b      	ldrb	r3, [r7, #1]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b22:	887a      	ldrh	r2, [r7, #2]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003b28:	e003      	b.n	8003b32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003b2a:	887b      	ldrh	r3, [r7, #2]
 8003b2c:	041a      	lsls	r2, r3, #16
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	619a      	str	r2, [r3, #24]
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
	...

08003b40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e07f      	b.n	8003c52 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d106      	bne.n	8003b6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fd f8ba 	bl	8000ce0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2224      	movs	r2, #36	; 0x24
 8003b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0201 	bic.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ba0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d107      	bne.n	8003bba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bb6:	609a      	str	r2, [r3, #8]
 8003bb8:	e006      	b.n	8003bc8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003bc6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d104      	bne.n	8003bda <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bd8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6859      	ldr	r1, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	4b1d      	ldr	r3, [pc, #116]	; (8003c5c <HAL_I2C_Init+0x11c>)
 8003be6:	430b      	orrs	r3, r1
 8003be8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68da      	ldr	r2, [r3, #12]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bf8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	691a      	ldr	r2, [r3, #16]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	69d9      	ldr	r1, [r3, #28]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a1a      	ldr	r2, [r3, #32]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f042 0201 	orr.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	02008000 	.word	0x02008000

08003c60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b20      	cmp	r3, #32
 8003c74:	d138      	bne.n	8003ce8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d101      	bne.n	8003c84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c80:	2302      	movs	r3, #2
 8003c82:	e032      	b.n	8003cea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2224      	movs	r2, #36	; 0x24
 8003c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0201 	bic.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003cb2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6819      	ldr	r1, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0201 	orr.w	r2, r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	e000      	b.n	8003cea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ce8:	2302      	movs	r3, #2
  }
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b085      	sub	sp, #20
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
 8003cfe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b20      	cmp	r3, #32
 8003d0a:	d139      	bne.n	8003d80 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d101      	bne.n	8003d1a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d16:	2302      	movs	r3, #2
 8003d18:	e033      	b.n	8003d82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2224      	movs	r2, #36	; 0x24
 8003d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0201 	bic.w	r2, r2, #1
 8003d38:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d48:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	021b      	lsls	r3, r3, #8
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	e000      	b.n	8003d82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d80:	2302      	movs	r3, #2
  }
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
	...

08003d90 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003d98:	4b19      	ldr	r3, [pc, #100]	; (8003e00 <HAL_PWREx_ConfigSupply+0x70>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b04      	cmp	r3, #4
 8003da2:	d00a      	beq.n	8003dba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003da4:	4b16      	ldr	r3, [pc, #88]	; (8003e00 <HAL_PWREx_ConfigSupply+0x70>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d001      	beq.n	8003db6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e01f      	b.n	8003df6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003db6:	2300      	movs	r3, #0
 8003db8:	e01d      	b.n	8003df6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003dba:	4b11      	ldr	r3, [pc, #68]	; (8003e00 <HAL_PWREx_ConfigSupply+0x70>)
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	f023 0207 	bic.w	r2, r3, #7
 8003dc2:	490f      	ldr	r1, [pc, #60]	; (8003e00 <HAL_PWREx_ConfigSupply+0x70>)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003dca:	f7fd fe47 	bl	8001a5c <HAL_GetTick>
 8003dce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003dd0:	e009      	b.n	8003de6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003dd2:	f7fd fe43 	bl	8001a5c <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003de0:	d901      	bls.n	8003de6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e007      	b.n	8003df6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003de6:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <HAL_PWREx_ConfigSupply+0x70>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003df2:	d1ee      	bne.n	8003dd2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	58024800 	.word	0x58024800

08003e04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08c      	sub	sp, #48	; 0x30
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e397      	b.n	8004546 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f000 8087 	beq.w	8003f32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e24:	4b9e      	ldr	r3, [pc, #632]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e2e:	4b9c      	ldr	r3, [pc, #624]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 8003e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e32:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e36:	2b10      	cmp	r3, #16
 8003e38:	d007      	beq.n	8003e4a <HAL_RCC_OscConfig+0x46>
 8003e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3c:	2b18      	cmp	r3, #24
 8003e3e:	d110      	bne.n	8003e62 <HAL_RCC_OscConfig+0x5e>
 8003e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d10b      	bne.n	8003e62 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e4a:	4b95      	ldr	r3, [pc, #596]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d06c      	beq.n	8003f30 <HAL_RCC_OscConfig+0x12c>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d168      	bne.n	8003f30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e371      	b.n	8004546 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e6a:	d106      	bne.n	8003e7a <HAL_RCC_OscConfig+0x76>
 8003e6c:	4b8c      	ldr	r3, [pc, #560]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a8b      	ldr	r2, [pc, #556]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 8003e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	e02e      	b.n	8003ed8 <HAL_RCC_OscConfig+0xd4>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10c      	bne.n	8003e9c <HAL_RCC_OscConfig+0x98>
 8003e82:	4b87      	ldr	r3, [pc, #540]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a86      	ldr	r2, [pc, #536]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 8003e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e8c:	6013      	str	r3, [r2, #0]
 8003e8e:	4b84      	ldr	r3, [pc, #528]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a83      	ldr	r2, [pc, #524]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 8003e94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e98:	6013      	str	r3, [r2, #0]
 8003e9a:	e01d      	b.n	8003ed8 <HAL_RCC_OscConfig+0xd4>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ea4:	d10c      	bne.n	8003ec0 <HAL_RCC_OscConfig+0xbc>
 8003ea6:	4b7e      	ldr	r3, [pc, #504]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a7d      	ldr	r2, [pc, #500]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 8003eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eb0:	6013      	str	r3, [r2, #0]
 8003eb2:	4b7b      	ldr	r3, [pc, #492]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a7a      	ldr	r2, [pc, #488]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 8003eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ebc:	6013      	str	r3, [r2, #0]
 8003ebe:	e00b      	b.n	8003ed8 <HAL_RCC_OscConfig+0xd4>
 8003ec0:	4b77      	ldr	r3, [pc, #476]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a76      	ldr	r2, [pc, #472]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 8003ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eca:	6013      	str	r3, [r2, #0]
 8003ecc:	4b74      	ldr	r3, [pc, #464]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a73      	ldr	r2, [pc, #460]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 8003ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ed6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d013      	beq.n	8003f08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee0:	f7fd fdbc 	bl	8001a5c <HAL_GetTick>
 8003ee4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ee8:	f7fd fdb8 	bl	8001a5c <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b64      	cmp	r3, #100	; 0x64
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e325      	b.n	8004546 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003efa:	4b69      	ldr	r3, [pc, #420]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d0f0      	beq.n	8003ee8 <HAL_RCC_OscConfig+0xe4>
 8003f06:	e014      	b.n	8003f32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f08:	f7fd fda8 	bl	8001a5c <HAL_GetTick>
 8003f0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f10:	f7fd fda4 	bl	8001a5c <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b64      	cmp	r3, #100	; 0x64
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e311      	b.n	8004546 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f22:	4b5f      	ldr	r3, [pc, #380]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1f0      	bne.n	8003f10 <HAL_RCC_OscConfig+0x10c>
 8003f2e:	e000      	b.n	8003f32 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 808a 	beq.w	8004054 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f40:	4b57      	ldr	r3, [pc, #348]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f48:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f4a:	4b55      	ldr	r3, [pc, #340]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 8003f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d007      	beq.n	8003f66 <HAL_RCC_OscConfig+0x162>
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	2b18      	cmp	r3, #24
 8003f5a:	d137      	bne.n	8003fcc <HAL_RCC_OscConfig+0x1c8>
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d132      	bne.n	8003fcc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f66:	4b4e      	ldr	r3, [pc, #312]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0304 	and.w	r3, r3, #4
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d005      	beq.n	8003f7e <HAL_RCC_OscConfig+0x17a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e2e3      	b.n	8004546 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f7e:	4b48      	ldr	r3, [pc, #288]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f023 0219 	bic.w	r2, r3, #25
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	4945      	ldr	r1, [pc, #276]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f90:	f7fd fd64 	bl	8001a5c <HAL_GetTick>
 8003f94:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f98:	f7fd fd60 	bl	8001a5c <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e2cd      	b.n	8004546 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003faa:	4b3d      	ldr	r3, [pc, #244]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0304 	and.w	r3, r3, #4
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0f0      	beq.n	8003f98 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb6:	4b3a      	ldr	r3, [pc, #232]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	061b      	lsls	r3, r3, #24
 8003fc4:	4936      	ldr	r1, [pc, #216]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fca:	e043      	b.n	8004054 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d026      	beq.n	8004022 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003fd4:	4b32      	ldr	r3, [pc, #200]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f023 0219 	bic.w	r2, r3, #25
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	492f      	ldr	r1, [pc, #188]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe6:	f7fd fd39 	bl	8001a5c <HAL_GetTick>
 8003fea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fee:	f7fd fd35 	bl	8001a5c <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e2a2      	b.n	8004546 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004000:	4b27      	ldr	r3, [pc, #156]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0304 	and.w	r3, r3, #4
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0f0      	beq.n	8003fee <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800400c:	4b24      	ldr	r3, [pc, #144]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	061b      	lsls	r3, r3, #24
 800401a:	4921      	ldr	r1, [pc, #132]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 800401c:	4313      	orrs	r3, r2
 800401e:	604b      	str	r3, [r1, #4]
 8004020:	e018      	b.n	8004054 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004022:	4b1f      	ldr	r3, [pc, #124]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a1e      	ldr	r2, [pc, #120]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 8004028:	f023 0301 	bic.w	r3, r3, #1
 800402c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402e:	f7fd fd15 	bl	8001a5c <HAL_GetTick>
 8004032:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004034:	e008      	b.n	8004048 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004036:	f7fd fd11 	bl	8001a5c <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e27e      	b.n	8004546 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004048:	4b15      	ldr	r3, [pc, #84]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1f0      	bne.n	8004036 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0310 	and.w	r3, r3, #16
 800405c:	2b00      	cmp	r3, #0
 800405e:	d06d      	beq.n	800413c <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004060:	4b0f      	ldr	r3, [pc, #60]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004068:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800406a:	4b0d      	ldr	r3, [pc, #52]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 800406c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	2b08      	cmp	r3, #8
 8004074:	d007      	beq.n	8004086 <HAL_RCC_OscConfig+0x282>
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	2b18      	cmp	r3, #24
 800407a:	d11e      	bne.n	80040ba <HAL_RCC_OscConfig+0x2b6>
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	2b01      	cmp	r3, #1
 8004084:	d119      	bne.n	80040ba <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004086:	4b06      	ldr	r3, [pc, #24]	; (80040a0 <HAL_RCC_OscConfig+0x29c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408e:	2b00      	cmp	r3, #0
 8004090:	d008      	beq.n	80040a4 <HAL_RCC_OscConfig+0x2a0>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	2b80      	cmp	r3, #128	; 0x80
 8004098:	d004      	beq.n	80040a4 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e253      	b.n	8004546 <HAL_RCC_OscConfig+0x742>
 800409e:	bf00      	nop
 80040a0:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80040a4:	4ba3      	ldr	r3, [pc, #652]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	061b      	lsls	r3, r3, #24
 80040b2:	49a0      	ldr	r1, [pc, #640]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80040b8:	e040      	b.n	800413c <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d023      	beq.n	800410a <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80040c2:	4b9c      	ldr	r3, [pc, #624]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a9b      	ldr	r2, [pc, #620]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 80040c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ce:	f7fd fcc5 	bl	8001a5c <HAL_GetTick>
 80040d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80040d6:	f7fd fcc1 	bl	8001a5c <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e22e      	b.n	8004546 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80040e8:	4b92      	ldr	r3, [pc, #584]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0f0      	beq.n	80040d6 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80040f4:	4b8f      	ldr	r3, [pc, #572]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	061b      	lsls	r3, r3, #24
 8004102:	498c      	ldr	r1, [pc, #560]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 8004104:	4313      	orrs	r3, r2
 8004106:	60cb      	str	r3, [r1, #12]
 8004108:	e018      	b.n	800413c <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800410a:	4b8a      	ldr	r3, [pc, #552]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a89      	ldr	r2, [pc, #548]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 8004110:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004114:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004116:	f7fd fca1 	bl	8001a5c <HAL_GetTick>
 800411a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800411c:	e008      	b.n	8004130 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800411e:	f7fd fc9d 	bl	8001a5c <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e20a      	b.n	8004546 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004130:	4b80      	ldr	r3, [pc, #512]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1f0      	bne.n	800411e <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	2b00      	cmp	r3, #0
 8004146:	d036      	beq.n	80041b6 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d019      	beq.n	8004184 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004150:	4b78      	ldr	r3, [pc, #480]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 8004152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004154:	4a77      	ldr	r2, [pc, #476]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 8004156:	f043 0301 	orr.w	r3, r3, #1
 800415a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800415c:	f7fd fc7e 	bl	8001a5c <HAL_GetTick>
 8004160:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004164:	f7fd fc7a 	bl	8001a5c <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b02      	cmp	r3, #2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e1e7      	b.n	8004546 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004176:	4b6f      	ldr	r3, [pc, #444]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 8004178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0f0      	beq.n	8004164 <HAL_RCC_OscConfig+0x360>
 8004182:	e018      	b.n	80041b6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004184:	4b6b      	ldr	r3, [pc, #428]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 8004186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004188:	4a6a      	ldr	r2, [pc, #424]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 800418a:	f023 0301 	bic.w	r3, r3, #1
 800418e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004190:	f7fd fc64 	bl	8001a5c <HAL_GetTick>
 8004194:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004198:	f7fd fc60 	bl	8001a5c <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e1cd      	b.n	8004546 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041aa:	4b62      	ldr	r3, [pc, #392]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 80041ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1f0      	bne.n	8004198 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0320 	and.w	r3, r3, #32
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d036      	beq.n	8004230 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d019      	beq.n	80041fe <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041ca:	4b5a      	ldr	r3, [pc, #360]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a59      	ldr	r2, [pc, #356]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 80041d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80041d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80041d6:	f7fd fc41 	bl	8001a5c <HAL_GetTick>
 80041da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80041dc:	e008      	b.n	80041f0 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80041de:	f7fd fc3d 	bl	8001a5c <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e1aa      	b.n	8004546 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80041f0:	4b50      	ldr	r3, [pc, #320]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d0f0      	beq.n	80041de <HAL_RCC_OscConfig+0x3da>
 80041fc:	e018      	b.n	8004230 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041fe:	4b4d      	ldr	r3, [pc, #308]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a4c      	ldr	r2, [pc, #304]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 8004204:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004208:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800420a:	f7fd fc27 	bl	8001a5c <HAL_GetTick>
 800420e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004212:	f7fd fc23 	bl	8001a5c <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e190      	b.n	8004546 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004224:	4b43      	ldr	r3, [pc, #268]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1f0      	bne.n	8004212 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 8085 	beq.w	8004348 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800423e:	4b3e      	ldr	r3, [pc, #248]	; (8004338 <HAL_RCC_OscConfig+0x534>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a3d      	ldr	r2, [pc, #244]	; (8004338 <HAL_RCC_OscConfig+0x534>)
 8004244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004248:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800424a:	f7fd fc07 	bl	8001a5c <HAL_GetTick>
 800424e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004250:	e008      	b.n	8004264 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004252:	f7fd fc03 	bl	8001a5c <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	2b64      	cmp	r3, #100	; 0x64
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e170      	b.n	8004546 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004264:	4b34      	ldr	r3, [pc, #208]	; (8004338 <HAL_RCC_OscConfig+0x534>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426c:	2b00      	cmp	r3, #0
 800426e:	d0f0      	beq.n	8004252 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d106      	bne.n	8004286 <HAL_RCC_OscConfig+0x482>
 8004278:	4b2e      	ldr	r3, [pc, #184]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 800427a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427c:	4a2d      	ldr	r2, [pc, #180]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 800427e:	f043 0301 	orr.w	r3, r3, #1
 8004282:	6713      	str	r3, [r2, #112]	; 0x70
 8004284:	e02d      	b.n	80042e2 <HAL_RCC_OscConfig+0x4de>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10c      	bne.n	80042a8 <HAL_RCC_OscConfig+0x4a4>
 800428e:	4b29      	ldr	r3, [pc, #164]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 8004290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004292:	4a28      	ldr	r2, [pc, #160]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 8004294:	f023 0301 	bic.w	r3, r3, #1
 8004298:	6713      	str	r3, [r2, #112]	; 0x70
 800429a:	4b26      	ldr	r3, [pc, #152]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 800429c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429e:	4a25      	ldr	r2, [pc, #148]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 80042a0:	f023 0304 	bic.w	r3, r3, #4
 80042a4:	6713      	str	r3, [r2, #112]	; 0x70
 80042a6:	e01c      	b.n	80042e2 <HAL_RCC_OscConfig+0x4de>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	2b05      	cmp	r3, #5
 80042ae:	d10c      	bne.n	80042ca <HAL_RCC_OscConfig+0x4c6>
 80042b0:	4b20      	ldr	r3, [pc, #128]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 80042b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b4:	4a1f      	ldr	r2, [pc, #124]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 80042b6:	f043 0304 	orr.w	r3, r3, #4
 80042ba:	6713      	str	r3, [r2, #112]	; 0x70
 80042bc:	4b1d      	ldr	r3, [pc, #116]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 80042be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c0:	4a1c      	ldr	r2, [pc, #112]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 80042c2:	f043 0301 	orr.w	r3, r3, #1
 80042c6:	6713      	str	r3, [r2, #112]	; 0x70
 80042c8:	e00b      	b.n	80042e2 <HAL_RCC_OscConfig+0x4de>
 80042ca:	4b1a      	ldr	r3, [pc, #104]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 80042cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ce:	4a19      	ldr	r2, [pc, #100]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 80042d0:	f023 0301 	bic.w	r3, r3, #1
 80042d4:	6713      	str	r3, [r2, #112]	; 0x70
 80042d6:	4b17      	ldr	r3, [pc, #92]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 80042d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042da:	4a16      	ldr	r2, [pc, #88]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 80042dc:	f023 0304 	bic.w	r3, r3, #4
 80042e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d015      	beq.n	8004316 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ea:	f7fd fbb7 	bl	8001a5c <HAL_GetTick>
 80042ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042f0:	e00a      	b.n	8004308 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042f2:	f7fd fbb3 	bl	8001a5c <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004300:	4293      	cmp	r3, r2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e11e      	b.n	8004546 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004308:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <HAL_RCC_OscConfig+0x530>)
 800430a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0ee      	beq.n	80042f2 <HAL_RCC_OscConfig+0x4ee>
 8004314:	e018      	b.n	8004348 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004316:	f7fd fba1 	bl	8001a5c <HAL_GetTick>
 800431a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800431c:	e00e      	b.n	800433c <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800431e:	f7fd fb9d 	bl	8001a5c <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	f241 3288 	movw	r2, #5000	; 0x1388
 800432c:	4293      	cmp	r3, r2
 800432e:	d905      	bls.n	800433c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e108      	b.n	8004546 <HAL_RCC_OscConfig+0x742>
 8004334:	58024400 	.word	0x58024400
 8004338:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800433c:	4b84      	ldr	r3, [pc, #528]	; (8004550 <HAL_RCC_OscConfig+0x74c>)
 800433e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1ea      	bne.n	800431e <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434c:	2b00      	cmp	r3, #0
 800434e:	f000 80f9 	beq.w	8004544 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004352:	4b7f      	ldr	r3, [pc, #508]	; (8004550 <HAL_RCC_OscConfig+0x74c>)
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800435a:	2b18      	cmp	r3, #24
 800435c:	f000 80b4 	beq.w	80044c8 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004364:	2b02      	cmp	r3, #2
 8004366:	f040 8095 	bne.w	8004494 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800436a:	4b79      	ldr	r3, [pc, #484]	; (8004550 <HAL_RCC_OscConfig+0x74c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a78      	ldr	r2, [pc, #480]	; (8004550 <HAL_RCC_OscConfig+0x74c>)
 8004370:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004374:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004376:	f7fd fb71 	bl	8001a5c <HAL_GetTick>
 800437a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800437c:	e008      	b.n	8004390 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800437e:	f7fd fb6d 	bl	8001a5c <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e0da      	b.n	8004546 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004390:	4b6f      	ldr	r3, [pc, #444]	; (8004550 <HAL_RCC_OscConfig+0x74c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1f0      	bne.n	800437e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800439c:	4b6c      	ldr	r3, [pc, #432]	; (8004550 <HAL_RCC_OscConfig+0x74c>)
 800439e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043a0:	4b6c      	ldr	r3, [pc, #432]	; (8004554 <HAL_RCC_OscConfig+0x750>)
 80043a2:	4013      	ands	r3, r2
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80043ac:	0112      	lsls	r2, r2, #4
 80043ae:	430a      	orrs	r2, r1
 80043b0:	4967      	ldr	r1, [pc, #412]	; (8004550 <HAL_RCC_OscConfig+0x74c>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	628b      	str	r3, [r1, #40]	; 0x28
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ba:	3b01      	subs	r3, #1
 80043bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c4:	3b01      	subs	r3, #1
 80043c6:	025b      	lsls	r3, r3, #9
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d0:	3b01      	subs	r3, #1
 80043d2:	041b      	lsls	r3, r3, #16
 80043d4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80043d8:	431a      	orrs	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043de:	3b01      	subs	r3, #1
 80043e0:	061b      	lsls	r3, r3, #24
 80043e2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80043e6:	495a      	ldr	r1, [pc, #360]	; (8004550 <HAL_RCC_OscConfig+0x74c>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80043ec:	4b58      	ldr	r3, [pc, #352]	; (8004550 <HAL_RCC_OscConfig+0x74c>)
 80043ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f0:	4a57      	ldr	r2, [pc, #348]	; (8004550 <HAL_RCC_OscConfig+0x74c>)
 80043f2:	f023 0301 	bic.w	r3, r3, #1
 80043f6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80043f8:	4b55      	ldr	r3, [pc, #340]	; (8004550 <HAL_RCC_OscConfig+0x74c>)
 80043fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043fc:	4b56      	ldr	r3, [pc, #344]	; (8004558 <HAL_RCC_OscConfig+0x754>)
 80043fe:	4013      	ands	r3, r2
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004404:	00d2      	lsls	r2, r2, #3
 8004406:	4952      	ldr	r1, [pc, #328]	; (8004550 <HAL_RCC_OscConfig+0x74c>)
 8004408:	4313      	orrs	r3, r2
 800440a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800440c:	4b50      	ldr	r3, [pc, #320]	; (8004550 <HAL_RCC_OscConfig+0x74c>)
 800440e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004410:	f023 020c 	bic.w	r2, r3, #12
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	494d      	ldr	r1, [pc, #308]	; (8004550 <HAL_RCC_OscConfig+0x74c>)
 800441a:	4313      	orrs	r3, r2
 800441c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800441e:	4b4c      	ldr	r3, [pc, #304]	; (8004550 <HAL_RCC_OscConfig+0x74c>)
 8004420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004422:	f023 0202 	bic.w	r2, r3, #2
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442a:	4949      	ldr	r1, [pc, #292]	; (8004550 <HAL_RCC_OscConfig+0x74c>)
 800442c:	4313      	orrs	r3, r2
 800442e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004430:	4b47      	ldr	r3, [pc, #284]	; (8004550 <HAL_RCC_OscConfig+0x74c>)
 8004432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004434:	4a46      	ldr	r2, [pc, #280]	; (8004550 <HAL_RCC_OscConfig+0x74c>)
 8004436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800443a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800443c:	4b44      	ldr	r3, [pc, #272]	; (8004550 <HAL_RCC_OscConfig+0x74c>)
 800443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004440:	4a43      	ldr	r2, [pc, #268]	; (8004550 <HAL_RCC_OscConfig+0x74c>)
 8004442:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004446:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004448:	4b41      	ldr	r3, [pc, #260]	; (8004550 <HAL_RCC_OscConfig+0x74c>)
 800444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444c:	4a40      	ldr	r2, [pc, #256]	; (8004550 <HAL_RCC_OscConfig+0x74c>)
 800444e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004452:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004454:	4b3e      	ldr	r3, [pc, #248]	; (8004550 <HAL_RCC_OscConfig+0x74c>)
 8004456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004458:	4a3d      	ldr	r2, [pc, #244]	; (8004550 <HAL_RCC_OscConfig+0x74c>)
 800445a:	f043 0301 	orr.w	r3, r3, #1
 800445e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004460:	4b3b      	ldr	r3, [pc, #236]	; (8004550 <HAL_RCC_OscConfig+0x74c>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a3a      	ldr	r2, [pc, #232]	; (8004550 <HAL_RCC_OscConfig+0x74c>)
 8004466:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800446a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446c:	f7fd faf6 	bl	8001a5c <HAL_GetTick>
 8004470:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004474:	f7fd faf2 	bl	8001a5c <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e05f      	b.n	8004546 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004486:	4b32      	ldr	r3, [pc, #200]	; (8004550 <HAL_RCC_OscConfig+0x74c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0f0      	beq.n	8004474 <HAL_RCC_OscConfig+0x670>
 8004492:	e057      	b.n	8004544 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004494:	4b2e      	ldr	r3, [pc, #184]	; (8004550 <HAL_RCC_OscConfig+0x74c>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a2d      	ldr	r2, [pc, #180]	; (8004550 <HAL_RCC_OscConfig+0x74c>)
 800449a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800449e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a0:	f7fd fadc 	bl	8001a5c <HAL_GetTick>
 80044a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044a8:	f7fd fad8 	bl	8001a5c <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e045      	b.n	8004546 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044ba:	4b25      	ldr	r3, [pc, #148]	; (8004550 <HAL_RCC_OscConfig+0x74c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1f0      	bne.n	80044a8 <HAL_RCC_OscConfig+0x6a4>
 80044c6:	e03d      	b.n	8004544 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80044c8:	4b21      	ldr	r3, [pc, #132]	; (8004550 <HAL_RCC_OscConfig+0x74c>)
 80044ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044cc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80044ce:	4b20      	ldr	r3, [pc, #128]	; (8004550 <HAL_RCC_OscConfig+0x74c>)
 80044d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d031      	beq.n	8004540 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	f003 0203 	and.w	r2, r3, #3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d12a      	bne.n	8004540 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	091b      	lsrs	r3, r3, #4
 80044ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d122      	bne.n	8004540 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004504:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004506:	429a      	cmp	r2, r3
 8004508:	d11a      	bne.n	8004540 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	0a5b      	lsrs	r3, r3, #9
 800450e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004516:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004518:	429a      	cmp	r2, r3
 800451a:	d111      	bne.n	8004540 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	0c1b      	lsrs	r3, r3, #16
 8004520:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004528:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800452a:	429a      	cmp	r2, r3
 800452c:	d108      	bne.n	8004540 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	0e1b      	lsrs	r3, r3, #24
 8004532:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800453c:	429a      	cmp	r2, r3
 800453e:	d001      	beq.n	8004544 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e000      	b.n	8004546 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3730      	adds	r7, #48	; 0x30
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	58024400 	.word	0x58024400
 8004554:	fffffc0c 	.word	0xfffffc0c
 8004558:	ffff0007 	.word	0xffff0007

0800455c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e19c      	b.n	80048aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004570:	4b8a      	ldr	r3, [pc, #552]	; (800479c <HAL_RCC_ClockConfig+0x240>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 030f 	and.w	r3, r3, #15
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	429a      	cmp	r2, r3
 800457c:	d910      	bls.n	80045a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457e:	4b87      	ldr	r3, [pc, #540]	; (800479c <HAL_RCC_ClockConfig+0x240>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f023 020f 	bic.w	r2, r3, #15
 8004586:	4985      	ldr	r1, [pc, #532]	; (800479c <HAL_RCC_ClockConfig+0x240>)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	4313      	orrs	r3, r2
 800458c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800458e:	4b83      	ldr	r3, [pc, #524]	; (800479c <HAL_RCC_ClockConfig+0x240>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 030f 	and.w	r3, r3, #15
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	429a      	cmp	r2, r3
 800459a:	d001      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e184      	b.n	80048aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d010      	beq.n	80045ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	691a      	ldr	r2, [r3, #16]
 80045b0:	4b7b      	ldr	r3, [pc, #492]	; (80047a0 <HAL_RCC_ClockConfig+0x244>)
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d908      	bls.n	80045ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80045bc:	4b78      	ldr	r3, [pc, #480]	; (80047a0 <HAL_RCC_ClockConfig+0x244>)
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	4975      	ldr	r1, [pc, #468]	; (80047a0 <HAL_RCC_ClockConfig+0x244>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0308 	and.w	r3, r3, #8
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d010      	beq.n	80045fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	695a      	ldr	r2, [r3, #20]
 80045de:	4b70      	ldr	r3, [pc, #448]	; (80047a0 <HAL_RCC_ClockConfig+0x244>)
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d908      	bls.n	80045fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80045ea:	4b6d      	ldr	r3, [pc, #436]	; (80047a0 <HAL_RCC_ClockConfig+0x244>)
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	496a      	ldr	r1, [pc, #424]	; (80047a0 <HAL_RCC_ClockConfig+0x244>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0310 	and.w	r3, r3, #16
 8004604:	2b00      	cmp	r3, #0
 8004606:	d010      	beq.n	800462a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	699a      	ldr	r2, [r3, #24]
 800460c:	4b64      	ldr	r3, [pc, #400]	; (80047a0 <HAL_RCC_ClockConfig+0x244>)
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004614:	429a      	cmp	r2, r3
 8004616:	d908      	bls.n	800462a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004618:	4b61      	ldr	r3, [pc, #388]	; (80047a0 <HAL_RCC_ClockConfig+0x244>)
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	495e      	ldr	r1, [pc, #376]	; (80047a0 <HAL_RCC_ClockConfig+0x244>)
 8004626:	4313      	orrs	r3, r2
 8004628:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0320 	and.w	r3, r3, #32
 8004632:	2b00      	cmp	r3, #0
 8004634:	d010      	beq.n	8004658 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	69da      	ldr	r2, [r3, #28]
 800463a:	4b59      	ldr	r3, [pc, #356]	; (80047a0 <HAL_RCC_ClockConfig+0x244>)
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004642:	429a      	cmp	r2, r3
 8004644:	d908      	bls.n	8004658 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004646:	4b56      	ldr	r3, [pc, #344]	; (80047a0 <HAL_RCC_ClockConfig+0x244>)
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	4953      	ldr	r1, [pc, #332]	; (80047a0 <HAL_RCC_ClockConfig+0x244>)
 8004654:	4313      	orrs	r3, r2
 8004656:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d010      	beq.n	8004686 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68da      	ldr	r2, [r3, #12]
 8004668:	4b4d      	ldr	r3, [pc, #308]	; (80047a0 <HAL_RCC_ClockConfig+0x244>)
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	f003 030f 	and.w	r3, r3, #15
 8004670:	429a      	cmp	r2, r3
 8004672:	d908      	bls.n	8004686 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004674:	4b4a      	ldr	r3, [pc, #296]	; (80047a0 <HAL_RCC_ClockConfig+0x244>)
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	f023 020f 	bic.w	r2, r3, #15
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	4947      	ldr	r1, [pc, #284]	; (80047a0 <HAL_RCC_ClockConfig+0x244>)
 8004682:	4313      	orrs	r3, r2
 8004684:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d055      	beq.n	800473e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004692:	4b43      	ldr	r3, [pc, #268]	; (80047a0 <HAL_RCC_ClockConfig+0x244>)
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	4940      	ldr	r1, [pc, #256]	; (80047a0 <HAL_RCC_ClockConfig+0x244>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d107      	bne.n	80046bc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046ac:	4b3c      	ldr	r3, [pc, #240]	; (80047a0 <HAL_RCC_ClockConfig+0x244>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d121      	bne.n	80046fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e0f6      	b.n	80048aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	2b03      	cmp	r3, #3
 80046c2:	d107      	bne.n	80046d4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046c4:	4b36      	ldr	r3, [pc, #216]	; (80047a0 <HAL_RCC_ClockConfig+0x244>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d115      	bne.n	80046fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e0ea      	b.n	80048aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d107      	bne.n	80046ec <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046dc:	4b30      	ldr	r3, [pc, #192]	; (80047a0 <HAL_RCC_ClockConfig+0x244>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d109      	bne.n	80046fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e0de      	b.n	80048aa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046ec:	4b2c      	ldr	r3, [pc, #176]	; (80047a0 <HAL_RCC_ClockConfig+0x244>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d101      	bne.n	80046fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e0d6      	b.n	80048aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046fc:	4b28      	ldr	r3, [pc, #160]	; (80047a0 <HAL_RCC_ClockConfig+0x244>)
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	f023 0207 	bic.w	r2, r3, #7
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	4925      	ldr	r1, [pc, #148]	; (80047a0 <HAL_RCC_ClockConfig+0x244>)
 800470a:	4313      	orrs	r3, r2
 800470c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800470e:	f7fd f9a5 	bl	8001a5c <HAL_GetTick>
 8004712:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004714:	e00a      	b.n	800472c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004716:	f7fd f9a1 	bl	8001a5c <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	f241 3288 	movw	r2, #5000	; 0x1388
 8004724:	4293      	cmp	r3, r2
 8004726:	d901      	bls.n	800472c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e0be      	b.n	80048aa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800472c:	4b1c      	ldr	r3, [pc, #112]	; (80047a0 <HAL_RCC_ClockConfig+0x244>)
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	00db      	lsls	r3, r3, #3
 800473a:	429a      	cmp	r2, r3
 800473c:	d1eb      	bne.n	8004716 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d010      	beq.n	800476c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68da      	ldr	r2, [r3, #12]
 800474e:	4b14      	ldr	r3, [pc, #80]	; (80047a0 <HAL_RCC_ClockConfig+0x244>)
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	f003 030f 	and.w	r3, r3, #15
 8004756:	429a      	cmp	r2, r3
 8004758:	d208      	bcs.n	800476c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800475a:	4b11      	ldr	r3, [pc, #68]	; (80047a0 <HAL_RCC_ClockConfig+0x244>)
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	f023 020f 	bic.w	r2, r3, #15
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	490e      	ldr	r1, [pc, #56]	; (80047a0 <HAL_RCC_ClockConfig+0x244>)
 8004768:	4313      	orrs	r3, r2
 800476a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800476c:	4b0b      	ldr	r3, [pc, #44]	; (800479c <HAL_RCC_ClockConfig+0x240>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 030f 	and.w	r3, r3, #15
 8004774:	683a      	ldr	r2, [r7, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	d214      	bcs.n	80047a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800477a:	4b08      	ldr	r3, [pc, #32]	; (800479c <HAL_RCC_ClockConfig+0x240>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f023 020f 	bic.w	r2, r3, #15
 8004782:	4906      	ldr	r1, [pc, #24]	; (800479c <HAL_RCC_ClockConfig+0x240>)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	4313      	orrs	r3, r2
 8004788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800478a:	4b04      	ldr	r3, [pc, #16]	; (800479c <HAL_RCC_ClockConfig+0x240>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	429a      	cmp	r2, r3
 8004796:	d005      	beq.n	80047a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e086      	b.n	80048aa <HAL_RCC_ClockConfig+0x34e>
 800479c:	52002000 	.word	0x52002000
 80047a0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d010      	beq.n	80047d2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	691a      	ldr	r2, [r3, #16]
 80047b4:	4b3f      	ldr	r3, [pc, #252]	; (80048b4 <HAL_RCC_ClockConfig+0x358>)
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047bc:	429a      	cmp	r2, r3
 80047be:	d208      	bcs.n	80047d2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80047c0:	4b3c      	ldr	r3, [pc, #240]	; (80048b4 <HAL_RCC_ClockConfig+0x358>)
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	4939      	ldr	r1, [pc, #228]	; (80048b4 <HAL_RCC_ClockConfig+0x358>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0308 	and.w	r3, r3, #8
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d010      	beq.n	8004800 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	695a      	ldr	r2, [r3, #20]
 80047e2:	4b34      	ldr	r3, [pc, #208]	; (80048b4 <HAL_RCC_ClockConfig+0x358>)
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d208      	bcs.n	8004800 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80047ee:	4b31      	ldr	r3, [pc, #196]	; (80048b4 <HAL_RCC_ClockConfig+0x358>)
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	492e      	ldr	r1, [pc, #184]	; (80048b4 <HAL_RCC_ClockConfig+0x358>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0310 	and.w	r3, r3, #16
 8004808:	2b00      	cmp	r3, #0
 800480a:	d010      	beq.n	800482e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	699a      	ldr	r2, [r3, #24]
 8004810:	4b28      	ldr	r3, [pc, #160]	; (80048b4 <HAL_RCC_ClockConfig+0x358>)
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004818:	429a      	cmp	r2, r3
 800481a:	d208      	bcs.n	800482e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800481c:	4b25      	ldr	r3, [pc, #148]	; (80048b4 <HAL_RCC_ClockConfig+0x358>)
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	4922      	ldr	r1, [pc, #136]	; (80048b4 <HAL_RCC_ClockConfig+0x358>)
 800482a:	4313      	orrs	r3, r2
 800482c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0320 	and.w	r3, r3, #32
 8004836:	2b00      	cmp	r3, #0
 8004838:	d010      	beq.n	800485c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69da      	ldr	r2, [r3, #28]
 800483e:	4b1d      	ldr	r3, [pc, #116]	; (80048b4 <HAL_RCC_ClockConfig+0x358>)
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004846:	429a      	cmp	r2, r3
 8004848:	d208      	bcs.n	800485c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800484a:	4b1a      	ldr	r3, [pc, #104]	; (80048b4 <HAL_RCC_ClockConfig+0x358>)
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	4917      	ldr	r1, [pc, #92]	; (80048b4 <HAL_RCC_ClockConfig+0x358>)
 8004858:	4313      	orrs	r3, r2
 800485a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800485c:	f000 f834 	bl	80048c8 <HAL_RCC_GetSysClockFreq>
 8004860:	4602      	mov	r2, r0
 8004862:	4b14      	ldr	r3, [pc, #80]	; (80048b4 <HAL_RCC_ClockConfig+0x358>)
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	0a1b      	lsrs	r3, r3, #8
 8004868:	f003 030f 	and.w	r3, r3, #15
 800486c:	4912      	ldr	r1, [pc, #72]	; (80048b8 <HAL_RCC_ClockConfig+0x35c>)
 800486e:	5ccb      	ldrb	r3, [r1, r3]
 8004870:	f003 031f 	and.w	r3, r3, #31
 8004874:	fa22 f303 	lsr.w	r3, r2, r3
 8004878:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800487a:	4b0e      	ldr	r3, [pc, #56]	; (80048b4 <HAL_RCC_ClockConfig+0x358>)
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	4a0d      	ldr	r2, [pc, #52]	; (80048b8 <HAL_RCC_ClockConfig+0x35c>)
 8004884:	5cd3      	ldrb	r3, [r2, r3]
 8004886:	f003 031f 	and.w	r3, r3, #31
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	fa22 f303 	lsr.w	r3, r2, r3
 8004890:	4a0a      	ldr	r2, [pc, #40]	; (80048bc <HAL_RCC_ClockConfig+0x360>)
 8004892:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004894:	4a0a      	ldr	r2, [pc, #40]	; (80048c0 <HAL_RCC_ClockConfig+0x364>)
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800489a:	4b0a      	ldr	r3, [pc, #40]	; (80048c4 <HAL_RCC_ClockConfig+0x368>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fd f892 	bl	80019c8 <HAL_InitTick>
 80048a4:	4603      	mov	r3, r0
 80048a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80048a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3718      	adds	r7, #24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	58024400 	.word	0x58024400
 80048b8:	08016710 	.word	0x08016710
 80048bc:	24000004 	.word	0x24000004
 80048c0:	24000000 	.word	0x24000000
 80048c4:	24000008 	.word	0x24000008

080048c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b089      	sub	sp, #36	; 0x24
 80048cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048ce:	4bb3      	ldr	r3, [pc, #716]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048d6:	2b18      	cmp	r3, #24
 80048d8:	f200 8155 	bhi.w	8004b86 <HAL_RCC_GetSysClockFreq+0x2be>
 80048dc:	a201      	add	r2, pc, #4	; (adr r2, 80048e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80048de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e2:	bf00      	nop
 80048e4:	08004949 	.word	0x08004949
 80048e8:	08004b87 	.word	0x08004b87
 80048ec:	08004b87 	.word	0x08004b87
 80048f0:	08004b87 	.word	0x08004b87
 80048f4:	08004b87 	.word	0x08004b87
 80048f8:	08004b87 	.word	0x08004b87
 80048fc:	08004b87 	.word	0x08004b87
 8004900:	08004b87 	.word	0x08004b87
 8004904:	0800496f 	.word	0x0800496f
 8004908:	08004b87 	.word	0x08004b87
 800490c:	08004b87 	.word	0x08004b87
 8004910:	08004b87 	.word	0x08004b87
 8004914:	08004b87 	.word	0x08004b87
 8004918:	08004b87 	.word	0x08004b87
 800491c:	08004b87 	.word	0x08004b87
 8004920:	08004b87 	.word	0x08004b87
 8004924:	08004975 	.word	0x08004975
 8004928:	08004b87 	.word	0x08004b87
 800492c:	08004b87 	.word	0x08004b87
 8004930:	08004b87 	.word	0x08004b87
 8004934:	08004b87 	.word	0x08004b87
 8004938:	08004b87 	.word	0x08004b87
 800493c:	08004b87 	.word	0x08004b87
 8004940:	08004b87 	.word	0x08004b87
 8004944:	0800497b 	.word	0x0800497b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004948:	4b94      	ldr	r3, [pc, #592]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0320 	and.w	r3, r3, #32
 8004950:	2b00      	cmp	r3, #0
 8004952:	d009      	beq.n	8004968 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004954:	4b91      	ldr	r3, [pc, #580]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	08db      	lsrs	r3, r3, #3
 800495a:	f003 0303 	and.w	r3, r3, #3
 800495e:	4a90      	ldr	r2, [pc, #576]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004960:	fa22 f303 	lsr.w	r3, r2, r3
 8004964:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004966:	e111      	b.n	8004b8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004968:	4b8d      	ldr	r3, [pc, #564]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800496a:	61bb      	str	r3, [r7, #24]
    break;
 800496c:	e10e      	b.n	8004b8c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800496e:	4b8d      	ldr	r3, [pc, #564]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004970:	61bb      	str	r3, [r7, #24]
    break;
 8004972:	e10b      	b.n	8004b8c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004974:	4b8c      	ldr	r3, [pc, #560]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004976:	61bb      	str	r3, [r7, #24]
    break;
 8004978:	e108      	b.n	8004b8c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800497a:	4b88      	ldr	r3, [pc, #544]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800497c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497e:	f003 0303 	and.w	r3, r3, #3
 8004982:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004984:	4b85      	ldr	r3, [pc, #532]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004988:	091b      	lsrs	r3, r3, #4
 800498a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800498e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004990:	4b82      	ldr	r3, [pc, #520]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800499a:	4b80      	ldr	r3, [pc, #512]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800499c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800499e:	08db      	lsrs	r3, r3, #3
 80049a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	fb02 f303 	mul.w	r3, r2, r3
 80049aa:	ee07 3a90 	vmov	s15, r3
 80049ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049b2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 80e1 	beq.w	8004b80 <HAL_RCC_GetSysClockFreq+0x2b8>
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	f000 8083 	beq.w	8004acc <HAL_RCC_GetSysClockFreq+0x204>
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	f200 80a1 	bhi.w	8004b10 <HAL_RCC_GetSysClockFreq+0x248>
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d003      	beq.n	80049dc <HAL_RCC_GetSysClockFreq+0x114>
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d056      	beq.n	8004a88 <HAL_RCC_GetSysClockFreq+0x1c0>
 80049da:	e099      	b.n	8004b10 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049dc:	4b6f      	ldr	r3, [pc, #444]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0320 	and.w	r3, r3, #32
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d02d      	beq.n	8004a44 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80049e8:	4b6c      	ldr	r3, [pc, #432]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	08db      	lsrs	r3, r3, #3
 80049ee:	f003 0303 	and.w	r3, r3, #3
 80049f2:	4a6b      	ldr	r2, [pc, #428]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80049f4:	fa22 f303 	lsr.w	r3, r2, r3
 80049f8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	ee07 3a90 	vmov	s15, r3
 8004a00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	ee07 3a90 	vmov	s15, r3
 8004a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a12:	4b62      	ldr	r3, [pc, #392]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a1a:	ee07 3a90 	vmov	s15, r3
 8004a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a22:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a26:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004bac <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004a42:	e087      	b.n	8004b54 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	ee07 3a90 	vmov	s15, r3
 8004a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a4e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004bb0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a56:	4b51      	ldr	r3, [pc, #324]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a5e:	ee07 3a90 	vmov	s15, r3
 8004a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a66:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a6a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004bac <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a86:	e065      	b.n	8004b54 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	ee07 3a90 	vmov	s15, r3
 8004a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a92:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004bb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a9a:	4b40      	ldr	r3, [pc, #256]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aa2:	ee07 3a90 	vmov	s15, r3
 8004aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8004aae:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004bac <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aca:	e043      	b.n	8004b54 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	ee07 3a90 	vmov	s15, r3
 8004ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ad6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004bb8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ade:	4b2f      	ldr	r3, [pc, #188]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae6:	ee07 3a90 	vmov	s15, r3
 8004aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aee:	ed97 6a02 	vldr	s12, [r7, #8]
 8004af2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004bac <HAL_RCC_GetSysClockFreq+0x2e4>
 8004af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004afe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b0e:	e021      	b.n	8004b54 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	ee07 3a90 	vmov	s15, r3
 8004b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b1a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004bb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b22:	4b1e      	ldr	r3, [pc, #120]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b2a:	ee07 3a90 	vmov	s15, r3
 8004b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b32:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b36:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004bac <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b52:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004b54:	4b11      	ldr	r3, [pc, #68]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b58:	0a5b      	lsrs	r3, r3, #9
 8004b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b5e:	3301      	adds	r3, #1
 8004b60:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	ee07 3a90 	vmov	s15, r3
 8004b68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b78:	ee17 3a90 	vmov	r3, s15
 8004b7c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004b7e:	e005      	b.n	8004b8c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	61bb      	str	r3, [r7, #24]
    break;
 8004b84:	e002      	b.n	8004b8c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004b86:	4b07      	ldr	r3, [pc, #28]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004b88:	61bb      	str	r3, [r7, #24]
    break;
 8004b8a:	bf00      	nop
  }

  return sysclockfreq;
 8004b8c:	69bb      	ldr	r3, [r7, #24]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3724      	adds	r7, #36	; 0x24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	58024400 	.word	0x58024400
 8004ba0:	03d09000 	.word	0x03d09000
 8004ba4:	003d0900 	.word	0x003d0900
 8004ba8:	007a1200 	.word	0x007a1200
 8004bac:	46000000 	.word	0x46000000
 8004bb0:	4c742400 	.word	0x4c742400
 8004bb4:	4a742400 	.word	0x4a742400
 8004bb8:	4af42400 	.word	0x4af42400

08004bbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004bc2:	f7ff fe81 	bl	80048c8 <HAL_RCC_GetSysClockFreq>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	4b10      	ldr	r3, [pc, #64]	; (8004c0c <HAL_RCC_GetHCLKFreq+0x50>)
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	0a1b      	lsrs	r3, r3, #8
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	490f      	ldr	r1, [pc, #60]	; (8004c10 <HAL_RCC_GetHCLKFreq+0x54>)
 8004bd4:	5ccb      	ldrb	r3, [r1, r3]
 8004bd6:	f003 031f 	and.w	r3, r3, #31
 8004bda:	fa22 f303 	lsr.w	r3, r2, r3
 8004bde:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004be0:	4b0a      	ldr	r3, [pc, #40]	; (8004c0c <HAL_RCC_GetHCLKFreq+0x50>)
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	f003 030f 	and.w	r3, r3, #15
 8004be8:	4a09      	ldr	r2, [pc, #36]	; (8004c10 <HAL_RCC_GetHCLKFreq+0x54>)
 8004bea:	5cd3      	ldrb	r3, [r2, r3]
 8004bec:	f003 031f 	and.w	r3, r3, #31
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf6:	4a07      	ldr	r2, [pc, #28]	; (8004c14 <HAL_RCC_GetHCLKFreq+0x58>)
 8004bf8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004bfa:	4a07      	ldr	r2, [pc, #28]	; (8004c18 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004c00:	4b04      	ldr	r3, [pc, #16]	; (8004c14 <HAL_RCC_GetHCLKFreq+0x58>)
 8004c02:	681b      	ldr	r3, [r3, #0]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	58024400 	.word	0x58024400
 8004c10:	08016710 	.word	0x08016710
 8004c14:	24000004 	.word	0x24000004
 8004c18:	24000000 	.word	0x24000000

08004c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004c20:	f7ff ffcc 	bl	8004bbc <HAL_RCC_GetHCLKFreq>
 8004c24:	4602      	mov	r2, r0
 8004c26:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	091b      	lsrs	r3, r3, #4
 8004c2c:	f003 0307 	and.w	r3, r3, #7
 8004c30:	4904      	ldr	r1, [pc, #16]	; (8004c44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c32:	5ccb      	ldrb	r3, [r1, r3]
 8004c34:	f003 031f 	and.w	r3, r3, #31
 8004c38:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	58024400 	.word	0x58024400
 8004c44:	08016710 	.word	0x08016710

08004c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004c4c:	f7ff ffb6 	bl	8004bbc <HAL_RCC_GetHCLKFreq>
 8004c50:	4602      	mov	r2, r0
 8004c52:	4b06      	ldr	r3, [pc, #24]	; (8004c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	0a1b      	lsrs	r3, r3, #8
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	4904      	ldr	r1, [pc, #16]	; (8004c70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c5e:	5ccb      	ldrb	r3, [r1, r3]
 8004c60:	f003 031f 	and.w	r3, r3, #31
 8004c64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	58024400 	.word	0x58024400
 8004c70:	08016710 	.word	0x08016710

08004c74 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c80:	2300      	movs	r3, #0
 8004c82:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d03f      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c98:	d02a      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004c9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c9e:	d824      	bhi.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ca0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ca4:	d018      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ca6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004caa:	d81e      	bhi.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004cb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cb4:	d007      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004cb6:	e018      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cb8:	4bab      	ldr	r3, [pc, #684]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbc:	4aaa      	ldr	r2, [pc, #680]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004cc4:	e015      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	3304      	adds	r3, #4
 8004cca:	2102      	movs	r1, #2
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f001 f989 	bl	8005fe4 <RCCEx_PLL2_Config>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004cd6:	e00c      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3324      	adds	r3, #36	; 0x24
 8004cdc:	2102      	movs	r1, #2
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f001 fa32 	bl	8006148 <RCCEx_PLL3_Config>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004ce8:	e003      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	75fb      	strb	r3, [r7, #23]
      break;
 8004cee:	e000      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004cf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cf2:	7dfb      	ldrb	r3, [r7, #23]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d109      	bne.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004cf8:	4b9b      	ldr	r3, [pc, #620]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d04:	4998      	ldr	r1, [pc, #608]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	650b      	str	r3, [r1, #80]	; 0x50
 8004d0a:	e001      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d0c:	7dfb      	ldrb	r3, [r7, #23]
 8004d0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d03d      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d20:	2b04      	cmp	r3, #4
 8004d22:	d826      	bhi.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004d24:	a201      	add	r2, pc, #4	; (adr r2, 8004d2c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2a:	bf00      	nop
 8004d2c:	08004d41 	.word	0x08004d41
 8004d30:	08004d4f 	.word	0x08004d4f
 8004d34:	08004d61 	.word	0x08004d61
 8004d38:	08004d79 	.word	0x08004d79
 8004d3c:	08004d79 	.word	0x08004d79
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d40:	4b89      	ldr	r3, [pc, #548]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d44:	4a88      	ldr	r2, [pc, #544]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d4c:	e015      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	3304      	adds	r3, #4
 8004d52:	2100      	movs	r1, #0
 8004d54:	4618      	mov	r0, r3
 8004d56:	f001 f945 	bl	8005fe4 <RCCEx_PLL2_Config>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d5e:	e00c      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	3324      	adds	r3, #36	; 0x24
 8004d64:	2100      	movs	r1, #0
 8004d66:	4618      	mov	r0, r3
 8004d68:	f001 f9ee 	bl	8006148 <RCCEx_PLL3_Config>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d70:	e003      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	75fb      	strb	r3, [r7, #23]
      break;
 8004d76:	e000      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004d78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d7a:	7dfb      	ldrb	r3, [r7, #23]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d109      	bne.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d80:	4b79      	ldr	r3, [pc, #484]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d84:	f023 0207 	bic.w	r2, r3, #7
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8c:	4976      	ldr	r1, [pc, #472]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	650b      	str	r3, [r1, #80]	; 0x50
 8004d92:	e001      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d94:	7dfb      	ldrb	r3, [r7, #23]
 8004d96:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d051      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004daa:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004dae:	d036      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004db0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004db4:	d830      	bhi.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004db6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004dba:	d032      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004dbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004dc0:	d82a      	bhi.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004dc2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004dc6:	d02e      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8004dc8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004dcc:	d824      	bhi.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004dce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dd2:	d018      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004dd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dd8:	d81e      	bhi.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d003      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8004dde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004de2:	d007      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004de4:	e018      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004de6:	4b60      	ldr	r3, [pc, #384]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dea:	4a5f      	ldr	r2, [pc, #380]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004df0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004df2:	e019      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	3304      	adds	r3, #4
 8004df8:	2100      	movs	r1, #0
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f001 f8f2 	bl	8005fe4 <RCCEx_PLL2_Config>
 8004e00:	4603      	mov	r3, r0
 8004e02:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004e04:	e010      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	3324      	adds	r3, #36	; 0x24
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f001 f99b 	bl	8006148 <RCCEx_PLL3_Config>
 8004e12:	4603      	mov	r3, r0
 8004e14:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e16:	e007      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e1c:	e004      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004e1e:	bf00      	nop
 8004e20:	e002      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004e22:	bf00      	nop
 8004e24:	e000      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004e26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e28:	7dfb      	ldrb	r3, [r7, #23]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10a      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004e2e:	4b4e      	ldr	r3, [pc, #312]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e32:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004e3c:	494a      	ldr	r1, [pc, #296]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	658b      	str	r3, [r1, #88]	; 0x58
 8004e42:	e001      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e44:	7dfb      	ldrb	r3, [r7, #23]
 8004e46:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d051      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e5a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004e5e:	d036      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8004e60:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004e64:	d830      	bhi.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004e66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e6a:	d032      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8004e6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e70:	d82a      	bhi.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004e72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e76:	d02e      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8004e78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e7c:	d824      	bhi.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004e7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e82:	d018      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8004e84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e88:	d81e      	bhi.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8004e8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e92:	d007      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004e94:	e018      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e96:	4b34      	ldr	r3, [pc, #208]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9a:	4a33      	ldr	r2, [pc, #204]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ea0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ea2:	e019      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	3304      	adds	r3, #4
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f001 f89a 	bl	8005fe4 <RCCEx_PLL2_Config>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004eb4:	e010      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	3324      	adds	r3, #36	; 0x24
 8004eba:	2100      	movs	r1, #0
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f001 f943 	bl	8006148 <RCCEx_PLL3_Config>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ec6:	e007      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	75fb      	strb	r3, [r7, #23]
      break;
 8004ecc:	e004      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004ece:	bf00      	nop
 8004ed0:	e002      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004ed2:	bf00      	nop
 8004ed4:	e000      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004ed6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ed8:	7dfb      	ldrb	r3, [r7, #23]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10a      	bne.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004ede:	4b22      	ldr	r3, [pc, #136]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004eec:	491e      	ldr	r1, [pc, #120]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	658b      	str	r3, [r1, #88]	; 0x58
 8004ef2:	e001      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef4:	7dfb      	ldrb	r3, [r7, #23]
 8004ef6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d035      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f08:	2b30      	cmp	r3, #48	; 0x30
 8004f0a:	d01c      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004f0c:	2b30      	cmp	r3, #48	; 0x30
 8004f0e:	d817      	bhi.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004f10:	2b20      	cmp	r3, #32
 8004f12:	d00c      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004f14:	2b20      	cmp	r3, #32
 8004f16:	d813      	bhi.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d016      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8004f1c:	2b10      	cmp	r3, #16
 8004f1e:	d10f      	bne.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f20:	4b11      	ldr	r3, [pc, #68]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f24:	4a10      	ldr	r2, [pc, #64]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004f2c:	e00e      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	3304      	adds	r3, #4
 8004f32:	2102      	movs	r1, #2
 8004f34:	4618      	mov	r0, r3
 8004f36:	f001 f855 	bl	8005fe4 <RCCEx_PLL2_Config>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004f3e:	e005      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	75fb      	strb	r3, [r7, #23]
      break;
 8004f44:	e002      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8004f46:	bf00      	nop
 8004f48:	e000      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8004f4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f4c:	7dfb      	ldrb	r3, [r7, #23]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10c      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004f52:	4b05      	ldr	r3, [pc, #20]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f56:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f5e:	4902      	ldr	r1, [pc, #8]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004f64:	e004      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004f66:	bf00      	nop
 8004f68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f6c:	7dfb      	ldrb	r3, [r7, #23]
 8004f6e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d047      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f84:	d030      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8004f86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f8a:	d82a      	bhi.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004f8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f90:	d02c      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x378>
 8004f92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f96:	d824      	bhi.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004f98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f9c:	d018      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004f9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fa2:	d81e      	bhi.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d003      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fac:	d007      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004fae:	e018      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fb0:	4bac      	ldr	r3, [pc, #688]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb4:	4aab      	ldr	r2, [pc, #684]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004fb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004fbc:	e017      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f001 f80d 	bl	8005fe4 <RCCEx_PLL2_Config>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004fce:	e00e      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3324      	adds	r3, #36	; 0x24
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f001 f8b6 	bl	8006148 <RCCEx_PLL3_Config>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004fe0:	e005      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	75fb      	strb	r3, [r7, #23]
      break;
 8004fe6:	e002      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8004fe8:	bf00      	nop
 8004fea:	e000      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8004fec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fee:	7dfb      	ldrb	r3, [r7, #23]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d109      	bne.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004ff4:	4b9b      	ldr	r3, [pc, #620]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005000:	4998      	ldr	r1, [pc, #608]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005002:	4313      	orrs	r3, r2
 8005004:	650b      	str	r3, [r1, #80]	; 0x50
 8005006:	e001      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005008:	7dfb      	ldrb	r3, [r7, #23]
 800500a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d049      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800501c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005020:	d02e      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8005022:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005026:	d828      	bhi.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005028:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800502c:	d02a      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800502e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005032:	d822      	bhi.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005034:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005038:	d026      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800503a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800503e:	d81c      	bhi.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005040:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005044:	d010      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8005046:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800504a:	d816      	bhi.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800504c:	2b00      	cmp	r3, #0
 800504e:	d01d      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005054:	d111      	bne.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	3304      	adds	r3, #4
 800505a:	2101      	movs	r1, #1
 800505c:	4618      	mov	r0, r3
 800505e:	f000 ffc1 	bl	8005fe4 <RCCEx_PLL2_Config>
 8005062:	4603      	mov	r3, r0
 8005064:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005066:	e012      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3324      	adds	r3, #36	; 0x24
 800506c:	2101      	movs	r1, #1
 800506e:	4618      	mov	r0, r3
 8005070:	f001 f86a 	bl	8006148 <RCCEx_PLL3_Config>
 8005074:	4603      	mov	r3, r0
 8005076:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005078:	e009      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	75fb      	strb	r3, [r7, #23]
      break;
 800507e:	e006      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005080:	bf00      	nop
 8005082:	e004      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005084:	bf00      	nop
 8005086:	e002      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005088:	bf00      	nop
 800508a:	e000      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800508c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800508e:	7dfb      	ldrb	r3, [r7, #23]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d109      	bne.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005094:	4b73      	ldr	r3, [pc, #460]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005098:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050a0:	4970      	ldr	r1, [pc, #448]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	650b      	str	r3, [r1, #80]	; 0x50
 80050a6:	e001      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a8:	7dfb      	ldrb	r3, [r7, #23]
 80050aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d04b      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80050be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050c2:	d02e      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80050c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050c8:	d828      	bhi.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80050ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ce:	d02a      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80050d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d4:	d822      	bhi.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80050d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80050da:	d026      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80050dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80050e0:	d81c      	bhi.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80050e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050e6:	d010      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x496>
 80050e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050ec:	d816      	bhi.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d01d      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80050f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050f6:	d111      	bne.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	3304      	adds	r3, #4
 80050fc:	2101      	movs	r1, #1
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 ff70 	bl	8005fe4 <RCCEx_PLL2_Config>
 8005104:	4603      	mov	r3, r0
 8005106:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005108:	e012      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	3324      	adds	r3, #36	; 0x24
 800510e:	2101      	movs	r1, #1
 8005110:	4618      	mov	r0, r3
 8005112:	f001 f819 	bl	8006148 <RCCEx_PLL3_Config>
 8005116:	4603      	mov	r3, r0
 8005118:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800511a:	e009      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	75fb      	strb	r3, [r7, #23]
      break;
 8005120:	e006      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005122:	bf00      	nop
 8005124:	e004      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005126:	bf00      	nop
 8005128:	e002      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800512a:	bf00      	nop
 800512c:	e000      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800512e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005130:	7dfb      	ldrb	r3, [r7, #23]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10a      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005136:	4b4b      	ldr	r3, [pc, #300]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800513a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005144:	4947      	ldr	r1, [pc, #284]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005146:	4313      	orrs	r3, r2
 8005148:	658b      	str	r3, [r1, #88]	; 0x58
 800514a:	e001      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800514c:	7dfb      	ldrb	r3, [r7, #23]
 800514e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d02f      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005160:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005164:	d00e      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8005166:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800516a:	d814      	bhi.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800516c:	2b00      	cmp	r3, #0
 800516e:	d015      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005170:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005174:	d10f      	bne.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005176:	4b3b      	ldr	r3, [pc, #236]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517a:	4a3a      	ldr	r2, [pc, #232]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800517c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005180:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005182:	e00c      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	3304      	adds	r3, #4
 8005188:	2101      	movs	r1, #1
 800518a:	4618      	mov	r0, r3
 800518c:	f000 ff2a 	bl	8005fe4 <RCCEx_PLL2_Config>
 8005190:	4603      	mov	r3, r0
 8005192:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005194:	e003      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	75fb      	strb	r3, [r7, #23]
      break;
 800519a:	e000      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800519c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800519e:	7dfb      	ldrb	r3, [r7, #23]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d109      	bne.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80051a4:	4b2f      	ldr	r3, [pc, #188]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80051a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051b0:	492c      	ldr	r1, [pc, #176]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	650b      	str	r3, [r1, #80]	; 0x50
 80051b6:	e001      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b8:	7dfb      	ldrb	r3, [r7, #23]
 80051ba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d032      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051cc:	2b03      	cmp	r3, #3
 80051ce:	d81b      	bhi.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80051d0:	a201      	add	r2, pc, #4	; (adr r2, 80051d8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80051d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d6:	bf00      	nop
 80051d8:	0800520f 	.word	0x0800520f
 80051dc:	080051e9 	.word	0x080051e9
 80051e0:	080051f7 	.word	0x080051f7
 80051e4:	0800520f 	.word	0x0800520f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051e8:	4b1e      	ldr	r3, [pc, #120]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80051ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ec:	4a1d      	ldr	r2, [pc, #116]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80051ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80051f4:	e00c      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	3304      	adds	r3, #4
 80051fa:	2102      	movs	r1, #2
 80051fc:	4618      	mov	r0, r3
 80051fe:	f000 fef1 	bl	8005fe4 <RCCEx_PLL2_Config>
 8005202:	4603      	mov	r3, r0
 8005204:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005206:	e003      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	75fb      	strb	r3, [r7, #23]
      break;
 800520c:	e000      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800520e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005210:	7dfb      	ldrb	r3, [r7, #23]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d109      	bne.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005216:	4b13      	ldr	r3, [pc, #76]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800521a:	f023 0203 	bic.w	r2, r3, #3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005222:	4910      	ldr	r1, [pc, #64]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005224:	4313      	orrs	r3, r2
 8005226:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005228:	e001      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800522a:	7dfb      	ldrb	r3, [r7, #23]
 800522c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005236:	2b00      	cmp	r3, #0
 8005238:	f000 808a 	beq.w	8005350 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800523c:	4b0a      	ldr	r3, [pc, #40]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a09      	ldr	r2, [pc, #36]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005246:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005248:	f7fc fc08 	bl	8001a5c <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800524e:	e00d      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005250:	f7fc fc04 	bl	8001a5c <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b64      	cmp	r3, #100	; 0x64
 800525c:	d906      	bls.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	75fb      	strb	r3, [r7, #23]
        break;
 8005262:	e009      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005264:	58024400 	.word	0x58024400
 8005268:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800526c:	4bb9      	ldr	r3, [pc, #740]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0eb      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8005278:	7dfb      	ldrb	r3, [r7, #23]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d166      	bne.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800527e:	4bb6      	ldr	r3, [pc, #728]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005280:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005288:	4053      	eors	r3, r2
 800528a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800528e:	2b00      	cmp	r3, #0
 8005290:	d013      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005292:	4bb1      	ldr	r3, [pc, #708]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005296:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800529a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800529c:	4bae      	ldr	r3, [pc, #696]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800529e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a0:	4aad      	ldr	r2, [pc, #692]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80052a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052a6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052a8:	4bab      	ldr	r3, [pc, #684]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80052aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ac:	4aaa      	ldr	r2, [pc, #680]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80052ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052b2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80052b4:	4aa8      	ldr	r2, [pc, #672]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80052c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052c4:	d115      	bne.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c6:	f7fc fbc9 	bl	8001a5c <HAL_GetTick>
 80052ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052cc:	e00b      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ce:	f7fc fbc5 	bl	8001a5c <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052dc:	4293      	cmp	r3, r2
 80052de:	d902      	bls.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	75fb      	strb	r3, [r7, #23]
            break;
 80052e4:	e005      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052e6:	4b9c      	ldr	r3, [pc, #624]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80052e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d0ed      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 80052f2:	7dfb      	ldrb	r3, [r7, #23]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d126      	bne.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80052fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005302:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005306:	d10d      	bne.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8005308:	4b93      	ldr	r3, [pc, #588]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005316:	0919      	lsrs	r1, r3, #4
 8005318:	4b90      	ldr	r3, [pc, #576]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800531a:	400b      	ands	r3, r1
 800531c:	498e      	ldr	r1, [pc, #568]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800531e:	4313      	orrs	r3, r2
 8005320:	610b      	str	r3, [r1, #16]
 8005322:	e005      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8005324:	4b8c      	ldr	r3, [pc, #560]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	4a8b      	ldr	r2, [pc, #556]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800532a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800532e:	6113      	str	r3, [r2, #16]
 8005330:	4b89      	ldr	r3, [pc, #548]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005332:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800533a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800533e:	4986      	ldr	r1, [pc, #536]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005340:	4313      	orrs	r3, r2
 8005342:	670b      	str	r3, [r1, #112]	; 0x70
 8005344:	e004      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005346:	7dfb      	ldrb	r3, [r7, #23]
 8005348:	75bb      	strb	r3, [r7, #22]
 800534a:	e001      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800534c:	7dfb      	ldrb	r3, [r7, #23]
 800534e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b00      	cmp	r3, #0
 800535a:	d07e      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005360:	2b28      	cmp	r3, #40	; 0x28
 8005362:	d867      	bhi.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8005364:	a201      	add	r2, pc, #4	; (adr r2, 800536c <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8005366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536a:	bf00      	nop
 800536c:	0800543b 	.word	0x0800543b
 8005370:	08005435 	.word	0x08005435
 8005374:	08005435 	.word	0x08005435
 8005378:	08005435 	.word	0x08005435
 800537c:	08005435 	.word	0x08005435
 8005380:	08005435 	.word	0x08005435
 8005384:	08005435 	.word	0x08005435
 8005388:	08005435 	.word	0x08005435
 800538c:	08005411 	.word	0x08005411
 8005390:	08005435 	.word	0x08005435
 8005394:	08005435 	.word	0x08005435
 8005398:	08005435 	.word	0x08005435
 800539c:	08005435 	.word	0x08005435
 80053a0:	08005435 	.word	0x08005435
 80053a4:	08005435 	.word	0x08005435
 80053a8:	08005435 	.word	0x08005435
 80053ac:	08005423 	.word	0x08005423
 80053b0:	08005435 	.word	0x08005435
 80053b4:	08005435 	.word	0x08005435
 80053b8:	08005435 	.word	0x08005435
 80053bc:	08005435 	.word	0x08005435
 80053c0:	08005435 	.word	0x08005435
 80053c4:	08005435 	.word	0x08005435
 80053c8:	08005435 	.word	0x08005435
 80053cc:	0800543b 	.word	0x0800543b
 80053d0:	08005435 	.word	0x08005435
 80053d4:	08005435 	.word	0x08005435
 80053d8:	08005435 	.word	0x08005435
 80053dc:	08005435 	.word	0x08005435
 80053e0:	08005435 	.word	0x08005435
 80053e4:	08005435 	.word	0x08005435
 80053e8:	08005435 	.word	0x08005435
 80053ec:	0800543b 	.word	0x0800543b
 80053f0:	08005435 	.word	0x08005435
 80053f4:	08005435 	.word	0x08005435
 80053f8:	08005435 	.word	0x08005435
 80053fc:	08005435 	.word	0x08005435
 8005400:	08005435 	.word	0x08005435
 8005404:	08005435 	.word	0x08005435
 8005408:	08005435 	.word	0x08005435
 800540c:	0800543b 	.word	0x0800543b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	3304      	adds	r3, #4
 8005414:	2101      	movs	r1, #1
 8005416:	4618      	mov	r0, r3
 8005418:	f000 fde4 	bl	8005fe4 <RCCEx_PLL2_Config>
 800541c:	4603      	mov	r3, r0
 800541e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005420:	e00c      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	3324      	adds	r3, #36	; 0x24
 8005426:	2101      	movs	r1, #1
 8005428:	4618      	mov	r0, r3
 800542a:	f000 fe8d 	bl	8006148 <RCCEx_PLL3_Config>
 800542e:	4603      	mov	r3, r0
 8005430:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005432:	e003      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	75fb      	strb	r3, [r7, #23]
      break;
 8005438:	e000      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800543a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800543c:	7dfb      	ldrb	r3, [r7, #23]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d109      	bne.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005442:	4b45      	ldr	r3, [pc, #276]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005446:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800544e:	4942      	ldr	r1, [pc, #264]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005450:	4313      	orrs	r3, r2
 8005452:	654b      	str	r3, [r1, #84]	; 0x54
 8005454:	e001      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005456:	7dfb      	ldrb	r3, [r7, #23]
 8005458:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d037      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546a:	2b05      	cmp	r3, #5
 800546c:	d820      	bhi.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800546e:	a201      	add	r2, pc, #4	; (adr r2, 8005474 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8005470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005474:	080054b7 	.word	0x080054b7
 8005478:	0800548d 	.word	0x0800548d
 800547c:	0800549f 	.word	0x0800549f
 8005480:	080054b7 	.word	0x080054b7
 8005484:	080054b7 	.word	0x080054b7
 8005488:	080054b7 	.word	0x080054b7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3304      	adds	r3, #4
 8005490:	2101      	movs	r1, #1
 8005492:	4618      	mov	r0, r3
 8005494:	f000 fda6 	bl	8005fe4 <RCCEx_PLL2_Config>
 8005498:	4603      	mov	r3, r0
 800549a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800549c:	e00c      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	3324      	adds	r3, #36	; 0x24
 80054a2:	2101      	movs	r1, #1
 80054a4:	4618      	mov	r0, r3
 80054a6:	f000 fe4f 	bl	8006148 <RCCEx_PLL3_Config>
 80054aa:	4603      	mov	r3, r0
 80054ac:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80054ae:	e003      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	75fb      	strb	r3, [r7, #23]
      break;
 80054b4:	e000      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80054b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054b8:	7dfb      	ldrb	r3, [r7, #23]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d109      	bne.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80054be:	4b26      	ldr	r3, [pc, #152]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80054c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c2:	f023 0207 	bic.w	r2, r3, #7
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ca:	4923      	ldr	r1, [pc, #140]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	654b      	str	r3, [r1, #84]	; 0x54
 80054d0:	e001      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d2:	7dfb      	ldrb	r3, [r7, #23]
 80054d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0304 	and.w	r3, r3, #4
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d040      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054e8:	2b05      	cmp	r3, #5
 80054ea:	d821      	bhi.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80054ec:	a201      	add	r2, pc, #4	; (adr r2, 80054f4 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80054ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f2:	bf00      	nop
 80054f4:	08005537 	.word	0x08005537
 80054f8:	0800550d 	.word	0x0800550d
 80054fc:	0800551f 	.word	0x0800551f
 8005500:	08005537 	.word	0x08005537
 8005504:	08005537 	.word	0x08005537
 8005508:	08005537 	.word	0x08005537
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	3304      	adds	r3, #4
 8005510:	2101      	movs	r1, #1
 8005512:	4618      	mov	r0, r3
 8005514:	f000 fd66 	bl	8005fe4 <RCCEx_PLL2_Config>
 8005518:	4603      	mov	r3, r0
 800551a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800551c:	e00c      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	3324      	adds	r3, #36	; 0x24
 8005522:	2101      	movs	r1, #1
 8005524:	4618      	mov	r0, r3
 8005526:	f000 fe0f 	bl	8006148 <RCCEx_PLL3_Config>
 800552a:	4603      	mov	r3, r0
 800552c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800552e:	e003      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	75fb      	strb	r3, [r7, #23]
      break;
 8005534:	e000      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8005536:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005538:	7dfb      	ldrb	r3, [r7, #23]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d110      	bne.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800553e:	4b06      	ldr	r3, [pc, #24]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005542:	f023 0207 	bic.w	r2, r3, #7
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800554c:	4902      	ldr	r1, [pc, #8]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800554e:	4313      	orrs	r3, r2
 8005550:	658b      	str	r3, [r1, #88]	; 0x58
 8005552:	e007      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8005554:	58024800 	.word	0x58024800
 8005558:	58024400 	.word	0x58024400
 800555c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005560:	7dfb      	ldrb	r3, [r7, #23]
 8005562:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0320 	and.w	r3, r3, #32
 800556c:	2b00      	cmp	r3, #0
 800556e:	d04b      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005576:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800557a:	d02e      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x966>
 800557c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005580:	d828      	bhi.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8005582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005586:	d02a      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8005588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800558c:	d822      	bhi.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800558e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005592:	d026      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005594:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005598:	d81c      	bhi.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800559a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800559e:	d010      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80055a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055a4:	d816      	bhi.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d01d      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x972>
 80055aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055ae:	d111      	bne.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	3304      	adds	r3, #4
 80055b4:	2100      	movs	r1, #0
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 fd14 	bl	8005fe4 <RCCEx_PLL2_Config>
 80055bc:	4603      	mov	r3, r0
 80055be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80055c0:	e012      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	3324      	adds	r3, #36	; 0x24
 80055c6:	2102      	movs	r1, #2
 80055c8:	4618      	mov	r0, r3
 80055ca:	f000 fdbd 	bl	8006148 <RCCEx_PLL3_Config>
 80055ce:	4603      	mov	r3, r0
 80055d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80055d2:	e009      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	75fb      	strb	r3, [r7, #23]
      break;
 80055d8:	e006      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80055da:	bf00      	nop
 80055dc:	e004      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80055de:	bf00      	nop
 80055e0:	e002      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80055e2:	bf00      	nop
 80055e4:	e000      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80055e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055e8:	7dfb      	ldrb	r3, [r7, #23]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10a      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055ee:	4bb2      	ldr	r3, [pc, #712]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80055f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055fc:	49ae      	ldr	r1, [pc, #696]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	654b      	str	r3, [r1, #84]	; 0x54
 8005602:	e001      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005604:	7dfb      	ldrb	r3, [r7, #23]
 8005606:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005610:	2b00      	cmp	r3, #0
 8005612:	d04b      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800561a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800561e:	d02e      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8005620:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005624:	d828      	bhi.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800562a:	d02a      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800562c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005630:	d822      	bhi.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005632:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005636:	d026      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005638:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800563c:	d81c      	bhi.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800563e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005642:	d010      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8005644:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005648:	d816      	bhi.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800564a:	2b00      	cmp	r3, #0
 800564c:	d01d      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800564e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005652:	d111      	bne.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	3304      	adds	r3, #4
 8005658:	2100      	movs	r1, #0
 800565a:	4618      	mov	r0, r3
 800565c:	f000 fcc2 	bl	8005fe4 <RCCEx_PLL2_Config>
 8005660:	4603      	mov	r3, r0
 8005662:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005664:	e012      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	3324      	adds	r3, #36	; 0x24
 800566a:	2102      	movs	r1, #2
 800566c:	4618      	mov	r0, r3
 800566e:	f000 fd6b 	bl	8006148 <RCCEx_PLL3_Config>
 8005672:	4603      	mov	r3, r0
 8005674:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005676:	e009      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	75fb      	strb	r3, [r7, #23]
      break;
 800567c:	e006      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800567e:	bf00      	nop
 8005680:	e004      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8005682:	bf00      	nop
 8005684:	e002      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8005686:	bf00      	nop
 8005688:	e000      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800568a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800568c:	7dfb      	ldrb	r3, [r7, #23]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10a      	bne.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005692:	4b89      	ldr	r3, [pc, #548]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005696:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056a0:	4985      	ldr	r1, [pc, #532]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	658b      	str	r3, [r1, #88]	; 0x58
 80056a6:	e001      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056a8:	7dfb      	ldrb	r3, [r7, #23]
 80056aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d04b      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056be:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80056c2:	d02e      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80056c4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80056c8:	d828      	bhi.n	800571c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80056ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056ce:	d02a      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80056d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056d4:	d822      	bhi.n	800571c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80056d6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80056da:	d026      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80056dc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80056e0:	d81c      	bhi.n	800571c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80056e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056e6:	d010      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80056e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056ec:	d816      	bhi.n	800571c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d01d      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80056f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056f6:	d111      	bne.n	800571c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	3304      	adds	r3, #4
 80056fc:	2100      	movs	r1, #0
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 fc70 	bl	8005fe4 <RCCEx_PLL2_Config>
 8005704:	4603      	mov	r3, r0
 8005706:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005708:	e012      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	3324      	adds	r3, #36	; 0x24
 800570e:	2102      	movs	r1, #2
 8005710:	4618      	mov	r0, r3
 8005712:	f000 fd19 	bl	8006148 <RCCEx_PLL3_Config>
 8005716:	4603      	mov	r3, r0
 8005718:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800571a:	e009      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	75fb      	strb	r3, [r7, #23]
      break;
 8005720:	e006      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8005722:	bf00      	nop
 8005724:	e004      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8005726:	bf00      	nop
 8005728:	e002      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800572a:	bf00      	nop
 800572c:	e000      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800572e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005730:	7dfb      	ldrb	r3, [r7, #23]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10a      	bne.n	800574c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005736:	4b60      	ldr	r3, [pc, #384]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800573a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005744:	495c      	ldr	r1, [pc, #368]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005746:	4313      	orrs	r3, r2
 8005748:	658b      	str	r3, [r1, #88]	; 0x58
 800574a:	e001      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800574c:	7dfb      	ldrb	r3, [r7, #23]
 800574e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0308 	and.w	r3, r3, #8
 8005758:	2b00      	cmp	r3, #0
 800575a:	d018      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005764:	d10a      	bne.n	800577c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	3324      	adds	r3, #36	; 0x24
 800576a:	2102      	movs	r1, #2
 800576c:	4618      	mov	r0, r3
 800576e:	f000 fceb 	bl	8006148 <RCCEx_PLL3_Config>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d001      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800577c:	4b4e      	ldr	r3, [pc, #312]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800577e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005780:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005788:	494b      	ldr	r1, [pc, #300]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800578a:	4313      	orrs	r3, r2
 800578c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0310 	and.w	r3, r3, #16
 8005796:	2b00      	cmp	r3, #0
 8005798:	d01a      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057a4:	d10a      	bne.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	3324      	adds	r3, #36	; 0x24
 80057aa:	2102      	movs	r1, #2
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 fccb 	bl	8006148 <RCCEx_PLL3_Config>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057bc:	4b3e      	ldr	r3, [pc, #248]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80057be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ca:	493b      	ldr	r1, [pc, #236]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d034      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057e6:	d01d      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80057e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057ec:	d817      	bhi.n	800581e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80057f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057f6:	d009      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80057f8:	e011      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	3304      	adds	r3, #4
 80057fe:	2100      	movs	r1, #0
 8005800:	4618      	mov	r0, r3
 8005802:	f000 fbef 	bl	8005fe4 <RCCEx_PLL2_Config>
 8005806:	4603      	mov	r3, r0
 8005808:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800580a:	e00c      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	3324      	adds	r3, #36	; 0x24
 8005810:	2102      	movs	r1, #2
 8005812:	4618      	mov	r0, r3
 8005814:	f000 fc98 	bl	8006148 <RCCEx_PLL3_Config>
 8005818:	4603      	mov	r3, r0
 800581a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800581c:	e003      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	75fb      	strb	r3, [r7, #23]
      break;
 8005822:	e000      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8005824:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005826:	7dfb      	ldrb	r3, [r7, #23]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10a      	bne.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800582c:	4b22      	ldr	r3, [pc, #136]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800582e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005830:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800583a:	491f      	ldr	r1, [pc, #124]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800583c:	4313      	orrs	r3, r2
 800583e:	658b      	str	r3, [r1, #88]	; 0x58
 8005840:	e001      	b.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005842:	7dfb      	ldrb	r3, [r7, #23]
 8005844:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d036      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005858:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800585c:	d01c      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800585e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005862:	d816      	bhi.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005864:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005868:	d003      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800586a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800586e:	d007      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8005870:	e00f      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005872:	4b11      	ldr	r3, [pc, #68]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005876:	4a10      	ldr	r2, [pc, #64]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800587c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800587e:	e00c      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	3324      	adds	r3, #36	; 0x24
 8005884:	2101      	movs	r1, #1
 8005886:	4618      	mov	r0, r3
 8005888:	f000 fc5e 	bl	8006148 <RCCEx_PLL3_Config>
 800588c:	4603      	mov	r3, r0
 800588e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005890:	e003      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	75fb      	strb	r3, [r7, #23]
      break;
 8005896:	e000      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8005898:	bf00      	nop
    }

    if(ret == HAL_OK)
 800589a:	7dfb      	ldrb	r3, [r7, #23]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10d      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058a0:	4b05      	ldr	r3, [pc, #20]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80058a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058ae:	4902      	ldr	r1, [pc, #8]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	654b      	str	r3, [r1, #84]	; 0x54
 80058b4:	e004      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 80058b6:	bf00      	nop
 80058b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058bc:	7dfb      	ldrb	r3, [r7, #23]
 80058be:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d029      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d003      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80058d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058d8:	d007      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80058da:	e00f      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058dc:	4b61      	ldr	r3, [pc, #388]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80058de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e0:	4a60      	ldr	r2, [pc, #384]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80058e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80058e8:	e00b      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	3304      	adds	r3, #4
 80058ee:	2102      	movs	r1, #2
 80058f0:	4618      	mov	r0, r3
 80058f2:	f000 fb77 	bl	8005fe4 <RCCEx_PLL2_Config>
 80058f6:	4603      	mov	r3, r0
 80058f8:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80058fa:	e002      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005900:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005902:	7dfb      	ldrb	r3, [r7, #23]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d109      	bne.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005908:	4b56      	ldr	r3, [pc, #344]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800590a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800590c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005914:	4953      	ldr	r1, [pc, #332]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005916:	4313      	orrs	r3, r2
 8005918:	64cb      	str	r3, [r1, #76]	; 0x4c
 800591a:	e001      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800591c:	7dfb      	ldrb	r3, [r7, #23]
 800591e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00a      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	3324      	adds	r3, #36	; 0x24
 8005930:	2102      	movs	r1, #2
 8005932:	4618      	mov	r0, r3
 8005934:	f000 fc08 	bl	8006148 <RCCEx_PLL3_Config>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d030      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005952:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005956:	d017      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005958:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800595c:	d811      	bhi.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800595e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005962:	d013      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8005964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005968:	d80b      	bhi.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800596a:	2b00      	cmp	r3, #0
 800596c:	d010      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800596e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005972:	d106      	bne.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005974:	4b3b      	ldr	r3, [pc, #236]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005978:	4a3a      	ldr	r2, [pc, #232]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800597a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800597e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005980:	e007      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	75fb      	strb	r3, [r7, #23]
      break;
 8005986:	e004      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005988:	bf00      	nop
 800598a:	e002      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800598c:	bf00      	nop
 800598e:	e000      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005990:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005992:	7dfb      	ldrb	r3, [r7, #23]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d109      	bne.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005998:	4b32      	ldr	r3, [pc, #200]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800599a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800599c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059a4:	492f      	ldr	r1, [pc, #188]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	654b      	str	r3, [r1, #84]	; 0x54
 80059aa:	e001      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ac:	7dfb      	ldrb	r3, [r7, #23]
 80059ae:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d008      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80059bc:	4b29      	ldr	r3, [pc, #164]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80059be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059c8:	4926      	ldr	r1, [pc, #152]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d008      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80059da:	4b22      	ldr	r3, [pc, #136]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80059dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059de:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059e6:	491f      	ldr	r1, [pc, #124]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00d      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059f8:	4b1a      	ldr	r3, [pc, #104]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	4a19      	ldr	r2, [pc, #100]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80059fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a02:	6113      	str	r3, [r2, #16]
 8005a04:	4b17      	ldr	r3, [pc, #92]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005a06:	691a      	ldr	r2, [r3, #16]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a0e:	4915      	ldr	r1, [pc, #84]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005a10:	4313      	orrs	r3, r2
 8005a12:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	da08      	bge.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005a1c:	4b11      	ldr	r3, [pc, #68]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a20:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a28:	490e      	ldr	r1, [pc, #56]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d009      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005a3a:	4b0a      	ldr	r3, [pc, #40]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a48:	4906      	ldr	r1, [pc, #24]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005a4e:	7dbb      	ldrb	r3, [r7, #22]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8005a54:	2300      	movs	r3, #0
 8005a56:	e000      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3718      	adds	r7, #24
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	58024400 	.word	0x58024400

08005a68 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005a6c:	f7ff f8a6 	bl	8004bbc <HAL_RCC_GetHCLKFreq>
 8005a70:	4602      	mov	r2, r0
 8005a72:	4b06      	ldr	r3, [pc, #24]	; (8005a8c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	091b      	lsrs	r3, r3, #4
 8005a78:	f003 0307 	and.w	r3, r3, #7
 8005a7c:	4904      	ldr	r1, [pc, #16]	; (8005a90 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005a7e:	5ccb      	ldrb	r3, [r1, r3]
 8005a80:	f003 031f 	and.w	r3, r3, #31
 8005a84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	58024400 	.word	0x58024400
 8005a90:	08016710 	.word	0x08016710

08005a94 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b089      	sub	sp, #36	; 0x24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a9c:	4ba1      	ldr	r3, [pc, #644]	; (8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa0:	f003 0303 	and.w	r3, r3, #3
 8005aa4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005aa6:	4b9f      	ldr	r3, [pc, #636]	; (8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aaa:	0b1b      	lsrs	r3, r3, #12
 8005aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ab0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005ab2:	4b9c      	ldr	r3, [pc, #624]	; (8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab6:	091b      	lsrs	r3, r3, #4
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005abe:	4b99      	ldr	r3, [pc, #612]	; (8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac2:	08db      	lsrs	r3, r3, #3
 8005ac4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	fb02 f303 	mul.w	r3, r2, r3
 8005ace:	ee07 3a90 	vmov	s15, r3
 8005ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ad6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f000 8111 	beq.w	8005d04 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	f000 8083 	beq.w	8005bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	f200 80a1 	bhi.w	8005c34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d003      	beq.n	8005b00 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d056      	beq.n	8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005afe:	e099      	b.n	8005c34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b00:	4b88      	ldr	r3, [pc, #544]	; (8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0320 	and.w	r3, r3, #32
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d02d      	beq.n	8005b68 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b0c:	4b85      	ldr	r3, [pc, #532]	; (8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	08db      	lsrs	r3, r3, #3
 8005b12:	f003 0303 	and.w	r3, r3, #3
 8005b16:	4a84      	ldr	r2, [pc, #528]	; (8005d28 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005b18:	fa22 f303 	lsr.w	r3, r2, r3
 8005b1c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	ee07 3a90 	vmov	s15, r3
 8005b24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	ee07 3a90 	vmov	s15, r3
 8005b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b36:	4b7b      	ldr	r3, [pc, #492]	; (8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b3e:	ee07 3a90 	vmov	s15, r3
 8005b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b46:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b4a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005d2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b62:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005b66:	e087      	b.n	8005c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	ee07 3a90 	vmov	s15, r3
 8005b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b72:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005d30 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b7a:	4b6a      	ldr	r3, [pc, #424]	; (8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b82:	ee07 3a90 	vmov	s15, r3
 8005b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b8e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005d2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ba6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005baa:	e065      	b.n	8005c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	ee07 3a90 	vmov	s15, r3
 8005bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bb6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005d34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bbe:	4b59      	ldr	r3, [pc, #356]	; (8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bc6:	ee07 3a90 	vmov	s15, r3
 8005bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bd2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005d2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005bee:	e043      	b.n	8005c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	ee07 3a90 	vmov	s15, r3
 8005bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bfa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005d38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c02:	4b48      	ldr	r3, [pc, #288]	; (8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c0a:	ee07 3a90 	vmov	s15, r3
 8005c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c16:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005d2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c32:	e021      	b.n	8005c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	ee07 3a90 	vmov	s15, r3
 8005c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c3e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005d34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c46:	4b37      	ldr	r3, [pc, #220]	; (8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c4e:	ee07 3a90 	vmov	s15, r3
 8005c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c56:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c5a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005d2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c76:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005c78:	4b2a      	ldr	r3, [pc, #168]	; (8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7c:	0a5b      	lsrs	r3, r3, #9
 8005c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c82:	ee07 3a90 	vmov	s15, r3
 8005c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c92:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c9e:	ee17 2a90 	vmov	r2, s15
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005ca6:	4b1f      	ldr	r3, [pc, #124]	; (8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005caa:	0c1b      	lsrs	r3, r3, #16
 8005cac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cb0:	ee07 3a90 	vmov	s15, r3
 8005cb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ccc:	ee17 2a90 	vmov	r2, s15
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005cd4:	4b13      	ldr	r3, [pc, #76]	; (8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd8:	0e1b      	lsrs	r3, r3, #24
 8005cda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cde:	ee07 3a90 	vmov	s15, r3
 8005ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ce6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cee:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cfa:	ee17 2a90 	vmov	r2, s15
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005d02:	e008      	b.n	8005d16 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	609a      	str	r2, [r3, #8]
}
 8005d16:	bf00      	nop
 8005d18:	3724      	adds	r7, #36	; 0x24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	58024400 	.word	0x58024400
 8005d28:	03d09000 	.word	0x03d09000
 8005d2c:	46000000 	.word	0x46000000
 8005d30:	4c742400 	.word	0x4c742400
 8005d34:	4a742400 	.word	0x4a742400
 8005d38:	4af42400 	.word	0x4af42400

08005d3c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b089      	sub	sp, #36	; 0x24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d44:	4ba1      	ldr	r3, [pc, #644]	; (8005fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d48:	f003 0303 	and.w	r3, r3, #3
 8005d4c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005d4e:	4b9f      	ldr	r3, [pc, #636]	; (8005fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d52:	0d1b      	lsrs	r3, r3, #20
 8005d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d58:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005d5a:	4b9c      	ldr	r3, [pc, #624]	; (8005fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5e:	0a1b      	lsrs	r3, r3, #8
 8005d60:	f003 0301 	and.w	r3, r3, #1
 8005d64:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005d66:	4b99      	ldr	r3, [pc, #612]	; (8005fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d6a:	08db      	lsrs	r3, r3, #3
 8005d6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	fb02 f303 	mul.w	r3, r2, r3
 8005d76:	ee07 3a90 	vmov	s15, r3
 8005d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 8111 	beq.w	8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	f000 8083 	beq.w	8005e98 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	f200 80a1 	bhi.w	8005edc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d003      	beq.n	8005da8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d056      	beq.n	8005e54 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005da6:	e099      	b.n	8005edc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005da8:	4b88      	ldr	r3, [pc, #544]	; (8005fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0320 	and.w	r3, r3, #32
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d02d      	beq.n	8005e10 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005db4:	4b85      	ldr	r3, [pc, #532]	; (8005fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	08db      	lsrs	r3, r3, #3
 8005dba:	f003 0303 	and.w	r3, r3, #3
 8005dbe:	4a84      	ldr	r2, [pc, #528]	; (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8005dc4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	ee07 3a90 	vmov	s15, r3
 8005dcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	ee07 3a90 	vmov	s15, r3
 8005dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dde:	4b7b      	ldr	r3, [pc, #492]	; (8005fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de6:	ee07 3a90 	vmov	s15, r3
 8005dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dee:	ed97 6a03 	vldr	s12, [r7, #12]
 8005df2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e0a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005e0e:	e087      	b.n	8005f20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	ee07 3a90 	vmov	s15, r3
 8005e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e1a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e22:	4b6a      	ldr	r3, [pc, #424]	; (8005fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e2a:	ee07 3a90 	vmov	s15, r3
 8005e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e36:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e52:	e065      	b.n	8005f20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	ee07 3a90 	vmov	s15, r3
 8005e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e5e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005fdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e66:	4b59      	ldr	r3, [pc, #356]	; (8005fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e6e:	ee07 3a90 	vmov	s15, r3
 8005e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e7a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e96:	e043      	b.n	8005f20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	ee07 3a90 	vmov	s15, r3
 8005e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eaa:	4b48      	ldr	r3, [pc, #288]	; (8005fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb2:	ee07 3a90 	vmov	s15, r3
 8005eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eba:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ebe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ed6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005eda:	e021      	b.n	8005f20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	ee07 3a90 	vmov	s15, r3
 8005ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005fdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eee:	4b37      	ldr	r3, [pc, #220]	; (8005fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef6:	ee07 3a90 	vmov	s15, r3
 8005efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005efe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f02:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f1e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005f20:	4b2a      	ldr	r3, [pc, #168]	; (8005fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f24:	0a5b      	lsrs	r3, r3, #9
 8005f26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f2a:	ee07 3a90 	vmov	s15, r3
 8005f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f46:	ee17 2a90 	vmov	r2, s15
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005f4e:	4b1f      	ldr	r3, [pc, #124]	; (8005fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f52:	0c1b      	lsrs	r3, r3, #16
 8005f54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f58:	ee07 3a90 	vmov	s15, r3
 8005f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f68:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f74:	ee17 2a90 	vmov	r2, s15
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005f7c:	4b13      	ldr	r3, [pc, #76]	; (8005fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f80:	0e1b      	lsrs	r3, r3, #24
 8005f82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f86:	ee07 3a90 	vmov	s15, r3
 8005f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f96:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fa2:	ee17 2a90 	vmov	r2, s15
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005faa:	e008      	b.n	8005fbe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	609a      	str	r2, [r3, #8]
}
 8005fbe:	bf00      	nop
 8005fc0:	3724      	adds	r7, #36	; 0x24
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	58024400 	.word	0x58024400
 8005fd0:	03d09000 	.word	0x03d09000
 8005fd4:	46000000 	.word	0x46000000
 8005fd8:	4c742400 	.word	0x4c742400
 8005fdc:	4a742400 	.word	0x4a742400
 8005fe0:	4af42400 	.word	0x4af42400

08005fe4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005ff2:	4b53      	ldr	r3, [pc, #332]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 8005ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff6:	f003 0303 	and.w	r3, r3, #3
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d101      	bne.n	8006002 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e099      	b.n	8006136 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006002:	4b4f      	ldr	r3, [pc, #316]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a4e      	ldr	r2, [pc, #312]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 8006008:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800600c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800600e:	f7fb fd25 	bl	8001a5c <HAL_GetTick>
 8006012:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006014:	e008      	b.n	8006028 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006016:	f7fb fd21 	bl	8001a5c <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	2b02      	cmp	r3, #2
 8006022:	d901      	bls.n	8006028 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e086      	b.n	8006136 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006028:	4b45      	ldr	r3, [pc, #276]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1f0      	bne.n	8006016 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006034:	4b42      	ldr	r3, [pc, #264]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 8006036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006038:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	031b      	lsls	r3, r3, #12
 8006042:	493f      	ldr	r1, [pc, #252]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 8006044:	4313      	orrs	r3, r2
 8006046:	628b      	str	r3, [r1, #40]	; 0x28
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	3b01      	subs	r3, #1
 800604e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	3b01      	subs	r3, #1
 8006058:	025b      	lsls	r3, r3, #9
 800605a:	b29b      	uxth	r3, r3
 800605c:	431a      	orrs	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	3b01      	subs	r3, #1
 8006064:	041b      	lsls	r3, r3, #16
 8006066:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800606a:	431a      	orrs	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	3b01      	subs	r3, #1
 8006072:	061b      	lsls	r3, r3, #24
 8006074:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006078:	4931      	ldr	r1, [pc, #196]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 800607a:	4313      	orrs	r3, r2
 800607c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800607e:	4b30      	ldr	r3, [pc, #192]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 8006080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006082:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	492d      	ldr	r1, [pc, #180]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 800608c:	4313      	orrs	r3, r2
 800608e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006090:	4b2b      	ldr	r3, [pc, #172]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 8006092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006094:	f023 0220 	bic.w	r2, r3, #32
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	4928      	ldr	r1, [pc, #160]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80060a2:	4b27      	ldr	r3, [pc, #156]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 80060a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a6:	4a26      	ldr	r2, [pc, #152]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 80060a8:	f023 0310 	bic.w	r3, r3, #16
 80060ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80060ae:	4b24      	ldr	r3, [pc, #144]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 80060b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060b2:	4b24      	ldr	r3, [pc, #144]	; (8006144 <RCCEx_PLL2_Config+0x160>)
 80060b4:	4013      	ands	r3, r2
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	69d2      	ldr	r2, [r2, #28]
 80060ba:	00d2      	lsls	r2, r2, #3
 80060bc:	4920      	ldr	r1, [pc, #128]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 80060be:	4313      	orrs	r3, r2
 80060c0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80060c2:	4b1f      	ldr	r3, [pc, #124]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 80060c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c6:	4a1e      	ldr	r2, [pc, #120]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 80060c8:	f043 0310 	orr.w	r3, r3, #16
 80060cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d106      	bne.n	80060e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80060d4:	4b1a      	ldr	r3, [pc, #104]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 80060d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d8:	4a19      	ldr	r2, [pc, #100]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 80060da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80060e0:	e00f      	b.n	8006102 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d106      	bne.n	80060f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80060e8:	4b15      	ldr	r3, [pc, #84]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 80060ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ec:	4a14      	ldr	r2, [pc, #80]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 80060ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80060f4:	e005      	b.n	8006102 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80060f6:	4b12      	ldr	r3, [pc, #72]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 80060f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fa:	4a11      	ldr	r2, [pc, #68]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 80060fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006100:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006102:	4b0f      	ldr	r3, [pc, #60]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a0e      	ldr	r2, [pc, #56]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 8006108:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800610c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800610e:	f7fb fca5 	bl	8001a5c <HAL_GetTick>
 8006112:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006114:	e008      	b.n	8006128 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006116:	f7fb fca1 	bl	8001a5c <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	2b02      	cmp	r3, #2
 8006122:	d901      	bls.n	8006128 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e006      	b.n	8006136 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006128:	4b05      	ldr	r3, [pc, #20]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d0f0      	beq.n	8006116 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006134:	7bfb      	ldrb	r3, [r7, #15]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	58024400 	.word	0x58024400
 8006144:	ffff0007 	.word	0xffff0007

08006148 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006152:	2300      	movs	r3, #0
 8006154:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006156:	4b53      	ldr	r3, [pc, #332]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 8006158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615a:	f003 0303 	and.w	r3, r3, #3
 800615e:	2b03      	cmp	r3, #3
 8006160:	d101      	bne.n	8006166 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e099      	b.n	800629a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006166:	4b4f      	ldr	r3, [pc, #316]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a4e      	ldr	r2, [pc, #312]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 800616c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006170:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006172:	f7fb fc73 	bl	8001a5c <HAL_GetTick>
 8006176:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006178:	e008      	b.n	800618c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800617a:	f7fb fc6f 	bl	8001a5c <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	2b02      	cmp	r3, #2
 8006186:	d901      	bls.n	800618c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e086      	b.n	800629a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800618c:	4b45      	ldr	r3, [pc, #276]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1f0      	bne.n	800617a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006198:	4b42      	ldr	r3, [pc, #264]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 800619a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	051b      	lsls	r3, r3, #20
 80061a6:	493f      	ldr	r1, [pc, #252]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 80061a8:	4313      	orrs	r3, r2
 80061aa:	628b      	str	r3, [r1, #40]	; 0x28
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	3b01      	subs	r3, #1
 80061b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	3b01      	subs	r3, #1
 80061bc:	025b      	lsls	r3, r3, #9
 80061be:	b29b      	uxth	r3, r3
 80061c0:	431a      	orrs	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	3b01      	subs	r3, #1
 80061c8:	041b      	lsls	r3, r3, #16
 80061ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80061ce:	431a      	orrs	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	3b01      	subs	r3, #1
 80061d6:	061b      	lsls	r3, r3, #24
 80061d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80061dc:	4931      	ldr	r1, [pc, #196]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80061e2:	4b30      	ldr	r3, [pc, #192]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 80061e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	492d      	ldr	r1, [pc, #180]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 80061f0:	4313      	orrs	r3, r2
 80061f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80061f4:	4b2b      	ldr	r3, [pc, #172]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 80061f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	4928      	ldr	r1, [pc, #160]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 8006202:	4313      	orrs	r3, r2
 8006204:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006206:	4b27      	ldr	r3, [pc, #156]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 8006208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620a:	4a26      	ldr	r2, [pc, #152]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 800620c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006210:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006212:	4b24      	ldr	r3, [pc, #144]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 8006214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006216:	4b24      	ldr	r3, [pc, #144]	; (80062a8 <RCCEx_PLL3_Config+0x160>)
 8006218:	4013      	ands	r3, r2
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	69d2      	ldr	r2, [r2, #28]
 800621e:	00d2      	lsls	r2, r2, #3
 8006220:	4920      	ldr	r1, [pc, #128]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 8006222:	4313      	orrs	r3, r2
 8006224:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006226:	4b1f      	ldr	r3, [pc, #124]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 8006228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622a:	4a1e      	ldr	r2, [pc, #120]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 800622c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006230:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d106      	bne.n	8006246 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006238:	4b1a      	ldr	r3, [pc, #104]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 800623a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623c:	4a19      	ldr	r2, [pc, #100]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 800623e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006242:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006244:	e00f      	b.n	8006266 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d106      	bne.n	800625a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800624c:	4b15      	ldr	r3, [pc, #84]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 800624e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006250:	4a14      	ldr	r2, [pc, #80]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 8006252:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006256:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006258:	e005      	b.n	8006266 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800625a:	4b12      	ldr	r3, [pc, #72]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 800625c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625e:	4a11      	ldr	r2, [pc, #68]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 8006260:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006264:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006266:	4b0f      	ldr	r3, [pc, #60]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a0e      	ldr	r2, [pc, #56]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 800626c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006270:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006272:	f7fb fbf3 	bl	8001a5c <HAL_GetTick>
 8006276:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006278:	e008      	b.n	800628c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800627a:	f7fb fbef 	bl	8001a5c <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	2b02      	cmp	r3, #2
 8006286:	d901      	bls.n	800628c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e006      	b.n	800629a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800628c:	4b05      	ldr	r3, [pc, #20]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d0f0      	beq.n	800627a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006298:	7bfb      	ldrb	r3, [r7, #15]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	58024400 	.word	0x58024400
 80062a8:	ffff0007 	.word	0xffff0007

080062ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e042      	b.n	8006344 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d106      	bne.n	80062d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f7fa fd69 	bl	8000da8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2224      	movs	r2, #36	; 0x24
 80062da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f022 0201 	bic.w	r2, r2, #1
 80062ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f8c2 	bl	8006478 <UART_SetConfig>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d101      	bne.n	80062fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e022      	b.n	8006344 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006302:	2b00      	cmp	r3, #0
 8006304:	d002      	beq.n	800630c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 ff14 	bl	8007134 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685a      	ldr	r2, [r3, #4]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800631a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689a      	ldr	r2, [r3, #8]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800632a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f042 0201 	orr.w	r2, r2, #1
 800633a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 ff9b 	bl	8007278 <UART_CheckIdleState>
 8006342:	4603      	mov	r3, r0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3708      	adds	r7, #8
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b08a      	sub	sp, #40	; 0x28
 8006350:	af02      	add	r7, sp, #8
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	603b      	str	r3, [r7, #0]
 8006358:	4613      	mov	r3, r2
 800635a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006362:	2b20      	cmp	r3, #32
 8006364:	f040 8083 	bne.w	800646e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d002      	beq.n	8006374 <HAL_UART_Transmit+0x28>
 800636e:	88fb      	ldrh	r3, [r7, #6]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e07b      	b.n	8006470 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800637e:	2b01      	cmp	r3, #1
 8006380:	d101      	bne.n	8006386 <HAL_UART_Transmit+0x3a>
 8006382:	2302      	movs	r3, #2
 8006384:	e074      	b.n	8006470 <HAL_UART_Transmit+0x124>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2221      	movs	r2, #33	; 0x21
 800639a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800639e:	f7fb fb5d 	bl	8001a5c <HAL_GetTick>
 80063a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	88fa      	ldrh	r2, [r7, #6]
 80063a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	88fa      	ldrh	r2, [r7, #6]
 80063b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063bc:	d108      	bne.n	80063d0 <HAL_UART_Transmit+0x84>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d104      	bne.n	80063d0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80063c6:	2300      	movs	r3, #0
 80063c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	61bb      	str	r3, [r7, #24]
 80063ce:	e003      	b.n	80063d8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063d4:	2300      	movs	r3, #0
 80063d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80063e0:	e02c      	b.n	800643c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	2200      	movs	r2, #0
 80063ea:	2180      	movs	r1, #128	; 0x80
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f000 ff8e 	bl	800730e <UART_WaitOnFlagUntilTimeout>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d001      	beq.n	80063fc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e039      	b.n	8006470 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10b      	bne.n	800641a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	881b      	ldrh	r3, [r3, #0]
 8006406:	461a      	mov	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006410:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	3302      	adds	r3, #2
 8006416:	61bb      	str	r3, [r7, #24]
 8006418:	e007      	b.n	800642a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	781a      	ldrb	r2, [r3, #0]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	3301      	adds	r3, #1
 8006428:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006430:	b29b      	uxth	r3, r3
 8006432:	3b01      	subs	r3, #1
 8006434:	b29a      	uxth	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006442:	b29b      	uxth	r3, r3
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1cc      	bne.n	80063e2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	9300      	str	r3, [sp, #0]
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	2200      	movs	r2, #0
 8006450:	2140      	movs	r1, #64	; 0x40
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f000 ff5b 	bl	800730e <UART_WaitOnFlagUntilTimeout>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e006      	b.n	8006470 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2220      	movs	r2, #32
 8006466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800646a:	2300      	movs	r3, #0
 800646c:	e000      	b.n	8006470 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800646e:	2302      	movs	r3, #2
  }
}
 8006470:	4618      	mov	r0, r3
 8006472:	3720      	adds	r7, #32
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006478:	b5b0      	push	{r4, r5, r7, lr}
 800647a:	b08e      	sub	sp, #56	; 0x38
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006480:	2300      	movs	r3, #0
 8006482:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	689a      	ldr	r2, [r3, #8]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	431a      	orrs	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	695b      	ldr	r3, [r3, #20]
 8006494:	431a      	orrs	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	4313      	orrs	r3, r2
 800649c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	4bbf      	ldr	r3, [pc, #764]	; (80067a4 <UART_SetConfig+0x32c>)
 80064a6:	4013      	ands	r3, r2
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	6812      	ldr	r2, [r2, #0]
 80064ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80064ae:	430b      	orrs	r3, r1
 80064b0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	68da      	ldr	r2, [r3, #12]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	430a      	orrs	r2, r1
 80064c6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4ab5      	ldr	r2, [pc, #724]	; (80067a8 <UART_SetConfig+0x330>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d004      	beq.n	80064e2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064de:	4313      	orrs	r3, r2
 80064e0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689a      	ldr	r2, [r3, #8]
 80064e8:	4bb0      	ldr	r3, [pc, #704]	; (80067ac <UART_SetConfig+0x334>)
 80064ea:	4013      	ands	r3, r2
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	6812      	ldr	r2, [r2, #0]
 80064f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80064f2:	430b      	orrs	r3, r1
 80064f4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fc:	f023 010f 	bic.w	r1, r3, #15
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	430a      	orrs	r2, r1
 800650a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4aa7      	ldr	r2, [pc, #668]	; (80067b0 <UART_SetConfig+0x338>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d176      	bne.n	8006604 <UART_SetConfig+0x18c>
 8006516:	4ba7      	ldr	r3, [pc, #668]	; (80067b4 <UART_SetConfig+0x33c>)
 8006518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800651a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800651e:	2b28      	cmp	r3, #40	; 0x28
 8006520:	d86c      	bhi.n	80065fc <UART_SetConfig+0x184>
 8006522:	a201      	add	r2, pc, #4	; (adr r2, 8006528 <UART_SetConfig+0xb0>)
 8006524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006528:	080065cd 	.word	0x080065cd
 800652c:	080065fd 	.word	0x080065fd
 8006530:	080065fd 	.word	0x080065fd
 8006534:	080065fd 	.word	0x080065fd
 8006538:	080065fd 	.word	0x080065fd
 800653c:	080065fd 	.word	0x080065fd
 8006540:	080065fd 	.word	0x080065fd
 8006544:	080065fd 	.word	0x080065fd
 8006548:	080065d5 	.word	0x080065d5
 800654c:	080065fd 	.word	0x080065fd
 8006550:	080065fd 	.word	0x080065fd
 8006554:	080065fd 	.word	0x080065fd
 8006558:	080065fd 	.word	0x080065fd
 800655c:	080065fd 	.word	0x080065fd
 8006560:	080065fd 	.word	0x080065fd
 8006564:	080065fd 	.word	0x080065fd
 8006568:	080065dd 	.word	0x080065dd
 800656c:	080065fd 	.word	0x080065fd
 8006570:	080065fd 	.word	0x080065fd
 8006574:	080065fd 	.word	0x080065fd
 8006578:	080065fd 	.word	0x080065fd
 800657c:	080065fd 	.word	0x080065fd
 8006580:	080065fd 	.word	0x080065fd
 8006584:	080065fd 	.word	0x080065fd
 8006588:	080065e5 	.word	0x080065e5
 800658c:	080065fd 	.word	0x080065fd
 8006590:	080065fd 	.word	0x080065fd
 8006594:	080065fd 	.word	0x080065fd
 8006598:	080065fd 	.word	0x080065fd
 800659c:	080065fd 	.word	0x080065fd
 80065a0:	080065fd 	.word	0x080065fd
 80065a4:	080065fd 	.word	0x080065fd
 80065a8:	080065ed 	.word	0x080065ed
 80065ac:	080065fd 	.word	0x080065fd
 80065b0:	080065fd 	.word	0x080065fd
 80065b4:	080065fd 	.word	0x080065fd
 80065b8:	080065fd 	.word	0x080065fd
 80065bc:	080065fd 	.word	0x080065fd
 80065c0:	080065fd 	.word	0x080065fd
 80065c4:	080065fd 	.word	0x080065fd
 80065c8:	080065f5 	.word	0x080065f5
 80065cc:	2301      	movs	r3, #1
 80065ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065d2:	e326      	b.n	8006c22 <UART_SetConfig+0x7aa>
 80065d4:	2304      	movs	r3, #4
 80065d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065da:	e322      	b.n	8006c22 <UART_SetConfig+0x7aa>
 80065dc:	2308      	movs	r3, #8
 80065de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065e2:	e31e      	b.n	8006c22 <UART_SetConfig+0x7aa>
 80065e4:	2310      	movs	r3, #16
 80065e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065ea:	e31a      	b.n	8006c22 <UART_SetConfig+0x7aa>
 80065ec:	2320      	movs	r3, #32
 80065ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065f2:	e316      	b.n	8006c22 <UART_SetConfig+0x7aa>
 80065f4:	2340      	movs	r3, #64	; 0x40
 80065f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065fa:	e312      	b.n	8006c22 <UART_SetConfig+0x7aa>
 80065fc:	2380      	movs	r3, #128	; 0x80
 80065fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006602:	e30e      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a6b      	ldr	r2, [pc, #428]	; (80067b8 <UART_SetConfig+0x340>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d130      	bne.n	8006670 <UART_SetConfig+0x1f8>
 800660e:	4b69      	ldr	r3, [pc, #420]	; (80067b4 <UART_SetConfig+0x33c>)
 8006610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006612:	f003 0307 	and.w	r3, r3, #7
 8006616:	2b05      	cmp	r3, #5
 8006618:	d826      	bhi.n	8006668 <UART_SetConfig+0x1f0>
 800661a:	a201      	add	r2, pc, #4	; (adr r2, 8006620 <UART_SetConfig+0x1a8>)
 800661c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006620:	08006639 	.word	0x08006639
 8006624:	08006641 	.word	0x08006641
 8006628:	08006649 	.word	0x08006649
 800662c:	08006651 	.word	0x08006651
 8006630:	08006659 	.word	0x08006659
 8006634:	08006661 	.word	0x08006661
 8006638:	2300      	movs	r3, #0
 800663a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800663e:	e2f0      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006640:	2304      	movs	r3, #4
 8006642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006646:	e2ec      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006648:	2308      	movs	r3, #8
 800664a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800664e:	e2e8      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006650:	2310      	movs	r3, #16
 8006652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006656:	e2e4      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006658:	2320      	movs	r3, #32
 800665a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800665e:	e2e0      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006660:	2340      	movs	r3, #64	; 0x40
 8006662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006666:	e2dc      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006668:	2380      	movs	r3, #128	; 0x80
 800666a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800666e:	e2d8      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a51      	ldr	r2, [pc, #324]	; (80067bc <UART_SetConfig+0x344>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d130      	bne.n	80066dc <UART_SetConfig+0x264>
 800667a:	4b4e      	ldr	r3, [pc, #312]	; (80067b4 <UART_SetConfig+0x33c>)
 800667c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800667e:	f003 0307 	and.w	r3, r3, #7
 8006682:	2b05      	cmp	r3, #5
 8006684:	d826      	bhi.n	80066d4 <UART_SetConfig+0x25c>
 8006686:	a201      	add	r2, pc, #4	; (adr r2, 800668c <UART_SetConfig+0x214>)
 8006688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668c:	080066a5 	.word	0x080066a5
 8006690:	080066ad 	.word	0x080066ad
 8006694:	080066b5 	.word	0x080066b5
 8006698:	080066bd 	.word	0x080066bd
 800669c:	080066c5 	.word	0x080066c5
 80066a0:	080066cd 	.word	0x080066cd
 80066a4:	2300      	movs	r3, #0
 80066a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066aa:	e2ba      	b.n	8006c22 <UART_SetConfig+0x7aa>
 80066ac:	2304      	movs	r3, #4
 80066ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066b2:	e2b6      	b.n	8006c22 <UART_SetConfig+0x7aa>
 80066b4:	2308      	movs	r3, #8
 80066b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066ba:	e2b2      	b.n	8006c22 <UART_SetConfig+0x7aa>
 80066bc:	2310      	movs	r3, #16
 80066be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066c2:	e2ae      	b.n	8006c22 <UART_SetConfig+0x7aa>
 80066c4:	2320      	movs	r3, #32
 80066c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066ca:	e2aa      	b.n	8006c22 <UART_SetConfig+0x7aa>
 80066cc:	2340      	movs	r3, #64	; 0x40
 80066ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066d2:	e2a6      	b.n	8006c22 <UART_SetConfig+0x7aa>
 80066d4:	2380      	movs	r3, #128	; 0x80
 80066d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066da:	e2a2      	b.n	8006c22 <UART_SetConfig+0x7aa>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a37      	ldr	r2, [pc, #220]	; (80067c0 <UART_SetConfig+0x348>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d130      	bne.n	8006748 <UART_SetConfig+0x2d0>
 80066e6:	4b33      	ldr	r3, [pc, #204]	; (80067b4 <UART_SetConfig+0x33c>)
 80066e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ea:	f003 0307 	and.w	r3, r3, #7
 80066ee:	2b05      	cmp	r3, #5
 80066f0:	d826      	bhi.n	8006740 <UART_SetConfig+0x2c8>
 80066f2:	a201      	add	r2, pc, #4	; (adr r2, 80066f8 <UART_SetConfig+0x280>)
 80066f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f8:	08006711 	.word	0x08006711
 80066fc:	08006719 	.word	0x08006719
 8006700:	08006721 	.word	0x08006721
 8006704:	08006729 	.word	0x08006729
 8006708:	08006731 	.word	0x08006731
 800670c:	08006739 	.word	0x08006739
 8006710:	2300      	movs	r3, #0
 8006712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006716:	e284      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006718:	2304      	movs	r3, #4
 800671a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800671e:	e280      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006720:	2308      	movs	r3, #8
 8006722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006726:	e27c      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006728:	2310      	movs	r3, #16
 800672a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800672e:	e278      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006730:	2320      	movs	r3, #32
 8006732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006736:	e274      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006738:	2340      	movs	r3, #64	; 0x40
 800673a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800673e:	e270      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006740:	2380      	movs	r3, #128	; 0x80
 8006742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006746:	e26c      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a1d      	ldr	r2, [pc, #116]	; (80067c4 <UART_SetConfig+0x34c>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d142      	bne.n	80067d8 <UART_SetConfig+0x360>
 8006752:	4b18      	ldr	r3, [pc, #96]	; (80067b4 <UART_SetConfig+0x33c>)
 8006754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006756:	f003 0307 	and.w	r3, r3, #7
 800675a:	2b05      	cmp	r3, #5
 800675c:	d838      	bhi.n	80067d0 <UART_SetConfig+0x358>
 800675e:	a201      	add	r2, pc, #4	; (adr r2, 8006764 <UART_SetConfig+0x2ec>)
 8006760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006764:	0800677d 	.word	0x0800677d
 8006768:	08006785 	.word	0x08006785
 800676c:	0800678d 	.word	0x0800678d
 8006770:	08006795 	.word	0x08006795
 8006774:	0800679d 	.word	0x0800679d
 8006778:	080067c9 	.word	0x080067c9
 800677c:	2300      	movs	r3, #0
 800677e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006782:	e24e      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006784:	2304      	movs	r3, #4
 8006786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800678a:	e24a      	b.n	8006c22 <UART_SetConfig+0x7aa>
 800678c:	2308      	movs	r3, #8
 800678e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006792:	e246      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006794:	2310      	movs	r3, #16
 8006796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800679a:	e242      	b.n	8006c22 <UART_SetConfig+0x7aa>
 800679c:	2320      	movs	r3, #32
 800679e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067a2:	e23e      	b.n	8006c22 <UART_SetConfig+0x7aa>
 80067a4:	cfff69f3 	.word	0xcfff69f3
 80067a8:	58000c00 	.word	0x58000c00
 80067ac:	11fff4ff 	.word	0x11fff4ff
 80067b0:	40011000 	.word	0x40011000
 80067b4:	58024400 	.word	0x58024400
 80067b8:	40004400 	.word	0x40004400
 80067bc:	40004800 	.word	0x40004800
 80067c0:	40004c00 	.word	0x40004c00
 80067c4:	40005000 	.word	0x40005000
 80067c8:	2340      	movs	r3, #64	; 0x40
 80067ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067ce:	e228      	b.n	8006c22 <UART_SetConfig+0x7aa>
 80067d0:	2380      	movs	r3, #128	; 0x80
 80067d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067d6:	e224      	b.n	8006c22 <UART_SetConfig+0x7aa>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4ab1      	ldr	r2, [pc, #708]	; (8006aa4 <UART_SetConfig+0x62c>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d176      	bne.n	80068d0 <UART_SetConfig+0x458>
 80067e2:	4bb1      	ldr	r3, [pc, #708]	; (8006aa8 <UART_SetConfig+0x630>)
 80067e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067ea:	2b28      	cmp	r3, #40	; 0x28
 80067ec:	d86c      	bhi.n	80068c8 <UART_SetConfig+0x450>
 80067ee:	a201      	add	r2, pc, #4	; (adr r2, 80067f4 <UART_SetConfig+0x37c>)
 80067f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f4:	08006899 	.word	0x08006899
 80067f8:	080068c9 	.word	0x080068c9
 80067fc:	080068c9 	.word	0x080068c9
 8006800:	080068c9 	.word	0x080068c9
 8006804:	080068c9 	.word	0x080068c9
 8006808:	080068c9 	.word	0x080068c9
 800680c:	080068c9 	.word	0x080068c9
 8006810:	080068c9 	.word	0x080068c9
 8006814:	080068a1 	.word	0x080068a1
 8006818:	080068c9 	.word	0x080068c9
 800681c:	080068c9 	.word	0x080068c9
 8006820:	080068c9 	.word	0x080068c9
 8006824:	080068c9 	.word	0x080068c9
 8006828:	080068c9 	.word	0x080068c9
 800682c:	080068c9 	.word	0x080068c9
 8006830:	080068c9 	.word	0x080068c9
 8006834:	080068a9 	.word	0x080068a9
 8006838:	080068c9 	.word	0x080068c9
 800683c:	080068c9 	.word	0x080068c9
 8006840:	080068c9 	.word	0x080068c9
 8006844:	080068c9 	.word	0x080068c9
 8006848:	080068c9 	.word	0x080068c9
 800684c:	080068c9 	.word	0x080068c9
 8006850:	080068c9 	.word	0x080068c9
 8006854:	080068b1 	.word	0x080068b1
 8006858:	080068c9 	.word	0x080068c9
 800685c:	080068c9 	.word	0x080068c9
 8006860:	080068c9 	.word	0x080068c9
 8006864:	080068c9 	.word	0x080068c9
 8006868:	080068c9 	.word	0x080068c9
 800686c:	080068c9 	.word	0x080068c9
 8006870:	080068c9 	.word	0x080068c9
 8006874:	080068b9 	.word	0x080068b9
 8006878:	080068c9 	.word	0x080068c9
 800687c:	080068c9 	.word	0x080068c9
 8006880:	080068c9 	.word	0x080068c9
 8006884:	080068c9 	.word	0x080068c9
 8006888:	080068c9 	.word	0x080068c9
 800688c:	080068c9 	.word	0x080068c9
 8006890:	080068c9 	.word	0x080068c9
 8006894:	080068c1 	.word	0x080068c1
 8006898:	2301      	movs	r3, #1
 800689a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800689e:	e1c0      	b.n	8006c22 <UART_SetConfig+0x7aa>
 80068a0:	2304      	movs	r3, #4
 80068a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068a6:	e1bc      	b.n	8006c22 <UART_SetConfig+0x7aa>
 80068a8:	2308      	movs	r3, #8
 80068aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068ae:	e1b8      	b.n	8006c22 <UART_SetConfig+0x7aa>
 80068b0:	2310      	movs	r3, #16
 80068b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068b6:	e1b4      	b.n	8006c22 <UART_SetConfig+0x7aa>
 80068b8:	2320      	movs	r3, #32
 80068ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068be:	e1b0      	b.n	8006c22 <UART_SetConfig+0x7aa>
 80068c0:	2340      	movs	r3, #64	; 0x40
 80068c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068c6:	e1ac      	b.n	8006c22 <UART_SetConfig+0x7aa>
 80068c8:	2380      	movs	r3, #128	; 0x80
 80068ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068ce:	e1a8      	b.n	8006c22 <UART_SetConfig+0x7aa>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a75      	ldr	r2, [pc, #468]	; (8006aac <UART_SetConfig+0x634>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d130      	bne.n	800693c <UART_SetConfig+0x4c4>
 80068da:	4b73      	ldr	r3, [pc, #460]	; (8006aa8 <UART_SetConfig+0x630>)
 80068dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068de:	f003 0307 	and.w	r3, r3, #7
 80068e2:	2b05      	cmp	r3, #5
 80068e4:	d826      	bhi.n	8006934 <UART_SetConfig+0x4bc>
 80068e6:	a201      	add	r2, pc, #4	; (adr r2, 80068ec <UART_SetConfig+0x474>)
 80068e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ec:	08006905 	.word	0x08006905
 80068f0:	0800690d 	.word	0x0800690d
 80068f4:	08006915 	.word	0x08006915
 80068f8:	0800691d 	.word	0x0800691d
 80068fc:	08006925 	.word	0x08006925
 8006900:	0800692d 	.word	0x0800692d
 8006904:	2300      	movs	r3, #0
 8006906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800690a:	e18a      	b.n	8006c22 <UART_SetConfig+0x7aa>
 800690c:	2304      	movs	r3, #4
 800690e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006912:	e186      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006914:	2308      	movs	r3, #8
 8006916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800691a:	e182      	b.n	8006c22 <UART_SetConfig+0x7aa>
 800691c:	2310      	movs	r3, #16
 800691e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006922:	e17e      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006924:	2320      	movs	r3, #32
 8006926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800692a:	e17a      	b.n	8006c22 <UART_SetConfig+0x7aa>
 800692c:	2340      	movs	r3, #64	; 0x40
 800692e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006932:	e176      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006934:	2380      	movs	r3, #128	; 0x80
 8006936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800693a:	e172      	b.n	8006c22 <UART_SetConfig+0x7aa>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a5b      	ldr	r2, [pc, #364]	; (8006ab0 <UART_SetConfig+0x638>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d130      	bne.n	80069a8 <UART_SetConfig+0x530>
 8006946:	4b58      	ldr	r3, [pc, #352]	; (8006aa8 <UART_SetConfig+0x630>)
 8006948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800694a:	f003 0307 	and.w	r3, r3, #7
 800694e:	2b05      	cmp	r3, #5
 8006950:	d826      	bhi.n	80069a0 <UART_SetConfig+0x528>
 8006952:	a201      	add	r2, pc, #4	; (adr r2, 8006958 <UART_SetConfig+0x4e0>)
 8006954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006958:	08006971 	.word	0x08006971
 800695c:	08006979 	.word	0x08006979
 8006960:	08006981 	.word	0x08006981
 8006964:	08006989 	.word	0x08006989
 8006968:	08006991 	.word	0x08006991
 800696c:	08006999 	.word	0x08006999
 8006970:	2300      	movs	r3, #0
 8006972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006976:	e154      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006978:	2304      	movs	r3, #4
 800697a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800697e:	e150      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006980:	2308      	movs	r3, #8
 8006982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006986:	e14c      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006988:	2310      	movs	r3, #16
 800698a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800698e:	e148      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006990:	2320      	movs	r3, #32
 8006992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006996:	e144      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006998:	2340      	movs	r3, #64	; 0x40
 800699a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800699e:	e140      	b.n	8006c22 <UART_SetConfig+0x7aa>
 80069a0:	2380      	movs	r3, #128	; 0x80
 80069a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069a6:	e13c      	b.n	8006c22 <UART_SetConfig+0x7aa>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a41      	ldr	r2, [pc, #260]	; (8006ab4 <UART_SetConfig+0x63c>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	f040 8082 	bne.w	8006ab8 <UART_SetConfig+0x640>
 80069b4:	4b3c      	ldr	r3, [pc, #240]	; (8006aa8 <UART_SetConfig+0x630>)
 80069b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069bc:	2b28      	cmp	r3, #40	; 0x28
 80069be:	d86d      	bhi.n	8006a9c <UART_SetConfig+0x624>
 80069c0:	a201      	add	r2, pc, #4	; (adr r2, 80069c8 <UART_SetConfig+0x550>)
 80069c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c6:	bf00      	nop
 80069c8:	08006a6d 	.word	0x08006a6d
 80069cc:	08006a9d 	.word	0x08006a9d
 80069d0:	08006a9d 	.word	0x08006a9d
 80069d4:	08006a9d 	.word	0x08006a9d
 80069d8:	08006a9d 	.word	0x08006a9d
 80069dc:	08006a9d 	.word	0x08006a9d
 80069e0:	08006a9d 	.word	0x08006a9d
 80069e4:	08006a9d 	.word	0x08006a9d
 80069e8:	08006a75 	.word	0x08006a75
 80069ec:	08006a9d 	.word	0x08006a9d
 80069f0:	08006a9d 	.word	0x08006a9d
 80069f4:	08006a9d 	.word	0x08006a9d
 80069f8:	08006a9d 	.word	0x08006a9d
 80069fc:	08006a9d 	.word	0x08006a9d
 8006a00:	08006a9d 	.word	0x08006a9d
 8006a04:	08006a9d 	.word	0x08006a9d
 8006a08:	08006a7d 	.word	0x08006a7d
 8006a0c:	08006a9d 	.word	0x08006a9d
 8006a10:	08006a9d 	.word	0x08006a9d
 8006a14:	08006a9d 	.word	0x08006a9d
 8006a18:	08006a9d 	.word	0x08006a9d
 8006a1c:	08006a9d 	.word	0x08006a9d
 8006a20:	08006a9d 	.word	0x08006a9d
 8006a24:	08006a9d 	.word	0x08006a9d
 8006a28:	08006a85 	.word	0x08006a85
 8006a2c:	08006a9d 	.word	0x08006a9d
 8006a30:	08006a9d 	.word	0x08006a9d
 8006a34:	08006a9d 	.word	0x08006a9d
 8006a38:	08006a9d 	.word	0x08006a9d
 8006a3c:	08006a9d 	.word	0x08006a9d
 8006a40:	08006a9d 	.word	0x08006a9d
 8006a44:	08006a9d 	.word	0x08006a9d
 8006a48:	08006a8d 	.word	0x08006a8d
 8006a4c:	08006a9d 	.word	0x08006a9d
 8006a50:	08006a9d 	.word	0x08006a9d
 8006a54:	08006a9d 	.word	0x08006a9d
 8006a58:	08006a9d 	.word	0x08006a9d
 8006a5c:	08006a9d 	.word	0x08006a9d
 8006a60:	08006a9d 	.word	0x08006a9d
 8006a64:	08006a9d 	.word	0x08006a9d
 8006a68:	08006a95 	.word	0x08006a95
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a72:	e0d6      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006a74:	2304      	movs	r3, #4
 8006a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a7a:	e0d2      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006a7c:	2308      	movs	r3, #8
 8006a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a82:	e0ce      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006a84:	2310      	movs	r3, #16
 8006a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a8a:	e0ca      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006a8c:	2320      	movs	r3, #32
 8006a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a92:	e0c6      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006a94:	2340      	movs	r3, #64	; 0x40
 8006a96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a9a:	e0c2      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006a9c:	2380      	movs	r3, #128	; 0x80
 8006a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aa2:	e0be      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006aa4:	40011400 	.word	0x40011400
 8006aa8:	58024400 	.word	0x58024400
 8006aac:	40007800 	.word	0x40007800
 8006ab0:	40007c00 	.word	0x40007c00
 8006ab4:	40011800 	.word	0x40011800
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4aad      	ldr	r2, [pc, #692]	; (8006d74 <UART_SetConfig+0x8fc>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d176      	bne.n	8006bb0 <UART_SetConfig+0x738>
 8006ac2:	4bad      	ldr	r3, [pc, #692]	; (8006d78 <UART_SetConfig+0x900>)
 8006ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006aca:	2b28      	cmp	r3, #40	; 0x28
 8006acc:	d86c      	bhi.n	8006ba8 <UART_SetConfig+0x730>
 8006ace:	a201      	add	r2, pc, #4	; (adr r2, 8006ad4 <UART_SetConfig+0x65c>)
 8006ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad4:	08006b79 	.word	0x08006b79
 8006ad8:	08006ba9 	.word	0x08006ba9
 8006adc:	08006ba9 	.word	0x08006ba9
 8006ae0:	08006ba9 	.word	0x08006ba9
 8006ae4:	08006ba9 	.word	0x08006ba9
 8006ae8:	08006ba9 	.word	0x08006ba9
 8006aec:	08006ba9 	.word	0x08006ba9
 8006af0:	08006ba9 	.word	0x08006ba9
 8006af4:	08006b81 	.word	0x08006b81
 8006af8:	08006ba9 	.word	0x08006ba9
 8006afc:	08006ba9 	.word	0x08006ba9
 8006b00:	08006ba9 	.word	0x08006ba9
 8006b04:	08006ba9 	.word	0x08006ba9
 8006b08:	08006ba9 	.word	0x08006ba9
 8006b0c:	08006ba9 	.word	0x08006ba9
 8006b10:	08006ba9 	.word	0x08006ba9
 8006b14:	08006b89 	.word	0x08006b89
 8006b18:	08006ba9 	.word	0x08006ba9
 8006b1c:	08006ba9 	.word	0x08006ba9
 8006b20:	08006ba9 	.word	0x08006ba9
 8006b24:	08006ba9 	.word	0x08006ba9
 8006b28:	08006ba9 	.word	0x08006ba9
 8006b2c:	08006ba9 	.word	0x08006ba9
 8006b30:	08006ba9 	.word	0x08006ba9
 8006b34:	08006b91 	.word	0x08006b91
 8006b38:	08006ba9 	.word	0x08006ba9
 8006b3c:	08006ba9 	.word	0x08006ba9
 8006b40:	08006ba9 	.word	0x08006ba9
 8006b44:	08006ba9 	.word	0x08006ba9
 8006b48:	08006ba9 	.word	0x08006ba9
 8006b4c:	08006ba9 	.word	0x08006ba9
 8006b50:	08006ba9 	.word	0x08006ba9
 8006b54:	08006b99 	.word	0x08006b99
 8006b58:	08006ba9 	.word	0x08006ba9
 8006b5c:	08006ba9 	.word	0x08006ba9
 8006b60:	08006ba9 	.word	0x08006ba9
 8006b64:	08006ba9 	.word	0x08006ba9
 8006b68:	08006ba9 	.word	0x08006ba9
 8006b6c:	08006ba9 	.word	0x08006ba9
 8006b70:	08006ba9 	.word	0x08006ba9
 8006b74:	08006ba1 	.word	0x08006ba1
 8006b78:	2301      	movs	r3, #1
 8006b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b7e:	e050      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006b80:	2304      	movs	r3, #4
 8006b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b86:	e04c      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006b88:	2308      	movs	r3, #8
 8006b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b8e:	e048      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006b90:	2310      	movs	r3, #16
 8006b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b96:	e044      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006b98:	2320      	movs	r3, #32
 8006b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b9e:	e040      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006ba0:	2340      	movs	r3, #64	; 0x40
 8006ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ba6:	e03c      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006ba8:	2380      	movs	r3, #128	; 0x80
 8006baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bae:	e038      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a71      	ldr	r2, [pc, #452]	; (8006d7c <UART_SetConfig+0x904>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d130      	bne.n	8006c1c <UART_SetConfig+0x7a4>
 8006bba:	4b6f      	ldr	r3, [pc, #444]	; (8006d78 <UART_SetConfig+0x900>)
 8006bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bbe:	f003 0307 	and.w	r3, r3, #7
 8006bc2:	2b05      	cmp	r3, #5
 8006bc4:	d826      	bhi.n	8006c14 <UART_SetConfig+0x79c>
 8006bc6:	a201      	add	r2, pc, #4	; (adr r2, 8006bcc <UART_SetConfig+0x754>)
 8006bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bcc:	08006be5 	.word	0x08006be5
 8006bd0:	08006bed 	.word	0x08006bed
 8006bd4:	08006bf5 	.word	0x08006bf5
 8006bd8:	08006bfd 	.word	0x08006bfd
 8006bdc:	08006c05 	.word	0x08006c05
 8006be0:	08006c0d 	.word	0x08006c0d
 8006be4:	2302      	movs	r3, #2
 8006be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bea:	e01a      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006bec:	2304      	movs	r3, #4
 8006bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bf2:	e016      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006bf4:	2308      	movs	r3, #8
 8006bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bfa:	e012      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006bfc:	2310      	movs	r3, #16
 8006bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c02:	e00e      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006c04:	2320      	movs	r3, #32
 8006c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c0a:	e00a      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006c0c:	2340      	movs	r3, #64	; 0x40
 8006c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c12:	e006      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006c14:	2380      	movs	r3, #128	; 0x80
 8006c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c1a:	e002      	b.n	8006c22 <UART_SetConfig+0x7aa>
 8006c1c:	2380      	movs	r3, #128	; 0x80
 8006c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a55      	ldr	r2, [pc, #340]	; (8006d7c <UART_SetConfig+0x904>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	f040 80f0 	bne.w	8006e0e <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006c32:	2b20      	cmp	r3, #32
 8006c34:	dc46      	bgt.n	8006cc4 <UART_SetConfig+0x84c>
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	db75      	blt.n	8006d26 <UART_SetConfig+0x8ae>
 8006c3a:	3b02      	subs	r3, #2
 8006c3c:	2b1e      	cmp	r3, #30
 8006c3e:	d872      	bhi.n	8006d26 <UART_SetConfig+0x8ae>
 8006c40:	a201      	add	r2, pc, #4	; (adr r2, 8006c48 <UART_SetConfig+0x7d0>)
 8006c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c46:	bf00      	nop
 8006c48:	08006ccb 	.word	0x08006ccb
 8006c4c:	08006d27 	.word	0x08006d27
 8006c50:	08006cd3 	.word	0x08006cd3
 8006c54:	08006d27 	.word	0x08006d27
 8006c58:	08006d27 	.word	0x08006d27
 8006c5c:	08006d27 	.word	0x08006d27
 8006c60:	08006ce3 	.word	0x08006ce3
 8006c64:	08006d27 	.word	0x08006d27
 8006c68:	08006d27 	.word	0x08006d27
 8006c6c:	08006d27 	.word	0x08006d27
 8006c70:	08006d27 	.word	0x08006d27
 8006c74:	08006d27 	.word	0x08006d27
 8006c78:	08006d27 	.word	0x08006d27
 8006c7c:	08006d27 	.word	0x08006d27
 8006c80:	08006cf3 	.word	0x08006cf3
 8006c84:	08006d27 	.word	0x08006d27
 8006c88:	08006d27 	.word	0x08006d27
 8006c8c:	08006d27 	.word	0x08006d27
 8006c90:	08006d27 	.word	0x08006d27
 8006c94:	08006d27 	.word	0x08006d27
 8006c98:	08006d27 	.word	0x08006d27
 8006c9c:	08006d27 	.word	0x08006d27
 8006ca0:	08006d27 	.word	0x08006d27
 8006ca4:	08006d27 	.word	0x08006d27
 8006ca8:	08006d27 	.word	0x08006d27
 8006cac:	08006d27 	.word	0x08006d27
 8006cb0:	08006d27 	.word	0x08006d27
 8006cb4:	08006d27 	.word	0x08006d27
 8006cb8:	08006d27 	.word	0x08006d27
 8006cbc:	08006d27 	.word	0x08006d27
 8006cc0:	08006d19 	.word	0x08006d19
 8006cc4:	2b40      	cmp	r3, #64	; 0x40
 8006cc6:	d02a      	beq.n	8006d1e <UART_SetConfig+0x8a6>
 8006cc8:	e02d      	b.n	8006d26 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006cca:	f7fe fecd 	bl	8005a68 <HAL_RCCEx_GetD3PCLK1Freq>
 8006cce:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006cd0:	e02f      	b.n	8006d32 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cd2:	f107 0314 	add.w	r3, r7, #20
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7fe fedc 	bl	8005a94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ce0:	e027      	b.n	8006d32 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ce2:	f107 0308 	add.w	r3, r7, #8
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f7ff f828 	bl	8005d3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006cf0:	e01f      	b.n	8006d32 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cf2:	4b21      	ldr	r3, [pc, #132]	; (8006d78 <UART_SetConfig+0x900>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 0320 	and.w	r3, r3, #32
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d009      	beq.n	8006d12 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006cfe:	4b1e      	ldr	r3, [pc, #120]	; (8006d78 <UART_SetConfig+0x900>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	08db      	lsrs	r3, r3, #3
 8006d04:	f003 0303 	and.w	r3, r3, #3
 8006d08:	4a1d      	ldr	r2, [pc, #116]	; (8006d80 <UART_SetConfig+0x908>)
 8006d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d10:	e00f      	b.n	8006d32 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8006d12:	4b1b      	ldr	r3, [pc, #108]	; (8006d80 <UART_SetConfig+0x908>)
 8006d14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d16:	e00c      	b.n	8006d32 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d18:	4b1a      	ldr	r3, [pc, #104]	; (8006d84 <UART_SetConfig+0x90c>)
 8006d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d1c:	e009      	b.n	8006d32 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d24:	e005      	b.n	8006d32 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8006d26:	2300      	movs	r3, #0
 8006d28:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006d30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f000 81e6 	beq.w	8007106 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3e:	4a12      	ldr	r2, [pc, #72]	; (8006d88 <UART_SetConfig+0x910>)
 8006d40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d44:	461a      	mov	r2, r3
 8006d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d48:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d4c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	685a      	ldr	r2, [r3, #4]
 8006d52:	4613      	mov	r3, r2
 8006d54:	005b      	lsls	r3, r3, #1
 8006d56:	4413      	add	r3, r2
 8006d58:	6a3a      	ldr	r2, [r7, #32]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d305      	bcc.n	8006d6a <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d64:	6a3a      	ldr	r2, [r7, #32]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d910      	bls.n	8006d8c <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006d70:	e1c9      	b.n	8007106 <UART_SetConfig+0xc8e>
 8006d72:	bf00      	nop
 8006d74:	40011c00 	.word	0x40011c00
 8006d78:	58024400 	.word	0x58024400
 8006d7c:	58000c00 	.word	0x58000c00
 8006d80:	03d09000 	.word	0x03d09000
 8006d84:	003d0900 	.word	0x003d0900
 8006d88:	08016720 	.word	0x08016720
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f04f 0100 	mov.w	r1, #0
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d98:	4ac1      	ldr	r2, [pc, #772]	; (80070a0 <UART_SetConfig+0xc28>)
 8006d9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d9e:	b29a      	uxth	r2, r3
 8006da0:	f04f 0300 	mov.w	r3, #0
 8006da4:	f7f9 fb0c 	bl	80003c0 <__aeabi_uldivmod>
 8006da8:	4602      	mov	r2, r0
 8006daa:	460b      	mov	r3, r1
 8006dac:	4610      	mov	r0, r2
 8006dae:	4619      	mov	r1, r3
 8006db0:	f04f 0200 	mov.w	r2, #0
 8006db4:	f04f 0300 	mov.w	r3, #0
 8006db8:	020b      	lsls	r3, r1, #8
 8006dba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006dbe:	0202      	lsls	r2, r0, #8
 8006dc0:	6879      	ldr	r1, [r7, #4]
 8006dc2:	6849      	ldr	r1, [r1, #4]
 8006dc4:	0849      	lsrs	r1, r1, #1
 8006dc6:	4608      	mov	r0, r1
 8006dc8:	f04f 0100 	mov.w	r1, #0
 8006dcc:	1814      	adds	r4, r2, r0
 8006dce:	eb43 0501 	adc.w	r5, r3, r1
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	f04f 0300 	mov.w	r3, #0
 8006ddc:	4620      	mov	r0, r4
 8006dde:	4629      	mov	r1, r5
 8006de0:	f7f9 faee 	bl	80003c0 <__aeabi_uldivmod>
 8006de4:	4602      	mov	r2, r0
 8006de6:	460b      	mov	r3, r1
 8006de8:	4613      	mov	r3, r2
 8006dea:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006df2:	d308      	bcc.n	8006e06 <UART_SetConfig+0x98e>
 8006df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dfa:	d204      	bcs.n	8006e06 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e02:	60da      	str	r2, [r3, #12]
 8006e04:	e17f      	b.n	8007106 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006e0c:	e17b      	b.n	8007106 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	69db      	ldr	r3, [r3, #28]
 8006e12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e16:	f040 80bd 	bne.w	8006f94 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8006e1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006e1e:	2b20      	cmp	r3, #32
 8006e20:	dc48      	bgt.n	8006eb4 <UART_SetConfig+0xa3c>
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	db7b      	blt.n	8006f1e <UART_SetConfig+0xaa6>
 8006e26:	2b20      	cmp	r3, #32
 8006e28:	d879      	bhi.n	8006f1e <UART_SetConfig+0xaa6>
 8006e2a:	a201      	add	r2, pc, #4	; (adr r2, 8006e30 <UART_SetConfig+0x9b8>)
 8006e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e30:	08006ebb 	.word	0x08006ebb
 8006e34:	08006ec3 	.word	0x08006ec3
 8006e38:	08006f1f 	.word	0x08006f1f
 8006e3c:	08006f1f 	.word	0x08006f1f
 8006e40:	08006ecb 	.word	0x08006ecb
 8006e44:	08006f1f 	.word	0x08006f1f
 8006e48:	08006f1f 	.word	0x08006f1f
 8006e4c:	08006f1f 	.word	0x08006f1f
 8006e50:	08006edb 	.word	0x08006edb
 8006e54:	08006f1f 	.word	0x08006f1f
 8006e58:	08006f1f 	.word	0x08006f1f
 8006e5c:	08006f1f 	.word	0x08006f1f
 8006e60:	08006f1f 	.word	0x08006f1f
 8006e64:	08006f1f 	.word	0x08006f1f
 8006e68:	08006f1f 	.word	0x08006f1f
 8006e6c:	08006f1f 	.word	0x08006f1f
 8006e70:	08006eeb 	.word	0x08006eeb
 8006e74:	08006f1f 	.word	0x08006f1f
 8006e78:	08006f1f 	.word	0x08006f1f
 8006e7c:	08006f1f 	.word	0x08006f1f
 8006e80:	08006f1f 	.word	0x08006f1f
 8006e84:	08006f1f 	.word	0x08006f1f
 8006e88:	08006f1f 	.word	0x08006f1f
 8006e8c:	08006f1f 	.word	0x08006f1f
 8006e90:	08006f1f 	.word	0x08006f1f
 8006e94:	08006f1f 	.word	0x08006f1f
 8006e98:	08006f1f 	.word	0x08006f1f
 8006e9c:	08006f1f 	.word	0x08006f1f
 8006ea0:	08006f1f 	.word	0x08006f1f
 8006ea4:	08006f1f 	.word	0x08006f1f
 8006ea8:	08006f1f 	.word	0x08006f1f
 8006eac:	08006f1f 	.word	0x08006f1f
 8006eb0:	08006f11 	.word	0x08006f11
 8006eb4:	2b40      	cmp	r3, #64	; 0x40
 8006eb6:	d02e      	beq.n	8006f16 <UART_SetConfig+0xa9e>
 8006eb8:	e031      	b.n	8006f1e <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006eba:	f7fd feaf 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 8006ebe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006ec0:	e033      	b.n	8006f2a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ec2:	f7fd fec1 	bl	8004c48 <HAL_RCC_GetPCLK2Freq>
 8006ec6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006ec8:	e02f      	b.n	8006f2a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006eca:	f107 0314 	add.w	r3, r7, #20
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7fe fde0 	bl	8005a94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ed8:	e027      	b.n	8006f2a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006eda:	f107 0308 	add.w	r3, r7, #8
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7fe ff2c 	bl	8005d3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ee8:	e01f      	b.n	8006f2a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006eea:	4b6e      	ldr	r3, [pc, #440]	; (80070a4 <UART_SetConfig+0xc2c>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 0320 	and.w	r3, r3, #32
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d009      	beq.n	8006f0a <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006ef6:	4b6b      	ldr	r3, [pc, #428]	; (80070a4 <UART_SetConfig+0xc2c>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	08db      	lsrs	r3, r3, #3
 8006efc:	f003 0303 	and.w	r3, r3, #3
 8006f00:	4a69      	ldr	r2, [pc, #420]	; (80070a8 <UART_SetConfig+0xc30>)
 8006f02:	fa22 f303 	lsr.w	r3, r2, r3
 8006f06:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006f08:	e00f      	b.n	8006f2a <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8006f0a:	4b67      	ldr	r3, [pc, #412]	; (80070a8 <UART_SetConfig+0xc30>)
 8006f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f0e:	e00c      	b.n	8006f2a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006f10:	4b66      	ldr	r3, [pc, #408]	; (80070ac <UART_SetConfig+0xc34>)
 8006f12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f14:	e009      	b.n	8006f2a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f1c:	e005      	b.n	8006f2a <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006f28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f000 80ea 	beq.w	8007106 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	4a5a      	ldr	r2, [pc, #360]	; (80070a0 <UART_SetConfig+0xc28>)
 8006f38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f40:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f44:	005a      	lsls	r2, r3, #1
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	085b      	lsrs	r3, r3, #1
 8006f4c:	441a      	add	r2, r3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f56:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5a:	2b0f      	cmp	r3, #15
 8006f5c:	d916      	bls.n	8006f8c <UART_SetConfig+0xb14>
 8006f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f64:	d212      	bcs.n	8006f8c <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	f023 030f 	bic.w	r3, r3, #15
 8006f6e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f72:	085b      	lsrs	r3, r3, #1
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	f003 0307 	and.w	r3, r3, #7
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006f88:	60da      	str	r2, [r3, #12]
 8006f8a:	e0bc      	b.n	8007106 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006f92:	e0b8      	b.n	8007106 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006f98:	2b20      	cmp	r3, #32
 8006f9a:	dc4b      	bgt.n	8007034 <UART_SetConfig+0xbbc>
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f2c0 8087 	blt.w	80070b0 <UART_SetConfig+0xc38>
 8006fa2:	2b20      	cmp	r3, #32
 8006fa4:	f200 8084 	bhi.w	80070b0 <UART_SetConfig+0xc38>
 8006fa8:	a201      	add	r2, pc, #4	; (adr r2, 8006fb0 <UART_SetConfig+0xb38>)
 8006faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fae:	bf00      	nop
 8006fb0:	0800703b 	.word	0x0800703b
 8006fb4:	08007043 	.word	0x08007043
 8006fb8:	080070b1 	.word	0x080070b1
 8006fbc:	080070b1 	.word	0x080070b1
 8006fc0:	0800704b 	.word	0x0800704b
 8006fc4:	080070b1 	.word	0x080070b1
 8006fc8:	080070b1 	.word	0x080070b1
 8006fcc:	080070b1 	.word	0x080070b1
 8006fd0:	0800705b 	.word	0x0800705b
 8006fd4:	080070b1 	.word	0x080070b1
 8006fd8:	080070b1 	.word	0x080070b1
 8006fdc:	080070b1 	.word	0x080070b1
 8006fe0:	080070b1 	.word	0x080070b1
 8006fe4:	080070b1 	.word	0x080070b1
 8006fe8:	080070b1 	.word	0x080070b1
 8006fec:	080070b1 	.word	0x080070b1
 8006ff0:	0800706b 	.word	0x0800706b
 8006ff4:	080070b1 	.word	0x080070b1
 8006ff8:	080070b1 	.word	0x080070b1
 8006ffc:	080070b1 	.word	0x080070b1
 8007000:	080070b1 	.word	0x080070b1
 8007004:	080070b1 	.word	0x080070b1
 8007008:	080070b1 	.word	0x080070b1
 800700c:	080070b1 	.word	0x080070b1
 8007010:	080070b1 	.word	0x080070b1
 8007014:	080070b1 	.word	0x080070b1
 8007018:	080070b1 	.word	0x080070b1
 800701c:	080070b1 	.word	0x080070b1
 8007020:	080070b1 	.word	0x080070b1
 8007024:	080070b1 	.word	0x080070b1
 8007028:	080070b1 	.word	0x080070b1
 800702c:	080070b1 	.word	0x080070b1
 8007030:	08007091 	.word	0x08007091
 8007034:	2b40      	cmp	r3, #64	; 0x40
 8007036:	d02e      	beq.n	8007096 <UART_SetConfig+0xc1e>
 8007038:	e03a      	b.n	80070b0 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800703a:	f7fd fdef 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 800703e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007040:	e03c      	b.n	80070bc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007042:	f7fd fe01 	bl	8004c48 <HAL_RCC_GetPCLK2Freq>
 8007046:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007048:	e038      	b.n	80070bc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800704a:	f107 0314 	add.w	r3, r7, #20
 800704e:	4618      	mov	r0, r3
 8007050:	f7fe fd20 	bl	8005a94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007058:	e030      	b.n	80070bc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800705a:	f107 0308 	add.w	r3, r7, #8
 800705e:	4618      	mov	r0, r3
 8007060:	f7fe fe6c 	bl	8005d3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007068:	e028      	b.n	80070bc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800706a:	4b0e      	ldr	r3, [pc, #56]	; (80070a4 <UART_SetConfig+0xc2c>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0320 	and.w	r3, r3, #32
 8007072:	2b00      	cmp	r3, #0
 8007074:	d009      	beq.n	800708a <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007076:	4b0b      	ldr	r3, [pc, #44]	; (80070a4 <UART_SetConfig+0xc2c>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	08db      	lsrs	r3, r3, #3
 800707c:	f003 0303 	and.w	r3, r3, #3
 8007080:	4a09      	ldr	r2, [pc, #36]	; (80070a8 <UART_SetConfig+0xc30>)
 8007082:	fa22 f303 	lsr.w	r3, r2, r3
 8007086:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007088:	e018      	b.n	80070bc <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800708a:	4b07      	ldr	r3, [pc, #28]	; (80070a8 <UART_SetConfig+0xc30>)
 800708c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800708e:	e015      	b.n	80070bc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007090:	4b06      	ldr	r3, [pc, #24]	; (80070ac <UART_SetConfig+0xc34>)
 8007092:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007094:	e012      	b.n	80070bc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007096:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800709a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800709c:	e00e      	b.n	80070bc <UART_SetConfig+0xc44>
 800709e:	bf00      	nop
 80070a0:	08016720 	.word	0x08016720
 80070a4:	58024400 	.word	0x58024400
 80070a8:	03d09000 	.word	0x03d09000
 80070ac:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80070b0:	2300      	movs	r3, #0
 80070b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80070ba:	bf00      	nop
    }

    if (pclk != 0U)
 80070bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d021      	beq.n	8007106 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c6:	4a1a      	ldr	r2, [pc, #104]	; (8007130 <UART_SetConfig+0xcb8>)
 80070c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070cc:	461a      	mov	r2, r3
 80070ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	085b      	lsrs	r3, r3, #1
 80070da:	441a      	add	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e8:	2b0f      	cmp	r3, #15
 80070ea:	d909      	bls.n	8007100 <UART_SetConfig+0xc88>
 80070ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070f2:	d205      	bcs.n	8007100 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	60da      	str	r2, [r3, #12]
 80070fe:	e002      	b.n	8007106 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2201      	movs	r2, #1
 800710a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2201      	movs	r2, #1
 8007112:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007122:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007126:	4618      	mov	r0, r3
 8007128:	3738      	adds	r7, #56	; 0x38
 800712a:	46bd      	mov	sp, r7
 800712c:	bdb0      	pop	{r4, r5, r7, pc}
 800712e:	bf00      	nop
 8007130:	08016720 	.word	0x08016720

08007134 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007140:	f003 0301 	and.w	r3, r3, #1
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00a      	beq.n	800715e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	430a      	orrs	r2, r1
 800715c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007162:	f003 0302 	and.w	r3, r3, #2
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00a      	beq.n	8007180 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	430a      	orrs	r2, r1
 800717e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007184:	f003 0304 	and.w	r3, r3, #4
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00a      	beq.n	80071a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	430a      	orrs	r2, r1
 80071a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a6:	f003 0308 	and.w	r3, r3, #8
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00a      	beq.n	80071c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	430a      	orrs	r2, r1
 80071c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c8:	f003 0310 	and.w	r3, r3, #16
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00a      	beq.n	80071e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	430a      	orrs	r2, r1
 80071e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ea:	f003 0320 	and.w	r3, r3, #32
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00a      	beq.n	8007208 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	430a      	orrs	r2, r1
 8007206:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800720c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007210:	2b00      	cmp	r3, #0
 8007212:	d01a      	beq.n	800724a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	430a      	orrs	r2, r1
 8007228:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800722e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007232:	d10a      	bne.n	800724a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	430a      	orrs	r2, r1
 8007248:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800724e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00a      	beq.n	800726c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	430a      	orrs	r2, r1
 800726a:	605a      	str	r2, [r3, #4]
  }
}
 800726c:	bf00      	nop
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b086      	sub	sp, #24
 800727c:	af02      	add	r7, sp, #8
 800727e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007288:	f7fa fbe8 	bl	8001a5c <HAL_GetTick>
 800728c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 0308 	and.w	r3, r3, #8
 8007298:	2b08      	cmp	r3, #8
 800729a:	d10e      	bne.n	80072ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800729c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 f82f 	bl	800730e <UART_WaitOnFlagUntilTimeout>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d001      	beq.n	80072ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e025      	b.n	8007306 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0304 	and.w	r3, r3, #4
 80072c4:	2b04      	cmp	r3, #4
 80072c6:	d10e      	bne.n	80072e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f819 	bl	800730e <UART_WaitOnFlagUntilTimeout>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d001      	beq.n	80072e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e00f      	b.n	8007306 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2220      	movs	r2, #32
 80072ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2220      	movs	r2, #32
 80072f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b09c      	sub	sp, #112	; 0x70
 8007312:	af00      	add	r7, sp, #0
 8007314:	60f8      	str	r0, [r7, #12]
 8007316:	60b9      	str	r1, [r7, #8]
 8007318:	603b      	str	r3, [r7, #0]
 800731a:	4613      	mov	r3, r2
 800731c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800731e:	e0a9      	b.n	8007474 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007320:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007326:	f000 80a5 	beq.w	8007474 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800732a:	f7fa fb97 	bl	8001a5c <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007336:	429a      	cmp	r2, r3
 8007338:	d302      	bcc.n	8007340 <UART_WaitOnFlagUntilTimeout+0x32>
 800733a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800733c:	2b00      	cmp	r3, #0
 800733e:	d140      	bne.n	80073c2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007348:	e853 3f00 	ldrex	r3, [r3]
 800734c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800734e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007350:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007354:	667b      	str	r3, [r7, #100]	; 0x64
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	461a      	mov	r2, r3
 800735c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800735e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007360:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007362:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007364:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007366:	e841 2300 	strex	r3, r2, [r1]
 800736a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800736c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1e6      	bne.n	8007340 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	3308      	adds	r3, #8
 8007378:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800737c:	e853 3f00 	ldrex	r3, [r3]
 8007380:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007384:	f023 0301 	bic.w	r3, r3, #1
 8007388:	663b      	str	r3, [r7, #96]	; 0x60
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	3308      	adds	r3, #8
 8007390:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007392:	64ba      	str	r2, [r7, #72]	; 0x48
 8007394:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007396:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007398:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800739a:	e841 2300 	strex	r3, r2, [r1]
 800739e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80073a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1e5      	bne.n	8007372 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2220      	movs	r2, #32
 80073aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2220      	movs	r2, #32
 80073b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e069      	b.n	8007496 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 0304 	and.w	r3, r3, #4
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d051      	beq.n	8007474 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	69db      	ldr	r3, [r3, #28]
 80073d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073de:	d149      	bne.n	8007474 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073e8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f2:	e853 3f00 	ldrex	r3, [r3]
 80073f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	461a      	mov	r2, r3
 8007406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007408:	637b      	str	r3, [r7, #52]	; 0x34
 800740a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800740e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007410:	e841 2300 	strex	r3, r2, [r1]
 8007414:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1e6      	bne.n	80073ea <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	3308      	adds	r3, #8
 8007422:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	e853 3f00 	ldrex	r3, [r3]
 800742a:	613b      	str	r3, [r7, #16]
   return(result);
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	f023 0301 	bic.w	r3, r3, #1
 8007432:	66bb      	str	r3, [r7, #104]	; 0x68
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	3308      	adds	r3, #8
 800743a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800743c:	623a      	str	r2, [r7, #32]
 800743e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007440:	69f9      	ldr	r1, [r7, #28]
 8007442:	6a3a      	ldr	r2, [r7, #32]
 8007444:	e841 2300 	strex	r3, r2, [r1]
 8007448:	61bb      	str	r3, [r7, #24]
   return(result);
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1e5      	bne.n	800741c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2220      	movs	r2, #32
 8007454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2220      	movs	r2, #32
 800745c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2220      	movs	r2, #32
 8007464:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007470:	2303      	movs	r3, #3
 8007472:	e010      	b.n	8007496 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	69da      	ldr	r2, [r3, #28]
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	4013      	ands	r3, r2
 800747e:	68ba      	ldr	r2, [r7, #8]
 8007480:	429a      	cmp	r2, r3
 8007482:	bf0c      	ite	eq
 8007484:	2301      	moveq	r3, #1
 8007486:	2300      	movne	r3, #0
 8007488:	b2db      	uxtb	r3, r3
 800748a:	461a      	mov	r2, r3
 800748c:	79fb      	ldrb	r3, [r7, #7]
 800748e:	429a      	cmp	r2, r3
 8007490:	f43f af46 	beq.w	8007320 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3770      	adds	r7, #112	; 0x70
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800749e:	b480      	push	{r7}
 80074a0:	b085      	sub	sp, #20
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d101      	bne.n	80074b4 <HAL_UARTEx_DisableFifoMode+0x16>
 80074b0:	2302      	movs	r3, #2
 80074b2:	e027      	b.n	8007504 <HAL_UARTEx_DisableFifoMode+0x66>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2224      	movs	r2, #36	; 0x24
 80074c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f022 0201 	bic.w	r2, r2, #1
 80074da:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80074e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2220      	movs	r2, #32
 80074f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	3714      	adds	r7, #20
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007520:	2b01      	cmp	r3, #1
 8007522:	d101      	bne.n	8007528 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007524:	2302      	movs	r3, #2
 8007526:	e02d      	b.n	8007584 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2224      	movs	r2, #36	; 0x24
 8007534:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f022 0201 	bic.w	r2, r2, #1
 800754e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	683a      	ldr	r2, [r7, #0]
 8007560:	430a      	orrs	r2, r1
 8007562:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f84f 	bl	8007608 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2220      	movs	r2, #32
 8007576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800759c:	2b01      	cmp	r3, #1
 800759e:	d101      	bne.n	80075a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80075a0:	2302      	movs	r3, #2
 80075a2:	e02d      	b.n	8007600 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2224      	movs	r2, #36	; 0x24
 80075b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f022 0201 	bic.w	r2, r2, #1
 80075ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	683a      	ldr	r2, [r7, #0]
 80075dc:	430a      	orrs	r2, r1
 80075de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f811 	bl	8007608 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2220      	movs	r2, #32
 80075f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007614:	2b00      	cmp	r3, #0
 8007616:	d108      	bne.n	800762a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007628:	e031      	b.n	800768e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800762a:	2310      	movs	r3, #16
 800762c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800762e:	2310      	movs	r3, #16
 8007630:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	0e5b      	lsrs	r3, r3, #25
 800763a:	b2db      	uxtb	r3, r3
 800763c:	f003 0307 	and.w	r3, r3, #7
 8007640:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	0f5b      	lsrs	r3, r3, #29
 800764a:	b2db      	uxtb	r3, r3
 800764c:	f003 0307 	and.w	r3, r3, #7
 8007650:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007652:	7bbb      	ldrb	r3, [r7, #14]
 8007654:	7b3a      	ldrb	r2, [r7, #12]
 8007656:	4911      	ldr	r1, [pc, #68]	; (800769c <UARTEx_SetNbDataToProcess+0x94>)
 8007658:	5c8a      	ldrb	r2, [r1, r2]
 800765a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800765e:	7b3a      	ldrb	r2, [r7, #12]
 8007660:	490f      	ldr	r1, [pc, #60]	; (80076a0 <UARTEx_SetNbDataToProcess+0x98>)
 8007662:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007664:	fb93 f3f2 	sdiv	r3, r3, r2
 8007668:	b29a      	uxth	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007670:	7bfb      	ldrb	r3, [r7, #15]
 8007672:	7b7a      	ldrb	r2, [r7, #13]
 8007674:	4909      	ldr	r1, [pc, #36]	; (800769c <UARTEx_SetNbDataToProcess+0x94>)
 8007676:	5c8a      	ldrb	r2, [r1, r2]
 8007678:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800767c:	7b7a      	ldrb	r2, [r7, #13]
 800767e:	4908      	ldr	r1, [pc, #32]	; (80076a0 <UARTEx_SetNbDataToProcess+0x98>)
 8007680:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007682:	fb93 f3f2 	sdiv	r3, r3, r2
 8007686:	b29a      	uxth	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800768e:	bf00      	nop
 8007690:	3714      	adds	r7, #20
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	08016738 	.word	0x08016738
 80076a0:	08016740 	.word	0x08016740

080076a4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80076aa:	4b8d      	ldr	r3, [pc, #564]	; (80078e0 <MX_LWIP_Init+0x23c>)
 80076ac:	22c0      	movs	r2, #192	; 0xc0
 80076ae:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80076b0:	4b8b      	ldr	r3, [pc, #556]	; (80078e0 <MX_LWIP_Init+0x23c>)
 80076b2:	22a8      	movs	r2, #168	; 0xa8
 80076b4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80076b6:	4b8a      	ldr	r3, [pc, #552]	; (80078e0 <MX_LWIP_Init+0x23c>)
 80076b8:	2201      	movs	r2, #1
 80076ba:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 200;
 80076bc:	4b88      	ldr	r3, [pc, #544]	; (80078e0 <MX_LWIP_Init+0x23c>)
 80076be:	22c8      	movs	r2, #200	; 0xc8
 80076c0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80076c2:	4b88      	ldr	r3, [pc, #544]	; (80078e4 <MX_LWIP_Init+0x240>)
 80076c4:	22ff      	movs	r2, #255	; 0xff
 80076c6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80076c8:	4b86      	ldr	r3, [pc, #536]	; (80078e4 <MX_LWIP_Init+0x240>)
 80076ca:	22ff      	movs	r2, #255	; 0xff
 80076cc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80076ce:	4b85      	ldr	r3, [pc, #532]	; (80078e4 <MX_LWIP_Init+0x240>)
 80076d0:	22ff      	movs	r2, #255	; 0xff
 80076d2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80076d4:	4b83      	ldr	r3, [pc, #524]	; (80078e4 <MX_LWIP_Init+0x240>)
 80076d6:	2200      	movs	r2, #0
 80076d8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80076da:	4b83      	ldr	r3, [pc, #524]	; (80078e8 <MX_LWIP_Init+0x244>)
 80076dc:	22c0      	movs	r2, #192	; 0xc0
 80076de:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80076e0:	4b81      	ldr	r3, [pc, #516]	; (80078e8 <MX_LWIP_Init+0x244>)
 80076e2:	22a8      	movs	r2, #168	; 0xa8
 80076e4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 80076e6:	4b80      	ldr	r3, [pc, #512]	; (80078e8 <MX_LWIP_Init+0x244>)
 80076e8:	2201      	movs	r2, #1
 80076ea:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80076ec:	4b7e      	ldr	r3, [pc, #504]	; (80078e8 <MX_LWIP_Init+0x244>)
 80076ee:	2201      	movs	r2, #1
 80076f0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80076f2:	f000 fdb9 	bl	8008268 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80076f6:	4b7a      	ldr	r3, [pc, #488]	; (80078e0 <MX_LWIP_Init+0x23c>)
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	061a      	lsls	r2, r3, #24
 80076fc:	4b78      	ldr	r3, [pc, #480]	; (80078e0 <MX_LWIP_Init+0x23c>)
 80076fe:	785b      	ldrb	r3, [r3, #1]
 8007700:	041b      	lsls	r3, r3, #16
 8007702:	431a      	orrs	r2, r3
 8007704:	4b76      	ldr	r3, [pc, #472]	; (80078e0 <MX_LWIP_Init+0x23c>)
 8007706:	789b      	ldrb	r3, [r3, #2]
 8007708:	021b      	lsls	r3, r3, #8
 800770a:	4313      	orrs	r3, r2
 800770c:	4a74      	ldr	r2, [pc, #464]	; (80078e0 <MX_LWIP_Init+0x23c>)
 800770e:	78d2      	ldrb	r2, [r2, #3]
 8007710:	4313      	orrs	r3, r2
 8007712:	061a      	lsls	r2, r3, #24
 8007714:	4b72      	ldr	r3, [pc, #456]	; (80078e0 <MX_LWIP_Init+0x23c>)
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	0619      	lsls	r1, r3, #24
 800771a:	4b71      	ldr	r3, [pc, #452]	; (80078e0 <MX_LWIP_Init+0x23c>)
 800771c:	785b      	ldrb	r3, [r3, #1]
 800771e:	041b      	lsls	r3, r3, #16
 8007720:	4319      	orrs	r1, r3
 8007722:	4b6f      	ldr	r3, [pc, #444]	; (80078e0 <MX_LWIP_Init+0x23c>)
 8007724:	789b      	ldrb	r3, [r3, #2]
 8007726:	021b      	lsls	r3, r3, #8
 8007728:	430b      	orrs	r3, r1
 800772a:	496d      	ldr	r1, [pc, #436]	; (80078e0 <MX_LWIP_Init+0x23c>)
 800772c:	78c9      	ldrb	r1, [r1, #3]
 800772e:	430b      	orrs	r3, r1
 8007730:	021b      	lsls	r3, r3, #8
 8007732:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007736:	431a      	orrs	r2, r3
 8007738:	4b69      	ldr	r3, [pc, #420]	; (80078e0 <MX_LWIP_Init+0x23c>)
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	0619      	lsls	r1, r3, #24
 800773e:	4b68      	ldr	r3, [pc, #416]	; (80078e0 <MX_LWIP_Init+0x23c>)
 8007740:	785b      	ldrb	r3, [r3, #1]
 8007742:	041b      	lsls	r3, r3, #16
 8007744:	4319      	orrs	r1, r3
 8007746:	4b66      	ldr	r3, [pc, #408]	; (80078e0 <MX_LWIP_Init+0x23c>)
 8007748:	789b      	ldrb	r3, [r3, #2]
 800774a:	021b      	lsls	r3, r3, #8
 800774c:	430b      	orrs	r3, r1
 800774e:	4964      	ldr	r1, [pc, #400]	; (80078e0 <MX_LWIP_Init+0x23c>)
 8007750:	78c9      	ldrb	r1, [r1, #3]
 8007752:	430b      	orrs	r3, r1
 8007754:	0a1b      	lsrs	r3, r3, #8
 8007756:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800775a:	431a      	orrs	r2, r3
 800775c:	4b60      	ldr	r3, [pc, #384]	; (80078e0 <MX_LWIP_Init+0x23c>)
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	0619      	lsls	r1, r3, #24
 8007762:	4b5f      	ldr	r3, [pc, #380]	; (80078e0 <MX_LWIP_Init+0x23c>)
 8007764:	785b      	ldrb	r3, [r3, #1]
 8007766:	041b      	lsls	r3, r3, #16
 8007768:	4319      	orrs	r1, r3
 800776a:	4b5d      	ldr	r3, [pc, #372]	; (80078e0 <MX_LWIP_Init+0x23c>)
 800776c:	789b      	ldrb	r3, [r3, #2]
 800776e:	021b      	lsls	r3, r3, #8
 8007770:	430b      	orrs	r3, r1
 8007772:	495b      	ldr	r1, [pc, #364]	; (80078e0 <MX_LWIP_Init+0x23c>)
 8007774:	78c9      	ldrb	r1, [r1, #3]
 8007776:	430b      	orrs	r3, r1
 8007778:	0e1b      	lsrs	r3, r3, #24
 800777a:	4313      	orrs	r3, r2
 800777c:	4a5b      	ldr	r2, [pc, #364]	; (80078ec <MX_LWIP_Init+0x248>)
 800777e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007780:	4b58      	ldr	r3, [pc, #352]	; (80078e4 <MX_LWIP_Init+0x240>)
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	061a      	lsls	r2, r3, #24
 8007786:	4b57      	ldr	r3, [pc, #348]	; (80078e4 <MX_LWIP_Init+0x240>)
 8007788:	785b      	ldrb	r3, [r3, #1]
 800778a:	041b      	lsls	r3, r3, #16
 800778c:	431a      	orrs	r2, r3
 800778e:	4b55      	ldr	r3, [pc, #340]	; (80078e4 <MX_LWIP_Init+0x240>)
 8007790:	789b      	ldrb	r3, [r3, #2]
 8007792:	021b      	lsls	r3, r3, #8
 8007794:	4313      	orrs	r3, r2
 8007796:	4a53      	ldr	r2, [pc, #332]	; (80078e4 <MX_LWIP_Init+0x240>)
 8007798:	78d2      	ldrb	r2, [r2, #3]
 800779a:	4313      	orrs	r3, r2
 800779c:	061a      	lsls	r2, r3, #24
 800779e:	4b51      	ldr	r3, [pc, #324]	; (80078e4 <MX_LWIP_Init+0x240>)
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	0619      	lsls	r1, r3, #24
 80077a4:	4b4f      	ldr	r3, [pc, #316]	; (80078e4 <MX_LWIP_Init+0x240>)
 80077a6:	785b      	ldrb	r3, [r3, #1]
 80077a8:	041b      	lsls	r3, r3, #16
 80077aa:	4319      	orrs	r1, r3
 80077ac:	4b4d      	ldr	r3, [pc, #308]	; (80078e4 <MX_LWIP_Init+0x240>)
 80077ae:	789b      	ldrb	r3, [r3, #2]
 80077b0:	021b      	lsls	r3, r3, #8
 80077b2:	430b      	orrs	r3, r1
 80077b4:	494b      	ldr	r1, [pc, #300]	; (80078e4 <MX_LWIP_Init+0x240>)
 80077b6:	78c9      	ldrb	r1, [r1, #3]
 80077b8:	430b      	orrs	r3, r1
 80077ba:	021b      	lsls	r3, r3, #8
 80077bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80077c0:	431a      	orrs	r2, r3
 80077c2:	4b48      	ldr	r3, [pc, #288]	; (80078e4 <MX_LWIP_Init+0x240>)
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	0619      	lsls	r1, r3, #24
 80077c8:	4b46      	ldr	r3, [pc, #280]	; (80078e4 <MX_LWIP_Init+0x240>)
 80077ca:	785b      	ldrb	r3, [r3, #1]
 80077cc:	041b      	lsls	r3, r3, #16
 80077ce:	4319      	orrs	r1, r3
 80077d0:	4b44      	ldr	r3, [pc, #272]	; (80078e4 <MX_LWIP_Init+0x240>)
 80077d2:	789b      	ldrb	r3, [r3, #2]
 80077d4:	021b      	lsls	r3, r3, #8
 80077d6:	430b      	orrs	r3, r1
 80077d8:	4942      	ldr	r1, [pc, #264]	; (80078e4 <MX_LWIP_Init+0x240>)
 80077da:	78c9      	ldrb	r1, [r1, #3]
 80077dc:	430b      	orrs	r3, r1
 80077de:	0a1b      	lsrs	r3, r3, #8
 80077e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80077e4:	431a      	orrs	r2, r3
 80077e6:	4b3f      	ldr	r3, [pc, #252]	; (80078e4 <MX_LWIP_Init+0x240>)
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	0619      	lsls	r1, r3, #24
 80077ec:	4b3d      	ldr	r3, [pc, #244]	; (80078e4 <MX_LWIP_Init+0x240>)
 80077ee:	785b      	ldrb	r3, [r3, #1]
 80077f0:	041b      	lsls	r3, r3, #16
 80077f2:	4319      	orrs	r1, r3
 80077f4:	4b3b      	ldr	r3, [pc, #236]	; (80078e4 <MX_LWIP_Init+0x240>)
 80077f6:	789b      	ldrb	r3, [r3, #2]
 80077f8:	021b      	lsls	r3, r3, #8
 80077fa:	430b      	orrs	r3, r1
 80077fc:	4939      	ldr	r1, [pc, #228]	; (80078e4 <MX_LWIP_Init+0x240>)
 80077fe:	78c9      	ldrb	r1, [r1, #3]
 8007800:	430b      	orrs	r3, r1
 8007802:	0e1b      	lsrs	r3, r3, #24
 8007804:	4313      	orrs	r3, r2
 8007806:	4a3a      	ldr	r2, [pc, #232]	; (80078f0 <MX_LWIP_Init+0x24c>)
 8007808:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800780a:	4b37      	ldr	r3, [pc, #220]	; (80078e8 <MX_LWIP_Init+0x244>)
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	061a      	lsls	r2, r3, #24
 8007810:	4b35      	ldr	r3, [pc, #212]	; (80078e8 <MX_LWIP_Init+0x244>)
 8007812:	785b      	ldrb	r3, [r3, #1]
 8007814:	041b      	lsls	r3, r3, #16
 8007816:	431a      	orrs	r2, r3
 8007818:	4b33      	ldr	r3, [pc, #204]	; (80078e8 <MX_LWIP_Init+0x244>)
 800781a:	789b      	ldrb	r3, [r3, #2]
 800781c:	021b      	lsls	r3, r3, #8
 800781e:	4313      	orrs	r3, r2
 8007820:	4a31      	ldr	r2, [pc, #196]	; (80078e8 <MX_LWIP_Init+0x244>)
 8007822:	78d2      	ldrb	r2, [r2, #3]
 8007824:	4313      	orrs	r3, r2
 8007826:	061a      	lsls	r2, r3, #24
 8007828:	4b2f      	ldr	r3, [pc, #188]	; (80078e8 <MX_LWIP_Init+0x244>)
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	0619      	lsls	r1, r3, #24
 800782e:	4b2e      	ldr	r3, [pc, #184]	; (80078e8 <MX_LWIP_Init+0x244>)
 8007830:	785b      	ldrb	r3, [r3, #1]
 8007832:	041b      	lsls	r3, r3, #16
 8007834:	4319      	orrs	r1, r3
 8007836:	4b2c      	ldr	r3, [pc, #176]	; (80078e8 <MX_LWIP_Init+0x244>)
 8007838:	789b      	ldrb	r3, [r3, #2]
 800783a:	021b      	lsls	r3, r3, #8
 800783c:	430b      	orrs	r3, r1
 800783e:	492a      	ldr	r1, [pc, #168]	; (80078e8 <MX_LWIP_Init+0x244>)
 8007840:	78c9      	ldrb	r1, [r1, #3]
 8007842:	430b      	orrs	r3, r1
 8007844:	021b      	lsls	r3, r3, #8
 8007846:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800784a:	431a      	orrs	r2, r3
 800784c:	4b26      	ldr	r3, [pc, #152]	; (80078e8 <MX_LWIP_Init+0x244>)
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	0619      	lsls	r1, r3, #24
 8007852:	4b25      	ldr	r3, [pc, #148]	; (80078e8 <MX_LWIP_Init+0x244>)
 8007854:	785b      	ldrb	r3, [r3, #1]
 8007856:	041b      	lsls	r3, r3, #16
 8007858:	4319      	orrs	r1, r3
 800785a:	4b23      	ldr	r3, [pc, #140]	; (80078e8 <MX_LWIP_Init+0x244>)
 800785c:	789b      	ldrb	r3, [r3, #2]
 800785e:	021b      	lsls	r3, r3, #8
 8007860:	430b      	orrs	r3, r1
 8007862:	4921      	ldr	r1, [pc, #132]	; (80078e8 <MX_LWIP_Init+0x244>)
 8007864:	78c9      	ldrb	r1, [r1, #3]
 8007866:	430b      	orrs	r3, r1
 8007868:	0a1b      	lsrs	r3, r3, #8
 800786a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800786e:	431a      	orrs	r2, r3
 8007870:	4b1d      	ldr	r3, [pc, #116]	; (80078e8 <MX_LWIP_Init+0x244>)
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	0619      	lsls	r1, r3, #24
 8007876:	4b1c      	ldr	r3, [pc, #112]	; (80078e8 <MX_LWIP_Init+0x244>)
 8007878:	785b      	ldrb	r3, [r3, #1]
 800787a:	041b      	lsls	r3, r3, #16
 800787c:	4319      	orrs	r1, r3
 800787e:	4b1a      	ldr	r3, [pc, #104]	; (80078e8 <MX_LWIP_Init+0x244>)
 8007880:	789b      	ldrb	r3, [r3, #2]
 8007882:	021b      	lsls	r3, r3, #8
 8007884:	430b      	orrs	r3, r1
 8007886:	4918      	ldr	r1, [pc, #96]	; (80078e8 <MX_LWIP_Init+0x244>)
 8007888:	78c9      	ldrb	r1, [r1, #3]
 800788a:	430b      	orrs	r3, r1
 800788c:	0e1b      	lsrs	r3, r3, #24
 800788e:	4313      	orrs	r3, r2
 8007890:	4a18      	ldr	r2, [pc, #96]	; (80078f4 <MX_LWIP_Init+0x250>)
 8007892:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007894:	4b18      	ldr	r3, [pc, #96]	; (80078f8 <MX_LWIP_Init+0x254>)
 8007896:	9302      	str	r3, [sp, #8]
 8007898:	4b18      	ldr	r3, [pc, #96]	; (80078fc <MX_LWIP_Init+0x258>)
 800789a:	9301      	str	r3, [sp, #4]
 800789c:	2300      	movs	r3, #0
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	4b14      	ldr	r3, [pc, #80]	; (80078f4 <MX_LWIP_Init+0x250>)
 80078a2:	4a13      	ldr	r2, [pc, #76]	; (80078f0 <MX_LWIP_Init+0x24c>)
 80078a4:	4911      	ldr	r1, [pc, #68]	; (80078ec <MX_LWIP_Init+0x248>)
 80078a6:	4816      	ldr	r0, [pc, #88]	; (8007900 <MX_LWIP_Init+0x25c>)
 80078a8:	f001 f9c6 	bl	8008c38 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80078ac:	4814      	ldr	r0, [pc, #80]	; (8007900 <MX_LWIP_Init+0x25c>)
 80078ae:	f001 fb75 	bl	8008f9c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80078b2:	4b13      	ldr	r3, [pc, #76]	; (8007900 <MX_LWIP_Init+0x25c>)
 80078b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80078b8:	089b      	lsrs	r3, r3, #2
 80078ba:	f003 0301 	and.w	r3, r3, #1
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d003      	beq.n	80078cc <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80078c4:	480e      	ldr	r0, [pc, #56]	; (8007900 <MX_LWIP_Init+0x25c>)
 80078c6:	f001 fb79 	bl	8008fbc <netif_set_up>
 80078ca:	e002      	b.n	80078d2 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80078cc:	480c      	ldr	r0, [pc, #48]	; (8007900 <MX_LWIP_Init+0x25c>)
 80078ce:	f001 fbe1 	bl	8009094 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80078d2:	490c      	ldr	r1, [pc, #48]	; (8007904 <MX_LWIP_Init+0x260>)
 80078d4:	480a      	ldr	r0, [pc, #40]	; (8007900 <MX_LWIP_Init+0x25c>)
 80078d6:	f001 fc73 	bl	80091c0 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80078da:	bf00      	nop
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	240003c8 	.word	0x240003c8
 80078e4:	240003c4 	.word	0x240003c4
 80078e8:	24000384 	.word	0x24000384
 80078ec:	240003bc 	.word	0x240003bc
 80078f0:	240003cc 	.word	0x240003cc
 80078f4:	240003d0 	.word	0x240003d0
 80078f8:	080129e9 	.word	0x080129e9
 80078fc:	08007e65 	.word	0x08007e65
 8007900:	24000388 	.word	0x24000388
 8007904:	08007909 	.word	0x08007909

08007908 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8007910:	bf00      	nop
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b08e      	sub	sp, #56	; 0x38
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007928:	2200      	movs	r2, #0
 800792a:	601a      	str	r2, [r3, #0]
 800792c:	605a      	str	r2, [r3, #4]
 800792e:	609a      	str	r2, [r3, #8]
 8007930:	60da      	str	r2, [r3, #12]
 8007932:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a59      	ldr	r2, [pc, #356]	; (8007aa0 <HAL_ETH_MspInit+0x184>)
 800793a:	4293      	cmp	r3, r2
 800793c:	f040 80ab 	bne.w	8007a96 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8007940:	4b58      	ldr	r3, [pc, #352]	; (8007aa4 <HAL_ETH_MspInit+0x188>)
 8007942:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007946:	4a57      	ldr	r2, [pc, #348]	; (8007aa4 <HAL_ETH_MspInit+0x188>)
 8007948:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800794c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007950:	4b54      	ldr	r3, [pc, #336]	; (8007aa4 <HAL_ETH_MspInit+0x188>)
 8007952:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007956:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800795a:	623b      	str	r3, [r7, #32]
 800795c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800795e:	4b51      	ldr	r3, [pc, #324]	; (8007aa4 <HAL_ETH_MspInit+0x188>)
 8007960:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007964:	4a4f      	ldr	r2, [pc, #316]	; (8007aa4 <HAL_ETH_MspInit+0x188>)
 8007966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800796a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800796e:	4b4d      	ldr	r3, [pc, #308]	; (8007aa4 <HAL_ETH_MspInit+0x188>)
 8007970:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007978:	61fb      	str	r3, [r7, #28]
 800797a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800797c:	4b49      	ldr	r3, [pc, #292]	; (8007aa4 <HAL_ETH_MspInit+0x188>)
 800797e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007982:	4a48      	ldr	r2, [pc, #288]	; (8007aa4 <HAL_ETH_MspInit+0x188>)
 8007984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007988:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800798c:	4b45      	ldr	r3, [pc, #276]	; (8007aa4 <HAL_ETH_MspInit+0x188>)
 800798e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007996:	61bb      	str	r3, [r7, #24]
 8007998:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800799a:	4b42      	ldr	r3, [pc, #264]	; (8007aa4 <HAL_ETH_MspInit+0x188>)
 800799c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80079a0:	4a40      	ldr	r2, [pc, #256]	; (8007aa4 <HAL_ETH_MspInit+0x188>)
 80079a2:	f043 0304 	orr.w	r3, r3, #4
 80079a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80079aa:	4b3e      	ldr	r3, [pc, #248]	; (8007aa4 <HAL_ETH_MspInit+0x188>)
 80079ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80079b0:	f003 0304 	and.w	r3, r3, #4
 80079b4:	617b      	str	r3, [r7, #20]
 80079b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079b8:	4b3a      	ldr	r3, [pc, #232]	; (8007aa4 <HAL_ETH_MspInit+0x188>)
 80079ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80079be:	4a39      	ldr	r2, [pc, #228]	; (8007aa4 <HAL_ETH_MspInit+0x188>)
 80079c0:	f043 0301 	orr.w	r3, r3, #1
 80079c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80079c8:	4b36      	ldr	r3, [pc, #216]	; (8007aa4 <HAL_ETH_MspInit+0x188>)
 80079ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	613b      	str	r3, [r7, #16]
 80079d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80079d6:	4b33      	ldr	r3, [pc, #204]	; (8007aa4 <HAL_ETH_MspInit+0x188>)
 80079d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80079dc:	4a31      	ldr	r2, [pc, #196]	; (8007aa4 <HAL_ETH_MspInit+0x188>)
 80079de:	f043 0302 	orr.w	r3, r3, #2
 80079e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80079e6:	4b2f      	ldr	r3, [pc, #188]	; (8007aa4 <HAL_ETH_MspInit+0x188>)
 80079e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80079ec:	f003 0302 	and.w	r3, r3, #2
 80079f0:	60fb      	str	r3, [r7, #12]
 80079f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80079f4:	4b2b      	ldr	r3, [pc, #172]	; (8007aa4 <HAL_ETH_MspInit+0x188>)
 80079f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80079fa:	4a2a      	ldr	r2, [pc, #168]	; (8007aa4 <HAL_ETH_MspInit+0x188>)
 80079fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007a04:	4b27      	ldr	r3, [pc, #156]	; (8007aa4 <HAL_ETH_MspInit+0x188>)
 8007a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a0e:	60bb      	str	r3, [r7, #8]
 8007a10:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8007a12:	2332      	movs	r3, #50	; 0x32
 8007a14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a16:	2302      	movs	r3, #2
 8007a18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007a22:	230b      	movs	r3, #11
 8007a24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	481e      	ldr	r0, [pc, #120]	; (8007aa8 <HAL_ETH_MspInit+0x18c>)
 8007a2e:	f7fb fec5 	bl	80037bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8007a32:	2386      	movs	r3, #134	; 0x86
 8007a34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a36:	2302      	movs	r3, #2
 8007a38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007a42:	230b      	movs	r3, #11
 8007a44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	4817      	ldr	r0, [pc, #92]	; (8007aac <HAL_ETH_MspInit+0x190>)
 8007a4e:	f7fb feb5 	bl	80037bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8007a52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007a56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a58:	2302      	movs	r3, #2
 8007a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a60:	2300      	movs	r3, #0
 8007a62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007a64:	230b      	movs	r3, #11
 8007a66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8007a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	4810      	ldr	r0, [pc, #64]	; (8007ab0 <HAL_ETH_MspInit+0x194>)
 8007a70:	f7fb fea4 	bl	80037bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8007a74:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8007a78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a7a:	2302      	movs	r3, #2
 8007a7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a82:	2300      	movs	r3, #0
 8007a84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007a86:	230b      	movs	r3, #11
 8007a88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a8e:	4619      	mov	r1, r3
 8007a90:	4808      	ldr	r0, [pc, #32]	; (8007ab4 <HAL_ETH_MspInit+0x198>)
 8007a92:	f7fb fe93 	bl	80037bc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007a96:	bf00      	nop
 8007a98:	3738      	adds	r7, #56	; 0x38
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	40028000 	.word	0x40028000
 8007aa4:	58024400 	.word	0x58024400
 8007aa8:	58020800 	.word	0x58020800
 8007aac:	58020000 	.word	0x58020000
 8007ab0:	58020400 	.word	0x58020400
 8007ab4:	58021800 	.word	0x58021800

08007ab8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b086      	sub	sp, #24
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	74fb      	strb	r3, [r7, #19]
  uint32_t idx = 0;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	617b      	str	r3, [r7, #20]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007ac8:	4b4a      	ldr	r3, [pc, #296]	; (8007bf4 <low_level_init+0x13c>)
 8007aca:	4a4b      	ldr	r2, [pc, #300]	; (8007bf8 <low_level_init+0x140>)
 8007acc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8007ad2:	2380      	movs	r3, #128	; 0x80
 8007ad4:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8007ad6:	23e1      	movs	r3, #225	; 0xe1
 8007ad8:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8007ada:	2300      	movs	r3, #0
 8007adc:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8007ae6:	4a43      	ldr	r2, [pc, #268]	; (8007bf4 <low_level_init+0x13c>)
 8007ae8:	f107 030c 	add.w	r3, r7, #12
 8007aec:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8007aee:	4b41      	ldr	r3, [pc, #260]	; (8007bf4 <low_level_init+0x13c>)
 8007af0:	2201      	movs	r2, #1
 8007af2:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8007af4:	4b3f      	ldr	r3, [pc, #252]	; (8007bf4 <low_level_init+0x13c>)
 8007af6:	4a41      	ldr	r2, [pc, #260]	; (8007bfc <low_level_init+0x144>)
 8007af8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8007afa:	4b3e      	ldr	r3, [pc, #248]	; (8007bf4 <low_level_init+0x13c>)
 8007afc:	4a40      	ldr	r2, [pc, #256]	; (8007c00 <low_level_init+0x148>)
 8007afe:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8007b00:	4b3c      	ldr	r3, [pc, #240]	; (8007bf4 <low_level_init+0x13c>)
 8007b02:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007b06:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007b08:	483a      	ldr	r0, [pc, #232]	; (8007bf4 <low_level_init+0x13c>)
 8007b0a:	f7fa f927 	bl	8001d5c <HAL_ETH_Init>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	74fb      	strb	r3, [r7, #19]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007b12:	2234      	movs	r2, #52	; 0x34
 8007b14:	2100      	movs	r1, #0
 8007b16:	483b      	ldr	r0, [pc, #236]	; (8007c04 <low_level_init+0x14c>)
 8007b18:	f00b f87c 	bl	8012c14 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8007b1c:	4b39      	ldr	r3, [pc, #228]	; (8007c04 <low_level_init+0x14c>)
 8007b1e:	2221      	movs	r2, #33	; 0x21
 8007b20:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007b22:	4b38      	ldr	r3, [pc, #224]	; (8007c04 <low_level_init+0x14c>)
 8007b24:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007b28:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8007b2a:	4b36      	ldr	r3, [pc, #216]	; (8007c04 <low_level_init+0x14c>)
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007b30:	4835      	ldr	r0, [pc, #212]	; (8007c08 <low_level_init+0x150>)
 8007b32:	f000 ff49 	bl	80089c8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2206      	movs	r2, #6
 8007b3a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007b3e:	4b2d      	ldr	r3, [pc, #180]	; (8007bf4 <low_level_init+0x13c>)
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	781a      	ldrb	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007b4a:	4b2a      	ldr	r3, [pc, #168]	; (8007bf4 <low_level_init+0x13c>)
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	785a      	ldrb	r2, [r3, #1]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007b56:	4b27      	ldr	r3, [pc, #156]	; (8007bf4 <low_level_init+0x13c>)
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	789a      	ldrb	r2, [r3, #2]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007b62:	4b24      	ldr	r3, [pc, #144]	; (8007bf4 <low_level_init+0x13c>)
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	78da      	ldrb	r2, [r3, #3]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007b6e:	4b21      	ldr	r3, [pc, #132]	; (8007bf4 <low_level_init+0x13c>)
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	791a      	ldrb	r2, [r3, #4]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007b7a:	4b1e      	ldr	r3, [pc, #120]	; (8007bf4 <low_level_init+0x13c>)
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	795a      	ldrb	r2, [r3, #5]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007b8c:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007b94:	f043 030a 	orr.w	r3, r3, #10
 8007b98:	b2da      	uxtb	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	617b      	str	r3, [r7, #20]
 8007ba4:	e00e      	b.n	8007bc4 <low_level_init+0x10c>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	4613      	mov	r3, r2
 8007baa:	005b      	lsls	r3, r3, #1
 8007bac:	4413      	add	r3, r2
 8007bae:	025b      	lsls	r3, r3, #9
 8007bb0:	4a16      	ldr	r2, [pc, #88]	; (8007c0c <low_level_init+0x154>)
 8007bb2:	441a      	add	r2, r3
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	6979      	ldr	r1, [r7, #20]
 8007bb8:	480e      	ldr	r0, [pc, #56]	; (8007bf4 <low_level_init+0x13c>)
 8007bba:	f7fa f9a9 	bl	8001f10 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	617b      	str	r3, [r7, #20]
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	2b03      	cmp	r3, #3
 8007bc8:	d9ed      	bls.n	8007ba6 <low_level_init+0xee>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8007bca:	4911      	ldr	r1, [pc, #68]	; (8007c10 <low_level_init+0x158>)
 8007bcc:	4811      	ldr	r0, [pc, #68]	; (8007c14 <low_level_init+0x15c>)
 8007bce:	f7f9 fd5e 	bl	800168e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8007bd2:	4810      	ldr	r0, [pc, #64]	; (8007c14 <low_level_init+0x15c>)
 8007bd4:	f7f9 fd8d 	bl	80016f2 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8007bd8:	7cfb      	ldrb	r3, [r7, #19]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d103      	bne.n	8007be6 <low_level_init+0x12e>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f9d4 	bl	8007f8c <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007be4:	e001      	b.n	8007bea <low_level_init+0x132>
    Error_Handler();
 8007be6:	f7f9 f85c 	bl	8000ca2 <Error_Handler>
}
 8007bea:	bf00      	nop
 8007bec:	3718      	adds	r7, #24
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	240004c0 	.word	0x240004c0
 8007bf8:	40028000 	.word	0x40028000
 8007bfc:	30000080 	.word	0x30000080
 8007c00:	30000000 	.word	0x30000000
 8007c04:	24000548 	.word	0x24000548
 8007c08:	08016748 	.word	0x08016748
 8007c0c:	30000100 	.word	0x30000100
 8007c10:	24000010 	.word	0x24000010
 8007c14:	240004a0 	.word	0x240004a0

08007c18 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b092      	sub	sp, #72	; 0x48
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 8007c22:	2300      	movs	r3, #0
 8007c24:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 8007c26:	2300      	movs	r3, #0
 8007c28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8007c2c:	f107 030c 	add.w	r3, r7, #12
 8007c30:	2230      	movs	r2, #48	; 0x30
 8007c32:	2100      	movs	r1, #0
 8007c34:	4618      	mov	r0, r3
 8007c36:	f00a ffed 	bl	8012c14 <memset>

  for(q = p; q != NULL; q = q->next)
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	643b      	str	r3, [r7, #64]	; 0x40
 8007c3e:	e049      	b.n	8007cd4 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 8007c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c42:	2b03      	cmp	r3, #3
 8007c44:	d902      	bls.n	8007c4c <low_level_output+0x34>
      return ERR_IF;
 8007c46:	f06f 030b 	mvn.w	r3, #11
 8007c4a:	e056      	b.n	8007cfa <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 8007c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c4e:	6859      	ldr	r1, [r3, #4]
 8007c50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c52:	4613      	mov	r3, r2
 8007c54:	005b      	lsls	r3, r3, #1
 8007c56:	4413      	add	r3, r2
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007c5e:	4413      	add	r3, r2
 8007c60:	3b3c      	subs	r3, #60	; 0x3c
 8007c62:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8007c64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c66:	895b      	ldrh	r3, [r3, #10]
 8007c68:	4619      	mov	r1, r3
 8007c6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	005b      	lsls	r3, r3, #1
 8007c70:	4413      	add	r3, r2
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007c78:	4413      	add	r3, r2
 8007c7a:	3b38      	subs	r3, #56	; 0x38
 8007c7c:	6019      	str	r1, [r3, #0]

    if(i>0)
 8007c7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d012      	beq.n	8007caa <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8007c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c86:	1e5a      	subs	r2, r3, #1
 8007c88:	f107 000c 	add.w	r0, r7, #12
 8007c8c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c8e:	460b      	mov	r3, r1
 8007c90:	005b      	lsls	r3, r3, #1
 8007c92:	440b      	add	r3, r1
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	18c1      	adds	r1, r0, r3
 8007c98:	4613      	mov	r3, r2
 8007c9a:	005b      	lsls	r3, r3, #1
 8007c9c:	4413      	add	r3, r2
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007ca4:	4413      	add	r3, r2
 8007ca6:	3b34      	subs	r3, #52	; 0x34
 8007ca8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8007caa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d10a      	bne.n	8007cc8 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 8007cb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	005b      	lsls	r3, r3, #1
 8007cb8:	4413      	add	r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007cc0:	4413      	add	r3, r2
 8007cc2:	3b34      	subs	r3, #52	; 0x34
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	601a      	str	r2, [r3, #0]
    }

    i++;
 8007cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cca:	3301      	adds	r3, #1
 8007ccc:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8007cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	643b      	str	r3, [r7, #64]	; 0x40
 8007cd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1b2      	bne.n	8007c40 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	891b      	ldrh	r3, [r3, #8]
 8007cde:	461a      	mov	r2, r3
 8007ce0:	4b08      	ldr	r3, [pc, #32]	; (8007d04 <low_level_output+0xec>)
 8007ce2:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8007ce4:	4a07      	ldr	r2, [pc, #28]	; (8007d04 <low_level_output+0xec>)
 8007ce6:	f107 030c 	add.w	r3, r7, #12
 8007cea:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8007cec:	2214      	movs	r2, #20
 8007cee:	4905      	ldr	r1, [pc, #20]	; (8007d04 <low_level_output+0xec>)
 8007cf0:	4805      	ldr	r0, [pc, #20]	; (8007d08 <low_level_output+0xf0>)
 8007cf2:	f7fa f9fa 	bl	80020ea <HAL_ETH_Transmit>

  return errval;
 8007cf6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3748      	adds	r7, #72	; 0x48
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	24000548 	.word	0x24000548
 8007d08:	240004c0 	.word	0x240004c0

08007d0c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b098      	sub	sp, #96	; 0x60
 8007d10:	af02      	add	r7, sp, #8
 8007d12:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007d14:	2300      	movs	r3, #0
 8007d16:	653b      	str	r3, [r7, #80]	; 0x50
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	60bb      	str	r3, [r7, #8]
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	657b      	str	r3, [r7, #84]	; 0x54
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8007d20:	f107 030c 	add.w	r3, r7, #12
 8007d24:	2230      	movs	r2, #48	; 0x30
 8007d26:	2100      	movs	r1, #0
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f00a ff73 	bl	8012c14 <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8007d2e:	2300      	movs	r3, #0
 8007d30:	657b      	str	r3, [r7, #84]	; 0x54
 8007d32:	e015      	b.n	8007d60 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 8007d34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d36:	1c5a      	adds	r2, r3, #1
 8007d38:	f107 010c 	add.w	r1, r7, #12
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	005b      	lsls	r3, r3, #1
 8007d40:	4413      	add	r3, r2
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	4419      	add	r1, r3
 8007d46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d48:	4613      	mov	r3, r2
 8007d4a:	005b      	lsls	r3, r3, #1
 8007d4c:	4413      	add	r3, r2
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007d54:	4413      	add	r3, r2
 8007d56:	3b44      	subs	r3, #68	; 0x44
 8007d58:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8007d5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	657b      	str	r3, [r7, #84]	; 0x54
 8007d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d9e6      	bls.n	8007d34 <low_level_input+0x28>
  }

  if (HAL_ETH_IsRxDataAvailable(&heth))
 8007d66:	482b      	ldr	r0, [pc, #172]	; (8007e14 <low_level_input+0x108>)
 8007d68:	f7fa fa48 	bl	80021fc <HAL_ETH_IsRxDataAvailable>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d04a      	beq.n	8007e08 <low_level_input+0xfc>
  {
    HAL_ETH_GetRxDataBuffer(&heth, RxBuff);
 8007d72:	f107 030c 	add.w	r3, r7, #12
 8007d76:	4619      	mov	r1, r3
 8007d78:	4826      	ldr	r0, [pc, #152]	; (8007e14 <low_level_input+0x108>)
 8007d7a:	f7fa fb2f 	bl	80023dc <HAL_ETH_GetRxDataBuffer>
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 8007d7e:	f107 0308 	add.w	r3, r7, #8
 8007d82:	4619      	mov	r1, r3
 8007d84:	4823      	ldr	r0, [pc, #140]	; (8007e14 <low_level_input+0x108>)
 8007d86:	f7fa fbc7 	bl	8002518 <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 8007d8a:	4822      	ldr	r0, [pc, #136]	; (8007e14 <low_level_input+0x108>)
 8007d8c:	f7fa fbf7 	bl	800257e <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	68ba      	ldr	r2, [r7, #8]
 8007d94:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d96:	647a      	str	r2, [r7, #68]	; 0x44
    if ( dsize > 0 ) { 
 8007d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	dd1d      	ble.n	8007dda <low_level_input+0xce>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8007d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007da0:	f003 021f 	and.w	r2, r3, #31
 8007da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007da6:	4413      	add	r3, r2
 8007da8:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8007daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dac:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 8007dae:	f3bf 8f4f 	dsb	sy
}
 8007db2:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8007db4:	4a18      	ldr	r2, [pc, #96]	; (8007e18 <low_level_input+0x10c>)
 8007db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007db8:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8007dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dbe:	3320      	adds	r3, #32
 8007dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8007dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dc4:	3b20      	subs	r3, #32
 8007dc6:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 8007dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	dcf2      	bgt.n	8007db4 <low_level_input+0xa8>
  __ASM volatile ("dsb 0xF":::"memory");
 8007dce:	f3bf 8f4f 	dsb	sy
}
 8007dd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007dd4:	f3bf 8f6f 	isb	sy
}
 8007dd8:	bf00      	nop
}
 8007dda:	bf00      	nop
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 8007ddc:	480f      	ldr	r0, [pc, #60]	; (8007e1c <low_level_input+0x110>)
 8007dde:	f000 fe67 	bl	8008ab0 <memp_malloc_pool>
 8007de2:	64f8      	str	r0, [r7, #76]	; 0x4c
    custom_pbuf->custom_free_function = pbuf_free_custom;
 8007de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007de6:	4a0e      	ldr	r2, [pc, #56]	; (8007e20 <low_level_input+0x114>)
 8007de8:	611a      	str	r2, [r3, #16]

    p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	b299      	uxth	r1, r3
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	68ba      	ldr	r2, [r7, #8]
 8007df2:	b292      	uxth	r2, r2
 8007df4:	9201      	str	r2, [sp, #4]
 8007df6:	9300      	str	r3, [sp, #0]
 8007df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dfa:	2241      	movs	r2, #65	; 0x41
 8007dfc:	2000      	movs	r0, #0
 8007dfe:	f001 fba5 	bl	800954c <pbuf_alloced_custom>
 8007e02:	6538      	str	r0, [r7, #80]	; 0x50

    return p;
 8007e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e06:	e000      	b.n	8007e0a <low_level_input+0xfe>
  }
  else
  {
    return NULL;
 8007e08:	2300      	movs	r3, #0
  }
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3758      	adds	r7, #88	; 0x58
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	240004c0 	.word	0x240004c0
 8007e18:	e000ed00 	.word	0xe000ed00
 8007e1c:	08016748 	.word	0x08016748
 8007e20:	08007ec1 	.word	0x08007ec1

08007e24 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f7ff ff6d 	bl	8007d0c <low_level_input>
 8007e32:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d010      	beq.n	8007e5c <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	6879      	ldr	r1, [r7, #4]
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	4798      	blx	r3
 8007e44:	4603      	mov	r3, r0
 8007e46:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8007e48:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d006      	beq.n	8007e5e <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f001 fd35 	bl	80098c0 <pbuf_free>
    p = NULL;
 8007e56:	2300      	movs	r3, #0
 8007e58:	60fb      	str	r3, [r7, #12]
 8007e5a:	e000      	b.n	8007e5e <ethernetif_input+0x3a>
  if (p == NULL) return;
 8007e5c:	bf00      	nop
  }

}
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d106      	bne.n	8007e80 <ethernetif_init+0x1c>
 8007e72:	4b0e      	ldr	r3, [pc, #56]	; (8007eac <ethernetif_init+0x48>)
 8007e74:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8007e78:	490d      	ldr	r1, [pc, #52]	; (8007eb0 <ethernetif_init+0x4c>)
 8007e7a:	480e      	ldr	r0, [pc, #56]	; (8007eb4 <ethernetif_init+0x50>)
 8007e7c:	f00a fed2 	bl	8012c24 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2273      	movs	r2, #115	; 0x73
 8007e84:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2274      	movs	r2, #116	; 0x74
 8007e8c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a09      	ldr	r2, [pc, #36]	; (8007eb8 <ethernetif_init+0x54>)
 8007e94:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a08      	ldr	r2, [pc, #32]	; (8007ebc <ethernetif_init+0x58>)
 8007e9a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f7ff fe0b 	bl	8007ab8 <low_level_init>

  return ERR_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	08013d30 	.word	0x08013d30
 8007eb0:	08013d4c 	.word	0x08013d4c
 8007eb4:	08013d5c 	.word	0x08013d5c
 8007eb8:	08010d3d 	.word	0x08010d3d
 8007ebc:	08007c19 	.word	0x08007c19

08007ec0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8007ecc:	68f9      	ldr	r1, [r7, #12]
 8007ece:	4803      	ldr	r0, [pc, #12]	; (8007edc <pbuf_free_custom+0x1c>)
 8007ed0:	f000 fe5c 	bl	8008b8c <memp_free_pool>
}
 8007ed4:	bf00      	nop
 8007ed6:	3710      	adds	r7, #16
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	08016748 	.word	0x08016748

08007ee0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007ee4:	f7f9 fdba 	bl	8001a5c <HAL_GetTick>
 8007ee8:	4603      	mov	r3, r0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	bd80      	pop	{r7, pc}
	...

08007ef0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8007ef4:	4802      	ldr	r0, [pc, #8]	; (8007f00 <ETH_PHY_IO_Init+0x10>)
 8007ef6:	f7fa fe4f 	bl	8002b98 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	240004c0 	.word	0x240004c0

08007f04 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8007f04:	b480      	push	{r7}
 8007f06:	af00      	add	r7, sp, #0
  return 0;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	68ba      	ldr	r2, [r7, #8]
 8007f24:	68f9      	ldr	r1, [r7, #12]
 8007f26:	4807      	ldr	r0, [pc, #28]	; (8007f44 <ETH_PHY_IO_ReadReg+0x30>)
 8007f28:	f7fa fb9f 	bl	800266a <HAL_ETH_ReadPHYRegister>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d002      	beq.n	8007f38 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8007f32:	f04f 33ff 	mov.w	r3, #4294967295
 8007f36:	e000      	b.n	8007f3a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	240004c0 	.word	0x240004c0

08007f48 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	68f9      	ldr	r1, [r7, #12]
 8007f5a:	4807      	ldr	r0, [pc, #28]	; (8007f78 <ETH_PHY_IO_WriteReg+0x30>)
 8007f5c:	f7fa fbda 	bl	8002714 <HAL_ETH_WritePHYRegister>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d002      	beq.n	8007f6c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8007f66:	f04f 33ff 	mov.w	r3, #4294967295
 8007f6a:	e000      	b.n	8007f6e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	240004c0 	.word	0x240004c0

08007f7c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007f80:	f7f9 fd6c 	bl	8001a5c <HAL_GetTick>
 8007f84:	4603      	mov	r3, r0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	bd80      	pop	{r7, pc}
	...

08007f8c <ethernet_link_check_state>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b0a0      	sub	sp, #128	; 0x80
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 8007f94:	2300      	movs	r3, #0
 8007f96:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007f98:	2300      	movs	r3, #0
 8007f9a:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007fa0:	483a      	ldr	r0, [pc, #232]	; (800808c <ethernet_link_check_state+0x100>)
 8007fa2:	f7f9 fc4e 	bl	8001842 <LAN8742_GetLinkState>
 8007fa6:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007fae:	089b      	lsrs	r3, r3, #2
 8007fb0:	f003 0301 	and.w	r3, r3, #1
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00c      	beq.n	8007fd4 <ethernet_link_check_state+0x48>
 8007fba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	dc09      	bgt.n	8007fd4 <ethernet_link_check_state+0x48>
  {
    HAL_ETH_Stop(&heth);
 8007fc0:	4833      	ldr	r0, [pc, #204]	; (8008090 <ethernet_link_check_state+0x104>)
 8007fc2:	f7fa f842 	bl	800204a <HAL_ETH_Stop>
    netif_set_down(netif);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f001 f864 	bl	8009094 <netif_set_down>
    netif_set_link_down(netif);
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f001 f8c7 	bl	8009160 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8007fd2:	e056      	b.n	8008082 <ethernet_link_check_state+0xf6>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007fda:	f003 0304 	and.w	r3, r3, #4
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d14f      	bne.n	8008082 <ethernet_link_check_state+0xf6>
 8007fe2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	dd4c      	ble.n	8008082 <ethernet_link_check_state+0xf6>
 8007fe8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fea:	3b02      	subs	r3, #2
 8007fec:	2b03      	cmp	r3, #3
 8007fee:	d82b      	bhi.n	8008048 <ethernet_link_check_state+0xbc>
 8007ff0:	a201      	add	r2, pc, #4	; (adr r2, 8007ff8 <ethernet_link_check_state+0x6c>)
 8007ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff6:	bf00      	nop
 8007ff8:	08008009 	.word	0x08008009
 8007ffc:	0800801b 	.word	0x0800801b
 8008000:	0800802b 	.word	0x0800802b
 8008004:	0800803b 	.word	0x0800803b
      duplex = ETH_FULLDUPLEX_MODE;
 8008008:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800800c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800800e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008012:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008014:	2301      	movs	r3, #1
 8008016:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008018:	e017      	b.n	800804a <ethernet_link_check_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 800801a:	2300      	movs	r3, #0
 800801c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800801e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008022:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008024:	2301      	movs	r3, #1
 8008026:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008028:	e00f      	b.n	800804a <ethernet_link_check_state+0xbe>
      duplex = ETH_FULLDUPLEX_MODE;
 800802a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800802e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8008030:	2300      	movs	r3, #0
 8008032:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008034:	2301      	movs	r3, #1
 8008036:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008038:	e007      	b.n	800804a <ethernet_link_check_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 800803a:	2300      	movs	r3, #0
 800803c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800803e:	2300      	movs	r3, #0
 8008040:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008042:	2301      	movs	r3, #1
 8008044:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008046:	e000      	b.n	800804a <ethernet_link_check_state+0xbe>
      break;
 8008048:	bf00      	nop
    if(linkchanged)
 800804a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800804c:	2b00      	cmp	r3, #0
 800804e:	d018      	beq.n	8008082 <ethernet_link_check_state+0xf6>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8008050:	f107 030c 	add.w	r3, r7, #12
 8008054:	4619      	mov	r1, r3
 8008056:	480e      	ldr	r0, [pc, #56]	; (8008090 <ethernet_link_check_state+0x104>)
 8008058:	f7fa fbb0 	bl	80027bc <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800805c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800805e:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8008060:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008062:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008064:	f107 030c 	add.w	r3, r7, #12
 8008068:	4619      	mov	r1, r3
 800806a:	4809      	ldr	r0, [pc, #36]	; (8008090 <ethernet_link_check_state+0x104>)
 800806c:	f7fa fd7a 	bl	8002b64 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8008070:	4807      	ldr	r0, [pc, #28]	; (8008090 <ethernet_link_check_state+0x104>)
 8008072:	f7f9 ff8e 	bl	8001f92 <HAL_ETH_Start>
      netif_set_up(netif);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 ffa0 	bl	8008fbc <netif_set_up>
      netif_set_link_up(netif);
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f001 f83b 	bl	80090f8 <netif_set_link_up>
}
 8008082:	bf00      	nop
 8008084:	3780      	adds	r7, #128	; 0x80
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	240004a0 	.word	0x240004a0
 8008090:	240004c0 	.word	0x240004c0

08008094 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	4603      	mov	r3, r0
 800809c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800809e:	88fb      	ldrh	r3, [r7, #6]
 80080a0:	021b      	lsls	r3, r3, #8
 80080a2:	b21a      	sxth	r2, r3
 80080a4:	88fb      	ldrh	r3, [r7, #6]
 80080a6:	0a1b      	lsrs	r3, r3, #8
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	b21b      	sxth	r3, r3
 80080ac:	4313      	orrs	r3, r2
 80080ae:	b21b      	sxth	r3, r3
 80080b0:	b29b      	uxth	r3, r3
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	370c      	adds	r7, #12
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr

080080be <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80080be:	b480      	push	{r7}
 80080c0:	b083      	sub	sp, #12
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	061a      	lsls	r2, r3, #24
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	021b      	lsls	r3, r3, #8
 80080ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80080d2:	431a      	orrs	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	0a1b      	lsrs	r3, r3, #8
 80080d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80080dc:	431a      	orrs	r2, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	0e1b      	lsrs	r3, r3, #24
 80080e2:	4313      	orrs	r3, r2
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b089      	sub	sp, #36	; 0x24
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80080fe:	2300      	movs	r3, #0
 8008100:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8008102:	2300      	movs	r3, #0
 8008104:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	f003 0301 	and.w	r3, r3, #1
 800810c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00d      	beq.n	8008130 <lwip_standard_chksum+0x40>
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	dd0a      	ble.n	8008130 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800811a:	69fa      	ldr	r2, [r7, #28]
 800811c:	1c53      	adds	r3, r2, #1
 800811e:	61fb      	str	r3, [r7, #28]
 8008120:	f107 030e 	add.w	r3, r7, #14
 8008124:	3301      	adds	r3, #1
 8008126:	7812      	ldrb	r2, [r2, #0]
 8008128:	701a      	strb	r2, [r3, #0]
    len--;
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	3b01      	subs	r3, #1
 800812e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8008134:	e00a      	b.n	800814c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	1c9a      	adds	r2, r3, #2
 800813a:	61ba      	str	r2, [r7, #24]
 800813c:	881b      	ldrh	r3, [r3, #0]
 800813e:	461a      	mov	r2, r3
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	4413      	add	r3, r2
 8008144:	617b      	str	r3, [r7, #20]
    len -= 2;
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	3b02      	subs	r3, #2
 800814a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	2b01      	cmp	r3, #1
 8008150:	dcf1      	bgt.n	8008136 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	2b00      	cmp	r3, #0
 8008156:	dd04      	ble.n	8008162 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8008158:	f107 030e 	add.w	r3, r7, #14
 800815c:	69ba      	ldr	r2, [r7, #24]
 800815e:	7812      	ldrb	r2, [r2, #0]
 8008160:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8008162:	89fb      	ldrh	r3, [r7, #14]
 8008164:	461a      	mov	r2, r3
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	4413      	add	r3, r2
 800816a:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	0c1a      	lsrs	r2, r3, #16
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	b29b      	uxth	r3, r3
 8008174:	4413      	add	r3, r2
 8008176:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	0c1a      	lsrs	r2, r3, #16
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	b29b      	uxth	r3, r3
 8008180:	4413      	add	r3, r2
 8008182:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d007      	beq.n	800819a <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	021b      	lsls	r3, r3, #8
 800818e:	b29a      	uxth	r2, r3
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	0a1b      	lsrs	r3, r3, #8
 8008194:	b2db      	uxtb	r3, r3
 8008196:	4313      	orrs	r3, r2
 8008198:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	b29b      	uxth	r3, r3
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3724      	adds	r7, #36	; 0x24
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr

080081aa <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b082      	sub	sp, #8
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
 80081b2:	460b      	mov	r3, r1
 80081b4:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80081b6:	887b      	ldrh	r3, [r7, #2]
 80081b8:	4619      	mov	r1, r3
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f7ff ff98 	bl	80080f0 <lwip_standard_chksum>
 80081c0:	4603      	mov	r3, r0
 80081c2:	43db      	mvns	r3, r3
 80081c4:	b29b      	uxth	r3, r3
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3708      	adds	r7, #8
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b086      	sub	sp, #24
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 80081d6:	2300      	movs	r3, #0
 80081d8:	60fb      	str	r3, [r7, #12]

  acc = 0;
 80081da:	2300      	movs	r3, #0
 80081dc:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	613b      	str	r3, [r7, #16]
 80081e2:	e02b      	b.n	800823c <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	685a      	ldr	r2, [r3, #4]
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	895b      	ldrh	r3, [r3, #10]
 80081ec:	4619      	mov	r1, r3
 80081ee:	4610      	mov	r0, r2
 80081f0:	f7ff ff7e 	bl	80080f0 <lwip_standard_chksum>
 80081f4:	4603      	mov	r3, r0
 80081f6:	461a      	mov	r2, r3
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	4413      	add	r3, r2
 80081fc:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	0c1a      	lsrs	r2, r3, #16
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	b29b      	uxth	r3, r3
 8008206:	4413      	add	r3, r2
 8008208:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	895b      	ldrh	r3, [r3, #10]
 800820e:	f003 0301 	and.w	r3, r3, #1
 8008212:	b29b      	uxth	r3, r3
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00e      	beq.n	8008236 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2b00      	cmp	r3, #0
 800821c:	bf0c      	ite	eq
 800821e:	2301      	moveq	r3, #1
 8008220:	2300      	movne	r3, #0
 8008222:	b2db      	uxtb	r3, r3
 8008224:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	021b      	lsls	r3, r3, #8
 800822a:	b29a      	uxth	r2, r3
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	0a1b      	lsrs	r3, r3, #8
 8008230:	b2db      	uxtb	r3, r3
 8008232:	4313      	orrs	r3, r2
 8008234:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	613b      	str	r3, [r7, #16]
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d1d0      	bne.n	80081e4 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d007      	beq.n	8008258 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	021b      	lsls	r3, r3, #8
 800824c:	b29a      	uxth	r2, r3
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	0a1b      	lsrs	r3, r3, #8
 8008252:	b2db      	uxtb	r3, r3
 8008254:	4313      	orrs	r3, r2
 8008256:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	b29b      	uxth	r3, r3
 800825c:	43db      	mvns	r3, r3
 800825e:	b29b      	uxth	r3, r3
}
 8008260:	4618      	mov	r0, r3
 8008262:	3718      	adds	r7, #24
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800826e:	2300      	movs	r3, #0
 8008270:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8008272:	f000 f8d5 	bl	8008420 <mem_init>
  memp_init();
 8008276:	f000 fbd7 	bl	8008a28 <memp_init>
  pbuf_init();
  netif_init();
 800827a:	f000 fcd5 	bl	8008c28 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800827e:	f007 ff57 	bl	8010130 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008282:	f001 fdbb 	bl	8009dfc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8008286:	f007 fec9 	bl	801001c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800828a:	bf00      	nop
 800828c:	3708      	adds	r7, #8
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
	...

08008294 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	4603      	mov	r3, r0
 800829c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800829e:	4b05      	ldr	r3, [pc, #20]	; (80082b4 <ptr_to_mem+0x20>)
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	88fb      	ldrh	r3, [r7, #6]
 80082a4:	4413      	add	r3, r2
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	370c      	adds	r7, #12
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	240000b8 	.word	0x240000b8

080082b8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80082c0:	4b05      	ldr	r3, [pc, #20]	; (80082d8 <mem_to_ptr+0x20>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	1ad3      	subs	r3, r2, r3
 80082c8:	b29b      	uxth	r3, r3
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	370c      	adds	r7, #12
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop
 80082d8:	240000b8 	.word	0x240000b8

080082dc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80082dc:	b590      	push	{r4, r7, lr}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80082e4:	4b45      	ldr	r3, [pc, #276]	; (80083fc <plug_holes+0x120>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d206      	bcs.n	80082fc <plug_holes+0x20>
 80082ee:	4b44      	ldr	r3, [pc, #272]	; (8008400 <plug_holes+0x124>)
 80082f0:	f240 12df 	movw	r2, #479	; 0x1df
 80082f4:	4943      	ldr	r1, [pc, #268]	; (8008404 <plug_holes+0x128>)
 80082f6:	4844      	ldr	r0, [pc, #272]	; (8008408 <plug_holes+0x12c>)
 80082f8:	f00a fc94 	bl	8012c24 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80082fc:	4b43      	ldr	r3, [pc, #268]	; (800840c <plug_holes+0x130>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	429a      	cmp	r2, r3
 8008304:	d306      	bcc.n	8008314 <plug_holes+0x38>
 8008306:	4b3e      	ldr	r3, [pc, #248]	; (8008400 <plug_holes+0x124>)
 8008308:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800830c:	4940      	ldr	r1, [pc, #256]	; (8008410 <plug_holes+0x134>)
 800830e:	483e      	ldr	r0, [pc, #248]	; (8008408 <plug_holes+0x12c>)
 8008310:	f00a fc88 	bl	8012c24 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	791b      	ldrb	r3, [r3, #4]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d006      	beq.n	800832a <plug_holes+0x4e>
 800831c:	4b38      	ldr	r3, [pc, #224]	; (8008400 <plug_holes+0x124>)
 800831e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8008322:	493c      	ldr	r1, [pc, #240]	; (8008414 <plug_holes+0x138>)
 8008324:	4838      	ldr	r0, [pc, #224]	; (8008408 <plug_holes+0x12c>)
 8008326:	f00a fc7d 	bl	8012c24 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	881b      	ldrh	r3, [r3, #0]
 800832e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008332:	d906      	bls.n	8008342 <plug_holes+0x66>
 8008334:	4b32      	ldr	r3, [pc, #200]	; (8008400 <plug_holes+0x124>)
 8008336:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800833a:	4937      	ldr	r1, [pc, #220]	; (8008418 <plug_holes+0x13c>)
 800833c:	4832      	ldr	r0, [pc, #200]	; (8008408 <plug_holes+0x12c>)
 800833e:	f00a fc71 	bl	8012c24 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	881b      	ldrh	r3, [r3, #0]
 8008346:	4618      	mov	r0, r3
 8008348:	f7ff ffa4 	bl	8008294 <ptr_to_mem>
 800834c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	429a      	cmp	r2, r3
 8008354:	d024      	beq.n	80083a0 <plug_holes+0xc4>
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	791b      	ldrb	r3, [r3, #4]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d120      	bne.n	80083a0 <plug_holes+0xc4>
 800835e:	4b2b      	ldr	r3, [pc, #172]	; (800840c <plug_holes+0x130>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	429a      	cmp	r2, r3
 8008366:	d01b      	beq.n	80083a0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8008368:	4b2c      	ldr	r3, [pc, #176]	; (800841c <plug_holes+0x140>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	429a      	cmp	r2, r3
 8008370:	d102      	bne.n	8008378 <plug_holes+0x9c>
      lfree = mem;
 8008372:	4a2a      	ldr	r2, [pc, #168]	; (800841c <plug_holes+0x140>)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	881a      	ldrh	r2, [r3, #0]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	881b      	ldrh	r3, [r3, #0]
 8008384:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008388:	d00a      	beq.n	80083a0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	881b      	ldrh	r3, [r3, #0]
 800838e:	4618      	mov	r0, r3
 8008390:	f7ff ff80 	bl	8008294 <ptr_to_mem>
 8008394:	4604      	mov	r4, r0
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7ff ff8e 	bl	80082b8 <mem_to_ptr>
 800839c:	4603      	mov	r3, r0
 800839e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	885b      	ldrh	r3, [r3, #2]
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7ff ff75 	bl	8008294 <ptr_to_mem>
 80083aa:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80083ac:	68ba      	ldr	r2, [r7, #8]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d01f      	beq.n	80083f4 <plug_holes+0x118>
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	791b      	ldrb	r3, [r3, #4]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d11b      	bne.n	80083f4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80083bc:	4b17      	ldr	r3, [pc, #92]	; (800841c <plug_holes+0x140>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d102      	bne.n	80083cc <plug_holes+0xf0>
      lfree = pmem;
 80083c6:	4a15      	ldr	r2, [pc, #84]	; (800841c <plug_holes+0x140>)
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	881a      	ldrh	r2, [r3, #0]
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	881b      	ldrh	r3, [r3, #0]
 80083d8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80083dc:	d00a      	beq.n	80083f4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	881b      	ldrh	r3, [r3, #0]
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7ff ff56 	bl	8008294 <ptr_to_mem>
 80083e8:	4604      	mov	r4, r0
 80083ea:	68b8      	ldr	r0, [r7, #8]
 80083ec:	f7ff ff64 	bl	80082b8 <mem_to_ptr>
 80083f0:	4603      	mov	r3, r0
 80083f2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80083f4:	bf00      	nop
 80083f6:	3714      	adds	r7, #20
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd90      	pop	{r4, r7, pc}
 80083fc:	240000b8 	.word	0x240000b8
 8008400:	08013d84 	.word	0x08013d84
 8008404:	08013db4 	.word	0x08013db4
 8008408:	08013dcc 	.word	0x08013dcc
 800840c:	240000bc 	.word	0x240000bc
 8008410:	08013df4 	.word	0x08013df4
 8008414:	08013e10 	.word	0x08013e10
 8008418:	08013e2c 	.word	0x08013e2c
 800841c:	240000c0 	.word	0x240000c0

08008420 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008426:	4b16      	ldr	r3, [pc, #88]	; (8008480 <mem_init+0x60>)
 8008428:	4a16      	ldr	r2, [pc, #88]	; (8008484 <mem_init+0x64>)
 800842a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800842c:	4b14      	ldr	r3, [pc, #80]	; (8008480 <mem_init+0x60>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8008438:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8008446:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800844a:	f7ff ff23 	bl	8008294 <ptr_to_mem>
 800844e:	4603      	mov	r3, r0
 8008450:	4a0d      	ldr	r2, [pc, #52]	; (8008488 <mem_init+0x68>)
 8008452:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8008454:	4b0c      	ldr	r3, [pc, #48]	; (8008488 <mem_init+0x68>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2201      	movs	r2, #1
 800845a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800845c:	4b0a      	ldr	r3, [pc, #40]	; (8008488 <mem_init+0x68>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8008464:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8008466:	4b08      	ldr	r3, [pc, #32]	; (8008488 <mem_init+0x68>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800846e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8008470:	4b03      	ldr	r3, [pc, #12]	; (8008480 <mem_init+0x60>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a05      	ldr	r2, [pc, #20]	; (800848c <mem_init+0x6c>)
 8008476:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8008478:	bf00      	nop
 800847a:	3708      	adds	r7, #8
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	240000b8 	.word	0x240000b8
 8008484:	30002000 	.word	0x30002000
 8008488:	240000bc 	.word	0x240000bc
 800848c:	240000c0 	.word	0x240000c0

08008490 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f7ff ff0d 	bl	80082b8 <mem_to_ptr>
 800849e:	4603      	mov	r3, r0
 80084a0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	881b      	ldrh	r3, [r3, #0]
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7ff fef4 	bl	8008294 <ptr_to_mem>
 80084ac:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	885b      	ldrh	r3, [r3, #2]
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7ff feee 	bl	8008294 <ptr_to_mem>
 80084b8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	881b      	ldrh	r3, [r3, #0]
 80084be:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80084c2:	d818      	bhi.n	80084f6 <mem_link_valid+0x66>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	885b      	ldrh	r3, [r3, #2]
 80084c8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80084cc:	d813      	bhi.n	80084f6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80084d2:	8afa      	ldrh	r2, [r7, #22]
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d004      	beq.n	80084e2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	881b      	ldrh	r3, [r3, #0]
 80084dc:	8afa      	ldrh	r2, [r7, #22]
 80084de:	429a      	cmp	r2, r3
 80084e0:	d109      	bne.n	80084f6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80084e2:	4b08      	ldr	r3, [pc, #32]	; (8008504 <mem_link_valid+0x74>)
 80084e4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80084e6:	693a      	ldr	r2, [r7, #16]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d006      	beq.n	80084fa <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	885b      	ldrh	r3, [r3, #2]
 80084f0:	8afa      	ldrh	r2, [r7, #22]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d001      	beq.n	80084fa <mem_link_valid+0x6a>
    return 0;
 80084f6:	2300      	movs	r3, #0
 80084f8:	e000      	b.n	80084fc <mem_link_valid+0x6c>
  }
  return 1;
 80084fa:	2301      	movs	r3, #1
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3718      	adds	r7, #24
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	240000bc 	.word	0x240000bc

08008508 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d04c      	beq.n	80085b0 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f003 0303 	and.w	r3, r3, #3
 800851c:	2b00      	cmp	r3, #0
 800851e:	d007      	beq.n	8008530 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8008520:	4b25      	ldr	r3, [pc, #148]	; (80085b8 <mem_free+0xb0>)
 8008522:	f240 2273 	movw	r2, #627	; 0x273
 8008526:	4925      	ldr	r1, [pc, #148]	; (80085bc <mem_free+0xb4>)
 8008528:	4825      	ldr	r0, [pc, #148]	; (80085c0 <mem_free+0xb8>)
 800852a:	f00a fb7b 	bl	8012c24 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800852e:	e040      	b.n	80085b2 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	3b08      	subs	r3, #8
 8008534:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8008536:	4b23      	ldr	r3, [pc, #140]	; (80085c4 <mem_free+0xbc>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68fa      	ldr	r2, [r7, #12]
 800853c:	429a      	cmp	r2, r3
 800853e:	d306      	bcc.n	800854e <mem_free+0x46>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f103 020c 	add.w	r2, r3, #12
 8008546:	4b20      	ldr	r3, [pc, #128]	; (80085c8 <mem_free+0xc0>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	429a      	cmp	r2, r3
 800854c:	d907      	bls.n	800855e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800854e:	4b1a      	ldr	r3, [pc, #104]	; (80085b8 <mem_free+0xb0>)
 8008550:	f240 227f 	movw	r2, #639	; 0x27f
 8008554:	491d      	ldr	r1, [pc, #116]	; (80085cc <mem_free+0xc4>)
 8008556:	481a      	ldr	r0, [pc, #104]	; (80085c0 <mem_free+0xb8>)
 8008558:	f00a fb64 	bl	8012c24 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800855c:	e029      	b.n	80085b2 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	791b      	ldrb	r3, [r3, #4]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d107      	bne.n	8008576 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8008566:	4b14      	ldr	r3, [pc, #80]	; (80085b8 <mem_free+0xb0>)
 8008568:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800856c:	4918      	ldr	r1, [pc, #96]	; (80085d0 <mem_free+0xc8>)
 800856e:	4814      	ldr	r0, [pc, #80]	; (80085c0 <mem_free+0xb8>)
 8008570:	f00a fb58 	bl	8012c24 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008574:	e01d      	b.n	80085b2 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8008576:	68f8      	ldr	r0, [r7, #12]
 8008578:	f7ff ff8a 	bl	8008490 <mem_link_valid>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d107      	bne.n	8008592 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8008582:	4b0d      	ldr	r3, [pc, #52]	; (80085b8 <mem_free+0xb0>)
 8008584:	f240 2295 	movw	r2, #661	; 0x295
 8008588:	4912      	ldr	r1, [pc, #72]	; (80085d4 <mem_free+0xcc>)
 800858a:	480d      	ldr	r0, [pc, #52]	; (80085c0 <mem_free+0xb8>)
 800858c:	f00a fb4a 	bl	8012c24 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008590:	e00f      	b.n	80085b2 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8008598:	4b0f      	ldr	r3, [pc, #60]	; (80085d8 <mem_free+0xd0>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d202      	bcs.n	80085a8 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80085a2:	4a0d      	ldr	r2, [pc, #52]	; (80085d8 <mem_free+0xd0>)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f7ff fe97 	bl	80082dc <plug_holes>
 80085ae:	e000      	b.n	80085b2 <mem_free+0xaa>
    return;
 80085b0:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80085b2:	3710      	adds	r7, #16
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	08013d84 	.word	0x08013d84
 80085bc:	08013e58 	.word	0x08013e58
 80085c0:	08013dcc 	.word	0x08013dcc
 80085c4:	240000b8 	.word	0x240000b8
 80085c8:	240000bc 	.word	0x240000bc
 80085cc:	08013e7c 	.word	0x08013e7c
 80085d0:	08013e98 	.word	0x08013e98
 80085d4:	08013ec0 	.word	0x08013ec0
 80085d8:	240000c0 	.word	0x240000c0

080085dc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b088      	sub	sp, #32
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	460b      	mov	r3, r1
 80085e6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80085e8:	887b      	ldrh	r3, [r7, #2]
 80085ea:	3303      	adds	r3, #3
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	f023 0303 	bic.w	r3, r3, #3
 80085f2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80085f4:	8bfb      	ldrh	r3, [r7, #30]
 80085f6:	2b0b      	cmp	r3, #11
 80085f8:	d801      	bhi.n	80085fe <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80085fa:	230c      	movs	r3, #12
 80085fc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80085fe:	8bfb      	ldrh	r3, [r7, #30]
 8008600:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008604:	d803      	bhi.n	800860e <mem_trim+0x32>
 8008606:	8bfa      	ldrh	r2, [r7, #30]
 8008608:	887b      	ldrh	r3, [r7, #2]
 800860a:	429a      	cmp	r2, r3
 800860c:	d201      	bcs.n	8008612 <mem_trim+0x36>
    return NULL;
 800860e:	2300      	movs	r3, #0
 8008610:	e0cc      	b.n	80087ac <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8008612:	4b68      	ldr	r3, [pc, #416]	; (80087b4 <mem_trim+0x1d8>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	429a      	cmp	r2, r3
 800861a:	d304      	bcc.n	8008626 <mem_trim+0x4a>
 800861c:	4b66      	ldr	r3, [pc, #408]	; (80087b8 <mem_trim+0x1dc>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	429a      	cmp	r2, r3
 8008624:	d306      	bcc.n	8008634 <mem_trim+0x58>
 8008626:	4b65      	ldr	r3, [pc, #404]	; (80087bc <mem_trim+0x1e0>)
 8008628:	f240 22d1 	movw	r2, #721	; 0x2d1
 800862c:	4964      	ldr	r1, [pc, #400]	; (80087c0 <mem_trim+0x1e4>)
 800862e:	4865      	ldr	r0, [pc, #404]	; (80087c4 <mem_trim+0x1e8>)
 8008630:	f00a faf8 	bl	8012c24 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008634:	4b5f      	ldr	r3, [pc, #380]	; (80087b4 <mem_trim+0x1d8>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	429a      	cmp	r2, r3
 800863c:	d304      	bcc.n	8008648 <mem_trim+0x6c>
 800863e:	4b5e      	ldr	r3, [pc, #376]	; (80087b8 <mem_trim+0x1dc>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	429a      	cmp	r2, r3
 8008646:	d301      	bcc.n	800864c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	e0af      	b.n	80087ac <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	3b08      	subs	r3, #8
 8008650:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8008652:	69b8      	ldr	r0, [r7, #24]
 8008654:	f7ff fe30 	bl	80082b8 <mem_to_ptr>
 8008658:	4603      	mov	r3, r0
 800865a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800865c:	69bb      	ldr	r3, [r7, #24]
 800865e:	881a      	ldrh	r2, [r3, #0]
 8008660:	8afb      	ldrh	r3, [r7, #22]
 8008662:	1ad3      	subs	r3, r2, r3
 8008664:	b29b      	uxth	r3, r3
 8008666:	3b08      	subs	r3, #8
 8008668:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800866a:	8bfa      	ldrh	r2, [r7, #30]
 800866c:	8abb      	ldrh	r3, [r7, #20]
 800866e:	429a      	cmp	r2, r3
 8008670:	d906      	bls.n	8008680 <mem_trim+0xa4>
 8008672:	4b52      	ldr	r3, [pc, #328]	; (80087bc <mem_trim+0x1e0>)
 8008674:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8008678:	4953      	ldr	r1, [pc, #332]	; (80087c8 <mem_trim+0x1ec>)
 800867a:	4852      	ldr	r0, [pc, #328]	; (80087c4 <mem_trim+0x1e8>)
 800867c:	f00a fad2 	bl	8012c24 <iprintf>
  if (newsize > size) {
 8008680:	8bfa      	ldrh	r2, [r7, #30]
 8008682:	8abb      	ldrh	r3, [r7, #20]
 8008684:	429a      	cmp	r2, r3
 8008686:	d901      	bls.n	800868c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8008688:	2300      	movs	r3, #0
 800868a:	e08f      	b.n	80087ac <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800868c:	8bfa      	ldrh	r2, [r7, #30]
 800868e:	8abb      	ldrh	r3, [r7, #20]
 8008690:	429a      	cmp	r2, r3
 8008692:	d101      	bne.n	8008698 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	e089      	b.n	80087ac <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8008698:	69bb      	ldr	r3, [r7, #24]
 800869a:	881b      	ldrh	r3, [r3, #0]
 800869c:	4618      	mov	r0, r3
 800869e:	f7ff fdf9 	bl	8008294 <ptr_to_mem>
 80086a2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	791b      	ldrb	r3, [r3, #4]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d13f      	bne.n	800872c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	881b      	ldrh	r3, [r3, #0]
 80086b0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80086b4:	d106      	bne.n	80086c4 <mem_trim+0xe8>
 80086b6:	4b41      	ldr	r3, [pc, #260]	; (80087bc <mem_trim+0x1e0>)
 80086b8:	f240 22f5 	movw	r2, #757	; 0x2f5
 80086bc:	4943      	ldr	r1, [pc, #268]	; (80087cc <mem_trim+0x1f0>)
 80086be:	4841      	ldr	r0, [pc, #260]	; (80087c4 <mem_trim+0x1e8>)
 80086c0:	f00a fab0 	bl	8012c24 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	881b      	ldrh	r3, [r3, #0]
 80086c8:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80086ca:	8afa      	ldrh	r2, [r7, #22]
 80086cc:	8bfb      	ldrh	r3, [r7, #30]
 80086ce:	4413      	add	r3, r2
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	3308      	adds	r3, #8
 80086d4:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80086d6:	4b3e      	ldr	r3, [pc, #248]	; (80087d0 <mem_trim+0x1f4>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	693a      	ldr	r2, [r7, #16]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d106      	bne.n	80086ee <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80086e0:	89fb      	ldrh	r3, [r7, #14]
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7ff fdd6 	bl	8008294 <ptr_to_mem>
 80086e8:	4603      	mov	r3, r0
 80086ea:	4a39      	ldr	r2, [pc, #228]	; (80087d0 <mem_trim+0x1f4>)
 80086ec:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80086ee:	89fb      	ldrh	r3, [r7, #14]
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7ff fdcf 	bl	8008294 <ptr_to_mem>
 80086f6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	2200      	movs	r2, #0
 80086fc:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	89ba      	ldrh	r2, [r7, #12]
 8008702:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	8afa      	ldrh	r2, [r7, #22]
 8008708:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	89fa      	ldrh	r2, [r7, #14]
 800870e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	881b      	ldrh	r3, [r3, #0]
 8008714:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008718:	d047      	beq.n	80087aa <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	881b      	ldrh	r3, [r3, #0]
 800871e:	4618      	mov	r0, r3
 8008720:	f7ff fdb8 	bl	8008294 <ptr_to_mem>
 8008724:	4602      	mov	r2, r0
 8008726:	89fb      	ldrh	r3, [r7, #14]
 8008728:	8053      	strh	r3, [r2, #2]
 800872a:	e03e      	b.n	80087aa <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800872c:	8bfb      	ldrh	r3, [r7, #30]
 800872e:	f103 0214 	add.w	r2, r3, #20
 8008732:	8abb      	ldrh	r3, [r7, #20]
 8008734:	429a      	cmp	r2, r3
 8008736:	d838      	bhi.n	80087aa <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008738:	8afa      	ldrh	r2, [r7, #22]
 800873a:	8bfb      	ldrh	r3, [r7, #30]
 800873c:	4413      	add	r3, r2
 800873e:	b29b      	uxth	r3, r3
 8008740:	3308      	adds	r3, #8
 8008742:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008744:	69bb      	ldr	r3, [r7, #24]
 8008746:	881b      	ldrh	r3, [r3, #0]
 8008748:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800874c:	d106      	bne.n	800875c <mem_trim+0x180>
 800874e:	4b1b      	ldr	r3, [pc, #108]	; (80087bc <mem_trim+0x1e0>)
 8008750:	f240 3216 	movw	r2, #790	; 0x316
 8008754:	491d      	ldr	r1, [pc, #116]	; (80087cc <mem_trim+0x1f0>)
 8008756:	481b      	ldr	r0, [pc, #108]	; (80087c4 <mem_trim+0x1e8>)
 8008758:	f00a fa64 	bl	8012c24 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800875c:	89fb      	ldrh	r3, [r7, #14]
 800875e:	4618      	mov	r0, r3
 8008760:	f7ff fd98 	bl	8008294 <ptr_to_mem>
 8008764:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8008766:	4b1a      	ldr	r3, [pc, #104]	; (80087d0 <mem_trim+0x1f4>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	693a      	ldr	r2, [r7, #16]
 800876c:	429a      	cmp	r2, r3
 800876e:	d202      	bcs.n	8008776 <mem_trim+0x19a>
      lfree = mem2;
 8008770:	4a17      	ldr	r2, [pc, #92]	; (80087d0 <mem_trim+0x1f4>)
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	2200      	movs	r2, #0
 800877a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	881a      	ldrh	r2, [r3, #0]
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	8afa      	ldrh	r2, [r7, #22]
 8008788:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	89fa      	ldrh	r2, [r7, #14]
 800878e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	881b      	ldrh	r3, [r3, #0]
 8008794:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008798:	d007      	beq.n	80087aa <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	881b      	ldrh	r3, [r3, #0]
 800879e:	4618      	mov	r0, r3
 80087a0:	f7ff fd78 	bl	8008294 <ptr_to_mem>
 80087a4:	4602      	mov	r2, r0
 80087a6:	89fb      	ldrh	r3, [r7, #14]
 80087a8:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80087aa:	687b      	ldr	r3, [r7, #4]
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3720      	adds	r7, #32
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	240000b8 	.word	0x240000b8
 80087b8:	240000bc 	.word	0x240000bc
 80087bc:	08013d84 	.word	0x08013d84
 80087c0:	08013ef4 	.word	0x08013ef4
 80087c4:	08013dcc 	.word	0x08013dcc
 80087c8:	08013f0c 	.word	0x08013f0c
 80087cc:	08013f2c 	.word	0x08013f2c
 80087d0:	240000c0 	.word	0x240000c0

080087d4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b088      	sub	sp, #32
 80087d8:	af00      	add	r7, sp, #0
 80087da:	4603      	mov	r3, r0
 80087dc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80087de:	88fb      	ldrh	r3, [r7, #6]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d101      	bne.n	80087e8 <mem_malloc+0x14>
    return NULL;
 80087e4:	2300      	movs	r3, #0
 80087e6:	e0d9      	b.n	800899c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80087e8:	88fb      	ldrh	r3, [r7, #6]
 80087ea:	3303      	adds	r3, #3
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	f023 0303 	bic.w	r3, r3, #3
 80087f2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80087f4:	8bbb      	ldrh	r3, [r7, #28]
 80087f6:	2b0b      	cmp	r3, #11
 80087f8:	d801      	bhi.n	80087fe <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80087fa:	230c      	movs	r3, #12
 80087fc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80087fe:	8bbb      	ldrh	r3, [r7, #28]
 8008800:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008804:	d803      	bhi.n	800880e <mem_malloc+0x3a>
 8008806:	8bba      	ldrh	r2, [r7, #28]
 8008808:	88fb      	ldrh	r3, [r7, #6]
 800880a:	429a      	cmp	r2, r3
 800880c:	d201      	bcs.n	8008812 <mem_malloc+0x3e>
    return NULL;
 800880e:	2300      	movs	r3, #0
 8008810:	e0c4      	b.n	800899c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008812:	4b64      	ldr	r3, [pc, #400]	; (80089a4 <mem_malloc+0x1d0>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4618      	mov	r0, r3
 8008818:	f7ff fd4e 	bl	80082b8 <mem_to_ptr>
 800881c:	4603      	mov	r3, r0
 800881e:	83fb      	strh	r3, [r7, #30]
 8008820:	e0b4      	b.n	800898c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8008822:	8bfb      	ldrh	r3, [r7, #30]
 8008824:	4618      	mov	r0, r3
 8008826:	f7ff fd35 	bl	8008294 <ptr_to_mem>
 800882a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	791b      	ldrb	r3, [r3, #4]
 8008830:	2b00      	cmp	r3, #0
 8008832:	f040 80a4 	bne.w	800897e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	881b      	ldrh	r3, [r3, #0]
 800883a:	461a      	mov	r2, r3
 800883c:	8bfb      	ldrh	r3, [r7, #30]
 800883e:	1ad3      	subs	r3, r2, r3
 8008840:	f1a3 0208 	sub.w	r2, r3, #8
 8008844:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8008846:	429a      	cmp	r2, r3
 8008848:	f0c0 8099 	bcc.w	800897e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	881b      	ldrh	r3, [r3, #0]
 8008850:	461a      	mov	r2, r3
 8008852:	8bfb      	ldrh	r3, [r7, #30]
 8008854:	1ad3      	subs	r3, r2, r3
 8008856:	f1a3 0208 	sub.w	r2, r3, #8
 800885a:	8bbb      	ldrh	r3, [r7, #28]
 800885c:	3314      	adds	r3, #20
 800885e:	429a      	cmp	r2, r3
 8008860:	d333      	bcc.n	80088ca <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8008862:	8bfa      	ldrh	r2, [r7, #30]
 8008864:	8bbb      	ldrh	r3, [r7, #28]
 8008866:	4413      	add	r3, r2
 8008868:	b29b      	uxth	r3, r3
 800886a:	3308      	adds	r3, #8
 800886c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800886e:	8a7b      	ldrh	r3, [r7, #18]
 8008870:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008874:	d106      	bne.n	8008884 <mem_malloc+0xb0>
 8008876:	4b4c      	ldr	r3, [pc, #304]	; (80089a8 <mem_malloc+0x1d4>)
 8008878:	f240 3287 	movw	r2, #903	; 0x387
 800887c:	494b      	ldr	r1, [pc, #300]	; (80089ac <mem_malloc+0x1d8>)
 800887e:	484c      	ldr	r0, [pc, #304]	; (80089b0 <mem_malloc+0x1dc>)
 8008880:	f00a f9d0 	bl	8012c24 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8008884:	8a7b      	ldrh	r3, [r7, #18]
 8008886:	4618      	mov	r0, r3
 8008888:	f7ff fd04 	bl	8008294 <ptr_to_mem>
 800888c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2200      	movs	r2, #0
 8008892:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	881a      	ldrh	r2, [r3, #0]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	8bfa      	ldrh	r2, [r7, #30]
 80088a0:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	8a7a      	ldrh	r2, [r7, #18]
 80088a6:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	2201      	movs	r2, #1
 80088ac:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	881b      	ldrh	r3, [r3, #0]
 80088b2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80088b6:	d00b      	beq.n	80088d0 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	881b      	ldrh	r3, [r3, #0]
 80088bc:	4618      	mov	r0, r3
 80088be:	f7ff fce9 	bl	8008294 <ptr_to_mem>
 80088c2:	4602      	mov	r2, r0
 80088c4:	8a7b      	ldrh	r3, [r7, #18]
 80088c6:	8053      	strh	r3, [r2, #2]
 80088c8:	e002      	b.n	80088d0 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	2201      	movs	r2, #1
 80088ce:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80088d0:	4b34      	ldr	r3, [pc, #208]	; (80089a4 <mem_malloc+0x1d0>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	697a      	ldr	r2, [r7, #20]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d127      	bne.n	800892a <mem_malloc+0x156>
          struct mem *cur = lfree;
 80088da:	4b32      	ldr	r3, [pc, #200]	; (80089a4 <mem_malloc+0x1d0>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80088e0:	e005      	b.n	80088ee <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	881b      	ldrh	r3, [r3, #0]
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7ff fcd4 	bl	8008294 <ptr_to_mem>
 80088ec:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	791b      	ldrb	r3, [r3, #4]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d004      	beq.n	8008900 <mem_malloc+0x12c>
 80088f6:	4b2f      	ldr	r3, [pc, #188]	; (80089b4 <mem_malloc+0x1e0>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	69ba      	ldr	r2, [r7, #24]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d1f0      	bne.n	80088e2 <mem_malloc+0x10e>
          }
          lfree = cur;
 8008900:	4a28      	ldr	r2, [pc, #160]	; (80089a4 <mem_malloc+0x1d0>)
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008906:	4b27      	ldr	r3, [pc, #156]	; (80089a4 <mem_malloc+0x1d0>)
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	4b2a      	ldr	r3, [pc, #168]	; (80089b4 <mem_malloc+0x1e0>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	429a      	cmp	r2, r3
 8008910:	d00b      	beq.n	800892a <mem_malloc+0x156>
 8008912:	4b24      	ldr	r3, [pc, #144]	; (80089a4 <mem_malloc+0x1d0>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	791b      	ldrb	r3, [r3, #4]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d006      	beq.n	800892a <mem_malloc+0x156>
 800891c:	4b22      	ldr	r3, [pc, #136]	; (80089a8 <mem_malloc+0x1d4>)
 800891e:	f240 32b5 	movw	r2, #949	; 0x3b5
 8008922:	4925      	ldr	r1, [pc, #148]	; (80089b8 <mem_malloc+0x1e4>)
 8008924:	4822      	ldr	r0, [pc, #136]	; (80089b0 <mem_malloc+0x1dc>)
 8008926:	f00a f97d 	bl	8012c24 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800892a:	8bba      	ldrh	r2, [r7, #28]
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	4413      	add	r3, r2
 8008930:	3308      	adds	r3, #8
 8008932:	4a20      	ldr	r2, [pc, #128]	; (80089b4 <mem_malloc+0x1e0>)
 8008934:	6812      	ldr	r2, [r2, #0]
 8008936:	4293      	cmp	r3, r2
 8008938:	d906      	bls.n	8008948 <mem_malloc+0x174>
 800893a:	4b1b      	ldr	r3, [pc, #108]	; (80089a8 <mem_malloc+0x1d4>)
 800893c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8008940:	491e      	ldr	r1, [pc, #120]	; (80089bc <mem_malloc+0x1e8>)
 8008942:	481b      	ldr	r0, [pc, #108]	; (80089b0 <mem_malloc+0x1dc>)
 8008944:	f00a f96e 	bl	8012c24 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	f003 0303 	and.w	r3, r3, #3
 800894e:	2b00      	cmp	r3, #0
 8008950:	d006      	beq.n	8008960 <mem_malloc+0x18c>
 8008952:	4b15      	ldr	r3, [pc, #84]	; (80089a8 <mem_malloc+0x1d4>)
 8008954:	f240 32bb 	movw	r2, #955	; 0x3bb
 8008958:	4919      	ldr	r1, [pc, #100]	; (80089c0 <mem_malloc+0x1ec>)
 800895a:	4815      	ldr	r0, [pc, #84]	; (80089b0 <mem_malloc+0x1dc>)
 800895c:	f00a f962 	bl	8012c24 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	f003 0303 	and.w	r3, r3, #3
 8008966:	2b00      	cmp	r3, #0
 8008968:	d006      	beq.n	8008978 <mem_malloc+0x1a4>
 800896a:	4b0f      	ldr	r3, [pc, #60]	; (80089a8 <mem_malloc+0x1d4>)
 800896c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8008970:	4914      	ldr	r1, [pc, #80]	; (80089c4 <mem_malloc+0x1f0>)
 8008972:	480f      	ldr	r0, [pc, #60]	; (80089b0 <mem_malloc+0x1dc>)
 8008974:	f00a f956 	bl	8012c24 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	3308      	adds	r3, #8
 800897c:	e00e      	b.n	800899c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800897e:	8bfb      	ldrh	r3, [r7, #30]
 8008980:	4618      	mov	r0, r3
 8008982:	f7ff fc87 	bl	8008294 <ptr_to_mem>
 8008986:	4603      	mov	r3, r0
 8008988:	881b      	ldrh	r3, [r3, #0]
 800898a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800898c:	8bfa      	ldrh	r2, [r7, #30]
 800898e:	8bbb      	ldrh	r3, [r7, #28]
 8008990:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8008994:	429a      	cmp	r2, r3
 8008996:	f4ff af44 	bcc.w	8008822 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3720      	adds	r7, #32
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	240000c0 	.word	0x240000c0
 80089a8:	08013d84 	.word	0x08013d84
 80089ac:	08013f2c 	.word	0x08013f2c
 80089b0:	08013dcc 	.word	0x08013dcc
 80089b4:	240000bc 	.word	0x240000bc
 80089b8:	08013f40 	.word	0x08013f40
 80089bc:	08013f5c 	.word	0x08013f5c
 80089c0:	08013f8c 	.word	0x08013f8c
 80089c4:	08013fbc 	.word	0x08013fbc

080089c8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	2200      	movs	r2, #0
 80089d6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	3303      	adds	r3, #3
 80089de:	f023 0303 	bic.w	r3, r3, #3
 80089e2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80089e4:	2300      	movs	r3, #0
 80089e6:	60fb      	str	r3, [r7, #12]
 80089e8:	e011      	b.n	8008a0e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	68ba      	ldr	r2, [r7, #8]
 80089fa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	881b      	ldrh	r3, [r3, #0]
 8008a00:	461a      	mov	r2, r3
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	4413      	add	r3, r2
 8008a06:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	60fb      	str	r3, [r7, #12]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	885b      	ldrh	r3, [r3, #2]
 8008a12:	461a      	mov	r2, r3
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	4293      	cmp	r3, r2
 8008a18:	dbe7      	blt.n	80089ea <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8008a1a:	bf00      	nop
 8008a1c:	bf00      	nop
 8008a1e:	3714      	adds	r7, #20
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008a2e:	2300      	movs	r3, #0
 8008a30:	80fb      	strh	r3, [r7, #6]
 8008a32:	e009      	b.n	8008a48 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8008a34:	88fb      	ldrh	r3, [r7, #6]
 8008a36:	4a08      	ldr	r2, [pc, #32]	; (8008a58 <memp_init+0x30>)
 8008a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f7ff ffc3 	bl	80089c8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008a42:	88fb      	ldrh	r3, [r7, #6]
 8008a44:	3301      	adds	r3, #1
 8008a46:	80fb      	strh	r3, [r7, #6]
 8008a48:	88fb      	ldrh	r3, [r7, #6]
 8008a4a:	2b08      	cmp	r3, #8
 8008a4c:	d9f2      	bls.n	8008a34 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8008a4e:	bf00      	nop
 8008a50:	bf00      	nop
 8008a52:	3708      	adds	r7, #8
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	080167c0 	.word	0x080167c0

08008a5c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d012      	beq.n	8008a98 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	68fa      	ldr	r2, [r7, #12]
 8008a78:	6812      	ldr	r2, [r2, #0]
 8008a7a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f003 0303 	and.w	r3, r3, #3
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d006      	beq.n	8008a94 <do_memp_malloc_pool+0x38>
 8008a86:	4b07      	ldr	r3, [pc, #28]	; (8008aa4 <do_memp_malloc_pool+0x48>)
 8008a88:	f44f 728c 	mov.w	r2, #280	; 0x118
 8008a8c:	4906      	ldr	r1, [pc, #24]	; (8008aa8 <do_memp_malloc_pool+0x4c>)
 8008a8e:	4807      	ldr	r0, [pc, #28]	; (8008aac <do_memp_malloc_pool+0x50>)
 8008a90:	f00a f8c8 	bl	8012c24 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	e000      	b.n	8008a9a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	08013fe0 	.word	0x08013fe0
 8008aa8:	08014010 	.word	0x08014010
 8008aac:	08014034 	.word	0x08014034

08008ab0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d106      	bne.n	8008acc <memp_malloc_pool+0x1c>
 8008abe:	4b0a      	ldr	r3, [pc, #40]	; (8008ae8 <memp_malloc_pool+0x38>)
 8008ac0:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8008ac4:	4909      	ldr	r1, [pc, #36]	; (8008aec <memp_malloc_pool+0x3c>)
 8008ac6:	480a      	ldr	r0, [pc, #40]	; (8008af0 <memp_malloc_pool+0x40>)
 8008ac8:	f00a f8ac 	bl	8012c24 <iprintf>
  if (desc == NULL) {
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d101      	bne.n	8008ad6 <memp_malloc_pool+0x26>
    return NULL;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	e003      	b.n	8008ade <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f7ff ffc0 	bl	8008a5c <do_memp_malloc_pool>
 8008adc:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3708      	adds	r7, #8
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	08013fe0 	.word	0x08013fe0
 8008aec:	0801405c 	.word	0x0801405c
 8008af0:	08014034 	.word	0x08014034

08008af4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	4603      	mov	r3, r0
 8008afc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008afe:	79fb      	ldrb	r3, [r7, #7]
 8008b00:	2b08      	cmp	r3, #8
 8008b02:	d908      	bls.n	8008b16 <memp_malloc+0x22>
 8008b04:	4b0a      	ldr	r3, [pc, #40]	; (8008b30 <memp_malloc+0x3c>)
 8008b06:	f240 1257 	movw	r2, #343	; 0x157
 8008b0a:	490a      	ldr	r1, [pc, #40]	; (8008b34 <memp_malloc+0x40>)
 8008b0c:	480a      	ldr	r0, [pc, #40]	; (8008b38 <memp_malloc+0x44>)
 8008b0e:	f00a f889 	bl	8012c24 <iprintf>
 8008b12:	2300      	movs	r3, #0
 8008b14:	e008      	b.n	8008b28 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8008b16:	79fb      	ldrb	r3, [r7, #7]
 8008b18:	4a08      	ldr	r2, [pc, #32]	; (8008b3c <memp_malloc+0x48>)
 8008b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7ff ff9c 	bl	8008a5c <do_memp_malloc_pool>
 8008b24:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8008b26:	68fb      	ldr	r3, [r7, #12]
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3710      	adds	r7, #16
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	08013fe0 	.word	0x08013fe0
 8008b34:	08014070 	.word	0x08014070
 8008b38:	08014034 	.word	0x08014034
 8008b3c:	080167c0 	.word	0x080167c0

08008b40 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	f003 0303 	and.w	r3, r3, #3
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d006      	beq.n	8008b62 <do_memp_free_pool+0x22>
 8008b54:	4b0a      	ldr	r3, [pc, #40]	; (8008b80 <do_memp_free_pool+0x40>)
 8008b56:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8008b5a:	490a      	ldr	r1, [pc, #40]	; (8008b84 <do_memp_free_pool+0x44>)
 8008b5c:	480a      	ldr	r0, [pc, #40]	; (8008b88 <do_memp_free_pool+0x48>)
 8008b5e:	f00a f861 	bl	8012c24 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8008b78:	bf00      	nop
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	08013fe0 	.word	0x08013fe0
 8008b84:	08014090 	.word	0x08014090
 8008b88:	08014034 	.word	0x08014034

08008b8c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d106      	bne.n	8008baa <memp_free_pool+0x1e>
 8008b9c:	4b0a      	ldr	r3, [pc, #40]	; (8008bc8 <memp_free_pool+0x3c>)
 8008b9e:	f240 1295 	movw	r2, #405	; 0x195
 8008ba2:	490a      	ldr	r1, [pc, #40]	; (8008bcc <memp_free_pool+0x40>)
 8008ba4:	480a      	ldr	r0, [pc, #40]	; (8008bd0 <memp_free_pool+0x44>)
 8008ba6:	f00a f83d 	bl	8012c24 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d007      	beq.n	8008bc0 <memp_free_pool+0x34>
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d004      	beq.n	8008bc0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8008bb6:	6839      	ldr	r1, [r7, #0]
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f7ff ffc1 	bl	8008b40 <do_memp_free_pool>
 8008bbe:	e000      	b.n	8008bc2 <memp_free_pool+0x36>
    return;
 8008bc0:	bf00      	nop
}
 8008bc2:	3708      	adds	r7, #8
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	08013fe0 	.word	0x08013fe0
 8008bcc:	0801405c 	.word	0x0801405c
 8008bd0:	08014034 	.word	0x08014034

08008bd4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	4603      	mov	r3, r0
 8008bdc:	6039      	str	r1, [r7, #0]
 8008bde:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008be0:	79fb      	ldrb	r3, [r7, #7]
 8008be2:	2b08      	cmp	r3, #8
 8008be4:	d907      	bls.n	8008bf6 <memp_free+0x22>
 8008be6:	4b0c      	ldr	r3, [pc, #48]	; (8008c18 <memp_free+0x44>)
 8008be8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8008bec:	490b      	ldr	r1, [pc, #44]	; (8008c1c <memp_free+0x48>)
 8008bee:	480c      	ldr	r0, [pc, #48]	; (8008c20 <memp_free+0x4c>)
 8008bf0:	f00a f818 	bl	8012c24 <iprintf>
 8008bf4:	e00c      	b.n	8008c10 <memp_free+0x3c>

  if (mem == NULL) {
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d008      	beq.n	8008c0e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008bfc:	79fb      	ldrb	r3, [r7, #7]
 8008bfe:	4a09      	ldr	r2, [pc, #36]	; (8008c24 <memp_free+0x50>)
 8008c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c04:	6839      	ldr	r1, [r7, #0]
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7ff ff9a 	bl	8008b40 <do_memp_free_pool>
 8008c0c:	e000      	b.n	8008c10 <memp_free+0x3c>
    return;
 8008c0e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008c10:	3708      	adds	r7, #8
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	08013fe0 	.word	0x08013fe0
 8008c1c:	080140b0 	.word	0x080140b0
 8008c20:	08014034 	.word	0x08014034
 8008c24:	080167c0 	.word	0x080167c0

08008c28 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8008c2c:	bf00      	nop
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr
	...

08008c38 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b086      	sub	sp, #24
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	607a      	str	r2, [r7, #4]
 8008c44:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d108      	bne.n	8008c5e <netif_add+0x26>
 8008c4c:	4b57      	ldr	r3, [pc, #348]	; (8008dac <netif_add+0x174>)
 8008c4e:	f240 1227 	movw	r2, #295	; 0x127
 8008c52:	4957      	ldr	r1, [pc, #348]	; (8008db0 <netif_add+0x178>)
 8008c54:	4857      	ldr	r0, [pc, #348]	; (8008db4 <netif_add+0x17c>)
 8008c56:	f009 ffe5 	bl	8012c24 <iprintf>
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	e0a2      	b.n	8008da4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8008c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d108      	bne.n	8008c76 <netif_add+0x3e>
 8008c64:	4b51      	ldr	r3, [pc, #324]	; (8008dac <netif_add+0x174>)
 8008c66:	f44f 7294 	mov.w	r2, #296	; 0x128
 8008c6a:	4953      	ldr	r1, [pc, #332]	; (8008db8 <netif_add+0x180>)
 8008c6c:	4851      	ldr	r0, [pc, #324]	; (8008db4 <netif_add+0x17c>)
 8008c6e:	f009 ffd9 	bl	8012c24 <iprintf>
 8008c72:	2300      	movs	r3, #0
 8008c74:	e096      	b.n	8008da4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d101      	bne.n	8008c80 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8008c7c:	4b4f      	ldr	r3, [pc, #316]	; (8008dbc <netif_add+0x184>)
 8008c7e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d101      	bne.n	8008c8a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8008c86:	4b4d      	ldr	r3, [pc, #308]	; (8008dbc <netif_add+0x184>)
 8008c88:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d101      	bne.n	8008c94 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8008c90:	4b4a      	ldr	r3, [pc, #296]	; (8008dbc <netif_add+0x184>)
 8008c92:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	4a45      	ldr	r2, [pc, #276]	; (8008dc0 <netif_add+0x188>)
 8008caa:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6a3a      	ldr	r2, [r7, #32]
 8008cc4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8008cc6:	4b3f      	ldr	r3, [pc, #252]	; (8008dc4 <netif_add+0x18c>)
 8008cc8:	781a      	ldrb	r2, [r3, #0]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cd4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	68b9      	ldr	r1, [r7, #8]
 8008cdc:	68f8      	ldr	r0, [r7, #12]
 8008cde:	f000 f913 	bl	8008f08 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce4:	68f8      	ldr	r0, [r7, #12]
 8008ce6:	4798      	blx	r3
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d001      	beq.n	8008cf2 <netif_add+0xba>
    return NULL;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	e058      	b.n	8008da4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008cf8:	2bff      	cmp	r3, #255	; 0xff
 8008cfa:	d103      	bne.n	8008d04 <netif_add+0xcc>
        netif->num = 0;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8008d04:	2300      	movs	r3, #0
 8008d06:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008d08:	4b2f      	ldr	r3, [pc, #188]	; (8008dc8 <netif_add+0x190>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	617b      	str	r3, [r7, #20]
 8008d0e:	e02b      	b.n	8008d68 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008d10:	697a      	ldr	r2, [r7, #20]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d106      	bne.n	8008d26 <netif_add+0xee>
 8008d18:	4b24      	ldr	r3, [pc, #144]	; (8008dac <netif_add+0x174>)
 8008d1a:	f240 128b 	movw	r2, #395	; 0x18b
 8008d1e:	492b      	ldr	r1, [pc, #172]	; (8008dcc <netif_add+0x194>)
 8008d20:	4824      	ldr	r0, [pc, #144]	; (8008db4 <netif_add+0x17c>)
 8008d22:	f009 ff7f 	bl	8012c24 <iprintf>
        num_netifs++;
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	3301      	adds	r3, #1
 8008d2a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	2bff      	cmp	r3, #255	; 0xff
 8008d30:	dd06      	ble.n	8008d40 <netif_add+0x108>
 8008d32:	4b1e      	ldr	r3, [pc, #120]	; (8008dac <netif_add+0x174>)
 8008d34:	f240 128d 	movw	r2, #397	; 0x18d
 8008d38:	4925      	ldr	r1, [pc, #148]	; (8008dd0 <netif_add+0x198>)
 8008d3a:	481e      	ldr	r0, [pc, #120]	; (8008db4 <netif_add+0x17c>)
 8008d3c:	f009 ff72 	bl	8012c24 <iprintf>
        if (netif2->num == netif->num) {
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d108      	bne.n	8008d62 <netif_add+0x12a>
          netif->num++;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008d56:	3301      	adds	r3, #1
 8008d58:	b2da      	uxtb	r2, r3
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8008d60:	e005      	b.n	8008d6e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	617b      	str	r3, [r7, #20]
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d1d0      	bne.n	8008d10 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d1be      	bne.n	8008cf2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008d7a:	2bfe      	cmp	r3, #254	; 0xfe
 8008d7c:	d103      	bne.n	8008d86 <netif_add+0x14e>
    netif_num = 0;
 8008d7e:	4b11      	ldr	r3, [pc, #68]	; (8008dc4 <netif_add+0x18c>)
 8008d80:	2200      	movs	r2, #0
 8008d82:	701a      	strb	r2, [r3, #0]
 8008d84:	e006      	b.n	8008d94 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	b2da      	uxtb	r2, r3
 8008d90:	4b0c      	ldr	r3, [pc, #48]	; (8008dc4 <netif_add+0x18c>)
 8008d92:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8008d94:	4b0c      	ldr	r3, [pc, #48]	; (8008dc8 <netif_add+0x190>)
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8008d9c:	4a0a      	ldr	r2, [pc, #40]	; (8008dc8 <netif_add+0x190>)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8008da2:	68fb      	ldr	r3, [r7, #12]
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3718      	adds	r7, #24
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	080140cc 	.word	0x080140cc
 8008db0:	08014160 	.word	0x08014160
 8008db4:	0801411c 	.word	0x0801411c
 8008db8:	0801417c 	.word	0x0801417c
 8008dbc:	08016824 	.word	0x08016824
 8008dc0:	080091e3 	.word	0x080091e3
 8008dc4:	240000e8 	.word	0x240000e8
 8008dc8:	2400345c 	.word	0x2400345c
 8008dcc:	080141a0 	.word	0x080141a0
 8008dd0:	080141b4 	.word	0x080141b4

08008dd4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8008dde:	6839      	ldr	r1, [r7, #0]
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f002 fdf3 	bl	800b9cc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8008de6:	6839      	ldr	r1, [r7, #0]
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f007 fb2b 	bl	8010444 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8008dee:	bf00      	nop
 8008df0:	3708      	adds	r7, #8
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
	...

08008df8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b086      	sub	sp, #24
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	60b9      	str	r1, [r7, #8]
 8008e02:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d106      	bne.n	8008e18 <netif_do_set_ipaddr+0x20>
 8008e0a:	4b1d      	ldr	r3, [pc, #116]	; (8008e80 <netif_do_set_ipaddr+0x88>)
 8008e0c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8008e10:	491c      	ldr	r1, [pc, #112]	; (8008e84 <netif_do_set_ipaddr+0x8c>)
 8008e12:	481d      	ldr	r0, [pc, #116]	; (8008e88 <netif_do_set_ipaddr+0x90>)
 8008e14:	f009 ff06 	bl	8012c24 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d106      	bne.n	8008e2c <netif_do_set_ipaddr+0x34>
 8008e1e:	4b18      	ldr	r3, [pc, #96]	; (8008e80 <netif_do_set_ipaddr+0x88>)
 8008e20:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8008e24:	4917      	ldr	r1, [pc, #92]	; (8008e84 <netif_do_set_ipaddr+0x8c>)
 8008e26:	4818      	ldr	r0, [pc, #96]	; (8008e88 <netif_do_set_ipaddr+0x90>)
 8008e28:	f009 fefc 	bl	8012c24 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	3304      	adds	r3, #4
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d01c      	beq.n	8008e74 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	3304      	adds	r3, #4
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8008e4a:	f107 0314 	add.w	r3, r7, #20
 8008e4e:	4619      	mov	r1, r3
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f7ff ffbf 	bl	8008dd4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d002      	beq.n	8008e62 <netif_do_set_ipaddr+0x6a>
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	e000      	b.n	8008e64 <netif_do_set_ipaddr+0x6c>
 8008e62:	2300      	movs	r3, #0
 8008e64:	68fa      	ldr	r2, [r7, #12]
 8008e66:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008e68:	2101      	movs	r1, #1
 8008e6a:	68f8      	ldr	r0, [r7, #12]
 8008e6c:	f000 f8d2 	bl	8009014 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8008e70:	2301      	movs	r3, #1
 8008e72:	e000      	b.n	8008e76 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8008e74:	2300      	movs	r3, #0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3718      	adds	r7, #24
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	080140cc 	.word	0x080140cc
 8008e84:	080141e4 	.word	0x080141e4
 8008e88:	0801411c 	.word	0x0801411c

08008e8c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b085      	sub	sp, #20
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	3308      	adds	r3, #8
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d00a      	beq.n	8008ebc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d002      	beq.n	8008eb2 <netif_do_set_netmask+0x26>
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	e000      	b.n	8008eb4 <netif_do_set_netmask+0x28>
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e000      	b.n	8008ebe <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3714      	adds	r7, #20
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr

08008eca <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8008eca:	b480      	push	{r7}
 8008ecc:	b085      	sub	sp, #20
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	60f8      	str	r0, [r7, #12]
 8008ed2:	60b9      	str	r1, [r7, #8]
 8008ed4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	330c      	adds	r3, #12
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d00a      	beq.n	8008efa <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d002      	beq.n	8008ef0 <netif_do_set_gw+0x26>
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	e000      	b.n	8008ef2 <netif_do_set_gw+0x28>
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e000      	b.n	8008efc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8008efa:	2300      	movs	r3, #0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3714      	adds	r7, #20
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b088      	sub	sp, #32
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	607a      	str	r2, [r7, #4]
 8008f14:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8008f16:	2300      	movs	r3, #0
 8008f18:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d101      	bne.n	8008f28 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8008f24:	4b1c      	ldr	r3, [pc, #112]	; (8008f98 <netif_set_addr+0x90>)
 8008f26:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d101      	bne.n	8008f32 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8008f2e:	4b1a      	ldr	r3, [pc, #104]	; (8008f98 <netif_set_addr+0x90>)
 8008f30:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d101      	bne.n	8008f3c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8008f38:	4b17      	ldr	r3, [pc, #92]	; (8008f98 <netif_set_addr+0x90>)
 8008f3a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d003      	beq.n	8008f4a <netif_set_addr+0x42>
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d101      	bne.n	8008f4e <netif_set_addr+0x46>
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e000      	b.n	8008f50 <netif_set_addr+0x48>
 8008f4e:	2300      	movs	r3, #0
 8008f50:	617b      	str	r3, [r7, #20]
  if (remove) {
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d006      	beq.n	8008f66 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008f58:	f107 0310 	add.w	r3, r7, #16
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	68b9      	ldr	r1, [r7, #8]
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f7ff ff49 	bl	8008df8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8008f66:	69fa      	ldr	r2, [r7, #28]
 8008f68:	6879      	ldr	r1, [r7, #4]
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f7ff ff8e 	bl	8008e8c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8008f70:	69ba      	ldr	r2, [r7, #24]
 8008f72:	6839      	ldr	r1, [r7, #0]
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	f7ff ffa8 	bl	8008eca <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d106      	bne.n	8008f8e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008f80:	f107 0310 	add.w	r3, r7, #16
 8008f84:	461a      	mov	r2, r3
 8008f86:	68b9      	ldr	r1, [r7, #8]
 8008f88:	68f8      	ldr	r0, [r7, #12]
 8008f8a:	f7ff ff35 	bl	8008df8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8008f8e:	bf00      	nop
 8008f90:	3720      	adds	r7, #32
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	08016824 	.word	0x08016824

08008f9c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8008fa4:	4a04      	ldr	r2, [pc, #16]	; (8008fb8 <netif_set_default+0x1c>)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8008faa:	bf00      	nop
 8008fac:	370c      	adds	r7, #12
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr
 8008fb6:	bf00      	nop
 8008fb8:	24003460 	.word	0x24003460

08008fbc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d107      	bne.n	8008fda <netif_set_up+0x1e>
 8008fca:	4b0f      	ldr	r3, [pc, #60]	; (8009008 <netif_set_up+0x4c>)
 8008fcc:	f44f 7254 	mov.w	r2, #848	; 0x350
 8008fd0:	490e      	ldr	r1, [pc, #56]	; (800900c <netif_set_up+0x50>)
 8008fd2:	480f      	ldr	r0, [pc, #60]	; (8009010 <netif_set_up+0x54>)
 8008fd4:	f009 fe26 	bl	8012c24 <iprintf>
 8008fd8:	e013      	b.n	8009002 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008fe0:	f003 0301 	and.w	r3, r3, #1
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d10c      	bne.n	8009002 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008fee:	f043 0301 	orr.w	r3, r3, #1
 8008ff2:	b2da      	uxtb	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008ffa:	2103      	movs	r1, #3
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 f809 	bl	8009014 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8009002:	3708      	adds	r7, #8
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	080140cc 	.word	0x080140cc
 800900c:	08014254 	.word	0x08014254
 8009010:	0801411c 	.word	0x0801411c

08009014 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	460b      	mov	r3, r1
 800901e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d106      	bne.n	8009034 <netif_issue_reports+0x20>
 8009026:	4b18      	ldr	r3, [pc, #96]	; (8009088 <netif_issue_reports+0x74>)
 8009028:	f240 326d 	movw	r2, #877	; 0x36d
 800902c:	4917      	ldr	r1, [pc, #92]	; (800908c <netif_issue_reports+0x78>)
 800902e:	4818      	ldr	r0, [pc, #96]	; (8009090 <netif_issue_reports+0x7c>)
 8009030:	f009 fdf8 	bl	8012c24 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800903a:	f003 0304 	and.w	r3, r3, #4
 800903e:	2b00      	cmp	r3, #0
 8009040:	d01e      	beq.n	8009080 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009048:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800904c:	2b00      	cmp	r3, #0
 800904e:	d017      	beq.n	8009080 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009050:	78fb      	ldrb	r3, [r7, #3]
 8009052:	f003 0301 	and.w	r3, r3, #1
 8009056:	2b00      	cmp	r3, #0
 8009058:	d013      	beq.n	8009082 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	3304      	adds	r3, #4
 800905e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009060:	2b00      	cmp	r3, #0
 8009062:	d00e      	beq.n	8009082 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800906a:	f003 0308 	and.w	r3, r3, #8
 800906e:	2b00      	cmp	r3, #0
 8009070:	d007      	beq.n	8009082 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	3304      	adds	r3, #4
 8009076:	4619      	mov	r1, r3
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f008 f94d 	bl	8011318 <etharp_request>
 800907e:	e000      	b.n	8009082 <netif_issue_reports+0x6e>
    return;
 8009080:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}
 8009088:	080140cc 	.word	0x080140cc
 800908c:	08014270 	.word	0x08014270
 8009090:	0801411c 	.word	0x0801411c

08009094 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d107      	bne.n	80090b2 <netif_set_down+0x1e>
 80090a2:	4b12      	ldr	r3, [pc, #72]	; (80090ec <netif_set_down+0x58>)
 80090a4:	f240 329b 	movw	r2, #923	; 0x39b
 80090a8:	4911      	ldr	r1, [pc, #68]	; (80090f0 <netif_set_down+0x5c>)
 80090aa:	4812      	ldr	r0, [pc, #72]	; (80090f4 <netif_set_down+0x60>)
 80090ac:	f009 fdba 	bl	8012c24 <iprintf>
 80090b0:	e019      	b.n	80090e6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80090b8:	f003 0301 	and.w	r3, r3, #1
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d012      	beq.n	80090e6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80090c6:	f023 0301 	bic.w	r3, r3, #1
 80090ca:	b2da      	uxtb	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80090d8:	f003 0308 	and.w	r3, r3, #8
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d002      	beq.n	80090e6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f007 fcd7 	bl	8010a94 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80090e6:	3708      	adds	r7, #8
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	080140cc 	.word	0x080140cc
 80090f0:	08014294 	.word	0x08014294
 80090f4:	0801411c 	.word	0x0801411c

080090f8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d107      	bne.n	8009116 <netif_set_link_up+0x1e>
 8009106:	4b13      	ldr	r3, [pc, #76]	; (8009154 <netif_set_link_up+0x5c>)
 8009108:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800910c:	4912      	ldr	r1, [pc, #72]	; (8009158 <netif_set_link_up+0x60>)
 800910e:	4813      	ldr	r0, [pc, #76]	; (800915c <netif_set_link_up+0x64>)
 8009110:	f009 fd88 	bl	8012c24 <iprintf>
 8009114:	e01b      	b.n	800914e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800911c:	f003 0304 	and.w	r3, r3, #4
 8009120:	2b00      	cmp	r3, #0
 8009122:	d114      	bne.n	800914e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800912a:	f043 0304 	orr.w	r3, r3, #4
 800912e:	b2da      	uxtb	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009136:	2103      	movs	r1, #3
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f7ff ff6b 	bl	8009014 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	69db      	ldr	r3, [r3, #28]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d003      	beq.n	800914e <netif_set_link_up+0x56>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	69db      	ldr	r3, [r3, #28]
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800914e:	3708      	adds	r7, #8
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}
 8009154:	080140cc 	.word	0x080140cc
 8009158:	080142b4 	.word	0x080142b4
 800915c:	0801411c 	.word	0x0801411c

08009160 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d107      	bne.n	800917e <netif_set_link_down+0x1e>
 800916e:	4b11      	ldr	r3, [pc, #68]	; (80091b4 <netif_set_link_down+0x54>)
 8009170:	f240 4206 	movw	r2, #1030	; 0x406
 8009174:	4910      	ldr	r1, [pc, #64]	; (80091b8 <netif_set_link_down+0x58>)
 8009176:	4811      	ldr	r0, [pc, #68]	; (80091bc <netif_set_link_down+0x5c>)
 8009178:	f009 fd54 	bl	8012c24 <iprintf>
 800917c:	e017      	b.n	80091ae <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009184:	f003 0304 	and.w	r3, r3, #4
 8009188:	2b00      	cmp	r3, #0
 800918a:	d010      	beq.n	80091ae <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009192:	f023 0304 	bic.w	r3, r3, #4
 8009196:	b2da      	uxtb	r2, r3
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	69db      	ldr	r3, [r3, #28]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d003      	beq.n	80091ae <netif_set_link_down+0x4e>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	69db      	ldr	r3, [r3, #28]
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80091ae:	3708      	adds	r7, #8
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	080140cc 	.word	0x080140cc
 80091b8:	080142d8 	.word	0x080142d8
 80091bc:	0801411c 	.word	0x0801411c

080091c0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d002      	beq.n	80091d6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	683a      	ldr	r2, [r7, #0]
 80091d4:	61da      	str	r2, [r3, #28]
  }
}
 80091d6:	bf00      	nop
 80091d8:	370c      	adds	r7, #12
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr

080091e2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80091e2:	b480      	push	{r7}
 80091e4:	b085      	sub	sp, #20
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	60f8      	str	r0, [r7, #12]
 80091ea:	60b9      	str	r1, [r7, #8]
 80091ec:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80091ee:	f06f 030b 	mvn.w	r3, #11
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3714      	adds	r7, #20
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr
	...

08009200 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8009200:	b480      	push	{r7}
 8009202:	b085      	sub	sp, #20
 8009204:	af00      	add	r7, sp, #0
 8009206:	4603      	mov	r3, r0
 8009208:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800920a:	79fb      	ldrb	r3, [r7, #7]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d013      	beq.n	8009238 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8009210:	4b0d      	ldr	r3, [pc, #52]	; (8009248 <netif_get_by_index+0x48>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	60fb      	str	r3, [r7, #12]
 8009216:	e00c      	b.n	8009232 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800921e:	3301      	adds	r3, #1
 8009220:	b2db      	uxtb	r3, r3
 8009222:	79fa      	ldrb	r2, [r7, #7]
 8009224:	429a      	cmp	r2, r3
 8009226:	d101      	bne.n	800922c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	e006      	b.n	800923a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	60fb      	str	r3, [r7, #12]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d1ef      	bne.n	8009218 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8009238:	2300      	movs	r3, #0
}
 800923a:	4618      	mov	r0, r3
 800923c:	3714      	adds	r7, #20
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	2400345c 	.word	0x2400345c

0800924c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8009252:	4b0c      	ldr	r3, [pc, #48]	; (8009284 <pbuf_free_ooseq+0x38>)
 8009254:	2200      	movs	r2, #0
 8009256:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009258:	4b0b      	ldr	r3, [pc, #44]	; (8009288 <pbuf_free_ooseq+0x3c>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	607b      	str	r3, [r7, #4]
 800925e:	e00a      	b.n	8009276 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009264:	2b00      	cmp	r3, #0
 8009266:	d003      	beq.n	8009270 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f002 fbed 	bl	800ba48 <tcp_free_ooseq>
      return;
 800926e:	e005      	b.n	800927c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	607b      	str	r3, [r7, #4]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d1f1      	bne.n	8009260 <pbuf_free_ooseq+0x14>
    }
  }
}
 800927c:	3708      	adds	r7, #8
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	24003464 	.word	0x24003464
 8009288:	2400346c 	.word	0x2400346c

0800928c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800928c:	b480      	push	{r7}
 800928e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8009290:	4b03      	ldr	r3, [pc, #12]	; (80092a0 <pbuf_pool_is_empty+0x14>)
 8009292:	2201      	movs	r2, #1
 8009294:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8009296:	bf00      	nop
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr
 80092a0:	24003464 	.word	0x24003464

080092a4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b085      	sub	sp, #20
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	4611      	mov	r1, r2
 80092b0:	461a      	mov	r2, r3
 80092b2:	460b      	mov	r3, r1
 80092b4:	80fb      	strh	r3, [r7, #6]
 80092b6:	4613      	mov	r3, r2
 80092b8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2200      	movs	r2, #0
 80092be:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	68ba      	ldr	r2, [r7, #8]
 80092c4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	88fa      	ldrh	r2, [r7, #6]
 80092ca:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	88ba      	ldrh	r2, [r7, #4]
 80092d0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80092d2:	8b3b      	ldrh	r3, [r7, #24]
 80092d4:	b2da      	uxtb	r2, r3
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	7f3a      	ldrb	r2, [r7, #28]
 80092de:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2201      	movs	r2, #1
 80092e4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2200      	movs	r2, #0
 80092ea:	73da      	strb	r2, [r3, #15]
}
 80092ec:	bf00      	nop
 80092ee:	3714      	adds	r7, #20
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b08c      	sub	sp, #48	; 0x30
 80092fc:	af02      	add	r7, sp, #8
 80092fe:	4603      	mov	r3, r0
 8009300:	71fb      	strb	r3, [r7, #7]
 8009302:	460b      	mov	r3, r1
 8009304:	80bb      	strh	r3, [r7, #4]
 8009306:	4613      	mov	r3, r2
 8009308:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800930a:	79fb      	ldrb	r3, [r7, #7]
 800930c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800930e:	887b      	ldrh	r3, [r7, #2]
 8009310:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8009314:	d07f      	beq.n	8009416 <pbuf_alloc+0x11e>
 8009316:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800931a:	f300 80c8 	bgt.w	80094ae <pbuf_alloc+0x1b6>
 800931e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8009322:	d010      	beq.n	8009346 <pbuf_alloc+0x4e>
 8009324:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8009328:	f300 80c1 	bgt.w	80094ae <pbuf_alloc+0x1b6>
 800932c:	2b01      	cmp	r3, #1
 800932e:	d002      	beq.n	8009336 <pbuf_alloc+0x3e>
 8009330:	2b41      	cmp	r3, #65	; 0x41
 8009332:	f040 80bc 	bne.w	80094ae <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8009336:	887a      	ldrh	r2, [r7, #2]
 8009338:	88bb      	ldrh	r3, [r7, #4]
 800933a:	4619      	mov	r1, r3
 800933c:	2000      	movs	r0, #0
 800933e:	f000 f8d1 	bl	80094e4 <pbuf_alloc_reference>
 8009342:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8009344:	e0bd      	b.n	80094c2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8009346:	2300      	movs	r3, #0
 8009348:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800934a:	2300      	movs	r3, #0
 800934c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800934e:	88bb      	ldrh	r3, [r7, #4]
 8009350:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009352:	2008      	movs	r0, #8
 8009354:	f7ff fbce 	bl	8008af4 <memp_malloc>
 8009358:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d109      	bne.n	8009374 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8009360:	f7ff ff94 	bl	800928c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8009364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009366:	2b00      	cmp	r3, #0
 8009368:	d002      	beq.n	8009370 <pbuf_alloc+0x78>
            pbuf_free(p);
 800936a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800936c:	f000 faa8 	bl	80098c0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8009370:	2300      	movs	r3, #0
 8009372:	e0a7      	b.n	80094c4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009374:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009376:	3303      	adds	r3, #3
 8009378:	b29b      	uxth	r3, r3
 800937a:	f023 0303 	bic.w	r3, r3, #3
 800937e:	b29b      	uxth	r3, r3
 8009380:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8009384:	b29b      	uxth	r3, r3
 8009386:	8b7a      	ldrh	r2, [r7, #26]
 8009388:	4293      	cmp	r3, r2
 800938a:	bf28      	it	cs
 800938c:	4613      	movcs	r3, r2
 800938e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009390:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009392:	3310      	adds	r3, #16
 8009394:	693a      	ldr	r2, [r7, #16]
 8009396:	4413      	add	r3, r2
 8009398:	3303      	adds	r3, #3
 800939a:	f023 0303 	bic.w	r3, r3, #3
 800939e:	4618      	mov	r0, r3
 80093a0:	89f9      	ldrh	r1, [r7, #14]
 80093a2:	8b7a      	ldrh	r2, [r7, #26]
 80093a4:	2300      	movs	r3, #0
 80093a6:	9301      	str	r3, [sp, #4]
 80093a8:	887b      	ldrh	r3, [r7, #2]
 80093aa:	9300      	str	r3, [sp, #0]
 80093ac:	460b      	mov	r3, r1
 80093ae:	4601      	mov	r1, r0
 80093b0:	6938      	ldr	r0, [r7, #16]
 80093b2:	f7ff ff77 	bl	80092a4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	f003 0303 	and.w	r3, r3, #3
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d006      	beq.n	80093d0 <pbuf_alloc+0xd8>
 80093c2:	4b42      	ldr	r3, [pc, #264]	; (80094cc <pbuf_alloc+0x1d4>)
 80093c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80093c8:	4941      	ldr	r1, [pc, #260]	; (80094d0 <pbuf_alloc+0x1d8>)
 80093ca:	4842      	ldr	r0, [pc, #264]	; (80094d4 <pbuf_alloc+0x1dc>)
 80093cc:	f009 fc2a 	bl	8012c24 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80093d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80093d2:	3303      	adds	r3, #3
 80093d4:	f023 0303 	bic.w	r3, r3, #3
 80093d8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80093dc:	d106      	bne.n	80093ec <pbuf_alloc+0xf4>
 80093de:	4b3b      	ldr	r3, [pc, #236]	; (80094cc <pbuf_alloc+0x1d4>)
 80093e0:	f44f 7281 	mov.w	r2, #258	; 0x102
 80093e4:	493c      	ldr	r1, [pc, #240]	; (80094d8 <pbuf_alloc+0x1e0>)
 80093e6:	483b      	ldr	r0, [pc, #236]	; (80094d4 <pbuf_alloc+0x1dc>)
 80093e8:	f009 fc1c 	bl	8012c24 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80093ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d102      	bne.n	80093f8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	627b      	str	r3, [r7, #36]	; 0x24
 80093f6:	e002      	b.n	80093fe <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	693a      	ldr	r2, [r7, #16]
 80093fc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8009402:	8b7a      	ldrh	r2, [r7, #26]
 8009404:	89fb      	ldrh	r3, [r7, #14]
 8009406:	1ad3      	subs	r3, r2, r3
 8009408:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800940a:	2300      	movs	r3, #0
 800940c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800940e:	8b7b      	ldrh	r3, [r7, #26]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d19e      	bne.n	8009352 <pbuf_alloc+0x5a>
      break;
 8009414:	e055      	b.n	80094c2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8009416:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009418:	3303      	adds	r3, #3
 800941a:	b29b      	uxth	r3, r3
 800941c:	f023 0303 	bic.w	r3, r3, #3
 8009420:	b29a      	uxth	r2, r3
 8009422:	88bb      	ldrh	r3, [r7, #4]
 8009424:	3303      	adds	r3, #3
 8009426:	b29b      	uxth	r3, r3
 8009428:	f023 0303 	bic.w	r3, r3, #3
 800942c:	b29b      	uxth	r3, r3
 800942e:	4413      	add	r3, r2
 8009430:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8009432:	8b3b      	ldrh	r3, [r7, #24]
 8009434:	3310      	adds	r3, #16
 8009436:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009438:	8b3a      	ldrh	r2, [r7, #24]
 800943a:	88bb      	ldrh	r3, [r7, #4]
 800943c:	3303      	adds	r3, #3
 800943e:	f023 0303 	bic.w	r3, r3, #3
 8009442:	429a      	cmp	r2, r3
 8009444:	d306      	bcc.n	8009454 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8009446:	8afa      	ldrh	r2, [r7, #22]
 8009448:	88bb      	ldrh	r3, [r7, #4]
 800944a:	3303      	adds	r3, #3
 800944c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009450:	429a      	cmp	r2, r3
 8009452:	d201      	bcs.n	8009458 <pbuf_alloc+0x160>
        return NULL;
 8009454:	2300      	movs	r3, #0
 8009456:	e035      	b.n	80094c4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8009458:	8afb      	ldrh	r3, [r7, #22]
 800945a:	4618      	mov	r0, r3
 800945c:	f7ff f9ba 	bl	80087d4 <mem_malloc>
 8009460:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8009462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009464:	2b00      	cmp	r3, #0
 8009466:	d101      	bne.n	800946c <pbuf_alloc+0x174>
        return NULL;
 8009468:	2300      	movs	r3, #0
 800946a:	e02b      	b.n	80094c4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800946c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800946e:	3310      	adds	r3, #16
 8009470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009472:	4413      	add	r3, r2
 8009474:	3303      	adds	r3, #3
 8009476:	f023 0303 	bic.w	r3, r3, #3
 800947a:	4618      	mov	r0, r3
 800947c:	88b9      	ldrh	r1, [r7, #4]
 800947e:	88ba      	ldrh	r2, [r7, #4]
 8009480:	2300      	movs	r3, #0
 8009482:	9301      	str	r3, [sp, #4]
 8009484:	887b      	ldrh	r3, [r7, #2]
 8009486:	9300      	str	r3, [sp, #0]
 8009488:	460b      	mov	r3, r1
 800948a:	4601      	mov	r1, r0
 800948c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800948e:	f7ff ff09 	bl	80092a4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8009492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	f003 0303 	and.w	r3, r3, #3
 800949a:	2b00      	cmp	r3, #0
 800949c:	d010      	beq.n	80094c0 <pbuf_alloc+0x1c8>
 800949e:	4b0b      	ldr	r3, [pc, #44]	; (80094cc <pbuf_alloc+0x1d4>)
 80094a0:	f44f 7291 	mov.w	r2, #290	; 0x122
 80094a4:	490d      	ldr	r1, [pc, #52]	; (80094dc <pbuf_alloc+0x1e4>)
 80094a6:	480b      	ldr	r0, [pc, #44]	; (80094d4 <pbuf_alloc+0x1dc>)
 80094a8:	f009 fbbc 	bl	8012c24 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80094ac:	e008      	b.n	80094c0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80094ae:	4b07      	ldr	r3, [pc, #28]	; (80094cc <pbuf_alloc+0x1d4>)
 80094b0:	f240 1227 	movw	r2, #295	; 0x127
 80094b4:	490a      	ldr	r1, [pc, #40]	; (80094e0 <pbuf_alloc+0x1e8>)
 80094b6:	4807      	ldr	r0, [pc, #28]	; (80094d4 <pbuf_alloc+0x1dc>)
 80094b8:	f009 fbb4 	bl	8012c24 <iprintf>
      return NULL;
 80094bc:	2300      	movs	r3, #0
 80094be:	e001      	b.n	80094c4 <pbuf_alloc+0x1cc>
      break;
 80094c0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80094c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3728      	adds	r7, #40	; 0x28
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	080142fc 	.word	0x080142fc
 80094d0:	0801432c 	.word	0x0801432c
 80094d4:	0801435c 	.word	0x0801435c
 80094d8:	08014384 	.word	0x08014384
 80094dc:	080143b8 	.word	0x080143b8
 80094e0:	080143e4 	.word	0x080143e4

080094e4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b086      	sub	sp, #24
 80094e8:	af02      	add	r7, sp, #8
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	460b      	mov	r3, r1
 80094ee:	807b      	strh	r3, [r7, #2]
 80094f0:	4613      	mov	r3, r2
 80094f2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80094f4:	883b      	ldrh	r3, [r7, #0]
 80094f6:	2b41      	cmp	r3, #65	; 0x41
 80094f8:	d009      	beq.n	800950e <pbuf_alloc_reference+0x2a>
 80094fa:	883b      	ldrh	r3, [r7, #0]
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d006      	beq.n	800950e <pbuf_alloc_reference+0x2a>
 8009500:	4b0f      	ldr	r3, [pc, #60]	; (8009540 <pbuf_alloc_reference+0x5c>)
 8009502:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8009506:	490f      	ldr	r1, [pc, #60]	; (8009544 <pbuf_alloc_reference+0x60>)
 8009508:	480f      	ldr	r0, [pc, #60]	; (8009548 <pbuf_alloc_reference+0x64>)
 800950a:	f009 fb8b 	bl	8012c24 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800950e:	2007      	movs	r0, #7
 8009510:	f7ff faf0 	bl	8008af4 <memp_malloc>
 8009514:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d101      	bne.n	8009520 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800951c:	2300      	movs	r3, #0
 800951e:	e00b      	b.n	8009538 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8009520:	8879      	ldrh	r1, [r7, #2]
 8009522:	887a      	ldrh	r2, [r7, #2]
 8009524:	2300      	movs	r3, #0
 8009526:	9301      	str	r3, [sp, #4]
 8009528:	883b      	ldrh	r3, [r7, #0]
 800952a:	9300      	str	r3, [sp, #0]
 800952c:	460b      	mov	r3, r1
 800952e:	6879      	ldr	r1, [r7, #4]
 8009530:	68f8      	ldr	r0, [r7, #12]
 8009532:	f7ff feb7 	bl	80092a4 <pbuf_init_alloced_pbuf>
  return p;
 8009536:	68fb      	ldr	r3, [r7, #12]
}
 8009538:	4618      	mov	r0, r3
 800953a:	3710      	adds	r7, #16
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}
 8009540:	080142fc 	.word	0x080142fc
 8009544:	08014400 	.word	0x08014400
 8009548:	0801435c 	.word	0x0801435c

0800954c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b088      	sub	sp, #32
 8009550:	af02      	add	r7, sp, #8
 8009552:	607b      	str	r3, [r7, #4]
 8009554:	4603      	mov	r3, r0
 8009556:	73fb      	strb	r3, [r7, #15]
 8009558:	460b      	mov	r3, r1
 800955a:	81bb      	strh	r3, [r7, #12]
 800955c:	4613      	mov	r3, r2
 800955e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8009560:	7bfb      	ldrb	r3, [r7, #15]
 8009562:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009564:	8a7b      	ldrh	r3, [r7, #18]
 8009566:	3303      	adds	r3, #3
 8009568:	f023 0203 	bic.w	r2, r3, #3
 800956c:	89bb      	ldrh	r3, [r7, #12]
 800956e:	441a      	add	r2, r3
 8009570:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009572:	429a      	cmp	r2, r3
 8009574:	d901      	bls.n	800957a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8009576:	2300      	movs	r3, #0
 8009578:	e018      	b.n	80095ac <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800957a:	6a3b      	ldr	r3, [r7, #32]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d007      	beq.n	8009590 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009580:	8a7b      	ldrh	r3, [r7, #18]
 8009582:	3303      	adds	r3, #3
 8009584:	f023 0303 	bic.w	r3, r3, #3
 8009588:	6a3a      	ldr	r2, [r7, #32]
 800958a:	4413      	add	r3, r2
 800958c:	617b      	str	r3, [r7, #20]
 800958e:	e001      	b.n	8009594 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8009590:	2300      	movs	r3, #0
 8009592:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	89b9      	ldrh	r1, [r7, #12]
 8009598:	89ba      	ldrh	r2, [r7, #12]
 800959a:	2302      	movs	r3, #2
 800959c:	9301      	str	r3, [sp, #4]
 800959e:	897b      	ldrh	r3, [r7, #10]
 80095a0:	9300      	str	r3, [sp, #0]
 80095a2:	460b      	mov	r3, r1
 80095a4:	6979      	ldr	r1, [r7, #20]
 80095a6:	f7ff fe7d 	bl	80092a4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80095aa:	687b      	ldr	r3, [r7, #4]
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3718      	adds	r7, #24
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b084      	sub	sp, #16
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	460b      	mov	r3, r1
 80095be:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d106      	bne.n	80095d4 <pbuf_realloc+0x20>
 80095c6:	4b3a      	ldr	r3, [pc, #232]	; (80096b0 <pbuf_realloc+0xfc>)
 80095c8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80095cc:	4939      	ldr	r1, [pc, #228]	; (80096b4 <pbuf_realloc+0x100>)
 80095ce:	483a      	ldr	r0, [pc, #232]	; (80096b8 <pbuf_realloc+0x104>)
 80095d0:	f009 fb28 	bl	8012c24 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	891b      	ldrh	r3, [r3, #8]
 80095d8:	887a      	ldrh	r2, [r7, #2]
 80095da:	429a      	cmp	r2, r3
 80095dc:	d263      	bcs.n	80096a6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	891a      	ldrh	r2, [r3, #8]
 80095e2:	887b      	ldrh	r3, [r7, #2]
 80095e4:	1ad3      	subs	r3, r2, r3
 80095e6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80095e8:	887b      	ldrh	r3, [r7, #2]
 80095ea:	817b      	strh	r3, [r7, #10]
  q = p;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80095f0:	e018      	b.n	8009624 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	895b      	ldrh	r3, [r3, #10]
 80095f6:	897a      	ldrh	r2, [r7, #10]
 80095f8:	1ad3      	subs	r3, r2, r3
 80095fa:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	891a      	ldrh	r2, [r3, #8]
 8009600:	893b      	ldrh	r3, [r7, #8]
 8009602:	1ad3      	subs	r3, r2, r3
 8009604:	b29a      	uxth	r2, r3
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d106      	bne.n	8009624 <pbuf_realloc+0x70>
 8009616:	4b26      	ldr	r3, [pc, #152]	; (80096b0 <pbuf_realloc+0xfc>)
 8009618:	f240 12af 	movw	r2, #431	; 0x1af
 800961c:	4927      	ldr	r1, [pc, #156]	; (80096bc <pbuf_realloc+0x108>)
 800961e:	4826      	ldr	r0, [pc, #152]	; (80096b8 <pbuf_realloc+0x104>)
 8009620:	f009 fb00 	bl	8012c24 <iprintf>
  while (rem_len > q->len) {
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	895b      	ldrh	r3, [r3, #10]
 8009628:	897a      	ldrh	r2, [r7, #10]
 800962a:	429a      	cmp	r2, r3
 800962c:	d8e1      	bhi.n	80095f2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	7b1b      	ldrb	r3, [r3, #12]
 8009632:	f003 030f 	and.w	r3, r3, #15
 8009636:	2b00      	cmp	r3, #0
 8009638:	d121      	bne.n	800967e <pbuf_realloc+0xca>
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	895b      	ldrh	r3, [r3, #10]
 800963e:	897a      	ldrh	r2, [r7, #10]
 8009640:	429a      	cmp	r2, r3
 8009642:	d01c      	beq.n	800967e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	7b5b      	ldrb	r3, [r3, #13]
 8009648:	f003 0302 	and.w	r3, r3, #2
 800964c:	2b00      	cmp	r3, #0
 800964e:	d116      	bne.n	800967e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	685a      	ldr	r2, [r3, #4]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	1ad3      	subs	r3, r2, r3
 8009658:	b29a      	uxth	r2, r3
 800965a:	897b      	ldrh	r3, [r7, #10]
 800965c:	4413      	add	r3, r2
 800965e:	b29b      	uxth	r3, r3
 8009660:	4619      	mov	r1, r3
 8009662:	68f8      	ldr	r0, [r7, #12]
 8009664:	f7fe ffba 	bl	80085dc <mem_trim>
 8009668:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d106      	bne.n	800967e <pbuf_realloc+0xca>
 8009670:	4b0f      	ldr	r3, [pc, #60]	; (80096b0 <pbuf_realloc+0xfc>)
 8009672:	f240 12bd 	movw	r2, #445	; 0x1bd
 8009676:	4912      	ldr	r1, [pc, #72]	; (80096c0 <pbuf_realloc+0x10c>)
 8009678:	480f      	ldr	r0, [pc, #60]	; (80096b8 <pbuf_realloc+0x104>)
 800967a:	f009 fad3 	bl	8012c24 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	897a      	ldrh	r2, [r7, #10]
 8009682:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	895a      	ldrh	r2, [r3, #10]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d004      	beq.n	800969e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4618      	mov	r0, r3
 800969a:	f000 f911 	bl	80098c0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2200      	movs	r2, #0
 80096a2:	601a      	str	r2, [r3, #0]
 80096a4:	e000      	b.n	80096a8 <pbuf_realloc+0xf4>
    return;
 80096a6:	bf00      	nop

}
 80096a8:	3710      	adds	r7, #16
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	080142fc 	.word	0x080142fc
 80096b4:	08014414 	.word	0x08014414
 80096b8:	0801435c 	.word	0x0801435c
 80096bc:	0801442c 	.word	0x0801442c
 80096c0:	08014444 	.word	0x08014444

080096c4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b086      	sub	sp, #24
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	4613      	mov	r3, r2
 80096d0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d106      	bne.n	80096e6 <pbuf_add_header_impl+0x22>
 80096d8:	4b2b      	ldr	r3, [pc, #172]	; (8009788 <pbuf_add_header_impl+0xc4>)
 80096da:	f240 12df 	movw	r2, #479	; 0x1df
 80096de:	492b      	ldr	r1, [pc, #172]	; (800978c <pbuf_add_header_impl+0xc8>)
 80096e0:	482b      	ldr	r0, [pc, #172]	; (8009790 <pbuf_add_header_impl+0xcc>)
 80096e2:	f009 fa9f 	bl	8012c24 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d003      	beq.n	80096f4 <pbuf_add_header_impl+0x30>
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096f2:	d301      	bcc.n	80096f8 <pbuf_add_header_impl+0x34>
    return 1;
 80096f4:	2301      	movs	r3, #1
 80096f6:	e043      	b.n	8009780 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d101      	bne.n	8009702 <pbuf_add_header_impl+0x3e>
    return 0;
 80096fe:	2300      	movs	r3, #0
 8009700:	e03e      	b.n	8009780 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	891a      	ldrh	r2, [r3, #8]
 800970a:	8a7b      	ldrh	r3, [r7, #18]
 800970c:	4413      	add	r3, r2
 800970e:	b29b      	uxth	r3, r3
 8009710:	8a7a      	ldrh	r2, [r7, #18]
 8009712:	429a      	cmp	r2, r3
 8009714:	d901      	bls.n	800971a <pbuf_add_header_impl+0x56>
    return 1;
 8009716:	2301      	movs	r3, #1
 8009718:	e032      	b.n	8009780 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	7b1b      	ldrb	r3, [r3, #12]
 800971e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8009720:	8a3b      	ldrh	r3, [r7, #16]
 8009722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00c      	beq.n	8009744 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	685a      	ldr	r2, [r3, #4]
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	425b      	negs	r3, r3
 8009732:	4413      	add	r3, r2
 8009734:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	3310      	adds	r3, #16
 800973a:	697a      	ldr	r2, [r7, #20]
 800973c:	429a      	cmp	r2, r3
 800973e:	d20d      	bcs.n	800975c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8009740:	2301      	movs	r3, #1
 8009742:	e01d      	b.n	8009780 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8009744:	79fb      	ldrb	r3, [r7, #7]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d006      	beq.n	8009758 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	685a      	ldr	r2, [r3, #4]
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	425b      	negs	r3, r3
 8009752:	4413      	add	r3, r2
 8009754:	617b      	str	r3, [r7, #20]
 8009756:	e001      	b.n	800975c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009758:	2301      	movs	r3, #1
 800975a:	e011      	b.n	8009780 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	697a      	ldr	r2, [r7, #20]
 8009760:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	895a      	ldrh	r2, [r3, #10]
 8009766:	8a7b      	ldrh	r3, [r7, #18]
 8009768:	4413      	add	r3, r2
 800976a:	b29a      	uxth	r2, r3
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	891a      	ldrh	r2, [r3, #8]
 8009774:	8a7b      	ldrh	r3, [r7, #18]
 8009776:	4413      	add	r3, r2
 8009778:	b29a      	uxth	r2, r3
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	811a      	strh	r2, [r3, #8]


  return 0;
 800977e:	2300      	movs	r3, #0
}
 8009780:	4618      	mov	r0, r3
 8009782:	3718      	adds	r7, #24
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}
 8009788:	080142fc 	.word	0x080142fc
 800978c:	08014460 	.word	0x08014460
 8009790:	0801435c 	.word	0x0801435c

08009794 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800979e:	2200      	movs	r2, #0
 80097a0:	6839      	ldr	r1, [r7, #0]
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f7ff ff8e 	bl	80096c4 <pbuf_add_header_impl>
 80097a8:	4603      	mov	r3, r0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3708      	adds	r7, #8
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
	...

080097b4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d106      	bne.n	80097d2 <pbuf_remove_header+0x1e>
 80097c4:	4b20      	ldr	r3, [pc, #128]	; (8009848 <pbuf_remove_header+0x94>)
 80097c6:	f240 224b 	movw	r2, #587	; 0x24b
 80097ca:	4920      	ldr	r1, [pc, #128]	; (800984c <pbuf_remove_header+0x98>)
 80097cc:	4820      	ldr	r0, [pc, #128]	; (8009850 <pbuf_remove_header+0x9c>)
 80097ce:	f009 fa29 	bl	8012c24 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d003      	beq.n	80097e0 <pbuf_remove_header+0x2c>
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097de:	d301      	bcc.n	80097e4 <pbuf_remove_header+0x30>
    return 1;
 80097e0:	2301      	movs	r3, #1
 80097e2:	e02c      	b.n	800983e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d101      	bne.n	80097ee <pbuf_remove_header+0x3a>
    return 0;
 80097ea:	2300      	movs	r3, #0
 80097ec:	e027      	b.n	800983e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	895b      	ldrh	r3, [r3, #10]
 80097f6:	89fa      	ldrh	r2, [r7, #14]
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d908      	bls.n	800980e <pbuf_remove_header+0x5a>
 80097fc:	4b12      	ldr	r3, [pc, #72]	; (8009848 <pbuf_remove_header+0x94>)
 80097fe:	f240 2255 	movw	r2, #597	; 0x255
 8009802:	4914      	ldr	r1, [pc, #80]	; (8009854 <pbuf_remove_header+0xa0>)
 8009804:	4812      	ldr	r0, [pc, #72]	; (8009850 <pbuf_remove_header+0x9c>)
 8009806:	f009 fa0d 	bl	8012c24 <iprintf>
 800980a:	2301      	movs	r3, #1
 800980c:	e017      	b.n	800983e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	685a      	ldr	r2, [r3, #4]
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	441a      	add	r2, r3
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	895a      	ldrh	r2, [r3, #10]
 8009824:	89fb      	ldrh	r3, [r7, #14]
 8009826:	1ad3      	subs	r3, r2, r3
 8009828:	b29a      	uxth	r2, r3
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	891a      	ldrh	r2, [r3, #8]
 8009832:	89fb      	ldrh	r3, [r7, #14]
 8009834:	1ad3      	subs	r3, r2, r3
 8009836:	b29a      	uxth	r2, r3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	080142fc 	.word	0x080142fc
 800984c:	08014460 	.word	0x08014460
 8009850:	0801435c 	.word	0x0801435c
 8009854:	0801446c 	.word	0x0801446c

08009858 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	460b      	mov	r3, r1
 8009862:	807b      	strh	r3, [r7, #2]
 8009864:	4613      	mov	r3, r2
 8009866:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8009868:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800986c:	2b00      	cmp	r3, #0
 800986e:	da08      	bge.n	8009882 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8009870:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009874:	425b      	negs	r3, r3
 8009876:	4619      	mov	r1, r3
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f7ff ff9b 	bl	80097b4 <pbuf_remove_header>
 800987e:	4603      	mov	r3, r0
 8009880:	e007      	b.n	8009892 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8009882:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009886:	787a      	ldrb	r2, [r7, #1]
 8009888:	4619      	mov	r1, r3
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f7ff ff1a 	bl	80096c4 <pbuf_add_header_impl>
 8009890:	4603      	mov	r3, r0
  }
}
 8009892:	4618      	mov	r0, r3
 8009894:	3708      	adds	r7, #8
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800989a:	b580      	push	{r7, lr}
 800989c:	b082      	sub	sp, #8
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
 80098a2:	460b      	mov	r3, r1
 80098a4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80098a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80098aa:	2201      	movs	r2, #1
 80098ac:	4619      	mov	r1, r3
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f7ff ffd2 	bl	8009858 <pbuf_header_impl>
 80098b4:	4603      	mov	r3, r0
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3708      	adds	r7, #8
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
	...

080098c0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b086      	sub	sp, #24
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d10b      	bne.n	80098e6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d106      	bne.n	80098e2 <pbuf_free+0x22>
 80098d4:	4b38      	ldr	r3, [pc, #224]	; (80099b8 <pbuf_free+0xf8>)
 80098d6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80098da:	4938      	ldr	r1, [pc, #224]	; (80099bc <pbuf_free+0xfc>)
 80098dc:	4838      	ldr	r0, [pc, #224]	; (80099c0 <pbuf_free+0x100>)
 80098de:	f009 f9a1 	bl	8012c24 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80098e2:	2300      	movs	r3, #0
 80098e4:	e063      	b.n	80099ae <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80098e6:	2300      	movs	r3, #0
 80098e8:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80098ea:	e05c      	b.n	80099a6 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	7b9b      	ldrb	r3, [r3, #14]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d106      	bne.n	8009902 <pbuf_free+0x42>
 80098f4:	4b30      	ldr	r3, [pc, #192]	; (80099b8 <pbuf_free+0xf8>)
 80098f6:	f240 22f1 	movw	r2, #753	; 0x2f1
 80098fa:	4932      	ldr	r1, [pc, #200]	; (80099c4 <pbuf_free+0x104>)
 80098fc:	4830      	ldr	r0, [pc, #192]	; (80099c0 <pbuf_free+0x100>)
 80098fe:	f009 f991 	bl	8012c24 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	7b9b      	ldrb	r3, [r3, #14]
 8009906:	3b01      	subs	r3, #1
 8009908:	b2da      	uxtb	r2, r3
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	739a      	strb	r2, [r3, #14]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	7b9b      	ldrb	r3, [r3, #14]
 8009912:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8009914:	7dbb      	ldrb	r3, [r7, #22]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d143      	bne.n	80099a2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	7b1b      	ldrb	r3, [r3, #12]
 8009924:	f003 030f 	and.w	r3, r3, #15
 8009928:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	7b5b      	ldrb	r3, [r3, #13]
 800992e:	f003 0302 	and.w	r3, r3, #2
 8009932:	2b00      	cmp	r3, #0
 8009934:	d011      	beq.n	800995a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	691b      	ldr	r3, [r3, #16]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d106      	bne.n	8009950 <pbuf_free+0x90>
 8009942:	4b1d      	ldr	r3, [pc, #116]	; (80099b8 <pbuf_free+0xf8>)
 8009944:	f240 22ff 	movw	r2, #767	; 0x2ff
 8009948:	491f      	ldr	r1, [pc, #124]	; (80099c8 <pbuf_free+0x108>)
 800994a:	481d      	ldr	r0, [pc, #116]	; (80099c0 <pbuf_free+0x100>)
 800994c:	f009 f96a 	bl	8012c24 <iprintf>
        pc->custom_free_function(p);
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	691b      	ldr	r3, [r3, #16]
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	4798      	blx	r3
 8009958:	e01d      	b.n	8009996 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800995a:	7bfb      	ldrb	r3, [r7, #15]
 800995c:	2b02      	cmp	r3, #2
 800995e:	d104      	bne.n	800996a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8009960:	6879      	ldr	r1, [r7, #4]
 8009962:	2008      	movs	r0, #8
 8009964:	f7ff f936 	bl	8008bd4 <memp_free>
 8009968:	e015      	b.n	8009996 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800996a:	7bfb      	ldrb	r3, [r7, #15]
 800996c:	2b01      	cmp	r3, #1
 800996e:	d104      	bne.n	800997a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8009970:	6879      	ldr	r1, [r7, #4]
 8009972:	2007      	movs	r0, #7
 8009974:	f7ff f92e 	bl	8008bd4 <memp_free>
 8009978:	e00d      	b.n	8009996 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800997a:	7bfb      	ldrb	r3, [r7, #15]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d103      	bne.n	8009988 <pbuf_free+0xc8>
          mem_free(p);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f7fe fdc1 	bl	8008508 <mem_free>
 8009986:	e006      	b.n	8009996 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8009988:	4b0b      	ldr	r3, [pc, #44]	; (80099b8 <pbuf_free+0xf8>)
 800998a:	f240 320f 	movw	r2, #783	; 0x30f
 800998e:	490f      	ldr	r1, [pc, #60]	; (80099cc <pbuf_free+0x10c>)
 8009990:	480b      	ldr	r0, [pc, #44]	; (80099c0 <pbuf_free+0x100>)
 8009992:	f009 f947 	bl	8012c24 <iprintf>
        }
      }
      count++;
 8009996:	7dfb      	ldrb	r3, [r7, #23]
 8009998:	3301      	adds	r3, #1
 800999a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	607b      	str	r3, [r7, #4]
 80099a0:	e001      	b.n	80099a6 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80099a2:	2300      	movs	r3, #0
 80099a4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d19f      	bne.n	80098ec <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80099ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3718      	adds	r7, #24
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	080142fc 	.word	0x080142fc
 80099bc:	08014460 	.word	0x08014460
 80099c0:	0801435c 	.word	0x0801435c
 80099c4:	0801448c 	.word	0x0801448c
 80099c8:	080144a4 	.word	0x080144a4
 80099cc:	080144c8 	.word	0x080144c8

080099d0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b085      	sub	sp, #20
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80099d8:	2300      	movs	r3, #0
 80099da:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80099dc:	e005      	b.n	80099ea <pbuf_clen+0x1a>
    ++len;
 80099de:	89fb      	ldrh	r3, [r7, #14]
 80099e0:	3301      	adds	r3, #1
 80099e2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d1f6      	bne.n	80099de <pbuf_clen+0xe>
  }
  return len;
 80099f0:	89fb      	ldrh	r3, [r7, #14]
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3714      	adds	r7, #20
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr
	...

08009a00 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b082      	sub	sp, #8
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d010      	beq.n	8009a30 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	7b9b      	ldrb	r3, [r3, #14]
 8009a12:	3301      	adds	r3, #1
 8009a14:	b2da      	uxtb	r2, r3
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	7b9b      	ldrb	r3, [r3, #14]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d106      	bne.n	8009a30 <pbuf_ref+0x30>
 8009a22:	4b05      	ldr	r3, [pc, #20]	; (8009a38 <pbuf_ref+0x38>)
 8009a24:	f240 3242 	movw	r2, #834	; 0x342
 8009a28:	4904      	ldr	r1, [pc, #16]	; (8009a3c <pbuf_ref+0x3c>)
 8009a2a:	4805      	ldr	r0, [pc, #20]	; (8009a40 <pbuf_ref+0x40>)
 8009a2c:	f009 f8fa 	bl	8012c24 <iprintf>
  }
}
 8009a30:	bf00      	nop
 8009a32:	3708      	adds	r7, #8
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}
 8009a38:	080142fc 	.word	0x080142fc
 8009a3c:	080144dc 	.word	0x080144dc
 8009a40:	0801435c 	.word	0x0801435c

08009a44 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d002      	beq.n	8009a5a <pbuf_cat+0x16>
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d107      	bne.n	8009a6a <pbuf_cat+0x26>
 8009a5a:	4b20      	ldr	r3, [pc, #128]	; (8009adc <pbuf_cat+0x98>)
 8009a5c:	f240 3259 	movw	r2, #857	; 0x359
 8009a60:	491f      	ldr	r1, [pc, #124]	; (8009ae0 <pbuf_cat+0x9c>)
 8009a62:	4820      	ldr	r0, [pc, #128]	; (8009ae4 <pbuf_cat+0xa0>)
 8009a64:	f009 f8de 	bl	8012c24 <iprintf>
 8009a68:	e034      	b.n	8009ad4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	60fb      	str	r3, [r7, #12]
 8009a6e:	e00a      	b.n	8009a86 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	891a      	ldrh	r2, [r3, #8]
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	891b      	ldrh	r3, [r3, #8]
 8009a78:	4413      	add	r3, r2
 8009a7a:	b29a      	uxth	r2, r3
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	60fb      	str	r3, [r7, #12]
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d1f0      	bne.n	8009a70 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	891a      	ldrh	r2, [r3, #8]
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	895b      	ldrh	r3, [r3, #10]
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d006      	beq.n	8009aa8 <pbuf_cat+0x64>
 8009a9a:	4b10      	ldr	r3, [pc, #64]	; (8009adc <pbuf_cat+0x98>)
 8009a9c:	f240 3262 	movw	r2, #866	; 0x362
 8009aa0:	4911      	ldr	r1, [pc, #68]	; (8009ae8 <pbuf_cat+0xa4>)
 8009aa2:	4810      	ldr	r0, [pc, #64]	; (8009ae4 <pbuf_cat+0xa0>)
 8009aa4:	f009 f8be 	bl	8012c24 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d006      	beq.n	8009abe <pbuf_cat+0x7a>
 8009ab0:	4b0a      	ldr	r3, [pc, #40]	; (8009adc <pbuf_cat+0x98>)
 8009ab2:	f240 3263 	movw	r2, #867	; 0x363
 8009ab6:	490d      	ldr	r1, [pc, #52]	; (8009aec <pbuf_cat+0xa8>)
 8009ab8:	480a      	ldr	r0, [pc, #40]	; (8009ae4 <pbuf_cat+0xa0>)
 8009aba:	f009 f8b3 	bl	8012c24 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	891a      	ldrh	r2, [r3, #8]
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	891b      	ldrh	r3, [r3, #8]
 8009ac6:	4413      	add	r3, r2
 8009ac8:	b29a      	uxth	r2, r3
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	683a      	ldr	r2, [r7, #0]
 8009ad2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8009ad4:	3710      	adds	r7, #16
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	080142fc 	.word	0x080142fc
 8009ae0:	080144f0 	.word	0x080144f0
 8009ae4:	0801435c 	.word	0x0801435c
 8009ae8:	08014528 	.word	0x08014528
 8009aec:	08014558 	.word	0x08014558

08009af0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8009afa:	6839      	ldr	r1, [r7, #0]
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f7ff ffa1 	bl	8009a44 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8009b02:	6838      	ldr	r0, [r7, #0]
 8009b04:	f7ff ff7c 	bl	8009a00 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8009b08:	bf00      	nop
 8009b0a:	3708      	adds	r7, #8
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b086      	sub	sp, #24
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	617b      	str	r3, [r7, #20]
 8009b1e:	2300      	movs	r3, #0
 8009b20:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d008      	beq.n	8009b3a <pbuf_copy+0x2a>
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d005      	beq.n	8009b3a <pbuf_copy+0x2a>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	891a      	ldrh	r2, [r3, #8]
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	891b      	ldrh	r3, [r3, #8]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d209      	bcs.n	8009b4e <pbuf_copy+0x3e>
 8009b3a:	4b57      	ldr	r3, [pc, #348]	; (8009c98 <pbuf_copy+0x188>)
 8009b3c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8009b40:	4956      	ldr	r1, [pc, #344]	; (8009c9c <pbuf_copy+0x18c>)
 8009b42:	4857      	ldr	r0, [pc, #348]	; (8009ca0 <pbuf_copy+0x190>)
 8009b44:	f009 f86e 	bl	8012c24 <iprintf>
 8009b48:	f06f 030f 	mvn.w	r3, #15
 8009b4c:	e09f      	b.n	8009c8e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	895b      	ldrh	r3, [r3, #10]
 8009b52:	461a      	mov	r2, r3
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	1ad2      	subs	r2, r2, r3
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	895b      	ldrh	r3, [r3, #10]
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	1acb      	subs	r3, r1, r3
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d306      	bcc.n	8009b74 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	895b      	ldrh	r3, [r3, #10]
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	1ad3      	subs	r3, r2, r3
 8009b70:	60fb      	str	r3, [r7, #12]
 8009b72:	e005      	b.n	8009b80 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	895b      	ldrh	r3, [r3, #10]
 8009b78:	461a      	mov	r2, r3
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	1ad3      	subs	r3, r2, r3
 8009b7e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	685a      	ldr	r2, [r3, #4]
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	18d0      	adds	r0, r2, r3
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	685a      	ldr	r2, [r3, #4]
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	4413      	add	r3, r2
 8009b90:	68fa      	ldr	r2, [r7, #12]
 8009b92:	4619      	mov	r1, r3
 8009b94:	f009 f830 	bl	8012bf8 <memcpy>
    offset_to += len;
 8009b98:	697a      	ldr	r2, [r7, #20]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8009ba0:	693a      	ldr	r2, [r7, #16]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	4413      	add	r3, r2
 8009ba6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	895b      	ldrh	r3, [r3, #10]
 8009bac:	461a      	mov	r2, r3
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d906      	bls.n	8009bc2 <pbuf_copy+0xb2>
 8009bb4:	4b38      	ldr	r3, [pc, #224]	; (8009c98 <pbuf_copy+0x188>)
 8009bb6:	f240 32d9 	movw	r2, #985	; 0x3d9
 8009bba:	493a      	ldr	r1, [pc, #232]	; (8009ca4 <pbuf_copy+0x194>)
 8009bbc:	4838      	ldr	r0, [pc, #224]	; (8009ca0 <pbuf_copy+0x190>)
 8009bbe:	f009 f831 	bl	8012c24 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	895b      	ldrh	r3, [r3, #10]
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d906      	bls.n	8009bdc <pbuf_copy+0xcc>
 8009bce:	4b32      	ldr	r3, [pc, #200]	; (8009c98 <pbuf_copy+0x188>)
 8009bd0:	f240 32da 	movw	r2, #986	; 0x3da
 8009bd4:	4934      	ldr	r1, [pc, #208]	; (8009ca8 <pbuf_copy+0x198>)
 8009bd6:	4832      	ldr	r0, [pc, #200]	; (8009ca0 <pbuf_copy+0x190>)
 8009bd8:	f009 f824 	bl	8012c24 <iprintf>
    if (offset_from >= p_from->len) {
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	895b      	ldrh	r3, [r3, #10]
 8009be0:	461a      	mov	r2, r3
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d304      	bcc.n	8009bf2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8009be8:	2300      	movs	r3, #0
 8009bea:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	895b      	ldrh	r3, [r3, #10]
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d114      	bne.n	8009c28 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d10c      	bne.n	8009c28 <pbuf_copy+0x118>
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d009      	beq.n	8009c28 <pbuf_copy+0x118>
 8009c14:	4b20      	ldr	r3, [pc, #128]	; (8009c98 <pbuf_copy+0x188>)
 8009c16:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8009c1a:	4924      	ldr	r1, [pc, #144]	; (8009cac <pbuf_copy+0x19c>)
 8009c1c:	4820      	ldr	r0, [pc, #128]	; (8009ca0 <pbuf_copy+0x190>)
 8009c1e:	f009 f801 	bl	8012c24 <iprintf>
 8009c22:	f06f 030f 	mvn.w	r3, #15
 8009c26:	e032      	b.n	8009c8e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d013      	beq.n	8009c56 <pbuf_copy+0x146>
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	895a      	ldrh	r2, [r3, #10]
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	891b      	ldrh	r3, [r3, #8]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d10d      	bne.n	8009c56 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d009      	beq.n	8009c56 <pbuf_copy+0x146>
 8009c42:	4b15      	ldr	r3, [pc, #84]	; (8009c98 <pbuf_copy+0x188>)
 8009c44:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8009c48:	4919      	ldr	r1, [pc, #100]	; (8009cb0 <pbuf_copy+0x1a0>)
 8009c4a:	4815      	ldr	r0, [pc, #84]	; (8009ca0 <pbuf_copy+0x190>)
 8009c4c:	f008 ffea 	bl	8012c24 <iprintf>
 8009c50:	f06f 0305 	mvn.w	r3, #5
 8009c54:	e01b      	b.n	8009c8e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d013      	beq.n	8009c84 <pbuf_copy+0x174>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	895a      	ldrh	r2, [r3, #10]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	891b      	ldrh	r3, [r3, #8]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d10d      	bne.n	8009c84 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d009      	beq.n	8009c84 <pbuf_copy+0x174>
 8009c70:	4b09      	ldr	r3, [pc, #36]	; (8009c98 <pbuf_copy+0x188>)
 8009c72:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8009c76:	490e      	ldr	r1, [pc, #56]	; (8009cb0 <pbuf_copy+0x1a0>)
 8009c78:	4809      	ldr	r0, [pc, #36]	; (8009ca0 <pbuf_copy+0x190>)
 8009c7a:	f008 ffd3 	bl	8012c24 <iprintf>
 8009c7e:	f06f 0305 	mvn.w	r3, #5
 8009c82:	e004      	b.n	8009c8e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	f47f af61 	bne.w	8009b4e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8009c8c:	2300      	movs	r3, #0
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3718      	adds	r7, #24
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	080142fc 	.word	0x080142fc
 8009c9c:	080145a4 	.word	0x080145a4
 8009ca0:	0801435c 	.word	0x0801435c
 8009ca4:	080145d4 	.word	0x080145d4
 8009ca8:	080145ec 	.word	0x080145ec
 8009cac:	08014608 	.word	0x08014608
 8009cb0:	08014618 	.word	0x08014618

08009cb4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b088      	sub	sp, #32
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	60f8      	str	r0, [r7, #12]
 8009cbc:	60b9      	str	r1, [r7, #8]
 8009cbe:	4611      	mov	r1, r2
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	80fb      	strh	r3, [r7, #6]
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d108      	bne.n	8009cea <pbuf_copy_partial+0x36>
 8009cd8:	4b2b      	ldr	r3, [pc, #172]	; (8009d88 <pbuf_copy_partial+0xd4>)
 8009cda:	f240 420a 	movw	r2, #1034	; 0x40a
 8009cde:	492b      	ldr	r1, [pc, #172]	; (8009d8c <pbuf_copy_partial+0xd8>)
 8009ce0:	482b      	ldr	r0, [pc, #172]	; (8009d90 <pbuf_copy_partial+0xdc>)
 8009ce2:	f008 ff9f 	bl	8012c24 <iprintf>
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	e04a      	b.n	8009d80 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d108      	bne.n	8009d02 <pbuf_copy_partial+0x4e>
 8009cf0:	4b25      	ldr	r3, [pc, #148]	; (8009d88 <pbuf_copy_partial+0xd4>)
 8009cf2:	f240 420b 	movw	r2, #1035	; 0x40b
 8009cf6:	4927      	ldr	r1, [pc, #156]	; (8009d94 <pbuf_copy_partial+0xe0>)
 8009cf8:	4825      	ldr	r0, [pc, #148]	; (8009d90 <pbuf_copy_partial+0xdc>)
 8009cfa:	f008 ff93 	bl	8012c24 <iprintf>
 8009cfe:	2300      	movs	r3, #0
 8009d00:	e03e      	b.n	8009d80 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	61fb      	str	r3, [r7, #28]
 8009d06:	e034      	b.n	8009d72 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8009d08:	88bb      	ldrh	r3, [r7, #4]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00a      	beq.n	8009d24 <pbuf_copy_partial+0x70>
 8009d0e:	69fb      	ldr	r3, [r7, #28]
 8009d10:	895b      	ldrh	r3, [r3, #10]
 8009d12:	88ba      	ldrh	r2, [r7, #4]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d305      	bcc.n	8009d24 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8009d18:	69fb      	ldr	r3, [r7, #28]
 8009d1a:	895b      	ldrh	r3, [r3, #10]
 8009d1c:	88ba      	ldrh	r2, [r7, #4]
 8009d1e:	1ad3      	subs	r3, r2, r3
 8009d20:	80bb      	strh	r3, [r7, #4]
 8009d22:	e023      	b.n	8009d6c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8009d24:	69fb      	ldr	r3, [r7, #28]
 8009d26:	895a      	ldrh	r2, [r3, #10]
 8009d28:	88bb      	ldrh	r3, [r7, #4]
 8009d2a:	1ad3      	subs	r3, r2, r3
 8009d2c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8009d2e:	8b3a      	ldrh	r2, [r7, #24]
 8009d30:	88fb      	ldrh	r3, [r7, #6]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d901      	bls.n	8009d3a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8009d36:	88fb      	ldrh	r3, [r7, #6]
 8009d38:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8009d3a:	8b7b      	ldrh	r3, [r7, #26]
 8009d3c:	68ba      	ldr	r2, [r7, #8]
 8009d3e:	18d0      	adds	r0, r2, r3
 8009d40:	69fb      	ldr	r3, [r7, #28]
 8009d42:	685a      	ldr	r2, [r3, #4]
 8009d44:	88bb      	ldrh	r3, [r7, #4]
 8009d46:	4413      	add	r3, r2
 8009d48:	8b3a      	ldrh	r2, [r7, #24]
 8009d4a:	4619      	mov	r1, r3
 8009d4c:	f008 ff54 	bl	8012bf8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8009d50:	8afa      	ldrh	r2, [r7, #22]
 8009d52:	8b3b      	ldrh	r3, [r7, #24]
 8009d54:	4413      	add	r3, r2
 8009d56:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8009d58:	8b7a      	ldrh	r2, [r7, #26]
 8009d5a:	8b3b      	ldrh	r3, [r7, #24]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8009d60:	88fa      	ldrh	r2, [r7, #6]
 8009d62:	8b3b      	ldrh	r3, [r7, #24]
 8009d64:	1ad3      	subs	r3, r2, r3
 8009d66:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	61fb      	str	r3, [r7, #28]
 8009d72:	88fb      	ldrh	r3, [r7, #6]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d002      	beq.n	8009d7e <pbuf_copy_partial+0xca>
 8009d78:	69fb      	ldr	r3, [r7, #28]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d1c4      	bne.n	8009d08 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8009d7e:	8afb      	ldrh	r3, [r7, #22]
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3720      	adds	r7, #32
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	080142fc 	.word	0x080142fc
 8009d8c:	08014644 	.word	0x08014644
 8009d90:	0801435c 	.word	0x0801435c
 8009d94:	08014664 	.word	0x08014664

08009d98 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	4603      	mov	r3, r0
 8009da0:	603a      	str	r2, [r7, #0]
 8009da2:	71fb      	strb	r3, [r7, #7]
 8009da4:	460b      	mov	r3, r1
 8009da6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	8919      	ldrh	r1, [r3, #8]
 8009dac:	88ba      	ldrh	r2, [r7, #4]
 8009dae:	79fb      	ldrb	r3, [r7, #7]
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7ff faa1 	bl	80092f8 <pbuf_alloc>
 8009db6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d101      	bne.n	8009dc2 <pbuf_clone+0x2a>
    return NULL;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	e011      	b.n	8009de6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8009dc2:	6839      	ldr	r1, [r7, #0]
 8009dc4:	68f8      	ldr	r0, [r7, #12]
 8009dc6:	f7ff fea3 	bl	8009b10 <pbuf_copy>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8009dce:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d006      	beq.n	8009de4 <pbuf_clone+0x4c>
 8009dd6:	4b06      	ldr	r3, [pc, #24]	; (8009df0 <pbuf_clone+0x58>)
 8009dd8:	f240 5224 	movw	r2, #1316	; 0x524
 8009ddc:	4905      	ldr	r1, [pc, #20]	; (8009df4 <pbuf_clone+0x5c>)
 8009dde:	4806      	ldr	r0, [pc, #24]	; (8009df8 <pbuf_clone+0x60>)
 8009de0:	f008 ff20 	bl	8012c24 <iprintf>
  return q;
 8009de4:	68fb      	ldr	r3, [r7, #12]
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3710      	adds	r7, #16
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	080142fc 	.word	0x080142fc
 8009df4:	08014770 	.word	0x08014770
 8009df8:	0801435c 	.word	0x0801435c

08009dfc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8009e00:	f008 ff28 	bl	8012c54 <rand>
 8009e04:	4603      	mov	r3, r0
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8009e12:	b29a      	uxth	r2, r3
 8009e14:	4b01      	ldr	r3, [pc, #4]	; (8009e1c <tcp_init+0x20>)
 8009e16:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8009e18:	bf00      	nop
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	24000024 	.word	0x24000024

08009e20 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	7d1b      	ldrb	r3, [r3, #20]
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d105      	bne.n	8009e3c <tcp_free+0x1c>
 8009e30:	4b06      	ldr	r3, [pc, #24]	; (8009e4c <tcp_free+0x2c>)
 8009e32:	22d4      	movs	r2, #212	; 0xd4
 8009e34:	4906      	ldr	r1, [pc, #24]	; (8009e50 <tcp_free+0x30>)
 8009e36:	4807      	ldr	r0, [pc, #28]	; (8009e54 <tcp_free+0x34>)
 8009e38:	f008 fef4 	bl	8012c24 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8009e3c:	6879      	ldr	r1, [r7, #4]
 8009e3e:	2001      	movs	r0, #1
 8009e40:	f7fe fec8 	bl	8008bd4 <memp_free>
}
 8009e44:	bf00      	nop
 8009e46:	3708      	adds	r7, #8
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	080147fc 	.word	0x080147fc
 8009e50:	0801482c 	.word	0x0801482c
 8009e54:	08014840 	.word	0x08014840

08009e58 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	7d1b      	ldrb	r3, [r3, #20]
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d105      	bne.n	8009e74 <tcp_free_listen+0x1c>
 8009e68:	4b06      	ldr	r3, [pc, #24]	; (8009e84 <tcp_free_listen+0x2c>)
 8009e6a:	22df      	movs	r2, #223	; 0xdf
 8009e6c:	4906      	ldr	r1, [pc, #24]	; (8009e88 <tcp_free_listen+0x30>)
 8009e6e:	4807      	ldr	r0, [pc, #28]	; (8009e8c <tcp_free_listen+0x34>)
 8009e70:	f008 fed8 	bl	8012c24 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009e74:	6879      	ldr	r1, [r7, #4]
 8009e76:	2002      	movs	r0, #2
 8009e78:	f7fe feac 	bl	8008bd4 <memp_free>
}
 8009e7c:	bf00      	nop
 8009e7e:	3708      	adds	r7, #8
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}
 8009e84:	080147fc 	.word	0x080147fc
 8009e88:	08014868 	.word	0x08014868
 8009e8c:	08014840 	.word	0x08014840

08009e90 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8009e94:	f001 f85c 	bl	800af50 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8009e98:	4b07      	ldr	r3, [pc, #28]	; (8009eb8 <tcp_tmr+0x28>)
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	b2da      	uxtb	r2, r3
 8009ea0:	4b05      	ldr	r3, [pc, #20]	; (8009eb8 <tcp_tmr+0x28>)
 8009ea2:	701a      	strb	r2, [r3, #0]
 8009ea4:	4b04      	ldr	r3, [pc, #16]	; (8009eb8 <tcp_tmr+0x28>)
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	f003 0301 	and.w	r3, r3, #1
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d001      	beq.n	8009eb4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8009eb0:	f000 fd0e 	bl	800a8d0 <tcp_slowtmr>
  }
}
 8009eb4:	bf00      	nop
 8009eb6:	bd80      	pop	{r7, pc}
 8009eb8:	240000e9 	.word	0x240000e9

08009ebc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d105      	bne.n	8009ed8 <tcp_remove_listener+0x1c>
 8009ecc:	4b0d      	ldr	r3, [pc, #52]	; (8009f04 <tcp_remove_listener+0x48>)
 8009ece:	22ff      	movs	r2, #255	; 0xff
 8009ed0:	490d      	ldr	r1, [pc, #52]	; (8009f08 <tcp_remove_listener+0x4c>)
 8009ed2:	480e      	ldr	r0, [pc, #56]	; (8009f0c <tcp_remove_listener+0x50>)
 8009ed4:	f008 fea6 	bl	8012c24 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	60fb      	str	r3, [r7, #12]
 8009edc:	e00a      	b.n	8009ef4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ee2:	683a      	ldr	r2, [r7, #0]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d102      	bne.n	8009eee <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2200      	movs	r2, #0
 8009eec:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	68db      	ldr	r3, [r3, #12]
 8009ef2:	60fb      	str	r3, [r7, #12]
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d1f1      	bne.n	8009ede <tcp_remove_listener+0x22>
    }
  }
}
 8009efa:	bf00      	nop
 8009efc:	bf00      	nop
 8009efe:	3710      	adds	r7, #16
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	080147fc 	.word	0x080147fc
 8009f08:	08014884 	.word	0x08014884
 8009f0c:	08014840 	.word	0x08014840

08009f10 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d106      	bne.n	8009f2c <tcp_listen_closed+0x1c>
 8009f1e:	4b14      	ldr	r3, [pc, #80]	; (8009f70 <tcp_listen_closed+0x60>)
 8009f20:	f240 1211 	movw	r2, #273	; 0x111
 8009f24:	4913      	ldr	r1, [pc, #76]	; (8009f74 <tcp_listen_closed+0x64>)
 8009f26:	4814      	ldr	r0, [pc, #80]	; (8009f78 <tcp_listen_closed+0x68>)
 8009f28:	f008 fe7c 	bl	8012c24 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	7d1b      	ldrb	r3, [r3, #20]
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d006      	beq.n	8009f42 <tcp_listen_closed+0x32>
 8009f34:	4b0e      	ldr	r3, [pc, #56]	; (8009f70 <tcp_listen_closed+0x60>)
 8009f36:	f44f 7289 	mov.w	r2, #274	; 0x112
 8009f3a:	4910      	ldr	r1, [pc, #64]	; (8009f7c <tcp_listen_closed+0x6c>)
 8009f3c:	480e      	ldr	r0, [pc, #56]	; (8009f78 <tcp_listen_closed+0x68>)
 8009f3e:	f008 fe71 	bl	8012c24 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009f42:	2301      	movs	r3, #1
 8009f44:	60fb      	str	r3, [r7, #12]
 8009f46:	e00b      	b.n	8009f60 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8009f48:	4a0d      	ldr	r2, [pc, #52]	; (8009f80 <tcp_listen_closed+0x70>)
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	6879      	ldr	r1, [r7, #4]
 8009f54:	4618      	mov	r0, r3
 8009f56:	f7ff ffb1 	bl	8009ebc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	60fb      	str	r3, [r7, #12]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2b03      	cmp	r3, #3
 8009f64:	d9f0      	bls.n	8009f48 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8009f66:	bf00      	nop
 8009f68:	bf00      	nop
 8009f6a:	3710      	adds	r7, #16
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	080147fc 	.word	0x080147fc
 8009f74:	080148ac 	.word	0x080148ac
 8009f78:	08014840 	.word	0x08014840
 8009f7c:	080148b8 	.word	0x080148b8
 8009f80:	080167fc 	.word	0x080167fc

08009f84 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8009f84:	b5b0      	push	{r4, r5, r7, lr}
 8009f86:	b088      	sub	sp, #32
 8009f88:	af04      	add	r7, sp, #16
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d106      	bne.n	8009fa4 <tcp_close_shutdown+0x20>
 8009f96:	4b63      	ldr	r3, [pc, #396]	; (800a124 <tcp_close_shutdown+0x1a0>)
 8009f98:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009f9c:	4962      	ldr	r1, [pc, #392]	; (800a128 <tcp_close_shutdown+0x1a4>)
 8009f9e:	4863      	ldr	r0, [pc, #396]	; (800a12c <tcp_close_shutdown+0x1a8>)
 8009fa0:	f008 fe40 	bl	8012c24 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009fa4:	78fb      	ldrb	r3, [r7, #3]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d066      	beq.n	800a078 <tcp_close_shutdown+0xf4>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	7d1b      	ldrb	r3, [r3, #20]
 8009fae:	2b04      	cmp	r3, #4
 8009fb0:	d003      	beq.n	8009fba <tcp_close_shutdown+0x36>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	7d1b      	ldrb	r3, [r3, #20]
 8009fb6:	2b07      	cmp	r3, #7
 8009fb8:	d15e      	bne.n	800a078 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d104      	bne.n	8009fcc <tcp_close_shutdown+0x48>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fc6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009fca:	d055      	beq.n	800a078 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	8b5b      	ldrh	r3, [r3, #26]
 8009fd0:	f003 0310 	and.w	r3, r3, #16
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d106      	bne.n	8009fe6 <tcp_close_shutdown+0x62>
 8009fd8:	4b52      	ldr	r3, [pc, #328]	; (800a124 <tcp_close_shutdown+0x1a0>)
 8009fda:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8009fde:	4954      	ldr	r1, [pc, #336]	; (800a130 <tcp_close_shutdown+0x1ac>)
 8009fe0:	4852      	ldr	r0, [pc, #328]	; (800a12c <tcp_close_shutdown+0x1a8>)
 8009fe2:	f008 fe1f 	bl	8012c24 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009fee:	687d      	ldr	r5, [r7, #4]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	3304      	adds	r3, #4
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	8ad2      	ldrh	r2, [r2, #22]
 8009ff8:	6879      	ldr	r1, [r7, #4]
 8009ffa:	8b09      	ldrh	r1, [r1, #24]
 8009ffc:	9102      	str	r1, [sp, #8]
 8009ffe:	9201      	str	r2, [sp, #4]
 800a000:	9300      	str	r3, [sp, #0]
 800a002:	462b      	mov	r3, r5
 800a004:	4622      	mov	r2, r4
 800a006:	4601      	mov	r1, r0
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f005 fd85 	bl	800fb18 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f001 fb66 	bl	800b6e0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a014:	4b47      	ldr	r3, [pc, #284]	; (800a134 <tcp_close_shutdown+0x1b0>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d105      	bne.n	800a02a <tcp_close_shutdown+0xa6>
 800a01e:	4b45      	ldr	r3, [pc, #276]	; (800a134 <tcp_close_shutdown+0x1b0>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	68db      	ldr	r3, [r3, #12]
 800a024:	4a43      	ldr	r2, [pc, #268]	; (800a134 <tcp_close_shutdown+0x1b0>)
 800a026:	6013      	str	r3, [r2, #0]
 800a028:	e013      	b.n	800a052 <tcp_close_shutdown+0xce>
 800a02a:	4b42      	ldr	r3, [pc, #264]	; (800a134 <tcp_close_shutdown+0x1b0>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	60fb      	str	r3, [r7, #12]
 800a030:	e00c      	b.n	800a04c <tcp_close_shutdown+0xc8>
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	68db      	ldr	r3, [r3, #12]
 800a036:	687a      	ldr	r2, [r7, #4]
 800a038:	429a      	cmp	r2, r3
 800a03a:	d104      	bne.n	800a046 <tcp_close_shutdown+0xc2>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	68da      	ldr	r2, [r3, #12]
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	60da      	str	r2, [r3, #12]
 800a044:	e005      	b.n	800a052 <tcp_close_shutdown+0xce>
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	68db      	ldr	r3, [r3, #12]
 800a04a:	60fb      	str	r3, [r7, #12]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d1ef      	bne.n	800a032 <tcp_close_shutdown+0xae>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	60da      	str	r2, [r3, #12]
 800a058:	4b37      	ldr	r3, [pc, #220]	; (800a138 <tcp_close_shutdown+0x1b4>)
 800a05a:	2201      	movs	r2, #1
 800a05c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800a05e:	4b37      	ldr	r3, [pc, #220]	; (800a13c <tcp_close_shutdown+0x1b8>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	429a      	cmp	r2, r3
 800a066:	d102      	bne.n	800a06e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800a068:	f003 fffa 	bl	800e060 <tcp_trigger_input_pcb_close>
 800a06c:	e002      	b.n	800a074 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f7ff fed6 	bl	8009e20 <tcp_free>
      }
      return ERR_OK;
 800a074:	2300      	movs	r3, #0
 800a076:	e050      	b.n	800a11a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	7d1b      	ldrb	r3, [r3, #20]
 800a07c:	2b02      	cmp	r3, #2
 800a07e:	d03b      	beq.n	800a0f8 <tcp_close_shutdown+0x174>
 800a080:	2b02      	cmp	r3, #2
 800a082:	dc44      	bgt.n	800a10e <tcp_close_shutdown+0x18a>
 800a084:	2b00      	cmp	r3, #0
 800a086:	d002      	beq.n	800a08e <tcp_close_shutdown+0x10a>
 800a088:	2b01      	cmp	r3, #1
 800a08a:	d02a      	beq.n	800a0e2 <tcp_close_shutdown+0x15e>
 800a08c:	e03f      	b.n	800a10e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	8adb      	ldrh	r3, [r3, #22]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d021      	beq.n	800a0da <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a096:	4b2a      	ldr	r3, [pc, #168]	; (800a140 <tcp_close_shutdown+0x1bc>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d105      	bne.n	800a0ac <tcp_close_shutdown+0x128>
 800a0a0:	4b27      	ldr	r3, [pc, #156]	; (800a140 <tcp_close_shutdown+0x1bc>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	68db      	ldr	r3, [r3, #12]
 800a0a6:	4a26      	ldr	r2, [pc, #152]	; (800a140 <tcp_close_shutdown+0x1bc>)
 800a0a8:	6013      	str	r3, [r2, #0]
 800a0aa:	e013      	b.n	800a0d4 <tcp_close_shutdown+0x150>
 800a0ac:	4b24      	ldr	r3, [pc, #144]	; (800a140 <tcp_close_shutdown+0x1bc>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	60bb      	str	r3, [r7, #8]
 800a0b2:	e00c      	b.n	800a0ce <tcp_close_shutdown+0x14a>
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	68db      	ldr	r3, [r3, #12]
 800a0b8:	687a      	ldr	r2, [r7, #4]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d104      	bne.n	800a0c8 <tcp_close_shutdown+0x144>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	68da      	ldr	r2, [r3, #12]
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	60da      	str	r2, [r3, #12]
 800a0c6:	e005      	b.n	800a0d4 <tcp_close_shutdown+0x150>
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	68db      	ldr	r3, [r3, #12]
 800a0cc:	60bb      	str	r3, [r7, #8]
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d1ef      	bne.n	800a0b4 <tcp_close_shutdown+0x130>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f7ff fea0 	bl	8009e20 <tcp_free>
      break;
 800a0e0:	e01a      	b.n	800a118 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f7ff ff14 	bl	8009f10 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800a0e8:	6879      	ldr	r1, [r7, #4]
 800a0ea:	4816      	ldr	r0, [pc, #88]	; (800a144 <tcp_close_shutdown+0x1c0>)
 800a0ec:	f001 fb48 	bl	800b780 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f7ff feb1 	bl	8009e58 <tcp_free_listen>
      break;
 800a0f6:	e00f      	b.n	800a118 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a0f8:	6879      	ldr	r1, [r7, #4]
 800a0fa:	480e      	ldr	r0, [pc, #56]	; (800a134 <tcp_close_shutdown+0x1b0>)
 800a0fc:	f001 fb40 	bl	800b780 <tcp_pcb_remove>
 800a100:	4b0d      	ldr	r3, [pc, #52]	; (800a138 <tcp_close_shutdown+0x1b4>)
 800a102:	2201      	movs	r2, #1
 800a104:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f7ff fe8a 	bl	8009e20 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800a10c:	e004      	b.n	800a118 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 f81a 	bl	800a148 <tcp_close_shutdown_fin>
 800a114:	4603      	mov	r3, r0
 800a116:	e000      	b.n	800a11a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800a118:	2300      	movs	r3, #0
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3710      	adds	r7, #16
 800a11e:	46bd      	mov	sp, r7
 800a120:	bdb0      	pop	{r4, r5, r7, pc}
 800a122:	bf00      	nop
 800a124:	080147fc 	.word	0x080147fc
 800a128:	080148d0 	.word	0x080148d0
 800a12c:	08014840 	.word	0x08014840
 800a130:	080148f0 	.word	0x080148f0
 800a134:	2400346c 	.word	0x2400346c
 800a138:	24003468 	.word	0x24003468
 800a13c:	24003480 	.word	0x24003480
 800a140:	24003478 	.word	0x24003478
 800a144:	24003474 	.word	0x24003474

0800a148 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d106      	bne.n	800a164 <tcp_close_shutdown_fin+0x1c>
 800a156:	4b2e      	ldr	r3, [pc, #184]	; (800a210 <tcp_close_shutdown_fin+0xc8>)
 800a158:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800a15c:	492d      	ldr	r1, [pc, #180]	; (800a214 <tcp_close_shutdown_fin+0xcc>)
 800a15e:	482e      	ldr	r0, [pc, #184]	; (800a218 <tcp_close_shutdown_fin+0xd0>)
 800a160:	f008 fd60 	bl	8012c24 <iprintf>

  switch (pcb->state) {
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	7d1b      	ldrb	r3, [r3, #20]
 800a168:	2b07      	cmp	r3, #7
 800a16a:	d020      	beq.n	800a1ae <tcp_close_shutdown_fin+0x66>
 800a16c:	2b07      	cmp	r3, #7
 800a16e:	dc2b      	bgt.n	800a1c8 <tcp_close_shutdown_fin+0x80>
 800a170:	2b03      	cmp	r3, #3
 800a172:	d002      	beq.n	800a17a <tcp_close_shutdown_fin+0x32>
 800a174:	2b04      	cmp	r3, #4
 800a176:	d00d      	beq.n	800a194 <tcp_close_shutdown_fin+0x4c>
 800a178:	e026      	b.n	800a1c8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f004 fdda 	bl	800ed34 <tcp_send_fin>
 800a180:	4603      	mov	r3, r0
 800a182:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d11f      	bne.n	800a1cc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2205      	movs	r2, #5
 800a190:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a192:	e01b      	b.n	800a1cc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f004 fdcd 	bl	800ed34 <tcp_send_fin>
 800a19a:	4603      	mov	r3, r0
 800a19c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a19e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d114      	bne.n	800a1d0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2205      	movs	r2, #5
 800a1aa:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a1ac:	e010      	b.n	800a1d0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f004 fdc0 	bl	800ed34 <tcp_send_fin>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a1b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d109      	bne.n	800a1d4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2209      	movs	r2, #9
 800a1c4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a1c6:	e005      	b.n	800a1d4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	e01c      	b.n	800a206 <tcp_close_shutdown_fin+0xbe>
      break;
 800a1cc:	bf00      	nop
 800a1ce:	e002      	b.n	800a1d6 <tcp_close_shutdown_fin+0x8e>
      break;
 800a1d0:	bf00      	nop
 800a1d2:	e000      	b.n	800a1d6 <tcp_close_shutdown_fin+0x8e>
      break;
 800a1d4:	bf00      	nop
  }

  if (err == ERR_OK) {
 800a1d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d103      	bne.n	800a1e6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f004 fee6 	bl	800efb0 <tcp_output>
 800a1e4:	e00d      	b.n	800a202 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800a1e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ee:	d108      	bne.n	800a202 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	8b5b      	ldrh	r3, [r3, #26]
 800a1f4:	f043 0308 	orr.w	r3, r3, #8
 800a1f8:	b29a      	uxth	r2, r3
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800a1fe:	2300      	movs	r3, #0
 800a200:	e001      	b.n	800a206 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800a202:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a206:	4618      	mov	r0, r3
 800a208:	3710      	adds	r7, #16
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	080147fc 	.word	0x080147fc
 800a214:	080148ac 	.word	0x080148ac
 800a218:	08014840 	.word	0x08014840

0800a21c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d109      	bne.n	800a23e <tcp_close+0x22>
 800a22a:	4b0f      	ldr	r3, [pc, #60]	; (800a268 <tcp_close+0x4c>)
 800a22c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800a230:	490e      	ldr	r1, [pc, #56]	; (800a26c <tcp_close+0x50>)
 800a232:	480f      	ldr	r0, [pc, #60]	; (800a270 <tcp_close+0x54>)
 800a234:	f008 fcf6 	bl	8012c24 <iprintf>
 800a238:	f06f 030f 	mvn.w	r3, #15
 800a23c:	e00f      	b.n	800a25e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	7d1b      	ldrb	r3, [r3, #20]
 800a242:	2b01      	cmp	r3, #1
 800a244:	d006      	beq.n	800a254 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	8b5b      	ldrh	r3, [r3, #26]
 800a24a:	f043 0310 	orr.w	r3, r3, #16
 800a24e:	b29a      	uxth	r2, r3
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800a254:	2101      	movs	r1, #1
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f7ff fe94 	bl	8009f84 <tcp_close_shutdown>
 800a25c:	4603      	mov	r3, r0
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3708      	adds	r7, #8
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}
 800a266:	bf00      	nop
 800a268:	080147fc 	.word	0x080147fc
 800a26c:	0801490c 	.word	0x0801490c
 800a270:	08014840 	.word	0x08014840

0800a274 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b08e      	sub	sp, #56	; 0x38
 800a278:	af04      	add	r7, sp, #16
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d107      	bne.n	800a294 <tcp_abandon+0x20>
 800a284:	4b52      	ldr	r3, [pc, #328]	; (800a3d0 <tcp_abandon+0x15c>)
 800a286:	f240 223d 	movw	r2, #573	; 0x23d
 800a28a:	4952      	ldr	r1, [pc, #328]	; (800a3d4 <tcp_abandon+0x160>)
 800a28c:	4852      	ldr	r0, [pc, #328]	; (800a3d8 <tcp_abandon+0x164>)
 800a28e:	f008 fcc9 	bl	8012c24 <iprintf>
 800a292:	e099      	b.n	800a3c8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	7d1b      	ldrb	r3, [r3, #20]
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d106      	bne.n	800a2aa <tcp_abandon+0x36>
 800a29c:	4b4c      	ldr	r3, [pc, #304]	; (800a3d0 <tcp_abandon+0x15c>)
 800a29e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800a2a2:	494e      	ldr	r1, [pc, #312]	; (800a3dc <tcp_abandon+0x168>)
 800a2a4:	484c      	ldr	r0, [pc, #304]	; (800a3d8 <tcp_abandon+0x164>)
 800a2a6:	f008 fcbd 	bl	8012c24 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	7d1b      	ldrb	r3, [r3, #20]
 800a2ae:	2b0a      	cmp	r3, #10
 800a2b0:	d107      	bne.n	800a2c2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800a2b2:	6879      	ldr	r1, [r7, #4]
 800a2b4:	484a      	ldr	r0, [pc, #296]	; (800a3e0 <tcp_abandon+0x16c>)
 800a2b6:	f001 fa63 	bl	800b780 <tcp_pcb_remove>
    tcp_free(pcb);
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f7ff fdb0 	bl	8009e20 <tcp_free>
 800a2c0:	e082      	b.n	800a3c8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2ce:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2dc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	691b      	ldr	r3, [r3, #16]
 800a2e2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	7d1b      	ldrb	r3, [r3, #20]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d126      	bne.n	800a33a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	8adb      	ldrh	r3, [r3, #22]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d02e      	beq.n	800a352 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a2f4:	4b3b      	ldr	r3, [pc, #236]	; (800a3e4 <tcp_abandon+0x170>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	687a      	ldr	r2, [r7, #4]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d105      	bne.n	800a30a <tcp_abandon+0x96>
 800a2fe:	4b39      	ldr	r3, [pc, #228]	; (800a3e4 <tcp_abandon+0x170>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	4a37      	ldr	r2, [pc, #220]	; (800a3e4 <tcp_abandon+0x170>)
 800a306:	6013      	str	r3, [r2, #0]
 800a308:	e013      	b.n	800a332 <tcp_abandon+0xbe>
 800a30a:	4b36      	ldr	r3, [pc, #216]	; (800a3e4 <tcp_abandon+0x170>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	61fb      	str	r3, [r7, #28]
 800a310:	e00c      	b.n	800a32c <tcp_abandon+0xb8>
 800a312:	69fb      	ldr	r3, [r7, #28]
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	687a      	ldr	r2, [r7, #4]
 800a318:	429a      	cmp	r2, r3
 800a31a:	d104      	bne.n	800a326 <tcp_abandon+0xb2>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	68da      	ldr	r2, [r3, #12]
 800a320:	69fb      	ldr	r3, [r7, #28]
 800a322:	60da      	str	r2, [r3, #12]
 800a324:	e005      	b.n	800a332 <tcp_abandon+0xbe>
 800a326:	69fb      	ldr	r3, [r7, #28]
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	61fb      	str	r3, [r7, #28]
 800a32c:	69fb      	ldr	r3, [r7, #28]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d1ef      	bne.n	800a312 <tcp_abandon+0x9e>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	60da      	str	r2, [r3, #12]
 800a338:	e00b      	b.n	800a352 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	8adb      	ldrh	r3, [r3, #22]
 800a342:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a344:	6879      	ldr	r1, [r7, #4]
 800a346:	4828      	ldr	r0, [pc, #160]	; (800a3e8 <tcp_abandon+0x174>)
 800a348:	f001 fa1a 	bl	800b780 <tcp_pcb_remove>
 800a34c:	4b27      	ldr	r3, [pc, #156]	; (800a3ec <tcp_abandon+0x178>)
 800a34e:	2201      	movs	r2, #1
 800a350:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a356:	2b00      	cmp	r3, #0
 800a358:	d004      	beq.n	800a364 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a35e:	4618      	mov	r0, r3
 800a360:	f000 fed6 	bl	800b110 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d004      	beq.n	800a376 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a370:	4618      	mov	r0, r3
 800a372:	f000 fecd 	bl	800b110 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d004      	beq.n	800a388 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a382:	4618      	mov	r0, r3
 800a384:	f000 fec4 	bl	800b110 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800a388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d00e      	beq.n	800a3ac <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800a38e:	6879      	ldr	r1, [r7, #4]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	3304      	adds	r3, #4
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	8b12      	ldrh	r2, [r2, #24]
 800a398:	9202      	str	r2, [sp, #8]
 800a39a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a39c:	9201      	str	r2, [sp, #4]
 800a39e:	9300      	str	r3, [sp, #0]
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	697a      	ldr	r2, [r7, #20]
 800a3a4:	69b9      	ldr	r1, [r7, #24]
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f005 fbb6 	bl	800fb18 <tcp_rst>
    }
    last_state = pcb->state;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	7d1b      	ldrb	r3, [r3, #20]
 800a3b0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f7ff fd34 	bl	8009e20 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d004      	beq.n	800a3c8 <tcp_abandon+0x154>
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	f06f 010c 	mvn.w	r1, #12
 800a3c4:	68f8      	ldr	r0, [r7, #12]
 800a3c6:	4798      	blx	r3
  }
}
 800a3c8:	3728      	adds	r7, #40	; 0x28
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	080147fc 	.word	0x080147fc
 800a3d4:	08014940 	.word	0x08014940
 800a3d8:	08014840 	.word	0x08014840
 800a3dc:	0801495c 	.word	0x0801495c
 800a3e0:	2400347c 	.word	0x2400347c
 800a3e4:	24003478 	.word	0x24003478
 800a3e8:	2400346c 	.word	0x2400346c
 800a3ec:	24003468 	.word	0x24003468

0800a3f0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800a3f8:	2101      	movs	r1, #1
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f7ff ff3a 	bl	800a274 <tcp_abandon>
}
 800a400:	bf00      	nop
 800a402:	3708      	adds	r7, #8
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b088      	sub	sp, #32
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	4613      	mov	r3, r2
 800a414:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800a416:	2304      	movs	r3, #4
 800a418:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d101      	bne.n	800a424 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800a420:	4b3e      	ldr	r3, [pc, #248]	; (800a51c <tcp_bind+0x114>)
 800a422:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d109      	bne.n	800a43e <tcp_bind+0x36>
 800a42a:	4b3d      	ldr	r3, [pc, #244]	; (800a520 <tcp_bind+0x118>)
 800a42c:	f240 22a9 	movw	r2, #681	; 0x2a9
 800a430:	493c      	ldr	r1, [pc, #240]	; (800a524 <tcp_bind+0x11c>)
 800a432:	483d      	ldr	r0, [pc, #244]	; (800a528 <tcp_bind+0x120>)
 800a434:	f008 fbf6 	bl	8012c24 <iprintf>
 800a438:	f06f 030f 	mvn.w	r3, #15
 800a43c:	e06a      	b.n	800a514 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	7d1b      	ldrb	r3, [r3, #20]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d009      	beq.n	800a45a <tcp_bind+0x52>
 800a446:	4b36      	ldr	r3, [pc, #216]	; (800a520 <tcp_bind+0x118>)
 800a448:	f240 22ab 	movw	r2, #683	; 0x2ab
 800a44c:	4937      	ldr	r1, [pc, #220]	; (800a52c <tcp_bind+0x124>)
 800a44e:	4836      	ldr	r0, [pc, #216]	; (800a528 <tcp_bind+0x120>)
 800a450:	f008 fbe8 	bl	8012c24 <iprintf>
 800a454:	f06f 0305 	mvn.w	r3, #5
 800a458:	e05c      	b.n	800a514 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800a45a:	88fb      	ldrh	r3, [r7, #6]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d109      	bne.n	800a474 <tcp_bind+0x6c>
    port = tcp_new_port();
 800a460:	f000 f9f0 	bl	800a844 <tcp_new_port>
 800a464:	4603      	mov	r3, r0
 800a466:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800a468:	88fb      	ldrh	r3, [r7, #6]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d135      	bne.n	800a4da <tcp_bind+0xd2>
      return ERR_BUF;
 800a46e:	f06f 0301 	mvn.w	r3, #1
 800a472:	e04f      	b.n	800a514 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800a474:	2300      	movs	r3, #0
 800a476:	61fb      	str	r3, [r7, #28]
 800a478:	e02b      	b.n	800a4d2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800a47a:	4a2d      	ldr	r2, [pc, #180]	; (800a530 <tcp_bind+0x128>)
 800a47c:	69fb      	ldr	r3, [r7, #28]
 800a47e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	61bb      	str	r3, [r7, #24]
 800a486:	e01e      	b.n	800a4c6 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800a488:	69bb      	ldr	r3, [r7, #24]
 800a48a:	8adb      	ldrh	r3, [r3, #22]
 800a48c:	88fa      	ldrh	r2, [r7, #6]
 800a48e:	429a      	cmp	r2, r3
 800a490:	d116      	bne.n	800a4c0 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800a492:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800a494:	2b00      	cmp	r3, #0
 800a496:	d010      	beq.n	800a4ba <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800a498:	69bb      	ldr	r3, [r7, #24]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d00c      	beq.n	800a4ba <tcp_bind+0xb2>
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d009      	beq.n	800a4ba <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d005      	beq.n	800a4ba <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800a4ae:	69bb      	ldr	r3, [r7, #24]
 800a4b0:	681a      	ldr	r2, [r3, #0]
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d102      	bne.n	800a4c0 <tcp_bind+0xb8>
              return ERR_USE;
 800a4ba:	f06f 0307 	mvn.w	r3, #7
 800a4be:	e029      	b.n	800a514 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800a4c0:	69bb      	ldr	r3, [r7, #24]
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	61bb      	str	r3, [r7, #24]
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d1dd      	bne.n	800a488 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800a4cc:	69fb      	ldr	r3, [r7, #28]
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	61fb      	str	r3, [r7, #28]
 800a4d2:	69fa      	ldr	r2, [r7, #28]
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	dbcf      	blt.n	800a47a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d00c      	beq.n	800a4fa <tcp_bind+0xf2>
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d008      	beq.n	800a4fa <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d002      	beq.n	800a4f4 <tcp_bind+0xec>
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	e000      	b.n	800a4f6 <tcp_bind+0xee>
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	68fa      	ldr	r2, [r7, #12]
 800a4f8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	88fa      	ldrh	r2, [r7, #6]
 800a4fe:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800a500:	4b0c      	ldr	r3, [pc, #48]	; (800a534 <tcp_bind+0x12c>)
 800a502:	681a      	ldr	r2, [r3, #0]
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	60da      	str	r2, [r3, #12]
 800a508:	4a0a      	ldr	r2, [pc, #40]	; (800a534 <tcp_bind+0x12c>)
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	6013      	str	r3, [r2, #0]
 800a50e:	f005 fcc5 	bl	800fe9c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800a512:	2300      	movs	r3, #0
}
 800a514:	4618      	mov	r0, r3
 800a516:	3720      	adds	r7, #32
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}
 800a51c:	08016824 	.word	0x08016824
 800a520:	080147fc 	.word	0x080147fc
 800a524:	08014990 	.word	0x08014990
 800a528:	08014840 	.word	0x08014840
 800a52c:	080149a8 	.word	0x080149a8
 800a530:	080167fc 	.word	0x080167fc
 800a534:	24003478 	.word	0x24003478

0800a538 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	4613      	mov	r3, r2
 800a544:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d106      	bne.n	800a55a <tcp_accept_null+0x22>
 800a54c:	4b07      	ldr	r3, [pc, #28]	; (800a56c <tcp_accept_null+0x34>)
 800a54e:	f240 320f 	movw	r2, #783	; 0x30f
 800a552:	4907      	ldr	r1, [pc, #28]	; (800a570 <tcp_accept_null+0x38>)
 800a554:	4807      	ldr	r0, [pc, #28]	; (800a574 <tcp_accept_null+0x3c>)
 800a556:	f008 fb65 	bl	8012c24 <iprintf>

  tcp_abort(pcb);
 800a55a:	68b8      	ldr	r0, [r7, #8]
 800a55c:	f7ff ff48 	bl	800a3f0 <tcp_abort>

  return ERR_ABRT;
 800a560:	f06f 030c 	mvn.w	r3, #12
}
 800a564:	4618      	mov	r0, r3
 800a566:	3710      	adds	r7, #16
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}
 800a56c:	080147fc 	.word	0x080147fc
 800a570:	080149d0 	.word	0x080149d0
 800a574:	08014840 	.word	0x08014840

0800a578 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b082      	sub	sp, #8
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	460b      	mov	r3, r1
 800a582:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800a584:	78fb      	ldrb	r3, [r7, #3]
 800a586:	2200      	movs	r2, #0
 800a588:	4619      	mov	r1, r3
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 f806 	bl	800a59c <tcp_listen_with_backlog_and_err>
 800a590:	4603      	mov	r3, r0
}
 800a592:	4618      	mov	r0, r3
 800a594:	3708      	adds	r7, #8
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
	...

0800a59c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b088      	sub	sp, #32
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	460b      	mov	r3, r1
 800a5a6:	607a      	str	r2, [r7, #4]
 800a5a8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d109      	bne.n	800a5c8 <tcp_listen_with_backlog_and_err+0x2c>
 800a5b4:	4b47      	ldr	r3, [pc, #284]	; (800a6d4 <tcp_listen_with_backlog_and_err+0x138>)
 800a5b6:	f240 3259 	movw	r2, #857	; 0x359
 800a5ba:	4947      	ldr	r1, [pc, #284]	; (800a6d8 <tcp_listen_with_backlog_and_err+0x13c>)
 800a5bc:	4847      	ldr	r0, [pc, #284]	; (800a6dc <tcp_listen_with_backlog_and_err+0x140>)
 800a5be:	f008 fb31 	bl	8012c24 <iprintf>
 800a5c2:	23f0      	movs	r3, #240	; 0xf0
 800a5c4:	76fb      	strb	r3, [r7, #27]
 800a5c6:	e079      	b.n	800a6bc <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	7d1b      	ldrb	r3, [r3, #20]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d009      	beq.n	800a5e4 <tcp_listen_with_backlog_and_err+0x48>
 800a5d0:	4b40      	ldr	r3, [pc, #256]	; (800a6d4 <tcp_listen_with_backlog_and_err+0x138>)
 800a5d2:	f240 325a 	movw	r2, #858	; 0x35a
 800a5d6:	4942      	ldr	r1, [pc, #264]	; (800a6e0 <tcp_listen_with_backlog_and_err+0x144>)
 800a5d8:	4840      	ldr	r0, [pc, #256]	; (800a6dc <tcp_listen_with_backlog_and_err+0x140>)
 800a5da:	f008 fb23 	bl	8012c24 <iprintf>
 800a5de:	23f1      	movs	r3, #241	; 0xf1
 800a5e0:	76fb      	strb	r3, [r7, #27]
 800a5e2:	e06b      	b.n	800a6bc <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	7d1b      	ldrb	r3, [r3, #20]
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d104      	bne.n	800a5f6 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800a5f0:	23f7      	movs	r3, #247	; 0xf7
 800a5f2:	76fb      	strb	r3, [r7, #27]
    goto done;
 800a5f4:	e062      	b.n	800a6bc <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800a5f6:	2002      	movs	r0, #2
 800a5f8:	f7fe fa7c 	bl	8008af4 <memp_malloc>
 800a5fc:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800a5fe:	69fb      	ldr	r3, [r7, #28]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d102      	bne.n	800a60a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800a604:	23ff      	movs	r3, #255	; 0xff
 800a606:	76fb      	strb	r3, [r7, #27]
    goto done;
 800a608:	e058      	b.n	800a6bc <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	691a      	ldr	r2, [r3, #16]
 800a60e:	69fb      	ldr	r3, [r7, #28]
 800a610:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	8ada      	ldrh	r2, [r3, #22]
 800a616:	69fb      	ldr	r3, [r7, #28]
 800a618:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800a61a:	69fb      	ldr	r3, [r7, #28]
 800a61c:	2201      	movs	r2, #1
 800a61e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	7d5a      	ldrb	r2, [r3, #21]
 800a624:	69fb      	ldr	r3, [r7, #28]
 800a626:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	7a5a      	ldrb	r2, [r3, #9]
 800a62c:	69fb      	ldr	r3, [r7, #28]
 800a62e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800a630:	69fb      	ldr	r3, [r7, #28]
 800a632:	2200      	movs	r2, #0
 800a634:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	7ada      	ldrb	r2, [r3, #11]
 800a63a:	69fb      	ldr	r3, [r7, #28]
 800a63c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	7a9a      	ldrb	r2, [r3, #10]
 800a642:	69fb      	ldr	r3, [r7, #28]
 800a644:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	69fb      	ldr	r3, [r7, #28]
 800a64c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	8adb      	ldrh	r3, [r3, #22]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d021      	beq.n	800a69a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800a656:	4b23      	ldr	r3, [pc, #140]	; (800a6e4 <tcp_listen_with_backlog_and_err+0x148>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	68fa      	ldr	r2, [r7, #12]
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d105      	bne.n	800a66c <tcp_listen_with_backlog_and_err+0xd0>
 800a660:	4b20      	ldr	r3, [pc, #128]	; (800a6e4 <tcp_listen_with_backlog_and_err+0x148>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	68db      	ldr	r3, [r3, #12]
 800a666:	4a1f      	ldr	r2, [pc, #124]	; (800a6e4 <tcp_listen_with_backlog_and_err+0x148>)
 800a668:	6013      	str	r3, [r2, #0]
 800a66a:	e013      	b.n	800a694 <tcp_listen_with_backlog_and_err+0xf8>
 800a66c:	4b1d      	ldr	r3, [pc, #116]	; (800a6e4 <tcp_listen_with_backlog_and_err+0x148>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	617b      	str	r3, [r7, #20]
 800a672:	e00c      	b.n	800a68e <tcp_listen_with_backlog_and_err+0xf2>
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	68db      	ldr	r3, [r3, #12]
 800a678:	68fa      	ldr	r2, [r7, #12]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d104      	bne.n	800a688 <tcp_listen_with_backlog_and_err+0xec>
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	68da      	ldr	r2, [r3, #12]
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	60da      	str	r2, [r3, #12]
 800a686:	e005      	b.n	800a694 <tcp_listen_with_backlog_and_err+0xf8>
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	68db      	ldr	r3, [r3, #12]
 800a68c:	617b      	str	r3, [r7, #20]
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d1ef      	bne.n	800a674 <tcp_listen_with_backlog_and_err+0xd8>
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2200      	movs	r2, #0
 800a698:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	f7ff fbc0 	bl	8009e20 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800a6a0:	69fb      	ldr	r3, [r7, #28]
 800a6a2:	4a11      	ldr	r2, [pc, #68]	; (800a6e8 <tcp_listen_with_backlog_and_err+0x14c>)
 800a6a4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800a6a6:	4b11      	ldr	r3, [pc, #68]	; (800a6ec <tcp_listen_with_backlog_and_err+0x150>)
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	69fb      	ldr	r3, [r7, #28]
 800a6ac:	60da      	str	r2, [r3, #12]
 800a6ae:	4a0f      	ldr	r2, [pc, #60]	; (800a6ec <tcp_listen_with_backlog_and_err+0x150>)
 800a6b0:	69fb      	ldr	r3, [r7, #28]
 800a6b2:	6013      	str	r3, [r2, #0]
 800a6b4:	f005 fbf2 	bl	800fe9c <tcp_timer_needed>
  res = ERR_OK;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d002      	beq.n	800a6c8 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	7efa      	ldrb	r2, [r7, #27]
 800a6c6:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800a6c8:	69fb      	ldr	r3, [r7, #28]
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3720      	adds	r7, #32
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	080147fc 	.word	0x080147fc
 800a6d8:	080149f0 	.word	0x080149f0
 800a6dc:	08014840 	.word	0x08014840
 800a6e0:	08014a20 	.word	0x08014a20
 800a6e4:	24003478 	.word	0x24003478
 800a6e8:	0800a539 	.word	0x0800a539
 800a6ec:	24003474 	.word	0x24003474

0800a6f0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b084      	sub	sp, #16
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d106      	bne.n	800a70c <tcp_update_rcv_ann_wnd+0x1c>
 800a6fe:	4b25      	ldr	r3, [pc, #148]	; (800a794 <tcp_update_rcv_ann_wnd+0xa4>)
 800a700:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a704:	4924      	ldr	r1, [pc, #144]	; (800a798 <tcp_update_rcv_ann_wnd+0xa8>)
 800a706:	4825      	ldr	r0, [pc, #148]	; (800a79c <tcp_update_rcv_ann_wnd+0xac>)
 800a708:	f008 fa8c 	bl	8012c24 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a710:	687a      	ldr	r2, [r7, #4]
 800a712:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a714:	4413      	add	r3, r2
 800a716:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a71c:	687a      	ldr	r2, [r7, #4]
 800a71e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800a720:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800a724:	bf28      	it	cs
 800a726:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800a72a:	b292      	uxth	r2, r2
 800a72c:	4413      	add	r3, r2
 800a72e:	68fa      	ldr	r2, [r7, #12]
 800a730:	1ad3      	subs	r3, r2, r3
 800a732:	2b00      	cmp	r3, #0
 800a734:	db08      	blt.n	800a748 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a742:	68fa      	ldr	r2, [r7, #12]
 800a744:	1ad3      	subs	r3, r2, r3
 800a746:	e020      	b.n	800a78a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a750:	1ad3      	subs	r3, r2, r3
 800a752:	2b00      	cmp	r3, #0
 800a754:	dd03      	ble.n	800a75e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2200      	movs	r2, #0
 800a75a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a75c:	e014      	b.n	800a788 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a766:	1ad3      	subs	r3, r2, r3
 800a768:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a770:	d306      	bcc.n	800a780 <tcp_update_rcv_ann_wnd+0x90>
 800a772:	4b08      	ldr	r3, [pc, #32]	; (800a794 <tcp_update_rcv_ann_wnd+0xa4>)
 800a774:	f240 32b6 	movw	r2, #950	; 0x3b6
 800a778:	4909      	ldr	r1, [pc, #36]	; (800a7a0 <tcp_update_rcv_ann_wnd+0xb0>)
 800a77a:	4808      	ldr	r0, [pc, #32]	; (800a79c <tcp_update_rcv_ann_wnd+0xac>)
 800a77c:	f008 fa52 	bl	8012c24 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	b29a      	uxth	r2, r3
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800a788:	2300      	movs	r3, #0
  }
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3710      	adds	r7, #16
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop
 800a794:	080147fc 	.word	0x080147fc
 800a798:	08014a58 	.word	0x08014a58
 800a79c:	08014840 	.word	0x08014840
 800a7a0:	08014a7c 	.word	0x08014a7c

0800a7a4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d107      	bne.n	800a7c6 <tcp_recved+0x22>
 800a7b6:	4b1f      	ldr	r3, [pc, #124]	; (800a834 <tcp_recved+0x90>)
 800a7b8:	f240 32cf 	movw	r2, #975	; 0x3cf
 800a7bc:	491e      	ldr	r1, [pc, #120]	; (800a838 <tcp_recved+0x94>)
 800a7be:	481f      	ldr	r0, [pc, #124]	; (800a83c <tcp_recved+0x98>)
 800a7c0:	f008 fa30 	bl	8012c24 <iprintf>
 800a7c4:	e032      	b.n	800a82c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	7d1b      	ldrb	r3, [r3, #20]
 800a7ca:	2b01      	cmp	r3, #1
 800a7cc:	d106      	bne.n	800a7dc <tcp_recved+0x38>
 800a7ce:	4b19      	ldr	r3, [pc, #100]	; (800a834 <tcp_recved+0x90>)
 800a7d0:	f240 32d2 	movw	r2, #978	; 0x3d2
 800a7d4:	491a      	ldr	r1, [pc, #104]	; (800a840 <tcp_recved+0x9c>)
 800a7d6:	4819      	ldr	r0, [pc, #100]	; (800a83c <tcp_recved+0x98>)
 800a7d8:	f008 fa24 	bl	8012c24 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a7e0:	887b      	ldrh	r3, [r7, #2]
 800a7e2:	4413      	add	r3, r2
 800a7e4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800a7e6:	89fb      	ldrh	r3, [r7, #14]
 800a7e8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a7ec:	d804      	bhi.n	800a7f8 <tcp_recved+0x54>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7f2:	89fa      	ldrh	r2, [r7, #14]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d204      	bcs.n	800a802 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a7fe:	851a      	strh	r2, [r3, #40]	; 0x28
 800a800:	e002      	b.n	800a808 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	89fa      	ldrh	r2, [r7, #14]
 800a806:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f7ff ff71 	bl	800a6f0 <tcp_update_rcv_ann_wnd>
 800a80e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a816:	d309      	bcc.n	800a82c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	8b5b      	ldrh	r3, [r3, #26]
 800a81c:	f043 0302 	orr.w	r3, r3, #2
 800a820:	b29a      	uxth	r2, r3
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f004 fbc2 	bl	800efb0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800a82c:	3710      	adds	r7, #16
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	080147fc 	.word	0x080147fc
 800a838:	08014a98 	.word	0x08014a98
 800a83c:	08014840 	.word	0x08014840
 800a840:	08014ab0 	.word	0x08014ab0

0800a844 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800a844:	b480      	push	{r7}
 800a846:	b083      	sub	sp, #12
 800a848:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800a84a:	2300      	movs	r3, #0
 800a84c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800a84e:	4b1e      	ldr	r3, [pc, #120]	; (800a8c8 <tcp_new_port+0x84>)
 800a850:	881b      	ldrh	r3, [r3, #0]
 800a852:	3301      	adds	r3, #1
 800a854:	b29a      	uxth	r2, r3
 800a856:	4b1c      	ldr	r3, [pc, #112]	; (800a8c8 <tcp_new_port+0x84>)
 800a858:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800a85a:	4b1b      	ldr	r3, [pc, #108]	; (800a8c8 <tcp_new_port+0x84>)
 800a85c:	881b      	ldrh	r3, [r3, #0]
 800a85e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a862:	4293      	cmp	r3, r2
 800a864:	d103      	bne.n	800a86e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800a866:	4b18      	ldr	r3, [pc, #96]	; (800a8c8 <tcp_new_port+0x84>)
 800a868:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800a86c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800a86e:	2300      	movs	r3, #0
 800a870:	71fb      	strb	r3, [r7, #7]
 800a872:	e01e      	b.n	800a8b2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a874:	79fb      	ldrb	r3, [r7, #7]
 800a876:	4a15      	ldr	r2, [pc, #84]	; (800a8cc <tcp_new_port+0x88>)
 800a878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	603b      	str	r3, [r7, #0]
 800a880:	e011      	b.n	800a8a6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	8ada      	ldrh	r2, [r3, #22]
 800a886:	4b10      	ldr	r3, [pc, #64]	; (800a8c8 <tcp_new_port+0x84>)
 800a888:	881b      	ldrh	r3, [r3, #0]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d108      	bne.n	800a8a0 <tcp_new_port+0x5c>
        n++;
 800a88e:	88bb      	ldrh	r3, [r7, #4]
 800a890:	3301      	adds	r3, #1
 800a892:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800a894:	88bb      	ldrh	r3, [r7, #4]
 800a896:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a89a:	d3d8      	bcc.n	800a84e <tcp_new_port+0xa>
          return 0;
 800a89c:	2300      	movs	r3, #0
 800a89e:	e00d      	b.n	800a8bc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	68db      	ldr	r3, [r3, #12]
 800a8a4:	603b      	str	r3, [r7, #0]
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d1ea      	bne.n	800a882 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800a8ac:	79fb      	ldrb	r3, [r7, #7]
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	71fb      	strb	r3, [r7, #7]
 800a8b2:	79fb      	ldrb	r3, [r7, #7]
 800a8b4:	2b03      	cmp	r3, #3
 800a8b6:	d9dd      	bls.n	800a874 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800a8b8:	4b03      	ldr	r3, [pc, #12]	; (800a8c8 <tcp_new_port+0x84>)
 800a8ba:	881b      	ldrh	r3, [r3, #0]
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	370c      	adds	r7, #12
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr
 800a8c8:	24000024 	.word	0x24000024
 800a8cc:	080167fc 	.word	0x080167fc

0800a8d0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800a8d0:	b5b0      	push	{r4, r5, r7, lr}
 800a8d2:	b090      	sub	sp, #64	; 0x40
 800a8d4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800a8dc:	4b94      	ldr	r3, [pc, #592]	; (800ab30 <tcp_slowtmr+0x260>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	4a93      	ldr	r2, [pc, #588]	; (800ab30 <tcp_slowtmr+0x260>)
 800a8e4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800a8e6:	4b93      	ldr	r3, [pc, #588]	; (800ab34 <tcp_slowtmr+0x264>)
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	b2da      	uxtb	r2, r3
 800a8ee:	4b91      	ldr	r3, [pc, #580]	; (800ab34 <tcp_slowtmr+0x264>)
 800a8f0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800a8f6:	4b90      	ldr	r3, [pc, #576]	; (800ab38 <tcp_slowtmr+0x268>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800a8fc:	e29d      	b.n	800ae3a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a900:	7d1b      	ldrb	r3, [r3, #20]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d106      	bne.n	800a914 <tcp_slowtmr+0x44>
 800a906:	4b8d      	ldr	r3, [pc, #564]	; (800ab3c <tcp_slowtmr+0x26c>)
 800a908:	f240 42be 	movw	r2, #1214	; 0x4be
 800a90c:	498c      	ldr	r1, [pc, #560]	; (800ab40 <tcp_slowtmr+0x270>)
 800a90e:	488d      	ldr	r0, [pc, #564]	; (800ab44 <tcp_slowtmr+0x274>)
 800a910:	f008 f988 	bl	8012c24 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a916:	7d1b      	ldrb	r3, [r3, #20]
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d106      	bne.n	800a92a <tcp_slowtmr+0x5a>
 800a91c:	4b87      	ldr	r3, [pc, #540]	; (800ab3c <tcp_slowtmr+0x26c>)
 800a91e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800a922:	4989      	ldr	r1, [pc, #548]	; (800ab48 <tcp_slowtmr+0x278>)
 800a924:	4887      	ldr	r0, [pc, #540]	; (800ab44 <tcp_slowtmr+0x274>)
 800a926:	f008 f97d 	bl	8012c24 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a92c:	7d1b      	ldrb	r3, [r3, #20]
 800a92e:	2b0a      	cmp	r3, #10
 800a930:	d106      	bne.n	800a940 <tcp_slowtmr+0x70>
 800a932:	4b82      	ldr	r3, [pc, #520]	; (800ab3c <tcp_slowtmr+0x26c>)
 800a934:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800a938:	4984      	ldr	r1, [pc, #528]	; (800ab4c <tcp_slowtmr+0x27c>)
 800a93a:	4882      	ldr	r0, [pc, #520]	; (800ab44 <tcp_slowtmr+0x274>)
 800a93c:	f008 f972 	bl	8012c24 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a942:	7f9a      	ldrb	r2, [r3, #30]
 800a944:	4b7b      	ldr	r3, [pc, #492]	; (800ab34 <tcp_slowtmr+0x264>)
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	429a      	cmp	r2, r3
 800a94a:	d105      	bne.n	800a958 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800a94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a94e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800a956:	e270      	b.n	800ae3a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800a958:	4b76      	ldr	r3, [pc, #472]	; (800ab34 <tcp_slowtmr+0x264>)
 800a95a:	781a      	ldrb	r2, [r3, #0]
 800a95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a95e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800a960:	2300      	movs	r3, #0
 800a962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800a966:	2300      	movs	r3, #0
 800a968:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a96e:	7d1b      	ldrb	r3, [r3, #20]
 800a970:	2b02      	cmp	r3, #2
 800a972:	d10a      	bne.n	800a98a <tcp_slowtmr+0xba>
 800a974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a976:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a97a:	2b05      	cmp	r3, #5
 800a97c:	d905      	bls.n	800a98a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800a97e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a982:	3301      	adds	r3, #1
 800a984:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a988:	e11e      	b.n	800abc8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800a98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a98c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a990:	2b0b      	cmp	r3, #11
 800a992:	d905      	bls.n	800a9a0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800a994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a998:	3301      	adds	r3, #1
 800a99a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a99e:	e113      	b.n	800abc8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800a9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d075      	beq.n	800aa96 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800a9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d006      	beq.n	800a9c0 <tcp_slowtmr+0xf0>
 800a9b2:	4b62      	ldr	r3, [pc, #392]	; (800ab3c <tcp_slowtmr+0x26c>)
 800a9b4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800a9b8:	4965      	ldr	r1, [pc, #404]	; (800ab50 <tcp_slowtmr+0x280>)
 800a9ba:	4862      	ldr	r0, [pc, #392]	; (800ab44 <tcp_slowtmr+0x274>)
 800a9bc:	f008 f932 	bl	8012c24 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d106      	bne.n	800a9d6 <tcp_slowtmr+0x106>
 800a9c8:	4b5c      	ldr	r3, [pc, #368]	; (800ab3c <tcp_slowtmr+0x26c>)
 800a9ca:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800a9ce:	4961      	ldr	r1, [pc, #388]	; (800ab54 <tcp_slowtmr+0x284>)
 800a9d0:	485c      	ldr	r0, [pc, #368]	; (800ab44 <tcp_slowtmr+0x274>)
 800a9d2:	f008 f927 	bl	8012c24 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800a9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a9dc:	2b0b      	cmp	r3, #11
 800a9de:	d905      	bls.n	800a9ec <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800a9e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9e4:	3301      	adds	r3, #1
 800a9e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a9ea:	e0ed      	b.n	800abc8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800a9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a9f2:	3b01      	subs	r3, #1
 800a9f4:	4a58      	ldr	r2, [pc, #352]	; (800ab58 <tcp_slowtmr+0x288>)
 800a9f6:	5cd3      	ldrb	r3, [r2, r3]
 800a9f8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800a9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9fc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800aa00:	7c7a      	ldrb	r2, [r7, #17]
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d907      	bls.n	800aa16 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800aa06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa08:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800aa0c:	3301      	adds	r3, #1
 800aa0e:	b2da      	uxtb	r2, r3
 800aa10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa12:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800aa16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa18:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800aa1c:	7c7a      	ldrb	r2, [r7, #17]
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	f200 80d2 	bhi.w	800abc8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800aa24:	2301      	movs	r3, #1
 800aa26:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800aa28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d108      	bne.n	800aa44 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800aa32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa34:	f005 f964 	bl	800fd00 <tcp_zero_window_probe>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d014      	beq.n	800aa68 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800aa3e:	2300      	movs	r3, #0
 800aa40:	623b      	str	r3, [r7, #32]
 800aa42:	e011      	b.n	800aa68 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800aa44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa4e:	f004 f829 	bl	800eaa4 <tcp_split_unsent_seg>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d107      	bne.n	800aa68 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800aa58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa5a:	f004 faa9 	bl	800efb0 <tcp_output>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d101      	bne.n	800aa68 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800aa64:	2300      	movs	r3, #0
 800aa66:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800aa68:	6a3b      	ldr	r3, [r7, #32]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	f000 80ac 	beq.w	800abc8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800aa70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa72:	2200      	movs	r2, #0
 800aa74:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800aa78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa7a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800aa7e:	2b06      	cmp	r3, #6
 800aa80:	f200 80a2 	bhi.w	800abc8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800aa84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa86:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	b2da      	uxtb	r2, r3
 800aa8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa90:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800aa94:	e098      	b.n	800abc8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800aa96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa98:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	db0f      	blt.n	800aac0 <tcp_slowtmr+0x1f0>
 800aaa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800aaa6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d008      	beq.n	800aac0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800aaae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800aab4:	b29b      	uxth	r3, r3
 800aab6:	3301      	adds	r3, #1
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	b21a      	sxth	r2, r3
 800aabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aabe:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800aac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800aac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800aacc:	429a      	cmp	r2, r3
 800aace:	db7b      	blt.n	800abc8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800aad0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aad2:	f004 fd5f 	bl	800f594 <tcp_rexmit_rto_prepare>
 800aad6:	4603      	mov	r3, r0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d007      	beq.n	800aaec <tcp_slowtmr+0x21c>
 800aadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d171      	bne.n	800abc8 <tcp_slowtmr+0x2f8>
 800aae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d06d      	beq.n	800abc8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800aaec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaee:	7d1b      	ldrb	r3, [r3, #20]
 800aaf0:	2b02      	cmp	r3, #2
 800aaf2:	d03a      	beq.n	800ab6a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800aaf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aafa:	2b0c      	cmp	r3, #12
 800aafc:	bf28      	it	cs
 800aafe:	230c      	movcs	r3, #12
 800ab00:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ab02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab04:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ab08:	10db      	asrs	r3, r3, #3
 800ab0a:	b21b      	sxth	r3, r3
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab10:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ab14:	4413      	add	r3, r2
 800ab16:	7efa      	ldrb	r2, [r7, #27]
 800ab18:	4910      	ldr	r1, [pc, #64]	; (800ab5c <tcp_slowtmr+0x28c>)
 800ab1a:	5c8a      	ldrb	r2, [r1, r2]
 800ab1c:	4093      	lsls	r3, r2
 800ab1e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800ab26:	4293      	cmp	r3, r2
 800ab28:	dc1a      	bgt.n	800ab60 <tcp_slowtmr+0x290>
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	b21a      	sxth	r2, r3
 800ab2e:	e019      	b.n	800ab64 <tcp_slowtmr+0x294>
 800ab30:	24003470 	.word	0x24003470
 800ab34:	240000ea 	.word	0x240000ea
 800ab38:	2400346c 	.word	0x2400346c
 800ab3c:	080147fc 	.word	0x080147fc
 800ab40:	08014b40 	.word	0x08014b40
 800ab44:	08014840 	.word	0x08014840
 800ab48:	08014b6c 	.word	0x08014b6c
 800ab4c:	08014b98 	.word	0x08014b98
 800ab50:	08014bc8 	.word	0x08014bc8
 800ab54:	08014bfc 	.word	0x08014bfc
 800ab58:	080167f4 	.word	0x080167f4
 800ab5c:	080167e4 	.word	0x080167e4
 800ab60:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ab64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800ab6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ab70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab72:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ab76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab78:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	bf28      	it	cs
 800ab80:	4613      	movcs	r3, r2
 800ab82:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ab84:	8a7b      	ldrh	r3, [r7, #18]
 800ab86:	085b      	lsrs	r3, r3, #1
 800ab88:	b29a      	uxth	r2, r3
 800ab8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab8c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ab90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab92:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ab96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab9a:	005b      	lsls	r3, r3, #1
 800ab9c:	b29b      	uxth	r3, r3
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d206      	bcs.n	800abb0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800aba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aba6:	005b      	lsls	r3, r3, #1
 800aba8:	b29a      	uxth	r2, r3
 800abaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800abb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800abb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800abba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abbc:	2200      	movs	r2, #0
 800abbe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800abc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800abc4:	f004 fd56 	bl	800f674 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800abc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abca:	7d1b      	ldrb	r3, [r3, #20]
 800abcc:	2b06      	cmp	r3, #6
 800abce:	d111      	bne.n	800abf4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800abd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd2:	8b5b      	ldrh	r3, [r3, #26]
 800abd4:	f003 0310 	and.w	r3, r3, #16
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d00b      	beq.n	800abf4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800abdc:	4b9c      	ldr	r3, [pc, #624]	; (800ae50 <tcp_slowtmr+0x580>)
 800abde:	681a      	ldr	r2, [r3, #0]
 800abe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe2:	6a1b      	ldr	r3, [r3, #32]
 800abe4:	1ad3      	subs	r3, r2, r3
 800abe6:	2b28      	cmp	r3, #40	; 0x28
 800abe8:	d904      	bls.n	800abf4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800abea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abee:	3301      	adds	r3, #1
 800abf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800abf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf6:	7a5b      	ldrb	r3, [r3, #9]
 800abf8:	f003 0308 	and.w	r3, r3, #8
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d04a      	beq.n	800ac96 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800ac00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac02:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ac04:	2b04      	cmp	r3, #4
 800ac06:	d003      	beq.n	800ac10 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800ac08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac0a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ac0c:	2b07      	cmp	r3, #7
 800ac0e:	d142      	bne.n	800ac96 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ac10:	4b8f      	ldr	r3, [pc, #572]	; (800ae50 <tcp_slowtmr+0x580>)
 800ac12:	681a      	ldr	r2, [r3, #0]
 800ac14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac16:	6a1b      	ldr	r3, [r3, #32]
 800ac18:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ac1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac1c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ac20:	4b8c      	ldr	r3, [pc, #560]	; (800ae54 <tcp_slowtmr+0x584>)
 800ac22:	440b      	add	r3, r1
 800ac24:	498c      	ldr	r1, [pc, #560]	; (800ae58 <tcp_slowtmr+0x588>)
 800ac26:	fba1 1303 	umull	r1, r3, r1, r3
 800ac2a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d90a      	bls.n	800ac46 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800ac30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac34:	3301      	adds	r3, #1
 800ac36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800ac3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ac3e:	3301      	adds	r3, #1
 800ac40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ac44:	e027      	b.n	800ac96 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ac46:	4b82      	ldr	r3, [pc, #520]	; (800ae50 <tcp_slowtmr+0x580>)
 800ac48:	681a      	ldr	r2, [r3, #0]
 800ac4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac4c:	6a1b      	ldr	r3, [r3, #32]
 800ac4e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ac50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac52:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ac56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac58:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	4b7f      	ldr	r3, [pc, #508]	; (800ae5c <tcp_slowtmr+0x58c>)
 800ac60:	fb03 f300 	mul.w	r3, r3, r0
 800ac64:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ac66:	497c      	ldr	r1, [pc, #496]	; (800ae58 <tcp_slowtmr+0x588>)
 800ac68:	fba1 1303 	umull	r1, r3, r1, r3
 800ac6c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d911      	bls.n	800ac96 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800ac72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac74:	f005 f804 	bl	800fc80 <tcp_keepalive>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800ac7e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d107      	bne.n	800ac96 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800ac86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac88:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ac8c:	3301      	adds	r3, #1
 800ac8e:	b2da      	uxtb	r2, r3
 800ac90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac92:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800ac96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d011      	beq.n	800acc2 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ac9e:	4b6c      	ldr	r3, [pc, #432]	; (800ae50 <tcp_slowtmr+0x580>)
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca4:	6a1b      	ldr	r3, [r3, #32]
 800aca6:	1ad2      	subs	r2, r2, r3
 800aca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acaa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800acae:	4619      	mov	r1, r3
 800acb0:	460b      	mov	r3, r1
 800acb2:	005b      	lsls	r3, r3, #1
 800acb4:	440b      	add	r3, r1
 800acb6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800acb8:	429a      	cmp	r2, r3
 800acba:	d302      	bcc.n	800acc2 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800acbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800acbe:	f000 fec3 	bl	800ba48 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800acc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc4:	7d1b      	ldrb	r3, [r3, #20]
 800acc6:	2b03      	cmp	r3, #3
 800acc8:	d10b      	bne.n	800ace2 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800acca:	4b61      	ldr	r3, [pc, #388]	; (800ae50 <tcp_slowtmr+0x580>)
 800accc:	681a      	ldr	r2, [r3, #0]
 800acce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd0:	6a1b      	ldr	r3, [r3, #32]
 800acd2:	1ad3      	subs	r3, r2, r3
 800acd4:	2b28      	cmp	r3, #40	; 0x28
 800acd6:	d904      	bls.n	800ace2 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800acd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800acdc:	3301      	adds	r3, #1
 800acde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800ace2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace4:	7d1b      	ldrb	r3, [r3, #20]
 800ace6:	2b09      	cmp	r3, #9
 800ace8:	d10b      	bne.n	800ad02 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800acea:	4b59      	ldr	r3, [pc, #356]	; (800ae50 <tcp_slowtmr+0x580>)
 800acec:	681a      	ldr	r2, [r3, #0]
 800acee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf0:	6a1b      	ldr	r3, [r3, #32]
 800acf2:	1ad3      	subs	r3, r2, r3
 800acf4:	2bf0      	cmp	r3, #240	; 0xf0
 800acf6:	d904      	bls.n	800ad02 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800acf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800acfc:	3301      	adds	r3, #1
 800acfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ad02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d060      	beq.n	800adcc <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800ad0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad10:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800ad12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad14:	f000 fce4 	bl	800b6e0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800ad18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d010      	beq.n	800ad40 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ad1e:	4b50      	ldr	r3, [pc, #320]	; (800ae60 <tcp_slowtmr+0x590>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d106      	bne.n	800ad36 <tcp_slowtmr+0x466>
 800ad28:	4b4e      	ldr	r3, [pc, #312]	; (800ae64 <tcp_slowtmr+0x594>)
 800ad2a:	f240 526d 	movw	r2, #1389	; 0x56d
 800ad2e:	494e      	ldr	r1, [pc, #312]	; (800ae68 <tcp_slowtmr+0x598>)
 800ad30:	484e      	ldr	r0, [pc, #312]	; (800ae6c <tcp_slowtmr+0x59c>)
 800ad32:	f007 ff77 	bl	8012c24 <iprintf>
        prev->next = pcb->next;
 800ad36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad38:	68da      	ldr	r2, [r3, #12]
 800ad3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad3c:	60da      	str	r2, [r3, #12]
 800ad3e:	e00f      	b.n	800ad60 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ad40:	4b47      	ldr	r3, [pc, #284]	; (800ae60 <tcp_slowtmr+0x590>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d006      	beq.n	800ad58 <tcp_slowtmr+0x488>
 800ad4a:	4b46      	ldr	r3, [pc, #280]	; (800ae64 <tcp_slowtmr+0x594>)
 800ad4c:	f240 5271 	movw	r2, #1393	; 0x571
 800ad50:	4947      	ldr	r1, [pc, #284]	; (800ae70 <tcp_slowtmr+0x5a0>)
 800ad52:	4846      	ldr	r0, [pc, #280]	; (800ae6c <tcp_slowtmr+0x59c>)
 800ad54:	f007 ff66 	bl	8012c24 <iprintf>
        tcp_active_pcbs = pcb->next;
 800ad58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad5a:	68db      	ldr	r3, [r3, #12]
 800ad5c:	4a40      	ldr	r2, [pc, #256]	; (800ae60 <tcp_slowtmr+0x590>)
 800ad5e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800ad60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d013      	beq.n	800ad90 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ad68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad6a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ad6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad6e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ad70:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800ad72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad74:	3304      	adds	r3, #4
 800ad76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad78:	8ad2      	ldrh	r2, [r2, #22]
 800ad7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad7c:	8b09      	ldrh	r1, [r1, #24]
 800ad7e:	9102      	str	r1, [sp, #8]
 800ad80:	9201      	str	r2, [sp, #4]
 800ad82:	9300      	str	r3, [sp, #0]
 800ad84:	462b      	mov	r3, r5
 800ad86:	4622      	mov	r2, r4
 800ad88:	4601      	mov	r1, r0
 800ad8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad8c:	f004 fec4 	bl	800fb18 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800ad90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad92:	691b      	ldr	r3, [r3, #16]
 800ad94:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ad96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad98:	7d1b      	ldrb	r3, [r3, #20]
 800ad9a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ad9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad9e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ada0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada2:	68db      	ldr	r3, [r3, #12]
 800ada4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ada6:	6838      	ldr	r0, [r7, #0]
 800ada8:	f7ff f83a 	bl	8009e20 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800adac:	4b31      	ldr	r3, [pc, #196]	; (800ae74 <tcp_slowtmr+0x5a4>)
 800adae:	2200      	movs	r2, #0
 800adb0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d004      	beq.n	800adc2 <tcp_slowtmr+0x4f2>
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f06f 010c 	mvn.w	r1, #12
 800adbe:	68b8      	ldr	r0, [r7, #8]
 800adc0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800adc2:	4b2c      	ldr	r3, [pc, #176]	; (800ae74 <tcp_slowtmr+0x5a4>)
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d037      	beq.n	800ae3a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800adca:	e592      	b.n	800a8f2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800adcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adce:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800add0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800add2:	68db      	ldr	r3, [r3, #12]
 800add4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800add6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add8:	7f1b      	ldrb	r3, [r3, #28]
 800adda:	3301      	adds	r3, #1
 800addc:	b2da      	uxtb	r2, r3
 800adde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ade2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade4:	7f1a      	ldrb	r2, [r3, #28]
 800ade6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade8:	7f5b      	ldrb	r3, [r3, #29]
 800adea:	429a      	cmp	r2, r3
 800adec:	d325      	bcc.n	800ae3a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800adee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf0:	2200      	movs	r2, #0
 800adf2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800adf4:	4b1f      	ldr	r3, [pc, #124]	; (800ae74 <tcp_slowtmr+0x5a4>)
 800adf6:	2200      	movs	r2, #0
 800adf8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800adfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d00b      	beq.n	800ae1c <tcp_slowtmr+0x54c>
 800ae04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae0c:	6912      	ldr	r2, [r2, #16]
 800ae0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae10:	4610      	mov	r0, r2
 800ae12:	4798      	blx	r3
 800ae14:	4603      	mov	r3, r0
 800ae16:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ae1a:	e002      	b.n	800ae22 <tcp_slowtmr+0x552>
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ae22:	4b14      	ldr	r3, [pc, #80]	; (800ae74 <tcp_slowtmr+0x5a4>)
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d000      	beq.n	800ae2c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800ae2a:	e562      	b.n	800a8f2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ae2c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d102      	bne.n	800ae3a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800ae34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae36:	f004 f8bb 	bl	800efb0 <tcp_output>
  while (pcb != NULL) {
 800ae3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	f47f ad5e 	bne.w	800a8fe <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ae42:	2300      	movs	r3, #0
 800ae44:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ae46:	4b0c      	ldr	r3, [pc, #48]	; (800ae78 <tcp_slowtmr+0x5a8>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ae4c:	e069      	b.n	800af22 <tcp_slowtmr+0x652>
 800ae4e:	bf00      	nop
 800ae50:	24003470 	.word	0x24003470
 800ae54:	000a4cb8 	.word	0x000a4cb8
 800ae58:	10624dd3 	.word	0x10624dd3
 800ae5c:	000124f8 	.word	0x000124f8
 800ae60:	2400346c 	.word	0x2400346c
 800ae64:	080147fc 	.word	0x080147fc
 800ae68:	08014c34 	.word	0x08014c34
 800ae6c:	08014840 	.word	0x08014840
 800ae70:	08014c60 	.word	0x08014c60
 800ae74:	24003468 	.word	0x24003468
 800ae78:	2400347c 	.word	0x2400347c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ae7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae7e:	7d1b      	ldrb	r3, [r3, #20]
 800ae80:	2b0a      	cmp	r3, #10
 800ae82:	d006      	beq.n	800ae92 <tcp_slowtmr+0x5c2>
 800ae84:	4b2b      	ldr	r3, [pc, #172]	; (800af34 <tcp_slowtmr+0x664>)
 800ae86:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800ae8a:	492b      	ldr	r1, [pc, #172]	; (800af38 <tcp_slowtmr+0x668>)
 800ae8c:	482b      	ldr	r0, [pc, #172]	; (800af3c <tcp_slowtmr+0x66c>)
 800ae8e:	f007 fec9 	bl	8012c24 <iprintf>
    pcb_remove = 0;
 800ae92:	2300      	movs	r3, #0
 800ae94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ae98:	4b29      	ldr	r3, [pc, #164]	; (800af40 <tcp_slowtmr+0x670>)
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae9e:	6a1b      	ldr	r3, [r3, #32]
 800aea0:	1ad3      	subs	r3, r2, r3
 800aea2:	2bf0      	cmp	r3, #240	; 0xf0
 800aea4:	d904      	bls.n	800aeb0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800aea6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aeaa:	3301      	adds	r3, #1
 800aeac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800aeb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d02f      	beq.n	800af18 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800aeb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aeba:	f000 fc11 	bl	800b6e0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800aebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d010      	beq.n	800aee6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800aec4:	4b1f      	ldr	r3, [pc, #124]	; (800af44 <tcp_slowtmr+0x674>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d106      	bne.n	800aedc <tcp_slowtmr+0x60c>
 800aece:	4b19      	ldr	r3, [pc, #100]	; (800af34 <tcp_slowtmr+0x664>)
 800aed0:	f240 52af 	movw	r2, #1455	; 0x5af
 800aed4:	491c      	ldr	r1, [pc, #112]	; (800af48 <tcp_slowtmr+0x678>)
 800aed6:	4819      	ldr	r0, [pc, #100]	; (800af3c <tcp_slowtmr+0x66c>)
 800aed8:	f007 fea4 	bl	8012c24 <iprintf>
        prev->next = pcb->next;
 800aedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aede:	68da      	ldr	r2, [r3, #12]
 800aee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee2:	60da      	str	r2, [r3, #12]
 800aee4:	e00f      	b.n	800af06 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800aee6:	4b17      	ldr	r3, [pc, #92]	; (800af44 <tcp_slowtmr+0x674>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d006      	beq.n	800aefe <tcp_slowtmr+0x62e>
 800aef0:	4b10      	ldr	r3, [pc, #64]	; (800af34 <tcp_slowtmr+0x664>)
 800aef2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800aef6:	4915      	ldr	r1, [pc, #84]	; (800af4c <tcp_slowtmr+0x67c>)
 800aef8:	4810      	ldr	r0, [pc, #64]	; (800af3c <tcp_slowtmr+0x66c>)
 800aefa:	f007 fe93 	bl	8012c24 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800aefe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af00:	68db      	ldr	r3, [r3, #12]
 800af02:	4a10      	ldr	r2, [pc, #64]	; (800af44 <tcp_slowtmr+0x674>)
 800af04:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800af06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af08:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800af0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af0c:	68db      	ldr	r3, [r3, #12]
 800af0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800af10:	69f8      	ldr	r0, [r7, #28]
 800af12:	f7fe ff85 	bl	8009e20 <tcp_free>
 800af16:	e004      	b.n	800af22 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800af18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af1a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800af1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af1e:	68db      	ldr	r3, [r3, #12]
 800af20:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800af22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af24:	2b00      	cmp	r3, #0
 800af26:	d1a9      	bne.n	800ae7c <tcp_slowtmr+0x5ac>
    }
  }
}
 800af28:	bf00      	nop
 800af2a:	bf00      	nop
 800af2c:	3730      	adds	r7, #48	; 0x30
 800af2e:	46bd      	mov	sp, r7
 800af30:	bdb0      	pop	{r4, r5, r7, pc}
 800af32:	bf00      	nop
 800af34:	080147fc 	.word	0x080147fc
 800af38:	08014c8c 	.word	0x08014c8c
 800af3c:	08014840 	.word	0x08014840
 800af40:	24003470 	.word	0x24003470
 800af44:	2400347c 	.word	0x2400347c
 800af48:	08014cbc 	.word	0x08014cbc
 800af4c:	08014ce4 	.word	0x08014ce4

0800af50 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b082      	sub	sp, #8
 800af54:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800af56:	4b2d      	ldr	r3, [pc, #180]	; (800b00c <tcp_fasttmr+0xbc>)
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	3301      	adds	r3, #1
 800af5c:	b2da      	uxtb	r2, r3
 800af5e:	4b2b      	ldr	r3, [pc, #172]	; (800b00c <tcp_fasttmr+0xbc>)
 800af60:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800af62:	4b2b      	ldr	r3, [pc, #172]	; (800b010 <tcp_fasttmr+0xc0>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800af68:	e048      	b.n	800affc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	7f9a      	ldrb	r2, [r3, #30]
 800af6e:	4b27      	ldr	r3, [pc, #156]	; (800b00c <tcp_fasttmr+0xbc>)
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	429a      	cmp	r2, r3
 800af74:	d03f      	beq.n	800aff6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800af76:	4b25      	ldr	r3, [pc, #148]	; (800b00c <tcp_fasttmr+0xbc>)
 800af78:	781a      	ldrb	r2, [r3, #0]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	8b5b      	ldrh	r3, [r3, #26]
 800af82:	f003 0301 	and.w	r3, r3, #1
 800af86:	2b00      	cmp	r3, #0
 800af88:	d010      	beq.n	800afac <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	8b5b      	ldrh	r3, [r3, #26]
 800af8e:	f043 0302 	orr.w	r3, r3, #2
 800af92:	b29a      	uxth	r2, r3
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f004 f809 	bl	800efb0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	8b5b      	ldrh	r3, [r3, #26]
 800afa2:	f023 0303 	bic.w	r3, r3, #3
 800afa6:	b29a      	uxth	r2, r3
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	8b5b      	ldrh	r3, [r3, #26]
 800afb0:	f003 0308 	and.w	r3, r3, #8
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d009      	beq.n	800afcc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	8b5b      	ldrh	r3, [r3, #26]
 800afbc:	f023 0308 	bic.w	r3, r3, #8
 800afc0:	b29a      	uxth	r2, r3
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f7ff f8be 	bl	800a148 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	68db      	ldr	r3, [r3, #12]
 800afd0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d00a      	beq.n	800aff0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800afda:	4b0e      	ldr	r3, [pc, #56]	; (800b014 <tcp_fasttmr+0xc4>)
 800afdc:	2200      	movs	r2, #0
 800afde:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f000 f819 	bl	800b018 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800afe6:	4b0b      	ldr	r3, [pc, #44]	; (800b014 <tcp_fasttmr+0xc4>)
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d000      	beq.n	800aff0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800afee:	e7b8      	b.n	800af62 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	607b      	str	r3, [r7, #4]
 800aff4:	e002      	b.n	800affc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	68db      	ldr	r3, [r3, #12]
 800affa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d1b3      	bne.n	800af6a <tcp_fasttmr+0x1a>
    }
  }
}
 800b002:	bf00      	nop
 800b004:	bf00      	nop
 800b006:	3708      	adds	r7, #8
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}
 800b00c:	240000ea 	.word	0x240000ea
 800b010:	2400346c 	.word	0x2400346c
 800b014:	24003468 	.word	0x24003468

0800b018 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800b018:	b590      	push	{r4, r7, lr}
 800b01a:	b085      	sub	sp, #20
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d109      	bne.n	800b03a <tcp_process_refused_data+0x22>
 800b026:	4b37      	ldr	r3, [pc, #220]	; (800b104 <tcp_process_refused_data+0xec>)
 800b028:	f240 6209 	movw	r2, #1545	; 0x609
 800b02c:	4936      	ldr	r1, [pc, #216]	; (800b108 <tcp_process_refused_data+0xf0>)
 800b02e:	4837      	ldr	r0, [pc, #220]	; (800b10c <tcp_process_refused_data+0xf4>)
 800b030:	f007 fdf8 	bl	8012c24 <iprintf>
 800b034:	f06f 030f 	mvn.w	r3, #15
 800b038:	e060      	b.n	800b0fc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b03e:	7b5b      	ldrb	r3, [r3, #13]
 800b040:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b046:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2200      	movs	r2, #0
 800b04c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b054:	2b00      	cmp	r3, #0
 800b056:	d00b      	beq.n	800b070 <tcp_process_refused_data+0x58>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6918      	ldr	r0, [r3, #16]
 800b062:	2300      	movs	r3, #0
 800b064:	68ba      	ldr	r2, [r7, #8]
 800b066:	6879      	ldr	r1, [r7, #4]
 800b068:	47a0      	blx	r4
 800b06a:	4603      	mov	r3, r0
 800b06c:	73fb      	strb	r3, [r7, #15]
 800b06e:	e007      	b.n	800b080 <tcp_process_refused_data+0x68>
 800b070:	2300      	movs	r3, #0
 800b072:	68ba      	ldr	r2, [r7, #8]
 800b074:	6879      	ldr	r1, [r7, #4]
 800b076:	2000      	movs	r0, #0
 800b078:	f000 f8c2 	bl	800b200 <tcp_recv_null>
 800b07c:	4603      	mov	r3, r0
 800b07e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800b080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d12a      	bne.n	800b0de <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800b088:	7bbb      	ldrb	r3, [r7, #14]
 800b08a:	f003 0320 	and.w	r3, r3, #32
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d033      	beq.n	800b0fa <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b096:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b09a:	d005      	beq.n	800b0a8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	b29a      	uxth	r2, r3
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d00b      	beq.n	800b0ca <tcp_process_refused_data+0xb2>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6918      	ldr	r0, [r3, #16]
 800b0bc:	2300      	movs	r3, #0
 800b0be:	2200      	movs	r2, #0
 800b0c0:	6879      	ldr	r1, [r7, #4]
 800b0c2:	47a0      	blx	r4
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	73fb      	strb	r3, [r7, #15]
 800b0c8:	e001      	b.n	800b0ce <tcp_process_refused_data+0xb6>
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800b0ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0d2:	f113 0f0d 	cmn.w	r3, #13
 800b0d6:	d110      	bne.n	800b0fa <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800b0d8:	f06f 030c 	mvn.w	r3, #12
 800b0dc:	e00e      	b.n	800b0fc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800b0de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0e2:	f113 0f0d 	cmn.w	r3, #13
 800b0e6:	d102      	bne.n	800b0ee <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800b0e8:	f06f 030c 	mvn.w	r3, #12
 800b0ec:	e006      	b.n	800b0fc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	68ba      	ldr	r2, [r7, #8]
 800b0f2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800b0f4:	f06f 0304 	mvn.w	r3, #4
 800b0f8:	e000      	b.n	800b0fc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800b0fa:	2300      	movs	r3, #0
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3714      	adds	r7, #20
 800b100:	46bd      	mov	sp, r7
 800b102:	bd90      	pop	{r4, r7, pc}
 800b104:	080147fc 	.word	0x080147fc
 800b108:	08014d0c 	.word	0x08014d0c
 800b10c:	08014840 	.word	0x08014840

0800b110 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b084      	sub	sp, #16
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800b118:	e007      	b.n	800b12a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f000 f80a 	bl	800b13a <tcp_seg_free>
    seg = next;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d1f4      	bne.n	800b11a <tcp_segs_free+0xa>
  }
}
 800b130:	bf00      	nop
 800b132:	bf00      	nop
 800b134:	3710      	adds	r7, #16
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}

0800b13a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b13a:	b580      	push	{r7, lr}
 800b13c:	b082      	sub	sp, #8
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d00c      	beq.n	800b162 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	685b      	ldr	r3, [r3, #4]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d004      	beq.n	800b15a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	685b      	ldr	r3, [r3, #4]
 800b154:	4618      	mov	r0, r3
 800b156:	f7fe fbb3 	bl	80098c0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b15a:	6879      	ldr	r1, [r7, #4]
 800b15c:	2003      	movs	r0, #3
 800b15e:	f7fd fd39 	bl	8008bd4 <memp_free>
  }
}
 800b162:	bf00      	nop
 800b164:	3708      	adds	r7, #8
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
	...

0800b16c <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	460b      	mov	r3, r1
 800b176:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d107      	bne.n	800b18e <tcp_setprio+0x22>
 800b17e:	4b07      	ldr	r3, [pc, #28]	; (800b19c <tcp_setprio+0x30>)
 800b180:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800b184:	4906      	ldr	r1, [pc, #24]	; (800b1a0 <tcp_setprio+0x34>)
 800b186:	4807      	ldr	r0, [pc, #28]	; (800b1a4 <tcp_setprio+0x38>)
 800b188:	f007 fd4c 	bl	8012c24 <iprintf>
 800b18c:	e002      	b.n	800b194 <tcp_setprio+0x28>

  pcb->prio = prio;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	78fa      	ldrb	r2, [r7, #3]
 800b192:	755a      	strb	r2, [r3, #21]
}
 800b194:	3708      	adds	r7, #8
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
 800b19a:	bf00      	nop
 800b19c:	080147fc 	.word	0x080147fc
 800b1a0:	08014d34 	.word	0x08014d34
 800b1a4:	08014840 	.word	0x08014840

0800b1a8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b084      	sub	sp, #16
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d106      	bne.n	800b1c4 <tcp_seg_copy+0x1c>
 800b1b6:	4b0f      	ldr	r3, [pc, #60]	; (800b1f4 <tcp_seg_copy+0x4c>)
 800b1b8:	f240 6282 	movw	r2, #1666	; 0x682
 800b1bc:	490e      	ldr	r1, [pc, #56]	; (800b1f8 <tcp_seg_copy+0x50>)
 800b1be:	480f      	ldr	r0, [pc, #60]	; (800b1fc <tcp_seg_copy+0x54>)
 800b1c0:	f007 fd30 	bl	8012c24 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800b1c4:	2003      	movs	r0, #3
 800b1c6:	f7fd fc95 	bl	8008af4 <memp_malloc>
 800b1ca:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d101      	bne.n	800b1d6 <tcp_seg_copy+0x2e>
    return NULL;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	e00a      	b.n	800b1ec <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800b1d6:	2210      	movs	r2, #16
 800b1d8:	6879      	ldr	r1, [r7, #4]
 800b1da:	68f8      	ldr	r0, [r7, #12]
 800b1dc:	f007 fd0c 	bl	8012bf8 <memcpy>
  pbuf_ref(cseg->p);
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	685b      	ldr	r3, [r3, #4]
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f7fe fc0b 	bl	8009a00 <pbuf_ref>
  return cseg;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3710      	adds	r7, #16
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}
 800b1f4:	080147fc 	.word	0x080147fc
 800b1f8:	08014d50 	.word	0x08014d50
 800b1fc:	08014840 	.word	0x08014840

0800b200 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b084      	sub	sp, #16
 800b204:	af00      	add	r7, sp, #0
 800b206:	60f8      	str	r0, [r7, #12]
 800b208:	60b9      	str	r1, [r7, #8]
 800b20a:	607a      	str	r2, [r7, #4]
 800b20c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d109      	bne.n	800b228 <tcp_recv_null+0x28>
 800b214:	4b12      	ldr	r3, [pc, #72]	; (800b260 <tcp_recv_null+0x60>)
 800b216:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b21a:	4912      	ldr	r1, [pc, #72]	; (800b264 <tcp_recv_null+0x64>)
 800b21c:	4812      	ldr	r0, [pc, #72]	; (800b268 <tcp_recv_null+0x68>)
 800b21e:	f007 fd01 	bl	8012c24 <iprintf>
 800b222:	f06f 030f 	mvn.w	r3, #15
 800b226:	e016      	b.n	800b256 <tcp_recv_null+0x56>

  if (p != NULL) {
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d009      	beq.n	800b242 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	891b      	ldrh	r3, [r3, #8]
 800b232:	4619      	mov	r1, r3
 800b234:	68b8      	ldr	r0, [r7, #8]
 800b236:	f7ff fab5 	bl	800a7a4 <tcp_recved>
    pbuf_free(p);
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f7fe fb40 	bl	80098c0 <pbuf_free>
 800b240:	e008      	b.n	800b254 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800b242:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d104      	bne.n	800b254 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800b24a:	68b8      	ldr	r0, [r7, #8]
 800b24c:	f7fe ffe6 	bl	800a21c <tcp_close>
 800b250:	4603      	mov	r3, r0
 800b252:	e000      	b.n	800b256 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800b254:	2300      	movs	r3, #0
}
 800b256:	4618      	mov	r0, r3
 800b258:	3710      	adds	r7, #16
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}
 800b25e:	bf00      	nop
 800b260:	080147fc 	.word	0x080147fc
 800b264:	08014d6c 	.word	0x08014d6c
 800b268:	08014840 	.word	0x08014840

0800b26c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b086      	sub	sp, #24
 800b270:	af00      	add	r7, sp, #0
 800b272:	4603      	mov	r3, r0
 800b274:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	db01      	blt.n	800b282 <tcp_kill_prio+0x16>
 800b27e:	79fb      	ldrb	r3, [r7, #7]
 800b280:	e000      	b.n	800b284 <tcp_kill_prio+0x18>
 800b282:	237f      	movs	r3, #127	; 0x7f
 800b284:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800b286:	7afb      	ldrb	r3, [r7, #11]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d034      	beq.n	800b2f6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800b28c:	7afb      	ldrb	r3, [r7, #11]
 800b28e:	3b01      	subs	r3, #1
 800b290:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800b292:	2300      	movs	r3, #0
 800b294:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b296:	2300      	movs	r3, #0
 800b298:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b29a:	4b19      	ldr	r3, [pc, #100]	; (800b300 <tcp_kill_prio+0x94>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	617b      	str	r3, [r7, #20]
 800b2a0:	e01f      	b.n	800b2e2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	7d5b      	ldrb	r3, [r3, #21]
 800b2a6:	7afa      	ldrb	r2, [r7, #11]
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d80c      	bhi.n	800b2c6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800b2b0:	7afa      	ldrb	r2, [r7, #11]
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d112      	bne.n	800b2dc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b2b6:	4b13      	ldr	r3, [pc, #76]	; (800b304 <tcp_kill_prio+0x98>)
 800b2b8:	681a      	ldr	r2, [r3, #0]
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	6a1b      	ldr	r3, [r3, #32]
 800b2be:	1ad3      	subs	r3, r2, r3
 800b2c0:	68fa      	ldr	r2, [r7, #12]
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d80a      	bhi.n	800b2dc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800b2c6:	4b0f      	ldr	r3, [pc, #60]	; (800b304 <tcp_kill_prio+0x98>)
 800b2c8:	681a      	ldr	r2, [r3, #0]
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	6a1b      	ldr	r3, [r3, #32]
 800b2ce:	1ad3      	subs	r3, r2, r3
 800b2d0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	7d5b      	ldrb	r3, [r3, #21]
 800b2da:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	617b      	str	r3, [r7, #20]
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d1dc      	bne.n	800b2a2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d004      	beq.n	800b2f8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b2ee:	6938      	ldr	r0, [r7, #16]
 800b2f0:	f7ff f87e 	bl	800a3f0 <tcp_abort>
 800b2f4:	e000      	b.n	800b2f8 <tcp_kill_prio+0x8c>
    return;
 800b2f6:	bf00      	nop
  }
}
 800b2f8:	3718      	adds	r7, #24
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	2400346c 	.word	0x2400346c
 800b304:	24003470 	.word	0x24003470

0800b308 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b086      	sub	sp, #24
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	4603      	mov	r3, r0
 800b310:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800b312:	79fb      	ldrb	r3, [r7, #7]
 800b314:	2b08      	cmp	r3, #8
 800b316:	d009      	beq.n	800b32c <tcp_kill_state+0x24>
 800b318:	79fb      	ldrb	r3, [r7, #7]
 800b31a:	2b09      	cmp	r3, #9
 800b31c:	d006      	beq.n	800b32c <tcp_kill_state+0x24>
 800b31e:	4b1a      	ldr	r3, [pc, #104]	; (800b388 <tcp_kill_state+0x80>)
 800b320:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800b324:	4919      	ldr	r1, [pc, #100]	; (800b38c <tcp_kill_state+0x84>)
 800b326:	481a      	ldr	r0, [pc, #104]	; (800b390 <tcp_kill_state+0x88>)
 800b328:	f007 fc7c 	bl	8012c24 <iprintf>

  inactivity = 0;
 800b32c:	2300      	movs	r3, #0
 800b32e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b330:	2300      	movs	r3, #0
 800b332:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b334:	4b17      	ldr	r3, [pc, #92]	; (800b394 <tcp_kill_state+0x8c>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	617b      	str	r3, [r7, #20]
 800b33a:	e017      	b.n	800b36c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	7d1b      	ldrb	r3, [r3, #20]
 800b340:	79fa      	ldrb	r2, [r7, #7]
 800b342:	429a      	cmp	r2, r3
 800b344:	d10f      	bne.n	800b366 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b346:	4b14      	ldr	r3, [pc, #80]	; (800b398 <tcp_kill_state+0x90>)
 800b348:	681a      	ldr	r2, [r3, #0]
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	6a1b      	ldr	r3, [r3, #32]
 800b34e:	1ad3      	subs	r3, r2, r3
 800b350:	68fa      	ldr	r2, [r7, #12]
 800b352:	429a      	cmp	r2, r3
 800b354:	d807      	bhi.n	800b366 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800b356:	4b10      	ldr	r3, [pc, #64]	; (800b398 <tcp_kill_state+0x90>)
 800b358:	681a      	ldr	r2, [r3, #0]
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	6a1b      	ldr	r3, [r3, #32]
 800b35e:	1ad3      	subs	r3, r2, r3
 800b360:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	68db      	ldr	r3, [r3, #12]
 800b36a:	617b      	str	r3, [r7, #20]
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d1e4      	bne.n	800b33c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d003      	beq.n	800b380 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800b378:	2100      	movs	r1, #0
 800b37a:	6938      	ldr	r0, [r7, #16]
 800b37c:	f7fe ff7a 	bl	800a274 <tcp_abandon>
  }
}
 800b380:	bf00      	nop
 800b382:	3718      	adds	r7, #24
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}
 800b388:	080147fc 	.word	0x080147fc
 800b38c:	08014d88 	.word	0x08014d88
 800b390:	08014840 	.word	0x08014840
 800b394:	2400346c 	.word	0x2400346c
 800b398:	24003470 	.word	0x24003470

0800b39c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b084      	sub	sp, #16
 800b3a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b3aa:	4b12      	ldr	r3, [pc, #72]	; (800b3f4 <tcp_kill_timewait+0x58>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	60fb      	str	r3, [r7, #12]
 800b3b0:	e012      	b.n	800b3d8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b3b2:	4b11      	ldr	r3, [pc, #68]	; (800b3f8 <tcp_kill_timewait+0x5c>)
 800b3b4:	681a      	ldr	r2, [r3, #0]
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	6a1b      	ldr	r3, [r3, #32]
 800b3ba:	1ad3      	subs	r3, r2, r3
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	d807      	bhi.n	800b3d2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800b3c2:	4b0d      	ldr	r3, [pc, #52]	; (800b3f8 <tcp_kill_timewait+0x5c>)
 800b3c4:	681a      	ldr	r2, [r3, #0]
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	6a1b      	ldr	r3, [r3, #32]
 800b3ca:	1ad3      	subs	r3, r2, r3
 800b3cc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	68db      	ldr	r3, [r3, #12]
 800b3d6:	60fb      	str	r3, [r7, #12]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d1e9      	bne.n	800b3b2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d002      	beq.n	800b3ea <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b3e4:	68b8      	ldr	r0, [r7, #8]
 800b3e6:	f7ff f803 	bl	800a3f0 <tcp_abort>
  }
}
 800b3ea:	bf00      	nop
 800b3ec:	3710      	adds	r7, #16
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	2400347c 	.word	0x2400347c
 800b3f8:	24003470 	.word	0x24003470

0800b3fc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b082      	sub	sp, #8
 800b400:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800b402:	4b10      	ldr	r3, [pc, #64]	; (800b444 <tcp_handle_closepend+0x48>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b408:	e014      	b.n	800b434 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	68db      	ldr	r3, [r3, #12]
 800b40e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	8b5b      	ldrh	r3, [r3, #26]
 800b414:	f003 0308 	and.w	r3, r3, #8
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d009      	beq.n	800b430 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	8b5b      	ldrh	r3, [r3, #26]
 800b420:	f023 0308 	bic.w	r3, r3, #8
 800b424:	b29a      	uxth	r2, r3
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f7fe fe8c 	bl	800a148 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d1e7      	bne.n	800b40a <tcp_handle_closepend+0xe>
  }
}
 800b43a:	bf00      	nop
 800b43c:	bf00      	nop
 800b43e:	3708      	adds	r7, #8
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}
 800b444:	2400346c 	.word	0x2400346c

0800b448 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b084      	sub	sp, #16
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	4603      	mov	r3, r0
 800b450:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b452:	2001      	movs	r0, #1
 800b454:	f7fd fb4e 	bl	8008af4 <memp_malloc>
 800b458:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d126      	bne.n	800b4ae <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800b460:	f7ff ffcc 	bl	800b3fc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800b464:	f7ff ff9a 	bl	800b39c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b468:	2001      	movs	r0, #1
 800b46a:	f7fd fb43 	bl	8008af4 <memp_malloc>
 800b46e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d11b      	bne.n	800b4ae <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800b476:	2009      	movs	r0, #9
 800b478:	f7ff ff46 	bl	800b308 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b47c:	2001      	movs	r0, #1
 800b47e:	f7fd fb39 	bl	8008af4 <memp_malloc>
 800b482:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d111      	bne.n	800b4ae <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800b48a:	2008      	movs	r0, #8
 800b48c:	f7ff ff3c 	bl	800b308 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b490:	2001      	movs	r0, #1
 800b492:	f7fd fb2f 	bl	8008af4 <memp_malloc>
 800b496:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d107      	bne.n	800b4ae <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800b49e:	79fb      	ldrb	r3, [r7, #7]
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7ff fee3 	bl	800b26c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b4a6:	2001      	movs	r0, #1
 800b4a8:	f7fd fb24 	bl	8008af4 <memp_malloc>
 800b4ac:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d03f      	beq.n	800b534 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b4b4:	229c      	movs	r2, #156	; 0x9c
 800b4b6:	2100      	movs	r1, #0
 800b4b8:	68f8      	ldr	r0, [r7, #12]
 800b4ba:	f007 fbab 	bl	8012c14 <memset>
    pcb->prio = prio;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	79fa      	ldrb	r2, [r7, #7]
 800b4c2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b4ca:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b4d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	22ff      	movs	r2, #255	; 0xff
 800b4e2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b4ea:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2206      	movs	r2, #6
 800b4f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	2206      	movs	r2, #6
 800b4f8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b500:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	2201      	movs	r2, #1
 800b506:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800b50a:	4b0d      	ldr	r3, [pc, #52]	; (800b540 <tcp_alloc+0xf8>)
 800b50c:	681a      	ldr	r2, [r3, #0]
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800b512:	4b0c      	ldr	r3, [pc, #48]	; (800b544 <tcp_alloc+0xfc>)
 800b514:	781a      	ldrb	r2, [r3, #0]
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b520:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	4a08      	ldr	r2, [pc, #32]	; (800b548 <tcp_alloc+0x100>)
 800b528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	4a07      	ldr	r2, [pc, #28]	; (800b54c <tcp_alloc+0x104>)
 800b530:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800b534:	68fb      	ldr	r3, [r7, #12]
}
 800b536:	4618      	mov	r0, r3
 800b538:	3710      	adds	r7, #16
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
 800b53e:	bf00      	nop
 800b540:	24003470 	.word	0x24003470
 800b544:	240000ea 	.word	0x240000ea
 800b548:	0800b201 	.word	0x0800b201
 800b54c:	006ddd00 	.word	0x006ddd00

0800b550 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800b554:	2040      	movs	r0, #64	; 0x40
 800b556:	f7ff ff77 	bl	800b448 <tcp_alloc>
 800b55a:	4603      	mov	r3, r0
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800b560:	b480      	push	{r7}
 800b562:	b083      	sub	sp, #12
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d002      	beq.n	800b576 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	683a      	ldr	r2, [r7, #0]
 800b574:	611a      	str	r2, [r3, #16]
  }
}
 800b576:	bf00      	nop
 800b578:	370c      	adds	r7, #12
 800b57a:	46bd      	mov	sp, r7
 800b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b580:	4770      	bx	lr
	...

0800b584 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b082      	sub	sp, #8
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d00e      	beq.n	800b5b2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	7d1b      	ldrb	r3, [r3, #20]
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d106      	bne.n	800b5aa <tcp_recv+0x26>
 800b59c:	4b07      	ldr	r3, [pc, #28]	; (800b5bc <tcp_recv+0x38>)
 800b59e:	f240 72df 	movw	r2, #2015	; 0x7df
 800b5a2:	4907      	ldr	r1, [pc, #28]	; (800b5c0 <tcp_recv+0x3c>)
 800b5a4:	4807      	ldr	r0, [pc, #28]	; (800b5c4 <tcp_recv+0x40>)
 800b5a6:	f007 fb3d 	bl	8012c24 <iprintf>
    pcb->recv = recv;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	683a      	ldr	r2, [r7, #0]
 800b5ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800b5b2:	bf00      	nop
 800b5b4:	3708      	adds	r7, #8
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	080147fc 	.word	0x080147fc
 800b5c0:	08014d98 	.word	0x08014d98
 800b5c4:	08014840 	.word	0x08014840

0800b5c8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b082      	sub	sp, #8
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
 800b5d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d00e      	beq.n	800b5f6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	7d1b      	ldrb	r3, [r3, #20]
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d106      	bne.n	800b5ee <tcp_sent+0x26>
 800b5e0:	4b07      	ldr	r3, [pc, #28]	; (800b600 <tcp_sent+0x38>)
 800b5e2:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800b5e6:	4907      	ldr	r1, [pc, #28]	; (800b604 <tcp_sent+0x3c>)
 800b5e8:	4807      	ldr	r0, [pc, #28]	; (800b608 <tcp_sent+0x40>)
 800b5ea:	f007 fb1b 	bl	8012c24 <iprintf>
    pcb->sent = sent;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	683a      	ldr	r2, [r7, #0]
 800b5f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800b5f6:	bf00      	nop
 800b5f8:	3708      	adds	r7, #8
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
 800b5fe:	bf00      	nop
 800b600:	080147fc 	.word	0x080147fc
 800b604:	08014dc0 	.word	0x08014dc0
 800b608:	08014840 	.word	0x08014840

0800b60c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d00e      	beq.n	800b63a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	7d1b      	ldrb	r3, [r3, #20]
 800b620:	2b01      	cmp	r3, #1
 800b622:	d106      	bne.n	800b632 <tcp_err+0x26>
 800b624:	4b07      	ldr	r3, [pc, #28]	; (800b644 <tcp_err+0x38>)
 800b626:	f640 020d 	movw	r2, #2061	; 0x80d
 800b62a:	4907      	ldr	r1, [pc, #28]	; (800b648 <tcp_err+0x3c>)
 800b62c:	4807      	ldr	r0, [pc, #28]	; (800b64c <tcp_err+0x40>)
 800b62e:	f007 faf9 	bl	8012c24 <iprintf>
    pcb->errf = err;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	683a      	ldr	r2, [r7, #0]
 800b636:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800b63a:	bf00      	nop
 800b63c:	3708      	adds	r7, #8
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
 800b642:	bf00      	nop
 800b644:	080147fc 	.word	0x080147fc
 800b648:	08014de8 	.word	0x08014de8
 800b64c:	08014840 	.word	0x08014840

0800b650 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800b650:	b480      	push	{r7}
 800b652:	b085      	sub	sp, #20
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d008      	beq.n	800b672 <tcp_accept+0x22>
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	7d1b      	ldrb	r3, [r3, #20]
 800b664:	2b01      	cmp	r3, #1
 800b666:	d104      	bne.n	800b672 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	683a      	ldr	r2, [r7, #0]
 800b670:	619a      	str	r2, [r3, #24]
  }
}
 800b672:	bf00      	nop
 800b674:	3714      	adds	r7, #20
 800b676:	46bd      	mov	sp, r7
 800b678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67c:	4770      	bx	lr
	...

0800b680 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b084      	sub	sp, #16
 800b684:	af00      	add	r7, sp, #0
 800b686:	60f8      	str	r0, [r7, #12]
 800b688:	60b9      	str	r1, [r7, #8]
 800b68a:	4613      	mov	r3, r2
 800b68c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d107      	bne.n	800b6a4 <tcp_poll+0x24>
 800b694:	4b0e      	ldr	r3, [pc, #56]	; (800b6d0 <tcp_poll+0x50>)
 800b696:	f640 023d 	movw	r2, #2109	; 0x83d
 800b69a:	490e      	ldr	r1, [pc, #56]	; (800b6d4 <tcp_poll+0x54>)
 800b69c:	480e      	ldr	r0, [pc, #56]	; (800b6d8 <tcp_poll+0x58>)
 800b69e:	f007 fac1 	bl	8012c24 <iprintf>
 800b6a2:	e011      	b.n	800b6c8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	7d1b      	ldrb	r3, [r3, #20]
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	d106      	bne.n	800b6ba <tcp_poll+0x3a>
 800b6ac:	4b08      	ldr	r3, [pc, #32]	; (800b6d0 <tcp_poll+0x50>)
 800b6ae:	f640 023e 	movw	r2, #2110	; 0x83e
 800b6b2:	490a      	ldr	r1, [pc, #40]	; (800b6dc <tcp_poll+0x5c>)
 800b6b4:	4808      	ldr	r0, [pc, #32]	; (800b6d8 <tcp_poll+0x58>)
 800b6b6:	f007 fab5 	bl	8012c24 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	68ba      	ldr	r2, [r7, #8]
 800b6be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	79fa      	ldrb	r2, [r7, #7]
 800b6c6:	775a      	strb	r2, [r3, #29]
}
 800b6c8:	3710      	adds	r7, #16
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	080147fc 	.word	0x080147fc
 800b6d4:	08014e10 	.word	0x08014e10
 800b6d8:	08014840 	.word	0x08014840
 800b6dc:	08014e28 	.word	0x08014e28

0800b6e0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b082      	sub	sp, #8
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d107      	bne.n	800b6fe <tcp_pcb_purge+0x1e>
 800b6ee:	4b21      	ldr	r3, [pc, #132]	; (800b774 <tcp_pcb_purge+0x94>)
 800b6f0:	f640 0251 	movw	r2, #2129	; 0x851
 800b6f4:	4920      	ldr	r1, [pc, #128]	; (800b778 <tcp_pcb_purge+0x98>)
 800b6f6:	4821      	ldr	r0, [pc, #132]	; (800b77c <tcp_pcb_purge+0x9c>)
 800b6f8:	f007 fa94 	bl	8012c24 <iprintf>
 800b6fc:	e037      	b.n	800b76e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	7d1b      	ldrb	r3, [r3, #20]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d033      	beq.n	800b76e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800b70a:	2b0a      	cmp	r3, #10
 800b70c:	d02f      	beq.n	800b76e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800b712:	2b01      	cmp	r3, #1
 800b714:	d02b      	beq.n	800b76e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d007      	beq.n	800b72e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b722:	4618      	mov	r0, r3
 800b724:	f7fe f8cc 	bl	80098c0 <pbuf_free>
      pcb->refused_data = NULL;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2200      	movs	r2, #0
 800b72c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b732:	2b00      	cmp	r3, #0
 800b734:	d002      	beq.n	800b73c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f000 f986 	bl	800ba48 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b742:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b748:	4618      	mov	r0, r3
 800b74a:	f7ff fce1 	bl	800b110 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b752:	4618      	mov	r0, r3
 800b754:	f7ff fcdc 	bl	800b110 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2200      	movs	r2, #0
 800b75c:	66da      	str	r2, [r3, #108]	; 0x6c
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2200      	movs	r2, #0
 800b76a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800b76e:	3708      	adds	r7, #8
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}
 800b774:	080147fc 	.word	0x080147fc
 800b778:	08014e48 	.word	0x08014e48
 800b77c:	08014840 	.word	0x08014840

0800b780 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b084      	sub	sp, #16
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d106      	bne.n	800b79e <tcp_pcb_remove+0x1e>
 800b790:	4b3e      	ldr	r3, [pc, #248]	; (800b88c <tcp_pcb_remove+0x10c>)
 800b792:	f640 0283 	movw	r2, #2179	; 0x883
 800b796:	493e      	ldr	r1, [pc, #248]	; (800b890 <tcp_pcb_remove+0x110>)
 800b798:	483e      	ldr	r0, [pc, #248]	; (800b894 <tcp_pcb_remove+0x114>)
 800b79a:	f007 fa43 	bl	8012c24 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d106      	bne.n	800b7b2 <tcp_pcb_remove+0x32>
 800b7a4:	4b39      	ldr	r3, [pc, #228]	; (800b88c <tcp_pcb_remove+0x10c>)
 800b7a6:	f640 0284 	movw	r2, #2180	; 0x884
 800b7aa:	493b      	ldr	r1, [pc, #236]	; (800b898 <tcp_pcb_remove+0x118>)
 800b7ac:	4839      	ldr	r0, [pc, #228]	; (800b894 <tcp_pcb_remove+0x114>)
 800b7ae:	f007 fa39 	bl	8012c24 <iprintf>

  TCP_RMV(pcblist, pcb);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	683a      	ldr	r2, [r7, #0]
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	d105      	bne.n	800b7c8 <tcp_pcb_remove+0x48>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	68da      	ldr	r2, [r3, #12]
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	601a      	str	r2, [r3, #0]
 800b7c6:	e013      	b.n	800b7f0 <tcp_pcb_remove+0x70>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	60fb      	str	r3, [r7, #12]
 800b7ce:	e00c      	b.n	800b7ea <tcp_pcb_remove+0x6a>
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	68db      	ldr	r3, [r3, #12]
 800b7d4:	683a      	ldr	r2, [r7, #0]
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d104      	bne.n	800b7e4 <tcp_pcb_remove+0x64>
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	68da      	ldr	r2, [r3, #12]
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	60da      	str	r2, [r3, #12]
 800b7e2:	e005      	b.n	800b7f0 <tcp_pcb_remove+0x70>
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	60fb      	str	r3, [r7, #12]
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d1ef      	bne.n	800b7d0 <tcp_pcb_remove+0x50>
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800b7f6:	6838      	ldr	r0, [r7, #0]
 800b7f8:	f7ff ff72 	bl	800b6e0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	7d1b      	ldrb	r3, [r3, #20]
 800b800:	2b0a      	cmp	r3, #10
 800b802:	d013      	beq.n	800b82c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d00f      	beq.n	800b82c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	8b5b      	ldrh	r3, [r3, #26]
 800b810:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800b814:	2b00      	cmp	r3, #0
 800b816:	d009      	beq.n	800b82c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	8b5b      	ldrh	r3, [r3, #26]
 800b81c:	f043 0302 	orr.w	r3, r3, #2
 800b820:	b29a      	uxth	r2, r3
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b826:	6838      	ldr	r0, [r7, #0]
 800b828:	f003 fbc2 	bl	800efb0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	7d1b      	ldrb	r3, [r3, #20]
 800b830:	2b01      	cmp	r3, #1
 800b832:	d020      	beq.n	800b876 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d006      	beq.n	800b84a <tcp_pcb_remove+0xca>
 800b83c:	4b13      	ldr	r3, [pc, #76]	; (800b88c <tcp_pcb_remove+0x10c>)
 800b83e:	f640 0293 	movw	r2, #2195	; 0x893
 800b842:	4916      	ldr	r1, [pc, #88]	; (800b89c <tcp_pcb_remove+0x11c>)
 800b844:	4813      	ldr	r0, [pc, #76]	; (800b894 <tcp_pcb_remove+0x114>)
 800b846:	f007 f9ed 	bl	8012c24 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d006      	beq.n	800b860 <tcp_pcb_remove+0xe0>
 800b852:	4b0e      	ldr	r3, [pc, #56]	; (800b88c <tcp_pcb_remove+0x10c>)
 800b854:	f640 0294 	movw	r2, #2196	; 0x894
 800b858:	4911      	ldr	r1, [pc, #68]	; (800b8a0 <tcp_pcb_remove+0x120>)
 800b85a:	480e      	ldr	r0, [pc, #56]	; (800b894 <tcp_pcb_remove+0x114>)
 800b85c:	f007 f9e2 	bl	8012c24 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b864:	2b00      	cmp	r3, #0
 800b866:	d006      	beq.n	800b876 <tcp_pcb_remove+0xf6>
 800b868:	4b08      	ldr	r3, [pc, #32]	; (800b88c <tcp_pcb_remove+0x10c>)
 800b86a:	f640 0296 	movw	r2, #2198	; 0x896
 800b86e:	490d      	ldr	r1, [pc, #52]	; (800b8a4 <tcp_pcb_remove+0x124>)
 800b870:	4808      	ldr	r0, [pc, #32]	; (800b894 <tcp_pcb_remove+0x114>)
 800b872:	f007 f9d7 	bl	8012c24 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	2200      	movs	r2, #0
 800b87a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	2200      	movs	r2, #0
 800b880:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800b882:	bf00      	nop
 800b884:	3710      	adds	r7, #16
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
 800b88a:	bf00      	nop
 800b88c:	080147fc 	.word	0x080147fc
 800b890:	08014e64 	.word	0x08014e64
 800b894:	08014840 	.word	0x08014840
 800b898:	08014e80 	.word	0x08014e80
 800b89c:	08014ea0 	.word	0x08014ea0
 800b8a0:	08014eb8 	.word	0x08014eb8
 800b8a4:	08014ed4 	.word	0x08014ed4

0800b8a8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d106      	bne.n	800b8c4 <tcp_next_iss+0x1c>
 800b8b6:	4b0a      	ldr	r3, [pc, #40]	; (800b8e0 <tcp_next_iss+0x38>)
 800b8b8:	f640 02af 	movw	r2, #2223	; 0x8af
 800b8bc:	4909      	ldr	r1, [pc, #36]	; (800b8e4 <tcp_next_iss+0x3c>)
 800b8be:	480a      	ldr	r0, [pc, #40]	; (800b8e8 <tcp_next_iss+0x40>)
 800b8c0:	f007 f9b0 	bl	8012c24 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800b8c4:	4b09      	ldr	r3, [pc, #36]	; (800b8ec <tcp_next_iss+0x44>)
 800b8c6:	681a      	ldr	r2, [r3, #0]
 800b8c8:	4b09      	ldr	r3, [pc, #36]	; (800b8f0 <tcp_next_iss+0x48>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	4413      	add	r3, r2
 800b8ce:	4a07      	ldr	r2, [pc, #28]	; (800b8ec <tcp_next_iss+0x44>)
 800b8d0:	6013      	str	r3, [r2, #0]
  return iss;
 800b8d2:	4b06      	ldr	r3, [pc, #24]	; (800b8ec <tcp_next_iss+0x44>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	3708      	adds	r7, #8
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}
 800b8de:	bf00      	nop
 800b8e0:	080147fc 	.word	0x080147fc
 800b8e4:	08014eec 	.word	0x08014eec
 800b8e8:	08014840 	.word	0x08014840
 800b8ec:	24000028 	.word	0x24000028
 800b8f0:	24003470 	.word	0x24003470

0800b8f4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b086      	sub	sp, #24
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	60b9      	str	r1, [r7, #8]
 800b8fe:	607a      	str	r2, [r7, #4]
 800b900:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d106      	bne.n	800b916 <tcp_eff_send_mss_netif+0x22>
 800b908:	4b14      	ldr	r3, [pc, #80]	; (800b95c <tcp_eff_send_mss_netif+0x68>)
 800b90a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800b90e:	4914      	ldr	r1, [pc, #80]	; (800b960 <tcp_eff_send_mss_netif+0x6c>)
 800b910:	4814      	ldr	r0, [pc, #80]	; (800b964 <tcp_eff_send_mss_netif+0x70>)
 800b912:	f007 f987 	bl	8012c24 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d101      	bne.n	800b920 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800b91c:	89fb      	ldrh	r3, [r7, #14]
 800b91e:	e019      	b.n	800b954 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b924:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800b926:	8afb      	ldrh	r3, [r7, #22]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d012      	beq.n	800b952 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800b92c:	2328      	movs	r3, #40	; 0x28
 800b92e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800b930:	8afa      	ldrh	r2, [r7, #22]
 800b932:	8abb      	ldrh	r3, [r7, #20]
 800b934:	429a      	cmp	r2, r3
 800b936:	d904      	bls.n	800b942 <tcp_eff_send_mss_netif+0x4e>
 800b938:	8afa      	ldrh	r2, [r7, #22]
 800b93a:	8abb      	ldrh	r3, [r7, #20]
 800b93c:	1ad3      	subs	r3, r2, r3
 800b93e:	b29b      	uxth	r3, r3
 800b940:	e000      	b.n	800b944 <tcp_eff_send_mss_netif+0x50>
 800b942:	2300      	movs	r3, #0
 800b944:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b946:	8a7a      	ldrh	r2, [r7, #18]
 800b948:	89fb      	ldrh	r3, [r7, #14]
 800b94a:	4293      	cmp	r3, r2
 800b94c:	bf28      	it	cs
 800b94e:	4613      	movcs	r3, r2
 800b950:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800b952:	89fb      	ldrh	r3, [r7, #14]
}
 800b954:	4618      	mov	r0, r3
 800b956:	3718      	adds	r7, #24
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}
 800b95c:	080147fc 	.word	0x080147fc
 800b960:	08014f08 	.word	0x08014f08
 800b964:	08014840 	.word	0x08014840

0800b968 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b084      	sub	sp, #16
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d119      	bne.n	800b9b0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800b97c:	4b10      	ldr	r3, [pc, #64]	; (800b9c0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800b97e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800b982:	4910      	ldr	r1, [pc, #64]	; (800b9c4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800b984:	4810      	ldr	r0, [pc, #64]	; (800b9c8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800b986:	f007 f94d 	bl	8012c24 <iprintf>

  while (pcb != NULL) {
 800b98a:	e011      	b.n	800b9b0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681a      	ldr	r2, [r3, #0]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	429a      	cmp	r2, r3
 800b996:	d108      	bne.n	800b9aa <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	68db      	ldr	r3, [r3, #12]
 800b99c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800b99e:	68f8      	ldr	r0, [r7, #12]
 800b9a0:	f7fe fd26 	bl	800a3f0 <tcp_abort>
      pcb = next;
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	60fb      	str	r3, [r7, #12]
 800b9a8:	e002      	b.n	800b9b0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	68db      	ldr	r3, [r3, #12]
 800b9ae:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d1ea      	bne.n	800b98c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800b9b6:	bf00      	nop
 800b9b8:	bf00      	nop
 800b9ba:	3710      	adds	r7, #16
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	080147fc 	.word	0x080147fc
 800b9c4:	08014f30 	.word	0x08014f30
 800b9c8:	08014840 	.word	0x08014840

0800b9cc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b084      	sub	sp, #16
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
 800b9d4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d02a      	beq.n	800ba32 <tcp_netif_ip_addr_changed+0x66>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d026      	beq.n	800ba32 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800b9e4:	4b15      	ldr	r3, [pc, #84]	; (800ba3c <tcp_netif_ip_addr_changed+0x70>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f7ff ffbc 	bl	800b968 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800b9f0:	4b13      	ldr	r3, [pc, #76]	; (800ba40 <tcp_netif_ip_addr_changed+0x74>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4619      	mov	r1, r3
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f7ff ffb6 	bl	800b968 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d017      	beq.n	800ba32 <tcp_netif_ip_addr_changed+0x66>
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d013      	beq.n	800ba32 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ba0a:	4b0e      	ldr	r3, [pc, #56]	; (800ba44 <tcp_netif_ip_addr_changed+0x78>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	60fb      	str	r3, [r7, #12]
 800ba10:	e00c      	b.n	800ba2c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681a      	ldr	r2, [r3, #0]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d103      	bne.n	800ba26 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	681a      	ldr	r2, [r3, #0]
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	68db      	ldr	r3, [r3, #12]
 800ba2a:	60fb      	str	r3, [r7, #12]
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d1ef      	bne.n	800ba12 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ba32:	bf00      	nop
 800ba34:	3710      	adds	r7, #16
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}
 800ba3a:	bf00      	nop
 800ba3c:	2400346c 	.word	0x2400346c
 800ba40:	24003478 	.word	0x24003478
 800ba44:	24003474 	.word	0x24003474

0800ba48 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b082      	sub	sp, #8
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d007      	beq.n	800ba68 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f7ff fb57 	bl	800b110 <tcp_segs_free>
    pcb->ooseq = NULL;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2200      	movs	r2, #0
 800ba66:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800ba68:	bf00      	nop
 800ba6a:	3708      	adds	r7, #8
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}

0800ba70 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800ba70:	b590      	push	{r4, r7, lr}
 800ba72:	b08d      	sub	sp, #52	; 0x34
 800ba74:	af04      	add	r7, sp, #16
 800ba76:	6078      	str	r0, [r7, #4]
 800ba78:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d105      	bne.n	800ba8c <tcp_input+0x1c>
 800ba80:	4b9b      	ldr	r3, [pc, #620]	; (800bcf0 <tcp_input+0x280>)
 800ba82:	2283      	movs	r2, #131	; 0x83
 800ba84:	499b      	ldr	r1, [pc, #620]	; (800bcf4 <tcp_input+0x284>)
 800ba86:	489c      	ldr	r0, [pc, #624]	; (800bcf8 <tcp_input+0x288>)
 800ba88:	f007 f8cc 	bl	8012c24 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	4a9a      	ldr	r2, [pc, #616]	; (800bcfc <tcp_input+0x28c>)
 800ba92:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	895b      	ldrh	r3, [r3, #10]
 800ba98:	2b13      	cmp	r3, #19
 800ba9a:	f240 83c4 	bls.w	800c226 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ba9e:	4b98      	ldr	r3, [pc, #608]	; (800bd00 <tcp_input+0x290>)
 800baa0:	695b      	ldr	r3, [r3, #20]
 800baa2:	4a97      	ldr	r2, [pc, #604]	; (800bd00 <tcp_input+0x290>)
 800baa4:	6812      	ldr	r2, [r2, #0]
 800baa6:	4611      	mov	r1, r2
 800baa8:	4618      	mov	r0, r3
 800baaa:	f006 f891 	bl	8011bd0 <ip4_addr_isbroadcast_u32>
 800baae:	4603      	mov	r3, r0
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	f040 83ba 	bne.w	800c22a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800bab6:	4b92      	ldr	r3, [pc, #584]	; (800bd00 <tcp_input+0x290>)
 800bab8:	695b      	ldr	r3, [r3, #20]
 800baba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800babe:	2be0      	cmp	r3, #224	; 0xe0
 800bac0:	f000 83b3 	beq.w	800c22a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800bac4:	4b8d      	ldr	r3, [pc, #564]	; (800bcfc <tcp_input+0x28c>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	899b      	ldrh	r3, [r3, #12]
 800baca:	b29b      	uxth	r3, r3
 800bacc:	4618      	mov	r0, r3
 800bace:	f7fc fae1 	bl	8008094 <lwip_htons>
 800bad2:	4603      	mov	r3, r0
 800bad4:	0b1b      	lsrs	r3, r3, #12
 800bad6:	b29b      	uxth	r3, r3
 800bad8:	b2db      	uxtb	r3, r3
 800bada:	009b      	lsls	r3, r3, #2
 800badc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800bade:	7cbb      	ldrb	r3, [r7, #18]
 800bae0:	2b13      	cmp	r3, #19
 800bae2:	f240 83a4 	bls.w	800c22e <tcp_input+0x7be>
 800bae6:	7cbb      	ldrb	r3, [r7, #18]
 800bae8:	b29a      	uxth	r2, r3
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	891b      	ldrh	r3, [r3, #8]
 800baee:	429a      	cmp	r2, r3
 800baf0:	f200 839d 	bhi.w	800c22e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800baf4:	7cbb      	ldrb	r3, [r7, #18]
 800baf6:	b29b      	uxth	r3, r3
 800baf8:	3b14      	subs	r3, #20
 800bafa:	b29a      	uxth	r2, r3
 800bafc:	4b81      	ldr	r3, [pc, #516]	; (800bd04 <tcp_input+0x294>)
 800bafe:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800bb00:	4b81      	ldr	r3, [pc, #516]	; (800bd08 <tcp_input+0x298>)
 800bb02:	2200      	movs	r2, #0
 800bb04:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	895a      	ldrh	r2, [r3, #10]
 800bb0a:	7cbb      	ldrb	r3, [r7, #18]
 800bb0c:	b29b      	uxth	r3, r3
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d309      	bcc.n	800bb26 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800bb12:	4b7c      	ldr	r3, [pc, #496]	; (800bd04 <tcp_input+0x294>)
 800bb14:	881a      	ldrh	r2, [r3, #0]
 800bb16:	4b7d      	ldr	r3, [pc, #500]	; (800bd0c <tcp_input+0x29c>)
 800bb18:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800bb1a:	7cbb      	ldrb	r3, [r7, #18]
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f7fd fe48 	bl	80097b4 <pbuf_remove_header>
 800bb24:	e04e      	b.n	800bbc4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d105      	bne.n	800bb3a <tcp_input+0xca>
 800bb2e:	4b70      	ldr	r3, [pc, #448]	; (800bcf0 <tcp_input+0x280>)
 800bb30:	22c2      	movs	r2, #194	; 0xc2
 800bb32:	4977      	ldr	r1, [pc, #476]	; (800bd10 <tcp_input+0x2a0>)
 800bb34:	4870      	ldr	r0, [pc, #448]	; (800bcf8 <tcp_input+0x288>)
 800bb36:	f007 f875 	bl	8012c24 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800bb3a:	2114      	movs	r1, #20
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f7fd fe39 	bl	80097b4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	895a      	ldrh	r2, [r3, #10]
 800bb46:	4b71      	ldr	r3, [pc, #452]	; (800bd0c <tcp_input+0x29c>)
 800bb48:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800bb4a:	4b6e      	ldr	r3, [pc, #440]	; (800bd04 <tcp_input+0x294>)
 800bb4c:	881a      	ldrh	r2, [r3, #0]
 800bb4e:	4b6f      	ldr	r3, [pc, #444]	; (800bd0c <tcp_input+0x29c>)
 800bb50:	881b      	ldrh	r3, [r3, #0]
 800bb52:	1ad3      	subs	r3, r2, r3
 800bb54:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800bb56:	4b6d      	ldr	r3, [pc, #436]	; (800bd0c <tcp_input+0x29c>)
 800bb58:	881b      	ldrh	r3, [r3, #0]
 800bb5a:	4619      	mov	r1, r3
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f7fd fe29 	bl	80097b4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	895b      	ldrh	r3, [r3, #10]
 800bb68:	8a3a      	ldrh	r2, [r7, #16]
 800bb6a:	429a      	cmp	r2, r3
 800bb6c:	f200 8361 	bhi.w	800c232 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	4a64      	ldr	r2, [pc, #400]	; (800bd08 <tcp_input+0x298>)
 800bb78:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	8a3a      	ldrh	r2, [r7, #16]
 800bb80:	4611      	mov	r1, r2
 800bb82:	4618      	mov	r0, r3
 800bb84:	f7fd fe16 	bl	80097b4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	891a      	ldrh	r2, [r3, #8]
 800bb8c:	8a3b      	ldrh	r3, [r7, #16]
 800bb8e:	1ad3      	subs	r3, r2, r3
 800bb90:	b29a      	uxth	r2, r3
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	895b      	ldrh	r3, [r3, #10]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d005      	beq.n	800bbaa <tcp_input+0x13a>
 800bb9e:	4b54      	ldr	r3, [pc, #336]	; (800bcf0 <tcp_input+0x280>)
 800bba0:	22df      	movs	r2, #223	; 0xdf
 800bba2:	495c      	ldr	r1, [pc, #368]	; (800bd14 <tcp_input+0x2a4>)
 800bba4:	4854      	ldr	r0, [pc, #336]	; (800bcf8 <tcp_input+0x288>)
 800bba6:	f007 f83d 	bl	8012c24 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	891a      	ldrh	r2, [r3, #8]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	891b      	ldrh	r3, [r3, #8]
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d005      	beq.n	800bbc4 <tcp_input+0x154>
 800bbb8:	4b4d      	ldr	r3, [pc, #308]	; (800bcf0 <tcp_input+0x280>)
 800bbba:	22e0      	movs	r2, #224	; 0xe0
 800bbbc:	4956      	ldr	r1, [pc, #344]	; (800bd18 <tcp_input+0x2a8>)
 800bbbe:	484e      	ldr	r0, [pc, #312]	; (800bcf8 <tcp_input+0x288>)
 800bbc0:	f007 f830 	bl	8012c24 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800bbc4:	4b4d      	ldr	r3, [pc, #308]	; (800bcfc <tcp_input+0x28c>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	881b      	ldrh	r3, [r3, #0]
 800bbca:	b29b      	uxth	r3, r3
 800bbcc:	4a4b      	ldr	r2, [pc, #300]	; (800bcfc <tcp_input+0x28c>)
 800bbce:	6814      	ldr	r4, [r2, #0]
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f7fc fa5f 	bl	8008094 <lwip_htons>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800bbda:	4b48      	ldr	r3, [pc, #288]	; (800bcfc <tcp_input+0x28c>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	885b      	ldrh	r3, [r3, #2]
 800bbe0:	b29b      	uxth	r3, r3
 800bbe2:	4a46      	ldr	r2, [pc, #280]	; (800bcfc <tcp_input+0x28c>)
 800bbe4:	6814      	ldr	r4, [r2, #0]
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f7fc fa54 	bl	8008094 <lwip_htons>
 800bbec:	4603      	mov	r3, r0
 800bbee:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800bbf0:	4b42      	ldr	r3, [pc, #264]	; (800bcfc <tcp_input+0x28c>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	4a41      	ldr	r2, [pc, #260]	; (800bcfc <tcp_input+0x28c>)
 800bbf8:	6814      	ldr	r4, [r2, #0]
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7fc fa5f 	bl	80080be <lwip_htonl>
 800bc00:	4603      	mov	r3, r0
 800bc02:	6063      	str	r3, [r4, #4]
 800bc04:	6863      	ldr	r3, [r4, #4]
 800bc06:	4a45      	ldr	r2, [pc, #276]	; (800bd1c <tcp_input+0x2ac>)
 800bc08:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800bc0a:	4b3c      	ldr	r3, [pc, #240]	; (800bcfc <tcp_input+0x28c>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	689b      	ldr	r3, [r3, #8]
 800bc10:	4a3a      	ldr	r2, [pc, #232]	; (800bcfc <tcp_input+0x28c>)
 800bc12:	6814      	ldr	r4, [r2, #0]
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7fc fa52 	bl	80080be <lwip_htonl>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	60a3      	str	r3, [r4, #8]
 800bc1e:	68a3      	ldr	r3, [r4, #8]
 800bc20:	4a3f      	ldr	r2, [pc, #252]	; (800bd20 <tcp_input+0x2b0>)
 800bc22:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800bc24:	4b35      	ldr	r3, [pc, #212]	; (800bcfc <tcp_input+0x28c>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	89db      	ldrh	r3, [r3, #14]
 800bc2a:	b29b      	uxth	r3, r3
 800bc2c:	4a33      	ldr	r2, [pc, #204]	; (800bcfc <tcp_input+0x28c>)
 800bc2e:	6814      	ldr	r4, [r2, #0]
 800bc30:	4618      	mov	r0, r3
 800bc32:	f7fc fa2f 	bl	8008094 <lwip_htons>
 800bc36:	4603      	mov	r3, r0
 800bc38:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800bc3a:	4b30      	ldr	r3, [pc, #192]	; (800bcfc <tcp_input+0x28c>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	899b      	ldrh	r3, [r3, #12]
 800bc40:	b29b      	uxth	r3, r3
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7fc fa26 	bl	8008094 <lwip_htons>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	b2db      	uxtb	r3, r3
 800bc4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc50:	b2da      	uxtb	r2, r3
 800bc52:	4b34      	ldr	r3, [pc, #208]	; (800bd24 <tcp_input+0x2b4>)
 800bc54:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	891a      	ldrh	r2, [r3, #8]
 800bc5a:	4b33      	ldr	r3, [pc, #204]	; (800bd28 <tcp_input+0x2b8>)
 800bc5c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800bc5e:	4b31      	ldr	r3, [pc, #196]	; (800bd24 <tcp_input+0x2b4>)
 800bc60:	781b      	ldrb	r3, [r3, #0]
 800bc62:	f003 0303 	and.w	r3, r3, #3
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d00c      	beq.n	800bc84 <tcp_input+0x214>
    tcplen++;
 800bc6a:	4b2f      	ldr	r3, [pc, #188]	; (800bd28 <tcp_input+0x2b8>)
 800bc6c:	881b      	ldrh	r3, [r3, #0]
 800bc6e:	3301      	adds	r3, #1
 800bc70:	b29a      	uxth	r2, r3
 800bc72:	4b2d      	ldr	r3, [pc, #180]	; (800bd28 <tcp_input+0x2b8>)
 800bc74:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	891a      	ldrh	r2, [r3, #8]
 800bc7a:	4b2b      	ldr	r3, [pc, #172]	; (800bd28 <tcp_input+0x2b8>)
 800bc7c:	881b      	ldrh	r3, [r3, #0]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	f200 82d9 	bhi.w	800c236 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800bc84:	2300      	movs	r3, #0
 800bc86:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc88:	4b28      	ldr	r3, [pc, #160]	; (800bd2c <tcp_input+0x2bc>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	61fb      	str	r3, [r7, #28]
 800bc8e:	e09d      	b.n	800bdcc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800bc90:	69fb      	ldr	r3, [r7, #28]
 800bc92:	7d1b      	ldrb	r3, [r3, #20]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d105      	bne.n	800bca4 <tcp_input+0x234>
 800bc98:	4b15      	ldr	r3, [pc, #84]	; (800bcf0 <tcp_input+0x280>)
 800bc9a:	22fb      	movs	r2, #251	; 0xfb
 800bc9c:	4924      	ldr	r1, [pc, #144]	; (800bd30 <tcp_input+0x2c0>)
 800bc9e:	4816      	ldr	r0, [pc, #88]	; (800bcf8 <tcp_input+0x288>)
 800bca0:	f006 ffc0 	bl	8012c24 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800bca4:	69fb      	ldr	r3, [r7, #28]
 800bca6:	7d1b      	ldrb	r3, [r3, #20]
 800bca8:	2b0a      	cmp	r3, #10
 800bcaa:	d105      	bne.n	800bcb8 <tcp_input+0x248>
 800bcac:	4b10      	ldr	r3, [pc, #64]	; (800bcf0 <tcp_input+0x280>)
 800bcae:	22fc      	movs	r2, #252	; 0xfc
 800bcb0:	4920      	ldr	r1, [pc, #128]	; (800bd34 <tcp_input+0x2c4>)
 800bcb2:	4811      	ldr	r0, [pc, #68]	; (800bcf8 <tcp_input+0x288>)
 800bcb4:	f006 ffb6 	bl	8012c24 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800bcb8:	69fb      	ldr	r3, [r7, #28]
 800bcba:	7d1b      	ldrb	r3, [r3, #20]
 800bcbc:	2b01      	cmp	r3, #1
 800bcbe:	d105      	bne.n	800bccc <tcp_input+0x25c>
 800bcc0:	4b0b      	ldr	r3, [pc, #44]	; (800bcf0 <tcp_input+0x280>)
 800bcc2:	22fd      	movs	r2, #253	; 0xfd
 800bcc4:	491c      	ldr	r1, [pc, #112]	; (800bd38 <tcp_input+0x2c8>)
 800bcc6:	480c      	ldr	r0, [pc, #48]	; (800bcf8 <tcp_input+0x288>)
 800bcc8:	f006 ffac 	bl	8012c24 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bccc:	69fb      	ldr	r3, [r7, #28]
 800bcce:	7a1b      	ldrb	r3, [r3, #8]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d033      	beq.n	800bd3c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bcd4:	69fb      	ldr	r3, [r7, #28]
 800bcd6:	7a1a      	ldrb	r2, [r3, #8]
 800bcd8:	4b09      	ldr	r3, [pc, #36]	; (800bd00 <tcp_input+0x290>)
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bce0:	3301      	adds	r3, #1
 800bce2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bce4:	429a      	cmp	r2, r3
 800bce6:	d029      	beq.n	800bd3c <tcp_input+0x2cc>
      prev = pcb;
 800bce8:	69fb      	ldr	r3, [r7, #28]
 800bcea:	61bb      	str	r3, [r7, #24]
      continue;
 800bcec:	e06b      	b.n	800bdc6 <tcp_input+0x356>
 800bcee:	bf00      	nop
 800bcf0:	08014f64 	.word	0x08014f64
 800bcf4:	08014f98 	.word	0x08014f98
 800bcf8:	08014fb0 	.word	0x08014fb0
 800bcfc:	240000fc 	.word	0x240000fc
 800bd00:	2400057c 	.word	0x2400057c
 800bd04:	24000100 	.word	0x24000100
 800bd08:	24000104 	.word	0x24000104
 800bd0c:	24000102 	.word	0x24000102
 800bd10:	08014fd8 	.word	0x08014fd8
 800bd14:	08014fe8 	.word	0x08014fe8
 800bd18:	08014ff4 	.word	0x08014ff4
 800bd1c:	2400010c 	.word	0x2400010c
 800bd20:	24000110 	.word	0x24000110
 800bd24:	24000118 	.word	0x24000118
 800bd28:	24000116 	.word	0x24000116
 800bd2c:	2400346c 	.word	0x2400346c
 800bd30:	08015014 	.word	0x08015014
 800bd34:	0801503c 	.word	0x0801503c
 800bd38:	08015068 	.word	0x08015068
    }

    if (pcb->remote_port == tcphdr->src &&
 800bd3c:	69fb      	ldr	r3, [r7, #28]
 800bd3e:	8b1a      	ldrh	r2, [r3, #24]
 800bd40:	4b94      	ldr	r3, [pc, #592]	; (800bf94 <tcp_input+0x524>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	881b      	ldrh	r3, [r3, #0]
 800bd46:	b29b      	uxth	r3, r3
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d13a      	bne.n	800bdc2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800bd4c:	69fb      	ldr	r3, [r7, #28]
 800bd4e:	8ada      	ldrh	r2, [r3, #22]
 800bd50:	4b90      	ldr	r3, [pc, #576]	; (800bf94 <tcp_input+0x524>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	885b      	ldrh	r3, [r3, #2]
 800bd56:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d132      	bne.n	800bdc2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bd5c:	69fb      	ldr	r3, [r7, #28]
 800bd5e:	685a      	ldr	r2, [r3, #4]
 800bd60:	4b8d      	ldr	r3, [pc, #564]	; (800bf98 <tcp_input+0x528>)
 800bd62:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d12c      	bne.n	800bdc2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bd68:	69fb      	ldr	r3, [r7, #28]
 800bd6a:	681a      	ldr	r2, [r3, #0]
 800bd6c:	4b8a      	ldr	r3, [pc, #552]	; (800bf98 <tcp_input+0x528>)
 800bd6e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d126      	bne.n	800bdc2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800bd74:	69fb      	ldr	r3, [r7, #28]
 800bd76:	68db      	ldr	r3, [r3, #12]
 800bd78:	69fa      	ldr	r2, [r7, #28]
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d106      	bne.n	800bd8c <tcp_input+0x31c>
 800bd7e:	4b87      	ldr	r3, [pc, #540]	; (800bf9c <tcp_input+0x52c>)
 800bd80:	f240 120d 	movw	r2, #269	; 0x10d
 800bd84:	4986      	ldr	r1, [pc, #536]	; (800bfa0 <tcp_input+0x530>)
 800bd86:	4887      	ldr	r0, [pc, #540]	; (800bfa4 <tcp_input+0x534>)
 800bd88:	f006 ff4c 	bl	8012c24 <iprintf>
      if (prev != NULL) {
 800bd8c:	69bb      	ldr	r3, [r7, #24]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d00a      	beq.n	800bda8 <tcp_input+0x338>
        prev->next = pcb->next;
 800bd92:	69fb      	ldr	r3, [r7, #28]
 800bd94:	68da      	ldr	r2, [r3, #12]
 800bd96:	69bb      	ldr	r3, [r7, #24]
 800bd98:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800bd9a:	4b83      	ldr	r3, [pc, #524]	; (800bfa8 <tcp_input+0x538>)
 800bd9c:	681a      	ldr	r2, [r3, #0]
 800bd9e:	69fb      	ldr	r3, [r7, #28]
 800bda0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800bda2:	4a81      	ldr	r2, [pc, #516]	; (800bfa8 <tcp_input+0x538>)
 800bda4:	69fb      	ldr	r3, [r7, #28]
 800bda6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800bda8:	69fb      	ldr	r3, [r7, #28]
 800bdaa:	68db      	ldr	r3, [r3, #12]
 800bdac:	69fa      	ldr	r2, [r7, #28]
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d111      	bne.n	800bdd6 <tcp_input+0x366>
 800bdb2:	4b7a      	ldr	r3, [pc, #488]	; (800bf9c <tcp_input+0x52c>)
 800bdb4:	f240 1215 	movw	r2, #277	; 0x115
 800bdb8:	497c      	ldr	r1, [pc, #496]	; (800bfac <tcp_input+0x53c>)
 800bdba:	487a      	ldr	r0, [pc, #488]	; (800bfa4 <tcp_input+0x534>)
 800bdbc:	f006 ff32 	bl	8012c24 <iprintf>
      break;
 800bdc0:	e009      	b.n	800bdd6 <tcp_input+0x366>
    }
    prev = pcb;
 800bdc2:	69fb      	ldr	r3, [r7, #28]
 800bdc4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bdc6:	69fb      	ldr	r3, [r7, #28]
 800bdc8:	68db      	ldr	r3, [r3, #12]
 800bdca:	61fb      	str	r3, [r7, #28]
 800bdcc:	69fb      	ldr	r3, [r7, #28]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	f47f af5e 	bne.w	800bc90 <tcp_input+0x220>
 800bdd4:	e000      	b.n	800bdd8 <tcp_input+0x368>
      break;
 800bdd6:	bf00      	nop
  }

  if (pcb == NULL) {
 800bdd8:	69fb      	ldr	r3, [r7, #28]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	f040 8095 	bne.w	800bf0a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bde0:	4b73      	ldr	r3, [pc, #460]	; (800bfb0 <tcp_input+0x540>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	61fb      	str	r3, [r7, #28]
 800bde6:	e03f      	b.n	800be68 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bde8:	69fb      	ldr	r3, [r7, #28]
 800bdea:	7d1b      	ldrb	r3, [r3, #20]
 800bdec:	2b0a      	cmp	r3, #10
 800bdee:	d006      	beq.n	800bdfe <tcp_input+0x38e>
 800bdf0:	4b6a      	ldr	r3, [pc, #424]	; (800bf9c <tcp_input+0x52c>)
 800bdf2:	f240 121f 	movw	r2, #287	; 0x11f
 800bdf6:	496f      	ldr	r1, [pc, #444]	; (800bfb4 <tcp_input+0x544>)
 800bdf8:	486a      	ldr	r0, [pc, #424]	; (800bfa4 <tcp_input+0x534>)
 800bdfa:	f006 ff13 	bl	8012c24 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bdfe:	69fb      	ldr	r3, [r7, #28]
 800be00:	7a1b      	ldrb	r3, [r3, #8]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d009      	beq.n	800be1a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800be06:	69fb      	ldr	r3, [r7, #28]
 800be08:	7a1a      	ldrb	r2, [r3, #8]
 800be0a:	4b63      	ldr	r3, [pc, #396]	; (800bf98 <tcp_input+0x528>)
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800be12:	3301      	adds	r3, #1
 800be14:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800be16:	429a      	cmp	r2, r3
 800be18:	d122      	bne.n	800be60 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800be1a:	69fb      	ldr	r3, [r7, #28]
 800be1c:	8b1a      	ldrh	r2, [r3, #24]
 800be1e:	4b5d      	ldr	r3, [pc, #372]	; (800bf94 <tcp_input+0x524>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	881b      	ldrh	r3, [r3, #0]
 800be24:	b29b      	uxth	r3, r3
 800be26:	429a      	cmp	r2, r3
 800be28:	d11b      	bne.n	800be62 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800be2a:	69fb      	ldr	r3, [r7, #28]
 800be2c:	8ada      	ldrh	r2, [r3, #22]
 800be2e:	4b59      	ldr	r3, [pc, #356]	; (800bf94 <tcp_input+0x524>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	885b      	ldrh	r3, [r3, #2]
 800be34:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800be36:	429a      	cmp	r2, r3
 800be38:	d113      	bne.n	800be62 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800be3a:	69fb      	ldr	r3, [r7, #28]
 800be3c:	685a      	ldr	r2, [r3, #4]
 800be3e:	4b56      	ldr	r3, [pc, #344]	; (800bf98 <tcp_input+0x528>)
 800be40:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800be42:	429a      	cmp	r2, r3
 800be44:	d10d      	bne.n	800be62 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800be46:	69fb      	ldr	r3, [r7, #28]
 800be48:	681a      	ldr	r2, [r3, #0]
 800be4a:	4b53      	ldr	r3, [pc, #332]	; (800bf98 <tcp_input+0x528>)
 800be4c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800be4e:	429a      	cmp	r2, r3
 800be50:	d107      	bne.n	800be62 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800be52:	69f8      	ldr	r0, [r7, #28]
 800be54:	f000 fb54 	bl	800c500 <tcp_timewait_input>
        }
        pbuf_free(p);
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f7fd fd31 	bl	80098c0 <pbuf_free>
        return;
 800be5e:	e1f0      	b.n	800c242 <tcp_input+0x7d2>
        continue;
 800be60:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800be62:	69fb      	ldr	r3, [r7, #28]
 800be64:	68db      	ldr	r3, [r3, #12]
 800be66:	61fb      	str	r3, [r7, #28]
 800be68:	69fb      	ldr	r3, [r7, #28]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d1bc      	bne.n	800bde8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800be6e:	2300      	movs	r3, #0
 800be70:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800be72:	4b51      	ldr	r3, [pc, #324]	; (800bfb8 <tcp_input+0x548>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	617b      	str	r3, [r7, #20]
 800be78:	e02a      	b.n	800bed0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	7a1b      	ldrb	r3, [r3, #8]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d00c      	beq.n	800be9c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	7a1a      	ldrb	r2, [r3, #8]
 800be86:	4b44      	ldr	r3, [pc, #272]	; (800bf98 <tcp_input+0x528>)
 800be88:	685b      	ldr	r3, [r3, #4]
 800be8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800be8e:	3301      	adds	r3, #1
 800be90:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800be92:	429a      	cmp	r2, r3
 800be94:	d002      	beq.n	800be9c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	61bb      	str	r3, [r7, #24]
        continue;
 800be9a:	e016      	b.n	800beca <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	8ada      	ldrh	r2, [r3, #22]
 800bea0:	4b3c      	ldr	r3, [pc, #240]	; (800bf94 <tcp_input+0x524>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	885b      	ldrh	r3, [r3, #2]
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d10c      	bne.n	800bec6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	681a      	ldr	r2, [r3, #0]
 800beb0:	4b39      	ldr	r3, [pc, #228]	; (800bf98 <tcp_input+0x528>)
 800beb2:	695b      	ldr	r3, [r3, #20]
 800beb4:	429a      	cmp	r2, r3
 800beb6:	d00f      	beq.n	800bed8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d00d      	beq.n	800beda <tcp_input+0x46a>
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d009      	beq.n	800beda <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	68db      	ldr	r3, [r3, #12]
 800bece:	617b      	str	r3, [r7, #20]
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d1d1      	bne.n	800be7a <tcp_input+0x40a>
 800bed6:	e000      	b.n	800beda <tcp_input+0x46a>
            break;
 800bed8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d014      	beq.n	800bf0a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800bee0:	69bb      	ldr	r3, [r7, #24]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d00a      	beq.n	800befc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	68da      	ldr	r2, [r3, #12]
 800beea:	69bb      	ldr	r3, [r7, #24]
 800beec:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800beee:	4b32      	ldr	r3, [pc, #200]	; (800bfb8 <tcp_input+0x548>)
 800bef0:	681a      	ldr	r2, [r3, #0]
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800bef6:	4a30      	ldr	r2, [pc, #192]	; (800bfb8 <tcp_input+0x548>)
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800befc:	6978      	ldr	r0, [r7, #20]
 800befe:	f000 fa01 	bl	800c304 <tcp_listen_input>
      }
      pbuf_free(p);
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f7fd fcdc 	bl	80098c0 <pbuf_free>
      return;
 800bf08:	e19b      	b.n	800c242 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800bf0a:	69fb      	ldr	r3, [r7, #28]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	f000 8160 	beq.w	800c1d2 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800bf12:	4b2a      	ldr	r3, [pc, #168]	; (800bfbc <tcp_input+0x54c>)
 800bf14:	2200      	movs	r2, #0
 800bf16:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	891a      	ldrh	r2, [r3, #8]
 800bf1c:	4b27      	ldr	r3, [pc, #156]	; (800bfbc <tcp_input+0x54c>)
 800bf1e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800bf20:	4a26      	ldr	r2, [pc, #152]	; (800bfbc <tcp_input+0x54c>)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800bf26:	4b1b      	ldr	r3, [pc, #108]	; (800bf94 <tcp_input+0x524>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	4a24      	ldr	r2, [pc, #144]	; (800bfbc <tcp_input+0x54c>)
 800bf2c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800bf2e:	4b24      	ldr	r3, [pc, #144]	; (800bfc0 <tcp_input+0x550>)
 800bf30:	2200      	movs	r2, #0
 800bf32:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800bf34:	4b23      	ldr	r3, [pc, #140]	; (800bfc4 <tcp_input+0x554>)
 800bf36:	2200      	movs	r2, #0
 800bf38:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800bf3a:	4b23      	ldr	r3, [pc, #140]	; (800bfc8 <tcp_input+0x558>)
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800bf40:	4b22      	ldr	r3, [pc, #136]	; (800bfcc <tcp_input+0x55c>)
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	f003 0308 	and.w	r3, r3, #8
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d006      	beq.n	800bf5a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	7b5b      	ldrb	r3, [r3, #13]
 800bf50:	f043 0301 	orr.w	r3, r3, #1
 800bf54:	b2da      	uxtb	r2, r3
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800bf5a:	69fb      	ldr	r3, [r7, #28]
 800bf5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d038      	beq.n	800bfd4 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800bf62:	69f8      	ldr	r0, [r7, #28]
 800bf64:	f7ff f858 	bl	800b018 <tcp_process_refused_data>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	f113 0f0d 	cmn.w	r3, #13
 800bf6e:	d007      	beq.n	800bf80 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800bf70:	69fb      	ldr	r3, [r7, #28]
 800bf72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d02d      	beq.n	800bfd4 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800bf78:	4b15      	ldr	r3, [pc, #84]	; (800bfd0 <tcp_input+0x560>)
 800bf7a:	881b      	ldrh	r3, [r3, #0]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d029      	beq.n	800bfd4 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800bf80:	69fb      	ldr	r3, [r7, #28]
 800bf82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	f040 8104 	bne.w	800c192 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800bf8a:	69f8      	ldr	r0, [r7, #28]
 800bf8c:	f003 fe16 	bl	800fbbc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800bf90:	e0ff      	b.n	800c192 <tcp_input+0x722>
 800bf92:	bf00      	nop
 800bf94:	240000fc 	.word	0x240000fc
 800bf98:	2400057c 	.word	0x2400057c
 800bf9c:	08014f64 	.word	0x08014f64
 800bfa0:	08015090 	.word	0x08015090
 800bfa4:	08014fb0 	.word	0x08014fb0
 800bfa8:	2400346c 	.word	0x2400346c
 800bfac:	080150bc 	.word	0x080150bc
 800bfb0:	2400347c 	.word	0x2400347c
 800bfb4:	080150e8 	.word	0x080150e8
 800bfb8:	24003474 	.word	0x24003474
 800bfbc:	240000ec 	.word	0x240000ec
 800bfc0:	2400011c 	.word	0x2400011c
 800bfc4:	24000119 	.word	0x24000119
 800bfc8:	24000114 	.word	0x24000114
 800bfcc:	24000118 	.word	0x24000118
 800bfd0:	24000116 	.word	0x24000116
      }
    }
    tcp_input_pcb = pcb;
 800bfd4:	4a9c      	ldr	r2, [pc, #624]	; (800c248 <tcp_input+0x7d8>)
 800bfd6:	69fb      	ldr	r3, [r7, #28]
 800bfd8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800bfda:	69f8      	ldr	r0, [r7, #28]
 800bfdc:	f000 fb0a 	bl	800c5f4 <tcp_process>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800bfe4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bfe8:	f113 0f0d 	cmn.w	r3, #13
 800bfec:	f000 80d3 	beq.w	800c196 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800bff0:	4b96      	ldr	r3, [pc, #600]	; (800c24c <tcp_input+0x7dc>)
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	f003 0308 	and.w	r3, r3, #8
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d015      	beq.n	800c028 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800bffc:	69fb      	ldr	r3, [r7, #28]
 800bffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c002:	2b00      	cmp	r3, #0
 800c004:	d008      	beq.n	800c018 <tcp_input+0x5a8>
 800c006:	69fb      	ldr	r3, [r7, #28]
 800c008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c00c:	69fa      	ldr	r2, [r7, #28]
 800c00e:	6912      	ldr	r2, [r2, #16]
 800c010:	f06f 010d 	mvn.w	r1, #13
 800c014:	4610      	mov	r0, r2
 800c016:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c018:	69f9      	ldr	r1, [r7, #28]
 800c01a:	488d      	ldr	r0, [pc, #564]	; (800c250 <tcp_input+0x7e0>)
 800c01c:	f7ff fbb0 	bl	800b780 <tcp_pcb_remove>
        tcp_free(pcb);
 800c020:	69f8      	ldr	r0, [r7, #28]
 800c022:	f7fd fefd 	bl	8009e20 <tcp_free>
 800c026:	e0c1      	b.n	800c1ac <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800c028:	2300      	movs	r3, #0
 800c02a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800c02c:	4b89      	ldr	r3, [pc, #548]	; (800c254 <tcp_input+0x7e4>)
 800c02e:	881b      	ldrh	r3, [r3, #0]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d01d      	beq.n	800c070 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800c034:	4b87      	ldr	r3, [pc, #540]	; (800c254 <tcp_input+0x7e4>)
 800c036:	881b      	ldrh	r3, [r3, #0]
 800c038:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c03a:	69fb      	ldr	r3, [r7, #28]
 800c03c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c040:	2b00      	cmp	r3, #0
 800c042:	d00a      	beq.n	800c05a <tcp_input+0x5ea>
 800c044:	69fb      	ldr	r3, [r7, #28]
 800c046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c04a:	69fa      	ldr	r2, [r7, #28]
 800c04c:	6910      	ldr	r0, [r2, #16]
 800c04e:	89fa      	ldrh	r2, [r7, #14]
 800c050:	69f9      	ldr	r1, [r7, #28]
 800c052:	4798      	blx	r3
 800c054:	4603      	mov	r3, r0
 800c056:	74fb      	strb	r3, [r7, #19]
 800c058:	e001      	b.n	800c05e <tcp_input+0x5ee>
 800c05a:	2300      	movs	r3, #0
 800c05c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c05e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c062:	f113 0f0d 	cmn.w	r3, #13
 800c066:	f000 8098 	beq.w	800c19a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800c06a:	4b7a      	ldr	r3, [pc, #488]	; (800c254 <tcp_input+0x7e4>)
 800c06c:	2200      	movs	r2, #0
 800c06e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800c070:	69f8      	ldr	r0, [r7, #28]
 800c072:	f000 f907 	bl	800c284 <tcp_input_delayed_close>
 800c076:	4603      	mov	r3, r0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	f040 8090 	bne.w	800c19e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800c07e:	4b76      	ldr	r3, [pc, #472]	; (800c258 <tcp_input+0x7e8>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d041      	beq.n	800c10a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800c086:	69fb      	ldr	r3, [r7, #28]
 800c088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d006      	beq.n	800c09c <tcp_input+0x62c>
 800c08e:	4b73      	ldr	r3, [pc, #460]	; (800c25c <tcp_input+0x7ec>)
 800c090:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c094:	4972      	ldr	r1, [pc, #456]	; (800c260 <tcp_input+0x7f0>)
 800c096:	4873      	ldr	r0, [pc, #460]	; (800c264 <tcp_input+0x7f4>)
 800c098:	f006 fdc4 	bl	8012c24 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800c09c:	69fb      	ldr	r3, [r7, #28]
 800c09e:	8b5b      	ldrh	r3, [r3, #26]
 800c0a0:	f003 0310 	and.w	r3, r3, #16
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d008      	beq.n	800c0ba <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800c0a8:	4b6b      	ldr	r3, [pc, #428]	; (800c258 <tcp_input+0x7e8>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f7fd fc07 	bl	80098c0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800c0b2:	69f8      	ldr	r0, [r7, #28]
 800c0b4:	f7fe f99c 	bl	800a3f0 <tcp_abort>
            goto aborted;
 800c0b8:	e078      	b.n	800c1ac <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c0ba:	69fb      	ldr	r3, [r7, #28]
 800c0bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d00c      	beq.n	800c0de <tcp_input+0x66e>
 800c0c4:	69fb      	ldr	r3, [r7, #28]
 800c0c6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c0ca:	69fb      	ldr	r3, [r7, #28]
 800c0cc:	6918      	ldr	r0, [r3, #16]
 800c0ce:	4b62      	ldr	r3, [pc, #392]	; (800c258 <tcp_input+0x7e8>)
 800c0d0:	681a      	ldr	r2, [r3, #0]
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	69f9      	ldr	r1, [r7, #28]
 800c0d6:	47a0      	blx	r4
 800c0d8:	4603      	mov	r3, r0
 800c0da:	74fb      	strb	r3, [r7, #19]
 800c0dc:	e008      	b.n	800c0f0 <tcp_input+0x680>
 800c0de:	4b5e      	ldr	r3, [pc, #376]	; (800c258 <tcp_input+0x7e8>)
 800c0e0:	681a      	ldr	r2, [r3, #0]
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	69f9      	ldr	r1, [r7, #28]
 800c0e6:	2000      	movs	r0, #0
 800c0e8:	f7ff f88a 	bl	800b200 <tcp_recv_null>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800c0f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c0f4:	f113 0f0d 	cmn.w	r3, #13
 800c0f8:	d053      	beq.n	800c1a2 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800c0fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d003      	beq.n	800c10a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800c102:	4b55      	ldr	r3, [pc, #340]	; (800c258 <tcp_input+0x7e8>)
 800c104:	681a      	ldr	r2, [r3, #0]
 800c106:	69fb      	ldr	r3, [r7, #28]
 800c108:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800c10a:	4b50      	ldr	r3, [pc, #320]	; (800c24c <tcp_input+0x7dc>)
 800c10c:	781b      	ldrb	r3, [r3, #0]
 800c10e:	f003 0320 	and.w	r3, r3, #32
 800c112:	2b00      	cmp	r3, #0
 800c114:	d030      	beq.n	800c178 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800c116:	69fb      	ldr	r3, [r7, #28]
 800c118:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d009      	beq.n	800c132 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800c11e:	69fb      	ldr	r3, [r7, #28]
 800c120:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c122:	7b5a      	ldrb	r2, [r3, #13]
 800c124:	69fb      	ldr	r3, [r7, #28]
 800c126:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c128:	f042 0220 	orr.w	r2, r2, #32
 800c12c:	b2d2      	uxtb	r2, r2
 800c12e:	735a      	strb	r2, [r3, #13]
 800c130:	e022      	b.n	800c178 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c132:	69fb      	ldr	r3, [r7, #28]
 800c134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c136:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c13a:	d005      	beq.n	800c148 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800c13c:	69fb      	ldr	r3, [r7, #28]
 800c13e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c140:	3301      	adds	r3, #1
 800c142:	b29a      	uxth	r2, r3
 800c144:	69fb      	ldr	r3, [r7, #28]
 800c146:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800c148:	69fb      	ldr	r3, [r7, #28]
 800c14a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d00b      	beq.n	800c16a <tcp_input+0x6fa>
 800c152:	69fb      	ldr	r3, [r7, #28]
 800c154:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c158:	69fb      	ldr	r3, [r7, #28]
 800c15a:	6918      	ldr	r0, [r3, #16]
 800c15c:	2300      	movs	r3, #0
 800c15e:	2200      	movs	r2, #0
 800c160:	69f9      	ldr	r1, [r7, #28]
 800c162:	47a0      	blx	r4
 800c164:	4603      	mov	r3, r0
 800c166:	74fb      	strb	r3, [r7, #19]
 800c168:	e001      	b.n	800c16e <tcp_input+0x6fe>
 800c16a:	2300      	movs	r3, #0
 800c16c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c16e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c172:	f113 0f0d 	cmn.w	r3, #13
 800c176:	d016      	beq.n	800c1a6 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800c178:	4b33      	ldr	r3, [pc, #204]	; (800c248 <tcp_input+0x7d8>)
 800c17a:	2200      	movs	r2, #0
 800c17c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c17e:	69f8      	ldr	r0, [r7, #28]
 800c180:	f000 f880 	bl	800c284 <tcp_input_delayed_close>
 800c184:	4603      	mov	r3, r0
 800c186:	2b00      	cmp	r3, #0
 800c188:	d10f      	bne.n	800c1aa <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800c18a:	69f8      	ldr	r0, [r7, #28]
 800c18c:	f002 ff10 	bl	800efb0 <tcp_output>
 800c190:	e00c      	b.n	800c1ac <tcp_input+0x73c>
        goto aborted;
 800c192:	bf00      	nop
 800c194:	e00a      	b.n	800c1ac <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800c196:	bf00      	nop
 800c198:	e008      	b.n	800c1ac <tcp_input+0x73c>
              goto aborted;
 800c19a:	bf00      	nop
 800c19c:	e006      	b.n	800c1ac <tcp_input+0x73c>
          goto aborted;
 800c19e:	bf00      	nop
 800c1a0:	e004      	b.n	800c1ac <tcp_input+0x73c>
            goto aborted;
 800c1a2:	bf00      	nop
 800c1a4:	e002      	b.n	800c1ac <tcp_input+0x73c>
              goto aborted;
 800c1a6:	bf00      	nop
 800c1a8:	e000      	b.n	800c1ac <tcp_input+0x73c>
          goto aborted;
 800c1aa:	bf00      	nop
    tcp_input_pcb = NULL;
 800c1ac:	4b26      	ldr	r3, [pc, #152]	; (800c248 <tcp_input+0x7d8>)
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800c1b2:	4b29      	ldr	r3, [pc, #164]	; (800c258 <tcp_input+0x7e8>)
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800c1b8:	4b2b      	ldr	r3, [pc, #172]	; (800c268 <tcp_input+0x7f8>)
 800c1ba:	685b      	ldr	r3, [r3, #4]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d03f      	beq.n	800c240 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800c1c0:	4b29      	ldr	r3, [pc, #164]	; (800c268 <tcp_input+0x7f8>)
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f7fd fb7b 	bl	80098c0 <pbuf_free>
      inseg.p = NULL;
 800c1ca:	4b27      	ldr	r3, [pc, #156]	; (800c268 <tcp_input+0x7f8>)
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800c1d0:	e036      	b.n	800c240 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c1d2:	4b26      	ldr	r3, [pc, #152]	; (800c26c <tcp_input+0x7fc>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	899b      	ldrh	r3, [r3, #12]
 800c1d8:	b29b      	uxth	r3, r3
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f7fb ff5a 	bl	8008094 <lwip_htons>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	b2db      	uxtb	r3, r3
 800c1e4:	f003 0304 	and.w	r3, r3, #4
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d118      	bne.n	800c21e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c1ec:	4b20      	ldr	r3, [pc, #128]	; (800c270 <tcp_input+0x800>)
 800c1ee:	6819      	ldr	r1, [r3, #0]
 800c1f0:	4b20      	ldr	r3, [pc, #128]	; (800c274 <tcp_input+0x804>)
 800c1f2:	881b      	ldrh	r3, [r3, #0]
 800c1f4:	461a      	mov	r2, r3
 800c1f6:	4b20      	ldr	r3, [pc, #128]	; (800c278 <tcp_input+0x808>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c1fc:	4b1b      	ldr	r3, [pc, #108]	; (800c26c <tcp_input+0x7fc>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c200:	885b      	ldrh	r3, [r3, #2]
 800c202:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c204:	4a19      	ldr	r2, [pc, #100]	; (800c26c <tcp_input+0x7fc>)
 800c206:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c208:	8812      	ldrh	r2, [r2, #0]
 800c20a:	b292      	uxth	r2, r2
 800c20c:	9202      	str	r2, [sp, #8]
 800c20e:	9301      	str	r3, [sp, #4]
 800c210:	4b1a      	ldr	r3, [pc, #104]	; (800c27c <tcp_input+0x80c>)
 800c212:	9300      	str	r3, [sp, #0]
 800c214:	4b1a      	ldr	r3, [pc, #104]	; (800c280 <tcp_input+0x810>)
 800c216:	4602      	mov	r2, r0
 800c218:	2000      	movs	r0, #0
 800c21a:	f003 fc7d 	bl	800fb18 <tcp_rst>
    pbuf_free(p);
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f7fd fb4e 	bl	80098c0 <pbuf_free>
  return;
 800c224:	e00c      	b.n	800c240 <tcp_input+0x7d0>
    goto dropped;
 800c226:	bf00      	nop
 800c228:	e006      	b.n	800c238 <tcp_input+0x7c8>
    goto dropped;
 800c22a:	bf00      	nop
 800c22c:	e004      	b.n	800c238 <tcp_input+0x7c8>
    goto dropped;
 800c22e:	bf00      	nop
 800c230:	e002      	b.n	800c238 <tcp_input+0x7c8>
      goto dropped;
 800c232:	bf00      	nop
 800c234:	e000      	b.n	800c238 <tcp_input+0x7c8>
      goto dropped;
 800c236:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f7fd fb41 	bl	80098c0 <pbuf_free>
 800c23e:	e000      	b.n	800c242 <tcp_input+0x7d2>
  return;
 800c240:	bf00      	nop
}
 800c242:	3724      	adds	r7, #36	; 0x24
 800c244:	46bd      	mov	sp, r7
 800c246:	bd90      	pop	{r4, r7, pc}
 800c248:	24003480 	.word	0x24003480
 800c24c:	24000119 	.word	0x24000119
 800c250:	2400346c 	.word	0x2400346c
 800c254:	24000114 	.word	0x24000114
 800c258:	2400011c 	.word	0x2400011c
 800c25c:	08014f64 	.word	0x08014f64
 800c260:	08015118 	.word	0x08015118
 800c264:	08014fb0 	.word	0x08014fb0
 800c268:	240000ec 	.word	0x240000ec
 800c26c:	240000fc 	.word	0x240000fc
 800c270:	24000110 	.word	0x24000110
 800c274:	24000116 	.word	0x24000116
 800c278:	2400010c 	.word	0x2400010c
 800c27c:	2400058c 	.word	0x2400058c
 800c280:	24000590 	.word	0x24000590

0800c284 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b082      	sub	sp, #8
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d106      	bne.n	800c2a0 <tcp_input_delayed_close+0x1c>
 800c292:	4b17      	ldr	r3, [pc, #92]	; (800c2f0 <tcp_input_delayed_close+0x6c>)
 800c294:	f240 225a 	movw	r2, #602	; 0x25a
 800c298:	4916      	ldr	r1, [pc, #88]	; (800c2f4 <tcp_input_delayed_close+0x70>)
 800c29a:	4817      	ldr	r0, [pc, #92]	; (800c2f8 <tcp_input_delayed_close+0x74>)
 800c29c:	f006 fcc2 	bl	8012c24 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800c2a0:	4b16      	ldr	r3, [pc, #88]	; (800c2fc <tcp_input_delayed_close+0x78>)
 800c2a2:	781b      	ldrb	r3, [r3, #0]
 800c2a4:	f003 0310 	and.w	r3, r3, #16
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d01c      	beq.n	800c2e6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	8b5b      	ldrh	r3, [r3, #26]
 800c2b0:	f003 0310 	and.w	r3, r3, #16
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d10d      	bne.n	800c2d4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d008      	beq.n	800c2d4 <tcp_input_delayed_close+0x50>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2c8:	687a      	ldr	r2, [r7, #4]
 800c2ca:	6912      	ldr	r2, [r2, #16]
 800c2cc:	f06f 010e 	mvn.w	r1, #14
 800c2d0:	4610      	mov	r0, r2
 800c2d2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c2d4:	6879      	ldr	r1, [r7, #4]
 800c2d6:	480a      	ldr	r0, [pc, #40]	; (800c300 <tcp_input_delayed_close+0x7c>)
 800c2d8:	f7ff fa52 	bl	800b780 <tcp_pcb_remove>
    tcp_free(pcb);
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f7fd fd9f 	bl	8009e20 <tcp_free>
    return 1;
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	e000      	b.n	800c2e8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800c2e6:	2300      	movs	r3, #0
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3708      	adds	r7, #8
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}
 800c2f0:	08014f64 	.word	0x08014f64
 800c2f4:	08015134 	.word	0x08015134
 800c2f8:	08014fb0 	.word	0x08014fb0
 800c2fc:	24000119 	.word	0x24000119
 800c300:	2400346c 	.word	0x2400346c

0800c304 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800c304:	b590      	push	{r4, r7, lr}
 800c306:	b08b      	sub	sp, #44	; 0x2c
 800c308:	af04      	add	r7, sp, #16
 800c30a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800c30c:	4b6f      	ldr	r3, [pc, #444]	; (800c4cc <tcp_listen_input+0x1c8>)
 800c30e:	781b      	ldrb	r3, [r3, #0]
 800c310:	f003 0304 	and.w	r3, r3, #4
 800c314:	2b00      	cmp	r3, #0
 800c316:	f040 80d2 	bne.w	800c4be <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d106      	bne.n	800c32e <tcp_listen_input+0x2a>
 800c320:	4b6b      	ldr	r3, [pc, #428]	; (800c4d0 <tcp_listen_input+0x1cc>)
 800c322:	f240 2281 	movw	r2, #641	; 0x281
 800c326:	496b      	ldr	r1, [pc, #428]	; (800c4d4 <tcp_listen_input+0x1d0>)
 800c328:	486b      	ldr	r0, [pc, #428]	; (800c4d8 <tcp_listen_input+0x1d4>)
 800c32a:	f006 fc7b 	bl	8012c24 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800c32e:	4b67      	ldr	r3, [pc, #412]	; (800c4cc <tcp_listen_input+0x1c8>)
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	f003 0310 	and.w	r3, r3, #16
 800c336:	2b00      	cmp	r3, #0
 800c338:	d019      	beq.n	800c36e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c33a:	4b68      	ldr	r3, [pc, #416]	; (800c4dc <tcp_listen_input+0x1d8>)
 800c33c:	6819      	ldr	r1, [r3, #0]
 800c33e:	4b68      	ldr	r3, [pc, #416]	; (800c4e0 <tcp_listen_input+0x1dc>)
 800c340:	881b      	ldrh	r3, [r3, #0]
 800c342:	461a      	mov	r2, r3
 800c344:	4b67      	ldr	r3, [pc, #412]	; (800c4e4 <tcp_listen_input+0x1e0>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c34a:	4b67      	ldr	r3, [pc, #412]	; (800c4e8 <tcp_listen_input+0x1e4>)
 800c34c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c34e:	885b      	ldrh	r3, [r3, #2]
 800c350:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c352:	4a65      	ldr	r2, [pc, #404]	; (800c4e8 <tcp_listen_input+0x1e4>)
 800c354:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c356:	8812      	ldrh	r2, [r2, #0]
 800c358:	b292      	uxth	r2, r2
 800c35a:	9202      	str	r2, [sp, #8]
 800c35c:	9301      	str	r3, [sp, #4]
 800c35e:	4b63      	ldr	r3, [pc, #396]	; (800c4ec <tcp_listen_input+0x1e8>)
 800c360:	9300      	str	r3, [sp, #0]
 800c362:	4b63      	ldr	r3, [pc, #396]	; (800c4f0 <tcp_listen_input+0x1ec>)
 800c364:	4602      	mov	r2, r0
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f003 fbd6 	bl	800fb18 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800c36c:	e0a9      	b.n	800c4c2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800c36e:	4b57      	ldr	r3, [pc, #348]	; (800c4cc <tcp_listen_input+0x1c8>)
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	f003 0302 	and.w	r3, r3, #2
 800c376:	2b00      	cmp	r3, #0
 800c378:	f000 80a3 	beq.w	800c4c2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	7d5b      	ldrb	r3, [r3, #21]
 800c380:	4618      	mov	r0, r3
 800c382:	f7ff f861 	bl	800b448 <tcp_alloc>
 800c386:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d111      	bne.n	800c3b2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	699b      	ldr	r3, [r3, #24]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d00a      	beq.n	800c3ac <tcp_listen_input+0xa8>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	699b      	ldr	r3, [r3, #24]
 800c39a:	687a      	ldr	r2, [r7, #4]
 800c39c:	6910      	ldr	r0, [r2, #16]
 800c39e:	f04f 32ff 	mov.w	r2, #4294967295
 800c3a2:	2100      	movs	r1, #0
 800c3a4:	4798      	blx	r3
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	73bb      	strb	r3, [r7, #14]
      return;
 800c3aa:	e08b      	b.n	800c4c4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c3ac:	23f0      	movs	r3, #240	; 0xf0
 800c3ae:	73bb      	strb	r3, [r7, #14]
      return;
 800c3b0:	e088      	b.n	800c4c4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c3b2:	4b50      	ldr	r3, [pc, #320]	; (800c4f4 <tcp_listen_input+0x1f0>)
 800c3b4:	695a      	ldr	r2, [r3, #20]
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800c3ba:	4b4e      	ldr	r3, [pc, #312]	; (800c4f4 <tcp_listen_input+0x1f0>)
 800c3bc:	691a      	ldr	r2, [r3, #16]
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	8ada      	ldrh	r2, [r3, #22]
 800c3c6:	697b      	ldr	r3, [r7, #20]
 800c3c8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800c3ca:	4b47      	ldr	r3, [pc, #284]	; (800c4e8 <tcp_listen_input+0x1e4>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	881b      	ldrh	r3, [r3, #0]
 800c3d0:	b29a      	uxth	r2, r3
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	2203      	movs	r2, #3
 800c3da:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800c3dc:	4b41      	ldr	r3, [pc, #260]	; (800c4e4 <tcp_listen_input+0x1e0>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	1c5a      	adds	r2, r3, #1
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c3ea:	697b      	ldr	r3, [r7, #20]
 800c3ec:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800c3ee:	6978      	ldr	r0, [r7, #20]
 800c3f0:	f7ff fa5a 	bl	800b8a8 <tcp_next_iss>
 800c3f4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	693a      	ldr	r2, [r7, #16]
 800c3fa:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	693a      	ldr	r2, [r7, #16]
 800c400:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	693a      	ldr	r2, [r7, #16]
 800c406:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	693a      	ldr	r2, [r7, #16]
 800c40c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c40e:	4b35      	ldr	r3, [pc, #212]	; (800c4e4 <tcp_listen_input+0x1e0>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	1e5a      	subs	r2, r3, #1
 800c414:	697b      	ldr	r3, [r7, #20]
 800c416:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	691a      	ldr	r2, [r3, #16]
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	687a      	ldr	r2, [r7, #4]
 800c424:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	7a5b      	ldrb	r3, [r3, #9]
 800c42a:	f003 030c 	and.w	r3, r3, #12
 800c42e:	b2da      	uxtb	r2, r3
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	7a1a      	ldrb	r2, [r3, #8]
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800c43c:	4b2e      	ldr	r3, [pc, #184]	; (800c4f8 <tcp_listen_input+0x1f4>)
 800c43e:	681a      	ldr	r2, [r3, #0]
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	60da      	str	r2, [r3, #12]
 800c444:	4a2c      	ldr	r2, [pc, #176]	; (800c4f8 <tcp_listen_input+0x1f4>)
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	6013      	str	r3, [r2, #0]
 800c44a:	f003 fd27 	bl	800fe9c <tcp_timer_needed>
 800c44e:	4b2b      	ldr	r3, [pc, #172]	; (800c4fc <tcp_listen_input+0x1f8>)
 800c450:	2201      	movs	r2, #1
 800c452:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800c454:	6978      	ldr	r0, [r7, #20]
 800c456:	f001 fd8d 	bl	800df74 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800c45a:	4b23      	ldr	r3, [pc, #140]	; (800c4e8 <tcp_listen_input+0x1e4>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	89db      	ldrh	r3, [r3, #14]
 800c460:	b29a      	uxth	r2, r3
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	3304      	adds	r3, #4
 800c47c:	4618      	mov	r0, r3
 800c47e:	f005 f911 	bl	80116a4 <ip4_route>
 800c482:	4601      	mov	r1, r0
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	3304      	adds	r3, #4
 800c488:	461a      	mov	r2, r3
 800c48a:	4620      	mov	r0, r4
 800c48c:	f7ff fa32 	bl	800b8f4 <tcp_eff_send_mss_netif>
 800c490:	4603      	mov	r3, r0
 800c492:	461a      	mov	r2, r3
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c498:	2112      	movs	r1, #18
 800c49a:	6978      	ldr	r0, [r7, #20]
 800c49c:	f002 fc9a 	bl	800edd4 <tcp_enqueue_flags>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800c4a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d004      	beq.n	800c4b6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800c4ac:	2100      	movs	r1, #0
 800c4ae:	6978      	ldr	r0, [r7, #20]
 800c4b0:	f7fd fee0 	bl	800a274 <tcp_abandon>
      return;
 800c4b4:	e006      	b.n	800c4c4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800c4b6:	6978      	ldr	r0, [r7, #20]
 800c4b8:	f002 fd7a 	bl	800efb0 <tcp_output>
  return;
 800c4bc:	e001      	b.n	800c4c2 <tcp_listen_input+0x1be>
    return;
 800c4be:	bf00      	nop
 800c4c0:	e000      	b.n	800c4c4 <tcp_listen_input+0x1c0>
  return;
 800c4c2:	bf00      	nop
}
 800c4c4:	371c      	adds	r7, #28
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd90      	pop	{r4, r7, pc}
 800c4ca:	bf00      	nop
 800c4cc:	24000118 	.word	0x24000118
 800c4d0:	08014f64 	.word	0x08014f64
 800c4d4:	0801515c 	.word	0x0801515c
 800c4d8:	08014fb0 	.word	0x08014fb0
 800c4dc:	24000110 	.word	0x24000110
 800c4e0:	24000116 	.word	0x24000116
 800c4e4:	2400010c 	.word	0x2400010c
 800c4e8:	240000fc 	.word	0x240000fc
 800c4ec:	2400058c 	.word	0x2400058c
 800c4f0:	24000590 	.word	0x24000590
 800c4f4:	2400057c 	.word	0x2400057c
 800c4f8:	2400346c 	.word	0x2400346c
 800c4fc:	24003468 	.word	0x24003468

0800c500 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b086      	sub	sp, #24
 800c504:	af04      	add	r7, sp, #16
 800c506:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800c508:	4b2f      	ldr	r3, [pc, #188]	; (800c5c8 <tcp_timewait_input+0xc8>)
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	f003 0304 	and.w	r3, r3, #4
 800c510:	2b00      	cmp	r3, #0
 800c512:	d153      	bne.n	800c5bc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d106      	bne.n	800c528 <tcp_timewait_input+0x28>
 800c51a:	4b2c      	ldr	r3, [pc, #176]	; (800c5cc <tcp_timewait_input+0xcc>)
 800c51c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c520:	492b      	ldr	r1, [pc, #172]	; (800c5d0 <tcp_timewait_input+0xd0>)
 800c522:	482c      	ldr	r0, [pc, #176]	; (800c5d4 <tcp_timewait_input+0xd4>)
 800c524:	f006 fb7e 	bl	8012c24 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800c528:	4b27      	ldr	r3, [pc, #156]	; (800c5c8 <tcp_timewait_input+0xc8>)
 800c52a:	781b      	ldrb	r3, [r3, #0]
 800c52c:	f003 0302 	and.w	r3, r3, #2
 800c530:	2b00      	cmp	r3, #0
 800c532:	d02a      	beq.n	800c58a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800c534:	4b28      	ldr	r3, [pc, #160]	; (800c5d8 <tcp_timewait_input+0xd8>)
 800c536:	681a      	ldr	r2, [r3, #0]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c53c:	1ad3      	subs	r3, r2, r3
 800c53e:	2b00      	cmp	r3, #0
 800c540:	db2d      	blt.n	800c59e <tcp_timewait_input+0x9e>
 800c542:	4b25      	ldr	r3, [pc, #148]	; (800c5d8 <tcp_timewait_input+0xd8>)
 800c544:	681a      	ldr	r2, [r3, #0]
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c54a:	6879      	ldr	r1, [r7, #4]
 800c54c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c54e:	440b      	add	r3, r1
 800c550:	1ad3      	subs	r3, r2, r3
 800c552:	2b00      	cmp	r3, #0
 800c554:	dc23      	bgt.n	800c59e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c556:	4b21      	ldr	r3, [pc, #132]	; (800c5dc <tcp_timewait_input+0xdc>)
 800c558:	6819      	ldr	r1, [r3, #0]
 800c55a:	4b21      	ldr	r3, [pc, #132]	; (800c5e0 <tcp_timewait_input+0xe0>)
 800c55c:	881b      	ldrh	r3, [r3, #0]
 800c55e:	461a      	mov	r2, r3
 800c560:	4b1d      	ldr	r3, [pc, #116]	; (800c5d8 <tcp_timewait_input+0xd8>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c566:	4b1f      	ldr	r3, [pc, #124]	; (800c5e4 <tcp_timewait_input+0xe4>)
 800c568:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c56a:	885b      	ldrh	r3, [r3, #2]
 800c56c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c56e:	4a1d      	ldr	r2, [pc, #116]	; (800c5e4 <tcp_timewait_input+0xe4>)
 800c570:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c572:	8812      	ldrh	r2, [r2, #0]
 800c574:	b292      	uxth	r2, r2
 800c576:	9202      	str	r2, [sp, #8]
 800c578:	9301      	str	r3, [sp, #4]
 800c57a:	4b1b      	ldr	r3, [pc, #108]	; (800c5e8 <tcp_timewait_input+0xe8>)
 800c57c:	9300      	str	r3, [sp, #0]
 800c57e:	4b1b      	ldr	r3, [pc, #108]	; (800c5ec <tcp_timewait_input+0xec>)
 800c580:	4602      	mov	r2, r0
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f003 fac8 	bl	800fb18 <tcp_rst>
      return;
 800c588:	e01b      	b.n	800c5c2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800c58a:	4b0f      	ldr	r3, [pc, #60]	; (800c5c8 <tcp_timewait_input+0xc8>)
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	f003 0301 	and.w	r3, r3, #1
 800c592:	2b00      	cmp	r3, #0
 800c594:	d003      	beq.n	800c59e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800c596:	4b16      	ldr	r3, [pc, #88]	; (800c5f0 <tcp_timewait_input+0xf0>)
 800c598:	681a      	ldr	r2, [r3, #0]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800c59e:	4b10      	ldr	r3, [pc, #64]	; (800c5e0 <tcp_timewait_input+0xe0>)
 800c5a0:	881b      	ldrh	r3, [r3, #0]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d00c      	beq.n	800c5c0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	8b5b      	ldrh	r3, [r3, #26]
 800c5aa:	f043 0302 	orr.w	r3, r3, #2
 800c5ae:	b29a      	uxth	r2, r3
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f002 fcfb 	bl	800efb0 <tcp_output>
  }
  return;
 800c5ba:	e001      	b.n	800c5c0 <tcp_timewait_input+0xc0>
    return;
 800c5bc:	bf00      	nop
 800c5be:	e000      	b.n	800c5c2 <tcp_timewait_input+0xc2>
  return;
 800c5c0:	bf00      	nop
}
 800c5c2:	3708      	adds	r7, #8
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}
 800c5c8:	24000118 	.word	0x24000118
 800c5cc:	08014f64 	.word	0x08014f64
 800c5d0:	0801517c 	.word	0x0801517c
 800c5d4:	08014fb0 	.word	0x08014fb0
 800c5d8:	2400010c 	.word	0x2400010c
 800c5dc:	24000110 	.word	0x24000110
 800c5e0:	24000116 	.word	0x24000116
 800c5e4:	240000fc 	.word	0x240000fc
 800c5e8:	2400058c 	.word	0x2400058c
 800c5ec:	24000590 	.word	0x24000590
 800c5f0:	24003470 	.word	0x24003470

0800c5f4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800c5f4:	b590      	push	{r4, r7, lr}
 800c5f6:	b08d      	sub	sp, #52	; 0x34
 800c5f8:	af04      	add	r7, sp, #16
 800c5fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800c600:	2300      	movs	r3, #0
 800c602:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d106      	bne.n	800c618 <tcp_process+0x24>
 800c60a:	4ba5      	ldr	r3, [pc, #660]	; (800c8a0 <tcp_process+0x2ac>)
 800c60c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800c610:	49a4      	ldr	r1, [pc, #656]	; (800c8a4 <tcp_process+0x2b0>)
 800c612:	48a5      	ldr	r0, [pc, #660]	; (800c8a8 <tcp_process+0x2b4>)
 800c614:	f006 fb06 	bl	8012c24 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800c618:	4ba4      	ldr	r3, [pc, #656]	; (800c8ac <tcp_process+0x2b8>)
 800c61a:	781b      	ldrb	r3, [r3, #0]
 800c61c:	f003 0304 	and.w	r3, r3, #4
 800c620:	2b00      	cmp	r3, #0
 800c622:	d04e      	beq.n	800c6c2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	7d1b      	ldrb	r3, [r3, #20]
 800c628:	2b02      	cmp	r3, #2
 800c62a:	d108      	bne.n	800c63e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c630:	4b9f      	ldr	r3, [pc, #636]	; (800c8b0 <tcp_process+0x2bc>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	429a      	cmp	r2, r3
 800c636:	d123      	bne.n	800c680 <tcp_process+0x8c>
        acceptable = 1;
 800c638:	2301      	movs	r3, #1
 800c63a:	76fb      	strb	r3, [r7, #27]
 800c63c:	e020      	b.n	800c680 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c642:	4b9c      	ldr	r3, [pc, #624]	; (800c8b4 <tcp_process+0x2c0>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	429a      	cmp	r2, r3
 800c648:	d102      	bne.n	800c650 <tcp_process+0x5c>
        acceptable = 1;
 800c64a:	2301      	movs	r3, #1
 800c64c:	76fb      	strb	r3, [r7, #27]
 800c64e:	e017      	b.n	800c680 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c650:	4b98      	ldr	r3, [pc, #608]	; (800c8b4 <tcp_process+0x2c0>)
 800c652:	681a      	ldr	r2, [r3, #0]
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c658:	1ad3      	subs	r3, r2, r3
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	db10      	blt.n	800c680 <tcp_process+0x8c>
 800c65e:	4b95      	ldr	r3, [pc, #596]	; (800c8b4 <tcp_process+0x2c0>)
 800c660:	681a      	ldr	r2, [r3, #0]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c666:	6879      	ldr	r1, [r7, #4]
 800c668:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c66a:	440b      	add	r3, r1
 800c66c:	1ad3      	subs	r3, r2, r3
 800c66e:	2b00      	cmp	r3, #0
 800c670:	dc06      	bgt.n	800c680 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	8b5b      	ldrh	r3, [r3, #26]
 800c676:	f043 0302 	orr.w	r3, r3, #2
 800c67a:	b29a      	uxth	r2, r3
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800c680:	7efb      	ldrb	r3, [r7, #27]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d01b      	beq.n	800c6be <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	7d1b      	ldrb	r3, [r3, #20]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d106      	bne.n	800c69c <tcp_process+0xa8>
 800c68e:	4b84      	ldr	r3, [pc, #528]	; (800c8a0 <tcp_process+0x2ac>)
 800c690:	f44f 724e 	mov.w	r2, #824	; 0x338
 800c694:	4988      	ldr	r1, [pc, #544]	; (800c8b8 <tcp_process+0x2c4>)
 800c696:	4884      	ldr	r0, [pc, #528]	; (800c8a8 <tcp_process+0x2b4>)
 800c698:	f006 fac4 	bl	8012c24 <iprintf>
      recv_flags |= TF_RESET;
 800c69c:	4b87      	ldr	r3, [pc, #540]	; (800c8bc <tcp_process+0x2c8>)
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	f043 0308 	orr.w	r3, r3, #8
 800c6a4:	b2da      	uxtb	r2, r3
 800c6a6:	4b85      	ldr	r3, [pc, #532]	; (800c8bc <tcp_process+0x2c8>)
 800c6a8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	8b5b      	ldrh	r3, [r3, #26]
 800c6ae:	f023 0301 	bic.w	r3, r3, #1
 800c6b2:	b29a      	uxth	r2, r3
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800c6b8:	f06f 030d 	mvn.w	r3, #13
 800c6bc:	e37a      	b.n	800cdb4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	e378      	b.n	800cdb4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c6c2:	4b7a      	ldr	r3, [pc, #488]	; (800c8ac <tcp_process+0x2b8>)
 800c6c4:	781b      	ldrb	r3, [r3, #0]
 800c6c6:	f003 0302 	and.w	r3, r3, #2
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d010      	beq.n	800c6f0 <tcp_process+0xfc>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	7d1b      	ldrb	r3, [r3, #20]
 800c6d2:	2b02      	cmp	r3, #2
 800c6d4:	d00c      	beq.n	800c6f0 <tcp_process+0xfc>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	7d1b      	ldrb	r3, [r3, #20]
 800c6da:	2b03      	cmp	r3, #3
 800c6dc:	d008      	beq.n	800c6f0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	8b5b      	ldrh	r3, [r3, #26]
 800c6e2:	f043 0302 	orr.w	r3, r3, #2
 800c6e6:	b29a      	uxth	r2, r3
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	e361      	b.n	800cdb4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	8b5b      	ldrh	r3, [r3, #26]
 800c6f4:	f003 0310 	and.w	r3, r3, #16
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d103      	bne.n	800c704 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800c6fc:	4b70      	ldr	r3, [pc, #448]	; (800c8c0 <tcp_process+0x2cc>)
 800c6fe:	681a      	ldr	r2, [r3, #0]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2200      	movs	r2, #0
 800c708:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2200      	movs	r2, #0
 800c710:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	f001 fc2d 	bl	800df74 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	7d1b      	ldrb	r3, [r3, #20]
 800c71e:	3b02      	subs	r3, #2
 800c720:	2b07      	cmp	r3, #7
 800c722:	f200 8337 	bhi.w	800cd94 <tcp_process+0x7a0>
 800c726:	a201      	add	r2, pc, #4	; (adr r2, 800c72c <tcp_process+0x138>)
 800c728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c72c:	0800c74d 	.word	0x0800c74d
 800c730:	0800c97d 	.word	0x0800c97d
 800c734:	0800caf5 	.word	0x0800caf5
 800c738:	0800cb1f 	.word	0x0800cb1f
 800c73c:	0800cc43 	.word	0x0800cc43
 800c740:	0800caf5 	.word	0x0800caf5
 800c744:	0800cccf 	.word	0x0800cccf
 800c748:	0800cd5f 	.word	0x0800cd5f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800c74c:	4b57      	ldr	r3, [pc, #348]	; (800c8ac <tcp_process+0x2b8>)
 800c74e:	781b      	ldrb	r3, [r3, #0]
 800c750:	f003 0310 	and.w	r3, r3, #16
 800c754:	2b00      	cmp	r3, #0
 800c756:	f000 80e4 	beq.w	800c922 <tcp_process+0x32e>
 800c75a:	4b54      	ldr	r3, [pc, #336]	; (800c8ac <tcp_process+0x2b8>)
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	f003 0302 	and.w	r3, r3, #2
 800c762:	2b00      	cmp	r3, #0
 800c764:	f000 80dd 	beq.w	800c922 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c76c:	1c5a      	adds	r2, r3, #1
 800c76e:	4b50      	ldr	r3, [pc, #320]	; (800c8b0 <tcp_process+0x2bc>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	429a      	cmp	r2, r3
 800c774:	f040 80d5 	bne.w	800c922 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800c778:	4b4e      	ldr	r3, [pc, #312]	; (800c8b4 <tcp_process+0x2c0>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	1c5a      	adds	r2, r3, #1
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800c78a:	4b49      	ldr	r3, [pc, #292]	; (800c8b0 <tcp_process+0x2bc>)
 800c78c:	681a      	ldr	r2, [r3, #0]
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800c792:	4b4c      	ldr	r3, [pc, #304]	; (800c8c4 <tcp_process+0x2d0>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	89db      	ldrh	r3, [r3, #14]
 800c798:	b29a      	uxth	r2, r3
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c7ac:	4b41      	ldr	r3, [pc, #260]	; (800c8b4 <tcp_process+0x2c0>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	1e5a      	subs	r2, r3, #1
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2204      	movs	r2, #4
 800c7ba:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	3304      	adds	r3, #4
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f004 ff6d 	bl	80116a4 <ip4_route>
 800c7ca:	4601      	mov	r1, r0
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	3304      	adds	r3, #4
 800c7d0:	461a      	mov	r2, r3
 800c7d2:	4620      	mov	r0, r4
 800c7d4:	f7ff f88e 	bl	800b8f4 <tcp_eff_send_mss_netif>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	461a      	mov	r2, r3
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7e4:	009a      	lsls	r2, r3, #2
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7ea:	005b      	lsls	r3, r3, #1
 800c7ec:	f241 111c 	movw	r1, #4380	; 0x111c
 800c7f0:	428b      	cmp	r3, r1
 800c7f2:	bf38      	it	cc
 800c7f4:	460b      	movcc	r3, r1
 800c7f6:	429a      	cmp	r2, r3
 800c7f8:	d204      	bcs.n	800c804 <tcp_process+0x210>
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7fe:	009b      	lsls	r3, r3, #2
 800c800:	b29b      	uxth	r3, r3
 800c802:	e00d      	b.n	800c820 <tcp_process+0x22c>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c808:	005b      	lsls	r3, r3, #1
 800c80a:	f241 121c 	movw	r2, #4380	; 0x111c
 800c80e:	4293      	cmp	r3, r2
 800c810:	d904      	bls.n	800c81c <tcp_process+0x228>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c816:	005b      	lsls	r3, r3, #1
 800c818:	b29b      	uxth	r3, r3
 800c81a:	e001      	b.n	800c820 <tcp_process+0x22c>
 800c81c:	f241 131c 	movw	r3, #4380	; 0x111c
 800c820:	687a      	ldr	r2, [r7, #4]
 800c822:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d106      	bne.n	800c83e <tcp_process+0x24a>
 800c830:	4b1b      	ldr	r3, [pc, #108]	; (800c8a0 <tcp_process+0x2ac>)
 800c832:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800c836:	4924      	ldr	r1, [pc, #144]	; (800c8c8 <tcp_process+0x2d4>)
 800c838:	481b      	ldr	r0, [pc, #108]	; (800c8a8 <tcp_process+0x2b4>)
 800c83a:	f006 f9f3 	bl	8012c24 <iprintf>
        --pcb->snd_queuelen;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c844:	3b01      	subs	r3, #1
 800c846:	b29a      	uxth	r2, r3
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c852:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800c854:	69fb      	ldr	r3, [r7, #28]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d111      	bne.n	800c87e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c85e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800c860:	69fb      	ldr	r3, [r7, #28]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d106      	bne.n	800c874 <tcp_process+0x280>
 800c866:	4b0e      	ldr	r3, [pc, #56]	; (800c8a0 <tcp_process+0x2ac>)
 800c868:	f44f 725d 	mov.w	r2, #884	; 0x374
 800c86c:	4917      	ldr	r1, [pc, #92]	; (800c8cc <tcp_process+0x2d8>)
 800c86e:	480e      	ldr	r0, [pc, #56]	; (800c8a8 <tcp_process+0x2b4>)
 800c870:	f006 f9d8 	bl	8012c24 <iprintf>
          pcb->unsent = rseg->next;
 800c874:	69fb      	ldr	r3, [r7, #28]
 800c876:	681a      	ldr	r2, [r3, #0]
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	66da      	str	r2, [r3, #108]	; 0x6c
 800c87c:	e003      	b.n	800c886 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800c87e:	69fb      	ldr	r3, [r7, #28]
 800c880:	681a      	ldr	r2, [r3, #0]
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800c886:	69f8      	ldr	r0, [r7, #28]
 800c888:	f7fe fc57 	bl	800b13a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c890:	2b00      	cmp	r3, #0
 800c892:	d11d      	bne.n	800c8d0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c89a:	861a      	strh	r2, [r3, #48]	; 0x30
 800c89c:	e01f      	b.n	800c8de <tcp_process+0x2ea>
 800c89e:	bf00      	nop
 800c8a0:	08014f64 	.word	0x08014f64
 800c8a4:	0801519c 	.word	0x0801519c
 800c8a8:	08014fb0 	.word	0x08014fb0
 800c8ac:	24000118 	.word	0x24000118
 800c8b0:	24000110 	.word	0x24000110
 800c8b4:	2400010c 	.word	0x2400010c
 800c8b8:	080151b8 	.word	0x080151b8
 800c8bc:	24000119 	.word	0x24000119
 800c8c0:	24003470 	.word	0x24003470
 800c8c4:	240000fc 	.word	0x240000fc
 800c8c8:	080151d8 	.word	0x080151d8
 800c8cc:	080151f0 	.word	0x080151f0
        } else {
          pcb->rtime = 0;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2200      	movs	r2, #0
 800c8da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d00a      	beq.n	800c8fe <tcp_process+0x30a>
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8ee:	687a      	ldr	r2, [r7, #4]
 800c8f0:	6910      	ldr	r0, [r2, #16]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	6879      	ldr	r1, [r7, #4]
 800c8f6:	4798      	blx	r3
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	76bb      	strb	r3, [r7, #26]
 800c8fc:	e001      	b.n	800c902 <tcp_process+0x30e>
 800c8fe:	2300      	movs	r3, #0
 800c900:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800c902:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c906:	f113 0f0d 	cmn.w	r3, #13
 800c90a:	d102      	bne.n	800c912 <tcp_process+0x31e>
          return ERR_ABRT;
 800c90c:	f06f 030c 	mvn.w	r3, #12
 800c910:	e250      	b.n	800cdb4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	8b5b      	ldrh	r3, [r3, #26]
 800c916:	f043 0302 	orr.w	r3, r3, #2
 800c91a:	b29a      	uxth	r2, r3
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800c920:	e23a      	b.n	800cd98 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800c922:	4b9d      	ldr	r3, [pc, #628]	; (800cb98 <tcp_process+0x5a4>)
 800c924:	781b      	ldrb	r3, [r3, #0]
 800c926:	f003 0310 	and.w	r3, r3, #16
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	f000 8234 	beq.w	800cd98 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c930:	4b9a      	ldr	r3, [pc, #616]	; (800cb9c <tcp_process+0x5a8>)
 800c932:	6819      	ldr	r1, [r3, #0]
 800c934:	4b9a      	ldr	r3, [pc, #616]	; (800cba0 <tcp_process+0x5ac>)
 800c936:	881b      	ldrh	r3, [r3, #0]
 800c938:	461a      	mov	r2, r3
 800c93a:	4b9a      	ldr	r3, [pc, #616]	; (800cba4 <tcp_process+0x5b0>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c940:	4b99      	ldr	r3, [pc, #612]	; (800cba8 <tcp_process+0x5b4>)
 800c942:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c944:	885b      	ldrh	r3, [r3, #2]
 800c946:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c948:	4a97      	ldr	r2, [pc, #604]	; (800cba8 <tcp_process+0x5b4>)
 800c94a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c94c:	8812      	ldrh	r2, [r2, #0]
 800c94e:	b292      	uxth	r2, r2
 800c950:	9202      	str	r2, [sp, #8]
 800c952:	9301      	str	r3, [sp, #4]
 800c954:	4b95      	ldr	r3, [pc, #596]	; (800cbac <tcp_process+0x5b8>)
 800c956:	9300      	str	r3, [sp, #0]
 800c958:	4b95      	ldr	r3, [pc, #596]	; (800cbb0 <tcp_process+0x5bc>)
 800c95a:	4602      	mov	r2, r0
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f003 f8db 	bl	800fb18 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c968:	2b05      	cmp	r3, #5
 800c96a:	f200 8215 	bhi.w	800cd98 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2200      	movs	r2, #0
 800c972:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f002 fea5 	bl	800f6c4 <tcp_rexmit_rto>
      break;
 800c97a:	e20d      	b.n	800cd98 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800c97c:	4b86      	ldr	r3, [pc, #536]	; (800cb98 <tcp_process+0x5a4>)
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	f003 0310 	and.w	r3, r3, #16
 800c984:	2b00      	cmp	r3, #0
 800c986:	f000 80a1 	beq.w	800cacc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c98a:	4b84      	ldr	r3, [pc, #528]	; (800cb9c <tcp_process+0x5a8>)
 800c98c:	681a      	ldr	r2, [r3, #0]
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c992:	1ad3      	subs	r3, r2, r3
 800c994:	3b01      	subs	r3, #1
 800c996:	2b00      	cmp	r3, #0
 800c998:	db7e      	blt.n	800ca98 <tcp_process+0x4a4>
 800c99a:	4b80      	ldr	r3, [pc, #512]	; (800cb9c <tcp_process+0x5a8>)
 800c99c:	681a      	ldr	r2, [r3, #0]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9a2:	1ad3      	subs	r3, r2, r3
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	dc77      	bgt.n	800ca98 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2204      	movs	r2, #4
 800c9ac:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d102      	bne.n	800c9bc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800c9b6:	23fa      	movs	r3, #250	; 0xfa
 800c9b8:	76bb      	strb	r3, [r7, #26]
 800c9ba:	e01d      	b.n	800c9f8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9c0:	699b      	ldr	r3, [r3, #24]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d106      	bne.n	800c9d4 <tcp_process+0x3e0>
 800c9c6:	4b7b      	ldr	r3, [pc, #492]	; (800cbb4 <tcp_process+0x5c0>)
 800c9c8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800c9cc:	497a      	ldr	r1, [pc, #488]	; (800cbb8 <tcp_process+0x5c4>)
 800c9ce:	487b      	ldr	r0, [pc, #492]	; (800cbbc <tcp_process+0x5c8>)
 800c9d0:	f006 f928 	bl	8012c24 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9d8:	699b      	ldr	r3, [r3, #24]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d00a      	beq.n	800c9f4 <tcp_process+0x400>
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9e2:	699b      	ldr	r3, [r3, #24]
 800c9e4:	687a      	ldr	r2, [r7, #4]
 800c9e6:	6910      	ldr	r0, [r2, #16]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	6879      	ldr	r1, [r7, #4]
 800c9ec:	4798      	blx	r3
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	76bb      	strb	r3, [r7, #26]
 800c9f2:	e001      	b.n	800c9f8 <tcp_process+0x404>
 800c9f4:	23f0      	movs	r3, #240	; 0xf0
 800c9f6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800c9f8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d00a      	beq.n	800ca16 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ca00:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ca04:	f113 0f0d 	cmn.w	r3, #13
 800ca08:	d002      	beq.n	800ca10 <tcp_process+0x41c>
              tcp_abort(pcb);
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f7fd fcf0 	bl	800a3f0 <tcp_abort>
            }
            return ERR_ABRT;
 800ca10:	f06f 030c 	mvn.w	r3, #12
 800ca14:	e1ce      	b.n	800cdb4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f000 fae0 	bl	800cfdc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ca1c:	4b68      	ldr	r3, [pc, #416]	; (800cbc0 <tcp_process+0x5cc>)
 800ca1e:	881b      	ldrh	r3, [r3, #0]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d005      	beq.n	800ca30 <tcp_process+0x43c>
            recv_acked--;
 800ca24:	4b66      	ldr	r3, [pc, #408]	; (800cbc0 <tcp_process+0x5cc>)
 800ca26:	881b      	ldrh	r3, [r3, #0]
 800ca28:	3b01      	subs	r3, #1
 800ca2a:	b29a      	uxth	r2, r3
 800ca2c:	4b64      	ldr	r3, [pc, #400]	; (800cbc0 <tcp_process+0x5cc>)
 800ca2e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca34:	009a      	lsls	r2, r3, #2
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca3a:	005b      	lsls	r3, r3, #1
 800ca3c:	f241 111c 	movw	r1, #4380	; 0x111c
 800ca40:	428b      	cmp	r3, r1
 800ca42:	bf38      	it	cc
 800ca44:	460b      	movcc	r3, r1
 800ca46:	429a      	cmp	r2, r3
 800ca48:	d204      	bcs.n	800ca54 <tcp_process+0x460>
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca4e:	009b      	lsls	r3, r3, #2
 800ca50:	b29b      	uxth	r3, r3
 800ca52:	e00d      	b.n	800ca70 <tcp_process+0x47c>
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca58:	005b      	lsls	r3, r3, #1
 800ca5a:	f241 121c 	movw	r2, #4380	; 0x111c
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d904      	bls.n	800ca6c <tcp_process+0x478>
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca66:	005b      	lsls	r3, r3, #1
 800ca68:	b29b      	uxth	r3, r3
 800ca6a:	e001      	b.n	800ca70 <tcp_process+0x47c>
 800ca6c:	f241 131c 	movw	r3, #4380	; 0x111c
 800ca70:	687a      	ldr	r2, [r7, #4]
 800ca72:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ca76:	4b53      	ldr	r3, [pc, #332]	; (800cbc4 <tcp_process+0x5d0>)
 800ca78:	781b      	ldrb	r3, [r3, #0]
 800ca7a:	f003 0320 	and.w	r3, r3, #32
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d037      	beq.n	800caf2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	8b5b      	ldrh	r3, [r3, #26]
 800ca86:	f043 0302 	orr.w	r3, r3, #2
 800ca8a:	b29a      	uxth	r2, r3
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2207      	movs	r2, #7
 800ca94:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ca96:	e02c      	b.n	800caf2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ca98:	4b40      	ldr	r3, [pc, #256]	; (800cb9c <tcp_process+0x5a8>)
 800ca9a:	6819      	ldr	r1, [r3, #0]
 800ca9c:	4b40      	ldr	r3, [pc, #256]	; (800cba0 <tcp_process+0x5ac>)
 800ca9e:	881b      	ldrh	r3, [r3, #0]
 800caa0:	461a      	mov	r2, r3
 800caa2:	4b40      	ldr	r3, [pc, #256]	; (800cba4 <tcp_process+0x5b0>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800caa8:	4b3f      	ldr	r3, [pc, #252]	; (800cba8 <tcp_process+0x5b4>)
 800caaa:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800caac:	885b      	ldrh	r3, [r3, #2]
 800caae:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cab0:	4a3d      	ldr	r2, [pc, #244]	; (800cba8 <tcp_process+0x5b4>)
 800cab2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cab4:	8812      	ldrh	r2, [r2, #0]
 800cab6:	b292      	uxth	r2, r2
 800cab8:	9202      	str	r2, [sp, #8]
 800caba:	9301      	str	r3, [sp, #4]
 800cabc:	4b3b      	ldr	r3, [pc, #236]	; (800cbac <tcp_process+0x5b8>)
 800cabe:	9300      	str	r3, [sp, #0]
 800cac0:	4b3b      	ldr	r3, [pc, #236]	; (800cbb0 <tcp_process+0x5bc>)
 800cac2:	4602      	mov	r2, r0
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f003 f827 	bl	800fb18 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800caca:	e167      	b.n	800cd9c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800cacc:	4b32      	ldr	r3, [pc, #200]	; (800cb98 <tcp_process+0x5a4>)
 800cace:	781b      	ldrb	r3, [r3, #0]
 800cad0:	f003 0302 	and.w	r3, r3, #2
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	f000 8161 	beq.w	800cd9c <tcp_process+0x7a8>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cade:	1e5a      	subs	r2, r3, #1
 800cae0:	4b30      	ldr	r3, [pc, #192]	; (800cba4 <tcp_process+0x5b0>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	429a      	cmp	r2, r3
 800cae6:	f040 8159 	bne.w	800cd9c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f002 fe0c 	bl	800f708 <tcp_rexmit>
      break;
 800caf0:	e154      	b.n	800cd9c <tcp_process+0x7a8>
 800caf2:	e153      	b.n	800cd9c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f000 fa71 	bl	800cfdc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800cafa:	4b32      	ldr	r3, [pc, #200]	; (800cbc4 <tcp_process+0x5d0>)
 800cafc:	781b      	ldrb	r3, [r3, #0]
 800cafe:	f003 0320 	and.w	r3, r3, #32
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	f000 814c 	beq.w	800cda0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	8b5b      	ldrh	r3, [r3, #26]
 800cb0c:	f043 0302 	orr.w	r3, r3, #2
 800cb10:	b29a      	uxth	r2, r3
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2207      	movs	r2, #7
 800cb1a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cb1c:	e140      	b.n	800cda0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f000 fa5c 	bl	800cfdc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800cb24:	4b27      	ldr	r3, [pc, #156]	; (800cbc4 <tcp_process+0x5d0>)
 800cb26:	781b      	ldrb	r3, [r3, #0]
 800cb28:	f003 0320 	and.w	r3, r3, #32
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d071      	beq.n	800cc14 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cb30:	4b19      	ldr	r3, [pc, #100]	; (800cb98 <tcp_process+0x5a4>)
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	f003 0310 	and.w	r3, r3, #16
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d060      	beq.n	800cbfe <tcp_process+0x60a>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cb40:	4b16      	ldr	r3, [pc, #88]	; (800cb9c <tcp_process+0x5a8>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d15a      	bne.n	800cbfe <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d156      	bne.n	800cbfe <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	8b5b      	ldrh	r3, [r3, #26]
 800cb54:	f043 0302 	orr.w	r3, r3, #2
 800cb58:	b29a      	uxth	r2, r3
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f7fe fdbe 	bl	800b6e0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800cb64:	4b18      	ldr	r3, [pc, #96]	; (800cbc8 <tcp_process+0x5d4>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	687a      	ldr	r2, [r7, #4]
 800cb6a:	429a      	cmp	r2, r3
 800cb6c:	d105      	bne.n	800cb7a <tcp_process+0x586>
 800cb6e:	4b16      	ldr	r3, [pc, #88]	; (800cbc8 <tcp_process+0x5d4>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	68db      	ldr	r3, [r3, #12]
 800cb74:	4a14      	ldr	r2, [pc, #80]	; (800cbc8 <tcp_process+0x5d4>)
 800cb76:	6013      	str	r3, [r2, #0]
 800cb78:	e02e      	b.n	800cbd8 <tcp_process+0x5e4>
 800cb7a:	4b13      	ldr	r3, [pc, #76]	; (800cbc8 <tcp_process+0x5d4>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	617b      	str	r3, [r7, #20]
 800cb80:	e027      	b.n	800cbd2 <tcp_process+0x5de>
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	68db      	ldr	r3, [r3, #12]
 800cb86:	687a      	ldr	r2, [r7, #4]
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	d11f      	bne.n	800cbcc <tcp_process+0x5d8>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	68da      	ldr	r2, [r3, #12]
 800cb90:	697b      	ldr	r3, [r7, #20]
 800cb92:	60da      	str	r2, [r3, #12]
 800cb94:	e020      	b.n	800cbd8 <tcp_process+0x5e4>
 800cb96:	bf00      	nop
 800cb98:	24000118 	.word	0x24000118
 800cb9c:	24000110 	.word	0x24000110
 800cba0:	24000116 	.word	0x24000116
 800cba4:	2400010c 	.word	0x2400010c
 800cba8:	240000fc 	.word	0x240000fc
 800cbac:	2400058c 	.word	0x2400058c
 800cbb0:	24000590 	.word	0x24000590
 800cbb4:	08014f64 	.word	0x08014f64
 800cbb8:	08015204 	.word	0x08015204
 800cbbc:	08014fb0 	.word	0x08014fb0
 800cbc0:	24000114 	.word	0x24000114
 800cbc4:	24000119 	.word	0x24000119
 800cbc8:	2400346c 	.word	0x2400346c
 800cbcc:	697b      	ldr	r3, [r7, #20]
 800cbce:	68db      	ldr	r3, [r3, #12]
 800cbd0:	617b      	str	r3, [r7, #20]
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d1d4      	bne.n	800cb82 <tcp_process+0x58e>
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	60da      	str	r2, [r3, #12]
 800cbde:	4b77      	ldr	r3, [pc, #476]	; (800cdbc <tcp_process+0x7c8>)
 800cbe0:	2201      	movs	r2, #1
 800cbe2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	220a      	movs	r2, #10
 800cbe8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800cbea:	4b75      	ldr	r3, [pc, #468]	; (800cdc0 <tcp_process+0x7cc>)
 800cbec:	681a      	ldr	r2, [r3, #0]
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	60da      	str	r2, [r3, #12]
 800cbf2:	4a73      	ldr	r2, [pc, #460]	; (800cdc0 <tcp_process+0x7cc>)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6013      	str	r3, [r2, #0]
 800cbf8:	f003 f950 	bl	800fe9c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800cbfc:	e0d2      	b.n	800cda4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	8b5b      	ldrh	r3, [r3, #26]
 800cc02:	f043 0302 	orr.w	r3, r3, #2
 800cc06:	b29a      	uxth	r2, r3
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2208      	movs	r2, #8
 800cc10:	751a      	strb	r2, [r3, #20]
      break;
 800cc12:	e0c7      	b.n	800cda4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cc14:	4b6b      	ldr	r3, [pc, #428]	; (800cdc4 <tcp_process+0x7d0>)
 800cc16:	781b      	ldrb	r3, [r3, #0]
 800cc18:	f003 0310 	and.w	r3, r3, #16
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	f000 80c1 	beq.w	800cda4 <tcp_process+0x7b0>
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cc26:	4b68      	ldr	r3, [pc, #416]	; (800cdc8 <tcp_process+0x7d4>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	429a      	cmp	r2, r3
 800cc2c:	f040 80ba 	bne.w	800cda4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	f040 80b5 	bne.w	800cda4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2206      	movs	r2, #6
 800cc3e:	751a      	strb	r2, [r3, #20]
      break;
 800cc40:	e0b0      	b.n	800cda4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f000 f9ca 	bl	800cfdc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800cc48:	4b60      	ldr	r3, [pc, #384]	; (800cdcc <tcp_process+0x7d8>)
 800cc4a:	781b      	ldrb	r3, [r3, #0]
 800cc4c:	f003 0320 	and.w	r3, r3, #32
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	f000 80a9 	beq.w	800cda8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	8b5b      	ldrh	r3, [r3, #26]
 800cc5a:	f043 0302 	orr.w	r3, r3, #2
 800cc5e:	b29a      	uxth	r2, r3
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f7fe fd3b 	bl	800b6e0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800cc6a:	4b59      	ldr	r3, [pc, #356]	; (800cdd0 <tcp_process+0x7dc>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	687a      	ldr	r2, [r7, #4]
 800cc70:	429a      	cmp	r2, r3
 800cc72:	d105      	bne.n	800cc80 <tcp_process+0x68c>
 800cc74:	4b56      	ldr	r3, [pc, #344]	; (800cdd0 <tcp_process+0x7dc>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	68db      	ldr	r3, [r3, #12]
 800cc7a:	4a55      	ldr	r2, [pc, #340]	; (800cdd0 <tcp_process+0x7dc>)
 800cc7c:	6013      	str	r3, [r2, #0]
 800cc7e:	e013      	b.n	800cca8 <tcp_process+0x6b4>
 800cc80:	4b53      	ldr	r3, [pc, #332]	; (800cdd0 <tcp_process+0x7dc>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	613b      	str	r3, [r7, #16]
 800cc86:	e00c      	b.n	800cca2 <tcp_process+0x6ae>
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	68db      	ldr	r3, [r3, #12]
 800cc8c:	687a      	ldr	r2, [r7, #4]
 800cc8e:	429a      	cmp	r2, r3
 800cc90:	d104      	bne.n	800cc9c <tcp_process+0x6a8>
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	68da      	ldr	r2, [r3, #12]
 800cc96:	693b      	ldr	r3, [r7, #16]
 800cc98:	60da      	str	r2, [r3, #12]
 800cc9a:	e005      	b.n	800cca8 <tcp_process+0x6b4>
 800cc9c:	693b      	ldr	r3, [r7, #16]
 800cc9e:	68db      	ldr	r3, [r3, #12]
 800cca0:	613b      	str	r3, [r7, #16]
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d1ef      	bne.n	800cc88 <tcp_process+0x694>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	60da      	str	r2, [r3, #12]
 800ccae:	4b43      	ldr	r3, [pc, #268]	; (800cdbc <tcp_process+0x7c8>)
 800ccb0:	2201      	movs	r2, #1
 800ccb2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	220a      	movs	r2, #10
 800ccb8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ccba:	4b41      	ldr	r3, [pc, #260]	; (800cdc0 <tcp_process+0x7cc>)
 800ccbc:	681a      	ldr	r2, [r3, #0]
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	60da      	str	r2, [r3, #12]
 800ccc2:	4a3f      	ldr	r2, [pc, #252]	; (800cdc0 <tcp_process+0x7cc>)
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	6013      	str	r3, [r2, #0]
 800ccc8:	f003 f8e8 	bl	800fe9c <tcp_timer_needed>
      }
      break;
 800cccc:	e06c      	b.n	800cda8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f000 f984 	bl	800cfdc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ccd4:	4b3b      	ldr	r3, [pc, #236]	; (800cdc4 <tcp_process+0x7d0>)
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	f003 0310 	and.w	r3, r3, #16
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d065      	beq.n	800cdac <tcp_process+0x7b8>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cce4:	4b38      	ldr	r3, [pc, #224]	; (800cdc8 <tcp_process+0x7d4>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d15f      	bne.n	800cdac <tcp_process+0x7b8>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d15b      	bne.n	800cdac <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f7fe fcf3 	bl	800b6e0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ccfa:	4b35      	ldr	r3, [pc, #212]	; (800cdd0 <tcp_process+0x7dc>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	687a      	ldr	r2, [r7, #4]
 800cd00:	429a      	cmp	r2, r3
 800cd02:	d105      	bne.n	800cd10 <tcp_process+0x71c>
 800cd04:	4b32      	ldr	r3, [pc, #200]	; (800cdd0 <tcp_process+0x7dc>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	68db      	ldr	r3, [r3, #12]
 800cd0a:	4a31      	ldr	r2, [pc, #196]	; (800cdd0 <tcp_process+0x7dc>)
 800cd0c:	6013      	str	r3, [r2, #0]
 800cd0e:	e013      	b.n	800cd38 <tcp_process+0x744>
 800cd10:	4b2f      	ldr	r3, [pc, #188]	; (800cdd0 <tcp_process+0x7dc>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	60fb      	str	r3, [r7, #12]
 800cd16:	e00c      	b.n	800cd32 <tcp_process+0x73e>
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	68db      	ldr	r3, [r3, #12]
 800cd1c:	687a      	ldr	r2, [r7, #4]
 800cd1e:	429a      	cmp	r2, r3
 800cd20:	d104      	bne.n	800cd2c <tcp_process+0x738>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	68da      	ldr	r2, [r3, #12]
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	60da      	str	r2, [r3, #12]
 800cd2a:	e005      	b.n	800cd38 <tcp_process+0x744>
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	68db      	ldr	r3, [r3, #12]
 800cd30:	60fb      	str	r3, [r7, #12]
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d1ef      	bne.n	800cd18 <tcp_process+0x724>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	60da      	str	r2, [r3, #12]
 800cd3e:	4b1f      	ldr	r3, [pc, #124]	; (800cdbc <tcp_process+0x7c8>)
 800cd40:	2201      	movs	r2, #1
 800cd42:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	220a      	movs	r2, #10
 800cd48:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800cd4a:	4b1d      	ldr	r3, [pc, #116]	; (800cdc0 <tcp_process+0x7cc>)
 800cd4c:	681a      	ldr	r2, [r3, #0]
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	60da      	str	r2, [r3, #12]
 800cd52:	4a1b      	ldr	r2, [pc, #108]	; (800cdc0 <tcp_process+0x7cc>)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6013      	str	r3, [r2, #0]
 800cd58:	f003 f8a0 	bl	800fe9c <tcp_timer_needed>
      }
      break;
 800cd5c:	e026      	b.n	800cdac <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f000 f93c 	bl	800cfdc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800cd64:	4b17      	ldr	r3, [pc, #92]	; (800cdc4 <tcp_process+0x7d0>)
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	f003 0310 	and.w	r3, r3, #16
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d01f      	beq.n	800cdb0 <tcp_process+0x7bc>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cd74:	4b14      	ldr	r3, [pc, #80]	; (800cdc8 <tcp_process+0x7d4>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	d119      	bne.n	800cdb0 <tcp_process+0x7bc>
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d115      	bne.n	800cdb0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800cd84:	4b11      	ldr	r3, [pc, #68]	; (800cdcc <tcp_process+0x7d8>)
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	f043 0310 	orr.w	r3, r3, #16
 800cd8c:	b2da      	uxtb	r2, r3
 800cd8e:	4b0f      	ldr	r3, [pc, #60]	; (800cdcc <tcp_process+0x7d8>)
 800cd90:	701a      	strb	r2, [r3, #0]
      }
      break;
 800cd92:	e00d      	b.n	800cdb0 <tcp_process+0x7bc>
    default:
      break;
 800cd94:	bf00      	nop
 800cd96:	e00c      	b.n	800cdb2 <tcp_process+0x7be>
      break;
 800cd98:	bf00      	nop
 800cd9a:	e00a      	b.n	800cdb2 <tcp_process+0x7be>
      break;
 800cd9c:	bf00      	nop
 800cd9e:	e008      	b.n	800cdb2 <tcp_process+0x7be>
      break;
 800cda0:	bf00      	nop
 800cda2:	e006      	b.n	800cdb2 <tcp_process+0x7be>
      break;
 800cda4:	bf00      	nop
 800cda6:	e004      	b.n	800cdb2 <tcp_process+0x7be>
      break;
 800cda8:	bf00      	nop
 800cdaa:	e002      	b.n	800cdb2 <tcp_process+0x7be>
      break;
 800cdac:	bf00      	nop
 800cdae:	e000      	b.n	800cdb2 <tcp_process+0x7be>
      break;
 800cdb0:	bf00      	nop
  }
  return ERR_OK;
 800cdb2:	2300      	movs	r3, #0
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3724      	adds	r7, #36	; 0x24
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd90      	pop	{r4, r7, pc}
 800cdbc:	24003468 	.word	0x24003468
 800cdc0:	2400347c 	.word	0x2400347c
 800cdc4:	24000118 	.word	0x24000118
 800cdc8:	24000110 	.word	0x24000110
 800cdcc:	24000119 	.word	0x24000119
 800cdd0:	2400346c 	.word	0x2400346c

0800cdd4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800cdd4:	b590      	push	{r4, r7, lr}
 800cdd6:	b085      	sub	sp, #20
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d106      	bne.n	800cdf2 <tcp_oos_insert_segment+0x1e>
 800cde4:	4b3b      	ldr	r3, [pc, #236]	; (800ced4 <tcp_oos_insert_segment+0x100>)
 800cde6:	f240 421f 	movw	r2, #1055	; 0x41f
 800cdea:	493b      	ldr	r1, [pc, #236]	; (800ced8 <tcp_oos_insert_segment+0x104>)
 800cdec:	483b      	ldr	r0, [pc, #236]	; (800cedc <tcp_oos_insert_segment+0x108>)
 800cdee:	f005 ff19 	bl	8012c24 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	68db      	ldr	r3, [r3, #12]
 800cdf6:	899b      	ldrh	r3, [r3, #12]
 800cdf8:	b29b      	uxth	r3, r3
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f7fb f94a 	bl	8008094 <lwip_htons>
 800ce00:	4603      	mov	r3, r0
 800ce02:	b2db      	uxtb	r3, r3
 800ce04:	f003 0301 	and.w	r3, r3, #1
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d028      	beq.n	800ce5e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ce0c:	6838      	ldr	r0, [r7, #0]
 800ce0e:	f7fe f97f 	bl	800b110 <tcp_segs_free>
    next = NULL;
 800ce12:	2300      	movs	r3, #0
 800ce14:	603b      	str	r3, [r7, #0]
 800ce16:	e056      	b.n	800cec6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	68db      	ldr	r3, [r3, #12]
 800ce1c:	899b      	ldrh	r3, [r3, #12]
 800ce1e:	b29b      	uxth	r3, r3
 800ce20:	4618      	mov	r0, r3
 800ce22:	f7fb f937 	bl	8008094 <lwip_htons>
 800ce26:	4603      	mov	r3, r0
 800ce28:	b2db      	uxtb	r3, r3
 800ce2a:	f003 0301 	and.w	r3, r3, #1
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d00d      	beq.n	800ce4e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	68db      	ldr	r3, [r3, #12]
 800ce36:	899b      	ldrh	r3, [r3, #12]
 800ce38:	b29c      	uxth	r4, r3
 800ce3a:	2001      	movs	r0, #1
 800ce3c:	f7fb f92a 	bl	8008094 <lwip_htons>
 800ce40:	4603      	mov	r3, r0
 800ce42:	461a      	mov	r2, r3
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	68db      	ldr	r3, [r3, #12]
 800ce48:	4322      	orrs	r2, r4
 800ce4a:	b292      	uxth	r2, r2
 800ce4c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ce58:	68f8      	ldr	r0, [r7, #12]
 800ce5a:	f7fe f96e 	bl	800b13a <tcp_seg_free>
    while (next &&
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d00e      	beq.n	800ce82 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	891b      	ldrh	r3, [r3, #8]
 800ce68:	461a      	mov	r2, r3
 800ce6a:	4b1d      	ldr	r3, [pc, #116]	; (800cee0 <tcp_oos_insert_segment+0x10c>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	441a      	add	r2, r3
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	68db      	ldr	r3, [r3, #12]
 800ce74:	685b      	ldr	r3, [r3, #4]
 800ce76:	6839      	ldr	r1, [r7, #0]
 800ce78:	8909      	ldrh	r1, [r1, #8]
 800ce7a:	440b      	add	r3, r1
 800ce7c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	daca      	bge.n	800ce18 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d01e      	beq.n	800cec6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	891b      	ldrh	r3, [r3, #8]
 800ce8c:	461a      	mov	r2, r3
 800ce8e:	4b14      	ldr	r3, [pc, #80]	; (800cee0 <tcp_oos_insert_segment+0x10c>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	441a      	add	r2, r3
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	68db      	ldr	r3, [r3, #12]
 800ce98:	685b      	ldr	r3, [r3, #4]
 800ce9a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	dd12      	ble.n	800cec6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	68db      	ldr	r3, [r3, #12]
 800cea4:	685b      	ldr	r3, [r3, #4]
 800cea6:	b29a      	uxth	r2, r3
 800cea8:	4b0d      	ldr	r3, [pc, #52]	; (800cee0 <tcp_oos_insert_segment+0x10c>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	b29b      	uxth	r3, r3
 800ceae:	1ad3      	subs	r3, r2, r3
 800ceb0:	b29a      	uxth	r2, r3
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	685a      	ldr	r2, [r3, #4]
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	891b      	ldrh	r3, [r3, #8]
 800cebe:	4619      	mov	r1, r3
 800cec0:	4610      	mov	r0, r2
 800cec2:	f7fc fb77 	bl	80095b4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	683a      	ldr	r2, [r7, #0]
 800ceca:	601a      	str	r2, [r3, #0]
}
 800cecc:	bf00      	nop
 800cece:	3714      	adds	r7, #20
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd90      	pop	{r4, r7, pc}
 800ced4:	08014f64 	.word	0x08014f64
 800ced8:	08015224 	.word	0x08015224
 800cedc:	08014fb0 	.word	0x08014fb0
 800cee0:	2400010c 	.word	0x2400010c

0800cee4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800cee4:	b5b0      	push	{r4, r5, r7, lr}
 800cee6:	b086      	sub	sp, #24
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	60f8      	str	r0, [r7, #12]
 800ceec:	60b9      	str	r1, [r7, #8]
 800ceee:	607a      	str	r2, [r7, #4]
 800cef0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800cef2:	e03e      	b.n	800cf72 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	685b      	ldr	r3, [r3, #4]
 800cf02:	4618      	mov	r0, r3
 800cf04:	f7fc fd64 	bl	80099d0 <pbuf_clen>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cf12:	8a7a      	ldrh	r2, [r7, #18]
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d906      	bls.n	800cf26 <tcp_free_acked_segments+0x42>
 800cf18:	4b2a      	ldr	r3, [pc, #168]	; (800cfc4 <tcp_free_acked_segments+0xe0>)
 800cf1a:	f240 4257 	movw	r2, #1111	; 0x457
 800cf1e:	492a      	ldr	r1, [pc, #168]	; (800cfc8 <tcp_free_acked_segments+0xe4>)
 800cf20:	482a      	ldr	r0, [pc, #168]	; (800cfcc <tcp_free_acked_segments+0xe8>)
 800cf22:	f005 fe7f 	bl	8012c24 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800cf2c:	8a7b      	ldrh	r3, [r7, #18]
 800cf2e:	1ad3      	subs	r3, r2, r3
 800cf30:	b29a      	uxth	r2, r3
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	891a      	ldrh	r2, [r3, #8]
 800cf3c:	4b24      	ldr	r3, [pc, #144]	; (800cfd0 <tcp_free_acked_segments+0xec>)
 800cf3e:	881b      	ldrh	r3, [r3, #0]
 800cf40:	4413      	add	r3, r2
 800cf42:	b29a      	uxth	r2, r3
 800cf44:	4b22      	ldr	r3, [pc, #136]	; (800cfd0 <tcp_free_acked_segments+0xec>)
 800cf46:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800cf48:	6978      	ldr	r0, [r7, #20]
 800cf4a:	f7fe f8f6 	bl	800b13a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d00c      	beq.n	800cf72 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d109      	bne.n	800cf72 <tcp_free_acked_segments+0x8e>
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d106      	bne.n	800cf72 <tcp_free_acked_segments+0x8e>
 800cf64:	4b17      	ldr	r3, [pc, #92]	; (800cfc4 <tcp_free_acked_segments+0xe0>)
 800cf66:	f240 4261 	movw	r2, #1121	; 0x461
 800cf6a:	491a      	ldr	r1, [pc, #104]	; (800cfd4 <tcp_free_acked_segments+0xf0>)
 800cf6c:	4817      	ldr	r0, [pc, #92]	; (800cfcc <tcp_free_acked_segments+0xe8>)
 800cf6e:	f005 fe59 	bl	8012c24 <iprintf>
  while (seg_list != NULL &&
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d020      	beq.n	800cfba <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	68db      	ldr	r3, [r3, #12]
 800cf7c:	685b      	ldr	r3, [r3, #4]
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f7fb f89d 	bl	80080be <lwip_htonl>
 800cf84:	4604      	mov	r4, r0
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	891b      	ldrh	r3, [r3, #8]
 800cf8a:	461d      	mov	r5, r3
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	68db      	ldr	r3, [r3, #12]
 800cf90:	899b      	ldrh	r3, [r3, #12]
 800cf92:	b29b      	uxth	r3, r3
 800cf94:	4618      	mov	r0, r3
 800cf96:	f7fb f87d 	bl	8008094 <lwip_htons>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	b2db      	uxtb	r3, r3
 800cf9e:	f003 0303 	and.w	r3, r3, #3
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d001      	beq.n	800cfaa <tcp_free_acked_segments+0xc6>
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	e000      	b.n	800cfac <tcp_free_acked_segments+0xc8>
 800cfaa:	2300      	movs	r3, #0
 800cfac:	442b      	add	r3, r5
 800cfae:	18e2      	adds	r2, r4, r3
 800cfb0:	4b09      	ldr	r3, [pc, #36]	; (800cfd8 <tcp_free_acked_segments+0xf4>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	dd9c      	ble.n	800cef4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800cfba:	68bb      	ldr	r3, [r7, #8]
}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	3718      	adds	r7, #24
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bdb0      	pop	{r4, r5, r7, pc}
 800cfc4:	08014f64 	.word	0x08014f64
 800cfc8:	0801524c 	.word	0x0801524c
 800cfcc:	08014fb0 	.word	0x08014fb0
 800cfd0:	24000114 	.word	0x24000114
 800cfd4:	08015274 	.word	0x08015274
 800cfd8:	24000110 	.word	0x24000110

0800cfdc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800cfdc:	b5b0      	push	{r4, r5, r7, lr}
 800cfde:	b094      	sub	sp, #80	; 0x50
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d106      	bne.n	800cffc <tcp_receive+0x20>
 800cfee:	4ba6      	ldr	r3, [pc, #664]	; (800d288 <tcp_receive+0x2ac>)
 800cff0:	f240 427b 	movw	r2, #1147	; 0x47b
 800cff4:	49a5      	ldr	r1, [pc, #660]	; (800d28c <tcp_receive+0x2b0>)
 800cff6:	48a6      	ldr	r0, [pc, #664]	; (800d290 <tcp_receive+0x2b4>)
 800cff8:	f005 fe14 	bl	8012c24 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	7d1b      	ldrb	r3, [r3, #20]
 800d000:	2b03      	cmp	r3, #3
 800d002:	d806      	bhi.n	800d012 <tcp_receive+0x36>
 800d004:	4ba0      	ldr	r3, [pc, #640]	; (800d288 <tcp_receive+0x2ac>)
 800d006:	f240 427c 	movw	r2, #1148	; 0x47c
 800d00a:	49a2      	ldr	r1, [pc, #648]	; (800d294 <tcp_receive+0x2b8>)
 800d00c:	48a0      	ldr	r0, [pc, #640]	; (800d290 <tcp_receive+0x2b4>)
 800d00e:	f005 fe09 	bl	8012c24 <iprintf>

  if (flags & TCP_ACK) {
 800d012:	4ba1      	ldr	r3, [pc, #644]	; (800d298 <tcp_receive+0x2bc>)
 800d014:	781b      	ldrb	r3, [r3, #0]
 800d016:	f003 0310 	and.w	r3, r3, #16
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	f000 8263 	beq.w	800d4e6 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d026:	461a      	mov	r2, r3
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d02c:	4413      	add	r3, r2
 800d02e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d034:	4b99      	ldr	r3, [pc, #612]	; (800d29c <tcp_receive+0x2c0>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	1ad3      	subs	r3, r2, r3
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	db1b      	blt.n	800d076 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d042:	4b96      	ldr	r3, [pc, #600]	; (800d29c <tcp_receive+0x2c0>)
 800d044:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d046:	429a      	cmp	r2, r3
 800d048:	d106      	bne.n	800d058 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d04e:	4b94      	ldr	r3, [pc, #592]	; (800d2a0 <tcp_receive+0x2c4>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	1ad3      	subs	r3, r2, r3
 800d054:	2b00      	cmp	r3, #0
 800d056:	db0e      	blt.n	800d076 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d05c:	4b90      	ldr	r3, [pc, #576]	; (800d2a0 <tcp_receive+0x2c4>)
 800d05e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d060:	429a      	cmp	r2, r3
 800d062:	d125      	bne.n	800d0b0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d064:	4b8f      	ldr	r3, [pc, #572]	; (800d2a4 <tcp_receive+0x2c8>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	89db      	ldrh	r3, [r3, #14]
 800d06a:	b29a      	uxth	r2, r3
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d072:	429a      	cmp	r2, r3
 800d074:	d91c      	bls.n	800d0b0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800d076:	4b8b      	ldr	r3, [pc, #556]	; (800d2a4 <tcp_receive+0x2c8>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	89db      	ldrh	r3, [r3, #14]
 800d07c:	b29a      	uxth	r2, r3
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d090:	429a      	cmp	r2, r3
 800d092:	d205      	bcs.n	800d0a0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800d0a0:	4b7e      	ldr	r3, [pc, #504]	; (800d29c <tcp_receive+0x2c0>)
 800d0a2:	681a      	ldr	r2, [r3, #0]
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800d0a8:	4b7d      	ldr	r3, [pc, #500]	; (800d2a0 <tcp_receive+0x2c4>)
 800d0aa:	681a      	ldr	r2, [r3, #0]
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800d0b0:	4b7b      	ldr	r3, [pc, #492]	; (800d2a0 <tcp_receive+0x2c4>)
 800d0b2:	681a      	ldr	r2, [r3, #0]
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0b8:	1ad3      	subs	r3, r2, r3
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	dc58      	bgt.n	800d170 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800d0be:	4b7a      	ldr	r3, [pc, #488]	; (800d2a8 <tcp_receive+0x2cc>)
 800d0c0:	881b      	ldrh	r3, [r3, #0]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d14b      	bne.n	800d15e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0ca:	687a      	ldr	r2, [r7, #4]
 800d0cc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800d0d0:	4413      	add	r3, r2
 800d0d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0d4:	429a      	cmp	r2, r3
 800d0d6:	d142      	bne.n	800d15e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	db3d      	blt.n	800d15e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d0e6:	4b6e      	ldr	r3, [pc, #440]	; (800d2a0 <tcp_receive+0x2c4>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d137      	bne.n	800d15e <tcp_receive+0x182>
              found_dupack = 1;
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d0f8:	2bff      	cmp	r3, #255	; 0xff
 800d0fa:	d007      	beq.n	800d10c <tcp_receive+0x130>
                ++pcb->dupacks;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d102:	3301      	adds	r3, #1
 800d104:	b2da      	uxtb	r2, r3
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d112:	2b03      	cmp	r3, #3
 800d114:	d91b      	bls.n	800d14e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d120:	4413      	add	r3, r2
 800d122:	b29a      	uxth	r2, r3
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d12a:	429a      	cmp	r2, r3
 800d12c:	d30a      	bcc.n	800d144 <tcp_receive+0x168>
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d138:	4413      	add	r3, r2
 800d13a:	b29a      	uxth	r2, r3
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d142:	e004      	b.n	800d14e <tcp_receive+0x172>
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d14a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d154:	2b02      	cmp	r3, #2
 800d156:	d902      	bls.n	800d15e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f002 fb41 	bl	800f7e0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800d15e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d160:	2b00      	cmp	r3, #0
 800d162:	f040 8160 	bne.w	800d426 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2200      	movs	r2, #0
 800d16a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d16e:	e15a      	b.n	800d426 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d170:	4b4b      	ldr	r3, [pc, #300]	; (800d2a0 <tcp_receive+0x2c4>)
 800d172:	681a      	ldr	r2, [r3, #0]
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d178:	1ad3      	subs	r3, r2, r3
 800d17a:	3b01      	subs	r3, #1
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	f2c0 814d 	blt.w	800d41c <tcp_receive+0x440>
 800d182:	4b47      	ldr	r3, [pc, #284]	; (800d2a0 <tcp_receive+0x2c4>)
 800d184:	681a      	ldr	r2, [r3, #0]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d18a:	1ad3      	subs	r3, r2, r3
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	f300 8145 	bgt.w	800d41c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	8b5b      	ldrh	r3, [r3, #26]
 800d196:	f003 0304 	and.w	r3, r3, #4
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d010      	beq.n	800d1c0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	8b5b      	ldrh	r3, [r3, #26]
 800d1a2:	f023 0304 	bic.w	r3, r3, #4
 800d1a6:	b29a      	uxth	r2, r3
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d1ce:	10db      	asrs	r3, r3, #3
 800d1d0:	b21b      	sxth	r3, r3
 800d1d2:	b29a      	uxth	r2, r3
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d1da:	b29b      	uxth	r3, r3
 800d1dc:	4413      	add	r3, r2
 800d1de:	b29b      	uxth	r3, r3
 800d1e0:	b21a      	sxth	r2, r3
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800d1e8:	4b2d      	ldr	r3, [pc, #180]	; (800d2a0 <tcp_receive+0x2c4>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	b29a      	uxth	r2, r3
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1f2:	b29b      	uxth	r3, r3
 800d1f4:	1ad3      	subs	r3, r2, r3
 800d1f6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800d200:	4b27      	ldr	r3, [pc, #156]	; (800d2a0 <tcp_receive+0x2c4>)
 800d202:	681a      	ldr	r2, [r3, #0]
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	7d1b      	ldrb	r3, [r3, #20]
 800d20c:	2b03      	cmp	r3, #3
 800d20e:	f240 8096 	bls.w	800d33e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d21e:	429a      	cmp	r2, r3
 800d220:	d244      	bcs.n	800d2ac <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	8b5b      	ldrh	r3, [r3, #26]
 800d226:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d001      	beq.n	800d232 <tcp_receive+0x256>
 800d22e:	2301      	movs	r3, #1
 800d230:	e000      	b.n	800d234 <tcp_receive+0x258>
 800d232:	2302      	movs	r3, #2
 800d234:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800d238:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d23c:	b29a      	uxth	r2, r3
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d242:	fb12 f303 	smulbb	r3, r2, r3
 800d246:	b29b      	uxth	r3, r3
 800d248:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d24a:	4293      	cmp	r3, r2
 800d24c:	bf28      	it	cs
 800d24e:	4613      	movcs	r3, r2
 800d250:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d258:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d25a:	4413      	add	r3, r2
 800d25c:	b29a      	uxth	r2, r3
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d264:	429a      	cmp	r2, r3
 800d266:	d309      	bcc.n	800d27c <tcp_receive+0x2a0>
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d26e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d270:	4413      	add	r3, r2
 800d272:	b29a      	uxth	r2, r3
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d27a:	e060      	b.n	800d33e <tcp_receive+0x362>
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d282:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d286:	e05a      	b.n	800d33e <tcp_receive+0x362>
 800d288:	08014f64 	.word	0x08014f64
 800d28c:	08015294 	.word	0x08015294
 800d290:	08014fb0 	.word	0x08014fb0
 800d294:	080152b0 	.word	0x080152b0
 800d298:	24000118 	.word	0x24000118
 800d29c:	2400010c 	.word	0x2400010c
 800d2a0:	24000110 	.word	0x24000110
 800d2a4:	240000fc 	.word	0x240000fc
 800d2a8:	24000116 	.word	0x24000116
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d2b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d2b4:	4413      	add	r3, r2
 800d2b6:	b29a      	uxth	r2, r3
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	d309      	bcc.n	800d2d6 <tcp_receive+0x2fa>
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d2c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d2ca:	4413      	add	r3, r2
 800d2cc:	b29a      	uxth	r2, r3
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d2d4:	e004      	b.n	800d2e0 <tcp_receive+0x304>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d2dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	d326      	bcc.n	800d33e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d2fc:	1ad3      	subs	r3, r2, r3
 800d2fe:	b29a      	uxth	r2, r3
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d310:	4413      	add	r3, r2
 800d312:	b29a      	uxth	r2, r3
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d30a      	bcc.n	800d334 <tcp_receive+0x358>
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d328:	4413      	add	r3, r2
 800d32a:	b29a      	uxth	r2, r3
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d332:	e004      	b.n	800d33e <tcp_receive+0x362>
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d33a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d346:	4a98      	ldr	r2, [pc, #608]	; (800d5a8 <tcp_receive+0x5cc>)
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f7ff fdcb 	bl	800cee4 <tcp_free_acked_segments>
 800d34e:	4602      	mov	r2, r0
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d35c:	4a93      	ldr	r2, [pc, #588]	; (800d5ac <tcp_receive+0x5d0>)
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	f7ff fdc0 	bl	800cee4 <tcp_free_acked_segments>
 800d364:	4602      	mov	r2, r0
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d104      	bne.n	800d37c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d378:	861a      	strh	r2, [r3, #48]	; 0x30
 800d37a:	e002      	b.n	800d382 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2200      	movs	r2, #0
 800d380:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2200      	movs	r2, #0
 800d386:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d103      	bne.n	800d398 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2200      	movs	r2, #0
 800d394:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800d39e:	4b84      	ldr	r3, [pc, #528]	; (800d5b0 <tcp_receive+0x5d4>)
 800d3a0:	881b      	ldrh	r3, [r3, #0]
 800d3a2:	4413      	add	r3, r2
 800d3a4:	b29a      	uxth	r2, r3
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	8b5b      	ldrh	r3, [r3, #26]
 800d3b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d035      	beq.n	800d424 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d118      	bne.n	800d3f2 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d00c      	beq.n	800d3e2 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3d0:	68db      	ldr	r3, [r3, #12]
 800d3d2:	685b      	ldr	r3, [r3, #4]
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f7fa fe72 	bl	80080be <lwip_htonl>
 800d3da:	4603      	mov	r3, r0
 800d3dc:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	dc20      	bgt.n	800d424 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	8b5b      	ldrh	r3, [r3, #26]
 800d3e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d3ea:	b29a      	uxth	r2, r3
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d3f0:	e018      	b.n	800d424 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3fa:	68db      	ldr	r3, [r3, #12]
 800d3fc:	685b      	ldr	r3, [r3, #4]
 800d3fe:	4618      	mov	r0, r3
 800d400:	f7fa fe5d 	bl	80080be <lwip_htonl>
 800d404:	4603      	mov	r3, r0
 800d406:	1ae3      	subs	r3, r4, r3
 800d408:	2b00      	cmp	r3, #0
 800d40a:	dc0b      	bgt.n	800d424 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	8b5b      	ldrh	r3, [r3, #26]
 800d410:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d414:	b29a      	uxth	r2, r3
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d41a:	e003      	b.n	800d424 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800d41c:	6878      	ldr	r0, [r7, #4]
 800d41e:	f002 fbcd 	bl	800fbbc <tcp_send_empty_ack>
 800d422:	e000      	b.n	800d426 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d424:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d05b      	beq.n	800d4e6 <tcp_receive+0x50a>
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d432:	4b60      	ldr	r3, [pc, #384]	; (800d5b4 <tcp_receive+0x5d8>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	1ad3      	subs	r3, r2, r3
 800d438:	2b00      	cmp	r3, #0
 800d43a:	da54      	bge.n	800d4e6 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800d43c:	4b5e      	ldr	r3, [pc, #376]	; (800d5b8 <tcp_receive+0x5dc>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	b29a      	uxth	r2, r3
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d446:	b29b      	uxth	r3, r3
 800d448:	1ad3      	subs	r3, r2, r3
 800d44a:	b29b      	uxth	r3, r3
 800d44c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800d450:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d45a:	10db      	asrs	r3, r3, #3
 800d45c:	b21b      	sxth	r3, r3
 800d45e:	b29b      	uxth	r3, r3
 800d460:	1ad3      	subs	r3, r2, r3
 800d462:	b29b      	uxth	r3, r3
 800d464:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d46e:	b29a      	uxth	r2, r3
 800d470:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d474:	4413      	add	r3, r2
 800d476:	b29b      	uxth	r3, r3
 800d478:	b21a      	sxth	r2, r3
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800d47e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d482:	2b00      	cmp	r3, #0
 800d484:	da05      	bge.n	800d492 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800d486:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d48a:	425b      	negs	r3, r3
 800d48c:	b29b      	uxth	r3, r3
 800d48e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800d492:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d49c:	109b      	asrs	r3, r3, #2
 800d49e:	b21b      	sxth	r3, r3
 800d4a0:	b29b      	uxth	r3, r3
 800d4a2:	1ad3      	subs	r3, r2, r3
 800d4a4:	b29b      	uxth	r3, r3
 800d4a6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d4b0:	b29a      	uxth	r2, r3
 800d4b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d4b6:	4413      	add	r3, r2
 800d4b8:	b29b      	uxth	r3, r3
 800d4ba:	b21a      	sxth	r2, r3
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d4c6:	10db      	asrs	r3, r3, #3
 800d4c8:	b21b      	sxth	r3, r3
 800d4ca:	b29a      	uxth	r2, r3
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d4d2:	b29b      	uxth	r3, r3
 800d4d4:	4413      	add	r3, r2
 800d4d6:	b29b      	uxth	r3, r3
 800d4d8:	b21a      	sxth	r2, r3
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800d4e6:	4b35      	ldr	r3, [pc, #212]	; (800d5bc <tcp_receive+0x5e0>)
 800d4e8:	881b      	ldrh	r3, [r3, #0]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	f000 84e1 	beq.w	800deb2 <tcp_receive+0xed6>
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	7d1b      	ldrb	r3, [r3, #20]
 800d4f4:	2b06      	cmp	r3, #6
 800d4f6:	f200 84dc 	bhi.w	800deb2 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d4fe:	4b30      	ldr	r3, [pc, #192]	; (800d5c0 <tcp_receive+0x5e4>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	1ad3      	subs	r3, r2, r3
 800d504:	3b01      	subs	r3, #1
 800d506:	2b00      	cmp	r3, #0
 800d508:	f2c0 808e 	blt.w	800d628 <tcp_receive+0x64c>
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d510:	4b2a      	ldr	r3, [pc, #168]	; (800d5bc <tcp_receive+0x5e0>)
 800d512:	881b      	ldrh	r3, [r3, #0]
 800d514:	4619      	mov	r1, r3
 800d516:	4b2a      	ldr	r3, [pc, #168]	; (800d5c0 <tcp_receive+0x5e4>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	440b      	add	r3, r1
 800d51c:	1ad3      	subs	r3, r2, r3
 800d51e:	3301      	adds	r3, #1
 800d520:	2b00      	cmp	r3, #0
 800d522:	f300 8081 	bgt.w	800d628 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800d526:	4b27      	ldr	r3, [pc, #156]	; (800d5c4 <tcp_receive+0x5e8>)
 800d528:	685b      	ldr	r3, [r3, #4]
 800d52a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d530:	4b23      	ldr	r3, [pc, #140]	; (800d5c0 <tcp_receive+0x5e4>)
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	1ad3      	subs	r3, r2, r3
 800d536:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800d538:	4b22      	ldr	r3, [pc, #136]	; (800d5c4 <tcp_receive+0x5e8>)
 800d53a:	685b      	ldr	r3, [r3, #4]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d106      	bne.n	800d54e <tcp_receive+0x572>
 800d540:	4b21      	ldr	r3, [pc, #132]	; (800d5c8 <tcp_receive+0x5ec>)
 800d542:	f240 5294 	movw	r2, #1428	; 0x594
 800d546:	4921      	ldr	r1, [pc, #132]	; (800d5cc <tcp_receive+0x5f0>)
 800d548:	4821      	ldr	r0, [pc, #132]	; (800d5d0 <tcp_receive+0x5f4>)
 800d54a:	f005 fb6b 	bl	8012c24 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800d54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d550:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d554:	4293      	cmp	r3, r2
 800d556:	d906      	bls.n	800d566 <tcp_receive+0x58a>
 800d558:	4b1b      	ldr	r3, [pc, #108]	; (800d5c8 <tcp_receive+0x5ec>)
 800d55a:	f240 5295 	movw	r2, #1429	; 0x595
 800d55e:	491d      	ldr	r1, [pc, #116]	; (800d5d4 <tcp_receive+0x5f8>)
 800d560:	481b      	ldr	r0, [pc, #108]	; (800d5d0 <tcp_receive+0x5f4>)
 800d562:	f005 fb5f 	bl	8012c24 <iprintf>
      off = (u16_t)off32;
 800d566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d568:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800d56c:	4b15      	ldr	r3, [pc, #84]	; (800d5c4 <tcp_receive+0x5e8>)
 800d56e:	685b      	ldr	r3, [r3, #4]
 800d570:	891b      	ldrh	r3, [r3, #8]
 800d572:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d576:	429a      	cmp	r2, r3
 800d578:	d906      	bls.n	800d588 <tcp_receive+0x5ac>
 800d57a:	4b13      	ldr	r3, [pc, #76]	; (800d5c8 <tcp_receive+0x5ec>)
 800d57c:	f240 5297 	movw	r2, #1431	; 0x597
 800d580:	4915      	ldr	r1, [pc, #84]	; (800d5d8 <tcp_receive+0x5fc>)
 800d582:	4813      	ldr	r0, [pc, #76]	; (800d5d0 <tcp_receive+0x5f4>)
 800d584:	f005 fb4e 	bl	8012c24 <iprintf>
      inseg.len -= off;
 800d588:	4b0e      	ldr	r3, [pc, #56]	; (800d5c4 <tcp_receive+0x5e8>)
 800d58a:	891a      	ldrh	r2, [r3, #8]
 800d58c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d590:	1ad3      	subs	r3, r2, r3
 800d592:	b29a      	uxth	r2, r3
 800d594:	4b0b      	ldr	r3, [pc, #44]	; (800d5c4 <tcp_receive+0x5e8>)
 800d596:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800d598:	4b0a      	ldr	r3, [pc, #40]	; (800d5c4 <tcp_receive+0x5e8>)
 800d59a:	685b      	ldr	r3, [r3, #4]
 800d59c:	891a      	ldrh	r2, [r3, #8]
 800d59e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d5a2:	1ad3      	subs	r3, r2, r3
 800d5a4:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800d5a6:	e029      	b.n	800d5fc <tcp_receive+0x620>
 800d5a8:	080152cc 	.word	0x080152cc
 800d5ac:	080152d4 	.word	0x080152d4
 800d5b0:	24000114 	.word	0x24000114
 800d5b4:	24000110 	.word	0x24000110
 800d5b8:	24003470 	.word	0x24003470
 800d5bc:	24000116 	.word	0x24000116
 800d5c0:	2400010c 	.word	0x2400010c
 800d5c4:	240000ec 	.word	0x240000ec
 800d5c8:	08014f64 	.word	0x08014f64
 800d5cc:	080152dc 	.word	0x080152dc
 800d5d0:	08014fb0 	.word	0x08014fb0
 800d5d4:	080152ec 	.word	0x080152ec
 800d5d8:	080152fc 	.word	0x080152fc
        off -= p->len;
 800d5dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5de:	895b      	ldrh	r3, [r3, #10]
 800d5e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d5e4:	1ad3      	subs	r3, r2, r3
 800d5e6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800d5ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5ec:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d5ee:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800d5f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800d5f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800d5fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5fe:	895b      	ldrh	r3, [r3, #10]
 800d600:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d604:	429a      	cmp	r2, r3
 800d606:	d8e9      	bhi.n	800d5dc <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800d608:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d60c:	4619      	mov	r1, r3
 800d60e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d610:	f7fc f8d0 	bl	80097b4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d618:	4a91      	ldr	r2, [pc, #580]	; (800d860 <tcp_receive+0x884>)
 800d61a:	6013      	str	r3, [r2, #0]
 800d61c:	4b91      	ldr	r3, [pc, #580]	; (800d864 <tcp_receive+0x888>)
 800d61e:	68db      	ldr	r3, [r3, #12]
 800d620:	4a8f      	ldr	r2, [pc, #572]	; (800d860 <tcp_receive+0x884>)
 800d622:	6812      	ldr	r2, [r2, #0]
 800d624:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d626:	e00d      	b.n	800d644 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800d628:	4b8d      	ldr	r3, [pc, #564]	; (800d860 <tcp_receive+0x884>)
 800d62a:	681a      	ldr	r2, [r3, #0]
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d630:	1ad3      	subs	r3, r2, r3
 800d632:	2b00      	cmp	r3, #0
 800d634:	da06      	bge.n	800d644 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	8b5b      	ldrh	r3, [r3, #26]
 800d63a:	f043 0302 	orr.w	r3, r3, #2
 800d63e:	b29a      	uxth	r2, r3
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d644:	4b86      	ldr	r3, [pc, #536]	; (800d860 <tcp_receive+0x884>)
 800d646:	681a      	ldr	r2, [r3, #0]
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d64c:	1ad3      	subs	r3, r2, r3
 800d64e:	2b00      	cmp	r3, #0
 800d650:	f2c0 842a 	blt.w	800dea8 <tcp_receive+0xecc>
 800d654:	4b82      	ldr	r3, [pc, #520]	; (800d860 <tcp_receive+0x884>)
 800d656:	681a      	ldr	r2, [r3, #0]
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d65c:	6879      	ldr	r1, [r7, #4]
 800d65e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d660:	440b      	add	r3, r1
 800d662:	1ad3      	subs	r3, r2, r3
 800d664:	3301      	adds	r3, #1
 800d666:	2b00      	cmp	r3, #0
 800d668:	f300 841e 	bgt.w	800dea8 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d670:	4b7b      	ldr	r3, [pc, #492]	; (800d860 <tcp_receive+0x884>)
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	429a      	cmp	r2, r3
 800d676:	f040 829a 	bne.w	800dbae <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800d67a:	4b7a      	ldr	r3, [pc, #488]	; (800d864 <tcp_receive+0x888>)
 800d67c:	891c      	ldrh	r4, [r3, #8]
 800d67e:	4b79      	ldr	r3, [pc, #484]	; (800d864 <tcp_receive+0x888>)
 800d680:	68db      	ldr	r3, [r3, #12]
 800d682:	899b      	ldrh	r3, [r3, #12]
 800d684:	b29b      	uxth	r3, r3
 800d686:	4618      	mov	r0, r3
 800d688:	f7fa fd04 	bl	8008094 <lwip_htons>
 800d68c:	4603      	mov	r3, r0
 800d68e:	b2db      	uxtb	r3, r3
 800d690:	f003 0303 	and.w	r3, r3, #3
 800d694:	2b00      	cmp	r3, #0
 800d696:	d001      	beq.n	800d69c <tcp_receive+0x6c0>
 800d698:	2301      	movs	r3, #1
 800d69a:	e000      	b.n	800d69e <tcp_receive+0x6c2>
 800d69c:	2300      	movs	r3, #0
 800d69e:	4423      	add	r3, r4
 800d6a0:	b29a      	uxth	r2, r3
 800d6a2:	4b71      	ldr	r3, [pc, #452]	; (800d868 <tcp_receive+0x88c>)
 800d6a4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d6aa:	4b6f      	ldr	r3, [pc, #444]	; (800d868 <tcp_receive+0x88c>)
 800d6ac:	881b      	ldrh	r3, [r3, #0]
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d275      	bcs.n	800d79e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d6b2:	4b6c      	ldr	r3, [pc, #432]	; (800d864 <tcp_receive+0x888>)
 800d6b4:	68db      	ldr	r3, [r3, #12]
 800d6b6:	899b      	ldrh	r3, [r3, #12]
 800d6b8:	b29b      	uxth	r3, r3
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7fa fcea 	bl	8008094 <lwip_htons>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	b2db      	uxtb	r3, r3
 800d6c4:	f003 0301 	and.w	r3, r3, #1
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d01f      	beq.n	800d70c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800d6cc:	4b65      	ldr	r3, [pc, #404]	; (800d864 <tcp_receive+0x888>)
 800d6ce:	68db      	ldr	r3, [r3, #12]
 800d6d0:	899b      	ldrh	r3, [r3, #12]
 800d6d2:	b29b      	uxth	r3, r3
 800d6d4:	b21b      	sxth	r3, r3
 800d6d6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d6da:	b21c      	sxth	r4, r3
 800d6dc:	4b61      	ldr	r3, [pc, #388]	; (800d864 <tcp_receive+0x888>)
 800d6de:	68db      	ldr	r3, [r3, #12]
 800d6e0:	899b      	ldrh	r3, [r3, #12]
 800d6e2:	b29b      	uxth	r3, r3
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f7fa fcd5 	bl	8008094 <lwip_htons>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	b2db      	uxtb	r3, r3
 800d6ee:	b29b      	uxth	r3, r3
 800d6f0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d6f4:	b29b      	uxth	r3, r3
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f7fa fccc 	bl	8008094 <lwip_htons>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	b21b      	sxth	r3, r3
 800d700:	4323      	orrs	r3, r4
 800d702:	b21a      	sxth	r2, r3
 800d704:	4b57      	ldr	r3, [pc, #348]	; (800d864 <tcp_receive+0x888>)
 800d706:	68db      	ldr	r3, [r3, #12]
 800d708:	b292      	uxth	r2, r2
 800d70a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d710:	4b54      	ldr	r3, [pc, #336]	; (800d864 <tcp_receive+0x888>)
 800d712:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d714:	4b53      	ldr	r3, [pc, #332]	; (800d864 <tcp_receive+0x888>)
 800d716:	68db      	ldr	r3, [r3, #12]
 800d718:	899b      	ldrh	r3, [r3, #12]
 800d71a:	b29b      	uxth	r3, r3
 800d71c:	4618      	mov	r0, r3
 800d71e:	f7fa fcb9 	bl	8008094 <lwip_htons>
 800d722:	4603      	mov	r3, r0
 800d724:	b2db      	uxtb	r3, r3
 800d726:	f003 0302 	and.w	r3, r3, #2
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d005      	beq.n	800d73a <tcp_receive+0x75e>
            inseg.len -= 1;
 800d72e:	4b4d      	ldr	r3, [pc, #308]	; (800d864 <tcp_receive+0x888>)
 800d730:	891b      	ldrh	r3, [r3, #8]
 800d732:	3b01      	subs	r3, #1
 800d734:	b29a      	uxth	r2, r3
 800d736:	4b4b      	ldr	r3, [pc, #300]	; (800d864 <tcp_receive+0x888>)
 800d738:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800d73a:	4b4a      	ldr	r3, [pc, #296]	; (800d864 <tcp_receive+0x888>)
 800d73c:	685b      	ldr	r3, [r3, #4]
 800d73e:	4a49      	ldr	r2, [pc, #292]	; (800d864 <tcp_receive+0x888>)
 800d740:	8912      	ldrh	r2, [r2, #8]
 800d742:	4611      	mov	r1, r2
 800d744:	4618      	mov	r0, r3
 800d746:	f7fb ff35 	bl	80095b4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800d74a:	4b46      	ldr	r3, [pc, #280]	; (800d864 <tcp_receive+0x888>)
 800d74c:	891c      	ldrh	r4, [r3, #8]
 800d74e:	4b45      	ldr	r3, [pc, #276]	; (800d864 <tcp_receive+0x888>)
 800d750:	68db      	ldr	r3, [r3, #12]
 800d752:	899b      	ldrh	r3, [r3, #12]
 800d754:	b29b      	uxth	r3, r3
 800d756:	4618      	mov	r0, r3
 800d758:	f7fa fc9c 	bl	8008094 <lwip_htons>
 800d75c:	4603      	mov	r3, r0
 800d75e:	b2db      	uxtb	r3, r3
 800d760:	f003 0303 	and.w	r3, r3, #3
 800d764:	2b00      	cmp	r3, #0
 800d766:	d001      	beq.n	800d76c <tcp_receive+0x790>
 800d768:	2301      	movs	r3, #1
 800d76a:	e000      	b.n	800d76e <tcp_receive+0x792>
 800d76c:	2300      	movs	r3, #0
 800d76e:	4423      	add	r3, r4
 800d770:	b29a      	uxth	r2, r3
 800d772:	4b3d      	ldr	r3, [pc, #244]	; (800d868 <tcp_receive+0x88c>)
 800d774:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d776:	4b3c      	ldr	r3, [pc, #240]	; (800d868 <tcp_receive+0x88c>)
 800d778:	881b      	ldrh	r3, [r3, #0]
 800d77a:	461a      	mov	r2, r3
 800d77c:	4b38      	ldr	r3, [pc, #224]	; (800d860 <tcp_receive+0x884>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	441a      	add	r2, r3
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d786:	6879      	ldr	r1, [r7, #4]
 800d788:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d78a:	440b      	add	r3, r1
 800d78c:	429a      	cmp	r2, r3
 800d78e:	d006      	beq.n	800d79e <tcp_receive+0x7c2>
 800d790:	4b36      	ldr	r3, [pc, #216]	; (800d86c <tcp_receive+0x890>)
 800d792:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800d796:	4936      	ldr	r1, [pc, #216]	; (800d870 <tcp_receive+0x894>)
 800d798:	4836      	ldr	r0, [pc, #216]	; (800d874 <tcp_receive+0x898>)
 800d79a:	f005 fa43 	bl	8012c24 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	f000 80e7 	beq.w	800d976 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d7a8:	4b2e      	ldr	r3, [pc, #184]	; (800d864 <tcp_receive+0x888>)
 800d7aa:	68db      	ldr	r3, [r3, #12]
 800d7ac:	899b      	ldrh	r3, [r3, #12]
 800d7ae:	b29b      	uxth	r3, r3
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f7fa fc6f 	bl	8008094 <lwip_htons>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	b2db      	uxtb	r3, r3
 800d7ba:	f003 0301 	and.w	r3, r3, #1
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d010      	beq.n	800d7e4 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800d7c2:	e00a      	b.n	800d7da <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7c8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7ce:	681a      	ldr	r2, [r3, #0]
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800d7d4:	68f8      	ldr	r0, [r7, #12]
 800d7d6:	f7fd fcb0 	bl	800b13a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d1f0      	bne.n	800d7c4 <tcp_receive+0x7e8>
 800d7e2:	e0c8      	b.n	800d976 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7e8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800d7ea:	e052      	b.n	800d892 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d7ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7ee:	68db      	ldr	r3, [r3, #12]
 800d7f0:	899b      	ldrh	r3, [r3, #12]
 800d7f2:	b29b      	uxth	r3, r3
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f7fa fc4d 	bl	8008094 <lwip_htons>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	b2db      	uxtb	r3, r3
 800d7fe:	f003 0301 	and.w	r3, r3, #1
 800d802:	2b00      	cmp	r3, #0
 800d804:	d03d      	beq.n	800d882 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800d806:	4b17      	ldr	r3, [pc, #92]	; (800d864 <tcp_receive+0x888>)
 800d808:	68db      	ldr	r3, [r3, #12]
 800d80a:	899b      	ldrh	r3, [r3, #12]
 800d80c:	b29b      	uxth	r3, r3
 800d80e:	4618      	mov	r0, r3
 800d810:	f7fa fc40 	bl	8008094 <lwip_htons>
 800d814:	4603      	mov	r3, r0
 800d816:	b2db      	uxtb	r3, r3
 800d818:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d130      	bne.n	800d882 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800d820:	4b10      	ldr	r3, [pc, #64]	; (800d864 <tcp_receive+0x888>)
 800d822:	68db      	ldr	r3, [r3, #12]
 800d824:	899b      	ldrh	r3, [r3, #12]
 800d826:	b29c      	uxth	r4, r3
 800d828:	2001      	movs	r0, #1
 800d82a:	f7fa fc33 	bl	8008094 <lwip_htons>
 800d82e:	4603      	mov	r3, r0
 800d830:	461a      	mov	r2, r3
 800d832:	4b0c      	ldr	r3, [pc, #48]	; (800d864 <tcp_receive+0x888>)
 800d834:	68db      	ldr	r3, [r3, #12]
 800d836:	4322      	orrs	r2, r4
 800d838:	b292      	uxth	r2, r2
 800d83a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800d83c:	4b09      	ldr	r3, [pc, #36]	; (800d864 <tcp_receive+0x888>)
 800d83e:	891c      	ldrh	r4, [r3, #8]
 800d840:	4b08      	ldr	r3, [pc, #32]	; (800d864 <tcp_receive+0x888>)
 800d842:	68db      	ldr	r3, [r3, #12]
 800d844:	899b      	ldrh	r3, [r3, #12]
 800d846:	b29b      	uxth	r3, r3
 800d848:	4618      	mov	r0, r3
 800d84a:	f7fa fc23 	bl	8008094 <lwip_htons>
 800d84e:	4603      	mov	r3, r0
 800d850:	b2db      	uxtb	r3, r3
 800d852:	f003 0303 	and.w	r3, r3, #3
 800d856:	2b00      	cmp	r3, #0
 800d858:	d00e      	beq.n	800d878 <tcp_receive+0x89c>
 800d85a:	2301      	movs	r3, #1
 800d85c:	e00d      	b.n	800d87a <tcp_receive+0x89e>
 800d85e:	bf00      	nop
 800d860:	2400010c 	.word	0x2400010c
 800d864:	240000ec 	.word	0x240000ec
 800d868:	24000116 	.word	0x24000116
 800d86c:	08014f64 	.word	0x08014f64
 800d870:	0801530c 	.word	0x0801530c
 800d874:	08014fb0 	.word	0x08014fb0
 800d878:	2300      	movs	r3, #0
 800d87a:	4423      	add	r3, r4
 800d87c:	b29a      	uxth	r2, r3
 800d87e:	4b98      	ldr	r3, [pc, #608]	; (800dae0 <tcp_receive+0xb04>)
 800d880:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800d882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d884:	613b      	str	r3, [r7, #16]
              next = next->next;
 800d886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800d88c:	6938      	ldr	r0, [r7, #16]
 800d88e:	f7fd fc54 	bl	800b13a <tcp_seg_free>
            while (next &&
 800d892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d894:	2b00      	cmp	r3, #0
 800d896:	d00e      	beq.n	800d8b6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800d898:	4b91      	ldr	r3, [pc, #580]	; (800dae0 <tcp_receive+0xb04>)
 800d89a:	881b      	ldrh	r3, [r3, #0]
 800d89c:	461a      	mov	r2, r3
 800d89e:	4b91      	ldr	r3, [pc, #580]	; (800dae4 <tcp_receive+0xb08>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	441a      	add	r2, r3
 800d8a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8a6:	68db      	ldr	r3, [r3, #12]
 800d8a8:	685b      	ldr	r3, [r3, #4]
 800d8aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d8ac:	8909      	ldrh	r1, [r1, #8]
 800d8ae:	440b      	add	r3, r1
 800d8b0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	da9a      	bge.n	800d7ec <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800d8b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d059      	beq.n	800d970 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800d8bc:	4b88      	ldr	r3, [pc, #544]	; (800dae0 <tcp_receive+0xb04>)
 800d8be:	881b      	ldrh	r3, [r3, #0]
 800d8c0:	461a      	mov	r2, r3
 800d8c2:	4b88      	ldr	r3, [pc, #544]	; (800dae4 <tcp_receive+0xb08>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	441a      	add	r2, r3
 800d8c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8ca:	68db      	ldr	r3, [r3, #12]
 800d8cc:	685b      	ldr	r3, [r3, #4]
 800d8ce:	1ad3      	subs	r3, r2, r3
            if (next &&
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	dd4d      	ble.n	800d970 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800d8d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8d6:	68db      	ldr	r3, [r3, #12]
 800d8d8:	685b      	ldr	r3, [r3, #4]
 800d8da:	b29a      	uxth	r2, r3
 800d8dc:	4b81      	ldr	r3, [pc, #516]	; (800dae4 <tcp_receive+0xb08>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	b29b      	uxth	r3, r3
 800d8e2:	1ad3      	subs	r3, r2, r3
 800d8e4:	b29a      	uxth	r2, r3
 800d8e6:	4b80      	ldr	r3, [pc, #512]	; (800dae8 <tcp_receive+0xb0c>)
 800d8e8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d8ea:	4b7f      	ldr	r3, [pc, #508]	; (800dae8 <tcp_receive+0xb0c>)
 800d8ec:	68db      	ldr	r3, [r3, #12]
 800d8ee:	899b      	ldrh	r3, [r3, #12]
 800d8f0:	b29b      	uxth	r3, r3
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f7fa fbce 	bl	8008094 <lwip_htons>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	b2db      	uxtb	r3, r3
 800d8fc:	f003 0302 	and.w	r3, r3, #2
 800d900:	2b00      	cmp	r3, #0
 800d902:	d005      	beq.n	800d910 <tcp_receive+0x934>
                inseg.len -= 1;
 800d904:	4b78      	ldr	r3, [pc, #480]	; (800dae8 <tcp_receive+0xb0c>)
 800d906:	891b      	ldrh	r3, [r3, #8]
 800d908:	3b01      	subs	r3, #1
 800d90a:	b29a      	uxth	r2, r3
 800d90c:	4b76      	ldr	r3, [pc, #472]	; (800dae8 <tcp_receive+0xb0c>)
 800d90e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800d910:	4b75      	ldr	r3, [pc, #468]	; (800dae8 <tcp_receive+0xb0c>)
 800d912:	685b      	ldr	r3, [r3, #4]
 800d914:	4a74      	ldr	r2, [pc, #464]	; (800dae8 <tcp_receive+0xb0c>)
 800d916:	8912      	ldrh	r2, [r2, #8]
 800d918:	4611      	mov	r1, r2
 800d91a:	4618      	mov	r0, r3
 800d91c:	f7fb fe4a 	bl	80095b4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800d920:	4b71      	ldr	r3, [pc, #452]	; (800dae8 <tcp_receive+0xb0c>)
 800d922:	891c      	ldrh	r4, [r3, #8]
 800d924:	4b70      	ldr	r3, [pc, #448]	; (800dae8 <tcp_receive+0xb0c>)
 800d926:	68db      	ldr	r3, [r3, #12]
 800d928:	899b      	ldrh	r3, [r3, #12]
 800d92a:	b29b      	uxth	r3, r3
 800d92c:	4618      	mov	r0, r3
 800d92e:	f7fa fbb1 	bl	8008094 <lwip_htons>
 800d932:	4603      	mov	r3, r0
 800d934:	b2db      	uxtb	r3, r3
 800d936:	f003 0303 	and.w	r3, r3, #3
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d001      	beq.n	800d942 <tcp_receive+0x966>
 800d93e:	2301      	movs	r3, #1
 800d940:	e000      	b.n	800d944 <tcp_receive+0x968>
 800d942:	2300      	movs	r3, #0
 800d944:	4423      	add	r3, r4
 800d946:	b29a      	uxth	r2, r3
 800d948:	4b65      	ldr	r3, [pc, #404]	; (800dae0 <tcp_receive+0xb04>)
 800d94a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800d94c:	4b64      	ldr	r3, [pc, #400]	; (800dae0 <tcp_receive+0xb04>)
 800d94e:	881b      	ldrh	r3, [r3, #0]
 800d950:	461a      	mov	r2, r3
 800d952:	4b64      	ldr	r3, [pc, #400]	; (800dae4 <tcp_receive+0xb08>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	441a      	add	r2, r3
 800d958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d95a:	68db      	ldr	r3, [r3, #12]
 800d95c:	685b      	ldr	r3, [r3, #4]
 800d95e:	429a      	cmp	r2, r3
 800d960:	d006      	beq.n	800d970 <tcp_receive+0x994>
 800d962:	4b62      	ldr	r3, [pc, #392]	; (800daec <tcp_receive+0xb10>)
 800d964:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800d968:	4961      	ldr	r1, [pc, #388]	; (800daf0 <tcp_receive+0xb14>)
 800d96a:	4862      	ldr	r0, [pc, #392]	; (800daf4 <tcp_receive+0xb18>)
 800d96c:	f005 f95a 	bl	8012c24 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d974:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800d976:	4b5a      	ldr	r3, [pc, #360]	; (800dae0 <tcp_receive+0xb04>)
 800d978:	881b      	ldrh	r3, [r3, #0]
 800d97a:	461a      	mov	r2, r3
 800d97c:	4b59      	ldr	r3, [pc, #356]	; (800dae4 <tcp_receive+0xb08>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	441a      	add	r2, r3
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d98a:	4b55      	ldr	r3, [pc, #340]	; (800dae0 <tcp_receive+0xb04>)
 800d98c:	881b      	ldrh	r3, [r3, #0]
 800d98e:	429a      	cmp	r2, r3
 800d990:	d206      	bcs.n	800d9a0 <tcp_receive+0x9c4>
 800d992:	4b56      	ldr	r3, [pc, #344]	; (800daec <tcp_receive+0xb10>)
 800d994:	f240 6207 	movw	r2, #1543	; 0x607
 800d998:	4957      	ldr	r1, [pc, #348]	; (800daf8 <tcp_receive+0xb1c>)
 800d99a:	4856      	ldr	r0, [pc, #344]	; (800daf4 <tcp_receive+0xb18>)
 800d99c:	f005 f942 	bl	8012c24 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d9a4:	4b4e      	ldr	r3, [pc, #312]	; (800dae0 <tcp_receive+0xb04>)
 800d9a6:	881b      	ldrh	r3, [r3, #0]
 800d9a8:	1ad3      	subs	r3, r2, r3
 800d9aa:	b29a      	uxth	r2, r3
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f7fc fe9d 	bl	800a6f0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800d9b6:	4b4c      	ldr	r3, [pc, #304]	; (800dae8 <tcp_receive+0xb0c>)
 800d9b8:	685b      	ldr	r3, [r3, #4]
 800d9ba:	891b      	ldrh	r3, [r3, #8]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d006      	beq.n	800d9ce <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800d9c0:	4b49      	ldr	r3, [pc, #292]	; (800dae8 <tcp_receive+0xb0c>)
 800d9c2:	685b      	ldr	r3, [r3, #4]
 800d9c4:	4a4d      	ldr	r2, [pc, #308]	; (800dafc <tcp_receive+0xb20>)
 800d9c6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800d9c8:	4b47      	ldr	r3, [pc, #284]	; (800dae8 <tcp_receive+0xb0c>)
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d9ce:	4b46      	ldr	r3, [pc, #280]	; (800dae8 <tcp_receive+0xb0c>)
 800d9d0:	68db      	ldr	r3, [r3, #12]
 800d9d2:	899b      	ldrh	r3, [r3, #12]
 800d9d4:	b29b      	uxth	r3, r3
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f7fa fb5c 	bl	8008094 <lwip_htons>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	b2db      	uxtb	r3, r3
 800d9e0:	f003 0301 	and.w	r3, r3, #1
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	f000 80b8 	beq.w	800db5a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800d9ea:	4b45      	ldr	r3, [pc, #276]	; (800db00 <tcp_receive+0xb24>)
 800d9ec:	781b      	ldrb	r3, [r3, #0]
 800d9ee:	f043 0320 	orr.w	r3, r3, #32
 800d9f2:	b2da      	uxtb	r2, r3
 800d9f4:	4b42      	ldr	r3, [pc, #264]	; (800db00 <tcp_receive+0xb24>)
 800d9f6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800d9f8:	e0af      	b.n	800db5a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9fe:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da04:	68db      	ldr	r3, [r3, #12]
 800da06:	685b      	ldr	r3, [r3, #4]
 800da08:	4a36      	ldr	r2, [pc, #216]	; (800dae4 <tcp_receive+0xb08>)
 800da0a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	891b      	ldrh	r3, [r3, #8]
 800da10:	461c      	mov	r4, r3
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	68db      	ldr	r3, [r3, #12]
 800da16:	899b      	ldrh	r3, [r3, #12]
 800da18:	b29b      	uxth	r3, r3
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7fa fb3a 	bl	8008094 <lwip_htons>
 800da20:	4603      	mov	r3, r0
 800da22:	b2db      	uxtb	r3, r3
 800da24:	f003 0303 	and.w	r3, r3, #3
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d001      	beq.n	800da30 <tcp_receive+0xa54>
 800da2c:	2301      	movs	r3, #1
 800da2e:	e000      	b.n	800da32 <tcp_receive+0xa56>
 800da30:	2300      	movs	r3, #0
 800da32:	191a      	adds	r2, r3, r4
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da38:	441a      	add	r2, r3
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da42:	461c      	mov	r4, r3
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	891b      	ldrh	r3, [r3, #8]
 800da48:	461d      	mov	r5, r3
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	68db      	ldr	r3, [r3, #12]
 800da4e:	899b      	ldrh	r3, [r3, #12]
 800da50:	b29b      	uxth	r3, r3
 800da52:	4618      	mov	r0, r3
 800da54:	f7fa fb1e 	bl	8008094 <lwip_htons>
 800da58:	4603      	mov	r3, r0
 800da5a:	b2db      	uxtb	r3, r3
 800da5c:	f003 0303 	and.w	r3, r3, #3
 800da60:	2b00      	cmp	r3, #0
 800da62:	d001      	beq.n	800da68 <tcp_receive+0xa8c>
 800da64:	2301      	movs	r3, #1
 800da66:	e000      	b.n	800da6a <tcp_receive+0xa8e>
 800da68:	2300      	movs	r3, #0
 800da6a:	442b      	add	r3, r5
 800da6c:	429c      	cmp	r4, r3
 800da6e:	d206      	bcs.n	800da7e <tcp_receive+0xaa2>
 800da70:	4b1e      	ldr	r3, [pc, #120]	; (800daec <tcp_receive+0xb10>)
 800da72:	f240 622b 	movw	r2, #1579	; 0x62b
 800da76:	4923      	ldr	r1, [pc, #140]	; (800db04 <tcp_receive+0xb28>)
 800da78:	481e      	ldr	r0, [pc, #120]	; (800daf4 <tcp_receive+0xb18>)
 800da7a:	f005 f8d3 	bl	8012c24 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	891b      	ldrh	r3, [r3, #8]
 800da82:	461c      	mov	r4, r3
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	68db      	ldr	r3, [r3, #12]
 800da88:	899b      	ldrh	r3, [r3, #12]
 800da8a:	b29b      	uxth	r3, r3
 800da8c:	4618      	mov	r0, r3
 800da8e:	f7fa fb01 	bl	8008094 <lwip_htons>
 800da92:	4603      	mov	r3, r0
 800da94:	b2db      	uxtb	r3, r3
 800da96:	f003 0303 	and.w	r3, r3, #3
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d001      	beq.n	800daa2 <tcp_receive+0xac6>
 800da9e:	2301      	movs	r3, #1
 800daa0:	e000      	b.n	800daa4 <tcp_receive+0xac8>
 800daa2:	2300      	movs	r3, #0
 800daa4:	1919      	adds	r1, r3, r4
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800daaa:	b28b      	uxth	r3, r1
 800daac:	1ad3      	subs	r3, r2, r3
 800daae:	b29a      	uxth	r2, r3
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f7fc fe1b 	bl	800a6f0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	685b      	ldr	r3, [r3, #4]
 800dabe:	891b      	ldrh	r3, [r3, #8]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d028      	beq.n	800db16 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800dac4:	4b0d      	ldr	r3, [pc, #52]	; (800dafc <tcp_receive+0xb20>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d01d      	beq.n	800db08 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800dacc:	4b0b      	ldr	r3, [pc, #44]	; (800dafc <tcp_receive+0xb20>)
 800dace:	681a      	ldr	r2, [r3, #0]
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	685b      	ldr	r3, [r3, #4]
 800dad4:	4619      	mov	r1, r3
 800dad6:	4610      	mov	r0, r2
 800dad8:	f7fb ffb4 	bl	8009a44 <pbuf_cat>
 800dadc:	e018      	b.n	800db10 <tcp_receive+0xb34>
 800dade:	bf00      	nop
 800dae0:	24000116 	.word	0x24000116
 800dae4:	2400010c 	.word	0x2400010c
 800dae8:	240000ec 	.word	0x240000ec
 800daec:	08014f64 	.word	0x08014f64
 800daf0:	08015344 	.word	0x08015344
 800daf4:	08014fb0 	.word	0x08014fb0
 800daf8:	08015380 	.word	0x08015380
 800dafc:	2400011c 	.word	0x2400011c
 800db00:	24000119 	.word	0x24000119
 800db04:	080153a0 	.word	0x080153a0
            } else {
              recv_data = cseg->p;
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	685b      	ldr	r3, [r3, #4]
 800db0c:	4a70      	ldr	r2, [pc, #448]	; (800dcd0 <tcp_receive+0xcf4>)
 800db0e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800db10:	68bb      	ldr	r3, [r7, #8]
 800db12:	2200      	movs	r2, #0
 800db14:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	68db      	ldr	r3, [r3, #12]
 800db1a:	899b      	ldrh	r3, [r3, #12]
 800db1c:	b29b      	uxth	r3, r3
 800db1e:	4618      	mov	r0, r3
 800db20:	f7fa fab8 	bl	8008094 <lwip_htons>
 800db24:	4603      	mov	r3, r0
 800db26:	b2db      	uxtb	r3, r3
 800db28:	f003 0301 	and.w	r3, r3, #1
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d00d      	beq.n	800db4c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800db30:	4b68      	ldr	r3, [pc, #416]	; (800dcd4 <tcp_receive+0xcf8>)
 800db32:	781b      	ldrb	r3, [r3, #0]
 800db34:	f043 0320 	orr.w	r3, r3, #32
 800db38:	b2da      	uxtb	r2, r3
 800db3a:	4b66      	ldr	r3, [pc, #408]	; (800dcd4 <tcp_receive+0xcf8>)
 800db3c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	7d1b      	ldrb	r3, [r3, #20]
 800db42:	2b04      	cmp	r3, #4
 800db44:	d102      	bne.n	800db4c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2207      	movs	r2, #7
 800db4a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	681a      	ldr	r2, [r3, #0]
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800db54:	68b8      	ldr	r0, [r7, #8]
 800db56:	f7fd faf0 	bl	800b13a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d008      	beq.n	800db74 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db66:	68db      	ldr	r3, [r3, #12]
 800db68:	685a      	ldr	r2, [r3, #4]
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800db6e:	429a      	cmp	r2, r3
 800db70:	f43f af43 	beq.w	800d9fa <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	8b5b      	ldrh	r3, [r3, #26]
 800db78:	f003 0301 	and.w	r3, r3, #1
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d00e      	beq.n	800db9e <tcp_receive+0xbc2>
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	8b5b      	ldrh	r3, [r3, #26]
 800db84:	f023 0301 	bic.w	r3, r3, #1
 800db88:	b29a      	uxth	r2, r3
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	835a      	strh	r2, [r3, #26]
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	8b5b      	ldrh	r3, [r3, #26]
 800db92:	f043 0302 	orr.w	r3, r3, #2
 800db96:	b29a      	uxth	r2, r3
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800db9c:	e188      	b.n	800deb0 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	8b5b      	ldrh	r3, [r3, #26]
 800dba2:	f043 0301 	orr.w	r3, r3, #1
 800dba6:	b29a      	uxth	r2, r3
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800dbac:	e180      	b.n	800deb0 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d106      	bne.n	800dbc4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800dbb6:	4848      	ldr	r0, [pc, #288]	; (800dcd8 <tcp_receive+0xcfc>)
 800dbb8:	f7fd faf6 	bl	800b1a8 <tcp_seg_copy>
 800dbbc:	4602      	mov	r2, r0
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	675a      	str	r2, [r3, #116]	; 0x74
 800dbc2:	e16d      	b.n	800dea0 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbcc:	63bb      	str	r3, [r7, #56]	; 0x38
 800dbce:	e157      	b.n	800de80 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800dbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbd2:	68db      	ldr	r3, [r3, #12]
 800dbd4:	685a      	ldr	r2, [r3, #4]
 800dbd6:	4b41      	ldr	r3, [pc, #260]	; (800dcdc <tcp_receive+0xd00>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	d11d      	bne.n	800dc1a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800dbde:	4b3e      	ldr	r3, [pc, #248]	; (800dcd8 <tcp_receive+0xcfc>)
 800dbe0:	891a      	ldrh	r2, [r3, #8]
 800dbe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbe4:	891b      	ldrh	r3, [r3, #8]
 800dbe6:	429a      	cmp	r2, r3
 800dbe8:	f240 814f 	bls.w	800de8a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800dbec:	483a      	ldr	r0, [pc, #232]	; (800dcd8 <tcp_receive+0xcfc>)
 800dbee:	f7fd fadb 	bl	800b1a8 <tcp_seg_copy>
 800dbf2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	f000 8149 	beq.w	800de8e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800dbfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d003      	beq.n	800dc0a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800dc02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc04:	697a      	ldr	r2, [r7, #20]
 800dc06:	601a      	str	r2, [r3, #0]
 800dc08:	e002      	b.n	800dc10 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	697a      	ldr	r2, [r7, #20]
 800dc0e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800dc10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dc12:	6978      	ldr	r0, [r7, #20]
 800dc14:	f7ff f8de 	bl	800cdd4 <tcp_oos_insert_segment>
                }
                break;
 800dc18:	e139      	b.n	800de8e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800dc1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d117      	bne.n	800dc50 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800dc20:	4b2e      	ldr	r3, [pc, #184]	; (800dcdc <tcp_receive+0xd00>)
 800dc22:	681a      	ldr	r2, [r3, #0]
 800dc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc26:	68db      	ldr	r3, [r3, #12]
 800dc28:	685b      	ldr	r3, [r3, #4]
 800dc2a:	1ad3      	subs	r3, r2, r3
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	da57      	bge.n	800dce0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800dc30:	4829      	ldr	r0, [pc, #164]	; (800dcd8 <tcp_receive+0xcfc>)
 800dc32:	f7fd fab9 	bl	800b1a8 <tcp_seg_copy>
 800dc36:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800dc38:	69bb      	ldr	r3, [r7, #24]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	f000 8129 	beq.w	800de92 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	69ba      	ldr	r2, [r7, #24]
 800dc44:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800dc46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dc48:	69b8      	ldr	r0, [r7, #24]
 800dc4a:	f7ff f8c3 	bl	800cdd4 <tcp_oos_insert_segment>
                  }
                  break;
 800dc4e:	e120      	b.n	800de92 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800dc50:	4b22      	ldr	r3, [pc, #136]	; (800dcdc <tcp_receive+0xd00>)
 800dc52:	681a      	ldr	r2, [r3, #0]
 800dc54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc56:	68db      	ldr	r3, [r3, #12]
 800dc58:	685b      	ldr	r3, [r3, #4]
 800dc5a:	1ad3      	subs	r3, r2, r3
 800dc5c:	3b01      	subs	r3, #1
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	db3e      	blt.n	800dce0 <tcp_receive+0xd04>
 800dc62:	4b1e      	ldr	r3, [pc, #120]	; (800dcdc <tcp_receive+0xd00>)
 800dc64:	681a      	ldr	r2, [r3, #0]
 800dc66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc68:	68db      	ldr	r3, [r3, #12]
 800dc6a:	685b      	ldr	r3, [r3, #4]
 800dc6c:	1ad3      	subs	r3, r2, r3
 800dc6e:	3301      	adds	r3, #1
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	dc35      	bgt.n	800dce0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800dc74:	4818      	ldr	r0, [pc, #96]	; (800dcd8 <tcp_receive+0xcfc>)
 800dc76:	f7fd fa97 	bl	800b1a8 <tcp_seg_copy>
 800dc7a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800dc7c:	69fb      	ldr	r3, [r7, #28]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	f000 8109 	beq.w	800de96 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800dc84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc86:	68db      	ldr	r3, [r3, #12]
 800dc88:	685b      	ldr	r3, [r3, #4]
 800dc8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc8c:	8912      	ldrh	r2, [r2, #8]
 800dc8e:	441a      	add	r2, r3
 800dc90:	4b12      	ldr	r3, [pc, #72]	; (800dcdc <tcp_receive+0xd00>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	1ad3      	subs	r3, r2, r3
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	dd12      	ble.n	800dcc0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800dc9a:	4b10      	ldr	r3, [pc, #64]	; (800dcdc <tcp_receive+0xd00>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	b29a      	uxth	r2, r3
 800dca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dca2:	68db      	ldr	r3, [r3, #12]
 800dca4:	685b      	ldr	r3, [r3, #4]
 800dca6:	b29b      	uxth	r3, r3
 800dca8:	1ad3      	subs	r3, r2, r3
 800dcaa:	b29a      	uxth	r2, r3
 800dcac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcae:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800dcb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcb2:	685a      	ldr	r2, [r3, #4]
 800dcb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcb6:	891b      	ldrh	r3, [r3, #8]
 800dcb8:	4619      	mov	r1, r3
 800dcba:	4610      	mov	r0, r2
 800dcbc:	f7fb fc7a 	bl	80095b4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800dcc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcc2:	69fa      	ldr	r2, [r7, #28]
 800dcc4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800dcc6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dcc8:	69f8      	ldr	r0, [r7, #28]
 800dcca:	f7ff f883 	bl	800cdd4 <tcp_oos_insert_segment>
                  }
                  break;
 800dcce:	e0e2      	b.n	800de96 <tcp_receive+0xeba>
 800dcd0:	2400011c 	.word	0x2400011c
 800dcd4:	24000119 	.word	0x24000119
 800dcd8:	240000ec 	.word	0x240000ec
 800dcdc:	2400010c 	.word	0x2400010c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800dce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dce2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800dce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	f040 80c6 	bne.w	800de7a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800dcee:	4b80      	ldr	r3, [pc, #512]	; (800def0 <tcp_receive+0xf14>)
 800dcf0:	681a      	ldr	r2, [r3, #0]
 800dcf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcf4:	68db      	ldr	r3, [r3, #12]
 800dcf6:	685b      	ldr	r3, [r3, #4]
 800dcf8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	f340 80bd 	ble.w	800de7a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800dd00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd02:	68db      	ldr	r3, [r3, #12]
 800dd04:	899b      	ldrh	r3, [r3, #12]
 800dd06:	b29b      	uxth	r3, r3
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f7fa f9c3 	bl	8008094 <lwip_htons>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	b2db      	uxtb	r3, r3
 800dd12:	f003 0301 	and.w	r3, r3, #1
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	f040 80bf 	bne.w	800de9a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800dd1c:	4875      	ldr	r0, [pc, #468]	; (800def4 <tcp_receive+0xf18>)
 800dd1e:	f7fd fa43 	bl	800b1a8 <tcp_seg_copy>
 800dd22:	4602      	mov	r2, r0
 800dd24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd26:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800dd28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	f000 80b6 	beq.w	800de9e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800dd32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd34:	68db      	ldr	r3, [r3, #12]
 800dd36:	685b      	ldr	r3, [r3, #4]
 800dd38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd3a:	8912      	ldrh	r2, [r2, #8]
 800dd3c:	441a      	add	r2, r3
 800dd3e:	4b6c      	ldr	r3, [pc, #432]	; (800def0 <tcp_receive+0xf14>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	1ad3      	subs	r3, r2, r3
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	dd12      	ble.n	800dd6e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800dd48:	4b69      	ldr	r3, [pc, #420]	; (800def0 <tcp_receive+0xf14>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	b29a      	uxth	r2, r3
 800dd4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd50:	68db      	ldr	r3, [r3, #12]
 800dd52:	685b      	ldr	r3, [r3, #4]
 800dd54:	b29b      	uxth	r3, r3
 800dd56:	1ad3      	subs	r3, r2, r3
 800dd58:	b29a      	uxth	r2, r3
 800dd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd5c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800dd5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd60:	685a      	ldr	r2, [r3, #4]
 800dd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd64:	891b      	ldrh	r3, [r3, #8]
 800dd66:	4619      	mov	r1, r3
 800dd68:	4610      	mov	r0, r2
 800dd6a:	f7fb fc23 	bl	80095b4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800dd6e:	4b62      	ldr	r3, [pc, #392]	; (800def8 <tcp_receive+0xf1c>)
 800dd70:	881b      	ldrh	r3, [r3, #0]
 800dd72:	461a      	mov	r2, r3
 800dd74:	4b5e      	ldr	r3, [pc, #376]	; (800def0 <tcp_receive+0xf14>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	441a      	add	r2, r3
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd7e:	6879      	ldr	r1, [r7, #4]
 800dd80:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dd82:	440b      	add	r3, r1
 800dd84:	1ad3      	subs	r3, r2, r3
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	f340 8089 	ble.w	800de9e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800dd8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	68db      	ldr	r3, [r3, #12]
 800dd92:	899b      	ldrh	r3, [r3, #12]
 800dd94:	b29b      	uxth	r3, r3
 800dd96:	4618      	mov	r0, r3
 800dd98:	f7fa f97c 	bl	8008094 <lwip_htons>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	b2db      	uxtb	r3, r3
 800dda0:	f003 0301 	and.w	r3, r3, #1
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d022      	beq.n	800ddee <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800dda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	68db      	ldr	r3, [r3, #12]
 800ddae:	899b      	ldrh	r3, [r3, #12]
 800ddb0:	b29b      	uxth	r3, r3
 800ddb2:	b21b      	sxth	r3, r3
 800ddb4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ddb8:	b21c      	sxth	r4, r3
 800ddba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	68db      	ldr	r3, [r3, #12]
 800ddc0:	899b      	ldrh	r3, [r3, #12]
 800ddc2:	b29b      	uxth	r3, r3
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f7fa f965 	bl	8008094 <lwip_htons>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	b2db      	uxtb	r3, r3
 800ddce:	b29b      	uxth	r3, r3
 800ddd0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ddd4:	b29b      	uxth	r3, r3
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	f7fa f95c 	bl	8008094 <lwip_htons>
 800dddc:	4603      	mov	r3, r0
 800ddde:	b21b      	sxth	r3, r3
 800dde0:	4323      	orrs	r3, r4
 800dde2:	b21a      	sxth	r2, r3
 800dde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	68db      	ldr	r3, [r3, #12]
 800ddea:	b292      	uxth	r2, r2
 800ddec:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddf2:	b29a      	uxth	r2, r3
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddf8:	4413      	add	r3, r2
 800ddfa:	b299      	uxth	r1, r3
 800ddfc:	4b3c      	ldr	r3, [pc, #240]	; (800def0 <tcp_receive+0xf14>)
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	b29a      	uxth	r2, r3
 800de02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	1a8a      	subs	r2, r1, r2
 800de08:	b292      	uxth	r2, r2
 800de0a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800de0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	685a      	ldr	r2, [r3, #4]
 800de12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	891b      	ldrh	r3, [r3, #8]
 800de18:	4619      	mov	r1, r3
 800de1a:	4610      	mov	r0, r2
 800de1c:	f7fb fbca 	bl	80095b4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800de20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	891c      	ldrh	r4, [r3, #8]
 800de26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	68db      	ldr	r3, [r3, #12]
 800de2c:	899b      	ldrh	r3, [r3, #12]
 800de2e:	b29b      	uxth	r3, r3
 800de30:	4618      	mov	r0, r3
 800de32:	f7fa f92f 	bl	8008094 <lwip_htons>
 800de36:	4603      	mov	r3, r0
 800de38:	b2db      	uxtb	r3, r3
 800de3a:	f003 0303 	and.w	r3, r3, #3
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d001      	beq.n	800de46 <tcp_receive+0xe6a>
 800de42:	2301      	movs	r3, #1
 800de44:	e000      	b.n	800de48 <tcp_receive+0xe6c>
 800de46:	2300      	movs	r3, #0
 800de48:	4423      	add	r3, r4
 800de4a:	b29a      	uxth	r2, r3
 800de4c:	4b2a      	ldr	r3, [pc, #168]	; (800def8 <tcp_receive+0xf1c>)
 800de4e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800de50:	4b29      	ldr	r3, [pc, #164]	; (800def8 <tcp_receive+0xf1c>)
 800de52:	881b      	ldrh	r3, [r3, #0]
 800de54:	461a      	mov	r2, r3
 800de56:	4b26      	ldr	r3, [pc, #152]	; (800def0 <tcp_receive+0xf14>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	441a      	add	r2, r3
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de60:	6879      	ldr	r1, [r7, #4]
 800de62:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800de64:	440b      	add	r3, r1
 800de66:	429a      	cmp	r2, r3
 800de68:	d019      	beq.n	800de9e <tcp_receive+0xec2>
 800de6a:	4b24      	ldr	r3, [pc, #144]	; (800defc <tcp_receive+0xf20>)
 800de6c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800de70:	4923      	ldr	r1, [pc, #140]	; (800df00 <tcp_receive+0xf24>)
 800de72:	4824      	ldr	r0, [pc, #144]	; (800df04 <tcp_receive+0xf28>)
 800de74:	f004 fed6 	bl	8012c24 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800de78:	e011      	b.n	800de9e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800de7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	63bb      	str	r3, [r7, #56]	; 0x38
 800de80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de82:	2b00      	cmp	r3, #0
 800de84:	f47f aea4 	bne.w	800dbd0 <tcp_receive+0xbf4>
 800de88:	e00a      	b.n	800dea0 <tcp_receive+0xec4>
                break;
 800de8a:	bf00      	nop
 800de8c:	e008      	b.n	800dea0 <tcp_receive+0xec4>
                break;
 800de8e:	bf00      	nop
 800de90:	e006      	b.n	800dea0 <tcp_receive+0xec4>
                  break;
 800de92:	bf00      	nop
 800de94:	e004      	b.n	800dea0 <tcp_receive+0xec4>
                  break;
 800de96:	bf00      	nop
 800de98:	e002      	b.n	800dea0 <tcp_receive+0xec4>
                  break;
 800de9a:	bf00      	nop
 800de9c:	e000      	b.n	800dea0 <tcp_receive+0xec4>
                break;
 800de9e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f001 fe8b 	bl	800fbbc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800dea6:	e003      	b.n	800deb0 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f001 fe87 	bl	800fbbc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800deae:	e01a      	b.n	800dee6 <tcp_receive+0xf0a>
 800deb0:	e019      	b.n	800dee6 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800deb2:	4b0f      	ldr	r3, [pc, #60]	; (800def0 <tcp_receive+0xf14>)
 800deb4:	681a      	ldr	r2, [r3, #0]
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deba:	1ad3      	subs	r3, r2, r3
 800debc:	2b00      	cmp	r3, #0
 800debe:	db0a      	blt.n	800ded6 <tcp_receive+0xefa>
 800dec0:	4b0b      	ldr	r3, [pc, #44]	; (800def0 <tcp_receive+0xf14>)
 800dec2:	681a      	ldr	r2, [r3, #0]
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dec8:	6879      	ldr	r1, [r7, #4]
 800deca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800decc:	440b      	add	r3, r1
 800dece:	1ad3      	subs	r3, r2, r3
 800ded0:	3301      	adds	r3, #1
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	dd07      	ble.n	800dee6 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	8b5b      	ldrh	r3, [r3, #26]
 800deda:	f043 0302 	orr.w	r3, r3, #2
 800dede:	b29a      	uxth	r2, r3
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800dee4:	e7ff      	b.n	800dee6 <tcp_receive+0xf0a>
 800dee6:	bf00      	nop
 800dee8:	3750      	adds	r7, #80	; 0x50
 800deea:	46bd      	mov	sp, r7
 800deec:	bdb0      	pop	{r4, r5, r7, pc}
 800deee:	bf00      	nop
 800def0:	2400010c 	.word	0x2400010c
 800def4:	240000ec 	.word	0x240000ec
 800def8:	24000116 	.word	0x24000116
 800defc:	08014f64 	.word	0x08014f64
 800df00:	0801530c 	.word	0x0801530c
 800df04:	08014fb0 	.word	0x08014fb0

0800df08 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800df08:	b480      	push	{r7}
 800df0a:	b083      	sub	sp, #12
 800df0c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800df0e:	4b15      	ldr	r3, [pc, #84]	; (800df64 <tcp_get_next_optbyte+0x5c>)
 800df10:	881b      	ldrh	r3, [r3, #0]
 800df12:	1c5a      	adds	r2, r3, #1
 800df14:	b291      	uxth	r1, r2
 800df16:	4a13      	ldr	r2, [pc, #76]	; (800df64 <tcp_get_next_optbyte+0x5c>)
 800df18:	8011      	strh	r1, [r2, #0]
 800df1a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800df1c:	4b12      	ldr	r3, [pc, #72]	; (800df68 <tcp_get_next_optbyte+0x60>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d004      	beq.n	800df2e <tcp_get_next_optbyte+0x26>
 800df24:	4b11      	ldr	r3, [pc, #68]	; (800df6c <tcp_get_next_optbyte+0x64>)
 800df26:	881b      	ldrh	r3, [r3, #0]
 800df28:	88fa      	ldrh	r2, [r7, #6]
 800df2a:	429a      	cmp	r2, r3
 800df2c:	d208      	bcs.n	800df40 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800df2e:	4b10      	ldr	r3, [pc, #64]	; (800df70 <tcp_get_next_optbyte+0x68>)
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	3314      	adds	r3, #20
 800df34:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800df36:	88fb      	ldrh	r3, [r7, #6]
 800df38:	683a      	ldr	r2, [r7, #0]
 800df3a:	4413      	add	r3, r2
 800df3c:	781b      	ldrb	r3, [r3, #0]
 800df3e:	e00b      	b.n	800df58 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800df40:	88fb      	ldrh	r3, [r7, #6]
 800df42:	b2da      	uxtb	r2, r3
 800df44:	4b09      	ldr	r3, [pc, #36]	; (800df6c <tcp_get_next_optbyte+0x64>)
 800df46:	881b      	ldrh	r3, [r3, #0]
 800df48:	b2db      	uxtb	r3, r3
 800df4a:	1ad3      	subs	r3, r2, r3
 800df4c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800df4e:	4b06      	ldr	r3, [pc, #24]	; (800df68 <tcp_get_next_optbyte+0x60>)
 800df50:	681a      	ldr	r2, [r3, #0]
 800df52:	797b      	ldrb	r3, [r7, #5]
 800df54:	4413      	add	r3, r2
 800df56:	781b      	ldrb	r3, [r3, #0]
  }
}
 800df58:	4618      	mov	r0, r3
 800df5a:	370c      	adds	r7, #12
 800df5c:	46bd      	mov	sp, r7
 800df5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df62:	4770      	bx	lr
 800df64:	24000108 	.word	0x24000108
 800df68:	24000104 	.word	0x24000104
 800df6c:	24000102 	.word	0x24000102
 800df70:	240000fc 	.word	0x240000fc

0800df74 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b084      	sub	sp, #16
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d106      	bne.n	800df90 <tcp_parseopt+0x1c>
 800df82:	4b32      	ldr	r3, [pc, #200]	; (800e04c <tcp_parseopt+0xd8>)
 800df84:	f240 727d 	movw	r2, #1917	; 0x77d
 800df88:	4931      	ldr	r1, [pc, #196]	; (800e050 <tcp_parseopt+0xdc>)
 800df8a:	4832      	ldr	r0, [pc, #200]	; (800e054 <tcp_parseopt+0xe0>)
 800df8c:	f004 fe4a 	bl	8012c24 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800df90:	4b31      	ldr	r3, [pc, #196]	; (800e058 <tcp_parseopt+0xe4>)
 800df92:	881b      	ldrh	r3, [r3, #0]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d055      	beq.n	800e044 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800df98:	4b30      	ldr	r3, [pc, #192]	; (800e05c <tcp_parseopt+0xe8>)
 800df9a:	2200      	movs	r2, #0
 800df9c:	801a      	strh	r2, [r3, #0]
 800df9e:	e045      	b.n	800e02c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800dfa0:	f7ff ffb2 	bl	800df08 <tcp_get_next_optbyte>
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800dfa8:	7bfb      	ldrb	r3, [r7, #15]
 800dfaa:	2b02      	cmp	r3, #2
 800dfac:	d006      	beq.n	800dfbc <tcp_parseopt+0x48>
 800dfae:	2b02      	cmp	r3, #2
 800dfb0:	dc2b      	bgt.n	800e00a <tcp_parseopt+0x96>
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d041      	beq.n	800e03a <tcp_parseopt+0xc6>
 800dfb6:	2b01      	cmp	r3, #1
 800dfb8:	d127      	bne.n	800e00a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800dfba:	e037      	b.n	800e02c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800dfbc:	f7ff ffa4 	bl	800df08 <tcp_get_next_optbyte>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	2b04      	cmp	r3, #4
 800dfc4:	d13b      	bne.n	800e03e <tcp_parseopt+0xca>
 800dfc6:	4b25      	ldr	r3, [pc, #148]	; (800e05c <tcp_parseopt+0xe8>)
 800dfc8:	881b      	ldrh	r3, [r3, #0]
 800dfca:	3301      	adds	r3, #1
 800dfcc:	4a22      	ldr	r2, [pc, #136]	; (800e058 <tcp_parseopt+0xe4>)
 800dfce:	8812      	ldrh	r2, [r2, #0]
 800dfd0:	4293      	cmp	r3, r2
 800dfd2:	da34      	bge.n	800e03e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800dfd4:	f7ff ff98 	bl	800df08 <tcp_get_next_optbyte>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	b29b      	uxth	r3, r3
 800dfdc:	021b      	lsls	r3, r3, #8
 800dfde:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800dfe0:	f7ff ff92 	bl	800df08 <tcp_get_next_optbyte>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	b29a      	uxth	r2, r3
 800dfe8:	89bb      	ldrh	r3, [r7, #12]
 800dfea:	4313      	orrs	r3, r2
 800dfec:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800dfee:	89bb      	ldrh	r3, [r7, #12]
 800dff0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800dff4:	d804      	bhi.n	800e000 <tcp_parseopt+0x8c>
 800dff6:	89bb      	ldrh	r3, [r7, #12]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d001      	beq.n	800e000 <tcp_parseopt+0x8c>
 800dffc:	89ba      	ldrh	r2, [r7, #12]
 800dffe:	e001      	b.n	800e004 <tcp_parseopt+0x90>
 800e000:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800e008:	e010      	b.n	800e02c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800e00a:	f7ff ff7d 	bl	800df08 <tcp_get_next_optbyte>
 800e00e:	4603      	mov	r3, r0
 800e010:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800e012:	7afb      	ldrb	r3, [r7, #11]
 800e014:	2b01      	cmp	r3, #1
 800e016:	d914      	bls.n	800e042 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800e018:	7afb      	ldrb	r3, [r7, #11]
 800e01a:	b29a      	uxth	r2, r3
 800e01c:	4b0f      	ldr	r3, [pc, #60]	; (800e05c <tcp_parseopt+0xe8>)
 800e01e:	881b      	ldrh	r3, [r3, #0]
 800e020:	4413      	add	r3, r2
 800e022:	b29b      	uxth	r3, r3
 800e024:	3b02      	subs	r3, #2
 800e026:	b29a      	uxth	r2, r3
 800e028:	4b0c      	ldr	r3, [pc, #48]	; (800e05c <tcp_parseopt+0xe8>)
 800e02a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e02c:	4b0b      	ldr	r3, [pc, #44]	; (800e05c <tcp_parseopt+0xe8>)
 800e02e:	881a      	ldrh	r2, [r3, #0]
 800e030:	4b09      	ldr	r3, [pc, #36]	; (800e058 <tcp_parseopt+0xe4>)
 800e032:	881b      	ldrh	r3, [r3, #0]
 800e034:	429a      	cmp	r2, r3
 800e036:	d3b3      	bcc.n	800dfa0 <tcp_parseopt+0x2c>
 800e038:	e004      	b.n	800e044 <tcp_parseopt+0xd0>
          return;
 800e03a:	bf00      	nop
 800e03c:	e002      	b.n	800e044 <tcp_parseopt+0xd0>
            return;
 800e03e:	bf00      	nop
 800e040:	e000      	b.n	800e044 <tcp_parseopt+0xd0>
            return;
 800e042:	bf00      	nop
      }
    }
  }
}
 800e044:	3710      	adds	r7, #16
 800e046:	46bd      	mov	sp, r7
 800e048:	bd80      	pop	{r7, pc}
 800e04a:	bf00      	nop
 800e04c:	08014f64 	.word	0x08014f64
 800e050:	080153c8 	.word	0x080153c8
 800e054:	08014fb0 	.word	0x08014fb0
 800e058:	24000100 	.word	0x24000100
 800e05c:	24000108 	.word	0x24000108

0800e060 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800e060:	b480      	push	{r7}
 800e062:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800e064:	4b05      	ldr	r3, [pc, #20]	; (800e07c <tcp_trigger_input_pcb_close+0x1c>)
 800e066:	781b      	ldrb	r3, [r3, #0]
 800e068:	f043 0310 	orr.w	r3, r3, #16
 800e06c:	b2da      	uxtb	r2, r3
 800e06e:	4b03      	ldr	r3, [pc, #12]	; (800e07c <tcp_trigger_input_pcb_close+0x1c>)
 800e070:	701a      	strb	r2, [r3, #0]
}
 800e072:	bf00      	nop
 800e074:	46bd      	mov	sp, r7
 800e076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07a:	4770      	bx	lr
 800e07c:	24000119 	.word	0x24000119

0800e080 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b084      	sub	sp, #16
 800e084:	af00      	add	r7, sp, #0
 800e086:	60f8      	str	r0, [r7, #12]
 800e088:	60b9      	str	r1, [r7, #8]
 800e08a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d00a      	beq.n	800e0a8 <tcp_route+0x28>
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	7a1b      	ldrb	r3, [r3, #8]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d006      	beq.n	800e0a8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	7a1b      	ldrb	r3, [r3, #8]
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f7fb f8ae 	bl	8009200 <netif_get_by_index>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	e003      	b.n	800e0b0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f003 fafb 	bl	80116a4 <ip4_route>
 800e0ae:	4603      	mov	r3, r0
  }
}
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	3710      	adds	r7, #16
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	bd80      	pop	{r7, pc}

0800e0b8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800e0b8:	b590      	push	{r4, r7, lr}
 800e0ba:	b087      	sub	sp, #28
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	60f8      	str	r0, [r7, #12]
 800e0c0:	60b9      	str	r1, [r7, #8]
 800e0c2:	603b      	str	r3, [r7, #0]
 800e0c4:	4613      	mov	r3, r2
 800e0c6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d105      	bne.n	800e0da <tcp_create_segment+0x22>
 800e0ce:	4b44      	ldr	r3, [pc, #272]	; (800e1e0 <tcp_create_segment+0x128>)
 800e0d0:	22a3      	movs	r2, #163	; 0xa3
 800e0d2:	4944      	ldr	r1, [pc, #272]	; (800e1e4 <tcp_create_segment+0x12c>)
 800e0d4:	4844      	ldr	r0, [pc, #272]	; (800e1e8 <tcp_create_segment+0x130>)
 800e0d6:	f004 fda5 	bl	8012c24 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d105      	bne.n	800e0ec <tcp_create_segment+0x34>
 800e0e0:	4b3f      	ldr	r3, [pc, #252]	; (800e1e0 <tcp_create_segment+0x128>)
 800e0e2:	22a4      	movs	r2, #164	; 0xa4
 800e0e4:	4941      	ldr	r1, [pc, #260]	; (800e1ec <tcp_create_segment+0x134>)
 800e0e6:	4840      	ldr	r0, [pc, #256]	; (800e1e8 <tcp_create_segment+0x130>)
 800e0e8:	f004 fd9c 	bl	8012c24 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e0ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e0f0:	009b      	lsls	r3, r3, #2
 800e0f2:	b2db      	uxtb	r3, r3
 800e0f4:	f003 0304 	and.w	r3, r3, #4
 800e0f8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800e0fa:	2003      	movs	r0, #3
 800e0fc:	f7fa fcfa 	bl	8008af4 <memp_malloc>
 800e100:	6138      	str	r0, [r7, #16]
 800e102:	693b      	ldr	r3, [r7, #16]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d104      	bne.n	800e112 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800e108:	68b8      	ldr	r0, [r7, #8]
 800e10a:	f7fb fbd9 	bl	80098c0 <pbuf_free>
    return NULL;
 800e10e:	2300      	movs	r3, #0
 800e110:	e061      	b.n	800e1d6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800e112:	693b      	ldr	r3, [r7, #16]
 800e114:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e118:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800e11a:	693b      	ldr	r3, [r7, #16]
 800e11c:	2200      	movs	r2, #0
 800e11e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	68ba      	ldr	r2, [r7, #8]
 800e124:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	891a      	ldrh	r2, [r3, #8]
 800e12a:	7dfb      	ldrb	r3, [r7, #23]
 800e12c:	b29b      	uxth	r3, r3
 800e12e:	429a      	cmp	r2, r3
 800e130:	d205      	bcs.n	800e13e <tcp_create_segment+0x86>
 800e132:	4b2b      	ldr	r3, [pc, #172]	; (800e1e0 <tcp_create_segment+0x128>)
 800e134:	22b0      	movs	r2, #176	; 0xb0
 800e136:	492e      	ldr	r1, [pc, #184]	; (800e1f0 <tcp_create_segment+0x138>)
 800e138:	482b      	ldr	r0, [pc, #172]	; (800e1e8 <tcp_create_segment+0x130>)
 800e13a:	f004 fd73 	bl	8012c24 <iprintf>
  seg->len = p->tot_len - optlen;
 800e13e:	68bb      	ldr	r3, [r7, #8]
 800e140:	891a      	ldrh	r2, [r3, #8]
 800e142:	7dfb      	ldrb	r3, [r7, #23]
 800e144:	b29b      	uxth	r3, r3
 800e146:	1ad3      	subs	r3, r2, r3
 800e148:	b29a      	uxth	r2, r3
 800e14a:	693b      	ldr	r3, [r7, #16]
 800e14c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800e14e:	2114      	movs	r1, #20
 800e150:	68b8      	ldr	r0, [r7, #8]
 800e152:	f7fb fb1f 	bl	8009794 <pbuf_add_header>
 800e156:	4603      	mov	r3, r0
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d004      	beq.n	800e166 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800e15c:	6938      	ldr	r0, [r7, #16]
 800e15e:	f7fc ffec 	bl	800b13a <tcp_seg_free>
    return NULL;
 800e162:	2300      	movs	r3, #0
 800e164:	e037      	b.n	800e1d6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800e166:	693b      	ldr	r3, [r7, #16]
 800e168:	685b      	ldr	r3, [r3, #4]
 800e16a:	685a      	ldr	r2, [r3, #4]
 800e16c:	693b      	ldr	r3, [r7, #16]
 800e16e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	8ada      	ldrh	r2, [r3, #22]
 800e174:	693b      	ldr	r3, [r7, #16]
 800e176:	68dc      	ldr	r4, [r3, #12]
 800e178:	4610      	mov	r0, r2
 800e17a:	f7f9 ff8b 	bl	8008094 <lwip_htons>
 800e17e:	4603      	mov	r3, r0
 800e180:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	8b1a      	ldrh	r2, [r3, #24]
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	68dc      	ldr	r4, [r3, #12]
 800e18a:	4610      	mov	r0, r2
 800e18c:	f7f9 ff82 	bl	8008094 <lwip_htons>
 800e190:	4603      	mov	r3, r0
 800e192:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800e194:	693b      	ldr	r3, [r7, #16]
 800e196:	68dc      	ldr	r4, [r3, #12]
 800e198:	6838      	ldr	r0, [r7, #0]
 800e19a:	f7f9 ff90 	bl	80080be <lwip_htonl>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800e1a2:	7dfb      	ldrb	r3, [r7, #23]
 800e1a4:	089b      	lsrs	r3, r3, #2
 800e1a6:	b2db      	uxtb	r3, r3
 800e1a8:	b29b      	uxth	r3, r3
 800e1aa:	3305      	adds	r3, #5
 800e1ac:	b29b      	uxth	r3, r3
 800e1ae:	031b      	lsls	r3, r3, #12
 800e1b0:	b29a      	uxth	r2, r3
 800e1b2:	79fb      	ldrb	r3, [r7, #7]
 800e1b4:	b29b      	uxth	r3, r3
 800e1b6:	4313      	orrs	r3, r2
 800e1b8:	b29a      	uxth	r2, r3
 800e1ba:	693b      	ldr	r3, [r7, #16]
 800e1bc:	68dc      	ldr	r4, [r3, #12]
 800e1be:	4610      	mov	r0, r2
 800e1c0:	f7f9 ff68 	bl	8008094 <lwip_htons>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	68db      	ldr	r3, [r3, #12]
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	749a      	strb	r2, [r3, #18]
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	74da      	strb	r2, [r3, #19]
  return seg;
 800e1d4:	693b      	ldr	r3, [r7, #16]
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	371c      	adds	r7, #28
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd90      	pop	{r4, r7, pc}
 800e1de:	bf00      	nop
 800e1e0:	080153e4 	.word	0x080153e4
 800e1e4:	08015418 	.word	0x08015418
 800e1e8:	08015438 	.word	0x08015438
 800e1ec:	08015460 	.word	0x08015460
 800e1f0:	08015484 	.word	0x08015484

0800e1f4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b086      	sub	sp, #24
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	607b      	str	r3, [r7, #4]
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	73fb      	strb	r3, [r7, #15]
 800e200:	460b      	mov	r3, r1
 800e202:	81bb      	strh	r3, [r7, #12]
 800e204:	4613      	mov	r3, r2
 800e206:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800e208:	89bb      	ldrh	r3, [r7, #12]
 800e20a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d105      	bne.n	800e21e <tcp_pbuf_prealloc+0x2a>
 800e212:	4b30      	ldr	r3, [pc, #192]	; (800e2d4 <tcp_pbuf_prealloc+0xe0>)
 800e214:	22e8      	movs	r2, #232	; 0xe8
 800e216:	4930      	ldr	r1, [pc, #192]	; (800e2d8 <tcp_pbuf_prealloc+0xe4>)
 800e218:	4830      	ldr	r0, [pc, #192]	; (800e2dc <tcp_pbuf_prealloc+0xe8>)
 800e21a:	f004 fd03 	bl	8012c24 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800e21e:	6a3b      	ldr	r3, [r7, #32]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d105      	bne.n	800e230 <tcp_pbuf_prealloc+0x3c>
 800e224:	4b2b      	ldr	r3, [pc, #172]	; (800e2d4 <tcp_pbuf_prealloc+0xe0>)
 800e226:	22e9      	movs	r2, #233	; 0xe9
 800e228:	492d      	ldr	r1, [pc, #180]	; (800e2e0 <tcp_pbuf_prealloc+0xec>)
 800e22a:	482c      	ldr	r0, [pc, #176]	; (800e2dc <tcp_pbuf_prealloc+0xe8>)
 800e22c:	f004 fcfa 	bl	8012c24 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800e230:	89ba      	ldrh	r2, [r7, #12]
 800e232:	897b      	ldrh	r3, [r7, #10]
 800e234:	429a      	cmp	r2, r3
 800e236:	d221      	bcs.n	800e27c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800e238:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e23c:	f003 0302 	and.w	r3, r3, #2
 800e240:	2b00      	cmp	r3, #0
 800e242:	d111      	bne.n	800e268 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800e244:	6a3b      	ldr	r3, [r7, #32]
 800e246:	8b5b      	ldrh	r3, [r3, #26]
 800e248:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d115      	bne.n	800e27c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800e250:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e254:	2b00      	cmp	r3, #0
 800e256:	d007      	beq.n	800e268 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800e258:	6a3b      	ldr	r3, [r7, #32]
 800e25a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d103      	bne.n	800e268 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800e260:	6a3b      	ldr	r3, [r7, #32]
 800e262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800e264:	2b00      	cmp	r3, #0
 800e266:	d009      	beq.n	800e27c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800e268:	89bb      	ldrh	r3, [r7, #12]
 800e26a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800e26e:	f023 0203 	bic.w	r2, r3, #3
 800e272:	897b      	ldrh	r3, [r7, #10]
 800e274:	4293      	cmp	r3, r2
 800e276:	bf28      	it	cs
 800e278:	4613      	movcs	r3, r2
 800e27a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800e27c:	8af9      	ldrh	r1, [r7, #22]
 800e27e:	7bfb      	ldrb	r3, [r7, #15]
 800e280:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e284:	4618      	mov	r0, r3
 800e286:	f7fb f837 	bl	80092f8 <pbuf_alloc>
 800e28a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e28c:	693b      	ldr	r3, [r7, #16]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d101      	bne.n	800e296 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800e292:	2300      	movs	r3, #0
 800e294:	e019      	b.n	800e2ca <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d006      	beq.n	800e2ac <tcp_pbuf_prealloc+0xb8>
 800e29e:	4b0d      	ldr	r3, [pc, #52]	; (800e2d4 <tcp_pbuf_prealloc+0xe0>)
 800e2a0:	f240 120b 	movw	r2, #267	; 0x10b
 800e2a4:	490f      	ldr	r1, [pc, #60]	; (800e2e4 <tcp_pbuf_prealloc+0xf0>)
 800e2a6:	480d      	ldr	r0, [pc, #52]	; (800e2dc <tcp_pbuf_prealloc+0xe8>)
 800e2a8:	f004 fcbc 	bl	8012c24 <iprintf>
  *oversize = p->len - length;
 800e2ac:	693b      	ldr	r3, [r7, #16]
 800e2ae:	895a      	ldrh	r2, [r3, #10]
 800e2b0:	89bb      	ldrh	r3, [r7, #12]
 800e2b2:	1ad3      	subs	r3, r2, r3
 800e2b4:	b29a      	uxth	r2, r3
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800e2ba:	693b      	ldr	r3, [r7, #16]
 800e2bc:	89ba      	ldrh	r2, [r7, #12]
 800e2be:	811a      	strh	r2, [r3, #8]
 800e2c0:	693b      	ldr	r3, [r7, #16]
 800e2c2:	891a      	ldrh	r2, [r3, #8]
 800e2c4:	693b      	ldr	r3, [r7, #16]
 800e2c6:	815a      	strh	r2, [r3, #10]
  return p;
 800e2c8:	693b      	ldr	r3, [r7, #16]
}
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	3718      	adds	r7, #24
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}
 800e2d2:	bf00      	nop
 800e2d4:	080153e4 	.word	0x080153e4
 800e2d8:	0801549c 	.word	0x0801549c
 800e2dc:	08015438 	.word	0x08015438
 800e2e0:	080154c0 	.word	0x080154c0
 800e2e4:	080154e0 	.word	0x080154e0

0800e2e8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b082      	sub	sp, #8
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
 800e2f0:	460b      	mov	r3, r1
 800e2f2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d106      	bne.n	800e308 <tcp_write_checks+0x20>
 800e2fa:	4b33      	ldr	r3, [pc, #204]	; (800e3c8 <tcp_write_checks+0xe0>)
 800e2fc:	f240 1233 	movw	r2, #307	; 0x133
 800e300:	4932      	ldr	r1, [pc, #200]	; (800e3cc <tcp_write_checks+0xe4>)
 800e302:	4833      	ldr	r0, [pc, #204]	; (800e3d0 <tcp_write_checks+0xe8>)
 800e304:	f004 fc8e 	bl	8012c24 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	7d1b      	ldrb	r3, [r3, #20]
 800e30c:	2b04      	cmp	r3, #4
 800e30e:	d00e      	beq.n	800e32e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800e314:	2b07      	cmp	r3, #7
 800e316:	d00a      	beq.n	800e32e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800e31c:	2b02      	cmp	r3, #2
 800e31e:	d006      	beq.n	800e32e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800e324:	2b03      	cmp	r3, #3
 800e326:	d002      	beq.n	800e32e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800e328:	f06f 030a 	mvn.w	r3, #10
 800e32c:	e048      	b.n	800e3c0 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800e32e:	887b      	ldrh	r3, [r7, #2]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d101      	bne.n	800e338 <tcp_write_checks+0x50>
    return ERR_OK;
 800e334:	2300      	movs	r3, #0
 800e336:	e043      	b.n	800e3c0 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e33e:	887a      	ldrh	r2, [r7, #2]
 800e340:	429a      	cmp	r2, r3
 800e342:	d909      	bls.n	800e358 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	8b5b      	ldrh	r3, [r3, #26]
 800e348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e34c:	b29a      	uxth	r2, r3
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800e352:	f04f 33ff 	mov.w	r3, #4294967295
 800e356:	e033      	b.n	800e3c0 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e35e:	2b08      	cmp	r3, #8
 800e360:	d909      	bls.n	800e376 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	8b5b      	ldrh	r3, [r3, #26]
 800e366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e36a:	b29a      	uxth	r2, r3
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800e370:	f04f 33ff 	mov.w	r3, #4294967295
 800e374:	e024      	b.n	800e3c0 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d00f      	beq.n	800e3a0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e384:	2b00      	cmp	r3, #0
 800e386:	d11a      	bne.n	800e3be <tcp_write_checks+0xd6>
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d116      	bne.n	800e3be <tcp_write_checks+0xd6>
 800e390:	4b0d      	ldr	r3, [pc, #52]	; (800e3c8 <tcp_write_checks+0xe0>)
 800e392:	f240 1255 	movw	r2, #341	; 0x155
 800e396:	490f      	ldr	r1, [pc, #60]	; (800e3d4 <tcp_write_checks+0xec>)
 800e398:	480d      	ldr	r0, [pc, #52]	; (800e3d0 <tcp_write_checks+0xe8>)
 800e39a:	f004 fc43 	bl	8012c24 <iprintf>
 800e39e:	e00e      	b.n	800e3be <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d103      	bne.n	800e3b0 <tcp_write_checks+0xc8>
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d006      	beq.n	800e3be <tcp_write_checks+0xd6>
 800e3b0:	4b05      	ldr	r3, [pc, #20]	; (800e3c8 <tcp_write_checks+0xe0>)
 800e3b2:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800e3b6:	4908      	ldr	r1, [pc, #32]	; (800e3d8 <tcp_write_checks+0xf0>)
 800e3b8:	4805      	ldr	r0, [pc, #20]	; (800e3d0 <tcp_write_checks+0xe8>)
 800e3ba:	f004 fc33 	bl	8012c24 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800e3be:	2300      	movs	r3, #0
}
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	3708      	adds	r7, #8
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}
 800e3c8:	080153e4 	.word	0x080153e4
 800e3cc:	080154f4 	.word	0x080154f4
 800e3d0:	08015438 	.word	0x08015438
 800e3d4:	08015514 	.word	0x08015514
 800e3d8:	08015550 	.word	0x08015550

0800e3dc <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800e3dc:	b590      	push	{r4, r7, lr}
 800e3de:	b09b      	sub	sp, #108	; 0x6c
 800e3e0:	af04      	add	r7, sp, #16
 800e3e2:	60f8      	str	r0, [r7, #12]
 800e3e4:	60b9      	str	r1, [r7, #8]
 800e3e6:	4611      	mov	r1, r2
 800e3e8:	461a      	mov	r2, r3
 800e3ea:	460b      	mov	r3, r1
 800e3ec:	80fb      	strh	r3, [r7, #6]
 800e3ee:	4613      	mov	r3, r2
 800e3f0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	653b      	str	r3, [r7, #80]	; 0x50
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e3fe:	2300      	movs	r3, #0
 800e400:	64bb      	str	r3, [r7, #72]	; 0x48
 800e402:	2300      	movs	r3, #0
 800e404:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800e406:	2300      	movs	r3, #0
 800e408:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800e40c:	2300      	movs	r3, #0
 800e40e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800e412:	2300      	movs	r3, #0
 800e414:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800e416:	2300      	movs	r3, #0
 800e418:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800e41a:	2300      	movs	r3, #0
 800e41c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d109      	bne.n	800e438 <tcp_write+0x5c>
 800e424:	4ba4      	ldr	r3, [pc, #656]	; (800e6b8 <tcp_write+0x2dc>)
 800e426:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800e42a:	49a4      	ldr	r1, [pc, #656]	; (800e6bc <tcp_write+0x2e0>)
 800e42c:	48a4      	ldr	r0, [pc, #656]	; (800e6c0 <tcp_write+0x2e4>)
 800e42e:	f004 fbf9 	bl	8012c24 <iprintf>
 800e432:	f06f 030f 	mvn.w	r3, #15
 800e436:	e32a      	b.n	800ea8e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e43e:	085b      	lsrs	r3, r3, #1
 800e440:	b29a      	uxth	r2, r3
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e446:	4293      	cmp	r3, r2
 800e448:	bf28      	it	cs
 800e44a:	4613      	movcs	r3, r2
 800e44c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800e44e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e450:	2b00      	cmp	r3, #0
 800e452:	d102      	bne.n	800e45a <tcp_write+0x7e>
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e458:	e000      	b.n	800e45c <tcp_write+0x80>
 800e45a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e45c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d109      	bne.n	800e478 <tcp_write+0x9c>
 800e464:	4b94      	ldr	r3, [pc, #592]	; (800e6b8 <tcp_write+0x2dc>)
 800e466:	f240 12ad 	movw	r2, #429	; 0x1ad
 800e46a:	4996      	ldr	r1, [pc, #600]	; (800e6c4 <tcp_write+0x2e8>)
 800e46c:	4894      	ldr	r0, [pc, #592]	; (800e6c0 <tcp_write+0x2e4>)
 800e46e:	f004 fbd9 	bl	8012c24 <iprintf>
 800e472:	f06f 030f 	mvn.w	r3, #15
 800e476:	e30a      	b.n	800ea8e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800e478:	88fb      	ldrh	r3, [r7, #6]
 800e47a:	4619      	mov	r1, r3
 800e47c:	68f8      	ldr	r0, [r7, #12]
 800e47e:	f7ff ff33 	bl	800e2e8 <tcp_write_checks>
 800e482:	4603      	mov	r3, r0
 800e484:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800e488:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d002      	beq.n	800e496 <tcp_write+0xba>
    return err;
 800e490:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800e494:	e2fb      	b.n	800ea8e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e49c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	f000 80f6 	beq.w	800e69c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4b4:	653b      	str	r3, [r7, #80]	; 0x50
 800e4b6:	e002      	b.n	800e4be <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800e4b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e4be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d1f8      	bne.n	800e4b8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800e4c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4c8:	7a9b      	ldrb	r3, [r3, #10]
 800e4ca:	009b      	lsls	r3, r3, #2
 800e4cc:	b29b      	uxth	r3, r3
 800e4ce:	f003 0304 	and.w	r3, r3, #4
 800e4d2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800e4d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e4d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4d8:	891b      	ldrh	r3, [r3, #8]
 800e4da:	4619      	mov	r1, r3
 800e4dc:	8c3b      	ldrh	r3, [r7, #32]
 800e4de:	440b      	add	r3, r1
 800e4e0:	429a      	cmp	r2, r3
 800e4e2:	da06      	bge.n	800e4f2 <tcp_write+0x116>
 800e4e4:	4b74      	ldr	r3, [pc, #464]	; (800e6b8 <tcp_write+0x2dc>)
 800e4e6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e4ea:	4977      	ldr	r1, [pc, #476]	; (800e6c8 <tcp_write+0x2ec>)
 800e4ec:	4874      	ldr	r0, [pc, #464]	; (800e6c0 <tcp_write+0x2e4>)
 800e4ee:	f004 fb99 	bl	8012c24 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800e4f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4f4:	891a      	ldrh	r2, [r3, #8]
 800e4f6:	8c3b      	ldrh	r3, [r7, #32]
 800e4f8:	4413      	add	r3, r2
 800e4fa:	b29b      	uxth	r3, r3
 800e4fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e4fe:	1ad3      	subs	r3, r2, r3
 800e500:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e508:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800e50a:	8a7b      	ldrh	r3, [r7, #18]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d026      	beq.n	800e55e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800e510:	8a7b      	ldrh	r3, [r7, #18]
 800e512:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e514:	429a      	cmp	r2, r3
 800e516:	d206      	bcs.n	800e526 <tcp_write+0x14a>
 800e518:	4b67      	ldr	r3, [pc, #412]	; (800e6b8 <tcp_write+0x2dc>)
 800e51a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800e51e:	496b      	ldr	r1, [pc, #428]	; (800e6cc <tcp_write+0x2f0>)
 800e520:	4867      	ldr	r0, [pc, #412]	; (800e6c0 <tcp_write+0x2e4>)
 800e522:	f004 fb7f 	bl	8012c24 <iprintf>
      seg = last_unsent;
 800e526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e528:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800e52a:	8a7b      	ldrh	r3, [r7, #18]
 800e52c:	88fa      	ldrh	r2, [r7, #6]
 800e52e:	4293      	cmp	r3, r2
 800e530:	bf28      	it	cs
 800e532:	4613      	movcs	r3, r2
 800e534:	b29b      	uxth	r3, r3
 800e536:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e538:	4293      	cmp	r3, r2
 800e53a:	bf28      	it	cs
 800e53c:	4613      	movcs	r3, r2
 800e53e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800e540:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e544:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e546:	4413      	add	r3, r2
 800e548:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800e54c:	8a7a      	ldrh	r2, [r7, #18]
 800e54e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e550:	1ad3      	subs	r3, r2, r3
 800e552:	b29b      	uxth	r3, r3
 800e554:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800e556:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e558:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e55a:	1ad3      	subs	r3, r2, r3
 800e55c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800e55e:	8a7b      	ldrh	r3, [r7, #18]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d00b      	beq.n	800e57c <tcp_write+0x1a0>
 800e564:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e568:	88fb      	ldrh	r3, [r7, #6]
 800e56a:	429a      	cmp	r2, r3
 800e56c:	d006      	beq.n	800e57c <tcp_write+0x1a0>
 800e56e:	4b52      	ldr	r3, [pc, #328]	; (800e6b8 <tcp_write+0x2dc>)
 800e570:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e574:	4956      	ldr	r1, [pc, #344]	; (800e6d0 <tcp_write+0x2f4>)
 800e576:	4852      	ldr	r0, [pc, #328]	; (800e6c0 <tcp_write+0x2e4>)
 800e578:	f004 fb54 	bl	8012c24 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800e57c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e580:	88fb      	ldrh	r3, [r7, #6]
 800e582:	429a      	cmp	r2, r3
 800e584:	f080 8167 	bcs.w	800e856 <tcp_write+0x47a>
 800e588:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	f000 8163 	beq.w	800e856 <tcp_write+0x47a>
 800e590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e592:	891b      	ldrh	r3, [r3, #8]
 800e594:	2b00      	cmp	r3, #0
 800e596:	f000 815e 	beq.w	800e856 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800e59a:	88fa      	ldrh	r2, [r7, #6]
 800e59c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e5a0:	1ad2      	subs	r2, r2, r3
 800e5a2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e5a4:	4293      	cmp	r3, r2
 800e5a6:	bfa8      	it	ge
 800e5a8:	4613      	movge	r3, r2
 800e5aa:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800e5ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5ae:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800e5b0:	797b      	ldrb	r3, [r7, #5]
 800e5b2:	f003 0301 	and.w	r3, r3, #1
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d027      	beq.n	800e60a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800e5ba:	f107 0012 	add.w	r0, r7, #18
 800e5be:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e5c0:	8bf9      	ldrh	r1, [r7, #30]
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	9302      	str	r3, [sp, #8]
 800e5c6:	797b      	ldrb	r3, [r7, #5]
 800e5c8:	9301      	str	r3, [sp, #4]
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	9300      	str	r3, [sp, #0]
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	2000      	movs	r0, #0
 800e5d2:	f7ff fe0f 	bl	800e1f4 <tcp_pbuf_prealloc>
 800e5d6:	6578      	str	r0, [r7, #84]	; 0x54
 800e5d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	f000 8225 	beq.w	800ea2a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800e5e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5e2:	6858      	ldr	r0, [r3, #4]
 800e5e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e5e8:	68ba      	ldr	r2, [r7, #8]
 800e5ea:	4413      	add	r3, r2
 800e5ec:	8bfa      	ldrh	r2, [r7, #30]
 800e5ee:	4619      	mov	r1, r3
 800e5f0:	f004 fb02 	bl	8012bf8 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800e5f4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e5f6:	f7fb f9eb 	bl	80099d0 <pbuf_clen>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	461a      	mov	r2, r3
 800e5fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e602:	4413      	add	r3, r2
 800e604:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800e608:	e041      	b.n	800e68e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800e60a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e60c:	685b      	ldr	r3, [r3, #4]
 800e60e:	637b      	str	r3, [r7, #52]	; 0x34
 800e610:	e002      	b.n	800e618 <tcp_write+0x23c>
 800e612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	637b      	str	r3, [r7, #52]	; 0x34
 800e618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d1f8      	bne.n	800e612 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800e620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e622:	7b1b      	ldrb	r3, [r3, #12]
 800e624:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d115      	bne.n	800e658 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800e62c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e62e:	685b      	ldr	r3, [r3, #4]
 800e630:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e632:	8952      	ldrh	r2, [r2, #10]
 800e634:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800e636:	68ba      	ldr	r2, [r7, #8]
 800e638:	429a      	cmp	r2, r3
 800e63a:	d10d      	bne.n	800e658 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800e63c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e640:	2b00      	cmp	r3, #0
 800e642:	d006      	beq.n	800e652 <tcp_write+0x276>
 800e644:	4b1c      	ldr	r3, [pc, #112]	; (800e6b8 <tcp_write+0x2dc>)
 800e646:	f240 2231 	movw	r2, #561	; 0x231
 800e64a:	4922      	ldr	r1, [pc, #136]	; (800e6d4 <tcp_write+0x2f8>)
 800e64c:	481c      	ldr	r0, [pc, #112]	; (800e6c0 <tcp_write+0x2e4>)
 800e64e:	f004 fae9 	bl	8012c24 <iprintf>
          extendlen = seglen;
 800e652:	8bfb      	ldrh	r3, [r7, #30]
 800e654:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800e656:	e01a      	b.n	800e68e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800e658:	8bfb      	ldrh	r3, [r7, #30]
 800e65a:	2201      	movs	r2, #1
 800e65c:	4619      	mov	r1, r3
 800e65e:	2000      	movs	r0, #0
 800e660:	f7fa fe4a 	bl	80092f8 <pbuf_alloc>
 800e664:	6578      	str	r0, [r7, #84]	; 0x54
 800e666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e668:	2b00      	cmp	r3, #0
 800e66a:	f000 81e0 	beq.w	800ea2e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800e66e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e672:	68ba      	ldr	r2, [r7, #8]
 800e674:	441a      	add	r2, r3
 800e676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e678:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800e67a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e67c:	f7fb f9a8 	bl	80099d0 <pbuf_clen>
 800e680:	4603      	mov	r3, r0
 800e682:	461a      	mov	r2, r3
 800e684:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e688:	4413      	add	r3, r2
 800e68a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800e68e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e692:	8bfb      	ldrh	r3, [r7, #30]
 800e694:	4413      	add	r3, r2
 800e696:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800e69a:	e0dc      	b.n	800e856 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	f000 80d7 	beq.w	800e856 <tcp_write+0x47a>
 800e6a8:	4b03      	ldr	r3, [pc, #12]	; (800e6b8 <tcp_write+0x2dc>)
 800e6aa:	f240 224a 	movw	r2, #586	; 0x24a
 800e6ae:	490a      	ldr	r1, [pc, #40]	; (800e6d8 <tcp_write+0x2fc>)
 800e6b0:	4803      	ldr	r0, [pc, #12]	; (800e6c0 <tcp_write+0x2e4>)
 800e6b2:	f004 fab7 	bl	8012c24 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800e6b6:	e0ce      	b.n	800e856 <tcp_write+0x47a>
 800e6b8:	080153e4 	.word	0x080153e4
 800e6bc:	08015584 	.word	0x08015584
 800e6c0:	08015438 	.word	0x08015438
 800e6c4:	0801559c 	.word	0x0801559c
 800e6c8:	080155d0 	.word	0x080155d0
 800e6cc:	080155e8 	.word	0x080155e8
 800e6d0:	08015608 	.word	0x08015608
 800e6d4:	08015628 	.word	0x08015628
 800e6d8:	08015654 	.word	0x08015654
    struct pbuf *p;
    u16_t left = len - pos;
 800e6dc:	88fa      	ldrh	r2, [r7, #6]
 800e6de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e6e2:	1ad3      	subs	r3, r2, r3
 800e6e4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800e6e6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e6ea:	b29b      	uxth	r3, r3
 800e6ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e6ee:	1ad3      	subs	r3, r2, r3
 800e6f0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800e6f2:	8b7a      	ldrh	r2, [r7, #26]
 800e6f4:	8bbb      	ldrh	r3, [r7, #28]
 800e6f6:	4293      	cmp	r3, r2
 800e6f8:	bf28      	it	cs
 800e6fa:	4613      	movcs	r3, r2
 800e6fc:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800e6fe:	797b      	ldrb	r3, [r7, #5]
 800e700:	f003 0301 	and.w	r3, r3, #1
 800e704:	2b00      	cmp	r3, #0
 800e706:	d036      	beq.n	800e776 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800e708:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e70c:	b29a      	uxth	r2, r3
 800e70e:	8b3b      	ldrh	r3, [r7, #24]
 800e710:	4413      	add	r3, r2
 800e712:	b299      	uxth	r1, r3
 800e714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e716:	2b00      	cmp	r3, #0
 800e718:	bf0c      	ite	eq
 800e71a:	2301      	moveq	r3, #1
 800e71c:	2300      	movne	r3, #0
 800e71e:	b2db      	uxtb	r3, r3
 800e720:	f107 0012 	add.w	r0, r7, #18
 800e724:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e726:	9302      	str	r3, [sp, #8]
 800e728:	797b      	ldrb	r3, [r7, #5]
 800e72a:	9301      	str	r3, [sp, #4]
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	9300      	str	r3, [sp, #0]
 800e730:	4603      	mov	r3, r0
 800e732:	2036      	movs	r0, #54	; 0x36
 800e734:	f7ff fd5e 	bl	800e1f4 <tcp_pbuf_prealloc>
 800e738:	6338      	str	r0, [r7, #48]	; 0x30
 800e73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	f000 8178 	beq.w	800ea32 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800e742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e744:	895b      	ldrh	r3, [r3, #10]
 800e746:	8b3a      	ldrh	r2, [r7, #24]
 800e748:	429a      	cmp	r2, r3
 800e74a:	d906      	bls.n	800e75a <tcp_write+0x37e>
 800e74c:	4b8c      	ldr	r3, [pc, #560]	; (800e980 <tcp_write+0x5a4>)
 800e74e:	f240 2266 	movw	r2, #614	; 0x266
 800e752:	498c      	ldr	r1, [pc, #560]	; (800e984 <tcp_write+0x5a8>)
 800e754:	488c      	ldr	r0, [pc, #560]	; (800e988 <tcp_write+0x5ac>)
 800e756:	f004 fa65 	bl	8012c24 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800e75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e75c:	685a      	ldr	r2, [r3, #4]
 800e75e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e762:	18d0      	adds	r0, r2, r3
 800e764:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e768:	68ba      	ldr	r2, [r7, #8]
 800e76a:	4413      	add	r3, r2
 800e76c:	8b3a      	ldrh	r2, [r7, #24]
 800e76e:	4619      	mov	r1, r3
 800e770:	f004 fa42 	bl	8012bf8 <memcpy>
 800e774:	e02f      	b.n	800e7d6 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800e776:	8a7b      	ldrh	r3, [r7, #18]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d006      	beq.n	800e78a <tcp_write+0x3ae>
 800e77c:	4b80      	ldr	r3, [pc, #512]	; (800e980 <tcp_write+0x5a4>)
 800e77e:	f240 2271 	movw	r2, #625	; 0x271
 800e782:	4982      	ldr	r1, [pc, #520]	; (800e98c <tcp_write+0x5b0>)
 800e784:	4880      	ldr	r0, [pc, #512]	; (800e988 <tcp_write+0x5ac>)
 800e786:	f004 fa4d 	bl	8012c24 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800e78a:	8b3b      	ldrh	r3, [r7, #24]
 800e78c:	2201      	movs	r2, #1
 800e78e:	4619      	mov	r1, r3
 800e790:	2036      	movs	r0, #54	; 0x36
 800e792:	f7fa fdb1 	bl	80092f8 <pbuf_alloc>
 800e796:	6178      	str	r0, [r7, #20]
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	f000 814b 	beq.w	800ea36 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800e7a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e7a4:	68ba      	ldr	r2, [r7, #8]
 800e7a6:	441a      	add	r2, r3
 800e7a8:	697b      	ldr	r3, [r7, #20]
 800e7aa:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e7ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e7b0:	b29b      	uxth	r3, r3
 800e7b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e7b6:	4619      	mov	r1, r3
 800e7b8:	2036      	movs	r0, #54	; 0x36
 800e7ba:	f7fa fd9d 	bl	80092f8 <pbuf_alloc>
 800e7be:	6338      	str	r0, [r7, #48]	; 0x30
 800e7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d103      	bne.n	800e7ce <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800e7c6:	6978      	ldr	r0, [r7, #20]
 800e7c8:	f7fb f87a 	bl	80098c0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800e7cc:	e136      	b.n	800ea3c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800e7ce:	6979      	ldr	r1, [r7, #20]
 800e7d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e7d2:	f7fb f937 	bl	8009a44 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800e7d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e7d8:	f7fb f8fa 	bl	80099d0 <pbuf_clen>
 800e7dc:	4603      	mov	r3, r0
 800e7de:	461a      	mov	r2, r3
 800e7e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e7e4:	4413      	add	r3, r2
 800e7e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800e7ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e7ee:	2b09      	cmp	r3, #9
 800e7f0:	d903      	bls.n	800e7fa <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800e7f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e7f4:	f7fb f864 	bl	80098c0 <pbuf_free>
      goto memerr;
 800e7f8:	e120      	b.n	800ea3c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e7fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e802:	441a      	add	r2, r3
 800e804:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e808:	9300      	str	r3, [sp, #0]
 800e80a:	4613      	mov	r3, r2
 800e80c:	2200      	movs	r2, #0
 800e80e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e810:	68f8      	ldr	r0, [r7, #12]
 800e812:	f7ff fc51 	bl	800e0b8 <tcp_create_segment>
 800e816:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	f000 810d 	beq.w	800ea3a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800e820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e822:	2b00      	cmp	r3, #0
 800e824:	d102      	bne.n	800e82c <tcp_write+0x450>
      queue = seg;
 800e826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e828:	647b      	str	r3, [r7, #68]	; 0x44
 800e82a:	e00c      	b.n	800e846 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800e82c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d106      	bne.n	800e840 <tcp_write+0x464>
 800e832:	4b53      	ldr	r3, [pc, #332]	; (800e980 <tcp_write+0x5a4>)
 800e834:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e838:	4955      	ldr	r1, [pc, #340]	; (800e990 <tcp_write+0x5b4>)
 800e83a:	4853      	ldr	r0, [pc, #332]	; (800e988 <tcp_write+0x5ac>)
 800e83c:	f004 f9f2 	bl	8012c24 <iprintf>
      prev_seg->next = seg;
 800e840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e842:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e844:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800e846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e848:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800e84a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e84e:	8b3b      	ldrh	r3, [r7, #24]
 800e850:	4413      	add	r3, r2
 800e852:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800e856:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e85a:	88fb      	ldrh	r3, [r7, #6]
 800e85c:	429a      	cmp	r2, r3
 800e85e:	f4ff af3d 	bcc.w	800e6dc <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800e862:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e864:	2b00      	cmp	r3, #0
 800e866:	d02c      	beq.n	800e8c2 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800e868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e86a:	685b      	ldr	r3, [r3, #4]
 800e86c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e86e:	e01e      	b.n	800e8ae <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800e870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e872:	891a      	ldrh	r2, [r3, #8]
 800e874:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e876:	4413      	add	r3, r2
 800e878:	b29a      	uxth	r2, r3
 800e87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e87c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800e87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d110      	bne.n	800e8a8 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800e886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e888:	685b      	ldr	r3, [r3, #4]
 800e88a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e88c:	8952      	ldrh	r2, [r2, #10]
 800e88e:	4413      	add	r3, r2
 800e890:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e892:	68b9      	ldr	r1, [r7, #8]
 800e894:	4618      	mov	r0, r3
 800e896:	f004 f9af 	bl	8012bf8 <memcpy>
        p->len += oversize_used;
 800e89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e89c:	895a      	ldrh	r2, [r3, #10]
 800e89e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e8a0:	4413      	add	r3, r2
 800e8a2:	b29a      	uxth	r2, r3
 800e8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a6:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800e8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d1dd      	bne.n	800e870 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800e8b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8b6:	891a      	ldrh	r2, [r3, #8]
 800e8b8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e8ba:	4413      	add	r3, r2
 800e8bc:	b29a      	uxth	r2, r3
 800e8be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8c0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800e8c2:	8a7a      	ldrh	r2, [r7, #18]
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800e8ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d018      	beq.n	800e902 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800e8d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d106      	bne.n	800e8e4 <tcp_write+0x508>
 800e8d6:	4b2a      	ldr	r3, [pc, #168]	; (800e980 <tcp_write+0x5a4>)
 800e8d8:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800e8dc:	492d      	ldr	r1, [pc, #180]	; (800e994 <tcp_write+0x5b8>)
 800e8de:	482a      	ldr	r0, [pc, #168]	; (800e988 <tcp_write+0x5ac>)
 800e8e0:	f004 f9a0 	bl	8012c24 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800e8e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8e6:	685b      	ldr	r3, [r3, #4]
 800e8e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7fb f8aa 	bl	8009a44 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800e8f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8f2:	891a      	ldrh	r2, [r3, #8]
 800e8f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8f6:	891b      	ldrh	r3, [r3, #8]
 800e8f8:	4413      	add	r3, r2
 800e8fa:	b29a      	uxth	r2, r3
 800e8fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8fe:	811a      	strh	r2, [r3, #8]
 800e900:	e037      	b.n	800e972 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800e902:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e904:	2b00      	cmp	r3, #0
 800e906:	d034      	beq.n	800e972 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800e908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d003      	beq.n	800e916 <tcp_write+0x53a>
 800e90e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e910:	685b      	ldr	r3, [r3, #4]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d106      	bne.n	800e924 <tcp_write+0x548>
 800e916:	4b1a      	ldr	r3, [pc, #104]	; (800e980 <tcp_write+0x5a4>)
 800e918:	f240 22e6 	movw	r2, #742	; 0x2e6
 800e91c:	491e      	ldr	r1, [pc, #120]	; (800e998 <tcp_write+0x5bc>)
 800e91e:	481a      	ldr	r0, [pc, #104]	; (800e988 <tcp_write+0x5ac>)
 800e920:	f004 f980 	bl	8012c24 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e926:	685b      	ldr	r3, [r3, #4]
 800e928:	62bb      	str	r3, [r7, #40]	; 0x28
 800e92a:	e009      	b.n	800e940 <tcp_write+0x564>
      p->tot_len += extendlen;
 800e92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e92e:	891a      	ldrh	r2, [r3, #8]
 800e930:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e932:	4413      	add	r3, r2
 800e934:	b29a      	uxth	r2, r3
 800e936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e938:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d1f1      	bne.n	800e92c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800e948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e94a:	891a      	ldrh	r2, [r3, #8]
 800e94c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e94e:	4413      	add	r3, r2
 800e950:	b29a      	uxth	r2, r3
 800e952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e954:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800e956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e958:	895a      	ldrh	r2, [r3, #10]
 800e95a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e95c:	4413      	add	r3, r2
 800e95e:	b29a      	uxth	r2, r3
 800e960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e962:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800e964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e966:	891a      	ldrh	r2, [r3, #8]
 800e968:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e96a:	4413      	add	r3, r2
 800e96c:	b29a      	uxth	r2, r3
 800e96e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e970:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800e972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e974:	2b00      	cmp	r3, #0
 800e976:	d111      	bne.n	800e99c <tcp_write+0x5c0>
    pcb->unsent = queue;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e97c:	66da      	str	r2, [r3, #108]	; 0x6c
 800e97e:	e010      	b.n	800e9a2 <tcp_write+0x5c6>
 800e980:	080153e4 	.word	0x080153e4
 800e984:	08015684 	.word	0x08015684
 800e988:	08015438 	.word	0x08015438
 800e98c:	080156c4 	.word	0x080156c4
 800e990:	080156d4 	.word	0x080156d4
 800e994:	080156e8 	.word	0x080156e8
 800e998:	08015720 	.word	0x08015720
  } else {
    last_unsent->next = queue;
 800e99c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e99e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e9a0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e9a6:	88fb      	ldrh	r3, [r7, #6]
 800e9a8:	441a      	add	r2, r3
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800e9b4:	88fb      	ldrh	r3, [r7, #6]
 800e9b6:	1ad3      	subs	r3, r2, r3
 800e9b8:	b29a      	uxth	r2, r3
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e9c6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d00e      	beq.n	800e9f2 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d10a      	bne.n	800e9f2 <tcp_write+0x616>
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d106      	bne.n	800e9f2 <tcp_write+0x616>
 800e9e4:	4b2c      	ldr	r3, [pc, #176]	; (800ea98 <tcp_write+0x6bc>)
 800e9e6:	f240 3212 	movw	r2, #786	; 0x312
 800e9ea:	492c      	ldr	r1, [pc, #176]	; (800ea9c <tcp_write+0x6c0>)
 800e9ec:	482c      	ldr	r0, [pc, #176]	; (800eaa0 <tcp_write+0x6c4>)
 800e9ee:	f004 f919 	bl	8012c24 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800e9f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d016      	beq.n	800ea26 <tcp_write+0x64a>
 800e9f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9fa:	68db      	ldr	r3, [r3, #12]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d012      	beq.n	800ea26 <tcp_write+0x64a>
 800ea00:	797b      	ldrb	r3, [r7, #5]
 800ea02:	f003 0302 	and.w	r3, r3, #2
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d10d      	bne.n	800ea26 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800ea0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea0c:	68db      	ldr	r3, [r3, #12]
 800ea0e:	899b      	ldrh	r3, [r3, #12]
 800ea10:	b29c      	uxth	r4, r3
 800ea12:	2008      	movs	r0, #8
 800ea14:	f7f9 fb3e 	bl	8008094 <lwip_htons>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	461a      	mov	r2, r3
 800ea1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea1e:	68db      	ldr	r3, [r3, #12]
 800ea20:	4322      	orrs	r2, r4
 800ea22:	b292      	uxth	r2, r2
 800ea24:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800ea26:	2300      	movs	r3, #0
 800ea28:	e031      	b.n	800ea8e <tcp_write+0x6b2>
          goto memerr;
 800ea2a:	bf00      	nop
 800ea2c:	e006      	b.n	800ea3c <tcp_write+0x660>
            goto memerr;
 800ea2e:	bf00      	nop
 800ea30:	e004      	b.n	800ea3c <tcp_write+0x660>
        goto memerr;
 800ea32:	bf00      	nop
 800ea34:	e002      	b.n	800ea3c <tcp_write+0x660>
        goto memerr;
 800ea36:	bf00      	nop
 800ea38:	e000      	b.n	800ea3c <tcp_write+0x660>
      goto memerr;
 800ea3a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	8b5b      	ldrh	r3, [r3, #26]
 800ea40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea44:	b29a      	uxth	r2, r3
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800ea4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d002      	beq.n	800ea56 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800ea50:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ea52:	f7fa ff35 	bl	80098c0 <pbuf_free>
  }
  if (queue != NULL) {
 800ea56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d002      	beq.n	800ea62 <tcp_write+0x686>
    tcp_segs_free(queue);
 800ea5c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ea5e:	f7fc fb57 	bl	800b110 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d00e      	beq.n	800ea8a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d10a      	bne.n	800ea8a <tcp_write+0x6ae>
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d106      	bne.n	800ea8a <tcp_write+0x6ae>
 800ea7c:	4b06      	ldr	r3, [pc, #24]	; (800ea98 <tcp_write+0x6bc>)
 800ea7e:	f240 3227 	movw	r2, #807	; 0x327
 800ea82:	4906      	ldr	r1, [pc, #24]	; (800ea9c <tcp_write+0x6c0>)
 800ea84:	4806      	ldr	r0, [pc, #24]	; (800eaa0 <tcp_write+0x6c4>)
 800ea86:	f004 f8cd 	bl	8012c24 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800ea8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ea8e:	4618      	mov	r0, r3
 800ea90:	375c      	adds	r7, #92	; 0x5c
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd90      	pop	{r4, r7, pc}
 800ea96:	bf00      	nop
 800ea98:	080153e4 	.word	0x080153e4
 800ea9c:	08015758 	.word	0x08015758
 800eaa0:	08015438 	.word	0x08015438

0800eaa4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800eaa4:	b590      	push	{r4, r7, lr}
 800eaa6:	b08b      	sub	sp, #44	; 0x2c
 800eaa8:	af02      	add	r7, sp, #8
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	460b      	mov	r3, r1
 800eaae:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800eab0:	2300      	movs	r3, #0
 800eab2:	61fb      	str	r3, [r7, #28]
 800eab4:	2300      	movs	r3, #0
 800eab6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800eab8:	2300      	movs	r3, #0
 800eaba:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d106      	bne.n	800ead0 <tcp_split_unsent_seg+0x2c>
 800eac2:	4b95      	ldr	r3, [pc, #596]	; (800ed18 <tcp_split_unsent_seg+0x274>)
 800eac4:	f240 324b 	movw	r2, #843	; 0x34b
 800eac8:	4994      	ldr	r1, [pc, #592]	; (800ed1c <tcp_split_unsent_seg+0x278>)
 800eaca:	4895      	ldr	r0, [pc, #596]	; (800ed20 <tcp_split_unsent_seg+0x27c>)
 800eacc:	f004 f8aa 	bl	8012c24 <iprintf>

  useg = pcb->unsent;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ead4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ead6:	697b      	ldr	r3, [r7, #20]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d102      	bne.n	800eae2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800eadc:	f04f 33ff 	mov.w	r3, #4294967295
 800eae0:	e116      	b.n	800ed10 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800eae2:	887b      	ldrh	r3, [r7, #2]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d109      	bne.n	800eafc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800eae8:	4b8b      	ldr	r3, [pc, #556]	; (800ed18 <tcp_split_unsent_seg+0x274>)
 800eaea:	f240 3253 	movw	r2, #851	; 0x353
 800eaee:	498d      	ldr	r1, [pc, #564]	; (800ed24 <tcp_split_unsent_seg+0x280>)
 800eaf0:	488b      	ldr	r0, [pc, #556]	; (800ed20 <tcp_split_unsent_seg+0x27c>)
 800eaf2:	f004 f897 	bl	8012c24 <iprintf>
    return ERR_VAL;
 800eaf6:	f06f 0305 	mvn.w	r3, #5
 800eafa:	e109      	b.n	800ed10 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800eafc:	697b      	ldr	r3, [r7, #20]
 800eafe:	891b      	ldrh	r3, [r3, #8]
 800eb00:	887a      	ldrh	r2, [r7, #2]
 800eb02:	429a      	cmp	r2, r3
 800eb04:	d301      	bcc.n	800eb0a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800eb06:	2300      	movs	r3, #0
 800eb08:	e102      	b.n	800ed10 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb0e:	887a      	ldrh	r2, [r7, #2]
 800eb10:	429a      	cmp	r2, r3
 800eb12:	d906      	bls.n	800eb22 <tcp_split_unsent_seg+0x7e>
 800eb14:	4b80      	ldr	r3, [pc, #512]	; (800ed18 <tcp_split_unsent_seg+0x274>)
 800eb16:	f240 325b 	movw	r2, #859	; 0x35b
 800eb1a:	4983      	ldr	r1, [pc, #524]	; (800ed28 <tcp_split_unsent_seg+0x284>)
 800eb1c:	4880      	ldr	r0, [pc, #512]	; (800ed20 <tcp_split_unsent_seg+0x27c>)
 800eb1e:	f004 f881 	bl	8012c24 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800eb22:	697b      	ldr	r3, [r7, #20]
 800eb24:	891b      	ldrh	r3, [r3, #8]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d106      	bne.n	800eb38 <tcp_split_unsent_seg+0x94>
 800eb2a:	4b7b      	ldr	r3, [pc, #492]	; (800ed18 <tcp_split_unsent_seg+0x274>)
 800eb2c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800eb30:	497e      	ldr	r1, [pc, #504]	; (800ed2c <tcp_split_unsent_seg+0x288>)
 800eb32:	487b      	ldr	r0, [pc, #492]	; (800ed20 <tcp_split_unsent_seg+0x27c>)
 800eb34:	f004 f876 	bl	8012c24 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800eb38:	697b      	ldr	r3, [r7, #20]
 800eb3a:	7a9b      	ldrb	r3, [r3, #10]
 800eb3c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800eb3e:	7bfb      	ldrb	r3, [r7, #15]
 800eb40:	009b      	lsls	r3, r3, #2
 800eb42:	b2db      	uxtb	r3, r3
 800eb44:	f003 0304 	and.w	r3, r3, #4
 800eb48:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800eb4a:	697b      	ldr	r3, [r7, #20]
 800eb4c:	891a      	ldrh	r2, [r3, #8]
 800eb4e:	887b      	ldrh	r3, [r7, #2]
 800eb50:	1ad3      	subs	r3, r2, r3
 800eb52:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800eb54:	7bbb      	ldrb	r3, [r7, #14]
 800eb56:	b29a      	uxth	r2, r3
 800eb58:	89bb      	ldrh	r3, [r7, #12]
 800eb5a:	4413      	add	r3, r2
 800eb5c:	b29b      	uxth	r3, r3
 800eb5e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800eb62:	4619      	mov	r1, r3
 800eb64:	2036      	movs	r0, #54	; 0x36
 800eb66:	f7fa fbc7 	bl	80092f8 <pbuf_alloc>
 800eb6a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800eb6c:	693b      	ldr	r3, [r7, #16]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	f000 80b7 	beq.w	800ece2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	685b      	ldr	r3, [r3, #4]
 800eb78:	891a      	ldrh	r2, [r3, #8]
 800eb7a:	697b      	ldr	r3, [r7, #20]
 800eb7c:	891b      	ldrh	r3, [r3, #8]
 800eb7e:	1ad3      	subs	r3, r2, r3
 800eb80:	b29a      	uxth	r2, r3
 800eb82:	887b      	ldrh	r3, [r7, #2]
 800eb84:	4413      	add	r3, r2
 800eb86:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800eb88:	697b      	ldr	r3, [r7, #20]
 800eb8a:	6858      	ldr	r0, [r3, #4]
 800eb8c:	693b      	ldr	r3, [r7, #16]
 800eb8e:	685a      	ldr	r2, [r3, #4]
 800eb90:	7bbb      	ldrb	r3, [r7, #14]
 800eb92:	18d1      	adds	r1, r2, r3
 800eb94:	897b      	ldrh	r3, [r7, #10]
 800eb96:	89ba      	ldrh	r2, [r7, #12]
 800eb98:	f7fb f88c 	bl	8009cb4 <pbuf_copy_partial>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	461a      	mov	r2, r3
 800eba0:	89bb      	ldrh	r3, [r7, #12]
 800eba2:	4293      	cmp	r3, r2
 800eba4:	f040 809f 	bne.w	800ece6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800eba8:	697b      	ldr	r3, [r7, #20]
 800ebaa:	68db      	ldr	r3, [r3, #12]
 800ebac:	899b      	ldrh	r3, [r3, #12]
 800ebae:	b29b      	uxth	r3, r3
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f7f9 fa6f 	bl	8008094 <lwip_htons>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	b2db      	uxtb	r3, r3
 800ebba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ebbe:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800ebc4:	7efb      	ldrb	r3, [r7, #27]
 800ebc6:	f003 0308 	and.w	r3, r3, #8
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d007      	beq.n	800ebde <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800ebce:	7efb      	ldrb	r3, [r7, #27]
 800ebd0:	f023 0308 	bic.w	r3, r3, #8
 800ebd4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800ebd6:	7ebb      	ldrb	r3, [r7, #26]
 800ebd8:	f043 0308 	orr.w	r3, r3, #8
 800ebdc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800ebde:	7efb      	ldrb	r3, [r7, #27]
 800ebe0:	f003 0301 	and.w	r3, r3, #1
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d007      	beq.n	800ebf8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800ebe8:	7efb      	ldrb	r3, [r7, #27]
 800ebea:	f023 0301 	bic.w	r3, r3, #1
 800ebee:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ebf0:	7ebb      	ldrb	r3, [r7, #26]
 800ebf2:	f043 0301 	orr.w	r3, r3, #1
 800ebf6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ebf8:	697b      	ldr	r3, [r7, #20]
 800ebfa:	68db      	ldr	r3, [r3, #12]
 800ebfc:	685b      	ldr	r3, [r3, #4]
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f7f9 fa5d 	bl	80080be <lwip_htonl>
 800ec04:	4602      	mov	r2, r0
 800ec06:	887b      	ldrh	r3, [r7, #2]
 800ec08:	18d1      	adds	r1, r2, r3
 800ec0a:	7eba      	ldrb	r2, [r7, #26]
 800ec0c:	7bfb      	ldrb	r3, [r7, #15]
 800ec0e:	9300      	str	r3, [sp, #0]
 800ec10:	460b      	mov	r3, r1
 800ec12:	6939      	ldr	r1, [r7, #16]
 800ec14:	6878      	ldr	r0, [r7, #4]
 800ec16:	f7ff fa4f 	bl	800e0b8 <tcp_create_segment>
 800ec1a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ec1c:	69fb      	ldr	r3, [r7, #28]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d063      	beq.n	800ecea <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ec22:	697b      	ldr	r3, [r7, #20]
 800ec24:	685b      	ldr	r3, [r3, #4]
 800ec26:	4618      	mov	r0, r3
 800ec28:	f7fa fed2 	bl	80099d0 <pbuf_clen>
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	461a      	mov	r2, r3
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ec36:	1a9b      	subs	r3, r3, r2
 800ec38:	b29a      	uxth	r2, r3
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	6858      	ldr	r0, [r3, #4]
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	685b      	ldr	r3, [r3, #4]
 800ec48:	891a      	ldrh	r2, [r3, #8]
 800ec4a:	89bb      	ldrh	r3, [r7, #12]
 800ec4c:	1ad3      	subs	r3, r2, r3
 800ec4e:	b29b      	uxth	r3, r3
 800ec50:	4619      	mov	r1, r3
 800ec52:	f7fa fcaf 	bl	80095b4 <pbuf_realloc>
  useg->len -= remainder;
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	891a      	ldrh	r2, [r3, #8]
 800ec5a:	89bb      	ldrh	r3, [r7, #12]
 800ec5c:	1ad3      	subs	r3, r2, r3
 800ec5e:	b29a      	uxth	r2, r3
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ec64:	697b      	ldr	r3, [r7, #20]
 800ec66:	68db      	ldr	r3, [r3, #12]
 800ec68:	899b      	ldrh	r3, [r3, #12]
 800ec6a:	b29c      	uxth	r4, r3
 800ec6c:	7efb      	ldrb	r3, [r7, #27]
 800ec6e:	b29b      	uxth	r3, r3
 800ec70:	4618      	mov	r0, r3
 800ec72:	f7f9 fa0f 	bl	8008094 <lwip_htons>
 800ec76:	4603      	mov	r3, r0
 800ec78:	461a      	mov	r2, r3
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	68db      	ldr	r3, [r3, #12]
 800ec7e:	4322      	orrs	r2, r4
 800ec80:	b292      	uxth	r2, r2
 800ec82:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ec84:	697b      	ldr	r3, [r7, #20]
 800ec86:	685b      	ldr	r3, [r3, #4]
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f7fa fea1 	bl	80099d0 <pbuf_clen>
 800ec8e:	4603      	mov	r3, r0
 800ec90:	461a      	mov	r2, r3
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ec98:	4413      	add	r3, r2
 800ec9a:	b29a      	uxth	r2, r3
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800eca2:	69fb      	ldr	r3, [r7, #28]
 800eca4:	685b      	ldr	r3, [r3, #4]
 800eca6:	4618      	mov	r0, r3
 800eca8:	f7fa fe92 	bl	80099d0 <pbuf_clen>
 800ecac:	4603      	mov	r3, r0
 800ecae:	461a      	mov	r2, r3
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ecb6:	4413      	add	r3, r2
 800ecb8:	b29a      	uxth	r2, r3
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800ecc0:	697b      	ldr	r3, [r7, #20]
 800ecc2:	681a      	ldr	r2, [r3, #0]
 800ecc4:	69fb      	ldr	r3, [r7, #28]
 800ecc6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800ecc8:	697b      	ldr	r3, [r7, #20]
 800ecca:	69fa      	ldr	r2, [r7, #28]
 800eccc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800ecce:	69fb      	ldr	r3, [r7, #28]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d103      	bne.n	800ecde <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2200      	movs	r2, #0
 800ecda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800ecde:	2300      	movs	r3, #0
 800ece0:	e016      	b.n	800ed10 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800ece2:	bf00      	nop
 800ece4:	e002      	b.n	800ecec <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ece6:	bf00      	nop
 800ece8:	e000      	b.n	800ecec <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ecea:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800ecec:	69fb      	ldr	r3, [r7, #28]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d006      	beq.n	800ed00 <tcp_split_unsent_seg+0x25c>
 800ecf2:	4b09      	ldr	r3, [pc, #36]	; (800ed18 <tcp_split_unsent_seg+0x274>)
 800ecf4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800ecf8:	490d      	ldr	r1, [pc, #52]	; (800ed30 <tcp_split_unsent_seg+0x28c>)
 800ecfa:	4809      	ldr	r0, [pc, #36]	; (800ed20 <tcp_split_unsent_seg+0x27c>)
 800ecfc:	f003 ff92 	bl	8012c24 <iprintf>
  if (p != NULL) {
 800ed00:	693b      	ldr	r3, [r7, #16]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d002      	beq.n	800ed0c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800ed06:	6938      	ldr	r0, [r7, #16]
 800ed08:	f7fa fdda 	bl	80098c0 <pbuf_free>
  }

  return ERR_MEM;
 800ed0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ed10:	4618      	mov	r0, r3
 800ed12:	3724      	adds	r7, #36	; 0x24
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bd90      	pop	{r4, r7, pc}
 800ed18:	080153e4 	.word	0x080153e4
 800ed1c:	08015778 	.word	0x08015778
 800ed20:	08015438 	.word	0x08015438
 800ed24:	0801579c 	.word	0x0801579c
 800ed28:	080157c0 	.word	0x080157c0
 800ed2c:	080157d0 	.word	0x080157d0
 800ed30:	080157e0 	.word	0x080157e0

0800ed34 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800ed34:	b590      	push	{r4, r7, lr}
 800ed36:	b085      	sub	sp, #20
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d106      	bne.n	800ed50 <tcp_send_fin+0x1c>
 800ed42:	4b21      	ldr	r3, [pc, #132]	; (800edc8 <tcp_send_fin+0x94>)
 800ed44:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800ed48:	4920      	ldr	r1, [pc, #128]	; (800edcc <tcp_send_fin+0x98>)
 800ed4a:	4821      	ldr	r0, [pc, #132]	; (800edd0 <tcp_send_fin+0x9c>)
 800ed4c:	f003 ff6a 	bl	8012c24 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d02e      	beq.n	800edb6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed5c:	60fb      	str	r3, [r7, #12]
 800ed5e:	e002      	b.n	800ed66 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d1f8      	bne.n	800ed60 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	68db      	ldr	r3, [r3, #12]
 800ed72:	899b      	ldrh	r3, [r3, #12]
 800ed74:	b29b      	uxth	r3, r3
 800ed76:	4618      	mov	r0, r3
 800ed78:	f7f9 f98c 	bl	8008094 <lwip_htons>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	b2db      	uxtb	r3, r3
 800ed80:	f003 0307 	and.w	r3, r3, #7
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d116      	bne.n	800edb6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	68db      	ldr	r3, [r3, #12]
 800ed8c:	899b      	ldrh	r3, [r3, #12]
 800ed8e:	b29c      	uxth	r4, r3
 800ed90:	2001      	movs	r0, #1
 800ed92:	f7f9 f97f 	bl	8008094 <lwip_htons>
 800ed96:	4603      	mov	r3, r0
 800ed98:	461a      	mov	r2, r3
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	68db      	ldr	r3, [r3, #12]
 800ed9e:	4322      	orrs	r2, r4
 800eda0:	b292      	uxth	r2, r2
 800eda2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	8b5b      	ldrh	r3, [r3, #26]
 800eda8:	f043 0320 	orr.w	r3, r3, #32
 800edac:	b29a      	uxth	r2, r3
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800edb2:	2300      	movs	r3, #0
 800edb4:	e004      	b.n	800edc0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800edb6:	2101      	movs	r1, #1
 800edb8:	6878      	ldr	r0, [r7, #4]
 800edba:	f000 f80b 	bl	800edd4 <tcp_enqueue_flags>
 800edbe:	4603      	mov	r3, r0
}
 800edc0:	4618      	mov	r0, r3
 800edc2:	3714      	adds	r7, #20
 800edc4:	46bd      	mov	sp, r7
 800edc6:	bd90      	pop	{r4, r7, pc}
 800edc8:	080153e4 	.word	0x080153e4
 800edcc:	080157ec 	.word	0x080157ec
 800edd0:	08015438 	.word	0x08015438

0800edd4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b08a      	sub	sp, #40	; 0x28
 800edd8:	af02      	add	r7, sp, #8
 800edda:	6078      	str	r0, [r7, #4]
 800eddc:	460b      	mov	r3, r1
 800edde:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ede0:	2300      	movs	r3, #0
 800ede2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800ede4:	2300      	movs	r3, #0
 800ede6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ede8:	78fb      	ldrb	r3, [r7, #3]
 800edea:	f003 0303 	and.w	r3, r3, #3
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d106      	bne.n	800ee00 <tcp_enqueue_flags+0x2c>
 800edf2:	4b67      	ldr	r3, [pc, #412]	; (800ef90 <tcp_enqueue_flags+0x1bc>)
 800edf4:	f240 4211 	movw	r2, #1041	; 0x411
 800edf8:	4966      	ldr	r1, [pc, #408]	; (800ef94 <tcp_enqueue_flags+0x1c0>)
 800edfa:	4867      	ldr	r0, [pc, #412]	; (800ef98 <tcp_enqueue_flags+0x1c4>)
 800edfc:	f003 ff12 	bl	8012c24 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d106      	bne.n	800ee14 <tcp_enqueue_flags+0x40>
 800ee06:	4b62      	ldr	r3, [pc, #392]	; (800ef90 <tcp_enqueue_flags+0x1bc>)
 800ee08:	f240 4213 	movw	r2, #1043	; 0x413
 800ee0c:	4963      	ldr	r1, [pc, #396]	; (800ef9c <tcp_enqueue_flags+0x1c8>)
 800ee0e:	4862      	ldr	r0, [pc, #392]	; (800ef98 <tcp_enqueue_flags+0x1c4>)
 800ee10:	f003 ff08 	bl	8012c24 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800ee14:	78fb      	ldrb	r3, [r7, #3]
 800ee16:	f003 0302 	and.w	r3, r3, #2
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d001      	beq.n	800ee22 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800ee1e:	2301      	movs	r3, #1
 800ee20:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ee22:	7ffb      	ldrb	r3, [r7, #31]
 800ee24:	009b      	lsls	r3, r3, #2
 800ee26:	b2db      	uxtb	r3, r3
 800ee28:	f003 0304 	and.w	r3, r3, #4
 800ee2c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ee2e:	7dfb      	ldrb	r3, [r7, #23]
 800ee30:	b29b      	uxth	r3, r3
 800ee32:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ee36:	4619      	mov	r1, r3
 800ee38:	2036      	movs	r0, #54	; 0x36
 800ee3a:	f7fa fa5d 	bl	80092f8 <pbuf_alloc>
 800ee3e:	6138      	str	r0, [r7, #16]
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d109      	bne.n	800ee5a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	8b5b      	ldrh	r3, [r3, #26]
 800ee4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee4e:	b29a      	uxth	r2, r3
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ee54:	f04f 33ff 	mov.w	r3, #4294967295
 800ee58:	e095      	b.n	800ef86 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ee5a:	693b      	ldr	r3, [r7, #16]
 800ee5c:	895a      	ldrh	r2, [r3, #10]
 800ee5e:	7dfb      	ldrb	r3, [r7, #23]
 800ee60:	b29b      	uxth	r3, r3
 800ee62:	429a      	cmp	r2, r3
 800ee64:	d206      	bcs.n	800ee74 <tcp_enqueue_flags+0xa0>
 800ee66:	4b4a      	ldr	r3, [pc, #296]	; (800ef90 <tcp_enqueue_flags+0x1bc>)
 800ee68:	f240 4239 	movw	r2, #1081	; 0x439
 800ee6c:	494c      	ldr	r1, [pc, #304]	; (800efa0 <tcp_enqueue_flags+0x1cc>)
 800ee6e:	484a      	ldr	r0, [pc, #296]	; (800ef98 <tcp_enqueue_flags+0x1c4>)
 800ee70:	f003 fed8 	bl	8012c24 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800ee78:	78fa      	ldrb	r2, [r7, #3]
 800ee7a:	7ffb      	ldrb	r3, [r7, #31]
 800ee7c:	9300      	str	r3, [sp, #0]
 800ee7e:	460b      	mov	r3, r1
 800ee80:	6939      	ldr	r1, [r7, #16]
 800ee82:	6878      	ldr	r0, [r7, #4]
 800ee84:	f7ff f918 	bl	800e0b8 <tcp_create_segment>
 800ee88:	60f8      	str	r0, [r7, #12]
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d109      	bne.n	800eea4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	8b5b      	ldrh	r3, [r3, #26]
 800ee94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee98:	b29a      	uxth	r2, r3
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ee9e:	f04f 33ff 	mov.w	r3, #4294967295
 800eea2:	e070      	b.n	800ef86 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	68db      	ldr	r3, [r3, #12]
 800eea8:	f003 0303 	and.w	r3, r3, #3
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d006      	beq.n	800eebe <tcp_enqueue_flags+0xea>
 800eeb0:	4b37      	ldr	r3, [pc, #220]	; (800ef90 <tcp_enqueue_flags+0x1bc>)
 800eeb2:	f240 4242 	movw	r2, #1090	; 0x442
 800eeb6:	493b      	ldr	r1, [pc, #236]	; (800efa4 <tcp_enqueue_flags+0x1d0>)
 800eeb8:	4837      	ldr	r0, [pc, #220]	; (800ef98 <tcp_enqueue_flags+0x1c4>)
 800eeba:	f003 feb3 	bl	8012c24 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	891b      	ldrh	r3, [r3, #8]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d006      	beq.n	800eed4 <tcp_enqueue_flags+0x100>
 800eec6:	4b32      	ldr	r3, [pc, #200]	; (800ef90 <tcp_enqueue_flags+0x1bc>)
 800eec8:	f240 4243 	movw	r2, #1091	; 0x443
 800eecc:	4936      	ldr	r1, [pc, #216]	; (800efa8 <tcp_enqueue_flags+0x1d4>)
 800eece:	4832      	ldr	r0, [pc, #200]	; (800ef98 <tcp_enqueue_flags+0x1c4>)
 800eed0:	f003 fea8 	bl	8012c24 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d103      	bne.n	800eee4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	68fa      	ldr	r2, [r7, #12]
 800eee0:	66da      	str	r2, [r3, #108]	; 0x6c
 800eee2:	e00d      	b.n	800ef00 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eee8:	61bb      	str	r3, [r7, #24]
 800eeea:	e002      	b.n	800eef2 <tcp_enqueue_flags+0x11e>
 800eeec:	69bb      	ldr	r3, [r7, #24]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	61bb      	str	r3, [r7, #24]
 800eef2:	69bb      	ldr	r3, [r7, #24]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d1f8      	bne.n	800eeec <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800eefa:	69bb      	ldr	r3, [r7, #24]
 800eefc:	68fa      	ldr	r2, [r7, #12]
 800eefe:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	2200      	movs	r2, #0
 800ef04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ef08:	78fb      	ldrb	r3, [r7, #3]
 800ef0a:	f003 0302 	and.w	r3, r3, #2
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d104      	bne.n	800ef1c <tcp_enqueue_flags+0x148>
 800ef12:	78fb      	ldrb	r3, [r7, #3]
 800ef14:	f003 0301 	and.w	r3, r3, #1
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d004      	beq.n	800ef26 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ef20:	1c5a      	adds	r2, r3, #1
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800ef26:	78fb      	ldrb	r3, [r7, #3]
 800ef28:	f003 0301 	and.w	r3, r3, #1
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d006      	beq.n	800ef3e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	8b5b      	ldrh	r3, [r3, #26]
 800ef34:	f043 0320 	orr.w	r3, r3, #32
 800ef38:	b29a      	uxth	r2, r3
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	685b      	ldr	r3, [r3, #4]
 800ef42:	4618      	mov	r0, r3
 800ef44:	f7fa fd44 	bl	80099d0 <pbuf_clen>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	461a      	mov	r2, r3
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ef52:	4413      	add	r3, r2
 800ef54:	b29a      	uxth	r2, r3
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d00e      	beq.n	800ef84 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d10a      	bne.n	800ef84 <tcp_enqueue_flags+0x1b0>
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d106      	bne.n	800ef84 <tcp_enqueue_flags+0x1b0>
 800ef76:	4b06      	ldr	r3, [pc, #24]	; (800ef90 <tcp_enqueue_flags+0x1bc>)
 800ef78:	f240 4265 	movw	r2, #1125	; 0x465
 800ef7c:	490b      	ldr	r1, [pc, #44]	; (800efac <tcp_enqueue_flags+0x1d8>)
 800ef7e:	4806      	ldr	r0, [pc, #24]	; (800ef98 <tcp_enqueue_flags+0x1c4>)
 800ef80:	f003 fe50 	bl	8012c24 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ef84:	2300      	movs	r3, #0
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	3720      	adds	r7, #32
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}
 800ef8e:	bf00      	nop
 800ef90:	080153e4 	.word	0x080153e4
 800ef94:	08015808 	.word	0x08015808
 800ef98:	08015438 	.word	0x08015438
 800ef9c:	08015860 	.word	0x08015860
 800efa0:	08015880 	.word	0x08015880
 800efa4:	080158bc 	.word	0x080158bc
 800efa8:	080158d4 	.word	0x080158d4
 800efac:	08015900 	.word	0x08015900

0800efb0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800efb0:	b5b0      	push	{r4, r5, r7, lr}
 800efb2:	b08a      	sub	sp, #40	; 0x28
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d106      	bne.n	800efcc <tcp_output+0x1c>
 800efbe:	4b9e      	ldr	r3, [pc, #632]	; (800f238 <tcp_output+0x288>)
 800efc0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800efc4:	499d      	ldr	r1, [pc, #628]	; (800f23c <tcp_output+0x28c>)
 800efc6:	489e      	ldr	r0, [pc, #632]	; (800f240 <tcp_output+0x290>)
 800efc8:	f003 fe2c 	bl	8012c24 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	7d1b      	ldrb	r3, [r3, #20]
 800efd0:	2b01      	cmp	r3, #1
 800efd2:	d106      	bne.n	800efe2 <tcp_output+0x32>
 800efd4:	4b98      	ldr	r3, [pc, #608]	; (800f238 <tcp_output+0x288>)
 800efd6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800efda:	499a      	ldr	r1, [pc, #616]	; (800f244 <tcp_output+0x294>)
 800efdc:	4898      	ldr	r0, [pc, #608]	; (800f240 <tcp_output+0x290>)
 800efde:	f003 fe21 	bl	8012c24 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800efe2:	4b99      	ldr	r3, [pc, #612]	; (800f248 <tcp_output+0x298>)
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	687a      	ldr	r2, [r7, #4]
 800efe8:	429a      	cmp	r2, r3
 800efea:	d101      	bne.n	800eff0 <tcp_output+0x40>
    return ERR_OK;
 800efec:	2300      	movs	r3, #0
 800efee:	e1ce      	b.n	800f38e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800effc:	4293      	cmp	r3, r2
 800effe:	bf28      	it	cs
 800f000:	4613      	movcs	r3, r2
 800f002:	b29b      	uxth	r3, r3
 800f004:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f00a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800f00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d10b      	bne.n	800f02a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	8b5b      	ldrh	r3, [r3, #26]
 800f016:	f003 0302 	and.w	r3, r3, #2
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	f000 81aa 	beq.w	800f374 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800f020:	6878      	ldr	r0, [r7, #4]
 800f022:	f000 fdcb 	bl	800fbbc <tcp_send_empty_ack>
 800f026:	4603      	mov	r3, r0
 800f028:	e1b1      	b.n	800f38e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800f02a:	6879      	ldr	r1, [r7, #4]
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	3304      	adds	r3, #4
 800f030:	461a      	mov	r2, r3
 800f032:	6878      	ldr	r0, [r7, #4]
 800f034:	f7ff f824 	bl	800e080 <tcp_route>
 800f038:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800f03a:	697b      	ldr	r3, [r7, #20]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d102      	bne.n	800f046 <tcp_output+0x96>
    return ERR_RTE;
 800f040:	f06f 0303 	mvn.w	r3, #3
 800f044:	e1a3      	b.n	800f38e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d003      	beq.n	800f054 <tcp_output+0xa4>
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d111      	bne.n	800f078 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800f054:	697b      	ldr	r3, [r7, #20]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d002      	beq.n	800f060 <tcp_output+0xb0>
 800f05a:	697b      	ldr	r3, [r7, #20]
 800f05c:	3304      	adds	r3, #4
 800f05e:	e000      	b.n	800f062 <tcp_output+0xb2>
 800f060:	2300      	movs	r3, #0
 800f062:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800f064:	693b      	ldr	r3, [r7, #16]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d102      	bne.n	800f070 <tcp_output+0xc0>
      return ERR_RTE;
 800f06a:	f06f 0303 	mvn.w	r3, #3
 800f06e:	e18e      	b.n	800f38e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f070:	693b      	ldr	r3, [r7, #16]
 800f072:	681a      	ldr	r2, [r3, #0]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800f078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f07a:	68db      	ldr	r3, [r3, #12]
 800f07c:	685b      	ldr	r3, [r3, #4]
 800f07e:	4618      	mov	r0, r3
 800f080:	f7f9 f81d 	bl	80080be <lwip_htonl>
 800f084:	4602      	mov	r2, r0
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f08a:	1ad3      	subs	r3, r2, r3
 800f08c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f08e:	8912      	ldrh	r2, [r2, #8]
 800f090:	4413      	add	r3, r2
 800f092:	69ba      	ldr	r2, [r7, #24]
 800f094:	429a      	cmp	r2, r3
 800f096:	d227      	bcs.n	800f0e8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f09e:	461a      	mov	r2, r3
 800f0a0:	69bb      	ldr	r3, [r7, #24]
 800f0a2:	4293      	cmp	r3, r2
 800f0a4:	d114      	bne.n	800f0d0 <tcp_output+0x120>
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d110      	bne.n	800f0d0 <tcp_output+0x120>
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d10b      	bne.n	800f0d0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2201      	movs	r2, #1
 800f0c4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	8b5b      	ldrh	r3, [r3, #26]
 800f0d4:	f003 0302 	and.w	r3, r3, #2
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	f000 814d 	beq.w	800f378 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800f0de:	6878      	ldr	r0, [r7, #4]
 800f0e0:	f000 fd6c 	bl	800fbbc <tcp_send_empty_ack>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	e152      	b.n	800f38e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0f4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800f0f6:	6a3b      	ldr	r3, [r7, #32]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	f000 811c 	beq.w	800f336 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800f0fe:	e002      	b.n	800f106 <tcp_output+0x156>
 800f100:	6a3b      	ldr	r3, [r7, #32]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	623b      	str	r3, [r7, #32]
 800f106:	6a3b      	ldr	r3, [r7, #32]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d1f8      	bne.n	800f100 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800f10e:	e112      	b.n	800f336 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800f110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f112:	68db      	ldr	r3, [r3, #12]
 800f114:	899b      	ldrh	r3, [r3, #12]
 800f116:	b29b      	uxth	r3, r3
 800f118:	4618      	mov	r0, r3
 800f11a:	f7f8 ffbb 	bl	8008094 <lwip_htons>
 800f11e:	4603      	mov	r3, r0
 800f120:	b2db      	uxtb	r3, r3
 800f122:	f003 0304 	and.w	r3, r3, #4
 800f126:	2b00      	cmp	r3, #0
 800f128:	d006      	beq.n	800f138 <tcp_output+0x188>
 800f12a:	4b43      	ldr	r3, [pc, #268]	; (800f238 <tcp_output+0x288>)
 800f12c:	f240 5236 	movw	r2, #1334	; 0x536
 800f130:	4946      	ldr	r1, [pc, #280]	; (800f24c <tcp_output+0x29c>)
 800f132:	4843      	ldr	r0, [pc, #268]	; (800f240 <tcp_output+0x290>)
 800f134:	f003 fd76 	bl	8012c24 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d01f      	beq.n	800f180 <tcp_output+0x1d0>
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	8b5b      	ldrh	r3, [r3, #26]
 800f144:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d119      	bne.n	800f180 <tcp_output+0x1d0>
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f150:	2b00      	cmp	r3, #0
 800f152:	d00b      	beq.n	800f16c <tcp_output+0x1bc>
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d110      	bne.n	800f180 <tcp_output+0x1d0>
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f162:	891a      	ldrh	r2, [r3, #8]
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f168:	429a      	cmp	r2, r3
 800f16a:	d209      	bcs.n	800f180 <tcp_output+0x1d0>
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f172:	2b00      	cmp	r3, #0
 800f174:	d004      	beq.n	800f180 <tcp_output+0x1d0>
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f17c:	2b08      	cmp	r3, #8
 800f17e:	d901      	bls.n	800f184 <tcp_output+0x1d4>
 800f180:	2301      	movs	r3, #1
 800f182:	e000      	b.n	800f186 <tcp_output+0x1d6>
 800f184:	2300      	movs	r3, #0
 800f186:	2b00      	cmp	r3, #0
 800f188:	d106      	bne.n	800f198 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	8b5b      	ldrh	r3, [r3, #26]
 800f18e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f192:	2b00      	cmp	r3, #0
 800f194:	f000 80e4 	beq.w	800f360 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	7d1b      	ldrb	r3, [r3, #20]
 800f19c:	2b02      	cmp	r3, #2
 800f19e:	d00d      	beq.n	800f1bc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800f1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1a2:	68db      	ldr	r3, [r3, #12]
 800f1a4:	899b      	ldrh	r3, [r3, #12]
 800f1a6:	b29c      	uxth	r4, r3
 800f1a8:	2010      	movs	r0, #16
 800f1aa:	f7f8 ff73 	bl	8008094 <lwip_htons>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	461a      	mov	r2, r3
 800f1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1b4:	68db      	ldr	r3, [r3, #12]
 800f1b6:	4322      	orrs	r2, r4
 800f1b8:	b292      	uxth	r2, r2
 800f1ba:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800f1bc:	697a      	ldr	r2, [r7, #20]
 800f1be:	6879      	ldr	r1, [r7, #4]
 800f1c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f1c2:	f000 f909 	bl	800f3d8 <tcp_output_segment>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f1ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d009      	beq.n	800f1e6 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	8b5b      	ldrh	r3, [r3, #26]
 800f1d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1da:	b29a      	uxth	r2, r3
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	835a      	strh	r2, [r3, #26]
      return err;
 800f1e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f1e4:	e0d3      	b.n	800f38e <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800f1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1e8:	681a      	ldr	r2, [r3, #0]
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	7d1b      	ldrb	r3, [r3, #20]
 800f1f2:	2b02      	cmp	r3, #2
 800f1f4:	d006      	beq.n	800f204 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	8b5b      	ldrh	r3, [r3, #26]
 800f1fa:	f023 0303 	bic.w	r3, r3, #3
 800f1fe:	b29a      	uxth	r2, r3
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f206:	68db      	ldr	r3, [r3, #12]
 800f208:	685b      	ldr	r3, [r3, #4]
 800f20a:	4618      	mov	r0, r3
 800f20c:	f7f8 ff57 	bl	80080be <lwip_htonl>
 800f210:	4604      	mov	r4, r0
 800f212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f214:	891b      	ldrh	r3, [r3, #8]
 800f216:	461d      	mov	r5, r3
 800f218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f21a:	68db      	ldr	r3, [r3, #12]
 800f21c:	899b      	ldrh	r3, [r3, #12]
 800f21e:	b29b      	uxth	r3, r3
 800f220:	4618      	mov	r0, r3
 800f222:	f7f8 ff37 	bl	8008094 <lwip_htons>
 800f226:	4603      	mov	r3, r0
 800f228:	b2db      	uxtb	r3, r3
 800f22a:	f003 0303 	and.w	r3, r3, #3
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d00e      	beq.n	800f250 <tcp_output+0x2a0>
 800f232:	2301      	movs	r3, #1
 800f234:	e00d      	b.n	800f252 <tcp_output+0x2a2>
 800f236:	bf00      	nop
 800f238:	080153e4 	.word	0x080153e4
 800f23c:	08015928 	.word	0x08015928
 800f240:	08015438 	.word	0x08015438
 800f244:	08015940 	.word	0x08015940
 800f248:	24003480 	.word	0x24003480
 800f24c:	08015968 	.word	0x08015968
 800f250:	2300      	movs	r3, #0
 800f252:	442b      	add	r3, r5
 800f254:	4423      	add	r3, r4
 800f256:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f25c:	68bb      	ldr	r3, [r7, #8]
 800f25e:	1ad3      	subs	r3, r2, r3
 800f260:	2b00      	cmp	r3, #0
 800f262:	da02      	bge.n	800f26a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	68ba      	ldr	r2, [r7, #8]
 800f268:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800f26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f26c:	891b      	ldrh	r3, [r3, #8]
 800f26e:	461c      	mov	r4, r3
 800f270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f272:	68db      	ldr	r3, [r3, #12]
 800f274:	899b      	ldrh	r3, [r3, #12]
 800f276:	b29b      	uxth	r3, r3
 800f278:	4618      	mov	r0, r3
 800f27a:	f7f8 ff0b 	bl	8008094 <lwip_htons>
 800f27e:	4603      	mov	r3, r0
 800f280:	b2db      	uxtb	r3, r3
 800f282:	f003 0303 	and.w	r3, r3, #3
 800f286:	2b00      	cmp	r3, #0
 800f288:	d001      	beq.n	800f28e <tcp_output+0x2de>
 800f28a:	2301      	movs	r3, #1
 800f28c:	e000      	b.n	800f290 <tcp_output+0x2e0>
 800f28e:	2300      	movs	r3, #0
 800f290:	4423      	add	r3, r4
 800f292:	2b00      	cmp	r3, #0
 800f294:	d049      	beq.n	800f32a <tcp_output+0x37a>
      seg->next = NULL;
 800f296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f298:	2200      	movs	r2, #0
 800f29a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d105      	bne.n	800f2b0 <tcp_output+0x300>
        pcb->unacked = seg;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2a8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800f2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ac:	623b      	str	r3, [r7, #32]
 800f2ae:	e03f      	b.n	800f330 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800f2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2b2:	68db      	ldr	r3, [r3, #12]
 800f2b4:	685b      	ldr	r3, [r3, #4]
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	f7f8 ff01 	bl	80080be <lwip_htonl>
 800f2bc:	4604      	mov	r4, r0
 800f2be:	6a3b      	ldr	r3, [r7, #32]
 800f2c0:	68db      	ldr	r3, [r3, #12]
 800f2c2:	685b      	ldr	r3, [r3, #4]
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	f7f8 fefa 	bl	80080be <lwip_htonl>
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	1ae3      	subs	r3, r4, r3
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	da24      	bge.n	800f31c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	3370      	adds	r3, #112	; 0x70
 800f2d6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f2d8:	e002      	b.n	800f2e0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800f2da:	69fb      	ldr	r3, [r7, #28]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f2e0:	69fb      	ldr	r3, [r7, #28]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d011      	beq.n	800f30c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f2e8:	69fb      	ldr	r3, [r7, #28]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	68db      	ldr	r3, [r3, #12]
 800f2ee:	685b      	ldr	r3, [r3, #4]
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f7f8 fee4 	bl	80080be <lwip_htonl>
 800f2f6:	4604      	mov	r4, r0
 800f2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2fa:	68db      	ldr	r3, [r3, #12]
 800f2fc:	685b      	ldr	r3, [r3, #4]
 800f2fe:	4618      	mov	r0, r3
 800f300:	f7f8 fedd 	bl	80080be <lwip_htonl>
 800f304:	4603      	mov	r3, r0
 800f306:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800f308:	2b00      	cmp	r3, #0
 800f30a:	dbe6      	blt.n	800f2da <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800f30c:	69fb      	ldr	r3, [r7, #28]
 800f30e:	681a      	ldr	r2, [r3, #0]
 800f310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f312:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800f314:	69fb      	ldr	r3, [r7, #28]
 800f316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f318:	601a      	str	r2, [r3, #0]
 800f31a:	e009      	b.n	800f330 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800f31c:	6a3b      	ldr	r3, [r7, #32]
 800f31e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f320:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800f322:	6a3b      	ldr	r3, [r7, #32]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	623b      	str	r3, [r7, #32]
 800f328:	e002      	b.n	800f330 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800f32a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f32c:	f7fb ff05 	bl	800b13a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f334:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800f336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d012      	beq.n	800f362 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800f33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f33e:	68db      	ldr	r3, [r3, #12]
 800f340:	685b      	ldr	r3, [r3, #4]
 800f342:	4618      	mov	r0, r3
 800f344:	f7f8 febb 	bl	80080be <lwip_htonl>
 800f348:	4602      	mov	r2, r0
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f34e:	1ad3      	subs	r3, r2, r3
 800f350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f352:	8912      	ldrh	r2, [r2, #8]
 800f354:	4413      	add	r3, r2
  while (seg != NULL &&
 800f356:	69ba      	ldr	r2, [r7, #24]
 800f358:	429a      	cmp	r2, r3
 800f35a:	f4bf aed9 	bcs.w	800f110 <tcp_output+0x160>
 800f35e:	e000      	b.n	800f362 <tcp_output+0x3b2>
      break;
 800f360:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f366:	2b00      	cmp	r3, #0
 800f368:	d108      	bne.n	800f37c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	2200      	movs	r2, #0
 800f36e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800f372:	e004      	b.n	800f37e <tcp_output+0x3ce>
    goto output_done;
 800f374:	bf00      	nop
 800f376:	e002      	b.n	800f37e <tcp_output+0x3ce>
    goto output_done;
 800f378:	bf00      	nop
 800f37a:	e000      	b.n	800f37e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800f37c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	8b5b      	ldrh	r3, [r3, #26]
 800f382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f386:	b29a      	uxth	r2, r3
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800f38c:	2300      	movs	r3, #0
}
 800f38e:	4618      	mov	r0, r3
 800f390:	3728      	adds	r7, #40	; 0x28
 800f392:	46bd      	mov	sp, r7
 800f394:	bdb0      	pop	{r4, r5, r7, pc}
 800f396:	bf00      	nop

0800f398 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b082      	sub	sp, #8
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d106      	bne.n	800f3b4 <tcp_output_segment_busy+0x1c>
 800f3a6:	4b09      	ldr	r3, [pc, #36]	; (800f3cc <tcp_output_segment_busy+0x34>)
 800f3a8:	f240 529a 	movw	r2, #1434	; 0x59a
 800f3ac:	4908      	ldr	r1, [pc, #32]	; (800f3d0 <tcp_output_segment_busy+0x38>)
 800f3ae:	4809      	ldr	r0, [pc, #36]	; (800f3d4 <tcp_output_segment_busy+0x3c>)
 800f3b0:	f003 fc38 	bl	8012c24 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	685b      	ldr	r3, [r3, #4]
 800f3b8:	7b9b      	ldrb	r3, [r3, #14]
 800f3ba:	2b01      	cmp	r3, #1
 800f3bc:	d001      	beq.n	800f3c2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800f3be:	2301      	movs	r3, #1
 800f3c0:	e000      	b.n	800f3c4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800f3c2:	2300      	movs	r3, #0
}
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	3708      	adds	r7, #8
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	bd80      	pop	{r7, pc}
 800f3cc:	080153e4 	.word	0x080153e4
 800f3d0:	08015980 	.word	0x08015980
 800f3d4:	08015438 	.word	0x08015438

0800f3d8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800f3d8:	b5b0      	push	{r4, r5, r7, lr}
 800f3da:	b08c      	sub	sp, #48	; 0x30
 800f3dc:	af04      	add	r7, sp, #16
 800f3de:	60f8      	str	r0, [r7, #12]
 800f3e0:	60b9      	str	r1, [r7, #8]
 800f3e2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d106      	bne.n	800f3f8 <tcp_output_segment+0x20>
 800f3ea:	4b63      	ldr	r3, [pc, #396]	; (800f578 <tcp_output_segment+0x1a0>)
 800f3ec:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800f3f0:	4962      	ldr	r1, [pc, #392]	; (800f57c <tcp_output_segment+0x1a4>)
 800f3f2:	4863      	ldr	r0, [pc, #396]	; (800f580 <tcp_output_segment+0x1a8>)
 800f3f4:	f003 fc16 	bl	8012c24 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d106      	bne.n	800f40c <tcp_output_segment+0x34>
 800f3fe:	4b5e      	ldr	r3, [pc, #376]	; (800f578 <tcp_output_segment+0x1a0>)
 800f400:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800f404:	495f      	ldr	r1, [pc, #380]	; (800f584 <tcp_output_segment+0x1ac>)
 800f406:	485e      	ldr	r0, [pc, #376]	; (800f580 <tcp_output_segment+0x1a8>)
 800f408:	f003 fc0c 	bl	8012c24 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d106      	bne.n	800f420 <tcp_output_segment+0x48>
 800f412:	4b59      	ldr	r3, [pc, #356]	; (800f578 <tcp_output_segment+0x1a0>)
 800f414:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800f418:	495b      	ldr	r1, [pc, #364]	; (800f588 <tcp_output_segment+0x1b0>)
 800f41a:	4859      	ldr	r0, [pc, #356]	; (800f580 <tcp_output_segment+0x1a8>)
 800f41c:	f003 fc02 	bl	8012c24 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800f420:	68f8      	ldr	r0, [r7, #12]
 800f422:	f7ff ffb9 	bl	800f398 <tcp_output_segment_busy>
 800f426:	4603      	mov	r3, r0
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d001      	beq.n	800f430 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800f42c:	2300      	movs	r3, #0
 800f42e:	e09f      	b.n	800f570 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800f430:	68bb      	ldr	r3, [r7, #8]
 800f432:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	68dc      	ldr	r4, [r3, #12]
 800f438:	4610      	mov	r0, r2
 800f43a:	f7f8 fe40 	bl	80080be <lwip_htonl>
 800f43e:	4603      	mov	r3, r0
 800f440:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800f442:	68bb      	ldr	r3, [r7, #8]
 800f444:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	68dc      	ldr	r4, [r3, #12]
 800f44a:	4610      	mov	r0, r2
 800f44c:	f7f8 fe22 	bl	8008094 <lwip_htons>
 800f450:	4603      	mov	r3, r0
 800f452:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f458:	68ba      	ldr	r2, [r7, #8]
 800f45a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f45c:	441a      	add	r2, r3
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	68db      	ldr	r3, [r3, #12]
 800f466:	3314      	adds	r3, #20
 800f468:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	7a9b      	ldrb	r3, [r3, #10]
 800f46e:	f003 0301 	and.w	r3, r3, #1
 800f472:	2b00      	cmp	r3, #0
 800f474:	d015      	beq.n	800f4a2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800f476:	68bb      	ldr	r3, [r7, #8]
 800f478:	3304      	adds	r3, #4
 800f47a:	461a      	mov	r2, r3
 800f47c:	6879      	ldr	r1, [r7, #4]
 800f47e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800f482:	f7fc fa37 	bl	800b8f4 <tcp_eff_send_mss_netif>
 800f486:	4603      	mov	r3, r0
 800f488:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800f48a:	8b7b      	ldrh	r3, [r7, #26]
 800f48c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800f490:	4618      	mov	r0, r3
 800f492:	f7f8 fe14 	bl	80080be <lwip_htonl>
 800f496:	4602      	mov	r2, r0
 800f498:	69fb      	ldr	r3, [r7, #28]
 800f49a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800f49c:	69fb      	ldr	r3, [r7, #28]
 800f49e:	3304      	adds	r3, #4
 800f4a0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	da02      	bge.n	800f4b2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800f4b2:	68bb      	ldr	r3, [r7, #8]
 800f4b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d10c      	bne.n	800f4d4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800f4ba:	4b34      	ldr	r3, [pc, #208]	; (800f58c <tcp_output_segment+0x1b4>)
 800f4bc:	681a      	ldr	r2, [r3, #0]
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	68db      	ldr	r3, [r3, #12]
 800f4c6:	685b      	ldr	r3, [r3, #4]
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f7f8 fdf8 	bl	80080be <lwip_htonl>
 800f4ce:	4602      	mov	r2, r0
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	68da      	ldr	r2, [r3, #12]
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	685b      	ldr	r3, [r3, #4]
 800f4dc:	685b      	ldr	r3, [r3, #4]
 800f4de:	1ad3      	subs	r3, r2, r3
 800f4e0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	685b      	ldr	r3, [r3, #4]
 800f4e6:	8959      	ldrh	r1, [r3, #10]
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	685b      	ldr	r3, [r3, #4]
 800f4ec:	8b3a      	ldrh	r2, [r7, #24]
 800f4ee:	1a8a      	subs	r2, r1, r2
 800f4f0:	b292      	uxth	r2, r2
 800f4f2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	685b      	ldr	r3, [r3, #4]
 800f4f8:	8919      	ldrh	r1, [r3, #8]
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	685b      	ldr	r3, [r3, #4]
 800f4fe:	8b3a      	ldrh	r2, [r7, #24]
 800f500:	1a8a      	subs	r2, r1, r2
 800f502:	b292      	uxth	r2, r2
 800f504:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	685b      	ldr	r3, [r3, #4]
 800f50a:	68fa      	ldr	r2, [r7, #12]
 800f50c:	68d2      	ldr	r2, [r2, #12]
 800f50e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	68db      	ldr	r3, [r3, #12]
 800f514:	2200      	movs	r2, #0
 800f516:	741a      	strb	r2, [r3, #16]
 800f518:	2200      	movs	r2, #0
 800f51a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	68db      	ldr	r3, [r3, #12]
 800f520:	f103 0214 	add.w	r2, r3, #20
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	7a9b      	ldrb	r3, [r3, #10]
 800f528:	009b      	lsls	r3, r3, #2
 800f52a:	f003 0304 	and.w	r3, r3, #4
 800f52e:	4413      	add	r3, r2
 800f530:	69fa      	ldr	r2, [r7, #28]
 800f532:	429a      	cmp	r2, r3
 800f534:	d006      	beq.n	800f544 <tcp_output_segment+0x16c>
 800f536:	4b10      	ldr	r3, [pc, #64]	; (800f578 <tcp_output_segment+0x1a0>)
 800f538:	f240 621c 	movw	r2, #1564	; 0x61c
 800f53c:	4914      	ldr	r1, [pc, #80]	; (800f590 <tcp_output_segment+0x1b8>)
 800f53e:	4810      	ldr	r0, [pc, #64]	; (800f580 <tcp_output_segment+0x1a8>)
 800f540:	f003 fb70 	bl	8012c24 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	6858      	ldr	r0, [r3, #4]
 800f548:	68b9      	ldr	r1, [r7, #8]
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	1d1c      	adds	r4, r3, #4
 800f54e:	68bb      	ldr	r3, [r7, #8]
 800f550:	7add      	ldrb	r5, [r3, #11]
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	7a9b      	ldrb	r3, [r3, #10]
 800f556:	687a      	ldr	r2, [r7, #4]
 800f558:	9202      	str	r2, [sp, #8]
 800f55a:	2206      	movs	r2, #6
 800f55c:	9201      	str	r2, [sp, #4]
 800f55e:	9300      	str	r3, [sp, #0]
 800f560:	462b      	mov	r3, r5
 800f562:	4622      	mov	r2, r4
 800f564:	f002 fa5c 	bl	8011a20 <ip4_output_if>
 800f568:	4603      	mov	r3, r0
 800f56a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800f56c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f570:	4618      	mov	r0, r3
 800f572:	3720      	adds	r7, #32
 800f574:	46bd      	mov	sp, r7
 800f576:	bdb0      	pop	{r4, r5, r7, pc}
 800f578:	080153e4 	.word	0x080153e4
 800f57c:	080159a8 	.word	0x080159a8
 800f580:	08015438 	.word	0x08015438
 800f584:	080159c8 	.word	0x080159c8
 800f588:	080159e8 	.word	0x080159e8
 800f58c:	24003470 	.word	0x24003470
 800f590:	08015a0c 	.word	0x08015a0c

0800f594 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800f594:	b5b0      	push	{r4, r5, r7, lr}
 800f596:	b084      	sub	sp, #16
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d106      	bne.n	800f5b0 <tcp_rexmit_rto_prepare+0x1c>
 800f5a2:	4b31      	ldr	r3, [pc, #196]	; (800f668 <tcp_rexmit_rto_prepare+0xd4>)
 800f5a4:	f240 6263 	movw	r2, #1635	; 0x663
 800f5a8:	4930      	ldr	r1, [pc, #192]	; (800f66c <tcp_rexmit_rto_prepare+0xd8>)
 800f5aa:	4831      	ldr	r0, [pc, #196]	; (800f670 <tcp_rexmit_rto_prepare+0xdc>)
 800f5ac:	f003 fb3a 	bl	8012c24 <iprintf>

  if (pcb->unacked == NULL) {
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d102      	bne.n	800f5be <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800f5b8:	f06f 0305 	mvn.w	r3, #5
 800f5bc:	e050      	b.n	800f660 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5c2:	60fb      	str	r3, [r7, #12]
 800f5c4:	e00b      	b.n	800f5de <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800f5c6:	68f8      	ldr	r0, [r7, #12]
 800f5c8:	f7ff fee6 	bl	800f398 <tcp_output_segment_busy>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d002      	beq.n	800f5d8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800f5d2:	f06f 0305 	mvn.w	r3, #5
 800f5d6:	e043      	b.n	800f660 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	60fb      	str	r3, [r7, #12]
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d1ef      	bne.n	800f5c6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800f5e6:	68f8      	ldr	r0, [r7, #12]
 800f5e8:	f7ff fed6 	bl	800f398 <tcp_output_segment_busy>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d002      	beq.n	800f5f8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800f5f2:	f06f 0305 	mvn.w	r3, #5
 800f5f6:	e033      	b.n	800f660 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	2200      	movs	r2, #0
 800f60c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	8b5b      	ldrh	r3, [r3, #26]
 800f612:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f616:	b29a      	uxth	r2, r3
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	68db      	ldr	r3, [r3, #12]
 800f620:	685b      	ldr	r3, [r3, #4]
 800f622:	4618      	mov	r0, r3
 800f624:	f7f8 fd4b 	bl	80080be <lwip_htonl>
 800f628:	4604      	mov	r4, r0
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	891b      	ldrh	r3, [r3, #8]
 800f62e:	461d      	mov	r5, r3
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	68db      	ldr	r3, [r3, #12]
 800f634:	899b      	ldrh	r3, [r3, #12]
 800f636:	b29b      	uxth	r3, r3
 800f638:	4618      	mov	r0, r3
 800f63a:	f7f8 fd2b 	bl	8008094 <lwip_htons>
 800f63e:	4603      	mov	r3, r0
 800f640:	b2db      	uxtb	r3, r3
 800f642:	f003 0303 	and.w	r3, r3, #3
 800f646:	2b00      	cmp	r3, #0
 800f648:	d001      	beq.n	800f64e <tcp_rexmit_rto_prepare+0xba>
 800f64a:	2301      	movs	r3, #1
 800f64c:	e000      	b.n	800f650 <tcp_rexmit_rto_prepare+0xbc>
 800f64e:	2300      	movs	r3, #0
 800f650:	442b      	add	r3, r5
 800f652:	18e2      	adds	r2, r4, r3
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2200      	movs	r2, #0
 800f65c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800f65e:	2300      	movs	r3, #0
}
 800f660:	4618      	mov	r0, r3
 800f662:	3710      	adds	r7, #16
 800f664:	46bd      	mov	sp, r7
 800f666:	bdb0      	pop	{r4, r5, r7, pc}
 800f668:	080153e4 	.word	0x080153e4
 800f66c:	08015a20 	.word	0x08015a20
 800f670:	08015438 	.word	0x08015438

0800f674 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b082      	sub	sp, #8
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d106      	bne.n	800f690 <tcp_rexmit_rto_commit+0x1c>
 800f682:	4b0d      	ldr	r3, [pc, #52]	; (800f6b8 <tcp_rexmit_rto_commit+0x44>)
 800f684:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f688:	490c      	ldr	r1, [pc, #48]	; (800f6bc <tcp_rexmit_rto_commit+0x48>)
 800f68a:	480d      	ldr	r0, [pc, #52]	; (800f6c0 <tcp_rexmit_rto_commit+0x4c>)
 800f68c:	f003 faca 	bl	8012c24 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f696:	2bff      	cmp	r3, #255	; 0xff
 800f698:	d007      	beq.n	800f6aa <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f6a0:	3301      	adds	r3, #1
 800f6a2:	b2da      	uxtb	r2, r3
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	f7ff fc80 	bl	800efb0 <tcp_output>
}
 800f6b0:	bf00      	nop
 800f6b2:	3708      	adds	r7, #8
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	bd80      	pop	{r7, pc}
 800f6b8:	080153e4 	.word	0x080153e4
 800f6bc:	08015a44 	.word	0x08015a44
 800f6c0:	08015438 	.word	0x08015438

0800f6c4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b082      	sub	sp, #8
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d106      	bne.n	800f6e0 <tcp_rexmit_rto+0x1c>
 800f6d2:	4b0a      	ldr	r3, [pc, #40]	; (800f6fc <tcp_rexmit_rto+0x38>)
 800f6d4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800f6d8:	4909      	ldr	r1, [pc, #36]	; (800f700 <tcp_rexmit_rto+0x3c>)
 800f6da:	480a      	ldr	r0, [pc, #40]	; (800f704 <tcp_rexmit_rto+0x40>)
 800f6dc:	f003 faa2 	bl	8012c24 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800f6e0:	6878      	ldr	r0, [r7, #4]
 800f6e2:	f7ff ff57 	bl	800f594 <tcp_rexmit_rto_prepare>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d102      	bne.n	800f6f2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	f7ff ffc1 	bl	800f674 <tcp_rexmit_rto_commit>
  }
}
 800f6f2:	bf00      	nop
 800f6f4:	3708      	adds	r7, #8
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	bd80      	pop	{r7, pc}
 800f6fa:	bf00      	nop
 800f6fc:	080153e4 	.word	0x080153e4
 800f700:	08015a68 	.word	0x08015a68
 800f704:	08015438 	.word	0x08015438

0800f708 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800f708:	b590      	push	{r4, r7, lr}
 800f70a:	b085      	sub	sp, #20
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d106      	bne.n	800f724 <tcp_rexmit+0x1c>
 800f716:	4b2f      	ldr	r3, [pc, #188]	; (800f7d4 <tcp_rexmit+0xcc>)
 800f718:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800f71c:	492e      	ldr	r1, [pc, #184]	; (800f7d8 <tcp_rexmit+0xd0>)
 800f71e:	482f      	ldr	r0, [pc, #188]	; (800f7dc <tcp_rexmit+0xd4>)
 800f720:	f003 fa80 	bl	8012c24 <iprintf>

  if (pcb->unacked == NULL) {
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d102      	bne.n	800f732 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800f72c:	f06f 0305 	mvn.w	r3, #5
 800f730:	e04c      	b.n	800f7cc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f736:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800f738:	68b8      	ldr	r0, [r7, #8]
 800f73a:	f7ff fe2d 	bl	800f398 <tcp_output_segment_busy>
 800f73e:	4603      	mov	r3, r0
 800f740:	2b00      	cmp	r3, #0
 800f742:	d002      	beq.n	800f74a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800f744:	f06f 0305 	mvn.w	r3, #5
 800f748:	e040      	b.n	800f7cc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800f74a:	68bb      	ldr	r3, [r7, #8]
 800f74c:	681a      	ldr	r2, [r3, #0]
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	336c      	adds	r3, #108	; 0x6c
 800f756:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f758:	e002      	b.n	800f760 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d011      	beq.n	800f78c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	68db      	ldr	r3, [r3, #12]
 800f76e:	685b      	ldr	r3, [r3, #4]
 800f770:	4618      	mov	r0, r3
 800f772:	f7f8 fca4 	bl	80080be <lwip_htonl>
 800f776:	4604      	mov	r4, r0
 800f778:	68bb      	ldr	r3, [r7, #8]
 800f77a:	68db      	ldr	r3, [r3, #12]
 800f77c:	685b      	ldr	r3, [r3, #4]
 800f77e:	4618      	mov	r0, r3
 800f780:	f7f8 fc9d 	bl	80080be <lwip_htonl>
 800f784:	4603      	mov	r3, r0
 800f786:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800f788:	2b00      	cmp	r3, #0
 800f78a:	dbe6      	blt.n	800f75a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	681a      	ldr	r2, [r3, #0]
 800f790:	68bb      	ldr	r3, [r7, #8]
 800f792:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	68ba      	ldr	r2, [r7, #8]
 800f798:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800f79a:	68bb      	ldr	r3, [r7, #8]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d103      	bne.n	800f7aa <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f7b0:	2bff      	cmp	r3, #255	; 0xff
 800f7b2:	d007      	beq.n	800f7c4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f7ba:	3301      	adds	r3, #1
 800f7bc:	b2da      	uxtb	r2, r3
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800f7ca:	2300      	movs	r3, #0
}
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	3714      	adds	r7, #20
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	bd90      	pop	{r4, r7, pc}
 800f7d4:	080153e4 	.word	0x080153e4
 800f7d8:	08015a84 	.word	0x08015a84
 800f7dc:	08015438 	.word	0x08015438

0800f7e0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b082      	sub	sp, #8
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d106      	bne.n	800f7fc <tcp_rexmit_fast+0x1c>
 800f7ee:	4b2a      	ldr	r3, [pc, #168]	; (800f898 <tcp_rexmit_fast+0xb8>)
 800f7f0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800f7f4:	4929      	ldr	r1, [pc, #164]	; (800f89c <tcp_rexmit_fast+0xbc>)
 800f7f6:	482a      	ldr	r0, [pc, #168]	; (800f8a0 <tcp_rexmit_fast+0xc0>)
 800f7f8:	f003 fa14 	bl	8012c24 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f800:	2b00      	cmp	r3, #0
 800f802:	d045      	beq.n	800f890 <tcp_rexmit_fast+0xb0>
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	8b5b      	ldrh	r3, [r3, #26]
 800f808:	f003 0304 	and.w	r3, r3, #4
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d13f      	bne.n	800f890 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f7ff ff79 	bl	800f708 <tcp_rexmit>
 800f816:	4603      	mov	r3, r0
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d139      	bne.n	800f890 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f828:	4293      	cmp	r3, r2
 800f82a:	bf28      	it	cs
 800f82c:	4613      	movcs	r3, r2
 800f82e:	b29b      	uxth	r3, r3
 800f830:	2b00      	cmp	r3, #0
 800f832:	da00      	bge.n	800f836 <tcp_rexmit_fast+0x56>
 800f834:	3301      	adds	r3, #1
 800f836:	105b      	asrs	r3, r3, #1
 800f838:	b29a      	uxth	r2, r3
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f846:	461a      	mov	r2, r3
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f84c:	005b      	lsls	r3, r3, #1
 800f84e:	429a      	cmp	r2, r3
 800f850:	d206      	bcs.n	800f860 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f856:	005b      	lsls	r3, r3, #1
 800f858:	b29a      	uxth	r2, r3
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f86a:	4619      	mov	r1, r3
 800f86c:	0049      	lsls	r1, r1, #1
 800f86e:	440b      	add	r3, r1
 800f870:	b29b      	uxth	r3, r3
 800f872:	4413      	add	r3, r2
 800f874:	b29a      	uxth	r2, r3
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	8b5b      	ldrh	r3, [r3, #26]
 800f880:	f043 0304 	orr.w	r3, r3, #4
 800f884:	b29a      	uxth	r2, r3
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	2200      	movs	r2, #0
 800f88e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800f890:	bf00      	nop
 800f892:	3708      	adds	r7, #8
 800f894:	46bd      	mov	sp, r7
 800f896:	bd80      	pop	{r7, pc}
 800f898:	080153e4 	.word	0x080153e4
 800f89c:	08015a9c 	.word	0x08015a9c
 800f8a0:	08015438 	.word	0x08015438

0800f8a4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b086      	sub	sp, #24
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	60f8      	str	r0, [r7, #12]
 800f8ac:	607b      	str	r3, [r7, #4]
 800f8ae:	460b      	mov	r3, r1
 800f8b0:	817b      	strh	r3, [r7, #10]
 800f8b2:	4613      	mov	r3, r2
 800f8b4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800f8b6:	897a      	ldrh	r2, [r7, #10]
 800f8b8:	893b      	ldrh	r3, [r7, #8]
 800f8ba:	4413      	add	r3, r2
 800f8bc:	b29b      	uxth	r3, r3
 800f8be:	3314      	adds	r3, #20
 800f8c0:	b29b      	uxth	r3, r3
 800f8c2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f8c6:	4619      	mov	r1, r3
 800f8c8:	2022      	movs	r0, #34	; 0x22
 800f8ca:	f7f9 fd15 	bl	80092f8 <pbuf_alloc>
 800f8ce:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800f8d0:	697b      	ldr	r3, [r7, #20]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d04d      	beq.n	800f972 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800f8d6:	897b      	ldrh	r3, [r7, #10]
 800f8d8:	3313      	adds	r3, #19
 800f8da:	697a      	ldr	r2, [r7, #20]
 800f8dc:	8952      	ldrh	r2, [r2, #10]
 800f8de:	4293      	cmp	r3, r2
 800f8e0:	db06      	blt.n	800f8f0 <tcp_output_alloc_header_common+0x4c>
 800f8e2:	4b26      	ldr	r3, [pc, #152]	; (800f97c <tcp_output_alloc_header_common+0xd8>)
 800f8e4:	f240 7223 	movw	r2, #1827	; 0x723
 800f8e8:	4925      	ldr	r1, [pc, #148]	; (800f980 <tcp_output_alloc_header_common+0xdc>)
 800f8ea:	4826      	ldr	r0, [pc, #152]	; (800f984 <tcp_output_alloc_header_common+0xe0>)
 800f8ec:	f003 f99a 	bl	8012c24 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800f8f0:	697b      	ldr	r3, [r7, #20]
 800f8f2:	685b      	ldr	r3, [r3, #4]
 800f8f4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800f8f6:	8c3b      	ldrh	r3, [r7, #32]
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	f7f8 fbcb 	bl	8008094 <lwip_htons>
 800f8fe:	4603      	mov	r3, r0
 800f900:	461a      	mov	r2, r3
 800f902:	693b      	ldr	r3, [r7, #16]
 800f904:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800f906:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f908:	4618      	mov	r0, r3
 800f90a:	f7f8 fbc3 	bl	8008094 <lwip_htons>
 800f90e:	4603      	mov	r3, r0
 800f910:	461a      	mov	r2, r3
 800f912:	693b      	ldr	r3, [r7, #16]
 800f914:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800f916:	693b      	ldr	r3, [r7, #16]
 800f918:	687a      	ldr	r2, [r7, #4]
 800f91a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800f91c:	68f8      	ldr	r0, [r7, #12]
 800f91e:	f7f8 fbce 	bl	80080be <lwip_htonl>
 800f922:	4602      	mov	r2, r0
 800f924:	693b      	ldr	r3, [r7, #16]
 800f926:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800f928:	897b      	ldrh	r3, [r7, #10]
 800f92a:	089b      	lsrs	r3, r3, #2
 800f92c:	b29b      	uxth	r3, r3
 800f92e:	3305      	adds	r3, #5
 800f930:	b29b      	uxth	r3, r3
 800f932:	031b      	lsls	r3, r3, #12
 800f934:	b29a      	uxth	r2, r3
 800f936:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f93a:	b29b      	uxth	r3, r3
 800f93c:	4313      	orrs	r3, r2
 800f93e:	b29b      	uxth	r3, r3
 800f940:	4618      	mov	r0, r3
 800f942:	f7f8 fba7 	bl	8008094 <lwip_htons>
 800f946:	4603      	mov	r3, r0
 800f948:	461a      	mov	r2, r3
 800f94a:	693b      	ldr	r3, [r7, #16]
 800f94c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800f94e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f950:	4618      	mov	r0, r3
 800f952:	f7f8 fb9f 	bl	8008094 <lwip_htons>
 800f956:	4603      	mov	r3, r0
 800f958:	461a      	mov	r2, r3
 800f95a:	693b      	ldr	r3, [r7, #16]
 800f95c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800f95e:	693b      	ldr	r3, [r7, #16]
 800f960:	2200      	movs	r2, #0
 800f962:	741a      	strb	r2, [r3, #16]
 800f964:	2200      	movs	r2, #0
 800f966:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800f968:	693b      	ldr	r3, [r7, #16]
 800f96a:	2200      	movs	r2, #0
 800f96c:	749a      	strb	r2, [r3, #18]
 800f96e:	2200      	movs	r2, #0
 800f970:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800f972:	697b      	ldr	r3, [r7, #20]
}
 800f974:	4618      	mov	r0, r3
 800f976:	3718      	adds	r7, #24
 800f978:	46bd      	mov	sp, r7
 800f97a:	bd80      	pop	{r7, pc}
 800f97c:	080153e4 	.word	0x080153e4
 800f980:	08015abc 	.word	0x08015abc
 800f984:	08015438 	.word	0x08015438

0800f988 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800f988:	b5b0      	push	{r4, r5, r7, lr}
 800f98a:	b08a      	sub	sp, #40	; 0x28
 800f98c:	af04      	add	r7, sp, #16
 800f98e:	60f8      	str	r0, [r7, #12]
 800f990:	607b      	str	r3, [r7, #4]
 800f992:	460b      	mov	r3, r1
 800f994:	817b      	strh	r3, [r7, #10]
 800f996:	4613      	mov	r3, r2
 800f998:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d106      	bne.n	800f9ae <tcp_output_alloc_header+0x26>
 800f9a0:	4b15      	ldr	r3, [pc, #84]	; (800f9f8 <tcp_output_alloc_header+0x70>)
 800f9a2:	f240 7242 	movw	r2, #1858	; 0x742
 800f9a6:	4915      	ldr	r1, [pc, #84]	; (800f9fc <tcp_output_alloc_header+0x74>)
 800f9a8:	4815      	ldr	r0, [pc, #84]	; (800fa00 <tcp_output_alloc_header+0x78>)
 800f9aa:	f003 f93b 	bl	8012c24 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	8adb      	ldrh	r3, [r3, #22]
 800f9b6:	68fa      	ldr	r2, [r7, #12]
 800f9b8:	8b12      	ldrh	r2, [r2, #24]
 800f9ba:	68f9      	ldr	r1, [r7, #12]
 800f9bc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800f9be:	893d      	ldrh	r5, [r7, #8]
 800f9c0:	897c      	ldrh	r4, [r7, #10]
 800f9c2:	9103      	str	r1, [sp, #12]
 800f9c4:	2110      	movs	r1, #16
 800f9c6:	9102      	str	r1, [sp, #8]
 800f9c8:	9201      	str	r2, [sp, #4]
 800f9ca:	9300      	str	r3, [sp, #0]
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	462a      	mov	r2, r5
 800f9d0:	4621      	mov	r1, r4
 800f9d2:	f7ff ff67 	bl	800f8a4 <tcp_output_alloc_header_common>
 800f9d6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800f9d8:	697b      	ldr	r3, [r7, #20]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d006      	beq.n	800f9ec <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9e2:	68fa      	ldr	r2, [r7, #12]
 800f9e4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f9e6:	441a      	add	r2, r3
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800f9ec:	697b      	ldr	r3, [r7, #20]
}
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	3718      	adds	r7, #24
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	bdb0      	pop	{r4, r5, r7, pc}
 800f9f6:	bf00      	nop
 800f9f8:	080153e4 	.word	0x080153e4
 800f9fc:	08015aec 	.word	0x08015aec
 800fa00:	08015438 	.word	0x08015438

0800fa04 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b088      	sub	sp, #32
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	60f8      	str	r0, [r7, #12]
 800fa0c:	60b9      	str	r1, [r7, #8]
 800fa0e:	4611      	mov	r1, r2
 800fa10:	461a      	mov	r2, r3
 800fa12:	460b      	mov	r3, r1
 800fa14:	71fb      	strb	r3, [r7, #7]
 800fa16:	4613      	mov	r3, r2
 800fa18:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d106      	bne.n	800fa32 <tcp_output_fill_options+0x2e>
 800fa24:	4b13      	ldr	r3, [pc, #76]	; (800fa74 <tcp_output_fill_options+0x70>)
 800fa26:	f240 7256 	movw	r2, #1878	; 0x756
 800fa2a:	4913      	ldr	r1, [pc, #76]	; (800fa78 <tcp_output_fill_options+0x74>)
 800fa2c:	4813      	ldr	r0, [pc, #76]	; (800fa7c <tcp_output_fill_options+0x78>)
 800fa2e:	f003 f8f9 	bl	8012c24 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800fa32:	68bb      	ldr	r3, [r7, #8]
 800fa34:	685b      	ldr	r3, [r3, #4]
 800fa36:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800fa38:	69bb      	ldr	r3, [r7, #24]
 800fa3a:	3314      	adds	r3, #20
 800fa3c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800fa3e:	69bb      	ldr	r3, [r7, #24]
 800fa40:	f103 0214 	add.w	r2, r3, #20
 800fa44:	8bfb      	ldrh	r3, [r7, #30]
 800fa46:	009b      	lsls	r3, r3, #2
 800fa48:	4619      	mov	r1, r3
 800fa4a:	79fb      	ldrb	r3, [r7, #7]
 800fa4c:	009b      	lsls	r3, r3, #2
 800fa4e:	f003 0304 	and.w	r3, r3, #4
 800fa52:	440b      	add	r3, r1
 800fa54:	4413      	add	r3, r2
 800fa56:	697a      	ldr	r2, [r7, #20]
 800fa58:	429a      	cmp	r2, r3
 800fa5a:	d006      	beq.n	800fa6a <tcp_output_fill_options+0x66>
 800fa5c:	4b05      	ldr	r3, [pc, #20]	; (800fa74 <tcp_output_fill_options+0x70>)
 800fa5e:	f240 7275 	movw	r2, #1909	; 0x775
 800fa62:	4907      	ldr	r1, [pc, #28]	; (800fa80 <tcp_output_fill_options+0x7c>)
 800fa64:	4805      	ldr	r0, [pc, #20]	; (800fa7c <tcp_output_fill_options+0x78>)
 800fa66:	f003 f8dd 	bl	8012c24 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800fa6a:	bf00      	nop
 800fa6c:	3720      	adds	r7, #32
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}
 800fa72:	bf00      	nop
 800fa74:	080153e4 	.word	0x080153e4
 800fa78:	08015b14 	.word	0x08015b14
 800fa7c:	08015438 	.word	0x08015438
 800fa80:	08015a0c 	.word	0x08015a0c

0800fa84 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b08a      	sub	sp, #40	; 0x28
 800fa88:	af04      	add	r7, sp, #16
 800fa8a:	60f8      	str	r0, [r7, #12]
 800fa8c:	60b9      	str	r1, [r7, #8]
 800fa8e:	607a      	str	r2, [r7, #4]
 800fa90:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800fa92:	68bb      	ldr	r3, [r7, #8]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d106      	bne.n	800faa6 <tcp_output_control_segment+0x22>
 800fa98:	4b1c      	ldr	r3, [pc, #112]	; (800fb0c <tcp_output_control_segment+0x88>)
 800fa9a:	f240 7287 	movw	r2, #1927	; 0x787
 800fa9e:	491c      	ldr	r1, [pc, #112]	; (800fb10 <tcp_output_control_segment+0x8c>)
 800faa0:	481c      	ldr	r0, [pc, #112]	; (800fb14 <tcp_output_control_segment+0x90>)
 800faa2:	f003 f8bf 	bl	8012c24 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800faa6:	683a      	ldr	r2, [r7, #0]
 800faa8:	6879      	ldr	r1, [r7, #4]
 800faaa:	68f8      	ldr	r0, [r7, #12]
 800faac:	f7fe fae8 	bl	800e080 <tcp_route>
 800fab0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800fab2:	693b      	ldr	r3, [r7, #16]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d102      	bne.n	800fabe <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800fab8:	23fc      	movs	r3, #252	; 0xfc
 800faba:	75fb      	strb	r3, [r7, #23]
 800fabc:	e01c      	b.n	800faf8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d006      	beq.n	800fad2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	7adb      	ldrb	r3, [r3, #11]
 800fac8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	7a9b      	ldrb	r3, [r3, #10]
 800face:	757b      	strb	r3, [r7, #21]
 800fad0:	e003      	b.n	800fada <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800fad2:	23ff      	movs	r3, #255	; 0xff
 800fad4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800fad6:	2300      	movs	r3, #0
 800fad8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800fada:	7dba      	ldrb	r2, [r7, #22]
 800fadc:	693b      	ldr	r3, [r7, #16]
 800fade:	9302      	str	r3, [sp, #8]
 800fae0:	2306      	movs	r3, #6
 800fae2:	9301      	str	r3, [sp, #4]
 800fae4:	7d7b      	ldrb	r3, [r7, #21]
 800fae6:	9300      	str	r3, [sp, #0]
 800fae8:	4613      	mov	r3, r2
 800faea:	683a      	ldr	r2, [r7, #0]
 800faec:	6879      	ldr	r1, [r7, #4]
 800faee:	68b8      	ldr	r0, [r7, #8]
 800faf0:	f001 ff96 	bl	8011a20 <ip4_output_if>
 800faf4:	4603      	mov	r3, r0
 800faf6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800faf8:	68b8      	ldr	r0, [r7, #8]
 800fafa:	f7f9 fee1 	bl	80098c0 <pbuf_free>
  return err;
 800fafe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fb02:	4618      	mov	r0, r3
 800fb04:	3718      	adds	r7, #24
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bd80      	pop	{r7, pc}
 800fb0a:	bf00      	nop
 800fb0c:	080153e4 	.word	0x080153e4
 800fb10:	08015b3c 	.word	0x08015b3c
 800fb14:	08015438 	.word	0x08015438

0800fb18 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800fb18:	b590      	push	{r4, r7, lr}
 800fb1a:	b08b      	sub	sp, #44	; 0x2c
 800fb1c:	af04      	add	r7, sp, #16
 800fb1e:	60f8      	str	r0, [r7, #12]
 800fb20:	60b9      	str	r1, [r7, #8]
 800fb22:	607a      	str	r2, [r7, #4]
 800fb24:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800fb26:	683b      	ldr	r3, [r7, #0]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d106      	bne.n	800fb3a <tcp_rst+0x22>
 800fb2c:	4b1f      	ldr	r3, [pc, #124]	; (800fbac <tcp_rst+0x94>)
 800fb2e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800fb32:	491f      	ldr	r1, [pc, #124]	; (800fbb0 <tcp_rst+0x98>)
 800fb34:	481f      	ldr	r0, [pc, #124]	; (800fbb4 <tcp_rst+0x9c>)
 800fb36:	f003 f875 	bl	8012c24 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800fb3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d106      	bne.n	800fb4e <tcp_rst+0x36>
 800fb40:	4b1a      	ldr	r3, [pc, #104]	; (800fbac <tcp_rst+0x94>)
 800fb42:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800fb46:	491c      	ldr	r1, [pc, #112]	; (800fbb8 <tcp_rst+0xa0>)
 800fb48:	481a      	ldr	r0, [pc, #104]	; (800fbb4 <tcp_rst+0x9c>)
 800fb4a:	f003 f86b 	bl	8012c24 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fb4e:	2300      	movs	r3, #0
 800fb50:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800fb52:	f246 0308 	movw	r3, #24584	; 0x6008
 800fb56:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800fb58:	7dfb      	ldrb	r3, [r7, #23]
 800fb5a:	b29c      	uxth	r4, r3
 800fb5c:	68b8      	ldr	r0, [r7, #8]
 800fb5e:	f7f8 faae 	bl	80080be <lwip_htonl>
 800fb62:	4602      	mov	r2, r0
 800fb64:	8abb      	ldrh	r3, [r7, #20]
 800fb66:	9303      	str	r3, [sp, #12]
 800fb68:	2314      	movs	r3, #20
 800fb6a:	9302      	str	r3, [sp, #8]
 800fb6c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800fb6e:	9301      	str	r3, [sp, #4]
 800fb70:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fb72:	9300      	str	r3, [sp, #0]
 800fb74:	4613      	mov	r3, r2
 800fb76:	2200      	movs	r2, #0
 800fb78:	4621      	mov	r1, r4
 800fb7a:	6878      	ldr	r0, [r7, #4]
 800fb7c:	f7ff fe92 	bl	800f8a4 <tcp_output_alloc_header_common>
 800fb80:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800fb82:	693b      	ldr	r3, [r7, #16]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d00c      	beq.n	800fba2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fb88:	7dfb      	ldrb	r3, [r7, #23]
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	6939      	ldr	r1, [r7, #16]
 800fb8e:	68f8      	ldr	r0, [r7, #12]
 800fb90:	f7ff ff38 	bl	800fa04 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800fb94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb96:	683a      	ldr	r2, [r7, #0]
 800fb98:	6939      	ldr	r1, [r7, #16]
 800fb9a:	68f8      	ldr	r0, [r7, #12]
 800fb9c:	f7ff ff72 	bl	800fa84 <tcp_output_control_segment>
 800fba0:	e000      	b.n	800fba4 <tcp_rst+0x8c>
    return;
 800fba2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800fba4:	371c      	adds	r7, #28
 800fba6:	46bd      	mov	sp, r7
 800fba8:	bd90      	pop	{r4, r7, pc}
 800fbaa:	bf00      	nop
 800fbac:	080153e4 	.word	0x080153e4
 800fbb0:	08015b68 	.word	0x08015b68
 800fbb4:	08015438 	.word	0x08015438
 800fbb8:	08015b84 	.word	0x08015b84

0800fbbc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800fbbc:	b590      	push	{r4, r7, lr}
 800fbbe:	b087      	sub	sp, #28
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800fbc8:	2300      	movs	r3, #0
 800fbca:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d106      	bne.n	800fbe0 <tcp_send_empty_ack+0x24>
 800fbd2:	4b28      	ldr	r3, [pc, #160]	; (800fc74 <tcp_send_empty_ack+0xb8>)
 800fbd4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800fbd8:	4927      	ldr	r1, [pc, #156]	; (800fc78 <tcp_send_empty_ack+0xbc>)
 800fbda:	4828      	ldr	r0, [pc, #160]	; (800fc7c <tcp_send_empty_ack+0xc0>)
 800fbdc:	f003 f822 	bl	8012c24 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fbe0:	7dfb      	ldrb	r3, [r7, #23]
 800fbe2:	009b      	lsls	r3, r3, #2
 800fbe4:	b2db      	uxtb	r3, r3
 800fbe6:	f003 0304 	and.w	r3, r3, #4
 800fbea:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800fbec:	7d7b      	ldrb	r3, [r7, #21]
 800fbee:	b29c      	uxth	r4, r3
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f7f8 fa62 	bl	80080be <lwip_htonl>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	4621      	mov	r1, r4
 800fc00:	6878      	ldr	r0, [r7, #4]
 800fc02:	f7ff fec1 	bl	800f988 <tcp_output_alloc_header>
 800fc06:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fc08:	693b      	ldr	r3, [r7, #16]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d109      	bne.n	800fc22 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	8b5b      	ldrh	r3, [r3, #26]
 800fc12:	f043 0303 	orr.w	r3, r3, #3
 800fc16:	b29a      	uxth	r2, r3
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800fc1c:	f06f 0301 	mvn.w	r3, #1
 800fc20:	e023      	b.n	800fc6a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800fc22:	7dbb      	ldrb	r3, [r7, #22]
 800fc24:	7dfa      	ldrb	r2, [r7, #23]
 800fc26:	6939      	ldr	r1, [r7, #16]
 800fc28:	6878      	ldr	r0, [r7, #4]
 800fc2a:	f7ff feeb 	bl	800fa04 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fc2e:	687a      	ldr	r2, [r7, #4]
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	3304      	adds	r3, #4
 800fc34:	6939      	ldr	r1, [r7, #16]
 800fc36:	6878      	ldr	r0, [r7, #4]
 800fc38:	f7ff ff24 	bl	800fa84 <tcp_output_control_segment>
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800fc40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d007      	beq.n	800fc58 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	8b5b      	ldrh	r3, [r3, #26]
 800fc4c:	f043 0303 	orr.w	r3, r3, #3
 800fc50:	b29a      	uxth	r2, r3
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	835a      	strh	r2, [r3, #26]
 800fc56:	e006      	b.n	800fc66 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	8b5b      	ldrh	r3, [r3, #26]
 800fc5c:	f023 0303 	bic.w	r3, r3, #3
 800fc60:	b29a      	uxth	r2, r3
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800fc66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	371c      	adds	r7, #28
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	bd90      	pop	{r4, r7, pc}
 800fc72:	bf00      	nop
 800fc74:	080153e4 	.word	0x080153e4
 800fc78:	08015ba0 	.word	0x08015ba0
 800fc7c:	08015438 	.word	0x08015438

0800fc80 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800fc80:	b590      	push	{r4, r7, lr}
 800fc82:	b087      	sub	sp, #28
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fc88:	2300      	movs	r3, #0
 800fc8a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d106      	bne.n	800fca0 <tcp_keepalive+0x20>
 800fc92:	4b18      	ldr	r3, [pc, #96]	; (800fcf4 <tcp_keepalive+0x74>)
 800fc94:	f640 0224 	movw	r2, #2084	; 0x824
 800fc98:	4917      	ldr	r1, [pc, #92]	; (800fcf8 <tcp_keepalive+0x78>)
 800fc9a:	4818      	ldr	r0, [pc, #96]	; (800fcfc <tcp_keepalive+0x7c>)
 800fc9c:	f002 ffc2 	bl	8012c24 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800fca0:	7dfb      	ldrb	r3, [r7, #23]
 800fca2:	b29c      	uxth	r4, r3
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fca8:	3b01      	subs	r3, #1
 800fcaa:	4618      	mov	r0, r3
 800fcac:	f7f8 fa07 	bl	80080be <lwip_htonl>
 800fcb0:	4603      	mov	r3, r0
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	4621      	mov	r1, r4
 800fcb6:	6878      	ldr	r0, [r7, #4]
 800fcb8:	f7ff fe66 	bl	800f988 <tcp_output_alloc_header>
 800fcbc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fcbe:	693b      	ldr	r3, [r7, #16]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d102      	bne.n	800fcca <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800fcc4:	f04f 33ff 	mov.w	r3, #4294967295
 800fcc8:	e010      	b.n	800fcec <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fcca:	7dfb      	ldrb	r3, [r7, #23]
 800fccc:	2200      	movs	r2, #0
 800fcce:	6939      	ldr	r1, [r7, #16]
 800fcd0:	6878      	ldr	r0, [r7, #4]
 800fcd2:	f7ff fe97 	bl	800fa04 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fcd6:	687a      	ldr	r2, [r7, #4]
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	3304      	adds	r3, #4
 800fcdc:	6939      	ldr	r1, [r7, #16]
 800fcde:	6878      	ldr	r0, [r7, #4]
 800fce0:	f7ff fed0 	bl	800fa84 <tcp_output_control_segment>
 800fce4:	4603      	mov	r3, r0
 800fce6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800fce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fcec:	4618      	mov	r0, r3
 800fcee:	371c      	adds	r7, #28
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd90      	pop	{r4, r7, pc}
 800fcf4:	080153e4 	.word	0x080153e4
 800fcf8:	08015bc0 	.word	0x08015bc0
 800fcfc:	08015438 	.word	0x08015438

0800fd00 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800fd00:	b590      	push	{r4, r7, lr}
 800fd02:	b08b      	sub	sp, #44	; 0x2c
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fd08:	2300      	movs	r3, #0
 800fd0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d106      	bne.n	800fd22 <tcp_zero_window_probe+0x22>
 800fd14:	4b4c      	ldr	r3, [pc, #304]	; (800fe48 <tcp_zero_window_probe+0x148>)
 800fd16:	f640 024f 	movw	r2, #2127	; 0x84f
 800fd1a:	494c      	ldr	r1, [pc, #304]	; (800fe4c <tcp_zero_window_probe+0x14c>)
 800fd1c:	484c      	ldr	r0, [pc, #304]	; (800fe50 <tcp_zero_window_probe+0x150>)
 800fd1e:	f002 ff81 	bl	8012c24 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd26:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800fd28:	6a3b      	ldr	r3, [r7, #32]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d101      	bne.n	800fd32 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800fd2e:	2300      	movs	r3, #0
 800fd30:	e086      	b.n	800fe40 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fd38:	2bff      	cmp	r3, #255	; 0xff
 800fd3a:	d007      	beq.n	800fd4c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fd42:	3301      	adds	r3, #1
 800fd44:	b2da      	uxtb	r2, r3
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800fd4c:	6a3b      	ldr	r3, [r7, #32]
 800fd4e:	68db      	ldr	r3, [r3, #12]
 800fd50:	899b      	ldrh	r3, [r3, #12]
 800fd52:	b29b      	uxth	r3, r3
 800fd54:	4618      	mov	r0, r3
 800fd56:	f7f8 f99d 	bl	8008094 <lwip_htons>
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	b2db      	uxtb	r3, r3
 800fd5e:	f003 0301 	and.w	r3, r3, #1
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d005      	beq.n	800fd72 <tcp_zero_window_probe+0x72>
 800fd66:	6a3b      	ldr	r3, [r7, #32]
 800fd68:	891b      	ldrh	r3, [r3, #8]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d101      	bne.n	800fd72 <tcp_zero_window_probe+0x72>
 800fd6e:	2301      	movs	r3, #1
 800fd70:	e000      	b.n	800fd74 <tcp_zero_window_probe+0x74>
 800fd72:	2300      	movs	r3, #0
 800fd74:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800fd76:	7ffb      	ldrb	r3, [r7, #31]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	bf0c      	ite	eq
 800fd7c:	2301      	moveq	r3, #1
 800fd7e:	2300      	movne	r3, #0
 800fd80:	b2db      	uxtb	r3, r3
 800fd82:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800fd84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd88:	b299      	uxth	r1, r3
 800fd8a:	6a3b      	ldr	r3, [r7, #32]
 800fd8c:	68db      	ldr	r3, [r3, #12]
 800fd8e:	685b      	ldr	r3, [r3, #4]
 800fd90:	8bba      	ldrh	r2, [r7, #28]
 800fd92:	6878      	ldr	r0, [r7, #4]
 800fd94:	f7ff fdf8 	bl	800f988 <tcp_output_alloc_header>
 800fd98:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800fd9a:	69bb      	ldr	r3, [r7, #24]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d102      	bne.n	800fda6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800fda0:	f04f 33ff 	mov.w	r3, #4294967295
 800fda4:	e04c      	b.n	800fe40 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800fda6:	69bb      	ldr	r3, [r7, #24]
 800fda8:	685b      	ldr	r3, [r3, #4]
 800fdaa:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800fdac:	7ffb      	ldrb	r3, [r7, #31]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d011      	beq.n	800fdd6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800fdb2:	697b      	ldr	r3, [r7, #20]
 800fdb4:	899b      	ldrh	r3, [r3, #12]
 800fdb6:	b29b      	uxth	r3, r3
 800fdb8:	b21b      	sxth	r3, r3
 800fdba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fdbe:	b21c      	sxth	r4, r3
 800fdc0:	2011      	movs	r0, #17
 800fdc2:	f7f8 f967 	bl	8008094 <lwip_htons>
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	b21b      	sxth	r3, r3
 800fdca:	4323      	orrs	r3, r4
 800fdcc:	b21b      	sxth	r3, r3
 800fdce:	b29a      	uxth	r2, r3
 800fdd0:	697b      	ldr	r3, [r7, #20]
 800fdd2:	819a      	strh	r2, [r3, #12]
 800fdd4:	e010      	b.n	800fdf8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800fdd6:	69bb      	ldr	r3, [r7, #24]
 800fdd8:	685b      	ldr	r3, [r3, #4]
 800fdda:	3314      	adds	r3, #20
 800fddc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800fdde:	6a3b      	ldr	r3, [r7, #32]
 800fde0:	6858      	ldr	r0, [r3, #4]
 800fde2:	6a3b      	ldr	r3, [r7, #32]
 800fde4:	685b      	ldr	r3, [r3, #4]
 800fde6:	891a      	ldrh	r2, [r3, #8]
 800fde8:	6a3b      	ldr	r3, [r7, #32]
 800fdea:	891b      	ldrh	r3, [r3, #8]
 800fdec:	1ad3      	subs	r3, r2, r3
 800fdee:	b29b      	uxth	r3, r3
 800fdf0:	2201      	movs	r2, #1
 800fdf2:	6939      	ldr	r1, [r7, #16]
 800fdf4:	f7f9 ff5e 	bl	8009cb4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800fdf8:	6a3b      	ldr	r3, [r7, #32]
 800fdfa:	68db      	ldr	r3, [r3, #12]
 800fdfc:	685b      	ldr	r3, [r3, #4]
 800fdfe:	4618      	mov	r0, r3
 800fe00:	f7f8 f95d 	bl	80080be <lwip_htonl>
 800fe04:	4603      	mov	r3, r0
 800fe06:	3301      	adds	r3, #1
 800fe08:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	1ad3      	subs	r3, r2, r3
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	da02      	bge.n	800fe1c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	68fa      	ldr	r2, [r7, #12]
 800fe1a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fe1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe20:	2200      	movs	r2, #0
 800fe22:	69b9      	ldr	r1, [r7, #24]
 800fe24:	6878      	ldr	r0, [r7, #4]
 800fe26:	f7ff fded 	bl	800fa04 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fe2a:	687a      	ldr	r2, [r7, #4]
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	3304      	adds	r3, #4
 800fe30:	69b9      	ldr	r1, [r7, #24]
 800fe32:	6878      	ldr	r0, [r7, #4]
 800fe34:	f7ff fe26 	bl	800fa84 <tcp_output_control_segment>
 800fe38:	4603      	mov	r3, r0
 800fe3a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800fe3c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800fe40:	4618      	mov	r0, r3
 800fe42:	372c      	adds	r7, #44	; 0x2c
 800fe44:	46bd      	mov	sp, r7
 800fe46:	bd90      	pop	{r4, r7, pc}
 800fe48:	080153e4 	.word	0x080153e4
 800fe4c:	08015bdc 	.word	0x08015bdc
 800fe50:	08015438 	.word	0x08015438

0800fe54 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b082      	sub	sp, #8
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800fe5c:	f7fa f818 	bl	8009e90 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800fe60:	4b0a      	ldr	r3, [pc, #40]	; (800fe8c <tcpip_tcp_timer+0x38>)
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d103      	bne.n	800fe70 <tcpip_tcp_timer+0x1c>
 800fe68:	4b09      	ldr	r3, [pc, #36]	; (800fe90 <tcpip_tcp_timer+0x3c>)
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d005      	beq.n	800fe7c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800fe70:	2200      	movs	r2, #0
 800fe72:	4908      	ldr	r1, [pc, #32]	; (800fe94 <tcpip_tcp_timer+0x40>)
 800fe74:	20fa      	movs	r0, #250	; 0xfa
 800fe76:	f000 f8f3 	bl	8010060 <sys_timeout>
 800fe7a:	e003      	b.n	800fe84 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800fe7c:	4b06      	ldr	r3, [pc, #24]	; (800fe98 <tcpip_tcp_timer+0x44>)
 800fe7e:	2200      	movs	r2, #0
 800fe80:	601a      	str	r2, [r3, #0]
  }
}
 800fe82:	bf00      	nop
 800fe84:	bf00      	nop
 800fe86:	3708      	adds	r7, #8
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	bd80      	pop	{r7, pc}
 800fe8c:	2400346c 	.word	0x2400346c
 800fe90:	2400347c 	.word	0x2400347c
 800fe94:	0800fe55 	.word	0x0800fe55
 800fe98:	24000128 	.word	0x24000128

0800fe9c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800fea0:	4b0a      	ldr	r3, [pc, #40]	; (800fecc <tcp_timer_needed+0x30>)
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d10f      	bne.n	800fec8 <tcp_timer_needed+0x2c>
 800fea8:	4b09      	ldr	r3, [pc, #36]	; (800fed0 <tcp_timer_needed+0x34>)
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d103      	bne.n	800feb8 <tcp_timer_needed+0x1c>
 800feb0:	4b08      	ldr	r3, [pc, #32]	; (800fed4 <tcp_timer_needed+0x38>)
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d007      	beq.n	800fec8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800feb8:	4b04      	ldr	r3, [pc, #16]	; (800fecc <tcp_timer_needed+0x30>)
 800feba:	2201      	movs	r2, #1
 800febc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800febe:	2200      	movs	r2, #0
 800fec0:	4905      	ldr	r1, [pc, #20]	; (800fed8 <tcp_timer_needed+0x3c>)
 800fec2:	20fa      	movs	r0, #250	; 0xfa
 800fec4:	f000 f8cc 	bl	8010060 <sys_timeout>
  }
}
 800fec8:	bf00      	nop
 800feca:	bd80      	pop	{r7, pc}
 800fecc:	24000128 	.word	0x24000128
 800fed0:	2400346c 	.word	0x2400346c
 800fed4:	2400347c 	.word	0x2400347c
 800fed8:	0800fe55 	.word	0x0800fe55

0800fedc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b086      	sub	sp, #24
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	60f8      	str	r0, [r7, #12]
 800fee4:	60b9      	str	r1, [r7, #8]
 800fee6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800fee8:	2006      	movs	r0, #6
 800feea:	f7f8 fe03 	bl	8008af4 <memp_malloc>
 800feee:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800fef0:	693b      	ldr	r3, [r7, #16]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d109      	bne.n	800ff0a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800fef6:	693b      	ldr	r3, [r7, #16]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d151      	bne.n	800ffa0 <sys_timeout_abs+0xc4>
 800fefc:	4b2a      	ldr	r3, [pc, #168]	; (800ffa8 <sys_timeout_abs+0xcc>)
 800fefe:	22be      	movs	r2, #190	; 0xbe
 800ff00:	492a      	ldr	r1, [pc, #168]	; (800ffac <sys_timeout_abs+0xd0>)
 800ff02:	482b      	ldr	r0, [pc, #172]	; (800ffb0 <sys_timeout_abs+0xd4>)
 800ff04:	f002 fe8e 	bl	8012c24 <iprintf>
    return;
 800ff08:	e04a      	b.n	800ffa0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800ff0a:	693b      	ldr	r3, [r7, #16]
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800ff10:	693b      	ldr	r3, [r7, #16]
 800ff12:	68ba      	ldr	r2, [r7, #8]
 800ff14:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800ff16:	693b      	ldr	r3, [r7, #16]
 800ff18:	687a      	ldr	r2, [r7, #4]
 800ff1a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800ff1c:	693b      	ldr	r3, [r7, #16]
 800ff1e:	68fa      	ldr	r2, [r7, #12]
 800ff20:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800ff22:	4b24      	ldr	r3, [pc, #144]	; (800ffb4 <sys_timeout_abs+0xd8>)
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d103      	bne.n	800ff32 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800ff2a:	4a22      	ldr	r2, [pc, #136]	; (800ffb4 <sys_timeout_abs+0xd8>)
 800ff2c:	693b      	ldr	r3, [r7, #16]
 800ff2e:	6013      	str	r3, [r2, #0]
    return;
 800ff30:	e037      	b.n	800ffa2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ff32:	693b      	ldr	r3, [r7, #16]
 800ff34:	685a      	ldr	r2, [r3, #4]
 800ff36:	4b1f      	ldr	r3, [pc, #124]	; (800ffb4 <sys_timeout_abs+0xd8>)
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	685b      	ldr	r3, [r3, #4]
 800ff3c:	1ad3      	subs	r3, r2, r3
 800ff3e:	0fdb      	lsrs	r3, r3, #31
 800ff40:	f003 0301 	and.w	r3, r3, #1
 800ff44:	b2db      	uxtb	r3, r3
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d007      	beq.n	800ff5a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800ff4a:	4b1a      	ldr	r3, [pc, #104]	; (800ffb4 <sys_timeout_abs+0xd8>)
 800ff4c:	681a      	ldr	r2, [r3, #0]
 800ff4e:	693b      	ldr	r3, [r7, #16]
 800ff50:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800ff52:	4a18      	ldr	r2, [pc, #96]	; (800ffb4 <sys_timeout_abs+0xd8>)
 800ff54:	693b      	ldr	r3, [r7, #16]
 800ff56:	6013      	str	r3, [r2, #0]
 800ff58:	e023      	b.n	800ffa2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ff5a:	4b16      	ldr	r3, [pc, #88]	; (800ffb4 <sys_timeout_abs+0xd8>)
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	617b      	str	r3, [r7, #20]
 800ff60:	e01a      	b.n	800ff98 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ff62:	697b      	ldr	r3, [r7, #20]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d00b      	beq.n	800ff82 <sys_timeout_abs+0xa6>
 800ff6a:	693b      	ldr	r3, [r7, #16]
 800ff6c:	685a      	ldr	r2, [r3, #4]
 800ff6e:	697b      	ldr	r3, [r7, #20]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	685b      	ldr	r3, [r3, #4]
 800ff74:	1ad3      	subs	r3, r2, r3
 800ff76:	0fdb      	lsrs	r3, r3, #31
 800ff78:	f003 0301 	and.w	r3, r3, #1
 800ff7c:	b2db      	uxtb	r3, r3
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d007      	beq.n	800ff92 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ff82:	697b      	ldr	r3, [r7, #20]
 800ff84:	681a      	ldr	r2, [r3, #0]
 800ff86:	693b      	ldr	r3, [r7, #16]
 800ff88:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ff8a:	697b      	ldr	r3, [r7, #20]
 800ff8c:	693a      	ldr	r2, [r7, #16]
 800ff8e:	601a      	str	r2, [r3, #0]
        break;
 800ff90:	e007      	b.n	800ffa2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ff92:	697b      	ldr	r3, [r7, #20]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	617b      	str	r3, [r7, #20]
 800ff98:	697b      	ldr	r3, [r7, #20]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d1e1      	bne.n	800ff62 <sys_timeout_abs+0x86>
 800ff9e:	e000      	b.n	800ffa2 <sys_timeout_abs+0xc6>
    return;
 800ffa0:	bf00      	nop
      }
    }
  }
}
 800ffa2:	3718      	adds	r7, #24
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	bd80      	pop	{r7, pc}
 800ffa8:	08015c00 	.word	0x08015c00
 800ffac:	08015c34 	.word	0x08015c34
 800ffb0:	08015c74 	.word	0x08015c74
 800ffb4:	24000120 	.word	0x24000120

0800ffb8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b086      	sub	sp, #24
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ffc4:	697b      	ldr	r3, [r7, #20]
 800ffc6:	685b      	ldr	r3, [r3, #4]
 800ffc8:	4798      	blx	r3

  now = sys_now();
 800ffca:	f7f7 ff89 	bl	8007ee0 <sys_now>
 800ffce:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ffd0:	697b      	ldr	r3, [r7, #20]
 800ffd2:	681a      	ldr	r2, [r3, #0]
 800ffd4:	4b0f      	ldr	r3, [pc, #60]	; (8010014 <lwip_cyclic_timer+0x5c>)
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	4413      	add	r3, r2
 800ffda:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ffdc:	68fa      	ldr	r2, [r7, #12]
 800ffde:	693b      	ldr	r3, [r7, #16]
 800ffe0:	1ad3      	subs	r3, r2, r3
 800ffe2:	0fdb      	lsrs	r3, r3, #31
 800ffe4:	f003 0301 	and.w	r3, r3, #1
 800ffe8:	b2db      	uxtb	r3, r3
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d009      	beq.n	8010002 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ffee:	697b      	ldr	r3, [r7, #20]
 800fff0:	681a      	ldr	r2, [r3, #0]
 800fff2:	693b      	ldr	r3, [r7, #16]
 800fff4:	4413      	add	r3, r2
 800fff6:	687a      	ldr	r2, [r7, #4]
 800fff8:	4907      	ldr	r1, [pc, #28]	; (8010018 <lwip_cyclic_timer+0x60>)
 800fffa:	4618      	mov	r0, r3
 800fffc:	f7ff ff6e 	bl	800fedc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8010000:	e004      	b.n	801000c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8010002:	687a      	ldr	r2, [r7, #4]
 8010004:	4904      	ldr	r1, [pc, #16]	; (8010018 <lwip_cyclic_timer+0x60>)
 8010006:	68f8      	ldr	r0, [r7, #12]
 8010008:	f7ff ff68 	bl	800fedc <sys_timeout_abs>
}
 801000c:	bf00      	nop
 801000e:	3718      	adds	r7, #24
 8010010:	46bd      	mov	sp, r7
 8010012:	bd80      	pop	{r7, pc}
 8010014:	24000124 	.word	0x24000124
 8010018:	0800ffb9 	.word	0x0800ffb9

0801001c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b082      	sub	sp, #8
 8010020:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010022:	2301      	movs	r3, #1
 8010024:	607b      	str	r3, [r7, #4]
 8010026:	e00e      	b.n	8010046 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8010028:	4a0b      	ldr	r2, [pc, #44]	; (8010058 <sys_timeouts_init+0x3c>)
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	00db      	lsls	r3, r3, #3
 8010034:	4a08      	ldr	r2, [pc, #32]	; (8010058 <sys_timeouts_init+0x3c>)
 8010036:	4413      	add	r3, r2
 8010038:	461a      	mov	r2, r3
 801003a:	4908      	ldr	r1, [pc, #32]	; (801005c <sys_timeouts_init+0x40>)
 801003c:	f000 f810 	bl	8010060 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	3301      	adds	r3, #1
 8010044:	607b      	str	r3, [r7, #4]
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	2b02      	cmp	r3, #2
 801004a:	d9ed      	bls.n	8010028 <sys_timeouts_init+0xc>
  }
}
 801004c:	bf00      	nop
 801004e:	bf00      	nop
 8010050:	3708      	adds	r7, #8
 8010052:	46bd      	mov	sp, r7
 8010054:	bd80      	pop	{r7, pc}
 8010056:	bf00      	nop
 8010058:	0801680c 	.word	0x0801680c
 801005c:	0800ffb9 	.word	0x0800ffb9

08010060 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b086      	sub	sp, #24
 8010064:	af00      	add	r7, sp, #0
 8010066:	60f8      	str	r0, [r7, #12]
 8010068:	60b9      	str	r1, [r7, #8]
 801006a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010072:	d306      	bcc.n	8010082 <sys_timeout+0x22>
 8010074:	4b0a      	ldr	r3, [pc, #40]	; (80100a0 <sys_timeout+0x40>)
 8010076:	f240 1229 	movw	r2, #297	; 0x129
 801007a:	490a      	ldr	r1, [pc, #40]	; (80100a4 <sys_timeout+0x44>)
 801007c:	480a      	ldr	r0, [pc, #40]	; (80100a8 <sys_timeout+0x48>)
 801007e:	f002 fdd1 	bl	8012c24 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8010082:	f7f7 ff2d 	bl	8007ee0 <sys_now>
 8010086:	4602      	mov	r2, r0
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	4413      	add	r3, r2
 801008c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801008e:	687a      	ldr	r2, [r7, #4]
 8010090:	68b9      	ldr	r1, [r7, #8]
 8010092:	6978      	ldr	r0, [r7, #20]
 8010094:	f7ff ff22 	bl	800fedc <sys_timeout_abs>
#endif
}
 8010098:	bf00      	nop
 801009a:	3718      	adds	r7, #24
 801009c:	46bd      	mov	sp, r7
 801009e:	bd80      	pop	{r7, pc}
 80100a0:	08015c00 	.word	0x08015c00
 80100a4:	08015c9c 	.word	0x08015c9c
 80100a8:	08015c74 	.word	0x08015c74

080100ac <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b084      	sub	sp, #16
 80100b0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80100b2:	f7f7 ff15 	bl	8007ee0 <sys_now>
 80100b6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 80100b8:	4b1a      	ldr	r3, [pc, #104]	; (8010124 <sys_check_timeouts+0x78>)
 80100ba:	781b      	ldrb	r3, [r3, #0]
 80100bc:	b2db      	uxtb	r3, r3
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d001      	beq.n	80100c6 <sys_check_timeouts+0x1a>
 80100c2:	f7f9 f8c3 	bl	800924c <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 80100c6:	4b18      	ldr	r3, [pc, #96]	; (8010128 <sys_check_timeouts+0x7c>)
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80100cc:	68bb      	ldr	r3, [r7, #8]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d022      	beq.n	8010118 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80100d2:	68bb      	ldr	r3, [r7, #8]
 80100d4:	685b      	ldr	r3, [r3, #4]
 80100d6:	68fa      	ldr	r2, [r7, #12]
 80100d8:	1ad3      	subs	r3, r2, r3
 80100da:	0fdb      	lsrs	r3, r3, #31
 80100dc:	f003 0301 	and.w	r3, r3, #1
 80100e0:	b2db      	uxtb	r3, r3
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d11a      	bne.n	801011c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80100e6:	68bb      	ldr	r3, [r7, #8]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	4a0f      	ldr	r2, [pc, #60]	; (8010128 <sys_check_timeouts+0x7c>)
 80100ec:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80100ee:	68bb      	ldr	r3, [r7, #8]
 80100f0:	689b      	ldr	r3, [r3, #8]
 80100f2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80100f4:	68bb      	ldr	r3, [r7, #8]
 80100f6:	68db      	ldr	r3, [r3, #12]
 80100f8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80100fa:	68bb      	ldr	r3, [r7, #8]
 80100fc:	685b      	ldr	r3, [r3, #4]
 80100fe:	4a0b      	ldr	r2, [pc, #44]	; (801012c <sys_check_timeouts+0x80>)
 8010100:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8010102:	68b9      	ldr	r1, [r7, #8]
 8010104:	2006      	movs	r0, #6
 8010106:	f7f8 fd65 	bl	8008bd4 <memp_free>
    if (handler != NULL) {
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d0d3      	beq.n	80100b8 <sys_check_timeouts+0xc>
      handler(arg);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	6838      	ldr	r0, [r7, #0]
 8010114:	4798      	blx	r3
  do {
 8010116:	e7cf      	b.n	80100b8 <sys_check_timeouts+0xc>
      return;
 8010118:	bf00      	nop
 801011a:	e000      	b.n	801011e <sys_check_timeouts+0x72>
      return;
 801011c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801011e:	3710      	adds	r7, #16
 8010120:	46bd      	mov	sp, r7
 8010122:	bd80      	pop	{r7, pc}
 8010124:	24003464 	.word	0x24003464
 8010128:	24000120 	.word	0x24000120
 801012c:	24000124 	.word	0x24000124

08010130 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010134:	f002 fd8e 	bl	8012c54 <rand>
 8010138:	4603      	mov	r3, r0
 801013a:	b29b      	uxth	r3, r3
 801013c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010140:	b29b      	uxth	r3, r3
 8010142:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8010146:	b29a      	uxth	r2, r3
 8010148:	4b01      	ldr	r3, [pc, #4]	; (8010150 <udp_init+0x20>)
 801014a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801014c:	bf00      	nop
 801014e:	bd80      	pop	{r7, pc}
 8010150:	2400002c 	.word	0x2400002c

08010154 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b084      	sub	sp, #16
 8010158:	af00      	add	r7, sp, #0
 801015a:	60f8      	str	r0, [r7, #12]
 801015c:	60b9      	str	r1, [r7, #8]
 801015e:	4613      	mov	r3, r2
 8010160:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d105      	bne.n	8010174 <udp_input_local_match+0x20>
 8010168:	4b27      	ldr	r3, [pc, #156]	; (8010208 <udp_input_local_match+0xb4>)
 801016a:	2287      	movs	r2, #135	; 0x87
 801016c:	4927      	ldr	r1, [pc, #156]	; (801020c <udp_input_local_match+0xb8>)
 801016e:	4828      	ldr	r0, [pc, #160]	; (8010210 <udp_input_local_match+0xbc>)
 8010170:	f002 fd58 	bl	8012c24 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010174:	68bb      	ldr	r3, [r7, #8]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d105      	bne.n	8010186 <udp_input_local_match+0x32>
 801017a:	4b23      	ldr	r3, [pc, #140]	; (8010208 <udp_input_local_match+0xb4>)
 801017c:	2288      	movs	r2, #136	; 0x88
 801017e:	4925      	ldr	r1, [pc, #148]	; (8010214 <udp_input_local_match+0xc0>)
 8010180:	4823      	ldr	r0, [pc, #140]	; (8010210 <udp_input_local_match+0xbc>)
 8010182:	f002 fd4f 	bl	8012c24 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	7a1b      	ldrb	r3, [r3, #8]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d00b      	beq.n	80101a6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	7a1a      	ldrb	r2, [r3, #8]
 8010192:	4b21      	ldr	r3, [pc, #132]	; (8010218 <udp_input_local_match+0xc4>)
 8010194:	685b      	ldr	r3, [r3, #4]
 8010196:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801019a:	3301      	adds	r3, #1
 801019c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801019e:	429a      	cmp	r2, r3
 80101a0:	d001      	beq.n	80101a6 <udp_input_local_match+0x52>
    return 0;
 80101a2:	2300      	movs	r3, #0
 80101a4:	e02b      	b.n	80101fe <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80101a6:	79fb      	ldrb	r3, [r7, #7]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d018      	beq.n	80101de <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d013      	beq.n	80101da <udp_input_local_match+0x86>
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d00f      	beq.n	80101da <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80101ba:	4b17      	ldr	r3, [pc, #92]	; (8010218 <udp_input_local_match+0xc4>)
 80101bc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80101be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101c2:	d00a      	beq.n	80101da <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	681a      	ldr	r2, [r3, #0]
 80101c8:	4b13      	ldr	r3, [pc, #76]	; (8010218 <udp_input_local_match+0xc4>)
 80101ca:	695b      	ldr	r3, [r3, #20]
 80101cc:	405a      	eors	r2, r3
 80101ce:	68bb      	ldr	r3, [r7, #8]
 80101d0:	3308      	adds	r3, #8
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d110      	bne.n	80101fc <udp_input_local_match+0xa8>
          return 1;
 80101da:	2301      	movs	r3, #1
 80101dc:	e00f      	b.n	80101fe <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d009      	beq.n	80101f8 <udp_input_local_match+0xa4>
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d005      	beq.n	80101f8 <udp_input_local_match+0xa4>
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	681a      	ldr	r2, [r3, #0]
 80101f0:	4b09      	ldr	r3, [pc, #36]	; (8010218 <udp_input_local_match+0xc4>)
 80101f2:	695b      	ldr	r3, [r3, #20]
 80101f4:	429a      	cmp	r2, r3
 80101f6:	d101      	bne.n	80101fc <udp_input_local_match+0xa8>
        return 1;
 80101f8:	2301      	movs	r3, #1
 80101fa:	e000      	b.n	80101fe <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80101fc:	2300      	movs	r3, #0
}
 80101fe:	4618      	mov	r0, r3
 8010200:	3710      	adds	r7, #16
 8010202:	46bd      	mov	sp, r7
 8010204:	bd80      	pop	{r7, pc}
 8010206:	bf00      	nop
 8010208:	08015ce8 	.word	0x08015ce8
 801020c:	08015d18 	.word	0x08015d18
 8010210:	08015d3c 	.word	0x08015d3c
 8010214:	08015d64 	.word	0x08015d64
 8010218:	2400057c 	.word	0x2400057c

0801021c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801021c:	b590      	push	{r4, r7, lr}
 801021e:	b08d      	sub	sp, #52	; 0x34
 8010220:	af02      	add	r7, sp, #8
 8010222:	6078      	str	r0, [r7, #4]
 8010224:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8010226:	2300      	movs	r3, #0
 8010228:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d105      	bne.n	801023c <udp_input+0x20>
 8010230:	4b7c      	ldr	r3, [pc, #496]	; (8010424 <udp_input+0x208>)
 8010232:	22cf      	movs	r2, #207	; 0xcf
 8010234:	497c      	ldr	r1, [pc, #496]	; (8010428 <udp_input+0x20c>)
 8010236:	487d      	ldr	r0, [pc, #500]	; (801042c <udp_input+0x210>)
 8010238:	f002 fcf4 	bl	8012c24 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d105      	bne.n	801024e <udp_input+0x32>
 8010242:	4b78      	ldr	r3, [pc, #480]	; (8010424 <udp_input+0x208>)
 8010244:	22d0      	movs	r2, #208	; 0xd0
 8010246:	497a      	ldr	r1, [pc, #488]	; (8010430 <udp_input+0x214>)
 8010248:	4878      	ldr	r0, [pc, #480]	; (801042c <udp_input+0x210>)
 801024a:	f002 fceb 	bl	8012c24 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	895b      	ldrh	r3, [r3, #10]
 8010252:	2b07      	cmp	r3, #7
 8010254:	d803      	bhi.n	801025e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8010256:	6878      	ldr	r0, [r7, #4]
 8010258:	f7f9 fb32 	bl	80098c0 <pbuf_free>
    goto end;
 801025c:	e0de      	b.n	801041c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	685b      	ldr	r3, [r3, #4]
 8010262:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010264:	4b73      	ldr	r3, [pc, #460]	; (8010434 <udp_input+0x218>)
 8010266:	695b      	ldr	r3, [r3, #20]
 8010268:	4a72      	ldr	r2, [pc, #456]	; (8010434 <udp_input+0x218>)
 801026a:	6812      	ldr	r2, [r2, #0]
 801026c:	4611      	mov	r1, r2
 801026e:	4618      	mov	r0, r3
 8010270:	f001 fcae 	bl	8011bd0 <ip4_addr_isbroadcast_u32>
 8010274:	4603      	mov	r3, r0
 8010276:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010278:	697b      	ldr	r3, [r7, #20]
 801027a:	881b      	ldrh	r3, [r3, #0]
 801027c:	b29b      	uxth	r3, r3
 801027e:	4618      	mov	r0, r3
 8010280:	f7f7 ff08 	bl	8008094 <lwip_htons>
 8010284:	4603      	mov	r3, r0
 8010286:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8010288:	697b      	ldr	r3, [r7, #20]
 801028a:	885b      	ldrh	r3, [r3, #2]
 801028c:	b29b      	uxth	r3, r3
 801028e:	4618      	mov	r0, r3
 8010290:	f7f7 ff00 	bl	8008094 <lwip_htons>
 8010294:	4603      	mov	r3, r0
 8010296:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8010298:	2300      	movs	r3, #0
 801029a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801029c:	2300      	movs	r3, #0
 801029e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80102a0:	2300      	movs	r3, #0
 80102a2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80102a4:	4b64      	ldr	r3, [pc, #400]	; (8010438 <udp_input+0x21c>)
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	627b      	str	r3, [r7, #36]	; 0x24
 80102aa:	e054      	b.n	8010356 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80102ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ae:	8a5b      	ldrh	r3, [r3, #18]
 80102b0:	89fa      	ldrh	r2, [r7, #14]
 80102b2:	429a      	cmp	r2, r3
 80102b4:	d14a      	bne.n	801034c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80102b6:	7cfb      	ldrb	r3, [r7, #19]
 80102b8:	461a      	mov	r2, r3
 80102ba:	6839      	ldr	r1, [r7, #0]
 80102bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80102be:	f7ff ff49 	bl	8010154 <udp_input_local_match>
 80102c2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d041      	beq.n	801034c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80102c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ca:	7c1b      	ldrb	r3, [r3, #16]
 80102cc:	f003 0304 	and.w	r3, r3, #4
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d11d      	bne.n	8010310 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80102d4:	69fb      	ldr	r3, [r7, #28]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d102      	bne.n	80102e0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80102da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102dc:	61fb      	str	r3, [r7, #28]
 80102de:	e017      	b.n	8010310 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80102e0:	7cfb      	ldrb	r3, [r7, #19]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d014      	beq.n	8010310 <udp_input+0xf4>
 80102e6:	4b53      	ldr	r3, [pc, #332]	; (8010434 <udp_input+0x218>)
 80102e8:	695b      	ldr	r3, [r3, #20]
 80102ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102ee:	d10f      	bne.n	8010310 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80102f0:	69fb      	ldr	r3, [r7, #28]
 80102f2:	681a      	ldr	r2, [r3, #0]
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	3304      	adds	r3, #4
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	429a      	cmp	r2, r3
 80102fc:	d008      	beq.n	8010310 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80102fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010300:	681a      	ldr	r2, [r3, #0]
 8010302:	683b      	ldr	r3, [r7, #0]
 8010304:	3304      	adds	r3, #4
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	429a      	cmp	r2, r3
 801030a:	d101      	bne.n	8010310 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801030c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801030e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8010310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010312:	8a9b      	ldrh	r3, [r3, #20]
 8010314:	8a3a      	ldrh	r2, [r7, #16]
 8010316:	429a      	cmp	r2, r3
 8010318:	d118      	bne.n	801034c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801031a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801031c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801031e:	2b00      	cmp	r3, #0
 8010320:	d005      	beq.n	801032e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8010322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010324:	685a      	ldr	r2, [r3, #4]
 8010326:	4b43      	ldr	r3, [pc, #268]	; (8010434 <udp_input+0x218>)
 8010328:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801032a:	429a      	cmp	r2, r3
 801032c:	d10e      	bne.n	801034c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801032e:	6a3b      	ldr	r3, [r7, #32]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d014      	beq.n	801035e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8010334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010336:	68da      	ldr	r2, [r3, #12]
 8010338:	6a3b      	ldr	r3, [r7, #32]
 801033a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801033c:	4b3e      	ldr	r3, [pc, #248]	; (8010438 <udp_input+0x21c>)
 801033e:	681a      	ldr	r2, [r3, #0]
 8010340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010342:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8010344:	4a3c      	ldr	r2, [pc, #240]	; (8010438 <udp_input+0x21c>)
 8010346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010348:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801034a:	e008      	b.n	801035e <udp_input+0x142>
      }
    }

    prev = pcb;
 801034c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801034e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010352:	68db      	ldr	r3, [r3, #12]
 8010354:	627b      	str	r3, [r7, #36]	; 0x24
 8010356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010358:	2b00      	cmp	r3, #0
 801035a:	d1a7      	bne.n	80102ac <udp_input+0x90>
 801035c:	e000      	b.n	8010360 <udp_input+0x144>
        break;
 801035e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8010360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010362:	2b00      	cmp	r3, #0
 8010364:	d101      	bne.n	801036a <udp_input+0x14e>
    pcb = uncon_pcb;
 8010366:	69fb      	ldr	r3, [r7, #28]
 8010368:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801036a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801036c:	2b00      	cmp	r3, #0
 801036e:	d002      	beq.n	8010376 <udp_input+0x15a>
    for_us = 1;
 8010370:	2301      	movs	r3, #1
 8010372:	76fb      	strb	r3, [r7, #27]
 8010374:	e00a      	b.n	801038c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	3304      	adds	r3, #4
 801037a:	681a      	ldr	r2, [r3, #0]
 801037c:	4b2d      	ldr	r3, [pc, #180]	; (8010434 <udp_input+0x218>)
 801037e:	695b      	ldr	r3, [r3, #20]
 8010380:	429a      	cmp	r2, r3
 8010382:	bf0c      	ite	eq
 8010384:	2301      	moveq	r3, #1
 8010386:	2300      	movne	r3, #0
 8010388:	b2db      	uxtb	r3, r3
 801038a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801038c:	7efb      	ldrb	r3, [r7, #27]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d041      	beq.n	8010416 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8010392:	2108      	movs	r1, #8
 8010394:	6878      	ldr	r0, [r7, #4]
 8010396:	f7f9 fa0d 	bl	80097b4 <pbuf_remove_header>
 801039a:	4603      	mov	r3, r0
 801039c:	2b00      	cmp	r3, #0
 801039e:	d00a      	beq.n	80103b6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80103a0:	4b20      	ldr	r3, [pc, #128]	; (8010424 <udp_input+0x208>)
 80103a2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80103a6:	4925      	ldr	r1, [pc, #148]	; (801043c <udp_input+0x220>)
 80103a8:	4820      	ldr	r0, [pc, #128]	; (801042c <udp_input+0x210>)
 80103aa:	f002 fc3b 	bl	8012c24 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f7f9 fa86 	bl	80098c0 <pbuf_free>
      goto end;
 80103b4:	e032      	b.n	801041c <udp_input+0x200>
    }

    if (pcb != NULL) {
 80103b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d012      	beq.n	80103e2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80103bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103be:	699b      	ldr	r3, [r3, #24]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d00a      	beq.n	80103da <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80103c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103c6:	699c      	ldr	r4, [r3, #24]
 80103c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ca:	69d8      	ldr	r0, [r3, #28]
 80103cc:	8a3b      	ldrh	r3, [r7, #16]
 80103ce:	9300      	str	r3, [sp, #0]
 80103d0:	4b1b      	ldr	r3, [pc, #108]	; (8010440 <udp_input+0x224>)
 80103d2:	687a      	ldr	r2, [r7, #4]
 80103d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80103d6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80103d8:	e021      	b.n	801041e <udp_input+0x202>
        pbuf_free(p);
 80103da:	6878      	ldr	r0, [r7, #4]
 80103dc:	f7f9 fa70 	bl	80098c0 <pbuf_free>
        goto end;
 80103e0:	e01c      	b.n	801041c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80103e2:	7cfb      	ldrb	r3, [r7, #19]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d112      	bne.n	801040e <udp_input+0x1f2>
 80103e8:	4b12      	ldr	r3, [pc, #72]	; (8010434 <udp_input+0x218>)
 80103ea:	695b      	ldr	r3, [r3, #20]
 80103ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80103f0:	2be0      	cmp	r3, #224	; 0xe0
 80103f2:	d00c      	beq.n	801040e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80103f4:	4b0f      	ldr	r3, [pc, #60]	; (8010434 <udp_input+0x218>)
 80103f6:	899b      	ldrh	r3, [r3, #12]
 80103f8:	3308      	adds	r3, #8
 80103fa:	b29b      	uxth	r3, r3
 80103fc:	b21b      	sxth	r3, r3
 80103fe:	4619      	mov	r1, r3
 8010400:	6878      	ldr	r0, [r7, #4]
 8010402:	f7f9 fa4a 	bl	800989a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8010406:	2103      	movs	r1, #3
 8010408:	6878      	ldr	r0, [r7, #4]
 801040a:	f001 f8b7 	bl	801157c <icmp_dest_unreach>
      pbuf_free(p);
 801040e:	6878      	ldr	r0, [r7, #4]
 8010410:	f7f9 fa56 	bl	80098c0 <pbuf_free>
  return;
 8010414:	e003      	b.n	801041e <udp_input+0x202>
    pbuf_free(p);
 8010416:	6878      	ldr	r0, [r7, #4]
 8010418:	f7f9 fa52 	bl	80098c0 <pbuf_free>
  return;
 801041c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801041e:	372c      	adds	r7, #44	; 0x2c
 8010420:	46bd      	mov	sp, r7
 8010422:	bd90      	pop	{r4, r7, pc}
 8010424:	08015ce8 	.word	0x08015ce8
 8010428:	08015d8c 	.word	0x08015d8c
 801042c:	08015d3c 	.word	0x08015d3c
 8010430:	08015da4 	.word	0x08015da4
 8010434:	2400057c 	.word	0x2400057c
 8010438:	24003484 	.word	0x24003484
 801043c:	08015dc0 	.word	0x08015dc0
 8010440:	2400058c 	.word	0x2400058c

08010444 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010444:	b480      	push	{r7}
 8010446:	b085      	sub	sp, #20
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
 801044c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d01e      	beq.n	8010492 <udp_netif_ip_addr_changed+0x4e>
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d01a      	beq.n	8010492 <udp_netif_ip_addr_changed+0x4e>
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d017      	beq.n	8010492 <udp_netif_ip_addr_changed+0x4e>
 8010462:	683b      	ldr	r3, [r7, #0]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d013      	beq.n	8010492 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801046a:	4b0d      	ldr	r3, [pc, #52]	; (80104a0 <udp_netif_ip_addr_changed+0x5c>)
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	60fb      	str	r3, [r7, #12]
 8010470:	e00c      	b.n	801048c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	681a      	ldr	r2, [r3, #0]
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	429a      	cmp	r2, r3
 801047c:	d103      	bne.n	8010486 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801047e:	683b      	ldr	r3, [r7, #0]
 8010480:	681a      	ldr	r2, [r3, #0]
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	68db      	ldr	r3, [r3, #12]
 801048a:	60fb      	str	r3, [r7, #12]
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d1ef      	bne.n	8010472 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8010492:	bf00      	nop
 8010494:	3714      	adds	r7, #20
 8010496:	46bd      	mov	sp, r7
 8010498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049c:	4770      	bx	lr
 801049e:	bf00      	nop
 80104a0:	24003484 	.word	0x24003484

080104a4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b082      	sub	sp, #8
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80104ac:	4915      	ldr	r1, [pc, #84]	; (8010504 <etharp_free_entry+0x60>)
 80104ae:	687a      	ldr	r2, [r7, #4]
 80104b0:	4613      	mov	r3, r2
 80104b2:	005b      	lsls	r3, r3, #1
 80104b4:	4413      	add	r3, r2
 80104b6:	00db      	lsls	r3, r3, #3
 80104b8:	440b      	add	r3, r1
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d013      	beq.n	80104e8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80104c0:	4910      	ldr	r1, [pc, #64]	; (8010504 <etharp_free_entry+0x60>)
 80104c2:	687a      	ldr	r2, [r7, #4]
 80104c4:	4613      	mov	r3, r2
 80104c6:	005b      	lsls	r3, r3, #1
 80104c8:	4413      	add	r3, r2
 80104ca:	00db      	lsls	r3, r3, #3
 80104cc:	440b      	add	r3, r1
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	4618      	mov	r0, r3
 80104d2:	f7f9 f9f5 	bl	80098c0 <pbuf_free>
    arp_table[i].q = NULL;
 80104d6:	490b      	ldr	r1, [pc, #44]	; (8010504 <etharp_free_entry+0x60>)
 80104d8:	687a      	ldr	r2, [r7, #4]
 80104da:	4613      	mov	r3, r2
 80104dc:	005b      	lsls	r3, r3, #1
 80104de:	4413      	add	r3, r2
 80104e0:	00db      	lsls	r3, r3, #3
 80104e2:	440b      	add	r3, r1
 80104e4:	2200      	movs	r2, #0
 80104e6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80104e8:	4906      	ldr	r1, [pc, #24]	; (8010504 <etharp_free_entry+0x60>)
 80104ea:	687a      	ldr	r2, [r7, #4]
 80104ec:	4613      	mov	r3, r2
 80104ee:	005b      	lsls	r3, r3, #1
 80104f0:	4413      	add	r3, r2
 80104f2:	00db      	lsls	r3, r3, #3
 80104f4:	440b      	add	r3, r1
 80104f6:	3314      	adds	r3, #20
 80104f8:	2200      	movs	r2, #0
 80104fa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80104fc:	bf00      	nop
 80104fe:	3708      	adds	r7, #8
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}
 8010504:	2400012c 	.word	0x2400012c

08010508 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b082      	sub	sp, #8
 801050c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801050e:	2300      	movs	r3, #0
 8010510:	607b      	str	r3, [r7, #4]
 8010512:	e096      	b.n	8010642 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010514:	494f      	ldr	r1, [pc, #316]	; (8010654 <etharp_tmr+0x14c>)
 8010516:	687a      	ldr	r2, [r7, #4]
 8010518:	4613      	mov	r3, r2
 801051a:	005b      	lsls	r3, r3, #1
 801051c:	4413      	add	r3, r2
 801051e:	00db      	lsls	r3, r3, #3
 8010520:	440b      	add	r3, r1
 8010522:	3314      	adds	r3, #20
 8010524:	781b      	ldrb	r3, [r3, #0]
 8010526:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8010528:	78fb      	ldrb	r3, [r7, #3]
 801052a:	2b00      	cmp	r3, #0
 801052c:	f000 8086 	beq.w	801063c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010530:	4948      	ldr	r1, [pc, #288]	; (8010654 <etharp_tmr+0x14c>)
 8010532:	687a      	ldr	r2, [r7, #4]
 8010534:	4613      	mov	r3, r2
 8010536:	005b      	lsls	r3, r3, #1
 8010538:	4413      	add	r3, r2
 801053a:	00db      	lsls	r3, r3, #3
 801053c:	440b      	add	r3, r1
 801053e:	3312      	adds	r3, #18
 8010540:	881b      	ldrh	r3, [r3, #0]
 8010542:	3301      	adds	r3, #1
 8010544:	b298      	uxth	r0, r3
 8010546:	4943      	ldr	r1, [pc, #268]	; (8010654 <etharp_tmr+0x14c>)
 8010548:	687a      	ldr	r2, [r7, #4]
 801054a:	4613      	mov	r3, r2
 801054c:	005b      	lsls	r3, r3, #1
 801054e:	4413      	add	r3, r2
 8010550:	00db      	lsls	r3, r3, #3
 8010552:	440b      	add	r3, r1
 8010554:	3312      	adds	r3, #18
 8010556:	4602      	mov	r2, r0
 8010558:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801055a:	493e      	ldr	r1, [pc, #248]	; (8010654 <etharp_tmr+0x14c>)
 801055c:	687a      	ldr	r2, [r7, #4]
 801055e:	4613      	mov	r3, r2
 8010560:	005b      	lsls	r3, r3, #1
 8010562:	4413      	add	r3, r2
 8010564:	00db      	lsls	r3, r3, #3
 8010566:	440b      	add	r3, r1
 8010568:	3312      	adds	r3, #18
 801056a:	881b      	ldrh	r3, [r3, #0]
 801056c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010570:	d215      	bcs.n	801059e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010572:	4938      	ldr	r1, [pc, #224]	; (8010654 <etharp_tmr+0x14c>)
 8010574:	687a      	ldr	r2, [r7, #4]
 8010576:	4613      	mov	r3, r2
 8010578:	005b      	lsls	r3, r3, #1
 801057a:	4413      	add	r3, r2
 801057c:	00db      	lsls	r3, r3, #3
 801057e:	440b      	add	r3, r1
 8010580:	3314      	adds	r3, #20
 8010582:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010584:	2b01      	cmp	r3, #1
 8010586:	d10e      	bne.n	80105a6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010588:	4932      	ldr	r1, [pc, #200]	; (8010654 <etharp_tmr+0x14c>)
 801058a:	687a      	ldr	r2, [r7, #4]
 801058c:	4613      	mov	r3, r2
 801058e:	005b      	lsls	r3, r3, #1
 8010590:	4413      	add	r3, r2
 8010592:	00db      	lsls	r3, r3, #3
 8010594:	440b      	add	r3, r1
 8010596:	3312      	adds	r3, #18
 8010598:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801059a:	2b04      	cmp	r3, #4
 801059c:	d903      	bls.n	80105a6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801059e:	6878      	ldr	r0, [r7, #4]
 80105a0:	f7ff ff80 	bl	80104a4 <etharp_free_entry>
 80105a4:	e04a      	b.n	801063c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80105a6:	492b      	ldr	r1, [pc, #172]	; (8010654 <etharp_tmr+0x14c>)
 80105a8:	687a      	ldr	r2, [r7, #4]
 80105aa:	4613      	mov	r3, r2
 80105ac:	005b      	lsls	r3, r3, #1
 80105ae:	4413      	add	r3, r2
 80105b0:	00db      	lsls	r3, r3, #3
 80105b2:	440b      	add	r3, r1
 80105b4:	3314      	adds	r3, #20
 80105b6:	781b      	ldrb	r3, [r3, #0]
 80105b8:	2b03      	cmp	r3, #3
 80105ba:	d10a      	bne.n	80105d2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80105bc:	4925      	ldr	r1, [pc, #148]	; (8010654 <etharp_tmr+0x14c>)
 80105be:	687a      	ldr	r2, [r7, #4]
 80105c0:	4613      	mov	r3, r2
 80105c2:	005b      	lsls	r3, r3, #1
 80105c4:	4413      	add	r3, r2
 80105c6:	00db      	lsls	r3, r3, #3
 80105c8:	440b      	add	r3, r1
 80105ca:	3314      	adds	r3, #20
 80105cc:	2204      	movs	r2, #4
 80105ce:	701a      	strb	r2, [r3, #0]
 80105d0:	e034      	b.n	801063c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80105d2:	4920      	ldr	r1, [pc, #128]	; (8010654 <etharp_tmr+0x14c>)
 80105d4:	687a      	ldr	r2, [r7, #4]
 80105d6:	4613      	mov	r3, r2
 80105d8:	005b      	lsls	r3, r3, #1
 80105da:	4413      	add	r3, r2
 80105dc:	00db      	lsls	r3, r3, #3
 80105de:	440b      	add	r3, r1
 80105e0:	3314      	adds	r3, #20
 80105e2:	781b      	ldrb	r3, [r3, #0]
 80105e4:	2b04      	cmp	r3, #4
 80105e6:	d10a      	bne.n	80105fe <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80105e8:	491a      	ldr	r1, [pc, #104]	; (8010654 <etharp_tmr+0x14c>)
 80105ea:	687a      	ldr	r2, [r7, #4]
 80105ec:	4613      	mov	r3, r2
 80105ee:	005b      	lsls	r3, r3, #1
 80105f0:	4413      	add	r3, r2
 80105f2:	00db      	lsls	r3, r3, #3
 80105f4:	440b      	add	r3, r1
 80105f6:	3314      	adds	r3, #20
 80105f8:	2202      	movs	r2, #2
 80105fa:	701a      	strb	r2, [r3, #0]
 80105fc:	e01e      	b.n	801063c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80105fe:	4915      	ldr	r1, [pc, #84]	; (8010654 <etharp_tmr+0x14c>)
 8010600:	687a      	ldr	r2, [r7, #4]
 8010602:	4613      	mov	r3, r2
 8010604:	005b      	lsls	r3, r3, #1
 8010606:	4413      	add	r3, r2
 8010608:	00db      	lsls	r3, r3, #3
 801060a:	440b      	add	r3, r1
 801060c:	3314      	adds	r3, #20
 801060e:	781b      	ldrb	r3, [r3, #0]
 8010610:	2b01      	cmp	r3, #1
 8010612:	d113      	bne.n	801063c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010614:	490f      	ldr	r1, [pc, #60]	; (8010654 <etharp_tmr+0x14c>)
 8010616:	687a      	ldr	r2, [r7, #4]
 8010618:	4613      	mov	r3, r2
 801061a:	005b      	lsls	r3, r3, #1
 801061c:	4413      	add	r3, r2
 801061e:	00db      	lsls	r3, r3, #3
 8010620:	440b      	add	r3, r1
 8010622:	3308      	adds	r3, #8
 8010624:	6818      	ldr	r0, [r3, #0]
 8010626:	687a      	ldr	r2, [r7, #4]
 8010628:	4613      	mov	r3, r2
 801062a:	005b      	lsls	r3, r3, #1
 801062c:	4413      	add	r3, r2
 801062e:	00db      	lsls	r3, r3, #3
 8010630:	4a08      	ldr	r2, [pc, #32]	; (8010654 <etharp_tmr+0x14c>)
 8010632:	4413      	add	r3, r2
 8010634:	3304      	adds	r3, #4
 8010636:	4619      	mov	r1, r3
 8010638:	f000 fe6e 	bl	8011318 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	3301      	adds	r3, #1
 8010640:	607b      	str	r3, [r7, #4]
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	2b09      	cmp	r3, #9
 8010646:	f77f af65 	ble.w	8010514 <etharp_tmr+0xc>
      }
    }
  }
}
 801064a:	bf00      	nop
 801064c:	bf00      	nop
 801064e:	3708      	adds	r7, #8
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}
 8010654:	2400012c 	.word	0x2400012c

08010658 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b08a      	sub	sp, #40	; 0x28
 801065c:	af00      	add	r7, sp, #0
 801065e:	60f8      	str	r0, [r7, #12]
 8010660:	460b      	mov	r3, r1
 8010662:	607a      	str	r2, [r7, #4]
 8010664:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8010666:	230a      	movs	r3, #10
 8010668:	84fb      	strh	r3, [r7, #38]	; 0x26
 801066a:	230a      	movs	r3, #10
 801066c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801066e:	230a      	movs	r3, #10
 8010670:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8010672:	2300      	movs	r3, #0
 8010674:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8010676:	230a      	movs	r3, #10
 8010678:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801067a:	2300      	movs	r3, #0
 801067c:	83bb      	strh	r3, [r7, #28]
 801067e:	2300      	movs	r3, #0
 8010680:	837b      	strh	r3, [r7, #26]
 8010682:	2300      	movs	r3, #0
 8010684:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010686:	2300      	movs	r3, #0
 8010688:	843b      	strh	r3, [r7, #32]
 801068a:	e0ae      	b.n	80107ea <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801068c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010690:	49a6      	ldr	r1, [pc, #664]	; (801092c <etharp_find_entry+0x2d4>)
 8010692:	4613      	mov	r3, r2
 8010694:	005b      	lsls	r3, r3, #1
 8010696:	4413      	add	r3, r2
 8010698:	00db      	lsls	r3, r3, #3
 801069a:	440b      	add	r3, r1
 801069c:	3314      	adds	r3, #20
 801069e:	781b      	ldrb	r3, [r3, #0]
 80106a0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80106a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80106a6:	2b0a      	cmp	r3, #10
 80106a8:	d105      	bne.n	80106b6 <etharp_find_entry+0x5e>
 80106aa:	7dfb      	ldrb	r3, [r7, #23]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d102      	bne.n	80106b6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80106b0:	8c3b      	ldrh	r3, [r7, #32]
 80106b2:	847b      	strh	r3, [r7, #34]	; 0x22
 80106b4:	e095      	b.n	80107e2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80106b6:	7dfb      	ldrb	r3, [r7, #23]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	f000 8092 	beq.w	80107e2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80106be:	7dfb      	ldrb	r3, [r7, #23]
 80106c0:	2b01      	cmp	r3, #1
 80106c2:	d009      	beq.n	80106d8 <etharp_find_entry+0x80>
 80106c4:	7dfb      	ldrb	r3, [r7, #23]
 80106c6:	2b01      	cmp	r3, #1
 80106c8:	d806      	bhi.n	80106d8 <etharp_find_entry+0x80>
 80106ca:	4b99      	ldr	r3, [pc, #612]	; (8010930 <etharp_find_entry+0x2d8>)
 80106cc:	f240 1223 	movw	r2, #291	; 0x123
 80106d0:	4998      	ldr	r1, [pc, #608]	; (8010934 <etharp_find_entry+0x2dc>)
 80106d2:	4899      	ldr	r0, [pc, #612]	; (8010938 <etharp_find_entry+0x2e0>)
 80106d4:	f002 faa6 	bl	8012c24 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d020      	beq.n	8010720 <etharp_find_entry+0xc8>
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	6819      	ldr	r1, [r3, #0]
 80106e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80106e6:	4891      	ldr	r0, [pc, #580]	; (801092c <etharp_find_entry+0x2d4>)
 80106e8:	4613      	mov	r3, r2
 80106ea:	005b      	lsls	r3, r3, #1
 80106ec:	4413      	add	r3, r2
 80106ee:	00db      	lsls	r3, r3, #3
 80106f0:	4403      	add	r3, r0
 80106f2:	3304      	adds	r3, #4
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	4299      	cmp	r1, r3
 80106f8:	d112      	bne.n	8010720 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d00c      	beq.n	801071a <etharp_find_entry+0xc2>
 8010700:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010704:	4989      	ldr	r1, [pc, #548]	; (801092c <etharp_find_entry+0x2d4>)
 8010706:	4613      	mov	r3, r2
 8010708:	005b      	lsls	r3, r3, #1
 801070a:	4413      	add	r3, r2
 801070c:	00db      	lsls	r3, r3, #3
 801070e:	440b      	add	r3, r1
 8010710:	3308      	adds	r3, #8
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	687a      	ldr	r2, [r7, #4]
 8010716:	429a      	cmp	r2, r3
 8010718:	d102      	bne.n	8010720 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801071a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801071e:	e100      	b.n	8010922 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010720:	7dfb      	ldrb	r3, [r7, #23]
 8010722:	2b01      	cmp	r3, #1
 8010724:	d140      	bne.n	80107a8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8010726:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801072a:	4980      	ldr	r1, [pc, #512]	; (801092c <etharp_find_entry+0x2d4>)
 801072c:	4613      	mov	r3, r2
 801072e:	005b      	lsls	r3, r3, #1
 8010730:	4413      	add	r3, r2
 8010732:	00db      	lsls	r3, r3, #3
 8010734:	440b      	add	r3, r1
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d01a      	beq.n	8010772 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801073c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010740:	497a      	ldr	r1, [pc, #488]	; (801092c <etharp_find_entry+0x2d4>)
 8010742:	4613      	mov	r3, r2
 8010744:	005b      	lsls	r3, r3, #1
 8010746:	4413      	add	r3, r2
 8010748:	00db      	lsls	r3, r3, #3
 801074a:	440b      	add	r3, r1
 801074c:	3312      	adds	r3, #18
 801074e:	881b      	ldrh	r3, [r3, #0]
 8010750:	8bba      	ldrh	r2, [r7, #28]
 8010752:	429a      	cmp	r2, r3
 8010754:	d845      	bhi.n	80107e2 <etharp_find_entry+0x18a>
            old_queue = i;
 8010756:	8c3b      	ldrh	r3, [r7, #32]
 8010758:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801075a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801075e:	4973      	ldr	r1, [pc, #460]	; (801092c <etharp_find_entry+0x2d4>)
 8010760:	4613      	mov	r3, r2
 8010762:	005b      	lsls	r3, r3, #1
 8010764:	4413      	add	r3, r2
 8010766:	00db      	lsls	r3, r3, #3
 8010768:	440b      	add	r3, r1
 801076a:	3312      	adds	r3, #18
 801076c:	881b      	ldrh	r3, [r3, #0]
 801076e:	83bb      	strh	r3, [r7, #28]
 8010770:	e037      	b.n	80107e2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8010772:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010776:	496d      	ldr	r1, [pc, #436]	; (801092c <etharp_find_entry+0x2d4>)
 8010778:	4613      	mov	r3, r2
 801077a:	005b      	lsls	r3, r3, #1
 801077c:	4413      	add	r3, r2
 801077e:	00db      	lsls	r3, r3, #3
 8010780:	440b      	add	r3, r1
 8010782:	3312      	adds	r3, #18
 8010784:	881b      	ldrh	r3, [r3, #0]
 8010786:	8b7a      	ldrh	r2, [r7, #26]
 8010788:	429a      	cmp	r2, r3
 801078a:	d82a      	bhi.n	80107e2 <etharp_find_entry+0x18a>
            old_pending = i;
 801078c:	8c3b      	ldrh	r3, [r7, #32]
 801078e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8010790:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010794:	4965      	ldr	r1, [pc, #404]	; (801092c <etharp_find_entry+0x2d4>)
 8010796:	4613      	mov	r3, r2
 8010798:	005b      	lsls	r3, r3, #1
 801079a:	4413      	add	r3, r2
 801079c:	00db      	lsls	r3, r3, #3
 801079e:	440b      	add	r3, r1
 80107a0:	3312      	adds	r3, #18
 80107a2:	881b      	ldrh	r3, [r3, #0]
 80107a4:	837b      	strh	r3, [r7, #26]
 80107a6:	e01c      	b.n	80107e2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80107a8:	7dfb      	ldrb	r3, [r7, #23]
 80107aa:	2b01      	cmp	r3, #1
 80107ac:	d919      	bls.n	80107e2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80107ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80107b2:	495e      	ldr	r1, [pc, #376]	; (801092c <etharp_find_entry+0x2d4>)
 80107b4:	4613      	mov	r3, r2
 80107b6:	005b      	lsls	r3, r3, #1
 80107b8:	4413      	add	r3, r2
 80107ba:	00db      	lsls	r3, r3, #3
 80107bc:	440b      	add	r3, r1
 80107be:	3312      	adds	r3, #18
 80107c0:	881b      	ldrh	r3, [r3, #0]
 80107c2:	8b3a      	ldrh	r2, [r7, #24]
 80107c4:	429a      	cmp	r2, r3
 80107c6:	d80c      	bhi.n	80107e2 <etharp_find_entry+0x18a>
            old_stable = i;
 80107c8:	8c3b      	ldrh	r3, [r7, #32]
 80107ca:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80107cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80107d0:	4956      	ldr	r1, [pc, #344]	; (801092c <etharp_find_entry+0x2d4>)
 80107d2:	4613      	mov	r3, r2
 80107d4:	005b      	lsls	r3, r3, #1
 80107d6:	4413      	add	r3, r2
 80107d8:	00db      	lsls	r3, r3, #3
 80107da:	440b      	add	r3, r1
 80107dc:	3312      	adds	r3, #18
 80107de:	881b      	ldrh	r3, [r3, #0]
 80107e0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80107e2:	8c3b      	ldrh	r3, [r7, #32]
 80107e4:	3301      	adds	r3, #1
 80107e6:	b29b      	uxth	r3, r3
 80107e8:	843b      	strh	r3, [r7, #32]
 80107ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80107ee:	2b09      	cmp	r3, #9
 80107f0:	f77f af4c 	ble.w	801068c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80107f4:	7afb      	ldrb	r3, [r7, #11]
 80107f6:	f003 0302 	and.w	r3, r3, #2
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d108      	bne.n	8010810 <etharp_find_entry+0x1b8>
 80107fe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010802:	2b0a      	cmp	r3, #10
 8010804:	d107      	bne.n	8010816 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8010806:	7afb      	ldrb	r3, [r7, #11]
 8010808:	f003 0301 	and.w	r3, r3, #1
 801080c:	2b00      	cmp	r3, #0
 801080e:	d102      	bne.n	8010816 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010810:	f04f 33ff 	mov.w	r3, #4294967295
 8010814:	e085      	b.n	8010922 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8010816:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801081a:	2b09      	cmp	r3, #9
 801081c:	dc02      	bgt.n	8010824 <etharp_find_entry+0x1cc>
    i = empty;
 801081e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010820:	843b      	strh	r3, [r7, #32]
 8010822:	e039      	b.n	8010898 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010824:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8010828:	2b09      	cmp	r3, #9
 801082a:	dc14      	bgt.n	8010856 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801082c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801082e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010830:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010834:	493d      	ldr	r1, [pc, #244]	; (801092c <etharp_find_entry+0x2d4>)
 8010836:	4613      	mov	r3, r2
 8010838:	005b      	lsls	r3, r3, #1
 801083a:	4413      	add	r3, r2
 801083c:	00db      	lsls	r3, r3, #3
 801083e:	440b      	add	r3, r1
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d018      	beq.n	8010878 <etharp_find_entry+0x220>
 8010846:	4b3a      	ldr	r3, [pc, #232]	; (8010930 <etharp_find_entry+0x2d8>)
 8010848:	f240 126d 	movw	r2, #365	; 0x16d
 801084c:	493b      	ldr	r1, [pc, #236]	; (801093c <etharp_find_entry+0x2e4>)
 801084e:	483a      	ldr	r0, [pc, #232]	; (8010938 <etharp_find_entry+0x2e0>)
 8010850:	f002 f9e8 	bl	8012c24 <iprintf>
 8010854:	e010      	b.n	8010878 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8010856:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801085a:	2b09      	cmp	r3, #9
 801085c:	dc02      	bgt.n	8010864 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801085e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010860:	843b      	strh	r3, [r7, #32]
 8010862:	e009      	b.n	8010878 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010864:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010868:	2b09      	cmp	r3, #9
 801086a:	dc02      	bgt.n	8010872 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801086c:	8bfb      	ldrh	r3, [r7, #30]
 801086e:	843b      	strh	r3, [r7, #32]
 8010870:	e002      	b.n	8010878 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8010872:	f04f 33ff 	mov.w	r3, #4294967295
 8010876:	e054      	b.n	8010922 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010878:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801087c:	2b09      	cmp	r3, #9
 801087e:	dd06      	ble.n	801088e <etharp_find_entry+0x236>
 8010880:	4b2b      	ldr	r3, [pc, #172]	; (8010930 <etharp_find_entry+0x2d8>)
 8010882:	f240 127f 	movw	r2, #383	; 0x17f
 8010886:	492e      	ldr	r1, [pc, #184]	; (8010940 <etharp_find_entry+0x2e8>)
 8010888:	482b      	ldr	r0, [pc, #172]	; (8010938 <etharp_find_entry+0x2e0>)
 801088a:	f002 f9cb 	bl	8012c24 <iprintf>
    etharp_free_entry(i);
 801088e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010892:	4618      	mov	r0, r3
 8010894:	f7ff fe06 	bl	80104a4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010898:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801089c:	2b09      	cmp	r3, #9
 801089e:	dd06      	ble.n	80108ae <etharp_find_entry+0x256>
 80108a0:	4b23      	ldr	r3, [pc, #140]	; (8010930 <etharp_find_entry+0x2d8>)
 80108a2:	f240 1283 	movw	r2, #387	; 0x183
 80108a6:	4926      	ldr	r1, [pc, #152]	; (8010940 <etharp_find_entry+0x2e8>)
 80108a8:	4823      	ldr	r0, [pc, #140]	; (8010938 <etharp_find_entry+0x2e0>)
 80108aa:	f002 f9bb 	bl	8012c24 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80108ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80108b2:	491e      	ldr	r1, [pc, #120]	; (801092c <etharp_find_entry+0x2d4>)
 80108b4:	4613      	mov	r3, r2
 80108b6:	005b      	lsls	r3, r3, #1
 80108b8:	4413      	add	r3, r2
 80108ba:	00db      	lsls	r3, r3, #3
 80108bc:	440b      	add	r3, r1
 80108be:	3314      	adds	r3, #20
 80108c0:	781b      	ldrb	r3, [r3, #0]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d006      	beq.n	80108d4 <etharp_find_entry+0x27c>
 80108c6:	4b1a      	ldr	r3, [pc, #104]	; (8010930 <etharp_find_entry+0x2d8>)
 80108c8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80108cc:	491d      	ldr	r1, [pc, #116]	; (8010944 <etharp_find_entry+0x2ec>)
 80108ce:	481a      	ldr	r0, [pc, #104]	; (8010938 <etharp_find_entry+0x2e0>)
 80108d0:	f002 f9a8 	bl	8012c24 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d00b      	beq.n	80108f2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80108da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	6819      	ldr	r1, [r3, #0]
 80108e2:	4812      	ldr	r0, [pc, #72]	; (801092c <etharp_find_entry+0x2d4>)
 80108e4:	4613      	mov	r3, r2
 80108e6:	005b      	lsls	r3, r3, #1
 80108e8:	4413      	add	r3, r2
 80108ea:	00db      	lsls	r3, r3, #3
 80108ec:	4403      	add	r3, r0
 80108ee:	3304      	adds	r3, #4
 80108f0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80108f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80108f6:	490d      	ldr	r1, [pc, #52]	; (801092c <etharp_find_entry+0x2d4>)
 80108f8:	4613      	mov	r3, r2
 80108fa:	005b      	lsls	r3, r3, #1
 80108fc:	4413      	add	r3, r2
 80108fe:	00db      	lsls	r3, r3, #3
 8010900:	440b      	add	r3, r1
 8010902:	3312      	adds	r3, #18
 8010904:	2200      	movs	r2, #0
 8010906:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010908:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801090c:	4907      	ldr	r1, [pc, #28]	; (801092c <etharp_find_entry+0x2d4>)
 801090e:	4613      	mov	r3, r2
 8010910:	005b      	lsls	r3, r3, #1
 8010912:	4413      	add	r3, r2
 8010914:	00db      	lsls	r3, r3, #3
 8010916:	440b      	add	r3, r1
 8010918:	3308      	adds	r3, #8
 801091a:	687a      	ldr	r2, [r7, #4]
 801091c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801091e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8010922:	4618      	mov	r0, r3
 8010924:	3728      	adds	r7, #40	; 0x28
 8010926:	46bd      	mov	sp, r7
 8010928:	bd80      	pop	{r7, pc}
 801092a:	bf00      	nop
 801092c:	2400012c 	.word	0x2400012c
 8010930:	0801604c 	.word	0x0801604c
 8010934:	08016084 	.word	0x08016084
 8010938:	080160c4 	.word	0x080160c4
 801093c:	080160ec 	.word	0x080160ec
 8010940:	08016104 	.word	0x08016104
 8010944:	08016118 	.word	0x08016118

08010948 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010948:	b580      	push	{r7, lr}
 801094a:	b088      	sub	sp, #32
 801094c:	af02      	add	r7, sp, #8
 801094e:	60f8      	str	r0, [r7, #12]
 8010950:	60b9      	str	r1, [r7, #8]
 8010952:	607a      	str	r2, [r7, #4]
 8010954:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801095c:	2b06      	cmp	r3, #6
 801095e:	d006      	beq.n	801096e <etharp_update_arp_entry+0x26>
 8010960:	4b48      	ldr	r3, [pc, #288]	; (8010a84 <etharp_update_arp_entry+0x13c>)
 8010962:	f240 12a9 	movw	r2, #425	; 0x1a9
 8010966:	4948      	ldr	r1, [pc, #288]	; (8010a88 <etharp_update_arp_entry+0x140>)
 8010968:	4848      	ldr	r0, [pc, #288]	; (8010a8c <etharp_update_arp_entry+0x144>)
 801096a:	f002 f95b 	bl	8012c24 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801096e:	68bb      	ldr	r3, [r7, #8]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d012      	beq.n	801099a <etharp_update_arp_entry+0x52>
 8010974:	68bb      	ldr	r3, [r7, #8]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d00e      	beq.n	801099a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801097c:	68bb      	ldr	r3, [r7, #8]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	68f9      	ldr	r1, [r7, #12]
 8010982:	4618      	mov	r0, r3
 8010984:	f001 f924 	bl	8011bd0 <ip4_addr_isbroadcast_u32>
 8010988:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801098a:	2b00      	cmp	r3, #0
 801098c:	d105      	bne.n	801099a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801098e:	68bb      	ldr	r3, [r7, #8]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010996:	2be0      	cmp	r3, #224	; 0xe0
 8010998:	d102      	bne.n	80109a0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801099a:	f06f 030f 	mvn.w	r3, #15
 801099e:	e06c      	b.n	8010a7a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80109a0:	78fb      	ldrb	r3, [r7, #3]
 80109a2:	68fa      	ldr	r2, [r7, #12]
 80109a4:	4619      	mov	r1, r3
 80109a6:	68b8      	ldr	r0, [r7, #8]
 80109a8:	f7ff fe56 	bl	8010658 <etharp_find_entry>
 80109ac:	4603      	mov	r3, r0
 80109ae:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80109b0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	da02      	bge.n	80109be <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80109b8:	8afb      	ldrh	r3, [r7, #22]
 80109ba:	b25b      	sxtb	r3, r3
 80109bc:	e05d      	b.n	8010a7a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80109be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80109c2:	4933      	ldr	r1, [pc, #204]	; (8010a90 <etharp_update_arp_entry+0x148>)
 80109c4:	4613      	mov	r3, r2
 80109c6:	005b      	lsls	r3, r3, #1
 80109c8:	4413      	add	r3, r2
 80109ca:	00db      	lsls	r3, r3, #3
 80109cc:	440b      	add	r3, r1
 80109ce:	3314      	adds	r3, #20
 80109d0:	2202      	movs	r2, #2
 80109d2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80109d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80109d8:	492d      	ldr	r1, [pc, #180]	; (8010a90 <etharp_update_arp_entry+0x148>)
 80109da:	4613      	mov	r3, r2
 80109dc:	005b      	lsls	r3, r3, #1
 80109de:	4413      	add	r3, r2
 80109e0:	00db      	lsls	r3, r3, #3
 80109e2:	440b      	add	r3, r1
 80109e4:	3308      	adds	r3, #8
 80109e6:	68fa      	ldr	r2, [r7, #12]
 80109e8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80109ea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80109ee:	4613      	mov	r3, r2
 80109f0:	005b      	lsls	r3, r3, #1
 80109f2:	4413      	add	r3, r2
 80109f4:	00db      	lsls	r3, r3, #3
 80109f6:	3308      	adds	r3, #8
 80109f8:	4a25      	ldr	r2, [pc, #148]	; (8010a90 <etharp_update_arp_entry+0x148>)
 80109fa:	4413      	add	r3, r2
 80109fc:	3304      	adds	r3, #4
 80109fe:	2206      	movs	r2, #6
 8010a00:	6879      	ldr	r1, [r7, #4]
 8010a02:	4618      	mov	r0, r3
 8010a04:	f002 f8f8 	bl	8012bf8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010a08:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010a0c:	4920      	ldr	r1, [pc, #128]	; (8010a90 <etharp_update_arp_entry+0x148>)
 8010a0e:	4613      	mov	r3, r2
 8010a10:	005b      	lsls	r3, r3, #1
 8010a12:	4413      	add	r3, r2
 8010a14:	00db      	lsls	r3, r3, #3
 8010a16:	440b      	add	r3, r1
 8010a18:	3312      	adds	r3, #18
 8010a1a:	2200      	movs	r2, #0
 8010a1c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8010a1e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010a22:	491b      	ldr	r1, [pc, #108]	; (8010a90 <etharp_update_arp_entry+0x148>)
 8010a24:	4613      	mov	r3, r2
 8010a26:	005b      	lsls	r3, r3, #1
 8010a28:	4413      	add	r3, r2
 8010a2a:	00db      	lsls	r3, r3, #3
 8010a2c:	440b      	add	r3, r1
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d021      	beq.n	8010a78 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010a34:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010a38:	4915      	ldr	r1, [pc, #84]	; (8010a90 <etharp_update_arp_entry+0x148>)
 8010a3a:	4613      	mov	r3, r2
 8010a3c:	005b      	lsls	r3, r3, #1
 8010a3e:	4413      	add	r3, r2
 8010a40:	00db      	lsls	r3, r3, #3
 8010a42:	440b      	add	r3, r1
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010a48:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010a4c:	4910      	ldr	r1, [pc, #64]	; (8010a90 <etharp_update_arp_entry+0x148>)
 8010a4e:	4613      	mov	r3, r2
 8010a50:	005b      	lsls	r3, r3, #1
 8010a52:	4413      	add	r3, r2
 8010a54:	00db      	lsls	r3, r3, #3
 8010a56:	440b      	add	r3, r1
 8010a58:	2200      	movs	r2, #0
 8010a5a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8010a62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010a66:	9300      	str	r3, [sp, #0]
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	6939      	ldr	r1, [r7, #16]
 8010a6c:	68f8      	ldr	r0, [r7, #12]
 8010a6e:	f002 f849 	bl	8012b04 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010a72:	6938      	ldr	r0, [r7, #16]
 8010a74:	f7f8 ff24 	bl	80098c0 <pbuf_free>
  }
  return ERR_OK;
 8010a78:	2300      	movs	r3, #0
}
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	3718      	adds	r7, #24
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	bd80      	pop	{r7, pc}
 8010a82:	bf00      	nop
 8010a84:	0801604c 	.word	0x0801604c
 8010a88:	08016144 	.word	0x08016144
 8010a8c:	080160c4 	.word	0x080160c4
 8010a90:	2400012c 	.word	0x2400012c

08010a94 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b084      	sub	sp, #16
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	60fb      	str	r3, [r7, #12]
 8010aa0:	e01e      	b.n	8010ae0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8010aa2:	4913      	ldr	r1, [pc, #76]	; (8010af0 <etharp_cleanup_netif+0x5c>)
 8010aa4:	68fa      	ldr	r2, [r7, #12]
 8010aa6:	4613      	mov	r3, r2
 8010aa8:	005b      	lsls	r3, r3, #1
 8010aaa:	4413      	add	r3, r2
 8010aac:	00db      	lsls	r3, r3, #3
 8010aae:	440b      	add	r3, r1
 8010ab0:	3314      	adds	r3, #20
 8010ab2:	781b      	ldrb	r3, [r3, #0]
 8010ab4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010ab6:	7afb      	ldrb	r3, [r7, #11]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d00e      	beq.n	8010ada <etharp_cleanup_netif+0x46>
 8010abc:	490c      	ldr	r1, [pc, #48]	; (8010af0 <etharp_cleanup_netif+0x5c>)
 8010abe:	68fa      	ldr	r2, [r7, #12]
 8010ac0:	4613      	mov	r3, r2
 8010ac2:	005b      	lsls	r3, r3, #1
 8010ac4:	4413      	add	r3, r2
 8010ac6:	00db      	lsls	r3, r3, #3
 8010ac8:	440b      	add	r3, r1
 8010aca:	3308      	adds	r3, #8
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	687a      	ldr	r2, [r7, #4]
 8010ad0:	429a      	cmp	r2, r3
 8010ad2:	d102      	bne.n	8010ada <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8010ad4:	68f8      	ldr	r0, [r7, #12]
 8010ad6:	f7ff fce5 	bl	80104a4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	3301      	adds	r3, #1
 8010ade:	60fb      	str	r3, [r7, #12]
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	2b09      	cmp	r3, #9
 8010ae4:	dddd      	ble.n	8010aa2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8010ae6:	bf00      	nop
 8010ae8:	bf00      	nop
 8010aea:	3710      	adds	r7, #16
 8010aec:	46bd      	mov	sp, r7
 8010aee:	bd80      	pop	{r7, pc}
 8010af0:	2400012c 	.word	0x2400012c

08010af4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010af4:	b5b0      	push	{r4, r5, r7, lr}
 8010af6:	b08a      	sub	sp, #40	; 0x28
 8010af8:	af04      	add	r7, sp, #16
 8010afa:	6078      	str	r0, [r7, #4]
 8010afc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d107      	bne.n	8010b14 <etharp_input+0x20>
 8010b04:	4b3d      	ldr	r3, [pc, #244]	; (8010bfc <etharp_input+0x108>)
 8010b06:	f240 228a 	movw	r2, #650	; 0x28a
 8010b0a:	493d      	ldr	r1, [pc, #244]	; (8010c00 <etharp_input+0x10c>)
 8010b0c:	483d      	ldr	r0, [pc, #244]	; (8010c04 <etharp_input+0x110>)
 8010b0e:	f002 f889 	bl	8012c24 <iprintf>
 8010b12:	e06f      	b.n	8010bf4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	685b      	ldr	r3, [r3, #4]
 8010b18:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010b1a:	693b      	ldr	r3, [r7, #16]
 8010b1c:	881b      	ldrh	r3, [r3, #0]
 8010b1e:	b29b      	uxth	r3, r3
 8010b20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b24:	d10c      	bne.n	8010b40 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010b26:	693b      	ldr	r3, [r7, #16]
 8010b28:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010b2a:	2b06      	cmp	r3, #6
 8010b2c:	d108      	bne.n	8010b40 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010b2e:	693b      	ldr	r3, [r7, #16]
 8010b30:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010b32:	2b04      	cmp	r3, #4
 8010b34:	d104      	bne.n	8010b40 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8010b36:	693b      	ldr	r3, [r7, #16]
 8010b38:	885b      	ldrh	r3, [r3, #2]
 8010b3a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010b3c:	2b08      	cmp	r3, #8
 8010b3e:	d003      	beq.n	8010b48 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010b40:	6878      	ldr	r0, [r7, #4]
 8010b42:	f7f8 febd 	bl	80098c0 <pbuf_free>
    return;
 8010b46:	e055      	b.n	8010bf4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8010b48:	693b      	ldr	r3, [r7, #16]
 8010b4a:	330e      	adds	r3, #14
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8010b50:	693b      	ldr	r3, [r7, #16]
 8010b52:	3318      	adds	r3, #24
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010b58:	683b      	ldr	r3, [r7, #0]
 8010b5a:	3304      	adds	r3, #4
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d102      	bne.n	8010b68 <etharp_input+0x74>
    for_us = 0;
 8010b62:	2300      	movs	r3, #0
 8010b64:	75fb      	strb	r3, [r7, #23]
 8010b66:	e009      	b.n	8010b7c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010b68:	68ba      	ldr	r2, [r7, #8]
 8010b6a:	683b      	ldr	r3, [r7, #0]
 8010b6c:	3304      	adds	r3, #4
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	429a      	cmp	r2, r3
 8010b72:	bf0c      	ite	eq
 8010b74:	2301      	moveq	r3, #1
 8010b76:	2300      	movne	r3, #0
 8010b78:	b2db      	uxtb	r3, r3
 8010b7a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010b7c:	693b      	ldr	r3, [r7, #16]
 8010b7e:	f103 0208 	add.w	r2, r3, #8
 8010b82:	7dfb      	ldrb	r3, [r7, #23]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d001      	beq.n	8010b8c <etharp_input+0x98>
 8010b88:	2301      	movs	r3, #1
 8010b8a:	e000      	b.n	8010b8e <etharp_input+0x9a>
 8010b8c:	2302      	movs	r3, #2
 8010b8e:	f107 010c 	add.w	r1, r7, #12
 8010b92:	6838      	ldr	r0, [r7, #0]
 8010b94:	f7ff fed8 	bl	8010948 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010b98:	693b      	ldr	r3, [r7, #16]
 8010b9a:	88db      	ldrh	r3, [r3, #6]
 8010b9c:	b29b      	uxth	r3, r3
 8010b9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ba2:	d003      	beq.n	8010bac <etharp_input+0xb8>
 8010ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010ba8:	d01e      	beq.n	8010be8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8010baa:	e020      	b.n	8010bee <etharp_input+0xfa>
      if (for_us) {
 8010bac:	7dfb      	ldrb	r3, [r7, #23]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d01c      	beq.n	8010bec <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8010bb2:	683b      	ldr	r3, [r7, #0]
 8010bb4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8010bb8:	693b      	ldr	r3, [r7, #16]
 8010bba:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8010bbe:	683b      	ldr	r3, [r7, #0]
 8010bc0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8010bc4:	683b      	ldr	r3, [r7, #0]
 8010bc6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8010bc8:	693a      	ldr	r2, [r7, #16]
 8010bca:	3208      	adds	r2, #8
        etharp_raw(netif,
 8010bcc:	2102      	movs	r1, #2
 8010bce:	9103      	str	r1, [sp, #12]
 8010bd0:	f107 010c 	add.w	r1, r7, #12
 8010bd4:	9102      	str	r1, [sp, #8]
 8010bd6:	9201      	str	r2, [sp, #4]
 8010bd8:	9300      	str	r3, [sp, #0]
 8010bda:	462b      	mov	r3, r5
 8010bdc:	4622      	mov	r2, r4
 8010bde:	4601      	mov	r1, r0
 8010be0:	6838      	ldr	r0, [r7, #0]
 8010be2:	f000 faeb 	bl	80111bc <etharp_raw>
      break;
 8010be6:	e001      	b.n	8010bec <etharp_input+0xf8>
      break;
 8010be8:	bf00      	nop
 8010bea:	e000      	b.n	8010bee <etharp_input+0xfa>
      break;
 8010bec:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8010bee:	6878      	ldr	r0, [r7, #4]
 8010bf0:	f7f8 fe66 	bl	80098c0 <pbuf_free>
}
 8010bf4:	3718      	adds	r7, #24
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	bdb0      	pop	{r4, r5, r7, pc}
 8010bfa:	bf00      	nop
 8010bfc:	0801604c 	.word	0x0801604c
 8010c00:	0801619c 	.word	0x0801619c
 8010c04:	080160c4 	.word	0x080160c4

08010c08 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b086      	sub	sp, #24
 8010c0c:	af02      	add	r7, sp, #8
 8010c0e:	60f8      	str	r0, [r7, #12]
 8010c10:	60b9      	str	r1, [r7, #8]
 8010c12:	4613      	mov	r3, r2
 8010c14:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8010c16:	79fa      	ldrb	r2, [r7, #7]
 8010c18:	4944      	ldr	r1, [pc, #272]	; (8010d2c <etharp_output_to_arp_index+0x124>)
 8010c1a:	4613      	mov	r3, r2
 8010c1c:	005b      	lsls	r3, r3, #1
 8010c1e:	4413      	add	r3, r2
 8010c20:	00db      	lsls	r3, r3, #3
 8010c22:	440b      	add	r3, r1
 8010c24:	3314      	adds	r3, #20
 8010c26:	781b      	ldrb	r3, [r3, #0]
 8010c28:	2b01      	cmp	r3, #1
 8010c2a:	d806      	bhi.n	8010c3a <etharp_output_to_arp_index+0x32>
 8010c2c:	4b40      	ldr	r3, [pc, #256]	; (8010d30 <etharp_output_to_arp_index+0x128>)
 8010c2e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010c32:	4940      	ldr	r1, [pc, #256]	; (8010d34 <etharp_output_to_arp_index+0x12c>)
 8010c34:	4840      	ldr	r0, [pc, #256]	; (8010d38 <etharp_output_to_arp_index+0x130>)
 8010c36:	f001 fff5 	bl	8012c24 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010c3a:	79fa      	ldrb	r2, [r7, #7]
 8010c3c:	493b      	ldr	r1, [pc, #236]	; (8010d2c <etharp_output_to_arp_index+0x124>)
 8010c3e:	4613      	mov	r3, r2
 8010c40:	005b      	lsls	r3, r3, #1
 8010c42:	4413      	add	r3, r2
 8010c44:	00db      	lsls	r3, r3, #3
 8010c46:	440b      	add	r3, r1
 8010c48:	3314      	adds	r3, #20
 8010c4a:	781b      	ldrb	r3, [r3, #0]
 8010c4c:	2b02      	cmp	r3, #2
 8010c4e:	d153      	bne.n	8010cf8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010c50:	79fa      	ldrb	r2, [r7, #7]
 8010c52:	4936      	ldr	r1, [pc, #216]	; (8010d2c <etharp_output_to_arp_index+0x124>)
 8010c54:	4613      	mov	r3, r2
 8010c56:	005b      	lsls	r3, r3, #1
 8010c58:	4413      	add	r3, r2
 8010c5a:	00db      	lsls	r3, r3, #3
 8010c5c:	440b      	add	r3, r1
 8010c5e:	3312      	adds	r3, #18
 8010c60:	881b      	ldrh	r3, [r3, #0]
 8010c62:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8010c66:	d919      	bls.n	8010c9c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010c68:	79fa      	ldrb	r2, [r7, #7]
 8010c6a:	4613      	mov	r3, r2
 8010c6c:	005b      	lsls	r3, r3, #1
 8010c6e:	4413      	add	r3, r2
 8010c70:	00db      	lsls	r3, r3, #3
 8010c72:	4a2e      	ldr	r2, [pc, #184]	; (8010d2c <etharp_output_to_arp_index+0x124>)
 8010c74:	4413      	add	r3, r2
 8010c76:	3304      	adds	r3, #4
 8010c78:	4619      	mov	r1, r3
 8010c7a:	68f8      	ldr	r0, [r7, #12]
 8010c7c:	f000 fb4c 	bl	8011318 <etharp_request>
 8010c80:	4603      	mov	r3, r0
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d138      	bne.n	8010cf8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010c86:	79fa      	ldrb	r2, [r7, #7]
 8010c88:	4928      	ldr	r1, [pc, #160]	; (8010d2c <etharp_output_to_arp_index+0x124>)
 8010c8a:	4613      	mov	r3, r2
 8010c8c:	005b      	lsls	r3, r3, #1
 8010c8e:	4413      	add	r3, r2
 8010c90:	00db      	lsls	r3, r3, #3
 8010c92:	440b      	add	r3, r1
 8010c94:	3314      	adds	r3, #20
 8010c96:	2203      	movs	r2, #3
 8010c98:	701a      	strb	r2, [r3, #0]
 8010c9a:	e02d      	b.n	8010cf8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010c9c:	79fa      	ldrb	r2, [r7, #7]
 8010c9e:	4923      	ldr	r1, [pc, #140]	; (8010d2c <etharp_output_to_arp_index+0x124>)
 8010ca0:	4613      	mov	r3, r2
 8010ca2:	005b      	lsls	r3, r3, #1
 8010ca4:	4413      	add	r3, r2
 8010ca6:	00db      	lsls	r3, r3, #3
 8010ca8:	440b      	add	r3, r1
 8010caa:	3312      	adds	r3, #18
 8010cac:	881b      	ldrh	r3, [r3, #0]
 8010cae:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8010cb2:	d321      	bcc.n	8010cf8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010cb4:	79fa      	ldrb	r2, [r7, #7]
 8010cb6:	4613      	mov	r3, r2
 8010cb8:	005b      	lsls	r3, r3, #1
 8010cba:	4413      	add	r3, r2
 8010cbc:	00db      	lsls	r3, r3, #3
 8010cbe:	4a1b      	ldr	r2, [pc, #108]	; (8010d2c <etharp_output_to_arp_index+0x124>)
 8010cc0:	4413      	add	r3, r2
 8010cc2:	1d19      	adds	r1, r3, #4
 8010cc4:	79fa      	ldrb	r2, [r7, #7]
 8010cc6:	4613      	mov	r3, r2
 8010cc8:	005b      	lsls	r3, r3, #1
 8010cca:	4413      	add	r3, r2
 8010ccc:	00db      	lsls	r3, r3, #3
 8010cce:	3308      	adds	r3, #8
 8010cd0:	4a16      	ldr	r2, [pc, #88]	; (8010d2c <etharp_output_to_arp_index+0x124>)
 8010cd2:	4413      	add	r3, r2
 8010cd4:	3304      	adds	r3, #4
 8010cd6:	461a      	mov	r2, r3
 8010cd8:	68f8      	ldr	r0, [r7, #12]
 8010cda:	f000 fafb 	bl	80112d4 <etharp_request_dst>
 8010cde:	4603      	mov	r3, r0
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d109      	bne.n	8010cf8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010ce4:	79fa      	ldrb	r2, [r7, #7]
 8010ce6:	4911      	ldr	r1, [pc, #68]	; (8010d2c <etharp_output_to_arp_index+0x124>)
 8010ce8:	4613      	mov	r3, r2
 8010cea:	005b      	lsls	r3, r3, #1
 8010cec:	4413      	add	r3, r2
 8010cee:	00db      	lsls	r3, r3, #3
 8010cf0:	440b      	add	r3, r1
 8010cf2:	3314      	adds	r3, #20
 8010cf4:	2203      	movs	r2, #3
 8010cf6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8010cfe:	79fa      	ldrb	r2, [r7, #7]
 8010d00:	4613      	mov	r3, r2
 8010d02:	005b      	lsls	r3, r3, #1
 8010d04:	4413      	add	r3, r2
 8010d06:	00db      	lsls	r3, r3, #3
 8010d08:	3308      	adds	r3, #8
 8010d0a:	4a08      	ldr	r2, [pc, #32]	; (8010d2c <etharp_output_to_arp_index+0x124>)
 8010d0c:	4413      	add	r3, r2
 8010d0e:	3304      	adds	r3, #4
 8010d10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010d14:	9200      	str	r2, [sp, #0]
 8010d16:	460a      	mov	r2, r1
 8010d18:	68b9      	ldr	r1, [r7, #8]
 8010d1a:	68f8      	ldr	r0, [r7, #12]
 8010d1c:	f001 fef2 	bl	8012b04 <ethernet_output>
 8010d20:	4603      	mov	r3, r0
}
 8010d22:	4618      	mov	r0, r3
 8010d24:	3710      	adds	r7, #16
 8010d26:	46bd      	mov	sp, r7
 8010d28:	bd80      	pop	{r7, pc}
 8010d2a:	bf00      	nop
 8010d2c:	2400012c 	.word	0x2400012c
 8010d30:	0801604c 	.word	0x0801604c
 8010d34:	080161bc 	.word	0x080161bc
 8010d38:	080160c4 	.word	0x080160c4

08010d3c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b08a      	sub	sp, #40	; 0x28
 8010d40:	af02      	add	r7, sp, #8
 8010d42:	60f8      	str	r0, [r7, #12]
 8010d44:	60b9      	str	r1, [r7, #8]
 8010d46:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d106      	bne.n	8010d60 <etharp_output+0x24>
 8010d52:	4b73      	ldr	r3, [pc, #460]	; (8010f20 <etharp_output+0x1e4>)
 8010d54:	f240 321e 	movw	r2, #798	; 0x31e
 8010d58:	4972      	ldr	r1, [pc, #456]	; (8010f24 <etharp_output+0x1e8>)
 8010d5a:	4873      	ldr	r0, [pc, #460]	; (8010f28 <etharp_output+0x1ec>)
 8010d5c:	f001 ff62 	bl	8012c24 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010d60:	68bb      	ldr	r3, [r7, #8]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d106      	bne.n	8010d74 <etharp_output+0x38>
 8010d66:	4b6e      	ldr	r3, [pc, #440]	; (8010f20 <etharp_output+0x1e4>)
 8010d68:	f240 321f 	movw	r2, #799	; 0x31f
 8010d6c:	496f      	ldr	r1, [pc, #444]	; (8010f2c <etharp_output+0x1f0>)
 8010d6e:	486e      	ldr	r0, [pc, #440]	; (8010f28 <etharp_output+0x1ec>)
 8010d70:	f001 ff58 	bl	8012c24 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d106      	bne.n	8010d88 <etharp_output+0x4c>
 8010d7a:	4b69      	ldr	r3, [pc, #420]	; (8010f20 <etharp_output+0x1e4>)
 8010d7c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8010d80:	496b      	ldr	r1, [pc, #428]	; (8010f30 <etharp_output+0x1f4>)
 8010d82:	4869      	ldr	r0, [pc, #420]	; (8010f28 <etharp_output+0x1ec>)
 8010d84:	f001 ff4e 	bl	8012c24 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	68f9      	ldr	r1, [r7, #12]
 8010d8e:	4618      	mov	r0, r3
 8010d90:	f000 ff1e 	bl	8011bd0 <ip4_addr_isbroadcast_u32>
 8010d94:	4603      	mov	r3, r0
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d002      	beq.n	8010da0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8010d9a:	4b66      	ldr	r3, [pc, #408]	; (8010f34 <etharp_output+0x1f8>)
 8010d9c:	61fb      	str	r3, [r7, #28]
 8010d9e:	e0af      	b.n	8010f00 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010da8:	2be0      	cmp	r3, #224	; 0xe0
 8010daa:	d118      	bne.n	8010dde <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010dac:	2301      	movs	r3, #1
 8010dae:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8010db0:	2300      	movs	r3, #0
 8010db2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010db4:	235e      	movs	r3, #94	; 0x5e
 8010db6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	3301      	adds	r3, #1
 8010dbc:	781b      	ldrb	r3, [r3, #0]
 8010dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010dc2:	b2db      	uxtb	r3, r3
 8010dc4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	3302      	adds	r3, #2
 8010dca:	781b      	ldrb	r3, [r3, #0]
 8010dcc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	3303      	adds	r3, #3
 8010dd2:	781b      	ldrb	r3, [r3, #0]
 8010dd4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8010dd6:	f107 0310 	add.w	r3, r7, #16
 8010dda:	61fb      	str	r3, [r7, #28]
 8010ddc:	e090      	b.n	8010f00 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	681a      	ldr	r2, [r3, #0]
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	3304      	adds	r3, #4
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	405a      	eors	r2, r3
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	3308      	adds	r3, #8
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	4013      	ands	r3, r2
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d012      	beq.n	8010e1c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010dfc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8010e00:	4293      	cmp	r3, r2
 8010e02:	d00b      	beq.n	8010e1c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	330c      	adds	r3, #12
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d003      	beq.n	8010e16 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	330c      	adds	r3, #12
 8010e12:	61bb      	str	r3, [r7, #24]
 8010e14:	e002      	b.n	8010e1c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8010e16:	f06f 0303 	mvn.w	r3, #3
 8010e1a:	e07d      	b.n	8010f18 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010e1c:	4b46      	ldr	r3, [pc, #280]	; (8010f38 <etharp_output+0x1fc>)
 8010e1e:	781b      	ldrb	r3, [r3, #0]
 8010e20:	4619      	mov	r1, r3
 8010e22:	4a46      	ldr	r2, [pc, #280]	; (8010f3c <etharp_output+0x200>)
 8010e24:	460b      	mov	r3, r1
 8010e26:	005b      	lsls	r3, r3, #1
 8010e28:	440b      	add	r3, r1
 8010e2a:	00db      	lsls	r3, r3, #3
 8010e2c:	4413      	add	r3, r2
 8010e2e:	3314      	adds	r3, #20
 8010e30:	781b      	ldrb	r3, [r3, #0]
 8010e32:	2b01      	cmp	r3, #1
 8010e34:	d925      	bls.n	8010e82 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010e36:	4b40      	ldr	r3, [pc, #256]	; (8010f38 <etharp_output+0x1fc>)
 8010e38:	781b      	ldrb	r3, [r3, #0]
 8010e3a:	4619      	mov	r1, r3
 8010e3c:	4a3f      	ldr	r2, [pc, #252]	; (8010f3c <etharp_output+0x200>)
 8010e3e:	460b      	mov	r3, r1
 8010e40:	005b      	lsls	r3, r3, #1
 8010e42:	440b      	add	r3, r1
 8010e44:	00db      	lsls	r3, r3, #3
 8010e46:	4413      	add	r3, r2
 8010e48:	3308      	adds	r3, #8
 8010e4a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010e4c:	68fa      	ldr	r2, [r7, #12]
 8010e4e:	429a      	cmp	r2, r3
 8010e50:	d117      	bne.n	8010e82 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8010e52:	69bb      	ldr	r3, [r7, #24]
 8010e54:	681a      	ldr	r2, [r3, #0]
 8010e56:	4b38      	ldr	r3, [pc, #224]	; (8010f38 <etharp_output+0x1fc>)
 8010e58:	781b      	ldrb	r3, [r3, #0]
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	4937      	ldr	r1, [pc, #220]	; (8010f3c <etharp_output+0x200>)
 8010e5e:	4603      	mov	r3, r0
 8010e60:	005b      	lsls	r3, r3, #1
 8010e62:	4403      	add	r3, r0
 8010e64:	00db      	lsls	r3, r3, #3
 8010e66:	440b      	add	r3, r1
 8010e68:	3304      	adds	r3, #4
 8010e6a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010e6c:	429a      	cmp	r2, r3
 8010e6e:	d108      	bne.n	8010e82 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010e70:	4b31      	ldr	r3, [pc, #196]	; (8010f38 <etharp_output+0x1fc>)
 8010e72:	781b      	ldrb	r3, [r3, #0]
 8010e74:	461a      	mov	r2, r3
 8010e76:	68b9      	ldr	r1, [r7, #8]
 8010e78:	68f8      	ldr	r0, [r7, #12]
 8010e7a:	f7ff fec5 	bl	8010c08 <etharp_output_to_arp_index>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	e04a      	b.n	8010f18 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010e82:	2300      	movs	r3, #0
 8010e84:	75fb      	strb	r3, [r7, #23]
 8010e86:	e031      	b.n	8010eec <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010e88:	7dfa      	ldrb	r2, [r7, #23]
 8010e8a:	492c      	ldr	r1, [pc, #176]	; (8010f3c <etharp_output+0x200>)
 8010e8c:	4613      	mov	r3, r2
 8010e8e:	005b      	lsls	r3, r3, #1
 8010e90:	4413      	add	r3, r2
 8010e92:	00db      	lsls	r3, r3, #3
 8010e94:	440b      	add	r3, r1
 8010e96:	3314      	adds	r3, #20
 8010e98:	781b      	ldrb	r3, [r3, #0]
 8010e9a:	2b01      	cmp	r3, #1
 8010e9c:	d923      	bls.n	8010ee6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8010e9e:	7dfa      	ldrb	r2, [r7, #23]
 8010ea0:	4926      	ldr	r1, [pc, #152]	; (8010f3c <etharp_output+0x200>)
 8010ea2:	4613      	mov	r3, r2
 8010ea4:	005b      	lsls	r3, r3, #1
 8010ea6:	4413      	add	r3, r2
 8010ea8:	00db      	lsls	r3, r3, #3
 8010eaa:	440b      	add	r3, r1
 8010eac:	3308      	adds	r3, #8
 8010eae:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010eb0:	68fa      	ldr	r2, [r7, #12]
 8010eb2:	429a      	cmp	r2, r3
 8010eb4:	d117      	bne.n	8010ee6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8010eb6:	69bb      	ldr	r3, [r7, #24]
 8010eb8:	6819      	ldr	r1, [r3, #0]
 8010eba:	7dfa      	ldrb	r2, [r7, #23]
 8010ebc:	481f      	ldr	r0, [pc, #124]	; (8010f3c <etharp_output+0x200>)
 8010ebe:	4613      	mov	r3, r2
 8010ec0:	005b      	lsls	r3, r3, #1
 8010ec2:	4413      	add	r3, r2
 8010ec4:	00db      	lsls	r3, r3, #3
 8010ec6:	4403      	add	r3, r0
 8010ec8:	3304      	adds	r3, #4
 8010eca:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8010ecc:	4299      	cmp	r1, r3
 8010ece:	d10a      	bne.n	8010ee6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8010ed0:	4a19      	ldr	r2, [pc, #100]	; (8010f38 <etharp_output+0x1fc>)
 8010ed2:	7dfb      	ldrb	r3, [r7, #23]
 8010ed4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8010ed6:	7dfb      	ldrb	r3, [r7, #23]
 8010ed8:	461a      	mov	r2, r3
 8010eda:	68b9      	ldr	r1, [r7, #8]
 8010edc:	68f8      	ldr	r0, [r7, #12]
 8010ede:	f7ff fe93 	bl	8010c08 <etharp_output_to_arp_index>
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	e018      	b.n	8010f18 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010ee6:	7dfb      	ldrb	r3, [r7, #23]
 8010ee8:	3301      	adds	r3, #1
 8010eea:	75fb      	strb	r3, [r7, #23]
 8010eec:	7dfb      	ldrb	r3, [r7, #23]
 8010eee:	2b09      	cmp	r3, #9
 8010ef0:	d9ca      	bls.n	8010e88 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8010ef2:	68ba      	ldr	r2, [r7, #8]
 8010ef4:	69b9      	ldr	r1, [r7, #24]
 8010ef6:	68f8      	ldr	r0, [r7, #12]
 8010ef8:	f000 f822 	bl	8010f40 <etharp_query>
 8010efc:	4603      	mov	r3, r0
 8010efe:	e00b      	b.n	8010f18 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8010f06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010f0a:	9300      	str	r3, [sp, #0]
 8010f0c:	69fb      	ldr	r3, [r7, #28]
 8010f0e:	68b9      	ldr	r1, [r7, #8]
 8010f10:	68f8      	ldr	r0, [r7, #12]
 8010f12:	f001 fdf7 	bl	8012b04 <ethernet_output>
 8010f16:	4603      	mov	r3, r0
}
 8010f18:	4618      	mov	r0, r3
 8010f1a:	3720      	adds	r7, #32
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	bd80      	pop	{r7, pc}
 8010f20:	0801604c 	.word	0x0801604c
 8010f24:	0801619c 	.word	0x0801619c
 8010f28:	080160c4 	.word	0x080160c4
 8010f2c:	080161ec 	.word	0x080161ec
 8010f30:	0801618c 	.word	0x0801618c
 8010f34:	08016828 	.word	0x08016828
 8010f38:	2400021c 	.word	0x2400021c
 8010f3c:	2400012c 	.word	0x2400012c

08010f40 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b08c      	sub	sp, #48	; 0x30
 8010f44:	af02      	add	r7, sp, #8
 8010f46:	60f8      	str	r0, [r7, #12]
 8010f48:	60b9      	str	r1, [r7, #8]
 8010f4a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	3326      	adds	r3, #38	; 0x26
 8010f50:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8010f52:	23ff      	movs	r3, #255	; 0xff
 8010f54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8010f58:	2300      	movs	r3, #0
 8010f5a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010f5c:	68bb      	ldr	r3, [r7, #8]
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	68f9      	ldr	r1, [r7, #12]
 8010f62:	4618      	mov	r0, r3
 8010f64:	f000 fe34 	bl	8011bd0 <ip4_addr_isbroadcast_u32>
 8010f68:	4603      	mov	r3, r0
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d10c      	bne.n	8010f88 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010f6e:	68bb      	ldr	r3, [r7, #8]
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010f76:	2be0      	cmp	r3, #224	; 0xe0
 8010f78:	d006      	beq.n	8010f88 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010f7a:	68bb      	ldr	r3, [r7, #8]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d003      	beq.n	8010f88 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8010f80:	68bb      	ldr	r3, [r7, #8]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d102      	bne.n	8010f8e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010f88:	f06f 030f 	mvn.w	r3, #15
 8010f8c:	e101      	b.n	8011192 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8010f8e:	68fa      	ldr	r2, [r7, #12]
 8010f90:	2101      	movs	r1, #1
 8010f92:	68b8      	ldr	r0, [r7, #8]
 8010f94:	f7ff fb60 	bl	8010658 <etharp_find_entry>
 8010f98:	4603      	mov	r3, r0
 8010f9a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8010f9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	da02      	bge.n	8010faa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8010fa4:	8a7b      	ldrh	r3, [r7, #18]
 8010fa6:	b25b      	sxtb	r3, r3
 8010fa8:	e0f3      	b.n	8011192 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8010faa:	8a7b      	ldrh	r3, [r7, #18]
 8010fac:	2b7e      	cmp	r3, #126	; 0x7e
 8010fae:	d906      	bls.n	8010fbe <etharp_query+0x7e>
 8010fb0:	4b7a      	ldr	r3, [pc, #488]	; (801119c <etharp_query+0x25c>)
 8010fb2:	f240 32c1 	movw	r2, #961	; 0x3c1
 8010fb6:	497a      	ldr	r1, [pc, #488]	; (80111a0 <etharp_query+0x260>)
 8010fb8:	487a      	ldr	r0, [pc, #488]	; (80111a4 <etharp_query+0x264>)
 8010fba:	f001 fe33 	bl	8012c24 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8010fbe:	8a7b      	ldrh	r3, [r7, #18]
 8010fc0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8010fc2:	7c7a      	ldrb	r2, [r7, #17]
 8010fc4:	4978      	ldr	r1, [pc, #480]	; (80111a8 <etharp_query+0x268>)
 8010fc6:	4613      	mov	r3, r2
 8010fc8:	005b      	lsls	r3, r3, #1
 8010fca:	4413      	add	r3, r2
 8010fcc:	00db      	lsls	r3, r3, #3
 8010fce:	440b      	add	r3, r1
 8010fd0:	3314      	adds	r3, #20
 8010fd2:	781b      	ldrb	r3, [r3, #0]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d115      	bne.n	8011004 <etharp_query+0xc4>
    is_new_entry = 1;
 8010fd8:	2301      	movs	r3, #1
 8010fda:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8010fdc:	7c7a      	ldrb	r2, [r7, #17]
 8010fde:	4972      	ldr	r1, [pc, #456]	; (80111a8 <etharp_query+0x268>)
 8010fe0:	4613      	mov	r3, r2
 8010fe2:	005b      	lsls	r3, r3, #1
 8010fe4:	4413      	add	r3, r2
 8010fe6:	00db      	lsls	r3, r3, #3
 8010fe8:	440b      	add	r3, r1
 8010fea:	3314      	adds	r3, #20
 8010fec:	2201      	movs	r2, #1
 8010fee:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010ff0:	7c7a      	ldrb	r2, [r7, #17]
 8010ff2:	496d      	ldr	r1, [pc, #436]	; (80111a8 <etharp_query+0x268>)
 8010ff4:	4613      	mov	r3, r2
 8010ff6:	005b      	lsls	r3, r3, #1
 8010ff8:	4413      	add	r3, r2
 8010ffa:	00db      	lsls	r3, r3, #3
 8010ffc:	440b      	add	r3, r1
 8010ffe:	3308      	adds	r3, #8
 8011000:	68fa      	ldr	r2, [r7, #12]
 8011002:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8011004:	7c7a      	ldrb	r2, [r7, #17]
 8011006:	4968      	ldr	r1, [pc, #416]	; (80111a8 <etharp_query+0x268>)
 8011008:	4613      	mov	r3, r2
 801100a:	005b      	lsls	r3, r3, #1
 801100c:	4413      	add	r3, r2
 801100e:	00db      	lsls	r3, r3, #3
 8011010:	440b      	add	r3, r1
 8011012:	3314      	adds	r3, #20
 8011014:	781b      	ldrb	r3, [r3, #0]
 8011016:	2b01      	cmp	r3, #1
 8011018:	d011      	beq.n	801103e <etharp_query+0xfe>
 801101a:	7c7a      	ldrb	r2, [r7, #17]
 801101c:	4962      	ldr	r1, [pc, #392]	; (80111a8 <etharp_query+0x268>)
 801101e:	4613      	mov	r3, r2
 8011020:	005b      	lsls	r3, r3, #1
 8011022:	4413      	add	r3, r2
 8011024:	00db      	lsls	r3, r3, #3
 8011026:	440b      	add	r3, r1
 8011028:	3314      	adds	r3, #20
 801102a:	781b      	ldrb	r3, [r3, #0]
 801102c:	2b01      	cmp	r3, #1
 801102e:	d806      	bhi.n	801103e <etharp_query+0xfe>
 8011030:	4b5a      	ldr	r3, [pc, #360]	; (801119c <etharp_query+0x25c>)
 8011032:	f240 32cd 	movw	r2, #973	; 0x3cd
 8011036:	495d      	ldr	r1, [pc, #372]	; (80111ac <etharp_query+0x26c>)
 8011038:	485a      	ldr	r0, [pc, #360]	; (80111a4 <etharp_query+0x264>)
 801103a:	f001 fdf3 	bl	8012c24 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801103e:	6a3b      	ldr	r3, [r7, #32]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d102      	bne.n	801104a <etharp_query+0x10a>
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d10c      	bne.n	8011064 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801104a:	68b9      	ldr	r1, [r7, #8]
 801104c:	68f8      	ldr	r0, [r7, #12]
 801104e:	f000 f963 	bl	8011318 <etharp_request>
 8011052:	4603      	mov	r3, r0
 8011054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d102      	bne.n	8011064 <etharp_query+0x124>
      return result;
 801105e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011062:	e096      	b.n	8011192 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d106      	bne.n	8011078 <etharp_query+0x138>
 801106a:	4b4c      	ldr	r3, [pc, #304]	; (801119c <etharp_query+0x25c>)
 801106c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8011070:	494f      	ldr	r1, [pc, #316]	; (80111b0 <etharp_query+0x270>)
 8011072:	484c      	ldr	r0, [pc, #304]	; (80111a4 <etharp_query+0x264>)
 8011074:	f001 fdd6 	bl	8012c24 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011078:	7c7a      	ldrb	r2, [r7, #17]
 801107a:	494b      	ldr	r1, [pc, #300]	; (80111a8 <etharp_query+0x268>)
 801107c:	4613      	mov	r3, r2
 801107e:	005b      	lsls	r3, r3, #1
 8011080:	4413      	add	r3, r2
 8011082:	00db      	lsls	r3, r3, #3
 8011084:	440b      	add	r3, r1
 8011086:	3314      	adds	r3, #20
 8011088:	781b      	ldrb	r3, [r3, #0]
 801108a:	2b01      	cmp	r3, #1
 801108c:	d917      	bls.n	80110be <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801108e:	4a49      	ldr	r2, [pc, #292]	; (80111b4 <etharp_query+0x274>)
 8011090:	7c7b      	ldrb	r3, [r7, #17]
 8011092:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8011094:	7c7a      	ldrb	r2, [r7, #17]
 8011096:	4613      	mov	r3, r2
 8011098:	005b      	lsls	r3, r3, #1
 801109a:	4413      	add	r3, r2
 801109c:	00db      	lsls	r3, r3, #3
 801109e:	3308      	adds	r3, #8
 80110a0:	4a41      	ldr	r2, [pc, #260]	; (80111a8 <etharp_query+0x268>)
 80110a2:	4413      	add	r3, r2
 80110a4:	3304      	adds	r3, #4
 80110a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80110aa:	9200      	str	r2, [sp, #0]
 80110ac:	697a      	ldr	r2, [r7, #20]
 80110ae:	6879      	ldr	r1, [r7, #4]
 80110b0:	68f8      	ldr	r0, [r7, #12]
 80110b2:	f001 fd27 	bl	8012b04 <ethernet_output>
 80110b6:	4603      	mov	r3, r0
 80110b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80110bc:	e067      	b.n	801118e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80110be:	7c7a      	ldrb	r2, [r7, #17]
 80110c0:	4939      	ldr	r1, [pc, #228]	; (80111a8 <etharp_query+0x268>)
 80110c2:	4613      	mov	r3, r2
 80110c4:	005b      	lsls	r3, r3, #1
 80110c6:	4413      	add	r3, r2
 80110c8:	00db      	lsls	r3, r3, #3
 80110ca:	440b      	add	r3, r1
 80110cc:	3314      	adds	r3, #20
 80110ce:	781b      	ldrb	r3, [r3, #0]
 80110d0:	2b01      	cmp	r3, #1
 80110d2:	d15c      	bne.n	801118e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80110d4:	2300      	movs	r3, #0
 80110d6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	61fb      	str	r3, [r7, #28]
    while (p) {
 80110dc:	e01c      	b.n	8011118 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80110de:	69fb      	ldr	r3, [r7, #28]
 80110e0:	895a      	ldrh	r2, [r3, #10]
 80110e2:	69fb      	ldr	r3, [r7, #28]
 80110e4:	891b      	ldrh	r3, [r3, #8]
 80110e6:	429a      	cmp	r2, r3
 80110e8:	d10a      	bne.n	8011100 <etharp_query+0x1c0>
 80110ea:	69fb      	ldr	r3, [r7, #28]
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d006      	beq.n	8011100 <etharp_query+0x1c0>
 80110f2:	4b2a      	ldr	r3, [pc, #168]	; (801119c <etharp_query+0x25c>)
 80110f4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80110f8:	492f      	ldr	r1, [pc, #188]	; (80111b8 <etharp_query+0x278>)
 80110fa:	482a      	ldr	r0, [pc, #168]	; (80111a4 <etharp_query+0x264>)
 80110fc:	f001 fd92 	bl	8012c24 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8011100:	69fb      	ldr	r3, [r7, #28]
 8011102:	7b1b      	ldrb	r3, [r3, #12]
 8011104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011108:	2b00      	cmp	r3, #0
 801110a:	d002      	beq.n	8011112 <etharp_query+0x1d2>
        copy_needed = 1;
 801110c:	2301      	movs	r3, #1
 801110e:	61bb      	str	r3, [r7, #24]
        break;
 8011110:	e005      	b.n	801111e <etharp_query+0x1de>
      }
      p = p->next;
 8011112:	69fb      	ldr	r3, [r7, #28]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011118:	69fb      	ldr	r3, [r7, #28]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d1df      	bne.n	80110de <etharp_query+0x19e>
    }
    if (copy_needed) {
 801111e:	69bb      	ldr	r3, [r7, #24]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d007      	beq.n	8011134 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8011124:	687a      	ldr	r2, [r7, #4]
 8011126:	f44f 7120 	mov.w	r1, #640	; 0x280
 801112a:	200e      	movs	r0, #14
 801112c:	f7f8 fe34 	bl	8009d98 <pbuf_clone>
 8011130:	61f8      	str	r0, [r7, #28]
 8011132:	e004      	b.n	801113e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8011138:	69f8      	ldr	r0, [r7, #28]
 801113a:	f7f8 fc61 	bl	8009a00 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801113e:	69fb      	ldr	r3, [r7, #28]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d021      	beq.n	8011188 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8011144:	7c7a      	ldrb	r2, [r7, #17]
 8011146:	4918      	ldr	r1, [pc, #96]	; (80111a8 <etharp_query+0x268>)
 8011148:	4613      	mov	r3, r2
 801114a:	005b      	lsls	r3, r3, #1
 801114c:	4413      	add	r3, r2
 801114e:	00db      	lsls	r3, r3, #3
 8011150:	440b      	add	r3, r1
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d00a      	beq.n	801116e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8011158:	7c7a      	ldrb	r2, [r7, #17]
 801115a:	4913      	ldr	r1, [pc, #76]	; (80111a8 <etharp_query+0x268>)
 801115c:	4613      	mov	r3, r2
 801115e:	005b      	lsls	r3, r3, #1
 8011160:	4413      	add	r3, r2
 8011162:	00db      	lsls	r3, r3, #3
 8011164:	440b      	add	r3, r1
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	4618      	mov	r0, r3
 801116a:	f7f8 fba9 	bl	80098c0 <pbuf_free>
      }
      arp_table[i].q = p;
 801116e:	7c7a      	ldrb	r2, [r7, #17]
 8011170:	490d      	ldr	r1, [pc, #52]	; (80111a8 <etharp_query+0x268>)
 8011172:	4613      	mov	r3, r2
 8011174:	005b      	lsls	r3, r3, #1
 8011176:	4413      	add	r3, r2
 8011178:	00db      	lsls	r3, r3, #3
 801117a:	440b      	add	r3, r1
 801117c:	69fa      	ldr	r2, [r7, #28]
 801117e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8011180:	2300      	movs	r3, #0
 8011182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011186:	e002      	b.n	801118e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8011188:	23ff      	movs	r3, #255	; 0xff
 801118a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801118e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011192:	4618      	mov	r0, r3
 8011194:	3728      	adds	r7, #40	; 0x28
 8011196:	46bd      	mov	sp, r7
 8011198:	bd80      	pop	{r7, pc}
 801119a:	bf00      	nop
 801119c:	0801604c 	.word	0x0801604c
 80111a0:	080161f8 	.word	0x080161f8
 80111a4:	080160c4 	.word	0x080160c4
 80111a8:	2400012c 	.word	0x2400012c
 80111ac:	08016208 	.word	0x08016208
 80111b0:	080161ec 	.word	0x080161ec
 80111b4:	2400021c 	.word	0x2400021c
 80111b8:	08016230 	.word	0x08016230

080111bc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80111bc:	b580      	push	{r7, lr}
 80111be:	b08a      	sub	sp, #40	; 0x28
 80111c0:	af02      	add	r7, sp, #8
 80111c2:	60f8      	str	r0, [r7, #12]
 80111c4:	60b9      	str	r1, [r7, #8]
 80111c6:	607a      	str	r2, [r7, #4]
 80111c8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80111ca:	2300      	movs	r3, #0
 80111cc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d106      	bne.n	80111e2 <etharp_raw+0x26>
 80111d4:	4b3a      	ldr	r3, [pc, #232]	; (80112c0 <etharp_raw+0x104>)
 80111d6:	f240 4257 	movw	r2, #1111	; 0x457
 80111da:	493a      	ldr	r1, [pc, #232]	; (80112c4 <etharp_raw+0x108>)
 80111dc:	483a      	ldr	r0, [pc, #232]	; (80112c8 <etharp_raw+0x10c>)
 80111de:	f001 fd21 	bl	8012c24 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80111e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80111e6:	211c      	movs	r1, #28
 80111e8:	200e      	movs	r0, #14
 80111ea:	f7f8 f885 	bl	80092f8 <pbuf_alloc>
 80111ee:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80111f0:	69bb      	ldr	r3, [r7, #24]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d102      	bne.n	80111fc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80111f6:	f04f 33ff 	mov.w	r3, #4294967295
 80111fa:	e05d      	b.n	80112b8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80111fc:	69bb      	ldr	r3, [r7, #24]
 80111fe:	895b      	ldrh	r3, [r3, #10]
 8011200:	2b1b      	cmp	r3, #27
 8011202:	d806      	bhi.n	8011212 <etharp_raw+0x56>
 8011204:	4b2e      	ldr	r3, [pc, #184]	; (80112c0 <etharp_raw+0x104>)
 8011206:	f240 4262 	movw	r2, #1122	; 0x462
 801120a:	4930      	ldr	r1, [pc, #192]	; (80112cc <etharp_raw+0x110>)
 801120c:	482e      	ldr	r0, [pc, #184]	; (80112c8 <etharp_raw+0x10c>)
 801120e:	f001 fd09 	bl	8012c24 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8011212:	69bb      	ldr	r3, [r7, #24]
 8011214:	685b      	ldr	r3, [r3, #4]
 8011216:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8011218:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801121a:	4618      	mov	r0, r3
 801121c:	f7f6 ff3a 	bl	8008094 <lwip_htons>
 8011220:	4603      	mov	r3, r0
 8011222:	461a      	mov	r2, r3
 8011224:	697b      	ldr	r3, [r7, #20]
 8011226:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801122e:	2b06      	cmp	r3, #6
 8011230:	d006      	beq.n	8011240 <etharp_raw+0x84>
 8011232:	4b23      	ldr	r3, [pc, #140]	; (80112c0 <etharp_raw+0x104>)
 8011234:	f240 4269 	movw	r2, #1129	; 0x469
 8011238:	4925      	ldr	r1, [pc, #148]	; (80112d0 <etharp_raw+0x114>)
 801123a:	4823      	ldr	r0, [pc, #140]	; (80112c8 <etharp_raw+0x10c>)
 801123c:	f001 fcf2 	bl	8012c24 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8011240:	697b      	ldr	r3, [r7, #20]
 8011242:	3308      	adds	r3, #8
 8011244:	2206      	movs	r2, #6
 8011246:	6839      	ldr	r1, [r7, #0]
 8011248:	4618      	mov	r0, r3
 801124a:	f001 fcd5 	bl	8012bf8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801124e:	697b      	ldr	r3, [r7, #20]
 8011250:	3312      	adds	r3, #18
 8011252:	2206      	movs	r2, #6
 8011254:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011256:	4618      	mov	r0, r3
 8011258:	f001 fcce 	bl	8012bf8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801125c:	697b      	ldr	r3, [r7, #20]
 801125e:	330e      	adds	r3, #14
 8011260:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011262:	6812      	ldr	r2, [r2, #0]
 8011264:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8011266:	697b      	ldr	r3, [r7, #20]
 8011268:	3318      	adds	r3, #24
 801126a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801126c:	6812      	ldr	r2, [r2, #0]
 801126e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011270:	697b      	ldr	r3, [r7, #20]
 8011272:	2200      	movs	r2, #0
 8011274:	701a      	strb	r2, [r3, #0]
 8011276:	2200      	movs	r2, #0
 8011278:	f042 0201 	orr.w	r2, r2, #1
 801127c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801127e:	697b      	ldr	r3, [r7, #20]
 8011280:	2200      	movs	r2, #0
 8011282:	f042 0208 	orr.w	r2, r2, #8
 8011286:	709a      	strb	r2, [r3, #2]
 8011288:	2200      	movs	r2, #0
 801128a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801128c:	697b      	ldr	r3, [r7, #20]
 801128e:	2206      	movs	r2, #6
 8011290:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8011292:	697b      	ldr	r3, [r7, #20]
 8011294:	2204      	movs	r2, #4
 8011296:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8011298:	f640 0306 	movw	r3, #2054	; 0x806
 801129c:	9300      	str	r3, [sp, #0]
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	68ba      	ldr	r2, [r7, #8]
 80112a2:	69b9      	ldr	r1, [r7, #24]
 80112a4:	68f8      	ldr	r0, [r7, #12]
 80112a6:	f001 fc2d 	bl	8012b04 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80112aa:	69b8      	ldr	r0, [r7, #24]
 80112ac:	f7f8 fb08 	bl	80098c0 <pbuf_free>
  p = NULL;
 80112b0:	2300      	movs	r3, #0
 80112b2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80112b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80112b8:	4618      	mov	r0, r3
 80112ba:	3720      	adds	r7, #32
 80112bc:	46bd      	mov	sp, r7
 80112be:	bd80      	pop	{r7, pc}
 80112c0:	0801604c 	.word	0x0801604c
 80112c4:	0801619c 	.word	0x0801619c
 80112c8:	080160c4 	.word	0x080160c4
 80112cc:	0801624c 	.word	0x0801624c
 80112d0:	08016280 	.word	0x08016280

080112d4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b088      	sub	sp, #32
 80112d8:	af04      	add	r7, sp, #16
 80112da:	60f8      	str	r0, [r7, #12]
 80112dc:	60b9      	str	r1, [r7, #8]
 80112de:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80112f0:	2201      	movs	r2, #1
 80112f2:	9203      	str	r2, [sp, #12]
 80112f4:	68ba      	ldr	r2, [r7, #8]
 80112f6:	9202      	str	r2, [sp, #8]
 80112f8:	4a06      	ldr	r2, [pc, #24]	; (8011314 <etharp_request_dst+0x40>)
 80112fa:	9201      	str	r2, [sp, #4]
 80112fc:	9300      	str	r3, [sp, #0]
 80112fe:	4603      	mov	r3, r0
 8011300:	687a      	ldr	r2, [r7, #4]
 8011302:	68f8      	ldr	r0, [r7, #12]
 8011304:	f7ff ff5a 	bl	80111bc <etharp_raw>
 8011308:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801130a:	4618      	mov	r0, r3
 801130c:	3710      	adds	r7, #16
 801130e:	46bd      	mov	sp, r7
 8011310:	bd80      	pop	{r7, pc}
 8011312:	bf00      	nop
 8011314:	08016830 	.word	0x08016830

08011318 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b082      	sub	sp, #8
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
 8011320:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8011322:	4a05      	ldr	r2, [pc, #20]	; (8011338 <etharp_request+0x20>)
 8011324:	6839      	ldr	r1, [r7, #0]
 8011326:	6878      	ldr	r0, [r7, #4]
 8011328:	f7ff ffd4 	bl	80112d4 <etharp_request_dst>
 801132c:	4603      	mov	r3, r0
}
 801132e:	4618      	mov	r0, r3
 8011330:	3708      	adds	r7, #8
 8011332:	46bd      	mov	sp, r7
 8011334:	bd80      	pop	{r7, pc}
 8011336:	bf00      	nop
 8011338:	08016828 	.word	0x08016828

0801133c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801133c:	b580      	push	{r7, lr}
 801133e:	b08e      	sub	sp, #56	; 0x38
 8011340:	af04      	add	r7, sp, #16
 8011342:	6078      	str	r0, [r7, #4]
 8011344:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8011346:	4b87      	ldr	r3, [pc, #540]	; (8011564 <icmp_input+0x228>)
 8011348:	689b      	ldr	r3, [r3, #8]
 801134a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801134c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801134e:	781b      	ldrb	r3, [r3, #0]
 8011350:	f003 030f 	and.w	r3, r3, #15
 8011354:	b2db      	uxtb	r3, r3
 8011356:	009b      	lsls	r3, r3, #2
 8011358:	b2db      	uxtb	r3, r3
 801135a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801135c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801135e:	2b13      	cmp	r3, #19
 8011360:	f240 80e8 	bls.w	8011534 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	895b      	ldrh	r3, [r3, #10]
 8011368:	2b03      	cmp	r3, #3
 801136a:	f240 80e5 	bls.w	8011538 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	685b      	ldr	r3, [r3, #4]
 8011372:	781b      	ldrb	r3, [r3, #0]
 8011374:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011378:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801137c:	2b00      	cmp	r3, #0
 801137e:	f000 80d2 	beq.w	8011526 <icmp_input+0x1ea>
 8011382:	2b08      	cmp	r3, #8
 8011384:	f040 80d2 	bne.w	801152c <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8011388:	4b77      	ldr	r3, [pc, #476]	; (8011568 <icmp_input+0x22c>)
 801138a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801138c:	4b75      	ldr	r3, [pc, #468]	; (8011564 <icmp_input+0x228>)
 801138e:	695b      	ldr	r3, [r3, #20]
 8011390:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011394:	2be0      	cmp	r3, #224	; 0xe0
 8011396:	f000 80d6 	beq.w	8011546 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801139a:	4b72      	ldr	r3, [pc, #456]	; (8011564 <icmp_input+0x228>)
 801139c:	695b      	ldr	r3, [r3, #20]
 801139e:	4a71      	ldr	r2, [pc, #452]	; (8011564 <icmp_input+0x228>)
 80113a0:	6812      	ldr	r2, [r2, #0]
 80113a2:	4611      	mov	r1, r2
 80113a4:	4618      	mov	r0, r3
 80113a6:	f000 fc13 	bl	8011bd0 <ip4_addr_isbroadcast_u32>
 80113aa:	4603      	mov	r3, r0
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	f040 80cc 	bne.w	801154a <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	891b      	ldrh	r3, [r3, #8]
 80113b6:	2b07      	cmp	r3, #7
 80113b8:	f240 80c0 	bls.w	801153c <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 80113bc:	6878      	ldr	r0, [r7, #4]
 80113be:	f7f6 ff06 	bl	80081ce <inet_chksum_pbuf>
 80113c2:	4603      	mov	r3, r0
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d003      	beq.n	80113d0 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 80113c8:	6878      	ldr	r0, [r7, #4]
 80113ca:	f7f8 fa79 	bl	80098c0 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 80113ce:	e0c5      	b.n	801155c <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80113d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80113d2:	330e      	adds	r3, #14
 80113d4:	4619      	mov	r1, r3
 80113d6:	6878      	ldr	r0, [r7, #4]
 80113d8:	f7f8 f9dc 	bl	8009794 <pbuf_add_header>
 80113dc:	4603      	mov	r3, r0
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d04b      	beq.n	801147a <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	891a      	ldrh	r2, [r3, #8]
 80113e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80113e8:	4413      	add	r3, r2
 80113ea:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	891b      	ldrh	r3, [r3, #8]
 80113f0:	8b7a      	ldrh	r2, [r7, #26]
 80113f2:	429a      	cmp	r2, r3
 80113f4:	f0c0 80ab 	bcc.w	801154e <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80113f8:	8b7b      	ldrh	r3, [r7, #26]
 80113fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80113fe:	4619      	mov	r1, r3
 8011400:	200e      	movs	r0, #14
 8011402:	f7f7 ff79 	bl	80092f8 <pbuf_alloc>
 8011406:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8011408:	697b      	ldr	r3, [r7, #20]
 801140a:	2b00      	cmp	r3, #0
 801140c:	f000 80a1 	beq.w	8011552 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011410:	697b      	ldr	r3, [r7, #20]
 8011412:	895b      	ldrh	r3, [r3, #10]
 8011414:	461a      	mov	r2, r3
 8011416:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011418:	3308      	adds	r3, #8
 801141a:	429a      	cmp	r2, r3
 801141c:	d203      	bcs.n	8011426 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801141e:	6978      	ldr	r0, [r7, #20]
 8011420:	f7f8 fa4e 	bl	80098c0 <pbuf_free>
          goto icmperr;
 8011424:	e096      	b.n	8011554 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8011426:	697b      	ldr	r3, [r7, #20]
 8011428:	685b      	ldr	r3, [r3, #4]
 801142a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801142c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801142e:	4618      	mov	r0, r3
 8011430:	f001 fbe2 	bl	8012bf8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8011434:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011436:	4619      	mov	r1, r3
 8011438:	6978      	ldr	r0, [r7, #20]
 801143a:	f7f8 f9bb 	bl	80097b4 <pbuf_remove_header>
 801143e:	4603      	mov	r3, r0
 8011440:	2b00      	cmp	r3, #0
 8011442:	d009      	beq.n	8011458 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011444:	4b49      	ldr	r3, [pc, #292]	; (801156c <icmp_input+0x230>)
 8011446:	22b6      	movs	r2, #182	; 0xb6
 8011448:	4949      	ldr	r1, [pc, #292]	; (8011570 <icmp_input+0x234>)
 801144a:	484a      	ldr	r0, [pc, #296]	; (8011574 <icmp_input+0x238>)
 801144c:	f001 fbea 	bl	8012c24 <iprintf>
          pbuf_free(r);
 8011450:	6978      	ldr	r0, [r7, #20]
 8011452:	f7f8 fa35 	bl	80098c0 <pbuf_free>
          goto icmperr;
 8011456:	e07d      	b.n	8011554 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8011458:	6879      	ldr	r1, [r7, #4]
 801145a:	6978      	ldr	r0, [r7, #20]
 801145c:	f7f8 fb58 	bl	8009b10 <pbuf_copy>
 8011460:	4603      	mov	r3, r0
 8011462:	2b00      	cmp	r3, #0
 8011464:	d003      	beq.n	801146e <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8011466:	6978      	ldr	r0, [r7, #20]
 8011468:	f7f8 fa2a 	bl	80098c0 <pbuf_free>
          goto icmperr;
 801146c:	e072      	b.n	8011554 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 801146e:	6878      	ldr	r0, [r7, #4]
 8011470:	f7f8 fa26 	bl	80098c0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8011474:	697b      	ldr	r3, [r7, #20]
 8011476:	607b      	str	r3, [r7, #4]
 8011478:	e00f      	b.n	801149a <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801147a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801147c:	330e      	adds	r3, #14
 801147e:	4619      	mov	r1, r3
 8011480:	6878      	ldr	r0, [r7, #4]
 8011482:	f7f8 f997 	bl	80097b4 <pbuf_remove_header>
 8011486:	4603      	mov	r3, r0
 8011488:	2b00      	cmp	r3, #0
 801148a:	d006      	beq.n	801149a <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801148c:	4b37      	ldr	r3, [pc, #220]	; (801156c <icmp_input+0x230>)
 801148e:	22c7      	movs	r2, #199	; 0xc7
 8011490:	4939      	ldr	r1, [pc, #228]	; (8011578 <icmp_input+0x23c>)
 8011492:	4838      	ldr	r0, [pc, #224]	; (8011574 <icmp_input+0x238>)
 8011494:	f001 fbc6 	bl	8012c24 <iprintf>
          goto icmperr;
 8011498:	e05c      	b.n	8011554 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	685b      	ldr	r3, [r3, #4]
 801149e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80114a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80114a2:	4619      	mov	r1, r3
 80114a4:	6878      	ldr	r0, [r7, #4]
 80114a6:	f7f8 f975 	bl	8009794 <pbuf_add_header>
 80114aa:	4603      	mov	r3, r0
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d13c      	bne.n	801152a <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	685b      	ldr	r3, [r3, #4]
 80114b4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80114b6:	69fb      	ldr	r3, [r7, #28]
 80114b8:	681a      	ldr	r2, [r3, #0]
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80114be:	4b29      	ldr	r3, [pc, #164]	; (8011564 <icmp_input+0x228>)
 80114c0:	691a      	ldr	r2, [r3, #16]
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80114c6:	693b      	ldr	r3, [r7, #16]
 80114c8:	2200      	movs	r2, #0
 80114ca:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80114cc:	693b      	ldr	r3, [r7, #16]
 80114ce:	885b      	ldrh	r3, [r3, #2]
 80114d0:	b29b      	uxth	r3, r3
 80114d2:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80114d6:	4293      	cmp	r3, r2
 80114d8:	d907      	bls.n	80114ea <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80114da:	693b      	ldr	r3, [r7, #16]
 80114dc:	885b      	ldrh	r3, [r3, #2]
 80114de:	b29b      	uxth	r3, r3
 80114e0:	3309      	adds	r3, #9
 80114e2:	b29a      	uxth	r2, r3
 80114e4:	693b      	ldr	r3, [r7, #16]
 80114e6:	805a      	strh	r2, [r3, #2]
 80114e8:	e006      	b.n	80114f8 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 80114ea:	693b      	ldr	r3, [r7, #16]
 80114ec:	885b      	ldrh	r3, [r3, #2]
 80114ee:	b29b      	uxth	r3, r3
 80114f0:	3308      	adds	r3, #8
 80114f2:	b29a      	uxth	r2, r3
 80114f4:	693b      	ldr	r3, [r7, #16]
 80114f6:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	22ff      	movs	r2, #255	; 0xff
 80114fc:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	2200      	movs	r2, #0
 8011502:	729a      	strb	r2, [r3, #10]
 8011504:	2200      	movs	r2, #0
 8011506:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011508:	683b      	ldr	r3, [r7, #0]
 801150a:	9302      	str	r3, [sp, #8]
 801150c:	2301      	movs	r3, #1
 801150e:	9301      	str	r3, [sp, #4]
 8011510:	2300      	movs	r3, #0
 8011512:	9300      	str	r3, [sp, #0]
 8011514:	23ff      	movs	r3, #255	; 0xff
 8011516:	2200      	movs	r2, #0
 8011518:	69f9      	ldr	r1, [r7, #28]
 801151a:	6878      	ldr	r0, [r7, #4]
 801151c:	f000 fa80 	bl	8011a20 <ip4_output_if>
 8011520:	4603      	mov	r3, r0
 8011522:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8011524:	e001      	b.n	801152a <icmp_input+0x1ee>
      break;
 8011526:	bf00      	nop
 8011528:	e000      	b.n	801152c <icmp_input+0x1f0>
      break;
 801152a:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801152c:	6878      	ldr	r0, [r7, #4]
 801152e:	f7f8 f9c7 	bl	80098c0 <pbuf_free>
  return;
 8011532:	e013      	b.n	801155c <icmp_input+0x220>
    goto lenerr;
 8011534:	bf00      	nop
 8011536:	e002      	b.n	801153e <icmp_input+0x202>
    goto lenerr;
 8011538:	bf00      	nop
 801153a:	e000      	b.n	801153e <icmp_input+0x202>
        goto lenerr;
 801153c:	bf00      	nop
lenerr:
  pbuf_free(p);
 801153e:	6878      	ldr	r0, [r7, #4]
 8011540:	f7f8 f9be 	bl	80098c0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011544:	e00a      	b.n	801155c <icmp_input+0x220>
        goto icmperr;
 8011546:	bf00      	nop
 8011548:	e004      	b.n	8011554 <icmp_input+0x218>
        goto icmperr;
 801154a:	bf00      	nop
 801154c:	e002      	b.n	8011554 <icmp_input+0x218>
          goto icmperr;
 801154e:	bf00      	nop
 8011550:	e000      	b.n	8011554 <icmp_input+0x218>
          goto icmperr;
 8011552:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8011554:	6878      	ldr	r0, [r7, #4]
 8011556:	f7f8 f9b3 	bl	80098c0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801155a:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801155c:	3728      	adds	r7, #40	; 0x28
 801155e:	46bd      	mov	sp, r7
 8011560:	bd80      	pop	{r7, pc}
 8011562:	bf00      	nop
 8011564:	2400057c 	.word	0x2400057c
 8011568:	24000590 	.word	0x24000590
 801156c:	080162c4 	.word	0x080162c4
 8011570:	080162fc 	.word	0x080162fc
 8011574:	08016334 	.word	0x08016334
 8011578:	0801635c 	.word	0x0801635c

0801157c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801157c:	b580      	push	{r7, lr}
 801157e:	b082      	sub	sp, #8
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
 8011584:	460b      	mov	r3, r1
 8011586:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011588:	78fb      	ldrb	r3, [r7, #3]
 801158a:	461a      	mov	r2, r3
 801158c:	2103      	movs	r1, #3
 801158e:	6878      	ldr	r0, [r7, #4]
 8011590:	f000 f814 	bl	80115bc <icmp_send_response>
}
 8011594:	bf00      	nop
 8011596:	3708      	adds	r7, #8
 8011598:	46bd      	mov	sp, r7
 801159a:	bd80      	pop	{r7, pc}

0801159c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801159c:	b580      	push	{r7, lr}
 801159e:	b082      	sub	sp, #8
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	6078      	str	r0, [r7, #4]
 80115a4:	460b      	mov	r3, r1
 80115a6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80115a8:	78fb      	ldrb	r3, [r7, #3]
 80115aa:	461a      	mov	r2, r3
 80115ac:	210b      	movs	r1, #11
 80115ae:	6878      	ldr	r0, [r7, #4]
 80115b0:	f000 f804 	bl	80115bc <icmp_send_response>
}
 80115b4:	bf00      	nop
 80115b6:	3708      	adds	r7, #8
 80115b8:	46bd      	mov	sp, r7
 80115ba:	bd80      	pop	{r7, pc}

080115bc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80115bc:	b580      	push	{r7, lr}
 80115be:	b08c      	sub	sp, #48	; 0x30
 80115c0:	af04      	add	r7, sp, #16
 80115c2:	6078      	str	r0, [r7, #4]
 80115c4:	460b      	mov	r3, r1
 80115c6:	70fb      	strb	r3, [r7, #3]
 80115c8:	4613      	mov	r3, r2
 80115ca:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80115cc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80115d0:	2124      	movs	r1, #36	; 0x24
 80115d2:	2022      	movs	r0, #34	; 0x22
 80115d4:	f7f7 fe90 	bl	80092f8 <pbuf_alloc>
 80115d8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80115da:	69fb      	ldr	r3, [r7, #28]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d056      	beq.n	801168e <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80115e0:	69fb      	ldr	r3, [r7, #28]
 80115e2:	895b      	ldrh	r3, [r3, #10]
 80115e4:	2b23      	cmp	r3, #35	; 0x23
 80115e6:	d806      	bhi.n	80115f6 <icmp_send_response+0x3a>
 80115e8:	4b2b      	ldr	r3, [pc, #172]	; (8011698 <icmp_send_response+0xdc>)
 80115ea:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80115ee:	492b      	ldr	r1, [pc, #172]	; (801169c <icmp_send_response+0xe0>)
 80115f0:	482b      	ldr	r0, [pc, #172]	; (80116a0 <icmp_send_response+0xe4>)
 80115f2:	f001 fb17 	bl	8012c24 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	685b      	ldr	r3, [r3, #4]
 80115fa:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80115fc:	69fb      	ldr	r3, [r7, #28]
 80115fe:	685b      	ldr	r3, [r3, #4]
 8011600:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011602:	697b      	ldr	r3, [r7, #20]
 8011604:	78fa      	ldrb	r2, [r7, #3]
 8011606:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011608:	697b      	ldr	r3, [r7, #20]
 801160a:	78ba      	ldrb	r2, [r7, #2]
 801160c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801160e:	697b      	ldr	r3, [r7, #20]
 8011610:	2200      	movs	r2, #0
 8011612:	711a      	strb	r2, [r3, #4]
 8011614:	2200      	movs	r2, #0
 8011616:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011618:	697b      	ldr	r3, [r7, #20]
 801161a:	2200      	movs	r2, #0
 801161c:	719a      	strb	r2, [r3, #6]
 801161e:	2200      	movs	r2, #0
 8011620:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011622:	69fb      	ldr	r3, [r7, #28]
 8011624:	685b      	ldr	r3, [r3, #4]
 8011626:	f103 0008 	add.w	r0, r3, #8
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	685b      	ldr	r3, [r3, #4]
 801162e:	221c      	movs	r2, #28
 8011630:	4619      	mov	r1, r3
 8011632:	f001 fae1 	bl	8012bf8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011636:	69bb      	ldr	r3, [r7, #24]
 8011638:	68db      	ldr	r3, [r3, #12]
 801163a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801163c:	f107 030c 	add.w	r3, r7, #12
 8011640:	4618      	mov	r0, r3
 8011642:	f000 f82f 	bl	80116a4 <ip4_route>
 8011646:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011648:	693b      	ldr	r3, [r7, #16]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d01b      	beq.n	8011686 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801164e:	697b      	ldr	r3, [r7, #20]
 8011650:	2200      	movs	r2, #0
 8011652:	709a      	strb	r2, [r3, #2]
 8011654:	2200      	movs	r2, #0
 8011656:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8011658:	69fb      	ldr	r3, [r7, #28]
 801165a:	895b      	ldrh	r3, [r3, #10]
 801165c:	4619      	mov	r1, r3
 801165e:	6978      	ldr	r0, [r7, #20]
 8011660:	f7f6 fda3 	bl	80081aa <inet_chksum>
 8011664:	4603      	mov	r3, r0
 8011666:	461a      	mov	r2, r3
 8011668:	697b      	ldr	r3, [r7, #20]
 801166a:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801166c:	f107 020c 	add.w	r2, r7, #12
 8011670:	693b      	ldr	r3, [r7, #16]
 8011672:	9302      	str	r3, [sp, #8]
 8011674:	2301      	movs	r3, #1
 8011676:	9301      	str	r3, [sp, #4]
 8011678:	2300      	movs	r3, #0
 801167a:	9300      	str	r3, [sp, #0]
 801167c:	23ff      	movs	r3, #255	; 0xff
 801167e:	2100      	movs	r1, #0
 8011680:	69f8      	ldr	r0, [r7, #28]
 8011682:	f000 f9cd 	bl	8011a20 <ip4_output_if>
  }
  pbuf_free(q);
 8011686:	69f8      	ldr	r0, [r7, #28]
 8011688:	f7f8 f91a 	bl	80098c0 <pbuf_free>
 801168c:	e000      	b.n	8011690 <icmp_send_response+0xd4>
    return;
 801168e:	bf00      	nop
}
 8011690:	3720      	adds	r7, #32
 8011692:	46bd      	mov	sp, r7
 8011694:	bd80      	pop	{r7, pc}
 8011696:	bf00      	nop
 8011698:	080162c4 	.word	0x080162c4
 801169c:	08016390 	.word	0x08016390
 80116a0:	08016334 	.word	0x08016334

080116a4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80116a4:	b480      	push	{r7}
 80116a6:	b085      	sub	sp, #20
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80116ac:	4b33      	ldr	r3, [pc, #204]	; (801177c <ip4_route+0xd8>)
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	60fb      	str	r3, [r7, #12]
 80116b2:	e036      	b.n	8011722 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80116ba:	f003 0301 	and.w	r3, r3, #1
 80116be:	b2db      	uxtb	r3, r3
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d02b      	beq.n	801171c <ip4_route+0x78>
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80116ca:	089b      	lsrs	r3, r3, #2
 80116cc:	f003 0301 	and.w	r3, r3, #1
 80116d0:	b2db      	uxtb	r3, r3
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d022      	beq.n	801171c <ip4_route+0x78>
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	3304      	adds	r3, #4
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d01d      	beq.n	801171c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	681a      	ldr	r2, [r3, #0]
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	3304      	adds	r3, #4
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	405a      	eors	r2, r3
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	3308      	adds	r3, #8
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	4013      	ands	r3, r2
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d101      	bne.n	80116fc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	e038      	b.n	801176e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011702:	f003 0302 	and.w	r3, r3, #2
 8011706:	2b00      	cmp	r3, #0
 8011708:	d108      	bne.n	801171c <ip4_route+0x78>
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	681a      	ldr	r2, [r3, #0]
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	330c      	adds	r3, #12
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	429a      	cmp	r2, r3
 8011716:	d101      	bne.n	801171c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	e028      	b.n	801176e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	60fb      	str	r3, [r7, #12]
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d1c5      	bne.n	80116b4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011728:	4b15      	ldr	r3, [pc, #84]	; (8011780 <ip4_route+0xdc>)
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d01a      	beq.n	8011766 <ip4_route+0xc2>
 8011730:	4b13      	ldr	r3, [pc, #76]	; (8011780 <ip4_route+0xdc>)
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011738:	f003 0301 	and.w	r3, r3, #1
 801173c:	2b00      	cmp	r3, #0
 801173e:	d012      	beq.n	8011766 <ip4_route+0xc2>
 8011740:	4b0f      	ldr	r3, [pc, #60]	; (8011780 <ip4_route+0xdc>)
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011748:	f003 0304 	and.w	r3, r3, #4
 801174c:	2b00      	cmp	r3, #0
 801174e:	d00a      	beq.n	8011766 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011750:	4b0b      	ldr	r3, [pc, #44]	; (8011780 <ip4_route+0xdc>)
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	3304      	adds	r3, #4
 8011756:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011758:	2b00      	cmp	r3, #0
 801175a:	d004      	beq.n	8011766 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	b2db      	uxtb	r3, r3
 8011762:	2b7f      	cmp	r3, #127	; 0x7f
 8011764:	d101      	bne.n	801176a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011766:	2300      	movs	r3, #0
 8011768:	e001      	b.n	801176e <ip4_route+0xca>
  }

  return netif_default;
 801176a:	4b05      	ldr	r3, [pc, #20]	; (8011780 <ip4_route+0xdc>)
 801176c:	681b      	ldr	r3, [r3, #0]
}
 801176e:	4618      	mov	r0, r3
 8011770:	3714      	adds	r7, #20
 8011772:	46bd      	mov	sp, r7
 8011774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011778:	4770      	bx	lr
 801177a:	bf00      	nop
 801177c:	2400345c 	.word	0x2400345c
 8011780:	24003460 	.word	0x24003460

08011784 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b082      	sub	sp, #8
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011792:	f003 0301 	and.w	r3, r3, #1
 8011796:	b2db      	uxtb	r3, r3
 8011798:	2b00      	cmp	r3, #0
 801179a:	d016      	beq.n	80117ca <ip4_input_accept+0x46>
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	3304      	adds	r3, #4
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d011      	beq.n	80117ca <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80117a6:	4b0b      	ldr	r3, [pc, #44]	; (80117d4 <ip4_input_accept+0x50>)
 80117a8:	695a      	ldr	r2, [r3, #20]
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	3304      	adds	r3, #4
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	429a      	cmp	r2, r3
 80117b2:	d008      	beq.n	80117c6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80117b4:	4b07      	ldr	r3, [pc, #28]	; (80117d4 <ip4_input_accept+0x50>)
 80117b6:	695b      	ldr	r3, [r3, #20]
 80117b8:	6879      	ldr	r1, [r7, #4]
 80117ba:	4618      	mov	r0, r3
 80117bc:	f000 fa08 	bl	8011bd0 <ip4_addr_isbroadcast_u32>
 80117c0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d001      	beq.n	80117ca <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80117c6:	2301      	movs	r3, #1
 80117c8:	e000      	b.n	80117cc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80117ca:	2300      	movs	r3, #0
}
 80117cc:	4618      	mov	r0, r3
 80117ce:	3708      	adds	r7, #8
 80117d0:	46bd      	mov	sp, r7
 80117d2:	bd80      	pop	{r7, pc}
 80117d4:	2400057c 	.word	0x2400057c

080117d8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b086      	sub	sp, #24
 80117dc:	af00      	add	r7, sp, #0
 80117de:	6078      	str	r0, [r7, #4]
 80117e0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	685b      	ldr	r3, [r3, #4]
 80117e6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80117e8:	697b      	ldr	r3, [r7, #20]
 80117ea:	781b      	ldrb	r3, [r3, #0]
 80117ec:	091b      	lsrs	r3, r3, #4
 80117ee:	b2db      	uxtb	r3, r3
 80117f0:	2b04      	cmp	r3, #4
 80117f2:	d004      	beq.n	80117fe <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80117f4:	6878      	ldr	r0, [r7, #4]
 80117f6:	f7f8 f863 	bl	80098c0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80117fa:	2300      	movs	r3, #0
 80117fc:	e107      	b.n	8011a0e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80117fe:	697b      	ldr	r3, [r7, #20]
 8011800:	781b      	ldrb	r3, [r3, #0]
 8011802:	f003 030f 	and.w	r3, r3, #15
 8011806:	b2db      	uxtb	r3, r3
 8011808:	009b      	lsls	r3, r3, #2
 801180a:	b2db      	uxtb	r3, r3
 801180c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801180e:	697b      	ldr	r3, [r7, #20]
 8011810:	885b      	ldrh	r3, [r3, #2]
 8011812:	b29b      	uxth	r3, r3
 8011814:	4618      	mov	r0, r3
 8011816:	f7f6 fc3d 	bl	8008094 <lwip_htons>
 801181a:	4603      	mov	r3, r0
 801181c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	891b      	ldrh	r3, [r3, #8]
 8011822:	89ba      	ldrh	r2, [r7, #12]
 8011824:	429a      	cmp	r2, r3
 8011826:	d204      	bcs.n	8011832 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8011828:	89bb      	ldrh	r3, [r7, #12]
 801182a:	4619      	mov	r1, r3
 801182c:	6878      	ldr	r0, [r7, #4]
 801182e:	f7f7 fec1 	bl	80095b4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	895b      	ldrh	r3, [r3, #10]
 8011836:	89fa      	ldrh	r2, [r7, #14]
 8011838:	429a      	cmp	r2, r3
 801183a:	d807      	bhi.n	801184c <ip4_input+0x74>
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	891b      	ldrh	r3, [r3, #8]
 8011840:	89ba      	ldrh	r2, [r7, #12]
 8011842:	429a      	cmp	r2, r3
 8011844:	d802      	bhi.n	801184c <ip4_input+0x74>
 8011846:	89fb      	ldrh	r3, [r7, #14]
 8011848:	2b13      	cmp	r3, #19
 801184a:	d804      	bhi.n	8011856 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801184c:	6878      	ldr	r0, [r7, #4]
 801184e:	f7f8 f837 	bl	80098c0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8011852:	2300      	movs	r3, #0
 8011854:	e0db      	b.n	8011a0e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011856:	697b      	ldr	r3, [r7, #20]
 8011858:	691b      	ldr	r3, [r3, #16]
 801185a:	4a6f      	ldr	r2, [pc, #444]	; (8011a18 <ip4_input+0x240>)
 801185c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801185e:	697b      	ldr	r3, [r7, #20]
 8011860:	68db      	ldr	r3, [r3, #12]
 8011862:	4a6d      	ldr	r2, [pc, #436]	; (8011a18 <ip4_input+0x240>)
 8011864:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011866:	4b6c      	ldr	r3, [pc, #432]	; (8011a18 <ip4_input+0x240>)
 8011868:	695b      	ldr	r3, [r3, #20]
 801186a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801186e:	2be0      	cmp	r3, #224	; 0xe0
 8011870:	d112      	bne.n	8011898 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8011872:	683b      	ldr	r3, [r7, #0]
 8011874:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011878:	f003 0301 	and.w	r3, r3, #1
 801187c:	b2db      	uxtb	r3, r3
 801187e:	2b00      	cmp	r3, #0
 8011880:	d007      	beq.n	8011892 <ip4_input+0xba>
 8011882:	683b      	ldr	r3, [r7, #0]
 8011884:	3304      	adds	r3, #4
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	2b00      	cmp	r3, #0
 801188a:	d002      	beq.n	8011892 <ip4_input+0xba>
      netif = inp;
 801188c:	683b      	ldr	r3, [r7, #0]
 801188e:	613b      	str	r3, [r7, #16]
 8011890:	e02a      	b.n	80118e8 <ip4_input+0x110>
    } else {
      netif = NULL;
 8011892:	2300      	movs	r3, #0
 8011894:	613b      	str	r3, [r7, #16]
 8011896:	e027      	b.n	80118e8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8011898:	6838      	ldr	r0, [r7, #0]
 801189a:	f7ff ff73 	bl	8011784 <ip4_input_accept>
 801189e:	4603      	mov	r3, r0
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d002      	beq.n	80118aa <ip4_input+0xd2>
      netif = inp;
 80118a4:	683b      	ldr	r3, [r7, #0]
 80118a6:	613b      	str	r3, [r7, #16]
 80118a8:	e01e      	b.n	80118e8 <ip4_input+0x110>
    } else {
      netif = NULL;
 80118aa:	2300      	movs	r3, #0
 80118ac:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80118ae:	4b5a      	ldr	r3, [pc, #360]	; (8011a18 <ip4_input+0x240>)
 80118b0:	695b      	ldr	r3, [r3, #20]
 80118b2:	b2db      	uxtb	r3, r3
 80118b4:	2b7f      	cmp	r3, #127	; 0x7f
 80118b6:	d017      	beq.n	80118e8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80118b8:	4b58      	ldr	r3, [pc, #352]	; (8011a1c <ip4_input+0x244>)
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	613b      	str	r3, [r7, #16]
 80118be:	e00e      	b.n	80118de <ip4_input+0x106>
          if (netif == inp) {
 80118c0:	693a      	ldr	r2, [r7, #16]
 80118c2:	683b      	ldr	r3, [r7, #0]
 80118c4:	429a      	cmp	r2, r3
 80118c6:	d006      	beq.n	80118d6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80118c8:	6938      	ldr	r0, [r7, #16]
 80118ca:	f7ff ff5b 	bl	8011784 <ip4_input_accept>
 80118ce:	4603      	mov	r3, r0
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d108      	bne.n	80118e6 <ip4_input+0x10e>
 80118d4:	e000      	b.n	80118d8 <ip4_input+0x100>
            continue;
 80118d6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80118d8:	693b      	ldr	r3, [r7, #16]
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	613b      	str	r3, [r7, #16]
 80118de:	693b      	ldr	r3, [r7, #16]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d1ed      	bne.n	80118c0 <ip4_input+0xe8>
 80118e4:	e000      	b.n	80118e8 <ip4_input+0x110>
            break;
 80118e6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80118e8:	4b4b      	ldr	r3, [pc, #300]	; (8011a18 <ip4_input+0x240>)
 80118ea:	691b      	ldr	r3, [r3, #16]
 80118ec:	6839      	ldr	r1, [r7, #0]
 80118ee:	4618      	mov	r0, r3
 80118f0:	f000 f96e 	bl	8011bd0 <ip4_addr_isbroadcast_u32>
 80118f4:	4603      	mov	r3, r0
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d105      	bne.n	8011906 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80118fa:	4b47      	ldr	r3, [pc, #284]	; (8011a18 <ip4_input+0x240>)
 80118fc:	691b      	ldr	r3, [r3, #16]
 80118fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011902:	2be0      	cmp	r3, #224	; 0xe0
 8011904:	d104      	bne.n	8011910 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011906:	6878      	ldr	r0, [r7, #4]
 8011908:	f7f7 ffda 	bl	80098c0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801190c:	2300      	movs	r3, #0
 801190e:	e07e      	b.n	8011a0e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011910:	693b      	ldr	r3, [r7, #16]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d104      	bne.n	8011920 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011916:	6878      	ldr	r0, [r7, #4]
 8011918:	f7f7 ffd2 	bl	80098c0 <pbuf_free>
    return ERR_OK;
 801191c:	2300      	movs	r3, #0
 801191e:	e076      	b.n	8011a0e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011920:	697b      	ldr	r3, [r7, #20]
 8011922:	88db      	ldrh	r3, [r3, #6]
 8011924:	b29b      	uxth	r3, r3
 8011926:	461a      	mov	r2, r3
 8011928:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801192c:	4013      	ands	r3, r2
 801192e:	2b00      	cmp	r3, #0
 8011930:	d00b      	beq.n	801194a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8011932:	6878      	ldr	r0, [r7, #4]
 8011934:	f000 fd24 	bl	8012380 <ip4_reass>
 8011938:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d101      	bne.n	8011944 <ip4_input+0x16c>
      return ERR_OK;
 8011940:	2300      	movs	r3, #0
 8011942:	e064      	b.n	8011a0e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	685b      	ldr	r3, [r3, #4]
 8011948:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801194a:	4a33      	ldr	r2, [pc, #204]	; (8011a18 <ip4_input+0x240>)
 801194c:	693b      	ldr	r3, [r7, #16]
 801194e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011950:	4a31      	ldr	r2, [pc, #196]	; (8011a18 <ip4_input+0x240>)
 8011952:	683b      	ldr	r3, [r7, #0]
 8011954:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8011956:	4a30      	ldr	r2, [pc, #192]	; (8011a18 <ip4_input+0x240>)
 8011958:	697b      	ldr	r3, [r7, #20]
 801195a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801195c:	697b      	ldr	r3, [r7, #20]
 801195e:	781b      	ldrb	r3, [r3, #0]
 8011960:	f003 030f 	and.w	r3, r3, #15
 8011964:	b2db      	uxtb	r3, r3
 8011966:	009b      	lsls	r3, r3, #2
 8011968:	b2db      	uxtb	r3, r3
 801196a:	b29a      	uxth	r2, r3
 801196c:	4b2a      	ldr	r3, [pc, #168]	; (8011a18 <ip4_input+0x240>)
 801196e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8011970:	89fb      	ldrh	r3, [r7, #14]
 8011972:	4619      	mov	r1, r3
 8011974:	6878      	ldr	r0, [r7, #4]
 8011976:	f7f7 ff1d 	bl	80097b4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801197a:	697b      	ldr	r3, [r7, #20]
 801197c:	7a5b      	ldrb	r3, [r3, #9]
 801197e:	2b11      	cmp	r3, #17
 8011980:	d006      	beq.n	8011990 <ip4_input+0x1b8>
 8011982:	2b11      	cmp	r3, #17
 8011984:	dc13      	bgt.n	80119ae <ip4_input+0x1d6>
 8011986:	2b01      	cmp	r3, #1
 8011988:	d00c      	beq.n	80119a4 <ip4_input+0x1cc>
 801198a:	2b06      	cmp	r3, #6
 801198c:	d005      	beq.n	801199a <ip4_input+0x1c2>
 801198e:	e00e      	b.n	80119ae <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8011990:	6839      	ldr	r1, [r7, #0]
 8011992:	6878      	ldr	r0, [r7, #4]
 8011994:	f7fe fc42 	bl	801021c <udp_input>
        break;
 8011998:	e026      	b.n	80119e8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801199a:	6839      	ldr	r1, [r7, #0]
 801199c:	6878      	ldr	r0, [r7, #4]
 801199e:	f7fa f867 	bl	800ba70 <tcp_input>
        break;
 80119a2:	e021      	b.n	80119e8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80119a4:	6839      	ldr	r1, [r7, #0]
 80119a6:	6878      	ldr	r0, [r7, #4]
 80119a8:	f7ff fcc8 	bl	801133c <icmp_input>
        break;
 80119ac:	e01c      	b.n	80119e8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80119ae:	4b1a      	ldr	r3, [pc, #104]	; (8011a18 <ip4_input+0x240>)
 80119b0:	695b      	ldr	r3, [r3, #20]
 80119b2:	6939      	ldr	r1, [r7, #16]
 80119b4:	4618      	mov	r0, r3
 80119b6:	f000 f90b 	bl	8011bd0 <ip4_addr_isbroadcast_u32>
 80119ba:	4603      	mov	r3, r0
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d10f      	bne.n	80119e0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80119c0:	4b15      	ldr	r3, [pc, #84]	; (8011a18 <ip4_input+0x240>)
 80119c2:	695b      	ldr	r3, [r3, #20]
 80119c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80119c8:	2be0      	cmp	r3, #224	; 0xe0
 80119ca:	d009      	beq.n	80119e0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80119cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80119d0:	4619      	mov	r1, r3
 80119d2:	6878      	ldr	r0, [r7, #4]
 80119d4:	f7f7 ff61 	bl	800989a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80119d8:	2102      	movs	r1, #2
 80119da:	6878      	ldr	r0, [r7, #4]
 80119dc:	f7ff fdce 	bl	801157c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80119e0:	6878      	ldr	r0, [r7, #4]
 80119e2:	f7f7 ff6d 	bl	80098c0 <pbuf_free>
        break;
 80119e6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80119e8:	4b0b      	ldr	r3, [pc, #44]	; (8011a18 <ip4_input+0x240>)
 80119ea:	2200      	movs	r2, #0
 80119ec:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80119ee:	4b0a      	ldr	r3, [pc, #40]	; (8011a18 <ip4_input+0x240>)
 80119f0:	2200      	movs	r2, #0
 80119f2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80119f4:	4b08      	ldr	r3, [pc, #32]	; (8011a18 <ip4_input+0x240>)
 80119f6:	2200      	movs	r2, #0
 80119f8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80119fa:	4b07      	ldr	r3, [pc, #28]	; (8011a18 <ip4_input+0x240>)
 80119fc:	2200      	movs	r2, #0
 80119fe:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011a00:	4b05      	ldr	r3, [pc, #20]	; (8011a18 <ip4_input+0x240>)
 8011a02:	2200      	movs	r2, #0
 8011a04:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011a06:	4b04      	ldr	r3, [pc, #16]	; (8011a18 <ip4_input+0x240>)
 8011a08:	2200      	movs	r2, #0
 8011a0a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011a0c:	2300      	movs	r3, #0
}
 8011a0e:	4618      	mov	r0, r3
 8011a10:	3718      	adds	r7, #24
 8011a12:	46bd      	mov	sp, r7
 8011a14:	bd80      	pop	{r7, pc}
 8011a16:	bf00      	nop
 8011a18:	2400057c 	.word	0x2400057c
 8011a1c:	2400345c 	.word	0x2400345c

08011a20 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b08a      	sub	sp, #40	; 0x28
 8011a24:	af04      	add	r7, sp, #16
 8011a26:	60f8      	str	r0, [r7, #12]
 8011a28:	60b9      	str	r1, [r7, #8]
 8011a2a:	607a      	str	r2, [r7, #4]
 8011a2c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8011a2e:	68bb      	ldr	r3, [r7, #8]
 8011a30:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d009      	beq.n	8011a4c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011a38:	68bb      	ldr	r3, [r7, #8]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d003      	beq.n	8011a46 <ip4_output_if+0x26>
 8011a3e:	68bb      	ldr	r3, [r7, #8]
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d102      	bne.n	8011a4c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a48:	3304      	adds	r3, #4
 8011a4a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8011a4c:	78fa      	ldrb	r2, [r7, #3]
 8011a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a50:	9302      	str	r3, [sp, #8]
 8011a52:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011a56:	9301      	str	r3, [sp, #4]
 8011a58:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011a5c:	9300      	str	r3, [sp, #0]
 8011a5e:	4613      	mov	r3, r2
 8011a60:	687a      	ldr	r2, [r7, #4]
 8011a62:	6979      	ldr	r1, [r7, #20]
 8011a64:	68f8      	ldr	r0, [r7, #12]
 8011a66:	f000 f805 	bl	8011a74 <ip4_output_if_src>
 8011a6a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	3718      	adds	r7, #24
 8011a70:	46bd      	mov	sp, r7
 8011a72:	bd80      	pop	{r7, pc}

08011a74 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b088      	sub	sp, #32
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	60f8      	str	r0, [r7, #12]
 8011a7c:	60b9      	str	r1, [r7, #8]
 8011a7e:	607a      	str	r2, [r7, #4]
 8011a80:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	7b9b      	ldrb	r3, [r3, #14]
 8011a86:	2b01      	cmp	r3, #1
 8011a88:	d006      	beq.n	8011a98 <ip4_output_if_src+0x24>
 8011a8a:	4b4b      	ldr	r3, [pc, #300]	; (8011bb8 <ip4_output_if_src+0x144>)
 8011a8c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8011a90:	494a      	ldr	r1, [pc, #296]	; (8011bbc <ip4_output_if_src+0x148>)
 8011a92:	484b      	ldr	r0, [pc, #300]	; (8011bc0 <ip4_output_if_src+0x14c>)
 8011a94:	f001 f8c6 	bl	8012c24 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d060      	beq.n	8011b60 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8011a9e:	2314      	movs	r3, #20
 8011aa0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8011aa2:	2114      	movs	r1, #20
 8011aa4:	68f8      	ldr	r0, [r7, #12]
 8011aa6:	f7f7 fe75 	bl	8009794 <pbuf_add_header>
 8011aaa:	4603      	mov	r3, r0
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d002      	beq.n	8011ab6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011ab0:	f06f 0301 	mvn.w	r3, #1
 8011ab4:	e07c      	b.n	8011bb0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	685b      	ldr	r3, [r3, #4]
 8011aba:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	895b      	ldrh	r3, [r3, #10]
 8011ac0:	2b13      	cmp	r3, #19
 8011ac2:	d806      	bhi.n	8011ad2 <ip4_output_if_src+0x5e>
 8011ac4:	4b3c      	ldr	r3, [pc, #240]	; (8011bb8 <ip4_output_if_src+0x144>)
 8011ac6:	f44f 7262 	mov.w	r2, #904	; 0x388
 8011aca:	493e      	ldr	r1, [pc, #248]	; (8011bc4 <ip4_output_if_src+0x150>)
 8011acc:	483c      	ldr	r0, [pc, #240]	; (8011bc0 <ip4_output_if_src+0x14c>)
 8011ace:	f001 f8a9 	bl	8012c24 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8011ad2:	69fb      	ldr	r3, [r7, #28]
 8011ad4:	78fa      	ldrb	r2, [r7, #3]
 8011ad6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011ad8:	69fb      	ldr	r3, [r7, #28]
 8011ada:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8011ade:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	681a      	ldr	r2, [r3, #0]
 8011ae4:	69fb      	ldr	r3, [r7, #28]
 8011ae6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011ae8:	8b7b      	ldrh	r3, [r7, #26]
 8011aea:	089b      	lsrs	r3, r3, #2
 8011aec:	b29b      	uxth	r3, r3
 8011aee:	b2db      	uxtb	r3, r3
 8011af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011af4:	b2da      	uxtb	r2, r3
 8011af6:	69fb      	ldr	r3, [r7, #28]
 8011af8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8011afa:	69fb      	ldr	r3, [r7, #28]
 8011afc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011b00:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	891b      	ldrh	r3, [r3, #8]
 8011b06:	4618      	mov	r0, r3
 8011b08:	f7f6 fac4 	bl	8008094 <lwip_htons>
 8011b0c:	4603      	mov	r3, r0
 8011b0e:	461a      	mov	r2, r3
 8011b10:	69fb      	ldr	r3, [r7, #28]
 8011b12:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011b14:	69fb      	ldr	r3, [r7, #28]
 8011b16:	2200      	movs	r2, #0
 8011b18:	719a      	strb	r2, [r3, #6]
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8011b1e:	4b2a      	ldr	r3, [pc, #168]	; (8011bc8 <ip4_output_if_src+0x154>)
 8011b20:	881b      	ldrh	r3, [r3, #0]
 8011b22:	4618      	mov	r0, r3
 8011b24:	f7f6 fab6 	bl	8008094 <lwip_htons>
 8011b28:	4603      	mov	r3, r0
 8011b2a:	461a      	mov	r2, r3
 8011b2c:	69fb      	ldr	r3, [r7, #28]
 8011b2e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011b30:	4b25      	ldr	r3, [pc, #148]	; (8011bc8 <ip4_output_if_src+0x154>)
 8011b32:	881b      	ldrh	r3, [r3, #0]
 8011b34:	3301      	adds	r3, #1
 8011b36:	b29a      	uxth	r2, r3
 8011b38:	4b23      	ldr	r3, [pc, #140]	; (8011bc8 <ip4_output_if_src+0x154>)
 8011b3a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8011b3c:	68bb      	ldr	r3, [r7, #8]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d104      	bne.n	8011b4c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8011b42:	4b22      	ldr	r3, [pc, #136]	; (8011bcc <ip4_output_if_src+0x158>)
 8011b44:	681a      	ldr	r2, [r3, #0]
 8011b46:	69fb      	ldr	r3, [r7, #28]
 8011b48:	60da      	str	r2, [r3, #12]
 8011b4a:	e003      	b.n	8011b54 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8011b4c:	68bb      	ldr	r3, [r7, #8]
 8011b4e:	681a      	ldr	r2, [r3, #0]
 8011b50:	69fb      	ldr	r3, [r7, #28]
 8011b52:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011b54:	69fb      	ldr	r3, [r7, #28]
 8011b56:	2200      	movs	r2, #0
 8011b58:	729a      	strb	r2, [r3, #10]
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	72da      	strb	r2, [r3, #11]
 8011b5e:	e00f      	b.n	8011b80 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	895b      	ldrh	r3, [r3, #10]
 8011b64:	2b13      	cmp	r3, #19
 8011b66:	d802      	bhi.n	8011b6e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011b68:	f06f 0301 	mvn.w	r3, #1
 8011b6c:	e020      	b.n	8011bb0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	685b      	ldr	r3, [r3, #4]
 8011b72:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011b74:	69fb      	ldr	r3, [r7, #28]
 8011b76:	691b      	ldr	r3, [r3, #16]
 8011b78:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8011b7a:	f107 0314 	add.w	r3, r7, #20
 8011b7e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b82:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d00c      	beq.n	8011ba2 <ip4_output_if_src+0x12e>
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	891a      	ldrh	r2, [r3, #8]
 8011b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011b90:	429a      	cmp	r2, r3
 8011b92:	d906      	bls.n	8011ba2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8011b94:	687a      	ldr	r2, [r7, #4]
 8011b96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011b98:	68f8      	ldr	r0, [r7, #12]
 8011b9a:	f000 fddf 	bl	801275c <ip4_frag>
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	e006      	b.n	8011bb0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ba4:	695b      	ldr	r3, [r3, #20]
 8011ba6:	687a      	ldr	r2, [r7, #4]
 8011ba8:	68f9      	ldr	r1, [r7, #12]
 8011baa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011bac:	4798      	blx	r3
 8011bae:	4603      	mov	r3, r0
}
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	3720      	adds	r7, #32
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	bd80      	pop	{r7, pc}
 8011bb8:	080163bc 	.word	0x080163bc
 8011bbc:	080163f0 	.word	0x080163f0
 8011bc0:	080163fc 	.word	0x080163fc
 8011bc4:	08016424 	.word	0x08016424
 8011bc8:	2400021e 	.word	0x2400021e
 8011bcc:	08016824 	.word	0x08016824

08011bd0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011bd0:	b480      	push	{r7}
 8011bd2:	b085      	sub	sp, #20
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
 8011bd8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011be4:	d002      	beq.n	8011bec <ip4_addr_isbroadcast_u32+0x1c>
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d101      	bne.n	8011bf0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011bec:	2301      	movs	r3, #1
 8011bee:	e02a      	b.n	8011c46 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011bf0:	683b      	ldr	r3, [r7, #0]
 8011bf2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011bf6:	f003 0302 	and.w	r3, r3, #2
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d101      	bne.n	8011c02 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8011bfe:	2300      	movs	r3, #0
 8011c00:	e021      	b.n	8011c46 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8011c02:	683b      	ldr	r3, [r7, #0]
 8011c04:	3304      	adds	r3, #4
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	687a      	ldr	r2, [r7, #4]
 8011c0a:	429a      	cmp	r2, r3
 8011c0c:	d101      	bne.n	8011c12 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8011c0e:	2300      	movs	r3, #0
 8011c10:	e019      	b.n	8011c46 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011c12:	68fa      	ldr	r2, [r7, #12]
 8011c14:	683b      	ldr	r3, [r7, #0]
 8011c16:	3304      	adds	r3, #4
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	405a      	eors	r2, r3
 8011c1c:	683b      	ldr	r3, [r7, #0]
 8011c1e:	3308      	adds	r3, #8
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	4013      	ands	r3, r2
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d10d      	bne.n	8011c44 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011c28:	683b      	ldr	r3, [r7, #0]
 8011c2a:	3308      	adds	r3, #8
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	43da      	mvns	r2, r3
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	3308      	adds	r3, #8
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011c3c:	429a      	cmp	r2, r3
 8011c3e:	d101      	bne.n	8011c44 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011c40:	2301      	movs	r3, #1
 8011c42:	e000      	b.n	8011c46 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011c44:	2300      	movs	r3, #0
  }
}
 8011c46:	4618      	mov	r0, r3
 8011c48:	3714      	adds	r7, #20
 8011c4a:	46bd      	mov	sp, r7
 8011c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c50:	4770      	bx	lr
	...

08011c54 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b082      	sub	sp, #8
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8011c5c:	2210      	movs	r2, #16
 8011c5e:	4904      	ldr	r1, [pc, #16]	; (8011c70 <ip4addr_ntoa+0x1c>)
 8011c60:	6878      	ldr	r0, [r7, #4]
 8011c62:	f000 f807 	bl	8011c74 <ip4addr_ntoa_r>
 8011c66:	4603      	mov	r3, r0
}
 8011c68:	4618      	mov	r0, r3
 8011c6a:	3708      	adds	r7, #8
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	bd80      	pop	{r7, pc}
 8011c70:	24000220 	.word	0x24000220

08011c74 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8011c74:	b480      	push	{r7}
 8011c76:	b08d      	sub	sp, #52	; 0x34
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	60f8      	str	r0, [r7, #12]
 8011c7c:	60b9      	str	r1, [r7, #8]
 8011c7e:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8011c80:	2300      	movs	r3, #0
 8011c82:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8011c8a:	68bb      	ldr	r3, [r7, #8]
 8011c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 8011c8e:	f107 0318 	add.w	r3, r7, #24
 8011c92:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8011c94:	2300      	movs	r3, #0
 8011c96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011c9a:	e059      	b.n	8011d50 <ip4addr_ntoa_r+0xdc>
    i = 0;
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 8011ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ca4:	781a      	ldrb	r2, [r3, #0]
 8011ca6:	4b33      	ldr	r3, [pc, #204]	; (8011d74 <ip4addr_ntoa_r+0x100>)
 8011ca8:	fba3 1302 	umull	r1, r3, r3, r2
 8011cac:	08d9      	lsrs	r1, r3, #3
 8011cae:	460b      	mov	r3, r1
 8011cb0:	009b      	lsls	r3, r3, #2
 8011cb2:	440b      	add	r3, r1
 8011cb4:	005b      	lsls	r3, r3, #1
 8011cb6:	1ad3      	subs	r3, r2, r3
 8011cb8:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8011cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cbc:	781b      	ldrb	r3, [r3, #0]
 8011cbe:	4a2d      	ldr	r2, [pc, #180]	; (8011d74 <ip4addr_ntoa_r+0x100>)
 8011cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8011cc4:	08db      	lsrs	r3, r3, #3
 8011cc6:	b2da      	uxtb	r2, r3
 8011cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cca:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8011ccc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011cd0:	1c5a      	adds	r2, r3, #1
 8011cd2:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8011cd6:	4619      	mov	r1, r3
 8011cd8:	7ffb      	ldrb	r3, [r7, #31]
 8011cda:	3330      	adds	r3, #48	; 0x30
 8011cdc:	b2da      	uxtb	r2, r3
 8011cde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011ce2:	440b      	add	r3, r1
 8011ce4:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8011ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cea:	781b      	ldrb	r3, [r3, #0]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d1d8      	bne.n	8011ca2 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8011cf0:	e012      	b.n	8011d18 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 8011cf2:	6a3b      	ldr	r3, [r7, #32]
 8011cf4:	1c5a      	adds	r2, r3, #1
 8011cf6:	623a      	str	r2, [r7, #32]
 8011cf8:	687a      	ldr	r2, [r7, #4]
 8011cfa:	429a      	cmp	r2, r3
 8011cfc:	dc01      	bgt.n	8011d02 <ip4addr_ntoa_r+0x8e>
        return NULL;
 8011cfe:	2300      	movs	r3, #0
 8011d00:	e031      	b.n	8011d66 <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 8011d02:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8011d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d08:	1c59      	adds	r1, r3, #1
 8011d0a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8011d0c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8011d10:	440a      	add	r2, r1
 8011d12:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8011d16:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8011d18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011d1c:	1e5a      	subs	r2, r3, #1
 8011d1e:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d1e5      	bne.n	8011cf2 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8011d26:	6a3b      	ldr	r3, [r7, #32]
 8011d28:	1c5a      	adds	r2, r3, #1
 8011d2a:	623a      	str	r2, [r7, #32]
 8011d2c:	687a      	ldr	r2, [r7, #4]
 8011d2e:	429a      	cmp	r2, r3
 8011d30:	dc01      	bgt.n	8011d36 <ip4addr_ntoa_r+0xc2>
      return NULL;
 8011d32:	2300      	movs	r3, #0
 8011d34:	e017      	b.n	8011d66 <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 8011d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d38:	1c5a      	adds	r2, r3, #1
 8011d3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011d3c:	222e      	movs	r2, #46	; 0x2e
 8011d3e:	701a      	strb	r2, [r3, #0]
    ap++;
 8011d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d42:	3301      	adds	r3, #1
 8011d44:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8011d46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d4a:	3301      	adds	r3, #1
 8011d4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011d50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d54:	2b03      	cmp	r3, #3
 8011d56:	d9a1      	bls.n	8011c9c <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8011d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d5a:	3b01      	subs	r3, #1
 8011d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d60:	2200      	movs	r2, #0
 8011d62:	701a      	strb	r2, [r3, #0]
  return buf;
 8011d64:	68bb      	ldr	r3, [r7, #8]
}
 8011d66:	4618      	mov	r0, r3
 8011d68:	3734      	adds	r7, #52	; 0x34
 8011d6a:	46bd      	mov	sp, r7
 8011d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d70:	4770      	bx	lr
 8011d72:	bf00      	nop
 8011d74:	cccccccd 	.word	0xcccccccd

08011d78 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011d78:	b580      	push	{r7, lr}
 8011d7a:	b084      	sub	sp, #16
 8011d7c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8011d7e:	2300      	movs	r3, #0
 8011d80:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8011d82:	4b12      	ldr	r3, [pc, #72]	; (8011dcc <ip_reass_tmr+0x54>)
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011d88:	e018      	b.n	8011dbc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	7fdb      	ldrb	r3, [r3, #31]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d00b      	beq.n	8011daa <ip_reass_tmr+0x32>
      r->timer--;
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	7fdb      	ldrb	r3, [r3, #31]
 8011d96:	3b01      	subs	r3, #1
 8011d98:	b2da      	uxtb	r2, r3
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	60fb      	str	r3, [r7, #12]
 8011da8:	e008      	b.n	8011dbc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011db4:	68b9      	ldr	r1, [r7, #8]
 8011db6:	6878      	ldr	r0, [r7, #4]
 8011db8:	f000 f80a 	bl	8011dd0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d1e3      	bne.n	8011d8a <ip_reass_tmr+0x12>
    }
  }
}
 8011dc2:	bf00      	nop
 8011dc4:	bf00      	nop
 8011dc6:	3710      	adds	r7, #16
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	bd80      	pop	{r7, pc}
 8011dcc:	24000230 	.word	0x24000230

08011dd0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b088      	sub	sp, #32
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
 8011dd8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8011dda:	2300      	movs	r3, #0
 8011ddc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011dde:	683a      	ldr	r2, [r7, #0]
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	429a      	cmp	r2, r3
 8011de4:	d105      	bne.n	8011df2 <ip_reass_free_complete_datagram+0x22>
 8011de6:	4b45      	ldr	r3, [pc, #276]	; (8011efc <ip_reass_free_complete_datagram+0x12c>)
 8011de8:	22ab      	movs	r2, #171	; 0xab
 8011dea:	4945      	ldr	r1, [pc, #276]	; (8011f00 <ip_reass_free_complete_datagram+0x130>)
 8011dec:	4845      	ldr	r0, [pc, #276]	; (8011f04 <ip_reass_free_complete_datagram+0x134>)
 8011dee:	f000 ff19 	bl	8012c24 <iprintf>
  if (prev != NULL) {
 8011df2:	683b      	ldr	r3, [r7, #0]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d00a      	beq.n	8011e0e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011df8:	683b      	ldr	r3, [r7, #0]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	687a      	ldr	r2, [r7, #4]
 8011dfe:	429a      	cmp	r2, r3
 8011e00:	d005      	beq.n	8011e0e <ip_reass_free_complete_datagram+0x3e>
 8011e02:	4b3e      	ldr	r3, [pc, #248]	; (8011efc <ip_reass_free_complete_datagram+0x12c>)
 8011e04:	22ad      	movs	r2, #173	; 0xad
 8011e06:	4940      	ldr	r1, [pc, #256]	; (8011f08 <ip_reass_free_complete_datagram+0x138>)
 8011e08:	483e      	ldr	r0, [pc, #248]	; (8011f04 <ip_reass_free_complete_datagram+0x134>)
 8011e0a:	f000 ff0b 	bl	8012c24 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	685b      	ldr	r3, [r3, #4]
 8011e12:	685b      	ldr	r3, [r3, #4]
 8011e14:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8011e16:	697b      	ldr	r3, [r7, #20]
 8011e18:	889b      	ldrh	r3, [r3, #4]
 8011e1a:	b29b      	uxth	r3, r3
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d12a      	bne.n	8011e76 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	685b      	ldr	r3, [r3, #4]
 8011e24:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8011e26:	697b      	ldr	r3, [r7, #20]
 8011e28:	681a      	ldr	r2, [r3, #0]
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8011e2e:	69bb      	ldr	r3, [r7, #24]
 8011e30:	6858      	ldr	r0, [r3, #4]
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	3308      	adds	r3, #8
 8011e36:	2214      	movs	r2, #20
 8011e38:	4619      	mov	r1, r3
 8011e3a:	f000 fedd 	bl	8012bf8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8011e3e:	2101      	movs	r1, #1
 8011e40:	69b8      	ldr	r0, [r7, #24]
 8011e42:	f7ff fbab 	bl	801159c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8011e46:	69b8      	ldr	r0, [r7, #24]
 8011e48:	f7f7 fdc2 	bl	80099d0 <pbuf_clen>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011e50:	8bfa      	ldrh	r2, [r7, #30]
 8011e52:	8a7b      	ldrh	r3, [r7, #18]
 8011e54:	4413      	add	r3, r2
 8011e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011e5a:	db05      	blt.n	8011e68 <ip_reass_free_complete_datagram+0x98>
 8011e5c:	4b27      	ldr	r3, [pc, #156]	; (8011efc <ip_reass_free_complete_datagram+0x12c>)
 8011e5e:	22bc      	movs	r2, #188	; 0xbc
 8011e60:	492a      	ldr	r1, [pc, #168]	; (8011f0c <ip_reass_free_complete_datagram+0x13c>)
 8011e62:	4828      	ldr	r0, [pc, #160]	; (8011f04 <ip_reass_free_complete_datagram+0x134>)
 8011e64:	f000 fede 	bl	8012c24 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011e68:	8bfa      	ldrh	r2, [r7, #30]
 8011e6a:	8a7b      	ldrh	r3, [r7, #18]
 8011e6c:	4413      	add	r3, r2
 8011e6e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8011e70:	69b8      	ldr	r0, [r7, #24]
 8011e72:	f7f7 fd25 	bl	80098c0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	685b      	ldr	r3, [r3, #4]
 8011e7a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011e7c:	e01f      	b.n	8011ebe <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8011e7e:	69bb      	ldr	r3, [r7, #24]
 8011e80:	685b      	ldr	r3, [r3, #4]
 8011e82:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011e84:	69bb      	ldr	r3, [r7, #24]
 8011e86:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011e88:	697b      	ldr	r3, [r7, #20]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8011e8e:	68f8      	ldr	r0, [r7, #12]
 8011e90:	f7f7 fd9e 	bl	80099d0 <pbuf_clen>
 8011e94:	4603      	mov	r3, r0
 8011e96:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011e98:	8bfa      	ldrh	r2, [r7, #30]
 8011e9a:	8a7b      	ldrh	r3, [r7, #18]
 8011e9c:	4413      	add	r3, r2
 8011e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011ea2:	db05      	blt.n	8011eb0 <ip_reass_free_complete_datagram+0xe0>
 8011ea4:	4b15      	ldr	r3, [pc, #84]	; (8011efc <ip_reass_free_complete_datagram+0x12c>)
 8011ea6:	22cc      	movs	r2, #204	; 0xcc
 8011ea8:	4918      	ldr	r1, [pc, #96]	; (8011f0c <ip_reass_free_complete_datagram+0x13c>)
 8011eaa:	4816      	ldr	r0, [pc, #88]	; (8011f04 <ip_reass_free_complete_datagram+0x134>)
 8011eac:	f000 feba 	bl	8012c24 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011eb0:	8bfa      	ldrh	r2, [r7, #30]
 8011eb2:	8a7b      	ldrh	r3, [r7, #18]
 8011eb4:	4413      	add	r3, r2
 8011eb6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011eb8:	68f8      	ldr	r0, [r7, #12]
 8011eba:	f7f7 fd01 	bl	80098c0 <pbuf_free>
  while (p != NULL) {
 8011ebe:	69bb      	ldr	r3, [r7, #24]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d1dc      	bne.n	8011e7e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011ec4:	6839      	ldr	r1, [r7, #0]
 8011ec6:	6878      	ldr	r0, [r7, #4]
 8011ec8:	f000 f8c2 	bl	8012050 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8011ecc:	4b10      	ldr	r3, [pc, #64]	; (8011f10 <ip_reass_free_complete_datagram+0x140>)
 8011ece:	881b      	ldrh	r3, [r3, #0]
 8011ed0:	8bfa      	ldrh	r2, [r7, #30]
 8011ed2:	429a      	cmp	r2, r3
 8011ed4:	d905      	bls.n	8011ee2 <ip_reass_free_complete_datagram+0x112>
 8011ed6:	4b09      	ldr	r3, [pc, #36]	; (8011efc <ip_reass_free_complete_datagram+0x12c>)
 8011ed8:	22d2      	movs	r2, #210	; 0xd2
 8011eda:	490e      	ldr	r1, [pc, #56]	; (8011f14 <ip_reass_free_complete_datagram+0x144>)
 8011edc:	4809      	ldr	r0, [pc, #36]	; (8011f04 <ip_reass_free_complete_datagram+0x134>)
 8011ede:	f000 fea1 	bl	8012c24 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8011ee2:	4b0b      	ldr	r3, [pc, #44]	; (8011f10 <ip_reass_free_complete_datagram+0x140>)
 8011ee4:	881a      	ldrh	r2, [r3, #0]
 8011ee6:	8bfb      	ldrh	r3, [r7, #30]
 8011ee8:	1ad3      	subs	r3, r2, r3
 8011eea:	b29a      	uxth	r2, r3
 8011eec:	4b08      	ldr	r3, [pc, #32]	; (8011f10 <ip_reass_free_complete_datagram+0x140>)
 8011eee:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011ef0:	8bfb      	ldrh	r3, [r7, #30]
}
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	3720      	adds	r7, #32
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	bd80      	pop	{r7, pc}
 8011efa:	bf00      	nop
 8011efc:	08016454 	.word	0x08016454
 8011f00:	08016490 	.word	0x08016490
 8011f04:	0801649c 	.word	0x0801649c
 8011f08:	080164c4 	.word	0x080164c4
 8011f0c:	080164d8 	.word	0x080164d8
 8011f10:	24000234 	.word	0x24000234
 8011f14:	080164f8 	.word	0x080164f8

08011f18 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b08a      	sub	sp, #40	; 0x28
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
 8011f20:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8011f22:	2300      	movs	r3, #0
 8011f24:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8011f26:	2300      	movs	r3, #0
 8011f28:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8011f2e:	2300      	movs	r3, #0
 8011f30:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8011f32:	2300      	movs	r3, #0
 8011f34:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8011f36:	4b28      	ldr	r3, [pc, #160]	; (8011fd8 <ip_reass_remove_oldest_datagram+0xc0>)
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011f3c:	e030      	b.n	8011fa0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8011f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f40:	695a      	ldr	r2, [r3, #20]
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	68db      	ldr	r3, [r3, #12]
 8011f46:	429a      	cmp	r2, r3
 8011f48:	d10c      	bne.n	8011f64 <ip_reass_remove_oldest_datagram+0x4c>
 8011f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f4c:	699a      	ldr	r2, [r3, #24]
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	691b      	ldr	r3, [r3, #16]
 8011f52:	429a      	cmp	r2, r3
 8011f54:	d106      	bne.n	8011f64 <ip_reass_remove_oldest_datagram+0x4c>
 8011f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f58:	899a      	ldrh	r2, [r3, #12]
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	889b      	ldrh	r3, [r3, #4]
 8011f5e:	b29b      	uxth	r3, r3
 8011f60:	429a      	cmp	r2, r3
 8011f62:	d014      	beq.n	8011f8e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011f64:	693b      	ldr	r3, [r7, #16]
 8011f66:	3301      	adds	r3, #1
 8011f68:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8011f6a:	6a3b      	ldr	r3, [r7, #32]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d104      	bne.n	8011f7a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8011f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f72:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011f74:	69fb      	ldr	r3, [r7, #28]
 8011f76:	61bb      	str	r3, [r7, #24]
 8011f78:	e009      	b.n	8011f8e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8011f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f7c:	7fda      	ldrb	r2, [r3, #31]
 8011f7e:	6a3b      	ldr	r3, [r7, #32]
 8011f80:	7fdb      	ldrb	r3, [r3, #31]
 8011f82:	429a      	cmp	r2, r3
 8011f84:	d803      	bhi.n	8011f8e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8011f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f88:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011f8a:	69fb      	ldr	r3, [r7, #28]
 8011f8c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8011f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d001      	beq.n	8011f9a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8011f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f98:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8011f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d1cb      	bne.n	8011f3e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8011fa6:	6a3b      	ldr	r3, [r7, #32]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d008      	beq.n	8011fbe <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011fac:	69b9      	ldr	r1, [r7, #24]
 8011fae:	6a38      	ldr	r0, [r7, #32]
 8011fb0:	f7ff ff0e 	bl	8011dd0 <ip_reass_free_complete_datagram>
 8011fb4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8011fb6:	697a      	ldr	r2, [r7, #20]
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	4413      	add	r3, r2
 8011fbc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011fbe:	697a      	ldr	r2, [r7, #20]
 8011fc0:	683b      	ldr	r3, [r7, #0]
 8011fc2:	429a      	cmp	r2, r3
 8011fc4:	da02      	bge.n	8011fcc <ip_reass_remove_oldest_datagram+0xb4>
 8011fc6:	693b      	ldr	r3, [r7, #16]
 8011fc8:	2b01      	cmp	r3, #1
 8011fca:	dcac      	bgt.n	8011f26 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011fcc:	697b      	ldr	r3, [r7, #20]
}
 8011fce:	4618      	mov	r0, r3
 8011fd0:	3728      	adds	r7, #40	; 0x28
 8011fd2:	46bd      	mov	sp, r7
 8011fd4:	bd80      	pop	{r7, pc}
 8011fd6:	bf00      	nop
 8011fd8:	24000230 	.word	0x24000230

08011fdc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011fdc:	b580      	push	{r7, lr}
 8011fde:	b084      	sub	sp, #16
 8011fe0:	af00      	add	r7, sp, #0
 8011fe2:	6078      	str	r0, [r7, #4]
 8011fe4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011fe6:	2004      	movs	r0, #4
 8011fe8:	f7f6 fd84 	bl	8008af4 <memp_malloc>
 8011fec:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d110      	bne.n	8012016 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011ff4:	6839      	ldr	r1, [r7, #0]
 8011ff6:	6878      	ldr	r0, [r7, #4]
 8011ff8:	f7ff ff8e 	bl	8011f18 <ip_reass_remove_oldest_datagram>
 8011ffc:	4602      	mov	r2, r0
 8011ffe:	683b      	ldr	r3, [r7, #0]
 8012000:	4293      	cmp	r3, r2
 8012002:	dc03      	bgt.n	801200c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012004:	2004      	movs	r0, #4
 8012006:	f7f6 fd75 	bl	8008af4 <memp_malloc>
 801200a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d101      	bne.n	8012016 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8012012:	2300      	movs	r3, #0
 8012014:	e016      	b.n	8012044 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8012016:	2220      	movs	r2, #32
 8012018:	2100      	movs	r1, #0
 801201a:	68f8      	ldr	r0, [r7, #12]
 801201c:	f000 fdfa 	bl	8012c14 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	220f      	movs	r2, #15
 8012024:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8012026:	4b09      	ldr	r3, [pc, #36]	; (801204c <ip_reass_enqueue_new_datagram+0x70>)
 8012028:	681a      	ldr	r2, [r3, #0]
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801202e:	4a07      	ldr	r2, [pc, #28]	; (801204c <ip_reass_enqueue_new_datagram+0x70>)
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	3308      	adds	r3, #8
 8012038:	2214      	movs	r2, #20
 801203a:	6879      	ldr	r1, [r7, #4]
 801203c:	4618      	mov	r0, r3
 801203e:	f000 fddb 	bl	8012bf8 <memcpy>
  return ipr;
 8012042:	68fb      	ldr	r3, [r7, #12]
}
 8012044:	4618      	mov	r0, r3
 8012046:	3710      	adds	r7, #16
 8012048:	46bd      	mov	sp, r7
 801204a:	bd80      	pop	{r7, pc}
 801204c:	24000230 	.word	0x24000230

08012050 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012050:	b580      	push	{r7, lr}
 8012052:	b082      	sub	sp, #8
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
 8012058:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801205a:	4b10      	ldr	r3, [pc, #64]	; (801209c <ip_reass_dequeue_datagram+0x4c>)
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	687a      	ldr	r2, [r7, #4]
 8012060:	429a      	cmp	r2, r3
 8012062:	d104      	bne.n	801206e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	4a0c      	ldr	r2, [pc, #48]	; (801209c <ip_reass_dequeue_datagram+0x4c>)
 801206a:	6013      	str	r3, [r2, #0]
 801206c:	e00d      	b.n	801208a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801206e:	683b      	ldr	r3, [r7, #0]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d106      	bne.n	8012082 <ip_reass_dequeue_datagram+0x32>
 8012074:	4b0a      	ldr	r3, [pc, #40]	; (80120a0 <ip_reass_dequeue_datagram+0x50>)
 8012076:	f240 1245 	movw	r2, #325	; 0x145
 801207a:	490a      	ldr	r1, [pc, #40]	; (80120a4 <ip_reass_dequeue_datagram+0x54>)
 801207c:	480a      	ldr	r0, [pc, #40]	; (80120a8 <ip_reass_dequeue_datagram+0x58>)
 801207e:	f000 fdd1 	bl	8012c24 <iprintf>
    prev->next = ipr->next;
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	681a      	ldr	r2, [r3, #0]
 8012086:	683b      	ldr	r3, [r7, #0]
 8012088:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801208a:	6879      	ldr	r1, [r7, #4]
 801208c:	2004      	movs	r0, #4
 801208e:	f7f6 fda1 	bl	8008bd4 <memp_free>
}
 8012092:	bf00      	nop
 8012094:	3708      	adds	r7, #8
 8012096:	46bd      	mov	sp, r7
 8012098:	bd80      	pop	{r7, pc}
 801209a:	bf00      	nop
 801209c:	24000230 	.word	0x24000230
 80120a0:	08016454 	.word	0x08016454
 80120a4:	0801651c 	.word	0x0801651c
 80120a8:	0801649c 	.word	0x0801649c

080120ac <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	b08c      	sub	sp, #48	; 0x30
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	60f8      	str	r0, [r7, #12]
 80120b4:	60b9      	str	r1, [r7, #8]
 80120b6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80120b8:	2300      	movs	r3, #0
 80120ba:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80120bc:	2301      	movs	r3, #1
 80120be:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80120c0:	68bb      	ldr	r3, [r7, #8]
 80120c2:	685b      	ldr	r3, [r3, #4]
 80120c4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80120c6:	69fb      	ldr	r3, [r7, #28]
 80120c8:	885b      	ldrh	r3, [r3, #2]
 80120ca:	b29b      	uxth	r3, r3
 80120cc:	4618      	mov	r0, r3
 80120ce:	f7f5 ffe1 	bl	8008094 <lwip_htons>
 80120d2:	4603      	mov	r3, r0
 80120d4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80120d6:	69fb      	ldr	r3, [r7, #28]
 80120d8:	781b      	ldrb	r3, [r3, #0]
 80120da:	f003 030f 	and.w	r3, r3, #15
 80120de:	b2db      	uxtb	r3, r3
 80120e0:	009b      	lsls	r3, r3, #2
 80120e2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80120e4:	7e7b      	ldrb	r3, [r7, #25]
 80120e6:	b29b      	uxth	r3, r3
 80120e8:	8b7a      	ldrh	r2, [r7, #26]
 80120ea:	429a      	cmp	r2, r3
 80120ec:	d202      	bcs.n	80120f4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80120ee:	f04f 33ff 	mov.w	r3, #4294967295
 80120f2:	e135      	b.n	8012360 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80120f4:	7e7b      	ldrb	r3, [r7, #25]
 80120f6:	b29b      	uxth	r3, r3
 80120f8:	8b7a      	ldrh	r2, [r7, #26]
 80120fa:	1ad3      	subs	r3, r2, r3
 80120fc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80120fe:	69fb      	ldr	r3, [r7, #28]
 8012100:	88db      	ldrh	r3, [r3, #6]
 8012102:	b29b      	uxth	r3, r3
 8012104:	4618      	mov	r0, r3
 8012106:	f7f5 ffc5 	bl	8008094 <lwip_htons>
 801210a:	4603      	mov	r3, r0
 801210c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012110:	b29b      	uxth	r3, r3
 8012112:	00db      	lsls	r3, r3, #3
 8012114:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8012116:	68bb      	ldr	r3, [r7, #8]
 8012118:	685b      	ldr	r3, [r3, #4]
 801211a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801211c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801211e:	2200      	movs	r2, #0
 8012120:	701a      	strb	r2, [r3, #0]
 8012122:	2200      	movs	r2, #0
 8012124:	705a      	strb	r2, [r3, #1]
 8012126:	2200      	movs	r2, #0
 8012128:	709a      	strb	r2, [r3, #2]
 801212a:	2200      	movs	r2, #0
 801212c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801212e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012130:	8afa      	ldrh	r2, [r7, #22]
 8012132:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8012134:	8afa      	ldrh	r2, [r7, #22]
 8012136:	8b7b      	ldrh	r3, [r7, #26]
 8012138:	4413      	add	r3, r2
 801213a:	b29a      	uxth	r2, r3
 801213c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801213e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8012140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012142:	88db      	ldrh	r3, [r3, #6]
 8012144:	b29b      	uxth	r3, r3
 8012146:	8afa      	ldrh	r2, [r7, #22]
 8012148:	429a      	cmp	r2, r3
 801214a:	d902      	bls.n	8012152 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801214c:	f04f 33ff 	mov.w	r3, #4294967295
 8012150:	e106      	b.n	8012360 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	685b      	ldr	r3, [r3, #4]
 8012156:	627b      	str	r3, [r7, #36]	; 0x24
 8012158:	e068      	b.n	801222c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801215c:	685b      	ldr	r3, [r3, #4]
 801215e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8012160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012162:	889b      	ldrh	r3, [r3, #4]
 8012164:	b29a      	uxth	r2, r3
 8012166:	693b      	ldr	r3, [r7, #16]
 8012168:	889b      	ldrh	r3, [r3, #4]
 801216a:	b29b      	uxth	r3, r3
 801216c:	429a      	cmp	r2, r3
 801216e:	d235      	bcs.n	80121dc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8012170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012174:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8012176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012178:	2b00      	cmp	r3, #0
 801217a:	d020      	beq.n	80121be <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801217c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801217e:	889b      	ldrh	r3, [r3, #4]
 8012180:	b29a      	uxth	r2, r3
 8012182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012184:	88db      	ldrh	r3, [r3, #6]
 8012186:	b29b      	uxth	r3, r3
 8012188:	429a      	cmp	r2, r3
 801218a:	d307      	bcc.n	801219c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801218c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801218e:	88db      	ldrh	r3, [r3, #6]
 8012190:	b29a      	uxth	r2, r3
 8012192:	693b      	ldr	r3, [r7, #16]
 8012194:	889b      	ldrh	r3, [r3, #4]
 8012196:	b29b      	uxth	r3, r3
 8012198:	429a      	cmp	r2, r3
 801219a:	d902      	bls.n	80121a2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801219c:	f04f 33ff 	mov.w	r3, #4294967295
 80121a0:	e0de      	b.n	8012360 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80121a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121a4:	68ba      	ldr	r2, [r7, #8]
 80121a6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80121a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121aa:	88db      	ldrh	r3, [r3, #6]
 80121ac:	b29a      	uxth	r2, r3
 80121ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121b0:	889b      	ldrh	r3, [r3, #4]
 80121b2:	b29b      	uxth	r3, r3
 80121b4:	429a      	cmp	r2, r3
 80121b6:	d03d      	beq.n	8012234 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80121b8:	2300      	movs	r3, #0
 80121ba:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80121bc:	e03a      	b.n	8012234 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80121be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121c0:	88db      	ldrh	r3, [r3, #6]
 80121c2:	b29a      	uxth	r2, r3
 80121c4:	693b      	ldr	r3, [r7, #16]
 80121c6:	889b      	ldrh	r3, [r3, #4]
 80121c8:	b29b      	uxth	r3, r3
 80121ca:	429a      	cmp	r2, r3
 80121cc:	d902      	bls.n	80121d4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80121ce:	f04f 33ff 	mov.w	r3, #4294967295
 80121d2:	e0c5      	b.n	8012360 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	68ba      	ldr	r2, [r7, #8]
 80121d8:	605a      	str	r2, [r3, #4]
      break;
 80121da:	e02b      	b.n	8012234 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80121dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121de:	889b      	ldrh	r3, [r3, #4]
 80121e0:	b29a      	uxth	r2, r3
 80121e2:	693b      	ldr	r3, [r7, #16]
 80121e4:	889b      	ldrh	r3, [r3, #4]
 80121e6:	b29b      	uxth	r3, r3
 80121e8:	429a      	cmp	r2, r3
 80121ea:	d102      	bne.n	80121f2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80121ec:	f04f 33ff 	mov.w	r3, #4294967295
 80121f0:	e0b6      	b.n	8012360 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80121f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121f4:	889b      	ldrh	r3, [r3, #4]
 80121f6:	b29a      	uxth	r2, r3
 80121f8:	693b      	ldr	r3, [r7, #16]
 80121fa:	88db      	ldrh	r3, [r3, #6]
 80121fc:	b29b      	uxth	r3, r3
 80121fe:	429a      	cmp	r2, r3
 8012200:	d202      	bcs.n	8012208 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012202:	f04f 33ff 	mov.w	r3, #4294967295
 8012206:	e0ab      	b.n	8012360 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8012208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801220a:	2b00      	cmp	r3, #0
 801220c:	d009      	beq.n	8012222 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801220e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012210:	88db      	ldrh	r3, [r3, #6]
 8012212:	b29a      	uxth	r2, r3
 8012214:	693b      	ldr	r3, [r7, #16]
 8012216:	889b      	ldrh	r3, [r3, #4]
 8012218:	b29b      	uxth	r3, r3
 801221a:	429a      	cmp	r2, r3
 801221c:	d001      	beq.n	8012222 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801221e:	2300      	movs	r3, #0
 8012220:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8012222:	693b      	ldr	r3, [r7, #16]
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8012228:	693b      	ldr	r3, [r7, #16]
 801222a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801222e:	2b00      	cmp	r3, #0
 8012230:	d193      	bne.n	801215a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8012232:	e000      	b.n	8012236 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8012234:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8012236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012238:	2b00      	cmp	r3, #0
 801223a:	d12d      	bne.n	8012298 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801223c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801223e:	2b00      	cmp	r3, #0
 8012240:	d01c      	beq.n	801227c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8012242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012244:	88db      	ldrh	r3, [r3, #6]
 8012246:	b29a      	uxth	r2, r3
 8012248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801224a:	889b      	ldrh	r3, [r3, #4]
 801224c:	b29b      	uxth	r3, r3
 801224e:	429a      	cmp	r2, r3
 8012250:	d906      	bls.n	8012260 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8012252:	4b45      	ldr	r3, [pc, #276]	; (8012368 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012254:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8012258:	4944      	ldr	r1, [pc, #272]	; (801236c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801225a:	4845      	ldr	r0, [pc, #276]	; (8012370 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801225c:	f000 fce2 	bl	8012c24 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012262:	68ba      	ldr	r2, [r7, #8]
 8012264:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8012266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012268:	88db      	ldrh	r3, [r3, #6]
 801226a:	b29a      	uxth	r2, r3
 801226c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801226e:	889b      	ldrh	r3, [r3, #4]
 8012270:	b29b      	uxth	r3, r3
 8012272:	429a      	cmp	r2, r3
 8012274:	d010      	beq.n	8012298 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8012276:	2300      	movs	r3, #0
 8012278:	623b      	str	r3, [r7, #32]
 801227a:	e00d      	b.n	8012298 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	685b      	ldr	r3, [r3, #4]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d006      	beq.n	8012292 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8012284:	4b38      	ldr	r3, [pc, #224]	; (8012368 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012286:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801228a:	493a      	ldr	r1, [pc, #232]	; (8012374 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801228c:	4838      	ldr	r0, [pc, #224]	; (8012370 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801228e:	f000 fcc9 	bl	8012c24 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	68ba      	ldr	r2, [r7, #8]
 8012296:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d105      	bne.n	80122aa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	7f9b      	ldrb	r3, [r3, #30]
 80122a2:	f003 0301 	and.w	r3, r3, #1
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d059      	beq.n	801235e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80122aa:	6a3b      	ldr	r3, [r7, #32]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d04f      	beq.n	8012350 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	685b      	ldr	r3, [r3, #4]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d006      	beq.n	80122c6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	685b      	ldr	r3, [r3, #4]
 80122bc:	685b      	ldr	r3, [r3, #4]
 80122be:	889b      	ldrh	r3, [r3, #4]
 80122c0:	b29b      	uxth	r3, r3
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d002      	beq.n	80122cc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80122c6:	2300      	movs	r3, #0
 80122c8:	623b      	str	r3, [r7, #32]
 80122ca:	e041      	b.n	8012350 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80122cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ce:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80122d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80122d6:	e012      	b.n	80122fe <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80122d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122da:	685b      	ldr	r3, [r3, #4]
 80122dc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80122de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122e0:	88db      	ldrh	r3, [r3, #6]
 80122e2:	b29a      	uxth	r2, r3
 80122e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122e6:	889b      	ldrh	r3, [r3, #4]
 80122e8:	b29b      	uxth	r3, r3
 80122ea:	429a      	cmp	r2, r3
 80122ec:	d002      	beq.n	80122f4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80122ee:	2300      	movs	r3, #0
 80122f0:	623b      	str	r3, [r7, #32]
            break;
 80122f2:	e007      	b.n	8012304 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80122f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122f6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80122f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80122fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012300:	2b00      	cmp	r3, #0
 8012302:	d1e9      	bne.n	80122d8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012304:	6a3b      	ldr	r3, [r7, #32]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d022      	beq.n	8012350 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	685b      	ldr	r3, [r3, #4]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d106      	bne.n	8012320 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8012312:	4b15      	ldr	r3, [pc, #84]	; (8012368 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012314:	f240 12df 	movw	r2, #479	; 0x1df
 8012318:	4917      	ldr	r1, [pc, #92]	; (8012378 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801231a:	4815      	ldr	r0, [pc, #84]	; (8012370 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801231c:	f000 fc82 	bl	8012c24 <iprintf>
          LWIP_ASSERT("sanity check",
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	685b      	ldr	r3, [r3, #4]
 8012324:	685b      	ldr	r3, [r3, #4]
 8012326:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012328:	429a      	cmp	r2, r3
 801232a:	d106      	bne.n	801233a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801232c:	4b0e      	ldr	r3, [pc, #56]	; (8012368 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801232e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8012332:	4911      	ldr	r1, [pc, #68]	; (8012378 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012334:	480e      	ldr	r0, [pc, #56]	; (8012370 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012336:	f000 fc75 	bl	8012c24 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801233a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	2b00      	cmp	r3, #0
 8012340:	d006      	beq.n	8012350 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8012342:	4b09      	ldr	r3, [pc, #36]	; (8012368 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012344:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8012348:	490c      	ldr	r1, [pc, #48]	; (801237c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801234a:	4809      	ldr	r0, [pc, #36]	; (8012370 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801234c:	f000 fc6a 	bl	8012c24 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012350:	6a3b      	ldr	r3, [r7, #32]
 8012352:	2b00      	cmp	r3, #0
 8012354:	bf14      	ite	ne
 8012356:	2301      	movne	r3, #1
 8012358:	2300      	moveq	r3, #0
 801235a:	b2db      	uxtb	r3, r3
 801235c:	e000      	b.n	8012360 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801235e:	2300      	movs	r3, #0
}
 8012360:	4618      	mov	r0, r3
 8012362:	3730      	adds	r7, #48	; 0x30
 8012364:	46bd      	mov	sp, r7
 8012366:	bd80      	pop	{r7, pc}
 8012368:	08016454 	.word	0x08016454
 801236c:	08016538 	.word	0x08016538
 8012370:	0801649c 	.word	0x0801649c
 8012374:	08016558 	.word	0x08016558
 8012378:	08016590 	.word	0x08016590
 801237c:	080165a0 	.word	0x080165a0

08012380 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012380:	b580      	push	{r7, lr}
 8012382:	b08e      	sub	sp, #56	; 0x38
 8012384:	af00      	add	r7, sp, #0
 8012386:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	685b      	ldr	r3, [r3, #4]
 801238c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801238e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012390:	781b      	ldrb	r3, [r3, #0]
 8012392:	f003 030f 	and.w	r3, r3, #15
 8012396:	b2db      	uxtb	r3, r3
 8012398:	009b      	lsls	r3, r3, #2
 801239a:	b2db      	uxtb	r3, r3
 801239c:	2b14      	cmp	r3, #20
 801239e:	f040 8167 	bne.w	8012670 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80123a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123a4:	88db      	ldrh	r3, [r3, #6]
 80123a6:	b29b      	uxth	r3, r3
 80123a8:	4618      	mov	r0, r3
 80123aa:	f7f5 fe73 	bl	8008094 <lwip_htons>
 80123ae:	4603      	mov	r3, r0
 80123b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80123b4:	b29b      	uxth	r3, r3
 80123b6:	00db      	lsls	r3, r3, #3
 80123b8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80123ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123bc:	885b      	ldrh	r3, [r3, #2]
 80123be:	b29b      	uxth	r3, r3
 80123c0:	4618      	mov	r0, r3
 80123c2:	f7f5 fe67 	bl	8008094 <lwip_htons>
 80123c6:	4603      	mov	r3, r0
 80123c8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80123ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123cc:	781b      	ldrb	r3, [r3, #0]
 80123ce:	f003 030f 	and.w	r3, r3, #15
 80123d2:	b2db      	uxtb	r3, r3
 80123d4:	009b      	lsls	r3, r3, #2
 80123d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80123da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80123de:	b29b      	uxth	r3, r3
 80123e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80123e2:	429a      	cmp	r2, r3
 80123e4:	f0c0 8146 	bcc.w	8012674 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80123e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80123ec:	b29b      	uxth	r3, r3
 80123ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80123f0:	1ad3      	subs	r3, r2, r3
 80123f2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80123f4:	6878      	ldr	r0, [r7, #4]
 80123f6:	f7f7 faeb 	bl	80099d0 <pbuf_clen>
 80123fa:	4603      	mov	r3, r0
 80123fc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80123fe:	4b9f      	ldr	r3, [pc, #636]	; (801267c <ip4_reass+0x2fc>)
 8012400:	881b      	ldrh	r3, [r3, #0]
 8012402:	461a      	mov	r2, r3
 8012404:	8c3b      	ldrh	r3, [r7, #32]
 8012406:	4413      	add	r3, r2
 8012408:	2b0a      	cmp	r3, #10
 801240a:	dd10      	ble.n	801242e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801240c:	8c3b      	ldrh	r3, [r7, #32]
 801240e:	4619      	mov	r1, r3
 8012410:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012412:	f7ff fd81 	bl	8011f18 <ip_reass_remove_oldest_datagram>
 8012416:	4603      	mov	r3, r0
 8012418:	2b00      	cmp	r3, #0
 801241a:	f000 812d 	beq.w	8012678 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801241e:	4b97      	ldr	r3, [pc, #604]	; (801267c <ip4_reass+0x2fc>)
 8012420:	881b      	ldrh	r3, [r3, #0]
 8012422:	461a      	mov	r2, r3
 8012424:	8c3b      	ldrh	r3, [r7, #32]
 8012426:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012428:	2b0a      	cmp	r3, #10
 801242a:	f300 8125 	bgt.w	8012678 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801242e:	4b94      	ldr	r3, [pc, #592]	; (8012680 <ip4_reass+0x300>)
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	633b      	str	r3, [r7, #48]	; 0x30
 8012434:	e015      	b.n	8012462 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8012436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012438:	695a      	ldr	r2, [r3, #20]
 801243a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801243c:	68db      	ldr	r3, [r3, #12]
 801243e:	429a      	cmp	r2, r3
 8012440:	d10c      	bne.n	801245c <ip4_reass+0xdc>
 8012442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012444:	699a      	ldr	r2, [r3, #24]
 8012446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012448:	691b      	ldr	r3, [r3, #16]
 801244a:	429a      	cmp	r2, r3
 801244c:	d106      	bne.n	801245c <ip4_reass+0xdc>
 801244e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012450:	899a      	ldrh	r2, [r3, #12]
 8012452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012454:	889b      	ldrh	r3, [r3, #4]
 8012456:	b29b      	uxth	r3, r3
 8012458:	429a      	cmp	r2, r3
 801245a:	d006      	beq.n	801246a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801245c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	633b      	str	r3, [r7, #48]	; 0x30
 8012462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012464:	2b00      	cmp	r3, #0
 8012466:	d1e6      	bne.n	8012436 <ip4_reass+0xb6>
 8012468:	e000      	b.n	801246c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801246a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801246c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801246e:	2b00      	cmp	r3, #0
 8012470:	d109      	bne.n	8012486 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012472:	8c3b      	ldrh	r3, [r7, #32]
 8012474:	4619      	mov	r1, r3
 8012476:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012478:	f7ff fdb0 	bl	8011fdc <ip_reass_enqueue_new_datagram>
 801247c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801247e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012480:	2b00      	cmp	r3, #0
 8012482:	d11c      	bne.n	80124be <ip4_reass+0x13e>
      goto nullreturn;
 8012484:	e109      	b.n	801269a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012488:	88db      	ldrh	r3, [r3, #6]
 801248a:	b29b      	uxth	r3, r3
 801248c:	4618      	mov	r0, r3
 801248e:	f7f5 fe01 	bl	8008094 <lwip_htons>
 8012492:	4603      	mov	r3, r0
 8012494:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012498:	2b00      	cmp	r3, #0
 801249a:	d110      	bne.n	80124be <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801249c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801249e:	89db      	ldrh	r3, [r3, #14]
 80124a0:	4618      	mov	r0, r3
 80124a2:	f7f5 fdf7 	bl	8008094 <lwip_htons>
 80124a6:	4603      	mov	r3, r0
 80124a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d006      	beq.n	80124be <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80124b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124b2:	3308      	adds	r3, #8
 80124b4:	2214      	movs	r2, #20
 80124b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80124b8:	4618      	mov	r0, r3
 80124ba:	f000 fb9d 	bl	8012bf8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80124be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124c0:	88db      	ldrh	r3, [r3, #6]
 80124c2:	b29b      	uxth	r3, r3
 80124c4:	f003 0320 	and.w	r3, r3, #32
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	bf0c      	ite	eq
 80124cc:	2301      	moveq	r3, #1
 80124ce:	2300      	movne	r3, #0
 80124d0:	b2db      	uxtb	r3, r3
 80124d2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80124d4:	69fb      	ldr	r3, [r7, #28]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d00e      	beq.n	80124f8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80124da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80124dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80124de:	4413      	add	r3, r2
 80124e0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80124e2:	8b7a      	ldrh	r2, [r7, #26]
 80124e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80124e6:	429a      	cmp	r2, r3
 80124e8:	f0c0 80a0 	bcc.w	801262c <ip4_reass+0x2ac>
 80124ec:	8b7b      	ldrh	r3, [r7, #26]
 80124ee:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80124f2:	4293      	cmp	r3, r2
 80124f4:	f200 809a 	bhi.w	801262c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80124f8:	69fa      	ldr	r2, [r7, #28]
 80124fa:	6879      	ldr	r1, [r7, #4]
 80124fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80124fe:	f7ff fdd5 	bl	80120ac <ip_reass_chain_frag_into_datagram_and_validate>
 8012502:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012504:	697b      	ldr	r3, [r7, #20]
 8012506:	f1b3 3fff 	cmp.w	r3, #4294967295
 801250a:	f000 8091 	beq.w	8012630 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801250e:	4b5b      	ldr	r3, [pc, #364]	; (801267c <ip4_reass+0x2fc>)
 8012510:	881a      	ldrh	r2, [r3, #0]
 8012512:	8c3b      	ldrh	r3, [r7, #32]
 8012514:	4413      	add	r3, r2
 8012516:	b29a      	uxth	r2, r3
 8012518:	4b58      	ldr	r3, [pc, #352]	; (801267c <ip4_reass+0x2fc>)
 801251a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801251c:	69fb      	ldr	r3, [r7, #28]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d00d      	beq.n	801253e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8012522:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012524:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012526:	4413      	add	r3, r2
 8012528:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801252a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801252c:	8a7a      	ldrh	r2, [r7, #18]
 801252e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012532:	7f9b      	ldrb	r3, [r3, #30]
 8012534:	f043 0301 	orr.w	r3, r3, #1
 8012538:	b2da      	uxtb	r2, r3
 801253a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801253c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801253e:	697b      	ldr	r3, [r7, #20]
 8012540:	2b01      	cmp	r3, #1
 8012542:	d171      	bne.n	8012628 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012546:	8b9b      	ldrh	r3, [r3, #28]
 8012548:	3314      	adds	r3, #20
 801254a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801254c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801254e:	685b      	ldr	r3, [r3, #4]
 8012550:	685b      	ldr	r3, [r3, #4]
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8012556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012558:	685b      	ldr	r3, [r3, #4]
 801255a:	685b      	ldr	r3, [r3, #4]
 801255c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801255e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012560:	3308      	adds	r3, #8
 8012562:	2214      	movs	r2, #20
 8012564:	4619      	mov	r1, r3
 8012566:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012568:	f000 fb46 	bl	8012bf8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801256c:	8a3b      	ldrh	r3, [r7, #16]
 801256e:	4618      	mov	r0, r3
 8012570:	f7f5 fd90 	bl	8008094 <lwip_htons>
 8012574:	4603      	mov	r3, r0
 8012576:	461a      	mov	r2, r3
 8012578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801257a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801257c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801257e:	2200      	movs	r2, #0
 8012580:	719a      	strb	r2, [r3, #6]
 8012582:	2200      	movs	r2, #0
 8012584:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8012586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012588:	2200      	movs	r2, #0
 801258a:	729a      	strb	r2, [r3, #10]
 801258c:	2200      	movs	r2, #0
 801258e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012592:	685b      	ldr	r3, [r3, #4]
 8012594:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8012596:	e00d      	b.n	80125b4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8012598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801259a:	685b      	ldr	r3, [r3, #4]
 801259c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801259e:	2114      	movs	r1, #20
 80125a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80125a2:	f7f7 f907 	bl	80097b4 <pbuf_remove_header>
      pbuf_cat(p, r);
 80125a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80125a8:	6878      	ldr	r0, [r7, #4]
 80125aa:	f7f7 fa4b 	bl	8009a44 <pbuf_cat>
      r = iprh->next_pbuf;
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80125b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d1ee      	bne.n	8012598 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80125ba:	4b31      	ldr	r3, [pc, #196]	; (8012680 <ip4_reass+0x300>)
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125c0:	429a      	cmp	r2, r3
 80125c2:	d102      	bne.n	80125ca <ip4_reass+0x24a>
      ipr_prev = NULL;
 80125c4:	2300      	movs	r3, #0
 80125c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80125c8:	e010      	b.n	80125ec <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80125ca:	4b2d      	ldr	r3, [pc, #180]	; (8012680 <ip4_reass+0x300>)
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80125d0:	e007      	b.n	80125e2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80125d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125d8:	429a      	cmp	r2, r3
 80125da:	d006      	beq.n	80125ea <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80125dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80125e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d1f4      	bne.n	80125d2 <ip4_reass+0x252>
 80125e8:	e000      	b.n	80125ec <ip4_reass+0x26c>
          break;
 80125ea:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80125ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80125ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80125f0:	f7ff fd2e 	bl	8012050 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80125f4:	6878      	ldr	r0, [r7, #4]
 80125f6:	f7f7 f9eb 	bl	80099d0 <pbuf_clen>
 80125fa:	4603      	mov	r3, r0
 80125fc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80125fe:	4b1f      	ldr	r3, [pc, #124]	; (801267c <ip4_reass+0x2fc>)
 8012600:	881b      	ldrh	r3, [r3, #0]
 8012602:	8c3a      	ldrh	r2, [r7, #32]
 8012604:	429a      	cmp	r2, r3
 8012606:	d906      	bls.n	8012616 <ip4_reass+0x296>
 8012608:	4b1e      	ldr	r3, [pc, #120]	; (8012684 <ip4_reass+0x304>)
 801260a:	f240 229b 	movw	r2, #667	; 0x29b
 801260e:	491e      	ldr	r1, [pc, #120]	; (8012688 <ip4_reass+0x308>)
 8012610:	481e      	ldr	r0, [pc, #120]	; (801268c <ip4_reass+0x30c>)
 8012612:	f000 fb07 	bl	8012c24 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8012616:	4b19      	ldr	r3, [pc, #100]	; (801267c <ip4_reass+0x2fc>)
 8012618:	881a      	ldrh	r2, [r3, #0]
 801261a:	8c3b      	ldrh	r3, [r7, #32]
 801261c:	1ad3      	subs	r3, r2, r3
 801261e:	b29a      	uxth	r2, r3
 8012620:	4b16      	ldr	r3, [pc, #88]	; (801267c <ip4_reass+0x2fc>)
 8012622:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	e03c      	b.n	80126a2 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012628:	2300      	movs	r3, #0
 801262a:	e03a      	b.n	80126a2 <ip4_reass+0x322>
      goto nullreturn_ipr;
 801262c:	bf00      	nop
 801262e:	e000      	b.n	8012632 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8012630:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8012632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012634:	2b00      	cmp	r3, #0
 8012636:	d106      	bne.n	8012646 <ip4_reass+0x2c6>
 8012638:	4b12      	ldr	r3, [pc, #72]	; (8012684 <ip4_reass+0x304>)
 801263a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801263e:	4914      	ldr	r1, [pc, #80]	; (8012690 <ip4_reass+0x310>)
 8012640:	4812      	ldr	r0, [pc, #72]	; (801268c <ip4_reass+0x30c>)
 8012642:	f000 faef 	bl	8012c24 <iprintf>
  if (ipr->p == NULL) {
 8012646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012648:	685b      	ldr	r3, [r3, #4]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d124      	bne.n	8012698 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801264e:	4b0c      	ldr	r3, [pc, #48]	; (8012680 <ip4_reass+0x300>)
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012654:	429a      	cmp	r2, r3
 8012656:	d006      	beq.n	8012666 <ip4_reass+0x2e6>
 8012658:	4b0a      	ldr	r3, [pc, #40]	; (8012684 <ip4_reass+0x304>)
 801265a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801265e:	490d      	ldr	r1, [pc, #52]	; (8012694 <ip4_reass+0x314>)
 8012660:	480a      	ldr	r0, [pc, #40]	; (801268c <ip4_reass+0x30c>)
 8012662:	f000 fadf 	bl	8012c24 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8012666:	2100      	movs	r1, #0
 8012668:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801266a:	f7ff fcf1 	bl	8012050 <ip_reass_dequeue_datagram>
 801266e:	e014      	b.n	801269a <ip4_reass+0x31a>
    goto nullreturn;
 8012670:	bf00      	nop
 8012672:	e012      	b.n	801269a <ip4_reass+0x31a>
    goto nullreturn;
 8012674:	bf00      	nop
 8012676:	e010      	b.n	801269a <ip4_reass+0x31a>
      goto nullreturn;
 8012678:	bf00      	nop
 801267a:	e00e      	b.n	801269a <ip4_reass+0x31a>
 801267c:	24000234 	.word	0x24000234
 8012680:	24000230 	.word	0x24000230
 8012684:	08016454 	.word	0x08016454
 8012688:	080165c4 	.word	0x080165c4
 801268c:	0801649c 	.word	0x0801649c
 8012690:	080165e0 	.word	0x080165e0
 8012694:	080165ec 	.word	0x080165ec
  }

nullreturn:
 8012698:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801269a:	6878      	ldr	r0, [r7, #4]
 801269c:	f7f7 f910 	bl	80098c0 <pbuf_free>
  return NULL;
 80126a0:	2300      	movs	r3, #0
}
 80126a2:	4618      	mov	r0, r3
 80126a4:	3738      	adds	r7, #56	; 0x38
 80126a6:	46bd      	mov	sp, r7
 80126a8:	bd80      	pop	{r7, pc}
 80126aa:	bf00      	nop

080126ac <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80126ac:	b580      	push	{r7, lr}
 80126ae:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80126b0:	2005      	movs	r0, #5
 80126b2:	f7f6 fa1f 	bl	8008af4 <memp_malloc>
 80126b6:	4603      	mov	r3, r0
}
 80126b8:	4618      	mov	r0, r3
 80126ba:	bd80      	pop	{r7, pc}

080126bc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80126bc:	b580      	push	{r7, lr}
 80126be:	b082      	sub	sp, #8
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d106      	bne.n	80126d8 <ip_frag_free_pbuf_custom_ref+0x1c>
 80126ca:	4b07      	ldr	r3, [pc, #28]	; (80126e8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80126cc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80126d0:	4906      	ldr	r1, [pc, #24]	; (80126ec <ip_frag_free_pbuf_custom_ref+0x30>)
 80126d2:	4807      	ldr	r0, [pc, #28]	; (80126f0 <ip_frag_free_pbuf_custom_ref+0x34>)
 80126d4:	f000 faa6 	bl	8012c24 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80126d8:	6879      	ldr	r1, [r7, #4]
 80126da:	2005      	movs	r0, #5
 80126dc:	f7f6 fa7a 	bl	8008bd4 <memp_free>
}
 80126e0:	bf00      	nop
 80126e2:	3708      	adds	r7, #8
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}
 80126e8:	08016454 	.word	0x08016454
 80126ec:	0801660c 	.word	0x0801660c
 80126f0:	0801649c 	.word	0x0801649c

080126f4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b084      	sub	sp, #16
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d106      	bne.n	8012714 <ipfrag_free_pbuf_custom+0x20>
 8012706:	4b11      	ldr	r3, [pc, #68]	; (801274c <ipfrag_free_pbuf_custom+0x58>)
 8012708:	f240 22ce 	movw	r2, #718	; 0x2ce
 801270c:	4910      	ldr	r1, [pc, #64]	; (8012750 <ipfrag_free_pbuf_custom+0x5c>)
 801270e:	4811      	ldr	r0, [pc, #68]	; (8012754 <ipfrag_free_pbuf_custom+0x60>)
 8012710:	f000 fa88 	bl	8012c24 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012714:	68fa      	ldr	r2, [r7, #12]
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	429a      	cmp	r2, r3
 801271a:	d006      	beq.n	801272a <ipfrag_free_pbuf_custom+0x36>
 801271c:	4b0b      	ldr	r3, [pc, #44]	; (801274c <ipfrag_free_pbuf_custom+0x58>)
 801271e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8012722:	490d      	ldr	r1, [pc, #52]	; (8012758 <ipfrag_free_pbuf_custom+0x64>)
 8012724:	480b      	ldr	r0, [pc, #44]	; (8012754 <ipfrag_free_pbuf_custom+0x60>)
 8012726:	f000 fa7d 	bl	8012c24 <iprintf>
  if (pcr->original != NULL) {
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	695b      	ldr	r3, [r3, #20]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d004      	beq.n	801273c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	695b      	ldr	r3, [r3, #20]
 8012736:	4618      	mov	r0, r3
 8012738:	f7f7 f8c2 	bl	80098c0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801273c:	68f8      	ldr	r0, [r7, #12]
 801273e:	f7ff ffbd 	bl	80126bc <ip_frag_free_pbuf_custom_ref>
}
 8012742:	bf00      	nop
 8012744:	3710      	adds	r7, #16
 8012746:	46bd      	mov	sp, r7
 8012748:	bd80      	pop	{r7, pc}
 801274a:	bf00      	nop
 801274c:	08016454 	.word	0x08016454
 8012750:	08016618 	.word	0x08016618
 8012754:	0801649c 	.word	0x0801649c
 8012758:	08016624 	.word	0x08016624

0801275c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801275c:	b580      	push	{r7, lr}
 801275e:	b094      	sub	sp, #80	; 0x50
 8012760:	af02      	add	r7, sp, #8
 8012762:	60f8      	str	r0, [r7, #12]
 8012764:	60b9      	str	r1, [r7, #8]
 8012766:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012768:	2300      	movs	r3, #0
 801276a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801276e:	68bb      	ldr	r3, [r7, #8]
 8012770:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012772:	3b14      	subs	r3, #20
 8012774:	2b00      	cmp	r3, #0
 8012776:	da00      	bge.n	801277a <ip4_frag+0x1e>
 8012778:	3307      	adds	r3, #7
 801277a:	10db      	asrs	r3, r3, #3
 801277c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801277e:	2314      	movs	r3, #20
 8012780:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	685b      	ldr	r3, [r3, #4]
 8012786:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8012788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801278a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801278c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801278e:	781b      	ldrb	r3, [r3, #0]
 8012790:	f003 030f 	and.w	r3, r3, #15
 8012794:	b2db      	uxtb	r3, r3
 8012796:	009b      	lsls	r3, r3, #2
 8012798:	b2db      	uxtb	r3, r3
 801279a:	2b14      	cmp	r3, #20
 801279c:	d002      	beq.n	80127a4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801279e:	f06f 0305 	mvn.w	r3, #5
 80127a2:	e110      	b.n	80129c6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	895b      	ldrh	r3, [r3, #10]
 80127a8:	2b13      	cmp	r3, #19
 80127aa:	d809      	bhi.n	80127c0 <ip4_frag+0x64>
 80127ac:	4b88      	ldr	r3, [pc, #544]	; (80129d0 <ip4_frag+0x274>)
 80127ae:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80127b2:	4988      	ldr	r1, [pc, #544]	; (80129d4 <ip4_frag+0x278>)
 80127b4:	4888      	ldr	r0, [pc, #544]	; (80129d8 <ip4_frag+0x27c>)
 80127b6:	f000 fa35 	bl	8012c24 <iprintf>
 80127ba:	f06f 0305 	mvn.w	r3, #5
 80127be:	e102      	b.n	80129c6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80127c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127c2:	88db      	ldrh	r3, [r3, #6]
 80127c4:	b29b      	uxth	r3, r3
 80127c6:	4618      	mov	r0, r3
 80127c8:	f7f5 fc64 	bl	8008094 <lwip_htons>
 80127cc:	4603      	mov	r3, r0
 80127ce:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80127d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80127d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80127d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80127da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80127dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80127e0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	891b      	ldrh	r3, [r3, #8]
 80127e6:	3b14      	subs	r3, #20
 80127e8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80127ec:	e0e1      	b.n	80129b2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80127ee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80127f0:	00db      	lsls	r3, r3, #3
 80127f2:	b29b      	uxth	r3, r3
 80127f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80127f8:	4293      	cmp	r3, r2
 80127fa:	bf28      	it	cs
 80127fc:	4613      	movcs	r3, r2
 80127fe:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012800:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012804:	2114      	movs	r1, #20
 8012806:	200e      	movs	r0, #14
 8012808:	f7f6 fd76 	bl	80092f8 <pbuf_alloc>
 801280c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012810:	2b00      	cmp	r3, #0
 8012812:	f000 80d5 	beq.w	80129c0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012818:	895b      	ldrh	r3, [r3, #10]
 801281a:	2b13      	cmp	r3, #19
 801281c:	d806      	bhi.n	801282c <ip4_frag+0xd0>
 801281e:	4b6c      	ldr	r3, [pc, #432]	; (80129d0 <ip4_frag+0x274>)
 8012820:	f44f 7249 	mov.w	r2, #804	; 0x324
 8012824:	496d      	ldr	r1, [pc, #436]	; (80129dc <ip4_frag+0x280>)
 8012826:	486c      	ldr	r0, [pc, #432]	; (80129d8 <ip4_frag+0x27c>)
 8012828:	f000 f9fc 	bl	8012c24 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801282e:	685b      	ldr	r3, [r3, #4]
 8012830:	2214      	movs	r2, #20
 8012832:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012834:	4618      	mov	r0, r3
 8012836:	f000 f9df 	bl	8012bf8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801283c:	685b      	ldr	r3, [r3, #4]
 801283e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8012840:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012842:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8012846:	e064      	b.n	8012912 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	895a      	ldrh	r2, [r3, #10]
 801284c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801284e:	1ad3      	subs	r3, r2, r3
 8012850:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	895b      	ldrh	r3, [r3, #10]
 8012856:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012858:	429a      	cmp	r2, r3
 801285a:	d906      	bls.n	801286a <ip4_frag+0x10e>
 801285c:	4b5c      	ldr	r3, [pc, #368]	; (80129d0 <ip4_frag+0x274>)
 801285e:	f240 322d 	movw	r2, #813	; 0x32d
 8012862:	495f      	ldr	r1, [pc, #380]	; (80129e0 <ip4_frag+0x284>)
 8012864:	485c      	ldr	r0, [pc, #368]	; (80129d8 <ip4_frag+0x27c>)
 8012866:	f000 f9dd 	bl	8012c24 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801286a:	8bfa      	ldrh	r2, [r7, #30]
 801286c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012870:	4293      	cmp	r3, r2
 8012872:	bf28      	it	cs
 8012874:	4613      	movcs	r3, r2
 8012876:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801287a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801287e:	2b00      	cmp	r3, #0
 8012880:	d105      	bne.n	801288e <ip4_frag+0x132>
        poff = 0;
 8012882:	2300      	movs	r3, #0
 8012884:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	60fb      	str	r3, [r7, #12]
        continue;
 801288c:	e041      	b.n	8012912 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801288e:	f7ff ff0d 	bl	80126ac <ip_frag_alloc_pbuf_custom_ref>
 8012892:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8012894:	69bb      	ldr	r3, [r7, #24]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d103      	bne.n	80128a2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801289a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801289c:	f7f7 f810 	bl	80098c0 <pbuf_free>
        goto memerr;
 80128a0:	e08f      	b.n	80129c2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80128a2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80128a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80128aa:	4413      	add	r3, r2
 80128ac:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80128b0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80128b4:	9201      	str	r2, [sp, #4]
 80128b6:	9300      	str	r3, [sp, #0]
 80128b8:	4603      	mov	r3, r0
 80128ba:	2241      	movs	r2, #65	; 0x41
 80128bc:	2000      	movs	r0, #0
 80128be:	f7f6 fe45 	bl	800954c <pbuf_alloced_custom>
 80128c2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80128c4:	697b      	ldr	r3, [r7, #20]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d106      	bne.n	80128d8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80128ca:	69b8      	ldr	r0, [r7, #24]
 80128cc:	f7ff fef6 	bl	80126bc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80128d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80128d2:	f7f6 fff5 	bl	80098c0 <pbuf_free>
        goto memerr;
 80128d6:	e074      	b.n	80129c2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80128d8:	68f8      	ldr	r0, [r7, #12]
 80128da:	f7f7 f891 	bl	8009a00 <pbuf_ref>
      pcr->original = p;
 80128de:	69bb      	ldr	r3, [r7, #24]
 80128e0:	68fa      	ldr	r2, [r7, #12]
 80128e2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80128e4:	69bb      	ldr	r3, [r7, #24]
 80128e6:	4a3f      	ldr	r2, [pc, #252]	; (80129e4 <ip4_frag+0x288>)
 80128e8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80128ea:	6979      	ldr	r1, [r7, #20]
 80128ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80128ee:	f7f7 f8a9 	bl	8009a44 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80128f2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80128f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80128fa:	1ad3      	subs	r3, r2, r3
 80128fc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8012900:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012904:	2b00      	cmp	r3, #0
 8012906:	d004      	beq.n	8012912 <ip4_frag+0x1b6>
        poff = 0;
 8012908:	2300      	movs	r3, #0
 801290a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8012912:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012916:	2b00      	cmp	r3, #0
 8012918:	d196      	bne.n	8012848 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801291a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801291c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012920:	4413      	add	r3, r2
 8012922:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012924:	68bb      	ldr	r3, [r7, #8]
 8012926:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012928:	f1a3 0213 	sub.w	r2, r3, #19
 801292c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012930:	429a      	cmp	r2, r3
 8012932:	bfcc      	ite	gt
 8012934:	2301      	movgt	r3, #1
 8012936:	2300      	movle	r3, #0
 8012938:	b2db      	uxtb	r3, r3
 801293a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801293c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012940:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012944:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8012946:	6a3b      	ldr	r3, [r7, #32]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d002      	beq.n	8012952 <ip4_frag+0x1f6>
 801294c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801294e:	2b00      	cmp	r3, #0
 8012950:	d003      	beq.n	801295a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8012952:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012954:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012958:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801295a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801295c:	4618      	mov	r0, r3
 801295e:	f7f5 fb99 	bl	8008094 <lwip_htons>
 8012962:	4603      	mov	r3, r0
 8012964:	461a      	mov	r2, r3
 8012966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012968:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801296a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801296c:	3314      	adds	r3, #20
 801296e:	b29b      	uxth	r3, r3
 8012970:	4618      	mov	r0, r3
 8012972:	f7f5 fb8f 	bl	8008094 <lwip_htons>
 8012976:	4603      	mov	r3, r0
 8012978:	461a      	mov	r2, r3
 801297a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801297c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801297e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012980:	2200      	movs	r2, #0
 8012982:	729a      	strb	r2, [r3, #10]
 8012984:	2200      	movs	r2, #0
 8012986:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012988:	68bb      	ldr	r3, [r7, #8]
 801298a:	695b      	ldr	r3, [r3, #20]
 801298c:	687a      	ldr	r2, [r7, #4]
 801298e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012990:	68b8      	ldr	r0, [r7, #8]
 8012992:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8012994:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012996:	f7f6 ff93 	bl	80098c0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801299a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801299e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80129a0:	1ad3      	subs	r3, r2, r3
 80129a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80129a6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80129aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80129ac:	4413      	add	r3, r2
 80129ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80129b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	f47f af19 	bne.w	80127ee <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80129bc:	2300      	movs	r3, #0
 80129be:	e002      	b.n	80129c6 <ip4_frag+0x26a>
      goto memerr;
 80129c0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80129c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80129c6:	4618      	mov	r0, r3
 80129c8:	3748      	adds	r7, #72	; 0x48
 80129ca:	46bd      	mov	sp, r7
 80129cc:	bd80      	pop	{r7, pc}
 80129ce:	bf00      	nop
 80129d0:	08016454 	.word	0x08016454
 80129d4:	08016630 	.word	0x08016630
 80129d8:	0801649c 	.word	0x0801649c
 80129dc:	0801664c 	.word	0x0801664c
 80129e0:	0801666c 	.word	0x0801666c
 80129e4:	080126f5 	.word	0x080126f5

080129e8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b086      	sub	sp, #24
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	6078      	str	r0, [r7, #4]
 80129f0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80129f2:	230e      	movs	r3, #14
 80129f4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	895b      	ldrh	r3, [r3, #10]
 80129fa:	2b0e      	cmp	r3, #14
 80129fc:	d96e      	bls.n	8012adc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	7bdb      	ldrb	r3, [r3, #15]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d106      	bne.n	8012a14 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8012a06:	683b      	ldr	r3, [r7, #0]
 8012a08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012a0c:	3301      	adds	r3, #1
 8012a0e:	b2da      	uxtb	r2, r3
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	685b      	ldr	r3, [r3, #4]
 8012a18:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012a1a:	693b      	ldr	r3, [r7, #16]
 8012a1c:	7b1a      	ldrb	r2, [r3, #12]
 8012a1e:	7b5b      	ldrb	r3, [r3, #13]
 8012a20:	021b      	lsls	r3, r3, #8
 8012a22:	4313      	orrs	r3, r2
 8012a24:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012a26:	693b      	ldr	r3, [r7, #16]
 8012a28:	781b      	ldrb	r3, [r3, #0]
 8012a2a:	f003 0301 	and.w	r3, r3, #1
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d023      	beq.n	8012a7a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012a32:	693b      	ldr	r3, [r7, #16]
 8012a34:	781b      	ldrb	r3, [r3, #0]
 8012a36:	2b01      	cmp	r3, #1
 8012a38:	d10f      	bne.n	8012a5a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012a3a:	693b      	ldr	r3, [r7, #16]
 8012a3c:	785b      	ldrb	r3, [r3, #1]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d11b      	bne.n	8012a7a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012a42:	693b      	ldr	r3, [r7, #16]
 8012a44:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012a46:	2b5e      	cmp	r3, #94	; 0x5e
 8012a48:	d117      	bne.n	8012a7a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	7b5b      	ldrb	r3, [r3, #13]
 8012a4e:	f043 0310 	orr.w	r3, r3, #16
 8012a52:	b2da      	uxtb	r2, r3
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	735a      	strb	r2, [r3, #13]
 8012a58:	e00f      	b.n	8012a7a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012a5a:	693b      	ldr	r3, [r7, #16]
 8012a5c:	2206      	movs	r2, #6
 8012a5e:	4928      	ldr	r1, [pc, #160]	; (8012b00 <ethernet_input+0x118>)
 8012a60:	4618      	mov	r0, r3
 8012a62:	f000 f8bb 	bl	8012bdc <memcmp>
 8012a66:	4603      	mov	r3, r0
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d106      	bne.n	8012a7a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	7b5b      	ldrb	r3, [r3, #13]
 8012a70:	f043 0308 	orr.w	r3, r3, #8
 8012a74:	b2da      	uxtb	r2, r3
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012a7a:	89fb      	ldrh	r3, [r7, #14]
 8012a7c:	2b08      	cmp	r3, #8
 8012a7e:	d003      	beq.n	8012a88 <ethernet_input+0xa0>
 8012a80:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8012a84:	d014      	beq.n	8012ab0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012a86:	e032      	b.n	8012aee <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012a88:	683b      	ldr	r3, [r7, #0]
 8012a8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012a8e:	f003 0308 	and.w	r3, r3, #8
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d024      	beq.n	8012ae0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012a96:	8afb      	ldrh	r3, [r7, #22]
 8012a98:	4619      	mov	r1, r3
 8012a9a:	6878      	ldr	r0, [r7, #4]
 8012a9c:	f7f6 fe8a 	bl	80097b4 <pbuf_remove_header>
 8012aa0:	4603      	mov	r3, r0
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d11e      	bne.n	8012ae4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8012aa6:	6839      	ldr	r1, [r7, #0]
 8012aa8:	6878      	ldr	r0, [r7, #4]
 8012aaa:	f7fe fe95 	bl	80117d8 <ip4_input>
      break;
 8012aae:	e013      	b.n	8012ad8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012ab0:	683b      	ldr	r3, [r7, #0]
 8012ab2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012ab6:	f003 0308 	and.w	r3, r3, #8
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d014      	beq.n	8012ae8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012abe:	8afb      	ldrh	r3, [r7, #22]
 8012ac0:	4619      	mov	r1, r3
 8012ac2:	6878      	ldr	r0, [r7, #4]
 8012ac4:	f7f6 fe76 	bl	80097b4 <pbuf_remove_header>
 8012ac8:	4603      	mov	r3, r0
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d10e      	bne.n	8012aec <ethernet_input+0x104>
        etharp_input(p, netif);
 8012ace:	6839      	ldr	r1, [r7, #0]
 8012ad0:	6878      	ldr	r0, [r7, #4]
 8012ad2:	f7fe f80f 	bl	8010af4 <etharp_input>
      break;
 8012ad6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012ad8:	2300      	movs	r3, #0
 8012ada:	e00c      	b.n	8012af6 <ethernet_input+0x10e>
    goto free_and_return;
 8012adc:	bf00      	nop
 8012ade:	e006      	b.n	8012aee <ethernet_input+0x106>
        goto free_and_return;
 8012ae0:	bf00      	nop
 8012ae2:	e004      	b.n	8012aee <ethernet_input+0x106>
        goto free_and_return;
 8012ae4:	bf00      	nop
 8012ae6:	e002      	b.n	8012aee <ethernet_input+0x106>
        goto free_and_return;
 8012ae8:	bf00      	nop
 8012aea:	e000      	b.n	8012aee <ethernet_input+0x106>
        goto free_and_return;
 8012aec:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012aee:	6878      	ldr	r0, [r7, #4]
 8012af0:	f7f6 fee6 	bl	80098c0 <pbuf_free>
  return ERR_OK;
 8012af4:	2300      	movs	r3, #0
}
 8012af6:	4618      	mov	r0, r3
 8012af8:	3718      	adds	r7, #24
 8012afa:	46bd      	mov	sp, r7
 8012afc:	bd80      	pop	{r7, pc}
 8012afe:	bf00      	nop
 8012b00:	08016828 	.word	0x08016828

08012b04 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8012b04:	b580      	push	{r7, lr}
 8012b06:	b086      	sub	sp, #24
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	60f8      	str	r0, [r7, #12]
 8012b0c:	60b9      	str	r1, [r7, #8]
 8012b0e:	607a      	str	r2, [r7, #4]
 8012b10:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012b12:	8c3b      	ldrh	r3, [r7, #32]
 8012b14:	4618      	mov	r0, r3
 8012b16:	f7f5 fabd 	bl	8008094 <lwip_htons>
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8012b1e:	210e      	movs	r1, #14
 8012b20:	68b8      	ldr	r0, [r7, #8]
 8012b22:	f7f6 fe37 	bl	8009794 <pbuf_add_header>
 8012b26:	4603      	mov	r3, r0
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d125      	bne.n	8012b78 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8012b2c:	68bb      	ldr	r3, [r7, #8]
 8012b2e:	685b      	ldr	r3, [r3, #4]
 8012b30:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012b32:	693b      	ldr	r3, [r7, #16]
 8012b34:	8afa      	ldrh	r2, [r7, #22]
 8012b36:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012b38:	693b      	ldr	r3, [r7, #16]
 8012b3a:	2206      	movs	r2, #6
 8012b3c:	6839      	ldr	r1, [r7, #0]
 8012b3e:	4618      	mov	r0, r3
 8012b40:	f000 f85a 	bl	8012bf8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8012b44:	693b      	ldr	r3, [r7, #16]
 8012b46:	3306      	adds	r3, #6
 8012b48:	2206      	movs	r2, #6
 8012b4a:	6879      	ldr	r1, [r7, #4]
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	f000 f853 	bl	8012bf8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012b58:	2b06      	cmp	r3, #6
 8012b5a:	d006      	beq.n	8012b6a <ethernet_output+0x66>
 8012b5c:	4b0a      	ldr	r3, [pc, #40]	; (8012b88 <ethernet_output+0x84>)
 8012b5e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8012b62:	490a      	ldr	r1, [pc, #40]	; (8012b8c <ethernet_output+0x88>)
 8012b64:	480a      	ldr	r0, [pc, #40]	; (8012b90 <ethernet_output+0x8c>)
 8012b66:	f000 f85d 	bl	8012c24 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	699b      	ldr	r3, [r3, #24]
 8012b6e:	68b9      	ldr	r1, [r7, #8]
 8012b70:	68f8      	ldr	r0, [r7, #12]
 8012b72:	4798      	blx	r3
 8012b74:	4603      	mov	r3, r0
 8012b76:	e002      	b.n	8012b7e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012b78:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8012b7a:	f06f 0301 	mvn.w	r3, #1
}
 8012b7e:	4618      	mov	r0, r3
 8012b80:	3718      	adds	r7, #24
 8012b82:	46bd      	mov	sp, r7
 8012b84:	bd80      	pop	{r7, pc}
 8012b86:	bf00      	nop
 8012b88:	0801667c 	.word	0x0801667c
 8012b8c:	080166b4 	.word	0x080166b4
 8012b90:	080166e8 	.word	0x080166e8

08012b94 <__libc_init_array>:
 8012b94:	b570      	push	{r4, r5, r6, lr}
 8012b96:	4d0d      	ldr	r5, [pc, #52]	; (8012bcc <__libc_init_array+0x38>)
 8012b98:	4c0d      	ldr	r4, [pc, #52]	; (8012bd0 <__libc_init_array+0x3c>)
 8012b9a:	1b64      	subs	r4, r4, r5
 8012b9c:	10a4      	asrs	r4, r4, #2
 8012b9e:	2600      	movs	r6, #0
 8012ba0:	42a6      	cmp	r6, r4
 8012ba2:	d109      	bne.n	8012bb8 <__libc_init_array+0x24>
 8012ba4:	4d0b      	ldr	r5, [pc, #44]	; (8012bd4 <__libc_init_array+0x40>)
 8012ba6:	4c0c      	ldr	r4, [pc, #48]	; (8012bd8 <__libc_init_array+0x44>)
 8012ba8:	f001 f872 	bl	8013c90 <_init>
 8012bac:	1b64      	subs	r4, r4, r5
 8012bae:	10a4      	asrs	r4, r4, #2
 8012bb0:	2600      	movs	r6, #0
 8012bb2:	42a6      	cmp	r6, r4
 8012bb4:	d105      	bne.n	8012bc2 <__libc_init_array+0x2e>
 8012bb6:	bd70      	pop	{r4, r5, r6, pc}
 8012bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8012bbc:	4798      	blx	r3
 8012bbe:	3601      	adds	r6, #1
 8012bc0:	e7ee      	b.n	8012ba0 <__libc_init_array+0xc>
 8012bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8012bc6:	4798      	blx	r3
 8012bc8:	3601      	adds	r6, #1
 8012bca:	e7f2      	b.n	8012bb2 <__libc_init_array+0x1e>
 8012bcc:	0801698c 	.word	0x0801698c
 8012bd0:	0801698c 	.word	0x0801698c
 8012bd4:	0801698c 	.word	0x0801698c
 8012bd8:	08016990 	.word	0x08016990

08012bdc <memcmp>:
 8012bdc:	b530      	push	{r4, r5, lr}
 8012bde:	3901      	subs	r1, #1
 8012be0:	2400      	movs	r4, #0
 8012be2:	42a2      	cmp	r2, r4
 8012be4:	d101      	bne.n	8012bea <memcmp+0xe>
 8012be6:	2000      	movs	r0, #0
 8012be8:	e005      	b.n	8012bf6 <memcmp+0x1a>
 8012bea:	5d03      	ldrb	r3, [r0, r4]
 8012bec:	3401      	adds	r4, #1
 8012bee:	5d0d      	ldrb	r5, [r1, r4]
 8012bf0:	42ab      	cmp	r3, r5
 8012bf2:	d0f6      	beq.n	8012be2 <memcmp+0x6>
 8012bf4:	1b58      	subs	r0, r3, r5
 8012bf6:	bd30      	pop	{r4, r5, pc}

08012bf8 <memcpy>:
 8012bf8:	440a      	add	r2, r1
 8012bfa:	4291      	cmp	r1, r2
 8012bfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8012c00:	d100      	bne.n	8012c04 <memcpy+0xc>
 8012c02:	4770      	bx	lr
 8012c04:	b510      	push	{r4, lr}
 8012c06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012c0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012c0e:	4291      	cmp	r1, r2
 8012c10:	d1f9      	bne.n	8012c06 <memcpy+0xe>
 8012c12:	bd10      	pop	{r4, pc}

08012c14 <memset>:
 8012c14:	4402      	add	r2, r0
 8012c16:	4603      	mov	r3, r0
 8012c18:	4293      	cmp	r3, r2
 8012c1a:	d100      	bne.n	8012c1e <memset+0xa>
 8012c1c:	4770      	bx	lr
 8012c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8012c22:	e7f9      	b.n	8012c18 <memset+0x4>

08012c24 <iprintf>:
 8012c24:	b40f      	push	{r0, r1, r2, r3}
 8012c26:	4b0a      	ldr	r3, [pc, #40]	; (8012c50 <iprintf+0x2c>)
 8012c28:	b513      	push	{r0, r1, r4, lr}
 8012c2a:	681c      	ldr	r4, [r3, #0]
 8012c2c:	b124      	cbz	r4, 8012c38 <iprintf+0x14>
 8012c2e:	69a3      	ldr	r3, [r4, #24]
 8012c30:	b913      	cbnz	r3, 8012c38 <iprintf+0x14>
 8012c32:	4620      	mov	r0, r4
 8012c34:	f000 f8e0 	bl	8012df8 <__sinit>
 8012c38:	ab05      	add	r3, sp, #20
 8012c3a:	9a04      	ldr	r2, [sp, #16]
 8012c3c:	68a1      	ldr	r1, [r4, #8]
 8012c3e:	9301      	str	r3, [sp, #4]
 8012c40:	4620      	mov	r0, r4
 8012c42:	f000 fa67 	bl	8013114 <_vfiprintf_r>
 8012c46:	b002      	add	sp, #8
 8012c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c4c:	b004      	add	sp, #16
 8012c4e:	4770      	bx	lr
 8012c50:	24000030 	.word	0x24000030

08012c54 <rand>:
 8012c54:	4b17      	ldr	r3, [pc, #92]	; (8012cb4 <rand+0x60>)
 8012c56:	b510      	push	{r4, lr}
 8012c58:	681c      	ldr	r4, [r3, #0]
 8012c5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012c5c:	b9b3      	cbnz	r3, 8012c8c <rand+0x38>
 8012c5e:	2018      	movs	r0, #24
 8012c60:	f000 f97c 	bl	8012f5c <malloc>
 8012c64:	63a0      	str	r0, [r4, #56]	; 0x38
 8012c66:	b928      	cbnz	r0, 8012c74 <rand+0x20>
 8012c68:	4602      	mov	r2, r0
 8012c6a:	4b13      	ldr	r3, [pc, #76]	; (8012cb8 <rand+0x64>)
 8012c6c:	4813      	ldr	r0, [pc, #76]	; (8012cbc <rand+0x68>)
 8012c6e:	214e      	movs	r1, #78	; 0x4e
 8012c70:	f000 f84c 	bl	8012d0c <__assert_func>
 8012c74:	4a12      	ldr	r2, [pc, #72]	; (8012cc0 <rand+0x6c>)
 8012c76:	4b13      	ldr	r3, [pc, #76]	; (8012cc4 <rand+0x70>)
 8012c78:	e9c0 2300 	strd	r2, r3, [r0]
 8012c7c:	4b12      	ldr	r3, [pc, #72]	; (8012cc8 <rand+0x74>)
 8012c7e:	6083      	str	r3, [r0, #8]
 8012c80:	230b      	movs	r3, #11
 8012c82:	8183      	strh	r3, [r0, #12]
 8012c84:	2201      	movs	r2, #1
 8012c86:	2300      	movs	r3, #0
 8012c88:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8012c8c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012c8e:	480f      	ldr	r0, [pc, #60]	; (8012ccc <rand+0x78>)
 8012c90:	690a      	ldr	r2, [r1, #16]
 8012c92:	694b      	ldr	r3, [r1, #20]
 8012c94:	4c0e      	ldr	r4, [pc, #56]	; (8012cd0 <rand+0x7c>)
 8012c96:	4350      	muls	r0, r2
 8012c98:	fb04 0003 	mla	r0, r4, r3, r0
 8012c9c:	fba2 3404 	umull	r3, r4, r2, r4
 8012ca0:	1c5a      	adds	r2, r3, #1
 8012ca2:	4404      	add	r4, r0
 8012ca4:	f144 0000 	adc.w	r0, r4, #0
 8012ca8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8012cac:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012cb0:	bd10      	pop	{r4, pc}
 8012cb2:	bf00      	nop
 8012cb4:	24000030 	.word	0x24000030
 8012cb8:	0801683c 	.word	0x0801683c
 8012cbc:	08016853 	.word	0x08016853
 8012cc0:	abcd330e 	.word	0xabcd330e
 8012cc4:	e66d1234 	.word	0xe66d1234
 8012cc8:	0005deec 	.word	0x0005deec
 8012ccc:	5851f42d 	.word	0x5851f42d
 8012cd0:	4c957f2d 	.word	0x4c957f2d

08012cd4 <strcpy>:
 8012cd4:	4603      	mov	r3, r0
 8012cd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012cda:	f803 2b01 	strb.w	r2, [r3], #1
 8012cde:	2a00      	cmp	r2, #0
 8012ce0:	d1f9      	bne.n	8012cd6 <strcpy+0x2>
 8012ce2:	4770      	bx	lr

08012ce4 <strncpy>:
 8012ce4:	b510      	push	{r4, lr}
 8012ce6:	3901      	subs	r1, #1
 8012ce8:	4603      	mov	r3, r0
 8012cea:	b132      	cbz	r2, 8012cfa <strncpy+0x16>
 8012cec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012cf0:	f803 4b01 	strb.w	r4, [r3], #1
 8012cf4:	3a01      	subs	r2, #1
 8012cf6:	2c00      	cmp	r4, #0
 8012cf8:	d1f7      	bne.n	8012cea <strncpy+0x6>
 8012cfa:	441a      	add	r2, r3
 8012cfc:	2100      	movs	r1, #0
 8012cfe:	4293      	cmp	r3, r2
 8012d00:	d100      	bne.n	8012d04 <strncpy+0x20>
 8012d02:	bd10      	pop	{r4, pc}
 8012d04:	f803 1b01 	strb.w	r1, [r3], #1
 8012d08:	e7f9      	b.n	8012cfe <strncpy+0x1a>
	...

08012d0c <__assert_func>:
 8012d0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012d0e:	4614      	mov	r4, r2
 8012d10:	461a      	mov	r2, r3
 8012d12:	4b09      	ldr	r3, [pc, #36]	; (8012d38 <__assert_func+0x2c>)
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	4605      	mov	r5, r0
 8012d18:	68d8      	ldr	r0, [r3, #12]
 8012d1a:	b14c      	cbz	r4, 8012d30 <__assert_func+0x24>
 8012d1c:	4b07      	ldr	r3, [pc, #28]	; (8012d3c <__assert_func+0x30>)
 8012d1e:	9100      	str	r1, [sp, #0]
 8012d20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012d24:	4906      	ldr	r1, [pc, #24]	; (8012d40 <__assert_func+0x34>)
 8012d26:	462b      	mov	r3, r5
 8012d28:	f000 f8e4 	bl	8012ef4 <fiprintf>
 8012d2c:	f000 fddc 	bl	80138e8 <abort>
 8012d30:	4b04      	ldr	r3, [pc, #16]	; (8012d44 <__assert_func+0x38>)
 8012d32:	461c      	mov	r4, r3
 8012d34:	e7f3      	b.n	8012d1e <__assert_func+0x12>
 8012d36:	bf00      	nop
 8012d38:	24000030 	.word	0x24000030
 8012d3c:	080168b2 	.word	0x080168b2
 8012d40:	080168bf 	.word	0x080168bf
 8012d44:	080168ed 	.word	0x080168ed

08012d48 <std>:
 8012d48:	2300      	movs	r3, #0
 8012d4a:	b510      	push	{r4, lr}
 8012d4c:	4604      	mov	r4, r0
 8012d4e:	e9c0 3300 	strd	r3, r3, [r0]
 8012d52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012d56:	6083      	str	r3, [r0, #8]
 8012d58:	8181      	strh	r1, [r0, #12]
 8012d5a:	6643      	str	r3, [r0, #100]	; 0x64
 8012d5c:	81c2      	strh	r2, [r0, #14]
 8012d5e:	6183      	str	r3, [r0, #24]
 8012d60:	4619      	mov	r1, r3
 8012d62:	2208      	movs	r2, #8
 8012d64:	305c      	adds	r0, #92	; 0x5c
 8012d66:	f7ff ff55 	bl	8012c14 <memset>
 8012d6a:	4b05      	ldr	r3, [pc, #20]	; (8012d80 <std+0x38>)
 8012d6c:	6263      	str	r3, [r4, #36]	; 0x24
 8012d6e:	4b05      	ldr	r3, [pc, #20]	; (8012d84 <std+0x3c>)
 8012d70:	62a3      	str	r3, [r4, #40]	; 0x28
 8012d72:	4b05      	ldr	r3, [pc, #20]	; (8012d88 <std+0x40>)
 8012d74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012d76:	4b05      	ldr	r3, [pc, #20]	; (8012d8c <std+0x44>)
 8012d78:	6224      	str	r4, [r4, #32]
 8012d7a:	6323      	str	r3, [r4, #48]	; 0x30
 8012d7c:	bd10      	pop	{r4, pc}
 8012d7e:	bf00      	nop
 8012d80:	080136bd 	.word	0x080136bd
 8012d84:	080136df 	.word	0x080136df
 8012d88:	08013717 	.word	0x08013717
 8012d8c:	0801373b 	.word	0x0801373b

08012d90 <_cleanup_r>:
 8012d90:	4901      	ldr	r1, [pc, #4]	; (8012d98 <_cleanup_r+0x8>)
 8012d92:	f000 b8c1 	b.w	8012f18 <_fwalk_reent>
 8012d96:	bf00      	nop
 8012d98:	08013a25 	.word	0x08013a25

08012d9c <__sfmoreglue>:
 8012d9c:	b570      	push	{r4, r5, r6, lr}
 8012d9e:	1e4a      	subs	r2, r1, #1
 8012da0:	2568      	movs	r5, #104	; 0x68
 8012da2:	4355      	muls	r5, r2
 8012da4:	460e      	mov	r6, r1
 8012da6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012daa:	f000 f92f 	bl	801300c <_malloc_r>
 8012dae:	4604      	mov	r4, r0
 8012db0:	b140      	cbz	r0, 8012dc4 <__sfmoreglue+0x28>
 8012db2:	2100      	movs	r1, #0
 8012db4:	e9c0 1600 	strd	r1, r6, [r0]
 8012db8:	300c      	adds	r0, #12
 8012dba:	60a0      	str	r0, [r4, #8]
 8012dbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012dc0:	f7ff ff28 	bl	8012c14 <memset>
 8012dc4:	4620      	mov	r0, r4
 8012dc6:	bd70      	pop	{r4, r5, r6, pc}

08012dc8 <__sfp_lock_acquire>:
 8012dc8:	4801      	ldr	r0, [pc, #4]	; (8012dd0 <__sfp_lock_acquire+0x8>)
 8012dca:	f000 b8c5 	b.w	8012f58 <__retarget_lock_acquire_recursive>
 8012dce:	bf00      	nop
 8012dd0:	24003494 	.word	0x24003494

08012dd4 <__sfp_lock_release>:
 8012dd4:	4801      	ldr	r0, [pc, #4]	; (8012ddc <__sfp_lock_release+0x8>)
 8012dd6:	f000 b8c0 	b.w	8012f5a <__retarget_lock_release_recursive>
 8012dda:	bf00      	nop
 8012ddc:	24003494 	.word	0x24003494

08012de0 <__sinit_lock_acquire>:
 8012de0:	4801      	ldr	r0, [pc, #4]	; (8012de8 <__sinit_lock_acquire+0x8>)
 8012de2:	f000 b8b9 	b.w	8012f58 <__retarget_lock_acquire_recursive>
 8012de6:	bf00      	nop
 8012de8:	2400348f 	.word	0x2400348f

08012dec <__sinit_lock_release>:
 8012dec:	4801      	ldr	r0, [pc, #4]	; (8012df4 <__sinit_lock_release+0x8>)
 8012dee:	f000 b8b4 	b.w	8012f5a <__retarget_lock_release_recursive>
 8012df2:	bf00      	nop
 8012df4:	2400348f 	.word	0x2400348f

08012df8 <__sinit>:
 8012df8:	b510      	push	{r4, lr}
 8012dfa:	4604      	mov	r4, r0
 8012dfc:	f7ff fff0 	bl	8012de0 <__sinit_lock_acquire>
 8012e00:	69a3      	ldr	r3, [r4, #24]
 8012e02:	b11b      	cbz	r3, 8012e0c <__sinit+0x14>
 8012e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e08:	f7ff bff0 	b.w	8012dec <__sinit_lock_release>
 8012e0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012e10:	6523      	str	r3, [r4, #80]	; 0x50
 8012e12:	4b13      	ldr	r3, [pc, #76]	; (8012e60 <__sinit+0x68>)
 8012e14:	4a13      	ldr	r2, [pc, #76]	; (8012e64 <__sinit+0x6c>)
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	62a2      	str	r2, [r4, #40]	; 0x28
 8012e1a:	42a3      	cmp	r3, r4
 8012e1c:	bf04      	itt	eq
 8012e1e:	2301      	moveq	r3, #1
 8012e20:	61a3      	streq	r3, [r4, #24]
 8012e22:	4620      	mov	r0, r4
 8012e24:	f000 f820 	bl	8012e68 <__sfp>
 8012e28:	6060      	str	r0, [r4, #4]
 8012e2a:	4620      	mov	r0, r4
 8012e2c:	f000 f81c 	bl	8012e68 <__sfp>
 8012e30:	60a0      	str	r0, [r4, #8]
 8012e32:	4620      	mov	r0, r4
 8012e34:	f000 f818 	bl	8012e68 <__sfp>
 8012e38:	2200      	movs	r2, #0
 8012e3a:	60e0      	str	r0, [r4, #12]
 8012e3c:	2104      	movs	r1, #4
 8012e3e:	6860      	ldr	r0, [r4, #4]
 8012e40:	f7ff ff82 	bl	8012d48 <std>
 8012e44:	68a0      	ldr	r0, [r4, #8]
 8012e46:	2201      	movs	r2, #1
 8012e48:	2109      	movs	r1, #9
 8012e4a:	f7ff ff7d 	bl	8012d48 <std>
 8012e4e:	68e0      	ldr	r0, [r4, #12]
 8012e50:	2202      	movs	r2, #2
 8012e52:	2112      	movs	r1, #18
 8012e54:	f7ff ff78 	bl	8012d48 <std>
 8012e58:	2301      	movs	r3, #1
 8012e5a:	61a3      	str	r3, [r4, #24]
 8012e5c:	e7d2      	b.n	8012e04 <__sinit+0xc>
 8012e5e:	bf00      	nop
 8012e60:	08016838 	.word	0x08016838
 8012e64:	08012d91 	.word	0x08012d91

08012e68 <__sfp>:
 8012e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e6a:	4607      	mov	r7, r0
 8012e6c:	f7ff ffac 	bl	8012dc8 <__sfp_lock_acquire>
 8012e70:	4b1e      	ldr	r3, [pc, #120]	; (8012eec <__sfp+0x84>)
 8012e72:	681e      	ldr	r6, [r3, #0]
 8012e74:	69b3      	ldr	r3, [r6, #24]
 8012e76:	b913      	cbnz	r3, 8012e7e <__sfp+0x16>
 8012e78:	4630      	mov	r0, r6
 8012e7a:	f7ff ffbd 	bl	8012df8 <__sinit>
 8012e7e:	3648      	adds	r6, #72	; 0x48
 8012e80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012e84:	3b01      	subs	r3, #1
 8012e86:	d503      	bpl.n	8012e90 <__sfp+0x28>
 8012e88:	6833      	ldr	r3, [r6, #0]
 8012e8a:	b30b      	cbz	r3, 8012ed0 <__sfp+0x68>
 8012e8c:	6836      	ldr	r6, [r6, #0]
 8012e8e:	e7f7      	b.n	8012e80 <__sfp+0x18>
 8012e90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012e94:	b9d5      	cbnz	r5, 8012ecc <__sfp+0x64>
 8012e96:	4b16      	ldr	r3, [pc, #88]	; (8012ef0 <__sfp+0x88>)
 8012e98:	60e3      	str	r3, [r4, #12]
 8012e9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012e9e:	6665      	str	r5, [r4, #100]	; 0x64
 8012ea0:	f000 f859 	bl	8012f56 <__retarget_lock_init_recursive>
 8012ea4:	f7ff ff96 	bl	8012dd4 <__sfp_lock_release>
 8012ea8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012eac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012eb0:	6025      	str	r5, [r4, #0]
 8012eb2:	61a5      	str	r5, [r4, #24]
 8012eb4:	2208      	movs	r2, #8
 8012eb6:	4629      	mov	r1, r5
 8012eb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012ebc:	f7ff feaa 	bl	8012c14 <memset>
 8012ec0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012ec4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012ec8:	4620      	mov	r0, r4
 8012eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ecc:	3468      	adds	r4, #104	; 0x68
 8012ece:	e7d9      	b.n	8012e84 <__sfp+0x1c>
 8012ed0:	2104      	movs	r1, #4
 8012ed2:	4638      	mov	r0, r7
 8012ed4:	f7ff ff62 	bl	8012d9c <__sfmoreglue>
 8012ed8:	4604      	mov	r4, r0
 8012eda:	6030      	str	r0, [r6, #0]
 8012edc:	2800      	cmp	r0, #0
 8012ede:	d1d5      	bne.n	8012e8c <__sfp+0x24>
 8012ee0:	f7ff ff78 	bl	8012dd4 <__sfp_lock_release>
 8012ee4:	230c      	movs	r3, #12
 8012ee6:	603b      	str	r3, [r7, #0]
 8012ee8:	e7ee      	b.n	8012ec8 <__sfp+0x60>
 8012eea:	bf00      	nop
 8012eec:	08016838 	.word	0x08016838
 8012ef0:	ffff0001 	.word	0xffff0001

08012ef4 <fiprintf>:
 8012ef4:	b40e      	push	{r1, r2, r3}
 8012ef6:	b503      	push	{r0, r1, lr}
 8012ef8:	4601      	mov	r1, r0
 8012efa:	ab03      	add	r3, sp, #12
 8012efc:	4805      	ldr	r0, [pc, #20]	; (8012f14 <fiprintf+0x20>)
 8012efe:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f02:	6800      	ldr	r0, [r0, #0]
 8012f04:	9301      	str	r3, [sp, #4]
 8012f06:	f000 f905 	bl	8013114 <_vfiprintf_r>
 8012f0a:	b002      	add	sp, #8
 8012f0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f10:	b003      	add	sp, #12
 8012f12:	4770      	bx	lr
 8012f14:	24000030 	.word	0x24000030

08012f18 <_fwalk_reent>:
 8012f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f1c:	4606      	mov	r6, r0
 8012f1e:	4688      	mov	r8, r1
 8012f20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012f24:	2700      	movs	r7, #0
 8012f26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012f2a:	f1b9 0901 	subs.w	r9, r9, #1
 8012f2e:	d505      	bpl.n	8012f3c <_fwalk_reent+0x24>
 8012f30:	6824      	ldr	r4, [r4, #0]
 8012f32:	2c00      	cmp	r4, #0
 8012f34:	d1f7      	bne.n	8012f26 <_fwalk_reent+0xe>
 8012f36:	4638      	mov	r0, r7
 8012f38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f3c:	89ab      	ldrh	r3, [r5, #12]
 8012f3e:	2b01      	cmp	r3, #1
 8012f40:	d907      	bls.n	8012f52 <_fwalk_reent+0x3a>
 8012f42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012f46:	3301      	adds	r3, #1
 8012f48:	d003      	beq.n	8012f52 <_fwalk_reent+0x3a>
 8012f4a:	4629      	mov	r1, r5
 8012f4c:	4630      	mov	r0, r6
 8012f4e:	47c0      	blx	r8
 8012f50:	4307      	orrs	r7, r0
 8012f52:	3568      	adds	r5, #104	; 0x68
 8012f54:	e7e9      	b.n	8012f2a <_fwalk_reent+0x12>

08012f56 <__retarget_lock_init_recursive>:
 8012f56:	4770      	bx	lr

08012f58 <__retarget_lock_acquire_recursive>:
 8012f58:	4770      	bx	lr

08012f5a <__retarget_lock_release_recursive>:
 8012f5a:	4770      	bx	lr

08012f5c <malloc>:
 8012f5c:	4b02      	ldr	r3, [pc, #8]	; (8012f68 <malloc+0xc>)
 8012f5e:	4601      	mov	r1, r0
 8012f60:	6818      	ldr	r0, [r3, #0]
 8012f62:	f000 b853 	b.w	801300c <_malloc_r>
 8012f66:	bf00      	nop
 8012f68:	24000030 	.word	0x24000030

08012f6c <_free_r>:
 8012f6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012f6e:	2900      	cmp	r1, #0
 8012f70:	d048      	beq.n	8013004 <_free_r+0x98>
 8012f72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012f76:	9001      	str	r0, [sp, #4]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	f1a1 0404 	sub.w	r4, r1, #4
 8012f7e:	bfb8      	it	lt
 8012f80:	18e4      	addlt	r4, r4, r3
 8012f82:	f000 fe01 	bl	8013b88 <__malloc_lock>
 8012f86:	4a20      	ldr	r2, [pc, #128]	; (8013008 <_free_r+0x9c>)
 8012f88:	9801      	ldr	r0, [sp, #4]
 8012f8a:	6813      	ldr	r3, [r2, #0]
 8012f8c:	4615      	mov	r5, r2
 8012f8e:	b933      	cbnz	r3, 8012f9e <_free_r+0x32>
 8012f90:	6063      	str	r3, [r4, #4]
 8012f92:	6014      	str	r4, [r2, #0]
 8012f94:	b003      	add	sp, #12
 8012f96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012f9a:	f000 bdfb 	b.w	8013b94 <__malloc_unlock>
 8012f9e:	42a3      	cmp	r3, r4
 8012fa0:	d90b      	bls.n	8012fba <_free_r+0x4e>
 8012fa2:	6821      	ldr	r1, [r4, #0]
 8012fa4:	1862      	adds	r2, r4, r1
 8012fa6:	4293      	cmp	r3, r2
 8012fa8:	bf04      	itt	eq
 8012faa:	681a      	ldreq	r2, [r3, #0]
 8012fac:	685b      	ldreq	r3, [r3, #4]
 8012fae:	6063      	str	r3, [r4, #4]
 8012fb0:	bf04      	itt	eq
 8012fb2:	1852      	addeq	r2, r2, r1
 8012fb4:	6022      	streq	r2, [r4, #0]
 8012fb6:	602c      	str	r4, [r5, #0]
 8012fb8:	e7ec      	b.n	8012f94 <_free_r+0x28>
 8012fba:	461a      	mov	r2, r3
 8012fbc:	685b      	ldr	r3, [r3, #4]
 8012fbe:	b10b      	cbz	r3, 8012fc4 <_free_r+0x58>
 8012fc0:	42a3      	cmp	r3, r4
 8012fc2:	d9fa      	bls.n	8012fba <_free_r+0x4e>
 8012fc4:	6811      	ldr	r1, [r2, #0]
 8012fc6:	1855      	adds	r5, r2, r1
 8012fc8:	42a5      	cmp	r5, r4
 8012fca:	d10b      	bne.n	8012fe4 <_free_r+0x78>
 8012fcc:	6824      	ldr	r4, [r4, #0]
 8012fce:	4421      	add	r1, r4
 8012fd0:	1854      	adds	r4, r2, r1
 8012fd2:	42a3      	cmp	r3, r4
 8012fd4:	6011      	str	r1, [r2, #0]
 8012fd6:	d1dd      	bne.n	8012f94 <_free_r+0x28>
 8012fd8:	681c      	ldr	r4, [r3, #0]
 8012fda:	685b      	ldr	r3, [r3, #4]
 8012fdc:	6053      	str	r3, [r2, #4]
 8012fde:	4421      	add	r1, r4
 8012fe0:	6011      	str	r1, [r2, #0]
 8012fe2:	e7d7      	b.n	8012f94 <_free_r+0x28>
 8012fe4:	d902      	bls.n	8012fec <_free_r+0x80>
 8012fe6:	230c      	movs	r3, #12
 8012fe8:	6003      	str	r3, [r0, #0]
 8012fea:	e7d3      	b.n	8012f94 <_free_r+0x28>
 8012fec:	6825      	ldr	r5, [r4, #0]
 8012fee:	1961      	adds	r1, r4, r5
 8012ff0:	428b      	cmp	r3, r1
 8012ff2:	bf04      	itt	eq
 8012ff4:	6819      	ldreq	r1, [r3, #0]
 8012ff6:	685b      	ldreq	r3, [r3, #4]
 8012ff8:	6063      	str	r3, [r4, #4]
 8012ffa:	bf04      	itt	eq
 8012ffc:	1949      	addeq	r1, r1, r5
 8012ffe:	6021      	streq	r1, [r4, #0]
 8013000:	6054      	str	r4, [r2, #4]
 8013002:	e7c7      	b.n	8012f94 <_free_r+0x28>
 8013004:	b003      	add	sp, #12
 8013006:	bd30      	pop	{r4, r5, pc}
 8013008:	24000238 	.word	0x24000238

0801300c <_malloc_r>:
 801300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801300e:	1ccd      	adds	r5, r1, #3
 8013010:	f025 0503 	bic.w	r5, r5, #3
 8013014:	3508      	adds	r5, #8
 8013016:	2d0c      	cmp	r5, #12
 8013018:	bf38      	it	cc
 801301a:	250c      	movcc	r5, #12
 801301c:	2d00      	cmp	r5, #0
 801301e:	4606      	mov	r6, r0
 8013020:	db01      	blt.n	8013026 <_malloc_r+0x1a>
 8013022:	42a9      	cmp	r1, r5
 8013024:	d903      	bls.n	801302e <_malloc_r+0x22>
 8013026:	230c      	movs	r3, #12
 8013028:	6033      	str	r3, [r6, #0]
 801302a:	2000      	movs	r0, #0
 801302c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801302e:	f000 fdab 	bl	8013b88 <__malloc_lock>
 8013032:	4921      	ldr	r1, [pc, #132]	; (80130b8 <_malloc_r+0xac>)
 8013034:	680a      	ldr	r2, [r1, #0]
 8013036:	4614      	mov	r4, r2
 8013038:	b99c      	cbnz	r4, 8013062 <_malloc_r+0x56>
 801303a:	4f20      	ldr	r7, [pc, #128]	; (80130bc <_malloc_r+0xb0>)
 801303c:	683b      	ldr	r3, [r7, #0]
 801303e:	b923      	cbnz	r3, 801304a <_malloc_r+0x3e>
 8013040:	4621      	mov	r1, r4
 8013042:	4630      	mov	r0, r6
 8013044:	f000 fb2a 	bl	801369c <_sbrk_r>
 8013048:	6038      	str	r0, [r7, #0]
 801304a:	4629      	mov	r1, r5
 801304c:	4630      	mov	r0, r6
 801304e:	f000 fb25 	bl	801369c <_sbrk_r>
 8013052:	1c43      	adds	r3, r0, #1
 8013054:	d123      	bne.n	801309e <_malloc_r+0x92>
 8013056:	230c      	movs	r3, #12
 8013058:	6033      	str	r3, [r6, #0]
 801305a:	4630      	mov	r0, r6
 801305c:	f000 fd9a 	bl	8013b94 <__malloc_unlock>
 8013060:	e7e3      	b.n	801302a <_malloc_r+0x1e>
 8013062:	6823      	ldr	r3, [r4, #0]
 8013064:	1b5b      	subs	r3, r3, r5
 8013066:	d417      	bmi.n	8013098 <_malloc_r+0x8c>
 8013068:	2b0b      	cmp	r3, #11
 801306a:	d903      	bls.n	8013074 <_malloc_r+0x68>
 801306c:	6023      	str	r3, [r4, #0]
 801306e:	441c      	add	r4, r3
 8013070:	6025      	str	r5, [r4, #0]
 8013072:	e004      	b.n	801307e <_malloc_r+0x72>
 8013074:	6863      	ldr	r3, [r4, #4]
 8013076:	42a2      	cmp	r2, r4
 8013078:	bf0c      	ite	eq
 801307a:	600b      	streq	r3, [r1, #0]
 801307c:	6053      	strne	r3, [r2, #4]
 801307e:	4630      	mov	r0, r6
 8013080:	f000 fd88 	bl	8013b94 <__malloc_unlock>
 8013084:	f104 000b 	add.w	r0, r4, #11
 8013088:	1d23      	adds	r3, r4, #4
 801308a:	f020 0007 	bic.w	r0, r0, #7
 801308e:	1ac2      	subs	r2, r0, r3
 8013090:	d0cc      	beq.n	801302c <_malloc_r+0x20>
 8013092:	1a1b      	subs	r3, r3, r0
 8013094:	50a3      	str	r3, [r4, r2]
 8013096:	e7c9      	b.n	801302c <_malloc_r+0x20>
 8013098:	4622      	mov	r2, r4
 801309a:	6864      	ldr	r4, [r4, #4]
 801309c:	e7cc      	b.n	8013038 <_malloc_r+0x2c>
 801309e:	1cc4      	adds	r4, r0, #3
 80130a0:	f024 0403 	bic.w	r4, r4, #3
 80130a4:	42a0      	cmp	r0, r4
 80130a6:	d0e3      	beq.n	8013070 <_malloc_r+0x64>
 80130a8:	1a21      	subs	r1, r4, r0
 80130aa:	4630      	mov	r0, r6
 80130ac:	f000 faf6 	bl	801369c <_sbrk_r>
 80130b0:	3001      	adds	r0, #1
 80130b2:	d1dd      	bne.n	8013070 <_malloc_r+0x64>
 80130b4:	e7cf      	b.n	8013056 <_malloc_r+0x4a>
 80130b6:	bf00      	nop
 80130b8:	24000238 	.word	0x24000238
 80130bc:	2400023c 	.word	0x2400023c

080130c0 <__sfputc_r>:
 80130c0:	6893      	ldr	r3, [r2, #8]
 80130c2:	3b01      	subs	r3, #1
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	b410      	push	{r4}
 80130c8:	6093      	str	r3, [r2, #8]
 80130ca:	da08      	bge.n	80130de <__sfputc_r+0x1e>
 80130cc:	6994      	ldr	r4, [r2, #24]
 80130ce:	42a3      	cmp	r3, r4
 80130d0:	db01      	blt.n	80130d6 <__sfputc_r+0x16>
 80130d2:	290a      	cmp	r1, #10
 80130d4:	d103      	bne.n	80130de <__sfputc_r+0x1e>
 80130d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130da:	f000 bb33 	b.w	8013744 <__swbuf_r>
 80130de:	6813      	ldr	r3, [r2, #0]
 80130e0:	1c58      	adds	r0, r3, #1
 80130e2:	6010      	str	r0, [r2, #0]
 80130e4:	7019      	strb	r1, [r3, #0]
 80130e6:	4608      	mov	r0, r1
 80130e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130ec:	4770      	bx	lr

080130ee <__sfputs_r>:
 80130ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130f0:	4606      	mov	r6, r0
 80130f2:	460f      	mov	r7, r1
 80130f4:	4614      	mov	r4, r2
 80130f6:	18d5      	adds	r5, r2, r3
 80130f8:	42ac      	cmp	r4, r5
 80130fa:	d101      	bne.n	8013100 <__sfputs_r+0x12>
 80130fc:	2000      	movs	r0, #0
 80130fe:	e007      	b.n	8013110 <__sfputs_r+0x22>
 8013100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013104:	463a      	mov	r2, r7
 8013106:	4630      	mov	r0, r6
 8013108:	f7ff ffda 	bl	80130c0 <__sfputc_r>
 801310c:	1c43      	adds	r3, r0, #1
 801310e:	d1f3      	bne.n	80130f8 <__sfputs_r+0xa>
 8013110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013114 <_vfiprintf_r>:
 8013114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013118:	460d      	mov	r5, r1
 801311a:	b09d      	sub	sp, #116	; 0x74
 801311c:	4614      	mov	r4, r2
 801311e:	4698      	mov	r8, r3
 8013120:	4606      	mov	r6, r0
 8013122:	b118      	cbz	r0, 801312c <_vfiprintf_r+0x18>
 8013124:	6983      	ldr	r3, [r0, #24]
 8013126:	b90b      	cbnz	r3, 801312c <_vfiprintf_r+0x18>
 8013128:	f7ff fe66 	bl	8012df8 <__sinit>
 801312c:	4b89      	ldr	r3, [pc, #548]	; (8013354 <_vfiprintf_r+0x240>)
 801312e:	429d      	cmp	r5, r3
 8013130:	d11b      	bne.n	801316a <_vfiprintf_r+0x56>
 8013132:	6875      	ldr	r5, [r6, #4]
 8013134:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013136:	07d9      	lsls	r1, r3, #31
 8013138:	d405      	bmi.n	8013146 <_vfiprintf_r+0x32>
 801313a:	89ab      	ldrh	r3, [r5, #12]
 801313c:	059a      	lsls	r2, r3, #22
 801313e:	d402      	bmi.n	8013146 <_vfiprintf_r+0x32>
 8013140:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013142:	f7ff ff09 	bl	8012f58 <__retarget_lock_acquire_recursive>
 8013146:	89ab      	ldrh	r3, [r5, #12]
 8013148:	071b      	lsls	r3, r3, #28
 801314a:	d501      	bpl.n	8013150 <_vfiprintf_r+0x3c>
 801314c:	692b      	ldr	r3, [r5, #16]
 801314e:	b9eb      	cbnz	r3, 801318c <_vfiprintf_r+0x78>
 8013150:	4629      	mov	r1, r5
 8013152:	4630      	mov	r0, r6
 8013154:	f000 fb5a 	bl	801380c <__swsetup_r>
 8013158:	b1c0      	cbz	r0, 801318c <_vfiprintf_r+0x78>
 801315a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801315c:	07dc      	lsls	r4, r3, #31
 801315e:	d50e      	bpl.n	801317e <_vfiprintf_r+0x6a>
 8013160:	f04f 30ff 	mov.w	r0, #4294967295
 8013164:	b01d      	add	sp, #116	; 0x74
 8013166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801316a:	4b7b      	ldr	r3, [pc, #492]	; (8013358 <_vfiprintf_r+0x244>)
 801316c:	429d      	cmp	r5, r3
 801316e:	d101      	bne.n	8013174 <_vfiprintf_r+0x60>
 8013170:	68b5      	ldr	r5, [r6, #8]
 8013172:	e7df      	b.n	8013134 <_vfiprintf_r+0x20>
 8013174:	4b79      	ldr	r3, [pc, #484]	; (801335c <_vfiprintf_r+0x248>)
 8013176:	429d      	cmp	r5, r3
 8013178:	bf08      	it	eq
 801317a:	68f5      	ldreq	r5, [r6, #12]
 801317c:	e7da      	b.n	8013134 <_vfiprintf_r+0x20>
 801317e:	89ab      	ldrh	r3, [r5, #12]
 8013180:	0598      	lsls	r0, r3, #22
 8013182:	d4ed      	bmi.n	8013160 <_vfiprintf_r+0x4c>
 8013184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013186:	f7ff fee8 	bl	8012f5a <__retarget_lock_release_recursive>
 801318a:	e7e9      	b.n	8013160 <_vfiprintf_r+0x4c>
 801318c:	2300      	movs	r3, #0
 801318e:	9309      	str	r3, [sp, #36]	; 0x24
 8013190:	2320      	movs	r3, #32
 8013192:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013196:	f8cd 800c 	str.w	r8, [sp, #12]
 801319a:	2330      	movs	r3, #48	; 0x30
 801319c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013360 <_vfiprintf_r+0x24c>
 80131a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80131a4:	f04f 0901 	mov.w	r9, #1
 80131a8:	4623      	mov	r3, r4
 80131aa:	469a      	mov	sl, r3
 80131ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80131b0:	b10a      	cbz	r2, 80131b6 <_vfiprintf_r+0xa2>
 80131b2:	2a25      	cmp	r2, #37	; 0x25
 80131b4:	d1f9      	bne.n	80131aa <_vfiprintf_r+0x96>
 80131b6:	ebba 0b04 	subs.w	fp, sl, r4
 80131ba:	d00b      	beq.n	80131d4 <_vfiprintf_r+0xc0>
 80131bc:	465b      	mov	r3, fp
 80131be:	4622      	mov	r2, r4
 80131c0:	4629      	mov	r1, r5
 80131c2:	4630      	mov	r0, r6
 80131c4:	f7ff ff93 	bl	80130ee <__sfputs_r>
 80131c8:	3001      	adds	r0, #1
 80131ca:	f000 80aa 	beq.w	8013322 <_vfiprintf_r+0x20e>
 80131ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80131d0:	445a      	add	r2, fp
 80131d2:	9209      	str	r2, [sp, #36]	; 0x24
 80131d4:	f89a 3000 	ldrb.w	r3, [sl]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	f000 80a2 	beq.w	8013322 <_vfiprintf_r+0x20e>
 80131de:	2300      	movs	r3, #0
 80131e0:	f04f 32ff 	mov.w	r2, #4294967295
 80131e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80131e8:	f10a 0a01 	add.w	sl, sl, #1
 80131ec:	9304      	str	r3, [sp, #16]
 80131ee:	9307      	str	r3, [sp, #28]
 80131f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80131f4:	931a      	str	r3, [sp, #104]	; 0x68
 80131f6:	4654      	mov	r4, sl
 80131f8:	2205      	movs	r2, #5
 80131fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131fe:	4858      	ldr	r0, [pc, #352]	; (8013360 <_vfiprintf_r+0x24c>)
 8013200:	f7ed f88e 	bl	8000320 <memchr>
 8013204:	9a04      	ldr	r2, [sp, #16]
 8013206:	b9d8      	cbnz	r0, 8013240 <_vfiprintf_r+0x12c>
 8013208:	06d1      	lsls	r1, r2, #27
 801320a:	bf44      	itt	mi
 801320c:	2320      	movmi	r3, #32
 801320e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013212:	0713      	lsls	r3, r2, #28
 8013214:	bf44      	itt	mi
 8013216:	232b      	movmi	r3, #43	; 0x2b
 8013218:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801321c:	f89a 3000 	ldrb.w	r3, [sl]
 8013220:	2b2a      	cmp	r3, #42	; 0x2a
 8013222:	d015      	beq.n	8013250 <_vfiprintf_r+0x13c>
 8013224:	9a07      	ldr	r2, [sp, #28]
 8013226:	4654      	mov	r4, sl
 8013228:	2000      	movs	r0, #0
 801322a:	f04f 0c0a 	mov.w	ip, #10
 801322e:	4621      	mov	r1, r4
 8013230:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013234:	3b30      	subs	r3, #48	; 0x30
 8013236:	2b09      	cmp	r3, #9
 8013238:	d94e      	bls.n	80132d8 <_vfiprintf_r+0x1c4>
 801323a:	b1b0      	cbz	r0, 801326a <_vfiprintf_r+0x156>
 801323c:	9207      	str	r2, [sp, #28]
 801323e:	e014      	b.n	801326a <_vfiprintf_r+0x156>
 8013240:	eba0 0308 	sub.w	r3, r0, r8
 8013244:	fa09 f303 	lsl.w	r3, r9, r3
 8013248:	4313      	orrs	r3, r2
 801324a:	9304      	str	r3, [sp, #16]
 801324c:	46a2      	mov	sl, r4
 801324e:	e7d2      	b.n	80131f6 <_vfiprintf_r+0xe2>
 8013250:	9b03      	ldr	r3, [sp, #12]
 8013252:	1d19      	adds	r1, r3, #4
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	9103      	str	r1, [sp, #12]
 8013258:	2b00      	cmp	r3, #0
 801325a:	bfbb      	ittet	lt
 801325c:	425b      	neglt	r3, r3
 801325e:	f042 0202 	orrlt.w	r2, r2, #2
 8013262:	9307      	strge	r3, [sp, #28]
 8013264:	9307      	strlt	r3, [sp, #28]
 8013266:	bfb8      	it	lt
 8013268:	9204      	strlt	r2, [sp, #16]
 801326a:	7823      	ldrb	r3, [r4, #0]
 801326c:	2b2e      	cmp	r3, #46	; 0x2e
 801326e:	d10c      	bne.n	801328a <_vfiprintf_r+0x176>
 8013270:	7863      	ldrb	r3, [r4, #1]
 8013272:	2b2a      	cmp	r3, #42	; 0x2a
 8013274:	d135      	bne.n	80132e2 <_vfiprintf_r+0x1ce>
 8013276:	9b03      	ldr	r3, [sp, #12]
 8013278:	1d1a      	adds	r2, r3, #4
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	9203      	str	r2, [sp, #12]
 801327e:	2b00      	cmp	r3, #0
 8013280:	bfb8      	it	lt
 8013282:	f04f 33ff 	movlt.w	r3, #4294967295
 8013286:	3402      	adds	r4, #2
 8013288:	9305      	str	r3, [sp, #20]
 801328a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013370 <_vfiprintf_r+0x25c>
 801328e:	7821      	ldrb	r1, [r4, #0]
 8013290:	2203      	movs	r2, #3
 8013292:	4650      	mov	r0, sl
 8013294:	f7ed f844 	bl	8000320 <memchr>
 8013298:	b140      	cbz	r0, 80132ac <_vfiprintf_r+0x198>
 801329a:	2340      	movs	r3, #64	; 0x40
 801329c:	eba0 000a 	sub.w	r0, r0, sl
 80132a0:	fa03 f000 	lsl.w	r0, r3, r0
 80132a4:	9b04      	ldr	r3, [sp, #16]
 80132a6:	4303      	orrs	r3, r0
 80132a8:	3401      	adds	r4, #1
 80132aa:	9304      	str	r3, [sp, #16]
 80132ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132b0:	482c      	ldr	r0, [pc, #176]	; (8013364 <_vfiprintf_r+0x250>)
 80132b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80132b6:	2206      	movs	r2, #6
 80132b8:	f7ed f832 	bl	8000320 <memchr>
 80132bc:	2800      	cmp	r0, #0
 80132be:	d03f      	beq.n	8013340 <_vfiprintf_r+0x22c>
 80132c0:	4b29      	ldr	r3, [pc, #164]	; (8013368 <_vfiprintf_r+0x254>)
 80132c2:	bb1b      	cbnz	r3, 801330c <_vfiprintf_r+0x1f8>
 80132c4:	9b03      	ldr	r3, [sp, #12]
 80132c6:	3307      	adds	r3, #7
 80132c8:	f023 0307 	bic.w	r3, r3, #7
 80132cc:	3308      	adds	r3, #8
 80132ce:	9303      	str	r3, [sp, #12]
 80132d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132d2:	443b      	add	r3, r7
 80132d4:	9309      	str	r3, [sp, #36]	; 0x24
 80132d6:	e767      	b.n	80131a8 <_vfiprintf_r+0x94>
 80132d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80132dc:	460c      	mov	r4, r1
 80132de:	2001      	movs	r0, #1
 80132e0:	e7a5      	b.n	801322e <_vfiprintf_r+0x11a>
 80132e2:	2300      	movs	r3, #0
 80132e4:	3401      	adds	r4, #1
 80132e6:	9305      	str	r3, [sp, #20]
 80132e8:	4619      	mov	r1, r3
 80132ea:	f04f 0c0a 	mov.w	ip, #10
 80132ee:	4620      	mov	r0, r4
 80132f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80132f4:	3a30      	subs	r2, #48	; 0x30
 80132f6:	2a09      	cmp	r2, #9
 80132f8:	d903      	bls.n	8013302 <_vfiprintf_r+0x1ee>
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d0c5      	beq.n	801328a <_vfiprintf_r+0x176>
 80132fe:	9105      	str	r1, [sp, #20]
 8013300:	e7c3      	b.n	801328a <_vfiprintf_r+0x176>
 8013302:	fb0c 2101 	mla	r1, ip, r1, r2
 8013306:	4604      	mov	r4, r0
 8013308:	2301      	movs	r3, #1
 801330a:	e7f0      	b.n	80132ee <_vfiprintf_r+0x1da>
 801330c:	ab03      	add	r3, sp, #12
 801330e:	9300      	str	r3, [sp, #0]
 8013310:	462a      	mov	r2, r5
 8013312:	4b16      	ldr	r3, [pc, #88]	; (801336c <_vfiprintf_r+0x258>)
 8013314:	a904      	add	r1, sp, #16
 8013316:	4630      	mov	r0, r6
 8013318:	f3af 8000 	nop.w
 801331c:	4607      	mov	r7, r0
 801331e:	1c78      	adds	r0, r7, #1
 8013320:	d1d6      	bne.n	80132d0 <_vfiprintf_r+0x1bc>
 8013322:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013324:	07d9      	lsls	r1, r3, #31
 8013326:	d405      	bmi.n	8013334 <_vfiprintf_r+0x220>
 8013328:	89ab      	ldrh	r3, [r5, #12]
 801332a:	059a      	lsls	r2, r3, #22
 801332c:	d402      	bmi.n	8013334 <_vfiprintf_r+0x220>
 801332e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013330:	f7ff fe13 	bl	8012f5a <__retarget_lock_release_recursive>
 8013334:	89ab      	ldrh	r3, [r5, #12]
 8013336:	065b      	lsls	r3, r3, #25
 8013338:	f53f af12 	bmi.w	8013160 <_vfiprintf_r+0x4c>
 801333c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801333e:	e711      	b.n	8013164 <_vfiprintf_r+0x50>
 8013340:	ab03      	add	r3, sp, #12
 8013342:	9300      	str	r3, [sp, #0]
 8013344:	462a      	mov	r2, r5
 8013346:	4b09      	ldr	r3, [pc, #36]	; (801336c <_vfiprintf_r+0x258>)
 8013348:	a904      	add	r1, sp, #16
 801334a:	4630      	mov	r0, r6
 801334c:	f000 f880 	bl	8013450 <_printf_i>
 8013350:	e7e4      	b.n	801331c <_vfiprintf_r+0x208>
 8013352:	bf00      	nop
 8013354:	08016910 	.word	0x08016910
 8013358:	08016930 	.word	0x08016930
 801335c:	080168f0 	.word	0x080168f0
 8013360:	08016950 	.word	0x08016950
 8013364:	0801695a 	.word	0x0801695a
 8013368:	00000000 	.word	0x00000000
 801336c:	080130ef 	.word	0x080130ef
 8013370:	08016956 	.word	0x08016956

08013374 <_printf_common>:
 8013374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013378:	4616      	mov	r6, r2
 801337a:	4699      	mov	r9, r3
 801337c:	688a      	ldr	r2, [r1, #8]
 801337e:	690b      	ldr	r3, [r1, #16]
 8013380:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013384:	4293      	cmp	r3, r2
 8013386:	bfb8      	it	lt
 8013388:	4613      	movlt	r3, r2
 801338a:	6033      	str	r3, [r6, #0]
 801338c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013390:	4607      	mov	r7, r0
 8013392:	460c      	mov	r4, r1
 8013394:	b10a      	cbz	r2, 801339a <_printf_common+0x26>
 8013396:	3301      	adds	r3, #1
 8013398:	6033      	str	r3, [r6, #0]
 801339a:	6823      	ldr	r3, [r4, #0]
 801339c:	0699      	lsls	r1, r3, #26
 801339e:	bf42      	ittt	mi
 80133a0:	6833      	ldrmi	r3, [r6, #0]
 80133a2:	3302      	addmi	r3, #2
 80133a4:	6033      	strmi	r3, [r6, #0]
 80133a6:	6825      	ldr	r5, [r4, #0]
 80133a8:	f015 0506 	ands.w	r5, r5, #6
 80133ac:	d106      	bne.n	80133bc <_printf_common+0x48>
 80133ae:	f104 0a19 	add.w	sl, r4, #25
 80133b2:	68e3      	ldr	r3, [r4, #12]
 80133b4:	6832      	ldr	r2, [r6, #0]
 80133b6:	1a9b      	subs	r3, r3, r2
 80133b8:	42ab      	cmp	r3, r5
 80133ba:	dc26      	bgt.n	801340a <_printf_common+0x96>
 80133bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80133c0:	1e13      	subs	r3, r2, #0
 80133c2:	6822      	ldr	r2, [r4, #0]
 80133c4:	bf18      	it	ne
 80133c6:	2301      	movne	r3, #1
 80133c8:	0692      	lsls	r2, r2, #26
 80133ca:	d42b      	bmi.n	8013424 <_printf_common+0xb0>
 80133cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80133d0:	4649      	mov	r1, r9
 80133d2:	4638      	mov	r0, r7
 80133d4:	47c0      	blx	r8
 80133d6:	3001      	adds	r0, #1
 80133d8:	d01e      	beq.n	8013418 <_printf_common+0xa4>
 80133da:	6823      	ldr	r3, [r4, #0]
 80133dc:	68e5      	ldr	r5, [r4, #12]
 80133de:	6832      	ldr	r2, [r6, #0]
 80133e0:	f003 0306 	and.w	r3, r3, #6
 80133e4:	2b04      	cmp	r3, #4
 80133e6:	bf08      	it	eq
 80133e8:	1aad      	subeq	r5, r5, r2
 80133ea:	68a3      	ldr	r3, [r4, #8]
 80133ec:	6922      	ldr	r2, [r4, #16]
 80133ee:	bf0c      	ite	eq
 80133f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80133f4:	2500      	movne	r5, #0
 80133f6:	4293      	cmp	r3, r2
 80133f8:	bfc4      	itt	gt
 80133fa:	1a9b      	subgt	r3, r3, r2
 80133fc:	18ed      	addgt	r5, r5, r3
 80133fe:	2600      	movs	r6, #0
 8013400:	341a      	adds	r4, #26
 8013402:	42b5      	cmp	r5, r6
 8013404:	d11a      	bne.n	801343c <_printf_common+0xc8>
 8013406:	2000      	movs	r0, #0
 8013408:	e008      	b.n	801341c <_printf_common+0xa8>
 801340a:	2301      	movs	r3, #1
 801340c:	4652      	mov	r2, sl
 801340e:	4649      	mov	r1, r9
 8013410:	4638      	mov	r0, r7
 8013412:	47c0      	blx	r8
 8013414:	3001      	adds	r0, #1
 8013416:	d103      	bne.n	8013420 <_printf_common+0xac>
 8013418:	f04f 30ff 	mov.w	r0, #4294967295
 801341c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013420:	3501      	adds	r5, #1
 8013422:	e7c6      	b.n	80133b2 <_printf_common+0x3e>
 8013424:	18e1      	adds	r1, r4, r3
 8013426:	1c5a      	adds	r2, r3, #1
 8013428:	2030      	movs	r0, #48	; 0x30
 801342a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801342e:	4422      	add	r2, r4
 8013430:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013434:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013438:	3302      	adds	r3, #2
 801343a:	e7c7      	b.n	80133cc <_printf_common+0x58>
 801343c:	2301      	movs	r3, #1
 801343e:	4622      	mov	r2, r4
 8013440:	4649      	mov	r1, r9
 8013442:	4638      	mov	r0, r7
 8013444:	47c0      	blx	r8
 8013446:	3001      	adds	r0, #1
 8013448:	d0e6      	beq.n	8013418 <_printf_common+0xa4>
 801344a:	3601      	adds	r6, #1
 801344c:	e7d9      	b.n	8013402 <_printf_common+0x8e>
	...

08013450 <_printf_i>:
 8013450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013454:	460c      	mov	r4, r1
 8013456:	4691      	mov	r9, r2
 8013458:	7e27      	ldrb	r7, [r4, #24]
 801345a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801345c:	2f78      	cmp	r7, #120	; 0x78
 801345e:	4680      	mov	r8, r0
 8013460:	469a      	mov	sl, r3
 8013462:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013466:	d807      	bhi.n	8013478 <_printf_i+0x28>
 8013468:	2f62      	cmp	r7, #98	; 0x62
 801346a:	d80a      	bhi.n	8013482 <_printf_i+0x32>
 801346c:	2f00      	cmp	r7, #0
 801346e:	f000 80d8 	beq.w	8013622 <_printf_i+0x1d2>
 8013472:	2f58      	cmp	r7, #88	; 0x58
 8013474:	f000 80a3 	beq.w	80135be <_printf_i+0x16e>
 8013478:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801347c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013480:	e03a      	b.n	80134f8 <_printf_i+0xa8>
 8013482:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013486:	2b15      	cmp	r3, #21
 8013488:	d8f6      	bhi.n	8013478 <_printf_i+0x28>
 801348a:	a001      	add	r0, pc, #4	; (adr r0, 8013490 <_printf_i+0x40>)
 801348c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8013490:	080134e9 	.word	0x080134e9
 8013494:	080134fd 	.word	0x080134fd
 8013498:	08013479 	.word	0x08013479
 801349c:	08013479 	.word	0x08013479
 80134a0:	08013479 	.word	0x08013479
 80134a4:	08013479 	.word	0x08013479
 80134a8:	080134fd 	.word	0x080134fd
 80134ac:	08013479 	.word	0x08013479
 80134b0:	08013479 	.word	0x08013479
 80134b4:	08013479 	.word	0x08013479
 80134b8:	08013479 	.word	0x08013479
 80134bc:	08013609 	.word	0x08013609
 80134c0:	0801352d 	.word	0x0801352d
 80134c4:	080135eb 	.word	0x080135eb
 80134c8:	08013479 	.word	0x08013479
 80134cc:	08013479 	.word	0x08013479
 80134d0:	0801362b 	.word	0x0801362b
 80134d4:	08013479 	.word	0x08013479
 80134d8:	0801352d 	.word	0x0801352d
 80134dc:	08013479 	.word	0x08013479
 80134e0:	08013479 	.word	0x08013479
 80134e4:	080135f3 	.word	0x080135f3
 80134e8:	680b      	ldr	r3, [r1, #0]
 80134ea:	1d1a      	adds	r2, r3, #4
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	600a      	str	r2, [r1, #0]
 80134f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80134f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80134f8:	2301      	movs	r3, #1
 80134fa:	e0a3      	b.n	8013644 <_printf_i+0x1f4>
 80134fc:	6825      	ldr	r5, [r4, #0]
 80134fe:	6808      	ldr	r0, [r1, #0]
 8013500:	062e      	lsls	r6, r5, #24
 8013502:	f100 0304 	add.w	r3, r0, #4
 8013506:	d50a      	bpl.n	801351e <_printf_i+0xce>
 8013508:	6805      	ldr	r5, [r0, #0]
 801350a:	600b      	str	r3, [r1, #0]
 801350c:	2d00      	cmp	r5, #0
 801350e:	da03      	bge.n	8013518 <_printf_i+0xc8>
 8013510:	232d      	movs	r3, #45	; 0x2d
 8013512:	426d      	negs	r5, r5
 8013514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013518:	485e      	ldr	r0, [pc, #376]	; (8013694 <_printf_i+0x244>)
 801351a:	230a      	movs	r3, #10
 801351c:	e019      	b.n	8013552 <_printf_i+0x102>
 801351e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8013522:	6805      	ldr	r5, [r0, #0]
 8013524:	600b      	str	r3, [r1, #0]
 8013526:	bf18      	it	ne
 8013528:	b22d      	sxthne	r5, r5
 801352a:	e7ef      	b.n	801350c <_printf_i+0xbc>
 801352c:	680b      	ldr	r3, [r1, #0]
 801352e:	6825      	ldr	r5, [r4, #0]
 8013530:	1d18      	adds	r0, r3, #4
 8013532:	6008      	str	r0, [r1, #0]
 8013534:	0628      	lsls	r0, r5, #24
 8013536:	d501      	bpl.n	801353c <_printf_i+0xec>
 8013538:	681d      	ldr	r5, [r3, #0]
 801353a:	e002      	b.n	8013542 <_printf_i+0xf2>
 801353c:	0669      	lsls	r1, r5, #25
 801353e:	d5fb      	bpl.n	8013538 <_printf_i+0xe8>
 8013540:	881d      	ldrh	r5, [r3, #0]
 8013542:	4854      	ldr	r0, [pc, #336]	; (8013694 <_printf_i+0x244>)
 8013544:	2f6f      	cmp	r7, #111	; 0x6f
 8013546:	bf0c      	ite	eq
 8013548:	2308      	moveq	r3, #8
 801354a:	230a      	movne	r3, #10
 801354c:	2100      	movs	r1, #0
 801354e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013552:	6866      	ldr	r6, [r4, #4]
 8013554:	60a6      	str	r6, [r4, #8]
 8013556:	2e00      	cmp	r6, #0
 8013558:	bfa2      	ittt	ge
 801355a:	6821      	ldrge	r1, [r4, #0]
 801355c:	f021 0104 	bicge.w	r1, r1, #4
 8013560:	6021      	strge	r1, [r4, #0]
 8013562:	b90d      	cbnz	r5, 8013568 <_printf_i+0x118>
 8013564:	2e00      	cmp	r6, #0
 8013566:	d04d      	beq.n	8013604 <_printf_i+0x1b4>
 8013568:	4616      	mov	r6, r2
 801356a:	fbb5 f1f3 	udiv	r1, r5, r3
 801356e:	fb03 5711 	mls	r7, r3, r1, r5
 8013572:	5dc7      	ldrb	r7, [r0, r7]
 8013574:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013578:	462f      	mov	r7, r5
 801357a:	42bb      	cmp	r3, r7
 801357c:	460d      	mov	r5, r1
 801357e:	d9f4      	bls.n	801356a <_printf_i+0x11a>
 8013580:	2b08      	cmp	r3, #8
 8013582:	d10b      	bne.n	801359c <_printf_i+0x14c>
 8013584:	6823      	ldr	r3, [r4, #0]
 8013586:	07df      	lsls	r7, r3, #31
 8013588:	d508      	bpl.n	801359c <_printf_i+0x14c>
 801358a:	6923      	ldr	r3, [r4, #16]
 801358c:	6861      	ldr	r1, [r4, #4]
 801358e:	4299      	cmp	r1, r3
 8013590:	bfde      	ittt	le
 8013592:	2330      	movle	r3, #48	; 0x30
 8013594:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013598:	f106 36ff 	addle.w	r6, r6, #4294967295
 801359c:	1b92      	subs	r2, r2, r6
 801359e:	6122      	str	r2, [r4, #16]
 80135a0:	f8cd a000 	str.w	sl, [sp]
 80135a4:	464b      	mov	r3, r9
 80135a6:	aa03      	add	r2, sp, #12
 80135a8:	4621      	mov	r1, r4
 80135aa:	4640      	mov	r0, r8
 80135ac:	f7ff fee2 	bl	8013374 <_printf_common>
 80135b0:	3001      	adds	r0, #1
 80135b2:	d14c      	bne.n	801364e <_printf_i+0x1fe>
 80135b4:	f04f 30ff 	mov.w	r0, #4294967295
 80135b8:	b004      	add	sp, #16
 80135ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135be:	4835      	ldr	r0, [pc, #212]	; (8013694 <_printf_i+0x244>)
 80135c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80135c4:	6823      	ldr	r3, [r4, #0]
 80135c6:	680e      	ldr	r6, [r1, #0]
 80135c8:	061f      	lsls	r7, r3, #24
 80135ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80135ce:	600e      	str	r6, [r1, #0]
 80135d0:	d514      	bpl.n	80135fc <_printf_i+0x1ac>
 80135d2:	07d9      	lsls	r1, r3, #31
 80135d4:	bf44      	itt	mi
 80135d6:	f043 0320 	orrmi.w	r3, r3, #32
 80135da:	6023      	strmi	r3, [r4, #0]
 80135dc:	b91d      	cbnz	r5, 80135e6 <_printf_i+0x196>
 80135de:	6823      	ldr	r3, [r4, #0]
 80135e0:	f023 0320 	bic.w	r3, r3, #32
 80135e4:	6023      	str	r3, [r4, #0]
 80135e6:	2310      	movs	r3, #16
 80135e8:	e7b0      	b.n	801354c <_printf_i+0xfc>
 80135ea:	6823      	ldr	r3, [r4, #0]
 80135ec:	f043 0320 	orr.w	r3, r3, #32
 80135f0:	6023      	str	r3, [r4, #0]
 80135f2:	2378      	movs	r3, #120	; 0x78
 80135f4:	4828      	ldr	r0, [pc, #160]	; (8013698 <_printf_i+0x248>)
 80135f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80135fa:	e7e3      	b.n	80135c4 <_printf_i+0x174>
 80135fc:	065e      	lsls	r6, r3, #25
 80135fe:	bf48      	it	mi
 8013600:	b2ad      	uxthmi	r5, r5
 8013602:	e7e6      	b.n	80135d2 <_printf_i+0x182>
 8013604:	4616      	mov	r6, r2
 8013606:	e7bb      	b.n	8013580 <_printf_i+0x130>
 8013608:	680b      	ldr	r3, [r1, #0]
 801360a:	6826      	ldr	r6, [r4, #0]
 801360c:	6960      	ldr	r0, [r4, #20]
 801360e:	1d1d      	adds	r5, r3, #4
 8013610:	600d      	str	r5, [r1, #0]
 8013612:	0635      	lsls	r5, r6, #24
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	d501      	bpl.n	801361c <_printf_i+0x1cc>
 8013618:	6018      	str	r0, [r3, #0]
 801361a:	e002      	b.n	8013622 <_printf_i+0x1d2>
 801361c:	0671      	lsls	r1, r6, #25
 801361e:	d5fb      	bpl.n	8013618 <_printf_i+0x1c8>
 8013620:	8018      	strh	r0, [r3, #0]
 8013622:	2300      	movs	r3, #0
 8013624:	6123      	str	r3, [r4, #16]
 8013626:	4616      	mov	r6, r2
 8013628:	e7ba      	b.n	80135a0 <_printf_i+0x150>
 801362a:	680b      	ldr	r3, [r1, #0]
 801362c:	1d1a      	adds	r2, r3, #4
 801362e:	600a      	str	r2, [r1, #0]
 8013630:	681e      	ldr	r6, [r3, #0]
 8013632:	6862      	ldr	r2, [r4, #4]
 8013634:	2100      	movs	r1, #0
 8013636:	4630      	mov	r0, r6
 8013638:	f7ec fe72 	bl	8000320 <memchr>
 801363c:	b108      	cbz	r0, 8013642 <_printf_i+0x1f2>
 801363e:	1b80      	subs	r0, r0, r6
 8013640:	6060      	str	r0, [r4, #4]
 8013642:	6863      	ldr	r3, [r4, #4]
 8013644:	6123      	str	r3, [r4, #16]
 8013646:	2300      	movs	r3, #0
 8013648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801364c:	e7a8      	b.n	80135a0 <_printf_i+0x150>
 801364e:	6923      	ldr	r3, [r4, #16]
 8013650:	4632      	mov	r2, r6
 8013652:	4649      	mov	r1, r9
 8013654:	4640      	mov	r0, r8
 8013656:	47d0      	blx	sl
 8013658:	3001      	adds	r0, #1
 801365a:	d0ab      	beq.n	80135b4 <_printf_i+0x164>
 801365c:	6823      	ldr	r3, [r4, #0]
 801365e:	079b      	lsls	r3, r3, #30
 8013660:	d413      	bmi.n	801368a <_printf_i+0x23a>
 8013662:	68e0      	ldr	r0, [r4, #12]
 8013664:	9b03      	ldr	r3, [sp, #12]
 8013666:	4298      	cmp	r0, r3
 8013668:	bfb8      	it	lt
 801366a:	4618      	movlt	r0, r3
 801366c:	e7a4      	b.n	80135b8 <_printf_i+0x168>
 801366e:	2301      	movs	r3, #1
 8013670:	4632      	mov	r2, r6
 8013672:	4649      	mov	r1, r9
 8013674:	4640      	mov	r0, r8
 8013676:	47d0      	blx	sl
 8013678:	3001      	adds	r0, #1
 801367a:	d09b      	beq.n	80135b4 <_printf_i+0x164>
 801367c:	3501      	adds	r5, #1
 801367e:	68e3      	ldr	r3, [r4, #12]
 8013680:	9903      	ldr	r1, [sp, #12]
 8013682:	1a5b      	subs	r3, r3, r1
 8013684:	42ab      	cmp	r3, r5
 8013686:	dcf2      	bgt.n	801366e <_printf_i+0x21e>
 8013688:	e7eb      	b.n	8013662 <_printf_i+0x212>
 801368a:	2500      	movs	r5, #0
 801368c:	f104 0619 	add.w	r6, r4, #25
 8013690:	e7f5      	b.n	801367e <_printf_i+0x22e>
 8013692:	bf00      	nop
 8013694:	08016961 	.word	0x08016961
 8013698:	08016972 	.word	0x08016972

0801369c <_sbrk_r>:
 801369c:	b538      	push	{r3, r4, r5, lr}
 801369e:	4d06      	ldr	r5, [pc, #24]	; (80136b8 <_sbrk_r+0x1c>)
 80136a0:	2300      	movs	r3, #0
 80136a2:	4604      	mov	r4, r0
 80136a4:	4608      	mov	r0, r1
 80136a6:	602b      	str	r3, [r5, #0]
 80136a8:	f7ed fca0 	bl	8000fec <_sbrk>
 80136ac:	1c43      	adds	r3, r0, #1
 80136ae:	d102      	bne.n	80136b6 <_sbrk_r+0x1a>
 80136b0:	682b      	ldr	r3, [r5, #0]
 80136b2:	b103      	cbz	r3, 80136b6 <_sbrk_r+0x1a>
 80136b4:	6023      	str	r3, [r4, #0]
 80136b6:	bd38      	pop	{r3, r4, r5, pc}
 80136b8:	24003488 	.word	0x24003488

080136bc <__sread>:
 80136bc:	b510      	push	{r4, lr}
 80136be:	460c      	mov	r4, r1
 80136c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136c4:	f000 fa6c 	bl	8013ba0 <_read_r>
 80136c8:	2800      	cmp	r0, #0
 80136ca:	bfab      	itete	ge
 80136cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80136ce:	89a3      	ldrhlt	r3, [r4, #12]
 80136d0:	181b      	addge	r3, r3, r0
 80136d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80136d6:	bfac      	ite	ge
 80136d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80136da:	81a3      	strhlt	r3, [r4, #12]
 80136dc:	bd10      	pop	{r4, pc}

080136de <__swrite>:
 80136de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136e2:	461f      	mov	r7, r3
 80136e4:	898b      	ldrh	r3, [r1, #12]
 80136e6:	05db      	lsls	r3, r3, #23
 80136e8:	4605      	mov	r5, r0
 80136ea:	460c      	mov	r4, r1
 80136ec:	4616      	mov	r6, r2
 80136ee:	d505      	bpl.n	80136fc <__swrite+0x1e>
 80136f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136f4:	2302      	movs	r3, #2
 80136f6:	2200      	movs	r2, #0
 80136f8:	f000 f9d0 	bl	8013a9c <_lseek_r>
 80136fc:	89a3      	ldrh	r3, [r4, #12]
 80136fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013702:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013706:	81a3      	strh	r3, [r4, #12]
 8013708:	4632      	mov	r2, r6
 801370a:	463b      	mov	r3, r7
 801370c:	4628      	mov	r0, r5
 801370e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013712:	f000 b869 	b.w	80137e8 <_write_r>

08013716 <__sseek>:
 8013716:	b510      	push	{r4, lr}
 8013718:	460c      	mov	r4, r1
 801371a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801371e:	f000 f9bd 	bl	8013a9c <_lseek_r>
 8013722:	1c43      	adds	r3, r0, #1
 8013724:	89a3      	ldrh	r3, [r4, #12]
 8013726:	bf15      	itete	ne
 8013728:	6560      	strne	r0, [r4, #84]	; 0x54
 801372a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801372e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013732:	81a3      	strheq	r3, [r4, #12]
 8013734:	bf18      	it	ne
 8013736:	81a3      	strhne	r3, [r4, #12]
 8013738:	bd10      	pop	{r4, pc}

0801373a <__sclose>:
 801373a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801373e:	f000 b8db 	b.w	80138f8 <_close_r>
	...

08013744 <__swbuf_r>:
 8013744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013746:	460e      	mov	r6, r1
 8013748:	4614      	mov	r4, r2
 801374a:	4605      	mov	r5, r0
 801374c:	b118      	cbz	r0, 8013756 <__swbuf_r+0x12>
 801374e:	6983      	ldr	r3, [r0, #24]
 8013750:	b90b      	cbnz	r3, 8013756 <__swbuf_r+0x12>
 8013752:	f7ff fb51 	bl	8012df8 <__sinit>
 8013756:	4b21      	ldr	r3, [pc, #132]	; (80137dc <__swbuf_r+0x98>)
 8013758:	429c      	cmp	r4, r3
 801375a:	d12b      	bne.n	80137b4 <__swbuf_r+0x70>
 801375c:	686c      	ldr	r4, [r5, #4]
 801375e:	69a3      	ldr	r3, [r4, #24]
 8013760:	60a3      	str	r3, [r4, #8]
 8013762:	89a3      	ldrh	r3, [r4, #12]
 8013764:	071a      	lsls	r2, r3, #28
 8013766:	d52f      	bpl.n	80137c8 <__swbuf_r+0x84>
 8013768:	6923      	ldr	r3, [r4, #16]
 801376a:	b36b      	cbz	r3, 80137c8 <__swbuf_r+0x84>
 801376c:	6923      	ldr	r3, [r4, #16]
 801376e:	6820      	ldr	r0, [r4, #0]
 8013770:	1ac0      	subs	r0, r0, r3
 8013772:	6963      	ldr	r3, [r4, #20]
 8013774:	b2f6      	uxtb	r6, r6
 8013776:	4283      	cmp	r3, r0
 8013778:	4637      	mov	r7, r6
 801377a:	dc04      	bgt.n	8013786 <__swbuf_r+0x42>
 801377c:	4621      	mov	r1, r4
 801377e:	4628      	mov	r0, r5
 8013780:	f000 f950 	bl	8013a24 <_fflush_r>
 8013784:	bb30      	cbnz	r0, 80137d4 <__swbuf_r+0x90>
 8013786:	68a3      	ldr	r3, [r4, #8]
 8013788:	3b01      	subs	r3, #1
 801378a:	60a3      	str	r3, [r4, #8]
 801378c:	6823      	ldr	r3, [r4, #0]
 801378e:	1c5a      	adds	r2, r3, #1
 8013790:	6022      	str	r2, [r4, #0]
 8013792:	701e      	strb	r6, [r3, #0]
 8013794:	6963      	ldr	r3, [r4, #20]
 8013796:	3001      	adds	r0, #1
 8013798:	4283      	cmp	r3, r0
 801379a:	d004      	beq.n	80137a6 <__swbuf_r+0x62>
 801379c:	89a3      	ldrh	r3, [r4, #12]
 801379e:	07db      	lsls	r3, r3, #31
 80137a0:	d506      	bpl.n	80137b0 <__swbuf_r+0x6c>
 80137a2:	2e0a      	cmp	r6, #10
 80137a4:	d104      	bne.n	80137b0 <__swbuf_r+0x6c>
 80137a6:	4621      	mov	r1, r4
 80137a8:	4628      	mov	r0, r5
 80137aa:	f000 f93b 	bl	8013a24 <_fflush_r>
 80137ae:	b988      	cbnz	r0, 80137d4 <__swbuf_r+0x90>
 80137b0:	4638      	mov	r0, r7
 80137b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80137b4:	4b0a      	ldr	r3, [pc, #40]	; (80137e0 <__swbuf_r+0x9c>)
 80137b6:	429c      	cmp	r4, r3
 80137b8:	d101      	bne.n	80137be <__swbuf_r+0x7a>
 80137ba:	68ac      	ldr	r4, [r5, #8]
 80137bc:	e7cf      	b.n	801375e <__swbuf_r+0x1a>
 80137be:	4b09      	ldr	r3, [pc, #36]	; (80137e4 <__swbuf_r+0xa0>)
 80137c0:	429c      	cmp	r4, r3
 80137c2:	bf08      	it	eq
 80137c4:	68ec      	ldreq	r4, [r5, #12]
 80137c6:	e7ca      	b.n	801375e <__swbuf_r+0x1a>
 80137c8:	4621      	mov	r1, r4
 80137ca:	4628      	mov	r0, r5
 80137cc:	f000 f81e 	bl	801380c <__swsetup_r>
 80137d0:	2800      	cmp	r0, #0
 80137d2:	d0cb      	beq.n	801376c <__swbuf_r+0x28>
 80137d4:	f04f 37ff 	mov.w	r7, #4294967295
 80137d8:	e7ea      	b.n	80137b0 <__swbuf_r+0x6c>
 80137da:	bf00      	nop
 80137dc:	08016910 	.word	0x08016910
 80137e0:	08016930 	.word	0x08016930
 80137e4:	080168f0 	.word	0x080168f0

080137e8 <_write_r>:
 80137e8:	b538      	push	{r3, r4, r5, lr}
 80137ea:	4d07      	ldr	r5, [pc, #28]	; (8013808 <_write_r+0x20>)
 80137ec:	4604      	mov	r4, r0
 80137ee:	4608      	mov	r0, r1
 80137f0:	4611      	mov	r1, r2
 80137f2:	2200      	movs	r2, #0
 80137f4:	602a      	str	r2, [r5, #0]
 80137f6:	461a      	mov	r2, r3
 80137f8:	f7ed fba7 	bl	8000f4a <_write>
 80137fc:	1c43      	adds	r3, r0, #1
 80137fe:	d102      	bne.n	8013806 <_write_r+0x1e>
 8013800:	682b      	ldr	r3, [r5, #0]
 8013802:	b103      	cbz	r3, 8013806 <_write_r+0x1e>
 8013804:	6023      	str	r3, [r4, #0]
 8013806:	bd38      	pop	{r3, r4, r5, pc}
 8013808:	24003488 	.word	0x24003488

0801380c <__swsetup_r>:
 801380c:	4b32      	ldr	r3, [pc, #200]	; (80138d8 <__swsetup_r+0xcc>)
 801380e:	b570      	push	{r4, r5, r6, lr}
 8013810:	681d      	ldr	r5, [r3, #0]
 8013812:	4606      	mov	r6, r0
 8013814:	460c      	mov	r4, r1
 8013816:	b125      	cbz	r5, 8013822 <__swsetup_r+0x16>
 8013818:	69ab      	ldr	r3, [r5, #24]
 801381a:	b913      	cbnz	r3, 8013822 <__swsetup_r+0x16>
 801381c:	4628      	mov	r0, r5
 801381e:	f7ff faeb 	bl	8012df8 <__sinit>
 8013822:	4b2e      	ldr	r3, [pc, #184]	; (80138dc <__swsetup_r+0xd0>)
 8013824:	429c      	cmp	r4, r3
 8013826:	d10f      	bne.n	8013848 <__swsetup_r+0x3c>
 8013828:	686c      	ldr	r4, [r5, #4]
 801382a:	89a3      	ldrh	r3, [r4, #12]
 801382c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013830:	0719      	lsls	r1, r3, #28
 8013832:	d42c      	bmi.n	801388e <__swsetup_r+0x82>
 8013834:	06dd      	lsls	r5, r3, #27
 8013836:	d411      	bmi.n	801385c <__swsetup_r+0x50>
 8013838:	2309      	movs	r3, #9
 801383a:	6033      	str	r3, [r6, #0]
 801383c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013840:	81a3      	strh	r3, [r4, #12]
 8013842:	f04f 30ff 	mov.w	r0, #4294967295
 8013846:	e03e      	b.n	80138c6 <__swsetup_r+0xba>
 8013848:	4b25      	ldr	r3, [pc, #148]	; (80138e0 <__swsetup_r+0xd4>)
 801384a:	429c      	cmp	r4, r3
 801384c:	d101      	bne.n	8013852 <__swsetup_r+0x46>
 801384e:	68ac      	ldr	r4, [r5, #8]
 8013850:	e7eb      	b.n	801382a <__swsetup_r+0x1e>
 8013852:	4b24      	ldr	r3, [pc, #144]	; (80138e4 <__swsetup_r+0xd8>)
 8013854:	429c      	cmp	r4, r3
 8013856:	bf08      	it	eq
 8013858:	68ec      	ldreq	r4, [r5, #12]
 801385a:	e7e6      	b.n	801382a <__swsetup_r+0x1e>
 801385c:	0758      	lsls	r0, r3, #29
 801385e:	d512      	bpl.n	8013886 <__swsetup_r+0x7a>
 8013860:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013862:	b141      	cbz	r1, 8013876 <__swsetup_r+0x6a>
 8013864:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013868:	4299      	cmp	r1, r3
 801386a:	d002      	beq.n	8013872 <__swsetup_r+0x66>
 801386c:	4630      	mov	r0, r6
 801386e:	f7ff fb7d 	bl	8012f6c <_free_r>
 8013872:	2300      	movs	r3, #0
 8013874:	6363      	str	r3, [r4, #52]	; 0x34
 8013876:	89a3      	ldrh	r3, [r4, #12]
 8013878:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801387c:	81a3      	strh	r3, [r4, #12]
 801387e:	2300      	movs	r3, #0
 8013880:	6063      	str	r3, [r4, #4]
 8013882:	6923      	ldr	r3, [r4, #16]
 8013884:	6023      	str	r3, [r4, #0]
 8013886:	89a3      	ldrh	r3, [r4, #12]
 8013888:	f043 0308 	orr.w	r3, r3, #8
 801388c:	81a3      	strh	r3, [r4, #12]
 801388e:	6923      	ldr	r3, [r4, #16]
 8013890:	b94b      	cbnz	r3, 80138a6 <__swsetup_r+0x9a>
 8013892:	89a3      	ldrh	r3, [r4, #12]
 8013894:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801389c:	d003      	beq.n	80138a6 <__swsetup_r+0x9a>
 801389e:	4621      	mov	r1, r4
 80138a0:	4630      	mov	r0, r6
 80138a2:	f000 f931 	bl	8013b08 <__smakebuf_r>
 80138a6:	89a0      	ldrh	r0, [r4, #12]
 80138a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80138ac:	f010 0301 	ands.w	r3, r0, #1
 80138b0:	d00a      	beq.n	80138c8 <__swsetup_r+0xbc>
 80138b2:	2300      	movs	r3, #0
 80138b4:	60a3      	str	r3, [r4, #8]
 80138b6:	6963      	ldr	r3, [r4, #20]
 80138b8:	425b      	negs	r3, r3
 80138ba:	61a3      	str	r3, [r4, #24]
 80138bc:	6923      	ldr	r3, [r4, #16]
 80138be:	b943      	cbnz	r3, 80138d2 <__swsetup_r+0xc6>
 80138c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80138c4:	d1ba      	bne.n	801383c <__swsetup_r+0x30>
 80138c6:	bd70      	pop	{r4, r5, r6, pc}
 80138c8:	0781      	lsls	r1, r0, #30
 80138ca:	bf58      	it	pl
 80138cc:	6963      	ldrpl	r3, [r4, #20]
 80138ce:	60a3      	str	r3, [r4, #8]
 80138d0:	e7f4      	b.n	80138bc <__swsetup_r+0xb0>
 80138d2:	2000      	movs	r0, #0
 80138d4:	e7f7      	b.n	80138c6 <__swsetup_r+0xba>
 80138d6:	bf00      	nop
 80138d8:	24000030 	.word	0x24000030
 80138dc:	08016910 	.word	0x08016910
 80138e0:	08016930 	.word	0x08016930
 80138e4:	080168f0 	.word	0x080168f0

080138e8 <abort>:
 80138e8:	b508      	push	{r3, lr}
 80138ea:	2006      	movs	r0, #6
 80138ec:	f000 f992 	bl	8013c14 <raise>
 80138f0:	2001      	movs	r0, #1
 80138f2:	f7ed fb03 	bl	8000efc <_exit>
	...

080138f8 <_close_r>:
 80138f8:	b538      	push	{r3, r4, r5, lr}
 80138fa:	4d06      	ldr	r5, [pc, #24]	; (8013914 <_close_r+0x1c>)
 80138fc:	2300      	movs	r3, #0
 80138fe:	4604      	mov	r4, r0
 8013900:	4608      	mov	r0, r1
 8013902:	602b      	str	r3, [r5, #0]
 8013904:	f7ed fb3d 	bl	8000f82 <_close>
 8013908:	1c43      	adds	r3, r0, #1
 801390a:	d102      	bne.n	8013912 <_close_r+0x1a>
 801390c:	682b      	ldr	r3, [r5, #0]
 801390e:	b103      	cbz	r3, 8013912 <_close_r+0x1a>
 8013910:	6023      	str	r3, [r4, #0]
 8013912:	bd38      	pop	{r3, r4, r5, pc}
 8013914:	24003488 	.word	0x24003488

08013918 <__sflush_r>:
 8013918:	898a      	ldrh	r2, [r1, #12]
 801391a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801391e:	4605      	mov	r5, r0
 8013920:	0710      	lsls	r0, r2, #28
 8013922:	460c      	mov	r4, r1
 8013924:	d458      	bmi.n	80139d8 <__sflush_r+0xc0>
 8013926:	684b      	ldr	r3, [r1, #4]
 8013928:	2b00      	cmp	r3, #0
 801392a:	dc05      	bgt.n	8013938 <__sflush_r+0x20>
 801392c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801392e:	2b00      	cmp	r3, #0
 8013930:	dc02      	bgt.n	8013938 <__sflush_r+0x20>
 8013932:	2000      	movs	r0, #0
 8013934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013938:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801393a:	2e00      	cmp	r6, #0
 801393c:	d0f9      	beq.n	8013932 <__sflush_r+0x1a>
 801393e:	2300      	movs	r3, #0
 8013940:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013944:	682f      	ldr	r7, [r5, #0]
 8013946:	602b      	str	r3, [r5, #0]
 8013948:	d032      	beq.n	80139b0 <__sflush_r+0x98>
 801394a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801394c:	89a3      	ldrh	r3, [r4, #12]
 801394e:	075a      	lsls	r2, r3, #29
 8013950:	d505      	bpl.n	801395e <__sflush_r+0x46>
 8013952:	6863      	ldr	r3, [r4, #4]
 8013954:	1ac0      	subs	r0, r0, r3
 8013956:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013958:	b10b      	cbz	r3, 801395e <__sflush_r+0x46>
 801395a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801395c:	1ac0      	subs	r0, r0, r3
 801395e:	2300      	movs	r3, #0
 8013960:	4602      	mov	r2, r0
 8013962:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013964:	6a21      	ldr	r1, [r4, #32]
 8013966:	4628      	mov	r0, r5
 8013968:	47b0      	blx	r6
 801396a:	1c43      	adds	r3, r0, #1
 801396c:	89a3      	ldrh	r3, [r4, #12]
 801396e:	d106      	bne.n	801397e <__sflush_r+0x66>
 8013970:	6829      	ldr	r1, [r5, #0]
 8013972:	291d      	cmp	r1, #29
 8013974:	d82c      	bhi.n	80139d0 <__sflush_r+0xb8>
 8013976:	4a2a      	ldr	r2, [pc, #168]	; (8013a20 <__sflush_r+0x108>)
 8013978:	40ca      	lsrs	r2, r1
 801397a:	07d6      	lsls	r6, r2, #31
 801397c:	d528      	bpl.n	80139d0 <__sflush_r+0xb8>
 801397e:	2200      	movs	r2, #0
 8013980:	6062      	str	r2, [r4, #4]
 8013982:	04d9      	lsls	r1, r3, #19
 8013984:	6922      	ldr	r2, [r4, #16]
 8013986:	6022      	str	r2, [r4, #0]
 8013988:	d504      	bpl.n	8013994 <__sflush_r+0x7c>
 801398a:	1c42      	adds	r2, r0, #1
 801398c:	d101      	bne.n	8013992 <__sflush_r+0x7a>
 801398e:	682b      	ldr	r3, [r5, #0]
 8013990:	b903      	cbnz	r3, 8013994 <__sflush_r+0x7c>
 8013992:	6560      	str	r0, [r4, #84]	; 0x54
 8013994:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013996:	602f      	str	r7, [r5, #0]
 8013998:	2900      	cmp	r1, #0
 801399a:	d0ca      	beq.n	8013932 <__sflush_r+0x1a>
 801399c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80139a0:	4299      	cmp	r1, r3
 80139a2:	d002      	beq.n	80139aa <__sflush_r+0x92>
 80139a4:	4628      	mov	r0, r5
 80139a6:	f7ff fae1 	bl	8012f6c <_free_r>
 80139aa:	2000      	movs	r0, #0
 80139ac:	6360      	str	r0, [r4, #52]	; 0x34
 80139ae:	e7c1      	b.n	8013934 <__sflush_r+0x1c>
 80139b0:	6a21      	ldr	r1, [r4, #32]
 80139b2:	2301      	movs	r3, #1
 80139b4:	4628      	mov	r0, r5
 80139b6:	47b0      	blx	r6
 80139b8:	1c41      	adds	r1, r0, #1
 80139ba:	d1c7      	bne.n	801394c <__sflush_r+0x34>
 80139bc:	682b      	ldr	r3, [r5, #0]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d0c4      	beq.n	801394c <__sflush_r+0x34>
 80139c2:	2b1d      	cmp	r3, #29
 80139c4:	d001      	beq.n	80139ca <__sflush_r+0xb2>
 80139c6:	2b16      	cmp	r3, #22
 80139c8:	d101      	bne.n	80139ce <__sflush_r+0xb6>
 80139ca:	602f      	str	r7, [r5, #0]
 80139cc:	e7b1      	b.n	8013932 <__sflush_r+0x1a>
 80139ce:	89a3      	ldrh	r3, [r4, #12]
 80139d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80139d4:	81a3      	strh	r3, [r4, #12]
 80139d6:	e7ad      	b.n	8013934 <__sflush_r+0x1c>
 80139d8:	690f      	ldr	r7, [r1, #16]
 80139da:	2f00      	cmp	r7, #0
 80139dc:	d0a9      	beq.n	8013932 <__sflush_r+0x1a>
 80139de:	0793      	lsls	r3, r2, #30
 80139e0:	680e      	ldr	r6, [r1, #0]
 80139e2:	bf08      	it	eq
 80139e4:	694b      	ldreq	r3, [r1, #20]
 80139e6:	600f      	str	r7, [r1, #0]
 80139e8:	bf18      	it	ne
 80139ea:	2300      	movne	r3, #0
 80139ec:	eba6 0807 	sub.w	r8, r6, r7
 80139f0:	608b      	str	r3, [r1, #8]
 80139f2:	f1b8 0f00 	cmp.w	r8, #0
 80139f6:	dd9c      	ble.n	8013932 <__sflush_r+0x1a>
 80139f8:	6a21      	ldr	r1, [r4, #32]
 80139fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80139fc:	4643      	mov	r3, r8
 80139fe:	463a      	mov	r2, r7
 8013a00:	4628      	mov	r0, r5
 8013a02:	47b0      	blx	r6
 8013a04:	2800      	cmp	r0, #0
 8013a06:	dc06      	bgt.n	8013a16 <__sflush_r+0xfe>
 8013a08:	89a3      	ldrh	r3, [r4, #12]
 8013a0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a0e:	81a3      	strh	r3, [r4, #12]
 8013a10:	f04f 30ff 	mov.w	r0, #4294967295
 8013a14:	e78e      	b.n	8013934 <__sflush_r+0x1c>
 8013a16:	4407      	add	r7, r0
 8013a18:	eba8 0800 	sub.w	r8, r8, r0
 8013a1c:	e7e9      	b.n	80139f2 <__sflush_r+0xda>
 8013a1e:	bf00      	nop
 8013a20:	20400001 	.word	0x20400001

08013a24 <_fflush_r>:
 8013a24:	b538      	push	{r3, r4, r5, lr}
 8013a26:	690b      	ldr	r3, [r1, #16]
 8013a28:	4605      	mov	r5, r0
 8013a2a:	460c      	mov	r4, r1
 8013a2c:	b913      	cbnz	r3, 8013a34 <_fflush_r+0x10>
 8013a2e:	2500      	movs	r5, #0
 8013a30:	4628      	mov	r0, r5
 8013a32:	bd38      	pop	{r3, r4, r5, pc}
 8013a34:	b118      	cbz	r0, 8013a3e <_fflush_r+0x1a>
 8013a36:	6983      	ldr	r3, [r0, #24]
 8013a38:	b90b      	cbnz	r3, 8013a3e <_fflush_r+0x1a>
 8013a3a:	f7ff f9dd 	bl	8012df8 <__sinit>
 8013a3e:	4b14      	ldr	r3, [pc, #80]	; (8013a90 <_fflush_r+0x6c>)
 8013a40:	429c      	cmp	r4, r3
 8013a42:	d11b      	bne.n	8013a7c <_fflush_r+0x58>
 8013a44:	686c      	ldr	r4, [r5, #4]
 8013a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d0ef      	beq.n	8013a2e <_fflush_r+0xa>
 8013a4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013a50:	07d0      	lsls	r0, r2, #31
 8013a52:	d404      	bmi.n	8013a5e <_fflush_r+0x3a>
 8013a54:	0599      	lsls	r1, r3, #22
 8013a56:	d402      	bmi.n	8013a5e <_fflush_r+0x3a>
 8013a58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013a5a:	f7ff fa7d 	bl	8012f58 <__retarget_lock_acquire_recursive>
 8013a5e:	4628      	mov	r0, r5
 8013a60:	4621      	mov	r1, r4
 8013a62:	f7ff ff59 	bl	8013918 <__sflush_r>
 8013a66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013a68:	07da      	lsls	r2, r3, #31
 8013a6a:	4605      	mov	r5, r0
 8013a6c:	d4e0      	bmi.n	8013a30 <_fflush_r+0xc>
 8013a6e:	89a3      	ldrh	r3, [r4, #12]
 8013a70:	059b      	lsls	r3, r3, #22
 8013a72:	d4dd      	bmi.n	8013a30 <_fflush_r+0xc>
 8013a74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013a76:	f7ff fa70 	bl	8012f5a <__retarget_lock_release_recursive>
 8013a7a:	e7d9      	b.n	8013a30 <_fflush_r+0xc>
 8013a7c:	4b05      	ldr	r3, [pc, #20]	; (8013a94 <_fflush_r+0x70>)
 8013a7e:	429c      	cmp	r4, r3
 8013a80:	d101      	bne.n	8013a86 <_fflush_r+0x62>
 8013a82:	68ac      	ldr	r4, [r5, #8]
 8013a84:	e7df      	b.n	8013a46 <_fflush_r+0x22>
 8013a86:	4b04      	ldr	r3, [pc, #16]	; (8013a98 <_fflush_r+0x74>)
 8013a88:	429c      	cmp	r4, r3
 8013a8a:	bf08      	it	eq
 8013a8c:	68ec      	ldreq	r4, [r5, #12]
 8013a8e:	e7da      	b.n	8013a46 <_fflush_r+0x22>
 8013a90:	08016910 	.word	0x08016910
 8013a94:	08016930 	.word	0x08016930
 8013a98:	080168f0 	.word	0x080168f0

08013a9c <_lseek_r>:
 8013a9c:	b538      	push	{r3, r4, r5, lr}
 8013a9e:	4d07      	ldr	r5, [pc, #28]	; (8013abc <_lseek_r+0x20>)
 8013aa0:	4604      	mov	r4, r0
 8013aa2:	4608      	mov	r0, r1
 8013aa4:	4611      	mov	r1, r2
 8013aa6:	2200      	movs	r2, #0
 8013aa8:	602a      	str	r2, [r5, #0]
 8013aaa:	461a      	mov	r2, r3
 8013aac:	f7ed fa90 	bl	8000fd0 <_lseek>
 8013ab0:	1c43      	adds	r3, r0, #1
 8013ab2:	d102      	bne.n	8013aba <_lseek_r+0x1e>
 8013ab4:	682b      	ldr	r3, [r5, #0]
 8013ab6:	b103      	cbz	r3, 8013aba <_lseek_r+0x1e>
 8013ab8:	6023      	str	r3, [r4, #0]
 8013aba:	bd38      	pop	{r3, r4, r5, pc}
 8013abc:	24003488 	.word	0x24003488

08013ac0 <__swhatbuf_r>:
 8013ac0:	b570      	push	{r4, r5, r6, lr}
 8013ac2:	460e      	mov	r6, r1
 8013ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ac8:	2900      	cmp	r1, #0
 8013aca:	b096      	sub	sp, #88	; 0x58
 8013acc:	4614      	mov	r4, r2
 8013ace:	461d      	mov	r5, r3
 8013ad0:	da07      	bge.n	8013ae2 <__swhatbuf_r+0x22>
 8013ad2:	2300      	movs	r3, #0
 8013ad4:	602b      	str	r3, [r5, #0]
 8013ad6:	89b3      	ldrh	r3, [r6, #12]
 8013ad8:	061a      	lsls	r2, r3, #24
 8013ada:	d410      	bmi.n	8013afe <__swhatbuf_r+0x3e>
 8013adc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013ae0:	e00e      	b.n	8013b00 <__swhatbuf_r+0x40>
 8013ae2:	466a      	mov	r2, sp
 8013ae4:	f000 f8b2 	bl	8013c4c <_fstat_r>
 8013ae8:	2800      	cmp	r0, #0
 8013aea:	dbf2      	blt.n	8013ad2 <__swhatbuf_r+0x12>
 8013aec:	9a01      	ldr	r2, [sp, #4]
 8013aee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013af2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013af6:	425a      	negs	r2, r3
 8013af8:	415a      	adcs	r2, r3
 8013afa:	602a      	str	r2, [r5, #0]
 8013afc:	e7ee      	b.n	8013adc <__swhatbuf_r+0x1c>
 8013afe:	2340      	movs	r3, #64	; 0x40
 8013b00:	2000      	movs	r0, #0
 8013b02:	6023      	str	r3, [r4, #0]
 8013b04:	b016      	add	sp, #88	; 0x58
 8013b06:	bd70      	pop	{r4, r5, r6, pc}

08013b08 <__smakebuf_r>:
 8013b08:	898b      	ldrh	r3, [r1, #12]
 8013b0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013b0c:	079d      	lsls	r5, r3, #30
 8013b0e:	4606      	mov	r6, r0
 8013b10:	460c      	mov	r4, r1
 8013b12:	d507      	bpl.n	8013b24 <__smakebuf_r+0x1c>
 8013b14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013b18:	6023      	str	r3, [r4, #0]
 8013b1a:	6123      	str	r3, [r4, #16]
 8013b1c:	2301      	movs	r3, #1
 8013b1e:	6163      	str	r3, [r4, #20]
 8013b20:	b002      	add	sp, #8
 8013b22:	bd70      	pop	{r4, r5, r6, pc}
 8013b24:	ab01      	add	r3, sp, #4
 8013b26:	466a      	mov	r2, sp
 8013b28:	f7ff ffca 	bl	8013ac0 <__swhatbuf_r>
 8013b2c:	9900      	ldr	r1, [sp, #0]
 8013b2e:	4605      	mov	r5, r0
 8013b30:	4630      	mov	r0, r6
 8013b32:	f7ff fa6b 	bl	801300c <_malloc_r>
 8013b36:	b948      	cbnz	r0, 8013b4c <__smakebuf_r+0x44>
 8013b38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b3c:	059a      	lsls	r2, r3, #22
 8013b3e:	d4ef      	bmi.n	8013b20 <__smakebuf_r+0x18>
 8013b40:	f023 0303 	bic.w	r3, r3, #3
 8013b44:	f043 0302 	orr.w	r3, r3, #2
 8013b48:	81a3      	strh	r3, [r4, #12]
 8013b4a:	e7e3      	b.n	8013b14 <__smakebuf_r+0xc>
 8013b4c:	4b0d      	ldr	r3, [pc, #52]	; (8013b84 <__smakebuf_r+0x7c>)
 8013b4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8013b50:	89a3      	ldrh	r3, [r4, #12]
 8013b52:	6020      	str	r0, [r4, #0]
 8013b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013b58:	81a3      	strh	r3, [r4, #12]
 8013b5a:	9b00      	ldr	r3, [sp, #0]
 8013b5c:	6163      	str	r3, [r4, #20]
 8013b5e:	9b01      	ldr	r3, [sp, #4]
 8013b60:	6120      	str	r0, [r4, #16]
 8013b62:	b15b      	cbz	r3, 8013b7c <__smakebuf_r+0x74>
 8013b64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013b68:	4630      	mov	r0, r6
 8013b6a:	f000 f881 	bl	8013c70 <_isatty_r>
 8013b6e:	b128      	cbz	r0, 8013b7c <__smakebuf_r+0x74>
 8013b70:	89a3      	ldrh	r3, [r4, #12]
 8013b72:	f023 0303 	bic.w	r3, r3, #3
 8013b76:	f043 0301 	orr.w	r3, r3, #1
 8013b7a:	81a3      	strh	r3, [r4, #12]
 8013b7c:	89a0      	ldrh	r0, [r4, #12]
 8013b7e:	4305      	orrs	r5, r0
 8013b80:	81a5      	strh	r5, [r4, #12]
 8013b82:	e7cd      	b.n	8013b20 <__smakebuf_r+0x18>
 8013b84:	08012d91 	.word	0x08012d91

08013b88 <__malloc_lock>:
 8013b88:	4801      	ldr	r0, [pc, #4]	; (8013b90 <__malloc_lock+0x8>)
 8013b8a:	f7ff b9e5 	b.w	8012f58 <__retarget_lock_acquire_recursive>
 8013b8e:	bf00      	nop
 8013b90:	24003490 	.word	0x24003490

08013b94 <__malloc_unlock>:
 8013b94:	4801      	ldr	r0, [pc, #4]	; (8013b9c <__malloc_unlock+0x8>)
 8013b96:	f7ff b9e0 	b.w	8012f5a <__retarget_lock_release_recursive>
 8013b9a:	bf00      	nop
 8013b9c:	24003490 	.word	0x24003490

08013ba0 <_read_r>:
 8013ba0:	b538      	push	{r3, r4, r5, lr}
 8013ba2:	4d07      	ldr	r5, [pc, #28]	; (8013bc0 <_read_r+0x20>)
 8013ba4:	4604      	mov	r4, r0
 8013ba6:	4608      	mov	r0, r1
 8013ba8:	4611      	mov	r1, r2
 8013baa:	2200      	movs	r2, #0
 8013bac:	602a      	str	r2, [r5, #0]
 8013bae:	461a      	mov	r2, r3
 8013bb0:	f7ed f9ae 	bl	8000f10 <_read>
 8013bb4:	1c43      	adds	r3, r0, #1
 8013bb6:	d102      	bne.n	8013bbe <_read_r+0x1e>
 8013bb8:	682b      	ldr	r3, [r5, #0]
 8013bba:	b103      	cbz	r3, 8013bbe <_read_r+0x1e>
 8013bbc:	6023      	str	r3, [r4, #0]
 8013bbe:	bd38      	pop	{r3, r4, r5, pc}
 8013bc0:	24003488 	.word	0x24003488

08013bc4 <_raise_r>:
 8013bc4:	291f      	cmp	r1, #31
 8013bc6:	b538      	push	{r3, r4, r5, lr}
 8013bc8:	4604      	mov	r4, r0
 8013bca:	460d      	mov	r5, r1
 8013bcc:	d904      	bls.n	8013bd8 <_raise_r+0x14>
 8013bce:	2316      	movs	r3, #22
 8013bd0:	6003      	str	r3, [r0, #0]
 8013bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8013bd6:	bd38      	pop	{r3, r4, r5, pc}
 8013bd8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013bda:	b112      	cbz	r2, 8013be2 <_raise_r+0x1e>
 8013bdc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013be0:	b94b      	cbnz	r3, 8013bf6 <_raise_r+0x32>
 8013be2:	4620      	mov	r0, r4
 8013be4:	f000 f830 	bl	8013c48 <_getpid_r>
 8013be8:	462a      	mov	r2, r5
 8013bea:	4601      	mov	r1, r0
 8013bec:	4620      	mov	r0, r4
 8013bee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013bf2:	f000 b817 	b.w	8013c24 <_kill_r>
 8013bf6:	2b01      	cmp	r3, #1
 8013bf8:	d00a      	beq.n	8013c10 <_raise_r+0x4c>
 8013bfa:	1c59      	adds	r1, r3, #1
 8013bfc:	d103      	bne.n	8013c06 <_raise_r+0x42>
 8013bfe:	2316      	movs	r3, #22
 8013c00:	6003      	str	r3, [r0, #0]
 8013c02:	2001      	movs	r0, #1
 8013c04:	e7e7      	b.n	8013bd6 <_raise_r+0x12>
 8013c06:	2400      	movs	r4, #0
 8013c08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013c0c:	4628      	mov	r0, r5
 8013c0e:	4798      	blx	r3
 8013c10:	2000      	movs	r0, #0
 8013c12:	e7e0      	b.n	8013bd6 <_raise_r+0x12>

08013c14 <raise>:
 8013c14:	4b02      	ldr	r3, [pc, #8]	; (8013c20 <raise+0xc>)
 8013c16:	4601      	mov	r1, r0
 8013c18:	6818      	ldr	r0, [r3, #0]
 8013c1a:	f7ff bfd3 	b.w	8013bc4 <_raise_r>
 8013c1e:	bf00      	nop
 8013c20:	24000030 	.word	0x24000030

08013c24 <_kill_r>:
 8013c24:	b538      	push	{r3, r4, r5, lr}
 8013c26:	4d07      	ldr	r5, [pc, #28]	; (8013c44 <_kill_r+0x20>)
 8013c28:	2300      	movs	r3, #0
 8013c2a:	4604      	mov	r4, r0
 8013c2c:	4608      	mov	r0, r1
 8013c2e:	4611      	mov	r1, r2
 8013c30:	602b      	str	r3, [r5, #0]
 8013c32:	f7ed f951 	bl	8000ed8 <_kill>
 8013c36:	1c43      	adds	r3, r0, #1
 8013c38:	d102      	bne.n	8013c40 <_kill_r+0x1c>
 8013c3a:	682b      	ldr	r3, [r5, #0]
 8013c3c:	b103      	cbz	r3, 8013c40 <_kill_r+0x1c>
 8013c3e:	6023      	str	r3, [r4, #0]
 8013c40:	bd38      	pop	{r3, r4, r5, pc}
 8013c42:	bf00      	nop
 8013c44:	24003488 	.word	0x24003488

08013c48 <_getpid_r>:
 8013c48:	f7ed b93e 	b.w	8000ec8 <_getpid>

08013c4c <_fstat_r>:
 8013c4c:	b538      	push	{r3, r4, r5, lr}
 8013c4e:	4d07      	ldr	r5, [pc, #28]	; (8013c6c <_fstat_r+0x20>)
 8013c50:	2300      	movs	r3, #0
 8013c52:	4604      	mov	r4, r0
 8013c54:	4608      	mov	r0, r1
 8013c56:	4611      	mov	r1, r2
 8013c58:	602b      	str	r3, [r5, #0]
 8013c5a:	f7ed f99e 	bl	8000f9a <_fstat>
 8013c5e:	1c43      	adds	r3, r0, #1
 8013c60:	d102      	bne.n	8013c68 <_fstat_r+0x1c>
 8013c62:	682b      	ldr	r3, [r5, #0]
 8013c64:	b103      	cbz	r3, 8013c68 <_fstat_r+0x1c>
 8013c66:	6023      	str	r3, [r4, #0]
 8013c68:	bd38      	pop	{r3, r4, r5, pc}
 8013c6a:	bf00      	nop
 8013c6c:	24003488 	.word	0x24003488

08013c70 <_isatty_r>:
 8013c70:	b538      	push	{r3, r4, r5, lr}
 8013c72:	4d06      	ldr	r5, [pc, #24]	; (8013c8c <_isatty_r+0x1c>)
 8013c74:	2300      	movs	r3, #0
 8013c76:	4604      	mov	r4, r0
 8013c78:	4608      	mov	r0, r1
 8013c7a:	602b      	str	r3, [r5, #0]
 8013c7c:	f7ed f99d 	bl	8000fba <_isatty>
 8013c80:	1c43      	adds	r3, r0, #1
 8013c82:	d102      	bne.n	8013c8a <_isatty_r+0x1a>
 8013c84:	682b      	ldr	r3, [r5, #0]
 8013c86:	b103      	cbz	r3, 8013c8a <_isatty_r+0x1a>
 8013c88:	6023      	str	r3, [r4, #0]
 8013c8a:	bd38      	pop	{r3, r4, r5, pc}
 8013c8c:	24003488 	.word	0x24003488

08013c90 <_init>:
 8013c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c92:	bf00      	nop
 8013c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c96:	bc08      	pop	{r3}
 8013c98:	469e      	mov	lr, r3
 8013c9a:	4770      	bx	lr

08013c9c <_fini>:
 8013c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c9e:	bf00      	nop
 8013ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ca2:	bc08      	pop	{r3}
 8013ca4:	469e      	mov	lr, r3
 8013ca6:	4770      	bx	lr
