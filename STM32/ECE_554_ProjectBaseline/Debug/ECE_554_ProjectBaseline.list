
ECE_554_ProjectBaseline.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a614  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003744  0801a8e4  0801a8e4  0002a8e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801e028  0801e028  0002e028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801e030  0801e030  0002e030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801e034  0801e034  0002e034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a0  24000000  0801e038  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000077f4  240000a0  0801e0d8  000300a0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24007894  0801e0d8  00037894  2**0
                  ALLOC
  9 .lwip_sec     000018d0  30000000  30000000  00040000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
 11 .debug_info   000723f9  00000000  00000000  000300ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000b052  00000000  00000000  000a24c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002c98  00000000  00000000  000ad520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00002a50  00000000  00000000  000b01b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000483c3  00000000  00000000  000b2c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00047279  00000000  00000000  000fafcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018052d  00000000  00000000  00142244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  002c2771  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000c260  00000000  00000000  002c27c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240000a0 	.word	0x240000a0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801a8cc 	.word	0x0801a8cc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000a4 	.word	0x240000a4
 800030c:	0801a8cc 	.word	0x0801a8cc

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96e 	b.w	80006b4 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80006b8:	b590      	push	{r4, r7, lr}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af02      	add	r7, sp, #8
 80006be:	4604      	mov	r4, r0
 80006c0:	4608      	mov	r0, r1
 80006c2:	4611      	mov	r1, r2
 80006c4:	461a      	mov	r2, r3
 80006c6:	4623      	mov	r3, r4
 80006c8:	80fb      	strh	r3, [r7, #6]
 80006ca:	4603      	mov	r3, r0
 80006cc:	80bb      	strh	r3, [r7, #4]
 80006ce:	460b      	mov	r3, r1
 80006d0:	807b      	strh	r3, [r7, #2]
 80006d2:	4613      	mov	r3, r2
 80006d4:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 80006d6:	88f8      	ldrh	r0, [r7, #6]
 80006d8:	88b9      	ldrh	r1, [r7, #4]
 80006da:	887a      	ldrh	r2, [r7, #2]
 80006dc:	883c      	ldrh	r4, [r7, #0]
 80006de:	8b3b      	ldrh	r3, [r7, #24]
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	4623      	mov	r3, r4
 80006e4:	f000 faa6 	bl	8000c34 <ST7735_FillRectangle>
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd90      	pop	{r4, r7, pc}

080006f0 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af02      	add	r7, sp, #8
 80006f6:	4603      	mov	r3, r0
 80006f8:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <fillScreen+0x2c>)
 80006fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <fillScreen+0x30>)
 8000702:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000706:	88fb      	ldrh	r3, [r7, #6]
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	460b      	mov	r3, r1
 800070c:	2100      	movs	r1, #0
 800070e:	2000      	movs	r0, #0
 8000710:	f7ff ffd2 	bl	80006b8 <fillRect>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	24004280 	.word	0x24004280
 8000720:	24004284 	.word	0x24004284

08000724 <print_to_serial>:
#include "Globals.h"


/* Function prototypes -----------------------------------------------*/
void print_to_serial(char *myString)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b09c      	sub	sp, #112	; 0x70
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	uint8_t buffer[100];

	strcpy((char*)buffer, myString);
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	6879      	ldr	r1, [r7, #4]
 8000732:	4618      	mov	r0, r3
 8000734:	f019 fa93 	bl	8019c5e <strcpy>
	HAL_UART_Transmit(&huart3, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff fde7 	bl	8000310 <strlen>
 8000742:	4603      	mov	r3, r0
 8000744:	b29a      	uxth	r2, r3
 8000746:	f107 010c 	add.w	r1, r7, #12
 800074a:	f04f 33ff 	mov.w	r3, #4294967295
 800074e:	4803      	ldr	r0, [pc, #12]	; (800075c <print_to_serial+0x38>)
 8000750:	f009 f82c 	bl	80097ac <HAL_UART_Transmit>

}
 8000754:	bf00      	nop
 8000756:	3770      	adds	r7, #112	; 0x70
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	24004518 	.word	0x24004518

08000760 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2101      	movs	r1, #1
 8000768:	4802      	ldr	r0, [pc, #8]	; (8000774 <ST7735_Select+0x14>)
 800076a:	f005 fccd 	bl	8006108 <HAL_GPIO_WritePin>
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	58020800 	.word	0x58020800

08000778 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	2101      	movs	r1, #1
 8000780:	4802      	ldr	r0, [pc, #8]	; (800078c <ST7735_Unselect+0x14>)
 8000782:	f005 fcc1 	bl	8006108 <HAL_GPIO_WritePin>
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	58020800 	.word	0x58020800

08000790 <ST7735_Reset>:

void ST7735_Reset()
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	2108      	movs	r1, #8
 8000798:	4806      	ldr	r0, [pc, #24]	; (80007b4 <ST7735_Reset+0x24>)
 800079a:	f005 fcb5 	bl	8006108 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800079e:	2005      	movs	r0, #5
 80007a0:	f002 f87c 	bl	800289c <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	2108      	movs	r1, #8
 80007a8:	4802      	ldr	r0, [pc, #8]	; (80007b4 <ST7735_Reset+0x24>)
 80007aa:	f005 fcad 	bl	8006108 <HAL_GPIO_WritePin>
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	58020800 	.word	0x58020800

080007b8 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2108      	movs	r1, #8
 80007c6:	4807      	ldr	r0, [pc, #28]	; (80007e4 <ST7735_WriteCommand+0x2c>)
 80007c8:	f005 fc9e 	bl	8006108 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80007cc:	1df9      	adds	r1, r7, #7
 80007ce:	f04f 33ff 	mov.w	r3, #4294967295
 80007d2:	2201      	movs	r2, #1
 80007d4:	4804      	ldr	r0, [pc, #16]	; (80007e8 <ST7735_WriteCommand+0x30>)
 80007d6:	f008 f8bb 	bl	8008950 <HAL_SPI_Transmit>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	58020000 	.word	0x58020000
 80007e8:	240043f8 	.word	0x240043f8

080007ec <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80007f6:	2201      	movs	r2, #1
 80007f8:	2108      	movs	r1, #8
 80007fa:	4807      	ldr	r0, [pc, #28]	; (8000818 <ST7735_WriteData+0x2c>)
 80007fc:	f005 fc84 	bl	8006108 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	b29a      	uxth	r2, r3
 8000804:	f04f 33ff 	mov.w	r3, #4294967295
 8000808:	6879      	ldr	r1, [r7, #4]
 800080a:	4804      	ldr	r0, [pc, #16]	; (800081c <ST7735_WriteData+0x30>)
 800080c:	f008 f8a0 	bl	8008950 <HAL_SPI_Transmit>
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	58020000 	.word	0x58020000
 800081c:	240043f8 	.word	0x240043f8

08000820 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	1c5a      	adds	r2, r3, #1
 800082c:	607a      	str	r2, [r7, #4]
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000832:	e034      	b.n	800089e <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	1c5a      	adds	r2, r3, #1
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800083e:	7afb      	ldrb	r3, [r7, #11]
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ffb9 	bl	80007b8 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	1c5a      	adds	r2, r3, #1
 800084a:	607a      	str	r2, [r7, #4]
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000850:	7abb      	ldrb	r3, [r7, #10]
 8000852:	b29b      	uxth	r3, r3
 8000854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000858:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800085a:	7abb      	ldrb	r3, [r7, #10]
 800085c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000860:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000862:	7abb      	ldrb	r3, [r7, #10]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d008      	beq.n	800087a <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000868:	7abb      	ldrb	r3, [r7, #10]
 800086a:	4619      	mov	r1, r3
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f7ff ffbd 	bl	80007ec <ST7735_WriteData>
            addr += numArgs;
 8000872:	7abb      	ldrb	r3, [r7, #10]
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	4413      	add	r3, r2
 8000878:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800087a:	89bb      	ldrh	r3, [r7, #12]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d00e      	beq.n	800089e <DisplayInit+0x7e>
            ms = *addr++;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	607a      	str	r2, [r7, #4]
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800088a:	89bb      	ldrh	r3, [r7, #12]
 800088c:	2bff      	cmp	r3, #255	; 0xff
 800088e:	d102      	bne.n	8000896 <DisplayInit+0x76>
 8000890:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000894:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000896:	89bb      	ldrh	r3, [r7, #12]
 8000898:	4618      	mov	r0, r3
 800089a:	f001 ffff 	bl	800289c <HAL_Delay>
    while(numCommands--) {
 800089e:	7bfb      	ldrb	r3, [r7, #15]
 80008a0:	1e5a      	subs	r2, r3, #1
 80008a2:	73fa      	strb	r2, [r7, #15]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d1c5      	bne.n	8000834 <DisplayInit+0x14>
        }
    }
}
 80008a8:	bf00      	nop
 80008aa:	bf00      	nop
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80008b4:	b590      	push	{r4, r7, lr}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4604      	mov	r4, r0
 80008bc:	4608      	mov	r0, r1
 80008be:	4611      	mov	r1, r2
 80008c0:	461a      	mov	r2, r3
 80008c2:	4623      	mov	r3, r4
 80008c4:	71fb      	strb	r3, [r7, #7]
 80008c6:	4603      	mov	r3, r0
 80008c8:	71bb      	strb	r3, [r7, #6]
 80008ca:	460b      	mov	r3, r1
 80008cc:	717b      	strb	r3, [r7, #5]
 80008ce:	4613      	mov	r3, r2
 80008d0:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80008d2:	202a      	movs	r0, #42	; 0x2a
 80008d4:	f7ff ff70 	bl	80007b8 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 80008d8:	2300      	movs	r3, #0
 80008da:	733b      	strb	r3, [r7, #12]
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <ST7735_SetAddressWindow+0x88>)
 80008de:	781a      	ldrb	r2, [r3, #0]
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	4413      	add	r3, r2
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	737b      	strb	r3, [r7, #13]
 80008e8:	2300      	movs	r3, #0
 80008ea:	73bb      	strb	r3, [r7, #14]
 80008ec:	4b13      	ldr	r3, [pc, #76]	; (800093c <ST7735_SetAddressWindow+0x88>)
 80008ee:	781a      	ldrb	r2, [r3, #0]
 80008f0:	797b      	ldrb	r3, [r7, #5]
 80008f2:	4413      	add	r3, r2
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	2104      	movs	r1, #4
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff ff74 	bl	80007ec <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000904:	202b      	movs	r0, #43	; 0x2b
 8000906:	f7ff ff57 	bl	80007b8 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <ST7735_SetAddressWindow+0x8c>)
 800090c:	781a      	ldrb	r2, [r3, #0]
 800090e:	79bb      	ldrb	r3, [r7, #6]
 8000910:	4413      	add	r3, r2
 8000912:	b2db      	uxtb	r3, r3
 8000914:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <ST7735_SetAddressWindow+0x8c>)
 8000918:	781a      	ldrb	r2, [r3, #0]
 800091a:	793b      	ldrb	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	b2db      	uxtb	r3, r3
 8000920:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	2104      	movs	r1, #4
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff ff5f 	bl	80007ec <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800092e:	202c      	movs	r0, #44	; 0x2c
 8000930:	f7ff ff42 	bl	80007b8 <ST7735_WriteCommand>
}
 8000934:	bf00      	nop
 8000936:	3714      	adds	r7, #20
 8000938:	46bd      	mov	sp, r7
 800093a:	bd90      	pop	{r4, r7, pc}
 800093c:	24004278 	.word	0x24004278
 8000940:	2400427c 	.word	0x2400427c

08000944 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 800094e:	f7ff ff07 	bl	8000760 <ST7735_Select>
    ST7735_Reset();
 8000952:	f7ff ff1d 	bl	8000790 <ST7735_Reset>
    DisplayInit(init_cmds1);
 8000956:	480c      	ldr	r0, [pc, #48]	; (8000988 <ST7735_Init+0x44>)
 8000958:	f7ff ff62 	bl	8000820 <DisplayInit>
    DisplayInit(init_cmds2);
 800095c:	480b      	ldr	r0, [pc, #44]	; (800098c <ST7735_Init+0x48>)
 800095e:	f7ff ff5f 	bl	8000820 <DisplayInit>
    DisplayInit(init_cmds3);
 8000962:	480b      	ldr	r0, [pc, #44]	; (8000990 <ST7735_Init+0x4c>)
 8000964:	f7ff ff5c 	bl	8000820 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8000968:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <ST7735_Init+0x50>)
 800096a:	2200      	movs	r2, #0
 800096c:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <ST7735_Init+0x54>)
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	4618      	mov	r0, r3
 8000978:	f000 f810 	bl	800099c <ST7735_SetRotation>
    ST7735_Unselect();
 800097c:	f7ff fefc 	bl	8000778 <ST7735_Unselect>

}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	0801d57c 	.word	0x0801d57c
 800098c:	0801d5b4 	.word	0x0801d5b4
 8000990:	0801d5c4 	.word	0x0801d5c4
 8000994:	24004279 	.word	0x24004279
 8000998:	2400427d 	.word	0x2400427d

0800099c <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	f003 0303 	and.w	r3, r3, #3
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4b33      	ldr	r3, [pc, #204]	; (8000a80 <ST7735_SetRotation+0xe4>)
 80009b4:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 80009b6:	4b32      	ldr	r3, [pc, #200]	; (8000a80 <ST7735_SetRotation+0xe4>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b03      	cmp	r3, #3
 80009bc:	d84e      	bhi.n	8000a5c <ST7735_SetRotation+0xc0>
 80009be:	a201      	add	r2, pc, #4	; (adr r2, 80009c4 <ST7735_SetRotation+0x28>)
 80009c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c4:	080009d5 	.word	0x080009d5
 80009c8:	080009f7 	.word	0x080009f7
 80009cc:	08000a19 	.word	0x08000a19
 80009d0:	08000a3b 	.word	0x08000a3b
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 80009d4:	23c0      	movs	r3, #192	; 0xc0
 80009d6:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 80009d8:	4b2a      	ldr	r3, [pc, #168]	; (8000a84 <ST7735_SetRotation+0xe8>)
 80009da:	22a0      	movs	r2, #160	; 0xa0
 80009dc:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80009de:	4b2a      	ldr	r3, [pc, #168]	; (8000a88 <ST7735_SetRotation+0xec>)
 80009e0:	2280      	movs	r2, #128	; 0x80
 80009e2:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 80009e4:	4b29      	ldr	r3, [pc, #164]	; (8000a8c <ST7735_SetRotation+0xf0>)
 80009e6:	781a      	ldrb	r2, [r3, #0]
 80009e8:	4b29      	ldr	r3, [pc, #164]	; (8000a90 <ST7735_SetRotation+0xf4>)
 80009ea:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 80009ec:	4b29      	ldr	r3, [pc, #164]	; (8000a94 <ST7735_SetRotation+0xf8>)
 80009ee:	781a      	ldrb	r2, [r3, #0]
 80009f0:	4b29      	ldr	r3, [pc, #164]	; (8000a98 <ST7735_SetRotation+0xfc>)
 80009f2:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80009f4:	e032      	b.n	8000a5c <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80009f6:	23a0      	movs	r3, #160	; 0xa0
 80009f8:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80009fa:	4b23      	ldr	r3, [pc, #140]	; (8000a88 <ST7735_SetRotation+0xec>)
 80009fc:	22a0      	movs	r2, #160	; 0xa0
 80009fe:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000a00:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <ST7735_SetRotation+0xe8>)
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000a06:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <ST7735_SetRotation+0xf0>)
 8000a08:	781a      	ldrb	r2, [r3, #0]
 8000a0a:	4b23      	ldr	r3, [pc, #140]	; (8000a98 <ST7735_SetRotation+0xfc>)
 8000a0c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000a0e:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <ST7735_SetRotation+0xf8>)
 8000a10:	781a      	ldrb	r2, [r3, #0]
 8000a12:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <ST7735_SetRotation+0xf4>)
 8000a14:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000a16:	e021      	b.n	8000a5c <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000a1c:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <ST7735_SetRotation+0xe8>)
 8000a1e:	22a0      	movs	r2, #160	; 0xa0
 8000a20:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000a22:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <ST7735_SetRotation+0xec>)
 8000a24:	2280      	movs	r2, #128	; 0x80
 8000a26:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8000a28:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <ST7735_SetRotation+0xf0>)
 8000a2a:	781a      	ldrb	r2, [r3, #0]
 8000a2c:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <ST7735_SetRotation+0xf4>)
 8000a2e:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <ST7735_SetRotation+0xf8>)
 8000a32:	781a      	ldrb	r2, [r3, #0]
 8000a34:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <ST7735_SetRotation+0xfc>)
 8000a36:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000a38:	e010      	b.n	8000a5c <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000a3a:	2360      	movs	r3, #96	; 0x60
 8000a3c:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000a3e:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <ST7735_SetRotation+0xec>)
 8000a40:	22a0      	movs	r2, #160	; 0xa0
 8000a42:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <ST7735_SetRotation+0xe8>)
 8000a46:	2280      	movs	r2, #128	; 0x80
 8000a48:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <ST7735_SetRotation+0xf0>)
 8000a4c:	781a      	ldrb	r2, [r3, #0]
 8000a4e:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <ST7735_SetRotation+0xfc>)
 8000a50:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <ST7735_SetRotation+0xf8>)
 8000a54:	781a      	ldrb	r2, [r3, #0]
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <ST7735_SetRotation+0xf4>)
 8000a58:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000a5a:	bf00      	nop
  }
  ST7735_Select();
 8000a5c:	f7ff fe80 	bl	8000760 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8000a60:	2036      	movs	r0, #54	; 0x36
 8000a62:	f7ff fea9 	bl	80007b8 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8000a66:	f107 030f 	add.w	r3, r7, #15
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff febd 	bl	80007ec <ST7735_WriteData>
  ST7735_Unselect();
 8000a72:	f7ff fe81 	bl	8000778 <ST7735_Unselect>
}
 8000a76:	bf00      	nop
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	2400427e 	.word	0x2400427e
 8000a84:	24004284 	.word	0x24004284
 8000a88:	24004280 	.word	0x24004280
 8000a8c:	24004279 	.word	0x24004279
 8000a90:	24004278 	.word	0x24004278
 8000a94:	2400427d 	.word	0x2400427d
 8000a98:	2400427c 	.word	0x2400427c

08000a9c <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000a9c:	b082      	sub	sp, #8
 8000a9e:	b590      	push	{r4, r7, lr}
 8000aa0:	b089      	sub	sp, #36	; 0x24
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	80fb      	strh	r3, [r7, #6]
 8000aaa:	460b      	mov	r3, r1
 8000aac:	80bb      	strh	r3, [r7, #4]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000ab2:	88fb      	ldrh	r3, [r7, #6]
 8000ab4:	b2d8      	uxtb	r0, r3
 8000ab6:	88bb      	ldrh	r3, [r7, #4]
 8000ab8:	b2d9      	uxtb	r1, r3
 8000aba:	88fb      	ldrh	r3, [r7, #6]
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000ac2:	4413      	add	r3, r2
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	b2dc      	uxtb	r4, r3
 8000aca:	88bb      	ldrh	r3, [r7, #4]
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000ad2:	4413      	add	r3, r2
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	4622      	mov	r2, r4
 8000adc:	f7ff feea 	bl	80008b4 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
 8000ae4:	e043      	b.n	8000b6e <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8000ae6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000ae8:	78fb      	ldrb	r3, [r7, #3]
 8000aea:	3b20      	subs	r3, #32
 8000aec:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000af0:	fb01 f303 	mul.w	r3, r1, r3
 8000af4:	4619      	mov	r1, r3
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	440b      	add	r3, r1
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	4413      	add	r3, r2
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000b02:	2300      	movs	r3, #0
 8000b04:	61bb      	str	r3, [r7, #24]
 8000b06:	e029      	b.n	8000b5c <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8000b08:	697a      	ldr	r2, [r7, #20]
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d00e      	beq.n	8000b36 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000b18:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000b1a:	0a1b      	lsrs	r3, r3, #8
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	743b      	strb	r3, [r7, #16]
 8000b22:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000b28:	f107 0310 	add.w	r3, r7, #16
 8000b2c:	2102      	movs	r1, #2
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff fe5c 	bl	80007ec <ST7735_WriteData>
 8000b34:	e00f      	b.n	8000b56 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000b36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000b3a:	0a1b      	lsrs	r3, r3, #8
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	733b      	strb	r3, [r7, #12]
 8000b42:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000b4a:	f107 030c 	add.w	r3, r7, #12
 8000b4e:	2102      	movs	r1, #2
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fe4b 	bl	80007ec <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	61bb      	str	r3, [r7, #24]
 8000b5c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000b60:	461a      	mov	r2, r3
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d3cf      	bcc.n	8000b08 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	61fb      	str	r3, [r7, #28]
 8000b6e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000b72:	461a      	mov	r2, r3
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d3b5      	bcc.n	8000ae6 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000b7a:	bf00      	nop
 8000b7c:	bf00      	nop
 8000b7e:	3724      	adds	r7, #36	; 0x24
 8000b80:	46bd      	mov	sp, r7
 8000b82:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000b86:	b002      	add	sp, #8
 8000b88:	4770      	bx	lr
	...

08000b8c <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b086      	sub	sp, #24
 8000b92:	af04      	add	r7, sp, #16
 8000b94:	603a      	str	r2, [r7, #0]
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	4603      	mov	r3, r0
 8000b9a:	80fb      	strh	r3, [r7, #6]
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000ba0:	f7ff fdde 	bl	8000760 <ST7735_Select>

    while(*str) {
 8000ba4:	e033      	b.n	8000c0e <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8000ba6:	88fb      	ldrh	r3, [r7, #6]
 8000ba8:	7d3a      	ldrb	r2, [r7, #20]
 8000baa:	4413      	add	r3, r2
 8000bac:	4a1f      	ldr	r2, [pc, #124]	; (8000c2c <ST7735_WriteString+0xa0>)
 8000bae:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	db16      	blt.n	8000be4 <ST7735_WriteString+0x58>
            x = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000bba:	7d7b      	ldrb	r3, [r7, #21]
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	88bb      	ldrh	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8000bc4:	88bb      	ldrh	r3, [r7, #4]
 8000bc6:	7d7a      	ldrb	r2, [r7, #21]
 8000bc8:	4413      	add	r3, r2
 8000bca:	4a19      	ldr	r2, [pc, #100]	; (8000c30 <ST7735_WriteString+0xa4>)
 8000bcc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	da21      	bge.n	8000c18 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b20      	cmp	r3, #32
 8000bda:	d103      	bne.n	8000be4 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	3301      	adds	r3, #1
 8000be0:	603b      	str	r3, [r7, #0]
                continue;
 8000be2:	e014      	b.n	8000c0e <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	781a      	ldrb	r2, [r3, #0]
 8000be8:	88b9      	ldrh	r1, [r7, #4]
 8000bea:	88f8      	ldrh	r0, [r7, #6]
 8000bec:	8c3b      	ldrh	r3, [r7, #32]
 8000bee:	9302      	str	r3, [sp, #8]
 8000bf0:	8bbb      	ldrh	r3, [r7, #28]
 8000bf2:	9301      	str	r3, [sp, #4]
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	9300      	str	r3, [sp, #0]
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	f7ff ff4f 	bl	8000a9c <ST7735_WriteChar>
        x += font.width;
 8000bfe:	7d3b      	ldrb	r3, [r7, #20]
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	88fb      	ldrh	r3, [r7, #6]
 8000c04:	4413      	add	r3, r2
 8000c06:	80fb      	strh	r3, [r7, #6]
        str++;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1c7      	bne.n	8000ba6 <ST7735_WriteString+0x1a>
 8000c16:	e000      	b.n	8000c1a <ST7735_WriteString+0x8e>
                break;
 8000c18:	bf00      	nop
    }

    ST7735_Unselect();
 8000c1a:	f7ff fdad 	bl	8000778 <ST7735_Unselect>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c28:	b002      	add	sp, #8
 8000c2a:	4770      	bx	lr
 8000c2c:	24004280 	.word	0x24004280
 8000c30:	24004284 	.word	0x24004284

08000c34 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000c34:	b590      	push	{r4, r7, lr}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4604      	mov	r4, r0
 8000c3c:	4608      	mov	r0, r1
 8000c3e:	4611      	mov	r1, r2
 8000c40:	461a      	mov	r2, r3
 8000c42:	4623      	mov	r3, r4
 8000c44:	80fb      	strh	r3, [r7, #6]
 8000c46:	4603      	mov	r3, r0
 8000c48:	80bb      	strh	r3, [r7, #4]
 8000c4a:	460b      	mov	r3, r1
 8000c4c:	807b      	strh	r3, [r7, #2]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8000c52:	88fb      	ldrh	r3, [r7, #6]
 8000c54:	4a37      	ldr	r2, [pc, #220]	; (8000d34 <ST7735_FillRectangle+0x100>)
 8000c56:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	da66      	bge.n	8000d2c <ST7735_FillRectangle+0xf8>
 8000c5e:	88bb      	ldrh	r3, [r7, #4]
 8000c60:	4a35      	ldr	r2, [pc, #212]	; (8000d38 <ST7735_FillRectangle+0x104>)
 8000c62:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c66:	4293      	cmp	r3, r2
 8000c68:	da60      	bge.n	8000d2c <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 8000c6a:	88fa      	ldrh	r2, [r7, #6]
 8000c6c:	887b      	ldrh	r3, [r7, #2]
 8000c6e:	4413      	add	r3, r2
 8000c70:	4a30      	ldr	r2, [pc, #192]	; (8000d34 <ST7735_FillRectangle+0x100>)
 8000c72:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c76:	4293      	cmp	r3, r2
 8000c78:	dd06      	ble.n	8000c88 <ST7735_FillRectangle+0x54>
 8000c7a:	4b2e      	ldr	r3, [pc, #184]	; (8000d34 <ST7735_FillRectangle+0x100>)
 8000c7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	88fb      	ldrh	r3, [r7, #6]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8000c88:	88ba      	ldrh	r2, [r7, #4]
 8000c8a:	883b      	ldrh	r3, [r7, #0]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	4a2a      	ldr	r2, [pc, #168]	; (8000d38 <ST7735_FillRectangle+0x104>)
 8000c90:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c94:	4293      	cmp	r3, r2
 8000c96:	dd06      	ble.n	8000ca6 <ST7735_FillRectangle+0x72>
 8000c98:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <ST7735_FillRectangle+0x104>)
 8000c9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	88bb      	ldrh	r3, [r7, #4]
 8000ca2:	1ad3      	subs	r3, r2, r3
 8000ca4:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000ca6:	f7ff fd5b 	bl	8000760 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000caa:	88fb      	ldrh	r3, [r7, #6]
 8000cac:	b2d8      	uxtb	r0, r3
 8000cae:	88bb      	ldrh	r3, [r7, #4]
 8000cb0:	b2d9      	uxtb	r1, r3
 8000cb2:	88fb      	ldrh	r3, [r7, #6]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	887b      	ldrh	r3, [r7, #2]
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	4413      	add	r3, r2
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	b2dc      	uxtb	r4, r3
 8000cc2:	88bb      	ldrh	r3, [r7, #4]
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	883b      	ldrh	r3, [r7, #0]
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	4413      	add	r3, r2
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	4622      	mov	r2, r4
 8000cd4:	f7ff fdee 	bl	80008b4 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000cd8:	8c3b      	ldrh	r3, [r7, #32]
 8000cda:	0a1b      	lsrs	r3, r3, #8
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	733b      	strb	r3, [r7, #12]
 8000ce2:	8c3b      	ldrh	r3, [r7, #32]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2108      	movs	r1, #8
 8000cec:	4813      	ldr	r0, [pc, #76]	; (8000d3c <ST7735_FillRectangle+0x108>)
 8000cee:	f005 fa0b 	bl	8006108 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000cf2:	883b      	ldrh	r3, [r7, #0]
 8000cf4:	80bb      	strh	r3, [r7, #4]
 8000cf6:	e013      	b.n	8000d20 <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 8000cf8:	887b      	ldrh	r3, [r7, #2]
 8000cfa:	80fb      	strh	r3, [r7, #6]
 8000cfc:	e00a      	b.n	8000d14 <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000cfe:	f107 010c 	add.w	r1, r7, #12
 8000d02:	f04f 33ff 	mov.w	r3, #4294967295
 8000d06:	2202      	movs	r2, #2
 8000d08:	480d      	ldr	r0, [pc, #52]	; (8000d40 <ST7735_FillRectangle+0x10c>)
 8000d0a:	f007 fe21 	bl	8008950 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	3b01      	subs	r3, #1
 8000d12:	80fb      	strh	r3, [r7, #6]
 8000d14:	88fb      	ldrh	r3, [r7, #6]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d1f1      	bne.n	8000cfe <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 8000d1a:	88bb      	ldrh	r3, [r7, #4]
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	80bb      	strh	r3, [r7, #4]
 8000d20:	88bb      	ldrh	r3, [r7, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d1e8      	bne.n	8000cf8 <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 8000d26:	f7ff fd27 	bl	8000778 <ST7735_Unselect>
 8000d2a:	e000      	b.n	8000d2e <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 8000d2c:	bf00      	nop
}
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd90      	pop	{r4, r7, pc}
 8000d34:	24004280 	.word	0x24004280
 8000d38:	24004284 	.word	0x24004284
 8000d3c:	58020000 	.word	0x58020000
 8000d40:	240043f8 	.word	0x240043f8

08000d44 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000d48:	4b2e      	ldr	r3, [pc, #184]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000d4a:	4a2f      	ldr	r2, [pc, #188]	; (8000e08 <MX_FDCAN1_Init+0xc4>)
 8000d4c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d4e:	4b2d      	ldr	r3, [pc, #180]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000d54:	4b2b      	ldr	r3, [pc, #172]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000d5a:	4b2a      	ldr	r3, [pc, #168]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000d60:	4b28      	ldr	r3, [pc, #160]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8000d66:	4b27      	ldr	r3, [pc, #156]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8000d6c:	4b25      	ldr	r3, [pc, #148]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000d6e:	2202      	movs	r2, #2
 8000d70:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8000d72:	4b24      	ldr	r3, [pc, #144]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000d74:	2208      	movs	r2, #8
 8000d76:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 31;
 8000d78:	4b22      	ldr	r3, [pc, #136]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000d7a:	221f      	movs	r2, #31
 8000d7c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8000d7e:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000d80:	2208      	movs	r2, #8
 8000d82:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000d84:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000d8a:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000d90:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000d96:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000d9c:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000da2:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000da8:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000db4:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000db6:	2204      	movs	r2, #4
 8000db8:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000dba:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000dc0:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000dc2:	2204      	movs	r2, #4
 8000dc4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000dcc:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000dce:	2204      	movs	r2, #4
 8000dd0:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000de4:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000dec:	2204      	movs	r2, #4
 8000dee:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000df0:	4804      	ldr	r0, [pc, #16]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000df2:	f003 fd93 	bl	800491c <HAL_FDCAN_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000dfc:	f000 fcf8 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	24004304 	.word	0x24004304
 8000e08:	4000a000 	.word	0x4000a000

08000e0c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b0b6      	sub	sp, #216	; 0xd8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e24:	f107 0310 	add.w	r3, r7, #16
 8000e28:	22b4      	movs	r2, #180	; 0xb4
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f018 fd9e 	bl	801996e <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a31      	ldr	r2, [pc, #196]	; (8000efc <HAL_FDCAN_MspInit+0xf0>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d15a      	bne.n	8000ef2 <HAL_FDCAN_MspInit+0xe6>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000e3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e40:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000e42:	2301      	movs	r3, #1
 8000e44:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 25;
 8000e46:	2319      	movs	r3, #25
 8000e48:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 5;
 8000e4e:	2305      	movs	r3, #5
 8000e50:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000e52:	2302      	movs	r3, #2
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000e56:	23c0      	movs	r3, #192	; 0xc0
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8000e62:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000e66:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e68:	f107 0310 	add.w	r3, r7, #16
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f006 f94d 	bl	800710c <HAL_RCCEx_PeriphCLKConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <HAL_FDCAN_MspInit+0x70>
    {
      Error_Handler();
 8000e78:	f000 fcba 	bl	80017f0 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000e7c:	4b20      	ldr	r3, [pc, #128]	; (8000f00 <HAL_FDCAN_MspInit+0xf4>)
 8000e7e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e82:	4a1f      	ldr	r2, [pc, #124]	; (8000f00 <HAL_FDCAN_MspInit+0xf4>)
 8000e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e88:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000e8c:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <HAL_FDCAN_MspInit+0xf4>)
 8000e8e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e9a:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <HAL_FDCAN_MspInit+0xf4>)
 8000e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea0:	4a17      	ldr	r2, [pc, #92]	; (8000f00 <HAL_FDCAN_MspInit+0xf4>)
 8000ea2:	f043 0308 	orr.w	r3, r3, #8
 8000ea6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <HAL_FDCAN_MspInit+0xf4>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb0:	f003 0308 	and.w	r3, r3, #8
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000ed0:	2309      	movs	r3, #9
 8000ed2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000eda:	4619      	mov	r1, r3
 8000edc:	4809      	ldr	r0, [pc, #36]	; (8000f04 <HAL_FDCAN_MspInit+0xf8>)
 8000ede:	f004 ff6b 	bl	8005db8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2105      	movs	r1, #5
 8000ee6:	2013      	movs	r0, #19
 8000ee8:	f001 fdc8 	bl	8002a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000eec:	2013      	movs	r0, #19
 8000eee:	f001 fddf 	bl	8002ab0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	37d8      	adds	r7, #216	; 0xd8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	4000a000 	.word	0x4000a000
 8000f00:	58024400 	.word	0x58024400
 8000f04:	58020c00 	.word	0x58020c00

08000f08 <FDCAN1_MSG_config>:
/**
  * @brief  The application entry point.
  * @retval int
  */
void FDCAN1_MSG_config(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef sFilterConfig;

	//Prepare CAN data
	myTxData[0] = 0xFF;
 8000f0e:	4b30      	ldr	r3, [pc, #192]	; (8000fd0 <FDCAN1_MSG_config+0xc8>)
 8000f10:	22ff      	movs	r2, #255	; 0xff
 8000f12:	701a      	strb	r2, [r3, #0]
	myTxData[1] = 0x00;
 8000f14:	4b2e      	ldr	r3, [pc, #184]	; (8000fd0 <FDCAN1_MSG_config+0xc8>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	705a      	strb	r2, [r3, #1]
	myTxData[2] = 0xFF;
 8000f1a:	4b2d      	ldr	r3, [pc, #180]	; (8000fd0 <FDCAN1_MSG_config+0xc8>)
 8000f1c:	22ff      	movs	r2, #255	; 0xff
 8000f1e:	709a      	strb	r2, [r3, #2]
	myTxData[3] = 0x00;
 8000f20:	4b2b      	ldr	r3, [pc, #172]	; (8000fd0 <FDCAN1_MSG_config+0xc8>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	70da      	strb	r2, [r3, #3]

	myTxData[4] = 0xFF;
 8000f26:	4b2a      	ldr	r3, [pc, #168]	; (8000fd0 <FDCAN1_MSG_config+0xc8>)
 8000f28:	22ff      	movs	r2, #255	; 0xff
 8000f2a:	711a      	strb	r2, [r3, #4]
	myTxData[5] = 0x00;
 8000f2c:	4b28      	ldr	r3, [pc, #160]	; (8000fd0 <FDCAN1_MSG_config+0xc8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	715a      	strb	r2, [r3, #5]
	myTxData[6] = 0xFF;
 8000f32:	4b27      	ldr	r3, [pc, #156]	; (8000fd0 <FDCAN1_MSG_config+0xc8>)
 8000f34:	22ff      	movs	r2, #255	; 0xff
 8000f36:	719a      	strb	r2, [r3, #6]
	myTxData[7] = 0x00;
 8000f38:	4b25      	ldr	r3, [pc, #148]	; (8000fd0 <FDCAN1_MSG_config+0xc8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	71da      	strb	r2, [r3, #7]

	/* Configure Rx filter */
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000f46:	2302      	movs	r3, #2
 8000f48:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x124;
 8000f4e:	f44f 7392 	mov.w	r3, #292	; 0x124
 8000f52:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x7FF;
 8000f54:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f58:	617b      	str	r3, [r7, #20]
	HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
 8000f5a:	463b      	mov	r3, r7
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	481d      	ldr	r0, [pc, #116]	; (8000fd4 <FDCAN1_MSG_config+0xcc>)
 8000f60:	f003 febe 	bl	8004ce0 <HAL_FDCAN_ConfigFilter>

	/* Configure global filter to reject all non-matching frames */
	HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 8000f64:	2301      	movs	r3, #1
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	2301      	movs	r3, #1
 8000f6a:	2202      	movs	r2, #2
 8000f6c:	2102      	movs	r1, #2
 8000f6e:	4819      	ldr	r0, [pc, #100]	; (8000fd4 <FDCAN1_MSG_config+0xcc>)
 8000f70:	f003 ff2c 	bl	8004dcc <HAL_FDCAN_ConfigGlobalFilter>

	/* Configure Rx FIFO 0 watermark to 2 */
	HAL_FDCAN_ConfigFifoWatermark(&hfdcan1, FDCAN_CFG_RX_FIFO0, 1);
 8000f74:	2201      	movs	r2, #1
 8000f76:	2101      	movs	r1, #1
 8000f78:	4816      	ldr	r0, [pc, #88]	; (8000fd4 <FDCAN1_MSG_config+0xcc>)
 8000f7a:	f003 ff54 	bl	8004e26 <HAL_FDCAN_ConfigFifoWatermark>

	/* Activate Rx FIFO 0 watermark notification */
	HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2101      	movs	r1, #1
 8000f82:	4814      	ldr	r0, [pc, #80]	; (8000fd4 <FDCAN1_MSG_config+0xcc>)
 8000f84:	f004 f990 	bl	80052a8 <HAL_FDCAN_ActivateNotification>

	/* Prepare Tx Header */
	TxHeader.Identifier = 0x322;
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <FDCAN1_MSG_config+0xd0>)
 8000f8a:	f240 3222 	movw	r2, #802	; 0x322
 8000f8e:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <FDCAN1_MSG_config+0xd0>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <FDCAN1_MSG_config+0xd0>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <FDCAN1_MSG_config+0xd0>)
 8000f9e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000fa2:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <FDCAN1_MSG_config+0xd0>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <FDCAN1_MSG_config+0xd0>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <FDCAN1_MSG_config+0xd0>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <FDCAN1_MSG_config+0xd0>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <FDCAN1_MSG_config+0xd0>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	621a      	str	r2, [r3, #32]

	/* Start the FDCAN module */
	HAL_FDCAN_Start(&hfdcan1);
 8000fc2:	4804      	ldr	r0, [pc, #16]	; (8000fd4 <FDCAN1_MSG_config+0xcc>)
 8000fc4:	f003 ff7b 	bl	8004ebe <HAL_FDCAN_Start>
}
 8000fc8:	bf00      	nop
 8000fca:	3720      	adds	r7, #32
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	240042f4 	.word	0x240042f4
 8000fd4:	24004304 	.word	0x24004304
 8000fd8:	240043a4 	.word	0x240043a4

08000fdc <Toggle_CAN_Data>:


void Toggle_CAN_Data(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
	if(myTxData[0] == 0x00)
 8000fe0:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <Toggle_CAN_Data+0x78>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d118      	bne.n	800101a <Toggle_CAN_Data+0x3e>
	{
		myTxData[0] = 0xFF;
 8000fe8:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <Toggle_CAN_Data+0x78>)
 8000fea:	22ff      	movs	r2, #255	; 0xff
 8000fec:	701a      	strb	r2, [r3, #0]
		myTxData[1] = 0x00;
 8000fee:	4b19      	ldr	r3, [pc, #100]	; (8001054 <Toggle_CAN_Data+0x78>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	705a      	strb	r2, [r3, #1]
		myTxData[2] = 0xFF;
 8000ff4:	4b17      	ldr	r3, [pc, #92]	; (8001054 <Toggle_CAN_Data+0x78>)
 8000ff6:	22ff      	movs	r2, #255	; 0xff
 8000ff8:	709a      	strb	r2, [r3, #2]
		myTxData[3] = 0x00;
 8000ffa:	4b16      	ldr	r3, [pc, #88]	; (8001054 <Toggle_CAN_Data+0x78>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	70da      	strb	r2, [r3, #3]

		myTxData[4] = 0xFF;
 8001000:	4b14      	ldr	r3, [pc, #80]	; (8001054 <Toggle_CAN_Data+0x78>)
 8001002:	22ff      	movs	r2, #255	; 0xff
 8001004:	711a      	strb	r2, [r3, #4]
		myTxData[5] = 0x00;
 8001006:	4b13      	ldr	r3, [pc, #76]	; (8001054 <Toggle_CAN_Data+0x78>)
 8001008:	2200      	movs	r2, #0
 800100a:	715a      	strb	r2, [r3, #5]
		myTxData[6] = 0xFF;
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <Toggle_CAN_Data+0x78>)
 800100e:	22ff      	movs	r2, #255	; 0xff
 8001010:	719a      	strb	r2, [r3, #6]
		myTxData[7] = 0x00;
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <Toggle_CAN_Data+0x78>)
 8001014:	2200      	movs	r2, #0
 8001016:	71da      	strb	r2, [r3, #7]
		myTxData[4] = 0x00;
		myTxData[5] = 0xFF;
		myTxData[6] = 0x00;
		myTxData[7] = 0xFF;
	}
}
 8001018:	e017      	b.n	800104a <Toggle_CAN_Data+0x6e>
		myTxData[0] = 0x00;
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <Toggle_CAN_Data+0x78>)
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
		myTxData[1] = 0xFF;
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <Toggle_CAN_Data+0x78>)
 8001022:	22ff      	movs	r2, #255	; 0xff
 8001024:	705a      	strb	r2, [r3, #1]
		myTxData[2] = 0x00;
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <Toggle_CAN_Data+0x78>)
 8001028:	2200      	movs	r2, #0
 800102a:	709a      	strb	r2, [r3, #2]
		myTxData[3] = 0xFF;
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <Toggle_CAN_Data+0x78>)
 800102e:	22ff      	movs	r2, #255	; 0xff
 8001030:	70da      	strb	r2, [r3, #3]
		myTxData[4] = 0x00;
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <Toggle_CAN_Data+0x78>)
 8001034:	2200      	movs	r2, #0
 8001036:	711a      	strb	r2, [r3, #4]
		myTxData[5] = 0xFF;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <Toggle_CAN_Data+0x78>)
 800103a:	22ff      	movs	r2, #255	; 0xff
 800103c:	715a      	strb	r2, [r3, #5]
		myTxData[6] = 0x00;
 800103e:	4b05      	ldr	r3, [pc, #20]	; (8001054 <Toggle_CAN_Data+0x78>)
 8001040:	2200      	movs	r2, #0
 8001042:	719a      	strb	r2, [r3, #6]
		myTxData[7] = 0xFF;
 8001044:	4b03      	ldr	r3, [pc, #12]	; (8001054 <Toggle_CAN_Data+0x78>)
 8001046:	22ff      	movs	r2, #255	; 0xff
 8001048:	71da      	strb	r2, [r3, #7]
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	240042f4 	.word	0x240042f4

08001058 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]

    /* Retrieve Rx messages from RX FIFO0 */
    HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, myRxData);
 8001062:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <HAL_FDCAN_RxFifo0Callback+0x40>)
 8001064:	4a0d      	ldr	r2, [pc, #52]	; (800109c <HAL_FDCAN_RxFifo0Callback+0x44>)
 8001066:	2140      	movs	r1, #64	; 0x40
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f003 ffaf 	bl	8004fcc <HAL_FDCAN_GetRxMessage>


    /* Display LEDx */
    if ((RxHeader.Identifier == 0x124) && (RxHeader.IdType == FDCAN_STANDARD_ID))
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <HAL_FDCAN_RxFifo0Callback+0x44>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f5b3 7f92 	cmp.w	r3, #292	; 0x124
 8001076:	d10b      	bne.n	8001090 <HAL_FDCAN_RxFifo0Callback+0x38>
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <HAL_FDCAN_RxFifo0Callback+0x44>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d107      	bne.n	8001090 <HAL_FDCAN_RxFifo0Callback+0x38>
    {
    	print_to_serial("MSG 0x124 Custom MSG!");
 8001080:	4807      	ldr	r0, [pc, #28]	; (80010a0 <HAL_FDCAN_RxFifo0Callback+0x48>)
 8001082:	f7ff fb4f 	bl	8000724 <print_to_serial>
    	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001086:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800108a:	4806      	ldr	r0, [pc, #24]	; (80010a4 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 800108c:	f005 f855 	bl	800613a <HAL_GPIO_TogglePin>
    }

}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	240042fc 	.word	0x240042fc
 800109c:	240043c8 	.word	0x240043c8
 80010a0:	0801a8e4 	.word	0x0801a8e4
 80010a4:	58020400 	.word	0x58020400

080010a8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80010b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	4a06      	ldr	r2, [pc, #24]	; (80010d8 <vApplicationGetIdleTaskMemory+0x30>)
 80010be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2280      	movs	r2, #128	; 0x80
 80010c4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010c6:	bf00      	nop
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	240000bc 	.word	0x240000bc
 80010d8:	24000170 	.word	0x24000170

080010dc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80010dc:	b5b0      	push	{r4, r5, r7, lr}
 80010de:	b08e      	sub	sp, #56	; 0x38
 80010e0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80010e2:	4b14      	ldr	r3, [pc, #80]	; (8001134 <MX_FREERTOS_Init+0x58>)
 80010e4:	f107 041c 	add.w	r4, r7, #28
 80010e8:	461d      	mov	r5, r3
 80010ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	2100      	movs	r1, #0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f00a fb04 	bl	800b70a <osThreadCreate>
 8001102:	4603      	mov	r3, r0
 8001104:	4a0c      	ldr	r2, [pc, #48]	; (8001138 <MX_FREERTOS_Init+0x5c>)
 8001106:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task02 */
  osThreadDef(Task02, Task02_Init, osPriorityNormal, 0, 128);
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <MX_FREERTOS_Init+0x60>)
 800110a:	463c      	mov	r4, r7
 800110c:	461d      	mov	r5, r3
 800110e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001110:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001112:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001116:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task02Handle = osThreadCreate(osThread(Task02), NULL);
 800111a:	463b      	mov	r3, r7
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f00a faf3 	bl	800b70a <osThreadCreate>
 8001124:	4603      	mov	r3, r0
 8001126:	4a06      	ldr	r2, [pc, #24]	; (8001140 <MX_FREERTOS_Init+0x64>)
 8001128:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800112a:	bf00      	nop
 800112c:	3738      	adds	r7, #56	; 0x38
 800112e:	46bd      	mov	sp, r7
 8001130:	bdb0      	pop	{r4, r5, r7, pc}
 8001132:	bf00      	nop
 8001134:	0801a910 	.word	0x0801a910
 8001138:	240043f4 	.word	0x240043f4
 800113c:	0801a92c 	.word	0x0801a92c
 8001140:	240043f0 	.word	0x240043f0

08001144 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af04      	add	r7, sp, #16
 800114a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 800114c:	f009 fcda 	bl	800ab04 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  SM_STATES state = INIT;
 8001150:	2300      	movs	r3, #0
 8001152:	73fb      	strb	r3, [r7, #15]

  //Start Timer
  HAL_TIM_Base_Start(&htim6);
 8001154:	4832      	ldr	r0, [pc, #200]	; (8001220 <StartDefaultTask+0xdc>)
 8001156:	f007 ff2d 	bl	8008fb4 <HAL_TIM_Base_Start>

  //Get current time
  timer_val = __HAL_TIM_GET_COUNTER(&htim6);
 800115a:	4b31      	ldr	r3, [pc, #196]	; (8001220 <StartDefaultTask+0xdc>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001160:	b29a      	uxth	r2, r3
 8001162:	4b30      	ldr	r3, [pc, #192]	; (8001224 <StartDefaultTask+0xe0>)
 8001164:	801a      	strh	r2, [r3, #0]

  //Start the TCP Server
  tcp_server_init();
 8001166:	f000 fe2b 	bl	8001dc0 <tcp_server_init>

  /* Infinite loop */
  for(;;)
  {
	  if(state == INIT)
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d132      	bne.n	80011d6 <StartDefaultTask+0x92>
	  {
		  print_to_serial("Hello FreeRTOS!");
 8001170:	482d      	ldr	r0, [pc, #180]	; (8001228 <StartDefaultTask+0xe4>)
 8001172:	f7ff fad7 	bl	8000724 <print_to_serial>
		  ST7735_SetRotation(2);
 8001176:	2002      	movs	r0, #2
 8001178:	f7ff fc10 	bl	800099c <ST7735_SetRotation>
		  ST7735_WriteString(0, 0, "Hello Ethernet!", Font_7x10, WHITE,BLACK);
 800117c:	4b2b      	ldr	r3, [pc, #172]	; (800122c <StartDefaultTask+0xe8>)
 800117e:	2200      	movs	r2, #0
 8001180:	9202      	str	r2, [sp, #8]
 8001182:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001186:	9201      	str	r2, [sp, #4]
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	9200      	str	r2, [sp, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a28      	ldr	r2, [pc, #160]	; (8001230 <StartDefaultTask+0xec>)
 8001190:	2100      	movs	r1, #0
 8001192:	2000      	movs	r0, #0
 8001194:	f7ff fcfa 	bl	8000b8c <ST7735_WriteString>
		  ST7735_WriteString(0, 12, "Hello CAN!", Font_7x10, WHITE,BLACK);
 8001198:	4b24      	ldr	r3, [pc, #144]	; (800122c <StartDefaultTask+0xe8>)
 800119a:	2200      	movs	r2, #0
 800119c:	9202      	str	r2, [sp, #8]
 800119e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011a2:	9201      	str	r2, [sp, #4]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	9200      	str	r2, [sp, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a22      	ldr	r2, [pc, #136]	; (8001234 <StartDefaultTask+0xf0>)
 80011ac:	210c      	movs	r1, #12
 80011ae:	2000      	movs	r0, #0
 80011b0:	f7ff fcec 	bl	8000b8c <ST7735_WriteString>
		  ST7735_WriteString(0, 24, "Hello SPI!", Font_7x10, WHITE,BLACK);
 80011b4:	4b1d      	ldr	r3, [pc, #116]	; (800122c <StartDefaultTask+0xe8>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	9202      	str	r2, [sp, #8]
 80011ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011be:	9201      	str	r2, [sp, #4]
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	9200      	str	r2, [sp, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a1c      	ldr	r2, [pc, #112]	; (8001238 <StartDefaultTask+0xf4>)
 80011c8:	2118      	movs	r1, #24
 80011ca:	2000      	movs	r0, #0
 80011cc:	f7ff fcde 	bl	8000b8c <ST7735_WriteString>
		  state = IDLE;
 80011d0:	2301      	movs	r3, #1
 80011d2:	73fb      	strb	r3, [r7, #15]
 80011d4:	e01f      	b.n	8001216 <StartDefaultTask+0xd2>
	  }
	  else if(state == IDLE)
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d11c      	bne.n	8001216 <StartDefaultTask+0xd2>
	  {
		  if(__HAL_TIM_GET_COUNTER(&htim6) - timer_val >= 2500)
 80011dc:	4b10      	ldr	r3, [pc, #64]	; (8001220 <StartDefaultTask+0xdc>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e2:	4a10      	ldr	r2, [pc, #64]	; (8001224 <StartDefaultTask+0xe0>)
 80011e4:	8812      	ldrh	r2, [r2, #0]
 80011e6:	1a9b      	subs	r3, r3, r2
 80011e8:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d910      	bls.n	8001212 <StartDefaultTask+0xce>
		  {
			  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 80011f0:	2102      	movs	r1, #2
 80011f2:	4812      	ldr	r0, [pc, #72]	; (800123c <StartDefaultTask+0xf8>)
 80011f4:	f004 ffa1 	bl	800613a <HAL_GPIO_TogglePin>
			  timer_val = __HAL_TIM_GET_COUNTER(&htim6);
 80011f8:	4b09      	ldr	r3, [pc, #36]	; (8001220 <StartDefaultTask+0xdc>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fe:	b29a      	uxth	r2, r3
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <StartDefaultTask+0xe0>)
 8001202:	801a      	strh	r2, [r3, #0]

			  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, myTxData);
 8001204:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <StartDefaultTask+0xfc>)
 8001206:	490f      	ldr	r1, [pc, #60]	; (8001244 <StartDefaultTask+0x100>)
 8001208:	480f      	ldr	r0, [pc, #60]	; (8001248 <StartDefaultTask+0x104>)
 800120a:	f003 fe83 	bl	8004f14 <HAL_FDCAN_AddMessageToTxFifoQ>
			  Toggle_CAN_Data();
 800120e:	f7ff fee5 	bl	8000fdc <Toggle_CAN_Data>
		  }
		  state = IDLE;
 8001212:	2301      	movs	r3, #1
 8001214:	73fb      	strb	r3, [r7, #15]
	  }

	  osDelay(1);
 8001216:	2001      	movs	r0, #1
 8001218:	f00a fac3 	bl	800b7a2 <osDelay>
	  if(state == INIT)
 800121c:	e7a5      	b.n	800116a <StartDefaultTask+0x26>
 800121e:	bf00      	nop
 8001220:	240044cc 	.word	0x240044cc
 8001224:	24004288 	.word	0x24004288
 8001228:	0801a948 	.word	0x0801a948
 800122c:	24000000 	.word	0x24000000
 8001230:	0801a958 	.word	0x0801a958
 8001234:	0801a968 	.word	0x0801a968
 8001238:	0801a974 	.word	0x0801a974
 800123c:	58021000 	.word	0x58021000
 8001240:	240042f4 	.word	0x240042f4
 8001244:	240043a4 	.word	0x240043a4
 8001248:	24004304 	.word	0x24004304

0800124c <Task02_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task02_Init */
void Task02_Init(void const * argument)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task02_Init */
  /* Infinite loop */
  for(;;)
  {
	  //print_to_serial("Im task2!");
	  osDelay(1000);
 8001254:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001258:	f00a faa3 	bl	800b7a2 <osDelay>
 800125c:	e7fa      	b.n	8001254 <Task02_Init+0x8>
	...

08001260 <MX_GPIO_Init>:
        * EXTI
     PA9   ------> USB_OTG_HS_VBUS
     PA10   ------> USB_OTG_HS_ID
*/
void MX_GPIO_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08c      	sub	sp, #48	; 0x30
 8001264:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001276:	4b8f      	ldr	r3, [pc, #572]	; (80014b4 <MX_GPIO_Init+0x254>)
 8001278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127c:	4a8d      	ldr	r2, [pc, #564]	; (80014b4 <MX_GPIO_Init+0x254>)
 800127e:	f043 0304 	orr.w	r3, r3, #4
 8001282:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001286:	4b8b      	ldr	r3, [pc, #556]	; (80014b4 <MX_GPIO_Init+0x254>)
 8001288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	61bb      	str	r3, [r7, #24]
 8001292:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001294:	4b87      	ldr	r3, [pc, #540]	; (80014b4 <MX_GPIO_Init+0x254>)
 8001296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129a:	4a86      	ldr	r2, [pc, #536]	; (80014b4 <MX_GPIO_Init+0x254>)
 800129c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012a4:	4b83      	ldr	r3, [pc, #524]	; (80014b4 <MX_GPIO_Init+0x254>)
 80012a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ae:	617b      	str	r3, [r7, #20]
 80012b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b2:	4b80      	ldr	r3, [pc, #512]	; (80014b4 <MX_GPIO_Init+0x254>)
 80012b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b8:	4a7e      	ldr	r2, [pc, #504]	; (80014b4 <MX_GPIO_Init+0x254>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012c2:	4b7c      	ldr	r3, [pc, #496]	; (80014b4 <MX_GPIO_Init+0x254>)
 80012c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d0:	4b78      	ldr	r3, [pc, #480]	; (80014b4 <MX_GPIO_Init+0x254>)
 80012d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d6:	4a77      	ldr	r2, [pc, #476]	; (80014b4 <MX_GPIO_Init+0x254>)
 80012d8:	f043 0302 	orr.w	r3, r3, #2
 80012dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012e0:	4b74      	ldr	r3, [pc, #464]	; (80014b4 <MX_GPIO_Init+0x254>)
 80012e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ee:	4b71      	ldr	r3, [pc, #452]	; (80014b4 <MX_GPIO_Init+0x254>)
 80012f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f4:	4a6f      	ldr	r2, [pc, #444]	; (80014b4 <MX_GPIO_Init+0x254>)
 80012f6:	f043 0308 	orr.w	r3, r3, #8
 80012fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012fe:	4b6d      	ldr	r3, [pc, #436]	; (80014b4 <MX_GPIO_Init+0x254>)
 8001300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001304:	f003 0308 	and.w	r3, r3, #8
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800130c:	4b69      	ldr	r3, [pc, #420]	; (80014b4 <MX_GPIO_Init+0x254>)
 800130e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001312:	4a68      	ldr	r2, [pc, #416]	; (80014b4 <MX_GPIO_Init+0x254>)
 8001314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001318:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800131c:	4b65      	ldr	r3, [pc, #404]	; (80014b4 <MX_GPIO_Init+0x254>)
 800131e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800132a:	4b62      	ldr	r3, [pc, #392]	; (80014b4 <MX_GPIO_Init+0x254>)
 800132c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001330:	4a60      	ldr	r2, [pc, #384]	; (80014b4 <MX_GPIO_Init+0x254>)
 8001332:	f043 0310 	orr.w	r3, r3, #16
 8001336:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800133a:	4b5e      	ldr	r3, [pc, #376]	; (80014b4 <MX_GPIO_Init+0x254>)
 800133c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001340:	f003 0310 	and.w	r3, r3, #16
 8001344:	603b      	str	r3, [r7, #0]
 8001346:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_3, GPIO_PIN_RESET);
 8001348:	2200      	movs	r2, #0
 800134a:	2109      	movs	r1, #9
 800134c:	485a      	ldr	r0, [pc, #360]	; (80014b8 <MX_GPIO_Init+0x258>)
 800134e:	f004 fedb 	bl	8006108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	2108      	movs	r1, #8
 8001356:	4859      	ldr	r0, [pc, #356]	; (80014bc <MX_GPIO_Init+0x25c>)
 8001358:	f004 fed6 	bl	8006108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	f244 0101 	movw	r1, #16385	; 0x4001
 8001362:	4857      	ldr	r0, [pc, #348]	; (80014c0 <MX_GPIO_Init+0x260>)
 8001364:	f004 fed0 	bl	8006108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800136e:	4855      	ldr	r0, [pc, #340]	; (80014c4 <MX_GPIO_Init+0x264>)
 8001370:	f004 feca 	bl	8006108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001374:	2200      	movs	r2, #0
 8001376:	2102      	movs	r1, #2
 8001378:	4853      	ldr	r0, [pc, #332]	; (80014c8 <MX_GPIO_Init+0x268>)
 800137a:	f004 fec5 	bl	8006108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800137e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001384:	2300      	movs	r3, #0
 8001386:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	4619      	mov	r1, r3
 8001392:	4849      	ldr	r0, [pc, #292]	; (80014b8 <MX_GPIO_Init+0x258>)
 8001394:	f004 fd10 	bl	8005db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001398:	2309      	movs	r3, #9
 800139a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139c:	2301      	movs	r3, #1
 800139e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a8:	f107 031c 	add.w	r3, r7, #28
 80013ac:	4619      	mov	r1, r3
 80013ae:	4842      	ldr	r0, [pc, #264]	; (80014b8 <MX_GPIO_Init+0x258>)
 80013b0:	f004 fd02 	bl	8005db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013b4:	2308      	movs	r3, #8
 80013b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b8:	2301      	movs	r3, #1
 80013ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c4:	f107 031c 	add.w	r3, r7, #28
 80013c8:	4619      	mov	r1, r3
 80013ca:	483c      	ldr	r0, [pc, #240]	; (80014bc <MX_GPIO_Init+0x25c>)
 80013cc:	f004 fcf4 	bl	8005db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80013d0:	f244 0301 	movw	r3, #16385	; 0x4001
 80013d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	4619      	mov	r1, r3
 80013e8:	4835      	ldr	r0, [pc, #212]	; (80014c0 <MX_GPIO_Init+0x260>)
 80013ea:	f004 fce5 	bl	8005db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80013ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f4:	2301      	movs	r3, #1
 80013f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001400:	f107 031c 	add.w	r3, r7, #28
 8001404:	4619      	mov	r1, r3
 8001406:	482f      	ldr	r0, [pc, #188]	; (80014c4 <MX_GPIO_Init+0x264>)
 8001408:	f004 fcd6 	bl	8005db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800140c:	2380      	movs	r3, #128	; 0x80
 800140e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001410:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001414:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800141a:	f107 031c 	add.w	r3, r7, #28
 800141e:	4619      	mov	r1, r3
 8001420:	482a      	ldr	r0, [pc, #168]	; (80014cc <MX_GPIO_Init+0x26c>)
 8001422:	f004 fcc9 	bl	8005db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001426:	f44f 7300 	mov.w	r3, #512	; 0x200
 800142a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800142c:	2300      	movs	r3, #0
 800142e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001434:	f107 031c 	add.w	r3, r7, #28
 8001438:	4619      	mov	r1, r3
 800143a:	4820      	ldr	r0, [pc, #128]	; (80014bc <MX_GPIO_Init+0x25c>)
 800143c:	f004 fcbc 	bl	8005db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001440:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001444:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	2302      	movs	r3, #2
 8001448:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001452:	230a      	movs	r3, #10
 8001454:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001456:	f107 031c 	add.w	r3, r7, #28
 800145a:	4619      	mov	r1, r3
 800145c:	4817      	ldr	r0, [pc, #92]	; (80014bc <MX_GPIO_Init+0x25c>)
 800145e:	f004 fcab 	bl	8005db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8001462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001466:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001468:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800146c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8001472:	f107 031c 	add.w	r3, r7, #28
 8001476:	4619      	mov	r1, r3
 8001478:	480f      	ldr	r0, [pc, #60]	; (80014b8 <MX_GPIO_Init+0x258>)
 800147a:	f004 fc9d 	bl	8005db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 800147e:	2302      	movs	r3, #2
 8001480:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001482:	2301      	movs	r3, #1
 8001484:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2300      	movs	r3, #0
 800148c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 800148e:	f107 031c 	add.w	r3, r7, #28
 8001492:	4619      	mov	r1, r3
 8001494:	480c      	ldr	r0, [pc, #48]	; (80014c8 <MX_GPIO_Init+0x268>)
 8001496:	f004 fc8f 	bl	8005db8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2105      	movs	r1, #5
 800149e:	2028      	movs	r0, #40	; 0x28
 80014a0:	f001 faec 	bl	8002a7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014a4:	2028      	movs	r0, #40	; 0x28
 80014a6:	f001 fb03 	bl	8002ab0 <HAL_NVIC_EnableIRQ>

}
 80014aa:	bf00      	nop
 80014ac:	3730      	adds	r7, #48	; 0x30
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	58024400 	.word	0x58024400
 80014b8:	58020800 	.word	0x58020800
 80014bc:	58020000 	.word	0x58020000
 80014c0:	58020400 	.word	0x58020400
 80014c4:	58020c00 	.word	0x58020c00
 80014c8:	58021000 	.word	0x58021000
 80014cc:	58021800 	.word	0x58021800

080014d0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af04      	add	r7, sp, #16
 80014d6:	4603      	mov	r3, r0
 80014d8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BTN1_Pin) /* Interrupt only for BTN1_Pin (1st button from left to right in the breadboard) */
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014e0:	d133      	bne.n	800154a <HAL_GPIO_EXTI_Callback+0x7a>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80014e2:	2101      	movs	r1, #1
 80014e4:	481b      	ldr	r0, [pc, #108]	; (8001554 <HAL_GPIO_EXTI_Callback+0x84>)
 80014e6:	f004 fe28 	bl	800613a <HAL_GPIO_TogglePin>

		if(globalCluster.btn1_flag == 0)
 80014ea:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <HAL_GPIO_EXTI_Callback+0x88>)
 80014ec:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d115      	bne.n	8001520 <HAL_GPIO_EXTI_Callback+0x50>
		{
			fillScreen(BLACK);
 80014f4:	2000      	movs	r0, #0
 80014f6:	f7ff f8fb 	bl	80006f0 <fillScreen>
			ST7735_WriteString(0, 0, "BTN1 ON!", Font_7x10, WHITE,BLACK);
 80014fa:	4b18      	ldr	r3, [pc, #96]	; (800155c <HAL_GPIO_EXTI_Callback+0x8c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	9202      	str	r2, [sp, #8]
 8001500:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001504:	9201      	str	r2, [sp, #4]
 8001506:	685a      	ldr	r2, [r3, #4]
 8001508:	9200      	str	r2, [sp, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a14      	ldr	r2, [pc, #80]	; (8001560 <HAL_GPIO_EXTI_Callback+0x90>)
 800150e:	2100      	movs	r1, #0
 8001510:	2000      	movs	r0, #0
 8001512:	f7ff fb3b 	bl	8000b8c <ST7735_WriteString>
			globalCluster.btn1_flag = 1;
 8001516:	4b10      	ldr	r3, [pc, #64]	; (8001558 <HAL_GPIO_EXTI_Callback+0x88>)
 8001518:	2201      	movs	r2, #1
 800151a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
			ST7735_WriteString(0, 0, "BTN1 OFF!", Font_7x10, BLACK,WHITE);
			globalCluster.btn1_flag = 0;
		}
	}

}
 800151e:	e014      	b.n	800154a <HAL_GPIO_EXTI_Callback+0x7a>
			fillScreen(BLACK);
 8001520:	2000      	movs	r0, #0
 8001522:	f7ff f8e5 	bl	80006f0 <fillScreen>
			ST7735_WriteString(0, 0, "BTN1 OFF!", Font_7x10, BLACK,WHITE);
 8001526:	4b0d      	ldr	r3, [pc, #52]	; (800155c <HAL_GPIO_EXTI_Callback+0x8c>)
 8001528:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800152c:	9202      	str	r2, [sp, #8]
 800152e:	2200      	movs	r2, #0
 8001530:	9201      	str	r2, [sp, #4]
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	9200      	str	r2, [sp, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <HAL_GPIO_EXTI_Callback+0x94>)
 800153a:	2100      	movs	r1, #0
 800153c:	2000      	movs	r0, #0
 800153e:	f7ff fb25 	bl	8000b8c <ST7735_WriteString>
			globalCluster.btn1_flag = 0;
 8001542:	4b05      	ldr	r3, [pc, #20]	; (8001558 <HAL_GPIO_EXTI_Callback+0x88>)
 8001544:	2200      	movs	r2, #0
 8001546:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	58020400 	.word	0x58020400
 8001558:	2400428c 	.word	0x2400428c
 800155c:	24000000 	.word	0x24000000
 8001560:	0801a980 	.word	0x0801a980
 8001564:	0801a98c 	.word	0x0801a98c

08001568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800156e:	f000 f8ff 	bl	8001770 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001572:	4b40      	ldr	r3, [pc, #256]	; (8001674 <main+0x10c>)
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d11b      	bne.n	80015b6 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800157e:	f3bf 8f4f 	dsb	sy
}
 8001582:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001584:	f3bf 8f6f 	isb	sy
}
 8001588:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800158a:	4b3a      	ldr	r3, [pc, #232]	; (8001674 <main+0x10c>)
 800158c:	2200      	movs	r2, #0
 800158e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001592:	f3bf 8f4f 	dsb	sy
}
 8001596:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001598:	f3bf 8f6f 	isb	sy
}
 800159c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800159e:	4b35      	ldr	r3, [pc, #212]	; (8001674 <main+0x10c>)
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	4a34      	ldr	r2, [pc, #208]	; (8001674 <main+0x10c>)
 80015a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80015aa:	f3bf 8f4f 	dsb	sy
}
 80015ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015b0:	f3bf 8f6f 	isb	sy
}
 80015b4:	e000      	b.n	80015b8 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80015b6:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80015b8:	4b2e      	ldr	r3, [pc, #184]	; (8001674 <main+0x10c>)
 80015ba:	695b      	ldr	r3, [r3, #20]
 80015bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d138      	bne.n	8001636 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80015c4:	4b2b      	ldr	r3, [pc, #172]	; (8001674 <main+0x10c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80015cc:	f3bf 8f4f 	dsb	sy
}
 80015d0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80015d2:	4b28      	ldr	r3, [pc, #160]	; (8001674 <main+0x10c>)
 80015d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015d8:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	0b5b      	lsrs	r3, r3, #13
 80015de:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80015e2:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	08db      	lsrs	r3, r3, #3
 80015e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015ec:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	015a      	lsls	r2, r3, #5
 80015f2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80015f6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80015fc:	491d      	ldr	r1, [pc, #116]	; (8001674 <main+0x10c>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	1e5a      	subs	r2, r3, #1
 8001608:	607a      	str	r2, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1ef      	bne.n	80015ee <main+0x86>
    } while(sets-- != 0U);
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	1e5a      	subs	r2, r3, #1
 8001612:	60ba      	str	r2, [r7, #8]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1e5      	bne.n	80015e4 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001618:	f3bf 8f4f 	dsb	sy
}
 800161c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800161e:	4b15      	ldr	r3, [pc, #84]	; (8001674 <main+0x10c>)
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	4a14      	ldr	r2, [pc, #80]	; (8001674 <main+0x10c>)
 8001624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001628:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800162a:	f3bf 8f4f 	dsb	sy
}
 800162e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001630:	f3bf 8f6f 	isb	sy
}
 8001634:	e000      	b.n	8001638 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001636:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001638:	f001 f8d4 	bl	80027e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800163c:	f000 f81c 	bl	8001678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001640:	f7ff fe0e 	bl	8001260 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001644:	f000 fe8a 	bl	800235c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8001648:	f000 ff3a 	bl	80024c0 <MX_USB_OTG_HS_USB_Init>
  MX_FDCAN1_Init();
 800164c:	f7ff fb7a 	bl	8000d44 <MX_FDCAN1_Init>
  MX_TIM6_Init();
 8001650:	f000 fe2a 	bl	80022a8 <MX_TIM6_Init>
  MX_SPI1_Init();
 8001654:	f000 f8d2 	bl	80017fc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  FDCAN1_MSG_config();
 8001658:	f7ff fc56 	bl	8000f08 <FDCAN1_MSG_config>
  ST7735_Init(0);
 800165c:	2000      	movs	r0, #0
 800165e:	f7ff f971 	bl	8000944 <ST7735_Init>
  fillScreen(BLACK);
 8001662:	2000      	movs	r0, #0
 8001664:	f7ff f844 	bl	80006f0 <fillScreen>
  //testAll();

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001668:	f7ff fd38 	bl	80010dc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800166c:	f00a f836 	bl	800b6dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001670:	e7fe      	b.n	8001670 <main+0x108>
 8001672:	bf00      	nop
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b09c      	sub	sp, #112	; 0x70
 800167c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800167e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001682:	224c      	movs	r2, #76	; 0x4c
 8001684:	2100      	movs	r1, #0
 8001686:	4618      	mov	r0, r3
 8001688:	f018 f971 	bl	801996e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	2220      	movs	r2, #32
 8001690:	2100      	movs	r1, #0
 8001692:	4618      	mov	r0, r3
 8001694:	f018 f96b 	bl	801996e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001698:	2002      	movs	r0, #2
 800169a:	f004 fd83 	bl	80061a4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800169e:	2300      	movs	r3, #0
 80016a0:	603b      	str	r3, [r7, #0]
 80016a2:	4b31      	ldr	r3, [pc, #196]	; (8001768 <SystemClock_Config+0xf0>)
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016aa:	4a2f      	ldr	r2, [pc, #188]	; (8001768 <SystemClock_Config+0xf0>)
 80016ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016b0:	6193      	str	r3, [r2, #24]
 80016b2:	4b2d      	ldr	r3, [pc, #180]	; (8001768 <SystemClock_Config+0xf0>)
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80016be:	bf00      	nop
 80016c0:	4b29      	ldr	r3, [pc, #164]	; (8001768 <SystemClock_Config+0xf0>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016cc:	d1f8      	bne.n	80016c0 <SystemClock_Config+0x48>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80016ce:	4b27      	ldr	r3, [pc, #156]	; (800176c <SystemClock_Config+0xf4>)
 80016d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d2:	f023 0303 	bic.w	r3, r3, #3
 80016d6:	4a25      	ldr	r2, [pc, #148]	; (800176c <SystemClock_Config+0xf4>)
 80016d8:	f043 0302 	orr.w	r3, r3, #2
 80016dc:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80016de:	2321      	movs	r3, #33	; 0x21
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016e2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80016e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80016e8:	2301      	movs	r3, #1
 80016ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ec:	2302      	movs	r3, #2
 80016ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016f0:	2302      	movs	r3, #2
 80016f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016f4:	2301      	movs	r3, #1
 80016f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80016f8:	2318      	movs	r3, #24
 80016fa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80016fc:	2301      	movs	r3, #1
 80016fe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001700:	2302      	movs	r3, #2
 8001702:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001704:	2302      	movs	r3, #2
 8001706:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001708:	230c      	movs	r3, #12
 800170a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800170c:	2300      	movs	r3, #0
 800170e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001718:	4618      	mov	r0, r3
 800171a:	f004 fd7d 	bl	8006218 <HAL_RCC_OscConfig>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001724:	f000 f864 	bl	80017f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001728:	233f      	movs	r3, #63	; 0x3f
 800172a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800172c:	2303      	movs	r3, #3
 800172e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001734:	2308      	movs	r3, #8
 8001736:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001738:	2340      	movs	r3, #64	; 0x40
 800173a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800173c:	2340      	movs	r3, #64	; 0x40
 800173e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001740:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001744:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001746:	2340      	movs	r3, #64	; 0x40
 8001748:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	2101      	movs	r1, #1
 800174e:	4618      	mov	r0, r3
 8001750:	f005 f90e 	bl	8006970 <HAL_RCC_ClockConfig>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800175a:	f000 f849 	bl	80017f0 <Error_Handler>
  }
}
 800175e:	bf00      	nop
 8001760:	3770      	adds	r7, #112	; 0x70
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	58024800 	.word	0x58024800
 800176c:	58024400 	.word	0x58024400

08001770 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001776:	463b      	mov	r3, r7
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001782:	f001 f9a3 	bl	8002acc <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001786:	2301      	movs	r3, #1
 8001788:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800178a:	2300      	movs	r3, #0
 800178c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 800178e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001792:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8001794:	230e      	movs	r3, #14
 8001796:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001798:	2300      	movs	r3, #0
 800179a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800179c:	2301      	movs	r3, #1
 800179e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80017a0:	2303      	movs	r3, #3
 80017a2:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80017a4:	2301      	movs	r3, #1
 80017a6:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80017a8:	2301      	movs	r3, #1
 80017aa:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80017b0:	2300      	movs	r3, #0
 80017b2:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80017b4:	463b      	mov	r3, r7
 80017b6:	4618      	mov	r0, r3
 80017b8:	f001 f9c0 	bl	8002b3c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80017bc:	2004      	movs	r0, #4
 80017be:	f001 f99d 	bl	8002afc <HAL_MPU_Enable>

}
 80017c2:	bf00      	nop
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a04      	ldr	r2, [pc, #16]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d101      	bne.n	80017e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017de:	f001 f83d 	bl	800285c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40010000 	.word	0x40010000

080017f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80017f4:	b672      	cpsid	i
}
 80017f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <Error_Handler+0x8>
	...

080017fc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001800:	4b27      	ldr	r3, [pc, #156]	; (80018a0 <MX_SPI1_Init+0xa4>)
 8001802:	4a28      	ldr	r2, [pc, #160]	; (80018a4 <MX_SPI1_Init+0xa8>)
 8001804:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001806:	4b26      	ldr	r3, [pc, #152]	; (80018a0 <MX_SPI1_Init+0xa4>)
 8001808:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800180c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800180e:	4b24      	ldr	r3, [pc, #144]	; (80018a0 <MX_SPI1_Init+0xa4>)
 8001810:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001814:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001816:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <MX_SPI1_Init+0xa4>)
 8001818:	2207      	movs	r2, #7
 800181a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800181c:	4b20      	ldr	r3, [pc, #128]	; (80018a0 <MX_SPI1_Init+0xa4>)
 800181e:	2200      	movs	r2, #0
 8001820:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001822:	4b1f      	ldr	r3, [pc, #124]	; (80018a0 <MX_SPI1_Init+0xa4>)
 8001824:	2200      	movs	r2, #0
 8001826:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001828:	4b1d      	ldr	r3, [pc, #116]	; (80018a0 <MX_SPI1_Init+0xa4>)
 800182a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800182e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001830:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <MX_SPI1_Init+0xa4>)
 8001832:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001836:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001838:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <MX_SPI1_Init+0xa4>)
 800183a:	2200      	movs	r2, #0
 800183c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800183e:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <MX_SPI1_Init+0xa4>)
 8001840:	2200      	movs	r2, #0
 8001842:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001844:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <MX_SPI1_Init+0xa4>)
 8001846:	2200      	movs	r2, #0
 8001848:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <MX_SPI1_Init+0xa4>)
 800184c:	2200      	movs	r2, #0
 800184e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001850:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <MX_SPI1_Init+0xa4>)
 8001852:	2200      	movs	r2, #0
 8001854:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001856:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <MX_SPI1_Init+0xa4>)
 8001858:	2200      	movs	r2, #0
 800185a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800185c:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <MX_SPI1_Init+0xa4>)
 800185e:	2200      	movs	r2, #0
 8001860:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001862:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <MX_SPI1_Init+0xa4>)
 8001864:	2200      	movs	r2, #0
 8001866:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001868:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <MX_SPI1_Init+0xa4>)
 800186a:	2200      	movs	r2, #0
 800186c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800186e:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <MX_SPI1_Init+0xa4>)
 8001870:	2200      	movs	r2, #0
 8001872:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001874:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <MX_SPI1_Init+0xa4>)
 8001876:	2200      	movs	r2, #0
 8001878:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <MX_SPI1_Init+0xa4>)
 800187c:	2200      	movs	r2, #0
 800187e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001880:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <MX_SPI1_Init+0xa4>)
 8001882:	2200      	movs	r2, #0
 8001884:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <MX_SPI1_Init+0xa4>)
 8001888:	2200      	movs	r2, #0
 800188a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800188c:	4804      	ldr	r0, [pc, #16]	; (80018a0 <MX_SPI1_Init+0xa4>)
 800188e:	f006 ff59 	bl	8008744 <HAL_SPI_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001898:	f7ff ffaa 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	240043f8 	.word	0x240043f8
 80018a4:	40013000 	.word	0x40013000

080018a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b0b8      	sub	sp, #224	; 0xe0
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018c0:	f107 0318 	add.w	r3, r7, #24
 80018c4:	22b4      	movs	r2, #180	; 0xb4
 80018c6:	2100      	movs	r1, #0
 80018c8:	4618      	mov	r0, r3
 80018ca:	f018 f850 	bl	801996e <memset>
  if(spiHandle->Instance==SPI1)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a36      	ldr	r2, [pc, #216]	; (80019ac <HAL_SPI_MspInit+0x104>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d165      	bne.n	80019a4 <HAL_SPI_MspInit+0xfc>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80018d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80018de:	2300      	movs	r3, #0
 80018e0:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018e2:	f107 0318 	add.w	r3, r7, #24
 80018e6:	4618      	mov	r0, r3
 80018e8:	f005 fc10 	bl	800710c <HAL_RCCEx_PeriphCLKConfig>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80018f2:	f7ff ff7d 	bl	80017f0 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018f6:	4b2e      	ldr	r3, [pc, #184]	; (80019b0 <HAL_SPI_MspInit+0x108>)
 80018f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018fc:	4a2c      	ldr	r2, [pc, #176]	; (80019b0 <HAL_SPI_MspInit+0x108>)
 80018fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001902:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001906:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <HAL_SPI_MspInit+0x108>)
 8001908:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800190c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001914:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <HAL_SPI_MspInit+0x108>)
 8001916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800191a:	4a25      	ldr	r2, [pc, #148]	; (80019b0 <HAL_SPI_MspInit+0x108>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001924:	4b22      	ldr	r3, [pc, #136]	; (80019b0 <HAL_SPI_MspInit+0x108>)
 8001926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001932:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <HAL_SPI_MspInit+0x108>)
 8001934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001938:	4a1d      	ldr	r2, [pc, #116]	; (80019b0 <HAL_SPI_MspInit+0x108>)
 800193a:	f043 0308 	orr.w	r3, r3, #8
 800193e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001942:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <HAL_SPI_MspInit+0x108>)
 8001944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001948:	f003 0308 	and.w	r3, r3, #8
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001950:	2320      	movs	r3, #32
 8001952:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001962:	2300      	movs	r3, #0
 8001964:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001968:	2305      	movs	r3, #5
 800196a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001972:	4619      	mov	r1, r3
 8001974:	480f      	ldr	r0, [pc, #60]	; (80019b4 <HAL_SPI_MspInit+0x10c>)
 8001976:	f004 fa1f 	bl	8005db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198c:	2300      	movs	r3, #0
 800198e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001992:	2305      	movs	r3, #5
 8001994:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001998:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800199c:	4619      	mov	r1, r3
 800199e:	4806      	ldr	r0, [pc, #24]	; (80019b8 <HAL_SPI_MspInit+0x110>)
 80019a0:	f004 fa0a 	bl	8005db8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80019a4:	bf00      	nop
 80019a6:	37e0      	adds	r7, #224	; 0xe0
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40013000 	.word	0x40013000
 80019b0:	58024400 	.word	0x58024400
 80019b4:	58020000 	.word	0x58020000
 80019b8:	58020c00 	.word	0x58020c00

080019bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c2:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <HAL_MspInit+0x38>)
 80019c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019c8:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <HAL_MspInit+0x38>)
 80019ca:	f043 0302 	orr.w	r3, r3, #2
 80019ce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80019d2:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <HAL_MspInit+0x38>)
 80019d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019e0:	2200      	movs	r2, #0
 80019e2:	210f      	movs	r1, #15
 80019e4:	f06f 0001 	mvn.w	r0, #1
 80019e8:	f001 f848 	bl	8002a7c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	58024400 	.word	0x58024400

080019f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08e      	sub	sp, #56	; 0x38
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b0f      	cmp	r3, #15
 8001a04:	d844      	bhi.n	8001a90 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8001a06:	2200      	movs	r2, #0
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	2019      	movs	r0, #25
 8001a0c:	f001 f836 	bl	8002a7c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001a10:	2019      	movs	r0, #25
 8001a12:	f001 f84d 	bl	8002ab0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001a16:	4a24      	ldr	r2, [pc, #144]	; (8001aa8 <HAL_InitTick+0xb0>)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001a1c:	4b23      	ldr	r3, [pc, #140]	; (8001aac <HAL_InitTick+0xb4>)
 8001a1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a22:	4a22      	ldr	r2, [pc, #136]	; (8001aac <HAL_InitTick+0xb4>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a2c:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <HAL_InitTick+0xb4>)
 8001a2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a3a:	f107 020c 	add.w	r2, r7, #12
 8001a3e:	f107 0310 	add.w	r3, r7, #16
 8001a42:	4611      	mov	r1, r2
 8001a44:	4618      	mov	r0, r3
 8001a46:	f005 fb1f 	bl	8007088 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001a4a:	f005 fb07 	bl	800705c <HAL_RCC_GetPCLK2Freq>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a56:	4a16      	ldr	r2, [pc, #88]	; (8001ab0 <HAL_InitTick+0xb8>)
 8001a58:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5c:	0c9b      	lsrs	r3, r3, #18
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <HAL_InitTick+0xbc>)
 8001a64:	4a14      	ldr	r2, [pc, #80]	; (8001ab8 <HAL_InitTick+0xc0>)
 8001a66:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <HAL_InitTick+0xbc>)
 8001a6a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a6e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001a70:	4a10      	ldr	r2, [pc, #64]	; (8001ab4 <HAL_InitTick+0xbc>)
 8001a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a74:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001a76:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <HAL_InitTick+0xbc>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a7c:	4b0d      	ldr	r3, [pc, #52]	; (8001ab4 <HAL_InitTick+0xbc>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001a82:	480c      	ldr	r0, [pc, #48]	; (8001ab4 <HAL_InitTick+0xbc>)
 8001a84:	f007 fa3f 	bl	8008f06 <HAL_TIM_Base_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d107      	bne.n	8001a9e <HAL_InitTick+0xa6>
 8001a8e:	e001      	b.n	8001a94 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e005      	b.n	8001aa0 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001a94:	4807      	ldr	r0, [pc, #28]	; (8001ab4 <HAL_InitTick+0xbc>)
 8001a96:	f007 fb0b 	bl	80090b0 <HAL_TIM_Base_Start_IT>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	e000      	b.n	8001aa0 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3738      	adds	r7, #56	; 0x38
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	24000010 	.word	0x24000010
 8001aac:	58024400 	.word	0x58024400
 8001ab0:	431bde83 	.word	0x431bde83
 8001ab4:	24004480 	.word	0x24004480
 8001ab8:	40010000 	.word	0x40010000

08001abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <NMI_Handler+0x4>

08001ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac6:	e7fe      	b.n	8001ac6 <HardFault_Handler+0x4>

08001ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <MemManage_Handler+0x4>

08001ace <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ad2:	e7fe      	b.n	8001ad2 <BusFault_Handler+0x4>

08001ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <UsageFault_Handler+0x4>

08001ada <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001aec:	4802      	ldr	r0, [pc, #8]	; (8001af8 <FDCAN1_IT0_IRQHandler+0x10>)
 8001aee:	f003 fc55 	bl	800539c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	24004304 	.word	0x24004304

08001afc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b00:	4802      	ldr	r0, [pc, #8]	; (8001b0c <TIM1_UP_IRQHandler+0x10>)
 8001b02:	f007 fb5b 	bl	80091bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	24004480 	.word	0x24004480

08001b10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FS_PWR_EN_Pin);
 8001b14:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b18:	f004 fb29 	bl	800616e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001b24:	4802      	ldr	r0, [pc, #8]	; (8001b30 <ETH_IRQHandler+0x10>)
 8001b26:	f001 fd27 	bl	8003578 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	240046e4 	.word	0x240046e4

08001b34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
	return 1;
 8001b38:	2301      	movs	r3, #1
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <_kill>:

int _kill(int pid, int sig)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b4e:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <_kill+0x20>)
 8001b50:	2216      	movs	r2, #22
 8001b52:	601a      	str	r2, [r3, #0]
	return -1;
 8001b54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	24007880 	.word	0x24007880

08001b68 <_exit>:

void _exit (int status)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b70:	f04f 31ff 	mov.w	r1, #4294967295
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff ffe5 	bl	8001b44 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b7a:	e7fe      	b.n	8001b7a <_exit+0x12>

08001b7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	e00a      	b.n	8001ba4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b8e:	f3af 8000 	nop.w
 8001b92:	4601      	mov	r1, r0
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	60ba      	str	r2, [r7, #8]
 8001b9a:	b2ca      	uxtb	r2, r1
 8001b9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	dbf0      	blt.n	8001b8e <_read+0x12>
	}

return len;
 8001bac:	687b      	ldr	r3, [r7, #4]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b086      	sub	sp, #24
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	60f8      	str	r0, [r7, #12]
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	e009      	b.n	8001bdc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	60ba      	str	r2, [r7, #8]
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	dbf1      	blt.n	8001bc8 <_write+0x12>
	}
	return len;
 8001be4:	687b      	ldr	r3, [r7, #4]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <_close>:

int _close(int file)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
	return -1;
 8001bf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c16:	605a      	str	r2, [r3, #4]
	return 0;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <_isatty>:

int _isatty(int file)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
	return 1;
 8001c2e:	2301      	movs	r3, #1
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
	return 0;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b087      	sub	sp, #28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c60:	4a14      	ldr	r2, [pc, #80]	; (8001cb4 <_sbrk+0x5c>)
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <_sbrk+0x60>)
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c6c:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <_sbrk+0x64>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d102      	bne.n	8001c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c74:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <_sbrk+0x64>)
 8001c76:	4a12      	ldr	r2, [pc, #72]	; (8001cc0 <_sbrk+0x68>)
 8001c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <_sbrk+0x64>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d205      	bcs.n	8001c94 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001c88:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <_sbrk+0x6c>)
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c92:	e009      	b.n	8001ca8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <_sbrk+0x64>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c9a:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <_sbrk+0x64>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	4a06      	ldr	r2, [pc, #24]	; (8001cbc <_sbrk+0x64>)
 8001ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	371c      	adds	r7, #28
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	24050000 	.word	0x24050000
 8001cb8:	00000400 	.word	0x00000400
 8001cbc:	24000370 	.word	0x24000370
 8001cc0:	24007898 	.word	0x24007898
 8001cc4:	24007880 	.word	0x24007880

08001cc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ccc:	4b34      	ldr	r3, [pc, #208]	; (8001da0 <SystemInit+0xd8>)
 8001cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd2:	4a33      	ldr	r2, [pc, #204]	; (8001da0 <SystemInit+0xd8>)
 8001cd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001cdc:	4b31      	ldr	r3, [pc, #196]	; (8001da4 <SystemInit+0xdc>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 030f 	and.w	r3, r3, #15
 8001ce4:	2b06      	cmp	r3, #6
 8001ce6:	d807      	bhi.n	8001cf8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ce8:	4b2e      	ldr	r3, [pc, #184]	; (8001da4 <SystemInit+0xdc>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f023 030f 	bic.w	r3, r3, #15
 8001cf0:	4a2c      	ldr	r2, [pc, #176]	; (8001da4 <SystemInit+0xdc>)
 8001cf2:	f043 0307 	orr.w	r3, r3, #7
 8001cf6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001cf8:	4b2b      	ldr	r3, [pc, #172]	; (8001da8 <SystemInit+0xe0>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a2a      	ldr	r2, [pc, #168]	; (8001da8 <SystemInit+0xe0>)
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d04:	4b28      	ldr	r3, [pc, #160]	; (8001da8 <SystemInit+0xe0>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d0a:	4b27      	ldr	r3, [pc, #156]	; (8001da8 <SystemInit+0xe0>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	4926      	ldr	r1, [pc, #152]	; (8001da8 <SystemInit+0xe0>)
 8001d10:	4b26      	ldr	r3, [pc, #152]	; (8001dac <SystemInit+0xe4>)
 8001d12:	4013      	ands	r3, r2
 8001d14:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d16:	4b23      	ldr	r3, [pc, #140]	; (8001da4 <SystemInit+0xdc>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d007      	beq.n	8001d32 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d22:	4b20      	ldr	r3, [pc, #128]	; (8001da4 <SystemInit+0xdc>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f023 030f 	bic.w	r3, r3, #15
 8001d2a:	4a1e      	ldr	r2, [pc, #120]	; (8001da4 <SystemInit+0xdc>)
 8001d2c:	f043 0307 	orr.w	r3, r3, #7
 8001d30:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001d32:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <SystemInit+0xe0>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001d38:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <SystemInit+0xe0>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001d3e:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <SystemInit+0xe0>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001d44:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <SystemInit+0xe0>)
 8001d46:	4a1a      	ldr	r2, [pc, #104]	; (8001db0 <SystemInit+0xe8>)
 8001d48:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001d4a:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <SystemInit+0xe0>)
 8001d4c:	4a19      	ldr	r2, [pc, #100]	; (8001db4 <SystemInit+0xec>)
 8001d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001d50:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <SystemInit+0xe0>)
 8001d52:	4a19      	ldr	r2, [pc, #100]	; (8001db8 <SystemInit+0xf0>)
 8001d54:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001d56:	4b14      	ldr	r3, [pc, #80]	; (8001da8 <SystemInit+0xe0>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001d5c:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <SystemInit+0xe0>)
 8001d5e:	4a16      	ldr	r2, [pc, #88]	; (8001db8 <SystemInit+0xf0>)
 8001d60:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001d62:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <SystemInit+0xe0>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001d68:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <SystemInit+0xe0>)
 8001d6a:	4a13      	ldr	r2, [pc, #76]	; (8001db8 <SystemInit+0xf0>)
 8001d6c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <SystemInit+0xe0>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <SystemInit+0xe0>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a0b      	ldr	r2, [pc, #44]	; (8001da8 <SystemInit+0xe0>)
 8001d7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d7e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d80:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <SystemInit+0xe0>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001d86:	4b0d      	ldr	r3, [pc, #52]	; (8001dbc <SystemInit+0xf4>)
 8001d88:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001d8c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d8e:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <SystemInit+0xd8>)
 8001d90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d94:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001d96:	bf00      	nop
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	e000ed00 	.word	0xe000ed00
 8001da4:	52002000 	.word	0x52002000
 8001da8:	58024400 	.word	0x58024400
 8001dac:	eaf6ed7f 	.word	0xeaf6ed7f
 8001db0:	02020200 	.word	0x02020200
 8001db4:	01ff0000 	.word	0x01ff0000
 8001db8:	01010280 	.word	0x01010280
 8001dbc:	52004000 	.word	0x52004000

08001dc0 <tcp_server_init>:
   3. Listen for the  incoming requests by the client
   4. Accept the Request, and now the server is ready for the data transfer
 */

void tcp_server_init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;

	tpcb = tcp_new();
 8001dc6:	f010 f831 	bl	8011e2c <tcp_new>
 8001dca:	60f8      	str	r0, [r7, #12]

	err_t err;

	/* 2. bind _pcb to port 7 ( protocol) */
	ip_addr_t myIPADDR;
	IP_ADDR4(&myIPADDR, 192, 168, 1, 200);
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <tcp_server_init+0x4c>)
 8001dce:	607b      	str	r3, [r7, #4]
	err = tcp_bind(tpcb, &myIPADDR, 10);
 8001dd0:	1d3b      	adds	r3, r7, #4
 8001dd2:	220a      	movs	r2, #10
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f00e ff84 	bl	8010ce4 <tcp_bind>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	72fb      	strb	r3, [r7, #11]

	if (err == ERR_OK)
 8001de0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d109      	bne.n	8001dfc <tcp_server_init+0x3c>
	{
		/* 3. start tcp listening for _pcb */
		tpcb = tcp_listen(tpcb);
 8001de8:	21ff      	movs	r1, #255	; 0xff
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f00f f832 	bl	8010e54 <tcp_listen_with_backlog>
 8001df0:	60f8      	str	r0, [r7, #12]

		/* 4. initialize LwIP tcp_accept callback function */
		tcp_accept(tpcb, tcp_server_accept);
 8001df2:	4907      	ldr	r1, [pc, #28]	; (8001e10 <tcp_server_init+0x50>)
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f010 f899 	bl	8011f2c <tcp_accept>
	else
	{
		/* deallocate the pcb */
		memp_free(MEMP_TCP_PCB, tpcb);
	}
}
 8001dfa:	e003      	b.n	8001e04 <tcp_server_init+0x44>
		memp_free(MEMP_TCP_PCB, tpcb);
 8001dfc:	68f9      	ldr	r1, [r7, #12]
 8001dfe:	2001      	movs	r0, #1
 8001e00:	f00d fb1c 	bl	800f43c <memp_free>
}
 8001e04:	bf00      	nop
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	c801a8c0 	.word	0xc801a8c0
 8001e10:	08001e15 	.word	0x08001e15

08001e14 <tcp_server_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8001e22:	2101      	movs	r1, #1
 8001e24:	68b8      	ldr	r0, [r7, #8]
 8001e26:	f00f fe0f 	bl	8011a48 <tcp_setprio>

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_server_struct *)mem_malloc(sizeof(struct tcp_server_struct));
 8001e2a:	200c      	movs	r0, #12
 8001e2c:	f00d f8ec 	bl	800f008 <mem_malloc>
 8001e30:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d01f      	beq.n	8001e78 <tcp_server_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	2200      	movs	r2, #0
 8001e48:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8001e50:	6939      	ldr	r1, [r7, #16]
 8001e52:	68b8      	ldr	r0, [r7, #8]
 8001e54:	f00f fff2 	bl	8011e3c <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_server_recv);
 8001e58:	490d      	ldr	r1, [pc, #52]	; (8001e90 <tcp_server_accept+0x7c>)
 8001e5a:	68b8      	ldr	r0, [r7, #8]
 8001e5c:	f010 f800 	bl	8011e60 <tcp_recv>

    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_server_error);
 8001e60:	490c      	ldr	r1, [pc, #48]	; (8001e94 <tcp_server_accept+0x80>)
 8001e62:	68b8      	ldr	r0, [r7, #8]
 8001e64:	f010 f840 	bl	8011ee8 <tcp_err>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_server_poll, 0);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	490b      	ldr	r1, [pc, #44]	; (8001e98 <tcp_server_accept+0x84>)
 8001e6c:	68b8      	ldr	r0, [r7, #8]
 8001e6e:	f010 f875 	bl	8011f5c <tcp_poll>

    ret_err = ERR_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	75fb      	strb	r3, [r7, #23]
 8001e76:	e005      	b.n	8001e84 <tcp_server_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_server_connection_close(newpcb, es);
 8001e78:	6939      	ldr	r1, [r7, #16]
 8001e7a:	68b8      	ldr	r0, [r7, #8]
 8001e7c:	f000 f965 	bl	800214a <tcp_server_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8001e80:	23ff      	movs	r3, #255	; 0xff
 8001e82:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8001e84:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	08001e9d 	.word	0x08001e9d
 8001e94:	08001fd1 	.word	0x08001fd1
 8001e98:	08001ff5 	.word	0x08001ff5

08001e9c <tcp_server_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b088      	sub	sp, #32
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
 8001ea8:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d105      	bne.n	8001ebc <tcp_server_recv+0x20>
 8001eb0:	4b43      	ldr	r3, [pc, #268]	; (8001fc0 <tcp_server_recv+0x124>)
 8001eb2:	22c3      	movs	r2, #195	; 0xc3
 8001eb4:	4943      	ldr	r1, [pc, #268]	; (8001fc4 <tcp_server_recv+0x128>)
 8001eb6:	4844      	ldr	r0, [pc, #272]	; (8001fc8 <tcp_server_recv+0x12c>)
 8001eb8:	f017 fdbc 	bl	8019a34 <iprintf>

  es = (struct tcp_server_struct *)arg;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	61bb      	str	r3, [r7, #24]

  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d116      	bne.n	8001ef4 <tcp_server_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	2203      	movs	r2, #3
 8001eca:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d104      	bne.n	8001ede <tcp_server_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_server_connection_close(tpcb, es);
 8001ed4:	69b9      	ldr	r1, [r7, #24]
 8001ed6:	68b8      	ldr	r0, [r7, #8]
 8001ed8:	f000 f937 	bl	800214a <tcp_server_connection_close>
 8001edc:	e007      	b.n	8001eee <tcp_server_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_server_sent);
 8001ede:	493b      	ldr	r1, [pc, #236]	; (8001fcc <tcp_server_recv+0x130>)
 8001ee0:	68b8      	ldr	r0, [r7, #8]
 8001ee2:	f00f ffdf 	bl	8011ea4 <tcp_sent>

      /* send remaining data*/
      tcp_server_send(tpcb, es);
 8001ee6:	69b9      	ldr	r1, [r7, #24]
 8001ee8:	68b8      	ldr	r0, [r7, #8]
 8001eea:	f000 f8db 	bl	80020a4 <tcp_server_send>
    }
    ret_err = ERR_OK;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	77fb      	strb	r3, [r7, #31]
 8001ef2:	e05f      	b.n	8001fb4 <tcp_server_recv+0x118>
  }
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8001ef4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00b      	beq.n	8001f14 <tcp_server_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d005      	beq.n	8001f0e <tcp_server_recv+0x72>
    {
      es->p = NULL;
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f00e f93b 	bl	8010184 <pbuf_free>
    }
    ret_err = err;
 8001f0e:	78fb      	ldrb	r3, [r7, #3]
 8001f10:	77fb      	strb	r3, [r7, #31]
 8001f12:	e04f      	b.n	8001fb4 <tcp_server_recv+0x118>
  }
  else if(es->state == ES_ACCEPTED)
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d110      	bne.n	8001f3e <tcp_server_recv+0xa2>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	701a      	strb	r2, [r3, #0]

    /* store reference to incoming pbuf (chain) */
    es->p = p;
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	609a      	str	r2, [r3, #8]

    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_server_sent);
 8001f28:	4928      	ldr	r1, [pc, #160]	; (8001fcc <tcp_server_recv+0x130>)
 8001f2a:	68b8      	ldr	r0, [r7, #8]
 8001f2c:	f00f ffba 	bl	8011ea4 <tcp_sent>

    /* handle the received data */
    tcp_server_handle(tpcb, es);
 8001f30:	69b9      	ldr	r1, [r7, #24]
 8001f32:	68b8      	ldr	r0, [r7, #8]
 8001f34:	f000 f930 	bl	8002198 <tcp_server_handle>

    ret_err = ERR_OK;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	77fb      	strb	r3, [r7, #31]
 8001f3c:	e03a      	b.n	8001fb4 <tcp_server_recv+0x118>
  }
  else if (es->state == ES_RECEIVED)
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d115      	bne.n	8001f72 <tcp_server_recv+0xd6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d107      	bne.n	8001f5e <tcp_server_recv+0xc2>
    {
      es->p = p;
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	609a      	str	r2, [r3, #8]

      /* handle the received data */
      tcp_server_handle(tpcb, es);
 8001f54:	69b9      	ldr	r1, [r7, #24]
 8001f56:	68b8      	ldr	r0, [r7, #8]
 8001f58:	f000 f91e 	bl	8002198 <tcp_server_handle>
 8001f5c:	e006      	b.n	8001f6c <tcp_server_recv+0xd0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	6978      	ldr	r0, [r7, #20]
 8001f68:	f00e fa30 	bl	80103cc <pbuf_chain>
    }
    ret_err = ERR_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	77fb      	strb	r3, [r7, #31]
 8001f70:	e020      	b.n	8001fb4 <tcp_server_recv+0x118>
  }
  else if(es->state == ES_CLOSING)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b03      	cmp	r3, #3
 8001f78:	d10e      	bne.n	8001f98 <tcp_server_recv+0xfc>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	891b      	ldrh	r3, [r3, #8]
 8001f7e:	4619      	mov	r1, r3
 8001f80:	68b8      	ldr	r0, [r7, #8]
 8001f82:	f00f f87d 	bl	8011080 <tcp_recved>
    es->p = NULL;
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f00e f8f9 	bl	8010184 <pbuf_free>
    ret_err = ERR_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	77fb      	strb	r3, [r7, #31]
 8001f96:	e00d      	b.n	8001fb4 <tcp_server_recv+0x118>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	891b      	ldrh	r3, [r3, #8]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	68b8      	ldr	r0, [r7, #8]
 8001fa0:	f00f f86e 	bl	8011080 <tcp_recved>
    es->p = NULL;
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f00e f8ea 	bl	8010184 <pbuf_free>
    ret_err = ERR_OK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8001fb4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3720      	adds	r7, #32
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	0801a998 	.word	0x0801a998
 8001fc4:	0801a9b4 	.word	0x0801a9b4
 8001fc8:	0801a9c0 	.word	0x0801a9c0
 8001fcc:	08002055 	.word	0x08002055

08001fd0 <tcp_server_error>:
  * @param  arg: pointer on argument parameter
  * @param  err: not used
  * @retval None
  */
static void tcp_server_error(void *arg, err_t err)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_server_struct *)arg;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d002      	beq.n	8001fec <tcp_server_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f00c fe74 	bl	800ecd4 <mem_free>
  }
}
 8001fec:	bf00      	nop
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <tcp_server_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_server_struct *es;

  es = (struct tcp_server_struct *)arg;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d017      	beq.n	8002038 <tcp_server_poll+0x44>
  {
    if (es->p != NULL)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d008      	beq.n	8002022 <tcp_server_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_server_sent);
 8002010:	490f      	ldr	r1, [pc, #60]	; (8002050 <tcp_server_poll+0x5c>)
 8002012:	6838      	ldr	r0, [r7, #0]
 8002014:	f00f ff46 	bl	8011ea4 <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_server_send(tpcb, es);
 8002018:	68b9      	ldr	r1, [r7, #8]
 800201a:	6838      	ldr	r0, [r7, #0]
 800201c:	f000 f842 	bl	80020a4 <tcp_server_send>
 8002020:	e007      	b.n	8002032 <tcp_server_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b03      	cmp	r3, #3
 8002028:	d103      	bne.n	8002032 <tcp_server_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_server_connection_close(tpcb, es);
 800202a:	68b9      	ldr	r1, [r7, #8]
 800202c:	6838      	ldr	r0, [r7, #0]
 800202e:	f000 f88c 	bl	800214a <tcp_server_connection_close>
      }
    }
    ret_err = ERR_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	73fb      	strb	r3, [r7, #15]
 8002036:	e004      	b.n	8002042 <tcp_server_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8002038:	6838      	ldr	r0, [r7, #0]
 800203a:	f00e fe47 	bl	8010ccc <tcp_abort>
    ret_err = ERR_ABRT;
 800203e:	23f3      	movs	r3, #243	; 0xf3
 8002040:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8002042:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	08002055 	.word	0x08002055

08002054 <tcp_server_sent>:
  *         is received from remote host for sent data)
  * @param  None
  * @retval None
  */
static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	4613      	mov	r3, r2
 8002060:	80fb      	strh	r3, [r7, #6]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_server_struct *)arg;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	2200      	movs	r2, #0
 800206a:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d008      	beq.n	8002086 <tcp_server_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_server_sent);
 8002074:	490a      	ldr	r1, [pc, #40]	; (80020a0 <tcp_server_sent+0x4c>)
 8002076:	68b8      	ldr	r0, [r7, #8]
 8002078:	f00f ff14 	bl	8011ea4 <tcp_sent>
    tcp_server_send(tpcb, es);
 800207c:	6979      	ldr	r1, [r7, #20]
 800207e:	68b8      	ldr	r0, [r7, #8]
 8002080:	f000 f810 	bl	80020a4 <tcp_server_send>
 8002084:	e007      	b.n	8002096 <tcp_server_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b03      	cmp	r3, #3
 800208c:	d103      	bne.n	8002096 <tcp_server_sent+0x42>
      tcp_server_connection_close(tpcb, es);
 800208e:	6979      	ldr	r1, [r7, #20]
 8002090:	68b8      	ldr	r0, [r7, #8]
 8002092:	f000 f85a 	bl	800214a <tcp_server_connection_close>
  }
  return ERR_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	08002055 	.word	0x08002055

080020a4 <tcp_server_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 80020ae:	2300      	movs	r3, #0
 80020b0:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 80020b2:	e036      	b.n	8002122 <tcp_server_send+0x7e>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	6859      	ldr	r1, [r3, #4]
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	895a      	ldrh	r2, [r3, #10]
 80020c2:	2301      	movs	r3, #1
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f012 fdf7 	bl	8014cb8 <tcp_write>
 80020ca:	4603      	mov	r3, r0
 80020cc:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 80020ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d11d      	bne.n	8002112 <tcp_server_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	895b      	ldrh	r3, [r3, #10]
 80020da:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d004      	beq.n	80020f6 <tcp_server_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f00e f8ed 	bl	80102d0 <pbuf_ref>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 80020f6:	6938      	ldr	r0, [r7, #16]
 80020f8:	f00e f844 	bl	8010184 <pbuf_free>
 80020fc:	4603      	mov	r3, r0
 80020fe:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8002100:	7b7b      	ldrb	r3, [r7, #13]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f7      	beq.n	80020f6 <tcp_server_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 8002106:	89fb      	ldrh	r3, [r7, #14]
 8002108:	4619      	mov	r1, r3
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f00e ffb8 	bl	8011080 <tcp_recved>
 8002110:	e007      	b.n	8002122 <tcp_server_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 8002112:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800211a:	d102      	bne.n	8002122 <tcp_server_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8002122:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10b      	bne.n	8002142 <tcp_server_send+0x9e>
         (es->p != NULL) &&
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 800212e:	2b00      	cmp	r3, #0
 8002130:	d007      	beq.n	8002142 <tcp_server_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	895a      	ldrh	r2, [r3, #10]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) &&
 800213e:	429a      	cmp	r2, r3
 8002140:	d9b8      	bls.n	80020b4 <tcp_server_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8002142:	bf00      	nop
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <tcp_server_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8002154:	2100      	movs	r1, #0
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f00f fe70 	bl	8011e3c <tcp_arg>
  tcp_sent(tpcb, NULL);
 800215c:	2100      	movs	r1, #0
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f00f fea0 	bl	8011ea4 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8002164:	2100      	movs	r1, #0
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f00f fe7a 	bl	8011e60 <tcp_recv>
  tcp_err(tpcb, NULL);
 800216c:	2100      	movs	r1, #0
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f00f feba 	bl	8011ee8 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8002174:	2200      	movs	r2, #0
 8002176:	2100      	movs	r1, #0
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f00f feef 	bl	8011f5c <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d002      	beq.n	800218a <tcp_server_connection_close+0x40>
  {
    mem_free(es);
 8002184:	6838      	ldr	r0, [r7, #0]
 8002186:	f00c fda5 	bl	800ecd4 <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f00e fcb4 	bl	8010af8 <tcp_close>
}
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <tcp_server_handle>:

/* Handle the incoming TCP Data */

static void tcp_server_handle(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8002198:	b5b0      	push	{r4, r5, r7, lr}
 800219a:	b0a0      	sub	sp, #128	; 0x80
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
	struct tcp_server_struct *esTx = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	67fb      	str	r3, [r7, #124]	; 0x7c

	/* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	673b      	str	r3, [r7, #112]	; 0x70
	uint16_t inPort = tpcb->remote_port;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	8b1b      	ldrh	r3, [r3, #24]
 80021b0:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
 80021b4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80021b8:	4618      	mov	r0, r3
 80021ba:	f016 f9e9 	bl	8018590 <ip4addr_ntoa>
 80021be:	6778      	str	r0, [r7, #116]	; 0x74

	esTx->state = es->state;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	781a      	ldrb	r2, [r3, #0]
 80021c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021c6:	701a      	strb	r2, [r3, #0]
	esTx->pcb = es->pcb;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021ce:	605a      	str	r2, [r3, #4]
	esTx->p = es->p;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021d6:	609a      	str	r2, [r3, #8]

	char buf[100];
	memset (buf, '\0', 100);
 80021d8:	f107 030c 	add.w	r3, r7, #12
 80021dc:	2264      	movs	r2, #100	; 0x64
 80021de:	2100      	movs	r1, #0
 80021e0:	4618      	mov	r0, r3
 80021e2:	f017 fbc4 	bl	801996e <memset>

	strncpy(buf, (char *)es->p->payload, es->p->tot_len);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	6859      	ldr	r1, [r3, #4]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	891b      	ldrh	r3, [r3, #8]
 80021f2:	461a      	mov	r2, r3
 80021f4:	f107 030c 	add.w	r3, r7, #12
 80021f8:	4618      	mov	r0, r3
 80021fa:	f017 fd38 	bl	8019c6e <strncpy>
	strncpy(globalCluster.myString, (char *)es->p->payload, es->p->tot_len);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	6859      	ldr	r1, [r3, #4]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	891b      	ldrh	r3, [r3, #8]
 800220a:	461a      	mov	r2, r3
 800220c:	4824      	ldr	r0, [pc, #144]	; (80022a0 <tcp_server_handle+0x108>)
 800220e:	f017 fd2e 	bl	8019c6e <strncpy>
	strcat (buf, "+ Hello from TCP SERVER\n");
 8002212:	f107 030c 	add.w	r3, r7, #12
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe f87a 	bl	8000310 <strlen>
 800221c:	4603      	mov	r3, r0
 800221e:	461a      	mov	r2, r3
 8002220:	f107 030c 	add.w	r3, r7, #12
 8002224:	4413      	add	r3, r2
 8002226:	4a1f      	ldr	r2, [pc, #124]	; (80022a4 <tcp_server_handle+0x10c>)
 8002228:	461d      	mov	r5, r3
 800222a:	4614      	mov	r4, r2
 800222c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800222e:	6028      	str	r0, [r5, #0]
 8002230:	6069      	str	r1, [r5, #4]
 8002232:	60aa      	str	r2, [r5, #8]
 8002234:	60eb      	str	r3, [r5, #12]
 8002236:	cc03      	ldmia	r4!, {r0, r1}
 8002238:	6128      	str	r0, [r5, #16]
 800223a:	6169      	str	r1, [r5, #20]
 800223c:	7823      	ldrb	r3, [r4, #0]
 800223e:	762b      	strb	r3, [r5, #24]


	esTx->p->payload = (void *)buf;
 8002240:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f107 020c 	add.w	r2, r7, #12
 8002248:	605a      	str	r2, [r3, #4]
	esTx->p->tot_len = (es->p->tot_len - es->p->len) + strlen (buf);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	891a      	ldrh	r2, [r3, #8]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	895b      	ldrh	r3, [r3, #10]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	b29c      	uxth	r4, r3
 800225a:	f107 030c 	add.w	r3, r7, #12
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe f856 	bl	8000310 <strlen>
 8002264:	4603      	mov	r3, r0
 8002266:	b29a      	uxth	r2, r3
 8002268:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	4422      	add	r2, r4
 800226e:	b292      	uxth	r2, r2
 8002270:	811a      	strh	r2, [r3, #8]
	esTx->p->len = strlen (buf);
 8002272:	f107 030c 	add.w	r3, r7, #12
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe f84a 	bl	8000310 <strlen>
 800227c:	4602      	mov	r2, r0
 800227e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	b292      	uxth	r2, r2
 8002284:	815a      	strh	r2, [r3, #10]

	tcp_server_send(tpcb, esTx);
 8002286:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff ff0b 	bl	80020a4 <tcp_server_send>

	pbuf_free(es->p);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	4618      	mov	r0, r3
 8002294:	f00d ff76 	bl	8010184 <pbuf_free>

}
 8002298:	bf00      	nop
 800229a:	3780      	adds	r7, #128	; 0x80
 800229c:	46bd      	mov	sp, r7
 800229e:	bdb0      	pop	{r4, r5, r7, pc}
 80022a0:	2400428c 	.word	0x2400428c
 80022a4:	0801a9e8 	.word	0x0801a9e8

080022a8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ae:	1d3b      	adds	r3, r7, #4
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80022b8:	4b15      	ldr	r3, [pc, #84]	; (8002310 <MX_TIM6_Init+0x68>)
 80022ba:	4a16      	ldr	r2, [pc, #88]	; (8002314 <MX_TIM6_Init+0x6c>)
 80022bc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000 - 1;
 80022be:	4b14      	ldr	r3, [pc, #80]	; (8002310 <MX_TIM6_Init+0x68>)
 80022c0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80022c4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c6:	4b12      	ldr	r3, [pc, #72]	; (8002310 <MX_TIM6_Init+0x68>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80022cc:	4b10      	ldr	r3, [pc, #64]	; (8002310 <MX_TIM6_Init+0x68>)
 80022ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022d2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d4:	4b0e      	ldr	r3, [pc, #56]	; (8002310 <MX_TIM6_Init+0x68>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80022da:	480d      	ldr	r0, [pc, #52]	; (8002310 <MX_TIM6_Init+0x68>)
 80022dc:	f006 fe13 	bl	8008f06 <HAL_TIM_Base_Init>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80022e6:	f7ff fa83 	bl	80017f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ea:	2300      	movs	r3, #0
 80022ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ee:	2300      	movs	r3, #0
 80022f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80022f2:	1d3b      	adds	r3, r7, #4
 80022f4:	4619      	mov	r1, r3
 80022f6:	4806      	ldr	r0, [pc, #24]	; (8002310 <MX_TIM6_Init+0x68>)
 80022f8:	f007 f94e 	bl	8009598 <HAL_TIMEx_MasterConfigSynchronization>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002302:	f7ff fa75 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002306:	bf00      	nop
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	240044cc 	.word	0x240044cc
 8002314:	40001000 	.word	0x40001000

08002318 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a0b      	ldr	r2, [pc, #44]	; (8002354 <HAL_TIM_Base_MspInit+0x3c>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d10e      	bne.n	8002348 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800232a:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <HAL_TIM_Base_MspInit+0x40>)
 800232c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002330:	4a09      	ldr	r2, [pc, #36]	; (8002358 <HAL_TIM_Base_MspInit+0x40>)
 8002332:	f043 0310 	orr.w	r3, r3, #16
 8002336:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800233a:	4b07      	ldr	r3, [pc, #28]	; (8002358 <HAL_TIM_Base_MspInit+0x40>)
 800233c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002340:	f003 0310 	and.w	r3, r3, #16
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	40001000 	.word	0x40001000
 8002358:	58024400 	.word	0x58024400

0800235c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002360:	4b22      	ldr	r3, [pc, #136]	; (80023ec <MX_USART3_UART_Init+0x90>)
 8002362:	4a23      	ldr	r2, [pc, #140]	; (80023f0 <MX_USART3_UART_Init+0x94>)
 8002364:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002366:	4b21      	ldr	r3, [pc, #132]	; (80023ec <MX_USART3_UART_Init+0x90>)
 8002368:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800236c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800236e:	4b1f      	ldr	r3, [pc, #124]	; (80023ec <MX_USART3_UART_Init+0x90>)
 8002370:	2200      	movs	r2, #0
 8002372:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002374:	4b1d      	ldr	r3, [pc, #116]	; (80023ec <MX_USART3_UART_Init+0x90>)
 8002376:	2200      	movs	r2, #0
 8002378:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800237a:	4b1c      	ldr	r3, [pc, #112]	; (80023ec <MX_USART3_UART_Init+0x90>)
 800237c:	2200      	movs	r2, #0
 800237e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002380:	4b1a      	ldr	r3, [pc, #104]	; (80023ec <MX_USART3_UART_Init+0x90>)
 8002382:	220c      	movs	r2, #12
 8002384:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002386:	4b19      	ldr	r3, [pc, #100]	; (80023ec <MX_USART3_UART_Init+0x90>)
 8002388:	2200      	movs	r2, #0
 800238a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800238c:	4b17      	ldr	r3, [pc, #92]	; (80023ec <MX_USART3_UART_Init+0x90>)
 800238e:	2200      	movs	r2, #0
 8002390:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002392:	4b16      	ldr	r3, [pc, #88]	; (80023ec <MX_USART3_UART_Init+0x90>)
 8002394:	2200      	movs	r2, #0
 8002396:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002398:	4b14      	ldr	r3, [pc, #80]	; (80023ec <MX_USART3_UART_Init+0x90>)
 800239a:	2200      	movs	r2, #0
 800239c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800239e:	4b13      	ldr	r3, [pc, #76]	; (80023ec <MX_USART3_UART_Init+0x90>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023a4:	4811      	ldr	r0, [pc, #68]	; (80023ec <MX_USART3_UART_Init+0x90>)
 80023a6:	f007 f9b1 	bl	800970c <HAL_UART_Init>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80023b0:	f7ff fa1e 	bl	80017f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023b4:	2100      	movs	r1, #0
 80023b6:	480d      	ldr	r0, [pc, #52]	; (80023ec <MX_USART3_UART_Init+0x90>)
 80023b8:	f008 fada 	bl	800a970 <HAL_UARTEx_SetTxFifoThreshold>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80023c2:	f7ff fa15 	bl	80017f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023c6:	2100      	movs	r1, #0
 80023c8:	4808      	ldr	r0, [pc, #32]	; (80023ec <MX_USART3_UART_Init+0x90>)
 80023ca:	f008 fb0f 	bl	800a9ec <HAL_UARTEx_SetRxFifoThreshold>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80023d4:	f7ff fa0c 	bl	80017f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80023d8:	4804      	ldr	r0, [pc, #16]	; (80023ec <MX_USART3_UART_Init+0x90>)
 80023da:	f008 fa90 	bl	800a8fe <HAL_UARTEx_DisableFifoMode>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80023e4:	f7ff fa04 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80023e8:	bf00      	nop
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	24004518 	.word	0x24004518
 80023f0:	40004800 	.word	0x40004800

080023f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b0b6      	sub	sp, #216	; 0xd8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023fc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	60da      	str	r2, [r3, #12]
 800240a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800240c:	f107 0310 	add.w	r3, r7, #16
 8002410:	22b4      	movs	r2, #180	; 0xb4
 8002412:	2100      	movs	r1, #0
 8002414:	4618      	mov	r0, r3
 8002416:	f017 faaa 	bl	801996e <memset>
  if(uartHandle->Instance==USART3)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a25      	ldr	r2, [pc, #148]	; (80024b4 <HAL_UART_MspInit+0xc0>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d142      	bne.n	80024aa <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002424:	2302      	movs	r3, #2
 8002426:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002428:	2300      	movs	r3, #0
 800242a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800242e:	f107 0310 	add.w	r3, r7, #16
 8002432:	4618      	mov	r0, r3
 8002434:	f004 fe6a 	bl	800710c <HAL_RCCEx_PeriphCLKConfig>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800243e:	f7ff f9d7 	bl	80017f0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002442:	4b1d      	ldr	r3, [pc, #116]	; (80024b8 <HAL_UART_MspInit+0xc4>)
 8002444:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002448:	4a1b      	ldr	r2, [pc, #108]	; (80024b8 <HAL_UART_MspInit+0xc4>)
 800244a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800244e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002452:	4b19      	ldr	r3, [pc, #100]	; (80024b8 <HAL_UART_MspInit+0xc4>)
 8002454:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002458:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002460:	4b15      	ldr	r3, [pc, #84]	; (80024b8 <HAL_UART_MspInit+0xc4>)
 8002462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002466:	4a14      	ldr	r2, [pc, #80]	; (80024b8 <HAL_UART_MspInit+0xc4>)
 8002468:	f043 0308 	orr.w	r3, r3, #8
 800246c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002470:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <HAL_UART_MspInit+0xc4>)
 8002472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800247e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002482:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002486:	2302      	movs	r3, #2
 8002488:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248c:	2300      	movs	r3, #0
 800248e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002492:	2300      	movs	r3, #0
 8002494:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002498:	2307      	movs	r3, #7
 800249a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800249e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80024a2:	4619      	mov	r1, r3
 80024a4:	4805      	ldr	r0, [pc, #20]	; (80024bc <HAL_UART_MspInit+0xc8>)
 80024a6:	f003 fc87 	bl	8005db8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80024aa:	bf00      	nop
 80024ac:	37d8      	adds	r7, #216	; 0xd8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40004800 	.word	0x40004800
 80024b8:	58024400 	.word	0x58024400
 80024bc:	58020c00 	.word	0x58020c00

080024c0 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
	...

080024d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80024d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002508 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80024d4:	f7ff fbf8 	bl	8001cc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024d8:	480c      	ldr	r0, [pc, #48]	; (800250c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024da:	490d      	ldr	r1, [pc, #52]	; (8002510 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024dc:	4a0d      	ldr	r2, [pc, #52]	; (8002514 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024e0:	e002      	b.n	80024e8 <LoopCopyDataInit>

080024e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024e6:	3304      	adds	r3, #4

080024e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024ec:	d3f9      	bcc.n	80024e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ee:	4a0a      	ldr	r2, [pc, #40]	; (8002518 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024f0:	4c0a      	ldr	r4, [pc, #40]	; (800251c <LoopFillZerobss+0x22>)
  movs r3, #0
 80024f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024f4:	e001      	b.n	80024fa <LoopFillZerobss>

080024f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024f8:	3204      	adds	r2, #4

080024fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024fc:	d3fb      	bcc.n	80024f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024fe:	f017 f9f3 	bl	80198e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002502:	f7ff f831 	bl	8001568 <main>
  bx  lr
 8002506:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002508:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800250c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002510:	240000a0 	.word	0x240000a0
  ldr r2, =_sidata
 8002514:	0801e038 	.word	0x0801e038
  ldr r2, =_sbss
 8002518:	240000a0 	.word	0x240000a0
  ldr r4, =_ebss
 800251c:	24007894 	.word	0x24007894

08002520 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002520:	e7fe      	b.n	8002520 <ADC3_IRQHandler>

08002522 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00b      	beq.n	800254a <LAN8742_RegisterBusIO+0x28>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d007      	beq.n	800254a <LAN8742_RegisterBusIO+0x28>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <LAN8742_RegisterBusIO+0x28>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d102      	bne.n	8002550 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800254a:	f04f 33ff 	mov.w	r3, #4294967295
 800254e:	e014      	b.n	800257a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	68da      	ldr	r2, [r3, #12]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	691a      	ldr	r2, [r3, #16]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002586:	b580      	push	{r7, lr}
 8002588:	b086      	sub	sp, #24
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	2300      	movs	r3, #0
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d17c      	bne.n	80026a0 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d002      	beq.n	80025b4 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2220      	movs	r2, #32
 80025b8:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	e01c      	b.n	80025fa <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	f107 0208 	add.w	r2, r7, #8
 80025c8:	2112      	movs	r1, #18
 80025ca:	6978      	ldr	r0, [r7, #20]
 80025cc:	4798      	blx	r3
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	da03      	bge.n	80025dc <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80025d4:	f06f 0304 	mvn.w	r3, #4
 80025d8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80025da:	e00b      	b.n	80025f4 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	f003 031f 	and.w	r3, r3, #31
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d105      	bne.n	80025f4 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]
         break;
 80025f2:	e005      	b.n	8002600 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	3301      	adds	r3, #1
 80025f8:	617b      	str	r3, [r7, #20]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	2b1f      	cmp	r3, #31
 80025fe:	d9df      	bls.n	80025c0 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b1f      	cmp	r3, #31
 8002606:	d902      	bls.n	800260e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002608:	f06f 0302 	mvn.w	r3, #2
 800260c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d145      	bne.n	80026a0 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6810      	ldr	r0, [r2, #0]
 800261c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002620:	2100      	movs	r1, #0
 8002622:	4798      	blx	r3
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	db37      	blt.n	800269a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6810      	ldr	r0, [r2, #0]
 8002632:	f107 0208 	add.w	r2, r7, #8
 8002636:	2100      	movs	r1, #0
 8002638:	4798      	blx	r3
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	db28      	blt.n	8002692 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	4798      	blx	r3
 8002646:	4603      	mov	r3, r0
 8002648:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800264a:	e01c      	b.n	8002686 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	4798      	blx	r3
 8002652:	4603      	mov	r3, r0
 8002654:	461a      	mov	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800265e:	d80e      	bhi.n	800267e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6810      	ldr	r0, [r2, #0]
 8002668:	f107 0208 	add.w	r2, r7, #8
 800266c:	2100      	movs	r1, #0
 800266e:	4798      	blx	r3
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	da07      	bge.n	8002686 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8002676:	f06f 0304 	mvn.w	r3, #4
 800267a:	613b      	str	r3, [r7, #16]
                 break;
 800267c:	e010      	b.n	80026a0 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800267e:	f06f 0301 	mvn.w	r3, #1
 8002682:	613b      	str	r3, [r7, #16]
               break;
 8002684:	e00c      	b.n	80026a0 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1dd      	bne.n	800264c <LAN8742_Init+0xc6>
 8002690:	e006      	b.n	80026a0 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8002692:	f06f 0304 	mvn.w	r3, #4
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	e002      	b.n	80026a0 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800269a:	f06f 0303 	mvn.w	r3, #3
 800269e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d112      	bne.n	80026cc <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	4798      	blx	r3
 80026ac:	4603      	mov	r3, r0
 80026ae:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80026b0:	bf00      	nop
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	4798      	blx	r3
 80026b8:	4603      	mov	r3, r0
 80026ba:	461a      	mov	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80026c4:	d9f5      	bls.n	80026b2 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80026cc:	693b      	ldr	r3, [r7, #16]
 }
 80026ce:	4618      	mov	r0, r3
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b084      	sub	sp, #16
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6810      	ldr	r0, [r2, #0]
 80026ea:	f107 020c 	add.w	r2, r7, #12
 80026ee:	2101      	movs	r1, #1
 80026f0:	4798      	blx	r3
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	da02      	bge.n	80026fe <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80026f8:	f06f 0304 	mvn.w	r3, #4
 80026fc:	e06e      	b.n	80027dc <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6810      	ldr	r0, [r2, #0]
 8002706:	f107 020c 	add.w	r2, r7, #12
 800270a:	2101      	movs	r1, #1
 800270c:	4798      	blx	r3
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	da02      	bge.n	800271a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002714:	f06f 0304 	mvn.w	r3, #4
 8002718:	e060      	b.n	80027dc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8002724:	2301      	movs	r3, #1
 8002726:	e059      	b.n	80027dc <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6810      	ldr	r0, [r2, #0]
 8002730:	f107 020c 	add.w	r2, r7, #12
 8002734:	2100      	movs	r1, #0
 8002736:	4798      	blx	r3
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	da02      	bge.n	8002744 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800273e:	f06f 0304 	mvn.w	r3, #4
 8002742:	e04b      	b.n	80027dc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d11b      	bne.n	8002786 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d006      	beq.n	8002766 <LAN8742_GetLinkState+0x90>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002762:	2302      	movs	r3, #2
 8002764:	e03a      	b.n	80027dc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002770:	2303      	movs	r3, #3
 8002772:	e033      	b.n	80027dc <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800277e:	2304      	movs	r3, #4
 8002780:	e02c      	b.n	80027dc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002782:	2305      	movs	r3, #5
 8002784:	e02a      	b.n	80027dc <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6810      	ldr	r0, [r2, #0]
 800278e:	f107 020c 	add.w	r2, r7, #12
 8002792:	211f      	movs	r1, #31
 8002794:	4798      	blx	r3
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	da02      	bge.n	80027a2 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800279c:	f06f 0304 	mvn.w	r3, #4
 80027a0:	e01c      	b.n	80027dc <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80027ac:	2306      	movs	r3, #6
 80027ae:	e015      	b.n	80027dc <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f003 031c 	and.w	r3, r3, #28
 80027b6:	2b18      	cmp	r3, #24
 80027b8:	d101      	bne.n	80027be <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80027ba:	2302      	movs	r3, #2
 80027bc:	e00e      	b.n	80027dc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f003 031c 	and.w	r3, r3, #28
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d101      	bne.n	80027cc <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e007      	b.n	80027dc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f003 031c 	and.w	r3, r3, #28
 80027d2:	2b14      	cmp	r3, #20
 80027d4:	d101      	bne.n	80027da <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80027d6:	2304      	movs	r3, #4
 80027d8:	e000      	b.n	80027dc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80027da:	2305      	movs	r3, #5
    }				
  }
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027ea:	2003      	movs	r0, #3
 80027ec:	f000 f93b 	bl	8002a66 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80027f0:	f004 fa74 	bl	8006cdc <HAL_RCC_GetSysClockFreq>
 80027f4:	4602      	mov	r2, r0
 80027f6:	4b15      	ldr	r3, [pc, #84]	; (800284c <HAL_Init+0x68>)
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	0a1b      	lsrs	r3, r3, #8
 80027fc:	f003 030f 	and.w	r3, r3, #15
 8002800:	4913      	ldr	r1, [pc, #76]	; (8002850 <HAL_Init+0x6c>)
 8002802:	5ccb      	ldrb	r3, [r1, r3]
 8002804:	f003 031f 	and.w	r3, r3, #31
 8002808:	fa22 f303 	lsr.w	r3, r2, r3
 800280c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800280e:	4b0f      	ldr	r3, [pc, #60]	; (800284c <HAL_Init+0x68>)
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	4a0e      	ldr	r2, [pc, #56]	; (8002850 <HAL_Init+0x6c>)
 8002818:	5cd3      	ldrb	r3, [r2, r3]
 800281a:	f003 031f 	and.w	r3, r3, #31
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	fa22 f303 	lsr.w	r3, r2, r3
 8002824:	4a0b      	ldr	r2, [pc, #44]	; (8002854 <HAL_Init+0x70>)
 8002826:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002828:	4a0b      	ldr	r2, [pc, #44]	; (8002858 <HAL_Init+0x74>)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800282e:	200f      	movs	r0, #15
 8002830:	f7ff f8e2 	bl	80019f8 <HAL_InitTick>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e002      	b.n	8002844 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800283e:	f7ff f8bd 	bl	80019bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	58024400 	.word	0x58024400
 8002850:	0801dd5c 	.word	0x0801dd5c
 8002854:	2400000c 	.word	0x2400000c
 8002858:	24000008 	.word	0x24000008

0800285c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002860:	4b06      	ldr	r3, [pc, #24]	; (800287c <HAL_IncTick+0x20>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	4b06      	ldr	r3, [pc, #24]	; (8002880 <HAL_IncTick+0x24>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4413      	add	r3, r2
 800286c:	4a04      	ldr	r2, [pc, #16]	; (8002880 <HAL_IncTick+0x24>)
 800286e:	6013      	str	r3, [r2, #0]
}
 8002870:	bf00      	nop
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	24000014 	.word	0x24000014
 8002880:	240045a8 	.word	0x240045a8

08002884 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return uwTick;
 8002888:	4b03      	ldr	r3, [pc, #12]	; (8002898 <HAL_GetTick+0x14>)
 800288a:	681b      	ldr	r3, [r3, #0]
}
 800288c:	4618      	mov	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	240045a8 	.word	0x240045a8

0800289c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028a4:	f7ff ffee 	bl	8002884 <HAL_GetTick>
 80028a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b4:	d005      	beq.n	80028c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028b6:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <HAL_Delay+0x44>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	461a      	mov	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4413      	add	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028c2:	bf00      	nop
 80028c4:	f7ff ffde 	bl	8002884 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d8f7      	bhi.n	80028c4 <HAL_Delay+0x28>
  {
  }
}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	24000014 	.word	0x24000014

080028e4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80028ec:	4b06      	ldr	r3, [pc, #24]	; (8002908 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80028f4:	4904      	ldr	r1, [pc, #16]	; (8002908 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	604b      	str	r3, [r1, #4]
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	58000400 	.word	0x58000400

0800290c <__NVIC_SetPriorityGrouping>:
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800291c:	4b0b      	ldr	r3, [pc, #44]	; (800294c <__NVIC_SetPriorityGrouping+0x40>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002928:	4013      	ands	r3, r2
 800292a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002934:	4b06      	ldr	r3, [pc, #24]	; (8002950 <__NVIC_SetPriorityGrouping+0x44>)
 8002936:	4313      	orrs	r3, r2
 8002938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800293a:	4a04      	ldr	r2, [pc, #16]	; (800294c <__NVIC_SetPriorityGrouping+0x40>)
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	60d3      	str	r3, [r2, #12]
}
 8002940:	bf00      	nop
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	e000ed00 	.word	0xe000ed00
 8002950:	05fa0000 	.word	0x05fa0000

08002954 <__NVIC_GetPriorityGrouping>:
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002958:	4b04      	ldr	r3, [pc, #16]	; (800296c <__NVIC_GetPriorityGrouping+0x18>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	0a1b      	lsrs	r3, r3, #8
 800295e:	f003 0307 	and.w	r3, r3, #7
}
 8002962:	4618      	mov	r0, r3
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <__NVIC_EnableIRQ>:
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800297a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800297e:	2b00      	cmp	r3, #0
 8002980:	db0b      	blt.n	800299a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002982:	88fb      	ldrh	r3, [r7, #6]
 8002984:	f003 021f 	and.w	r2, r3, #31
 8002988:	4907      	ldr	r1, [pc, #28]	; (80029a8 <__NVIC_EnableIRQ+0x38>)
 800298a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	2001      	movs	r0, #1
 8002992:	fa00 f202 	lsl.w	r2, r0, r2
 8002996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	e000e100 	.word	0xe000e100

080029ac <__NVIC_SetPriority>:
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	6039      	str	r1, [r7, #0]
 80029b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80029b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	db0a      	blt.n	80029d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	490c      	ldr	r1, [pc, #48]	; (80029f8 <__NVIC_SetPriority+0x4c>)
 80029c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029ca:	0112      	lsls	r2, r2, #4
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	440b      	add	r3, r1
 80029d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80029d4:	e00a      	b.n	80029ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	4908      	ldr	r1, [pc, #32]	; (80029fc <__NVIC_SetPriority+0x50>)
 80029dc:	88fb      	ldrh	r3, [r7, #6]
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	3b04      	subs	r3, #4
 80029e4:	0112      	lsls	r2, r2, #4
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	440b      	add	r3, r1
 80029ea:	761a      	strb	r2, [r3, #24]
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	e000e100 	.word	0xe000e100
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <NVIC_EncodePriority>:
{
 8002a00:	b480      	push	{r7}
 8002a02:	b089      	sub	sp, #36	; 0x24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f1c3 0307 	rsb	r3, r3, #7
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	bf28      	it	cs
 8002a1e:	2304      	movcs	r3, #4
 8002a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	3304      	adds	r3, #4
 8002a26:	2b06      	cmp	r3, #6
 8002a28:	d902      	bls.n	8002a30 <NVIC_EncodePriority+0x30>
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3b03      	subs	r3, #3
 8002a2e:	e000      	b.n	8002a32 <NVIC_EncodePriority+0x32>
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a34:	f04f 32ff 	mov.w	r2, #4294967295
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43da      	mvns	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	401a      	ands	r2, r3
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a48:	f04f 31ff 	mov.w	r1, #4294967295
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a52:	43d9      	mvns	r1, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a58:	4313      	orrs	r3, r2
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3724      	adds	r7, #36	; 0x24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff ff4c 	bl	800290c <__NVIC_SetPriorityGrouping>
}
 8002a74:	bf00      	nop
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
 8002a88:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a8a:	f7ff ff63 	bl	8002954 <__NVIC_GetPriorityGrouping>
 8002a8e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	68b9      	ldr	r1, [r7, #8]
 8002a94:	6978      	ldr	r0, [r7, #20]
 8002a96:	f7ff ffb3 	bl	8002a00 <NVIC_EncodePriority>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002aa0:	4611      	mov	r1, r2
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff ff82 	bl	80029ac <__NVIC_SetPriority>
}
 8002aa8:	bf00      	nop
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff ff56 	bl	8002970 <__NVIC_EnableIRQ>
}
 8002ac4:	bf00      	nop
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002ad0:	f3bf 8f5f 	dmb	sy
}
 8002ad4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002ad6:	4b07      	ldr	r3, [pc, #28]	; (8002af4 <HAL_MPU_Disable+0x28>)
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	4a06      	ldr	r2, [pc, #24]	; (8002af4 <HAL_MPU_Disable+0x28>)
 8002adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ae0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002ae2:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <HAL_MPU_Disable+0x2c>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	605a      	str	r2, [r3, #4]
}
 8002ae8:	bf00      	nop
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	e000ed00 	.word	0xe000ed00
 8002af8:	e000ed90 	.word	0xe000ed90

08002afc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002b04:	4a0b      	ldr	r2, [pc, #44]	; (8002b34 <HAL_MPU_Enable+0x38>)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002b0e:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <HAL_MPU_Enable+0x3c>)
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	4a09      	ldr	r2, [pc, #36]	; (8002b38 <HAL_MPU_Enable+0x3c>)
 8002b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b18:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002b1a:	f3bf 8f4f 	dsb	sy
}
 8002b1e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b20:	f3bf 8f6f 	isb	sy
}
 8002b24:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	e000ed90 	.word	0xe000ed90
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	785a      	ldrb	r2, [r3, #1]
 8002b48:	4b1d      	ldr	r3, [pc, #116]	; (8002bc0 <HAL_MPU_ConfigRegion+0x84>)
 8002b4a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d029      	beq.n	8002ba8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002b54:	4a1a      	ldr	r2, [pc, #104]	; (8002bc0 <HAL_MPU_ConfigRegion+0x84>)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	7b1b      	ldrb	r3, [r3, #12]
 8002b60:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	7adb      	ldrb	r3, [r3, #11]
 8002b66:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002b68:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	7a9b      	ldrb	r3, [r3, #10]
 8002b6e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002b70:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	7b5b      	ldrb	r3, [r3, #13]
 8002b76:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002b78:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	7b9b      	ldrb	r3, [r3, #14]
 8002b7e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002b80:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	7bdb      	ldrb	r3, [r3, #15]
 8002b86:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002b88:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	7a5b      	ldrb	r3, [r3, #9]
 8002b8e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002b90:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	7a1b      	ldrb	r3, [r3, #8]
 8002b96:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002b98:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	7812      	ldrb	r2, [r2, #0]
 8002b9e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ba0:	4a07      	ldr	r2, [pc, #28]	; (8002bc0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002ba2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ba4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002ba6:	e005      	b.n	8002bb4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002ba8:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <HAL_MPU_ConfigRegion+0x84>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002bae:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <HAL_MPU_ConfigRegion+0x84>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	611a      	str	r2, [r3, #16]
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	e000ed90 	.word	0xe000ed90

08002bc4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e0c6      	b.n	8002d64 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d102      	bne.n	8002be4 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f008 f8e0 	bl	800ada4 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2223      	movs	r2, #35	; 0x23
 8002be8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bea:	4b60      	ldr	r3, [pc, #384]	; (8002d6c <HAL_ETH_Init+0x1a8>)
 8002bec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002bf0:	4a5e      	ldr	r2, [pc, #376]	; (8002d6c <HAL_ETH_Init+0x1a8>)
 8002bf2:	f043 0302 	orr.w	r3, r3, #2
 8002bf6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002bfa:	4b5c      	ldr	r3, [pc, #368]	; (8002d6c <HAL_ETH_Init+0x1a8>)
 8002bfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	60bb      	str	r3, [r7, #8]
 8002c06:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	7a1b      	ldrb	r3, [r3, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d103      	bne.n	8002c18 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002c10:	2000      	movs	r0, #0
 8002c12:	f7ff fe67 	bl	80028e4 <HAL_SYSCFG_ETHInterfaceSelect>
 8002c16:	e003      	b.n	8002c20 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002c18:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002c1c:	f7ff fe62 	bl	80028e4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0201 	orr.w	r2, r2, #1
 8002c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c38:	f7ff fe24 	bl	8002884 <HAL_GetTick>
 8002c3c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002c3e:	e00f      	b.n	8002c60 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8002c40:	f7ff fe20 	bl	8002884 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c4e:	d907      	bls.n	8002c60 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2204      	movs	r2, #4
 8002c54:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	22e0      	movs	r2, #224	; 0xe0
 8002c5a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e081      	b.n	8002d64 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1e6      	bne.n	8002c40 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f001 fad8 	bl	8004228 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002c78:	f004 f9aa 	bl	8006fd0 <HAL_RCC_GetHCLKFreq>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	4a3c      	ldr	r2, [pc, #240]	; (8002d70 <HAL_ETH_Init+0x1ac>)
 8002c80:	fba2 2303 	umull	r2, r3, r2, r3
 8002c84:	0c9a      	lsrs	r2, r3, #18
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	3a01      	subs	r2, #1
 8002c8c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f001 fa2b 	bl	80040ec <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002cac:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002cb0:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	f003 0303 	and.w	r3, r3, #3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d007      	beq.n	8002cce <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	22e0      	movs	r2, #224	; 0xe0
 8002cc8:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e04a      	b.n	8002d64 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	f241 1308 	movw	r3, #4360	; 0x1108
 8002cd6:	4413      	add	r3, r2
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	4b26      	ldr	r3, [pc, #152]	; (8002d74 <HAL_ETH_Init+0x1b0>)
 8002cdc:	4013      	ands	r3, r2
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6952      	ldr	r2, [r2, #20]
 8002ce2:	0052      	lsls	r2, r2, #1
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	6809      	ldr	r1, [r1, #0]
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	f241 1308 	movw	r3, #4360	; 0x1108
 8002cee:	440b      	add	r3, r1
 8002cf0:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f001 faf0 	bl	80042d8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f001 fb34 	bl	8004366 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	3305      	adds	r3, #5
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	021a      	lsls	r2, r3, #8
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	4619      	mov	r1, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	3303      	adds	r3, #3
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	061a      	lsls	r2, r3, #24
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	3302      	adds	r3, #2
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	041b      	lsls	r3, r3, #16
 8002d30:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	3301      	adds	r3, #1
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002d3c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002d4a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002d4c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2210      	movs	r2, #16
 8002d5a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2210      	movs	r2, #16
 8002d60:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	58024400 	.word	0x58024400
 8002d70:	431bde83 	.word	0x431bde83
 8002d74:	ffff8001 	.word	0xffff8001

08002d78 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b087      	sub	sp, #28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
 8002d84:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	3310      	adds	r3, #16
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d002      	beq.n	8002da0 <HAL_ETH_DescAssignMemory+0x28>
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	d904      	bls.n	8002daa <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2201      	movs	r2, #1
 8002da4:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e021      	b.n	8002dee <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00b      	beq.n	8002de0 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	371c      	adds	r7, #28
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b085      	sub	sp, #20
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e06:	2b10      	cmp	r3, #16
 8002e08:	d174      	bne.n	8002ef4 <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2223      	movs	r2, #35	; 0x23
 8002e0e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002e10:	2300      	movs	r3, #0
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	e00f      	b.n	8002e36 <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	3310      	adds	r3, #16
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	3301      	adds	r3, #1
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d9ec      	bls.n	8002e16 <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	665a      	str	r2, [r3, #100]	; 0x64

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f042 0202 	orr.w	r2, r2, #2
 8002e50:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f042 0201 	orr.w	r2, r2, #1
 8002e60:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0201 	orr.w	r2, r2, #1
 8002e72:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	f241 1304 	movw	r3, #4356	; 0x1104
 8002e7e:	4413      	add	r3, r2
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	6811      	ldr	r1, [r2, #0]
 8002e86:	f043 0201 	orr.w	r2, r3, #1
 8002e8a:	f241 1304 	movw	r3, #4356	; 0x1104
 8002e8e:	440b      	add	r3, r1
 8002e90:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	f241 1308 	movw	r3, #4360	; 0x1108
 8002e9a:	4413      	add	r3, r2
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6811      	ldr	r1, [r2, #0]
 8002ea2:	f043 0201 	orr.w	r2, r3, #1
 8002ea6:	f241 1308 	movw	r3, #4360	; 0x1108
 8002eaa:	440b      	add	r3, r1
 8002eac:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8002ec0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002ec4:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	f241 1334 	movw	r3, #4404	; 0x1134
 8002ece:	4413      	add	r3, r2
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6811      	ldr	r1, [r2, #0]
 8002ed6:	f24d 0241 	movw	r2, #53313	; 0xd041
 8002eda:	431a      	orrs	r2, r3
 8002edc:	f241 1334 	movw	r3, #4404	; 0x1134
 8002ee0:	440b      	add	r3, r1
 8002ee2:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2210      	movs	r2, #16
 8002ee8:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2222      	movs	r2, #34	; 0x22
 8002eee:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	e000      	b.n	8002ef6 <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
  }
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
	...

08002f04 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d067      	beq.n	8002fe4 <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2223      	movs	r2, #35	; 0x23
 8002f18:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	f241 1334 	movw	r3, #4404	; 0x1134
 8002f22:	4413      	add	r3, r2
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6811      	ldr	r1, [r2, #0]
 8002f2a:	4a32      	ldr	r2, [pc, #200]	; (8002ff4 <HAL_ETH_Stop_IT+0xf0>)
 8002f2c:	401a      	ands	r2, r3
 8002f2e:	f241 1334 	movw	r3, #4404	; 0x1134
 8002f32:	440b      	add	r3, r1
 8002f34:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	f241 1304 	movw	r3, #4356	; 0x1104
 8002f3e:	4413      	add	r3, r2
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6811      	ldr	r1, [r2, #0]
 8002f46:	f023 0201 	bic.w	r2, r3, #1
 8002f4a:	f241 1304 	movw	r3, #4356	; 0x1104
 8002f4e:	440b      	add	r3, r1
 8002f50:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	f241 1308 	movw	r3, #4360	; 0x1108
 8002f5a:	4413      	add	r3, r2
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6811      	ldr	r1, [r2, #0]
 8002f62:	f023 0201 	bic.w	r2, r3, #1
 8002f66:	f241 1308 	movw	r3, #4360	; 0x1108
 8002f6a:	440b      	add	r3, r1
 8002f6c:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 0201 	bic.w	r2, r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0201 	orr.w	r2, r2, #1
 8002f8e:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0202 	bic.w	r2, r2, #2
 8002fa0:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	e00f      	b.n	8002fc8 <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	3310      	adds	r3, #16
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d9ec      	bls.n	8002fa8 <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2210      	movs	r2, #16
 8002fd8:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2210      	movs	r2, #16
 8002fde:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	e000      	b.n	8002fe6 <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
  }
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	ffff2fbe 	.word	0xffff2fbe

08002ff8 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d107      	bne.n	800301a <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800300e:	f043 0201 	orr.w	r2, r3, #1
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e073      	b.n	8003102 <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800301e:	2b10      	cmp	r3, #16
 8003020:	d16e      	bne.n	8003100 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8003022:	2200      	movs	r2, #0
 8003024:	68b9      	ldr	r1, [r7, #8]
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f001 f9fa 	bl	8004420 <ETH_Prepare_Tx_Descriptors>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d007      	beq.n	8003042 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003036:	f043 0202 	orr.w	r2, r3, #2
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e05f      	b.n	8003102 <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	3206      	adds	r2, #6
 800304a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800304e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003054:	1c5a      	adds	r2, r3, #1
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	629a      	str	r2, [r3, #40]	; 0x28
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305e:	2b03      	cmp	r3, #3
 8003060:	d904      	bls.n	800306c <HAL_ETH_Transmit+0x74>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003066:	1f1a      	subs	r2, r3, #4
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	3106      	adds	r1, #6
 8003078:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800307c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8003080:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8003082:	f7ff fbff 	bl	8002884 <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8003088:	e034      	b.n	80030f4 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d011      	beq.n	80030c0 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a0:	f043 0208 	orr.w	r2, r3, #8
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	22e0      	movs	r2, #224	; 0xe0
 80030ba:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e020      	b.n	8003102 <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c6:	d015      	beq.n	80030f4 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 80030c8:	f7ff fbdc 	bl	8002884 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d302      	bcc.n	80030de <HAL_ETH_Transmit+0xe6>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10a      	bne.n	80030f4 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030e2:	f043 0204 	orr.w	r2, r3, #4
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	22e0      	movs	r2, #224	; 0xe0
 80030ee:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e006      	b.n	8003102 <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	dbc6      	blt.n	800308a <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80030fc:	2300      	movs	r3, #0
 80030fe:	e000      	b.n	8003102 <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
  }
}
 8003102:	4618      	mov	r0, r3
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 800310a:	b480      	push	{r7}
 800310c:	b089      	sub	sp, #36	; 0x24
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	3344      	adds	r3, #68	; 0x44
 8003116:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	69fa      	ldr	r2, [r7, #28]
 8003122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003126:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 800312c:	2300      	movs	r3, #0
 800312e:	613b      	str	r3, [r7, #16]
 8003130:	2300      	movs	r3, #0
 8003132:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d06b      	beq.n	8003214 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 800313c:	2300      	movs	r3, #0
 800313e:	e0ce      	b.n	80032de <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	3301      	adds	r3, #1
 8003144:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d036      	beq.n	80031c0 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	3301      	adds	r3, #1
 8003156:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	3301      	adds	r3, #1
 8003166:	61fb      	str	r3, [r7, #28]
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	2b03      	cmp	r3, #3
 800316c:	d902      	bls.n	8003174 <HAL_ETH_IsRxDataAvailable+0x6a>
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	3b04      	subs	r3, #4
 8003172:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	69fa      	ldr	r2, [r7, #28]
 8003178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800317c:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	2b00      	cmp	r3, #0
 8003184:	db11      	blt.n	80031aa <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00b      	beq.n	80031aa <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	2201      	movs	r2, #1
 8003196:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	3301      	adds	r3, #1
 800319c:	61fb      	str	r3, [r7, #28]
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	2b03      	cmp	r3, #3
 80031a2:	d902      	bls.n	80031aa <HAL_ETH_IsRxDataAvailable+0xa0>
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	3b04      	subs	r3, #4
 80031a8:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	69fa      	ldr	r2, [r7, #28]
 80031ae:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 80031bc:	2301      	movs	r3, #1
 80031be:	e08e      	b.n	80032de <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d012      	beq.n	80031f2 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 80031d0:	2301      	movs	r3, #1
 80031d2:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	3301      	adds	r3, #1
 80031d8:	61fb      	str	r3, [r7, #28]
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d902      	bls.n	80031e6 <HAL_ETH_IsRxDataAvailable+0xdc>
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	3b04      	subs	r3, #4
 80031e4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	69fa      	ldr	r2, [r7, #28]
 80031ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ee:	61bb      	str	r3, [r7, #24]
 80031f0:	e010      	b.n	8003214 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	3301      	adds	r3, #1
 80031f6:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	3301      	adds	r3, #1
 80031fc:	61fb      	str	r3, [r7, #28]
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	2b03      	cmp	r3, #3
 8003202:	d902      	bls.n	800320a <HAL_ETH_IsRxDataAvailable+0x100>
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	3b04      	subs	r3, #4
 8003208:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	69fa      	ldr	r2, [r7, #28]
 800320e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003212:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	2b00      	cmp	r3, #0
 800321a:	db02      	blt.n	8003222 <HAL_ETH_IsRxDataAvailable+0x118>
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	2b03      	cmp	r3, #3
 8003220:	d98e      	bls.n	8003140 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d056      	beq.n	80032d6 <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	69fa      	ldr	r2, [r7, #28]
 800322c:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	69fa      	ldr	r2, [r7, #28]
 800323c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003240:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8003242:	2300      	movs	r3, #0
 8003244:	617b      	str	r3, [r7, #20]
 8003246:	e03b      	b.n	80032c0 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	691a      	ldr	r2, [r3, #16]
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003256:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d009      	beq.n	8003274 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	695a      	ldr	r2, [r3, #20]
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d005      	beq.n	8003294 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	3b01      	subs	r3, #1
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	429a      	cmp	r2, r3
 800329c:	d20d      	bcs.n	80032ba <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	3301      	adds	r3, #1
 80032a2:	61fb      	str	r3, [r7, #28]
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	d902      	bls.n	80032b0 <HAL_ETH_IsRxDataAvailable+0x1a6>
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	3b04      	subs	r3, #4
 80032ae:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	69fa      	ldr	r2, [r7, #28]
 80032b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032b8:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	3301      	adds	r3, #1
 80032be:	617b      	str	r3, [r7, #20]
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d3bf      	bcc.n	8003248 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6819      	ldr	r1, [r3, #0]
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	f241 1328 	movw	r3, #4392	; 0x1128
 80032d2:	440b      	add	r3, r1
 80032d4:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2200      	movs	r2, #0
 80032da:	619a      	str	r2, [r3, #24]

  return 0;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3724      	adds	r7, #36	; 0x24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b08a      	sub	sp, #40	; 0x28
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
 80032f2:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3344      	adds	r3, #68	; 0x44
 80032f8:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8003300:	2300      	movs	r3, #0
 8003302:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800330c:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d104      	bne.n	8003322 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e07d      	b.n	800341e <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10f      	bne.n	800334a <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7ff feed 	bl	800310a <HAL_ETH_IsRxDataAvailable>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e071      	b.n	800341e <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003348:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 800334a:	2300      	movs	r3, #0
 800334c:	623b      	str	r3, [r7, #32]
 800334e:	e031      	b.n	80033b4 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	461a      	mov	r2, r3
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695a      	ldr	r2, [r3, #20]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00b      	beq.n	8003382 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	461a      	mov	r2, r3
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695a      	ldr	r2, [r3, #20]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800338a:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	3301      	adds	r3, #1
 8003390:	627b      	str	r3, [r7, #36]	; 0x24
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	2b03      	cmp	r3, #3
 8003396:	d902      	bls.n	800339e <HAL_ETH_GetRxDataBuffer+0xb4>
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	3b04      	subs	r3, #4
 800339c:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033a6:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	3301      	adds	r3, #1
 80033b2:	623b      	str	r3, [r7, #32]
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	3b01      	subs	r3, #1
 80033ba:	6a3a      	ldr	r2, [r7, #32]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d3c7      	bcc.n	8003350 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	461a      	mov	r2, r3
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d803      	bhi.n	80033ea <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	605a      	str	r2, [r3, #4]
 80033e8:	e018      	b.n	800341c <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d012      	beq.n	8003418 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	695a      	ldr	r2, [r3, #20]
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	461a      	mov	r2, r3
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	1ad2      	subs	r2, r2, r3
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	605a      	str	r2, [r3, #4]
 8003416:	e001      	b.n	800341c <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e000      	b.n	800341e <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3728      	adds	r7, #40	; 0x28
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b086      	sub	sp, #24
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3344      	adds	r3, #68	; 0x44
 8003434:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d107      	bne.n	8003454 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f7ff fe60 	bl	800310a <HAL_ETH_IsRxDataAvailable>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e017      	b.n	8003484 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	699a      	ldr	r2, [r3, #24]
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	4413      	add	r3, r2
 800345c:	3b01      	subs	r3, #1
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	2b03      	cmp	r3, #3
 8003464:	d902      	bls.n	800346c <HAL_ETH_GetRxDataLength+0x46>
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	3b04      	subs	r3, #4
 800346a:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003474:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3718      	adds	r7, #24
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 800348c:	b480      	push	{r7}
 800348e:	b089      	sub	sp, #36	; 0x24
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3344      	adds	r3, #68	; 0x44
 8003498:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	69fa      	ldr	r2, [r7, #28]
 80034a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034a8:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e057      	b.n	800356c <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d002      	beq.n	80034ca <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	3301      	adds	r3, #1
 80034c8:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80034ca:	2300      	movs	r3, #0
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	e03b      	b.n	8003548 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034de:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d009      	beq.n	80034fc <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	695a      	ldr	r2, [r3, #20]
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d005      	beq.n	800351c <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	3b01      	subs	r3, #1
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	429a      	cmp	r2, r3
 8003524:	d20d      	bcs.n	8003542 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	3301      	adds	r3, #1
 800352a:	61fb      	str	r3, [r7, #28]
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	2b03      	cmp	r3, #3
 8003530:	d902      	bls.n	8003538 <HAL_ETH_BuildRxDescriptors+0xac>
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	3b04      	subs	r3, #4
 8003536:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003540:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	3301      	adds	r3, #1
 8003546:	613b      	str	r3, [r7, #16]
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	429a      	cmp	r2, r3
 800354e:	d3bf      	bcc.n	80034d0 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6819      	ldr	r1, [r3, #0]
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	f241 1328 	movw	r3, #4392	; 0x1128
 800355a:	440b      	add	r3, r1
 800355c:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3724      	adds	r7, #36	; 0x24
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358e:	2b40      	cmp	r3, #64	; 0x40
 8003590:	d113      	bne.n	80035ba <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	f241 1334 	movw	r3, #4404	; 0x1134
 800359a:	4413      	add	r3, r2
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a2:	2b40      	cmp	r3, #64	; 0x40
 80035a4:	d109      	bne.n	80035ba <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f007 fcd2 	bl	800af50 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80035b4:	f248 0240 	movw	r2, #32832	; 0x8040
 80035b8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d113      	bne.n	80035f4 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	f241 1334 	movw	r3, #4404	; 0x1134
 80035d4:	4413      	add	r3, r2
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d109      	bne.n	80035f4 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f8b7 	bl	8003754 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80035ee:	f248 0201 	movw	r2, #32769	; 0x8001
 80035f2:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003602:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003606:	d149      	bne.n	800369c <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	f241 1334 	movw	r3, #4404	; 0x1134
 8003610:	4413      	add	r3, r2
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003618:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800361c:	d13e      	bne.n	800369c <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003622:	f043 0208 	orr.w	r2, r3, #8
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800363c:	d11b      	bne.n	8003676 <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	f241 1302 	movw	r3, #4354	; 0x1102
 800364c:	4013      	ands	r3, r2
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	f241 1334 	movw	r3, #4404	; 0x1134
 800365a:	4413      	add	r3, r2
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6811      	ldr	r1, [r2, #0]
 8003662:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003666:	f241 1334 	movw	r3, #4404	; 0x1134
 800366a:	440b      	add	r3, r1
 800366c:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	22e0      	movs	r2, #224	; 0xe0
 8003672:	66da      	str	r2, [r3, #108]	; 0x6c
 8003674:	e00f      	b.n	8003696 <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003690:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8003694:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f866 	bl	8003768 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80036a4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80036a8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80036ac:	d10e      	bne.n	80036cc <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	22e0      	movs	r2, #224	; 0xe0
 80036be:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->MACErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f85b 	bl	800377c <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80036d4:	f003 0310 	and.w	r3, r3, #16
 80036d8:	2b10      	cmp	r3, #16
 80036da:	d10f      	bne.n	80036fc <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80036e4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f84e 	bl	8003790 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003704:	f003 0320 	and.w	r3, r3, #32
 8003708:	2b20      	cmp	r3, #32
 800370a:	d10f      	bne.n	800372c <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003714:	f003 020f 	and.w	r2, r3, #15
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f840 	bl	80037a4 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif
    }
  }
#else
  /* check ETH WAKEUP exti flag */
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800372c:	4b08      	ldr	r3, [pc, #32]	; (8003750 <HAL_ETH_IRQHandler+0x1d8>)
 800372e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003730:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d006      	beq.n	8003746 <HAL_ETH_IRQHandler+0x1ce>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003738:	4b05      	ldr	r3, [pc, #20]	; (8003750 <HAL_ETH_IRQHandler+0x1d8>)
 800373a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800373e:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f839 	bl	80037b8 <HAL_ETH_WakeUpCallback>
#endif
  }
#endif
}
 8003746:	bf00      	nop
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	58000080 	.word	0x58000080

08003754 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
 80037d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e03e      	b.n	800386c <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80037f6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	055b      	lsls	r3, r3, #21
 8003802:	4313      	orrs	r3, r2
 8003804:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	041b      	lsls	r3, r3, #16
 8003810:	4313      	orrs	r3, r2
 8003812:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f043 030c 	orr.w	r3, r3, #12
 800381a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f043 0301 	orr.w	r3, r3, #1
 8003822:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 800382e:	f7ff f829 	bl	8002884 <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003834:	e009      	b.n	800384a <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8003836:	f7ff f825 	bl	8002884 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003844:	d901      	bls.n	800384a <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e010      	b.n	800386c <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1ed      	bne.n	8003836 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003862:	b29b      	uxth	r3, r3
 8003864:	461a      	mov	r2, r3
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e03c      	b.n	8003910 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800389e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	055b      	lsls	r3, r3, #21
 80038aa:	4313      	orrs	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	041b      	lsls	r3, r3, #16
 80038b8:	4313      	orrs	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f023 030c 	bic.w	r3, r3, #12
 80038c2:	f043 0304 	orr.w	r3, r3, #4
 80038c6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f043 0301 	orr.w	r3, r3, #1
 80038ce:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	4b10      	ldr	r3, [pc, #64]	; (8003918 <HAL_ETH_WritePHYRegister+0xa4>)
 80038d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80038da:	4a0f      	ldr	r2, [pc, #60]	; (8003918 <HAL_ETH_WritePHYRegister+0xa4>)
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 80038e2:	f7fe ffcf 	bl	8002884 <HAL_GetTick>
 80038e6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80038e8:	e009      	b.n	80038fe <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80038ea:	f7fe ffcb 	bl	8002884 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038f8:	d901      	bls.n	80038fe <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e008      	b.n	8003910 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1ed      	bne.n	80038ea <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40028000 	.word	0x40028000

0800391c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e1c3      	b.n	8003cb8 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 020c 	and.w	r2, r3, #12
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0310 	and.w	r3, r3, #16
 8003948:	2b00      	cmp	r3, #0
 800394a:	bf14      	ite	ne
 800394c:	2301      	movne	r3, #1
 800394e:	2300      	moveq	r3, #0
 8003950:	b2db      	uxtb	r3, r3
 8003952:	461a      	mov	r2, r3
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003972:	2b00      	cmp	r3, #0
 8003974:	bf0c      	ite	eq
 8003976:	2301      	moveq	r3, #1
 8003978:	2300      	movne	r3, #0
 800397a:	b2db      	uxtb	r3, r3
 800397c:	461a      	mov	r2, r3
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800398e:	2b00      	cmp	r3, #0
 8003990:	bf14      	ite	ne
 8003992:	2301      	movne	r3, #1
 8003994:	2300      	moveq	r3, #0
 8003996:	b2db      	uxtb	r3, r3
 8003998:	461a      	mov	r2, r3
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	bf0c      	ite	eq
 80039ac:	2301      	moveq	r3, #1
 80039ae:	2300      	movne	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	461a      	mov	r2, r3
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	bf14      	ite	ne
 80039c6:	2301      	movne	r3, #1
 80039c8:	2300      	moveq	r3, #0
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	461a      	mov	r2, r3
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	bf14      	ite	ne
 80039e0:	2301      	movne	r3, #1
 80039e2:	2300      	moveq	r3, #0
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	461a      	mov	r2, r3
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	bf14      	ite	ne
 8003a16:	2301      	movne	r3, #1
 8003a18:	2300      	moveq	r3, #0
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	bf0c      	ite	eq
 8003a30:	2301      	moveq	r3, #1
 8003a32:	2300      	movne	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	461a      	mov	r2, r3
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	bf0c      	ite	eq
 8003a4a:	2301      	moveq	r3, #1
 8003a4c:	2300      	movne	r3, #0
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	461a      	mov	r2, r3
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	bf14      	ite	ne
 8003a64:	2301      	movne	r3, #1
 8003a66:	2300      	moveq	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	bf14      	ite	ne
 8003a7e:	2301      	movne	r3, #1
 8003a80:	2300      	moveq	r3, #0
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	461a      	mov	r2, r3
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	bf14      	ite	ne
 8003a98:	2301      	movne	r3, #1
 8003a9a:	2300      	moveq	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	bf14      	ite	ne
 8003ab2:	2301      	movne	r3, #1
 8003ab4:	2300      	moveq	r3, #0
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	461a      	mov	r2, r3
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	bf14      	ite	ne
 8003ada:	2301      	movne	r3, #1
 8003adc:	2300      	moveq	r3, #0
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	bf0c      	ite	eq
 8003b10:	2301      	moveq	r3, #1
 8003b12:	2300      	movne	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	461a      	mov	r2, r3
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	bf14      	ite	ne
 8003b2c:	2301      	movne	r3, #1
 8003b2e:	2300      	moveq	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	461a      	mov	r2, r3
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	bf14      	ite	ne
 8003b48:	2301      	movne	r3, #1
 8003b4a:	2300      	moveq	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	461a      	mov	r2, r3
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	bf14      	ite	ne
 8003b64:	2301      	movne	r3, #1
 8003b66:	2300      	moveq	r3, #0
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	0e5b      	lsrs	r3, r3, #25
 8003b7a:	f003 021f 	and.w	r2, r3, #31
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	bf14      	ite	ne
 8003b90:	2301      	movne	r3, #1
 8003b92:	2300      	moveq	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	461a      	mov	r2, r3
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f003 020f 	and.w	r2, r3, #15
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	bf14      	ite	ne
 8003bba:	2301      	movne	r3, #1
 8003bbc:	2300      	moveq	r3, #0
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	bf0c      	ite	eq
 8003bd6:	2301      	moveq	r3, #1
 8003bd8:	2300      	movne	r3, #0
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	461a      	mov	r2, r3
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf8:	0c1b      	lsrs	r3, r3, #16
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	bf14      	ite	ne
 8003c10:	2301      	movne	r3, #1
 8003c12:	2300      	moveq	r3, #0
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	461a      	mov	r2, r3
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	bf14      	ite	ne
 8003c2e:	2301      	movne	r3, #1
 8003c30:	2300      	moveq	r3, #0
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	461a      	mov	r2, r3
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003c44:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003c54:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003c64:	f003 0308 	and.w	r3, r3, #8
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	bf14      	ite	ne
 8003c6c:	2301      	movne	r3, #1
 8003c6e:	2300      	moveq	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	461a      	mov	r2, r3
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003c82:	f003 0310 	and.w	r3, r3, #16
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	bf14      	ite	ne
 8003c8a:	2301      	movne	r3, #1
 8003c8c:	2300      	moveq	r3, #0
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	461a      	mov	r2, r3
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	bf0c      	ite	eq
 8003ca8:	2301      	moveq	r3, #1
 8003caa:	2300      	movne	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	461a      	mov	r2, r3
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e00a      	b.n	8003cee <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cdc:	2b10      	cmp	r3, #16
 8003cde:	d105      	bne.n	8003cec <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8003ce0:	6839      	ldr	r1, [r7, #0]
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f860 	bl	8003da8 <ETH_SetMACConfig>

    return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	e000      	b.n	8003cee <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
  }
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
	...

08003cf8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003d08:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d10:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003d12:	f003 f95d 	bl	8006fd0 <HAL_RCC_GetHCLKFreq>
 8003d16:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4a1e      	ldr	r2, [pc, #120]	; (8003d94 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d908      	bls.n	8003d32 <HAL_ETH_SetMDIOClockRange+0x3a>
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	4a1d      	ldr	r2, [pc, #116]	; (8003d98 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d804      	bhi.n	8003d32 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	e027      	b.n	8003d82 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	4a18      	ldr	r2, [pc, #96]	; (8003d98 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d908      	bls.n	8003d4c <HAL_ETH_SetMDIOClockRange+0x54>
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	4a17      	ldr	r2, [pc, #92]	; (8003d9c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d204      	bcs.n	8003d4c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003d48:	60fb      	str	r3, [r7, #12]
 8003d4a:	e01a      	b.n	8003d82 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	4a13      	ldr	r2, [pc, #76]	; (8003d9c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d303      	bcc.n	8003d5c <HAL_ETH_SetMDIOClockRange+0x64>
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	4a12      	ldr	r2, [pc, #72]	; (8003da0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d911      	bls.n	8003d80 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	4a10      	ldr	r2, [pc, #64]	; (8003da0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d908      	bls.n	8003d76 <HAL_ETH_SetMDIOClockRange+0x7e>
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	4a0f      	ldr	r2, [pc, #60]	; (8003da4 <HAL_ETH_SetMDIOClockRange+0xac>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d804      	bhi.n	8003d76 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	e005      	b.n	8003d82 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	e000      	b.n	8003d82 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003d80:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003d8c:	bf00      	nop
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	01312cff 	.word	0x01312cff
 8003d98:	02160ebf 	.word	0x02160ebf
 8003d9c:	03938700 	.word	0x03938700
 8003da0:	05f5e0ff 	.word	0x05f5e0ff
 8003da4:	08f0d17f 	.word	0x08f0d17f

08003da8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8003dba:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	791b      	ldrb	r3, [r3, #4]
 8003dc0:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8003dc2:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	7b1b      	ldrb	r3, [r3, #12]
 8003dc8:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003dca:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	7b5b      	ldrb	r3, [r3, #13]
 8003dd0:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003dd2:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	7b9b      	ldrb	r3, [r3, #14]
 8003dd8:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003dda:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	7bdb      	ldrb	r3, [r3, #15]
 8003de0:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003de2:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	7c12      	ldrb	r2, [r2, #16]
 8003de8:	2a00      	cmp	r2, #0
 8003dea:	d102      	bne.n	8003df2 <ETH_SetMACConfig+0x4a>
 8003dec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003df0:	e000      	b.n	8003df4 <ETH_SetMACConfig+0x4c>
 8003df2:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003df4:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	7c52      	ldrb	r2, [r2, #17]
 8003dfa:	2a00      	cmp	r2, #0
 8003dfc:	d102      	bne.n	8003e04 <ETH_SetMACConfig+0x5c>
 8003dfe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e02:	e000      	b.n	8003e06 <ETH_SetMACConfig+0x5e>
 8003e04:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003e06:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	7c9b      	ldrb	r3, [r3, #18]
 8003e0c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003e0e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003e14:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8003e1a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	7f1b      	ldrb	r3, [r3, #28]
 8003e20:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8003e22:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	7f5b      	ldrb	r3, [r3, #29]
 8003e28:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003e2a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	7f92      	ldrb	r2, [r2, #30]
 8003e30:	2a00      	cmp	r2, #0
 8003e32:	d102      	bne.n	8003e3a <ETH_SetMACConfig+0x92>
 8003e34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e38:	e000      	b.n	8003e3c <ETH_SetMACConfig+0x94>
 8003e3a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003e3c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	7fdb      	ldrb	r3, [r3, #31]
 8003e42:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8003e44:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003e4c:	2a00      	cmp	r2, #0
 8003e4e:	d102      	bne.n	8003e56 <ETH_SetMACConfig+0xae>
 8003e50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e54:	e000      	b.n	8003e58 <ETH_SetMACConfig+0xb0>
 8003e56:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8003e58:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8003e5e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e66:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8003e68:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	4b56      	ldr	r3, [pc, #344]	; (8003fd4 <ETH_SetMACConfig+0x22c>)
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6812      	ldr	r2, [r2, #0]
 8003e80:	68f9      	ldr	r1, [r7, #12]
 8003e82:	430b      	orrs	r3, r1
 8003e84:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e92:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003e94:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e9c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8003e9e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003ea6:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8003ea8:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003eb0:	2a00      	cmp	r2, #0
 8003eb2:	d102      	bne.n	8003eba <ETH_SetMACConfig+0x112>
 8003eb4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003eb8:	e000      	b.n	8003ebc <ETH_SetMACConfig+0x114>
 8003eba:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003ebc:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	4b42      	ldr	r3, [pc, #264]	; (8003fd8 <ETH_SetMACConfig+0x230>)
 8003ece:	4013      	ands	r3, r2
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6812      	ldr	r2, [r2, #0]
 8003ed4:	68f9      	ldr	r1, [r7, #12]
 8003ed6:	430b      	orrs	r3, r1
 8003ed8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ee0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68da      	ldr	r2, [r3, #12]
 8003ef0:	4b3a      	ldr	r3, [pc, #232]	; (8003fdc <ETH_SetMACConfig+0x234>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6812      	ldr	r2, [r2, #0]
 8003ef8:	68f9      	ldr	r1, [r7, #12]
 8003efa:	430b      	orrs	r3, r1
 8003efc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003f04:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003f0a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003f12:	2a00      	cmp	r2, #0
 8003f14:	d101      	bne.n	8003f1a <ETH_SetMACConfig+0x172>
 8003f16:	2280      	movs	r2, #128	; 0x80
 8003f18:	e000      	b.n	8003f1c <ETH_SetMACConfig+0x174>
 8003f1a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003f1c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f22:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f2e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003f32:	4013      	ands	r3, r2
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6812      	ldr	r2, [r2, #0]
 8003f38:	68f9      	ldr	r1, [r7, #12]
 8003f3a:	430b      	orrs	r3, r1
 8003f3c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003f44:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003f4c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5a:	f023 0103 	bic.w	r1, r3, #3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003f72:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003f8e:	2a00      	cmp	r2, #0
 8003f90:	d101      	bne.n	8003f96 <ETH_SetMACConfig+0x1ee>
 8003f92:	2240      	movs	r2, #64	; 0x40
 8003f94:	e000      	b.n	8003f98 <ETH_SetMACConfig+0x1f0>
 8003f96:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003f98:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003fa0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003fa2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003faa:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003fb8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003fc8:	bf00      	nop
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	00048083 	.word	0x00048083
 8003fd8:	c0f88000 	.word	0xc0f88000
 8003fdc:	fffffef0 	.word	0xfffffef0

08003fe0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	4b38      	ldr	r3, [pc, #224]	; (80040d8 <ETH_SetDMAConfig+0xf8>)
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	6812      	ldr	r2, [r2, #0]
 8003ffc:	6879      	ldr	r1, [r7, #4]
 8003ffe:	6809      	ldr	r1, [r1, #0]
 8004000:	431a      	orrs	r2, r3
 8004002:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8004006:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	791b      	ldrb	r3, [r3, #4]
 800400c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004012:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	7b1b      	ldrb	r3, [r3, #12]
 8004018:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	f241 0304 	movw	r3, #4100	; 0x1004
 8004026:	4413      	add	r3, r2
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	4b2c      	ldr	r3, [pc, #176]	; (80040dc <ETH_SetDMAConfig+0xfc>)
 800402c:	4013      	ands	r3, r2
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	6811      	ldr	r1, [r2, #0]
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	431a      	orrs	r2, r3
 8004036:	f241 0304 	movw	r3, #4100	; 0x1004
 800403a:	440b      	add	r3, r1
 800403c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	7b5b      	ldrb	r3, [r3, #13]
 8004042:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004048:	4313      	orrs	r3, r2
 800404a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	4b22      	ldr	r3, [pc, #136]	; (80040e0 <ETH_SetDMAConfig+0x100>)
 8004058:	4013      	ands	r3, r2
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6811      	ldr	r1, [r2, #0]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	431a      	orrs	r2, r3
 8004062:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8004066:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	7d1b      	ldrb	r3, [r3, #20]
 8004070:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004072:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	7f5b      	ldrb	r3, [r3, #29]
 8004078:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800407a:	4313      	orrs	r3, r2
 800407c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	f241 1304 	movw	r3, #4356	; 0x1104
 8004086:	4413      	add	r3, r2
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	4b16      	ldr	r3, [pc, #88]	; (80040e4 <ETH_SetDMAConfig+0x104>)
 800408c:	4013      	ands	r3, r2
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6811      	ldr	r1, [r2, #0]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	431a      	orrs	r2, r3
 8004096:	f241 1304 	movw	r3, #4356	; 0x1104
 800409a:	440b      	add	r3, r1
 800409c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	7f1b      	ldrb	r3, [r3, #28]
 80040a2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80040a8:	4313      	orrs	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	f241 1308 	movw	r3, #4360	; 0x1108
 80040b4:	4413      	add	r3, r2
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	4b0b      	ldr	r3, [pc, #44]	; (80040e8 <ETH_SetDMAConfig+0x108>)
 80040ba:	4013      	ands	r3, r2
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6811      	ldr	r1, [r2, #0]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	431a      	orrs	r2, r3
 80040c4:	f241 1308 	movw	r3, #4360	; 0x1108
 80040c8:	440b      	add	r3, r1
 80040ca:	601a      	str	r2, [r3, #0]
}
 80040cc:	bf00      	nop
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	ffff87fd 	.word	0xffff87fd
 80040dc:	ffff2ffe 	.word	0xffff2ffe
 80040e0:	fffec000 	.word	0xfffec000
 80040e4:	ffc0efef 	.word	0xffc0efef
 80040e8:	7fc0ffff 	.word	0x7fc0ffff

080040ec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b0a4      	sub	sp, #144	; 0x90
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80040f4:	2301      	movs	r3, #1
 80040f6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80040fa:	2300      	movs	r3, #0
 80040fc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80040fe:	2300      	movs	r3, #0
 8004100:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004104:	2300      	movs	r3, #0
 8004106:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800410a:	2301      	movs	r3, #1
 800410c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004110:	2301      	movs	r3, #1
 8004112:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004116:	2301      	movs	r3, #1
 8004118:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800411c:	2300      	movs	r3, #0
 800411e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004122:	2301      	movs	r3, #1
 8004124:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004128:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800412c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800412e:	2300      	movs	r3, #0
 8004130:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004134:	2300      	movs	r3, #0
 8004136:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004138:	2300      	movs	r3, #0
 800413a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800413e:	2300      	movs	r3, #0
 8004140:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004144:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004148:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800414a:	2300      	movs	r3, #0
 800414c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004150:	2300      	movs	r3, #0
 8004152:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004154:	2301      	movs	r3, #1
 8004156:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800415a:	2300      	movs	r3, #0
 800415c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004160:	2300      	movs	r3, #0
 8004162:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004166:	2300      	movs	r3, #0
 8004168:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800416a:	2300      	movs	r3, #0
 800416c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800416e:	2300      	movs	r3, #0
 8004170:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004172:	2300      	movs	r3, #0
 8004174:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004178:	2300      	movs	r3, #0
 800417a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800417e:	2301      	movs	r3, #1
 8004180:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004184:	2320      	movs	r3, #32
 8004186:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800418a:	2301      	movs	r3, #1
 800418c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004190:	2300      	movs	r3, #0
 8004192:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004196:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800419a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800419c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80041a0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80041a2:	2300      	movs	r3, #0
 80041a4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80041a8:	2302      	movs	r3, #2
 80041aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80041ae:	2300      	movs	r3, #0
 80041b0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80041b4:	2300      	movs	r3, #0
 80041b6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80041ba:	2300      	movs	r3, #0
 80041bc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80041c0:	2301      	movs	r3, #1
 80041c2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80041c6:	2300      	movs	r3, #0
 80041c8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80041ca:	2301      	movs	r3, #1
 80041cc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80041d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041d4:	4619      	mov	r1, r3
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7ff fde6 	bl	8003da8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80041dc:	2301      	movs	r3, #1
 80041de:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80041e0:	2301      	movs	r3, #1
 80041e2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80041e4:	2300      	movs	r3, #0
 80041e6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80041e8:	2300      	movs	r3, #0
 80041ea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80041ee:	2300      	movs	r3, #0
 80041f0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80041f2:	2300      	movs	r3, #0
 80041f4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80041f6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80041fa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80041fc:	2300      	movs	r3, #0
 80041fe:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004200:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004204:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004206:	2300      	movs	r3, #0
 8004208:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 800420c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004210:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004212:	f107 0308 	add.w	r3, r7, #8
 8004216:	4619      	mov	r1, r3
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f7ff fee1 	bl	8003fe0 <ETH_SetDMAConfig>
}
 800421e:	bf00      	nop
 8004220:	3790      	adds	r7, #144	; 0x90
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
	...

08004228 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004238:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004240:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004242:	f002 fec5 	bl	8006fd0 <HAL_RCC_GetHCLKFreq>
 8004246:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	4a1e      	ldr	r2, [pc, #120]	; (80042c4 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d908      	bls.n	8004262 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	4a1d      	ldr	r2, [pc, #116]	; (80042c8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d804      	bhi.n	8004262 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	e027      	b.n	80042b2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	4a18      	ldr	r2, [pc, #96]	; (80042c8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d908      	bls.n	800427c <ETH_MAC_MDIO_ClkConfig+0x54>
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	4a17      	ldr	r2, [pc, #92]	; (80042cc <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d204      	bcs.n	800427c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004278:	60fb      	str	r3, [r7, #12]
 800427a:	e01a      	b.n	80042b2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	4a13      	ldr	r2, [pc, #76]	; (80042cc <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d303      	bcc.n	800428c <ETH_MAC_MDIO_ClkConfig+0x64>
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	4a12      	ldr	r2, [pc, #72]	; (80042d0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d911      	bls.n	80042b0 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	4a10      	ldr	r2, [pc, #64]	; (80042d0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d908      	bls.n	80042a6 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	4a0f      	ldr	r2, [pc, #60]	; (80042d4 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d804      	bhi.n	80042a6 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a2:	60fb      	str	r3, [r7, #12]
 80042a4:	e005      	b.n	80042b2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	e000      	b.n	80042b2 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80042b0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80042bc:	bf00      	nop
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	01312cff 	.word	0x01312cff
 80042c8:	02160ebf 	.word	0x02160ebf
 80042cc:	03938700 	.word	0x03938700
 80042d0:	05f5e0ff 	.word	0x05f5e0ff
 80042d4:	08f0d17f 	.word	0x08f0d17f

080042d8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80042e0:	2300      	movs	r3, #0
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	e01d      	b.n	8004322 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68d9      	ldr	r1, [r3, #12]
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	4613      	mov	r3, r2
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	4413      	add	r3, r2
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	440b      	add	r3, r1
 80042f6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	2200      	movs	r2, #0
 8004302:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2200      	movs	r2, #0
 8004308:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	2200      	movs	r2, #0
 800430e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	3206      	adds	r2, #6
 8004318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	3301      	adds	r3, #1
 8004320:	60fb      	str	r3, [r7, #12]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2b03      	cmp	r3, #3
 8004326:	d9de      	bls.n	80042e6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	f241 132c 	movw	r3, #4396	; 0x112c
 8004336:	4413      	add	r3, r2
 8004338:	2203      	movs	r2, #3
 800433a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68d9      	ldr	r1, [r3, #12]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	f241 1314 	movw	r3, #4372	; 0x1114
 8004348:	4413      	add	r3, r2
 800434a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68da      	ldr	r2, [r3, #12]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8004358:	601a      	str	r2, [r3, #0]
}
 800435a:	bf00      	nop
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004366:	b480      	push	{r7}
 8004368:	b085      	sub	sp, #20
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	e024      	b.n	80043be <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6919      	ldr	r1, [r3, #16]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	4613      	mov	r3, r2
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	4413      	add	r3, r2
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	440b      	add	r3, r1
 8004384:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2200      	movs	r2, #0
 800438a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2200      	movs	r2, #0
 8004390:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	2200      	movs	r2, #0
 8004396:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	2200      	movs	r2, #0
 800439c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2200      	movs	r2, #0
 80043a2:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2200      	movs	r2, #0
 80043a8:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	6879      	ldr	r1, [r7, #4]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	3310      	adds	r3, #16
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	440b      	add	r3, r1
 80043b6:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	3301      	adds	r3, #1
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d9d7      	bls.n	8004374 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	f241 1330 	movw	r3, #4400	; 0x1130
 80043ea:	4413      	add	r3, r2
 80043ec:	2203      	movs	r2, #3
 80043ee:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6919      	ldr	r1, [r3, #16]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	f241 131c 	movw	r3, #4380	; 0x111c
 80043fc:	4413      	add	r3, r2
 80043fe:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	f241 1328 	movw	r3, #4392	; 0x1128
 8004410:	4413      	add	r3, r2
 8004412:	6019      	str	r1, [r3, #0]
}
 8004414:	bf00      	nop
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8004420:	b480      	push	{r7}
 8004422:	b08d      	sub	sp, #52	; 0x34
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	3318      	adds	r3, #24
 8004430:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 800443e:	2300      	movs	r3, #0
 8004440:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800444a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8004452:	2300      	movs	r3, #0
 8004454:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800445e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004462:	d007      	beq.n	8004474 <ETH_Prepare_Tx_Descriptors+0x54>
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004468:	3304      	adds	r3, #4
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004474:	2302      	movs	r3, #2
 8004476:	e24a      	b.n	800490e <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b00      	cmp	r3, #0
 8004482:	d044      	beq.n	800450e <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	68da      	ldr	r2, [r3, #12]
 8004488:	4b72      	ldr	r3, [pc, #456]	; (8004654 <ETH_Prepare_Tx_Descriptors+0x234>)
 800448a:	4013      	ands	r3, r2
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004490:	431a      	orrs	r2, r3
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8004496:	6a3b      	ldr	r3, [r7, #32]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80044b0:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0308 	and.w	r3, r3, #8
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d027      	beq.n	800450e <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80044be:	6a3b      	ldr	r3, [r7, #32]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c8:	041b      	lsls	r3, r3, #16
 80044ca:	431a      	orrs	r2, r3
 80044cc:	6a3b      	ldr	r3, [r7, #32]
 80044ce:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e8:	431a      	orrs	r2, r3
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80044fc:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800450c:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0310 	and.w	r3, r3, #16
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00e      	beq.n	8004538 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	4b4e      	ldr	r3, [pc, #312]	; (8004658 <ETH_Prepare_Tx_Descriptors+0x238>)
 8004520:	4013      	ands	r3, r2
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	6992      	ldr	r2, [r2, #24]
 8004526:	431a      	orrs	r2, r3
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b00      	cmp	r3, #0
 8004542:	d105      	bne.n	8004550 <ETH_Prepare_Tx_Descriptors+0x130>
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0310 	and.w	r3, r3, #16
 800454c:	2b00      	cmp	r3, #0
 800454e:	d030      	beq.n	80045b2 <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004564:	6a3b      	ldr	r3, [r7, #32]
 8004566:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800456a:	3301      	adds	r3, #1
 800456c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800456e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004570:	2b03      	cmp	r3, #3
 8004572:	d902      	bls.n	800457a <ETH_Prepare_Tx_Descriptors+0x15a>
 8004574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004576:	3b04      	subs	r3, #4
 8004578:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800457e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004582:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8004584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004586:	3301      	adds	r3, #1
 8004588:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004592:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004596:	d10c      	bne.n	80045b2 <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045a0:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80045a2:	6a3b      	ldr	r3, [r7, #32]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80045aa:	6a3b      	ldr	r3, [r7, #32]
 80045ac:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80045ae:	2302      	movs	r3, #2
 80045b0:	e1ad      	b.n	800490e <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80045b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b4:	3301      	adds	r3, #1
 80045b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	461a      	mov	r2, r3
 80045be:	6a3b      	ldr	r3, [r7, #32]
 80045c0:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	4b24      	ldr	r3, [pc, #144]	; (8004658 <ETH_Prepare_Tx_Descriptors+0x238>)
 80045c8:	4013      	ands	r3, r2
 80045ca:	69fa      	ldr	r2, [r7, #28]
 80045cc:	6852      	ldr	r2, [r2, #4]
 80045ce:	431a      	orrs	r2, r3
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d012      	beq.n	8004602 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	461a      	mov	r2, r3
 80045e8:	6a3b      	ldr	r3, [r7, #32]
 80045ea:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80045ec:	6a3b      	ldr	r3, [r7, #32]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	4b1a      	ldr	r3, [pc, #104]	; (800465c <ETH_Prepare_Tx_Descriptors+0x23c>)
 80045f2:	4013      	ands	r3, r2
 80045f4:	69fa      	ldr	r2, [r7, #28]
 80045f6:	6852      	ldr	r2, [r2, #4]
 80045f8:	0412      	lsls	r2, r2, #16
 80045fa:	431a      	orrs	r2, r3
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	609a      	str	r2, [r3, #8]
 8004600:	e008      	b.n	8004614 <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004602:	6a3b      	ldr	r3, [r7, #32]
 8004604:	2200      	movs	r2, #0
 8004606:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8004608:	6a3b      	ldr	r3, [r7, #32]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	4b13      	ldr	r3, [pc, #76]	; (800465c <ETH_Prepare_Tx_Descriptors+0x23c>)
 800460e:	4013      	ands	r3, r2
 8004610:	6a3a      	ldr	r2, [r7, #32]
 8004612:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0310 	and.w	r3, r3, #16
 800461c:	2b00      	cmp	r3, #0
 800461e:	d021      	beq.n	8004664 <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	04db      	lsls	r3, r3, #19
 800462e:	431a      	orrs	r2, r3
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	4b09      	ldr	r3, [pc, #36]	; (8004660 <ETH_Prepare_Tx_Descriptors+0x240>)
 800463a:	4013      	ands	r3, r2
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	69d2      	ldr	r2, [r2, #28]
 8004640:	431a      	orrs	r2, r3
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	60da      	str	r2, [r3, #12]
 8004652:	e02e      	b.n	80046b2 <ETH_Prepare_Tx_Descriptors+0x292>
 8004654:	ffff0000 	.word	0xffff0000
 8004658:	ffffc000 	.word	0xffffc000
 800465c:	c000ffff 	.word	0xc000ffff
 8004660:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	68da      	ldr	r2, [r3, #12]
 8004668:	4b93      	ldr	r3, [pc, #588]	; (80048b8 <ETH_Prepare_Tx_Descriptors+0x498>)
 800466a:	4013      	ands	r3, r2
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	6852      	ldr	r2, [r2, #4]
 8004670:	431a      	orrs	r2, r3
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	d008      	beq.n	8004694 <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	431a      	orrs	r2, r3
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0320 	and.w	r3, r3, #32
 800469c:	2b00      	cmp	r3, #0
 800469e:	d008      	beq.n	80046b2 <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80046a0:	6a3b      	ldr	r3, [r7, #32]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	431a      	orrs	r2, r3
 80046ae:	6a3b      	ldr	r3, [r7, #32]
 80046b0:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0304 	and.w	r3, r3, #4
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d008      	beq.n	80046d0 <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ca:	431a      	orrs	r2, r3
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80046d8:	6a3b      	ldr	r3, [r7, #32]
 80046da:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80046dc:	6a3b      	ldr	r3, [r7, #32]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80046f0:	6a3b      	ldr	r3, [r7, #32]
 80046f2:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 80cb 	beq.w	8004898 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8004702:	6a3b      	ldr	r3, [r7, #32]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	431a      	orrs	r2, r3
 8004710:	6a3b      	ldr	r3, [r7, #32]
 8004712:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004714:	e0c0      	b.n	8004898 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8004716:	6a3b      	ldr	r3, [r7, #32]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004724:	3301      	adds	r3, #1
 8004726:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472a:	2b03      	cmp	r3, #3
 800472c:	d902      	bls.n	8004734 <ETH_Prepare_Tx_Descriptors+0x314>
 800472e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004730:	3b04      	subs	r3, #4
 8004732:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800473c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800474a:	6a3b      	ldr	r3, [r7, #32]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004752:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004756:	d007      	beq.n	8004768 <ETH_Prepare_Tx_Descriptors+0x348>
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475c:	3304      	adds	r3, #4
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d026      	beq.n	80047b6 <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004774:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8004776:	2300      	movs	r3, #0
 8004778:	627b      	str	r3, [r7, #36]	; 0x24
 800477a:	e016      	b.n	80047aa <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478a:	3301      	adds	r3, #1
 800478c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800478e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004790:	2b03      	cmp	r3, #3
 8004792:	d902      	bls.n	800479a <ETH_Prepare_Tx_Descriptors+0x37a>
 8004794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004796:	3b04      	subs	r3, #4
 8004798:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800479e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047a2:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	3301      	adds	r3, #1
 80047a8:	627b      	str	r3, [r7, #36]	; 0x24
 80047aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d3e4      	bcc.n	800477c <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 80047b2:	2302      	movs	r3, #2
 80047b4:	e0ab      	b.n	800490e <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 80047b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b8:	3301      	adds	r3, #1
 80047ba:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	461a      	mov	r2, r3
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80047cc:	6a3b      	ldr	r3, [r7, #32]
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	4b3a      	ldr	r3, [pc, #232]	; (80048bc <ETH_Prepare_Tx_Descriptors+0x49c>)
 80047d2:	4013      	ands	r3, r2
 80047d4:	69fa      	ldr	r2, [r7, #28]
 80047d6:	6852      	ldr	r2, [r2, #4]
 80047d8:	431a      	orrs	r2, r3
 80047da:	6a3b      	ldr	r3, [r7, #32]
 80047dc:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d012      	beq.n	800480c <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	461a      	mov	r2, r3
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	689a      	ldr	r2, [r3, #8]
 80047fa:	4b31      	ldr	r3, [pc, #196]	; (80048c0 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80047fc:	4013      	ands	r3, r2
 80047fe:	69fa      	ldr	r2, [r7, #28]
 8004800:	6852      	ldr	r2, [r2, #4]
 8004802:	0412      	lsls	r2, r2, #16
 8004804:	431a      	orrs	r2, r3
 8004806:	6a3b      	ldr	r3, [r7, #32]
 8004808:	609a      	str	r2, [r3, #8]
 800480a:	e008      	b.n	800481e <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 800480c:	6a3b      	ldr	r3, [r7, #32]
 800480e:	2200      	movs	r2, #0
 8004810:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	689a      	ldr	r2, [r3, #8]
 8004816:	4b2a      	ldr	r3, [pc, #168]	; (80048c0 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8004818:	4013      	ands	r3, r2
 800481a:	6a3a      	ldr	r2, [r7, #32]
 800481c:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0310 	and.w	r3, r3, #16
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00f      	beq.n	800484a <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800482a:	6a3b      	ldr	r3, [r7, #32]
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	4b25      	ldr	r3, [pc, #148]	; (80048c4 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8004830:	4013      	ands	r3, r2
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	69d2      	ldr	r2, [r2, #28]
 8004836:	431a      	orrs	r2, r3
 8004838:	6a3b      	ldr	r3, [r7, #32]
 800483a:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004844:	6a3b      	ldr	r3, [r7, #32]
 8004846:	60da      	str	r2, [r3, #12]
 8004848:	e017      	b.n	800487a <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800484a:	6a3b      	ldr	r3, [r7, #32]
 800484c:	68da      	ldr	r2, [r3, #12]
 800484e:	4b1a      	ldr	r3, [pc, #104]	; (80048b8 <ETH_Prepare_Tx_Descriptors+0x498>)
 8004850:	4013      	ands	r3, r2
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	6852      	ldr	r2, [r2, #4]
 8004856:	431a      	orrs	r2, r3
 8004858:	6a3b      	ldr	r3, [r7, #32]
 800485a:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b00      	cmp	r3, #0
 8004866:	d008      	beq.n	800487a <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8004868:	6a3b      	ldr	r3, [r7, #32]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	431a      	orrs	r2, r3
 8004876:	6a3b      	ldr	r3, [r7, #32]
 8004878:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	3301      	adds	r3, #1
 800487e:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004880:	6a3b      	ldr	r3, [r7, #32]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004888:	6a3b      	ldr	r3, [r7, #32]
 800488a:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	f47f af3a 	bne.w	8004716 <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00f      	beq.n	80048c8 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80048a8:	6a3b      	ldr	r3, [r7, #32]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80048b0:	6a3b      	ldr	r3, [r7, #32]
 80048b2:	609a      	str	r2, [r3, #8]
 80048b4:	e00e      	b.n	80048d4 <ETH_Prepare_Tx_Descriptors+0x4b4>
 80048b6:	bf00      	nop
 80048b8:	ffff8000 	.word	0xffff8000
 80048bc:	ffffc000 	.word	0xffffc000
 80048c0:	c000ffff 	.word	0xc000ffff
 80048c4:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048e4:	6979      	ldr	r1, [r7, #20]
 80048e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e8:	3304      	adds	r3, #4
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	440b      	add	r3, r1
 80048ee:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048f4:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80048f6:	b672      	cpsid	i
}
 80048f8:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	4413      	add	r3, r2
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8004908:	b662      	cpsie	i
}
 800490a:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3734      	adds	r7, #52	; 0x34
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop

0800491c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b098      	sub	sp, #96	; 0x60
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004924:	4a84      	ldr	r2, [pc, #528]	; (8004b38 <HAL_FDCAN_Init+0x21c>)
 8004926:	f107 030c 	add.w	r3, r7, #12
 800492a:	4611      	mov	r1, r2
 800492c:	224c      	movs	r2, #76	; 0x4c
 800492e:	4618      	mov	r0, r3
 8004930:	f015 f80f 	bl	8019952 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e1ca      	b.n	8004cd4 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a7e      	ldr	r2, [pc, #504]	; (8004b3c <HAL_FDCAN_Init+0x220>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d106      	bne.n	8004956 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004950:	461a      	mov	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d106      	bne.n	8004970 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fc fa4e 	bl	8000e0c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	699a      	ldr	r2, [r3, #24]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 0210 	bic.w	r2, r2, #16
 800497e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004980:	f7fd ff80 	bl	8002884 <HAL_GetTick>
 8004984:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004986:	e014      	b.n	80049b2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004988:	f7fd ff7c 	bl	8002884 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b0a      	cmp	r3, #10
 8004994:	d90d      	bls.n	80049b2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800499c:	f043 0201 	orr.w	r2, r3, #1
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2203      	movs	r2, #3
 80049aa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e190      	b.n	8004cd4 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	f003 0308 	and.w	r3, r3, #8
 80049bc:	2b08      	cmp	r3, #8
 80049be:	d0e3      	beq.n	8004988 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699a      	ldr	r2, [r3, #24]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 0201 	orr.w	r2, r2, #1
 80049ce:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049d0:	f7fd ff58 	bl	8002884 <HAL_GetTick>
 80049d4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80049d6:	e014      	b.n	8004a02 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80049d8:	f7fd ff54 	bl	8002884 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b0a      	cmp	r3, #10
 80049e4:	d90d      	bls.n	8004a02 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049ec:	f043 0201 	orr.w	r2, r3, #1
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2203      	movs	r2, #3
 80049fa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e168      	b.n	8004cd4 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d0e3      	beq.n	80049d8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699a      	ldr	r2, [r3, #24]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0202 	orr.w	r2, r2, #2
 8004a1e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	7c1b      	ldrb	r3, [r3, #16]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d108      	bne.n	8004a3a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	699a      	ldr	r2, [r3, #24]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a36:	619a      	str	r2, [r3, #24]
 8004a38:	e007      	b.n	8004a4a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	699a      	ldr	r2, [r3, #24]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a48:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	7c5b      	ldrb	r3, [r3, #17]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d108      	bne.n	8004a64 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	699a      	ldr	r2, [r3, #24]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a60:	619a      	str	r2, [r3, #24]
 8004a62:	e007      	b.n	8004a74 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	699a      	ldr	r2, [r3, #24]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a72:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	7c9b      	ldrb	r3, [r3, #18]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d108      	bne.n	8004a8e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699a      	ldr	r2, [r3, #24]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a8a:	619a      	str	r2, [r3, #24]
 8004a8c:	e007      	b.n	8004a9e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	699a      	ldr	r2, [r3, #24]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a9c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	699a      	ldr	r2, [r3, #24]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004ac2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	691a      	ldr	r2, [r3, #16]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0210 	bic.w	r2, r2, #16
 8004ad2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d108      	bne.n	8004aee <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	699a      	ldr	r2, [r3, #24]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0204 	orr.w	r2, r2, #4
 8004aea:	619a      	str	r2, [r3, #24]
 8004aec:	e030      	b.n	8004b50 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d02c      	beq.n	8004b50 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d020      	beq.n	8004b40 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	699a      	ldr	r2, [r3, #24]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b0c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f042 0210 	orr.w	r2, r2, #16
 8004b1c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	2b03      	cmp	r3, #3
 8004b24:	d114      	bne.n	8004b50 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	699a      	ldr	r2, [r3, #24]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f042 0220 	orr.w	r2, r2, #32
 8004b34:	619a      	str	r2, [r3, #24]
 8004b36:	e00b      	b.n	8004b50 <HAL_FDCAN_Init+0x234>
 8004b38:	0801aa04 	.word	0x0801aa04
 8004b3c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	699a      	ldr	r2, [r3, #24]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f042 0220 	orr.w	r2, r2, #32
 8004b4e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	3b01      	subs	r3, #1
 8004b56:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004b60:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004b68:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	3b01      	subs	r3, #1
 8004b72:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004b78:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004b7a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b84:	d115      	bne.n	8004bb2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b90:	3b01      	subs	r3, #1
 8004b92:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004b94:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004b9e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004bae:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004bb0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bd8:	4413      	add	r3, r2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d012      	beq.n	8004c04 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004be6:	f023 0107 	bic.w	r1, r3, #7
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d012      	beq.n	8004c32 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004c14:	f023 0107 	bic.w	r1, r3, #7
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004c22:	4413      	add	r3, r2
 8004c24:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d013      	beq.n	8004c62 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004c42:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004c50:	4413      	add	r3, r2
 8004c52:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004c56:	011a      	lsls	r2, r3, #4
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d013      	beq.n	8004c92 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004c72:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004c80:	4413      	add	r3, r2
 8004c82:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004c86:	021a      	lsls	r2, r3, #8
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a11      	ldr	r2, [pc, #68]	; (8004cdc <HAL_FDCAN_Init+0x3c0>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d107      	bne.n	8004cac <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	689a      	ldr	r2, [r3, #8]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f022 0203 	bic.w	r2, r2, #3
 8004caa:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 fe73 	bl	80059b0 <FDCAN_CalcultateRamBlockAddresses>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004cd0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3760      	adds	r7, #96	; 0x60
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	4000a000 	.word	0x4000a000

08004ce0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004cf0:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004cf2:	7bfb      	ldrb	r3, [r7, #15]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d002      	beq.n	8004cfe <HAL_FDCAN_ConfigFilter+0x1e>
 8004cf8:	7bfb      	ldrb	r3, [r7, #15]
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d157      	bne.n	8004dae <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d12b      	bne.n	8004d5e <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	2b07      	cmp	r3, #7
 8004d0c:	d10d      	bne.n	8004d2a <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	69db      	ldr	r3, [r3, #28]
 8004d18:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8004d1a:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004d20:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8004d22:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	e00e      	b.n	8004d48 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004d36:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8004d3e:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004d44:	4313      	orrs	r3, r2
 8004d46:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	e025      	b.n	8004daa <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	075a      	lsls	r2, r3, #29
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	2b07      	cmp	r3, #7
 8004d72:	d103      	bne.n	8004d7c <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	613b      	str	r3, [r7, #16]
 8004d7a:	e006      	b.n	8004d8a <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	079a      	lsls	r2, r3, #30
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	00db      	lsls	r3, r3, #3
 8004d94:	4413      	add	r3, r2
 8004d96:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	3304      	adds	r3, #4
 8004da2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	e008      	b.n	8004dc0 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004db4:	f043 0202 	orr.w	r2, r3, #2
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
  }
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	371c      	adds	r7, #28
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
 8004dd8:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d110      	bne.n	8004e08 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004dee:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8004df4:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004e00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8004e04:	2300      	movs	r3, #0
 8004e06:	e008      	b.n	8004e1a <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e0e:	f043 0204 	orr.w	r2, r3, #4
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
  }
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <HAL_FDCAN_ConfigFifoWatermark>:
  *           - 0 and 32, if FIFO is FDCAN_CFG_TX_EVENT_FIFO
  *           - 0 and 64, if FIFO is FDCAN_CFG_RX_FIFO0 or FDCAN_CFG_RX_FIFO1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFifoWatermark(FDCAN_HandleTypeDef *hfdcan, uint32_t FIFO, uint32_t Watermark)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b085      	sub	sp, #20
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	60f8      	str	r0, [r7, #12]
 8004e2e:	60b9      	str	r1, [r7, #8]
 8004e30:	607a      	str	r2, [r7, #4]
  else /* (FIFO == FDCAN_CFG_RX_FIFO0) || (FIFO == FDCAN_CFG_RX_FIFO1) */
  {
    assert_param(IS_FDCAN_MAX_VALUE(Watermark, 64U));
  }

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d130      	bne.n	8004ea0 <HAL_FDCAN_ConfigFifoWatermark+0x7a>
  {
    /* Set the level for FIFO watermark interrupt */
    if (FIFO == FDCAN_CFG_TX_EVENT_FIFO)
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10d      	bne.n	8004e60 <HAL_FDCAN_ConfigFifoWatermark+0x3a>
    {
      MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFWM, (Watermark << FDCAN_TXEFC_EFWM_Pos));
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e4c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	061a      	lsls	r2, r3, #24
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8004e5e:	e01d      	b.n	8004e9c <HAL_FDCAN_ConfigFifoWatermark+0x76>
    }
    else if (FIFO == FDCAN_CFG_RX_FIFO0)
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d10d      	bne.n	8004e82 <HAL_FDCAN_ConfigFifoWatermark+0x5c>
    {
      MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0WM, (Watermark << FDCAN_RXF0C_F0WM_Pos));
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004e6e:	f023 41fe 	bic.w	r1, r3, #2130706432	; 0x7f000000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	061a      	lsls	r2, r3, #24
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8004e80:	e00c      	b.n	8004e9c <HAL_FDCAN_ConfigFifoWatermark+0x76>
    }
    else /* FIFO == FDCAN_CFG_RX_FIFO1 */
    {
      MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1WM, (Watermark << FDCAN_RXF1C_F1WM_Pos));
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e8a:	f023 41fe 	bic.w	r1, r3, #2130706432	; 0x7f000000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	061a      	lsls	r2, r3, #24
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    /* Return function status */
    return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	e008      	b.n	8004eb2 <HAL_FDCAN_ConfigFifoWatermark+0x8c>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ea6:	f043 0204 	orr.w	r2, r3, #4
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
  }
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d111      	bne.n	8004ef6 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2202      	movs	r2, #2
 8004ed6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	699a      	ldr	r2, [r3, #24]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f022 0201 	bic.w	r2, r2, #1
 8004ee8:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	e008      	b.n	8004f08 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004efc:	f043 0204 	orr.w	r2, r3, #4
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
  }
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d141      	bne.n	8004fb0 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004f34:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d109      	bne.n	8004f50 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f42:	f043 0220 	orr.w	r2, r3, #32
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e038      	b.n	8004fc2 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004f58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d009      	beq.n	8004f74 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f66:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e026      	b.n	8004fc2 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004f7c:	0c1b      	lsrs	r3, r3, #16
 8004f7e:	f003 031f 	and.w	r3, r3, #31
 8004f82:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	68b9      	ldr	r1, [r7, #8]
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f000 fe96 	bl	8005cbc <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2101      	movs	r1, #1
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	fa01 f202 	lsl.w	r2, r1, r2
 8004f9c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	409a      	lsls	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8004fac:	2300      	movs	r3, #0
 8004fae:	e008      	b.n	8004fc2 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fb6:	f043 0208 	orr.w	r2, r3, #8
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
  }
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3718      	adds	r7, #24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
	...

08004fcc <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b08b      	sub	sp, #44	; 0x2c
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
 8004fd8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004fe4:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8004fe6:	7efb      	ldrb	r3, [r7, #27]
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	f040 814b 	bne.w	8005284 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	2b40      	cmp	r3, #64	; 0x40
 8004ff2:	d14d      	bne.n	8005090 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ffc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d109      	bne.n	8005018 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800500a:	f043 0220 	orr.w	r2, r3, #32
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e13e      	b.n	8005296 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005024:	2b00      	cmp	r3, #0
 8005026:	d109      	bne.n	800503c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800502e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e12c      	b.n	8005296 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005044:	0e1b      	lsrs	r3, r3, #24
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b01      	cmp	r3, #1
 800504c:	d10b      	bne.n	8005066 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005056:	0fdb      	lsrs	r3, r3, #31
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005060:	d101      	bne.n	8005066 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005062:	2301      	movs	r3, #1
 8005064:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800506e:	0a1b      	lsrs	r3, r3, #8
 8005070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005074:	69fa      	ldr	r2, [r7, #28]
 8005076:	4413      	add	r3, r2
 8005078:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005082:	69f9      	ldr	r1, [r7, #28]
 8005084:	fb01 f303 	mul.w	r3, r1, r3
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4413      	add	r3, r2
 800508c:	627b      	str	r3, [r7, #36]	; 0x24
 800508e:	e069      	b.n	8005164 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	2b41      	cmp	r3, #65	; 0x41
 8005094:	d14d      	bne.n	8005132 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800509e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d109      	bne.n	80050ba <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050ac:	f043 0220 	orr.w	r2, r3, #32
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e0ed      	b.n	8005296 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80050c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d109      	bne.n	80050de <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e0db      	b.n	8005296 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80050e6:	0e1b      	lsrs	r3, r3, #24
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d10b      	bne.n	8005108 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050f8:	0fdb      	lsrs	r3, r3, #31
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005102:	d101      	bne.n	8005108 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005104:	2301      	movs	r3, #1
 8005106:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005110:	0a1b      	lsrs	r3, r3, #8
 8005112:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005116:	69fa      	ldr	r2, [r7, #28]
 8005118:	4413      	add	r3, r2
 800511a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005124:	69f9      	ldr	r1, [r7, #28]
 8005126:	fb01 f303 	mul.w	r3, r1, r3
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4413      	add	r3, r2
 800512e:	627b      	str	r3, [r7, #36]	; 0x24
 8005130:	e018      	b.n	8005164 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	429a      	cmp	r2, r3
 800513a:	d309      	bcc.n	8005150 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005142:	f043 0220 	orr.w	r2, r3, #32
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e0a2      	b.n	8005296 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005158:	68b9      	ldr	r1, [r7, #8]
 800515a:	fb01 f303 	mul.w	r3, r1, r3
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4413      	add	r3, r2
 8005162:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d107      	bne.n	8005188 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	0c9b      	lsrs	r3, r3, #18
 800517e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	e005      	b.n	8005194 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	3304      	adds	r3, #4
 80051b0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80051e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	0e1b      	lsrs	r3, r3, #24
 80051e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	0fda      	lsrs	r2, r3, #31
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	3304      	adds	r3, #4
 80051fc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8005202:	2300      	movs	r3, #0
 8005204:	623b      	str	r3, [r7, #32]
 8005206:	e00a      	b.n	800521e <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	441a      	add	r2, r3
 800520e:	6839      	ldr	r1, [r7, #0]
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	440b      	add	r3, r1
 8005214:	7812      	ldrb	r2, [r2, #0]
 8005216:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	3301      	adds	r3, #1
 800521c:	623b      	str	r3, [r7, #32]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	0c1b      	lsrs	r3, r3, #16
 8005224:	4a1f      	ldr	r2, [pc, #124]	; (80052a4 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8005226:	5cd3      	ldrb	r3, [r2, r3]
 8005228:	461a      	mov	r2, r3
 800522a:	6a3b      	ldr	r3, [r7, #32]
 800522c:	4293      	cmp	r3, r2
 800522e:	d3eb      	bcc.n	8005208 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2b40      	cmp	r3, #64	; 0x40
 8005234:	d105      	bne.n	8005242 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	69fa      	ldr	r2, [r7, #28]
 800523c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8005240:	e01e      	b.n	8005280 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	2b41      	cmp	r3, #65	; 0x41
 8005246:	d105      	bne.n	8005254 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	69fa      	ldr	r2, [r7, #28]
 800524e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8005252:	e015      	b.n	8005280 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	2b1f      	cmp	r3, #31
 8005258:	d808      	bhi.n	800526c <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2101      	movs	r1, #1
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	fa01 f202 	lsl.w	r2, r1, r2
 8005266:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800526a:	e009      	b.n	8005280 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	f003 021f 	and.w	r2, r3, #31
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2101      	movs	r1, #1
 8005278:	fa01 f202 	lsl.w	r2, r1, r2
 800527c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8005280:	2300      	movs	r3, #0
 8005282:	e008      	b.n	8005296 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800528a:	f043 0208 	orr.w	r2, r3, #8
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
  }
}
 8005296:	4618      	mov	r0, r3
 8005298:	372c      	adds	r7, #44	; 0x2c
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	0801dd6c 	.word	0x0801dd6c

080052a8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80052ba:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80052bc:	7dfb      	ldrb	r3, [r7, #23]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d002      	beq.n	80052c8 <HAL_FDCAN_ActivateNotification+0x20>
 80052c2:	7dfb      	ldrb	r3, [r7, #23]
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d155      	bne.n	8005374 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	4013      	ands	r3, r2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d108      	bne.n	80052e8 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f042 0201 	orr.w	r2, r2, #1
 80052e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80052e6:	e014      	b.n	8005312 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	4013      	ands	r3, r2
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d108      	bne.n	800530a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0202 	orr.w	r2, r2, #2
 8005306:	65da      	str	r2, [r3, #92]	; 0x5c
 8005308:	e003      	b.n	8005312 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2203      	movs	r2, #3
 8005310:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005318:	2b00      	cmp	r3, #0
 800531a:	d009      	beq.n	8005330 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	430a      	orrs	r2, r1
 800532c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005336:	2b00      	cmp	r3, #0
 8005338:	d009      	beq.n	800534e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	430a      	orrs	r2, r1
 800534a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	4b0f      	ldr	r3, [pc, #60]	; (8005394 <HAL_FDCAN_ActivateNotification+0xec>)
 8005358:	4013      	ands	r3, r2
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	6812      	ldr	r2, [r2, #0]
 800535e:	430b      	orrs	r3, r1
 8005360:	6553      	str	r3, [r2, #84]	; 0x54
 8005362:	4b0d      	ldr	r3, [pc, #52]	; (8005398 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005364:	695a      	ldr	r2, [r3, #20]
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	0f9b      	lsrs	r3, r3, #30
 800536a:	490b      	ldr	r1, [pc, #44]	; (8005398 <HAL_FDCAN_ActivateNotification+0xf0>)
 800536c:	4313      	orrs	r3, r2
 800536e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8005370:	2300      	movs	r3, #0
 8005372:	e008      	b.n	8005386 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800537a:	f043 0202 	orr.w	r2, r3, #2
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
  }
}
 8005386:	4618      	mov	r0, r3
 8005388:	371c      	adds	r7, #28
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	3fcfffff 	.word	0x3fcfffff
 8005398:	4000a800 	.word	0x4000a800

0800539c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b092      	sub	sp, #72	; 0x48
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80053a4:	4b90      	ldr	r3, [pc, #576]	; (80055e8 <HAL_FDCAN_IRQHandler+0x24c>)
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	079b      	lsls	r3, r3, #30
 80053aa:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80053ac:	4b8e      	ldr	r3, [pc, #568]	; (80055e8 <HAL_FDCAN_IRQHandler+0x24c>)
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	079b      	lsls	r3, r3, #30
 80053b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053b4:	4013      	ands	r3, r2
 80053b6:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053be:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80053c2:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053cc:	4013      	ands	r3, r2
 80053ce:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d6:	f003 030f 	and.w	r3, r3, #15
 80053da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053e4:	4013      	ands	r3, r2
 80053e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053fc:	4013      	ands	r3, r2
 80053fe:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005406:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 800540a:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005414:	4013      	ands	r3, r2
 8005416:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800541e:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8005422:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800542c:	4013      	ands	r3, r2
 800542e:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543a:	2b00      	cmp	r3, #0
 800543c:	d011      	beq.n	8005462 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00a      	beq.n	8005462 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005454:	651a      	str	r2, [r3, #80]	; 0x50
 8005456:	4b64      	ldr	r3, [pc, #400]	; (80055e8 <HAL_FDCAN_IRQHandler+0x24c>)
 8005458:	2200      	movs	r2, #0
 800545a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 fa5a 	bl	8005916 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800546c:	2b00      	cmp	r3, #0
 800546e:	d01e      	beq.n	80054ae <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800547a:	2b00      	cmp	r3, #0
 800547c:	d017      	beq.n	80054ae <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005486:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005492:	4013      	ands	r3, r2
 8005494:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800549e:	651a      	str	r2, [r3, #80]	; 0x50
 80054a0:	4b51      	ldr	r3, [pc, #324]	; (80055e8 <HAL_FDCAN_IRQHandler+0x24c>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80054a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 fa0b 	bl	80058c4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80054ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00d      	beq.n	80054d0 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054ba:	4b4c      	ldr	r3, [pc, #304]	; (80055ec <HAL_FDCAN_IRQHandler+0x250>)
 80054bc:	400b      	ands	r3, r1
 80054be:	6513      	str	r3, [r2, #80]	; 0x50
 80054c0:	4a49      	ldr	r2, [pc, #292]	; (80055e8 <HAL_FDCAN_IRQHandler+0x24c>)
 80054c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054c4:	0f9b      	lsrs	r3, r3, #30
 80054c6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80054c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f9c4 	bl	8005858 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80054d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00d      	beq.n	80054f2 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054dc:	4b43      	ldr	r3, [pc, #268]	; (80055ec <HAL_FDCAN_IRQHandler+0x250>)
 80054de:	400b      	ands	r3, r1
 80054e0:	6513      	str	r3, [r2, #80]	; 0x50
 80054e2:	4a41      	ldr	r2, [pc, #260]	; (80055e8 <HAL_FDCAN_IRQHandler+0x24c>)
 80054e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054e6:	0f9b      	lsrs	r3, r3, #30
 80054e8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80054ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f9be 	bl	800586e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80054f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00d      	beq.n	8005514 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054fe:	4b3b      	ldr	r3, [pc, #236]	; (80055ec <HAL_FDCAN_IRQHandler+0x250>)
 8005500:	400b      	ands	r3, r1
 8005502:	6513      	str	r3, [r2, #80]	; 0x50
 8005504:	4a38      	ldr	r2, [pc, #224]	; (80055e8 <HAL_FDCAN_IRQHandler+0x24c>)
 8005506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005508:	0f9b      	lsrs	r3, r3, #30
 800550a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800550c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7fb fda2 	bl	8001058 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00d      	beq.n	8005536 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005520:	4b32      	ldr	r3, [pc, #200]	; (80055ec <HAL_FDCAN_IRQHandler+0x250>)
 8005522:	400b      	ands	r3, r1
 8005524:	6513      	str	r3, [r2, #80]	; 0x50
 8005526:	4a30      	ldr	r2, [pc, #192]	; (80055e8 <HAL_FDCAN_IRQHandler+0x24c>)
 8005528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552a:	0f9b      	lsrs	r3, r3, #30
 800552c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800552e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 f9a7 	bl	8005884 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800553c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005540:	2b00      	cmp	r3, #0
 8005542:	d011      	beq.n	8005568 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800554a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00a      	beq.n	8005568 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800555a:	651a      	str	r2, [r3, #80]	; 0x50
 800555c:	4b22      	ldr	r3, [pc, #136]	; (80055e8 <HAL_FDCAN_IRQHandler+0x24c>)
 800555e:	2200      	movs	r2, #0
 8005560:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f999 	bl	800589a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800556e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005572:	2b00      	cmp	r3, #0
 8005574:	d01e      	beq.n	80055b4 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800557c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005580:	2b00      	cmp	r3, #0
 8005582:	d017      	beq.n	80055b4 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800558c:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005596:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005598:	4013      	ands	r3, r2
 800559a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055a4:	651a      	str	r2, [r3, #80]	; 0x50
 80055a6:	4b10      	ldr	r3, [pc, #64]	; (80055e8 <HAL_FDCAN_IRQHandler+0x24c>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80055ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f97d 	bl	80058ae <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d016      	beq.n	80055f0 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00f      	beq.n	80055f0 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80055d8:	651a      	str	r2, [r3, #80]	; 0x50
 80055da:	4b03      	ldr	r3, [pc, #12]	; (80055e8 <HAL_FDCAN_IRQHandler+0x24c>)
 80055dc:	2200      	movs	r2, #0
 80055de:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f97a 	bl	80058da <HAL_FDCAN_RxBufferNewMessageCallback>
 80055e6:	e003      	b.n	80055f0 <HAL_FDCAN_IRQHandler+0x254>
 80055e8:	4000a800 	.word	0x4000a800
 80055ec:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d011      	beq.n	8005622 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00a      	beq.n	8005622 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005614:	651a      	str	r2, [r3, #80]	; 0x50
 8005616:	4b8d      	ldr	r3, [pc, #564]	; (800584c <HAL_FDCAN_IRQHandler+0x4b0>)
 8005618:	2200      	movs	r2, #0
 800561a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f966 	bl	80058ee <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005628:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d011      	beq.n	8005654 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005636:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00a      	beq.n	8005654 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005646:	651a      	str	r2, [r3, #80]	; 0x50
 8005648:	4b80      	ldr	r3, [pc, #512]	; (800584c <HAL_FDCAN_IRQHandler+0x4b0>)
 800564a:	2200      	movs	r2, #0
 800564c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f957 	bl	8005902 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d016      	beq.n	8005690 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00f      	beq.n	8005690 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005678:	651a      	str	r2, [r3, #80]	; 0x50
 800567a:	4b74      	ldr	r3, [pc, #464]	; (800584c <HAL_FDCAN_IRQHandler+0x4b0>)
 800567c:	2200      	movs	r2, #0
 800567e:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005686:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00d      	beq.n	80056b2 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800569c:	4b6c      	ldr	r3, [pc, #432]	; (8005850 <HAL_FDCAN_IRQHandler+0x4b4>)
 800569e:	400b      	ands	r3, r1
 80056a0:	6513      	str	r3, [r2, #80]	; 0x50
 80056a2:	4a6a      	ldr	r2, [pc, #424]	; (800584c <HAL_FDCAN_IRQHandler+0x4b0>)
 80056a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a6:	0f9b      	lsrs	r3, r3, #30
 80056a8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80056aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f946 	bl	800593e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80056b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d011      	beq.n	80056dc <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80056be:	4b64      	ldr	r3, [pc, #400]	; (8005850 <HAL_FDCAN_IRQHandler+0x4b4>)
 80056c0:	400b      	ands	r3, r1
 80056c2:	6513      	str	r3, [r2, #80]	; 0x50
 80056c4:	4a61      	ldr	r2, [pc, #388]	; (800584c <HAL_FDCAN_IRQHandler+0x4b0>)
 80056c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c8:	0f9b      	lsrs	r3, r3, #30
 80056ca:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80056d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d4:	431a      	orrs	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a5c      	ldr	r2, [pc, #368]	; (8005854 <HAL_FDCAN_IRQHandler+0x4b8>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	f040 80a6 	bne.w	8005834 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f003 0303 	and.w	r3, r3, #3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f000 809e 	beq.w	8005834 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	f003 030f 	and.w	r3, r3, #15
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800570c:	4013      	ands	r3, r2
 800570e:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800571a:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	6a3a      	ldr	r2, [r7, #32]
 8005724:	4013      	ands	r3, r2
 8005726:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005732:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573a:	69fa      	ldr	r2, [r7, #28]
 800573c:	4013      	ands	r3, r2
 800573e:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 800574a:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	4013      	ands	r3, r2
 8005756:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8005762:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	4013      	ands	r3, r2
 800576e:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	2b00      	cmp	r3, #0
 8005774:	d007      	beq.n	8005786 <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800577c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800577e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 f8e7 	bl	8005954 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8005786:	6a3b      	ldr	r3, [r7, #32]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d007      	beq.n	800579c <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	6a3a      	ldr	r2, [r7, #32]
 8005792:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005794:	6a39      	ldr	r1, [r7, #32]
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f8e7 	bl	800596a <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d01b      	beq.n	80057e2 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d014      	beq.n	80057e2 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057be:	0c1b      	lsrs	r3, r3, #16
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057ce:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	2240      	movs	r2, #64	; 0x40
 80057d6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	6939      	ldr	r1, [r7, #16]
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f8cf 	bl	8005980 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d007      	beq.n	80057f8 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	69fa      	ldr	r2, [r7, #28]
 80057ee:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80057f0:	69f9      	ldr	r1, [r7, #28]
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f8d0 	bl	8005998 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00b      	beq.n	8005816 <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	69ba      	ldr	r2, [r7, #24]
 8005804:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	431a      	orrs	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00b      	beq.n	8005834 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	431a      	orrs	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800583a:	2b00      	cmp	r3, #0
 800583c:	d002      	beq.n	8005844 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f873 	bl	800592a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005844:	bf00      	nop
 8005846:	3748      	adds	r7, #72	; 0x48
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	4000a800 	.word	0x4000a800
 8005850:	3fcfffff 	.word	0x3fcfffff
 8005854:	4000a000 	.word	0x4000a000

08005858 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8005862:	bf00      	nop
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800586e:	b480      	push	{r7}
 8005870:	b083      	sub	sp, #12
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
 8005876:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800588e:	bf00      	nop
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800589a:	b480      	push	{r7}
 800589c:	b083      	sub	sp, #12
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80058a2:	bf00      	nop
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b083      	sub	sp, #12
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
 80058b6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80058ce:	bf00      	nop
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80058da:	b480      	push	{r7}
 80058dc:	b083      	sub	sp, #12
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80058e2:	bf00      	nop
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80058f6:	bf00      	nop
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005902:	b480      	push	{r7}
 8005904:	b083      	sub	sp, #12
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005916:	b480      	push	{r7}
 8005918:	b083      	sub	sp, #12
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800591e:	bf00      	nop
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr

0800592a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800592a:	b480      	push	{r7}
 800592c:	b083      	sub	sp, #12
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005932:	bf00      	nop
 8005934:	370c      	adds	r7, #12
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr

0800593e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800593e:	b480      	push	{r7}
 8005940:	b083      	sub	sp, #12
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
 8005946:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800595e:	bf00      	nop
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800596a:	b480      	push	{r7}
 800596c:	b083      	sub	sp, #12
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
 8005972:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800598c:	bf00      	nop
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
	...

080059b0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059bc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80059c6:	4ba7      	ldr	r3, [pc, #668]	; (8005c64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80059c8:	4013      	ands	r3, r2
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	0091      	lsls	r1, r2, #2
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	6812      	ldr	r2, [r2, #0]
 80059d2:	430b      	orrs	r3, r1
 80059d4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059e0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e8:	041a      	lsls	r2, r3, #16
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	4413      	add	r3, r2
 80059fc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005a06:	4b97      	ldr	r3, [pc, #604]	; (8005c64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005a08:	4013      	ands	r3, r2
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	0091      	lsls	r1, r2, #2
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	6812      	ldr	r2, [r2, #0]
 8005a12:	430b      	orrs	r3, r1
 8005a14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a20:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a28:	041a      	lsls	r2, r3, #16
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005a48:	4b86      	ldr	r3, [pc, #536]	; (8005c64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	0091      	lsls	r1, r2, #2
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	6812      	ldr	r2, [r2, #0]
 8005a54:	430b      	orrs	r3, r1
 8005a56:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005a62:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6a:	041a      	lsls	r2, r3, #16
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	430a      	orrs	r2, r1
 8005a72:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005a7e:	fb02 f303 	mul.w	r3, r2, r3
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	4413      	add	r3, r2
 8005a86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005a90:	4b74      	ldr	r3, [pc, #464]	; (8005c64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005a92:	4013      	ands	r3, r2
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	0091      	lsls	r1, r2, #2
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	6812      	ldr	r2, [r2, #0]
 8005a9c:	430b      	orrs	r3, r1
 8005a9e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005aaa:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ab2:	041a      	lsls	r2, r3, #16
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005ac6:	fb02 f303 	mul.w	r3, r2, r3
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	4413      	add	r3, r2
 8005ace:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005ad8:	4b62      	ldr	r3, [pc, #392]	; (8005c64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005ada:	4013      	ands	r3, r2
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	0091      	lsls	r1, r2, #2
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	6812      	ldr	r2, [r2, #0]
 8005ae4:	430b      	orrs	r3, r1
 8005ae6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005af2:	fb02 f303 	mul.w	r3, r2, r3
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	4413      	add	r3, r2
 8005afa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005b04:	4b57      	ldr	r3, [pc, #348]	; (8005c64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005b06:	4013      	ands	r3, r2
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	0091      	lsls	r1, r2, #2
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	6812      	ldr	r2, [r2, #0]
 8005b10:	430b      	orrs	r3, r1
 8005b12:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b1e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b26:	041a      	lsls	r2, r3, #16
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b36:	005b      	lsls	r3, r3, #1
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005b46:	4b47      	ldr	r3, [pc, #284]	; (8005c64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005b48:	4013      	ands	r3, r2
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	0091      	lsls	r1, r2, #2
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	6812      	ldr	r2, [r2, #0]
 8005b52:	430b      	orrs	r3, r1
 8005b54:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005b60:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b68:	041a      	lsls	r2, r3, #16
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005b7c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b84:	061a      	lsls	r2, r3, #24
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b94:	4b34      	ldr	r3, [pc, #208]	; (8005c68 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005b96:	4413      	add	r3, r2
 8005b98:	009a      	lsls	r2, r3, #2
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	441a      	add	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb6:	00db      	lsls	r3, r3, #3
 8005bb8:	441a      	add	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc6:	6879      	ldr	r1, [r7, #4]
 8005bc8:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8005bca:	fb01 f303 	mul.w	r3, r1, r3
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	441a      	add	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bde:	6879      	ldr	r1, [r7, #4]
 8005be0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8005be2:	fb01 f303 	mul.w	r3, r1, r3
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	441a      	add	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bf6:	6879      	ldr	r1, [r7, #4]
 8005bf8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8005bfa:	fb01 f303 	mul.w	r3, r1, r3
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	441a      	add	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c12:	00db      	lsls	r3, r3, #3
 8005c14:	441a      	add	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c26:	6879      	ldr	r1, [r7, #4]
 8005c28:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005c2a:	fb01 f303 	mul.w	r3, r1, r3
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	441a      	add	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c42:	6879      	ldr	r1, [r7, #4]
 8005c44:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005c46:	fb01 f303 	mul.w	r3, r1, r3
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	441a      	add	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c5a:	4a04      	ldr	r2, [pc, #16]	; (8005c6c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d915      	bls.n	8005c8c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005c60:	e006      	b.n	8005c70 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005c62:	bf00      	nop
 8005c64:	ffff0003 	.word	0xffff0003
 8005c68:	10002b00 	.word	0x10002b00
 8005c6c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c76:	f043 0220 	orr.w	r2, r3, #32
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2203      	movs	r2, #3
 8005c84:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e010      	b.n	8005cae <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c90:	60fb      	str	r3, [r7, #12]
 8005c92:	e005      	b.n	8005ca0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	3304      	adds	r3, #4
 8005c9e:	60fb      	str	r3, [r7, #12]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d3f3      	bcc.n	8005c94 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3714      	adds	r7, #20
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop

08005cbc <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b089      	sub	sp, #36	; 0x24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
 8005cc8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10a      	bne.n	8005ce8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005cda:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	61fb      	str	r3, [r7, #28]
 8005ce6:	e00a      	b.n	8005cfe <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005cf0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8005cf6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005cf8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cfc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8005d08:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8005d0e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005d14:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d28:	6839      	ldr	r1, [r7, #0]
 8005d2a:	fb01 f303 	mul.w	r3, r1, r3
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4413      	add	r3, r2
 8005d32:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	69fa      	ldr	r2, [r7, #28]
 8005d38:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	3304      	adds	r3, #4
 8005d3e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	3304      	adds	r3, #4
 8005d4a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	617b      	str	r3, [r7, #20]
 8005d50:	e020      	b.n	8005d94 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	3303      	adds	r3, #3
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	4413      	add	r3, r2
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	3302      	adds	r3, #2
 8005d62:	6879      	ldr	r1, [r7, #4]
 8005d64:	440b      	add	r3, r1
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8005d6a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	6879      	ldr	r1, [r7, #4]
 8005d72:	440b      	add	r3, r1
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8005d78:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005d7a:	6879      	ldr	r1, [r7, #4]
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	440a      	add	r2, r1
 8005d80:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8005d82:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	3304      	adds	r3, #4
 8005d8c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	3304      	adds	r3, #4
 8005d92:	617b      	str	r3, [r7, #20]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	0c1b      	lsrs	r3, r3, #16
 8005d9a:	4a06      	ldr	r2, [pc, #24]	; (8005db4 <FDCAN_CopyMessageToRAM+0xf8>)
 8005d9c:	5cd3      	ldrb	r3, [r2, r3]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d3d5      	bcc.n	8005d52 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8005da6:	bf00      	nop
 8005da8:	bf00      	nop
 8005daa:	3724      	adds	r7, #36	; 0x24
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr
 8005db4:	0801dd6c 	.word	0x0801dd6c

08005db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b089      	sub	sp, #36	; 0x24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005dc6:	4b86      	ldr	r3, [pc, #536]	; (8005fe0 <HAL_GPIO_Init+0x228>)
 8005dc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005dca:	e18c      	b.n	80060e6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	2101      	movs	r1, #1
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd8:	4013      	ands	r3, r2
 8005dda:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f000 817e 	beq.w	80060e0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	f003 0303 	and.w	r3, r3, #3
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d005      	beq.n	8005dfc <HAL_GPIO_Init+0x44>
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f003 0303 	and.w	r3, r3, #3
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d130      	bne.n	8005e5e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	005b      	lsls	r3, r3, #1
 8005e06:	2203      	movs	r2, #3
 8005e08:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0c:	43db      	mvns	r3, r3
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	4013      	ands	r3, r2
 8005e12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	68da      	ldr	r2, [r3, #12]
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	005b      	lsls	r3, r3, #1
 8005e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e32:	2201      	movs	r2, #1
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3a:	43db      	mvns	r3, r3
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	4013      	ands	r3, r2
 8005e40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	091b      	lsrs	r3, r3, #4
 8005e48:	f003 0201 	and.w	r2, r3, #1
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	69ba      	ldr	r2, [r7, #24]
 8005e5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f003 0303 	and.w	r3, r3, #3
 8005e66:	2b03      	cmp	r3, #3
 8005e68:	d017      	beq.n	8005e9a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	005b      	lsls	r3, r3, #1
 8005e74:	2203      	movs	r2, #3
 8005e76:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7a:	43db      	mvns	r3, r3
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	4013      	ands	r3, r2
 8005e80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	689a      	ldr	r2, [r3, #8]
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	005b      	lsls	r3, r3, #1
 8005e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8e:	69ba      	ldr	r2, [r7, #24]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f003 0303 	and.w	r3, r3, #3
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d123      	bne.n	8005eee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	08da      	lsrs	r2, r3, #3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	3208      	adds	r2, #8
 8005eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	f003 0307 	and.w	r3, r3, #7
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	220f      	movs	r2, #15
 8005ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec2:	43db      	mvns	r3, r3
 8005ec4:	69ba      	ldr	r2, [r7, #24]
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	691a      	ldr	r2, [r3, #16]
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	f003 0307 	and.w	r3, r3, #7
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	08da      	lsrs	r2, r3, #3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	3208      	adds	r2, #8
 8005ee8:	69b9      	ldr	r1, [r7, #24]
 8005eea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	005b      	lsls	r3, r3, #1
 8005ef8:	2203      	movs	r2, #3
 8005efa:	fa02 f303 	lsl.w	r3, r2, r3
 8005efe:	43db      	mvns	r3, r3
 8005f00:	69ba      	ldr	r2, [r7, #24]
 8005f02:	4013      	ands	r3, r2
 8005f04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f003 0203 	and.w	r2, r3, #3
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	005b      	lsls	r3, r3, #1
 8005f12:	fa02 f303 	lsl.w	r3, r2, r3
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	69ba      	ldr	r2, [r7, #24]
 8005f20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 80d8 	beq.w	80060e0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f30:	4b2c      	ldr	r3, [pc, #176]	; (8005fe4 <HAL_GPIO_Init+0x22c>)
 8005f32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f36:	4a2b      	ldr	r2, [pc, #172]	; (8005fe4 <HAL_GPIO_Init+0x22c>)
 8005f38:	f043 0302 	orr.w	r3, r3, #2
 8005f3c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005f40:	4b28      	ldr	r3, [pc, #160]	; (8005fe4 <HAL_GPIO_Init+0x22c>)
 8005f42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f4e:	4a26      	ldr	r2, [pc, #152]	; (8005fe8 <HAL_GPIO_Init+0x230>)
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	089b      	lsrs	r3, r3, #2
 8005f54:	3302      	adds	r3, #2
 8005f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	f003 0303 	and.w	r3, r3, #3
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	220f      	movs	r2, #15
 8005f66:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6a:	43db      	mvns	r3, r3
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	4013      	ands	r3, r2
 8005f70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a1d      	ldr	r2, [pc, #116]	; (8005fec <HAL_GPIO_Init+0x234>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d04a      	beq.n	8006010 <HAL_GPIO_Init+0x258>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a1c      	ldr	r2, [pc, #112]	; (8005ff0 <HAL_GPIO_Init+0x238>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d02b      	beq.n	8005fda <HAL_GPIO_Init+0x222>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a1b      	ldr	r2, [pc, #108]	; (8005ff4 <HAL_GPIO_Init+0x23c>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d025      	beq.n	8005fd6 <HAL_GPIO_Init+0x21e>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a1a      	ldr	r2, [pc, #104]	; (8005ff8 <HAL_GPIO_Init+0x240>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d01f      	beq.n	8005fd2 <HAL_GPIO_Init+0x21a>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a19      	ldr	r2, [pc, #100]	; (8005ffc <HAL_GPIO_Init+0x244>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d019      	beq.n	8005fce <HAL_GPIO_Init+0x216>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a18      	ldr	r2, [pc, #96]	; (8006000 <HAL_GPIO_Init+0x248>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d013      	beq.n	8005fca <HAL_GPIO_Init+0x212>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a17      	ldr	r2, [pc, #92]	; (8006004 <HAL_GPIO_Init+0x24c>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d00d      	beq.n	8005fc6 <HAL_GPIO_Init+0x20e>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a16      	ldr	r2, [pc, #88]	; (8006008 <HAL_GPIO_Init+0x250>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d007      	beq.n	8005fc2 <HAL_GPIO_Init+0x20a>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a15      	ldr	r2, [pc, #84]	; (800600c <HAL_GPIO_Init+0x254>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d101      	bne.n	8005fbe <HAL_GPIO_Init+0x206>
 8005fba:	2309      	movs	r3, #9
 8005fbc:	e029      	b.n	8006012 <HAL_GPIO_Init+0x25a>
 8005fbe:	230a      	movs	r3, #10
 8005fc0:	e027      	b.n	8006012 <HAL_GPIO_Init+0x25a>
 8005fc2:	2307      	movs	r3, #7
 8005fc4:	e025      	b.n	8006012 <HAL_GPIO_Init+0x25a>
 8005fc6:	2306      	movs	r3, #6
 8005fc8:	e023      	b.n	8006012 <HAL_GPIO_Init+0x25a>
 8005fca:	2305      	movs	r3, #5
 8005fcc:	e021      	b.n	8006012 <HAL_GPIO_Init+0x25a>
 8005fce:	2304      	movs	r3, #4
 8005fd0:	e01f      	b.n	8006012 <HAL_GPIO_Init+0x25a>
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e01d      	b.n	8006012 <HAL_GPIO_Init+0x25a>
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	e01b      	b.n	8006012 <HAL_GPIO_Init+0x25a>
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e019      	b.n	8006012 <HAL_GPIO_Init+0x25a>
 8005fde:	bf00      	nop
 8005fe0:	58000080 	.word	0x58000080
 8005fe4:	58024400 	.word	0x58024400
 8005fe8:	58000400 	.word	0x58000400
 8005fec:	58020000 	.word	0x58020000
 8005ff0:	58020400 	.word	0x58020400
 8005ff4:	58020800 	.word	0x58020800
 8005ff8:	58020c00 	.word	0x58020c00
 8005ffc:	58021000 	.word	0x58021000
 8006000:	58021400 	.word	0x58021400
 8006004:	58021800 	.word	0x58021800
 8006008:	58021c00 	.word	0x58021c00
 800600c:	58022400 	.word	0x58022400
 8006010:	2300      	movs	r3, #0
 8006012:	69fa      	ldr	r2, [r7, #28]
 8006014:	f002 0203 	and.w	r2, r2, #3
 8006018:	0092      	lsls	r2, r2, #2
 800601a:	4093      	lsls	r3, r2
 800601c:	69ba      	ldr	r2, [r7, #24]
 800601e:	4313      	orrs	r3, r2
 8006020:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006022:	4938      	ldr	r1, [pc, #224]	; (8006104 <HAL_GPIO_Init+0x34c>)
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	089b      	lsrs	r3, r3, #2
 8006028:	3302      	adds	r3, #2
 800602a:	69ba      	ldr	r2, [r7, #24]
 800602c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	43db      	mvns	r3, r3
 800603c:	69ba      	ldr	r2, [r7, #24]
 800603e:	4013      	ands	r3, r2
 8006040:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800604e:	69ba      	ldr	r2, [r7, #24]
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	4313      	orrs	r3, r2
 8006054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006056:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800605e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	43db      	mvns	r3, r3
 800606a:	69ba      	ldr	r2, [r7, #24]
 800606c:	4013      	ands	r3, r2
 800606e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d003      	beq.n	8006084 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	4313      	orrs	r3, r2
 8006082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006084:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	43db      	mvns	r3, r3
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	4013      	ands	r3, r2
 800609a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d003      	beq.n	80060b0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80060a8:	69ba      	ldr	r2, [r7, #24]
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	43db      	mvns	r3, r3
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	4013      	ands	r3, r2
 80060c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80060d2:	69ba      	ldr	r2, [r7, #24]
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	69ba      	ldr	r2, [r7, #24]
 80060de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	3301      	adds	r3, #1
 80060e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	fa22 f303 	lsr.w	r3, r2, r3
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f47f ae6b 	bne.w	8005dcc <HAL_GPIO_Init+0x14>
  }
}
 80060f6:	bf00      	nop
 80060f8:	bf00      	nop
 80060fa:	3724      	adds	r7, #36	; 0x24
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr
 8006104:	58000400 	.word	0x58000400

08006108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	460b      	mov	r3, r1
 8006112:	807b      	strh	r3, [r7, #2]
 8006114:	4613      	mov	r3, r2
 8006116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006118:	787b      	ldrb	r3, [r7, #1]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800611e:	887a      	ldrh	r2, [r7, #2]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006124:	e003      	b.n	800612e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006126:	887b      	ldrh	r3, [r7, #2]
 8006128:	041a      	lsls	r2, r3, #16
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	619a      	str	r2, [r3, #24]
}
 800612e:	bf00      	nop
 8006130:	370c      	adds	r7, #12
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800613a:	b480      	push	{r7}
 800613c:	b085      	sub	sp, #20
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
 8006142:	460b      	mov	r3, r1
 8006144:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800614c:	887a      	ldrh	r2, [r7, #2]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	4013      	ands	r3, r2
 8006152:	041a      	lsls	r2, r3, #16
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	43d9      	mvns	r1, r3
 8006158:	887b      	ldrh	r3, [r7, #2]
 800615a:	400b      	ands	r3, r1
 800615c:	431a      	orrs	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	619a      	str	r2, [r3, #24]
}
 8006162:	bf00      	nop
 8006164:	3714      	adds	r7, #20
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b082      	sub	sp, #8
 8006172:	af00      	add	r7, sp, #0
 8006174:	4603      	mov	r3, r0
 8006176:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800617c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006180:	88fb      	ldrh	r3, [r7, #6]
 8006182:	4013      	ands	r3, r2
 8006184:	2b00      	cmp	r3, #0
 8006186:	d008      	beq.n	800619a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006188:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800618c:	88fb      	ldrh	r3, [r7, #6]
 800618e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006192:	88fb      	ldrh	r3, [r7, #6]
 8006194:	4618      	mov	r0, r3
 8006196:	f7fb f99b 	bl	80014d0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800619a:	bf00      	nop
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
	...

080061a4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80061ac:	4b19      	ldr	r3, [pc, #100]	; (8006214 <HAL_PWREx_ConfigSupply+0x70>)
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	f003 0304 	and.w	r3, r3, #4
 80061b4:	2b04      	cmp	r3, #4
 80061b6:	d00a      	beq.n	80061ce <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80061b8:	4b16      	ldr	r3, [pc, #88]	; (8006214 <HAL_PWREx_ConfigSupply+0x70>)
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	f003 0307 	and.w	r3, r3, #7
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d001      	beq.n	80061ca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e01f      	b.n	800620a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	e01d      	b.n	800620a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80061ce:	4b11      	ldr	r3, [pc, #68]	; (8006214 <HAL_PWREx_ConfigSupply+0x70>)
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	f023 0207 	bic.w	r2, r3, #7
 80061d6:	490f      	ldr	r1, [pc, #60]	; (8006214 <HAL_PWREx_ConfigSupply+0x70>)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4313      	orrs	r3, r2
 80061dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80061de:	f7fc fb51 	bl	8002884 <HAL_GetTick>
 80061e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80061e4:	e009      	b.n	80061fa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80061e6:	f7fc fb4d 	bl	8002884 <HAL_GetTick>
 80061ea:	4602      	mov	r2, r0
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061f4:	d901      	bls.n	80061fa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e007      	b.n	800620a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80061fa:	4b06      	ldr	r3, [pc, #24]	; (8006214 <HAL_PWREx_ConfigSupply+0x70>)
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006206:	d1ee      	bne.n	80061e6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	58024800 	.word	0x58024800

08006218 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b08c      	sub	sp, #48	; 0x30
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d101      	bne.n	800622a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e397      	b.n	800695a <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b00      	cmp	r3, #0
 8006234:	f000 8087 	beq.w	8006346 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006238:	4b9e      	ldr	r3, [pc, #632]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006240:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006242:	4b9c      	ldr	r3, [pc, #624]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 8006244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006246:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624a:	2b10      	cmp	r3, #16
 800624c:	d007      	beq.n	800625e <HAL_RCC_OscConfig+0x46>
 800624e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006250:	2b18      	cmp	r3, #24
 8006252:	d110      	bne.n	8006276 <HAL_RCC_OscConfig+0x5e>
 8006254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006256:	f003 0303 	and.w	r3, r3, #3
 800625a:	2b02      	cmp	r3, #2
 800625c:	d10b      	bne.n	8006276 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800625e:	4b95      	ldr	r3, [pc, #596]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d06c      	beq.n	8006344 <HAL_RCC_OscConfig+0x12c>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d168      	bne.n	8006344 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e371      	b.n	800695a <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800627e:	d106      	bne.n	800628e <HAL_RCC_OscConfig+0x76>
 8006280:	4b8c      	ldr	r3, [pc, #560]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a8b      	ldr	r2, [pc, #556]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 8006286:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800628a:	6013      	str	r3, [r2, #0]
 800628c:	e02e      	b.n	80062ec <HAL_RCC_OscConfig+0xd4>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10c      	bne.n	80062b0 <HAL_RCC_OscConfig+0x98>
 8006296:	4b87      	ldr	r3, [pc, #540]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a86      	ldr	r2, [pc, #536]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 800629c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062a0:	6013      	str	r3, [r2, #0]
 80062a2:	4b84      	ldr	r3, [pc, #528]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a83      	ldr	r2, [pc, #524]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 80062a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062ac:	6013      	str	r3, [r2, #0]
 80062ae:	e01d      	b.n	80062ec <HAL_RCC_OscConfig+0xd4>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062b8:	d10c      	bne.n	80062d4 <HAL_RCC_OscConfig+0xbc>
 80062ba:	4b7e      	ldr	r3, [pc, #504]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a7d      	ldr	r2, [pc, #500]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 80062c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062c4:	6013      	str	r3, [r2, #0]
 80062c6:	4b7b      	ldr	r3, [pc, #492]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a7a      	ldr	r2, [pc, #488]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 80062cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062d0:	6013      	str	r3, [r2, #0]
 80062d2:	e00b      	b.n	80062ec <HAL_RCC_OscConfig+0xd4>
 80062d4:	4b77      	ldr	r3, [pc, #476]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a76      	ldr	r2, [pc, #472]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 80062da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062de:	6013      	str	r3, [r2, #0]
 80062e0:	4b74      	ldr	r3, [pc, #464]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a73      	ldr	r2, [pc, #460]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 80062e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d013      	beq.n	800631c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f4:	f7fc fac6 	bl	8002884 <HAL_GetTick>
 80062f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80062fa:	e008      	b.n	800630e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062fc:	f7fc fac2 	bl	8002884 <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	2b64      	cmp	r3, #100	; 0x64
 8006308:	d901      	bls.n	800630e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e325      	b.n	800695a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800630e:	4b69      	ldr	r3, [pc, #420]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d0f0      	beq.n	80062fc <HAL_RCC_OscConfig+0xe4>
 800631a:	e014      	b.n	8006346 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800631c:	f7fc fab2 	bl	8002884 <HAL_GetTick>
 8006320:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006322:	e008      	b.n	8006336 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006324:	f7fc faae 	bl	8002884 <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	2b64      	cmp	r3, #100	; 0x64
 8006330:	d901      	bls.n	8006336 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e311      	b.n	800695a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006336:	4b5f      	ldr	r3, [pc, #380]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1f0      	bne.n	8006324 <HAL_RCC_OscConfig+0x10c>
 8006342:	e000      	b.n	8006346 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b00      	cmp	r3, #0
 8006350:	f000 808a 	beq.w	8006468 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006354:	4b57      	ldr	r3, [pc, #348]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800635c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800635e:	4b55      	ldr	r3, [pc, #340]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 8006360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006362:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006364:	6a3b      	ldr	r3, [r7, #32]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d007      	beq.n	800637a <HAL_RCC_OscConfig+0x162>
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	2b18      	cmp	r3, #24
 800636e:	d137      	bne.n	80063e0 <HAL_RCC_OscConfig+0x1c8>
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	f003 0303 	and.w	r3, r3, #3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d132      	bne.n	80063e0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800637a:	4b4e      	ldr	r3, [pc, #312]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0304 	and.w	r3, r3, #4
 8006382:	2b00      	cmp	r3, #0
 8006384:	d005      	beq.n	8006392 <HAL_RCC_OscConfig+0x17a>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e2e3      	b.n	800695a <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006392:	4b48      	ldr	r3, [pc, #288]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f023 0219 	bic.w	r2, r3, #25
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	4945      	ldr	r1, [pc, #276]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80063a4:	f7fc fa6e 	bl	8002884 <HAL_GetTick>
 80063a8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063aa:	e008      	b.n	80063be <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063ac:	f7fc fa6a 	bl	8002884 <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d901      	bls.n	80063be <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e2cd      	b.n	800695a <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063be:	4b3d      	ldr	r3, [pc, #244]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0304 	and.w	r3, r3, #4
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d0f0      	beq.n	80063ac <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063ca:	4b3a      	ldr	r3, [pc, #232]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	061b      	lsls	r3, r3, #24
 80063d8:	4936      	ldr	r1, [pc, #216]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063de:	e043      	b.n	8006468 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d026      	beq.n	8006436 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80063e8:	4b32      	ldr	r3, [pc, #200]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f023 0219 	bic.w	r2, r3, #25
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	492f      	ldr	r1, [pc, #188]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063fa:	f7fc fa43 	bl	8002884 <HAL_GetTick>
 80063fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006400:	e008      	b.n	8006414 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006402:	f7fc fa3f 	bl	8002884 <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	2b02      	cmp	r3, #2
 800640e:	d901      	bls.n	8006414 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e2a2      	b.n	800695a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006414:	4b27      	ldr	r3, [pc, #156]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0304 	and.w	r3, r3, #4
 800641c:	2b00      	cmp	r3, #0
 800641e:	d0f0      	beq.n	8006402 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006420:	4b24      	ldr	r3, [pc, #144]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	061b      	lsls	r3, r3, #24
 800642e:	4921      	ldr	r1, [pc, #132]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 8006430:	4313      	orrs	r3, r2
 8006432:	604b      	str	r3, [r1, #4]
 8006434:	e018      	b.n	8006468 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006436:	4b1f      	ldr	r3, [pc, #124]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a1e      	ldr	r2, [pc, #120]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 800643c:	f023 0301 	bic.w	r3, r3, #1
 8006440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006442:	f7fc fa1f 	bl	8002884 <HAL_GetTick>
 8006446:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006448:	e008      	b.n	800645c <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800644a:	f7fc fa1b 	bl	8002884 <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	2b02      	cmp	r3, #2
 8006456:	d901      	bls.n	800645c <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e27e      	b.n	800695a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800645c:	4b15      	ldr	r3, [pc, #84]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0304 	and.w	r3, r3, #4
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1f0      	bne.n	800644a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0310 	and.w	r3, r3, #16
 8006470:	2b00      	cmp	r3, #0
 8006472:	d06d      	beq.n	8006550 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006474:	4b0f      	ldr	r3, [pc, #60]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800647c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800647e:	4b0d      	ldr	r3, [pc, #52]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 8006480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006482:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	2b08      	cmp	r3, #8
 8006488:	d007      	beq.n	800649a <HAL_RCC_OscConfig+0x282>
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	2b18      	cmp	r3, #24
 800648e:	d11e      	bne.n	80064ce <HAL_RCC_OscConfig+0x2b6>
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	f003 0303 	and.w	r3, r3, #3
 8006496:	2b01      	cmp	r3, #1
 8006498:	d119      	bne.n	80064ce <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800649a:	4b06      	ldr	r3, [pc, #24]	; (80064b4 <HAL_RCC_OscConfig+0x29c>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d008      	beq.n	80064b8 <HAL_RCC_OscConfig+0x2a0>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	69db      	ldr	r3, [r3, #28]
 80064aa:	2b80      	cmp	r3, #128	; 0x80
 80064ac:	d004      	beq.n	80064b8 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e253      	b.n	800695a <HAL_RCC_OscConfig+0x742>
 80064b2:	bf00      	nop
 80064b4:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80064b8:	4ba3      	ldr	r3, [pc, #652]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a1b      	ldr	r3, [r3, #32]
 80064c4:	061b      	lsls	r3, r3, #24
 80064c6:	49a0      	ldr	r1, [pc, #640]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80064cc:	e040      	b.n	8006550 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	69db      	ldr	r3, [r3, #28]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d023      	beq.n	800651e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80064d6:	4b9c      	ldr	r3, [pc, #624]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a9b      	ldr	r2, [pc, #620]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 80064dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e2:	f7fc f9cf 	bl	8002884 <HAL_GetTick>
 80064e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80064e8:	e008      	b.n	80064fc <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80064ea:	f7fc f9cb 	bl	8002884 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d901      	bls.n	80064fc <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e22e      	b.n	800695a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80064fc:	4b92      	ldr	r3, [pc, #584]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006504:	2b00      	cmp	r3, #0
 8006506:	d0f0      	beq.n	80064ea <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006508:	4b8f      	ldr	r3, [pc, #572]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a1b      	ldr	r3, [r3, #32]
 8006514:	061b      	lsls	r3, r3, #24
 8006516:	498c      	ldr	r1, [pc, #560]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 8006518:	4313      	orrs	r3, r2
 800651a:	60cb      	str	r3, [r1, #12]
 800651c:	e018      	b.n	8006550 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800651e:	4b8a      	ldr	r3, [pc, #552]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a89      	ldr	r2, [pc, #548]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 8006524:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006528:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800652a:	f7fc f9ab 	bl	8002884 <HAL_GetTick>
 800652e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006530:	e008      	b.n	8006544 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006532:	f7fc f9a7 	bl	8002884 <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	2b02      	cmp	r3, #2
 800653e:	d901      	bls.n	8006544 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e20a      	b.n	800695a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006544:	4b80      	ldr	r3, [pc, #512]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1f0      	bne.n	8006532 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0308 	and.w	r3, r3, #8
 8006558:	2b00      	cmp	r3, #0
 800655a:	d036      	beq.n	80065ca <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	695b      	ldr	r3, [r3, #20]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d019      	beq.n	8006598 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006564:	4b78      	ldr	r3, [pc, #480]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 8006566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006568:	4a77      	ldr	r2, [pc, #476]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 800656a:	f043 0301 	orr.w	r3, r3, #1
 800656e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006570:	f7fc f988 	bl	8002884 <HAL_GetTick>
 8006574:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006576:	e008      	b.n	800658a <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006578:	f7fc f984 	bl	8002884 <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	2b02      	cmp	r3, #2
 8006584:	d901      	bls.n	800658a <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e1e7      	b.n	800695a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800658a:	4b6f      	ldr	r3, [pc, #444]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 800658c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800658e:	f003 0302 	and.w	r3, r3, #2
 8006592:	2b00      	cmp	r3, #0
 8006594:	d0f0      	beq.n	8006578 <HAL_RCC_OscConfig+0x360>
 8006596:	e018      	b.n	80065ca <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006598:	4b6b      	ldr	r3, [pc, #428]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 800659a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800659c:	4a6a      	ldr	r2, [pc, #424]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 800659e:	f023 0301 	bic.w	r3, r3, #1
 80065a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065a4:	f7fc f96e 	bl	8002884 <HAL_GetTick>
 80065a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80065aa:	e008      	b.n	80065be <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065ac:	f7fc f96a 	bl	8002884 <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d901      	bls.n	80065be <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e1cd      	b.n	800695a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80065be:	4b62      	ldr	r3, [pc, #392]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 80065c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065c2:	f003 0302 	and.w	r3, r3, #2
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1f0      	bne.n	80065ac <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0320 	and.w	r3, r3, #32
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d036      	beq.n	8006644 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d019      	beq.n	8006612 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80065de:	4b5a      	ldr	r3, [pc, #360]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a59      	ldr	r2, [pc, #356]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 80065e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80065e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80065ea:	f7fc f94b 	bl	8002884 <HAL_GetTick>
 80065ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80065f0:	e008      	b.n	8006604 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80065f2:	f7fc f947 	bl	8002884 <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d901      	bls.n	8006604 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e1aa      	b.n	800695a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006604:	4b50      	ldr	r3, [pc, #320]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d0f0      	beq.n	80065f2 <HAL_RCC_OscConfig+0x3da>
 8006610:	e018      	b.n	8006644 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006612:	4b4d      	ldr	r3, [pc, #308]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a4c      	ldr	r2, [pc, #304]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 8006618:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800661c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800661e:	f7fc f931 	bl	8002884 <HAL_GetTick>
 8006622:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006624:	e008      	b.n	8006638 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006626:	f7fc f92d 	bl	8002884 <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	2b02      	cmp	r3, #2
 8006632:	d901      	bls.n	8006638 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e190      	b.n	800695a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006638:	4b43      	ldr	r3, [pc, #268]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1f0      	bne.n	8006626 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 0304 	and.w	r3, r3, #4
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 8085 	beq.w	800675c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006652:	4b3e      	ldr	r3, [pc, #248]	; (800674c <HAL_RCC_OscConfig+0x534>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a3d      	ldr	r2, [pc, #244]	; (800674c <HAL_RCC_OscConfig+0x534>)
 8006658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800665c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800665e:	f7fc f911 	bl	8002884 <HAL_GetTick>
 8006662:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006664:	e008      	b.n	8006678 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006666:	f7fc f90d 	bl	8002884 <HAL_GetTick>
 800666a:	4602      	mov	r2, r0
 800666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	2b64      	cmp	r3, #100	; 0x64
 8006672:	d901      	bls.n	8006678 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	e170      	b.n	800695a <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006678:	4b34      	ldr	r3, [pc, #208]	; (800674c <HAL_RCC_OscConfig+0x534>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006680:	2b00      	cmp	r3, #0
 8006682:	d0f0      	beq.n	8006666 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	2b01      	cmp	r3, #1
 800668a:	d106      	bne.n	800669a <HAL_RCC_OscConfig+0x482>
 800668c:	4b2e      	ldr	r3, [pc, #184]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 800668e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006690:	4a2d      	ldr	r2, [pc, #180]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 8006692:	f043 0301 	orr.w	r3, r3, #1
 8006696:	6713      	str	r3, [r2, #112]	; 0x70
 8006698:	e02d      	b.n	80066f6 <HAL_RCC_OscConfig+0x4de>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d10c      	bne.n	80066bc <HAL_RCC_OscConfig+0x4a4>
 80066a2:	4b29      	ldr	r3, [pc, #164]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 80066a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a6:	4a28      	ldr	r2, [pc, #160]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 80066a8:	f023 0301 	bic.w	r3, r3, #1
 80066ac:	6713      	str	r3, [r2, #112]	; 0x70
 80066ae:	4b26      	ldr	r3, [pc, #152]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 80066b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b2:	4a25      	ldr	r2, [pc, #148]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 80066b4:	f023 0304 	bic.w	r3, r3, #4
 80066b8:	6713      	str	r3, [r2, #112]	; 0x70
 80066ba:	e01c      	b.n	80066f6 <HAL_RCC_OscConfig+0x4de>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	2b05      	cmp	r3, #5
 80066c2:	d10c      	bne.n	80066de <HAL_RCC_OscConfig+0x4c6>
 80066c4:	4b20      	ldr	r3, [pc, #128]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 80066c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c8:	4a1f      	ldr	r2, [pc, #124]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 80066ca:	f043 0304 	orr.w	r3, r3, #4
 80066ce:	6713      	str	r3, [r2, #112]	; 0x70
 80066d0:	4b1d      	ldr	r3, [pc, #116]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 80066d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d4:	4a1c      	ldr	r2, [pc, #112]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 80066d6:	f043 0301 	orr.w	r3, r3, #1
 80066da:	6713      	str	r3, [r2, #112]	; 0x70
 80066dc:	e00b      	b.n	80066f6 <HAL_RCC_OscConfig+0x4de>
 80066de:	4b1a      	ldr	r3, [pc, #104]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 80066e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066e2:	4a19      	ldr	r2, [pc, #100]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 80066e4:	f023 0301 	bic.w	r3, r3, #1
 80066e8:	6713      	str	r3, [r2, #112]	; 0x70
 80066ea:	4b17      	ldr	r3, [pc, #92]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 80066ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ee:	4a16      	ldr	r2, [pc, #88]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 80066f0:	f023 0304 	bic.w	r3, r3, #4
 80066f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d015      	beq.n	800672a <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066fe:	f7fc f8c1 	bl	8002884 <HAL_GetTick>
 8006702:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006704:	e00a      	b.n	800671c <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006706:	f7fc f8bd 	bl	8002884 <HAL_GetTick>
 800670a:	4602      	mov	r2, r0
 800670c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	f241 3288 	movw	r2, #5000	; 0x1388
 8006714:	4293      	cmp	r3, r2
 8006716:	d901      	bls.n	800671c <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e11e      	b.n	800695a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800671c:	4b0a      	ldr	r3, [pc, #40]	; (8006748 <HAL_RCC_OscConfig+0x530>)
 800671e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006720:	f003 0302 	and.w	r3, r3, #2
 8006724:	2b00      	cmp	r3, #0
 8006726:	d0ee      	beq.n	8006706 <HAL_RCC_OscConfig+0x4ee>
 8006728:	e018      	b.n	800675c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800672a:	f7fc f8ab 	bl	8002884 <HAL_GetTick>
 800672e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006730:	e00e      	b.n	8006750 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006732:	f7fc f8a7 	bl	8002884 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006740:	4293      	cmp	r3, r2
 8006742:	d905      	bls.n	8006750 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e108      	b.n	800695a <HAL_RCC_OscConfig+0x742>
 8006748:	58024400 	.word	0x58024400
 800674c:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006750:	4b84      	ldr	r3, [pc, #528]	; (8006964 <HAL_RCC_OscConfig+0x74c>)
 8006752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006754:	f003 0302 	and.w	r3, r3, #2
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1ea      	bne.n	8006732 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006760:	2b00      	cmp	r3, #0
 8006762:	f000 80f9 	beq.w	8006958 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006766:	4b7f      	ldr	r3, [pc, #508]	; (8006964 <HAL_RCC_OscConfig+0x74c>)
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800676e:	2b18      	cmp	r3, #24
 8006770:	f000 80b4 	beq.w	80068dc <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006778:	2b02      	cmp	r3, #2
 800677a:	f040 8095 	bne.w	80068a8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800677e:	4b79      	ldr	r3, [pc, #484]	; (8006964 <HAL_RCC_OscConfig+0x74c>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a78      	ldr	r2, [pc, #480]	; (8006964 <HAL_RCC_OscConfig+0x74c>)
 8006784:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006788:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800678a:	f7fc f87b 	bl	8002884 <HAL_GetTick>
 800678e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006790:	e008      	b.n	80067a4 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006792:	f7fc f877 	bl	8002884 <HAL_GetTick>
 8006796:	4602      	mov	r2, r0
 8006798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	2b02      	cmp	r3, #2
 800679e:	d901      	bls.n	80067a4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e0da      	b.n	800695a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067a4:	4b6f      	ldr	r3, [pc, #444]	; (8006964 <HAL_RCC_OscConfig+0x74c>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1f0      	bne.n	8006792 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067b0:	4b6c      	ldr	r3, [pc, #432]	; (8006964 <HAL_RCC_OscConfig+0x74c>)
 80067b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067b4:	4b6c      	ldr	r3, [pc, #432]	; (8006968 <HAL_RCC_OscConfig+0x750>)
 80067b6:	4013      	ands	r3, r2
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80067c0:	0112      	lsls	r2, r2, #4
 80067c2:	430a      	orrs	r2, r1
 80067c4:	4967      	ldr	r1, [pc, #412]	; (8006964 <HAL_RCC_OscConfig+0x74c>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	628b      	str	r3, [r1, #40]	; 0x28
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ce:	3b01      	subs	r3, #1
 80067d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d8:	3b01      	subs	r3, #1
 80067da:	025b      	lsls	r3, r3, #9
 80067dc:	b29b      	uxth	r3, r3
 80067de:	431a      	orrs	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e4:	3b01      	subs	r3, #1
 80067e6:	041b      	lsls	r3, r3, #16
 80067e8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80067ec:	431a      	orrs	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f2:	3b01      	subs	r3, #1
 80067f4:	061b      	lsls	r3, r3, #24
 80067f6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80067fa:	495a      	ldr	r1, [pc, #360]	; (8006964 <HAL_RCC_OscConfig+0x74c>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006800:	4b58      	ldr	r3, [pc, #352]	; (8006964 <HAL_RCC_OscConfig+0x74c>)
 8006802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006804:	4a57      	ldr	r2, [pc, #348]	; (8006964 <HAL_RCC_OscConfig+0x74c>)
 8006806:	f023 0301 	bic.w	r3, r3, #1
 800680a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800680c:	4b55      	ldr	r3, [pc, #340]	; (8006964 <HAL_RCC_OscConfig+0x74c>)
 800680e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006810:	4b56      	ldr	r3, [pc, #344]	; (800696c <HAL_RCC_OscConfig+0x754>)
 8006812:	4013      	ands	r3, r2
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006818:	00d2      	lsls	r2, r2, #3
 800681a:	4952      	ldr	r1, [pc, #328]	; (8006964 <HAL_RCC_OscConfig+0x74c>)
 800681c:	4313      	orrs	r3, r2
 800681e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006820:	4b50      	ldr	r3, [pc, #320]	; (8006964 <HAL_RCC_OscConfig+0x74c>)
 8006822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006824:	f023 020c 	bic.w	r2, r3, #12
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682c:	494d      	ldr	r1, [pc, #308]	; (8006964 <HAL_RCC_OscConfig+0x74c>)
 800682e:	4313      	orrs	r3, r2
 8006830:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006832:	4b4c      	ldr	r3, [pc, #304]	; (8006964 <HAL_RCC_OscConfig+0x74c>)
 8006834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006836:	f023 0202 	bic.w	r2, r3, #2
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683e:	4949      	ldr	r1, [pc, #292]	; (8006964 <HAL_RCC_OscConfig+0x74c>)
 8006840:	4313      	orrs	r3, r2
 8006842:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006844:	4b47      	ldr	r3, [pc, #284]	; (8006964 <HAL_RCC_OscConfig+0x74c>)
 8006846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006848:	4a46      	ldr	r2, [pc, #280]	; (8006964 <HAL_RCC_OscConfig+0x74c>)
 800684a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800684e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006850:	4b44      	ldr	r3, [pc, #272]	; (8006964 <HAL_RCC_OscConfig+0x74c>)
 8006852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006854:	4a43      	ldr	r2, [pc, #268]	; (8006964 <HAL_RCC_OscConfig+0x74c>)
 8006856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800685a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800685c:	4b41      	ldr	r3, [pc, #260]	; (8006964 <HAL_RCC_OscConfig+0x74c>)
 800685e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006860:	4a40      	ldr	r2, [pc, #256]	; (8006964 <HAL_RCC_OscConfig+0x74c>)
 8006862:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006866:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006868:	4b3e      	ldr	r3, [pc, #248]	; (8006964 <HAL_RCC_OscConfig+0x74c>)
 800686a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686c:	4a3d      	ldr	r2, [pc, #244]	; (8006964 <HAL_RCC_OscConfig+0x74c>)
 800686e:	f043 0301 	orr.w	r3, r3, #1
 8006872:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006874:	4b3b      	ldr	r3, [pc, #236]	; (8006964 <HAL_RCC_OscConfig+0x74c>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a3a      	ldr	r2, [pc, #232]	; (8006964 <HAL_RCC_OscConfig+0x74c>)
 800687a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800687e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006880:	f7fc f800 	bl	8002884 <HAL_GetTick>
 8006884:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006886:	e008      	b.n	800689a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006888:	f7fb fffc 	bl	8002884 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b02      	cmp	r3, #2
 8006894:	d901      	bls.n	800689a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e05f      	b.n	800695a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800689a:	4b32      	ldr	r3, [pc, #200]	; (8006964 <HAL_RCC_OscConfig+0x74c>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d0f0      	beq.n	8006888 <HAL_RCC_OscConfig+0x670>
 80068a6:	e057      	b.n	8006958 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068a8:	4b2e      	ldr	r3, [pc, #184]	; (8006964 <HAL_RCC_OscConfig+0x74c>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a2d      	ldr	r2, [pc, #180]	; (8006964 <HAL_RCC_OscConfig+0x74c>)
 80068ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068b4:	f7fb ffe6 	bl	8002884 <HAL_GetTick>
 80068b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80068ba:	e008      	b.n	80068ce <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068bc:	f7fb ffe2 	bl	8002884 <HAL_GetTick>
 80068c0:	4602      	mov	r2, r0
 80068c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d901      	bls.n	80068ce <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e045      	b.n	800695a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80068ce:	4b25      	ldr	r3, [pc, #148]	; (8006964 <HAL_RCC_OscConfig+0x74c>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1f0      	bne.n	80068bc <HAL_RCC_OscConfig+0x6a4>
 80068da:	e03d      	b.n	8006958 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80068dc:	4b21      	ldr	r3, [pc, #132]	; (8006964 <HAL_RCC_OscConfig+0x74c>)
 80068de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80068e2:	4b20      	ldr	r3, [pc, #128]	; (8006964 <HAL_RCC_OscConfig+0x74c>)
 80068e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d031      	beq.n	8006954 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	f003 0203 	and.w	r2, r3, #3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d12a      	bne.n	8006954 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	091b      	lsrs	r3, r3, #4
 8006902:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800690a:	429a      	cmp	r2, r3
 800690c:	d122      	bne.n	8006954 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006918:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800691a:	429a      	cmp	r2, r3
 800691c:	d11a      	bne.n	8006954 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	0a5b      	lsrs	r3, r3, #9
 8006922:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800692a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800692c:	429a      	cmp	r2, r3
 800692e:	d111      	bne.n	8006954 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	0c1b      	lsrs	r3, r3, #16
 8006934:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800693e:	429a      	cmp	r2, r3
 8006940:	d108      	bne.n	8006954 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	0e1b      	lsrs	r3, r3, #24
 8006946:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800694e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006950:	429a      	cmp	r2, r3
 8006952:	d001      	beq.n	8006958 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e000      	b.n	800695a <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3730      	adds	r7, #48	; 0x30
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	58024400 	.word	0x58024400
 8006968:	fffffc0c 	.word	0xfffffc0c
 800696c:	ffff0007 	.word	0xffff0007

08006970 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d101      	bne.n	8006984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e19c      	b.n	8006cbe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006984:	4b8a      	ldr	r3, [pc, #552]	; (8006bb0 <HAL_RCC_ClockConfig+0x240>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 030f 	and.w	r3, r3, #15
 800698c:	683a      	ldr	r2, [r7, #0]
 800698e:	429a      	cmp	r2, r3
 8006990:	d910      	bls.n	80069b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006992:	4b87      	ldr	r3, [pc, #540]	; (8006bb0 <HAL_RCC_ClockConfig+0x240>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f023 020f 	bic.w	r2, r3, #15
 800699a:	4985      	ldr	r1, [pc, #532]	; (8006bb0 <HAL_RCC_ClockConfig+0x240>)
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	4313      	orrs	r3, r2
 80069a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069a2:	4b83      	ldr	r3, [pc, #524]	; (8006bb0 <HAL_RCC_ClockConfig+0x240>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 030f 	and.w	r3, r3, #15
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d001      	beq.n	80069b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e184      	b.n	8006cbe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0304 	and.w	r3, r3, #4
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d010      	beq.n	80069e2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	691a      	ldr	r2, [r3, #16]
 80069c4:	4b7b      	ldr	r3, [pc, #492]	; (8006bb4 <HAL_RCC_ClockConfig+0x244>)
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d908      	bls.n	80069e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80069d0:	4b78      	ldr	r3, [pc, #480]	; (8006bb4 <HAL_RCC_ClockConfig+0x244>)
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	4975      	ldr	r1, [pc, #468]	; (8006bb4 <HAL_RCC_ClockConfig+0x244>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0308 	and.w	r3, r3, #8
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d010      	beq.n	8006a10 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	695a      	ldr	r2, [r3, #20]
 80069f2:	4b70      	ldr	r3, [pc, #448]	; (8006bb4 <HAL_RCC_ClockConfig+0x244>)
 80069f4:	69db      	ldr	r3, [r3, #28]
 80069f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d908      	bls.n	8006a10 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80069fe:	4b6d      	ldr	r3, [pc, #436]	; (8006bb4 <HAL_RCC_ClockConfig+0x244>)
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	496a      	ldr	r1, [pc, #424]	; (8006bb4 <HAL_RCC_ClockConfig+0x244>)
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0310 	and.w	r3, r3, #16
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d010      	beq.n	8006a3e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	699a      	ldr	r2, [r3, #24]
 8006a20:	4b64      	ldr	r3, [pc, #400]	; (8006bb4 <HAL_RCC_ClockConfig+0x244>)
 8006a22:	69db      	ldr	r3, [r3, #28]
 8006a24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d908      	bls.n	8006a3e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a2c:	4b61      	ldr	r3, [pc, #388]	; (8006bb4 <HAL_RCC_ClockConfig+0x244>)
 8006a2e:	69db      	ldr	r3, [r3, #28]
 8006a30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	495e      	ldr	r1, [pc, #376]	; (8006bb4 <HAL_RCC_ClockConfig+0x244>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0320 	and.w	r3, r3, #32
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d010      	beq.n	8006a6c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	69da      	ldr	r2, [r3, #28]
 8006a4e:	4b59      	ldr	r3, [pc, #356]	; (8006bb4 <HAL_RCC_ClockConfig+0x244>)
 8006a50:	6a1b      	ldr	r3, [r3, #32]
 8006a52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d908      	bls.n	8006a6c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006a5a:	4b56      	ldr	r3, [pc, #344]	; (8006bb4 <HAL_RCC_ClockConfig+0x244>)
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	69db      	ldr	r3, [r3, #28]
 8006a66:	4953      	ldr	r1, [pc, #332]	; (8006bb4 <HAL_RCC_ClockConfig+0x244>)
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0302 	and.w	r3, r3, #2
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d010      	beq.n	8006a9a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	68da      	ldr	r2, [r3, #12]
 8006a7c:	4b4d      	ldr	r3, [pc, #308]	; (8006bb4 <HAL_RCC_ClockConfig+0x244>)
 8006a7e:	699b      	ldr	r3, [r3, #24]
 8006a80:	f003 030f 	and.w	r3, r3, #15
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d908      	bls.n	8006a9a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a88:	4b4a      	ldr	r3, [pc, #296]	; (8006bb4 <HAL_RCC_ClockConfig+0x244>)
 8006a8a:	699b      	ldr	r3, [r3, #24]
 8006a8c:	f023 020f 	bic.w	r2, r3, #15
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	4947      	ldr	r1, [pc, #284]	; (8006bb4 <HAL_RCC_ClockConfig+0x244>)
 8006a96:	4313      	orrs	r3, r2
 8006a98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 0301 	and.w	r3, r3, #1
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d055      	beq.n	8006b52 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006aa6:	4b43      	ldr	r3, [pc, #268]	; (8006bb4 <HAL_RCC_ClockConfig+0x244>)
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	4940      	ldr	r1, [pc, #256]	; (8006bb4 <HAL_RCC_ClockConfig+0x244>)
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d107      	bne.n	8006ad0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ac0:	4b3c      	ldr	r3, [pc, #240]	; (8006bb4 <HAL_RCC_ClockConfig+0x244>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d121      	bne.n	8006b10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e0f6      	b.n	8006cbe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	2b03      	cmp	r3, #3
 8006ad6:	d107      	bne.n	8006ae8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ad8:	4b36      	ldr	r3, [pc, #216]	; (8006bb4 <HAL_RCC_ClockConfig+0x244>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d115      	bne.n	8006b10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e0ea      	b.n	8006cbe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d107      	bne.n	8006b00 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006af0:	4b30      	ldr	r3, [pc, #192]	; (8006bb4 <HAL_RCC_ClockConfig+0x244>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d109      	bne.n	8006b10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e0de      	b.n	8006cbe <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b00:	4b2c      	ldr	r3, [pc, #176]	; (8006bb4 <HAL_RCC_ClockConfig+0x244>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0304 	and.w	r3, r3, #4
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d101      	bne.n	8006b10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e0d6      	b.n	8006cbe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b10:	4b28      	ldr	r3, [pc, #160]	; (8006bb4 <HAL_RCC_ClockConfig+0x244>)
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	f023 0207 	bic.w	r2, r3, #7
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	4925      	ldr	r1, [pc, #148]	; (8006bb4 <HAL_RCC_ClockConfig+0x244>)
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b22:	f7fb feaf 	bl	8002884 <HAL_GetTick>
 8006b26:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b28:	e00a      	b.n	8006b40 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b2a:	f7fb feab 	bl	8002884 <HAL_GetTick>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d901      	bls.n	8006b40 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e0be      	b.n	8006cbe <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b40:	4b1c      	ldr	r3, [pc, #112]	; (8006bb4 <HAL_RCC_ClockConfig+0x244>)
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	00db      	lsls	r3, r3, #3
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d1eb      	bne.n	8006b2a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0302 	and.w	r3, r3, #2
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d010      	beq.n	8006b80 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	68da      	ldr	r2, [r3, #12]
 8006b62:	4b14      	ldr	r3, [pc, #80]	; (8006bb4 <HAL_RCC_ClockConfig+0x244>)
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	f003 030f 	and.w	r3, r3, #15
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d208      	bcs.n	8006b80 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b6e:	4b11      	ldr	r3, [pc, #68]	; (8006bb4 <HAL_RCC_ClockConfig+0x244>)
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	f023 020f 	bic.w	r2, r3, #15
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	490e      	ldr	r1, [pc, #56]	; (8006bb4 <HAL_RCC_ClockConfig+0x244>)
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b80:	4b0b      	ldr	r3, [pc, #44]	; (8006bb0 <HAL_RCC_ClockConfig+0x240>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 030f 	and.w	r3, r3, #15
 8006b88:	683a      	ldr	r2, [r7, #0]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d214      	bcs.n	8006bb8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b8e:	4b08      	ldr	r3, [pc, #32]	; (8006bb0 <HAL_RCC_ClockConfig+0x240>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f023 020f 	bic.w	r2, r3, #15
 8006b96:	4906      	ldr	r1, [pc, #24]	; (8006bb0 <HAL_RCC_ClockConfig+0x240>)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b9e:	4b04      	ldr	r3, [pc, #16]	; (8006bb0 <HAL_RCC_ClockConfig+0x240>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 030f 	and.w	r3, r3, #15
 8006ba6:	683a      	ldr	r2, [r7, #0]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d005      	beq.n	8006bb8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e086      	b.n	8006cbe <HAL_RCC_ClockConfig+0x34e>
 8006bb0:	52002000 	.word	0x52002000
 8006bb4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 0304 	and.w	r3, r3, #4
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d010      	beq.n	8006be6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	691a      	ldr	r2, [r3, #16]
 8006bc8:	4b3f      	ldr	r3, [pc, #252]	; (8006cc8 <HAL_RCC_ClockConfig+0x358>)
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d208      	bcs.n	8006be6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006bd4:	4b3c      	ldr	r3, [pc, #240]	; (8006cc8 <HAL_RCC_ClockConfig+0x358>)
 8006bd6:	699b      	ldr	r3, [r3, #24]
 8006bd8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	4939      	ldr	r1, [pc, #228]	; (8006cc8 <HAL_RCC_ClockConfig+0x358>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0308 	and.w	r3, r3, #8
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d010      	beq.n	8006c14 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	695a      	ldr	r2, [r3, #20]
 8006bf6:	4b34      	ldr	r3, [pc, #208]	; (8006cc8 <HAL_RCC_ClockConfig+0x358>)
 8006bf8:	69db      	ldr	r3, [r3, #28]
 8006bfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d208      	bcs.n	8006c14 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006c02:	4b31      	ldr	r3, [pc, #196]	; (8006cc8 <HAL_RCC_ClockConfig+0x358>)
 8006c04:	69db      	ldr	r3, [r3, #28]
 8006c06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	492e      	ldr	r1, [pc, #184]	; (8006cc8 <HAL_RCC_ClockConfig+0x358>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0310 	and.w	r3, r3, #16
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d010      	beq.n	8006c42 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	699a      	ldr	r2, [r3, #24]
 8006c24:	4b28      	ldr	r3, [pc, #160]	; (8006cc8 <HAL_RCC_ClockConfig+0x358>)
 8006c26:	69db      	ldr	r3, [r3, #28]
 8006c28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d208      	bcs.n	8006c42 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006c30:	4b25      	ldr	r3, [pc, #148]	; (8006cc8 <HAL_RCC_ClockConfig+0x358>)
 8006c32:	69db      	ldr	r3, [r3, #28]
 8006c34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	699b      	ldr	r3, [r3, #24]
 8006c3c:	4922      	ldr	r1, [pc, #136]	; (8006cc8 <HAL_RCC_ClockConfig+0x358>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0320 	and.w	r3, r3, #32
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d010      	beq.n	8006c70 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	69da      	ldr	r2, [r3, #28]
 8006c52:	4b1d      	ldr	r3, [pc, #116]	; (8006cc8 <HAL_RCC_ClockConfig+0x358>)
 8006c54:	6a1b      	ldr	r3, [r3, #32]
 8006c56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d208      	bcs.n	8006c70 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006c5e:	4b1a      	ldr	r3, [pc, #104]	; (8006cc8 <HAL_RCC_ClockConfig+0x358>)
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	69db      	ldr	r3, [r3, #28]
 8006c6a:	4917      	ldr	r1, [pc, #92]	; (8006cc8 <HAL_RCC_ClockConfig+0x358>)
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006c70:	f000 f834 	bl	8006cdc <HAL_RCC_GetSysClockFreq>
 8006c74:	4602      	mov	r2, r0
 8006c76:	4b14      	ldr	r3, [pc, #80]	; (8006cc8 <HAL_RCC_ClockConfig+0x358>)
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	0a1b      	lsrs	r3, r3, #8
 8006c7c:	f003 030f 	and.w	r3, r3, #15
 8006c80:	4912      	ldr	r1, [pc, #72]	; (8006ccc <HAL_RCC_ClockConfig+0x35c>)
 8006c82:	5ccb      	ldrb	r3, [r1, r3]
 8006c84:	f003 031f 	and.w	r3, r3, #31
 8006c88:	fa22 f303 	lsr.w	r3, r2, r3
 8006c8c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c8e:	4b0e      	ldr	r3, [pc, #56]	; (8006cc8 <HAL_RCC_ClockConfig+0x358>)
 8006c90:	699b      	ldr	r3, [r3, #24]
 8006c92:	f003 030f 	and.w	r3, r3, #15
 8006c96:	4a0d      	ldr	r2, [pc, #52]	; (8006ccc <HAL_RCC_ClockConfig+0x35c>)
 8006c98:	5cd3      	ldrb	r3, [r2, r3]
 8006c9a:	f003 031f 	and.w	r3, r3, #31
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ca4:	4a0a      	ldr	r2, [pc, #40]	; (8006cd0 <HAL_RCC_ClockConfig+0x360>)
 8006ca6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ca8:	4a0a      	ldr	r2, [pc, #40]	; (8006cd4 <HAL_RCC_ClockConfig+0x364>)
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006cae:	4b0a      	ldr	r3, [pc, #40]	; (8006cd8 <HAL_RCC_ClockConfig+0x368>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7fa fea0 	bl	80019f8 <HAL_InitTick>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3718      	adds	r7, #24
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	58024400 	.word	0x58024400
 8006ccc:	0801dd5c 	.word	0x0801dd5c
 8006cd0:	2400000c 	.word	0x2400000c
 8006cd4:	24000008 	.word	0x24000008
 8006cd8:	24000010 	.word	0x24000010

08006cdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b089      	sub	sp, #36	; 0x24
 8006ce0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ce2:	4bb3      	ldr	r3, [pc, #716]	; (8006fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cea:	2b18      	cmp	r3, #24
 8006cec:	f200 8155 	bhi.w	8006f9a <HAL_RCC_GetSysClockFreq+0x2be>
 8006cf0:	a201      	add	r2, pc, #4	; (adr r2, 8006cf8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf6:	bf00      	nop
 8006cf8:	08006d5d 	.word	0x08006d5d
 8006cfc:	08006f9b 	.word	0x08006f9b
 8006d00:	08006f9b 	.word	0x08006f9b
 8006d04:	08006f9b 	.word	0x08006f9b
 8006d08:	08006f9b 	.word	0x08006f9b
 8006d0c:	08006f9b 	.word	0x08006f9b
 8006d10:	08006f9b 	.word	0x08006f9b
 8006d14:	08006f9b 	.word	0x08006f9b
 8006d18:	08006d83 	.word	0x08006d83
 8006d1c:	08006f9b 	.word	0x08006f9b
 8006d20:	08006f9b 	.word	0x08006f9b
 8006d24:	08006f9b 	.word	0x08006f9b
 8006d28:	08006f9b 	.word	0x08006f9b
 8006d2c:	08006f9b 	.word	0x08006f9b
 8006d30:	08006f9b 	.word	0x08006f9b
 8006d34:	08006f9b 	.word	0x08006f9b
 8006d38:	08006d89 	.word	0x08006d89
 8006d3c:	08006f9b 	.word	0x08006f9b
 8006d40:	08006f9b 	.word	0x08006f9b
 8006d44:	08006f9b 	.word	0x08006f9b
 8006d48:	08006f9b 	.word	0x08006f9b
 8006d4c:	08006f9b 	.word	0x08006f9b
 8006d50:	08006f9b 	.word	0x08006f9b
 8006d54:	08006f9b 	.word	0x08006f9b
 8006d58:	08006d8f 	.word	0x08006d8f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d5c:	4b94      	ldr	r3, [pc, #592]	; (8006fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0320 	and.w	r3, r3, #32
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d009      	beq.n	8006d7c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d68:	4b91      	ldr	r3, [pc, #580]	; (8006fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	08db      	lsrs	r3, r3, #3
 8006d6e:	f003 0303 	and.w	r3, r3, #3
 8006d72:	4a90      	ldr	r2, [pc, #576]	; (8006fb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d74:	fa22 f303 	lsr.w	r3, r2, r3
 8006d78:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006d7a:	e111      	b.n	8006fa0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006d7c:	4b8d      	ldr	r3, [pc, #564]	; (8006fb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d7e:	61bb      	str	r3, [r7, #24]
    break;
 8006d80:	e10e      	b.n	8006fa0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006d82:	4b8d      	ldr	r3, [pc, #564]	; (8006fb8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d84:	61bb      	str	r3, [r7, #24]
    break;
 8006d86:	e10b      	b.n	8006fa0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006d88:	4b8c      	ldr	r3, [pc, #560]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006d8a:	61bb      	str	r3, [r7, #24]
    break;
 8006d8c:	e108      	b.n	8006fa0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d8e:	4b88      	ldr	r3, [pc, #544]	; (8006fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d92:	f003 0303 	and.w	r3, r3, #3
 8006d96:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006d98:	4b85      	ldr	r3, [pc, #532]	; (8006fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9c:	091b      	lsrs	r3, r3, #4
 8006d9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006da2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006da4:	4b82      	ldr	r3, [pc, #520]	; (8006fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da8:	f003 0301 	and.w	r3, r3, #1
 8006dac:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006dae:	4b80      	ldr	r3, [pc, #512]	; (8006fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db2:	08db      	lsrs	r3, r3, #3
 8006db4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	fb02 f303 	mul.w	r3, r2, r3
 8006dbe:	ee07 3a90 	vmov	s15, r3
 8006dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dc6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f000 80e1 	beq.w	8006f94 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	f000 8083 	beq.w	8006ee0 <HAL_RCC_GetSysClockFreq+0x204>
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	f200 80a1 	bhi.w	8006f24 <HAL_RCC_GetSysClockFreq+0x248>
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d003      	beq.n	8006df0 <HAL_RCC_GetSysClockFreq+0x114>
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d056      	beq.n	8006e9c <HAL_RCC_GetSysClockFreq+0x1c0>
 8006dee:	e099      	b.n	8006f24 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006df0:	4b6f      	ldr	r3, [pc, #444]	; (8006fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0320 	and.w	r3, r3, #32
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d02d      	beq.n	8006e58 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006dfc:	4b6c      	ldr	r3, [pc, #432]	; (8006fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	08db      	lsrs	r3, r3, #3
 8006e02:	f003 0303 	and.w	r3, r3, #3
 8006e06:	4a6b      	ldr	r2, [pc, #428]	; (8006fb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e08:	fa22 f303 	lsr.w	r3, r2, r3
 8006e0c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	ee07 3a90 	vmov	s15, r3
 8006e14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	ee07 3a90 	vmov	s15, r3
 8006e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e26:	4b62      	ldr	r3, [pc, #392]	; (8006fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e2e:	ee07 3a90 	vmov	s15, r3
 8006e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e36:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e3a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006fc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e52:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006e56:	e087      	b.n	8006f68 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	ee07 3a90 	vmov	s15, r3
 8006e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e62:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006fc4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e6a:	4b51      	ldr	r3, [pc, #324]	; (8006fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e72:	ee07 3a90 	vmov	s15, r3
 8006e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e7e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006fc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e9a:	e065      	b.n	8006f68 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	ee07 3a90 	vmov	s15, r3
 8006ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ea6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006fc8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eae:	4b40      	ldr	r3, [pc, #256]	; (8006fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eb6:	ee07 3a90 	vmov	s15, r3
 8006eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ebe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ec2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006fc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ece:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ede:	e043      	b.n	8006f68 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	ee07 3a90 	vmov	s15, r3
 8006ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eea:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006fcc <HAL_RCC_GetSysClockFreq+0x2f0>
 8006eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ef2:	4b2f      	ldr	r3, [pc, #188]	; (8006fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006efa:	ee07 3a90 	vmov	s15, r3
 8006efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f02:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f06:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006fc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f22:	e021      	b.n	8006f68 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	ee07 3a90 	vmov	s15, r3
 8006f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f2e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006fc8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f36:	4b1e      	ldr	r3, [pc, #120]	; (8006fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f3e:	ee07 3a90 	vmov	s15, r3
 8006f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f46:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f4a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006fc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f66:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006f68:	4b11      	ldr	r3, [pc, #68]	; (8006fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6c:	0a5b      	lsrs	r3, r3, #9
 8006f6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f72:	3301      	adds	r3, #1
 8006f74:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	ee07 3a90 	vmov	s15, r3
 8006f7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006f80:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f8c:	ee17 3a90 	vmov	r3, s15
 8006f90:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006f92:	e005      	b.n	8006fa0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006f94:	2300      	movs	r3, #0
 8006f96:	61bb      	str	r3, [r7, #24]
    break;
 8006f98:	e002      	b.n	8006fa0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006f9a:	4b07      	ldr	r3, [pc, #28]	; (8006fb8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006f9c:	61bb      	str	r3, [r7, #24]
    break;
 8006f9e:	bf00      	nop
  }

  return sysclockfreq;
 8006fa0:	69bb      	ldr	r3, [r7, #24]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3724      	adds	r7, #36	; 0x24
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	58024400 	.word	0x58024400
 8006fb4:	03d09000 	.word	0x03d09000
 8006fb8:	003d0900 	.word	0x003d0900
 8006fbc:	007a1200 	.word	0x007a1200
 8006fc0:	46000000 	.word	0x46000000
 8006fc4:	4c742400 	.word	0x4c742400
 8006fc8:	4a742400 	.word	0x4a742400
 8006fcc:	4af42400 	.word	0x4af42400

08006fd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006fd6:	f7ff fe81 	bl	8006cdc <HAL_RCC_GetSysClockFreq>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	4b10      	ldr	r3, [pc, #64]	; (8007020 <HAL_RCC_GetHCLKFreq+0x50>)
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	0a1b      	lsrs	r3, r3, #8
 8006fe2:	f003 030f 	and.w	r3, r3, #15
 8006fe6:	490f      	ldr	r1, [pc, #60]	; (8007024 <HAL_RCC_GetHCLKFreq+0x54>)
 8006fe8:	5ccb      	ldrb	r3, [r1, r3]
 8006fea:	f003 031f 	and.w	r3, r3, #31
 8006fee:	fa22 f303 	lsr.w	r3, r2, r3
 8006ff2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ff4:	4b0a      	ldr	r3, [pc, #40]	; (8007020 <HAL_RCC_GetHCLKFreq+0x50>)
 8006ff6:	699b      	ldr	r3, [r3, #24]
 8006ff8:	f003 030f 	and.w	r3, r3, #15
 8006ffc:	4a09      	ldr	r2, [pc, #36]	; (8007024 <HAL_RCC_GetHCLKFreq+0x54>)
 8006ffe:	5cd3      	ldrb	r3, [r2, r3]
 8007000:	f003 031f 	and.w	r3, r3, #31
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	fa22 f303 	lsr.w	r3, r2, r3
 800700a:	4a07      	ldr	r2, [pc, #28]	; (8007028 <HAL_RCC_GetHCLKFreq+0x58>)
 800700c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800700e:	4a07      	ldr	r2, [pc, #28]	; (800702c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007014:	4b04      	ldr	r3, [pc, #16]	; (8007028 <HAL_RCC_GetHCLKFreq+0x58>)
 8007016:	681b      	ldr	r3, [r3, #0]
}
 8007018:	4618      	mov	r0, r3
 800701a:	3708      	adds	r7, #8
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	58024400 	.word	0x58024400
 8007024:	0801dd5c 	.word	0x0801dd5c
 8007028:	2400000c 	.word	0x2400000c
 800702c:	24000008 	.word	0x24000008

08007030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007034:	f7ff ffcc 	bl	8006fd0 <HAL_RCC_GetHCLKFreq>
 8007038:	4602      	mov	r2, r0
 800703a:	4b06      	ldr	r3, [pc, #24]	; (8007054 <HAL_RCC_GetPCLK1Freq+0x24>)
 800703c:	69db      	ldr	r3, [r3, #28]
 800703e:	091b      	lsrs	r3, r3, #4
 8007040:	f003 0307 	and.w	r3, r3, #7
 8007044:	4904      	ldr	r1, [pc, #16]	; (8007058 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007046:	5ccb      	ldrb	r3, [r1, r3]
 8007048:	f003 031f 	and.w	r3, r3, #31
 800704c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007050:	4618      	mov	r0, r3
 8007052:	bd80      	pop	{r7, pc}
 8007054:	58024400 	.word	0x58024400
 8007058:	0801dd5c 	.word	0x0801dd5c

0800705c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007060:	f7ff ffb6 	bl	8006fd0 <HAL_RCC_GetHCLKFreq>
 8007064:	4602      	mov	r2, r0
 8007066:	4b06      	ldr	r3, [pc, #24]	; (8007080 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007068:	69db      	ldr	r3, [r3, #28]
 800706a:	0a1b      	lsrs	r3, r3, #8
 800706c:	f003 0307 	and.w	r3, r3, #7
 8007070:	4904      	ldr	r1, [pc, #16]	; (8007084 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007072:	5ccb      	ldrb	r3, [r1, r3]
 8007074:	f003 031f 	and.w	r3, r3, #31
 8007078:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800707c:	4618      	mov	r0, r3
 800707e:	bd80      	pop	{r7, pc}
 8007080:	58024400 	.word	0x58024400
 8007084:	0801dd5c 	.word	0x0801dd5c

08007088 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	223f      	movs	r2, #63	; 0x3f
 8007096:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007098:	4b1a      	ldr	r3, [pc, #104]	; (8007104 <HAL_RCC_GetClockConfig+0x7c>)
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	f003 0207 	and.w	r2, r3, #7
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80070a4:	4b17      	ldr	r3, [pc, #92]	; (8007104 <HAL_RCC_GetClockConfig+0x7c>)
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80070b0:	4b14      	ldr	r3, [pc, #80]	; (8007104 <HAL_RCC_GetClockConfig+0x7c>)
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	f003 020f 	and.w	r2, r3, #15
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80070bc:	4b11      	ldr	r3, [pc, #68]	; (8007104 <HAL_RCC_GetClockConfig+0x7c>)
 80070be:	699b      	ldr	r3, [r3, #24]
 80070c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80070c8:	4b0e      	ldr	r3, [pc, #56]	; (8007104 <HAL_RCC_GetClockConfig+0x7c>)
 80070ca:	69db      	ldr	r3, [r3, #28]
 80070cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80070d4:	4b0b      	ldr	r3, [pc, #44]	; (8007104 <HAL_RCC_GetClockConfig+0x7c>)
 80070d6:	69db      	ldr	r3, [r3, #28]
 80070d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80070e0:	4b08      	ldr	r3, [pc, #32]	; (8007104 <HAL_RCC_GetClockConfig+0x7c>)
 80070e2:	6a1b      	ldr	r3, [r3, #32]
 80070e4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80070ec:	4b06      	ldr	r3, [pc, #24]	; (8007108 <HAL_RCC_GetClockConfig+0x80>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 020f 	and.w	r2, r3, #15
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	601a      	str	r2, [r3, #0]
}
 80070f8:	bf00      	nop
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr
 8007104:	58024400 	.word	0x58024400
 8007108:	52002000 	.word	0x52002000

0800710c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b086      	sub	sp, #24
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007114:	2300      	movs	r3, #0
 8007116:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007118:	2300      	movs	r3, #0
 800711a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d03f      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800712c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007130:	d02a      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007132:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007136:	d824      	bhi.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007138:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800713c:	d018      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800713e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007142:	d81e      	bhi.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007144:	2b00      	cmp	r3, #0
 8007146:	d003      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007148:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800714c:	d007      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800714e:	e018      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007150:	4bab      	ldr	r3, [pc, #684]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007154:	4aaa      	ldr	r2, [pc, #680]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007156:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800715a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800715c:	e015      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	3304      	adds	r3, #4
 8007162:	2102      	movs	r1, #2
 8007164:	4618      	mov	r0, r3
 8007166:	f001 f989 	bl	800847c <RCCEx_PLL2_Config>
 800716a:	4603      	mov	r3, r0
 800716c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800716e:	e00c      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	3324      	adds	r3, #36	; 0x24
 8007174:	2102      	movs	r1, #2
 8007176:	4618      	mov	r0, r3
 8007178:	f001 fa32 	bl	80085e0 <RCCEx_PLL3_Config>
 800717c:	4603      	mov	r3, r0
 800717e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007180:	e003      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	75fb      	strb	r3, [r7, #23]
      break;
 8007186:	e000      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007188:	bf00      	nop
    }

    if(ret == HAL_OK)
 800718a:	7dfb      	ldrb	r3, [r7, #23]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d109      	bne.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007190:	4b9b      	ldr	r3, [pc, #620]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007194:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800719c:	4998      	ldr	r1, [pc, #608]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800719e:	4313      	orrs	r3, r2
 80071a0:	650b      	str	r3, [r1, #80]	; 0x50
 80071a2:	e001      	b.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071a4:	7dfb      	ldrb	r3, [r7, #23]
 80071a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d03d      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b8:	2b04      	cmp	r3, #4
 80071ba:	d826      	bhi.n	800720a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80071bc:	a201      	add	r2, pc, #4	; (adr r2, 80071c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80071be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c2:	bf00      	nop
 80071c4:	080071d9 	.word	0x080071d9
 80071c8:	080071e7 	.word	0x080071e7
 80071cc:	080071f9 	.word	0x080071f9
 80071d0:	08007211 	.word	0x08007211
 80071d4:	08007211 	.word	0x08007211
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071d8:	4b89      	ldr	r3, [pc, #548]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071dc:	4a88      	ldr	r2, [pc, #544]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80071e4:	e015      	b.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	3304      	adds	r3, #4
 80071ea:	2100      	movs	r1, #0
 80071ec:	4618      	mov	r0, r3
 80071ee:	f001 f945 	bl	800847c <RCCEx_PLL2_Config>
 80071f2:	4603      	mov	r3, r0
 80071f4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80071f6:	e00c      	b.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	3324      	adds	r3, #36	; 0x24
 80071fc:	2100      	movs	r1, #0
 80071fe:	4618      	mov	r0, r3
 8007200:	f001 f9ee 	bl	80085e0 <RCCEx_PLL3_Config>
 8007204:	4603      	mov	r3, r0
 8007206:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007208:	e003      	b.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	75fb      	strb	r3, [r7, #23]
      break;
 800720e:	e000      	b.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007210:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007212:	7dfb      	ldrb	r3, [r7, #23]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d109      	bne.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007218:	4b79      	ldr	r3, [pc, #484]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800721a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800721c:	f023 0207 	bic.w	r2, r3, #7
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007224:	4976      	ldr	r1, [pc, #472]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007226:	4313      	orrs	r3, r2
 8007228:	650b      	str	r3, [r1, #80]	; 0x50
 800722a:	e001      	b.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800722c:	7dfb      	ldrb	r3, [r7, #23]
 800722e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007238:	2b00      	cmp	r3, #0
 800723a:	d051      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007242:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007246:	d036      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007248:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800724c:	d830      	bhi.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800724e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007252:	d032      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8007254:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007258:	d82a      	bhi.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800725a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800725e:	d02e      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8007260:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007264:	d824      	bhi.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007266:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800726a:	d018      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x192>
 800726c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007270:	d81e      	bhi.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007272:	2b00      	cmp	r3, #0
 8007274:	d003      	beq.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x172>
 8007276:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800727a:	d007      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800727c:	e018      	b.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800727e:	4b60      	ldr	r3, [pc, #384]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007282:	4a5f      	ldr	r2, [pc, #380]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007288:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800728a:	e019      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	3304      	adds	r3, #4
 8007290:	2100      	movs	r1, #0
 8007292:	4618      	mov	r0, r3
 8007294:	f001 f8f2 	bl	800847c <RCCEx_PLL2_Config>
 8007298:	4603      	mov	r3, r0
 800729a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800729c:	e010      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	3324      	adds	r3, #36	; 0x24
 80072a2:	2100      	movs	r1, #0
 80072a4:	4618      	mov	r0, r3
 80072a6:	f001 f99b 	bl	80085e0 <RCCEx_PLL3_Config>
 80072aa:	4603      	mov	r3, r0
 80072ac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80072ae:	e007      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	75fb      	strb	r3, [r7, #23]
      break;
 80072b4:	e004      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80072b6:	bf00      	nop
 80072b8:	e002      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80072ba:	bf00      	nop
 80072bc:	e000      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80072be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072c0:	7dfb      	ldrb	r3, [r7, #23]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10a      	bne.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80072c6:	4b4e      	ldr	r3, [pc, #312]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ca:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80072d4:	494a      	ldr	r1, [pc, #296]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072d6:	4313      	orrs	r3, r2
 80072d8:	658b      	str	r3, [r1, #88]	; 0x58
 80072da:	e001      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072dc:	7dfb      	ldrb	r3, [r7, #23]
 80072de:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d051      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80072f2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80072f6:	d036      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80072f8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80072fc:	d830      	bhi.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80072fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007302:	d032      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8007304:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007308:	d82a      	bhi.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800730a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800730e:	d02e      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x262>
 8007310:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007314:	d824      	bhi.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007316:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800731a:	d018      	beq.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x242>
 800731c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007320:	d81e      	bhi.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007322:	2b00      	cmp	r3, #0
 8007324:	d003      	beq.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8007326:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800732a:	d007      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800732c:	e018      	b.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800732e:	4b34      	ldr	r3, [pc, #208]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007332:	4a33      	ldr	r2, [pc, #204]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007338:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800733a:	e019      	b.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	3304      	adds	r3, #4
 8007340:	2100      	movs	r1, #0
 8007342:	4618      	mov	r0, r3
 8007344:	f001 f89a 	bl	800847c <RCCEx_PLL2_Config>
 8007348:	4603      	mov	r3, r0
 800734a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800734c:	e010      	b.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	3324      	adds	r3, #36	; 0x24
 8007352:	2100      	movs	r1, #0
 8007354:	4618      	mov	r0, r3
 8007356:	f001 f943 	bl	80085e0 <RCCEx_PLL3_Config>
 800735a:	4603      	mov	r3, r0
 800735c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800735e:	e007      	b.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	75fb      	strb	r3, [r7, #23]
      break;
 8007364:	e004      	b.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8007366:	bf00      	nop
 8007368:	e002      	b.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800736a:	bf00      	nop
 800736c:	e000      	b.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800736e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007370:	7dfb      	ldrb	r3, [r7, #23]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d10a      	bne.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007376:	4b22      	ldr	r3, [pc, #136]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800737a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007384:	491e      	ldr	r1, [pc, #120]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007386:	4313      	orrs	r3, r2
 8007388:	658b      	str	r3, [r1, #88]	; 0x58
 800738a:	e001      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800738c:	7dfb      	ldrb	r3, [r7, #23]
 800738e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d035      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073a0:	2b30      	cmp	r3, #48	; 0x30
 80073a2:	d01c      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80073a4:	2b30      	cmp	r3, #48	; 0x30
 80073a6:	d817      	bhi.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80073a8:	2b20      	cmp	r3, #32
 80073aa:	d00c      	beq.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80073ac:	2b20      	cmp	r3, #32
 80073ae:	d813      	bhi.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d016      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80073b4:	2b10      	cmp	r3, #16
 80073b6:	d10f      	bne.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073b8:	4b11      	ldr	r3, [pc, #68]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073bc:	4a10      	ldr	r2, [pc, #64]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80073c4:	e00e      	b.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	3304      	adds	r3, #4
 80073ca:	2102      	movs	r1, #2
 80073cc:	4618      	mov	r0, r3
 80073ce:	f001 f855 	bl	800847c <RCCEx_PLL2_Config>
 80073d2:	4603      	mov	r3, r0
 80073d4:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80073d6:	e005      	b.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	75fb      	strb	r3, [r7, #23]
      break;
 80073dc:	e002      	b.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80073de:	bf00      	nop
 80073e0:	e000      	b.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80073e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073e4:	7dfb      	ldrb	r3, [r7, #23]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10c      	bne.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80073ea:	4b05      	ldr	r3, [pc, #20]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073f6:	4902      	ldr	r1, [pc, #8]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073f8:	4313      	orrs	r3, r2
 80073fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80073fc:	e004      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80073fe:	bf00      	nop
 8007400:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007404:	7dfb      	ldrb	r3, [r7, #23]
 8007406:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007410:	2b00      	cmp	r3, #0
 8007412:	d047      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007418:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800741c:	d030      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800741e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007422:	d82a      	bhi.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007424:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007428:	d02c      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800742a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800742e:	d824      	bhi.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007430:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007434:	d018      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800743a:	d81e      	bhi.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800743c:	2b00      	cmp	r3, #0
 800743e:	d003      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007444:	d007      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007446:	e018      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007448:	4bac      	ldr	r3, [pc, #688]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800744a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744c:	4aab      	ldr	r2, [pc, #684]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800744e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007452:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007454:	e017      	b.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	3304      	adds	r3, #4
 800745a:	2100      	movs	r1, #0
 800745c:	4618      	mov	r0, r3
 800745e:	f001 f80d 	bl	800847c <RCCEx_PLL2_Config>
 8007462:	4603      	mov	r3, r0
 8007464:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007466:	e00e      	b.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	3324      	adds	r3, #36	; 0x24
 800746c:	2100      	movs	r1, #0
 800746e:	4618      	mov	r0, r3
 8007470:	f001 f8b6 	bl	80085e0 <RCCEx_PLL3_Config>
 8007474:	4603      	mov	r3, r0
 8007476:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007478:	e005      	b.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	75fb      	strb	r3, [r7, #23]
      break;
 800747e:	e002      	b.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8007480:	bf00      	nop
 8007482:	e000      	b.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8007484:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007486:	7dfb      	ldrb	r3, [r7, #23]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d109      	bne.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800748c:	4b9b      	ldr	r3, [pc, #620]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800748e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007490:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007498:	4998      	ldr	r1, [pc, #608]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800749a:	4313      	orrs	r3, r2
 800749c:	650b      	str	r3, [r1, #80]	; 0x50
 800749e:	e001      	b.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a0:	7dfb      	ldrb	r3, [r7, #23]
 80074a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d049      	beq.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074b8:	d02e      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80074ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074be:	d828      	bhi.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80074c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80074c4:	d02a      	beq.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x410>
 80074c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80074ca:	d822      	bhi.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80074cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80074d0:	d026      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80074d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80074d6:	d81c      	bhi.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80074d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074dc:	d010      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80074de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074e2:	d816      	bhi.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d01d      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80074e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074ec:	d111      	bne.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	3304      	adds	r3, #4
 80074f2:	2101      	movs	r1, #1
 80074f4:	4618      	mov	r0, r3
 80074f6:	f000 ffc1 	bl	800847c <RCCEx_PLL2_Config>
 80074fa:	4603      	mov	r3, r0
 80074fc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80074fe:	e012      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	3324      	adds	r3, #36	; 0x24
 8007504:	2101      	movs	r1, #1
 8007506:	4618      	mov	r0, r3
 8007508:	f001 f86a 	bl	80085e0 <RCCEx_PLL3_Config>
 800750c:	4603      	mov	r3, r0
 800750e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007510:	e009      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	75fb      	strb	r3, [r7, #23]
      break;
 8007516:	e006      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007518:	bf00      	nop
 800751a:	e004      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800751c:	bf00      	nop
 800751e:	e002      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007520:	bf00      	nop
 8007522:	e000      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007524:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007526:	7dfb      	ldrb	r3, [r7, #23]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d109      	bne.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800752c:	4b73      	ldr	r3, [pc, #460]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800752e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007530:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007538:	4970      	ldr	r1, [pc, #448]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800753a:	4313      	orrs	r3, r2
 800753c:	650b      	str	r3, [r1, #80]	; 0x50
 800753e:	e001      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007540:	7dfb      	ldrb	r3, [r7, #23]
 8007542:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d04b      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007556:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800755a:	d02e      	beq.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800755c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007560:	d828      	bhi.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007566:	d02a      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8007568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800756c:	d822      	bhi.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800756e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007572:	d026      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8007574:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007578:	d81c      	bhi.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800757a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800757e:	d010      	beq.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8007580:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007584:	d816      	bhi.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007586:	2b00      	cmp	r3, #0
 8007588:	d01d      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800758a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800758e:	d111      	bne.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	3304      	adds	r3, #4
 8007594:	2101      	movs	r1, #1
 8007596:	4618      	mov	r0, r3
 8007598:	f000 ff70 	bl	800847c <RCCEx_PLL2_Config>
 800759c:	4603      	mov	r3, r0
 800759e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80075a0:	e012      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	3324      	adds	r3, #36	; 0x24
 80075a6:	2101      	movs	r1, #1
 80075a8:	4618      	mov	r0, r3
 80075aa:	f001 f819 	bl	80085e0 <RCCEx_PLL3_Config>
 80075ae:	4603      	mov	r3, r0
 80075b0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80075b2:	e009      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	75fb      	strb	r3, [r7, #23]
      break;
 80075b8:	e006      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80075ba:	bf00      	nop
 80075bc:	e004      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80075be:	bf00      	nop
 80075c0:	e002      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80075c2:	bf00      	nop
 80075c4:	e000      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80075c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075c8:	7dfb      	ldrb	r3, [r7, #23]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d10a      	bne.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80075ce:	4b4b      	ldr	r3, [pc, #300]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80075d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075d2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80075dc:	4947      	ldr	r1, [pc, #284]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	658b      	str	r3, [r1, #88]	; 0x58
 80075e2:	e001      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075e4:	7dfb      	ldrb	r3, [r7, #23]
 80075e6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d02f      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075fc:	d00e      	beq.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x510>
 80075fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007602:	d814      	bhi.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007604:	2b00      	cmp	r3, #0
 8007606:	d015      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007608:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800760c:	d10f      	bne.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800760e:	4b3b      	ldr	r3, [pc, #236]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007612:	4a3a      	ldr	r2, [pc, #232]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007618:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800761a:	e00c      	b.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	3304      	adds	r3, #4
 8007620:	2101      	movs	r1, #1
 8007622:	4618      	mov	r0, r3
 8007624:	f000 ff2a 	bl	800847c <RCCEx_PLL2_Config>
 8007628:	4603      	mov	r3, r0
 800762a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800762c:	e003      	b.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	75fb      	strb	r3, [r7, #23]
      break;
 8007632:	e000      	b.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8007634:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007636:	7dfb      	ldrb	r3, [r7, #23]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d109      	bne.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800763c:	4b2f      	ldr	r3, [pc, #188]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800763e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007640:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007648:	492c      	ldr	r1, [pc, #176]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800764a:	4313      	orrs	r3, r2
 800764c:	650b      	str	r3, [r1, #80]	; 0x50
 800764e:	e001      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007650:	7dfb      	ldrb	r3, [r7, #23]
 8007652:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800765c:	2b00      	cmp	r3, #0
 800765e:	d032      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007664:	2b03      	cmp	r3, #3
 8007666:	d81b      	bhi.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007668:	a201      	add	r2, pc, #4	; (adr r2, 8007670 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800766a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766e:	bf00      	nop
 8007670:	080076a7 	.word	0x080076a7
 8007674:	08007681 	.word	0x08007681
 8007678:	0800768f 	.word	0x0800768f
 800767c:	080076a7 	.word	0x080076a7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007680:	4b1e      	ldr	r3, [pc, #120]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007684:	4a1d      	ldr	r2, [pc, #116]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007686:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800768a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800768c:	e00c      	b.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	3304      	adds	r3, #4
 8007692:	2102      	movs	r1, #2
 8007694:	4618      	mov	r0, r3
 8007696:	f000 fef1 	bl	800847c <RCCEx_PLL2_Config>
 800769a:	4603      	mov	r3, r0
 800769c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800769e:	e003      	b.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	75fb      	strb	r3, [r7, #23]
      break;
 80076a4:	e000      	b.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80076a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076a8:	7dfb      	ldrb	r3, [r7, #23]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d109      	bne.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80076ae:	4b13      	ldr	r3, [pc, #76]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80076b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076b2:	f023 0203 	bic.w	r2, r3, #3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ba:	4910      	ldr	r1, [pc, #64]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80076bc:	4313      	orrs	r3, r2
 80076be:	64cb      	str	r3, [r1, #76]	; 0x4c
 80076c0:	e001      	b.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076c2:	7dfb      	ldrb	r3, [r7, #23]
 80076c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 808a 	beq.w	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80076d4:	4b0a      	ldr	r3, [pc, #40]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a09      	ldr	r2, [pc, #36]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80076da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80076e0:	f7fb f8d0 	bl	8002884 <HAL_GetTick>
 80076e4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076e6:	e00d      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076e8:	f7fb f8cc 	bl	8002884 <HAL_GetTick>
 80076ec:	4602      	mov	r2, r0
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	2b64      	cmp	r3, #100	; 0x64
 80076f4:	d906      	bls.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 80076f6:	2303      	movs	r3, #3
 80076f8:	75fb      	strb	r3, [r7, #23]
        break;
 80076fa:	e009      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80076fc:	58024400 	.word	0x58024400
 8007700:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007704:	4bb9      	ldr	r3, [pc, #740]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800770c:	2b00      	cmp	r3, #0
 800770e:	d0eb      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8007710:	7dfb      	ldrb	r3, [r7, #23]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d166      	bne.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007716:	4bb6      	ldr	r3, [pc, #728]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007718:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007720:	4053      	eors	r3, r2
 8007722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007726:	2b00      	cmp	r3, #0
 8007728:	d013      	beq.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800772a:	4bb1      	ldr	r3, [pc, #708]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800772c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800772e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007732:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007734:	4bae      	ldr	r3, [pc, #696]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007738:	4aad      	ldr	r2, [pc, #692]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800773a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800773e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007740:	4bab      	ldr	r3, [pc, #684]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007744:	4aaa      	ldr	r2, [pc, #680]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800774a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800774c:	4aa8      	ldr	r2, [pc, #672]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800775c:	d115      	bne.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800775e:	f7fb f891 	bl	8002884 <HAL_GetTick>
 8007762:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007764:	e00b      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007766:	f7fb f88d 	bl	8002884 <HAL_GetTick>
 800776a:	4602      	mov	r2, r0
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	f241 3288 	movw	r2, #5000	; 0x1388
 8007774:	4293      	cmp	r3, r2
 8007776:	d902      	bls.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8007778:	2303      	movs	r3, #3
 800777a:	75fb      	strb	r3, [r7, #23]
            break;
 800777c:	e005      	b.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800777e:	4b9c      	ldr	r3, [pc, #624]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007782:	f003 0302 	and.w	r3, r3, #2
 8007786:	2b00      	cmp	r3, #0
 8007788:	d0ed      	beq.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 800778a:	7dfb      	ldrb	r3, [r7, #23]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d126      	bne.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800779a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800779e:	d10d      	bne.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80077a0:	4b93      	ldr	r3, [pc, #588]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80077ae:	0919      	lsrs	r1, r3, #4
 80077b0:	4b90      	ldr	r3, [pc, #576]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80077b2:	400b      	ands	r3, r1
 80077b4:	498e      	ldr	r1, [pc, #568]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	610b      	str	r3, [r1, #16]
 80077ba:	e005      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 80077bc:	4b8c      	ldr	r3, [pc, #560]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80077be:	691b      	ldr	r3, [r3, #16]
 80077c0:	4a8b      	ldr	r2, [pc, #556]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80077c2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80077c6:	6113      	str	r3, [r2, #16]
 80077c8:	4b89      	ldr	r3, [pc, #548]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80077ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80077d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077d6:	4986      	ldr	r1, [pc, #536]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80077d8:	4313      	orrs	r3, r2
 80077da:	670b      	str	r3, [r1, #112]	; 0x70
 80077dc:	e004      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80077de:	7dfb      	ldrb	r3, [r7, #23]
 80077e0:	75bb      	strb	r3, [r7, #22]
 80077e2:	e001      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077e4:	7dfb      	ldrb	r3, [r7, #23]
 80077e6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 0301 	and.w	r3, r3, #1
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d07e      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077f8:	2b28      	cmp	r3, #40	; 0x28
 80077fa:	d867      	bhi.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80077fc:	a201      	add	r2, pc, #4	; (adr r2, 8007804 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 80077fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007802:	bf00      	nop
 8007804:	080078d3 	.word	0x080078d3
 8007808:	080078cd 	.word	0x080078cd
 800780c:	080078cd 	.word	0x080078cd
 8007810:	080078cd 	.word	0x080078cd
 8007814:	080078cd 	.word	0x080078cd
 8007818:	080078cd 	.word	0x080078cd
 800781c:	080078cd 	.word	0x080078cd
 8007820:	080078cd 	.word	0x080078cd
 8007824:	080078a9 	.word	0x080078a9
 8007828:	080078cd 	.word	0x080078cd
 800782c:	080078cd 	.word	0x080078cd
 8007830:	080078cd 	.word	0x080078cd
 8007834:	080078cd 	.word	0x080078cd
 8007838:	080078cd 	.word	0x080078cd
 800783c:	080078cd 	.word	0x080078cd
 8007840:	080078cd 	.word	0x080078cd
 8007844:	080078bb 	.word	0x080078bb
 8007848:	080078cd 	.word	0x080078cd
 800784c:	080078cd 	.word	0x080078cd
 8007850:	080078cd 	.word	0x080078cd
 8007854:	080078cd 	.word	0x080078cd
 8007858:	080078cd 	.word	0x080078cd
 800785c:	080078cd 	.word	0x080078cd
 8007860:	080078cd 	.word	0x080078cd
 8007864:	080078d3 	.word	0x080078d3
 8007868:	080078cd 	.word	0x080078cd
 800786c:	080078cd 	.word	0x080078cd
 8007870:	080078cd 	.word	0x080078cd
 8007874:	080078cd 	.word	0x080078cd
 8007878:	080078cd 	.word	0x080078cd
 800787c:	080078cd 	.word	0x080078cd
 8007880:	080078cd 	.word	0x080078cd
 8007884:	080078d3 	.word	0x080078d3
 8007888:	080078cd 	.word	0x080078cd
 800788c:	080078cd 	.word	0x080078cd
 8007890:	080078cd 	.word	0x080078cd
 8007894:	080078cd 	.word	0x080078cd
 8007898:	080078cd 	.word	0x080078cd
 800789c:	080078cd 	.word	0x080078cd
 80078a0:	080078cd 	.word	0x080078cd
 80078a4:	080078d3 	.word	0x080078d3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	3304      	adds	r3, #4
 80078ac:	2101      	movs	r1, #1
 80078ae:	4618      	mov	r0, r3
 80078b0:	f000 fde4 	bl	800847c <RCCEx_PLL2_Config>
 80078b4:	4603      	mov	r3, r0
 80078b6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80078b8:	e00c      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	3324      	adds	r3, #36	; 0x24
 80078be:	2101      	movs	r1, #1
 80078c0:	4618      	mov	r0, r3
 80078c2:	f000 fe8d 	bl	80085e0 <RCCEx_PLL3_Config>
 80078c6:	4603      	mov	r3, r0
 80078c8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80078ca:	e003      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	75fb      	strb	r3, [r7, #23]
      break;
 80078d0:	e000      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 80078d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078d4:	7dfb      	ldrb	r3, [r7, #23]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d109      	bne.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80078da:	4b45      	ldr	r3, [pc, #276]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80078dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078de:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078e6:	4942      	ldr	r1, [pc, #264]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80078e8:	4313      	orrs	r3, r2
 80078ea:	654b      	str	r3, [r1, #84]	; 0x54
 80078ec:	e001      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ee:	7dfb      	ldrb	r3, [r7, #23]
 80078f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0302 	and.w	r3, r3, #2
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d037      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007902:	2b05      	cmp	r3, #5
 8007904:	d820      	bhi.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8007906:	a201      	add	r2, pc, #4	; (adr r2, 800790c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8007908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790c:	0800794f 	.word	0x0800794f
 8007910:	08007925 	.word	0x08007925
 8007914:	08007937 	.word	0x08007937
 8007918:	0800794f 	.word	0x0800794f
 800791c:	0800794f 	.word	0x0800794f
 8007920:	0800794f 	.word	0x0800794f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	3304      	adds	r3, #4
 8007928:	2101      	movs	r1, #1
 800792a:	4618      	mov	r0, r3
 800792c:	f000 fda6 	bl	800847c <RCCEx_PLL2_Config>
 8007930:	4603      	mov	r3, r0
 8007932:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007934:	e00c      	b.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	3324      	adds	r3, #36	; 0x24
 800793a:	2101      	movs	r1, #1
 800793c:	4618      	mov	r0, r3
 800793e:	f000 fe4f 	bl	80085e0 <RCCEx_PLL3_Config>
 8007942:	4603      	mov	r3, r0
 8007944:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007946:	e003      	b.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	75fb      	strb	r3, [r7, #23]
      break;
 800794c:	e000      	b.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800794e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007950:	7dfb      	ldrb	r3, [r7, #23]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d109      	bne.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007956:	4b26      	ldr	r3, [pc, #152]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800795a:	f023 0207 	bic.w	r2, r3, #7
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007962:	4923      	ldr	r1, [pc, #140]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007964:	4313      	orrs	r3, r2
 8007966:	654b      	str	r3, [r1, #84]	; 0x54
 8007968:	e001      	b.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800796a:	7dfb      	ldrb	r3, [r7, #23]
 800796c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f003 0304 	and.w	r3, r3, #4
 8007976:	2b00      	cmp	r3, #0
 8007978:	d040      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007980:	2b05      	cmp	r3, #5
 8007982:	d821      	bhi.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8007984:	a201      	add	r2, pc, #4	; (adr r2, 800798c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8007986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800798a:	bf00      	nop
 800798c:	080079cf 	.word	0x080079cf
 8007990:	080079a5 	.word	0x080079a5
 8007994:	080079b7 	.word	0x080079b7
 8007998:	080079cf 	.word	0x080079cf
 800799c:	080079cf 	.word	0x080079cf
 80079a0:	080079cf 	.word	0x080079cf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	3304      	adds	r3, #4
 80079a8:	2101      	movs	r1, #1
 80079aa:	4618      	mov	r0, r3
 80079ac:	f000 fd66 	bl	800847c <RCCEx_PLL2_Config>
 80079b0:	4603      	mov	r3, r0
 80079b2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80079b4:	e00c      	b.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	3324      	adds	r3, #36	; 0x24
 80079ba:	2101      	movs	r1, #1
 80079bc:	4618      	mov	r0, r3
 80079be:	f000 fe0f 	bl	80085e0 <RCCEx_PLL3_Config>
 80079c2:	4603      	mov	r3, r0
 80079c4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80079c6:	e003      	b.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	75fb      	strb	r3, [r7, #23]
      break;
 80079cc:	e000      	b.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80079ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079d0:	7dfb      	ldrb	r3, [r7, #23]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d110      	bne.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80079d6:	4b06      	ldr	r3, [pc, #24]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80079d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079da:	f023 0207 	bic.w	r2, r3, #7
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079e4:	4902      	ldr	r1, [pc, #8]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80079e6:	4313      	orrs	r3, r2
 80079e8:	658b      	str	r3, [r1, #88]	; 0x58
 80079ea:	e007      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80079ec:	58024800 	.word	0x58024800
 80079f0:	58024400 	.word	0x58024400
 80079f4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079f8:	7dfb      	ldrb	r3, [r7, #23]
 80079fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 0320 	and.w	r3, r3, #32
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d04b      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a12:	d02e      	beq.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8007a14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a18:	d828      	bhi.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a1e:	d02a      	beq.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8007a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a24:	d822      	bhi.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007a26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007a2a:	d026      	beq.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007a2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007a30:	d81c      	bhi.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007a32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a36:	d010      	beq.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8007a38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a3c:	d816      	bhi.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d01d      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x972>
 8007a42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a46:	d111      	bne.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	3304      	adds	r3, #4
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f000 fd14 	bl	800847c <RCCEx_PLL2_Config>
 8007a54:	4603      	mov	r3, r0
 8007a56:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007a58:	e012      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	3324      	adds	r3, #36	; 0x24
 8007a5e:	2102      	movs	r1, #2
 8007a60:	4618      	mov	r0, r3
 8007a62:	f000 fdbd 	bl	80085e0 <RCCEx_PLL3_Config>
 8007a66:	4603      	mov	r3, r0
 8007a68:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007a6a:	e009      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8007a70:	e006      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007a72:	bf00      	nop
 8007a74:	e004      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007a76:	bf00      	nop
 8007a78:	e002      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007a7a:	bf00      	nop
 8007a7c:	e000      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007a7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a80:	7dfb      	ldrb	r3, [r7, #23]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d10a      	bne.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a86:	4bb2      	ldr	r3, [pc, #712]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a8a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a94:	49ae      	ldr	r1, [pc, #696]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007a96:	4313      	orrs	r3, r2
 8007a98:	654b      	str	r3, [r1, #84]	; 0x54
 8007a9a:	e001      	b.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a9c:	7dfb      	ldrb	r3, [r7, #23]
 8007a9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d04b      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ab2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007ab6:	d02e      	beq.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8007ab8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007abc:	d828      	bhi.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ac2:	d02a      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8007ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ac8:	d822      	bhi.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007aca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ace:	d026      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007ad0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ad4:	d81c      	bhi.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007ad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ada:	d010      	beq.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8007adc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ae0:	d816      	bhi.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d01d      	beq.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aea:	d111      	bne.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	3304      	adds	r3, #4
 8007af0:	2100      	movs	r1, #0
 8007af2:	4618      	mov	r0, r3
 8007af4:	f000 fcc2 	bl	800847c <RCCEx_PLL2_Config>
 8007af8:	4603      	mov	r3, r0
 8007afa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007afc:	e012      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	3324      	adds	r3, #36	; 0x24
 8007b02:	2102      	movs	r1, #2
 8007b04:	4618      	mov	r0, r3
 8007b06:	f000 fd6b 	bl	80085e0 <RCCEx_PLL3_Config>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007b0e:	e009      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	75fb      	strb	r3, [r7, #23]
      break;
 8007b14:	e006      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007b16:	bf00      	nop
 8007b18:	e004      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007b1a:	bf00      	nop
 8007b1c:	e002      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007b1e:	bf00      	nop
 8007b20:	e000      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007b22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b24:	7dfb      	ldrb	r3, [r7, #23]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d10a      	bne.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007b2a:	4b89      	ldr	r3, [pc, #548]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b2e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b38:	4985      	ldr	r1, [pc, #532]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	658b      	str	r3, [r1, #88]	; 0x58
 8007b3e:	e001      	b.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b40:	7dfb      	ldrb	r3, [r7, #23]
 8007b42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d04b      	beq.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b56:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007b5a:	d02e      	beq.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8007b5c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007b60:	d828      	bhi.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007b62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b66:	d02a      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8007b68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b6c:	d822      	bhi.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007b6e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007b72:	d026      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8007b74:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007b78:	d81c      	bhi.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007b7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b7e:	d010      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8007b80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b84:	d816      	bhi.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d01d      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8007b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b8e:	d111      	bne.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	3304      	adds	r3, #4
 8007b94:	2100      	movs	r1, #0
 8007b96:	4618      	mov	r0, r3
 8007b98:	f000 fc70 	bl	800847c <RCCEx_PLL2_Config>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007ba0:	e012      	b.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	3324      	adds	r3, #36	; 0x24
 8007ba6:	2102      	movs	r1, #2
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f000 fd19 	bl	80085e0 <RCCEx_PLL3_Config>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007bb2:	e009      	b.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	75fb      	strb	r3, [r7, #23]
      break;
 8007bb8:	e006      	b.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007bba:	bf00      	nop
 8007bbc:	e004      	b.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007bbe:	bf00      	nop
 8007bc0:	e002      	b.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007bc2:	bf00      	nop
 8007bc4:	e000      	b.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007bc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bc8:	7dfb      	ldrb	r3, [r7, #23]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d10a      	bne.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007bce:	4b60      	ldr	r3, [pc, #384]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007bdc:	495c      	ldr	r1, [pc, #368]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007bde:	4313      	orrs	r3, r2
 8007be0:	658b      	str	r3, [r1, #88]	; 0x58
 8007be2:	e001      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007be4:	7dfb      	ldrb	r3, [r7, #23]
 8007be6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 0308 	and.w	r3, r3, #8
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d018      	beq.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bfc:	d10a      	bne.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	3324      	adds	r3, #36	; 0x24
 8007c02:	2102      	movs	r1, #2
 8007c04:	4618      	mov	r0, r3
 8007c06:	f000 fceb 	bl	80085e0 <RCCEx_PLL3_Config>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d001      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007c14:	4b4e      	ldr	r3, [pc, #312]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c18:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c20:	494b      	ldr	r1, [pc, #300]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007c22:	4313      	orrs	r3, r2
 8007c24:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 0310 	and.w	r3, r3, #16
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d01a      	beq.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c3c:	d10a      	bne.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	3324      	adds	r3, #36	; 0x24
 8007c42:	2102      	movs	r1, #2
 8007c44:	4618      	mov	r0, r3
 8007c46:	f000 fccb 	bl	80085e0 <RCCEx_PLL3_Config>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d001      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c54:	4b3e      	ldr	r3, [pc, #248]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c62:	493b      	ldr	r1, [pc, #236]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007c64:	4313      	orrs	r3, r2
 8007c66:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d034      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c7e:	d01d      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8007c80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c84:	d817      	bhi.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d003      	beq.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8007c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c8e:	d009      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007c90:	e011      	b.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	3304      	adds	r3, #4
 8007c96:	2100      	movs	r1, #0
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f000 fbef 	bl	800847c <RCCEx_PLL2_Config>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007ca2:	e00c      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	3324      	adds	r3, #36	; 0x24
 8007ca8:	2102      	movs	r1, #2
 8007caa:	4618      	mov	r0, r3
 8007cac:	f000 fc98 	bl	80085e0 <RCCEx_PLL3_Config>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007cb4:	e003      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	75fb      	strb	r3, [r7, #23]
      break;
 8007cba:	e000      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8007cbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cbe:	7dfb      	ldrb	r3, [r7, #23]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d10a      	bne.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007cc4:	4b22      	ldr	r3, [pc, #136]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007cd2:	491f      	ldr	r1, [pc, #124]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	658b      	str	r3, [r1, #88]	; 0x58
 8007cd8:	e001      	b.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cda:	7dfb      	ldrb	r3, [r7, #23]
 8007cdc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d036      	beq.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cf0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007cf4:	d01c      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007cf6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007cfa:	d816      	bhi.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007cfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d00:	d003      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007d02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d06:	d007      	beq.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8007d08:	e00f      	b.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d0a:	4b11      	ldr	r3, [pc, #68]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0e:	4a10      	ldr	r2, [pc, #64]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007d16:	e00c      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	3324      	adds	r3, #36	; 0x24
 8007d1c:	2101      	movs	r1, #1
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f000 fc5e 	bl	80085e0 <RCCEx_PLL3_Config>
 8007d24:	4603      	mov	r3, r0
 8007d26:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007d28:	e003      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	75fb      	strb	r3, [r7, #23]
      break;
 8007d2e:	e000      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8007d30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d32:	7dfb      	ldrb	r3, [r7, #23]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d10d      	bne.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d38:	4b05      	ldr	r3, [pc, #20]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d46:	4902      	ldr	r1, [pc, #8]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	654b      	str	r3, [r1, #84]	; 0x54
 8007d4c:	e004      	b.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8007d4e:	bf00      	nop
 8007d50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d54:	7dfb      	ldrb	r3, [r7, #23]
 8007d56:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d029      	beq.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d003      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d70:	d007      	beq.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8007d72:	e00f      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d74:	4b61      	ldr	r3, [pc, #388]	; (8007efc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d78:	4a60      	ldr	r2, [pc, #384]	; (8007efc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007d7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007d80:	e00b      	b.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	3304      	adds	r3, #4
 8007d86:	2102      	movs	r1, #2
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f000 fb77 	bl	800847c <RCCEx_PLL2_Config>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007d92:	e002      	b.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	75fb      	strb	r3, [r7, #23]
      break;
 8007d98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d9a:	7dfb      	ldrb	r3, [r7, #23]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d109      	bne.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007da0:	4b56      	ldr	r3, [pc, #344]	; (8007efc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007da4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dac:	4953      	ldr	r1, [pc, #332]	; (8007efc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007dae:	4313      	orrs	r3, r2
 8007db0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007db2:	e001      	b.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007db4:	7dfb      	ldrb	r3, [r7, #23]
 8007db6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00a      	beq.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	3324      	adds	r3, #36	; 0x24
 8007dc8:	2102      	movs	r1, #2
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f000 fc08 	bl	80085e0 <RCCEx_PLL3_Config>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d001      	beq.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d030      	beq.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dee:	d017      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007df0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007df4:	d811      	bhi.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8007df6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dfa:	d013      	beq.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8007dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e00:	d80b      	bhi.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d010      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8007e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e0a:	d106      	bne.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e0c:	4b3b      	ldr	r3, [pc, #236]	; (8007efc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e10:	4a3a      	ldr	r2, [pc, #232]	; (8007efc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007e12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007e18:	e007      	b.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	75fb      	strb	r3, [r7, #23]
      break;
 8007e1e:	e004      	b.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007e20:	bf00      	nop
 8007e22:	e002      	b.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007e24:	bf00      	nop
 8007e26:	e000      	b.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007e28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e2a:	7dfb      	ldrb	r3, [r7, #23]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d109      	bne.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e30:	4b32      	ldr	r3, [pc, #200]	; (8007efc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e3c:	492f      	ldr	r1, [pc, #188]	; (8007efc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	654b      	str	r3, [r1, #84]	; 0x54
 8007e42:	e001      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e44:	7dfb      	ldrb	r3, [r7, #23]
 8007e46:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d008      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007e54:	4b29      	ldr	r3, [pc, #164]	; (8007efc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e60:	4926      	ldr	r1, [pc, #152]	; (8007efc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007e62:	4313      	orrs	r3, r2
 8007e64:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d008      	beq.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007e72:	4b22      	ldr	r3, [pc, #136]	; (8007efc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e76:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e7e:	491f      	ldr	r1, [pc, #124]	; (8007efc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007e80:	4313      	orrs	r3, r2
 8007e82:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d00d      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007e90:	4b1a      	ldr	r3, [pc, #104]	; (8007efc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	4a19      	ldr	r2, [pc, #100]	; (8007efc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007e96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e9a:	6113      	str	r3, [r2, #16]
 8007e9c:	4b17      	ldr	r3, [pc, #92]	; (8007efc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007e9e:	691a      	ldr	r2, [r3, #16]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ea6:	4915      	ldr	r1, [pc, #84]	; (8007efc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	da08      	bge.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007eb4:	4b11      	ldr	r3, [pc, #68]	; (8007efc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eb8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ec0:	490e      	ldr	r1, [pc, #56]	; (8007efc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d009      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007ed2:	4b0a      	ldr	r3, [pc, #40]	; (8007efc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ed6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ee0:	4906      	ldr	r1, [pc, #24]	; (8007efc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007ee6:	7dbb      	ldrb	r3, [r7, #22]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d101      	bne.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8007eec:	2300      	movs	r3, #0
 8007eee:	e000      	b.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3718      	adds	r7, #24
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	58024400 	.word	0x58024400

08007f00 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007f04:	f7ff f864 	bl	8006fd0 <HAL_RCC_GetHCLKFreq>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	4b06      	ldr	r3, [pc, #24]	; (8007f24 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007f0c:	6a1b      	ldr	r3, [r3, #32]
 8007f0e:	091b      	lsrs	r3, r3, #4
 8007f10:	f003 0307 	and.w	r3, r3, #7
 8007f14:	4904      	ldr	r1, [pc, #16]	; (8007f28 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007f16:	5ccb      	ldrb	r3, [r1, r3]
 8007f18:	f003 031f 	and.w	r3, r3, #31
 8007f1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	58024400 	.word	0x58024400
 8007f28:	0801dd5c 	.word	0x0801dd5c

08007f2c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b089      	sub	sp, #36	; 0x24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f34:	4ba1      	ldr	r3, [pc, #644]	; (80081bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f38:	f003 0303 	and.w	r3, r3, #3
 8007f3c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007f3e:	4b9f      	ldr	r3, [pc, #636]	; (80081bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f42:	0b1b      	lsrs	r3, r3, #12
 8007f44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f48:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007f4a:	4b9c      	ldr	r3, [pc, #624]	; (80081bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f4e:	091b      	lsrs	r3, r3, #4
 8007f50:	f003 0301 	and.w	r3, r3, #1
 8007f54:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007f56:	4b99      	ldr	r3, [pc, #612]	; (80081bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f5a:	08db      	lsrs	r3, r3, #3
 8007f5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f60:	693a      	ldr	r2, [r7, #16]
 8007f62:	fb02 f303 	mul.w	r3, r2, r3
 8007f66:	ee07 3a90 	vmov	s15, r3
 8007f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f000 8111 	beq.w	800819c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	f000 8083 	beq.w	8008088 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	f200 80a1 	bhi.w	80080cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d003      	beq.n	8007f98 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d056      	beq.n	8008044 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007f96:	e099      	b.n	80080cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f98:	4b88      	ldr	r3, [pc, #544]	; (80081bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 0320 	and.w	r3, r3, #32
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d02d      	beq.n	8008000 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007fa4:	4b85      	ldr	r3, [pc, #532]	; (80081bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	08db      	lsrs	r3, r3, #3
 8007faa:	f003 0303 	and.w	r3, r3, #3
 8007fae:	4a84      	ldr	r2, [pc, #528]	; (80081c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8007fb4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	ee07 3a90 	vmov	s15, r3
 8007fbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	ee07 3a90 	vmov	s15, r3
 8007fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fce:	4b7b      	ldr	r3, [pc, #492]	; (80081bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fd6:	ee07 3a90 	vmov	s15, r3
 8007fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fde:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fe2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80081c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ffa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007ffe:	e087      	b.n	8008110 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	ee07 3a90 	vmov	s15, r3
 8008006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800800a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80081c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800800e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008012:	4b6a      	ldr	r3, [pc, #424]	; (80081bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800801a:	ee07 3a90 	vmov	s15, r3
 800801e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008022:	ed97 6a03 	vldr	s12, [r7, #12]
 8008026:	eddf 5a67 	vldr	s11, [pc, #412]	; 80081c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800802a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800802e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008032:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800803a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800803e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008042:	e065      	b.n	8008110 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	ee07 3a90 	vmov	s15, r3
 800804a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800804e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80081cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008056:	4b59      	ldr	r3, [pc, #356]	; (80081bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800805e:	ee07 3a90 	vmov	s15, r3
 8008062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008066:	ed97 6a03 	vldr	s12, [r7, #12]
 800806a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80081c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800806e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800807a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800807e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008082:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008086:	e043      	b.n	8008110 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	ee07 3a90 	vmov	s15, r3
 800808e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008092:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80081d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800809a:	4b48      	ldr	r3, [pc, #288]	; (80081bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800809c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800809e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080a2:	ee07 3a90 	vmov	s15, r3
 80080a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80080ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 80081c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080ca:	e021      	b.n	8008110 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	ee07 3a90 	vmov	s15, r3
 80080d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80081cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80080da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080de:	4b37      	ldr	r3, [pc, #220]	; (80081bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080e6:	ee07 3a90 	vmov	s15, r3
 80080ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80080f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80081c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800810a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800810e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008110:	4b2a      	ldr	r3, [pc, #168]	; (80081bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008114:	0a5b      	lsrs	r3, r3, #9
 8008116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800811a:	ee07 3a90 	vmov	s15, r3
 800811e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008122:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008126:	ee37 7a87 	vadd.f32	s14, s15, s14
 800812a:	edd7 6a07 	vldr	s13, [r7, #28]
 800812e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008136:	ee17 2a90 	vmov	r2, s15
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800813e:	4b1f      	ldr	r3, [pc, #124]	; (80081bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008142:	0c1b      	lsrs	r3, r3, #16
 8008144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008148:	ee07 3a90 	vmov	s15, r3
 800814c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008150:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008154:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008158:	edd7 6a07 	vldr	s13, [r7, #28]
 800815c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008164:	ee17 2a90 	vmov	r2, s15
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800816c:	4b13      	ldr	r3, [pc, #76]	; (80081bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800816e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008170:	0e1b      	lsrs	r3, r3, #24
 8008172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008176:	ee07 3a90 	vmov	s15, r3
 800817a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800817e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008182:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008186:	edd7 6a07 	vldr	s13, [r7, #28]
 800818a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800818e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008192:	ee17 2a90 	vmov	r2, s15
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800819a:	e008      	b.n	80081ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	609a      	str	r2, [r3, #8]
}
 80081ae:	bf00      	nop
 80081b0:	3724      	adds	r7, #36	; 0x24
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	58024400 	.word	0x58024400
 80081c0:	03d09000 	.word	0x03d09000
 80081c4:	46000000 	.word	0x46000000
 80081c8:	4c742400 	.word	0x4c742400
 80081cc:	4a742400 	.word	0x4a742400
 80081d0:	4af42400 	.word	0x4af42400

080081d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b089      	sub	sp, #36	; 0x24
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081dc:	4ba1      	ldr	r3, [pc, #644]	; (8008464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e0:	f003 0303 	and.w	r3, r3, #3
 80081e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80081e6:	4b9f      	ldr	r3, [pc, #636]	; (8008464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ea:	0d1b      	lsrs	r3, r3, #20
 80081ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80081f2:	4b9c      	ldr	r3, [pc, #624]	; (8008464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f6:	0a1b      	lsrs	r3, r3, #8
 80081f8:	f003 0301 	and.w	r3, r3, #1
 80081fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80081fe:	4b99      	ldr	r3, [pc, #612]	; (8008464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008202:	08db      	lsrs	r3, r3, #3
 8008204:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008208:	693a      	ldr	r2, [r7, #16]
 800820a:	fb02 f303 	mul.w	r3, r2, r3
 800820e:	ee07 3a90 	vmov	s15, r3
 8008212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008216:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 8111 	beq.w	8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	2b02      	cmp	r3, #2
 8008226:	f000 8083 	beq.w	8008330 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	2b02      	cmp	r3, #2
 800822e:	f200 80a1 	bhi.w	8008374 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d003      	beq.n	8008240 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	2b01      	cmp	r3, #1
 800823c:	d056      	beq.n	80082ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800823e:	e099      	b.n	8008374 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008240:	4b88      	ldr	r3, [pc, #544]	; (8008464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 0320 	and.w	r3, r3, #32
 8008248:	2b00      	cmp	r3, #0
 800824a:	d02d      	beq.n	80082a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800824c:	4b85      	ldr	r3, [pc, #532]	; (8008464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	08db      	lsrs	r3, r3, #3
 8008252:	f003 0303 	and.w	r3, r3, #3
 8008256:	4a84      	ldr	r2, [pc, #528]	; (8008468 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008258:	fa22 f303 	lsr.w	r3, r2, r3
 800825c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	ee07 3a90 	vmov	s15, r3
 8008264:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	ee07 3a90 	vmov	s15, r3
 800826e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008276:	4b7b      	ldr	r3, [pc, #492]	; (8008464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800827e:	ee07 3a90 	vmov	s15, r3
 8008282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008286:	ed97 6a03 	vldr	s12, [r7, #12]
 800828a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800846c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800828e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800829a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800829e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082a2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80082a6:	e087      	b.n	80083b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	ee07 3a90 	vmov	s15, r3
 80082ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008470 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80082b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ba:	4b6a      	ldr	r3, [pc, #424]	; (8008464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082c2:	ee07 3a90 	vmov	s15, r3
 80082c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80082ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800846c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082ea:	e065      	b.n	80083b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	ee07 3a90 	vmov	s15, r3
 80082f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80082fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082fe:	4b59      	ldr	r3, [pc, #356]	; (8008464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008306:	ee07 3a90 	vmov	s15, r3
 800830a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800830e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008312:	eddf 5a56 	vldr	s11, [pc, #344]	; 800846c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800831a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800831e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800832a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800832e:	e043      	b.n	80083b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	ee07 3a90 	vmov	s15, r3
 8008336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800833a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008478 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800833e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008342:	4b48      	ldr	r3, [pc, #288]	; (8008464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800834a:	ee07 3a90 	vmov	s15, r3
 800834e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008352:	ed97 6a03 	vldr	s12, [r7, #12]
 8008356:	eddf 5a45 	vldr	s11, [pc, #276]	; 800846c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800835a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800835e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800836a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800836e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008372:	e021      	b.n	80083b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	ee07 3a90 	vmov	s15, r3
 800837a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800837e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008386:	4b37      	ldr	r3, [pc, #220]	; (8008464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800838e:	ee07 3a90 	vmov	s15, r3
 8008392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008396:	ed97 6a03 	vldr	s12, [r7, #12]
 800839a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800846c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800839e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80083b8:	4b2a      	ldr	r3, [pc, #168]	; (8008464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083bc:	0a5b      	lsrs	r3, r3, #9
 80083be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083c2:	ee07 3a90 	vmov	s15, r3
 80083c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80083d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083de:	ee17 2a90 	vmov	r2, s15
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80083e6:	4b1f      	ldr	r3, [pc, #124]	; (8008464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ea:	0c1b      	lsrs	r3, r3, #16
 80083ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083f0:	ee07 3a90 	vmov	s15, r3
 80083f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008400:	edd7 6a07 	vldr	s13, [r7, #28]
 8008404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800840c:	ee17 2a90 	vmov	r2, s15
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008414:	4b13      	ldr	r3, [pc, #76]	; (8008464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008418:	0e1b      	lsrs	r3, r3, #24
 800841a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800841e:	ee07 3a90 	vmov	s15, r3
 8008422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008426:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800842a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800842e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800843a:	ee17 2a90 	vmov	r2, s15
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008442:	e008      	b.n	8008456 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	609a      	str	r2, [r3, #8]
}
 8008456:	bf00      	nop
 8008458:	3724      	adds	r7, #36	; 0x24
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	58024400 	.word	0x58024400
 8008468:	03d09000 	.word	0x03d09000
 800846c:	46000000 	.word	0x46000000
 8008470:	4c742400 	.word	0x4c742400
 8008474:	4a742400 	.word	0x4a742400
 8008478:	4af42400 	.word	0x4af42400

0800847c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008486:	2300      	movs	r3, #0
 8008488:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800848a:	4b53      	ldr	r3, [pc, #332]	; (80085d8 <RCCEx_PLL2_Config+0x15c>)
 800848c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800848e:	f003 0303 	and.w	r3, r3, #3
 8008492:	2b03      	cmp	r3, #3
 8008494:	d101      	bne.n	800849a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e099      	b.n	80085ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800849a:	4b4f      	ldr	r3, [pc, #316]	; (80085d8 <RCCEx_PLL2_Config+0x15c>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a4e      	ldr	r2, [pc, #312]	; (80085d8 <RCCEx_PLL2_Config+0x15c>)
 80084a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80084a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084a6:	f7fa f9ed 	bl	8002884 <HAL_GetTick>
 80084aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80084ac:	e008      	b.n	80084c0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80084ae:	f7fa f9e9 	bl	8002884 <HAL_GetTick>
 80084b2:	4602      	mov	r2, r0
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	1ad3      	subs	r3, r2, r3
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	d901      	bls.n	80084c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80084bc:	2303      	movs	r3, #3
 80084be:	e086      	b.n	80085ce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80084c0:	4b45      	ldr	r3, [pc, #276]	; (80085d8 <RCCEx_PLL2_Config+0x15c>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1f0      	bne.n	80084ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80084cc:	4b42      	ldr	r3, [pc, #264]	; (80085d8 <RCCEx_PLL2_Config+0x15c>)
 80084ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	031b      	lsls	r3, r3, #12
 80084da:	493f      	ldr	r1, [pc, #252]	; (80085d8 <RCCEx_PLL2_Config+0x15c>)
 80084dc:	4313      	orrs	r3, r2
 80084de:	628b      	str	r3, [r1, #40]	; 0x28
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	3b01      	subs	r3, #1
 80084e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	3b01      	subs	r3, #1
 80084f0:	025b      	lsls	r3, r3, #9
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	431a      	orrs	r2, r3
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	3b01      	subs	r3, #1
 80084fc:	041b      	lsls	r3, r3, #16
 80084fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008502:	431a      	orrs	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	3b01      	subs	r3, #1
 800850a:	061b      	lsls	r3, r3, #24
 800850c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008510:	4931      	ldr	r1, [pc, #196]	; (80085d8 <RCCEx_PLL2_Config+0x15c>)
 8008512:	4313      	orrs	r3, r2
 8008514:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008516:	4b30      	ldr	r3, [pc, #192]	; (80085d8 <RCCEx_PLL2_Config+0x15c>)
 8008518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	695b      	ldr	r3, [r3, #20]
 8008522:	492d      	ldr	r1, [pc, #180]	; (80085d8 <RCCEx_PLL2_Config+0x15c>)
 8008524:	4313      	orrs	r3, r2
 8008526:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008528:	4b2b      	ldr	r3, [pc, #172]	; (80085d8 <RCCEx_PLL2_Config+0x15c>)
 800852a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852c:	f023 0220 	bic.w	r2, r3, #32
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	699b      	ldr	r3, [r3, #24]
 8008534:	4928      	ldr	r1, [pc, #160]	; (80085d8 <RCCEx_PLL2_Config+0x15c>)
 8008536:	4313      	orrs	r3, r2
 8008538:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800853a:	4b27      	ldr	r3, [pc, #156]	; (80085d8 <RCCEx_PLL2_Config+0x15c>)
 800853c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800853e:	4a26      	ldr	r2, [pc, #152]	; (80085d8 <RCCEx_PLL2_Config+0x15c>)
 8008540:	f023 0310 	bic.w	r3, r3, #16
 8008544:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008546:	4b24      	ldr	r3, [pc, #144]	; (80085d8 <RCCEx_PLL2_Config+0x15c>)
 8008548:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800854a:	4b24      	ldr	r3, [pc, #144]	; (80085dc <RCCEx_PLL2_Config+0x160>)
 800854c:	4013      	ands	r3, r2
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	69d2      	ldr	r2, [r2, #28]
 8008552:	00d2      	lsls	r2, r2, #3
 8008554:	4920      	ldr	r1, [pc, #128]	; (80085d8 <RCCEx_PLL2_Config+0x15c>)
 8008556:	4313      	orrs	r3, r2
 8008558:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800855a:	4b1f      	ldr	r3, [pc, #124]	; (80085d8 <RCCEx_PLL2_Config+0x15c>)
 800855c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855e:	4a1e      	ldr	r2, [pc, #120]	; (80085d8 <RCCEx_PLL2_Config+0x15c>)
 8008560:	f043 0310 	orr.w	r3, r3, #16
 8008564:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d106      	bne.n	800857a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800856c:	4b1a      	ldr	r3, [pc, #104]	; (80085d8 <RCCEx_PLL2_Config+0x15c>)
 800856e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008570:	4a19      	ldr	r2, [pc, #100]	; (80085d8 <RCCEx_PLL2_Config+0x15c>)
 8008572:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008576:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008578:	e00f      	b.n	800859a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	2b01      	cmp	r3, #1
 800857e:	d106      	bne.n	800858e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008580:	4b15      	ldr	r3, [pc, #84]	; (80085d8 <RCCEx_PLL2_Config+0x15c>)
 8008582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008584:	4a14      	ldr	r2, [pc, #80]	; (80085d8 <RCCEx_PLL2_Config+0x15c>)
 8008586:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800858a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800858c:	e005      	b.n	800859a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800858e:	4b12      	ldr	r3, [pc, #72]	; (80085d8 <RCCEx_PLL2_Config+0x15c>)
 8008590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008592:	4a11      	ldr	r2, [pc, #68]	; (80085d8 <RCCEx_PLL2_Config+0x15c>)
 8008594:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008598:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800859a:	4b0f      	ldr	r3, [pc, #60]	; (80085d8 <RCCEx_PLL2_Config+0x15c>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a0e      	ldr	r2, [pc, #56]	; (80085d8 <RCCEx_PLL2_Config+0x15c>)
 80085a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80085a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085a6:	f7fa f96d 	bl	8002884 <HAL_GetTick>
 80085aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80085ac:	e008      	b.n	80085c0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80085ae:	f7fa f969 	bl	8002884 <HAL_GetTick>
 80085b2:	4602      	mov	r2, r0
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	1ad3      	subs	r3, r2, r3
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d901      	bls.n	80085c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80085bc:	2303      	movs	r3, #3
 80085be:	e006      	b.n	80085ce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80085c0:	4b05      	ldr	r3, [pc, #20]	; (80085d8 <RCCEx_PLL2_Config+0x15c>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d0f0      	beq.n	80085ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80085cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3710      	adds	r7, #16
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	58024400 	.word	0x58024400
 80085dc:	ffff0007 	.word	0xffff0007

080085e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80085ea:	2300      	movs	r3, #0
 80085ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80085ee:	4b53      	ldr	r3, [pc, #332]	; (800873c <RCCEx_PLL3_Config+0x15c>)
 80085f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f2:	f003 0303 	and.w	r3, r3, #3
 80085f6:	2b03      	cmp	r3, #3
 80085f8:	d101      	bne.n	80085fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	e099      	b.n	8008732 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80085fe:	4b4f      	ldr	r3, [pc, #316]	; (800873c <RCCEx_PLL3_Config+0x15c>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a4e      	ldr	r2, [pc, #312]	; (800873c <RCCEx_PLL3_Config+0x15c>)
 8008604:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008608:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800860a:	f7fa f93b 	bl	8002884 <HAL_GetTick>
 800860e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008610:	e008      	b.n	8008624 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008612:	f7fa f937 	bl	8002884 <HAL_GetTick>
 8008616:	4602      	mov	r2, r0
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	1ad3      	subs	r3, r2, r3
 800861c:	2b02      	cmp	r3, #2
 800861e:	d901      	bls.n	8008624 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008620:	2303      	movs	r3, #3
 8008622:	e086      	b.n	8008732 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008624:	4b45      	ldr	r3, [pc, #276]	; (800873c <RCCEx_PLL3_Config+0x15c>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800862c:	2b00      	cmp	r3, #0
 800862e:	d1f0      	bne.n	8008612 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008630:	4b42      	ldr	r3, [pc, #264]	; (800873c <RCCEx_PLL3_Config+0x15c>)
 8008632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008634:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	051b      	lsls	r3, r3, #20
 800863e:	493f      	ldr	r1, [pc, #252]	; (800873c <RCCEx_PLL3_Config+0x15c>)
 8008640:	4313      	orrs	r3, r2
 8008642:	628b      	str	r3, [r1, #40]	; 0x28
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	3b01      	subs	r3, #1
 800864a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	3b01      	subs	r3, #1
 8008654:	025b      	lsls	r3, r3, #9
 8008656:	b29b      	uxth	r3, r3
 8008658:	431a      	orrs	r2, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	68db      	ldr	r3, [r3, #12]
 800865e:	3b01      	subs	r3, #1
 8008660:	041b      	lsls	r3, r3, #16
 8008662:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008666:	431a      	orrs	r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	691b      	ldr	r3, [r3, #16]
 800866c:	3b01      	subs	r3, #1
 800866e:	061b      	lsls	r3, r3, #24
 8008670:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008674:	4931      	ldr	r1, [pc, #196]	; (800873c <RCCEx_PLL3_Config+0x15c>)
 8008676:	4313      	orrs	r3, r2
 8008678:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800867a:	4b30      	ldr	r3, [pc, #192]	; (800873c <RCCEx_PLL3_Config+0x15c>)
 800867c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	695b      	ldr	r3, [r3, #20]
 8008686:	492d      	ldr	r1, [pc, #180]	; (800873c <RCCEx_PLL3_Config+0x15c>)
 8008688:	4313      	orrs	r3, r2
 800868a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800868c:	4b2b      	ldr	r3, [pc, #172]	; (800873c <RCCEx_PLL3_Config+0x15c>)
 800868e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008690:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	699b      	ldr	r3, [r3, #24]
 8008698:	4928      	ldr	r1, [pc, #160]	; (800873c <RCCEx_PLL3_Config+0x15c>)
 800869a:	4313      	orrs	r3, r2
 800869c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800869e:	4b27      	ldr	r3, [pc, #156]	; (800873c <RCCEx_PLL3_Config+0x15c>)
 80086a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a2:	4a26      	ldr	r2, [pc, #152]	; (800873c <RCCEx_PLL3_Config+0x15c>)
 80086a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80086aa:	4b24      	ldr	r3, [pc, #144]	; (800873c <RCCEx_PLL3_Config+0x15c>)
 80086ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086ae:	4b24      	ldr	r3, [pc, #144]	; (8008740 <RCCEx_PLL3_Config+0x160>)
 80086b0:	4013      	ands	r3, r2
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	69d2      	ldr	r2, [r2, #28]
 80086b6:	00d2      	lsls	r2, r2, #3
 80086b8:	4920      	ldr	r1, [pc, #128]	; (800873c <RCCEx_PLL3_Config+0x15c>)
 80086ba:	4313      	orrs	r3, r2
 80086bc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80086be:	4b1f      	ldr	r3, [pc, #124]	; (800873c <RCCEx_PLL3_Config+0x15c>)
 80086c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c2:	4a1e      	ldr	r2, [pc, #120]	; (800873c <RCCEx_PLL3_Config+0x15c>)
 80086c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d106      	bne.n	80086de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80086d0:	4b1a      	ldr	r3, [pc, #104]	; (800873c <RCCEx_PLL3_Config+0x15c>)
 80086d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d4:	4a19      	ldr	r2, [pc, #100]	; (800873c <RCCEx_PLL3_Config+0x15c>)
 80086d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80086da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80086dc:	e00f      	b.n	80086fe <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d106      	bne.n	80086f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80086e4:	4b15      	ldr	r3, [pc, #84]	; (800873c <RCCEx_PLL3_Config+0x15c>)
 80086e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e8:	4a14      	ldr	r2, [pc, #80]	; (800873c <RCCEx_PLL3_Config+0x15c>)
 80086ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80086ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80086f0:	e005      	b.n	80086fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80086f2:	4b12      	ldr	r3, [pc, #72]	; (800873c <RCCEx_PLL3_Config+0x15c>)
 80086f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f6:	4a11      	ldr	r2, [pc, #68]	; (800873c <RCCEx_PLL3_Config+0x15c>)
 80086f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80086fe:	4b0f      	ldr	r3, [pc, #60]	; (800873c <RCCEx_PLL3_Config+0x15c>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a0e      	ldr	r2, [pc, #56]	; (800873c <RCCEx_PLL3_Config+0x15c>)
 8008704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008708:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800870a:	f7fa f8bb 	bl	8002884 <HAL_GetTick>
 800870e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008710:	e008      	b.n	8008724 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008712:	f7fa f8b7 	bl	8002884 <HAL_GetTick>
 8008716:	4602      	mov	r2, r0
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	1ad3      	subs	r3, r2, r3
 800871c:	2b02      	cmp	r3, #2
 800871e:	d901      	bls.n	8008724 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008720:	2303      	movs	r3, #3
 8008722:	e006      	b.n	8008732 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008724:	4b05      	ldr	r3, [pc, #20]	; (800873c <RCCEx_PLL3_Config+0x15c>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800872c:	2b00      	cmp	r3, #0
 800872e:	d0f0      	beq.n	8008712 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008730:	7bfb      	ldrb	r3, [r7, #15]
}
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	58024400 	.word	0x58024400
 8008740:	ffff0007 	.word	0xffff0007

08008744 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d101      	bne.n	8008756 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	e0f1      	b.n	800893a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a78      	ldr	r2, [pc, #480]	; (8008944 <HAL_SPI_Init+0x200>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d00f      	beq.n	8008786 <HAL_SPI_Init+0x42>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a77      	ldr	r2, [pc, #476]	; (8008948 <HAL_SPI_Init+0x204>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d00a      	beq.n	8008786 <HAL_SPI_Init+0x42>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a75      	ldr	r2, [pc, #468]	; (800894c <HAL_SPI_Init+0x208>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d005      	beq.n	8008786 <HAL_SPI_Init+0x42>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	2b0f      	cmp	r3, #15
 8008780:	d901      	bls.n	8008786 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008782:	2301      	movs	r3, #1
 8008784:	e0d9      	b.n	800893a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 fba2 	bl	8008ed0 <SPI_GetPacketSize>
 800878c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a6c      	ldr	r2, [pc, #432]	; (8008944 <HAL_SPI_Init+0x200>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d00c      	beq.n	80087b2 <HAL_SPI_Init+0x6e>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a6a      	ldr	r2, [pc, #424]	; (8008948 <HAL_SPI_Init+0x204>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d007      	beq.n	80087b2 <HAL_SPI_Init+0x6e>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a69      	ldr	r2, [pc, #420]	; (800894c <HAL_SPI_Init+0x208>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d002      	beq.n	80087b2 <HAL_SPI_Init+0x6e>
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2b08      	cmp	r3, #8
 80087b0:	d811      	bhi.n	80087d6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80087b6:	4a63      	ldr	r2, [pc, #396]	; (8008944 <HAL_SPI_Init+0x200>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d009      	beq.n	80087d0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a61      	ldr	r2, [pc, #388]	; (8008948 <HAL_SPI_Init+0x204>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d004      	beq.n	80087d0 <HAL_SPI_Init+0x8c>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a60      	ldr	r2, [pc, #384]	; (800894c <HAL_SPI_Init+0x208>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d104      	bne.n	80087da <HAL_SPI_Init+0x96>
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2b10      	cmp	r3, #16
 80087d4:	d901      	bls.n	80087da <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	e0af      	b.n	800893a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d106      	bne.n	80087f4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f7f9 f85a 	bl	80018a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2202      	movs	r2, #2
 80087f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f022 0201 	bic.w	r2, r2, #1
 800880a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008816:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	699b      	ldr	r3, [r3, #24]
 800881c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008820:	d119      	bne.n	8008856 <HAL_SPI_Init+0x112>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800882a:	d103      	bne.n	8008834 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008830:	2b00      	cmp	r3, #0
 8008832:	d008      	beq.n	8008846 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008838:	2b00      	cmp	r3, #0
 800883a:	d10c      	bne.n	8008856 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008840:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008844:	d107      	bne.n	8008856 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008854:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	69da      	ldr	r2, [r3, #28]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800885e:	431a      	orrs	r2, r3
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	431a      	orrs	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008868:	ea42 0103 	orr.w	r1, r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	68da      	ldr	r2, [r3, #12]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	430a      	orrs	r2, r1
 8008876:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008880:	431a      	orrs	r2, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008886:	431a      	orrs	r2, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	699b      	ldr	r3, [r3, #24]
 800888c:	431a      	orrs	r2, r3
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	691b      	ldr	r3, [r3, #16]
 8008892:	431a      	orrs	r2, r3
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	695b      	ldr	r3, [r3, #20]
 8008898:	431a      	orrs	r2, r3
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a1b      	ldr	r3, [r3, #32]
 800889e:	431a      	orrs	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	431a      	orrs	r2, r3
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088aa:	431a      	orrs	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	431a      	orrs	r2, r3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088b6:	ea42 0103 	orr.w	r1, r2, r3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	430a      	orrs	r2, r1
 80088c4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d113      	bne.n	80088f6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088e0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80088f4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f022 0201 	bic.w	r2, r2, #1
 8008904:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00a      	beq.n	8008928 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	430a      	orrs	r2, r1
 8008926:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008938:	2300      	movs	r3, #0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3710      	adds	r7, #16
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	40013000 	.word	0x40013000
 8008948:	40003800 	.word	0x40003800
 800894c:	40003c00 	.word	0x40003c00

08008950 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b08a      	sub	sp, #40	; 0x28
 8008954:	af02      	add	r7, sp, #8
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	60b9      	str	r1, [r7, #8]
 800895a:	603b      	str	r3, [r7, #0]
 800895c:	4613      	mov	r3, r2
 800895e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	3320      	adds	r3, #32
 8008966:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008968:	2300      	movs	r3, #0
 800896a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008972:	2b01      	cmp	r3, #1
 8008974:	d101      	bne.n	800897a <HAL_SPI_Transmit+0x2a>
 8008976:	2302      	movs	r3, #2
 8008978:	e1d7      	b.n	8008d2a <HAL_SPI_Transmit+0x3da>
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2201      	movs	r2, #1
 800897e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008982:	f7f9 ff7f 	bl	8002884 <HAL_GetTick>
 8008986:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800898e:	b2db      	uxtb	r3, r3
 8008990:	2b01      	cmp	r3, #1
 8008992:	d007      	beq.n	80089a4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8008994:	2302      	movs	r3, #2
 8008996:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2200      	movs	r2, #0
 800899c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80089a0:	7efb      	ldrb	r3, [r7, #27]
 80089a2:	e1c2      	b.n	8008d2a <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d002      	beq.n	80089b0 <HAL_SPI_Transmit+0x60>
 80089aa:	88fb      	ldrh	r3, [r7, #6]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d107      	bne.n	80089c0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80089bc:	7efb      	ldrb	r3, [r7, #27]
 80089be:	e1b4      	b.n	8008d2a <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2203      	movs	r2, #3
 80089c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	68ba      	ldr	r2, [r7, #8]
 80089d4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	88fa      	ldrh	r2, [r7, #6]
 80089da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	88fa      	ldrh	r2, [r7, #6]
 80089e2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2200      	movs	r2, #0
 80089ea:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2200      	movs	r2, #0
 80089f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2200      	movs	r2, #0
 8008a00:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008a10:	d107      	bne.n	8008a22 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a20:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	685a      	ldr	r2, [r3, #4]
 8008a28:	4b96      	ldr	r3, [pc, #600]	; (8008c84 <HAL_SPI_Transmit+0x334>)
 8008a2a:	4013      	ands	r3, r2
 8008a2c:	88f9      	ldrh	r1, [r7, #6]
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	6812      	ldr	r2, [r2, #0]
 8008a32:	430b      	orrs	r3, r1
 8008a34:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f042 0201 	orr.w	r2, r2, #1
 8008a44:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a4e:	d107      	bne.n	8008a60 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	2b0f      	cmp	r3, #15
 8008a66:	d947      	bls.n	8008af8 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008a68:	e03f      	b.n	8008aea <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	695b      	ldr	r3, [r3, #20]
 8008a70:	f003 0302 	and.w	r3, r3, #2
 8008a74:	2b02      	cmp	r3, #2
 8008a76:	d114      	bne.n	8008aa2 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	6812      	ldr	r2, [r2, #0]
 8008a82:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a88:	1d1a      	adds	r2, r3, #4
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	3b01      	subs	r3, #1
 8008a98:	b29a      	uxth	r2, r3
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008aa0:	e023      	b.n	8008aea <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008aa2:	f7f9 feef 	bl	8002884 <HAL_GetTick>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	1ad3      	subs	r3, r2, r3
 8008aac:	683a      	ldr	r2, [r7, #0]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d803      	bhi.n	8008aba <HAL_SPI_Transmit+0x16a>
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab8:	d102      	bne.n	8008ac0 <HAL_SPI_Transmit+0x170>
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d114      	bne.n	8008aea <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	f000 f937 	bl	8008d34 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ad4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008ae6:	2303      	movs	r3, #3
 8008ae8:	e11f      	b.n	8008d2a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d1b9      	bne.n	8008a6a <HAL_SPI_Transmit+0x11a>
 8008af6:	e0f2      	b.n	8008cde <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	2b07      	cmp	r3, #7
 8008afe:	f240 80e7 	bls.w	8008cd0 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008b02:	e05d      	b.n	8008bc0 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	695b      	ldr	r3, [r3, #20]
 8008b0a:	f003 0302 	and.w	r3, r3, #2
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d132      	bne.n	8008b78 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d918      	bls.n	8008b50 <HAL_SPI_Transmit+0x200>
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d014      	beq.n	8008b50 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	6812      	ldr	r2, [r2, #0]
 8008b30:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b36:	1d1a      	adds	r2, r3, #4
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	3b02      	subs	r3, #2
 8008b46:	b29a      	uxth	r2, r3
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008b4e:	e037      	b.n	8008bc0 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b54:	881a      	ldrh	r2, [r3, #0]
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b5e:	1c9a      	adds	r2, r3, #2
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	b29a      	uxth	r2, r3
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008b76:	e023      	b.n	8008bc0 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b78:	f7f9 fe84 	bl	8002884 <HAL_GetTick>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	1ad3      	subs	r3, r2, r3
 8008b82:	683a      	ldr	r2, [r7, #0]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d803      	bhi.n	8008b90 <HAL_SPI_Transmit+0x240>
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b8e:	d102      	bne.n	8008b96 <HAL_SPI_Transmit+0x246>
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d114      	bne.n	8008bc0 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	f000 f8cc 	bl	8008d34 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008baa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	e0b4      	b.n	8008d2a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d19b      	bne.n	8008b04 <HAL_SPI_Transmit+0x1b4>
 8008bcc:	e087      	b.n	8008cde <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	695b      	ldr	r3, [r3, #20]
 8008bd4:	f003 0302 	and.w	r3, r3, #2
 8008bd8:	2b02      	cmp	r3, #2
 8008bda:	d155      	bne.n	8008c88 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	2b03      	cmp	r3, #3
 8008be6:	d918      	bls.n	8008c1a <HAL_SPI_Transmit+0x2ca>
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bec:	2b40      	cmp	r3, #64	; 0x40
 8008bee:	d914      	bls.n	8008c1a <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	6812      	ldr	r2, [r2, #0]
 8008bfa:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c00:	1d1a      	adds	r2, r3, #4
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	3b04      	subs	r3, #4
 8008c10:	b29a      	uxth	r2, r3
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008c18:	e05a      	b.n	8008cd0 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d917      	bls.n	8008c56 <HAL_SPI_Transmit+0x306>
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d013      	beq.n	8008c56 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c32:	881a      	ldrh	r2, [r3, #0]
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c3c:	1c9a      	adds	r2, r3, #2
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	3b02      	subs	r3, #2
 8008c4c:	b29a      	uxth	r2, r3
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008c54:	e03c      	b.n	8008cd0 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	3320      	adds	r3, #32
 8008c60:	7812      	ldrb	r2, [r2, #0]
 8008c62:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c68:	1c5a      	adds	r2, r3, #1
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	3b01      	subs	r3, #1
 8008c78:	b29a      	uxth	r2, r3
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008c80:	e026      	b.n	8008cd0 <HAL_SPI_Transmit+0x380>
 8008c82:	bf00      	nop
 8008c84:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c88:	f7f9 fdfc 	bl	8002884 <HAL_GetTick>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	1ad3      	subs	r3, r2, r3
 8008c92:	683a      	ldr	r2, [r7, #0]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d803      	bhi.n	8008ca0 <HAL_SPI_Transmit+0x350>
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c9e:	d102      	bne.n	8008ca6 <HAL_SPI_Transmit+0x356>
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d114      	bne.n	8008cd0 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	f000 f844 	bl	8008d34 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008ccc:	2303      	movs	r3, #3
 8008cce:	e02c      	b.n	8008d2a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	f47f af78 	bne.w	8008bce <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	9300      	str	r3, [sp, #0]
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	2108      	movs	r1, #8
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f000 f8c3 	bl	8008e74 <SPI_WaitOnFlagUntilTimeout>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d007      	beq.n	8008d04 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cfa:	f043 0220 	orr.w	r2, r3, #32
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008d04:	68f8      	ldr	r0, [r7, #12]
 8008d06:	f000 f815 	bl	8008d34 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2201      	movs	r2, #1
 8008d16:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d001      	beq.n	8008d28 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e000      	b.n	8008d2a <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8008d28:	7efb      	ldrb	r3, [r7, #27]
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3720      	adds	r7, #32
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop

08008d34 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b085      	sub	sp, #20
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	695b      	ldr	r3, [r3, #20]
 8008d42:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	699a      	ldr	r2, [r3, #24]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f042 0208 	orr.w	r2, r2, #8
 8008d52:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	699a      	ldr	r2, [r3, #24]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f042 0210 	orr.w	r2, r2, #16
 8008d62:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f022 0201 	bic.w	r2, r2, #1
 8008d72:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	6919      	ldr	r1, [r3, #16]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	4b3c      	ldr	r3, [pc, #240]	; (8008e70 <SPI_CloseTransfer+0x13c>)
 8008d80:	400b      	ands	r3, r1
 8008d82:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	689a      	ldr	r2, [r3, #8]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008d92:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	2b04      	cmp	r3, #4
 8008d9e:	d014      	beq.n	8008dca <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f003 0320 	and.w	r3, r3, #32
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d00f      	beq.n	8008dca <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008db0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	699a      	ldr	r2, [r3, #24]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f042 0220 	orr.w	r2, r2, #32
 8008dc8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	2b03      	cmp	r3, #3
 8008dd4:	d014      	beq.n	8008e00 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d00f      	beq.n	8008e00 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008de6:	f043 0204 	orr.w	r2, r3, #4
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	699a      	ldr	r2, [r3, #24]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008dfe:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d00f      	beq.n	8008e2a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e10:	f043 0201 	orr.w	r2, r3, #1
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	699a      	ldr	r2, [r3, #24]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e28:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00f      	beq.n	8008e54 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e3a:	f043 0208 	orr.w	r2, r3, #8
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	699a      	ldr	r2, [r3, #24]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e52:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008e64:	bf00      	nop
 8008e66:	3714      	adds	r7, #20
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr
 8008e70:	fffffc90 	.word	0xfffffc90

08008e74 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	603b      	str	r3, [r7, #0]
 8008e80:	4613      	mov	r3, r2
 8008e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008e84:	e010      	b.n	8008ea8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e86:	f7f9 fcfd 	bl	8002884 <HAL_GetTick>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	1ad3      	subs	r3, r2, r3
 8008e90:	69ba      	ldr	r2, [r7, #24]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d803      	bhi.n	8008e9e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e9c:	d102      	bne.n	8008ea4 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d101      	bne.n	8008ea8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	e00f      	b.n	8008ec8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	695a      	ldr	r2, [r3, #20]
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	4013      	ands	r3, r2
 8008eb2:	68ba      	ldr	r2, [r7, #8]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	bf0c      	ite	eq
 8008eb8:	2301      	moveq	r3, #1
 8008eba:	2300      	movne	r3, #0
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	79fb      	ldrb	r3, [r7, #7]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d0df      	beq.n	8008e86 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3710      	adds	r7, #16
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b085      	sub	sp, #20
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008edc:	095b      	lsrs	r3, r3, #5
 8008ede:	3301      	adds	r3, #1
 8008ee0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	3307      	adds	r3, #7
 8008eee:	08db      	lsrs	r3, r3, #3
 8008ef0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	fb02 f303 	mul.w	r3, r2, r3
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3714      	adds	r7, #20
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr

08008f06 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b082      	sub	sp, #8
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d101      	bne.n	8008f18 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	e049      	b.n	8008fac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d106      	bne.n	8008f32 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f7f9 f9f3 	bl	8002318 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2202      	movs	r2, #2
 8008f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	3304      	adds	r3, #4
 8008f42:	4619      	mov	r1, r3
 8008f44:	4610      	mov	r0, r2
 8008f46:	f000 fa81 	bl	800944c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2201      	movs	r2, #1
 8008f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2201      	movs	r2, #1
 8008f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2201      	movs	r2, #1
 8008f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2201      	movs	r2, #1
 8008f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2201      	movs	r2, #1
 8008f96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008faa:	2300      	movs	r3, #0
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3708      	adds	r7, #8
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d001      	beq.n	8008fcc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e056      	b.n	800907a <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2202      	movs	r2, #2
 8008fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a2b      	ldr	r2, [pc, #172]	; (8009088 <HAL_TIM_Base_Start+0xd4>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d02c      	beq.n	8009038 <HAL_TIM_Base_Start+0x84>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fe6:	d027      	beq.n	8009038 <HAL_TIM_Base_Start+0x84>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a27      	ldr	r2, [pc, #156]	; (800908c <HAL_TIM_Base_Start+0xd8>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d022      	beq.n	8009038 <HAL_TIM_Base_Start+0x84>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a26      	ldr	r2, [pc, #152]	; (8009090 <HAL_TIM_Base_Start+0xdc>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d01d      	beq.n	8009038 <HAL_TIM_Base_Start+0x84>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a24      	ldr	r2, [pc, #144]	; (8009094 <HAL_TIM_Base_Start+0xe0>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d018      	beq.n	8009038 <HAL_TIM_Base_Start+0x84>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a23      	ldr	r2, [pc, #140]	; (8009098 <HAL_TIM_Base_Start+0xe4>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d013      	beq.n	8009038 <HAL_TIM_Base_Start+0x84>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a21      	ldr	r2, [pc, #132]	; (800909c <HAL_TIM_Base_Start+0xe8>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d00e      	beq.n	8009038 <HAL_TIM_Base_Start+0x84>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a20      	ldr	r2, [pc, #128]	; (80090a0 <HAL_TIM_Base_Start+0xec>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d009      	beq.n	8009038 <HAL_TIM_Base_Start+0x84>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a1e      	ldr	r2, [pc, #120]	; (80090a4 <HAL_TIM_Base_Start+0xf0>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d004      	beq.n	8009038 <HAL_TIM_Base_Start+0x84>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a1d      	ldr	r2, [pc, #116]	; (80090a8 <HAL_TIM_Base_Start+0xf4>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d115      	bne.n	8009064 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	689a      	ldr	r2, [r3, #8]
 800903e:	4b1b      	ldr	r3, [pc, #108]	; (80090ac <HAL_TIM_Base_Start+0xf8>)
 8009040:	4013      	ands	r3, r2
 8009042:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2b06      	cmp	r3, #6
 8009048:	d015      	beq.n	8009076 <HAL_TIM_Base_Start+0xc2>
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009050:	d011      	beq.n	8009076 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f042 0201 	orr.w	r2, r2, #1
 8009060:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009062:	e008      	b.n	8009076 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f042 0201 	orr.w	r2, r2, #1
 8009072:	601a      	str	r2, [r3, #0]
 8009074:	e000      	b.n	8009078 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009076:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009078:	2300      	movs	r3, #0
}
 800907a:	4618      	mov	r0, r3
 800907c:	3714      	adds	r7, #20
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr
 8009086:	bf00      	nop
 8009088:	40010000 	.word	0x40010000
 800908c:	40000400 	.word	0x40000400
 8009090:	40000800 	.word	0x40000800
 8009094:	40000c00 	.word	0x40000c00
 8009098:	40010400 	.word	0x40010400
 800909c:	40001800 	.word	0x40001800
 80090a0:	40014000 	.word	0x40014000
 80090a4:	4000e000 	.word	0x4000e000
 80090a8:	4000e400 	.word	0x4000e400
 80090ac:	00010007 	.word	0x00010007

080090b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d001      	beq.n	80090c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	e05e      	b.n	8009186 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2202      	movs	r2, #2
 80090cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	68da      	ldr	r2, [r3, #12]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f042 0201 	orr.w	r2, r2, #1
 80090de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a2b      	ldr	r2, [pc, #172]	; (8009194 <HAL_TIM_Base_Start_IT+0xe4>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d02c      	beq.n	8009144 <HAL_TIM_Base_Start_IT+0x94>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090f2:	d027      	beq.n	8009144 <HAL_TIM_Base_Start_IT+0x94>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a27      	ldr	r2, [pc, #156]	; (8009198 <HAL_TIM_Base_Start_IT+0xe8>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d022      	beq.n	8009144 <HAL_TIM_Base_Start_IT+0x94>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a26      	ldr	r2, [pc, #152]	; (800919c <HAL_TIM_Base_Start_IT+0xec>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d01d      	beq.n	8009144 <HAL_TIM_Base_Start_IT+0x94>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a24      	ldr	r2, [pc, #144]	; (80091a0 <HAL_TIM_Base_Start_IT+0xf0>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d018      	beq.n	8009144 <HAL_TIM_Base_Start_IT+0x94>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a23      	ldr	r2, [pc, #140]	; (80091a4 <HAL_TIM_Base_Start_IT+0xf4>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d013      	beq.n	8009144 <HAL_TIM_Base_Start_IT+0x94>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a21      	ldr	r2, [pc, #132]	; (80091a8 <HAL_TIM_Base_Start_IT+0xf8>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d00e      	beq.n	8009144 <HAL_TIM_Base_Start_IT+0x94>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a20      	ldr	r2, [pc, #128]	; (80091ac <HAL_TIM_Base_Start_IT+0xfc>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d009      	beq.n	8009144 <HAL_TIM_Base_Start_IT+0x94>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a1e      	ldr	r2, [pc, #120]	; (80091b0 <HAL_TIM_Base_Start_IT+0x100>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d004      	beq.n	8009144 <HAL_TIM_Base_Start_IT+0x94>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a1d      	ldr	r2, [pc, #116]	; (80091b4 <HAL_TIM_Base_Start_IT+0x104>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d115      	bne.n	8009170 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	689a      	ldr	r2, [r3, #8]
 800914a:	4b1b      	ldr	r3, [pc, #108]	; (80091b8 <HAL_TIM_Base_Start_IT+0x108>)
 800914c:	4013      	ands	r3, r2
 800914e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2b06      	cmp	r3, #6
 8009154:	d015      	beq.n	8009182 <HAL_TIM_Base_Start_IT+0xd2>
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800915c:	d011      	beq.n	8009182 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f042 0201 	orr.w	r2, r2, #1
 800916c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800916e:	e008      	b.n	8009182 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f042 0201 	orr.w	r2, r2, #1
 800917e:	601a      	str	r2, [r3, #0]
 8009180:	e000      	b.n	8009184 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009182:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	3714      	adds	r7, #20
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	40010000 	.word	0x40010000
 8009198:	40000400 	.word	0x40000400
 800919c:	40000800 	.word	0x40000800
 80091a0:	40000c00 	.word	0x40000c00
 80091a4:	40010400 	.word	0x40010400
 80091a8:	40001800 	.word	0x40001800
 80091ac:	40014000 	.word	0x40014000
 80091b0:	4000e000 	.word	0x4000e000
 80091b4:	4000e400 	.word	0x4000e400
 80091b8:	00010007 	.word	0x00010007

080091bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	691b      	ldr	r3, [r3, #16]
 80091ca:	f003 0302 	and.w	r3, r3, #2
 80091ce:	2b02      	cmp	r3, #2
 80091d0:	d122      	bne.n	8009218 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	f003 0302 	and.w	r3, r3, #2
 80091dc:	2b02      	cmp	r3, #2
 80091de:	d11b      	bne.n	8009218 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f06f 0202 	mvn.w	r2, #2
 80091e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2201      	movs	r2, #1
 80091ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	699b      	ldr	r3, [r3, #24]
 80091f6:	f003 0303 	and.w	r3, r3, #3
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d003      	beq.n	8009206 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 f905 	bl	800940e <HAL_TIM_IC_CaptureCallback>
 8009204:	e005      	b.n	8009212 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 f8f7 	bl	80093fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 f908 	bl	8009422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	691b      	ldr	r3, [r3, #16]
 800921e:	f003 0304 	and.w	r3, r3, #4
 8009222:	2b04      	cmp	r3, #4
 8009224:	d122      	bne.n	800926c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	f003 0304 	and.w	r3, r3, #4
 8009230:	2b04      	cmp	r3, #4
 8009232:	d11b      	bne.n	800926c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f06f 0204 	mvn.w	r2, #4
 800923c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2202      	movs	r2, #2
 8009242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	699b      	ldr	r3, [r3, #24]
 800924a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800924e:	2b00      	cmp	r3, #0
 8009250:	d003      	beq.n	800925a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 f8db 	bl	800940e <HAL_TIM_IC_CaptureCallback>
 8009258:	e005      	b.n	8009266 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 f8cd 	bl	80093fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 f8de 	bl	8009422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2200      	movs	r2, #0
 800926a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	691b      	ldr	r3, [r3, #16]
 8009272:	f003 0308 	and.w	r3, r3, #8
 8009276:	2b08      	cmp	r3, #8
 8009278:	d122      	bne.n	80092c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	f003 0308 	and.w	r3, r3, #8
 8009284:	2b08      	cmp	r3, #8
 8009286:	d11b      	bne.n	80092c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f06f 0208 	mvn.w	r2, #8
 8009290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2204      	movs	r2, #4
 8009296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	69db      	ldr	r3, [r3, #28]
 800929e:	f003 0303 	and.w	r3, r3, #3
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d003      	beq.n	80092ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 f8b1 	bl	800940e <HAL_TIM_IC_CaptureCallback>
 80092ac:	e005      	b.n	80092ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 f8a3 	bl	80093fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 f8b4 	bl	8009422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	691b      	ldr	r3, [r3, #16]
 80092c6:	f003 0310 	and.w	r3, r3, #16
 80092ca:	2b10      	cmp	r3, #16
 80092cc:	d122      	bne.n	8009314 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	68db      	ldr	r3, [r3, #12]
 80092d4:	f003 0310 	and.w	r3, r3, #16
 80092d8:	2b10      	cmp	r3, #16
 80092da:	d11b      	bne.n	8009314 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f06f 0210 	mvn.w	r2, #16
 80092e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2208      	movs	r2, #8
 80092ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	69db      	ldr	r3, [r3, #28]
 80092f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d003      	beq.n	8009302 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 f887 	bl	800940e <HAL_TIM_IC_CaptureCallback>
 8009300:	e005      	b.n	800930e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 f879 	bl	80093fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 f88a 	bl	8009422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	691b      	ldr	r3, [r3, #16]
 800931a:	f003 0301 	and.w	r3, r3, #1
 800931e:	2b01      	cmp	r3, #1
 8009320:	d10e      	bne.n	8009340 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	f003 0301 	and.w	r3, r3, #1
 800932c:	2b01      	cmp	r3, #1
 800932e:	d107      	bne.n	8009340 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f06f 0201 	mvn.w	r2, #1
 8009338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f7f8 fa46 	bl	80017cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	691b      	ldr	r3, [r3, #16]
 8009346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800934a:	2b80      	cmp	r3, #128	; 0x80
 800934c:	d10e      	bne.n	800936c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009358:	2b80      	cmp	r3, #128	; 0x80
 800935a:	d107      	bne.n	800936c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 f9bc 	bl	80096e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800937a:	d10e      	bne.n	800939a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009386:	2b80      	cmp	r3, #128	; 0x80
 8009388:	d107      	bne.n	800939a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 f9af 	bl	80096f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	691b      	ldr	r3, [r3, #16]
 80093a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093a4:	2b40      	cmp	r3, #64	; 0x40
 80093a6:	d10e      	bne.n	80093c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	68db      	ldr	r3, [r3, #12]
 80093ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093b2:	2b40      	cmp	r3, #64	; 0x40
 80093b4:	d107      	bne.n	80093c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80093be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 f838 	bl	8009436 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	691b      	ldr	r3, [r3, #16]
 80093cc:	f003 0320 	and.w	r3, r3, #32
 80093d0:	2b20      	cmp	r3, #32
 80093d2:	d10e      	bne.n	80093f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	f003 0320 	and.w	r3, r3, #32
 80093de:	2b20      	cmp	r3, #32
 80093e0:	d107      	bne.n	80093f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f06f 0220 	mvn.w	r2, #32
 80093ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 f96f 	bl	80096d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80093f2:	bf00      	nop
 80093f4:	3708      	adds	r7, #8
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093fa:	b480      	push	{r7}
 80093fc:	b083      	sub	sp, #12
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009402:	bf00      	nop
 8009404:	370c      	adds	r7, #12
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr

0800940e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800940e:	b480      	push	{r7}
 8009410:	b083      	sub	sp, #12
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009416:	bf00      	nop
 8009418:	370c      	adds	r7, #12
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr

08009422 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009422:	b480      	push	{r7}
 8009424:	b083      	sub	sp, #12
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800942a:	bf00      	nop
 800942c:	370c      	adds	r7, #12
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr

08009436 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009436:	b480      	push	{r7}
 8009438:	b083      	sub	sp, #12
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800943e:	bf00      	nop
 8009440:	370c      	adds	r7, #12
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr
	...

0800944c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800944c:	b480      	push	{r7}
 800944e:	b085      	sub	sp, #20
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	4a44      	ldr	r2, [pc, #272]	; (8009570 <TIM_Base_SetConfig+0x124>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d013      	beq.n	800948c <TIM_Base_SetConfig+0x40>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800946a:	d00f      	beq.n	800948c <TIM_Base_SetConfig+0x40>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4a41      	ldr	r2, [pc, #260]	; (8009574 <TIM_Base_SetConfig+0x128>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d00b      	beq.n	800948c <TIM_Base_SetConfig+0x40>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4a40      	ldr	r2, [pc, #256]	; (8009578 <TIM_Base_SetConfig+0x12c>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d007      	beq.n	800948c <TIM_Base_SetConfig+0x40>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	4a3f      	ldr	r2, [pc, #252]	; (800957c <TIM_Base_SetConfig+0x130>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d003      	beq.n	800948c <TIM_Base_SetConfig+0x40>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4a3e      	ldr	r2, [pc, #248]	; (8009580 <TIM_Base_SetConfig+0x134>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d108      	bne.n	800949e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009492:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	4313      	orrs	r3, r2
 800949c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	4a33      	ldr	r2, [pc, #204]	; (8009570 <TIM_Base_SetConfig+0x124>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d027      	beq.n	80094f6 <TIM_Base_SetConfig+0xaa>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094ac:	d023      	beq.n	80094f6 <TIM_Base_SetConfig+0xaa>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	4a30      	ldr	r2, [pc, #192]	; (8009574 <TIM_Base_SetConfig+0x128>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d01f      	beq.n	80094f6 <TIM_Base_SetConfig+0xaa>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	4a2f      	ldr	r2, [pc, #188]	; (8009578 <TIM_Base_SetConfig+0x12c>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d01b      	beq.n	80094f6 <TIM_Base_SetConfig+0xaa>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	4a2e      	ldr	r2, [pc, #184]	; (800957c <TIM_Base_SetConfig+0x130>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d017      	beq.n	80094f6 <TIM_Base_SetConfig+0xaa>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	4a2d      	ldr	r2, [pc, #180]	; (8009580 <TIM_Base_SetConfig+0x134>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d013      	beq.n	80094f6 <TIM_Base_SetConfig+0xaa>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4a2c      	ldr	r2, [pc, #176]	; (8009584 <TIM_Base_SetConfig+0x138>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d00f      	beq.n	80094f6 <TIM_Base_SetConfig+0xaa>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	4a2b      	ldr	r2, [pc, #172]	; (8009588 <TIM_Base_SetConfig+0x13c>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d00b      	beq.n	80094f6 <TIM_Base_SetConfig+0xaa>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4a2a      	ldr	r2, [pc, #168]	; (800958c <TIM_Base_SetConfig+0x140>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d007      	beq.n	80094f6 <TIM_Base_SetConfig+0xaa>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	4a29      	ldr	r2, [pc, #164]	; (8009590 <TIM_Base_SetConfig+0x144>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d003      	beq.n	80094f6 <TIM_Base_SetConfig+0xaa>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	4a28      	ldr	r2, [pc, #160]	; (8009594 <TIM_Base_SetConfig+0x148>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d108      	bne.n	8009508 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	68db      	ldr	r3, [r3, #12]
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	4313      	orrs	r3, r2
 8009506:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	695b      	ldr	r3, [r3, #20]
 8009512:	4313      	orrs	r3, r2
 8009514:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	689a      	ldr	r2, [r3, #8]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	4a10      	ldr	r2, [pc, #64]	; (8009570 <TIM_Base_SetConfig+0x124>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d00f      	beq.n	8009554 <TIM_Base_SetConfig+0x108>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4a12      	ldr	r2, [pc, #72]	; (8009580 <TIM_Base_SetConfig+0x134>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d00b      	beq.n	8009554 <TIM_Base_SetConfig+0x108>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	4a11      	ldr	r2, [pc, #68]	; (8009584 <TIM_Base_SetConfig+0x138>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d007      	beq.n	8009554 <TIM_Base_SetConfig+0x108>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4a10      	ldr	r2, [pc, #64]	; (8009588 <TIM_Base_SetConfig+0x13c>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d003      	beq.n	8009554 <TIM_Base_SetConfig+0x108>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a0f      	ldr	r2, [pc, #60]	; (800958c <TIM_Base_SetConfig+0x140>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d103      	bne.n	800955c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	691a      	ldr	r2, [r3, #16]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2201      	movs	r2, #1
 8009560:	615a      	str	r2, [r3, #20]
}
 8009562:	bf00      	nop
 8009564:	3714      	adds	r7, #20
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	40010000 	.word	0x40010000
 8009574:	40000400 	.word	0x40000400
 8009578:	40000800 	.word	0x40000800
 800957c:	40000c00 	.word	0x40000c00
 8009580:	40010400 	.word	0x40010400
 8009584:	40014000 	.word	0x40014000
 8009588:	40014400 	.word	0x40014400
 800958c:	40014800 	.word	0x40014800
 8009590:	4000e000 	.word	0x4000e000
 8009594:	4000e400 	.word	0x4000e400

08009598 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009598:	b480      	push	{r7}
 800959a:	b085      	sub	sp, #20
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d101      	bne.n	80095b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80095ac:	2302      	movs	r3, #2
 80095ae:	e077      	b.n	80096a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2201      	movs	r2, #1
 80095b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2202      	movs	r2, #2
 80095bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	689b      	ldr	r3, [r3, #8]
 80095ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a35      	ldr	r2, [pc, #212]	; (80096ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d004      	beq.n	80095e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a34      	ldr	r2, [pc, #208]	; (80096b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d108      	bne.n	80095f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80095ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	4313      	orrs	r3, r2
 80095f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	68fa      	ldr	r2, [r7, #12]
 8009604:	4313      	orrs	r3, r2
 8009606:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a25      	ldr	r2, [pc, #148]	; (80096ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d02c      	beq.n	8009674 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009622:	d027      	beq.n	8009674 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a22      	ldr	r2, [pc, #136]	; (80096b4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d022      	beq.n	8009674 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a21      	ldr	r2, [pc, #132]	; (80096b8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d01d      	beq.n	8009674 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a1f      	ldr	r2, [pc, #124]	; (80096bc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d018      	beq.n	8009674 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a1a      	ldr	r2, [pc, #104]	; (80096b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d013      	beq.n	8009674 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a1b      	ldr	r2, [pc, #108]	; (80096c0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d00e      	beq.n	8009674 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a1a      	ldr	r2, [pc, #104]	; (80096c4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d009      	beq.n	8009674 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a18      	ldr	r2, [pc, #96]	; (80096c8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d004      	beq.n	8009674 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a17      	ldr	r2, [pc, #92]	; (80096cc <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d10c      	bne.n	800968e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800967a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	68ba      	ldr	r2, [r7, #8]
 8009682:	4313      	orrs	r3, r2
 8009684:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	68ba      	ldr	r2, [r7, #8]
 800968c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2201      	movs	r2, #1
 8009692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800969e:	2300      	movs	r3, #0
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3714      	adds	r7, #20
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr
 80096ac:	40010000 	.word	0x40010000
 80096b0:	40010400 	.word	0x40010400
 80096b4:	40000400 	.word	0x40000400
 80096b8:	40000800 	.word	0x40000800
 80096bc:	40000c00 	.word	0x40000c00
 80096c0:	40001800 	.word	0x40001800
 80096c4:	40014000 	.word	0x40014000
 80096c8:	4000e000 	.word	0x4000e000
 80096cc:	4000e400 	.word	0x4000e400

080096d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096d8:	bf00      	nop
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096ec:	bf00      	nop
 80096ee:	370c      	adds	r7, #12
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009700:	bf00      	nop
 8009702:	370c      	adds	r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d101      	bne.n	800971e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	e042      	b.n	80097a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009724:	2b00      	cmp	r3, #0
 8009726:	d106      	bne.n	8009736 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2200      	movs	r2, #0
 800972c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f7f8 fe5f 	bl	80023f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2224      	movs	r2, #36	; 0x24
 800973a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f022 0201 	bic.w	r2, r2, #1
 800974c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f000 f8c2 	bl	80098d8 <UART_SetConfig>
 8009754:	4603      	mov	r3, r0
 8009756:	2b01      	cmp	r3, #1
 8009758:	d101      	bne.n	800975e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	e022      	b.n	80097a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009762:	2b00      	cmp	r3, #0
 8009764:	d002      	beq.n	800976c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 ff14 	bl	800a594 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	685a      	ldr	r2, [r3, #4]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800977a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	689a      	ldr	r2, [r3, #8]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800978a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f042 0201 	orr.w	r2, r2, #1
 800979a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 ff9b 	bl	800a6d8 <UART_CheckIdleState>
 80097a2:	4603      	mov	r3, r0
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3708      	adds	r7, #8
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b08a      	sub	sp, #40	; 0x28
 80097b0:	af02      	add	r7, sp, #8
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	603b      	str	r3, [r7, #0]
 80097b8:	4613      	mov	r3, r2
 80097ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097c2:	2b20      	cmp	r3, #32
 80097c4:	f040 8083 	bne.w	80098ce <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d002      	beq.n	80097d4 <HAL_UART_Transmit+0x28>
 80097ce:	88fb      	ldrh	r3, [r7, #6]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d101      	bne.n	80097d8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80097d4:	2301      	movs	r3, #1
 80097d6:	e07b      	b.n	80098d0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d101      	bne.n	80097e6 <HAL_UART_Transmit+0x3a>
 80097e2:	2302      	movs	r3, #2
 80097e4:	e074      	b.n	80098d0 <HAL_UART_Transmit+0x124>
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2201      	movs	r2, #1
 80097ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2221      	movs	r2, #33	; 0x21
 80097fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80097fe:	f7f9 f841 	bl	8002884 <HAL_GetTick>
 8009802:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	88fa      	ldrh	r2, [r7, #6]
 8009808:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	88fa      	ldrh	r2, [r7, #6]
 8009810:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800981c:	d108      	bne.n	8009830 <HAL_UART_Transmit+0x84>
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	691b      	ldr	r3, [r3, #16]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d104      	bne.n	8009830 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009826:	2300      	movs	r3, #0
 8009828:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	61bb      	str	r3, [r7, #24]
 800982e:	e003      	b.n	8009838 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009834:	2300      	movs	r3, #0
 8009836:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2200      	movs	r2, #0
 800983c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009840:	e02c      	b.n	800989c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	9300      	str	r3, [sp, #0]
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	2200      	movs	r2, #0
 800984a:	2180      	movs	r1, #128	; 0x80
 800984c:	68f8      	ldr	r0, [r7, #12]
 800984e:	f000 ff8e 	bl	800a76e <UART_WaitOnFlagUntilTimeout>
 8009852:	4603      	mov	r3, r0
 8009854:	2b00      	cmp	r3, #0
 8009856:	d001      	beq.n	800985c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009858:	2303      	movs	r3, #3
 800985a:	e039      	b.n	80098d0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800985c:	69fb      	ldr	r3, [r7, #28]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d10b      	bne.n	800987a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009862:	69bb      	ldr	r3, [r7, #24]
 8009864:	881b      	ldrh	r3, [r3, #0]
 8009866:	461a      	mov	r2, r3
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009870:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009872:	69bb      	ldr	r3, [r7, #24]
 8009874:	3302      	adds	r3, #2
 8009876:	61bb      	str	r3, [r7, #24]
 8009878:	e007      	b.n	800988a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800987a:	69fb      	ldr	r3, [r7, #28]
 800987c:	781a      	ldrb	r2, [r3, #0]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	3301      	adds	r3, #1
 8009888:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009890:	b29b      	uxth	r3, r3
 8009892:	3b01      	subs	r3, #1
 8009894:	b29a      	uxth	r2, r3
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d1cc      	bne.n	8009842 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	9300      	str	r3, [sp, #0]
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	2200      	movs	r2, #0
 80098b0:	2140      	movs	r1, #64	; 0x40
 80098b2:	68f8      	ldr	r0, [r7, #12]
 80098b4:	f000 ff5b 	bl	800a76e <UART_WaitOnFlagUntilTimeout>
 80098b8:	4603      	mov	r3, r0
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d001      	beq.n	80098c2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80098be:	2303      	movs	r3, #3
 80098c0:	e006      	b.n	80098d0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2220      	movs	r2, #32
 80098c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80098ca:	2300      	movs	r3, #0
 80098cc:	e000      	b.n	80098d0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80098ce:	2302      	movs	r3, #2
  }
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3720      	adds	r7, #32
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098d8:	b5b0      	push	{r4, r5, r7, lr}
 80098da:	b08e      	sub	sp, #56	; 0x38
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80098e0:	2300      	movs	r3, #0
 80098e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	689a      	ldr	r2, [r3, #8]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	431a      	orrs	r2, r3
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	695b      	ldr	r3, [r3, #20]
 80098f4:	431a      	orrs	r2, r3
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	69db      	ldr	r3, [r3, #28]
 80098fa:	4313      	orrs	r3, r2
 80098fc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	4bbf      	ldr	r3, [pc, #764]	; (8009c04 <UART_SetConfig+0x32c>)
 8009906:	4013      	ands	r3, r2
 8009908:	687a      	ldr	r2, [r7, #4]
 800990a:	6812      	ldr	r2, [r2, #0]
 800990c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800990e:	430b      	orrs	r3, r1
 8009910:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	68da      	ldr	r2, [r3, #12]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	430a      	orrs	r2, r1
 8009926:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	699b      	ldr	r3, [r3, #24]
 800992c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4ab5      	ldr	r2, [pc, #724]	; (8009c08 <UART_SetConfig+0x330>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d004      	beq.n	8009942 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6a1b      	ldr	r3, [r3, #32]
 800993c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800993e:	4313      	orrs	r3, r2
 8009940:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	689a      	ldr	r2, [r3, #8]
 8009948:	4bb0      	ldr	r3, [pc, #704]	; (8009c0c <UART_SetConfig+0x334>)
 800994a:	4013      	ands	r3, r2
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	6812      	ldr	r2, [r2, #0]
 8009950:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009952:	430b      	orrs	r3, r1
 8009954:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800995c:	f023 010f 	bic.w	r1, r3, #15
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	430a      	orrs	r2, r1
 800996a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4aa7      	ldr	r2, [pc, #668]	; (8009c10 <UART_SetConfig+0x338>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d176      	bne.n	8009a64 <UART_SetConfig+0x18c>
 8009976:	4ba7      	ldr	r3, [pc, #668]	; (8009c14 <UART_SetConfig+0x33c>)
 8009978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800997a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800997e:	2b28      	cmp	r3, #40	; 0x28
 8009980:	d86c      	bhi.n	8009a5c <UART_SetConfig+0x184>
 8009982:	a201      	add	r2, pc, #4	; (adr r2, 8009988 <UART_SetConfig+0xb0>)
 8009984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009988:	08009a2d 	.word	0x08009a2d
 800998c:	08009a5d 	.word	0x08009a5d
 8009990:	08009a5d 	.word	0x08009a5d
 8009994:	08009a5d 	.word	0x08009a5d
 8009998:	08009a5d 	.word	0x08009a5d
 800999c:	08009a5d 	.word	0x08009a5d
 80099a0:	08009a5d 	.word	0x08009a5d
 80099a4:	08009a5d 	.word	0x08009a5d
 80099a8:	08009a35 	.word	0x08009a35
 80099ac:	08009a5d 	.word	0x08009a5d
 80099b0:	08009a5d 	.word	0x08009a5d
 80099b4:	08009a5d 	.word	0x08009a5d
 80099b8:	08009a5d 	.word	0x08009a5d
 80099bc:	08009a5d 	.word	0x08009a5d
 80099c0:	08009a5d 	.word	0x08009a5d
 80099c4:	08009a5d 	.word	0x08009a5d
 80099c8:	08009a3d 	.word	0x08009a3d
 80099cc:	08009a5d 	.word	0x08009a5d
 80099d0:	08009a5d 	.word	0x08009a5d
 80099d4:	08009a5d 	.word	0x08009a5d
 80099d8:	08009a5d 	.word	0x08009a5d
 80099dc:	08009a5d 	.word	0x08009a5d
 80099e0:	08009a5d 	.word	0x08009a5d
 80099e4:	08009a5d 	.word	0x08009a5d
 80099e8:	08009a45 	.word	0x08009a45
 80099ec:	08009a5d 	.word	0x08009a5d
 80099f0:	08009a5d 	.word	0x08009a5d
 80099f4:	08009a5d 	.word	0x08009a5d
 80099f8:	08009a5d 	.word	0x08009a5d
 80099fc:	08009a5d 	.word	0x08009a5d
 8009a00:	08009a5d 	.word	0x08009a5d
 8009a04:	08009a5d 	.word	0x08009a5d
 8009a08:	08009a4d 	.word	0x08009a4d
 8009a0c:	08009a5d 	.word	0x08009a5d
 8009a10:	08009a5d 	.word	0x08009a5d
 8009a14:	08009a5d 	.word	0x08009a5d
 8009a18:	08009a5d 	.word	0x08009a5d
 8009a1c:	08009a5d 	.word	0x08009a5d
 8009a20:	08009a5d 	.word	0x08009a5d
 8009a24:	08009a5d 	.word	0x08009a5d
 8009a28:	08009a55 	.word	0x08009a55
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a32:	e326      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009a34:	2304      	movs	r3, #4
 8009a36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a3a:	e322      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009a3c:	2308      	movs	r3, #8
 8009a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a42:	e31e      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009a44:	2310      	movs	r3, #16
 8009a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a4a:	e31a      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009a4c:	2320      	movs	r3, #32
 8009a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a52:	e316      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009a54:	2340      	movs	r3, #64	; 0x40
 8009a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a5a:	e312      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009a5c:	2380      	movs	r3, #128	; 0x80
 8009a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a62:	e30e      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a6b      	ldr	r2, [pc, #428]	; (8009c18 <UART_SetConfig+0x340>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d130      	bne.n	8009ad0 <UART_SetConfig+0x1f8>
 8009a6e:	4b69      	ldr	r3, [pc, #420]	; (8009c14 <UART_SetConfig+0x33c>)
 8009a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a72:	f003 0307 	and.w	r3, r3, #7
 8009a76:	2b05      	cmp	r3, #5
 8009a78:	d826      	bhi.n	8009ac8 <UART_SetConfig+0x1f0>
 8009a7a:	a201      	add	r2, pc, #4	; (adr r2, 8009a80 <UART_SetConfig+0x1a8>)
 8009a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a80:	08009a99 	.word	0x08009a99
 8009a84:	08009aa1 	.word	0x08009aa1
 8009a88:	08009aa9 	.word	0x08009aa9
 8009a8c:	08009ab1 	.word	0x08009ab1
 8009a90:	08009ab9 	.word	0x08009ab9
 8009a94:	08009ac1 	.word	0x08009ac1
 8009a98:	2300      	movs	r3, #0
 8009a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a9e:	e2f0      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009aa0:	2304      	movs	r3, #4
 8009aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aa6:	e2ec      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009aa8:	2308      	movs	r3, #8
 8009aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aae:	e2e8      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009ab0:	2310      	movs	r3, #16
 8009ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ab6:	e2e4      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009ab8:	2320      	movs	r3, #32
 8009aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009abe:	e2e0      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009ac0:	2340      	movs	r3, #64	; 0x40
 8009ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ac6:	e2dc      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009ac8:	2380      	movs	r3, #128	; 0x80
 8009aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ace:	e2d8      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4a51      	ldr	r2, [pc, #324]	; (8009c1c <UART_SetConfig+0x344>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d130      	bne.n	8009b3c <UART_SetConfig+0x264>
 8009ada:	4b4e      	ldr	r3, [pc, #312]	; (8009c14 <UART_SetConfig+0x33c>)
 8009adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ade:	f003 0307 	and.w	r3, r3, #7
 8009ae2:	2b05      	cmp	r3, #5
 8009ae4:	d826      	bhi.n	8009b34 <UART_SetConfig+0x25c>
 8009ae6:	a201      	add	r2, pc, #4	; (adr r2, 8009aec <UART_SetConfig+0x214>)
 8009ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aec:	08009b05 	.word	0x08009b05
 8009af0:	08009b0d 	.word	0x08009b0d
 8009af4:	08009b15 	.word	0x08009b15
 8009af8:	08009b1d 	.word	0x08009b1d
 8009afc:	08009b25 	.word	0x08009b25
 8009b00:	08009b2d 	.word	0x08009b2d
 8009b04:	2300      	movs	r3, #0
 8009b06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b0a:	e2ba      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009b0c:	2304      	movs	r3, #4
 8009b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b12:	e2b6      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009b14:	2308      	movs	r3, #8
 8009b16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b1a:	e2b2      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009b1c:	2310      	movs	r3, #16
 8009b1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b22:	e2ae      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009b24:	2320      	movs	r3, #32
 8009b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b2a:	e2aa      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009b2c:	2340      	movs	r3, #64	; 0x40
 8009b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b32:	e2a6      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009b34:	2380      	movs	r3, #128	; 0x80
 8009b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b3a:	e2a2      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a37      	ldr	r2, [pc, #220]	; (8009c20 <UART_SetConfig+0x348>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d130      	bne.n	8009ba8 <UART_SetConfig+0x2d0>
 8009b46:	4b33      	ldr	r3, [pc, #204]	; (8009c14 <UART_SetConfig+0x33c>)
 8009b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b4a:	f003 0307 	and.w	r3, r3, #7
 8009b4e:	2b05      	cmp	r3, #5
 8009b50:	d826      	bhi.n	8009ba0 <UART_SetConfig+0x2c8>
 8009b52:	a201      	add	r2, pc, #4	; (adr r2, 8009b58 <UART_SetConfig+0x280>)
 8009b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b58:	08009b71 	.word	0x08009b71
 8009b5c:	08009b79 	.word	0x08009b79
 8009b60:	08009b81 	.word	0x08009b81
 8009b64:	08009b89 	.word	0x08009b89
 8009b68:	08009b91 	.word	0x08009b91
 8009b6c:	08009b99 	.word	0x08009b99
 8009b70:	2300      	movs	r3, #0
 8009b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b76:	e284      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009b78:	2304      	movs	r3, #4
 8009b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b7e:	e280      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009b80:	2308      	movs	r3, #8
 8009b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b86:	e27c      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009b88:	2310      	movs	r3, #16
 8009b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b8e:	e278      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009b90:	2320      	movs	r3, #32
 8009b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b96:	e274      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009b98:	2340      	movs	r3, #64	; 0x40
 8009b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b9e:	e270      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009ba0:	2380      	movs	r3, #128	; 0x80
 8009ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ba6:	e26c      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a1d      	ldr	r2, [pc, #116]	; (8009c24 <UART_SetConfig+0x34c>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d142      	bne.n	8009c38 <UART_SetConfig+0x360>
 8009bb2:	4b18      	ldr	r3, [pc, #96]	; (8009c14 <UART_SetConfig+0x33c>)
 8009bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bb6:	f003 0307 	and.w	r3, r3, #7
 8009bba:	2b05      	cmp	r3, #5
 8009bbc:	d838      	bhi.n	8009c30 <UART_SetConfig+0x358>
 8009bbe:	a201      	add	r2, pc, #4	; (adr r2, 8009bc4 <UART_SetConfig+0x2ec>)
 8009bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc4:	08009bdd 	.word	0x08009bdd
 8009bc8:	08009be5 	.word	0x08009be5
 8009bcc:	08009bed 	.word	0x08009bed
 8009bd0:	08009bf5 	.word	0x08009bf5
 8009bd4:	08009bfd 	.word	0x08009bfd
 8009bd8:	08009c29 	.word	0x08009c29
 8009bdc:	2300      	movs	r3, #0
 8009bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009be2:	e24e      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009be4:	2304      	movs	r3, #4
 8009be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bea:	e24a      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009bec:	2308      	movs	r3, #8
 8009bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bf2:	e246      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009bf4:	2310      	movs	r3, #16
 8009bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bfa:	e242      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009bfc:	2320      	movs	r3, #32
 8009bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c02:	e23e      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009c04:	cfff69f3 	.word	0xcfff69f3
 8009c08:	58000c00 	.word	0x58000c00
 8009c0c:	11fff4ff 	.word	0x11fff4ff
 8009c10:	40011000 	.word	0x40011000
 8009c14:	58024400 	.word	0x58024400
 8009c18:	40004400 	.word	0x40004400
 8009c1c:	40004800 	.word	0x40004800
 8009c20:	40004c00 	.word	0x40004c00
 8009c24:	40005000 	.word	0x40005000
 8009c28:	2340      	movs	r3, #64	; 0x40
 8009c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c2e:	e228      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009c30:	2380      	movs	r3, #128	; 0x80
 8009c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c36:	e224      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4ab1      	ldr	r2, [pc, #708]	; (8009f04 <UART_SetConfig+0x62c>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d176      	bne.n	8009d30 <UART_SetConfig+0x458>
 8009c42:	4bb1      	ldr	r3, [pc, #708]	; (8009f08 <UART_SetConfig+0x630>)
 8009c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c4a:	2b28      	cmp	r3, #40	; 0x28
 8009c4c:	d86c      	bhi.n	8009d28 <UART_SetConfig+0x450>
 8009c4e:	a201      	add	r2, pc, #4	; (adr r2, 8009c54 <UART_SetConfig+0x37c>)
 8009c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c54:	08009cf9 	.word	0x08009cf9
 8009c58:	08009d29 	.word	0x08009d29
 8009c5c:	08009d29 	.word	0x08009d29
 8009c60:	08009d29 	.word	0x08009d29
 8009c64:	08009d29 	.word	0x08009d29
 8009c68:	08009d29 	.word	0x08009d29
 8009c6c:	08009d29 	.word	0x08009d29
 8009c70:	08009d29 	.word	0x08009d29
 8009c74:	08009d01 	.word	0x08009d01
 8009c78:	08009d29 	.word	0x08009d29
 8009c7c:	08009d29 	.word	0x08009d29
 8009c80:	08009d29 	.word	0x08009d29
 8009c84:	08009d29 	.word	0x08009d29
 8009c88:	08009d29 	.word	0x08009d29
 8009c8c:	08009d29 	.word	0x08009d29
 8009c90:	08009d29 	.word	0x08009d29
 8009c94:	08009d09 	.word	0x08009d09
 8009c98:	08009d29 	.word	0x08009d29
 8009c9c:	08009d29 	.word	0x08009d29
 8009ca0:	08009d29 	.word	0x08009d29
 8009ca4:	08009d29 	.word	0x08009d29
 8009ca8:	08009d29 	.word	0x08009d29
 8009cac:	08009d29 	.word	0x08009d29
 8009cb0:	08009d29 	.word	0x08009d29
 8009cb4:	08009d11 	.word	0x08009d11
 8009cb8:	08009d29 	.word	0x08009d29
 8009cbc:	08009d29 	.word	0x08009d29
 8009cc0:	08009d29 	.word	0x08009d29
 8009cc4:	08009d29 	.word	0x08009d29
 8009cc8:	08009d29 	.word	0x08009d29
 8009ccc:	08009d29 	.word	0x08009d29
 8009cd0:	08009d29 	.word	0x08009d29
 8009cd4:	08009d19 	.word	0x08009d19
 8009cd8:	08009d29 	.word	0x08009d29
 8009cdc:	08009d29 	.word	0x08009d29
 8009ce0:	08009d29 	.word	0x08009d29
 8009ce4:	08009d29 	.word	0x08009d29
 8009ce8:	08009d29 	.word	0x08009d29
 8009cec:	08009d29 	.word	0x08009d29
 8009cf0:	08009d29 	.word	0x08009d29
 8009cf4:	08009d21 	.word	0x08009d21
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cfe:	e1c0      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009d00:	2304      	movs	r3, #4
 8009d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d06:	e1bc      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009d08:	2308      	movs	r3, #8
 8009d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d0e:	e1b8      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009d10:	2310      	movs	r3, #16
 8009d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d16:	e1b4      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009d18:	2320      	movs	r3, #32
 8009d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d1e:	e1b0      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009d20:	2340      	movs	r3, #64	; 0x40
 8009d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d26:	e1ac      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009d28:	2380      	movs	r3, #128	; 0x80
 8009d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d2e:	e1a8      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a75      	ldr	r2, [pc, #468]	; (8009f0c <UART_SetConfig+0x634>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d130      	bne.n	8009d9c <UART_SetConfig+0x4c4>
 8009d3a:	4b73      	ldr	r3, [pc, #460]	; (8009f08 <UART_SetConfig+0x630>)
 8009d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d3e:	f003 0307 	and.w	r3, r3, #7
 8009d42:	2b05      	cmp	r3, #5
 8009d44:	d826      	bhi.n	8009d94 <UART_SetConfig+0x4bc>
 8009d46:	a201      	add	r2, pc, #4	; (adr r2, 8009d4c <UART_SetConfig+0x474>)
 8009d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d4c:	08009d65 	.word	0x08009d65
 8009d50:	08009d6d 	.word	0x08009d6d
 8009d54:	08009d75 	.word	0x08009d75
 8009d58:	08009d7d 	.word	0x08009d7d
 8009d5c:	08009d85 	.word	0x08009d85
 8009d60:	08009d8d 	.word	0x08009d8d
 8009d64:	2300      	movs	r3, #0
 8009d66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d6a:	e18a      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009d6c:	2304      	movs	r3, #4
 8009d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d72:	e186      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009d74:	2308      	movs	r3, #8
 8009d76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d7a:	e182      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009d7c:	2310      	movs	r3, #16
 8009d7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d82:	e17e      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009d84:	2320      	movs	r3, #32
 8009d86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d8a:	e17a      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009d8c:	2340      	movs	r3, #64	; 0x40
 8009d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d92:	e176      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009d94:	2380      	movs	r3, #128	; 0x80
 8009d96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d9a:	e172      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4a5b      	ldr	r2, [pc, #364]	; (8009f10 <UART_SetConfig+0x638>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d130      	bne.n	8009e08 <UART_SetConfig+0x530>
 8009da6:	4b58      	ldr	r3, [pc, #352]	; (8009f08 <UART_SetConfig+0x630>)
 8009da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009daa:	f003 0307 	and.w	r3, r3, #7
 8009dae:	2b05      	cmp	r3, #5
 8009db0:	d826      	bhi.n	8009e00 <UART_SetConfig+0x528>
 8009db2:	a201      	add	r2, pc, #4	; (adr r2, 8009db8 <UART_SetConfig+0x4e0>)
 8009db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db8:	08009dd1 	.word	0x08009dd1
 8009dbc:	08009dd9 	.word	0x08009dd9
 8009dc0:	08009de1 	.word	0x08009de1
 8009dc4:	08009de9 	.word	0x08009de9
 8009dc8:	08009df1 	.word	0x08009df1
 8009dcc:	08009df9 	.word	0x08009df9
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dd6:	e154      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009dd8:	2304      	movs	r3, #4
 8009dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dde:	e150      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009de0:	2308      	movs	r3, #8
 8009de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009de6:	e14c      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009de8:	2310      	movs	r3, #16
 8009dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dee:	e148      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009df0:	2320      	movs	r3, #32
 8009df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009df6:	e144      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009df8:	2340      	movs	r3, #64	; 0x40
 8009dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dfe:	e140      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009e00:	2380      	movs	r3, #128	; 0x80
 8009e02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e06:	e13c      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a41      	ldr	r2, [pc, #260]	; (8009f14 <UART_SetConfig+0x63c>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	f040 8082 	bne.w	8009f18 <UART_SetConfig+0x640>
 8009e14:	4b3c      	ldr	r3, [pc, #240]	; (8009f08 <UART_SetConfig+0x630>)
 8009e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e1c:	2b28      	cmp	r3, #40	; 0x28
 8009e1e:	d86d      	bhi.n	8009efc <UART_SetConfig+0x624>
 8009e20:	a201      	add	r2, pc, #4	; (adr r2, 8009e28 <UART_SetConfig+0x550>)
 8009e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e26:	bf00      	nop
 8009e28:	08009ecd 	.word	0x08009ecd
 8009e2c:	08009efd 	.word	0x08009efd
 8009e30:	08009efd 	.word	0x08009efd
 8009e34:	08009efd 	.word	0x08009efd
 8009e38:	08009efd 	.word	0x08009efd
 8009e3c:	08009efd 	.word	0x08009efd
 8009e40:	08009efd 	.word	0x08009efd
 8009e44:	08009efd 	.word	0x08009efd
 8009e48:	08009ed5 	.word	0x08009ed5
 8009e4c:	08009efd 	.word	0x08009efd
 8009e50:	08009efd 	.word	0x08009efd
 8009e54:	08009efd 	.word	0x08009efd
 8009e58:	08009efd 	.word	0x08009efd
 8009e5c:	08009efd 	.word	0x08009efd
 8009e60:	08009efd 	.word	0x08009efd
 8009e64:	08009efd 	.word	0x08009efd
 8009e68:	08009edd 	.word	0x08009edd
 8009e6c:	08009efd 	.word	0x08009efd
 8009e70:	08009efd 	.word	0x08009efd
 8009e74:	08009efd 	.word	0x08009efd
 8009e78:	08009efd 	.word	0x08009efd
 8009e7c:	08009efd 	.word	0x08009efd
 8009e80:	08009efd 	.word	0x08009efd
 8009e84:	08009efd 	.word	0x08009efd
 8009e88:	08009ee5 	.word	0x08009ee5
 8009e8c:	08009efd 	.word	0x08009efd
 8009e90:	08009efd 	.word	0x08009efd
 8009e94:	08009efd 	.word	0x08009efd
 8009e98:	08009efd 	.word	0x08009efd
 8009e9c:	08009efd 	.word	0x08009efd
 8009ea0:	08009efd 	.word	0x08009efd
 8009ea4:	08009efd 	.word	0x08009efd
 8009ea8:	08009eed 	.word	0x08009eed
 8009eac:	08009efd 	.word	0x08009efd
 8009eb0:	08009efd 	.word	0x08009efd
 8009eb4:	08009efd 	.word	0x08009efd
 8009eb8:	08009efd 	.word	0x08009efd
 8009ebc:	08009efd 	.word	0x08009efd
 8009ec0:	08009efd 	.word	0x08009efd
 8009ec4:	08009efd 	.word	0x08009efd
 8009ec8:	08009ef5 	.word	0x08009ef5
 8009ecc:	2301      	movs	r3, #1
 8009ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ed2:	e0d6      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009ed4:	2304      	movs	r3, #4
 8009ed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eda:	e0d2      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009edc:	2308      	movs	r3, #8
 8009ede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ee2:	e0ce      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009ee4:	2310      	movs	r3, #16
 8009ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eea:	e0ca      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009eec:	2320      	movs	r3, #32
 8009eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ef2:	e0c6      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009ef4:	2340      	movs	r3, #64	; 0x40
 8009ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009efa:	e0c2      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009efc:	2380      	movs	r3, #128	; 0x80
 8009efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f02:	e0be      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009f04:	40011400 	.word	0x40011400
 8009f08:	58024400 	.word	0x58024400
 8009f0c:	40007800 	.word	0x40007800
 8009f10:	40007c00 	.word	0x40007c00
 8009f14:	40011800 	.word	0x40011800
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4aad      	ldr	r2, [pc, #692]	; (800a1d4 <UART_SetConfig+0x8fc>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d176      	bne.n	800a010 <UART_SetConfig+0x738>
 8009f22:	4bad      	ldr	r3, [pc, #692]	; (800a1d8 <UART_SetConfig+0x900>)
 8009f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f2a:	2b28      	cmp	r3, #40	; 0x28
 8009f2c:	d86c      	bhi.n	800a008 <UART_SetConfig+0x730>
 8009f2e:	a201      	add	r2, pc, #4	; (adr r2, 8009f34 <UART_SetConfig+0x65c>)
 8009f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f34:	08009fd9 	.word	0x08009fd9
 8009f38:	0800a009 	.word	0x0800a009
 8009f3c:	0800a009 	.word	0x0800a009
 8009f40:	0800a009 	.word	0x0800a009
 8009f44:	0800a009 	.word	0x0800a009
 8009f48:	0800a009 	.word	0x0800a009
 8009f4c:	0800a009 	.word	0x0800a009
 8009f50:	0800a009 	.word	0x0800a009
 8009f54:	08009fe1 	.word	0x08009fe1
 8009f58:	0800a009 	.word	0x0800a009
 8009f5c:	0800a009 	.word	0x0800a009
 8009f60:	0800a009 	.word	0x0800a009
 8009f64:	0800a009 	.word	0x0800a009
 8009f68:	0800a009 	.word	0x0800a009
 8009f6c:	0800a009 	.word	0x0800a009
 8009f70:	0800a009 	.word	0x0800a009
 8009f74:	08009fe9 	.word	0x08009fe9
 8009f78:	0800a009 	.word	0x0800a009
 8009f7c:	0800a009 	.word	0x0800a009
 8009f80:	0800a009 	.word	0x0800a009
 8009f84:	0800a009 	.word	0x0800a009
 8009f88:	0800a009 	.word	0x0800a009
 8009f8c:	0800a009 	.word	0x0800a009
 8009f90:	0800a009 	.word	0x0800a009
 8009f94:	08009ff1 	.word	0x08009ff1
 8009f98:	0800a009 	.word	0x0800a009
 8009f9c:	0800a009 	.word	0x0800a009
 8009fa0:	0800a009 	.word	0x0800a009
 8009fa4:	0800a009 	.word	0x0800a009
 8009fa8:	0800a009 	.word	0x0800a009
 8009fac:	0800a009 	.word	0x0800a009
 8009fb0:	0800a009 	.word	0x0800a009
 8009fb4:	08009ff9 	.word	0x08009ff9
 8009fb8:	0800a009 	.word	0x0800a009
 8009fbc:	0800a009 	.word	0x0800a009
 8009fc0:	0800a009 	.word	0x0800a009
 8009fc4:	0800a009 	.word	0x0800a009
 8009fc8:	0800a009 	.word	0x0800a009
 8009fcc:	0800a009 	.word	0x0800a009
 8009fd0:	0800a009 	.word	0x0800a009
 8009fd4:	0800a001 	.word	0x0800a001
 8009fd8:	2301      	movs	r3, #1
 8009fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fde:	e050      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009fe0:	2304      	movs	r3, #4
 8009fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fe6:	e04c      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009fe8:	2308      	movs	r3, #8
 8009fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fee:	e048      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009ff0:	2310      	movs	r3, #16
 8009ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ff6:	e044      	b.n	800a082 <UART_SetConfig+0x7aa>
 8009ff8:	2320      	movs	r3, #32
 8009ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ffe:	e040      	b.n	800a082 <UART_SetConfig+0x7aa>
 800a000:	2340      	movs	r3, #64	; 0x40
 800a002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a006:	e03c      	b.n	800a082 <UART_SetConfig+0x7aa>
 800a008:	2380      	movs	r3, #128	; 0x80
 800a00a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a00e:	e038      	b.n	800a082 <UART_SetConfig+0x7aa>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a71      	ldr	r2, [pc, #452]	; (800a1dc <UART_SetConfig+0x904>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d130      	bne.n	800a07c <UART_SetConfig+0x7a4>
 800a01a:	4b6f      	ldr	r3, [pc, #444]	; (800a1d8 <UART_SetConfig+0x900>)
 800a01c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a01e:	f003 0307 	and.w	r3, r3, #7
 800a022:	2b05      	cmp	r3, #5
 800a024:	d826      	bhi.n	800a074 <UART_SetConfig+0x79c>
 800a026:	a201      	add	r2, pc, #4	; (adr r2, 800a02c <UART_SetConfig+0x754>)
 800a028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02c:	0800a045 	.word	0x0800a045
 800a030:	0800a04d 	.word	0x0800a04d
 800a034:	0800a055 	.word	0x0800a055
 800a038:	0800a05d 	.word	0x0800a05d
 800a03c:	0800a065 	.word	0x0800a065
 800a040:	0800a06d 	.word	0x0800a06d
 800a044:	2302      	movs	r3, #2
 800a046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a04a:	e01a      	b.n	800a082 <UART_SetConfig+0x7aa>
 800a04c:	2304      	movs	r3, #4
 800a04e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a052:	e016      	b.n	800a082 <UART_SetConfig+0x7aa>
 800a054:	2308      	movs	r3, #8
 800a056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a05a:	e012      	b.n	800a082 <UART_SetConfig+0x7aa>
 800a05c:	2310      	movs	r3, #16
 800a05e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a062:	e00e      	b.n	800a082 <UART_SetConfig+0x7aa>
 800a064:	2320      	movs	r3, #32
 800a066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a06a:	e00a      	b.n	800a082 <UART_SetConfig+0x7aa>
 800a06c:	2340      	movs	r3, #64	; 0x40
 800a06e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a072:	e006      	b.n	800a082 <UART_SetConfig+0x7aa>
 800a074:	2380      	movs	r3, #128	; 0x80
 800a076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a07a:	e002      	b.n	800a082 <UART_SetConfig+0x7aa>
 800a07c:	2380      	movs	r3, #128	; 0x80
 800a07e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4a55      	ldr	r2, [pc, #340]	; (800a1dc <UART_SetConfig+0x904>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	f040 80f0 	bne.w	800a26e <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a08e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a092:	2b20      	cmp	r3, #32
 800a094:	dc46      	bgt.n	800a124 <UART_SetConfig+0x84c>
 800a096:	2b02      	cmp	r3, #2
 800a098:	db75      	blt.n	800a186 <UART_SetConfig+0x8ae>
 800a09a:	3b02      	subs	r3, #2
 800a09c:	2b1e      	cmp	r3, #30
 800a09e:	d872      	bhi.n	800a186 <UART_SetConfig+0x8ae>
 800a0a0:	a201      	add	r2, pc, #4	; (adr r2, 800a0a8 <UART_SetConfig+0x7d0>)
 800a0a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a6:	bf00      	nop
 800a0a8:	0800a12b 	.word	0x0800a12b
 800a0ac:	0800a187 	.word	0x0800a187
 800a0b0:	0800a133 	.word	0x0800a133
 800a0b4:	0800a187 	.word	0x0800a187
 800a0b8:	0800a187 	.word	0x0800a187
 800a0bc:	0800a187 	.word	0x0800a187
 800a0c0:	0800a143 	.word	0x0800a143
 800a0c4:	0800a187 	.word	0x0800a187
 800a0c8:	0800a187 	.word	0x0800a187
 800a0cc:	0800a187 	.word	0x0800a187
 800a0d0:	0800a187 	.word	0x0800a187
 800a0d4:	0800a187 	.word	0x0800a187
 800a0d8:	0800a187 	.word	0x0800a187
 800a0dc:	0800a187 	.word	0x0800a187
 800a0e0:	0800a153 	.word	0x0800a153
 800a0e4:	0800a187 	.word	0x0800a187
 800a0e8:	0800a187 	.word	0x0800a187
 800a0ec:	0800a187 	.word	0x0800a187
 800a0f0:	0800a187 	.word	0x0800a187
 800a0f4:	0800a187 	.word	0x0800a187
 800a0f8:	0800a187 	.word	0x0800a187
 800a0fc:	0800a187 	.word	0x0800a187
 800a100:	0800a187 	.word	0x0800a187
 800a104:	0800a187 	.word	0x0800a187
 800a108:	0800a187 	.word	0x0800a187
 800a10c:	0800a187 	.word	0x0800a187
 800a110:	0800a187 	.word	0x0800a187
 800a114:	0800a187 	.word	0x0800a187
 800a118:	0800a187 	.word	0x0800a187
 800a11c:	0800a187 	.word	0x0800a187
 800a120:	0800a179 	.word	0x0800a179
 800a124:	2b40      	cmp	r3, #64	; 0x40
 800a126:	d02a      	beq.n	800a17e <UART_SetConfig+0x8a6>
 800a128:	e02d      	b.n	800a186 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a12a:	f7fd fee9 	bl	8007f00 <HAL_RCCEx_GetD3PCLK1Freq>
 800a12e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a130:	e02f      	b.n	800a192 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a132:	f107 0314 	add.w	r3, r7, #20
 800a136:	4618      	mov	r0, r3
 800a138:	f7fd fef8 	bl	8007f2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a13c:	69bb      	ldr	r3, [r7, #24]
 800a13e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a140:	e027      	b.n	800a192 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a142:	f107 0308 	add.w	r3, r7, #8
 800a146:	4618      	mov	r0, r3
 800a148:	f7fe f844 	bl	80081d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a150:	e01f      	b.n	800a192 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a152:	4b21      	ldr	r3, [pc, #132]	; (800a1d8 <UART_SetConfig+0x900>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f003 0320 	and.w	r3, r3, #32
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d009      	beq.n	800a172 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a15e:	4b1e      	ldr	r3, [pc, #120]	; (800a1d8 <UART_SetConfig+0x900>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	08db      	lsrs	r3, r3, #3
 800a164:	f003 0303 	and.w	r3, r3, #3
 800a168:	4a1d      	ldr	r2, [pc, #116]	; (800a1e0 <UART_SetConfig+0x908>)
 800a16a:	fa22 f303 	lsr.w	r3, r2, r3
 800a16e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a170:	e00f      	b.n	800a192 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800a172:	4b1b      	ldr	r3, [pc, #108]	; (800a1e0 <UART_SetConfig+0x908>)
 800a174:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a176:	e00c      	b.n	800a192 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a178:	4b1a      	ldr	r3, [pc, #104]	; (800a1e4 <UART_SetConfig+0x90c>)
 800a17a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a17c:	e009      	b.n	800a192 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a17e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a182:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a184:	e005      	b.n	800a192 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800a186:	2300      	movs	r3, #0
 800a188:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a18a:	2301      	movs	r3, #1
 800a18c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a190:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a194:	2b00      	cmp	r3, #0
 800a196:	f000 81e6 	beq.w	800a566 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19e:	4a12      	ldr	r2, [pc, #72]	; (800a1e8 <UART_SetConfig+0x910>)
 800a1a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1ac:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	685a      	ldr	r2, [r3, #4]
 800a1b2:	4613      	mov	r3, r2
 800a1b4:	005b      	lsls	r3, r3, #1
 800a1b6:	4413      	add	r3, r2
 800a1b8:	6a3a      	ldr	r2, [r7, #32]
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d305      	bcc.n	800a1ca <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a1c4:	6a3a      	ldr	r2, [r7, #32]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d910      	bls.n	800a1ec <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a1d0:	e1c9      	b.n	800a566 <UART_SetConfig+0xc8e>
 800a1d2:	bf00      	nop
 800a1d4:	40011c00 	.word	0x40011c00
 800a1d8:	58024400 	.word	0x58024400
 800a1dc:	58000c00 	.word	0x58000c00
 800a1e0:	03d09000 	.word	0x03d09000
 800a1e4:	003d0900 	.word	0x003d0900
 800a1e8:	0801dd7c 	.word	0x0801dd7c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f04f 0100 	mov.w	r1, #0
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f8:	4ac1      	ldr	r2, [pc, #772]	; (800a500 <UART_SetConfig+0xc28>)
 800a1fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1fe:	b29a      	uxth	r2, r3
 800a200:	f04f 0300 	mov.w	r3, #0
 800a204:	f7f6 f8dc 	bl	80003c0 <__aeabi_uldivmod>
 800a208:	4602      	mov	r2, r0
 800a20a:	460b      	mov	r3, r1
 800a20c:	4610      	mov	r0, r2
 800a20e:	4619      	mov	r1, r3
 800a210:	f04f 0200 	mov.w	r2, #0
 800a214:	f04f 0300 	mov.w	r3, #0
 800a218:	020b      	lsls	r3, r1, #8
 800a21a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a21e:	0202      	lsls	r2, r0, #8
 800a220:	6879      	ldr	r1, [r7, #4]
 800a222:	6849      	ldr	r1, [r1, #4]
 800a224:	0849      	lsrs	r1, r1, #1
 800a226:	4608      	mov	r0, r1
 800a228:	f04f 0100 	mov.w	r1, #0
 800a22c:	1814      	adds	r4, r2, r0
 800a22e:	eb43 0501 	adc.w	r5, r3, r1
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	461a      	mov	r2, r3
 800a238:	f04f 0300 	mov.w	r3, #0
 800a23c:	4620      	mov	r0, r4
 800a23e:	4629      	mov	r1, r5
 800a240:	f7f6 f8be 	bl	80003c0 <__aeabi_uldivmod>
 800a244:	4602      	mov	r2, r0
 800a246:	460b      	mov	r3, r1
 800a248:	4613      	mov	r3, r2
 800a24a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a252:	d308      	bcc.n	800a266 <UART_SetConfig+0x98e>
 800a254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a256:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a25a:	d204      	bcs.n	800a266 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a262:	60da      	str	r2, [r3, #12]
 800a264:	e17f      	b.n	800a566 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800a266:	2301      	movs	r3, #1
 800a268:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a26c:	e17b      	b.n	800a566 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	69db      	ldr	r3, [r3, #28]
 800a272:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a276:	f040 80bd 	bne.w	800a3f4 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800a27a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a27e:	2b20      	cmp	r3, #32
 800a280:	dc48      	bgt.n	800a314 <UART_SetConfig+0xa3c>
 800a282:	2b00      	cmp	r3, #0
 800a284:	db7b      	blt.n	800a37e <UART_SetConfig+0xaa6>
 800a286:	2b20      	cmp	r3, #32
 800a288:	d879      	bhi.n	800a37e <UART_SetConfig+0xaa6>
 800a28a:	a201      	add	r2, pc, #4	; (adr r2, 800a290 <UART_SetConfig+0x9b8>)
 800a28c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a290:	0800a31b 	.word	0x0800a31b
 800a294:	0800a323 	.word	0x0800a323
 800a298:	0800a37f 	.word	0x0800a37f
 800a29c:	0800a37f 	.word	0x0800a37f
 800a2a0:	0800a32b 	.word	0x0800a32b
 800a2a4:	0800a37f 	.word	0x0800a37f
 800a2a8:	0800a37f 	.word	0x0800a37f
 800a2ac:	0800a37f 	.word	0x0800a37f
 800a2b0:	0800a33b 	.word	0x0800a33b
 800a2b4:	0800a37f 	.word	0x0800a37f
 800a2b8:	0800a37f 	.word	0x0800a37f
 800a2bc:	0800a37f 	.word	0x0800a37f
 800a2c0:	0800a37f 	.word	0x0800a37f
 800a2c4:	0800a37f 	.word	0x0800a37f
 800a2c8:	0800a37f 	.word	0x0800a37f
 800a2cc:	0800a37f 	.word	0x0800a37f
 800a2d0:	0800a34b 	.word	0x0800a34b
 800a2d4:	0800a37f 	.word	0x0800a37f
 800a2d8:	0800a37f 	.word	0x0800a37f
 800a2dc:	0800a37f 	.word	0x0800a37f
 800a2e0:	0800a37f 	.word	0x0800a37f
 800a2e4:	0800a37f 	.word	0x0800a37f
 800a2e8:	0800a37f 	.word	0x0800a37f
 800a2ec:	0800a37f 	.word	0x0800a37f
 800a2f0:	0800a37f 	.word	0x0800a37f
 800a2f4:	0800a37f 	.word	0x0800a37f
 800a2f8:	0800a37f 	.word	0x0800a37f
 800a2fc:	0800a37f 	.word	0x0800a37f
 800a300:	0800a37f 	.word	0x0800a37f
 800a304:	0800a37f 	.word	0x0800a37f
 800a308:	0800a37f 	.word	0x0800a37f
 800a30c:	0800a37f 	.word	0x0800a37f
 800a310:	0800a371 	.word	0x0800a371
 800a314:	2b40      	cmp	r3, #64	; 0x40
 800a316:	d02e      	beq.n	800a376 <UART_SetConfig+0xa9e>
 800a318:	e031      	b.n	800a37e <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a31a:	f7fc fe89 	bl	8007030 <HAL_RCC_GetPCLK1Freq>
 800a31e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a320:	e033      	b.n	800a38a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a322:	f7fc fe9b 	bl	800705c <HAL_RCC_GetPCLK2Freq>
 800a326:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a328:	e02f      	b.n	800a38a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a32a:	f107 0314 	add.w	r3, r7, #20
 800a32e:	4618      	mov	r0, r3
 800a330:	f7fd fdfc 	bl	8007f2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a334:	69bb      	ldr	r3, [r7, #24]
 800a336:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a338:	e027      	b.n	800a38a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a33a:	f107 0308 	add.w	r3, r7, #8
 800a33e:	4618      	mov	r0, r3
 800a340:	f7fd ff48 	bl	80081d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a348:	e01f      	b.n	800a38a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a34a:	4b6e      	ldr	r3, [pc, #440]	; (800a504 <UART_SetConfig+0xc2c>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f003 0320 	and.w	r3, r3, #32
 800a352:	2b00      	cmp	r3, #0
 800a354:	d009      	beq.n	800a36a <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a356:	4b6b      	ldr	r3, [pc, #428]	; (800a504 <UART_SetConfig+0xc2c>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	08db      	lsrs	r3, r3, #3
 800a35c:	f003 0303 	and.w	r3, r3, #3
 800a360:	4a69      	ldr	r2, [pc, #420]	; (800a508 <UART_SetConfig+0xc30>)
 800a362:	fa22 f303 	lsr.w	r3, r2, r3
 800a366:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a368:	e00f      	b.n	800a38a <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800a36a:	4b67      	ldr	r3, [pc, #412]	; (800a508 <UART_SetConfig+0xc30>)
 800a36c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a36e:	e00c      	b.n	800a38a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a370:	4b66      	ldr	r3, [pc, #408]	; (800a50c <UART_SetConfig+0xc34>)
 800a372:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a374:	e009      	b.n	800a38a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a37a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a37c:	e005      	b.n	800a38a <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800a37e:	2300      	movs	r3, #0
 800a380:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a382:	2301      	movs	r3, #1
 800a384:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a388:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	f000 80ea 	beq.w	800a566 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a396:	4a5a      	ldr	r2, [pc, #360]	; (800a500 <UART_SetConfig+0xc28>)
 800a398:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a39c:	461a      	mov	r2, r3
 800a39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3a4:	005a      	lsls	r2, r3, #1
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	085b      	lsrs	r3, r3, #1
 800a3ac:	441a      	add	r2, r3
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3b6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ba:	2b0f      	cmp	r3, #15
 800a3bc:	d916      	bls.n	800a3ec <UART_SetConfig+0xb14>
 800a3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3c4:	d212      	bcs.n	800a3ec <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	f023 030f 	bic.w	r3, r3, #15
 800a3ce:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d2:	085b      	lsrs	r3, r3, #1
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	f003 0307 	and.w	r3, r3, #7
 800a3da:	b29a      	uxth	r2, r3
 800a3dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a3e8:	60da      	str	r2, [r3, #12]
 800a3ea:	e0bc      	b.n	800a566 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a3f2:	e0b8      	b.n	800a566 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a3f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a3f8:	2b20      	cmp	r3, #32
 800a3fa:	dc4b      	bgt.n	800a494 <UART_SetConfig+0xbbc>
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	f2c0 8087 	blt.w	800a510 <UART_SetConfig+0xc38>
 800a402:	2b20      	cmp	r3, #32
 800a404:	f200 8084 	bhi.w	800a510 <UART_SetConfig+0xc38>
 800a408:	a201      	add	r2, pc, #4	; (adr r2, 800a410 <UART_SetConfig+0xb38>)
 800a40a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a40e:	bf00      	nop
 800a410:	0800a49b 	.word	0x0800a49b
 800a414:	0800a4a3 	.word	0x0800a4a3
 800a418:	0800a511 	.word	0x0800a511
 800a41c:	0800a511 	.word	0x0800a511
 800a420:	0800a4ab 	.word	0x0800a4ab
 800a424:	0800a511 	.word	0x0800a511
 800a428:	0800a511 	.word	0x0800a511
 800a42c:	0800a511 	.word	0x0800a511
 800a430:	0800a4bb 	.word	0x0800a4bb
 800a434:	0800a511 	.word	0x0800a511
 800a438:	0800a511 	.word	0x0800a511
 800a43c:	0800a511 	.word	0x0800a511
 800a440:	0800a511 	.word	0x0800a511
 800a444:	0800a511 	.word	0x0800a511
 800a448:	0800a511 	.word	0x0800a511
 800a44c:	0800a511 	.word	0x0800a511
 800a450:	0800a4cb 	.word	0x0800a4cb
 800a454:	0800a511 	.word	0x0800a511
 800a458:	0800a511 	.word	0x0800a511
 800a45c:	0800a511 	.word	0x0800a511
 800a460:	0800a511 	.word	0x0800a511
 800a464:	0800a511 	.word	0x0800a511
 800a468:	0800a511 	.word	0x0800a511
 800a46c:	0800a511 	.word	0x0800a511
 800a470:	0800a511 	.word	0x0800a511
 800a474:	0800a511 	.word	0x0800a511
 800a478:	0800a511 	.word	0x0800a511
 800a47c:	0800a511 	.word	0x0800a511
 800a480:	0800a511 	.word	0x0800a511
 800a484:	0800a511 	.word	0x0800a511
 800a488:	0800a511 	.word	0x0800a511
 800a48c:	0800a511 	.word	0x0800a511
 800a490:	0800a4f1 	.word	0x0800a4f1
 800a494:	2b40      	cmp	r3, #64	; 0x40
 800a496:	d02e      	beq.n	800a4f6 <UART_SetConfig+0xc1e>
 800a498:	e03a      	b.n	800a510 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a49a:	f7fc fdc9 	bl	8007030 <HAL_RCC_GetPCLK1Freq>
 800a49e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a4a0:	e03c      	b.n	800a51c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a4a2:	f7fc fddb 	bl	800705c <HAL_RCC_GetPCLK2Freq>
 800a4a6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a4a8:	e038      	b.n	800a51c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4aa:	f107 0314 	add.w	r3, r7, #20
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7fd fd3c 	bl	8007f2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a4b4:	69bb      	ldr	r3, [r7, #24]
 800a4b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a4b8:	e030      	b.n	800a51c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4ba:	f107 0308 	add.w	r3, r7, #8
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7fd fe88 	bl	80081d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a4c8:	e028      	b.n	800a51c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4ca:	4b0e      	ldr	r3, [pc, #56]	; (800a504 <UART_SetConfig+0xc2c>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f003 0320 	and.w	r3, r3, #32
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d009      	beq.n	800a4ea <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a4d6:	4b0b      	ldr	r3, [pc, #44]	; (800a504 <UART_SetConfig+0xc2c>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	08db      	lsrs	r3, r3, #3
 800a4dc:	f003 0303 	and.w	r3, r3, #3
 800a4e0:	4a09      	ldr	r2, [pc, #36]	; (800a508 <UART_SetConfig+0xc30>)
 800a4e2:	fa22 f303 	lsr.w	r3, r2, r3
 800a4e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a4e8:	e018      	b.n	800a51c <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800a4ea:	4b07      	ldr	r3, [pc, #28]	; (800a508 <UART_SetConfig+0xc30>)
 800a4ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a4ee:	e015      	b.n	800a51c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a4f0:	4b06      	ldr	r3, [pc, #24]	; (800a50c <UART_SetConfig+0xc34>)
 800a4f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a4f4:	e012      	b.n	800a51c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a4fc:	e00e      	b.n	800a51c <UART_SetConfig+0xc44>
 800a4fe:	bf00      	nop
 800a500:	0801dd7c 	.word	0x0801dd7c
 800a504:	58024400 	.word	0x58024400
 800a508:	03d09000 	.word	0x03d09000
 800a50c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800a510:	2300      	movs	r3, #0
 800a512:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a514:	2301      	movs	r3, #1
 800a516:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a51a:	bf00      	nop
    }

    if (pclk != 0U)
 800a51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d021      	beq.n	800a566 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a526:	4a1a      	ldr	r2, [pc, #104]	; (800a590 <UART_SetConfig+0xcb8>)
 800a528:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a52c:	461a      	mov	r2, r3
 800a52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a530:	fbb3 f2f2 	udiv	r2, r3, r2
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	085b      	lsrs	r3, r3, #1
 800a53a:	441a      	add	r2, r3
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	fbb2 f3f3 	udiv	r3, r2, r3
 800a544:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a548:	2b0f      	cmp	r3, #15
 800a54a:	d909      	bls.n	800a560 <UART_SetConfig+0xc88>
 800a54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a552:	d205      	bcs.n	800a560 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a556:	b29a      	uxth	r2, r3
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	60da      	str	r2, [r3, #12]
 800a55e:	e002      	b.n	800a566 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800a560:	2301      	movs	r3, #1
 800a562:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2201      	movs	r2, #1
 800a56a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2201      	movs	r2, #1
 800a572:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2200      	movs	r2, #0
 800a57a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a582:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a586:	4618      	mov	r0, r3
 800a588:	3738      	adds	r7, #56	; 0x38
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bdb0      	pop	{r4, r5, r7, pc}
 800a58e:	bf00      	nop
 800a590:	0801dd7c 	.word	0x0801dd7c

0800a594 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a0:	f003 0301 	and.w	r3, r3, #1
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00a      	beq.n	800a5be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	430a      	orrs	r2, r1
 800a5bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5c2:	f003 0302 	and.w	r3, r3, #2
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00a      	beq.n	800a5e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	430a      	orrs	r2, r1
 800a5de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5e4:	f003 0304 	and.w	r3, r3, #4
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d00a      	beq.n	800a602 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	430a      	orrs	r2, r1
 800a600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a606:	f003 0308 	and.w	r3, r3, #8
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d00a      	beq.n	800a624 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	430a      	orrs	r2, r1
 800a622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a628:	f003 0310 	and.w	r3, r3, #16
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d00a      	beq.n	800a646 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	430a      	orrs	r2, r1
 800a644:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a64a:	f003 0320 	and.w	r3, r3, #32
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d00a      	beq.n	800a668 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	430a      	orrs	r2, r1
 800a666:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a66c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a670:	2b00      	cmp	r3, #0
 800a672:	d01a      	beq.n	800a6aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	430a      	orrs	r2, r1
 800a688:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a68e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a692:	d10a      	bne.n	800a6aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	430a      	orrs	r2, r1
 800a6a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d00a      	beq.n	800a6cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	685b      	ldr	r3, [r3, #4]
 800a6bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	430a      	orrs	r2, r1
 800a6ca:	605a      	str	r2, [r3, #4]
  }
}
 800a6cc:	bf00      	nop
 800a6ce:	370c      	adds	r7, #12
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr

0800a6d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b086      	sub	sp, #24
 800a6dc:	af02      	add	r7, sp, #8
 800a6de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a6e8:	f7f8 f8cc 	bl	8002884 <HAL_GetTick>
 800a6ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f003 0308 	and.w	r3, r3, #8
 800a6f8:	2b08      	cmp	r3, #8
 800a6fa:	d10e      	bne.n	800a71a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a700:	9300      	str	r3, [sp, #0]
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2200      	movs	r2, #0
 800a706:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 f82f 	bl	800a76e <UART_WaitOnFlagUntilTimeout>
 800a710:	4603      	mov	r3, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	d001      	beq.n	800a71a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a716:	2303      	movs	r3, #3
 800a718:	e025      	b.n	800a766 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f003 0304 	and.w	r3, r3, #4
 800a724:	2b04      	cmp	r3, #4
 800a726:	d10e      	bne.n	800a746 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a728:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a72c:	9300      	str	r3, [sp, #0]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2200      	movs	r2, #0
 800a732:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 f819 	bl	800a76e <UART_WaitOnFlagUntilTimeout>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d001      	beq.n	800a746 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a742:	2303      	movs	r3, #3
 800a744:	e00f      	b.n	800a766 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2220      	movs	r2, #32
 800a74a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2220      	movs	r2, #32
 800a752:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2200      	movs	r2, #0
 800a75a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2200      	movs	r2, #0
 800a760:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a764:	2300      	movs	r3, #0
}
 800a766:	4618      	mov	r0, r3
 800a768:	3710      	adds	r7, #16
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}

0800a76e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a76e:	b580      	push	{r7, lr}
 800a770:	b09c      	sub	sp, #112	; 0x70
 800a772:	af00      	add	r7, sp, #0
 800a774:	60f8      	str	r0, [r7, #12]
 800a776:	60b9      	str	r1, [r7, #8]
 800a778:	603b      	str	r3, [r7, #0]
 800a77a:	4613      	mov	r3, r2
 800a77c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a77e:	e0a9      	b.n	800a8d4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a780:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a782:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a786:	f000 80a5 	beq.w	800a8d4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a78a:	f7f8 f87b 	bl	8002884 <HAL_GetTick>
 800a78e:	4602      	mov	r2, r0
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	1ad3      	subs	r3, r2, r3
 800a794:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a796:	429a      	cmp	r2, r3
 800a798:	d302      	bcc.n	800a7a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800a79a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d140      	bne.n	800a822 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7a8:	e853 3f00 	ldrex	r3, [r3]
 800a7ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a7ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a7b4:	667b      	str	r3, [r7, #100]	; 0x64
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7be:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a7c0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a7c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a7c6:	e841 2300 	strex	r3, r2, [r1]
 800a7ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a7cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d1e6      	bne.n	800a7a0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	3308      	adds	r3, #8
 800a7d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7dc:	e853 3f00 	ldrex	r3, [r3]
 800a7e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e4:	f023 0301 	bic.w	r3, r3, #1
 800a7e8:	663b      	str	r3, [r7, #96]	; 0x60
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	3308      	adds	r3, #8
 800a7f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a7f2:	64ba      	str	r2, [r7, #72]	; 0x48
 800a7f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a7f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a7fa:	e841 2300 	strex	r3, r2, [r1]
 800a7fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a802:	2b00      	cmp	r3, #0
 800a804:	d1e5      	bne.n	800a7d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2220      	movs	r2, #32
 800a80a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2220      	movs	r2, #32
 800a812:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2200      	movs	r2, #0
 800a81a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a81e:	2303      	movs	r3, #3
 800a820:	e069      	b.n	800a8f6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f003 0304 	and.w	r3, r3, #4
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d051      	beq.n	800a8d4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	69db      	ldr	r3, [r3, #28]
 800a836:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a83a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a83e:	d149      	bne.n	800a8d4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a848:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a852:	e853 3f00 	ldrex	r3, [r3]
 800a856:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a85a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a85e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	461a      	mov	r2, r3
 800a866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a868:	637b      	str	r3, [r7, #52]	; 0x34
 800a86a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a86c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a86e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a870:	e841 2300 	strex	r3, r2, [r1]
 800a874:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d1e6      	bne.n	800a84a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	3308      	adds	r3, #8
 800a882:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	e853 3f00 	ldrex	r3, [r3]
 800a88a:	613b      	str	r3, [r7, #16]
   return(result);
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	f023 0301 	bic.w	r3, r3, #1
 800a892:	66bb      	str	r3, [r7, #104]	; 0x68
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	3308      	adds	r3, #8
 800a89a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a89c:	623a      	str	r2, [r7, #32]
 800a89e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a0:	69f9      	ldr	r1, [r7, #28]
 800a8a2:	6a3a      	ldr	r2, [r7, #32]
 800a8a4:	e841 2300 	strex	r3, r2, [r1]
 800a8a8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a8aa:	69bb      	ldr	r3, [r7, #24]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d1e5      	bne.n	800a87c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2220      	movs	r2, #32
 800a8b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2220      	movs	r2, #32
 800a8bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2220      	movs	r2, #32
 800a8c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a8d0:	2303      	movs	r3, #3
 800a8d2:	e010      	b.n	800a8f6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	69da      	ldr	r2, [r3, #28]
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	4013      	ands	r3, r2
 800a8de:	68ba      	ldr	r2, [r7, #8]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	bf0c      	ite	eq
 800a8e4:	2301      	moveq	r3, #1
 800a8e6:	2300      	movne	r3, #0
 800a8e8:	b2db      	uxtb	r3, r3
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	79fb      	ldrb	r3, [r7, #7]
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	f43f af46 	beq.w	800a780 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a8f4:	2300      	movs	r3, #0
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3770      	adds	r7, #112	; 0x70
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}

0800a8fe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a8fe:	b480      	push	{r7}
 800a900:	b085      	sub	sp, #20
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d101      	bne.n	800a914 <HAL_UARTEx_DisableFifoMode+0x16>
 800a910:	2302      	movs	r3, #2
 800a912:	e027      	b.n	800a964 <HAL_UARTEx_DisableFifoMode+0x66>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2201      	movs	r2, #1
 800a918:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2224      	movs	r2, #36	; 0x24
 800a920:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f022 0201 	bic.w	r2, r2, #1
 800a93a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a942:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2200      	movs	r2, #0
 800a948:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	68fa      	ldr	r2, [r7, #12]
 800a950:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2220      	movs	r2, #32
 800a956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2200      	movs	r2, #0
 800a95e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a962:	2300      	movs	r3, #0
}
 800a964:	4618      	mov	r0, r3
 800a966:	3714      	adds	r7, #20
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b084      	sub	sp, #16
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a980:	2b01      	cmp	r3, #1
 800a982:	d101      	bne.n	800a988 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a984:	2302      	movs	r3, #2
 800a986:	e02d      	b.n	800a9e4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2201      	movs	r2, #1
 800a98c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2224      	movs	r2, #36	; 0x24
 800a994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	681a      	ldr	r2, [r3, #0]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f022 0201 	bic.w	r2, r2, #1
 800a9ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	689b      	ldr	r3, [r3, #8]
 800a9b6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	683a      	ldr	r2, [r7, #0]
 800a9c0:	430a      	orrs	r2, r1
 800a9c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f000 f84f 	bl	800aa68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	68fa      	ldr	r2, [r7, #12]
 800a9d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2220      	movs	r2, #32
 800a9d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a9e2:	2300      	movs	r3, #0
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3710      	adds	r7, #16
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b084      	sub	sp, #16
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d101      	bne.n	800aa04 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aa00:	2302      	movs	r3, #2
 800aa02:	e02d      	b.n	800aa60 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2201      	movs	r2, #1
 800aa08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2224      	movs	r2, #36	; 0x24
 800aa10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f022 0201 	bic.w	r2, r2, #1
 800aa2a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	689b      	ldr	r3, [r3, #8]
 800aa32:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	683a      	ldr	r2, [r7, #0]
 800aa3c:	430a      	orrs	r2, r1
 800aa3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f000 f811 	bl	800aa68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	68fa      	ldr	r2, [r7, #12]
 800aa4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2220      	movs	r2, #32
 800aa52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aa5e:	2300      	movs	r3, #0
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3710      	adds	r7, #16
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b085      	sub	sp, #20
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d108      	bne.n	800aa8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2201      	movs	r2, #1
 800aa84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aa88:	e031      	b.n	800aaee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aa8a:	2310      	movs	r3, #16
 800aa8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aa8e:	2310      	movs	r3, #16
 800aa90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	689b      	ldr	r3, [r3, #8]
 800aa98:	0e5b      	lsrs	r3, r3, #25
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	f003 0307 	and.w	r3, r3, #7
 800aaa0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	689b      	ldr	r3, [r3, #8]
 800aaa8:	0f5b      	lsrs	r3, r3, #29
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	f003 0307 	and.w	r3, r3, #7
 800aab0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aab2:	7bbb      	ldrb	r3, [r7, #14]
 800aab4:	7b3a      	ldrb	r2, [r7, #12]
 800aab6:	4911      	ldr	r1, [pc, #68]	; (800aafc <UARTEx_SetNbDataToProcess+0x94>)
 800aab8:	5c8a      	ldrb	r2, [r1, r2]
 800aaba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aabe:	7b3a      	ldrb	r2, [r7, #12]
 800aac0:	490f      	ldr	r1, [pc, #60]	; (800ab00 <UARTEx_SetNbDataToProcess+0x98>)
 800aac2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aac4:	fb93 f3f2 	sdiv	r3, r3, r2
 800aac8:	b29a      	uxth	r2, r3
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aad0:	7bfb      	ldrb	r3, [r7, #15]
 800aad2:	7b7a      	ldrb	r2, [r7, #13]
 800aad4:	4909      	ldr	r1, [pc, #36]	; (800aafc <UARTEx_SetNbDataToProcess+0x94>)
 800aad6:	5c8a      	ldrb	r2, [r1, r2]
 800aad8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aadc:	7b7a      	ldrb	r2, [r7, #13]
 800aade:	4908      	ldr	r1, [pc, #32]	; (800ab00 <UARTEx_SetNbDataToProcess+0x98>)
 800aae0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aae2:	fb93 f3f2 	sdiv	r3, r3, r2
 800aae6:	b29a      	uxth	r2, r3
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800aaee:	bf00      	nop
 800aaf0:	3714      	adds	r7, #20
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr
 800aafa:	bf00      	nop
 800aafc:	0801dd94 	.word	0x0801dd94
 800ab00:	0801dd9c 	.word	0x0801dd9c

0800ab04 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800ab04:	b5b0      	push	{r4, r5, r7, lr}
 800ab06:	b08c      	sub	sp, #48	; 0x30
 800ab08:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800ab0a:	4b96      	ldr	r3, [pc, #600]	; (800ad64 <MX_LWIP_Init+0x260>)
 800ab0c:	22c0      	movs	r2, #192	; 0xc0
 800ab0e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800ab10:	4b94      	ldr	r3, [pc, #592]	; (800ad64 <MX_LWIP_Init+0x260>)
 800ab12:	22a8      	movs	r2, #168	; 0xa8
 800ab14:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800ab16:	4b93      	ldr	r3, [pc, #588]	; (800ad64 <MX_LWIP_Init+0x260>)
 800ab18:	2201      	movs	r2, #1
 800ab1a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 200;
 800ab1c:	4b91      	ldr	r3, [pc, #580]	; (800ad64 <MX_LWIP_Init+0x260>)
 800ab1e:	22c8      	movs	r2, #200	; 0xc8
 800ab20:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800ab22:	4b91      	ldr	r3, [pc, #580]	; (800ad68 <MX_LWIP_Init+0x264>)
 800ab24:	22ff      	movs	r2, #255	; 0xff
 800ab26:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800ab28:	4b8f      	ldr	r3, [pc, #572]	; (800ad68 <MX_LWIP_Init+0x264>)
 800ab2a:	22ff      	movs	r2, #255	; 0xff
 800ab2c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800ab2e:	4b8e      	ldr	r3, [pc, #568]	; (800ad68 <MX_LWIP_Init+0x264>)
 800ab30:	22ff      	movs	r2, #255	; 0xff
 800ab32:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800ab34:	4b8c      	ldr	r3, [pc, #560]	; (800ad68 <MX_LWIP_Init+0x264>)
 800ab36:	2200      	movs	r2, #0
 800ab38:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800ab3a:	4b8c      	ldr	r3, [pc, #560]	; (800ad6c <MX_LWIP_Init+0x268>)
 800ab3c:	22c0      	movs	r2, #192	; 0xc0
 800ab3e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800ab40:	4b8a      	ldr	r3, [pc, #552]	; (800ad6c <MX_LWIP_Init+0x268>)
 800ab42:	22a8      	movs	r2, #168	; 0xa8
 800ab44:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800ab46:	4b89      	ldr	r3, [pc, #548]	; (800ad6c <MX_LWIP_Init+0x268>)
 800ab48:	2201      	movs	r2, #1
 800ab4a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800ab4c:	4b87      	ldr	r3, [pc, #540]	; (800ad6c <MX_LWIP_Init+0x268>)
 800ab4e:	2201      	movs	r2, #1
 800ab50:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800ab52:	2100      	movs	r1, #0
 800ab54:	2000      	movs	r0, #0
 800ab56:	f003 fe21 	bl	800e79c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800ab5a:	4b82      	ldr	r3, [pc, #520]	; (800ad64 <MX_LWIP_Init+0x260>)
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	061a      	lsls	r2, r3, #24
 800ab60:	4b80      	ldr	r3, [pc, #512]	; (800ad64 <MX_LWIP_Init+0x260>)
 800ab62:	785b      	ldrb	r3, [r3, #1]
 800ab64:	041b      	lsls	r3, r3, #16
 800ab66:	431a      	orrs	r2, r3
 800ab68:	4b7e      	ldr	r3, [pc, #504]	; (800ad64 <MX_LWIP_Init+0x260>)
 800ab6a:	789b      	ldrb	r3, [r3, #2]
 800ab6c:	021b      	lsls	r3, r3, #8
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	4a7c      	ldr	r2, [pc, #496]	; (800ad64 <MX_LWIP_Init+0x260>)
 800ab72:	78d2      	ldrb	r2, [r2, #3]
 800ab74:	4313      	orrs	r3, r2
 800ab76:	061a      	lsls	r2, r3, #24
 800ab78:	4b7a      	ldr	r3, [pc, #488]	; (800ad64 <MX_LWIP_Init+0x260>)
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	0619      	lsls	r1, r3, #24
 800ab7e:	4b79      	ldr	r3, [pc, #484]	; (800ad64 <MX_LWIP_Init+0x260>)
 800ab80:	785b      	ldrb	r3, [r3, #1]
 800ab82:	041b      	lsls	r3, r3, #16
 800ab84:	4319      	orrs	r1, r3
 800ab86:	4b77      	ldr	r3, [pc, #476]	; (800ad64 <MX_LWIP_Init+0x260>)
 800ab88:	789b      	ldrb	r3, [r3, #2]
 800ab8a:	021b      	lsls	r3, r3, #8
 800ab8c:	430b      	orrs	r3, r1
 800ab8e:	4975      	ldr	r1, [pc, #468]	; (800ad64 <MX_LWIP_Init+0x260>)
 800ab90:	78c9      	ldrb	r1, [r1, #3]
 800ab92:	430b      	orrs	r3, r1
 800ab94:	021b      	lsls	r3, r3, #8
 800ab96:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ab9a:	431a      	orrs	r2, r3
 800ab9c:	4b71      	ldr	r3, [pc, #452]	; (800ad64 <MX_LWIP_Init+0x260>)
 800ab9e:	781b      	ldrb	r3, [r3, #0]
 800aba0:	0619      	lsls	r1, r3, #24
 800aba2:	4b70      	ldr	r3, [pc, #448]	; (800ad64 <MX_LWIP_Init+0x260>)
 800aba4:	785b      	ldrb	r3, [r3, #1]
 800aba6:	041b      	lsls	r3, r3, #16
 800aba8:	4319      	orrs	r1, r3
 800abaa:	4b6e      	ldr	r3, [pc, #440]	; (800ad64 <MX_LWIP_Init+0x260>)
 800abac:	789b      	ldrb	r3, [r3, #2]
 800abae:	021b      	lsls	r3, r3, #8
 800abb0:	430b      	orrs	r3, r1
 800abb2:	496c      	ldr	r1, [pc, #432]	; (800ad64 <MX_LWIP_Init+0x260>)
 800abb4:	78c9      	ldrb	r1, [r1, #3]
 800abb6:	430b      	orrs	r3, r1
 800abb8:	0a1b      	lsrs	r3, r3, #8
 800abba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800abbe:	431a      	orrs	r2, r3
 800abc0:	4b68      	ldr	r3, [pc, #416]	; (800ad64 <MX_LWIP_Init+0x260>)
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	0619      	lsls	r1, r3, #24
 800abc6:	4b67      	ldr	r3, [pc, #412]	; (800ad64 <MX_LWIP_Init+0x260>)
 800abc8:	785b      	ldrb	r3, [r3, #1]
 800abca:	041b      	lsls	r3, r3, #16
 800abcc:	4319      	orrs	r1, r3
 800abce:	4b65      	ldr	r3, [pc, #404]	; (800ad64 <MX_LWIP_Init+0x260>)
 800abd0:	789b      	ldrb	r3, [r3, #2]
 800abd2:	021b      	lsls	r3, r3, #8
 800abd4:	430b      	orrs	r3, r1
 800abd6:	4963      	ldr	r1, [pc, #396]	; (800ad64 <MX_LWIP_Init+0x260>)
 800abd8:	78c9      	ldrb	r1, [r1, #3]
 800abda:	430b      	orrs	r3, r1
 800abdc:	0e1b      	lsrs	r3, r3, #24
 800abde:	4313      	orrs	r3, r2
 800abe0:	4a63      	ldr	r2, [pc, #396]	; (800ad70 <MX_LWIP_Init+0x26c>)
 800abe2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800abe4:	4b60      	ldr	r3, [pc, #384]	; (800ad68 <MX_LWIP_Init+0x264>)
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	061a      	lsls	r2, r3, #24
 800abea:	4b5f      	ldr	r3, [pc, #380]	; (800ad68 <MX_LWIP_Init+0x264>)
 800abec:	785b      	ldrb	r3, [r3, #1]
 800abee:	041b      	lsls	r3, r3, #16
 800abf0:	431a      	orrs	r2, r3
 800abf2:	4b5d      	ldr	r3, [pc, #372]	; (800ad68 <MX_LWIP_Init+0x264>)
 800abf4:	789b      	ldrb	r3, [r3, #2]
 800abf6:	021b      	lsls	r3, r3, #8
 800abf8:	4313      	orrs	r3, r2
 800abfa:	4a5b      	ldr	r2, [pc, #364]	; (800ad68 <MX_LWIP_Init+0x264>)
 800abfc:	78d2      	ldrb	r2, [r2, #3]
 800abfe:	4313      	orrs	r3, r2
 800ac00:	061a      	lsls	r2, r3, #24
 800ac02:	4b59      	ldr	r3, [pc, #356]	; (800ad68 <MX_LWIP_Init+0x264>)
 800ac04:	781b      	ldrb	r3, [r3, #0]
 800ac06:	0619      	lsls	r1, r3, #24
 800ac08:	4b57      	ldr	r3, [pc, #348]	; (800ad68 <MX_LWIP_Init+0x264>)
 800ac0a:	785b      	ldrb	r3, [r3, #1]
 800ac0c:	041b      	lsls	r3, r3, #16
 800ac0e:	4319      	orrs	r1, r3
 800ac10:	4b55      	ldr	r3, [pc, #340]	; (800ad68 <MX_LWIP_Init+0x264>)
 800ac12:	789b      	ldrb	r3, [r3, #2]
 800ac14:	021b      	lsls	r3, r3, #8
 800ac16:	430b      	orrs	r3, r1
 800ac18:	4953      	ldr	r1, [pc, #332]	; (800ad68 <MX_LWIP_Init+0x264>)
 800ac1a:	78c9      	ldrb	r1, [r1, #3]
 800ac1c:	430b      	orrs	r3, r1
 800ac1e:	021b      	lsls	r3, r3, #8
 800ac20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ac24:	431a      	orrs	r2, r3
 800ac26:	4b50      	ldr	r3, [pc, #320]	; (800ad68 <MX_LWIP_Init+0x264>)
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	0619      	lsls	r1, r3, #24
 800ac2c:	4b4e      	ldr	r3, [pc, #312]	; (800ad68 <MX_LWIP_Init+0x264>)
 800ac2e:	785b      	ldrb	r3, [r3, #1]
 800ac30:	041b      	lsls	r3, r3, #16
 800ac32:	4319      	orrs	r1, r3
 800ac34:	4b4c      	ldr	r3, [pc, #304]	; (800ad68 <MX_LWIP_Init+0x264>)
 800ac36:	789b      	ldrb	r3, [r3, #2]
 800ac38:	021b      	lsls	r3, r3, #8
 800ac3a:	430b      	orrs	r3, r1
 800ac3c:	494a      	ldr	r1, [pc, #296]	; (800ad68 <MX_LWIP_Init+0x264>)
 800ac3e:	78c9      	ldrb	r1, [r1, #3]
 800ac40:	430b      	orrs	r3, r1
 800ac42:	0a1b      	lsrs	r3, r3, #8
 800ac44:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ac48:	431a      	orrs	r2, r3
 800ac4a:	4b47      	ldr	r3, [pc, #284]	; (800ad68 <MX_LWIP_Init+0x264>)
 800ac4c:	781b      	ldrb	r3, [r3, #0]
 800ac4e:	0619      	lsls	r1, r3, #24
 800ac50:	4b45      	ldr	r3, [pc, #276]	; (800ad68 <MX_LWIP_Init+0x264>)
 800ac52:	785b      	ldrb	r3, [r3, #1]
 800ac54:	041b      	lsls	r3, r3, #16
 800ac56:	4319      	orrs	r1, r3
 800ac58:	4b43      	ldr	r3, [pc, #268]	; (800ad68 <MX_LWIP_Init+0x264>)
 800ac5a:	789b      	ldrb	r3, [r3, #2]
 800ac5c:	021b      	lsls	r3, r3, #8
 800ac5e:	430b      	orrs	r3, r1
 800ac60:	4941      	ldr	r1, [pc, #260]	; (800ad68 <MX_LWIP_Init+0x264>)
 800ac62:	78c9      	ldrb	r1, [r1, #3]
 800ac64:	430b      	orrs	r3, r1
 800ac66:	0e1b      	lsrs	r3, r3, #24
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	4a42      	ldr	r2, [pc, #264]	; (800ad74 <MX_LWIP_Init+0x270>)
 800ac6c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800ac6e:	4b3f      	ldr	r3, [pc, #252]	; (800ad6c <MX_LWIP_Init+0x268>)
 800ac70:	781b      	ldrb	r3, [r3, #0]
 800ac72:	061a      	lsls	r2, r3, #24
 800ac74:	4b3d      	ldr	r3, [pc, #244]	; (800ad6c <MX_LWIP_Init+0x268>)
 800ac76:	785b      	ldrb	r3, [r3, #1]
 800ac78:	041b      	lsls	r3, r3, #16
 800ac7a:	431a      	orrs	r2, r3
 800ac7c:	4b3b      	ldr	r3, [pc, #236]	; (800ad6c <MX_LWIP_Init+0x268>)
 800ac7e:	789b      	ldrb	r3, [r3, #2]
 800ac80:	021b      	lsls	r3, r3, #8
 800ac82:	4313      	orrs	r3, r2
 800ac84:	4a39      	ldr	r2, [pc, #228]	; (800ad6c <MX_LWIP_Init+0x268>)
 800ac86:	78d2      	ldrb	r2, [r2, #3]
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	061a      	lsls	r2, r3, #24
 800ac8c:	4b37      	ldr	r3, [pc, #220]	; (800ad6c <MX_LWIP_Init+0x268>)
 800ac8e:	781b      	ldrb	r3, [r3, #0]
 800ac90:	0619      	lsls	r1, r3, #24
 800ac92:	4b36      	ldr	r3, [pc, #216]	; (800ad6c <MX_LWIP_Init+0x268>)
 800ac94:	785b      	ldrb	r3, [r3, #1]
 800ac96:	041b      	lsls	r3, r3, #16
 800ac98:	4319      	orrs	r1, r3
 800ac9a:	4b34      	ldr	r3, [pc, #208]	; (800ad6c <MX_LWIP_Init+0x268>)
 800ac9c:	789b      	ldrb	r3, [r3, #2]
 800ac9e:	021b      	lsls	r3, r3, #8
 800aca0:	430b      	orrs	r3, r1
 800aca2:	4932      	ldr	r1, [pc, #200]	; (800ad6c <MX_LWIP_Init+0x268>)
 800aca4:	78c9      	ldrb	r1, [r1, #3]
 800aca6:	430b      	orrs	r3, r1
 800aca8:	021b      	lsls	r3, r3, #8
 800acaa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800acae:	431a      	orrs	r2, r3
 800acb0:	4b2e      	ldr	r3, [pc, #184]	; (800ad6c <MX_LWIP_Init+0x268>)
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	0619      	lsls	r1, r3, #24
 800acb6:	4b2d      	ldr	r3, [pc, #180]	; (800ad6c <MX_LWIP_Init+0x268>)
 800acb8:	785b      	ldrb	r3, [r3, #1]
 800acba:	041b      	lsls	r3, r3, #16
 800acbc:	4319      	orrs	r1, r3
 800acbe:	4b2b      	ldr	r3, [pc, #172]	; (800ad6c <MX_LWIP_Init+0x268>)
 800acc0:	789b      	ldrb	r3, [r3, #2]
 800acc2:	021b      	lsls	r3, r3, #8
 800acc4:	430b      	orrs	r3, r1
 800acc6:	4929      	ldr	r1, [pc, #164]	; (800ad6c <MX_LWIP_Init+0x268>)
 800acc8:	78c9      	ldrb	r1, [r1, #3]
 800acca:	430b      	orrs	r3, r1
 800accc:	0a1b      	lsrs	r3, r3, #8
 800acce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800acd2:	431a      	orrs	r2, r3
 800acd4:	4b25      	ldr	r3, [pc, #148]	; (800ad6c <MX_LWIP_Init+0x268>)
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	0619      	lsls	r1, r3, #24
 800acda:	4b24      	ldr	r3, [pc, #144]	; (800ad6c <MX_LWIP_Init+0x268>)
 800acdc:	785b      	ldrb	r3, [r3, #1]
 800acde:	041b      	lsls	r3, r3, #16
 800ace0:	4319      	orrs	r1, r3
 800ace2:	4b22      	ldr	r3, [pc, #136]	; (800ad6c <MX_LWIP_Init+0x268>)
 800ace4:	789b      	ldrb	r3, [r3, #2]
 800ace6:	021b      	lsls	r3, r3, #8
 800ace8:	430b      	orrs	r3, r1
 800acea:	4920      	ldr	r1, [pc, #128]	; (800ad6c <MX_LWIP_Init+0x268>)
 800acec:	78c9      	ldrb	r1, [r1, #3]
 800acee:	430b      	orrs	r3, r1
 800acf0:	0e1b      	lsrs	r3, r3, #24
 800acf2:	4313      	orrs	r3, r2
 800acf4:	4a20      	ldr	r2, [pc, #128]	; (800ad78 <MX_LWIP_Init+0x274>)
 800acf6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800acf8:	4b20      	ldr	r3, [pc, #128]	; (800ad7c <MX_LWIP_Init+0x278>)
 800acfa:	9302      	str	r3, [sp, #8]
 800acfc:	4b20      	ldr	r3, [pc, #128]	; (800ad80 <MX_LWIP_Init+0x27c>)
 800acfe:	9301      	str	r3, [sp, #4]
 800ad00:	2300      	movs	r3, #0
 800ad02:	9300      	str	r3, [sp, #0]
 800ad04:	4b1c      	ldr	r3, [pc, #112]	; (800ad78 <MX_LWIP_Init+0x274>)
 800ad06:	4a1b      	ldr	r2, [pc, #108]	; (800ad74 <MX_LWIP_Init+0x270>)
 800ad08:	4919      	ldr	r1, [pc, #100]	; (800ad70 <MX_LWIP_Init+0x26c>)
 800ad0a:	481e      	ldr	r0, [pc, #120]	; (800ad84 <MX_LWIP_Init+0x280>)
 800ad0c:	f004 fbc8 	bl	800f4a0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800ad10:	481c      	ldr	r0, [pc, #112]	; (800ad84 <MX_LWIP_Init+0x280>)
 800ad12:	f004 fd77 	bl	800f804 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800ad16:	4b1b      	ldr	r3, [pc, #108]	; (800ad84 <MX_LWIP_Init+0x280>)
 800ad18:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ad1c:	089b      	lsrs	r3, r3, #2
 800ad1e:	f003 0301 	and.w	r3, r3, #1
 800ad22:	b2db      	uxtb	r3, r3
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d003      	beq.n	800ad30 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800ad28:	4816      	ldr	r0, [pc, #88]	; (800ad84 <MX_LWIP_Init+0x280>)
 800ad2a:	f004 fd7b 	bl	800f824 <netif_set_up>
 800ad2e:	e002      	b.n	800ad36 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800ad30:	4814      	ldr	r0, [pc, #80]	; (800ad84 <MX_LWIP_Init+0x280>)
 800ad32:	f004 fde3 	bl	800f8fc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800ad36:	4914      	ldr	r1, [pc, #80]	; (800ad88 <MX_LWIP_Init+0x284>)
 800ad38:	4812      	ldr	r0, [pc, #72]	; (800ad84 <MX_LWIP_Init+0x280>)
 800ad3a:	f004 fe75 	bl	800fa28 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800ad3e:	4b13      	ldr	r3, [pc, #76]	; (800ad8c <MX_LWIP_Init+0x288>)
 800ad40:	1d3c      	adds	r4, r7, #4
 800ad42:	461d      	mov	r5, r3
 800ad44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ad46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ad48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ad4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800ad50:	1d3b      	adds	r3, r7, #4
 800ad52:	490c      	ldr	r1, [pc, #48]	; (800ad84 <MX_LWIP_Init+0x280>)
 800ad54:	4618      	mov	r0, r3
 800ad56:	f000 fcd8 	bl	800b70a <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800ad5a:	bf00      	nop
 800ad5c:	3720      	adds	r7, #32
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bdb0      	pop	{r4, r5, r7, pc}
 800ad62:	bf00      	nop
 800ad64:	240045ec 	.word	0x240045ec
 800ad68:	240045e8 	.word	0x240045e8
 800ad6c:	240045ac 	.word	0x240045ac
 800ad70:	240045e4 	.word	0x240045e4
 800ad74:	240045f0 	.word	0x240045f0
 800ad78:	240045f4 	.word	0x240045f4
 800ad7c:	0800e6d9 	.word	0x0800e6d9
 800ad80:	0800b455 	.word	0x0800b455
 800ad84:	240045b0 	.word	0x240045b0
 800ad88:	0800ad91 	.word	0x0800ad91
 800ad8c:	0801aa58 	.word	0x0801aa58

0800ad90 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800ad90:	b480      	push	{r7}
 800ad92:	b083      	sub	sp, #12
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800ad98:	bf00      	nop
 800ad9a:	370c      	adds	r7, #12
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr

0800ada4 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b08e      	sub	sp, #56	; 0x38
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800adac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800adb0:	2200      	movs	r2, #0
 800adb2:	601a      	str	r2, [r3, #0]
 800adb4:	605a      	str	r2, [r3, #4]
 800adb6:	609a      	str	r2, [r3, #8]
 800adb8:	60da      	str	r2, [r3, #12]
 800adba:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a5d      	ldr	r2, [pc, #372]	; (800af38 <HAL_ETH_MspInit+0x194>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	f040 80b3 	bne.w	800af2e <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800adc8:	4b5c      	ldr	r3, [pc, #368]	; (800af3c <HAL_ETH_MspInit+0x198>)
 800adca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800adce:	4a5b      	ldr	r2, [pc, #364]	; (800af3c <HAL_ETH_MspInit+0x198>)
 800add0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800add4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800add8:	4b58      	ldr	r3, [pc, #352]	; (800af3c <HAL_ETH_MspInit+0x198>)
 800adda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800adde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ade2:	623b      	str	r3, [r7, #32]
 800ade4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800ade6:	4b55      	ldr	r3, [pc, #340]	; (800af3c <HAL_ETH_MspInit+0x198>)
 800ade8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800adec:	4a53      	ldr	r2, [pc, #332]	; (800af3c <HAL_ETH_MspInit+0x198>)
 800adee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800adf2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800adf6:	4b51      	ldr	r3, [pc, #324]	; (800af3c <HAL_ETH_MspInit+0x198>)
 800adf8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800adfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae00:	61fb      	str	r3, [r7, #28]
 800ae02:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800ae04:	4b4d      	ldr	r3, [pc, #308]	; (800af3c <HAL_ETH_MspInit+0x198>)
 800ae06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ae0a:	4a4c      	ldr	r2, [pc, #304]	; (800af3c <HAL_ETH_MspInit+0x198>)
 800ae0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae10:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800ae14:	4b49      	ldr	r3, [pc, #292]	; (800af3c <HAL_ETH_MspInit+0x198>)
 800ae16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ae1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae1e:	61bb      	str	r3, [r7, #24]
 800ae20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ae22:	4b46      	ldr	r3, [pc, #280]	; (800af3c <HAL_ETH_MspInit+0x198>)
 800ae24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ae28:	4a44      	ldr	r2, [pc, #272]	; (800af3c <HAL_ETH_MspInit+0x198>)
 800ae2a:	f043 0304 	orr.w	r3, r3, #4
 800ae2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ae32:	4b42      	ldr	r3, [pc, #264]	; (800af3c <HAL_ETH_MspInit+0x198>)
 800ae34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ae38:	f003 0304 	and.w	r3, r3, #4
 800ae3c:	617b      	str	r3, [r7, #20]
 800ae3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae40:	4b3e      	ldr	r3, [pc, #248]	; (800af3c <HAL_ETH_MspInit+0x198>)
 800ae42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ae46:	4a3d      	ldr	r2, [pc, #244]	; (800af3c <HAL_ETH_MspInit+0x198>)
 800ae48:	f043 0301 	orr.w	r3, r3, #1
 800ae4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ae50:	4b3a      	ldr	r3, [pc, #232]	; (800af3c <HAL_ETH_MspInit+0x198>)
 800ae52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ae56:	f003 0301 	and.w	r3, r3, #1
 800ae5a:	613b      	str	r3, [r7, #16]
 800ae5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ae5e:	4b37      	ldr	r3, [pc, #220]	; (800af3c <HAL_ETH_MspInit+0x198>)
 800ae60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ae64:	4a35      	ldr	r2, [pc, #212]	; (800af3c <HAL_ETH_MspInit+0x198>)
 800ae66:	f043 0302 	orr.w	r3, r3, #2
 800ae6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ae6e:	4b33      	ldr	r3, [pc, #204]	; (800af3c <HAL_ETH_MspInit+0x198>)
 800ae70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ae74:	f003 0302 	and.w	r3, r3, #2
 800ae78:	60fb      	str	r3, [r7, #12]
 800ae7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800ae7c:	4b2f      	ldr	r3, [pc, #188]	; (800af3c <HAL_ETH_MspInit+0x198>)
 800ae7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ae82:	4a2e      	ldr	r2, [pc, #184]	; (800af3c <HAL_ETH_MspInit+0x198>)
 800ae84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ae8c:	4b2b      	ldr	r3, [pc, #172]	; (800af3c <HAL_ETH_MspInit+0x198>)
 800ae8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ae92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae96:	60bb      	str	r3, [r7, #8]
 800ae98:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800ae9a:	2332      	movs	r3, #50	; 0x32
 800ae9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae9e:	2302      	movs	r3, #2
 800aea0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aea2:	2300      	movs	r3, #0
 800aea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aea6:	2300      	movs	r3, #0
 800aea8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800aeaa:	230b      	movs	r3, #11
 800aeac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aeae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	4822      	ldr	r0, [pc, #136]	; (800af40 <HAL_ETH_MspInit+0x19c>)
 800aeb6:	f7fa ff7f 	bl	8005db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800aeba:	2386      	movs	r3, #134	; 0x86
 800aebc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aebe:	2302      	movs	r3, #2
 800aec0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aec2:	2300      	movs	r3, #0
 800aec4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aec6:	2300      	movs	r3, #0
 800aec8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800aeca:	230b      	movs	r3, #11
 800aecc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aed2:	4619      	mov	r1, r3
 800aed4:	481b      	ldr	r0, [pc, #108]	; (800af44 <HAL_ETH_MspInit+0x1a0>)
 800aed6:	f7fa ff6f 	bl	8005db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800aeda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aede:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aee0:	2302      	movs	r3, #2
 800aee2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aee4:	2300      	movs	r3, #0
 800aee6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aee8:	2300      	movs	r3, #0
 800aeea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800aeec:	230b      	movs	r3, #11
 800aeee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800aef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aef4:	4619      	mov	r1, r3
 800aef6:	4814      	ldr	r0, [pc, #80]	; (800af48 <HAL_ETH_MspInit+0x1a4>)
 800aef8:	f7fa ff5e 	bl	8005db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800aefc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800af00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af02:	2302      	movs	r3, #2
 800af04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af06:	2300      	movs	r3, #0
 800af08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800af0a:	2300      	movs	r3, #0
 800af0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800af0e:	230b      	movs	r3, #11
 800af10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800af12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af16:	4619      	mov	r1, r3
 800af18:	480c      	ldr	r0, [pc, #48]	; (800af4c <HAL_ETH_MspInit+0x1a8>)
 800af1a:	f7fa ff4d 	bl	8005db8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800af1e:	2200      	movs	r2, #0
 800af20:	2105      	movs	r1, #5
 800af22:	203d      	movs	r0, #61	; 0x3d
 800af24:	f7f7 fdaa 	bl	8002a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800af28:	203d      	movs	r0, #61	; 0x3d
 800af2a:	f7f7 fdc1 	bl	8002ab0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800af2e:	bf00      	nop
 800af30:	3738      	adds	r7, #56	; 0x38
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	40028000 	.word	0x40028000
 800af3c:	58024400 	.word	0x58024400
 800af40:	58020800 	.word	0x58020800
 800af44:	58020000 	.word	0x58020000
 800af48:	58020400 	.word	0x58020400
 800af4c:	58021800 	.word	0x58021800

0800af50 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b082      	sub	sp, #8
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800af58:	4b04      	ldr	r3, [pc, #16]	; (800af6c <HAL_ETH_RxCpltCallback+0x1c>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4618      	mov	r0, r3
 800af5e:	f000 fd51 	bl	800ba04 <osSemaphoreRelease>
}
 800af62:	bf00      	nop
 800af64:	3708      	adds	r7, #8
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	bf00      	nop
 800af6c:	24000374 	.word	0x24000374

0800af70 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800af70:	b5b0      	push	{r4, r5, r7, lr}
 800af72:	b0ac      	sub	sp, #176	; 0xb0
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800af78:	2300      	movs	r3, #0
 800af7a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  uint32_t idx = 0;
 800af7e:	2300      	movs	r3, #0
 800af80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 800af84:	2300      	movs	r3, #0
 800af86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800af8a:	4b91      	ldr	r3, [pc, #580]	; (800b1d0 <low_level_init+0x260>)
 800af8c:	4a91      	ldr	r2, [pc, #580]	; (800b1d4 <low_level_init+0x264>)
 800af8e:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800af90:	2300      	movs	r3, #0
 800af92:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800af96:	2380      	movs	r3, #128	; 0x80
 800af98:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800af9c:	23e1      	movs	r3, #225	; 0xe1
 800af9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800afa2:	2300      	movs	r3, #0
 800afa4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800afa8:	2300      	movs	r3, #0
 800afaa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800afae:	2300      	movs	r3, #0
 800afb0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800afb4:	4a86      	ldr	r2, [pc, #536]	; (800b1d0 <low_level_init+0x260>)
 800afb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800afba:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800afbc:	4b84      	ldr	r3, [pc, #528]	; (800b1d0 <low_level_init+0x260>)
 800afbe:	2201      	movs	r2, #1
 800afc0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800afc2:	4b83      	ldr	r3, [pc, #524]	; (800b1d0 <low_level_init+0x260>)
 800afc4:	4a84      	ldr	r2, [pc, #528]	; (800b1d8 <low_level_init+0x268>)
 800afc6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800afc8:	4b81      	ldr	r3, [pc, #516]	; (800b1d0 <low_level_init+0x260>)
 800afca:	4a84      	ldr	r2, [pc, #528]	; (800b1dc <low_level_init+0x26c>)
 800afcc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800afce:	4b80      	ldr	r3, [pc, #512]	; (800b1d0 <low_level_init+0x260>)
 800afd0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800afd4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800afd6:	487e      	ldr	r0, [pc, #504]	; (800b1d0 <low_level_init+0x260>)
 800afd8:	f7f7 fdf4 	bl	8002bc4 <HAL_ETH_Init>
 800afdc:	4603      	mov	r3, r0
 800afde:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800afe2:	2234      	movs	r2, #52	; 0x34
 800afe4:	2100      	movs	r1, #0
 800afe6:	487e      	ldr	r0, [pc, #504]	; (800b1e0 <low_level_init+0x270>)
 800afe8:	f00e fcc1 	bl	801996e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800afec:	4b7c      	ldr	r3, [pc, #496]	; (800b1e0 <low_level_init+0x270>)
 800afee:	2221      	movs	r2, #33	; 0x21
 800aff0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800aff2:	4b7b      	ldr	r3, [pc, #492]	; (800b1e0 <low_level_init+0x270>)
 800aff4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800aff8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800affa:	4b79      	ldr	r3, [pc, #484]	; (800b1e0 <low_level_init+0x270>)
 800affc:	2200      	movs	r2, #0
 800affe:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800b000:	4878      	ldr	r0, [pc, #480]	; (800b1e4 <low_level_init+0x274>)
 800b002:	f004 f907 	bl	800f214 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2206      	movs	r2, #6
 800b00a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800b00e:	4b70      	ldr	r3, [pc, #448]	; (800b1d0 <low_level_init+0x260>)
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	781a      	ldrb	r2, [r3, #0]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800b01a:	4b6d      	ldr	r3, [pc, #436]	; (800b1d0 <low_level_init+0x260>)
 800b01c:	685b      	ldr	r3, [r3, #4]
 800b01e:	785a      	ldrb	r2, [r3, #1]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800b026:	4b6a      	ldr	r3, [pc, #424]	; (800b1d0 <low_level_init+0x260>)
 800b028:	685b      	ldr	r3, [r3, #4]
 800b02a:	789a      	ldrb	r2, [r3, #2]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b032:	4b67      	ldr	r3, [pc, #412]	; (800b1d0 <low_level_init+0x260>)
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	78da      	ldrb	r2, [r3, #3]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800b03e:	4b64      	ldr	r3, [pc, #400]	; (800b1d0 <low_level_init+0x260>)
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	791a      	ldrb	r2, [r3, #4]
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800b04a:	4b61      	ldr	r3, [pc, #388]	; (800b1d0 <low_level_init+0x260>)
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	795a      	ldrb	r2, [r3, #5]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b05c:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b064:	f043 030a 	orr.w	r3, r3, #10
 800b068:	b2da      	uxtb	r2, r3
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800b070:	2300      	movs	r3, #0
 800b072:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b076:	e012      	b.n	800b09e <low_level_init+0x12e>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800b078:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b07c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b080:	fb02 f303 	mul.w	r3, r2, r3
 800b084:	4a58      	ldr	r2, [pc, #352]	; (800b1e8 <low_level_init+0x278>)
 800b086:	441a      	add	r2, r3
 800b088:	2300      	movs	r3, #0
 800b08a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800b08e:	4850      	ldr	r0, [pc, #320]	; (800b1d0 <low_level_init+0x260>)
 800b090:	f7f7 fe72 	bl	8002d78 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800b094:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b098:	3301      	adds	r3, #1
 800b09a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b09e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b0a2:	2b03      	cmp	r3, #3
 800b0a4:	d9e8      	bls.n	800b078 <low_level_init+0x108>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800b0ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b0b2:	2101      	movs	r1, #1
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f000 fc25 	bl	800b904 <osSemaphoreCreate>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	4a4b      	ldr	r2, [pc, #300]	; (800b1ec <low_level_init+0x27c>)
 800b0be:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800b0c0:	4b4b      	ldr	r3, [pc, #300]	; (800b1f0 <low_level_init+0x280>)
 800b0c2:	f107 040c 	add.w	r4, r7, #12
 800b0c6:	461d      	mov	r5, r3
 800b0c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b0ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b0cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b0d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800b0d4:	f107 030c 	add.w	r3, r7, #12
 800b0d8:	6879      	ldr	r1, [r7, #4]
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f000 fb15 	bl	800b70a <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800b0e0:	4944      	ldr	r1, [pc, #272]	; (800b1f4 <low_level_init+0x284>)
 800b0e2:	4845      	ldr	r0, [pc, #276]	; (800b1f8 <low_level_init+0x288>)
 800b0e4:	f7f7 fa1d 	bl	8002522 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800b0e8:	4843      	ldr	r0, [pc, #268]	; (800b1f8 <low_level_init+0x288>)
 800b0ea:	f7f7 fa4c 	bl	8002586 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800b0ee:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d165      	bne.n	800b1c2 <low_level_init+0x252>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b0f6:	4840      	ldr	r0, [pc, #256]	; (800b1f8 <low_level_init+0x288>)
 800b0f8:	f7f7 faed 	bl	80026d6 <LAN8742_GetLinkState>
 800b0fc:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800b100:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b104:	2b01      	cmp	r3, #1
 800b106:	dc06      	bgt.n	800b116 <low_level_init+0x1a6>
    {
      netif_set_link_down(netif);
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f004 fc5d 	bl	800f9c8 <netif_set_link_down>
      netif_set_down(netif);
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f004 fbf4 	bl	800f8fc <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800b114:	e057      	b.n	800b1c6 <low_level_init+0x256>
 800b116:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b11a:	3b02      	subs	r3, #2
 800b11c:	2b03      	cmp	r3, #3
 800b11e:	d82b      	bhi.n	800b178 <low_level_init+0x208>
 800b120:	a201      	add	r2, pc, #4	; (adr r2, 800b128 <low_level_init+0x1b8>)
 800b122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b126:	bf00      	nop
 800b128:	0800b139 	.word	0x0800b139
 800b12c:	0800b14b 	.word	0x0800b14b
 800b130:	0800b15b 	.word	0x0800b15b
 800b134:	0800b16b 	.word	0x0800b16b
        duplex = ETH_FULLDUPLEX_MODE;
 800b138:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b13c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800b140:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b144:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800b148:	e01f      	b.n	800b18a <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 800b14a:	2300      	movs	r3, #0
 800b14c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800b150:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b154:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800b158:	e017      	b.n	800b18a <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 800b15a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b15e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800b162:	2300      	movs	r3, #0
 800b164:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800b168:	e00f      	b.n	800b18a <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 800b16a:	2300      	movs	r3, #0
 800b16c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800b170:	2300      	movs	r3, #0
 800b172:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800b176:	e008      	b.n	800b18a <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 800b178:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b17c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800b180:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b184:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800b188:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b18a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b18e:	4619      	mov	r1, r3
 800b190:	480f      	ldr	r0, [pc, #60]	; (800b1d0 <low_level_init+0x260>)
 800b192:	f7f8 fbc3 	bl	800391c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800b196:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b19a:	653b      	str	r3, [r7, #80]	; 0x50
    MACConf.Speed = speed;
 800b19c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b1a0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b1a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b1a6:	4619      	mov	r1, r3
 800b1a8:	4809      	ldr	r0, [pc, #36]	; (800b1d0 <low_level_init+0x260>)
 800b1aa:	f7f8 fd8b 	bl	8003cc4 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800b1ae:	4808      	ldr	r0, [pc, #32]	; (800b1d0 <low_level_init+0x260>)
 800b1b0:	f7f7 fe23 	bl	8002dfa <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f004 fb35 	bl	800f824 <netif_set_up>
    netif_set_link_up(netif);
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f004 fbd0 	bl	800f960 <netif_set_link_up>
}
 800b1c0:	e001      	b.n	800b1c6 <low_level_init+0x256>
    Error_Handler();
 800b1c2:	f7f6 fb15 	bl	80017f0 <Error_Handler>
}
 800b1c6:	bf00      	nop
 800b1c8:	37b0      	adds	r7, #176	; 0xb0
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bdb0      	pop	{r4, r5, r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	240046e4 	.word	0x240046e4
 800b1d4:	40028000 	.word	0x40028000
 800b1d8:	30000080 	.word	0x30000080
 800b1dc:	30000000 	.word	0x30000000
 800b1e0:	2400476c 	.word	0x2400476c
 800b1e4:	0801dda4 	.word	0x0801dda4
 800b1e8:	30000100 	.word	0x30000100
 800b1ec:	24000374 	.word	0x24000374
 800b1f0:	0801aa7c 	.word	0x0801aa7c
 800b1f4:	24000018 	.word	0x24000018
 800b1f8:	240046c4 	.word	0x240046c4

0800b1fc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b092      	sub	sp, #72	; 0x48
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 800b206:	2300      	movs	r3, #0
 800b208:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 800b20a:	2300      	movs	r3, #0
 800b20c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800b210:	f107 030c 	add.w	r3, r7, #12
 800b214:	2230      	movs	r2, #48	; 0x30
 800b216:	2100      	movs	r1, #0
 800b218:	4618      	mov	r0, r3
 800b21a:	f00e fba8 	bl	801996e <memset>

  for(q = p; q != NULL; q = q->next)
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	643b      	str	r3, [r7, #64]	; 0x40
 800b222:	e049      	b.n	800b2b8 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 800b224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b226:	2b03      	cmp	r3, #3
 800b228:	d902      	bls.n	800b230 <low_level_output+0x34>
      return ERR_IF;
 800b22a:	f06f 030b 	mvn.w	r3, #11
 800b22e:	e056      	b.n	800b2de <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 800b230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b232:	6859      	ldr	r1, [r3, #4]
 800b234:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b236:	4613      	mov	r3, r2
 800b238:	005b      	lsls	r3, r3, #1
 800b23a:	4413      	add	r3, r2
 800b23c:	009b      	lsls	r3, r3, #2
 800b23e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b242:	4413      	add	r3, r2
 800b244:	3b3c      	subs	r3, #60	; 0x3c
 800b246:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800b248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b24a:	895b      	ldrh	r3, [r3, #10]
 800b24c:	4619      	mov	r1, r3
 800b24e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b250:	4613      	mov	r3, r2
 800b252:	005b      	lsls	r3, r3, #1
 800b254:	4413      	add	r3, r2
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b25c:	4413      	add	r3, r2
 800b25e:	3b38      	subs	r3, #56	; 0x38
 800b260:	6019      	str	r1, [r3, #0]

    if(i>0)
 800b262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b264:	2b00      	cmp	r3, #0
 800b266:	d012      	beq.n	800b28e <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800b268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b26a:	1e5a      	subs	r2, r3, #1
 800b26c:	f107 000c 	add.w	r0, r7, #12
 800b270:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b272:	460b      	mov	r3, r1
 800b274:	005b      	lsls	r3, r3, #1
 800b276:	440b      	add	r3, r1
 800b278:	009b      	lsls	r3, r3, #2
 800b27a:	18c1      	adds	r1, r0, r3
 800b27c:	4613      	mov	r3, r2
 800b27e:	005b      	lsls	r3, r3, #1
 800b280:	4413      	add	r3, r2
 800b282:	009b      	lsls	r3, r3, #2
 800b284:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b288:	4413      	add	r3, r2
 800b28a:	3b34      	subs	r3, #52	; 0x34
 800b28c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800b28e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d10a      	bne.n	800b2ac <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 800b296:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b298:	4613      	mov	r3, r2
 800b29a:	005b      	lsls	r3, r3, #1
 800b29c:	4413      	add	r3, r2
 800b29e:	009b      	lsls	r3, r3, #2
 800b2a0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b2a4:	4413      	add	r3, r2
 800b2a6:	3b34      	subs	r3, #52	; 0x34
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	601a      	str	r2, [r3, #0]
    }

    i++;
 800b2ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800b2b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	643b      	str	r3, [r7, #64]	; 0x40
 800b2b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d1b2      	bne.n	800b224 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	891b      	ldrh	r3, [r3, #8]
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	4b08      	ldr	r3, [pc, #32]	; (800b2e8 <low_level_output+0xec>)
 800b2c6:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800b2c8:	4a07      	ldr	r2, [pc, #28]	; (800b2e8 <low_level_output+0xec>)
 800b2ca:	f107 030c 	add.w	r3, r7, #12
 800b2ce:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800b2d0:	2214      	movs	r2, #20
 800b2d2:	4905      	ldr	r1, [pc, #20]	; (800b2e8 <low_level_output+0xec>)
 800b2d4:	4805      	ldr	r0, [pc, #20]	; (800b2ec <low_level_output+0xf0>)
 800b2d6:	f7f7 fe8f 	bl	8002ff8 <HAL_ETH_Transmit>

  return errval;
 800b2da:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3748      	adds	r7, #72	; 0x48
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
 800b2e6:	bf00      	nop
 800b2e8:	2400476c 	.word	0x2400476c
 800b2ec:	240046e4 	.word	0x240046e4

0800b2f0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b098      	sub	sp, #96	; 0x60
 800b2f4:	af02      	add	r7, sp, #8
 800b2f6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	657b      	str	r3, [r7, #84]	; 0x54
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	60bb      	str	r3, [r7, #8]
 800b300:	2300      	movs	r3, #0
 800b302:	653b      	str	r3, [r7, #80]	; 0x50
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800b304:	f107 030c 	add.w	r3, r7, #12
 800b308:	2230      	movs	r2, #48	; 0x30
 800b30a:	2100      	movs	r1, #0
 800b30c:	4618      	mov	r0, r3
 800b30e:	f00e fb2e 	bl	801996e <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800b312:	2300      	movs	r3, #0
 800b314:	653b      	str	r3, [r7, #80]	; 0x50
 800b316:	e015      	b.n	800b344 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 800b318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b31a:	1c5a      	adds	r2, r3, #1
 800b31c:	f107 010c 	add.w	r1, r7, #12
 800b320:	4613      	mov	r3, r2
 800b322:	005b      	lsls	r3, r3, #1
 800b324:	4413      	add	r3, r2
 800b326:	009b      	lsls	r3, r3, #2
 800b328:	4419      	add	r1, r3
 800b32a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b32c:	4613      	mov	r3, r2
 800b32e:	005b      	lsls	r3, r3, #1
 800b330:	4413      	add	r3, r2
 800b332:	009b      	lsls	r3, r3, #2
 800b334:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b338:	4413      	add	r3, r2
 800b33a:	3b44      	subs	r3, #68	; 0x44
 800b33c:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800b33e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b340:	3301      	adds	r3, #1
 800b342:	653b      	str	r3, [r7, #80]	; 0x50
 800b344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b346:	2b02      	cmp	r3, #2
 800b348:	d9e6      	bls.n	800b318 <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 800b34a:	f107 030c 	add.w	r3, r7, #12
 800b34e:	4619      	mov	r1, r3
 800b350:	4828      	ldr	r0, [pc, #160]	; (800b3f4 <low_level_input+0x104>)
 800b352:	f7f7 ffca 	bl	80032ea <HAL_ETH_GetRxDataBuffer>
 800b356:	4603      	mov	r3, r0
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d145      	bne.n	800b3e8 <low_level_input+0xf8>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 800b35c:	f107 0308 	add.w	r3, r7, #8
 800b360:	4619      	mov	r1, r3
 800b362:	4824      	ldr	r0, [pc, #144]	; (800b3f4 <low_level_input+0x104>)
 800b364:	f7f8 f85f 	bl	8003426 <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 800b368:	4822      	ldr	r0, [pc, #136]	; (800b3f4 <low_level_input+0x104>)
 800b36a:	f7f8 f88f 	bl	800348c <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	68ba      	ldr	r2, [r7, #8]
 800b372:	64bb      	str	r3, [r7, #72]	; 0x48
 800b374:	647a      	str	r2, [r7, #68]	; 0x44
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800b376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b378:	2b00      	cmp	r3, #0
 800b37a:	dd1d      	ble.n	800b3b8 <low_level_input+0xc8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800b37c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b37e:	f003 021f 	and.w	r2, r3, #31
 800b382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b384:	4413      	add	r3, r2
 800b386:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800b388:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b38a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 800b38c:	f3bf 8f4f 	dsb	sy
}
 800b390:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800b392:	4a19      	ldr	r2, [pc, #100]	; (800b3f8 <low_level_input+0x108>)
 800b394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b396:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800b39a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b39c:	3320      	adds	r3, #32
 800b39e:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800b3a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3a2:	3b20      	subs	r3, #32
 800b3a4:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 800b3a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	dcf2      	bgt.n	800b392 <low_level_input+0xa2>
  __ASM volatile ("dsb 0xF":::"memory");
 800b3ac:	f3bf 8f4f 	dsb	sy
}
 800b3b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b3b2:	f3bf 8f6f 	isb	sy
}
 800b3b6:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800b3b8:	bf00      	nop
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800b3ba:	4810      	ldr	r0, [pc, #64]	; (800b3fc <low_level_input+0x10c>)
 800b3bc:	f003 ffa6 	bl	800f30c <memp_malloc_pool>
 800b3c0:	64f8      	str	r0, [r7, #76]	; 0x4c
    if(custom_pbuf != NULL)
 800b3c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d00f      	beq.n	800b3e8 <low_level_input+0xf8>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 800b3c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3ca:	4a0d      	ldr	r2, [pc, #52]	; (800b400 <low_level_input+0x110>)
 800b3cc:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	b299      	uxth	r1, r3
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	68ba      	ldr	r2, [r7, #8]
 800b3d6:	b292      	uxth	r2, r2
 800b3d8:	9201      	str	r2, [sp, #4]
 800b3da:	9300      	str	r3, [sp, #0]
 800b3dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3de:	2241      	movs	r2, #65	; 0x41
 800b3e0:	2000      	movs	r0, #0
 800b3e2:	f004 fd15 	bl	800fe10 <pbuf_alloced_custom>
 800b3e6:	6578      	str	r0, [r7, #84]	; 0x54
    }
  }

  return p;
 800b3e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3758      	adds	r7, #88	; 0x58
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	240046e4 	.word	0x240046e4
 800b3f8:	e000ed00 	.word	0xe000ed00
 800b3fc:	0801dda4 	.word	0x0801dda4
 800b400:	0800b4b1 	.word	0x0800b4b1

0800b404 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800b410:	4b0f      	ldr	r3, [pc, #60]	; (800b450 <ethernetif_input+0x4c>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f04f 31ff 	mov.w	r1, #4294967295
 800b418:	4618      	mov	r0, r3
 800b41a:	f000 faa5 	bl	800b968 <osSemaphoreWait>
 800b41e:	4603      	mov	r3, r0
 800b420:	2b00      	cmp	r3, #0
 800b422:	d1f5      	bne.n	800b410 <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 800b424:	68f8      	ldr	r0, [r7, #12]
 800b426:	f7ff ff63 	bl	800b2f0 <low_level_input>
 800b42a:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d00a      	beq.n	800b448 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	691b      	ldr	r3, [r3, #16]
 800b436:	68f9      	ldr	r1, [r7, #12]
 800b438:	68b8      	ldr	r0, [r7, #8]
 800b43a:	4798      	blx	r3
 800b43c:	4603      	mov	r3, r0
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d002      	beq.n	800b448 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 800b442:	68b8      	ldr	r0, [r7, #8]
 800b444:	f004 fe9e 	bl	8010184 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d1ea      	bne.n	800b424 <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800b44e:	e7df      	b.n	800b410 <ethernetif_input+0xc>
 800b450:	24000374 	.word	0x24000374

0800b454 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b082      	sub	sp, #8
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d106      	bne.n	800b470 <ethernetif_init+0x1c>
 800b462:	4b0e      	ldr	r3, [pc, #56]	; (800b49c <ethernetif_init+0x48>)
 800b464:	f240 2249 	movw	r2, #585	; 0x249
 800b468:	490d      	ldr	r1, [pc, #52]	; (800b4a0 <ethernetif_init+0x4c>)
 800b46a:	480e      	ldr	r0, [pc, #56]	; (800b4a4 <ethernetif_init+0x50>)
 800b46c:	f00e fae2 	bl	8019a34 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2273      	movs	r2, #115	; 0x73
 800b474:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2274      	movs	r2, #116	; 0x74
 800b47c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	4a09      	ldr	r2, [pc, #36]	; (800b4a8 <ethernetif_init+0x54>)
 800b484:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	4a08      	ldr	r2, [pc, #32]	; (800b4ac <ethernetif_init+0x58>)
 800b48a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f7ff fd6f 	bl	800af70 <low_level_init>

  return ERR_OK;
 800b492:	2300      	movs	r3, #0
}
 800b494:	4618      	mov	r0, r3
 800b496:	3708      	adds	r7, #8
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}
 800b49c:	0801aa98 	.word	0x0801aa98
 800b4a0:	0801aab4 	.word	0x0801aab4
 800b4a4:	0801aac4 	.word	0x0801aac4
 800b4a8:	08017679 	.word	0x08017679
 800b4ac:	0800b1fd 	.word	0x0800b1fd

0800b4b0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b084      	sub	sp, #16
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800b4bc:	68f9      	ldr	r1, [r7, #12]
 800b4be:	4803      	ldr	r0, [pc, #12]	; (800b4cc <pbuf_free_custom+0x1c>)
 800b4c0:	f003 ff98 	bl	800f3f4 <memp_free_pool>
}
 800b4c4:	bf00      	nop
 800b4c6:	3710      	adds	r7, #16
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}
 800b4cc:	0801dda4 	.word	0x0801dda4

0800b4d0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b4d4:	f7f7 f9d6 	bl	8002884 <HAL_GetTick>
 800b4d8:	4603      	mov	r3, r0
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	bd80      	pop	{r7, pc}
	...

0800b4e0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800b4e4:	4802      	ldr	r0, [pc, #8]	; (800b4f0 <ETH_PHY_IO_Init+0x10>)
 800b4e6:	f7f8 fc07 	bl	8003cf8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800b4ea:	2300      	movs	r3, #0
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	bd80      	pop	{r7, pc}
 800b4f0:	240046e4 	.word	0x240046e4

0800b4f4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	af00      	add	r7, sp, #0
  return 0;
 800b4f8:	2300      	movs	r3, #0
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b502:	4770      	bx	lr

0800b504 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b084      	sub	sp, #16
 800b508:	af00      	add	r7, sp, #0
 800b50a:	60f8      	str	r0, [r7, #12]
 800b50c:	60b9      	str	r1, [r7, #8]
 800b50e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	68ba      	ldr	r2, [r7, #8]
 800b514:	68f9      	ldr	r1, [r7, #12]
 800b516:	4807      	ldr	r0, [pc, #28]	; (800b534 <ETH_PHY_IO_ReadReg+0x30>)
 800b518:	f7f8 f958 	bl	80037cc <HAL_ETH_ReadPHYRegister>
 800b51c:	4603      	mov	r3, r0
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d002      	beq.n	800b528 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800b522:	f04f 33ff 	mov.w	r3, #4294967295
 800b526:	e000      	b.n	800b52a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800b528:	2300      	movs	r3, #0
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3710      	adds	r7, #16
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}
 800b532:	bf00      	nop
 800b534:	240046e4 	.word	0x240046e4

0800b538 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	60f8      	str	r0, [r7, #12]
 800b540:	60b9      	str	r1, [r7, #8]
 800b542:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	68ba      	ldr	r2, [r7, #8]
 800b548:	68f9      	ldr	r1, [r7, #12]
 800b54a:	4807      	ldr	r0, [pc, #28]	; (800b568 <ETH_PHY_IO_WriteReg+0x30>)
 800b54c:	f7f8 f992 	bl	8003874 <HAL_ETH_WritePHYRegister>
 800b550:	4603      	mov	r3, r0
 800b552:	2b00      	cmp	r3, #0
 800b554:	d002      	beq.n	800b55c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800b556:	f04f 33ff 	mov.w	r3, #4294967295
 800b55a:	e000      	b.n	800b55e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800b55c:	2300      	movs	r3, #0
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3710      	adds	r7, #16
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop
 800b568:	240046e4 	.word	0x240046e4

0800b56c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b570:	f7f7 f988 	bl	8002884 <HAL_GetTick>
 800b574:	4603      	mov	r3, r0
}
 800b576:	4618      	mov	r0, r3
 800b578:	bd80      	pop	{r7, pc}
	...

0800b57c <ethernet_link_thread>:
  * @param  argument: netif
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b0a0      	sub	sp, #128	; 0x80
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 800b584:	2300      	movs	r3, #0
 800b586:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b588:	2300      	movs	r3, #0
 800b58a:	67bb      	str	r3, [r7, #120]	; 0x78
 800b58c:	2300      	movs	r3, #0
 800b58e:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	673b      	str	r3, [r7, #112]	; 0x70

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b594:	483a      	ldr	r0, [pc, #232]	; (800b680 <ethernet_link_thread+0x104>)
 800b596:	f7f7 f89e 	bl	80026d6 <LAN8742_GetLinkState>
 800b59a:	66f8      	str	r0, [r7, #108]	; 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800b59c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b59e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b5a2:	089b      	lsrs	r3, r3, #2
 800b5a4:	f003 0301 	and.w	r3, r3, #1
 800b5a8:	b2db      	uxtb	r3, r3
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d00c      	beq.n	800b5c8 <ethernet_link_thread+0x4c>
 800b5ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	dc09      	bgt.n	800b5c8 <ethernet_link_thread+0x4c>
  {
    HAL_ETH_Stop_IT(&heth);
 800b5b4:	4833      	ldr	r0, [pc, #204]	; (800b684 <ethernet_link_thread+0x108>)
 800b5b6:	f7f7 fca5 	bl	8002f04 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800b5ba:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b5bc:	f004 f99e 	bl	800f8fc <netif_set_down>
    netif_set_link_down(netif);
 800b5c0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b5c2:	f004 fa01 	bl	800f9c8 <netif_set_link_down>
 800b5c6:	e056      	b.n	800b676 <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800b5c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b5ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b5ce:	f003 0304 	and.w	r3, r3, #4
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d14f      	bne.n	800b676 <ethernet_link_thread+0xfa>
 800b5d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	dd4c      	ble.n	800b676 <ethernet_link_thread+0xfa>
 800b5dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5de:	3b02      	subs	r3, #2
 800b5e0:	2b03      	cmp	r3, #3
 800b5e2:	d82b      	bhi.n	800b63c <ethernet_link_thread+0xc0>
 800b5e4:	a201      	add	r2, pc, #4	; (adr r2, 800b5ec <ethernet_link_thread+0x70>)
 800b5e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5ea:	bf00      	nop
 800b5ec:	0800b5fd 	.word	0x0800b5fd
 800b5f0:	0800b60f 	.word	0x0800b60f
 800b5f4:	0800b61f 	.word	0x0800b61f
 800b5f8:	0800b62f 	.word	0x0800b62f
  {
    switch (PHYLinkState)
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800b5fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b600:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800b602:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b606:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b608:	2301      	movs	r3, #1
 800b60a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b60c:	e017      	b.n	800b63e <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800b60e:	2300      	movs	r3, #0
 800b610:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800b612:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b616:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b618:	2301      	movs	r3, #1
 800b61a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b61c:	e00f      	b.n	800b63e <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800b61e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b622:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800b624:	2300      	movs	r3, #0
 800b626:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b628:	2301      	movs	r3, #1
 800b62a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b62c:	e007      	b.n	800b63e <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800b62e:	2300      	movs	r3, #0
 800b630:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800b632:	2300      	movs	r3, #0
 800b634:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b636:	2301      	movs	r3, #1
 800b638:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b63a:	e000      	b.n	800b63e <ethernet_link_thread+0xc2>
    default:
      break;
 800b63c:	bf00      	nop
    }

    if(linkchanged)
 800b63e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b640:	2b00      	cmp	r3, #0
 800b642:	d018      	beq.n	800b676 <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b644:	f107 0308 	add.w	r3, r7, #8
 800b648:	4619      	mov	r1, r3
 800b64a:	480e      	ldr	r0, [pc, #56]	; (800b684 <ethernet_link_thread+0x108>)
 800b64c:	f7f8 f966 	bl	800391c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800b650:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b652:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800b654:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b656:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b658:	f107 0308 	add.w	r3, r7, #8
 800b65c:	4619      	mov	r1, r3
 800b65e:	4809      	ldr	r0, [pc, #36]	; (800b684 <ethernet_link_thread+0x108>)
 800b660:	f7f8 fb30 	bl	8003cc4 <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 800b664:	4807      	ldr	r0, [pc, #28]	; (800b684 <ethernet_link_thread+0x108>)
 800b666:	f7f7 fbc8 	bl	8002dfa <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800b66a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b66c:	f004 f8da 	bl	800f824 <netif_set_up>
      netif_set_link_up(netif);
 800b670:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b672:	f004 f975 	bl	800f960 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800b676:	2064      	movs	r0, #100	; 0x64
 800b678:	f000 f893 	bl	800b7a2 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b67c:	e78a      	b.n	800b594 <ethernet_link_thread+0x18>
 800b67e:	bf00      	nop
 800b680:	240046c4 	.word	0x240046c4
 800b684:	240046e4 	.word	0x240046e4

0800b688 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b688:	b480      	push	{r7}
 800b68a:	b085      	sub	sp, #20
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	4603      	mov	r3, r0
 800b690:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b692:	2300      	movs	r3, #0
 800b694:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b69a:	2b84      	cmp	r3, #132	; 0x84
 800b69c:	d005      	beq.n	800b6aa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b69e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	4413      	add	r3, r2
 800b6a6:	3303      	adds	r3, #3
 800b6a8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3714      	adds	r7, #20
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b6:	4770      	bx	lr

0800b6b8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b083      	sub	sp, #12
 800b6bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6be:	f3ef 8305 	mrs	r3, IPSR
 800b6c2:	607b      	str	r3, [r7, #4]
  return(result);
 800b6c4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	bf14      	ite	ne
 800b6ca:	2301      	movne	r3, #1
 800b6cc:	2300      	moveq	r3, #0
 800b6ce:	b2db      	uxtb	r3, r3
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	370c      	adds	r7, #12
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr

0800b6dc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b6e0:	f001 fc74 	bl	800cfcc <vTaskStartScheduler>
  
  return osOK;
 800b6e4:	2300      	movs	r3, #0
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	bd80      	pop	{r7, pc}

0800b6ea <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800b6ea:	b580      	push	{r7, lr}
 800b6ec:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800b6ee:	f7ff ffe3 	bl	800b6b8 <inHandlerMode>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d003      	beq.n	800b700 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800b6f8:	f001 fd8c 	bl	800d214 <xTaskGetTickCountFromISR>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	e002      	b.n	800b706 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800b700:	f001 fd78 	bl	800d1f4 <xTaskGetTickCount>
 800b704:	4603      	mov	r3, r0
  }
}
 800b706:	4618      	mov	r0, r3
 800b708:	bd80      	pop	{r7, pc}

0800b70a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b70a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b70c:	b089      	sub	sp, #36	; 0x24
 800b70e:	af04      	add	r7, sp, #16
 800b710:	6078      	str	r0, [r7, #4]
 800b712:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	695b      	ldr	r3, [r3, #20]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d020      	beq.n	800b75e <osThreadCreate+0x54>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	699b      	ldr	r3, [r3, #24]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d01c      	beq.n	800b75e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	685c      	ldr	r4, [r3, #4]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681d      	ldr	r5, [r3, #0]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	691e      	ldr	r6, [r3, #16]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b736:	4618      	mov	r0, r3
 800b738:	f7ff ffa6 	bl	800b688 <makeFreeRtosPriority>
 800b73c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	695b      	ldr	r3, [r3, #20]
 800b742:	687a      	ldr	r2, [r7, #4]
 800b744:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b746:	9202      	str	r2, [sp, #8]
 800b748:	9301      	str	r3, [sp, #4]
 800b74a:	9100      	str	r1, [sp, #0]
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	4632      	mov	r2, r6
 800b750:	4629      	mov	r1, r5
 800b752:	4620      	mov	r0, r4
 800b754:	f001 fa5c 	bl	800cc10 <xTaskCreateStatic>
 800b758:	4603      	mov	r3, r0
 800b75a:	60fb      	str	r3, [r7, #12]
 800b75c:	e01c      	b.n	800b798 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	685c      	ldr	r4, [r3, #4]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b76a:	b29e      	uxth	r6, r3
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b772:	4618      	mov	r0, r3
 800b774:	f7ff ff88 	bl	800b688 <makeFreeRtosPriority>
 800b778:	4602      	mov	r2, r0
 800b77a:	f107 030c 	add.w	r3, r7, #12
 800b77e:	9301      	str	r3, [sp, #4]
 800b780:	9200      	str	r2, [sp, #0]
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	4632      	mov	r2, r6
 800b786:	4629      	mov	r1, r5
 800b788:	4620      	mov	r0, r4
 800b78a:	f001 fa9e 	bl	800ccca <xTaskCreate>
 800b78e:	4603      	mov	r3, r0
 800b790:	2b01      	cmp	r3, #1
 800b792:	d001      	beq.n	800b798 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b794:	2300      	movs	r3, #0
 800b796:	e000      	b.n	800b79a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b798:	68fb      	ldr	r3, [r7, #12]
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3714      	adds	r7, #20
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b7a2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b7a2:	b580      	push	{r7, lr}
 800b7a4:	b084      	sub	sp, #16
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d001      	beq.n	800b7b8 <osDelay+0x16>
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	e000      	b.n	800b7ba <osDelay+0x18>
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f001 fbd2 	bl	800cf64 <vTaskDelay>
  
  return osOK;
 800b7c0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3710      	adds	r7, #16
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}

0800b7ca <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b7ca:	b580      	push	{r7, lr}
 800b7cc:	b082      	sub	sp, #8
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	685b      	ldr	r3, [r3, #4]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d007      	beq.n	800b7ea <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	4619      	mov	r1, r3
 800b7e0:	2001      	movs	r0, #1
 800b7e2:	f000 fc40 	bl	800c066 <xQueueCreateMutexStatic>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	e003      	b.n	800b7f2 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b7ea:	2001      	movs	r0, #1
 800b7ec:	f000 fc23 	bl	800c036 <xQueueCreateMutex>
 800b7f0:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3708      	adds	r7, #8
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
	...

0800b7fc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b084      	sub	sp, #16
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b806:	2300      	movs	r3, #0
 800b808:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d101      	bne.n	800b814 <osMutexWait+0x18>
    return osErrorParameter;
 800b810:	2380      	movs	r3, #128	; 0x80
 800b812:	e03a      	b.n	800b88a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800b814:	2300      	movs	r3, #0
 800b816:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b81e:	d103      	bne.n	800b828 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800b820:	f04f 33ff 	mov.w	r3, #4294967295
 800b824:	60fb      	str	r3, [r7, #12]
 800b826:	e009      	b.n	800b83c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d006      	beq.n	800b83c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d101      	bne.n	800b83c <osMutexWait+0x40>
      ticks = 1;
 800b838:	2301      	movs	r3, #1
 800b83a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b83c:	f7ff ff3c 	bl	800b6b8 <inHandlerMode>
 800b840:	4603      	mov	r3, r0
 800b842:	2b00      	cmp	r3, #0
 800b844:	d017      	beq.n	800b876 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800b846:	f107 0308 	add.w	r3, r7, #8
 800b84a:	461a      	mov	r2, r3
 800b84c:	2100      	movs	r1, #0
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f001 f836 	bl	800c8c0 <xQueueReceiveFromISR>
 800b854:	4603      	mov	r3, r0
 800b856:	2b01      	cmp	r3, #1
 800b858:	d001      	beq.n	800b85e <osMutexWait+0x62>
      return osErrorOS;
 800b85a:	23ff      	movs	r3, #255	; 0xff
 800b85c:	e015      	b.n	800b88a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d011      	beq.n	800b888 <osMutexWait+0x8c>
 800b864:	4b0b      	ldr	r3, [pc, #44]	; (800b894 <osMutexWait+0x98>)
 800b866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b86a:	601a      	str	r2, [r3, #0]
 800b86c:	f3bf 8f4f 	dsb	sy
 800b870:	f3bf 8f6f 	isb	sy
 800b874:	e008      	b.n	800b888 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800b876:	68f9      	ldr	r1, [r7, #12]
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f000 ff15 	bl	800c6a8 <xQueueSemaphoreTake>
 800b87e:	4603      	mov	r3, r0
 800b880:	2b01      	cmp	r3, #1
 800b882:	d001      	beq.n	800b888 <osMutexWait+0x8c>
    return osErrorOS;
 800b884:	23ff      	movs	r3, #255	; 0xff
 800b886:	e000      	b.n	800b88a <osMutexWait+0x8e>
  }
  
  return osOK;
 800b888:	2300      	movs	r3, #0
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3710      	adds	r7, #16
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop
 800b894:	e000ed04 	.word	0xe000ed04

0800b898 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b084      	sub	sp, #16
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800b8a8:	f7ff ff06 	bl	800b6b8 <inHandlerMode>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d016      	beq.n	800b8e0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800b8b2:	f107 0308 	add.w	r3, r7, #8
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f000 fd88 	bl	800c3ce <xQueueGiveFromISR>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d001      	beq.n	800b8c8 <osMutexRelease+0x30>
      return osErrorOS;
 800b8c4:	23ff      	movs	r3, #255	; 0xff
 800b8c6:	e017      	b.n	800b8f8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d013      	beq.n	800b8f6 <osMutexRelease+0x5e>
 800b8ce:	4b0c      	ldr	r3, [pc, #48]	; (800b900 <osMutexRelease+0x68>)
 800b8d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8d4:	601a      	str	r2, [r3, #0]
 800b8d6:	f3bf 8f4f 	dsb	sy
 800b8da:	f3bf 8f6f 	isb	sy
 800b8de:	e00a      	b.n	800b8f6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	2100      	movs	r1, #0
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f000 fbd8 	bl	800c09c <xQueueGenericSend>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	2b01      	cmp	r3, #1
 800b8f0:	d001      	beq.n	800b8f6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800b8f2:	23ff      	movs	r3, #255	; 0xff
 800b8f4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3710      	adds	r7, #16
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}
 800b900:	e000ed04 	.word	0xe000ed04

0800b904 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800b904:	b580      	push	{r7, lr}
 800b906:	b086      	sub	sp, #24
 800b908:	af02      	add	r7, sp, #8
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d00f      	beq.n	800b936 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	2b01      	cmp	r3, #1
 800b91a:	d10a      	bne.n	800b932 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	685b      	ldr	r3, [r3, #4]
 800b920:	2203      	movs	r2, #3
 800b922:	9200      	str	r2, [sp, #0]
 800b924:	2200      	movs	r2, #0
 800b926:	2100      	movs	r1, #0
 800b928:	2001      	movs	r0, #1
 800b92a:	f000 fa99 	bl	800be60 <xQueueGenericCreateStatic>
 800b92e:	4603      	mov	r3, r0
 800b930:	e016      	b.n	800b960 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800b932:	2300      	movs	r3, #0
 800b934:	e014      	b.n	800b960 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	2b01      	cmp	r3, #1
 800b93a:	d110      	bne.n	800b95e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800b93c:	2203      	movs	r2, #3
 800b93e:	2100      	movs	r1, #0
 800b940:	2001      	movs	r0, #1
 800b942:	f000 fb05 	bl	800bf50 <xQueueGenericCreate>
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d005      	beq.n	800b95a <osSemaphoreCreate+0x56>
 800b94e:	2300      	movs	r3, #0
 800b950:	2200      	movs	r2, #0
 800b952:	2100      	movs	r1, #0
 800b954:	68f8      	ldr	r0, [r7, #12]
 800b956:	f000 fba1 	bl	800c09c <xQueueGenericSend>
      return sema;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	e000      	b.n	800b960 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800b95e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800b960:	4618      	mov	r0, r3
 800b962:	3710      	adds	r7, #16
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}

0800b968 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b084      	sub	sp, #16
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b972:	2300      	movs	r3, #0
 800b974:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d101      	bne.n	800b980 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800b97c:	2380      	movs	r3, #128	; 0x80
 800b97e:	e03a      	b.n	800b9f6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800b980:	2300      	movs	r3, #0
 800b982:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b98a:	d103      	bne.n	800b994 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800b98c:	f04f 33ff 	mov.w	r3, #4294967295
 800b990:	60fb      	str	r3, [r7, #12]
 800b992:	e009      	b.n	800b9a8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d006      	beq.n	800b9a8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d101      	bne.n	800b9a8 <osSemaphoreWait+0x40>
      ticks = 1;
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b9a8:	f7ff fe86 	bl	800b6b8 <inHandlerMode>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d017      	beq.n	800b9e2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b9b2:	f107 0308 	add.w	r3, r7, #8
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	2100      	movs	r1, #0
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 ff80 	bl	800c8c0 <xQueueReceiveFromISR>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d001      	beq.n	800b9ca <osSemaphoreWait+0x62>
      return osErrorOS;
 800b9c6:	23ff      	movs	r3, #255	; 0xff
 800b9c8:	e015      	b.n	800b9f6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d011      	beq.n	800b9f4 <osSemaphoreWait+0x8c>
 800b9d0:	4b0b      	ldr	r3, [pc, #44]	; (800ba00 <osSemaphoreWait+0x98>)
 800b9d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9d6:	601a      	str	r2, [r3, #0]
 800b9d8:	f3bf 8f4f 	dsb	sy
 800b9dc:	f3bf 8f6f 	isb	sy
 800b9e0:	e008      	b.n	800b9f4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800b9e2:	68f9      	ldr	r1, [r7, #12]
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f000 fe5f 	bl	800c6a8 <xQueueSemaphoreTake>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	2b01      	cmp	r3, #1
 800b9ee:	d001      	beq.n	800b9f4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800b9f0:	23ff      	movs	r3, #255	; 0xff
 800b9f2:	e000      	b.n	800b9f6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800b9f4:	2300      	movs	r3, #0
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3710      	adds	r7, #16
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	e000ed04 	.word	0xe000ed04

0800ba04 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800ba10:	2300      	movs	r3, #0
 800ba12:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800ba14:	f7ff fe50 	bl	800b6b8 <inHandlerMode>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d016      	beq.n	800ba4c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ba1e:	f107 0308 	add.w	r3, r7, #8
 800ba22:	4619      	mov	r1, r3
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f000 fcd2 	bl	800c3ce <xQueueGiveFromISR>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d001      	beq.n	800ba34 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800ba30:	23ff      	movs	r3, #255	; 0xff
 800ba32:	e017      	b.n	800ba64 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d013      	beq.n	800ba62 <osSemaphoreRelease+0x5e>
 800ba3a:	4b0c      	ldr	r3, [pc, #48]	; (800ba6c <osSemaphoreRelease+0x68>)
 800ba3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba40:	601a      	str	r2, [r3, #0]
 800ba42:	f3bf 8f4f 	dsb	sy
 800ba46:	f3bf 8f6f 	isb	sy
 800ba4a:	e00a      	b.n	800ba62 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	2200      	movs	r2, #0
 800ba50:	2100      	movs	r1, #0
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f000 fb22 	bl	800c09c <xQueueGenericSend>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	d001      	beq.n	800ba62 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800ba5e:	23ff      	movs	r3, #255	; 0xff
 800ba60:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800ba62:	68fb      	ldr	r3, [r7, #12]
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3710      	adds	r7, #16
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}
 800ba6c:	e000ed04 	.word	0xe000ed04

0800ba70 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800ba70:	b590      	push	{r4, r7, lr}
 800ba72:	b085      	sub	sp, #20
 800ba74:	af02      	add	r7, sp, #8
 800ba76:	6078      	str	r0, [r7, #4]
 800ba78:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	689b      	ldr	r3, [r3, #8]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d011      	beq.n	800baa6 <osMessageCreate+0x36>
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	68db      	ldr	r3, [r3, #12]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d00d      	beq.n	800baa6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6818      	ldr	r0, [r3, #0]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6859      	ldr	r1, [r3, #4]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	689a      	ldr	r2, [r3, #8]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	68db      	ldr	r3, [r3, #12]
 800ba9a:	2400      	movs	r4, #0
 800ba9c:	9400      	str	r4, [sp, #0]
 800ba9e:	f000 f9df 	bl	800be60 <xQueueGenericCreateStatic>
 800baa2:	4603      	mov	r3, r0
 800baa4:	e008      	b.n	800bab8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6818      	ldr	r0, [r3, #0]
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	2200      	movs	r2, #0
 800bab0:	4619      	mov	r1, r3
 800bab2:	f000 fa4d 	bl	800bf50 <xQueueGenericCreate>
 800bab6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800bab8:	4618      	mov	r0, r3
 800baba:	370c      	adds	r7, #12
 800babc:	46bd      	mov	sp, r7
 800babe:	bd90      	pop	{r4, r7, pc}

0800bac0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b086      	sub	sp, #24
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	60f8      	str	r0, [r7, #12]
 800bac8:	60b9      	str	r1, [r7, #8]
 800baca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800bacc:	2300      	movs	r3, #0
 800bace:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d101      	bne.n	800bade <osMessagePut+0x1e>
    ticks = 1;
 800bada:	2301      	movs	r3, #1
 800badc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800bade:	f7ff fdeb 	bl	800b6b8 <inHandlerMode>
 800bae2:	4603      	mov	r3, r0
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d018      	beq.n	800bb1a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800bae8:	f107 0210 	add.w	r2, r7, #16
 800baec:	f107 0108 	add.w	r1, r7, #8
 800baf0:	2300      	movs	r3, #0
 800baf2:	68f8      	ldr	r0, [r7, #12]
 800baf4:	f000 fbd0 	bl	800c298 <xQueueGenericSendFromISR>
 800baf8:	4603      	mov	r3, r0
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	d001      	beq.n	800bb02 <osMessagePut+0x42>
      return osErrorOS;
 800bafe:	23ff      	movs	r3, #255	; 0xff
 800bb00:	e018      	b.n	800bb34 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d014      	beq.n	800bb32 <osMessagePut+0x72>
 800bb08:	4b0c      	ldr	r3, [pc, #48]	; (800bb3c <osMessagePut+0x7c>)
 800bb0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb0e:	601a      	str	r2, [r3, #0]
 800bb10:	f3bf 8f4f 	dsb	sy
 800bb14:	f3bf 8f6f 	isb	sy
 800bb18:	e00b      	b.n	800bb32 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800bb1a:	f107 0108 	add.w	r1, r7, #8
 800bb1e:	2300      	movs	r3, #0
 800bb20:	697a      	ldr	r2, [r7, #20]
 800bb22:	68f8      	ldr	r0, [r7, #12]
 800bb24:	f000 faba 	bl	800c09c <xQueueGenericSend>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	2b01      	cmp	r3, #1
 800bb2c:	d001      	beq.n	800bb32 <osMessagePut+0x72>
      return osErrorOS;
 800bb2e:	23ff      	movs	r3, #255	; 0xff
 800bb30:	e000      	b.n	800bb34 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3718      	adds	r7, #24
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}
 800bb3c:	e000ed04 	.word	0xe000ed04

0800bb40 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800bb40:	b590      	push	{r4, r7, lr}
 800bb42:	b08b      	sub	sp, #44	; 0x2c
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	60f8      	str	r0, [r7, #12]
 800bb48:	60b9      	str	r1, [r7, #8]
 800bb4a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800bb50:	2300      	movs	r3, #0
 800bb52:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d10a      	bne.n	800bb70 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800bb5a:	2380      	movs	r3, #128	; 0x80
 800bb5c:	617b      	str	r3, [r7, #20]
    return event;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	461c      	mov	r4, r3
 800bb62:	f107 0314 	add.w	r3, r7, #20
 800bb66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bb6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bb6e:	e054      	b.n	800bc1a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800bb70:	2300      	movs	r3, #0
 800bb72:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800bb74:	2300      	movs	r3, #0
 800bb76:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb7e:	d103      	bne.n	800bb88 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800bb80:	f04f 33ff 	mov.w	r3, #4294967295
 800bb84:	627b      	str	r3, [r7, #36]	; 0x24
 800bb86:	e009      	b.n	800bb9c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d006      	beq.n	800bb9c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800bb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d101      	bne.n	800bb9c <osMessageGet+0x5c>
      ticks = 1;
 800bb98:	2301      	movs	r3, #1
 800bb9a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800bb9c:	f7ff fd8c 	bl	800b6b8 <inHandlerMode>
 800bba0:	4603      	mov	r3, r0
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d01c      	beq.n	800bbe0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800bba6:	f107 0220 	add.w	r2, r7, #32
 800bbaa:	f107 0314 	add.w	r3, r7, #20
 800bbae:	3304      	adds	r3, #4
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	68b8      	ldr	r0, [r7, #8]
 800bbb4:	f000 fe84 	bl	800c8c0 <xQueueReceiveFromISR>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	2b01      	cmp	r3, #1
 800bbbc:	d102      	bne.n	800bbc4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800bbbe:	2310      	movs	r3, #16
 800bbc0:	617b      	str	r3, [r7, #20]
 800bbc2:	e001      	b.n	800bbc8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bbc8:	6a3b      	ldr	r3, [r7, #32]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d01d      	beq.n	800bc0a <osMessageGet+0xca>
 800bbce:	4b15      	ldr	r3, [pc, #84]	; (800bc24 <osMessageGet+0xe4>)
 800bbd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbd4:	601a      	str	r2, [r3, #0]
 800bbd6:	f3bf 8f4f 	dsb	sy
 800bbda:	f3bf 8f6f 	isb	sy
 800bbde:	e014      	b.n	800bc0a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800bbe0:	f107 0314 	add.w	r3, r7, #20
 800bbe4:	3304      	adds	r3, #4
 800bbe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbe8:	4619      	mov	r1, r3
 800bbea:	68b8      	ldr	r0, [r7, #8]
 800bbec:	f000 fc7c 	bl	800c4e8 <xQueueReceive>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	2b01      	cmp	r3, #1
 800bbf4:	d102      	bne.n	800bbfc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800bbf6:	2310      	movs	r3, #16
 800bbf8:	617b      	str	r3, [r7, #20]
 800bbfa:	e006      	b.n	800bc0a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800bbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d101      	bne.n	800bc06 <osMessageGet+0xc6>
 800bc02:	2300      	movs	r3, #0
 800bc04:	e000      	b.n	800bc08 <osMessageGet+0xc8>
 800bc06:	2340      	movs	r3, #64	; 0x40
 800bc08:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	461c      	mov	r4, r3
 800bc0e:	f107 0314 	add.w	r3, r7, #20
 800bc12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bc16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800bc1a:	68f8      	ldr	r0, [r7, #12]
 800bc1c:	372c      	adds	r7, #44	; 0x2c
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd90      	pop	{r4, r7, pc}
 800bc22:	bf00      	nop
 800bc24:	e000ed04 	.word	0xe000ed04

0800bc28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b083      	sub	sp, #12
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f103 0208 	add.w	r2, r3, #8
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f04f 32ff 	mov.w	r2, #4294967295
 800bc40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f103 0208 	add.w	r2, r3, #8
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f103 0208 	add.w	r2, r3, #8
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2200      	movs	r2, #0
 800bc5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bc5c:	bf00      	nop
 800bc5e:	370c      	adds	r7, #12
 800bc60:	46bd      	mov	sp, r7
 800bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc66:	4770      	bx	lr

0800bc68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b083      	sub	sp, #12
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2200      	movs	r2, #0
 800bc74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bc76:	bf00      	nop
 800bc78:	370c      	adds	r7, #12
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc80:	4770      	bx	lr

0800bc82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc82:	b480      	push	{r7}
 800bc84:	b085      	sub	sp, #20
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
 800bc8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	685b      	ldr	r3, [r3, #4]
 800bc90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	68fa      	ldr	r2, [r7, #12]
 800bc96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	689a      	ldr	r2, [r3, #8]
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	689b      	ldr	r3, [r3, #8]
 800bca4:	683a      	ldr	r2, [r7, #0]
 800bca6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	683a      	ldr	r2, [r7, #0]
 800bcac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	1c5a      	adds	r2, r3, #1
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	601a      	str	r2, [r3, #0]
}
 800bcbe:	bf00      	nop
 800bcc0:	3714      	adds	r7, #20
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr

0800bcca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bcca:	b480      	push	{r7}
 800bccc:	b085      	sub	sp, #20
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
 800bcd2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bce0:	d103      	bne.n	800bcea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	691b      	ldr	r3, [r3, #16]
 800bce6:	60fb      	str	r3, [r7, #12]
 800bce8:	e00c      	b.n	800bd04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	3308      	adds	r3, #8
 800bcee:	60fb      	str	r3, [r7, #12]
 800bcf0:	e002      	b.n	800bcf8 <vListInsert+0x2e>
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	685b      	ldr	r3, [r3, #4]
 800bcf6:	60fb      	str	r3, [r7, #12]
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	68ba      	ldr	r2, [r7, #8]
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d2f6      	bcs.n	800bcf2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	685a      	ldr	r2, [r3, #4]
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	685b      	ldr	r3, [r3, #4]
 800bd10:	683a      	ldr	r2, [r7, #0]
 800bd12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	68fa      	ldr	r2, [r7, #12]
 800bd18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	683a      	ldr	r2, [r7, #0]
 800bd1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	687a      	ldr	r2, [r7, #4]
 800bd24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	1c5a      	adds	r2, r3, #1
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	601a      	str	r2, [r3, #0]
}
 800bd30:	bf00      	nop
 800bd32:	3714      	adds	r7, #20
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr

0800bd3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b085      	sub	sp, #20
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	691b      	ldr	r3, [r3, #16]
 800bd48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	685b      	ldr	r3, [r3, #4]
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	6892      	ldr	r2, [r2, #8]
 800bd52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	689b      	ldr	r3, [r3, #8]
 800bd58:	687a      	ldr	r2, [r7, #4]
 800bd5a:	6852      	ldr	r2, [r2, #4]
 800bd5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	685b      	ldr	r3, [r3, #4]
 800bd62:	687a      	ldr	r2, [r7, #4]
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d103      	bne.n	800bd70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	689a      	ldr	r2, [r3, #8]
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2200      	movs	r2, #0
 800bd74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	1e5a      	subs	r2, r3, #1
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3714      	adds	r7, #20
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8e:	4770      	bx	lr

0800bd90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b084      	sub	sp, #16
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d10a      	bne.n	800bdba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda8:	f383 8811 	msr	BASEPRI, r3
 800bdac:	f3bf 8f6f 	isb	sy
 800bdb0:	f3bf 8f4f 	dsb	sy
 800bdb4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bdb6:	bf00      	nop
 800bdb8:	e7fe      	b.n	800bdb8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bdba:	f002 f88b 	bl	800ded4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdc6:	68f9      	ldr	r1, [r7, #12]
 800bdc8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bdca:	fb01 f303 	mul.w	r3, r1, r3
 800bdce:	441a      	add	r2, r3
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	681a      	ldr	r2, [r3, #0]
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681a      	ldr	r2, [r3, #0]
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdea:	3b01      	subs	r3, #1
 800bdec:	68f9      	ldr	r1, [r7, #12]
 800bdee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bdf0:	fb01 f303 	mul.w	r3, r1, r3
 800bdf4:	441a      	add	r2, r3
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	22ff      	movs	r2, #255	; 0xff
 800bdfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	22ff      	movs	r2, #255	; 0xff
 800be06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d114      	bne.n	800be3a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	691b      	ldr	r3, [r3, #16]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d01a      	beq.n	800be4e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	3310      	adds	r3, #16
 800be1c:	4618      	mov	r0, r3
 800be1e:	f001 fb49 	bl	800d4b4 <xTaskRemoveFromEventList>
 800be22:	4603      	mov	r3, r0
 800be24:	2b00      	cmp	r3, #0
 800be26:	d012      	beq.n	800be4e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800be28:	4b0c      	ldr	r3, [pc, #48]	; (800be5c <xQueueGenericReset+0xcc>)
 800be2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be2e:	601a      	str	r2, [r3, #0]
 800be30:	f3bf 8f4f 	dsb	sy
 800be34:	f3bf 8f6f 	isb	sy
 800be38:	e009      	b.n	800be4e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	3310      	adds	r3, #16
 800be3e:	4618      	mov	r0, r3
 800be40:	f7ff fef2 	bl	800bc28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	3324      	adds	r3, #36	; 0x24
 800be48:	4618      	mov	r0, r3
 800be4a:	f7ff feed 	bl	800bc28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800be4e:	f002 f871 	bl	800df34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800be52:	2301      	movs	r3, #1
}
 800be54:	4618      	mov	r0, r3
 800be56:	3710      	adds	r7, #16
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}
 800be5c:	e000ed04 	.word	0xe000ed04

0800be60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800be60:	b580      	push	{r7, lr}
 800be62:	b08e      	sub	sp, #56	; 0x38
 800be64:	af02      	add	r7, sp, #8
 800be66:	60f8      	str	r0, [r7, #12]
 800be68:	60b9      	str	r1, [r7, #8]
 800be6a:	607a      	str	r2, [r7, #4]
 800be6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d10a      	bne.n	800be8a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800be74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be78:	f383 8811 	msr	BASEPRI, r3
 800be7c:	f3bf 8f6f 	isb	sy
 800be80:	f3bf 8f4f 	dsb	sy
 800be84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800be86:	bf00      	nop
 800be88:	e7fe      	b.n	800be88 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d10a      	bne.n	800bea6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800be90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be94:	f383 8811 	msr	BASEPRI, r3
 800be98:	f3bf 8f6f 	isb	sy
 800be9c:	f3bf 8f4f 	dsb	sy
 800bea0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bea2:	bf00      	nop
 800bea4:	e7fe      	b.n	800bea4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d002      	beq.n	800beb2 <xQueueGenericCreateStatic+0x52>
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d001      	beq.n	800beb6 <xQueueGenericCreateStatic+0x56>
 800beb2:	2301      	movs	r3, #1
 800beb4:	e000      	b.n	800beb8 <xQueueGenericCreateStatic+0x58>
 800beb6:	2300      	movs	r3, #0
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d10a      	bne.n	800bed2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec0:	f383 8811 	msr	BASEPRI, r3
 800bec4:	f3bf 8f6f 	isb	sy
 800bec8:	f3bf 8f4f 	dsb	sy
 800becc:	623b      	str	r3, [r7, #32]
}
 800bece:	bf00      	nop
 800bed0:	e7fe      	b.n	800bed0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d102      	bne.n	800bede <xQueueGenericCreateStatic+0x7e>
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d101      	bne.n	800bee2 <xQueueGenericCreateStatic+0x82>
 800bede:	2301      	movs	r3, #1
 800bee0:	e000      	b.n	800bee4 <xQueueGenericCreateStatic+0x84>
 800bee2:	2300      	movs	r3, #0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d10a      	bne.n	800befe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beec:	f383 8811 	msr	BASEPRI, r3
 800bef0:	f3bf 8f6f 	isb	sy
 800bef4:	f3bf 8f4f 	dsb	sy
 800bef8:	61fb      	str	r3, [r7, #28]
}
 800befa:	bf00      	nop
 800befc:	e7fe      	b.n	800befc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800befe:	2348      	movs	r3, #72	; 0x48
 800bf00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bf02:	697b      	ldr	r3, [r7, #20]
 800bf04:	2b48      	cmp	r3, #72	; 0x48
 800bf06:	d00a      	beq.n	800bf1e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bf08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf0c:	f383 8811 	msr	BASEPRI, r3
 800bf10:	f3bf 8f6f 	isb	sy
 800bf14:	f3bf 8f4f 	dsb	sy
 800bf18:	61bb      	str	r3, [r7, #24]
}
 800bf1a:	bf00      	nop
 800bf1c:	e7fe      	b.n	800bf1c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bf1e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bf24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d00d      	beq.n	800bf46 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bf2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bf32:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bf36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf38:	9300      	str	r3, [sp, #0]
 800bf3a:	4613      	mov	r3, r2
 800bf3c:	687a      	ldr	r2, [r7, #4]
 800bf3e:	68b9      	ldr	r1, [r7, #8]
 800bf40:	68f8      	ldr	r0, [r7, #12]
 800bf42:	f000 f83f 	bl	800bfc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bf46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3730      	adds	r7, #48	; 0x30
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}

0800bf50 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b08a      	sub	sp, #40	; 0x28
 800bf54:	af02      	add	r7, sp, #8
 800bf56:	60f8      	str	r0, [r7, #12]
 800bf58:	60b9      	str	r1, [r7, #8]
 800bf5a:	4613      	mov	r3, r2
 800bf5c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d10a      	bne.n	800bf7a <xQueueGenericCreate+0x2a>
	__asm volatile
 800bf64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf68:	f383 8811 	msr	BASEPRI, r3
 800bf6c:	f3bf 8f6f 	isb	sy
 800bf70:	f3bf 8f4f 	dsb	sy
 800bf74:	613b      	str	r3, [r7, #16]
}
 800bf76:	bf00      	nop
 800bf78:	e7fe      	b.n	800bf78 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	68ba      	ldr	r2, [r7, #8]
 800bf7e:	fb02 f303 	mul.w	r3, r2, r3
 800bf82:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bf84:	69fb      	ldr	r3, [r7, #28]
 800bf86:	3348      	adds	r3, #72	; 0x48
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f002 f8c5 	bl	800e118 <pvPortMalloc>
 800bf8e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d011      	beq.n	800bfba <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bf96:	69bb      	ldr	r3, [r7, #24]
 800bf98:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	3348      	adds	r3, #72	; 0x48
 800bf9e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bfa0:	69bb      	ldr	r3, [r7, #24]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bfa8:	79fa      	ldrb	r2, [r7, #7]
 800bfaa:	69bb      	ldr	r3, [r7, #24]
 800bfac:	9300      	str	r3, [sp, #0]
 800bfae:	4613      	mov	r3, r2
 800bfb0:	697a      	ldr	r2, [r7, #20]
 800bfb2:	68b9      	ldr	r1, [r7, #8]
 800bfb4:	68f8      	ldr	r0, [r7, #12]
 800bfb6:	f000 f805 	bl	800bfc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bfba:	69bb      	ldr	r3, [r7, #24]
	}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3720      	adds	r7, #32
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b084      	sub	sp, #16
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	60f8      	str	r0, [r7, #12]
 800bfcc:	60b9      	str	r1, [r7, #8]
 800bfce:	607a      	str	r2, [r7, #4]
 800bfd0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d103      	bne.n	800bfe0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bfd8:	69bb      	ldr	r3, [r7, #24]
 800bfda:	69ba      	ldr	r2, [r7, #24]
 800bfdc:	601a      	str	r2, [r3, #0]
 800bfde:	e002      	b.n	800bfe6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bfe0:	69bb      	ldr	r3, [r7, #24]
 800bfe2:	687a      	ldr	r2, [r7, #4]
 800bfe4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bfe6:	69bb      	ldr	r3, [r7, #24]
 800bfe8:	68fa      	ldr	r2, [r7, #12]
 800bfea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bfec:	69bb      	ldr	r3, [r7, #24]
 800bfee:	68ba      	ldr	r2, [r7, #8]
 800bff0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bff2:	2101      	movs	r1, #1
 800bff4:	69b8      	ldr	r0, [r7, #24]
 800bff6:	f7ff fecb 	bl	800bd90 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bffa:	bf00      	nop
 800bffc:	3710      	adds	r7, #16
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}

0800c002 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c002:	b580      	push	{r7, lr}
 800c004:	b082      	sub	sp, #8
 800c006:	af00      	add	r7, sp, #0
 800c008:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d00e      	beq.n	800c02e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2200      	movs	r2, #0
 800c014:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2200      	movs	r2, #0
 800c01a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2200      	movs	r2, #0
 800c020:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c022:	2300      	movs	r3, #0
 800c024:	2200      	movs	r2, #0
 800c026:	2100      	movs	r1, #0
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f000 f837 	bl	800c09c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c02e:	bf00      	nop
 800c030:	3708      	adds	r7, #8
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}

0800c036 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c036:	b580      	push	{r7, lr}
 800c038:	b086      	sub	sp, #24
 800c03a:	af00      	add	r7, sp, #0
 800c03c:	4603      	mov	r3, r0
 800c03e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c040:	2301      	movs	r3, #1
 800c042:	617b      	str	r3, [r7, #20]
 800c044:	2300      	movs	r3, #0
 800c046:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c048:	79fb      	ldrb	r3, [r7, #7]
 800c04a:	461a      	mov	r2, r3
 800c04c:	6939      	ldr	r1, [r7, #16]
 800c04e:	6978      	ldr	r0, [r7, #20]
 800c050:	f7ff ff7e 	bl	800bf50 <xQueueGenericCreate>
 800c054:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c056:	68f8      	ldr	r0, [r7, #12]
 800c058:	f7ff ffd3 	bl	800c002 <prvInitialiseMutex>

		return xNewQueue;
 800c05c:	68fb      	ldr	r3, [r7, #12]
	}
 800c05e:	4618      	mov	r0, r3
 800c060:	3718      	adds	r7, #24
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}

0800c066 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c066:	b580      	push	{r7, lr}
 800c068:	b088      	sub	sp, #32
 800c06a:	af02      	add	r7, sp, #8
 800c06c:	4603      	mov	r3, r0
 800c06e:	6039      	str	r1, [r7, #0]
 800c070:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c072:	2301      	movs	r3, #1
 800c074:	617b      	str	r3, [r7, #20]
 800c076:	2300      	movs	r3, #0
 800c078:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c07a:	79fb      	ldrb	r3, [r7, #7]
 800c07c:	9300      	str	r3, [sp, #0]
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	2200      	movs	r2, #0
 800c082:	6939      	ldr	r1, [r7, #16]
 800c084:	6978      	ldr	r0, [r7, #20]
 800c086:	f7ff feeb 	bl	800be60 <xQueueGenericCreateStatic>
 800c08a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c08c:	68f8      	ldr	r0, [r7, #12]
 800c08e:	f7ff ffb8 	bl	800c002 <prvInitialiseMutex>

		return xNewQueue;
 800c092:	68fb      	ldr	r3, [r7, #12]
	}
 800c094:	4618      	mov	r0, r3
 800c096:	3718      	adds	r7, #24
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}

0800c09c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b08e      	sub	sp, #56	; 0x38
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	60f8      	str	r0, [r7, #12]
 800c0a4:	60b9      	str	r1, [r7, #8]
 800c0a6:	607a      	str	r2, [r7, #4]
 800c0a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d10a      	bne.n	800c0ce <xQueueGenericSend+0x32>
	__asm volatile
 800c0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0bc:	f383 8811 	msr	BASEPRI, r3
 800c0c0:	f3bf 8f6f 	isb	sy
 800c0c4:	f3bf 8f4f 	dsb	sy
 800c0c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c0ca:	bf00      	nop
 800c0cc:	e7fe      	b.n	800c0cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d103      	bne.n	800c0dc <xQueueGenericSend+0x40>
 800c0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d101      	bne.n	800c0e0 <xQueueGenericSend+0x44>
 800c0dc:	2301      	movs	r3, #1
 800c0de:	e000      	b.n	800c0e2 <xQueueGenericSend+0x46>
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d10a      	bne.n	800c0fc <xQueueGenericSend+0x60>
	__asm volatile
 800c0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ea:	f383 8811 	msr	BASEPRI, r3
 800c0ee:	f3bf 8f6f 	isb	sy
 800c0f2:	f3bf 8f4f 	dsb	sy
 800c0f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c0f8:	bf00      	nop
 800c0fa:	e7fe      	b.n	800c0fa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	2b02      	cmp	r3, #2
 800c100:	d103      	bne.n	800c10a <xQueueGenericSend+0x6e>
 800c102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c106:	2b01      	cmp	r3, #1
 800c108:	d101      	bne.n	800c10e <xQueueGenericSend+0x72>
 800c10a:	2301      	movs	r3, #1
 800c10c:	e000      	b.n	800c110 <xQueueGenericSend+0x74>
 800c10e:	2300      	movs	r3, #0
 800c110:	2b00      	cmp	r3, #0
 800c112:	d10a      	bne.n	800c12a <xQueueGenericSend+0x8e>
	__asm volatile
 800c114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c118:	f383 8811 	msr	BASEPRI, r3
 800c11c:	f3bf 8f6f 	isb	sy
 800c120:	f3bf 8f4f 	dsb	sy
 800c124:	623b      	str	r3, [r7, #32]
}
 800c126:	bf00      	nop
 800c128:	e7fe      	b.n	800c128 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c12a:	f001 fb83 	bl	800d834 <xTaskGetSchedulerState>
 800c12e:	4603      	mov	r3, r0
 800c130:	2b00      	cmp	r3, #0
 800c132:	d102      	bne.n	800c13a <xQueueGenericSend+0x9e>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d101      	bne.n	800c13e <xQueueGenericSend+0xa2>
 800c13a:	2301      	movs	r3, #1
 800c13c:	e000      	b.n	800c140 <xQueueGenericSend+0xa4>
 800c13e:	2300      	movs	r3, #0
 800c140:	2b00      	cmp	r3, #0
 800c142:	d10a      	bne.n	800c15a <xQueueGenericSend+0xbe>
	__asm volatile
 800c144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c148:	f383 8811 	msr	BASEPRI, r3
 800c14c:	f3bf 8f6f 	isb	sy
 800c150:	f3bf 8f4f 	dsb	sy
 800c154:	61fb      	str	r3, [r7, #28]
}
 800c156:	bf00      	nop
 800c158:	e7fe      	b.n	800c158 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c15a:	f001 febb 	bl	800ded4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c160:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c166:	429a      	cmp	r2, r3
 800c168:	d302      	bcc.n	800c170 <xQueueGenericSend+0xd4>
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	2b02      	cmp	r3, #2
 800c16e:	d129      	bne.n	800c1c4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c170:	683a      	ldr	r2, [r7, #0]
 800c172:	68b9      	ldr	r1, [r7, #8]
 800c174:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c176:	f000 fc3b 	bl	800c9f0 <prvCopyDataToQueue>
 800c17a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c180:	2b00      	cmp	r3, #0
 800c182:	d010      	beq.n	800c1a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c186:	3324      	adds	r3, #36	; 0x24
 800c188:	4618      	mov	r0, r3
 800c18a:	f001 f993 	bl	800d4b4 <xTaskRemoveFromEventList>
 800c18e:	4603      	mov	r3, r0
 800c190:	2b00      	cmp	r3, #0
 800c192:	d013      	beq.n	800c1bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c194:	4b3f      	ldr	r3, [pc, #252]	; (800c294 <xQueueGenericSend+0x1f8>)
 800c196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c19a:	601a      	str	r2, [r3, #0]
 800c19c:	f3bf 8f4f 	dsb	sy
 800c1a0:	f3bf 8f6f 	isb	sy
 800c1a4:	e00a      	b.n	800c1bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d007      	beq.n	800c1bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c1ac:	4b39      	ldr	r3, [pc, #228]	; (800c294 <xQueueGenericSend+0x1f8>)
 800c1ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1b2:	601a      	str	r2, [r3, #0]
 800c1b4:	f3bf 8f4f 	dsb	sy
 800c1b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c1bc:	f001 feba 	bl	800df34 <vPortExitCritical>
				return pdPASS;
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	e063      	b.n	800c28c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d103      	bne.n	800c1d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c1ca:	f001 feb3 	bl	800df34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	e05c      	b.n	800c28c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c1d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d106      	bne.n	800c1e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c1d8:	f107 0314 	add.w	r3, r7, #20
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f001 f9cb 	bl	800d578 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c1e6:	f001 fea5 	bl	800df34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c1ea:	f000 ff59 	bl	800d0a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c1ee:	f001 fe71 	bl	800ded4 <vPortEnterCritical>
 800c1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1f8:	b25b      	sxtb	r3, r3
 800c1fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1fe:	d103      	bne.n	800c208 <xQueueGenericSend+0x16c>
 800c200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c202:	2200      	movs	r2, #0
 800c204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c20a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c20e:	b25b      	sxtb	r3, r3
 800c210:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c214:	d103      	bne.n	800c21e <xQueueGenericSend+0x182>
 800c216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c218:	2200      	movs	r2, #0
 800c21a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c21e:	f001 fe89 	bl	800df34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c222:	1d3a      	adds	r2, r7, #4
 800c224:	f107 0314 	add.w	r3, r7, #20
 800c228:	4611      	mov	r1, r2
 800c22a:	4618      	mov	r0, r3
 800c22c:	f001 f9ba 	bl	800d5a4 <xTaskCheckForTimeOut>
 800c230:	4603      	mov	r3, r0
 800c232:	2b00      	cmp	r3, #0
 800c234:	d124      	bne.n	800c280 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c236:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c238:	f000 fcd2 	bl	800cbe0 <prvIsQueueFull>
 800c23c:	4603      	mov	r3, r0
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d018      	beq.n	800c274 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c244:	3310      	adds	r3, #16
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	4611      	mov	r1, r2
 800c24a:	4618      	mov	r0, r3
 800c24c:	f001 f90e 	bl	800d46c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c250:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c252:	f000 fc5d 	bl	800cb10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c256:	f000 ff31 	bl	800d0bc <xTaskResumeAll>
 800c25a:	4603      	mov	r3, r0
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	f47f af7c 	bne.w	800c15a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c262:	4b0c      	ldr	r3, [pc, #48]	; (800c294 <xQueueGenericSend+0x1f8>)
 800c264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c268:	601a      	str	r2, [r3, #0]
 800c26a:	f3bf 8f4f 	dsb	sy
 800c26e:	f3bf 8f6f 	isb	sy
 800c272:	e772      	b.n	800c15a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c274:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c276:	f000 fc4b 	bl	800cb10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c27a:	f000 ff1f 	bl	800d0bc <xTaskResumeAll>
 800c27e:	e76c      	b.n	800c15a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c280:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c282:	f000 fc45 	bl	800cb10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c286:	f000 ff19 	bl	800d0bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c28a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3738      	adds	r7, #56	; 0x38
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}
 800c294:	e000ed04 	.word	0xe000ed04

0800c298 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b090      	sub	sp, #64	; 0x40
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	60f8      	str	r0, [r7, #12]
 800c2a0:	60b9      	str	r1, [r7, #8]
 800c2a2:	607a      	str	r2, [r7, #4]
 800c2a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d10a      	bne.n	800c2c6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b4:	f383 8811 	msr	BASEPRI, r3
 800c2b8:	f3bf 8f6f 	isb	sy
 800c2bc:	f3bf 8f4f 	dsb	sy
 800c2c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c2c2:	bf00      	nop
 800c2c4:	e7fe      	b.n	800c2c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d103      	bne.n	800c2d4 <xQueueGenericSendFromISR+0x3c>
 800c2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d101      	bne.n	800c2d8 <xQueueGenericSendFromISR+0x40>
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	e000      	b.n	800c2da <xQueueGenericSendFromISR+0x42>
 800c2d8:	2300      	movs	r3, #0
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d10a      	bne.n	800c2f4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e2:	f383 8811 	msr	BASEPRI, r3
 800c2e6:	f3bf 8f6f 	isb	sy
 800c2ea:	f3bf 8f4f 	dsb	sy
 800c2ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c2f0:	bf00      	nop
 800c2f2:	e7fe      	b.n	800c2f2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	2b02      	cmp	r3, #2
 800c2f8:	d103      	bne.n	800c302 <xQueueGenericSendFromISR+0x6a>
 800c2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2fe:	2b01      	cmp	r3, #1
 800c300:	d101      	bne.n	800c306 <xQueueGenericSendFromISR+0x6e>
 800c302:	2301      	movs	r3, #1
 800c304:	e000      	b.n	800c308 <xQueueGenericSendFromISR+0x70>
 800c306:	2300      	movs	r3, #0
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d10a      	bne.n	800c322 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c310:	f383 8811 	msr	BASEPRI, r3
 800c314:	f3bf 8f6f 	isb	sy
 800c318:	f3bf 8f4f 	dsb	sy
 800c31c:	623b      	str	r3, [r7, #32]
}
 800c31e:	bf00      	nop
 800c320:	e7fe      	b.n	800c320 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c322:	f001 feb9 	bl	800e098 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c326:	f3ef 8211 	mrs	r2, BASEPRI
 800c32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c32e:	f383 8811 	msr	BASEPRI, r3
 800c332:	f3bf 8f6f 	isb	sy
 800c336:	f3bf 8f4f 	dsb	sy
 800c33a:	61fa      	str	r2, [r7, #28]
 800c33c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c33e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c340:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c344:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d302      	bcc.n	800c354 <xQueueGenericSendFromISR+0xbc>
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	2b02      	cmp	r3, #2
 800c352:	d12f      	bne.n	800c3b4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c356:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c35a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c362:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c364:	683a      	ldr	r2, [r7, #0]
 800c366:	68b9      	ldr	r1, [r7, #8]
 800c368:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c36a:	f000 fb41 	bl	800c9f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c36e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c372:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c376:	d112      	bne.n	800c39e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c37a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d016      	beq.n	800c3ae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c382:	3324      	adds	r3, #36	; 0x24
 800c384:	4618      	mov	r0, r3
 800c386:	f001 f895 	bl	800d4b4 <xTaskRemoveFromEventList>
 800c38a:	4603      	mov	r3, r0
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d00e      	beq.n	800c3ae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d00b      	beq.n	800c3ae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2201      	movs	r2, #1
 800c39a:	601a      	str	r2, [r3, #0]
 800c39c:	e007      	b.n	800c3ae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c39e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c3a2:	3301      	adds	r3, #1
 800c3a4:	b2db      	uxtb	r3, r3
 800c3a6:	b25a      	sxtb	r2, r3
 800c3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c3b2:	e001      	b.n	800c3b8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3ba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c3bc:	697b      	ldr	r3, [r7, #20]
 800c3be:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c3c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c3c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3740      	adds	r7, #64	; 0x40
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}

0800c3ce <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c3ce:	b580      	push	{r7, lr}
 800c3d0:	b08e      	sub	sp, #56	; 0x38
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
 800c3d6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d10a      	bne.n	800c3f8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e6:	f383 8811 	msr	BASEPRI, r3
 800c3ea:	f3bf 8f6f 	isb	sy
 800c3ee:	f3bf 8f4f 	dsb	sy
 800c3f2:	623b      	str	r3, [r7, #32]
}
 800c3f4:	bf00      	nop
 800c3f6:	e7fe      	b.n	800c3f6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d00a      	beq.n	800c416 <xQueueGiveFromISR+0x48>
	__asm volatile
 800c400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c404:	f383 8811 	msr	BASEPRI, r3
 800c408:	f3bf 8f6f 	isb	sy
 800c40c:	f3bf 8f4f 	dsb	sy
 800c410:	61fb      	str	r3, [r7, #28]
}
 800c412:	bf00      	nop
 800c414:	e7fe      	b.n	800c414 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d103      	bne.n	800c426 <xQueueGiveFromISR+0x58>
 800c41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c420:	689b      	ldr	r3, [r3, #8]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d101      	bne.n	800c42a <xQueueGiveFromISR+0x5c>
 800c426:	2301      	movs	r3, #1
 800c428:	e000      	b.n	800c42c <xQueueGiveFromISR+0x5e>
 800c42a:	2300      	movs	r3, #0
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d10a      	bne.n	800c446 <xQueueGiveFromISR+0x78>
	__asm volatile
 800c430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c434:	f383 8811 	msr	BASEPRI, r3
 800c438:	f3bf 8f6f 	isb	sy
 800c43c:	f3bf 8f4f 	dsb	sy
 800c440:	61bb      	str	r3, [r7, #24]
}
 800c442:	bf00      	nop
 800c444:	e7fe      	b.n	800c444 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c446:	f001 fe27 	bl	800e098 <vPortValidateInterruptPriority>
	__asm volatile
 800c44a:	f3ef 8211 	mrs	r2, BASEPRI
 800c44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c452:	f383 8811 	msr	BASEPRI, r3
 800c456:	f3bf 8f6f 	isb	sy
 800c45a:	f3bf 8f4f 	dsb	sy
 800c45e:	617a      	str	r2, [r7, #20]
 800c460:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c462:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c464:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c46a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c46e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c472:	429a      	cmp	r2, r3
 800c474:	d22b      	bcs.n	800c4ce <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c478:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c47c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c482:	1c5a      	adds	r2, r3, #1
 800c484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c486:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c488:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c48c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c490:	d112      	bne.n	800c4b8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c496:	2b00      	cmp	r3, #0
 800c498:	d016      	beq.n	800c4c8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c49c:	3324      	adds	r3, #36	; 0x24
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f001 f808 	bl	800d4b4 <xTaskRemoveFromEventList>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d00e      	beq.n	800c4c8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d00b      	beq.n	800c4c8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	601a      	str	r2, [r3, #0]
 800c4b6:	e007      	b.n	800c4c8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c4b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4bc:	3301      	adds	r3, #1
 800c4be:	b2db      	uxtb	r3, r3
 800c4c0:	b25a      	sxtb	r2, r3
 800c4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	637b      	str	r3, [r7, #52]	; 0x34
 800c4cc:	e001      	b.n	800c4d2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	637b      	str	r3, [r7, #52]	; 0x34
 800c4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	f383 8811 	msr	BASEPRI, r3
}
 800c4dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c4de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3738      	adds	r7, #56	; 0x38
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}

0800c4e8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b08c      	sub	sp, #48	; 0x30
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	60f8      	str	r0, [r7, #12]
 800c4f0:	60b9      	str	r1, [r7, #8]
 800c4f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d10a      	bne.n	800c518 <xQueueReceive+0x30>
	__asm volatile
 800c502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c506:	f383 8811 	msr	BASEPRI, r3
 800c50a:	f3bf 8f6f 	isb	sy
 800c50e:	f3bf 8f4f 	dsb	sy
 800c512:	623b      	str	r3, [r7, #32]
}
 800c514:	bf00      	nop
 800c516:	e7fe      	b.n	800c516 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d103      	bne.n	800c526 <xQueueReceive+0x3e>
 800c51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c522:	2b00      	cmp	r3, #0
 800c524:	d101      	bne.n	800c52a <xQueueReceive+0x42>
 800c526:	2301      	movs	r3, #1
 800c528:	e000      	b.n	800c52c <xQueueReceive+0x44>
 800c52a:	2300      	movs	r3, #0
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d10a      	bne.n	800c546 <xQueueReceive+0x5e>
	__asm volatile
 800c530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c534:	f383 8811 	msr	BASEPRI, r3
 800c538:	f3bf 8f6f 	isb	sy
 800c53c:	f3bf 8f4f 	dsb	sy
 800c540:	61fb      	str	r3, [r7, #28]
}
 800c542:	bf00      	nop
 800c544:	e7fe      	b.n	800c544 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c546:	f001 f975 	bl	800d834 <xTaskGetSchedulerState>
 800c54a:	4603      	mov	r3, r0
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d102      	bne.n	800c556 <xQueueReceive+0x6e>
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d101      	bne.n	800c55a <xQueueReceive+0x72>
 800c556:	2301      	movs	r3, #1
 800c558:	e000      	b.n	800c55c <xQueueReceive+0x74>
 800c55a:	2300      	movs	r3, #0
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d10a      	bne.n	800c576 <xQueueReceive+0x8e>
	__asm volatile
 800c560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c564:	f383 8811 	msr	BASEPRI, r3
 800c568:	f3bf 8f6f 	isb	sy
 800c56c:	f3bf 8f4f 	dsb	sy
 800c570:	61bb      	str	r3, [r7, #24]
}
 800c572:	bf00      	nop
 800c574:	e7fe      	b.n	800c574 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c576:	f001 fcad 	bl	800ded4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c57c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c57e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c582:	2b00      	cmp	r3, #0
 800c584:	d01f      	beq.n	800c5c6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c586:	68b9      	ldr	r1, [r7, #8]
 800c588:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c58a:	f000 fa9b 	bl	800cac4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c590:	1e5a      	subs	r2, r3, #1
 800c592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c594:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c598:	691b      	ldr	r3, [r3, #16]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d00f      	beq.n	800c5be <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a0:	3310      	adds	r3, #16
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f000 ff86 	bl	800d4b4 <xTaskRemoveFromEventList>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d007      	beq.n	800c5be <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c5ae:	4b3d      	ldr	r3, [pc, #244]	; (800c6a4 <xQueueReceive+0x1bc>)
 800c5b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5b4:	601a      	str	r2, [r3, #0]
 800c5b6:	f3bf 8f4f 	dsb	sy
 800c5ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c5be:	f001 fcb9 	bl	800df34 <vPortExitCritical>
				return pdPASS;
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	e069      	b.n	800c69a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d103      	bne.n	800c5d4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c5cc:	f001 fcb2 	bl	800df34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	e062      	b.n	800c69a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d106      	bne.n	800c5e8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c5da:	f107 0310 	add.w	r3, r7, #16
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f000 ffca 	bl	800d578 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c5e8:	f001 fca4 	bl	800df34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c5ec:	f000 fd58 	bl	800d0a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c5f0:	f001 fc70 	bl	800ded4 <vPortEnterCritical>
 800c5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c5fa:	b25b      	sxtb	r3, r3
 800c5fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c600:	d103      	bne.n	800c60a <xQueueReceive+0x122>
 800c602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c604:	2200      	movs	r2, #0
 800c606:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c60c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c610:	b25b      	sxtb	r3, r3
 800c612:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c616:	d103      	bne.n	800c620 <xQueueReceive+0x138>
 800c618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c61a:	2200      	movs	r2, #0
 800c61c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c620:	f001 fc88 	bl	800df34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c624:	1d3a      	adds	r2, r7, #4
 800c626:	f107 0310 	add.w	r3, r7, #16
 800c62a:	4611      	mov	r1, r2
 800c62c:	4618      	mov	r0, r3
 800c62e:	f000 ffb9 	bl	800d5a4 <xTaskCheckForTimeOut>
 800c632:	4603      	mov	r3, r0
 800c634:	2b00      	cmp	r3, #0
 800c636:	d123      	bne.n	800c680 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c63a:	f000 fabb 	bl	800cbb4 <prvIsQueueEmpty>
 800c63e:	4603      	mov	r3, r0
 800c640:	2b00      	cmp	r3, #0
 800c642:	d017      	beq.n	800c674 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c646:	3324      	adds	r3, #36	; 0x24
 800c648:	687a      	ldr	r2, [r7, #4]
 800c64a:	4611      	mov	r1, r2
 800c64c:	4618      	mov	r0, r3
 800c64e:	f000 ff0d 	bl	800d46c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c654:	f000 fa5c 	bl	800cb10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c658:	f000 fd30 	bl	800d0bc <xTaskResumeAll>
 800c65c:	4603      	mov	r3, r0
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d189      	bne.n	800c576 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c662:	4b10      	ldr	r3, [pc, #64]	; (800c6a4 <xQueueReceive+0x1bc>)
 800c664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c668:	601a      	str	r2, [r3, #0]
 800c66a:	f3bf 8f4f 	dsb	sy
 800c66e:	f3bf 8f6f 	isb	sy
 800c672:	e780      	b.n	800c576 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c676:	f000 fa4b 	bl	800cb10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c67a:	f000 fd1f 	bl	800d0bc <xTaskResumeAll>
 800c67e:	e77a      	b.n	800c576 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c680:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c682:	f000 fa45 	bl	800cb10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c686:	f000 fd19 	bl	800d0bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c68a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c68c:	f000 fa92 	bl	800cbb4 <prvIsQueueEmpty>
 800c690:	4603      	mov	r3, r0
 800c692:	2b00      	cmp	r3, #0
 800c694:	f43f af6f 	beq.w	800c576 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c698:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3730      	adds	r7, #48	; 0x30
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}
 800c6a2:	bf00      	nop
 800c6a4:	e000ed04 	.word	0xe000ed04

0800c6a8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b08e      	sub	sp, #56	; 0x38
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d10a      	bne.n	800c6da <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c8:	f383 8811 	msr	BASEPRI, r3
 800c6cc:	f3bf 8f6f 	isb	sy
 800c6d0:	f3bf 8f4f 	dsb	sy
 800c6d4:	623b      	str	r3, [r7, #32]
}
 800c6d6:	bf00      	nop
 800c6d8:	e7fe      	b.n	800c6d8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d00a      	beq.n	800c6f8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e6:	f383 8811 	msr	BASEPRI, r3
 800c6ea:	f3bf 8f6f 	isb	sy
 800c6ee:	f3bf 8f4f 	dsb	sy
 800c6f2:	61fb      	str	r3, [r7, #28]
}
 800c6f4:	bf00      	nop
 800c6f6:	e7fe      	b.n	800c6f6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c6f8:	f001 f89c 	bl	800d834 <xTaskGetSchedulerState>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d102      	bne.n	800c708 <xQueueSemaphoreTake+0x60>
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d101      	bne.n	800c70c <xQueueSemaphoreTake+0x64>
 800c708:	2301      	movs	r3, #1
 800c70a:	e000      	b.n	800c70e <xQueueSemaphoreTake+0x66>
 800c70c:	2300      	movs	r3, #0
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d10a      	bne.n	800c728 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c716:	f383 8811 	msr	BASEPRI, r3
 800c71a:	f3bf 8f6f 	isb	sy
 800c71e:	f3bf 8f4f 	dsb	sy
 800c722:	61bb      	str	r3, [r7, #24]
}
 800c724:	bf00      	nop
 800c726:	e7fe      	b.n	800c726 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c728:	f001 fbd4 	bl	800ded4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c72e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c730:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c734:	2b00      	cmp	r3, #0
 800c736:	d024      	beq.n	800c782 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73a:	1e5a      	subs	r2, r3, #1
 800c73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c73e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d104      	bne.n	800c752 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c748:	f001 fa1c 	bl	800db84 <pvTaskIncrementMutexHeldCount>
 800c74c:	4602      	mov	r2, r0
 800c74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c750:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c754:	691b      	ldr	r3, [r3, #16]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d00f      	beq.n	800c77a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c75c:	3310      	adds	r3, #16
 800c75e:	4618      	mov	r0, r3
 800c760:	f000 fea8 	bl	800d4b4 <xTaskRemoveFromEventList>
 800c764:	4603      	mov	r3, r0
 800c766:	2b00      	cmp	r3, #0
 800c768:	d007      	beq.n	800c77a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c76a:	4b54      	ldr	r3, [pc, #336]	; (800c8bc <xQueueSemaphoreTake+0x214>)
 800c76c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c770:	601a      	str	r2, [r3, #0]
 800c772:	f3bf 8f4f 	dsb	sy
 800c776:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c77a:	f001 fbdb 	bl	800df34 <vPortExitCritical>
				return pdPASS;
 800c77e:	2301      	movs	r3, #1
 800c780:	e097      	b.n	800c8b2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d111      	bne.n	800c7ac <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d00a      	beq.n	800c7a4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c792:	f383 8811 	msr	BASEPRI, r3
 800c796:	f3bf 8f6f 	isb	sy
 800c79a:	f3bf 8f4f 	dsb	sy
 800c79e:	617b      	str	r3, [r7, #20]
}
 800c7a0:	bf00      	nop
 800c7a2:	e7fe      	b.n	800c7a2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c7a4:	f001 fbc6 	bl	800df34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	e082      	b.n	800c8b2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c7ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d106      	bne.n	800c7c0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c7b2:	f107 030c 	add.w	r3, r7, #12
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f000 fede 	bl	800d578 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c7bc:	2301      	movs	r3, #1
 800c7be:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c7c0:	f001 fbb8 	bl	800df34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c7c4:	f000 fc6c 	bl	800d0a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c7c8:	f001 fb84 	bl	800ded4 <vPortEnterCritical>
 800c7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c7d2:	b25b      	sxtb	r3, r3
 800c7d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7d8:	d103      	bne.n	800c7e2 <xQueueSemaphoreTake+0x13a>
 800c7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7dc:	2200      	movs	r2, #0
 800c7de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7e8:	b25b      	sxtb	r3, r3
 800c7ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ee:	d103      	bne.n	800c7f8 <xQueueSemaphoreTake+0x150>
 800c7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c7f8:	f001 fb9c 	bl	800df34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c7fc:	463a      	mov	r2, r7
 800c7fe:	f107 030c 	add.w	r3, r7, #12
 800c802:	4611      	mov	r1, r2
 800c804:	4618      	mov	r0, r3
 800c806:	f000 fecd 	bl	800d5a4 <xTaskCheckForTimeOut>
 800c80a:	4603      	mov	r3, r0
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d132      	bne.n	800c876 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c810:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c812:	f000 f9cf 	bl	800cbb4 <prvIsQueueEmpty>
 800c816:	4603      	mov	r3, r0
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d026      	beq.n	800c86a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d109      	bne.n	800c838 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c824:	f001 fb56 	bl	800ded4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c82a:	689b      	ldr	r3, [r3, #8]
 800c82c:	4618      	mov	r0, r3
 800c82e:	f001 f81f 	bl	800d870 <xTaskPriorityInherit>
 800c832:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c834:	f001 fb7e 	bl	800df34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83a:	3324      	adds	r3, #36	; 0x24
 800c83c:	683a      	ldr	r2, [r7, #0]
 800c83e:	4611      	mov	r1, r2
 800c840:	4618      	mov	r0, r3
 800c842:	f000 fe13 	bl	800d46c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c846:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c848:	f000 f962 	bl	800cb10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c84c:	f000 fc36 	bl	800d0bc <xTaskResumeAll>
 800c850:	4603      	mov	r3, r0
 800c852:	2b00      	cmp	r3, #0
 800c854:	f47f af68 	bne.w	800c728 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c858:	4b18      	ldr	r3, [pc, #96]	; (800c8bc <xQueueSemaphoreTake+0x214>)
 800c85a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c85e:	601a      	str	r2, [r3, #0]
 800c860:	f3bf 8f4f 	dsb	sy
 800c864:	f3bf 8f6f 	isb	sy
 800c868:	e75e      	b.n	800c728 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c86a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c86c:	f000 f950 	bl	800cb10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c870:	f000 fc24 	bl	800d0bc <xTaskResumeAll>
 800c874:	e758      	b.n	800c728 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c876:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c878:	f000 f94a 	bl	800cb10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c87c:	f000 fc1e 	bl	800d0bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c880:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c882:	f000 f997 	bl	800cbb4 <prvIsQueueEmpty>
 800c886:	4603      	mov	r3, r0
 800c888:	2b00      	cmp	r3, #0
 800c88a:	f43f af4d 	beq.w	800c728 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c890:	2b00      	cmp	r3, #0
 800c892:	d00d      	beq.n	800c8b0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c894:	f001 fb1e 	bl	800ded4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c898:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c89a:	f000 f891 	bl	800c9c0 <prvGetDisinheritPriorityAfterTimeout>
 800c89e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8a2:	689b      	ldr	r3, [r3, #8]
 800c8a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f001 f8de 	bl	800da68 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c8ac:	f001 fb42 	bl	800df34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c8b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3738      	adds	r7, #56	; 0x38
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}
 800c8ba:	bf00      	nop
 800c8bc:	e000ed04 	.word	0xe000ed04

0800c8c0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b08e      	sub	sp, #56	; 0x38
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	60f8      	str	r0, [r7, #12]
 800c8c8:	60b9      	str	r1, [r7, #8]
 800c8ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d10a      	bne.n	800c8ec <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8da:	f383 8811 	msr	BASEPRI, r3
 800c8de:	f3bf 8f6f 	isb	sy
 800c8e2:	f3bf 8f4f 	dsb	sy
 800c8e6:	623b      	str	r3, [r7, #32]
}
 800c8e8:	bf00      	nop
 800c8ea:	e7fe      	b.n	800c8ea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c8ec:	68bb      	ldr	r3, [r7, #8]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d103      	bne.n	800c8fa <xQueueReceiveFromISR+0x3a>
 800c8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d101      	bne.n	800c8fe <xQueueReceiveFromISR+0x3e>
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	e000      	b.n	800c900 <xQueueReceiveFromISR+0x40>
 800c8fe:	2300      	movs	r3, #0
 800c900:	2b00      	cmp	r3, #0
 800c902:	d10a      	bne.n	800c91a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c908:	f383 8811 	msr	BASEPRI, r3
 800c90c:	f3bf 8f6f 	isb	sy
 800c910:	f3bf 8f4f 	dsb	sy
 800c914:	61fb      	str	r3, [r7, #28]
}
 800c916:	bf00      	nop
 800c918:	e7fe      	b.n	800c918 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c91a:	f001 fbbd 	bl	800e098 <vPortValidateInterruptPriority>
	__asm volatile
 800c91e:	f3ef 8211 	mrs	r2, BASEPRI
 800c922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c926:	f383 8811 	msr	BASEPRI, r3
 800c92a:	f3bf 8f6f 	isb	sy
 800c92e:	f3bf 8f4f 	dsb	sy
 800c932:	61ba      	str	r2, [r7, #24]
 800c934:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c936:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c938:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c93c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c93e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c942:	2b00      	cmp	r3, #0
 800c944:	d02f      	beq.n	800c9a6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c948:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c94c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c950:	68b9      	ldr	r1, [r7, #8]
 800c952:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c954:	f000 f8b6 	bl	800cac4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c95a:	1e5a      	subs	r2, r3, #1
 800c95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c95e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c960:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c964:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c968:	d112      	bne.n	800c990 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c96c:	691b      	ldr	r3, [r3, #16]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d016      	beq.n	800c9a0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c974:	3310      	adds	r3, #16
 800c976:	4618      	mov	r0, r3
 800c978:	f000 fd9c 	bl	800d4b4 <xTaskRemoveFromEventList>
 800c97c:	4603      	mov	r3, r0
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d00e      	beq.n	800c9a0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d00b      	beq.n	800c9a0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2201      	movs	r2, #1
 800c98c:	601a      	str	r2, [r3, #0]
 800c98e:	e007      	b.n	800c9a0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c994:	3301      	adds	r3, #1
 800c996:	b2db      	uxtb	r3, r3
 800c998:	b25a      	sxtb	r2, r3
 800c99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c99c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	637b      	str	r3, [r7, #52]	; 0x34
 800c9a4:	e001      	b.n	800c9aa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	637b      	str	r3, [r7, #52]	; 0x34
 800c9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ac:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	f383 8811 	msr	BASEPRI, r3
}
 800c9b4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c9b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3738      	adds	r7, #56	; 0x38
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b085      	sub	sp, #20
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d006      	beq.n	800c9de <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f1c3 0307 	rsb	r3, r3, #7
 800c9da:	60fb      	str	r3, [r7, #12]
 800c9dc:	e001      	b.n	800c9e2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
	}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3714      	adds	r7, #20
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr

0800c9f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b086      	sub	sp, #24
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	60f8      	str	r0, [r7, #12]
 800c9f8:	60b9      	str	r1, [r7, #8]
 800c9fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca04:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d10d      	bne.n	800ca2a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d14d      	bne.n	800cab2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	689b      	ldr	r3, [r3, #8]
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f000 ff9e 	bl	800d95c <xTaskPriorityDisinherit>
 800ca20:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	2200      	movs	r2, #0
 800ca26:	609a      	str	r2, [r3, #8]
 800ca28:	e043      	b.n	800cab2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d119      	bne.n	800ca64 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	6858      	ldr	r0, [r3, #4]
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca38:	461a      	mov	r2, r3
 800ca3a:	68b9      	ldr	r1, [r7, #8]
 800ca3c:	f00c ff89 	bl	8019952 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	685a      	ldr	r2, [r3, #4]
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca48:	441a      	add	r2, r3
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	685a      	ldr	r2, [r3, #4]
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	689b      	ldr	r3, [r3, #8]
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d32b      	bcc.n	800cab2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	681a      	ldr	r2, [r3, #0]
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	605a      	str	r2, [r3, #4]
 800ca62:	e026      	b.n	800cab2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	68d8      	ldr	r0, [r3, #12]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca6c:	461a      	mov	r2, r3
 800ca6e:	68b9      	ldr	r1, [r7, #8]
 800ca70:	f00c ff6f 	bl	8019952 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	68da      	ldr	r2, [r3, #12]
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca7c:	425b      	negs	r3, r3
 800ca7e:	441a      	add	r2, r3
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	68da      	ldr	r2, [r3, #12]
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	429a      	cmp	r2, r3
 800ca8e:	d207      	bcs.n	800caa0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	689a      	ldr	r2, [r3, #8]
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca98:	425b      	negs	r3, r3
 800ca9a:	441a      	add	r2, r3
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2b02      	cmp	r3, #2
 800caa4:	d105      	bne.n	800cab2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800caa6:	693b      	ldr	r3, [r7, #16]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d002      	beq.n	800cab2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	3b01      	subs	r3, #1
 800cab0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cab2:	693b      	ldr	r3, [r7, #16]
 800cab4:	1c5a      	adds	r2, r3, #1
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800caba:	697b      	ldr	r3, [r7, #20]
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3718      	adds	r7, #24
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}

0800cac4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b082      	sub	sp, #8
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
 800cacc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d018      	beq.n	800cb08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	68da      	ldr	r2, [r3, #12]
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cade:	441a      	add	r2, r3
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	68da      	ldr	r2, [r3, #12]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	689b      	ldr	r3, [r3, #8]
 800caec:	429a      	cmp	r2, r3
 800caee:	d303      	bcc.n	800caf8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681a      	ldr	r2, [r3, #0]
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	68d9      	ldr	r1, [r3, #12]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb00:	461a      	mov	r2, r3
 800cb02:	6838      	ldr	r0, [r7, #0]
 800cb04:	f00c ff25 	bl	8019952 <memcpy>
	}
}
 800cb08:	bf00      	nop
 800cb0a:	3708      	adds	r7, #8
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}

0800cb10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b084      	sub	sp, #16
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cb18:	f001 f9dc 	bl	800ded4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cb24:	e011      	b.n	800cb4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d012      	beq.n	800cb54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	3324      	adds	r3, #36	; 0x24
 800cb32:	4618      	mov	r0, r3
 800cb34:	f000 fcbe 	bl	800d4b4 <xTaskRemoveFromEventList>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d001      	beq.n	800cb42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cb3e:	f000 fd93 	bl	800d668 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cb42:	7bfb      	ldrb	r3, [r7, #15]
 800cb44:	3b01      	subs	r3, #1
 800cb46:	b2db      	uxtb	r3, r3
 800cb48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cb4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	dce9      	bgt.n	800cb26 <prvUnlockQueue+0x16>
 800cb52:	e000      	b.n	800cb56 <prvUnlockQueue+0x46>
					break;
 800cb54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	22ff      	movs	r2, #255	; 0xff
 800cb5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cb5e:	f001 f9e9 	bl	800df34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cb62:	f001 f9b7 	bl	800ded4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb6e:	e011      	b.n	800cb94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	691b      	ldr	r3, [r3, #16]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d012      	beq.n	800cb9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	3310      	adds	r3, #16
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f000 fc99 	bl	800d4b4 <xTaskRemoveFromEventList>
 800cb82:	4603      	mov	r3, r0
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d001      	beq.n	800cb8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cb88:	f000 fd6e 	bl	800d668 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cb8c:	7bbb      	ldrb	r3, [r7, #14]
 800cb8e:	3b01      	subs	r3, #1
 800cb90:	b2db      	uxtb	r3, r3
 800cb92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	dce9      	bgt.n	800cb70 <prvUnlockQueue+0x60>
 800cb9c:	e000      	b.n	800cba0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cb9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	22ff      	movs	r2, #255	; 0xff
 800cba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cba8:	f001 f9c4 	bl	800df34 <vPortExitCritical>
}
 800cbac:	bf00      	nop
 800cbae:	3710      	adds	r7, #16
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}

0800cbb4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b084      	sub	sp, #16
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cbbc:	f001 f98a 	bl	800ded4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d102      	bne.n	800cbce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cbc8:	2301      	movs	r3, #1
 800cbca:	60fb      	str	r3, [r7, #12]
 800cbcc:	e001      	b.n	800cbd2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cbce:	2300      	movs	r3, #0
 800cbd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cbd2:	f001 f9af 	bl	800df34 <vPortExitCritical>

	return xReturn;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	3710      	adds	r7, #16
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}

0800cbe0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b084      	sub	sp, #16
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cbe8:	f001 f974 	bl	800ded4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	d102      	bne.n	800cbfe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	60fb      	str	r3, [r7, #12]
 800cbfc:	e001      	b.n	800cc02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cc02:	f001 f997 	bl	800df34 <vPortExitCritical>

	return xReturn;
 800cc06:	68fb      	ldr	r3, [r7, #12]
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3710      	adds	r7, #16
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b08e      	sub	sp, #56	; 0x38
 800cc14:	af04      	add	r7, sp, #16
 800cc16:	60f8      	str	r0, [r7, #12]
 800cc18:	60b9      	str	r1, [r7, #8]
 800cc1a:	607a      	str	r2, [r7, #4]
 800cc1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cc1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d10a      	bne.n	800cc3a <xTaskCreateStatic+0x2a>
	__asm volatile
 800cc24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc28:	f383 8811 	msr	BASEPRI, r3
 800cc2c:	f3bf 8f6f 	isb	sy
 800cc30:	f3bf 8f4f 	dsb	sy
 800cc34:	623b      	str	r3, [r7, #32]
}
 800cc36:	bf00      	nop
 800cc38:	e7fe      	b.n	800cc38 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cc3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d10a      	bne.n	800cc56 <xTaskCreateStatic+0x46>
	__asm volatile
 800cc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc44:	f383 8811 	msr	BASEPRI, r3
 800cc48:	f3bf 8f6f 	isb	sy
 800cc4c:	f3bf 8f4f 	dsb	sy
 800cc50:	61fb      	str	r3, [r7, #28]
}
 800cc52:	bf00      	nop
 800cc54:	e7fe      	b.n	800cc54 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cc56:	23b4      	movs	r3, #180	; 0xb4
 800cc58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cc5a:	693b      	ldr	r3, [r7, #16]
 800cc5c:	2bb4      	cmp	r3, #180	; 0xb4
 800cc5e:	d00a      	beq.n	800cc76 <xTaskCreateStatic+0x66>
	__asm volatile
 800cc60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc64:	f383 8811 	msr	BASEPRI, r3
 800cc68:	f3bf 8f6f 	isb	sy
 800cc6c:	f3bf 8f4f 	dsb	sy
 800cc70:	61bb      	str	r3, [r7, #24]
}
 800cc72:	bf00      	nop
 800cc74:	e7fe      	b.n	800cc74 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cc76:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cc78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d01e      	beq.n	800ccbc <xTaskCreateStatic+0xac>
 800cc7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d01b      	beq.n	800ccbc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cc84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc86:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc8c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cc8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc90:	2202      	movs	r2, #2
 800cc92:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cc96:	2300      	movs	r3, #0
 800cc98:	9303      	str	r3, [sp, #12]
 800cc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc9c:	9302      	str	r3, [sp, #8]
 800cc9e:	f107 0314 	add.w	r3, r7, #20
 800cca2:	9301      	str	r3, [sp, #4]
 800cca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca6:	9300      	str	r3, [sp, #0]
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	687a      	ldr	r2, [r7, #4]
 800ccac:	68b9      	ldr	r1, [r7, #8]
 800ccae:	68f8      	ldr	r0, [r7, #12]
 800ccb0:	f000 f850 	bl	800cd54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ccb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ccb6:	f000 f8eb 	bl	800ce90 <prvAddNewTaskToReadyList>
 800ccba:	e001      	b.n	800ccc0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ccc0:	697b      	ldr	r3, [r7, #20]
	}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3728      	adds	r7, #40	; 0x28
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}

0800ccca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ccca:	b580      	push	{r7, lr}
 800cccc:	b08c      	sub	sp, #48	; 0x30
 800ccce:	af04      	add	r7, sp, #16
 800ccd0:	60f8      	str	r0, [r7, #12]
 800ccd2:	60b9      	str	r1, [r7, #8]
 800ccd4:	603b      	str	r3, [r7, #0]
 800ccd6:	4613      	mov	r3, r2
 800ccd8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ccda:	88fb      	ldrh	r3, [r7, #6]
 800ccdc:	009b      	lsls	r3, r3, #2
 800ccde:	4618      	mov	r0, r3
 800cce0:	f001 fa1a 	bl	800e118 <pvPortMalloc>
 800cce4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d00e      	beq.n	800cd0a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ccec:	20b4      	movs	r0, #180	; 0xb4
 800ccee:	f001 fa13 	bl	800e118 <pvPortMalloc>
 800ccf2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ccf4:	69fb      	ldr	r3, [r7, #28]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d003      	beq.n	800cd02 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ccfa:	69fb      	ldr	r3, [r7, #28]
 800ccfc:	697a      	ldr	r2, [r7, #20]
 800ccfe:	631a      	str	r2, [r3, #48]	; 0x30
 800cd00:	e005      	b.n	800cd0e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cd02:	6978      	ldr	r0, [r7, #20]
 800cd04:	f001 fad4 	bl	800e2b0 <vPortFree>
 800cd08:	e001      	b.n	800cd0e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cd0e:	69fb      	ldr	r3, [r7, #28]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d017      	beq.n	800cd44 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cd14:	69fb      	ldr	r3, [r7, #28]
 800cd16:	2200      	movs	r2, #0
 800cd18:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cd1c:	88fa      	ldrh	r2, [r7, #6]
 800cd1e:	2300      	movs	r3, #0
 800cd20:	9303      	str	r3, [sp, #12]
 800cd22:	69fb      	ldr	r3, [r7, #28]
 800cd24:	9302      	str	r3, [sp, #8]
 800cd26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd28:	9301      	str	r3, [sp, #4]
 800cd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd2c:	9300      	str	r3, [sp, #0]
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	68b9      	ldr	r1, [r7, #8]
 800cd32:	68f8      	ldr	r0, [r7, #12]
 800cd34:	f000 f80e 	bl	800cd54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cd38:	69f8      	ldr	r0, [r7, #28]
 800cd3a:	f000 f8a9 	bl	800ce90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cd3e:	2301      	movs	r3, #1
 800cd40:	61bb      	str	r3, [r7, #24]
 800cd42:	e002      	b.n	800cd4a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cd44:	f04f 33ff 	mov.w	r3, #4294967295
 800cd48:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cd4a:	69bb      	ldr	r3, [r7, #24]
	}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3720      	adds	r7, #32
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}

0800cd54 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b088      	sub	sp, #32
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	60f8      	str	r0, [r7, #12]
 800cd5c:	60b9      	str	r1, [r7, #8]
 800cd5e:	607a      	str	r2, [r7, #4]
 800cd60:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd66:	6879      	ldr	r1, [r7, #4]
 800cd68:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800cd6c:	440b      	add	r3, r1
 800cd6e:	009b      	lsls	r3, r3, #2
 800cd70:	4413      	add	r3, r2
 800cd72:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cd74:	69bb      	ldr	r3, [r7, #24]
 800cd76:	f023 0307 	bic.w	r3, r3, #7
 800cd7a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cd7c:	69bb      	ldr	r3, [r7, #24]
 800cd7e:	f003 0307 	and.w	r3, r3, #7
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d00a      	beq.n	800cd9c <prvInitialiseNewTask+0x48>
	__asm volatile
 800cd86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd8a:	f383 8811 	msr	BASEPRI, r3
 800cd8e:	f3bf 8f6f 	isb	sy
 800cd92:	f3bf 8f4f 	dsb	sy
 800cd96:	617b      	str	r3, [r7, #20]
}
 800cd98:	bf00      	nop
 800cd9a:	e7fe      	b.n	800cd9a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d01f      	beq.n	800cde2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cda2:	2300      	movs	r3, #0
 800cda4:	61fb      	str	r3, [r7, #28]
 800cda6:	e012      	b.n	800cdce <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cda8:	68ba      	ldr	r2, [r7, #8]
 800cdaa:	69fb      	ldr	r3, [r7, #28]
 800cdac:	4413      	add	r3, r2
 800cdae:	7819      	ldrb	r1, [r3, #0]
 800cdb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdb2:	69fb      	ldr	r3, [r7, #28]
 800cdb4:	4413      	add	r3, r2
 800cdb6:	3334      	adds	r3, #52	; 0x34
 800cdb8:	460a      	mov	r2, r1
 800cdba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cdbc:	68ba      	ldr	r2, [r7, #8]
 800cdbe:	69fb      	ldr	r3, [r7, #28]
 800cdc0:	4413      	add	r3, r2
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d006      	beq.n	800cdd6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cdc8:	69fb      	ldr	r3, [r7, #28]
 800cdca:	3301      	adds	r3, #1
 800cdcc:	61fb      	str	r3, [r7, #28]
 800cdce:	69fb      	ldr	r3, [r7, #28]
 800cdd0:	2b0f      	cmp	r3, #15
 800cdd2:	d9e9      	bls.n	800cda8 <prvInitialiseNewTask+0x54>
 800cdd4:	e000      	b.n	800cdd8 <prvInitialiseNewTask+0x84>
			{
				break;
 800cdd6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cdd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdda:	2200      	movs	r2, #0
 800cddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cde0:	e003      	b.n	800cdea <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde4:	2200      	movs	r2, #0
 800cde6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cdea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdec:	2b06      	cmp	r3, #6
 800cdee:	d901      	bls.n	800cdf4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cdf0:	2306      	movs	r3, #6
 800cdf2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cdf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdf8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdfe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ce00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce02:	2200      	movs	r2, #0
 800ce04:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ce06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce08:	3304      	adds	r3, #4
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f7fe ff2c 	bl	800bc68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ce10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce12:	3318      	adds	r3, #24
 800ce14:	4618      	mov	r0, r3
 800ce16:	f7fe ff27 	bl	800bc68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ce1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce22:	f1c3 0207 	rsb	r2, r3, #7
 800ce26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ce2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce2e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ce30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce32:	2200      	movs	r2, #0
 800ce34:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ce38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ce40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce42:	334c      	adds	r3, #76	; 0x4c
 800ce44:	2260      	movs	r2, #96	; 0x60
 800ce46:	2100      	movs	r1, #0
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f00c fd90 	bl	801996e <memset>
 800ce4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce50:	4a0c      	ldr	r2, [pc, #48]	; (800ce84 <prvInitialiseNewTask+0x130>)
 800ce52:	651a      	str	r2, [r3, #80]	; 0x50
 800ce54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce56:	4a0c      	ldr	r2, [pc, #48]	; (800ce88 <prvInitialiseNewTask+0x134>)
 800ce58:	655a      	str	r2, [r3, #84]	; 0x54
 800ce5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce5c:	4a0b      	ldr	r2, [pc, #44]	; (800ce8c <prvInitialiseNewTask+0x138>)
 800ce5e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ce60:	683a      	ldr	r2, [r7, #0]
 800ce62:	68f9      	ldr	r1, [r7, #12]
 800ce64:	69b8      	ldr	r0, [r7, #24]
 800ce66:	f000 ff07 	bl	800dc78 <pxPortInitialiseStack>
 800ce6a:	4602      	mov	r2, r0
 800ce6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce6e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ce70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d002      	beq.n	800ce7c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ce76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce7a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce7c:	bf00      	nop
 800ce7e:	3720      	adds	r7, #32
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}
 800ce84:	0801defc 	.word	0x0801defc
 800ce88:	0801df1c 	.word	0x0801df1c
 800ce8c:	0801dedc 	.word	0x0801dedc

0800ce90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b082      	sub	sp, #8
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ce98:	f001 f81c 	bl	800ded4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ce9c:	4b2a      	ldr	r3, [pc, #168]	; (800cf48 <prvAddNewTaskToReadyList+0xb8>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	3301      	adds	r3, #1
 800cea2:	4a29      	ldr	r2, [pc, #164]	; (800cf48 <prvAddNewTaskToReadyList+0xb8>)
 800cea4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cea6:	4b29      	ldr	r3, [pc, #164]	; (800cf4c <prvAddNewTaskToReadyList+0xbc>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d109      	bne.n	800cec2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ceae:	4a27      	ldr	r2, [pc, #156]	; (800cf4c <prvAddNewTaskToReadyList+0xbc>)
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ceb4:	4b24      	ldr	r3, [pc, #144]	; (800cf48 <prvAddNewTaskToReadyList+0xb8>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	d110      	bne.n	800cede <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cebc:	f000 fbf8 	bl	800d6b0 <prvInitialiseTaskLists>
 800cec0:	e00d      	b.n	800cede <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cec2:	4b23      	ldr	r3, [pc, #140]	; (800cf50 <prvAddNewTaskToReadyList+0xc0>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d109      	bne.n	800cede <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ceca:	4b20      	ldr	r3, [pc, #128]	; (800cf4c <prvAddNewTaskToReadyList+0xbc>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d802      	bhi.n	800cede <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ced8:	4a1c      	ldr	r2, [pc, #112]	; (800cf4c <prvAddNewTaskToReadyList+0xbc>)
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cede:	4b1d      	ldr	r3, [pc, #116]	; (800cf54 <prvAddNewTaskToReadyList+0xc4>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	3301      	adds	r3, #1
 800cee4:	4a1b      	ldr	r2, [pc, #108]	; (800cf54 <prvAddNewTaskToReadyList+0xc4>)
 800cee6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceec:	2201      	movs	r2, #1
 800ceee:	409a      	lsls	r2, r3
 800cef0:	4b19      	ldr	r3, [pc, #100]	; (800cf58 <prvAddNewTaskToReadyList+0xc8>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	4313      	orrs	r3, r2
 800cef6:	4a18      	ldr	r2, [pc, #96]	; (800cf58 <prvAddNewTaskToReadyList+0xc8>)
 800cef8:	6013      	str	r3, [r2, #0]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cefe:	4613      	mov	r3, r2
 800cf00:	009b      	lsls	r3, r3, #2
 800cf02:	4413      	add	r3, r2
 800cf04:	009b      	lsls	r3, r3, #2
 800cf06:	4a15      	ldr	r2, [pc, #84]	; (800cf5c <prvAddNewTaskToReadyList+0xcc>)
 800cf08:	441a      	add	r2, r3
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	3304      	adds	r3, #4
 800cf0e:	4619      	mov	r1, r3
 800cf10:	4610      	mov	r0, r2
 800cf12:	f7fe feb6 	bl	800bc82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cf16:	f001 f80d 	bl	800df34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cf1a:	4b0d      	ldr	r3, [pc, #52]	; (800cf50 <prvAddNewTaskToReadyList+0xc0>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d00e      	beq.n	800cf40 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cf22:	4b0a      	ldr	r3, [pc, #40]	; (800cf4c <prvAddNewTaskToReadyList+0xbc>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf2c:	429a      	cmp	r2, r3
 800cf2e:	d207      	bcs.n	800cf40 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cf30:	4b0b      	ldr	r3, [pc, #44]	; (800cf60 <prvAddNewTaskToReadyList+0xd0>)
 800cf32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf36:	601a      	str	r2, [r3, #0]
 800cf38:	f3bf 8f4f 	dsb	sy
 800cf3c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf40:	bf00      	nop
 800cf42:	3708      	adds	r7, #8
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}
 800cf48:	2400047c 	.word	0x2400047c
 800cf4c:	2400037c 	.word	0x2400037c
 800cf50:	24000488 	.word	0x24000488
 800cf54:	24000498 	.word	0x24000498
 800cf58:	24000484 	.word	0x24000484
 800cf5c:	24000380 	.word	0x24000380
 800cf60:	e000ed04 	.word	0xe000ed04

0800cf64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b084      	sub	sp, #16
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d017      	beq.n	800cfa6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cf76:	4b13      	ldr	r3, [pc, #76]	; (800cfc4 <vTaskDelay+0x60>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d00a      	beq.n	800cf94 <vTaskDelay+0x30>
	__asm volatile
 800cf7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf82:	f383 8811 	msr	BASEPRI, r3
 800cf86:	f3bf 8f6f 	isb	sy
 800cf8a:	f3bf 8f4f 	dsb	sy
 800cf8e:	60bb      	str	r3, [r7, #8]
}
 800cf90:	bf00      	nop
 800cf92:	e7fe      	b.n	800cf92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cf94:	f000 f884 	bl	800d0a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cf98:	2100      	movs	r1, #0
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f000 fe06 	bl	800dbac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cfa0:	f000 f88c 	bl	800d0bc <xTaskResumeAll>
 800cfa4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d107      	bne.n	800cfbc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cfac:	4b06      	ldr	r3, [pc, #24]	; (800cfc8 <vTaskDelay+0x64>)
 800cfae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfb2:	601a      	str	r2, [r3, #0]
 800cfb4:	f3bf 8f4f 	dsb	sy
 800cfb8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cfbc:	bf00      	nop
 800cfbe:	3710      	adds	r7, #16
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}
 800cfc4:	240004a4 	.word	0x240004a4
 800cfc8:	e000ed04 	.word	0xe000ed04

0800cfcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b08a      	sub	sp, #40	; 0x28
 800cfd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cfda:	463a      	mov	r2, r7
 800cfdc:	1d39      	adds	r1, r7, #4
 800cfde:	f107 0308 	add.w	r3, r7, #8
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f7f4 f860 	bl	80010a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cfe8:	6839      	ldr	r1, [r7, #0]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	68ba      	ldr	r2, [r7, #8]
 800cfee:	9202      	str	r2, [sp, #8]
 800cff0:	9301      	str	r3, [sp, #4]
 800cff2:	2300      	movs	r3, #0
 800cff4:	9300      	str	r3, [sp, #0]
 800cff6:	2300      	movs	r3, #0
 800cff8:	460a      	mov	r2, r1
 800cffa:	4921      	ldr	r1, [pc, #132]	; (800d080 <vTaskStartScheduler+0xb4>)
 800cffc:	4821      	ldr	r0, [pc, #132]	; (800d084 <vTaskStartScheduler+0xb8>)
 800cffe:	f7ff fe07 	bl	800cc10 <xTaskCreateStatic>
 800d002:	4603      	mov	r3, r0
 800d004:	4a20      	ldr	r2, [pc, #128]	; (800d088 <vTaskStartScheduler+0xbc>)
 800d006:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d008:	4b1f      	ldr	r3, [pc, #124]	; (800d088 <vTaskStartScheduler+0xbc>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d002      	beq.n	800d016 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d010:	2301      	movs	r3, #1
 800d012:	617b      	str	r3, [r7, #20]
 800d014:	e001      	b.n	800d01a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d016:	2300      	movs	r3, #0
 800d018:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	2b01      	cmp	r3, #1
 800d01e:	d11b      	bne.n	800d058 <vTaskStartScheduler+0x8c>
	__asm volatile
 800d020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d024:	f383 8811 	msr	BASEPRI, r3
 800d028:	f3bf 8f6f 	isb	sy
 800d02c:	f3bf 8f4f 	dsb	sy
 800d030:	613b      	str	r3, [r7, #16]
}
 800d032:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d034:	4b15      	ldr	r3, [pc, #84]	; (800d08c <vTaskStartScheduler+0xc0>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	334c      	adds	r3, #76	; 0x4c
 800d03a:	4a15      	ldr	r2, [pc, #84]	; (800d090 <vTaskStartScheduler+0xc4>)
 800d03c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d03e:	4b15      	ldr	r3, [pc, #84]	; (800d094 <vTaskStartScheduler+0xc8>)
 800d040:	f04f 32ff 	mov.w	r2, #4294967295
 800d044:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d046:	4b14      	ldr	r3, [pc, #80]	; (800d098 <vTaskStartScheduler+0xcc>)
 800d048:	2201      	movs	r2, #1
 800d04a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d04c:	4b13      	ldr	r3, [pc, #76]	; (800d09c <vTaskStartScheduler+0xd0>)
 800d04e:	2200      	movs	r2, #0
 800d050:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d052:	f000 fe9d 	bl	800dd90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d056:	e00e      	b.n	800d076 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d05e:	d10a      	bne.n	800d076 <vTaskStartScheduler+0xaa>
	__asm volatile
 800d060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d064:	f383 8811 	msr	BASEPRI, r3
 800d068:	f3bf 8f6f 	isb	sy
 800d06c:	f3bf 8f4f 	dsb	sy
 800d070:	60fb      	str	r3, [r7, #12]
}
 800d072:	bf00      	nop
 800d074:	e7fe      	b.n	800d074 <vTaskStartScheduler+0xa8>
}
 800d076:	bf00      	nop
 800d078:	3718      	adds	r7, #24
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}
 800d07e:	bf00      	nop
 800d080:	0801aaec 	.word	0x0801aaec
 800d084:	0800d681 	.word	0x0800d681
 800d088:	240004a0 	.word	0x240004a0
 800d08c:	2400037c 	.word	0x2400037c
 800d090:	2400003c 	.word	0x2400003c
 800d094:	2400049c 	.word	0x2400049c
 800d098:	24000488 	.word	0x24000488
 800d09c:	24000480 	.word	0x24000480

0800d0a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d0a4:	4b04      	ldr	r3, [pc, #16]	; (800d0b8 <vTaskSuspendAll+0x18>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	3301      	adds	r3, #1
 800d0aa:	4a03      	ldr	r2, [pc, #12]	; (800d0b8 <vTaskSuspendAll+0x18>)
 800d0ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d0ae:	bf00      	nop
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b6:	4770      	bx	lr
 800d0b8:	240004a4 	.word	0x240004a4

0800d0bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b084      	sub	sp, #16
 800d0c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d0ca:	4b41      	ldr	r3, [pc, #260]	; (800d1d0 <xTaskResumeAll+0x114>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d10a      	bne.n	800d0e8 <xTaskResumeAll+0x2c>
	__asm volatile
 800d0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d6:	f383 8811 	msr	BASEPRI, r3
 800d0da:	f3bf 8f6f 	isb	sy
 800d0de:	f3bf 8f4f 	dsb	sy
 800d0e2:	603b      	str	r3, [r7, #0]
}
 800d0e4:	bf00      	nop
 800d0e6:	e7fe      	b.n	800d0e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d0e8:	f000 fef4 	bl	800ded4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d0ec:	4b38      	ldr	r3, [pc, #224]	; (800d1d0 <xTaskResumeAll+0x114>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	3b01      	subs	r3, #1
 800d0f2:	4a37      	ldr	r2, [pc, #220]	; (800d1d0 <xTaskResumeAll+0x114>)
 800d0f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0f6:	4b36      	ldr	r3, [pc, #216]	; (800d1d0 <xTaskResumeAll+0x114>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d161      	bne.n	800d1c2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d0fe:	4b35      	ldr	r3, [pc, #212]	; (800d1d4 <xTaskResumeAll+0x118>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d05d      	beq.n	800d1c2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d106:	e02e      	b.n	800d166 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d108:	4b33      	ldr	r3, [pc, #204]	; (800d1d8 <xTaskResumeAll+0x11c>)
 800d10a:	68db      	ldr	r3, [r3, #12]
 800d10c:	68db      	ldr	r3, [r3, #12]
 800d10e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	3318      	adds	r3, #24
 800d114:	4618      	mov	r0, r3
 800d116:	f7fe fe11 	bl	800bd3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	3304      	adds	r3, #4
 800d11e:	4618      	mov	r0, r3
 800d120:	f7fe fe0c 	bl	800bd3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d128:	2201      	movs	r2, #1
 800d12a:	409a      	lsls	r2, r3
 800d12c:	4b2b      	ldr	r3, [pc, #172]	; (800d1dc <xTaskResumeAll+0x120>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	4313      	orrs	r3, r2
 800d132:	4a2a      	ldr	r2, [pc, #168]	; (800d1dc <xTaskResumeAll+0x120>)
 800d134:	6013      	str	r3, [r2, #0]
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d13a:	4613      	mov	r3, r2
 800d13c:	009b      	lsls	r3, r3, #2
 800d13e:	4413      	add	r3, r2
 800d140:	009b      	lsls	r3, r3, #2
 800d142:	4a27      	ldr	r2, [pc, #156]	; (800d1e0 <xTaskResumeAll+0x124>)
 800d144:	441a      	add	r2, r3
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	3304      	adds	r3, #4
 800d14a:	4619      	mov	r1, r3
 800d14c:	4610      	mov	r0, r2
 800d14e:	f7fe fd98 	bl	800bc82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d156:	4b23      	ldr	r3, [pc, #140]	; (800d1e4 <xTaskResumeAll+0x128>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d15c:	429a      	cmp	r2, r3
 800d15e:	d302      	bcc.n	800d166 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d160:	4b21      	ldr	r3, [pc, #132]	; (800d1e8 <xTaskResumeAll+0x12c>)
 800d162:	2201      	movs	r2, #1
 800d164:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d166:	4b1c      	ldr	r3, [pc, #112]	; (800d1d8 <xTaskResumeAll+0x11c>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d1cc      	bne.n	800d108 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d001      	beq.n	800d178 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d174:	f000 fb3e 	bl	800d7f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d178:	4b1c      	ldr	r3, [pc, #112]	; (800d1ec <xTaskResumeAll+0x130>)
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d010      	beq.n	800d1a6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d184:	f000 f858 	bl	800d238 <xTaskIncrementTick>
 800d188:	4603      	mov	r3, r0
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d002      	beq.n	800d194 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d18e:	4b16      	ldr	r3, [pc, #88]	; (800d1e8 <xTaskResumeAll+0x12c>)
 800d190:	2201      	movs	r2, #1
 800d192:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	3b01      	subs	r3, #1
 800d198:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d1f1      	bne.n	800d184 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800d1a0:	4b12      	ldr	r3, [pc, #72]	; (800d1ec <xTaskResumeAll+0x130>)
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d1a6:	4b10      	ldr	r3, [pc, #64]	; (800d1e8 <xTaskResumeAll+0x12c>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d009      	beq.n	800d1c2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d1b2:	4b0f      	ldr	r3, [pc, #60]	; (800d1f0 <xTaskResumeAll+0x134>)
 800d1b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1b8:	601a      	str	r2, [r3, #0]
 800d1ba:	f3bf 8f4f 	dsb	sy
 800d1be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d1c2:	f000 feb7 	bl	800df34 <vPortExitCritical>

	return xAlreadyYielded;
 800d1c6:	68bb      	ldr	r3, [r7, #8]
}
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	3710      	adds	r7, #16
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}
 800d1d0:	240004a4 	.word	0x240004a4
 800d1d4:	2400047c 	.word	0x2400047c
 800d1d8:	2400043c 	.word	0x2400043c
 800d1dc:	24000484 	.word	0x24000484
 800d1e0:	24000380 	.word	0x24000380
 800d1e4:	2400037c 	.word	0x2400037c
 800d1e8:	24000490 	.word	0x24000490
 800d1ec:	2400048c 	.word	0x2400048c
 800d1f0:	e000ed04 	.word	0xe000ed04

0800d1f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	b083      	sub	sp, #12
 800d1f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d1fa:	4b05      	ldr	r3, [pc, #20]	; (800d210 <xTaskGetTickCount+0x1c>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d200:	687b      	ldr	r3, [r7, #4]
}
 800d202:	4618      	mov	r0, r3
 800d204:	370c      	adds	r7, #12
 800d206:	46bd      	mov	sp, r7
 800d208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20c:	4770      	bx	lr
 800d20e:	bf00      	nop
 800d210:	24000480 	.word	0x24000480

0800d214 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b082      	sub	sp, #8
 800d218:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d21a:	f000 ff3d 	bl	800e098 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d21e:	2300      	movs	r3, #0
 800d220:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d222:	4b04      	ldr	r3, [pc, #16]	; (800d234 <xTaskGetTickCountFromISR+0x20>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d228:	683b      	ldr	r3, [r7, #0]
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3708      	adds	r7, #8
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
 800d232:	bf00      	nop
 800d234:	24000480 	.word	0x24000480

0800d238 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b086      	sub	sp, #24
 800d23c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d23e:	2300      	movs	r3, #0
 800d240:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d242:	4b4e      	ldr	r3, [pc, #312]	; (800d37c <xTaskIncrementTick+0x144>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	2b00      	cmp	r3, #0
 800d248:	f040 808e 	bne.w	800d368 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d24c:	4b4c      	ldr	r3, [pc, #304]	; (800d380 <xTaskIncrementTick+0x148>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	3301      	adds	r3, #1
 800d252:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d254:	4a4a      	ldr	r2, [pc, #296]	; (800d380 <xTaskIncrementTick+0x148>)
 800d256:	693b      	ldr	r3, [r7, #16]
 800d258:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d25a:	693b      	ldr	r3, [r7, #16]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d120      	bne.n	800d2a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d260:	4b48      	ldr	r3, [pc, #288]	; (800d384 <xTaskIncrementTick+0x14c>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d00a      	beq.n	800d280 <xTaskIncrementTick+0x48>
	__asm volatile
 800d26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d26e:	f383 8811 	msr	BASEPRI, r3
 800d272:	f3bf 8f6f 	isb	sy
 800d276:	f3bf 8f4f 	dsb	sy
 800d27a:	603b      	str	r3, [r7, #0]
}
 800d27c:	bf00      	nop
 800d27e:	e7fe      	b.n	800d27e <xTaskIncrementTick+0x46>
 800d280:	4b40      	ldr	r3, [pc, #256]	; (800d384 <xTaskIncrementTick+0x14c>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	60fb      	str	r3, [r7, #12]
 800d286:	4b40      	ldr	r3, [pc, #256]	; (800d388 <xTaskIncrementTick+0x150>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	4a3e      	ldr	r2, [pc, #248]	; (800d384 <xTaskIncrementTick+0x14c>)
 800d28c:	6013      	str	r3, [r2, #0]
 800d28e:	4a3e      	ldr	r2, [pc, #248]	; (800d388 <xTaskIncrementTick+0x150>)
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	6013      	str	r3, [r2, #0]
 800d294:	4b3d      	ldr	r3, [pc, #244]	; (800d38c <xTaskIncrementTick+0x154>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	3301      	adds	r3, #1
 800d29a:	4a3c      	ldr	r2, [pc, #240]	; (800d38c <xTaskIncrementTick+0x154>)
 800d29c:	6013      	str	r3, [r2, #0]
 800d29e:	f000 faa9 	bl	800d7f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d2a2:	4b3b      	ldr	r3, [pc, #236]	; (800d390 <xTaskIncrementTick+0x158>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	693a      	ldr	r2, [r7, #16]
 800d2a8:	429a      	cmp	r2, r3
 800d2aa:	d348      	bcc.n	800d33e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d2ac:	4b35      	ldr	r3, [pc, #212]	; (800d384 <xTaskIncrementTick+0x14c>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d104      	bne.n	800d2c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2b6:	4b36      	ldr	r3, [pc, #216]	; (800d390 <xTaskIncrementTick+0x158>)
 800d2b8:	f04f 32ff 	mov.w	r2, #4294967295
 800d2bc:	601a      	str	r2, [r3, #0]
					break;
 800d2be:	e03e      	b.n	800d33e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2c0:	4b30      	ldr	r3, [pc, #192]	; (800d384 <xTaskIncrementTick+0x14c>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	68db      	ldr	r3, [r3, #12]
 800d2c6:	68db      	ldr	r3, [r3, #12]
 800d2c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d2d0:	693a      	ldr	r2, [r7, #16]
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d203      	bcs.n	800d2e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d2d8:	4a2d      	ldr	r2, [pc, #180]	; (800d390 <xTaskIncrementTick+0x158>)
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d2de:	e02e      	b.n	800d33e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	3304      	adds	r3, #4
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f7fe fd29 	bl	800bd3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d004      	beq.n	800d2fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	3318      	adds	r3, #24
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f7fe fd20 	bl	800bd3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d300:	2201      	movs	r2, #1
 800d302:	409a      	lsls	r2, r3
 800d304:	4b23      	ldr	r3, [pc, #140]	; (800d394 <xTaskIncrementTick+0x15c>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	4313      	orrs	r3, r2
 800d30a:	4a22      	ldr	r2, [pc, #136]	; (800d394 <xTaskIncrementTick+0x15c>)
 800d30c:	6013      	str	r3, [r2, #0]
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d312:	4613      	mov	r3, r2
 800d314:	009b      	lsls	r3, r3, #2
 800d316:	4413      	add	r3, r2
 800d318:	009b      	lsls	r3, r3, #2
 800d31a:	4a1f      	ldr	r2, [pc, #124]	; (800d398 <xTaskIncrementTick+0x160>)
 800d31c:	441a      	add	r2, r3
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	3304      	adds	r3, #4
 800d322:	4619      	mov	r1, r3
 800d324:	4610      	mov	r0, r2
 800d326:	f7fe fcac 	bl	800bc82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d32e:	4b1b      	ldr	r3, [pc, #108]	; (800d39c <xTaskIncrementTick+0x164>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d334:	429a      	cmp	r2, r3
 800d336:	d3b9      	bcc.n	800d2ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d338:	2301      	movs	r3, #1
 800d33a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d33c:	e7b6      	b.n	800d2ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d33e:	4b17      	ldr	r3, [pc, #92]	; (800d39c <xTaskIncrementTick+0x164>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d344:	4914      	ldr	r1, [pc, #80]	; (800d398 <xTaskIncrementTick+0x160>)
 800d346:	4613      	mov	r3, r2
 800d348:	009b      	lsls	r3, r3, #2
 800d34a:	4413      	add	r3, r2
 800d34c:	009b      	lsls	r3, r3, #2
 800d34e:	440b      	add	r3, r1
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	2b01      	cmp	r3, #1
 800d354:	d901      	bls.n	800d35a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800d356:	2301      	movs	r3, #1
 800d358:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d35a:	4b11      	ldr	r3, [pc, #68]	; (800d3a0 <xTaskIncrementTick+0x168>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d007      	beq.n	800d372 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800d362:	2301      	movs	r3, #1
 800d364:	617b      	str	r3, [r7, #20]
 800d366:	e004      	b.n	800d372 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d368:	4b0e      	ldr	r3, [pc, #56]	; (800d3a4 <xTaskIncrementTick+0x16c>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	3301      	adds	r3, #1
 800d36e:	4a0d      	ldr	r2, [pc, #52]	; (800d3a4 <xTaskIncrementTick+0x16c>)
 800d370:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d372:	697b      	ldr	r3, [r7, #20]
}
 800d374:	4618      	mov	r0, r3
 800d376:	3718      	adds	r7, #24
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}
 800d37c:	240004a4 	.word	0x240004a4
 800d380:	24000480 	.word	0x24000480
 800d384:	24000434 	.word	0x24000434
 800d388:	24000438 	.word	0x24000438
 800d38c:	24000494 	.word	0x24000494
 800d390:	2400049c 	.word	0x2400049c
 800d394:	24000484 	.word	0x24000484
 800d398:	24000380 	.word	0x24000380
 800d39c:	2400037c 	.word	0x2400037c
 800d3a0:	24000490 	.word	0x24000490
 800d3a4:	2400048c 	.word	0x2400048c

0800d3a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b087      	sub	sp, #28
 800d3ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d3ae:	4b29      	ldr	r3, [pc, #164]	; (800d454 <vTaskSwitchContext+0xac>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d003      	beq.n	800d3be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d3b6:	4b28      	ldr	r3, [pc, #160]	; (800d458 <vTaskSwitchContext+0xb0>)
 800d3b8:	2201      	movs	r2, #1
 800d3ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d3bc:	e044      	b.n	800d448 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800d3be:	4b26      	ldr	r3, [pc, #152]	; (800d458 <vTaskSwitchContext+0xb0>)
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3c4:	4b25      	ldr	r3, [pc, #148]	; (800d45c <vTaskSwitchContext+0xb4>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	fab3 f383 	clz	r3, r3
 800d3d0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d3d2:	7afb      	ldrb	r3, [r7, #11]
 800d3d4:	f1c3 031f 	rsb	r3, r3, #31
 800d3d8:	617b      	str	r3, [r7, #20]
 800d3da:	4921      	ldr	r1, [pc, #132]	; (800d460 <vTaskSwitchContext+0xb8>)
 800d3dc:	697a      	ldr	r2, [r7, #20]
 800d3de:	4613      	mov	r3, r2
 800d3e0:	009b      	lsls	r3, r3, #2
 800d3e2:	4413      	add	r3, r2
 800d3e4:	009b      	lsls	r3, r3, #2
 800d3e6:	440b      	add	r3, r1
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d10a      	bne.n	800d404 <vTaskSwitchContext+0x5c>
	__asm volatile
 800d3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f2:	f383 8811 	msr	BASEPRI, r3
 800d3f6:	f3bf 8f6f 	isb	sy
 800d3fa:	f3bf 8f4f 	dsb	sy
 800d3fe:	607b      	str	r3, [r7, #4]
}
 800d400:	bf00      	nop
 800d402:	e7fe      	b.n	800d402 <vTaskSwitchContext+0x5a>
 800d404:	697a      	ldr	r2, [r7, #20]
 800d406:	4613      	mov	r3, r2
 800d408:	009b      	lsls	r3, r3, #2
 800d40a:	4413      	add	r3, r2
 800d40c:	009b      	lsls	r3, r3, #2
 800d40e:	4a14      	ldr	r2, [pc, #80]	; (800d460 <vTaskSwitchContext+0xb8>)
 800d410:	4413      	add	r3, r2
 800d412:	613b      	str	r3, [r7, #16]
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	685b      	ldr	r3, [r3, #4]
 800d418:	685a      	ldr	r2, [r3, #4]
 800d41a:	693b      	ldr	r3, [r7, #16]
 800d41c:	605a      	str	r2, [r3, #4]
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	685a      	ldr	r2, [r3, #4]
 800d422:	693b      	ldr	r3, [r7, #16]
 800d424:	3308      	adds	r3, #8
 800d426:	429a      	cmp	r2, r3
 800d428:	d104      	bne.n	800d434 <vTaskSwitchContext+0x8c>
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	685b      	ldr	r3, [r3, #4]
 800d42e:	685a      	ldr	r2, [r3, #4]
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	605a      	str	r2, [r3, #4]
 800d434:	693b      	ldr	r3, [r7, #16]
 800d436:	685b      	ldr	r3, [r3, #4]
 800d438:	68db      	ldr	r3, [r3, #12]
 800d43a:	4a0a      	ldr	r2, [pc, #40]	; (800d464 <vTaskSwitchContext+0xbc>)
 800d43c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d43e:	4b09      	ldr	r3, [pc, #36]	; (800d464 <vTaskSwitchContext+0xbc>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	334c      	adds	r3, #76	; 0x4c
 800d444:	4a08      	ldr	r2, [pc, #32]	; (800d468 <vTaskSwitchContext+0xc0>)
 800d446:	6013      	str	r3, [r2, #0]
}
 800d448:	bf00      	nop
 800d44a:	371c      	adds	r7, #28
 800d44c:	46bd      	mov	sp, r7
 800d44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d452:	4770      	bx	lr
 800d454:	240004a4 	.word	0x240004a4
 800d458:	24000490 	.word	0x24000490
 800d45c:	24000484 	.word	0x24000484
 800d460:	24000380 	.word	0x24000380
 800d464:	2400037c 	.word	0x2400037c
 800d468:	2400003c 	.word	0x2400003c

0800d46c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b084      	sub	sp, #16
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d10a      	bne.n	800d492 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d480:	f383 8811 	msr	BASEPRI, r3
 800d484:	f3bf 8f6f 	isb	sy
 800d488:	f3bf 8f4f 	dsb	sy
 800d48c:	60fb      	str	r3, [r7, #12]
}
 800d48e:	bf00      	nop
 800d490:	e7fe      	b.n	800d490 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d492:	4b07      	ldr	r3, [pc, #28]	; (800d4b0 <vTaskPlaceOnEventList+0x44>)
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	3318      	adds	r3, #24
 800d498:	4619      	mov	r1, r3
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f7fe fc15 	bl	800bcca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d4a0:	2101      	movs	r1, #1
 800d4a2:	6838      	ldr	r0, [r7, #0]
 800d4a4:	f000 fb82 	bl	800dbac <prvAddCurrentTaskToDelayedList>
}
 800d4a8:	bf00      	nop
 800d4aa:	3710      	adds	r7, #16
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}
 800d4b0:	2400037c 	.word	0x2400037c

0800d4b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b086      	sub	sp, #24
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	68db      	ldr	r3, [r3, #12]
 800d4c0:	68db      	ldr	r3, [r3, #12]
 800d4c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d4c4:	693b      	ldr	r3, [r7, #16]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d10a      	bne.n	800d4e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ce:	f383 8811 	msr	BASEPRI, r3
 800d4d2:	f3bf 8f6f 	isb	sy
 800d4d6:	f3bf 8f4f 	dsb	sy
 800d4da:	60fb      	str	r3, [r7, #12]
}
 800d4dc:	bf00      	nop
 800d4de:	e7fe      	b.n	800d4de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	3318      	adds	r3, #24
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f7fe fc29 	bl	800bd3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4ea:	4b1d      	ldr	r3, [pc, #116]	; (800d560 <xTaskRemoveFromEventList+0xac>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d11c      	bne.n	800d52c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	3304      	adds	r3, #4
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f7fe fc20 	bl	800bd3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d4fc:	693b      	ldr	r3, [r7, #16]
 800d4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d500:	2201      	movs	r2, #1
 800d502:	409a      	lsls	r2, r3
 800d504:	4b17      	ldr	r3, [pc, #92]	; (800d564 <xTaskRemoveFromEventList+0xb0>)
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	4313      	orrs	r3, r2
 800d50a:	4a16      	ldr	r2, [pc, #88]	; (800d564 <xTaskRemoveFromEventList+0xb0>)
 800d50c:	6013      	str	r3, [r2, #0]
 800d50e:	693b      	ldr	r3, [r7, #16]
 800d510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d512:	4613      	mov	r3, r2
 800d514:	009b      	lsls	r3, r3, #2
 800d516:	4413      	add	r3, r2
 800d518:	009b      	lsls	r3, r3, #2
 800d51a:	4a13      	ldr	r2, [pc, #76]	; (800d568 <xTaskRemoveFromEventList+0xb4>)
 800d51c:	441a      	add	r2, r3
 800d51e:	693b      	ldr	r3, [r7, #16]
 800d520:	3304      	adds	r3, #4
 800d522:	4619      	mov	r1, r3
 800d524:	4610      	mov	r0, r2
 800d526:	f7fe fbac 	bl	800bc82 <vListInsertEnd>
 800d52a:	e005      	b.n	800d538 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d52c:	693b      	ldr	r3, [r7, #16]
 800d52e:	3318      	adds	r3, #24
 800d530:	4619      	mov	r1, r3
 800d532:	480e      	ldr	r0, [pc, #56]	; (800d56c <xTaskRemoveFromEventList+0xb8>)
 800d534:	f7fe fba5 	bl	800bc82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d538:	693b      	ldr	r3, [r7, #16]
 800d53a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d53c:	4b0c      	ldr	r3, [pc, #48]	; (800d570 <xTaskRemoveFromEventList+0xbc>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d542:	429a      	cmp	r2, r3
 800d544:	d905      	bls.n	800d552 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d546:	2301      	movs	r3, #1
 800d548:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d54a:	4b0a      	ldr	r3, [pc, #40]	; (800d574 <xTaskRemoveFromEventList+0xc0>)
 800d54c:	2201      	movs	r2, #1
 800d54e:	601a      	str	r2, [r3, #0]
 800d550:	e001      	b.n	800d556 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d552:	2300      	movs	r3, #0
 800d554:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d556:	697b      	ldr	r3, [r7, #20]
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3718      	adds	r7, #24
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}
 800d560:	240004a4 	.word	0x240004a4
 800d564:	24000484 	.word	0x24000484
 800d568:	24000380 	.word	0x24000380
 800d56c:	2400043c 	.word	0x2400043c
 800d570:	2400037c 	.word	0x2400037c
 800d574:	24000490 	.word	0x24000490

0800d578 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d578:	b480      	push	{r7}
 800d57a:	b083      	sub	sp, #12
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d580:	4b06      	ldr	r3, [pc, #24]	; (800d59c <vTaskInternalSetTimeOutState+0x24>)
 800d582:	681a      	ldr	r2, [r3, #0]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d588:	4b05      	ldr	r3, [pc, #20]	; (800d5a0 <vTaskInternalSetTimeOutState+0x28>)
 800d58a:	681a      	ldr	r2, [r3, #0]
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	605a      	str	r2, [r3, #4]
}
 800d590:	bf00      	nop
 800d592:	370c      	adds	r7, #12
 800d594:	46bd      	mov	sp, r7
 800d596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59a:	4770      	bx	lr
 800d59c:	24000494 	.word	0x24000494
 800d5a0:	24000480 	.word	0x24000480

0800d5a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b088      	sub	sp, #32
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
 800d5ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d10a      	bne.n	800d5ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5b8:	f383 8811 	msr	BASEPRI, r3
 800d5bc:	f3bf 8f6f 	isb	sy
 800d5c0:	f3bf 8f4f 	dsb	sy
 800d5c4:	613b      	str	r3, [r7, #16]
}
 800d5c6:	bf00      	nop
 800d5c8:	e7fe      	b.n	800d5c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d10a      	bne.n	800d5e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d4:	f383 8811 	msr	BASEPRI, r3
 800d5d8:	f3bf 8f6f 	isb	sy
 800d5dc:	f3bf 8f4f 	dsb	sy
 800d5e0:	60fb      	str	r3, [r7, #12]
}
 800d5e2:	bf00      	nop
 800d5e4:	e7fe      	b.n	800d5e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d5e6:	f000 fc75 	bl	800ded4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d5ea:	4b1d      	ldr	r3, [pc, #116]	; (800d660 <xTaskCheckForTimeOut+0xbc>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	685b      	ldr	r3, [r3, #4]
 800d5f4:	69ba      	ldr	r2, [r7, #24]
 800d5f6:	1ad3      	subs	r3, r2, r3
 800d5f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d602:	d102      	bne.n	800d60a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d604:	2300      	movs	r3, #0
 800d606:	61fb      	str	r3, [r7, #28]
 800d608:	e023      	b.n	800d652 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681a      	ldr	r2, [r3, #0]
 800d60e:	4b15      	ldr	r3, [pc, #84]	; (800d664 <xTaskCheckForTimeOut+0xc0>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	429a      	cmp	r2, r3
 800d614:	d007      	beq.n	800d626 <xTaskCheckForTimeOut+0x82>
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	685b      	ldr	r3, [r3, #4]
 800d61a:	69ba      	ldr	r2, [r7, #24]
 800d61c:	429a      	cmp	r2, r3
 800d61e:	d302      	bcc.n	800d626 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d620:	2301      	movs	r3, #1
 800d622:	61fb      	str	r3, [r7, #28]
 800d624:	e015      	b.n	800d652 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	697a      	ldr	r2, [r7, #20]
 800d62c:	429a      	cmp	r2, r3
 800d62e:	d20b      	bcs.n	800d648 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	681a      	ldr	r2, [r3, #0]
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	1ad2      	subs	r2, r2, r3
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f7ff ff9b 	bl	800d578 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d642:	2300      	movs	r3, #0
 800d644:	61fb      	str	r3, [r7, #28]
 800d646:	e004      	b.n	800d652 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	2200      	movs	r2, #0
 800d64c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d64e:	2301      	movs	r3, #1
 800d650:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d652:	f000 fc6f 	bl	800df34 <vPortExitCritical>

	return xReturn;
 800d656:	69fb      	ldr	r3, [r7, #28]
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3720      	adds	r7, #32
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}
 800d660:	24000480 	.word	0x24000480
 800d664:	24000494 	.word	0x24000494

0800d668 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d668:	b480      	push	{r7}
 800d66a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d66c:	4b03      	ldr	r3, [pc, #12]	; (800d67c <vTaskMissedYield+0x14>)
 800d66e:	2201      	movs	r2, #1
 800d670:	601a      	str	r2, [r3, #0]
}
 800d672:	bf00      	nop
 800d674:	46bd      	mov	sp, r7
 800d676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67a:	4770      	bx	lr
 800d67c:	24000490 	.word	0x24000490

0800d680 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b082      	sub	sp, #8
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d688:	f000 f852 	bl	800d730 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d68c:	4b06      	ldr	r3, [pc, #24]	; (800d6a8 <prvIdleTask+0x28>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	2b01      	cmp	r3, #1
 800d692:	d9f9      	bls.n	800d688 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d694:	4b05      	ldr	r3, [pc, #20]	; (800d6ac <prvIdleTask+0x2c>)
 800d696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d69a:	601a      	str	r2, [r3, #0]
 800d69c:	f3bf 8f4f 	dsb	sy
 800d6a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d6a4:	e7f0      	b.n	800d688 <prvIdleTask+0x8>
 800d6a6:	bf00      	nop
 800d6a8:	24000380 	.word	0x24000380
 800d6ac:	e000ed04 	.word	0xe000ed04

0800d6b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b082      	sub	sp, #8
 800d6b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	607b      	str	r3, [r7, #4]
 800d6ba:	e00c      	b.n	800d6d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d6bc:	687a      	ldr	r2, [r7, #4]
 800d6be:	4613      	mov	r3, r2
 800d6c0:	009b      	lsls	r3, r3, #2
 800d6c2:	4413      	add	r3, r2
 800d6c4:	009b      	lsls	r3, r3, #2
 800d6c6:	4a12      	ldr	r2, [pc, #72]	; (800d710 <prvInitialiseTaskLists+0x60>)
 800d6c8:	4413      	add	r3, r2
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f7fe faac 	bl	800bc28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	3301      	adds	r3, #1
 800d6d4:	607b      	str	r3, [r7, #4]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2b06      	cmp	r3, #6
 800d6da:	d9ef      	bls.n	800d6bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d6dc:	480d      	ldr	r0, [pc, #52]	; (800d714 <prvInitialiseTaskLists+0x64>)
 800d6de:	f7fe faa3 	bl	800bc28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d6e2:	480d      	ldr	r0, [pc, #52]	; (800d718 <prvInitialiseTaskLists+0x68>)
 800d6e4:	f7fe faa0 	bl	800bc28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d6e8:	480c      	ldr	r0, [pc, #48]	; (800d71c <prvInitialiseTaskLists+0x6c>)
 800d6ea:	f7fe fa9d 	bl	800bc28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d6ee:	480c      	ldr	r0, [pc, #48]	; (800d720 <prvInitialiseTaskLists+0x70>)
 800d6f0:	f7fe fa9a 	bl	800bc28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d6f4:	480b      	ldr	r0, [pc, #44]	; (800d724 <prvInitialiseTaskLists+0x74>)
 800d6f6:	f7fe fa97 	bl	800bc28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d6fa:	4b0b      	ldr	r3, [pc, #44]	; (800d728 <prvInitialiseTaskLists+0x78>)
 800d6fc:	4a05      	ldr	r2, [pc, #20]	; (800d714 <prvInitialiseTaskLists+0x64>)
 800d6fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d700:	4b0a      	ldr	r3, [pc, #40]	; (800d72c <prvInitialiseTaskLists+0x7c>)
 800d702:	4a05      	ldr	r2, [pc, #20]	; (800d718 <prvInitialiseTaskLists+0x68>)
 800d704:	601a      	str	r2, [r3, #0]
}
 800d706:	bf00      	nop
 800d708:	3708      	adds	r7, #8
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}
 800d70e:	bf00      	nop
 800d710:	24000380 	.word	0x24000380
 800d714:	2400040c 	.word	0x2400040c
 800d718:	24000420 	.word	0x24000420
 800d71c:	2400043c 	.word	0x2400043c
 800d720:	24000450 	.word	0x24000450
 800d724:	24000468 	.word	0x24000468
 800d728:	24000434 	.word	0x24000434
 800d72c:	24000438 	.word	0x24000438

0800d730 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b082      	sub	sp, #8
 800d734:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d736:	e019      	b.n	800d76c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d738:	f000 fbcc 	bl	800ded4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d73c:	4b10      	ldr	r3, [pc, #64]	; (800d780 <prvCheckTasksWaitingTermination+0x50>)
 800d73e:	68db      	ldr	r3, [r3, #12]
 800d740:	68db      	ldr	r3, [r3, #12]
 800d742:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	3304      	adds	r3, #4
 800d748:	4618      	mov	r0, r3
 800d74a:	f7fe faf7 	bl	800bd3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d74e:	4b0d      	ldr	r3, [pc, #52]	; (800d784 <prvCheckTasksWaitingTermination+0x54>)
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	3b01      	subs	r3, #1
 800d754:	4a0b      	ldr	r2, [pc, #44]	; (800d784 <prvCheckTasksWaitingTermination+0x54>)
 800d756:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d758:	4b0b      	ldr	r3, [pc, #44]	; (800d788 <prvCheckTasksWaitingTermination+0x58>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	3b01      	subs	r3, #1
 800d75e:	4a0a      	ldr	r2, [pc, #40]	; (800d788 <prvCheckTasksWaitingTermination+0x58>)
 800d760:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d762:	f000 fbe7 	bl	800df34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f000 f810 	bl	800d78c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d76c:	4b06      	ldr	r3, [pc, #24]	; (800d788 <prvCheckTasksWaitingTermination+0x58>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d1e1      	bne.n	800d738 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d774:	bf00      	nop
 800d776:	bf00      	nop
 800d778:	3708      	adds	r7, #8
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}
 800d77e:	bf00      	nop
 800d780:	24000450 	.word	0x24000450
 800d784:	2400047c 	.word	0x2400047c
 800d788:	24000464 	.word	0x24000464

0800d78c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b084      	sub	sp, #16
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	334c      	adds	r3, #76	; 0x4c
 800d798:	4618      	mov	r0, r3
 800d79a:	f00c f9b1 	bl	8019b00 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d108      	bne.n	800d7ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f000 fd7f 	bl	800e2b0 <vPortFree>
				vPortFree( pxTCB );
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f000 fd7c 	bl	800e2b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d7b8:	e018      	b.n	800d7ec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d7c0:	2b01      	cmp	r3, #1
 800d7c2:	d103      	bne.n	800d7cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f000 fd73 	bl	800e2b0 <vPortFree>
	}
 800d7ca:	e00f      	b.n	800d7ec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d7d2:	2b02      	cmp	r3, #2
 800d7d4:	d00a      	beq.n	800d7ec <prvDeleteTCB+0x60>
	__asm volatile
 800d7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7da:	f383 8811 	msr	BASEPRI, r3
 800d7de:	f3bf 8f6f 	isb	sy
 800d7e2:	f3bf 8f4f 	dsb	sy
 800d7e6:	60fb      	str	r3, [r7, #12]
}
 800d7e8:	bf00      	nop
 800d7ea:	e7fe      	b.n	800d7ea <prvDeleteTCB+0x5e>
	}
 800d7ec:	bf00      	nop
 800d7ee:	3710      	adds	r7, #16
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}

0800d7f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b083      	sub	sp, #12
 800d7f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d7fa:	4b0c      	ldr	r3, [pc, #48]	; (800d82c <prvResetNextTaskUnblockTime+0x38>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d104      	bne.n	800d80e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d804:	4b0a      	ldr	r3, [pc, #40]	; (800d830 <prvResetNextTaskUnblockTime+0x3c>)
 800d806:	f04f 32ff 	mov.w	r2, #4294967295
 800d80a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d80c:	e008      	b.n	800d820 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d80e:	4b07      	ldr	r3, [pc, #28]	; (800d82c <prvResetNextTaskUnblockTime+0x38>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	68db      	ldr	r3, [r3, #12]
 800d814:	68db      	ldr	r3, [r3, #12]
 800d816:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	685b      	ldr	r3, [r3, #4]
 800d81c:	4a04      	ldr	r2, [pc, #16]	; (800d830 <prvResetNextTaskUnblockTime+0x3c>)
 800d81e:	6013      	str	r3, [r2, #0]
}
 800d820:	bf00      	nop
 800d822:	370c      	adds	r7, #12
 800d824:	46bd      	mov	sp, r7
 800d826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82a:	4770      	bx	lr
 800d82c:	24000434 	.word	0x24000434
 800d830:	2400049c 	.word	0x2400049c

0800d834 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d834:	b480      	push	{r7}
 800d836:	b083      	sub	sp, #12
 800d838:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d83a:	4b0b      	ldr	r3, [pc, #44]	; (800d868 <xTaskGetSchedulerState+0x34>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d102      	bne.n	800d848 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d842:	2301      	movs	r3, #1
 800d844:	607b      	str	r3, [r7, #4]
 800d846:	e008      	b.n	800d85a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d848:	4b08      	ldr	r3, [pc, #32]	; (800d86c <xTaskGetSchedulerState+0x38>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d102      	bne.n	800d856 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d850:	2302      	movs	r3, #2
 800d852:	607b      	str	r3, [r7, #4]
 800d854:	e001      	b.n	800d85a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d856:	2300      	movs	r3, #0
 800d858:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d85a:	687b      	ldr	r3, [r7, #4]
	}
 800d85c:	4618      	mov	r0, r3
 800d85e:	370c      	adds	r7, #12
 800d860:	46bd      	mov	sp, r7
 800d862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d866:	4770      	bx	lr
 800d868:	24000488 	.word	0x24000488
 800d86c:	240004a4 	.word	0x240004a4

0800d870 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d870:	b580      	push	{r7, lr}
 800d872:	b084      	sub	sp, #16
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d87c:	2300      	movs	r3, #0
 800d87e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d05e      	beq.n	800d944 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d88a:	4b31      	ldr	r3, [pc, #196]	; (800d950 <xTaskPriorityInherit+0xe0>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d890:	429a      	cmp	r2, r3
 800d892:	d24e      	bcs.n	800d932 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	699b      	ldr	r3, [r3, #24]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	db06      	blt.n	800d8aa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d89c:	4b2c      	ldr	r3, [pc, #176]	; (800d950 <xTaskPriorityInherit+0xe0>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8a2:	f1c3 0207 	rsb	r2, r3, #7
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	6959      	ldr	r1, [r3, #20]
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8b2:	4613      	mov	r3, r2
 800d8b4:	009b      	lsls	r3, r3, #2
 800d8b6:	4413      	add	r3, r2
 800d8b8:	009b      	lsls	r3, r3, #2
 800d8ba:	4a26      	ldr	r2, [pc, #152]	; (800d954 <xTaskPriorityInherit+0xe4>)
 800d8bc:	4413      	add	r3, r2
 800d8be:	4299      	cmp	r1, r3
 800d8c0:	d12f      	bne.n	800d922 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	3304      	adds	r3, #4
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7fe fa38 	bl	800bd3c <uxListRemove>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d10a      	bne.n	800d8e8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	fa02 f303 	lsl.w	r3, r2, r3
 800d8dc:	43da      	mvns	r2, r3
 800d8de:	4b1e      	ldr	r3, [pc, #120]	; (800d958 <xTaskPriorityInherit+0xe8>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	4013      	ands	r3, r2
 800d8e4:	4a1c      	ldr	r2, [pc, #112]	; (800d958 <xTaskPriorityInherit+0xe8>)
 800d8e6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d8e8:	4b19      	ldr	r3, [pc, #100]	; (800d950 <xTaskPriorityInherit+0xe0>)
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8f6:	2201      	movs	r2, #1
 800d8f8:	409a      	lsls	r2, r3
 800d8fa:	4b17      	ldr	r3, [pc, #92]	; (800d958 <xTaskPriorityInherit+0xe8>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	4313      	orrs	r3, r2
 800d900:	4a15      	ldr	r2, [pc, #84]	; (800d958 <xTaskPriorityInherit+0xe8>)
 800d902:	6013      	str	r3, [r2, #0]
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d908:	4613      	mov	r3, r2
 800d90a:	009b      	lsls	r3, r3, #2
 800d90c:	4413      	add	r3, r2
 800d90e:	009b      	lsls	r3, r3, #2
 800d910:	4a10      	ldr	r2, [pc, #64]	; (800d954 <xTaskPriorityInherit+0xe4>)
 800d912:	441a      	add	r2, r3
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	3304      	adds	r3, #4
 800d918:	4619      	mov	r1, r3
 800d91a:	4610      	mov	r0, r2
 800d91c:	f7fe f9b1 	bl	800bc82 <vListInsertEnd>
 800d920:	e004      	b.n	800d92c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d922:	4b0b      	ldr	r3, [pc, #44]	; (800d950 <xTaskPriorityInherit+0xe0>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d92c:	2301      	movs	r3, #1
 800d92e:	60fb      	str	r3, [r7, #12]
 800d930:	e008      	b.n	800d944 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d936:	4b06      	ldr	r3, [pc, #24]	; (800d950 <xTaskPriorityInherit+0xe0>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d201      	bcs.n	800d944 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d940:	2301      	movs	r3, #1
 800d942:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d944:	68fb      	ldr	r3, [r7, #12]
	}
 800d946:	4618      	mov	r0, r3
 800d948:	3710      	adds	r7, #16
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}
 800d94e:	bf00      	nop
 800d950:	2400037c 	.word	0x2400037c
 800d954:	24000380 	.word	0x24000380
 800d958:	24000484 	.word	0x24000484

0800d95c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b086      	sub	sp, #24
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d968:	2300      	movs	r3, #0
 800d96a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d06e      	beq.n	800da50 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d972:	4b3a      	ldr	r3, [pc, #232]	; (800da5c <xTaskPriorityDisinherit+0x100>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	693a      	ldr	r2, [r7, #16]
 800d978:	429a      	cmp	r2, r3
 800d97a:	d00a      	beq.n	800d992 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d980:	f383 8811 	msr	BASEPRI, r3
 800d984:	f3bf 8f6f 	isb	sy
 800d988:	f3bf 8f4f 	dsb	sy
 800d98c:	60fb      	str	r3, [r7, #12]
}
 800d98e:	bf00      	nop
 800d990:	e7fe      	b.n	800d990 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d992:	693b      	ldr	r3, [r7, #16]
 800d994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d996:	2b00      	cmp	r3, #0
 800d998:	d10a      	bne.n	800d9b0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d99e:	f383 8811 	msr	BASEPRI, r3
 800d9a2:	f3bf 8f6f 	isb	sy
 800d9a6:	f3bf 8f4f 	dsb	sy
 800d9aa:	60bb      	str	r3, [r7, #8]
}
 800d9ac:	bf00      	nop
 800d9ae:	e7fe      	b.n	800d9ae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d9b4:	1e5a      	subs	r2, r3, #1
 800d9b6:	693b      	ldr	r3, [r7, #16]
 800d9b8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d044      	beq.n	800da50 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d9c6:	693b      	ldr	r3, [r7, #16]
 800d9c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d140      	bne.n	800da50 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d9ce:	693b      	ldr	r3, [r7, #16]
 800d9d0:	3304      	adds	r3, #4
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7fe f9b2 	bl	800bd3c <uxListRemove>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d115      	bne.n	800da0a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d9de:	693b      	ldr	r3, [r7, #16]
 800d9e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9e2:	491f      	ldr	r1, [pc, #124]	; (800da60 <xTaskPriorityDisinherit+0x104>)
 800d9e4:	4613      	mov	r3, r2
 800d9e6:	009b      	lsls	r3, r3, #2
 800d9e8:	4413      	add	r3, r2
 800d9ea:	009b      	lsls	r3, r3, #2
 800d9ec:	440b      	add	r3, r1
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d10a      	bne.n	800da0a <xTaskPriorityDisinherit+0xae>
 800d9f4:	693b      	ldr	r3, [r7, #16]
 800d9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9f8:	2201      	movs	r2, #1
 800d9fa:	fa02 f303 	lsl.w	r3, r2, r3
 800d9fe:	43da      	mvns	r2, r3
 800da00:	4b18      	ldr	r3, [pc, #96]	; (800da64 <xTaskPriorityDisinherit+0x108>)
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	4013      	ands	r3, r2
 800da06:	4a17      	ldr	r2, [pc, #92]	; (800da64 <xTaskPriorityDisinherit+0x108>)
 800da08:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da0e:	693b      	ldr	r3, [r7, #16]
 800da10:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da12:	693b      	ldr	r3, [r7, #16]
 800da14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da16:	f1c3 0207 	rsb	r2, r3, #7
 800da1a:	693b      	ldr	r3, [r7, #16]
 800da1c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da22:	2201      	movs	r2, #1
 800da24:	409a      	lsls	r2, r3
 800da26:	4b0f      	ldr	r3, [pc, #60]	; (800da64 <xTaskPriorityDisinherit+0x108>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	4313      	orrs	r3, r2
 800da2c:	4a0d      	ldr	r2, [pc, #52]	; (800da64 <xTaskPriorityDisinherit+0x108>)
 800da2e:	6013      	str	r3, [r2, #0]
 800da30:	693b      	ldr	r3, [r7, #16]
 800da32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da34:	4613      	mov	r3, r2
 800da36:	009b      	lsls	r3, r3, #2
 800da38:	4413      	add	r3, r2
 800da3a:	009b      	lsls	r3, r3, #2
 800da3c:	4a08      	ldr	r2, [pc, #32]	; (800da60 <xTaskPriorityDisinherit+0x104>)
 800da3e:	441a      	add	r2, r3
 800da40:	693b      	ldr	r3, [r7, #16]
 800da42:	3304      	adds	r3, #4
 800da44:	4619      	mov	r1, r3
 800da46:	4610      	mov	r0, r2
 800da48:	f7fe f91b 	bl	800bc82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800da4c:	2301      	movs	r3, #1
 800da4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800da50:	697b      	ldr	r3, [r7, #20]
	}
 800da52:	4618      	mov	r0, r3
 800da54:	3718      	adds	r7, #24
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}
 800da5a:	bf00      	nop
 800da5c:	2400037c 	.word	0x2400037c
 800da60:	24000380 	.word	0x24000380
 800da64:	24000484 	.word	0x24000484

0800da68 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b088      	sub	sp, #32
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
 800da70:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800da76:	2301      	movs	r3, #1
 800da78:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d077      	beq.n	800db70 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800da80:	69bb      	ldr	r3, [r7, #24]
 800da82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da84:	2b00      	cmp	r3, #0
 800da86:	d10a      	bne.n	800da9e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800da88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da8c:	f383 8811 	msr	BASEPRI, r3
 800da90:	f3bf 8f6f 	isb	sy
 800da94:	f3bf 8f4f 	dsb	sy
 800da98:	60fb      	str	r3, [r7, #12]
}
 800da9a:	bf00      	nop
 800da9c:	e7fe      	b.n	800da9c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800da9e:	69bb      	ldr	r3, [r7, #24]
 800daa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800daa2:	683a      	ldr	r2, [r7, #0]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d902      	bls.n	800daae <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	61fb      	str	r3, [r7, #28]
 800daac:	e002      	b.n	800dab4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800daae:	69bb      	ldr	r3, [r7, #24]
 800dab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dab2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dab4:	69bb      	ldr	r3, [r7, #24]
 800dab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dab8:	69fa      	ldr	r2, [r7, #28]
 800daba:	429a      	cmp	r2, r3
 800dabc:	d058      	beq.n	800db70 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dabe:	69bb      	ldr	r3, [r7, #24]
 800dac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dac2:	697a      	ldr	r2, [r7, #20]
 800dac4:	429a      	cmp	r2, r3
 800dac6:	d153      	bne.n	800db70 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800dac8:	4b2b      	ldr	r3, [pc, #172]	; (800db78 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	69ba      	ldr	r2, [r7, #24]
 800dace:	429a      	cmp	r2, r3
 800dad0:	d10a      	bne.n	800dae8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800dad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dad6:	f383 8811 	msr	BASEPRI, r3
 800dada:	f3bf 8f6f 	isb	sy
 800dade:	f3bf 8f4f 	dsb	sy
 800dae2:	60bb      	str	r3, [r7, #8]
}
 800dae4:	bf00      	nop
 800dae6:	e7fe      	b.n	800dae6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dae8:	69bb      	ldr	r3, [r7, #24]
 800daea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800daee:	69bb      	ldr	r3, [r7, #24]
 800daf0:	69fa      	ldr	r2, [r7, #28]
 800daf2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800daf4:	69bb      	ldr	r3, [r7, #24]
 800daf6:	699b      	ldr	r3, [r3, #24]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	db04      	blt.n	800db06 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dafc:	69fb      	ldr	r3, [r7, #28]
 800dafe:	f1c3 0207 	rsb	r2, r3, #7
 800db02:	69bb      	ldr	r3, [r7, #24]
 800db04:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800db06:	69bb      	ldr	r3, [r7, #24]
 800db08:	6959      	ldr	r1, [r3, #20]
 800db0a:	693a      	ldr	r2, [r7, #16]
 800db0c:	4613      	mov	r3, r2
 800db0e:	009b      	lsls	r3, r3, #2
 800db10:	4413      	add	r3, r2
 800db12:	009b      	lsls	r3, r3, #2
 800db14:	4a19      	ldr	r2, [pc, #100]	; (800db7c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800db16:	4413      	add	r3, r2
 800db18:	4299      	cmp	r1, r3
 800db1a:	d129      	bne.n	800db70 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db1c:	69bb      	ldr	r3, [r7, #24]
 800db1e:	3304      	adds	r3, #4
 800db20:	4618      	mov	r0, r3
 800db22:	f7fe f90b 	bl	800bd3c <uxListRemove>
 800db26:	4603      	mov	r3, r0
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d10a      	bne.n	800db42 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800db2c:	69bb      	ldr	r3, [r7, #24]
 800db2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db30:	2201      	movs	r2, #1
 800db32:	fa02 f303 	lsl.w	r3, r2, r3
 800db36:	43da      	mvns	r2, r3
 800db38:	4b11      	ldr	r3, [pc, #68]	; (800db80 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	4013      	ands	r3, r2
 800db3e:	4a10      	ldr	r2, [pc, #64]	; (800db80 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800db40:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800db42:	69bb      	ldr	r3, [r7, #24]
 800db44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db46:	2201      	movs	r2, #1
 800db48:	409a      	lsls	r2, r3
 800db4a:	4b0d      	ldr	r3, [pc, #52]	; (800db80 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	4313      	orrs	r3, r2
 800db50:	4a0b      	ldr	r2, [pc, #44]	; (800db80 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800db52:	6013      	str	r3, [r2, #0]
 800db54:	69bb      	ldr	r3, [r7, #24]
 800db56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db58:	4613      	mov	r3, r2
 800db5a:	009b      	lsls	r3, r3, #2
 800db5c:	4413      	add	r3, r2
 800db5e:	009b      	lsls	r3, r3, #2
 800db60:	4a06      	ldr	r2, [pc, #24]	; (800db7c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800db62:	441a      	add	r2, r3
 800db64:	69bb      	ldr	r3, [r7, #24]
 800db66:	3304      	adds	r3, #4
 800db68:	4619      	mov	r1, r3
 800db6a:	4610      	mov	r0, r2
 800db6c:	f7fe f889 	bl	800bc82 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db70:	bf00      	nop
 800db72:	3720      	adds	r7, #32
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}
 800db78:	2400037c 	.word	0x2400037c
 800db7c:	24000380 	.word	0x24000380
 800db80:	24000484 	.word	0x24000484

0800db84 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800db84:	b480      	push	{r7}
 800db86:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800db88:	4b07      	ldr	r3, [pc, #28]	; (800dba8 <pvTaskIncrementMutexHeldCount+0x24>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d004      	beq.n	800db9a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800db90:	4b05      	ldr	r3, [pc, #20]	; (800dba8 <pvTaskIncrementMutexHeldCount+0x24>)
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800db96:	3201      	adds	r2, #1
 800db98:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800db9a:	4b03      	ldr	r3, [pc, #12]	; (800dba8 <pvTaskIncrementMutexHeldCount+0x24>)
 800db9c:	681b      	ldr	r3, [r3, #0]
	}
 800db9e:	4618      	mov	r0, r3
 800dba0:	46bd      	mov	sp, r7
 800dba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba6:	4770      	bx	lr
 800dba8:	2400037c 	.word	0x2400037c

0800dbac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b084      	sub	sp, #16
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
 800dbb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dbb6:	4b29      	ldr	r3, [pc, #164]	; (800dc5c <prvAddCurrentTaskToDelayedList+0xb0>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dbbc:	4b28      	ldr	r3, [pc, #160]	; (800dc60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	3304      	adds	r3, #4
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f7fe f8ba 	bl	800bd3c <uxListRemove>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d10b      	bne.n	800dbe6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800dbce:	4b24      	ldr	r3, [pc, #144]	; (800dc60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbd4:	2201      	movs	r2, #1
 800dbd6:	fa02 f303 	lsl.w	r3, r2, r3
 800dbda:	43da      	mvns	r2, r3
 800dbdc:	4b21      	ldr	r3, [pc, #132]	; (800dc64 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	4013      	ands	r3, r2
 800dbe2:	4a20      	ldr	r2, [pc, #128]	; (800dc64 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dbe4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbec:	d10a      	bne.n	800dc04 <prvAddCurrentTaskToDelayedList+0x58>
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d007      	beq.n	800dc04 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbf4:	4b1a      	ldr	r3, [pc, #104]	; (800dc60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	3304      	adds	r3, #4
 800dbfa:	4619      	mov	r1, r3
 800dbfc:	481a      	ldr	r0, [pc, #104]	; (800dc68 <prvAddCurrentTaskToDelayedList+0xbc>)
 800dbfe:	f7fe f840 	bl	800bc82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dc02:	e026      	b.n	800dc52 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dc04:	68fa      	ldr	r2, [r7, #12]
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	4413      	add	r3, r2
 800dc0a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dc0c:	4b14      	ldr	r3, [pc, #80]	; (800dc60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	68ba      	ldr	r2, [r7, #8]
 800dc12:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dc14:	68ba      	ldr	r2, [r7, #8]
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d209      	bcs.n	800dc30 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc1c:	4b13      	ldr	r3, [pc, #76]	; (800dc6c <prvAddCurrentTaskToDelayedList+0xc0>)
 800dc1e:	681a      	ldr	r2, [r3, #0]
 800dc20:	4b0f      	ldr	r3, [pc, #60]	; (800dc60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	3304      	adds	r3, #4
 800dc26:	4619      	mov	r1, r3
 800dc28:	4610      	mov	r0, r2
 800dc2a:	f7fe f84e 	bl	800bcca <vListInsert>
}
 800dc2e:	e010      	b.n	800dc52 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc30:	4b0f      	ldr	r3, [pc, #60]	; (800dc70 <prvAddCurrentTaskToDelayedList+0xc4>)
 800dc32:	681a      	ldr	r2, [r3, #0]
 800dc34:	4b0a      	ldr	r3, [pc, #40]	; (800dc60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	3304      	adds	r3, #4
 800dc3a:	4619      	mov	r1, r3
 800dc3c:	4610      	mov	r0, r2
 800dc3e:	f7fe f844 	bl	800bcca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dc42:	4b0c      	ldr	r3, [pc, #48]	; (800dc74 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	68ba      	ldr	r2, [r7, #8]
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d202      	bcs.n	800dc52 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800dc4c:	4a09      	ldr	r2, [pc, #36]	; (800dc74 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	6013      	str	r3, [r2, #0]
}
 800dc52:	bf00      	nop
 800dc54:	3710      	adds	r7, #16
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}
 800dc5a:	bf00      	nop
 800dc5c:	24000480 	.word	0x24000480
 800dc60:	2400037c 	.word	0x2400037c
 800dc64:	24000484 	.word	0x24000484
 800dc68:	24000468 	.word	0x24000468
 800dc6c:	24000438 	.word	0x24000438
 800dc70:	24000434 	.word	0x24000434
 800dc74:	2400049c 	.word	0x2400049c

0800dc78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dc78:	b480      	push	{r7}
 800dc7a:	b085      	sub	sp, #20
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	60f8      	str	r0, [r7, #12]
 800dc80:	60b9      	str	r1, [r7, #8]
 800dc82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	3b04      	subs	r3, #4
 800dc88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dc90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	3b04      	subs	r3, #4
 800dc96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dc98:	68bb      	ldr	r3, [r7, #8]
 800dc9a:	f023 0201 	bic.w	r2, r3, #1
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	3b04      	subs	r3, #4
 800dca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dca8:	4a0c      	ldr	r2, [pc, #48]	; (800dcdc <pxPortInitialiseStack+0x64>)
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	3b14      	subs	r3, #20
 800dcb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dcb4:	687a      	ldr	r2, [r7, #4]
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	3b04      	subs	r3, #4
 800dcbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	f06f 0202 	mvn.w	r2, #2
 800dcc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	3b20      	subs	r3, #32
 800dccc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dcce:	68fb      	ldr	r3, [r7, #12]
}
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	3714      	adds	r7, #20
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcda:	4770      	bx	lr
 800dcdc:	0800dce1 	.word	0x0800dce1

0800dce0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dce0:	b480      	push	{r7}
 800dce2:	b085      	sub	sp, #20
 800dce4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dce6:	2300      	movs	r3, #0
 800dce8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dcea:	4b12      	ldr	r3, [pc, #72]	; (800dd34 <prvTaskExitError+0x54>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcf2:	d00a      	beq.n	800dd0a <prvTaskExitError+0x2a>
	__asm volatile
 800dcf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf8:	f383 8811 	msr	BASEPRI, r3
 800dcfc:	f3bf 8f6f 	isb	sy
 800dd00:	f3bf 8f4f 	dsb	sy
 800dd04:	60fb      	str	r3, [r7, #12]
}
 800dd06:	bf00      	nop
 800dd08:	e7fe      	b.n	800dd08 <prvTaskExitError+0x28>
	__asm volatile
 800dd0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd0e:	f383 8811 	msr	BASEPRI, r3
 800dd12:	f3bf 8f6f 	isb	sy
 800dd16:	f3bf 8f4f 	dsb	sy
 800dd1a:	60bb      	str	r3, [r7, #8]
}
 800dd1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dd1e:	bf00      	nop
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d0fc      	beq.n	800dd20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dd26:	bf00      	nop
 800dd28:	bf00      	nop
 800dd2a:	3714      	adds	r7, #20
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd32:	4770      	bx	lr
 800dd34:	2400002c 	.word	0x2400002c
	...

0800dd40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dd40:	4b07      	ldr	r3, [pc, #28]	; (800dd60 <pxCurrentTCBConst2>)
 800dd42:	6819      	ldr	r1, [r3, #0]
 800dd44:	6808      	ldr	r0, [r1, #0]
 800dd46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd4a:	f380 8809 	msr	PSP, r0
 800dd4e:	f3bf 8f6f 	isb	sy
 800dd52:	f04f 0000 	mov.w	r0, #0
 800dd56:	f380 8811 	msr	BASEPRI, r0
 800dd5a:	4770      	bx	lr
 800dd5c:	f3af 8000 	nop.w

0800dd60 <pxCurrentTCBConst2>:
 800dd60:	2400037c 	.word	0x2400037c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dd64:	bf00      	nop
 800dd66:	bf00      	nop

0800dd68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dd68:	4808      	ldr	r0, [pc, #32]	; (800dd8c <prvPortStartFirstTask+0x24>)
 800dd6a:	6800      	ldr	r0, [r0, #0]
 800dd6c:	6800      	ldr	r0, [r0, #0]
 800dd6e:	f380 8808 	msr	MSP, r0
 800dd72:	f04f 0000 	mov.w	r0, #0
 800dd76:	f380 8814 	msr	CONTROL, r0
 800dd7a:	b662      	cpsie	i
 800dd7c:	b661      	cpsie	f
 800dd7e:	f3bf 8f4f 	dsb	sy
 800dd82:	f3bf 8f6f 	isb	sy
 800dd86:	df00      	svc	0
 800dd88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dd8a:	bf00      	nop
 800dd8c:	e000ed08 	.word	0xe000ed08

0800dd90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b086      	sub	sp, #24
 800dd94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dd96:	4b46      	ldr	r3, [pc, #280]	; (800deb0 <xPortStartScheduler+0x120>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	4a46      	ldr	r2, [pc, #280]	; (800deb4 <xPortStartScheduler+0x124>)
 800dd9c:	4293      	cmp	r3, r2
 800dd9e:	d10a      	bne.n	800ddb6 <xPortStartScheduler+0x26>
	__asm volatile
 800dda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dda4:	f383 8811 	msr	BASEPRI, r3
 800dda8:	f3bf 8f6f 	isb	sy
 800ddac:	f3bf 8f4f 	dsb	sy
 800ddb0:	613b      	str	r3, [r7, #16]
}
 800ddb2:	bf00      	nop
 800ddb4:	e7fe      	b.n	800ddb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ddb6:	4b3e      	ldr	r3, [pc, #248]	; (800deb0 <xPortStartScheduler+0x120>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	4a3f      	ldr	r2, [pc, #252]	; (800deb8 <xPortStartScheduler+0x128>)
 800ddbc:	4293      	cmp	r3, r2
 800ddbe:	d10a      	bne.n	800ddd6 <xPortStartScheduler+0x46>
	__asm volatile
 800ddc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddc4:	f383 8811 	msr	BASEPRI, r3
 800ddc8:	f3bf 8f6f 	isb	sy
 800ddcc:	f3bf 8f4f 	dsb	sy
 800ddd0:	60fb      	str	r3, [r7, #12]
}
 800ddd2:	bf00      	nop
 800ddd4:	e7fe      	b.n	800ddd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ddd6:	4b39      	ldr	r3, [pc, #228]	; (800debc <xPortStartScheduler+0x12c>)
 800ddd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ddda:	697b      	ldr	r3, [r7, #20]
 800dddc:	781b      	ldrb	r3, [r3, #0]
 800ddde:	b2db      	uxtb	r3, r3
 800dde0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	22ff      	movs	r2, #255	; 0xff
 800dde6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	781b      	ldrb	r3, [r3, #0]
 800ddec:	b2db      	uxtb	r3, r3
 800ddee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ddf0:	78fb      	ldrb	r3, [r7, #3]
 800ddf2:	b2db      	uxtb	r3, r3
 800ddf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ddf8:	b2da      	uxtb	r2, r3
 800ddfa:	4b31      	ldr	r3, [pc, #196]	; (800dec0 <xPortStartScheduler+0x130>)
 800ddfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ddfe:	4b31      	ldr	r3, [pc, #196]	; (800dec4 <xPortStartScheduler+0x134>)
 800de00:	2207      	movs	r2, #7
 800de02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de04:	e009      	b.n	800de1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800de06:	4b2f      	ldr	r3, [pc, #188]	; (800dec4 <xPortStartScheduler+0x134>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	3b01      	subs	r3, #1
 800de0c:	4a2d      	ldr	r2, [pc, #180]	; (800dec4 <xPortStartScheduler+0x134>)
 800de0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800de10:	78fb      	ldrb	r3, [r7, #3]
 800de12:	b2db      	uxtb	r3, r3
 800de14:	005b      	lsls	r3, r3, #1
 800de16:	b2db      	uxtb	r3, r3
 800de18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de1a:	78fb      	ldrb	r3, [r7, #3]
 800de1c:	b2db      	uxtb	r3, r3
 800de1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de22:	2b80      	cmp	r3, #128	; 0x80
 800de24:	d0ef      	beq.n	800de06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800de26:	4b27      	ldr	r3, [pc, #156]	; (800dec4 <xPortStartScheduler+0x134>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	f1c3 0307 	rsb	r3, r3, #7
 800de2e:	2b04      	cmp	r3, #4
 800de30:	d00a      	beq.n	800de48 <xPortStartScheduler+0xb8>
	__asm volatile
 800de32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de36:	f383 8811 	msr	BASEPRI, r3
 800de3a:	f3bf 8f6f 	isb	sy
 800de3e:	f3bf 8f4f 	dsb	sy
 800de42:	60bb      	str	r3, [r7, #8]
}
 800de44:	bf00      	nop
 800de46:	e7fe      	b.n	800de46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800de48:	4b1e      	ldr	r3, [pc, #120]	; (800dec4 <xPortStartScheduler+0x134>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	021b      	lsls	r3, r3, #8
 800de4e:	4a1d      	ldr	r2, [pc, #116]	; (800dec4 <xPortStartScheduler+0x134>)
 800de50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800de52:	4b1c      	ldr	r3, [pc, #112]	; (800dec4 <xPortStartScheduler+0x134>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800de5a:	4a1a      	ldr	r2, [pc, #104]	; (800dec4 <xPortStartScheduler+0x134>)
 800de5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	b2da      	uxtb	r2, r3
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800de66:	4b18      	ldr	r3, [pc, #96]	; (800dec8 <xPortStartScheduler+0x138>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	4a17      	ldr	r2, [pc, #92]	; (800dec8 <xPortStartScheduler+0x138>)
 800de6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800de70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800de72:	4b15      	ldr	r3, [pc, #84]	; (800dec8 <xPortStartScheduler+0x138>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	4a14      	ldr	r2, [pc, #80]	; (800dec8 <xPortStartScheduler+0x138>)
 800de78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800de7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800de7e:	f000 f8dd 	bl	800e03c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800de82:	4b12      	ldr	r3, [pc, #72]	; (800decc <xPortStartScheduler+0x13c>)
 800de84:	2200      	movs	r2, #0
 800de86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800de88:	f000 f8fc 	bl	800e084 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800de8c:	4b10      	ldr	r3, [pc, #64]	; (800ded0 <xPortStartScheduler+0x140>)
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	4a0f      	ldr	r2, [pc, #60]	; (800ded0 <xPortStartScheduler+0x140>)
 800de92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800de96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800de98:	f7ff ff66 	bl	800dd68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800de9c:	f7ff fa84 	bl	800d3a8 <vTaskSwitchContext>
	prvTaskExitError();
 800dea0:	f7ff ff1e 	bl	800dce0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dea4:	2300      	movs	r3, #0
}
 800dea6:	4618      	mov	r0, r3
 800dea8:	3718      	adds	r7, #24
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}
 800deae:	bf00      	nop
 800deb0:	e000ed00 	.word	0xe000ed00
 800deb4:	410fc271 	.word	0x410fc271
 800deb8:	410fc270 	.word	0x410fc270
 800debc:	e000e400 	.word	0xe000e400
 800dec0:	240004a8 	.word	0x240004a8
 800dec4:	240004ac 	.word	0x240004ac
 800dec8:	e000ed20 	.word	0xe000ed20
 800decc:	2400002c 	.word	0x2400002c
 800ded0:	e000ef34 	.word	0xe000ef34

0800ded4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ded4:	b480      	push	{r7}
 800ded6:	b083      	sub	sp, #12
 800ded8:	af00      	add	r7, sp, #0
	__asm volatile
 800deda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dede:	f383 8811 	msr	BASEPRI, r3
 800dee2:	f3bf 8f6f 	isb	sy
 800dee6:	f3bf 8f4f 	dsb	sy
 800deea:	607b      	str	r3, [r7, #4]
}
 800deec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800deee:	4b0f      	ldr	r3, [pc, #60]	; (800df2c <vPortEnterCritical+0x58>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	3301      	adds	r3, #1
 800def4:	4a0d      	ldr	r2, [pc, #52]	; (800df2c <vPortEnterCritical+0x58>)
 800def6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800def8:	4b0c      	ldr	r3, [pc, #48]	; (800df2c <vPortEnterCritical+0x58>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	2b01      	cmp	r3, #1
 800defe:	d10f      	bne.n	800df20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800df00:	4b0b      	ldr	r3, [pc, #44]	; (800df30 <vPortEnterCritical+0x5c>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	b2db      	uxtb	r3, r3
 800df06:	2b00      	cmp	r3, #0
 800df08:	d00a      	beq.n	800df20 <vPortEnterCritical+0x4c>
	__asm volatile
 800df0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df0e:	f383 8811 	msr	BASEPRI, r3
 800df12:	f3bf 8f6f 	isb	sy
 800df16:	f3bf 8f4f 	dsb	sy
 800df1a:	603b      	str	r3, [r7, #0]
}
 800df1c:	bf00      	nop
 800df1e:	e7fe      	b.n	800df1e <vPortEnterCritical+0x4a>
	}
}
 800df20:	bf00      	nop
 800df22:	370c      	adds	r7, #12
 800df24:	46bd      	mov	sp, r7
 800df26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2a:	4770      	bx	lr
 800df2c:	2400002c 	.word	0x2400002c
 800df30:	e000ed04 	.word	0xe000ed04

0800df34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800df34:	b480      	push	{r7}
 800df36:	b083      	sub	sp, #12
 800df38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800df3a:	4b12      	ldr	r3, [pc, #72]	; (800df84 <vPortExitCritical+0x50>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d10a      	bne.n	800df58 <vPortExitCritical+0x24>
	__asm volatile
 800df42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df46:	f383 8811 	msr	BASEPRI, r3
 800df4a:	f3bf 8f6f 	isb	sy
 800df4e:	f3bf 8f4f 	dsb	sy
 800df52:	607b      	str	r3, [r7, #4]
}
 800df54:	bf00      	nop
 800df56:	e7fe      	b.n	800df56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800df58:	4b0a      	ldr	r3, [pc, #40]	; (800df84 <vPortExitCritical+0x50>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	3b01      	subs	r3, #1
 800df5e:	4a09      	ldr	r2, [pc, #36]	; (800df84 <vPortExitCritical+0x50>)
 800df60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800df62:	4b08      	ldr	r3, [pc, #32]	; (800df84 <vPortExitCritical+0x50>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d105      	bne.n	800df76 <vPortExitCritical+0x42>
 800df6a:	2300      	movs	r3, #0
 800df6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	f383 8811 	msr	BASEPRI, r3
}
 800df74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800df76:	bf00      	nop
 800df78:	370c      	adds	r7, #12
 800df7a:	46bd      	mov	sp, r7
 800df7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df80:	4770      	bx	lr
 800df82:	bf00      	nop
 800df84:	2400002c 	.word	0x2400002c
	...

0800df90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800df90:	f3ef 8009 	mrs	r0, PSP
 800df94:	f3bf 8f6f 	isb	sy
 800df98:	4b15      	ldr	r3, [pc, #84]	; (800dff0 <pxCurrentTCBConst>)
 800df9a:	681a      	ldr	r2, [r3, #0]
 800df9c:	f01e 0f10 	tst.w	lr, #16
 800dfa0:	bf08      	it	eq
 800dfa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dfa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfaa:	6010      	str	r0, [r2, #0]
 800dfac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dfb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dfb4:	f380 8811 	msr	BASEPRI, r0
 800dfb8:	f3bf 8f4f 	dsb	sy
 800dfbc:	f3bf 8f6f 	isb	sy
 800dfc0:	f7ff f9f2 	bl	800d3a8 <vTaskSwitchContext>
 800dfc4:	f04f 0000 	mov.w	r0, #0
 800dfc8:	f380 8811 	msr	BASEPRI, r0
 800dfcc:	bc09      	pop	{r0, r3}
 800dfce:	6819      	ldr	r1, [r3, #0]
 800dfd0:	6808      	ldr	r0, [r1, #0]
 800dfd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfd6:	f01e 0f10 	tst.w	lr, #16
 800dfda:	bf08      	it	eq
 800dfdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dfe0:	f380 8809 	msr	PSP, r0
 800dfe4:	f3bf 8f6f 	isb	sy
 800dfe8:	4770      	bx	lr
 800dfea:	bf00      	nop
 800dfec:	f3af 8000 	nop.w

0800dff0 <pxCurrentTCBConst>:
 800dff0:	2400037c 	.word	0x2400037c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dff4:	bf00      	nop
 800dff6:	bf00      	nop

0800dff8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b082      	sub	sp, #8
 800dffc:	af00      	add	r7, sp, #0
	__asm volatile
 800dffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e002:	f383 8811 	msr	BASEPRI, r3
 800e006:	f3bf 8f6f 	isb	sy
 800e00a:	f3bf 8f4f 	dsb	sy
 800e00e:	607b      	str	r3, [r7, #4]
}
 800e010:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e012:	f7ff f911 	bl	800d238 <xTaskIncrementTick>
 800e016:	4603      	mov	r3, r0
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d003      	beq.n	800e024 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e01c:	4b06      	ldr	r3, [pc, #24]	; (800e038 <SysTick_Handler+0x40>)
 800e01e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e022:	601a      	str	r2, [r3, #0]
 800e024:	2300      	movs	r3, #0
 800e026:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	f383 8811 	msr	BASEPRI, r3
}
 800e02e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e030:	bf00      	nop
 800e032:	3708      	adds	r7, #8
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}
 800e038:	e000ed04 	.word	0xe000ed04

0800e03c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e03c:	b480      	push	{r7}
 800e03e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e040:	4b0b      	ldr	r3, [pc, #44]	; (800e070 <vPortSetupTimerInterrupt+0x34>)
 800e042:	2200      	movs	r2, #0
 800e044:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e046:	4b0b      	ldr	r3, [pc, #44]	; (800e074 <vPortSetupTimerInterrupt+0x38>)
 800e048:	2200      	movs	r2, #0
 800e04a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e04c:	4b0a      	ldr	r3, [pc, #40]	; (800e078 <vPortSetupTimerInterrupt+0x3c>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	4a0a      	ldr	r2, [pc, #40]	; (800e07c <vPortSetupTimerInterrupt+0x40>)
 800e052:	fba2 2303 	umull	r2, r3, r2, r3
 800e056:	099b      	lsrs	r3, r3, #6
 800e058:	4a09      	ldr	r2, [pc, #36]	; (800e080 <vPortSetupTimerInterrupt+0x44>)
 800e05a:	3b01      	subs	r3, #1
 800e05c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e05e:	4b04      	ldr	r3, [pc, #16]	; (800e070 <vPortSetupTimerInterrupt+0x34>)
 800e060:	2207      	movs	r2, #7
 800e062:	601a      	str	r2, [r3, #0]
}
 800e064:	bf00      	nop
 800e066:	46bd      	mov	sp, r7
 800e068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06c:	4770      	bx	lr
 800e06e:	bf00      	nop
 800e070:	e000e010 	.word	0xe000e010
 800e074:	e000e018 	.word	0xe000e018
 800e078:	24000008 	.word	0x24000008
 800e07c:	10624dd3 	.word	0x10624dd3
 800e080:	e000e014 	.word	0xe000e014

0800e084 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e084:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e094 <vPortEnableVFP+0x10>
 800e088:	6801      	ldr	r1, [r0, #0]
 800e08a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e08e:	6001      	str	r1, [r0, #0]
 800e090:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e092:	bf00      	nop
 800e094:	e000ed88 	.word	0xe000ed88

0800e098 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e098:	b480      	push	{r7}
 800e09a:	b085      	sub	sp, #20
 800e09c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e09e:	f3ef 8305 	mrs	r3, IPSR
 800e0a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	2b0f      	cmp	r3, #15
 800e0a8:	d914      	bls.n	800e0d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e0aa:	4a17      	ldr	r2, [pc, #92]	; (800e108 <vPortValidateInterruptPriority+0x70>)
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	4413      	add	r3, r2
 800e0b0:	781b      	ldrb	r3, [r3, #0]
 800e0b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e0b4:	4b15      	ldr	r3, [pc, #84]	; (800e10c <vPortValidateInterruptPriority+0x74>)
 800e0b6:	781b      	ldrb	r3, [r3, #0]
 800e0b8:	7afa      	ldrb	r2, [r7, #11]
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d20a      	bcs.n	800e0d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0c2:	f383 8811 	msr	BASEPRI, r3
 800e0c6:	f3bf 8f6f 	isb	sy
 800e0ca:	f3bf 8f4f 	dsb	sy
 800e0ce:	607b      	str	r3, [r7, #4]
}
 800e0d0:	bf00      	nop
 800e0d2:	e7fe      	b.n	800e0d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e0d4:	4b0e      	ldr	r3, [pc, #56]	; (800e110 <vPortValidateInterruptPriority+0x78>)
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e0dc:	4b0d      	ldr	r3, [pc, #52]	; (800e114 <vPortValidateInterruptPriority+0x7c>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	429a      	cmp	r2, r3
 800e0e2:	d90a      	bls.n	800e0fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0e8:	f383 8811 	msr	BASEPRI, r3
 800e0ec:	f3bf 8f6f 	isb	sy
 800e0f0:	f3bf 8f4f 	dsb	sy
 800e0f4:	603b      	str	r3, [r7, #0]
}
 800e0f6:	bf00      	nop
 800e0f8:	e7fe      	b.n	800e0f8 <vPortValidateInterruptPriority+0x60>
	}
 800e0fa:	bf00      	nop
 800e0fc:	3714      	adds	r7, #20
 800e0fe:	46bd      	mov	sp, r7
 800e100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e104:	4770      	bx	lr
 800e106:	bf00      	nop
 800e108:	e000e3f0 	.word	0xe000e3f0
 800e10c:	240004a8 	.word	0x240004a8
 800e110:	e000ed0c 	.word	0xe000ed0c
 800e114:	240004ac 	.word	0x240004ac

0800e118 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b08a      	sub	sp, #40	; 0x28
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e120:	2300      	movs	r3, #0
 800e122:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e124:	f7fe ffbc 	bl	800d0a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e128:	4b5b      	ldr	r3, [pc, #364]	; (800e298 <pvPortMalloc+0x180>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d101      	bne.n	800e134 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e130:	f000 f920 	bl	800e374 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e134:	4b59      	ldr	r3, [pc, #356]	; (800e29c <pvPortMalloc+0x184>)
 800e136:	681a      	ldr	r2, [r3, #0]
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	4013      	ands	r3, r2
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	f040 8093 	bne.w	800e268 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d01d      	beq.n	800e184 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e148:	2208      	movs	r2, #8
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	4413      	add	r3, r2
 800e14e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f003 0307 	and.w	r3, r3, #7
 800e156:	2b00      	cmp	r3, #0
 800e158:	d014      	beq.n	800e184 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	f023 0307 	bic.w	r3, r3, #7
 800e160:	3308      	adds	r3, #8
 800e162:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f003 0307 	and.w	r3, r3, #7
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d00a      	beq.n	800e184 <pvPortMalloc+0x6c>
	__asm volatile
 800e16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e172:	f383 8811 	msr	BASEPRI, r3
 800e176:	f3bf 8f6f 	isb	sy
 800e17a:	f3bf 8f4f 	dsb	sy
 800e17e:	617b      	str	r3, [r7, #20]
}
 800e180:	bf00      	nop
 800e182:	e7fe      	b.n	800e182 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d06e      	beq.n	800e268 <pvPortMalloc+0x150>
 800e18a:	4b45      	ldr	r3, [pc, #276]	; (800e2a0 <pvPortMalloc+0x188>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	687a      	ldr	r2, [r7, #4]
 800e190:	429a      	cmp	r2, r3
 800e192:	d869      	bhi.n	800e268 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e194:	4b43      	ldr	r3, [pc, #268]	; (800e2a4 <pvPortMalloc+0x18c>)
 800e196:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e198:	4b42      	ldr	r3, [pc, #264]	; (800e2a4 <pvPortMalloc+0x18c>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e19e:	e004      	b.n	800e1aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ac:	685b      	ldr	r3, [r3, #4]
 800e1ae:	687a      	ldr	r2, [r7, #4]
 800e1b0:	429a      	cmp	r2, r3
 800e1b2:	d903      	bls.n	800e1bc <pvPortMalloc+0xa4>
 800e1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d1f1      	bne.n	800e1a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e1bc:	4b36      	ldr	r3, [pc, #216]	; (800e298 <pvPortMalloc+0x180>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1c2:	429a      	cmp	r2, r3
 800e1c4:	d050      	beq.n	800e268 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e1c6:	6a3b      	ldr	r3, [r7, #32]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	2208      	movs	r2, #8
 800e1cc:	4413      	add	r3, r2
 800e1ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1d2:	681a      	ldr	r2, [r3, #0]
 800e1d4:	6a3b      	ldr	r3, [r7, #32]
 800e1d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1da:	685a      	ldr	r2, [r3, #4]
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	1ad2      	subs	r2, r2, r3
 800e1e0:	2308      	movs	r3, #8
 800e1e2:	005b      	lsls	r3, r3, #1
 800e1e4:	429a      	cmp	r2, r3
 800e1e6:	d91f      	bls.n	800e228 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e1e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	4413      	add	r3, r2
 800e1ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e1f0:	69bb      	ldr	r3, [r7, #24]
 800e1f2:	f003 0307 	and.w	r3, r3, #7
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d00a      	beq.n	800e210 <pvPortMalloc+0xf8>
	__asm volatile
 800e1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1fe:	f383 8811 	msr	BASEPRI, r3
 800e202:	f3bf 8f6f 	isb	sy
 800e206:	f3bf 8f4f 	dsb	sy
 800e20a:	613b      	str	r3, [r7, #16]
}
 800e20c:	bf00      	nop
 800e20e:	e7fe      	b.n	800e20e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e212:	685a      	ldr	r2, [r3, #4]
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	1ad2      	subs	r2, r2, r3
 800e218:	69bb      	ldr	r3, [r7, #24]
 800e21a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e21e:	687a      	ldr	r2, [r7, #4]
 800e220:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e222:	69b8      	ldr	r0, [r7, #24]
 800e224:	f000 f908 	bl	800e438 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e228:	4b1d      	ldr	r3, [pc, #116]	; (800e2a0 <pvPortMalloc+0x188>)
 800e22a:	681a      	ldr	r2, [r3, #0]
 800e22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e22e:	685b      	ldr	r3, [r3, #4]
 800e230:	1ad3      	subs	r3, r2, r3
 800e232:	4a1b      	ldr	r2, [pc, #108]	; (800e2a0 <pvPortMalloc+0x188>)
 800e234:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e236:	4b1a      	ldr	r3, [pc, #104]	; (800e2a0 <pvPortMalloc+0x188>)
 800e238:	681a      	ldr	r2, [r3, #0]
 800e23a:	4b1b      	ldr	r3, [pc, #108]	; (800e2a8 <pvPortMalloc+0x190>)
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	429a      	cmp	r2, r3
 800e240:	d203      	bcs.n	800e24a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e242:	4b17      	ldr	r3, [pc, #92]	; (800e2a0 <pvPortMalloc+0x188>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	4a18      	ldr	r2, [pc, #96]	; (800e2a8 <pvPortMalloc+0x190>)
 800e248:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e24c:	685a      	ldr	r2, [r3, #4]
 800e24e:	4b13      	ldr	r3, [pc, #76]	; (800e29c <pvPortMalloc+0x184>)
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	431a      	orrs	r2, r3
 800e254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e256:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e25a:	2200      	movs	r2, #0
 800e25c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e25e:	4b13      	ldr	r3, [pc, #76]	; (800e2ac <pvPortMalloc+0x194>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	3301      	adds	r3, #1
 800e264:	4a11      	ldr	r2, [pc, #68]	; (800e2ac <pvPortMalloc+0x194>)
 800e266:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e268:	f7fe ff28 	bl	800d0bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e26c:	69fb      	ldr	r3, [r7, #28]
 800e26e:	f003 0307 	and.w	r3, r3, #7
 800e272:	2b00      	cmp	r3, #0
 800e274:	d00a      	beq.n	800e28c <pvPortMalloc+0x174>
	__asm volatile
 800e276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e27a:	f383 8811 	msr	BASEPRI, r3
 800e27e:	f3bf 8f6f 	isb	sy
 800e282:	f3bf 8f4f 	dsb	sy
 800e286:	60fb      	str	r3, [r7, #12]
}
 800e288:	bf00      	nop
 800e28a:	e7fe      	b.n	800e28a <pvPortMalloc+0x172>
	return pvReturn;
 800e28c:	69fb      	ldr	r3, [r7, #28]
}
 800e28e:	4618      	mov	r0, r3
 800e290:	3728      	adds	r7, #40	; 0x28
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}
 800e296:	bf00      	nop
 800e298:	240040b8 	.word	0x240040b8
 800e29c:	240040cc 	.word	0x240040cc
 800e2a0:	240040bc 	.word	0x240040bc
 800e2a4:	240040b0 	.word	0x240040b0
 800e2a8:	240040c0 	.word	0x240040c0
 800e2ac:	240040c4 	.word	0x240040c4

0800e2b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b086      	sub	sp, #24
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d04d      	beq.n	800e35e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e2c2:	2308      	movs	r3, #8
 800e2c4:	425b      	negs	r3, r3
 800e2c6:	697a      	ldr	r2, [r7, #20]
 800e2c8:	4413      	add	r3, r2
 800e2ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e2cc:	697b      	ldr	r3, [r7, #20]
 800e2ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e2d0:	693b      	ldr	r3, [r7, #16]
 800e2d2:	685a      	ldr	r2, [r3, #4]
 800e2d4:	4b24      	ldr	r3, [pc, #144]	; (800e368 <vPortFree+0xb8>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	4013      	ands	r3, r2
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d10a      	bne.n	800e2f4 <vPortFree+0x44>
	__asm volatile
 800e2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2e2:	f383 8811 	msr	BASEPRI, r3
 800e2e6:	f3bf 8f6f 	isb	sy
 800e2ea:	f3bf 8f4f 	dsb	sy
 800e2ee:	60fb      	str	r3, [r7, #12]
}
 800e2f0:	bf00      	nop
 800e2f2:	e7fe      	b.n	800e2f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e2f4:	693b      	ldr	r3, [r7, #16]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d00a      	beq.n	800e312 <vPortFree+0x62>
	__asm volatile
 800e2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e300:	f383 8811 	msr	BASEPRI, r3
 800e304:	f3bf 8f6f 	isb	sy
 800e308:	f3bf 8f4f 	dsb	sy
 800e30c:	60bb      	str	r3, [r7, #8]
}
 800e30e:	bf00      	nop
 800e310:	e7fe      	b.n	800e310 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e312:	693b      	ldr	r3, [r7, #16]
 800e314:	685a      	ldr	r2, [r3, #4]
 800e316:	4b14      	ldr	r3, [pc, #80]	; (800e368 <vPortFree+0xb8>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	4013      	ands	r3, r2
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d01e      	beq.n	800e35e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e320:	693b      	ldr	r3, [r7, #16]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d11a      	bne.n	800e35e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e328:	693b      	ldr	r3, [r7, #16]
 800e32a:	685a      	ldr	r2, [r3, #4]
 800e32c:	4b0e      	ldr	r3, [pc, #56]	; (800e368 <vPortFree+0xb8>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	43db      	mvns	r3, r3
 800e332:	401a      	ands	r2, r3
 800e334:	693b      	ldr	r3, [r7, #16]
 800e336:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e338:	f7fe feb2 	bl	800d0a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e33c:	693b      	ldr	r3, [r7, #16]
 800e33e:	685a      	ldr	r2, [r3, #4]
 800e340:	4b0a      	ldr	r3, [pc, #40]	; (800e36c <vPortFree+0xbc>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	4413      	add	r3, r2
 800e346:	4a09      	ldr	r2, [pc, #36]	; (800e36c <vPortFree+0xbc>)
 800e348:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e34a:	6938      	ldr	r0, [r7, #16]
 800e34c:	f000 f874 	bl	800e438 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e350:	4b07      	ldr	r3, [pc, #28]	; (800e370 <vPortFree+0xc0>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	3301      	adds	r3, #1
 800e356:	4a06      	ldr	r2, [pc, #24]	; (800e370 <vPortFree+0xc0>)
 800e358:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e35a:	f7fe feaf 	bl	800d0bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e35e:	bf00      	nop
 800e360:	3718      	adds	r7, #24
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}
 800e366:	bf00      	nop
 800e368:	240040cc 	.word	0x240040cc
 800e36c:	240040bc 	.word	0x240040bc
 800e370:	240040c8 	.word	0x240040c8

0800e374 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e374:	b480      	push	{r7}
 800e376:	b085      	sub	sp, #20
 800e378:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e37a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e37e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e380:	4b27      	ldr	r3, [pc, #156]	; (800e420 <prvHeapInit+0xac>)
 800e382:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	f003 0307 	and.w	r3, r3, #7
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d00c      	beq.n	800e3a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	3307      	adds	r3, #7
 800e392:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	f023 0307 	bic.w	r3, r3, #7
 800e39a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e39c:	68ba      	ldr	r2, [r7, #8]
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	1ad3      	subs	r3, r2, r3
 800e3a2:	4a1f      	ldr	r2, [pc, #124]	; (800e420 <prvHeapInit+0xac>)
 800e3a4:	4413      	add	r3, r2
 800e3a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e3ac:	4a1d      	ldr	r2, [pc, #116]	; (800e424 <prvHeapInit+0xb0>)
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e3b2:	4b1c      	ldr	r3, [pc, #112]	; (800e424 <prvHeapInit+0xb0>)
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	68ba      	ldr	r2, [r7, #8]
 800e3bc:	4413      	add	r3, r2
 800e3be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e3c0:	2208      	movs	r2, #8
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	1a9b      	subs	r3, r3, r2
 800e3c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	f023 0307 	bic.w	r3, r3, #7
 800e3ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	4a15      	ldr	r2, [pc, #84]	; (800e428 <prvHeapInit+0xb4>)
 800e3d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e3d6:	4b14      	ldr	r3, [pc, #80]	; (800e428 <prvHeapInit+0xb4>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	2200      	movs	r2, #0
 800e3dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e3de:	4b12      	ldr	r3, [pc, #72]	; (800e428 <prvHeapInit+0xb4>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	68fa      	ldr	r2, [r7, #12]
 800e3ee:	1ad2      	subs	r2, r2, r3
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e3f4:	4b0c      	ldr	r3, [pc, #48]	; (800e428 <prvHeapInit+0xb4>)
 800e3f6:	681a      	ldr	r2, [r3, #0]
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e3fc:	683b      	ldr	r3, [r7, #0]
 800e3fe:	685b      	ldr	r3, [r3, #4]
 800e400:	4a0a      	ldr	r2, [pc, #40]	; (800e42c <prvHeapInit+0xb8>)
 800e402:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	685b      	ldr	r3, [r3, #4]
 800e408:	4a09      	ldr	r2, [pc, #36]	; (800e430 <prvHeapInit+0xbc>)
 800e40a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e40c:	4b09      	ldr	r3, [pc, #36]	; (800e434 <prvHeapInit+0xc0>)
 800e40e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e412:	601a      	str	r2, [r3, #0]
}
 800e414:	bf00      	nop
 800e416:	3714      	adds	r7, #20
 800e418:	46bd      	mov	sp, r7
 800e41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41e:	4770      	bx	lr
 800e420:	240004b0 	.word	0x240004b0
 800e424:	240040b0 	.word	0x240040b0
 800e428:	240040b8 	.word	0x240040b8
 800e42c:	240040c0 	.word	0x240040c0
 800e430:	240040bc 	.word	0x240040bc
 800e434:	240040cc 	.word	0x240040cc

0800e438 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e438:	b480      	push	{r7}
 800e43a:	b085      	sub	sp, #20
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e440:	4b28      	ldr	r3, [pc, #160]	; (800e4e4 <prvInsertBlockIntoFreeList+0xac>)
 800e442:	60fb      	str	r3, [r7, #12]
 800e444:	e002      	b.n	800e44c <prvInsertBlockIntoFreeList+0x14>
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	60fb      	str	r3, [r7, #12]
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	687a      	ldr	r2, [r7, #4]
 800e452:	429a      	cmp	r2, r3
 800e454:	d8f7      	bhi.n	800e446 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	685b      	ldr	r3, [r3, #4]
 800e45e:	68ba      	ldr	r2, [r7, #8]
 800e460:	4413      	add	r3, r2
 800e462:	687a      	ldr	r2, [r7, #4]
 800e464:	429a      	cmp	r2, r3
 800e466:	d108      	bne.n	800e47a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	685a      	ldr	r2, [r3, #4]
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	685b      	ldr	r3, [r3, #4]
 800e470:	441a      	add	r2, r3
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	685b      	ldr	r3, [r3, #4]
 800e482:	68ba      	ldr	r2, [r7, #8]
 800e484:	441a      	add	r2, r3
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	429a      	cmp	r2, r3
 800e48c:	d118      	bne.n	800e4c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	681a      	ldr	r2, [r3, #0]
 800e492:	4b15      	ldr	r3, [pc, #84]	; (800e4e8 <prvInsertBlockIntoFreeList+0xb0>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	429a      	cmp	r2, r3
 800e498:	d00d      	beq.n	800e4b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	685a      	ldr	r2, [r3, #4]
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	685b      	ldr	r3, [r3, #4]
 800e4a4:	441a      	add	r2, r3
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	681a      	ldr	r2, [r3, #0]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	601a      	str	r2, [r3, #0]
 800e4b4:	e008      	b.n	800e4c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e4b6:	4b0c      	ldr	r3, [pc, #48]	; (800e4e8 <prvInsertBlockIntoFreeList+0xb0>)
 800e4b8:	681a      	ldr	r2, [r3, #0]
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	601a      	str	r2, [r3, #0]
 800e4be:	e003      	b.n	800e4c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	681a      	ldr	r2, [r3, #0]
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e4c8:	68fa      	ldr	r2, [r7, #12]
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	429a      	cmp	r2, r3
 800e4ce:	d002      	beq.n	800e4d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	687a      	ldr	r2, [r7, #4]
 800e4d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e4d6:	bf00      	nop
 800e4d8:	3714      	adds	r7, #20
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e0:	4770      	bx	lr
 800e4e2:	bf00      	nop
 800e4e4:	240040b0 	.word	0x240040b0
 800e4e8:	240040b8 	.word	0x240040b8

0800e4ec <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b084      	sub	sp, #16
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
 800e4f4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800e4f6:	f008 fa81 	bl	80169fc <sys_timeouts_sleeptime>
 800e4fa:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e502:	d10b      	bne.n	800e51c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800e504:	4813      	ldr	r0, [pc, #76]	; (800e554 <tcpip_timeouts_mbox_fetch+0x68>)
 800e506:	f00b f8a8 	bl	801965a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800e50a:	2200      	movs	r2, #0
 800e50c:	6839      	ldr	r1, [r7, #0]
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f00b f81a 	bl	8019548 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800e514:	480f      	ldr	r0, [pc, #60]	; (800e554 <tcpip_timeouts_mbox_fetch+0x68>)
 800e516:	f00b f891 	bl	801963c <sys_mutex_lock>
    return;
 800e51a:	e018      	b.n	800e54e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d102      	bne.n	800e528 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800e522:	f008 fa31 	bl	8016988 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800e526:	e7e6      	b.n	800e4f6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800e528:	480a      	ldr	r0, [pc, #40]	; (800e554 <tcpip_timeouts_mbox_fetch+0x68>)
 800e52a:	f00b f896 	bl	801965a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800e52e:	68fa      	ldr	r2, [r7, #12]
 800e530:	6839      	ldr	r1, [r7, #0]
 800e532:	6878      	ldr	r0, [r7, #4]
 800e534:	f00b f808 	bl	8019548 <sys_arch_mbox_fetch>
 800e538:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800e53a:	4806      	ldr	r0, [pc, #24]	; (800e554 <tcpip_timeouts_mbox_fetch+0x68>)
 800e53c:	f00b f87e 	bl	801963c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e546:	d102      	bne.n	800e54e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800e548:	f008 fa1e 	bl	8016988 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800e54c:	e7d3      	b.n	800e4f6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800e54e:	3710      	adds	r7, #16
 800e550:	46bd      	mov	sp, r7
 800e552:	bd80      	pop	{r7, pc}
 800e554:	240047a0 	.word	0x240047a0

0800e558 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b084      	sub	sp, #16
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800e560:	4810      	ldr	r0, [pc, #64]	; (800e5a4 <tcpip_thread+0x4c>)
 800e562:	f00b f86b 	bl	801963c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800e566:	4b10      	ldr	r3, [pc, #64]	; (800e5a8 <tcpip_thread+0x50>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d005      	beq.n	800e57a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800e56e:	4b0e      	ldr	r3, [pc, #56]	; (800e5a8 <tcpip_thread+0x50>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	4a0e      	ldr	r2, [pc, #56]	; (800e5ac <tcpip_thread+0x54>)
 800e574:	6812      	ldr	r2, [r2, #0]
 800e576:	4610      	mov	r0, r2
 800e578:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800e57a:	f107 030c 	add.w	r3, r7, #12
 800e57e:	4619      	mov	r1, r3
 800e580:	480b      	ldr	r0, [pc, #44]	; (800e5b0 <tcpip_thread+0x58>)
 800e582:	f7ff ffb3 	bl	800e4ec <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d106      	bne.n	800e59a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e58c:	4b09      	ldr	r3, [pc, #36]	; (800e5b4 <tcpip_thread+0x5c>)
 800e58e:	2291      	movs	r2, #145	; 0x91
 800e590:	4909      	ldr	r1, [pc, #36]	; (800e5b8 <tcpip_thread+0x60>)
 800e592:	480a      	ldr	r0, [pc, #40]	; (800e5bc <tcpip_thread+0x64>)
 800e594:	f00b fa4e 	bl	8019a34 <iprintf>
      continue;
 800e598:	e003      	b.n	800e5a2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	4618      	mov	r0, r3
 800e59e:	f000 f80f 	bl	800e5c0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800e5a2:	e7ea      	b.n	800e57a <tcpip_thread+0x22>
 800e5a4:	240047a0 	.word	0x240047a0
 800e5a8:	240040d0 	.word	0x240040d0
 800e5ac:	240040d4 	.word	0x240040d4
 800e5b0:	240040d8 	.word	0x240040d8
 800e5b4:	0801aaf4 	.word	0x0801aaf4
 800e5b8:	0801ab24 	.word	0x0801ab24
 800e5bc:	0801ab44 	.word	0x0801ab44

0800e5c0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b082      	sub	sp, #8
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	781b      	ldrb	r3, [r3, #0]
 800e5cc:	2b02      	cmp	r3, #2
 800e5ce:	d026      	beq.n	800e61e <tcpip_thread_handle_msg+0x5e>
 800e5d0:	2b02      	cmp	r3, #2
 800e5d2:	dc2b      	bgt.n	800e62c <tcpip_thread_handle_msg+0x6c>
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d002      	beq.n	800e5de <tcpip_thread_handle_msg+0x1e>
 800e5d8:	2b01      	cmp	r3, #1
 800e5da:	d015      	beq.n	800e608 <tcpip_thread_handle_msg+0x48>
 800e5dc:	e026      	b.n	800e62c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	68db      	ldr	r3, [r3, #12]
 800e5e2:	687a      	ldr	r2, [r7, #4]
 800e5e4:	6850      	ldr	r0, [r2, #4]
 800e5e6:	687a      	ldr	r2, [r7, #4]
 800e5e8:	6892      	ldr	r2, [r2, #8]
 800e5ea:	4611      	mov	r1, r2
 800e5ec:	4798      	blx	r3
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d004      	beq.n	800e5fe <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	685b      	ldr	r3, [r3, #4]
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	f001 fdc3 	bl	8010184 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e5fe:	6879      	ldr	r1, [r7, #4]
 800e600:	2009      	movs	r0, #9
 800e602:	f000 ff1b 	bl	800f43c <memp_free>
      break;
 800e606:	e018      	b.n	800e63a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	685b      	ldr	r3, [r3, #4]
 800e60c:	687a      	ldr	r2, [r7, #4]
 800e60e:	6892      	ldr	r2, [r2, #8]
 800e610:	4610      	mov	r0, r2
 800e612:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800e614:	6879      	ldr	r1, [r7, #4]
 800e616:	2008      	movs	r0, #8
 800e618:	f000 ff10 	bl	800f43c <memp_free>
      break;
 800e61c:	e00d      	b.n	800e63a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	685b      	ldr	r3, [r3, #4]
 800e622:	687a      	ldr	r2, [r7, #4]
 800e624:	6892      	ldr	r2, [r2, #8]
 800e626:	4610      	mov	r0, r2
 800e628:	4798      	blx	r3
      break;
 800e62a:	e006      	b.n	800e63a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e62c:	4b05      	ldr	r3, [pc, #20]	; (800e644 <tcpip_thread_handle_msg+0x84>)
 800e62e:	22cf      	movs	r2, #207	; 0xcf
 800e630:	4905      	ldr	r1, [pc, #20]	; (800e648 <tcpip_thread_handle_msg+0x88>)
 800e632:	4806      	ldr	r0, [pc, #24]	; (800e64c <tcpip_thread_handle_msg+0x8c>)
 800e634:	f00b f9fe 	bl	8019a34 <iprintf>
      break;
 800e638:	bf00      	nop
  }
}
 800e63a:	bf00      	nop
 800e63c:	3708      	adds	r7, #8
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}
 800e642:	bf00      	nop
 800e644:	0801aaf4 	.word	0x0801aaf4
 800e648:	0801ab24 	.word	0x0801ab24
 800e64c:	0801ab44 	.word	0x0801ab44

0800e650 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b086      	sub	sp, #24
 800e654:	af00      	add	r7, sp, #0
 800e656:	60f8      	str	r0, [r7, #12]
 800e658:	60b9      	str	r1, [r7, #8]
 800e65a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800e65c:	481a      	ldr	r0, [pc, #104]	; (800e6c8 <tcpip_inpkt+0x78>)
 800e65e:	f00a ffb2 	bl	80195c6 <sys_mbox_valid>
 800e662:	4603      	mov	r3, r0
 800e664:	2b00      	cmp	r3, #0
 800e666:	d105      	bne.n	800e674 <tcpip_inpkt+0x24>
 800e668:	4b18      	ldr	r3, [pc, #96]	; (800e6cc <tcpip_inpkt+0x7c>)
 800e66a:	22fc      	movs	r2, #252	; 0xfc
 800e66c:	4918      	ldr	r1, [pc, #96]	; (800e6d0 <tcpip_inpkt+0x80>)
 800e66e:	4819      	ldr	r0, [pc, #100]	; (800e6d4 <tcpip_inpkt+0x84>)
 800e670:	f00b f9e0 	bl	8019a34 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800e674:	2009      	movs	r0, #9
 800e676:	f000 fe6b 	bl	800f350 <memp_malloc>
 800e67a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800e67c:	697b      	ldr	r3, [r7, #20]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d102      	bne.n	800e688 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800e682:	f04f 33ff 	mov.w	r3, #4294967295
 800e686:	e01a      	b.n	800e6be <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800e688:	697b      	ldr	r3, [r7, #20]
 800e68a:	2200      	movs	r2, #0
 800e68c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	68fa      	ldr	r2, [r7, #12]
 800e692:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800e694:	697b      	ldr	r3, [r7, #20]
 800e696:	68ba      	ldr	r2, [r7, #8]
 800e698:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800e69a:	697b      	ldr	r3, [r7, #20]
 800e69c:	687a      	ldr	r2, [r7, #4]
 800e69e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800e6a0:	6979      	ldr	r1, [r7, #20]
 800e6a2:	4809      	ldr	r0, [pc, #36]	; (800e6c8 <tcpip_inpkt+0x78>)
 800e6a4:	f00a ff36 	bl	8019514 <sys_mbox_trypost>
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d006      	beq.n	800e6bc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e6ae:	6979      	ldr	r1, [r7, #20]
 800e6b0:	2009      	movs	r0, #9
 800e6b2:	f000 fec3 	bl	800f43c <memp_free>
    return ERR_MEM;
 800e6b6:	f04f 33ff 	mov.w	r3, #4294967295
 800e6ba:	e000      	b.n	800e6be <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800e6bc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	3718      	adds	r7, #24
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}
 800e6c6:	bf00      	nop
 800e6c8:	240040d8 	.word	0x240040d8
 800e6cc:	0801aaf4 	.word	0x0801aaf4
 800e6d0:	0801ab6c 	.word	0x0801ab6c
 800e6d4:	0801ab44 	.word	0x0801ab44

0800e6d8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b082      	sub	sp, #8
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
 800e6e0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e6e8:	f003 0318 	and.w	r3, r3, #24
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d006      	beq.n	800e6fe <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800e6f0:	4a08      	ldr	r2, [pc, #32]	; (800e714 <tcpip_input+0x3c>)
 800e6f2:	6839      	ldr	r1, [r7, #0]
 800e6f4:	6878      	ldr	r0, [r7, #4]
 800e6f6:	f7ff ffab 	bl	800e650 <tcpip_inpkt>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	e005      	b.n	800e70a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800e6fe:	4a06      	ldr	r2, [pc, #24]	; (800e718 <tcpip_input+0x40>)
 800e700:	6839      	ldr	r1, [r7, #0]
 800e702:	6878      	ldr	r0, [r7, #4]
 800e704:	f7ff ffa4 	bl	800e650 <tcpip_inpkt>
 800e708:	4603      	mov	r3, r0
}
 800e70a:	4618      	mov	r0, r3
 800e70c:	3708      	adds	r7, #8
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd80      	pop	{r7, pc}
 800e712:	bf00      	nop
 800e714:	08019325 	.word	0x08019325
 800e718:	08018115 	.word	0x08018115

0800e71c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b084      	sub	sp, #16
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
 800e724:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800e726:	4819      	ldr	r0, [pc, #100]	; (800e78c <tcpip_try_callback+0x70>)
 800e728:	f00a ff4d 	bl	80195c6 <sys_mbox_valid>
 800e72c:	4603      	mov	r3, r0
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d106      	bne.n	800e740 <tcpip_try_callback+0x24>
 800e732:	4b17      	ldr	r3, [pc, #92]	; (800e790 <tcpip_try_callback+0x74>)
 800e734:	f240 125d 	movw	r2, #349	; 0x15d
 800e738:	4916      	ldr	r1, [pc, #88]	; (800e794 <tcpip_try_callback+0x78>)
 800e73a:	4817      	ldr	r0, [pc, #92]	; (800e798 <tcpip_try_callback+0x7c>)
 800e73c:	f00b f97a 	bl	8019a34 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800e740:	2008      	movs	r0, #8
 800e742:	f000 fe05 	bl	800f350 <memp_malloc>
 800e746:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d102      	bne.n	800e754 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800e74e:	f04f 33ff 	mov.w	r3, #4294967295
 800e752:	e017      	b.n	800e784 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	2201      	movs	r2, #1
 800e758:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	687a      	ldr	r2, [r7, #4]
 800e75e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	683a      	ldr	r2, [r7, #0]
 800e764:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800e766:	68f9      	ldr	r1, [r7, #12]
 800e768:	4808      	ldr	r0, [pc, #32]	; (800e78c <tcpip_try_callback+0x70>)
 800e76a:	f00a fed3 	bl	8019514 <sys_mbox_trypost>
 800e76e:	4603      	mov	r3, r0
 800e770:	2b00      	cmp	r3, #0
 800e772:	d006      	beq.n	800e782 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800e774:	68f9      	ldr	r1, [r7, #12]
 800e776:	2008      	movs	r0, #8
 800e778:	f000 fe60 	bl	800f43c <memp_free>
    return ERR_MEM;
 800e77c:	f04f 33ff 	mov.w	r3, #4294967295
 800e780:	e000      	b.n	800e784 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800e782:	2300      	movs	r3, #0
}
 800e784:	4618      	mov	r0, r3
 800e786:	3710      	adds	r7, #16
 800e788:	46bd      	mov	sp, r7
 800e78a:	bd80      	pop	{r7, pc}
 800e78c:	240040d8 	.word	0x240040d8
 800e790:	0801aaf4 	.word	0x0801aaf4
 800e794:	0801ab6c 	.word	0x0801ab6c
 800e798:	0801ab44 	.word	0x0801ab44

0800e79c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b084      	sub	sp, #16
 800e7a0:	af02      	add	r7, sp, #8
 800e7a2:	6078      	str	r0, [r7, #4]
 800e7a4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800e7a6:	f000 f92d 	bl	800ea04 <lwip_init>

  tcpip_init_done = initfunc;
 800e7aa:	4a17      	ldr	r2, [pc, #92]	; (800e808 <tcpip_init+0x6c>)
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800e7b0:	4a16      	ldr	r2, [pc, #88]	; (800e80c <tcpip_init+0x70>)
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800e7b6:	2106      	movs	r1, #6
 800e7b8:	4815      	ldr	r0, [pc, #84]	; (800e810 <tcpip_init+0x74>)
 800e7ba:	f00a fe89 	bl	80194d0 <sys_mbox_new>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d006      	beq.n	800e7d2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800e7c4:	4b13      	ldr	r3, [pc, #76]	; (800e814 <tcpip_init+0x78>)
 800e7c6:	f240 2261 	movw	r2, #609	; 0x261
 800e7ca:	4913      	ldr	r1, [pc, #76]	; (800e818 <tcpip_init+0x7c>)
 800e7cc:	4813      	ldr	r0, [pc, #76]	; (800e81c <tcpip_init+0x80>)
 800e7ce:	f00b f931 	bl	8019a34 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800e7d2:	4813      	ldr	r0, [pc, #76]	; (800e820 <tcpip_init+0x84>)
 800e7d4:	f00a ff16 	bl	8019604 <sys_mutex_new>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d006      	beq.n	800e7ec <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800e7de:	4b0d      	ldr	r3, [pc, #52]	; (800e814 <tcpip_init+0x78>)
 800e7e0:	f240 2265 	movw	r2, #613	; 0x265
 800e7e4:	490f      	ldr	r1, [pc, #60]	; (800e824 <tcpip_init+0x88>)
 800e7e6:	480d      	ldr	r0, [pc, #52]	; (800e81c <tcpip_init+0x80>)
 800e7e8:	f00b f924 	bl	8019a34 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	9300      	str	r3, [sp, #0]
 800e7f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	490c      	ldr	r1, [pc, #48]	; (800e828 <tcpip_init+0x8c>)
 800e7f8:	480c      	ldr	r0, [pc, #48]	; (800e82c <tcpip_init+0x90>)
 800e7fa:	f00a ff3b 	bl	8019674 <sys_thread_new>
}
 800e7fe:	bf00      	nop
 800e800:	3708      	adds	r7, #8
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}
 800e806:	bf00      	nop
 800e808:	240040d0 	.word	0x240040d0
 800e80c:	240040d4 	.word	0x240040d4
 800e810:	240040d8 	.word	0x240040d8
 800e814:	0801aaf4 	.word	0x0801aaf4
 800e818:	0801ab7c 	.word	0x0801ab7c
 800e81c:	0801ab44 	.word	0x0801ab44
 800e820:	240047a0 	.word	0x240047a0
 800e824:	0801aba0 	.word	0x0801aba0
 800e828:	0800e559 	.word	0x0800e559
 800e82c:	0801abc4 	.word	0x0801abc4

0800e830 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800e830:	b480      	push	{r7}
 800e832:	b083      	sub	sp, #12
 800e834:	af00      	add	r7, sp, #0
 800e836:	4603      	mov	r3, r0
 800e838:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800e83a:	88fb      	ldrh	r3, [r7, #6]
 800e83c:	021b      	lsls	r3, r3, #8
 800e83e:	b21a      	sxth	r2, r3
 800e840:	88fb      	ldrh	r3, [r7, #6]
 800e842:	0a1b      	lsrs	r3, r3, #8
 800e844:	b29b      	uxth	r3, r3
 800e846:	b21b      	sxth	r3, r3
 800e848:	4313      	orrs	r3, r2
 800e84a:	b21b      	sxth	r3, r3
 800e84c:	b29b      	uxth	r3, r3
}
 800e84e:	4618      	mov	r0, r3
 800e850:	370c      	adds	r7, #12
 800e852:	46bd      	mov	sp, r7
 800e854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e858:	4770      	bx	lr

0800e85a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800e85a:	b480      	push	{r7}
 800e85c:	b083      	sub	sp, #12
 800e85e:	af00      	add	r7, sp, #0
 800e860:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	061a      	lsls	r2, r3, #24
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	021b      	lsls	r3, r3, #8
 800e86a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e86e:	431a      	orrs	r2, r3
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	0a1b      	lsrs	r3, r3, #8
 800e874:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e878:	431a      	orrs	r2, r3
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	0e1b      	lsrs	r3, r3, #24
 800e87e:	4313      	orrs	r3, r2
}
 800e880:	4618      	mov	r0, r3
 800e882:	370c      	adds	r7, #12
 800e884:	46bd      	mov	sp, r7
 800e886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88a:	4770      	bx	lr

0800e88c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800e88c:	b480      	push	{r7}
 800e88e:	b089      	sub	sp, #36	; 0x24
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
 800e894:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800e89a:	2300      	movs	r3, #0
 800e89c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800e89e:	2300      	movs	r3, #0
 800e8a0:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800e8a2:	69fb      	ldr	r3, [r7, #28]
 800e8a4:	f003 0301 	and.w	r3, r3, #1
 800e8a8:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800e8aa:	693b      	ldr	r3, [r7, #16]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d00d      	beq.n	800e8cc <lwip_standard_chksum+0x40>
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	dd0a      	ble.n	800e8cc <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800e8b6:	69fa      	ldr	r2, [r7, #28]
 800e8b8:	1c53      	adds	r3, r2, #1
 800e8ba:	61fb      	str	r3, [r7, #28]
 800e8bc:	f107 030e 	add.w	r3, r7, #14
 800e8c0:	3301      	adds	r3, #1
 800e8c2:	7812      	ldrb	r2, [r2, #0]
 800e8c4:	701a      	strb	r2, [r3, #0]
    len--;
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	3b01      	subs	r3, #1
 800e8ca:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800e8cc:	69fb      	ldr	r3, [r7, #28]
 800e8ce:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800e8d0:	e00a      	b.n	800e8e8 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800e8d2:	69bb      	ldr	r3, [r7, #24]
 800e8d4:	1c9a      	adds	r2, r3, #2
 800e8d6:	61ba      	str	r2, [r7, #24]
 800e8d8:	881b      	ldrh	r3, [r3, #0]
 800e8da:	461a      	mov	r2, r3
 800e8dc:	697b      	ldr	r3, [r7, #20]
 800e8de:	4413      	add	r3, r2
 800e8e0:	617b      	str	r3, [r7, #20]
    len -= 2;
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	3b02      	subs	r3, #2
 800e8e6:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	2b01      	cmp	r3, #1
 800e8ec:	dcf1      	bgt.n	800e8d2 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	dd04      	ble.n	800e8fe <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800e8f4:	f107 030e 	add.w	r3, r7, #14
 800e8f8:	69ba      	ldr	r2, [r7, #24]
 800e8fa:	7812      	ldrb	r2, [r2, #0]
 800e8fc:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800e8fe:	89fb      	ldrh	r3, [r7, #14]
 800e900:	461a      	mov	r2, r3
 800e902:	697b      	ldr	r3, [r7, #20]
 800e904:	4413      	add	r3, r2
 800e906:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800e908:	697b      	ldr	r3, [r7, #20]
 800e90a:	0c1a      	lsrs	r2, r3, #16
 800e90c:	697b      	ldr	r3, [r7, #20]
 800e90e:	b29b      	uxth	r3, r3
 800e910:	4413      	add	r3, r2
 800e912:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800e914:	697b      	ldr	r3, [r7, #20]
 800e916:	0c1a      	lsrs	r2, r3, #16
 800e918:	697b      	ldr	r3, [r7, #20]
 800e91a:	b29b      	uxth	r3, r3
 800e91c:	4413      	add	r3, r2
 800e91e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800e920:	693b      	ldr	r3, [r7, #16]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d007      	beq.n	800e936 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800e926:	697b      	ldr	r3, [r7, #20]
 800e928:	021b      	lsls	r3, r3, #8
 800e92a:	b29a      	uxth	r2, r3
 800e92c:	697b      	ldr	r3, [r7, #20]
 800e92e:	0a1b      	lsrs	r3, r3, #8
 800e930:	b2db      	uxtb	r3, r3
 800e932:	4313      	orrs	r3, r2
 800e934:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800e936:	697b      	ldr	r3, [r7, #20]
 800e938:	b29b      	uxth	r3, r3
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	3724      	adds	r7, #36	; 0x24
 800e93e:	46bd      	mov	sp, r7
 800e940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e944:	4770      	bx	lr

0800e946 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800e946:	b580      	push	{r7, lr}
 800e948:	b082      	sub	sp, #8
 800e94a:	af00      	add	r7, sp, #0
 800e94c:	6078      	str	r0, [r7, #4]
 800e94e:	460b      	mov	r3, r1
 800e950:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800e952:	887b      	ldrh	r3, [r7, #2]
 800e954:	4619      	mov	r1, r3
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	f7ff ff98 	bl	800e88c <lwip_standard_chksum>
 800e95c:	4603      	mov	r3, r0
 800e95e:	43db      	mvns	r3, r3
 800e960:	b29b      	uxth	r3, r3
}
 800e962:	4618      	mov	r0, r3
 800e964:	3708      	adds	r7, #8
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}

0800e96a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800e96a:	b580      	push	{r7, lr}
 800e96c:	b086      	sub	sp, #24
 800e96e:	af00      	add	r7, sp, #0
 800e970:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800e972:	2300      	movs	r3, #0
 800e974:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800e976:	2300      	movs	r3, #0
 800e978:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	613b      	str	r3, [r7, #16]
 800e97e:	e02b      	b.n	800e9d8 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800e980:	693b      	ldr	r3, [r7, #16]
 800e982:	685a      	ldr	r2, [r3, #4]
 800e984:	693b      	ldr	r3, [r7, #16]
 800e986:	895b      	ldrh	r3, [r3, #10]
 800e988:	4619      	mov	r1, r3
 800e98a:	4610      	mov	r0, r2
 800e98c:	f7ff ff7e 	bl	800e88c <lwip_standard_chksum>
 800e990:	4603      	mov	r3, r0
 800e992:	461a      	mov	r2, r3
 800e994:	697b      	ldr	r3, [r7, #20]
 800e996:	4413      	add	r3, r2
 800e998:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800e99a:	697b      	ldr	r3, [r7, #20]
 800e99c:	0c1a      	lsrs	r2, r3, #16
 800e99e:	697b      	ldr	r3, [r7, #20]
 800e9a0:	b29b      	uxth	r3, r3
 800e9a2:	4413      	add	r3, r2
 800e9a4:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800e9a6:	693b      	ldr	r3, [r7, #16]
 800e9a8:	895b      	ldrh	r3, [r3, #10]
 800e9aa:	f003 0301 	and.w	r3, r3, #1
 800e9ae:	b29b      	uxth	r3, r3
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d00e      	beq.n	800e9d2 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	bf0c      	ite	eq
 800e9ba:	2301      	moveq	r3, #1
 800e9bc:	2300      	movne	r3, #0
 800e9be:	b2db      	uxtb	r3, r3
 800e9c0:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	021b      	lsls	r3, r3, #8
 800e9c6:	b29a      	uxth	r2, r3
 800e9c8:	697b      	ldr	r3, [r7, #20]
 800e9ca:	0a1b      	lsrs	r3, r3, #8
 800e9cc:	b2db      	uxtb	r3, r3
 800e9ce:	4313      	orrs	r3, r2
 800e9d0:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800e9d2:	693b      	ldr	r3, [r7, #16]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	613b      	str	r3, [r7, #16]
 800e9d8:	693b      	ldr	r3, [r7, #16]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d1d0      	bne.n	800e980 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d007      	beq.n	800e9f4 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	021b      	lsls	r3, r3, #8
 800e9e8:	b29a      	uxth	r2, r3
 800e9ea:	697b      	ldr	r3, [r7, #20]
 800e9ec:	0a1b      	lsrs	r3, r3, #8
 800e9ee:	b2db      	uxtb	r3, r3
 800e9f0:	4313      	orrs	r3, r2
 800e9f2:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800e9f4:	697b      	ldr	r3, [r7, #20]
 800e9f6:	b29b      	uxth	r3, r3
 800e9f8:	43db      	mvns	r3, r3
 800e9fa:	b29b      	uxth	r3, r3
}
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	3718      	adds	r7, #24
 800ea00:	46bd      	mov	sp, r7
 800ea02:	bd80      	pop	{r7, pc}

0800ea04 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b082      	sub	sp, #8
 800ea08:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800ea0e:	f00a fdeb 	bl	80195e8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800ea12:	f000 f8d5 	bl	800ebc0 <mem_init>
  memp_init();
 800ea16:	f000 fc2d 	bl	800f274 <memp_init>
  pbuf_init();
  netif_init();
 800ea1a:	f000 fd39 	bl	800f490 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ea1e:	f008 f825 	bl	8016a6c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ea22:	f001 fe59 	bl	80106d8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ea26:	f007 ff67 	bl	80168f8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ea2a:	bf00      	nop
 800ea2c:	3708      	adds	r7, #8
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}
	...

0800ea34 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ea34:	b480      	push	{r7}
 800ea36:	b083      	sub	sp, #12
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ea3e:	4b05      	ldr	r3, [pc, #20]	; (800ea54 <ptr_to_mem+0x20>)
 800ea40:	681a      	ldr	r2, [r3, #0]
 800ea42:	88fb      	ldrh	r3, [r7, #6]
 800ea44:	4413      	add	r3, r2
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	370c      	adds	r7, #12
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea50:	4770      	bx	lr
 800ea52:	bf00      	nop
 800ea54:	240040dc 	.word	0x240040dc

0800ea58 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ea58:	b480      	push	{r7}
 800ea5a:	b083      	sub	sp, #12
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ea60:	4b05      	ldr	r3, [pc, #20]	; (800ea78 <mem_to_ptr+0x20>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	687a      	ldr	r2, [r7, #4]
 800ea66:	1ad3      	subs	r3, r2, r3
 800ea68:	b29b      	uxth	r3, r3
}
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	370c      	adds	r7, #12
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea74:	4770      	bx	lr
 800ea76:	bf00      	nop
 800ea78:	240040dc 	.word	0x240040dc

0800ea7c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ea7c:	b590      	push	{r4, r7, lr}
 800ea7e:	b085      	sub	sp, #20
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ea84:	4b45      	ldr	r3, [pc, #276]	; (800eb9c <plug_holes+0x120>)
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	687a      	ldr	r2, [r7, #4]
 800ea8a:	429a      	cmp	r2, r3
 800ea8c:	d206      	bcs.n	800ea9c <plug_holes+0x20>
 800ea8e:	4b44      	ldr	r3, [pc, #272]	; (800eba0 <plug_holes+0x124>)
 800ea90:	f240 12df 	movw	r2, #479	; 0x1df
 800ea94:	4943      	ldr	r1, [pc, #268]	; (800eba4 <plug_holes+0x128>)
 800ea96:	4844      	ldr	r0, [pc, #272]	; (800eba8 <plug_holes+0x12c>)
 800ea98:	f00a ffcc 	bl	8019a34 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ea9c:	4b43      	ldr	r3, [pc, #268]	; (800ebac <plug_holes+0x130>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	687a      	ldr	r2, [r7, #4]
 800eaa2:	429a      	cmp	r2, r3
 800eaa4:	d306      	bcc.n	800eab4 <plug_holes+0x38>
 800eaa6:	4b3e      	ldr	r3, [pc, #248]	; (800eba0 <plug_holes+0x124>)
 800eaa8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800eaac:	4940      	ldr	r1, [pc, #256]	; (800ebb0 <plug_holes+0x134>)
 800eaae:	483e      	ldr	r0, [pc, #248]	; (800eba8 <plug_holes+0x12c>)
 800eab0:	f00a ffc0 	bl	8019a34 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	791b      	ldrb	r3, [r3, #4]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d006      	beq.n	800eaca <plug_holes+0x4e>
 800eabc:	4b38      	ldr	r3, [pc, #224]	; (800eba0 <plug_holes+0x124>)
 800eabe:	f240 12e1 	movw	r2, #481	; 0x1e1
 800eac2:	493c      	ldr	r1, [pc, #240]	; (800ebb4 <plug_holes+0x138>)
 800eac4:	4838      	ldr	r0, [pc, #224]	; (800eba8 <plug_holes+0x12c>)
 800eac6:	f00a ffb5 	bl	8019a34 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	881b      	ldrh	r3, [r3, #0]
 800eace:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ead2:	d906      	bls.n	800eae2 <plug_holes+0x66>
 800ead4:	4b32      	ldr	r3, [pc, #200]	; (800eba0 <plug_holes+0x124>)
 800ead6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800eada:	4937      	ldr	r1, [pc, #220]	; (800ebb8 <plug_holes+0x13c>)
 800eadc:	4832      	ldr	r0, [pc, #200]	; (800eba8 <plug_holes+0x12c>)
 800eade:	f00a ffa9 	bl	8019a34 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	881b      	ldrh	r3, [r3, #0]
 800eae6:	4618      	mov	r0, r3
 800eae8:	f7ff ffa4 	bl	800ea34 <ptr_to_mem>
 800eaec:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800eaee:	687a      	ldr	r2, [r7, #4]
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	d024      	beq.n	800eb40 <plug_holes+0xc4>
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	791b      	ldrb	r3, [r3, #4]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d120      	bne.n	800eb40 <plug_holes+0xc4>
 800eafe:	4b2b      	ldr	r3, [pc, #172]	; (800ebac <plug_holes+0x130>)
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	68fa      	ldr	r2, [r7, #12]
 800eb04:	429a      	cmp	r2, r3
 800eb06:	d01b      	beq.n	800eb40 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800eb08:	4b2c      	ldr	r3, [pc, #176]	; (800ebbc <plug_holes+0x140>)
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	68fa      	ldr	r2, [r7, #12]
 800eb0e:	429a      	cmp	r2, r3
 800eb10:	d102      	bne.n	800eb18 <plug_holes+0x9c>
      lfree = mem;
 800eb12:	4a2a      	ldr	r2, [pc, #168]	; (800ebbc <plug_holes+0x140>)
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	881a      	ldrh	r2, [r3, #0]
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	881b      	ldrh	r3, [r3, #0]
 800eb24:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800eb28:	d00a      	beq.n	800eb40 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	881b      	ldrh	r3, [r3, #0]
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f7ff ff80 	bl	800ea34 <ptr_to_mem>
 800eb34:	4604      	mov	r4, r0
 800eb36:	6878      	ldr	r0, [r7, #4]
 800eb38:	f7ff ff8e 	bl	800ea58 <mem_to_ptr>
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	885b      	ldrh	r3, [r3, #2]
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7ff ff75 	bl	800ea34 <ptr_to_mem>
 800eb4a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800eb4c:	68ba      	ldr	r2, [r7, #8]
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	429a      	cmp	r2, r3
 800eb52:	d01f      	beq.n	800eb94 <plug_holes+0x118>
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	791b      	ldrb	r3, [r3, #4]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d11b      	bne.n	800eb94 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800eb5c:	4b17      	ldr	r3, [pc, #92]	; (800ebbc <plug_holes+0x140>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	687a      	ldr	r2, [r7, #4]
 800eb62:	429a      	cmp	r2, r3
 800eb64:	d102      	bne.n	800eb6c <plug_holes+0xf0>
      lfree = pmem;
 800eb66:	4a15      	ldr	r2, [pc, #84]	; (800ebbc <plug_holes+0x140>)
 800eb68:	68bb      	ldr	r3, [r7, #8]
 800eb6a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	881a      	ldrh	r2, [r3, #0]
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	881b      	ldrh	r3, [r3, #0]
 800eb78:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800eb7c:	d00a      	beq.n	800eb94 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	881b      	ldrh	r3, [r3, #0]
 800eb82:	4618      	mov	r0, r3
 800eb84:	f7ff ff56 	bl	800ea34 <ptr_to_mem>
 800eb88:	4604      	mov	r4, r0
 800eb8a:	68b8      	ldr	r0, [r7, #8]
 800eb8c:	f7ff ff64 	bl	800ea58 <mem_to_ptr>
 800eb90:	4603      	mov	r3, r0
 800eb92:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800eb94:	bf00      	nop
 800eb96:	3714      	adds	r7, #20
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd90      	pop	{r4, r7, pc}
 800eb9c:	240040dc 	.word	0x240040dc
 800eba0:	0801abd4 	.word	0x0801abd4
 800eba4:	0801ac04 	.word	0x0801ac04
 800eba8:	0801ac1c 	.word	0x0801ac1c
 800ebac:	240040e0 	.word	0x240040e0
 800ebb0:	0801ac44 	.word	0x0801ac44
 800ebb4:	0801ac60 	.word	0x0801ac60
 800ebb8:	0801ac7c 	.word	0x0801ac7c
 800ebbc:	240040e8 	.word	0x240040e8

0800ebc0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b082      	sub	sp, #8
 800ebc4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ebc6:	4b1d      	ldr	r3, [pc, #116]	; (800ec3c <mem_init+0x7c>)
 800ebc8:	4a1d      	ldr	r2, [pc, #116]	; (800ec40 <mem_init+0x80>)
 800ebca:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ebcc:	4b1b      	ldr	r3, [pc, #108]	; (800ec3c <mem_init+0x7c>)
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ebd8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	2200      	movs	r2, #0
 800ebde:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800ebe6:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800ebea:	f7ff ff23 	bl	800ea34 <ptr_to_mem>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	4a14      	ldr	r2, [pc, #80]	; (800ec44 <mem_init+0x84>)
 800ebf2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ebf4:	4b13      	ldr	r3, [pc, #76]	; (800ec44 <mem_init+0x84>)
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	2201      	movs	r2, #1
 800ebfa:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ebfc:	4b11      	ldr	r3, [pc, #68]	; (800ec44 <mem_init+0x84>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ec04:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ec06:	4b0f      	ldr	r3, [pc, #60]	; (800ec44 <mem_init+0x84>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ec0e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ec10:	4b0a      	ldr	r3, [pc, #40]	; (800ec3c <mem_init+0x7c>)
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	4a0c      	ldr	r2, [pc, #48]	; (800ec48 <mem_init+0x88>)
 800ec16:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800ec18:	480c      	ldr	r0, [pc, #48]	; (800ec4c <mem_init+0x8c>)
 800ec1a:	f00a fcf3 	bl	8019604 <sys_mutex_new>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d006      	beq.n	800ec32 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800ec24:	4b0a      	ldr	r3, [pc, #40]	; (800ec50 <mem_init+0x90>)
 800ec26:	f240 221f 	movw	r2, #543	; 0x21f
 800ec2a:	490a      	ldr	r1, [pc, #40]	; (800ec54 <mem_init+0x94>)
 800ec2c:	480a      	ldr	r0, [pc, #40]	; (800ec58 <mem_init+0x98>)
 800ec2e:	f00a ff01 	bl	8019a34 <iprintf>
  }
}
 800ec32:	bf00      	nop
 800ec34:	3708      	adds	r7, #8
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bd80      	pop	{r7, pc}
 800ec3a:	bf00      	nop
 800ec3c:	240040dc 	.word	0x240040dc
 800ec40:	30002000 	.word	0x30002000
 800ec44:	240040e0 	.word	0x240040e0
 800ec48:	240040e8 	.word	0x240040e8
 800ec4c:	240040e4 	.word	0x240040e4
 800ec50:	0801abd4 	.word	0x0801abd4
 800ec54:	0801aca8 	.word	0x0801aca8
 800ec58:	0801ac1c 	.word	0x0801ac1c

0800ec5c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b086      	sub	sp, #24
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ec64:	6878      	ldr	r0, [r7, #4]
 800ec66:	f7ff fef7 	bl	800ea58 <mem_to_ptr>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	881b      	ldrh	r3, [r3, #0]
 800ec72:	4618      	mov	r0, r3
 800ec74:	f7ff fede 	bl	800ea34 <ptr_to_mem>
 800ec78:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	885b      	ldrh	r3, [r3, #2]
 800ec7e:	4618      	mov	r0, r3
 800ec80:	f7ff fed8 	bl	800ea34 <ptr_to_mem>
 800ec84:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	881b      	ldrh	r3, [r3, #0]
 800ec8a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ec8e:	d818      	bhi.n	800ecc2 <mem_link_valid+0x66>
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	885b      	ldrh	r3, [r3, #2]
 800ec94:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ec98:	d813      	bhi.n	800ecc2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ec9e:	8afa      	ldrh	r2, [r7, #22]
 800eca0:	429a      	cmp	r2, r3
 800eca2:	d004      	beq.n	800ecae <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	881b      	ldrh	r3, [r3, #0]
 800eca8:	8afa      	ldrh	r2, [r7, #22]
 800ecaa:	429a      	cmp	r2, r3
 800ecac:	d109      	bne.n	800ecc2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ecae:	4b08      	ldr	r3, [pc, #32]	; (800ecd0 <mem_link_valid+0x74>)
 800ecb0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ecb2:	693a      	ldr	r2, [r7, #16]
 800ecb4:	429a      	cmp	r2, r3
 800ecb6:	d006      	beq.n	800ecc6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ecb8:	693b      	ldr	r3, [r7, #16]
 800ecba:	885b      	ldrh	r3, [r3, #2]
 800ecbc:	8afa      	ldrh	r2, [r7, #22]
 800ecbe:	429a      	cmp	r2, r3
 800ecc0:	d001      	beq.n	800ecc6 <mem_link_valid+0x6a>
    return 0;
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	e000      	b.n	800ecc8 <mem_link_valid+0x6c>
  }
  return 1;
 800ecc6:	2301      	movs	r3, #1
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3718      	adds	r7, #24
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}
 800ecd0:	240040e0 	.word	0x240040e0

0800ecd4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b088      	sub	sp, #32
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d070      	beq.n	800edc4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	f003 0303 	and.w	r3, r3, #3
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d00d      	beq.n	800ed08 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ecec:	4b37      	ldr	r3, [pc, #220]	; (800edcc <mem_free+0xf8>)
 800ecee:	f240 2273 	movw	r2, #627	; 0x273
 800ecf2:	4937      	ldr	r1, [pc, #220]	; (800edd0 <mem_free+0xfc>)
 800ecf4:	4837      	ldr	r0, [pc, #220]	; (800edd4 <mem_free+0x100>)
 800ecf6:	f00a fe9d 	bl	8019a34 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ecfa:	f00a fce1 	bl	80196c0 <sys_arch_protect>
 800ecfe:	60f8      	str	r0, [r7, #12]
 800ed00:	68f8      	ldr	r0, [r7, #12]
 800ed02:	f00a fceb 	bl	80196dc <sys_arch_unprotect>
    return;
 800ed06:	e05e      	b.n	800edc6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	3b08      	subs	r3, #8
 800ed0c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ed0e:	4b32      	ldr	r3, [pc, #200]	; (800edd8 <mem_free+0x104>)
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	69fa      	ldr	r2, [r7, #28]
 800ed14:	429a      	cmp	r2, r3
 800ed16:	d306      	bcc.n	800ed26 <mem_free+0x52>
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f103 020c 	add.w	r2, r3, #12
 800ed1e:	4b2f      	ldr	r3, [pc, #188]	; (800eddc <mem_free+0x108>)
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	429a      	cmp	r2, r3
 800ed24:	d90d      	bls.n	800ed42 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800ed26:	4b29      	ldr	r3, [pc, #164]	; (800edcc <mem_free+0xf8>)
 800ed28:	f240 227f 	movw	r2, #639	; 0x27f
 800ed2c:	492c      	ldr	r1, [pc, #176]	; (800ede0 <mem_free+0x10c>)
 800ed2e:	4829      	ldr	r0, [pc, #164]	; (800edd4 <mem_free+0x100>)
 800ed30:	f00a fe80 	bl	8019a34 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ed34:	f00a fcc4 	bl	80196c0 <sys_arch_protect>
 800ed38:	6138      	str	r0, [r7, #16]
 800ed3a:	6938      	ldr	r0, [r7, #16]
 800ed3c:	f00a fcce 	bl	80196dc <sys_arch_unprotect>
    return;
 800ed40:	e041      	b.n	800edc6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ed42:	4828      	ldr	r0, [pc, #160]	; (800ede4 <mem_free+0x110>)
 800ed44:	f00a fc7a 	bl	801963c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800ed48:	69fb      	ldr	r3, [r7, #28]
 800ed4a:	791b      	ldrb	r3, [r3, #4]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d110      	bne.n	800ed72 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ed50:	4b1e      	ldr	r3, [pc, #120]	; (800edcc <mem_free+0xf8>)
 800ed52:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800ed56:	4924      	ldr	r1, [pc, #144]	; (800ede8 <mem_free+0x114>)
 800ed58:	481e      	ldr	r0, [pc, #120]	; (800edd4 <mem_free+0x100>)
 800ed5a:	f00a fe6b 	bl	8019a34 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ed5e:	4821      	ldr	r0, [pc, #132]	; (800ede4 <mem_free+0x110>)
 800ed60:	f00a fc7b 	bl	801965a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ed64:	f00a fcac 	bl	80196c0 <sys_arch_protect>
 800ed68:	6178      	str	r0, [r7, #20]
 800ed6a:	6978      	ldr	r0, [r7, #20]
 800ed6c:	f00a fcb6 	bl	80196dc <sys_arch_unprotect>
    return;
 800ed70:	e029      	b.n	800edc6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800ed72:	69f8      	ldr	r0, [r7, #28]
 800ed74:	f7ff ff72 	bl	800ec5c <mem_link_valid>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d110      	bne.n	800eda0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800ed7e:	4b13      	ldr	r3, [pc, #76]	; (800edcc <mem_free+0xf8>)
 800ed80:	f240 2295 	movw	r2, #661	; 0x295
 800ed84:	4919      	ldr	r1, [pc, #100]	; (800edec <mem_free+0x118>)
 800ed86:	4813      	ldr	r0, [pc, #76]	; (800edd4 <mem_free+0x100>)
 800ed88:	f00a fe54 	bl	8019a34 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ed8c:	4815      	ldr	r0, [pc, #84]	; (800ede4 <mem_free+0x110>)
 800ed8e:	f00a fc64 	bl	801965a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ed92:	f00a fc95 	bl	80196c0 <sys_arch_protect>
 800ed96:	61b8      	str	r0, [r7, #24]
 800ed98:	69b8      	ldr	r0, [r7, #24]
 800ed9a:	f00a fc9f 	bl	80196dc <sys_arch_unprotect>
    return;
 800ed9e:	e012      	b.n	800edc6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800eda0:	69fb      	ldr	r3, [r7, #28]
 800eda2:	2200      	movs	r2, #0
 800eda4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800eda6:	4b12      	ldr	r3, [pc, #72]	; (800edf0 <mem_free+0x11c>)
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	69fa      	ldr	r2, [r7, #28]
 800edac:	429a      	cmp	r2, r3
 800edae:	d202      	bcs.n	800edb6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800edb0:	4a0f      	ldr	r2, [pc, #60]	; (800edf0 <mem_free+0x11c>)
 800edb2:	69fb      	ldr	r3, [r7, #28]
 800edb4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800edb6:	69f8      	ldr	r0, [r7, #28]
 800edb8:	f7ff fe60 	bl	800ea7c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800edbc:	4809      	ldr	r0, [pc, #36]	; (800ede4 <mem_free+0x110>)
 800edbe:	f00a fc4c 	bl	801965a <sys_mutex_unlock>
 800edc2:	e000      	b.n	800edc6 <mem_free+0xf2>
    return;
 800edc4:	bf00      	nop
}
 800edc6:	3720      	adds	r7, #32
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}
 800edcc:	0801abd4 	.word	0x0801abd4
 800edd0:	0801acc4 	.word	0x0801acc4
 800edd4:	0801ac1c 	.word	0x0801ac1c
 800edd8:	240040dc 	.word	0x240040dc
 800eddc:	240040e0 	.word	0x240040e0
 800ede0:	0801ace8 	.word	0x0801ace8
 800ede4:	240040e4 	.word	0x240040e4
 800ede8:	0801ad04 	.word	0x0801ad04
 800edec:	0801ad2c 	.word	0x0801ad2c
 800edf0:	240040e8 	.word	0x240040e8

0800edf4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b088      	sub	sp, #32
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
 800edfc:	460b      	mov	r3, r1
 800edfe:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800ee00:	887b      	ldrh	r3, [r7, #2]
 800ee02:	3303      	adds	r3, #3
 800ee04:	b29b      	uxth	r3, r3
 800ee06:	f023 0303 	bic.w	r3, r3, #3
 800ee0a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800ee0c:	8bfb      	ldrh	r3, [r7, #30]
 800ee0e:	2b0b      	cmp	r3, #11
 800ee10:	d801      	bhi.n	800ee16 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800ee12:	230c      	movs	r3, #12
 800ee14:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800ee16:	8bfb      	ldrh	r3, [r7, #30]
 800ee18:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ee1c:	d803      	bhi.n	800ee26 <mem_trim+0x32>
 800ee1e:	8bfa      	ldrh	r2, [r7, #30]
 800ee20:	887b      	ldrh	r3, [r7, #2]
 800ee22:	429a      	cmp	r2, r3
 800ee24:	d201      	bcs.n	800ee2a <mem_trim+0x36>
    return NULL;
 800ee26:	2300      	movs	r3, #0
 800ee28:	e0d8      	b.n	800efdc <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ee2a:	4b6e      	ldr	r3, [pc, #440]	; (800efe4 <mem_trim+0x1f0>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	687a      	ldr	r2, [r7, #4]
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d304      	bcc.n	800ee3e <mem_trim+0x4a>
 800ee34:	4b6c      	ldr	r3, [pc, #432]	; (800efe8 <mem_trim+0x1f4>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	687a      	ldr	r2, [r7, #4]
 800ee3a:	429a      	cmp	r2, r3
 800ee3c:	d306      	bcc.n	800ee4c <mem_trim+0x58>
 800ee3e:	4b6b      	ldr	r3, [pc, #428]	; (800efec <mem_trim+0x1f8>)
 800ee40:	f240 22d1 	movw	r2, #721	; 0x2d1
 800ee44:	496a      	ldr	r1, [pc, #424]	; (800eff0 <mem_trim+0x1fc>)
 800ee46:	486b      	ldr	r0, [pc, #428]	; (800eff4 <mem_trim+0x200>)
 800ee48:	f00a fdf4 	bl	8019a34 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ee4c:	4b65      	ldr	r3, [pc, #404]	; (800efe4 <mem_trim+0x1f0>)
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	687a      	ldr	r2, [r7, #4]
 800ee52:	429a      	cmp	r2, r3
 800ee54:	d304      	bcc.n	800ee60 <mem_trim+0x6c>
 800ee56:	4b64      	ldr	r3, [pc, #400]	; (800efe8 <mem_trim+0x1f4>)
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	687a      	ldr	r2, [r7, #4]
 800ee5c:	429a      	cmp	r2, r3
 800ee5e:	d307      	bcc.n	800ee70 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ee60:	f00a fc2e 	bl	80196c0 <sys_arch_protect>
 800ee64:	60b8      	str	r0, [r7, #8]
 800ee66:	68b8      	ldr	r0, [r7, #8]
 800ee68:	f00a fc38 	bl	80196dc <sys_arch_unprotect>
    return rmem;
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	e0b5      	b.n	800efdc <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	3b08      	subs	r3, #8
 800ee74:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800ee76:	69b8      	ldr	r0, [r7, #24]
 800ee78:	f7ff fdee 	bl	800ea58 <mem_to_ptr>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800ee80:	69bb      	ldr	r3, [r7, #24]
 800ee82:	881a      	ldrh	r2, [r3, #0]
 800ee84:	8afb      	ldrh	r3, [r7, #22]
 800ee86:	1ad3      	subs	r3, r2, r3
 800ee88:	b29b      	uxth	r3, r3
 800ee8a:	3b08      	subs	r3, #8
 800ee8c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ee8e:	8bfa      	ldrh	r2, [r7, #30]
 800ee90:	8abb      	ldrh	r3, [r7, #20]
 800ee92:	429a      	cmp	r2, r3
 800ee94:	d906      	bls.n	800eea4 <mem_trim+0xb0>
 800ee96:	4b55      	ldr	r3, [pc, #340]	; (800efec <mem_trim+0x1f8>)
 800ee98:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800ee9c:	4956      	ldr	r1, [pc, #344]	; (800eff8 <mem_trim+0x204>)
 800ee9e:	4855      	ldr	r0, [pc, #340]	; (800eff4 <mem_trim+0x200>)
 800eea0:	f00a fdc8 	bl	8019a34 <iprintf>
  if (newsize > size) {
 800eea4:	8bfa      	ldrh	r2, [r7, #30]
 800eea6:	8abb      	ldrh	r3, [r7, #20]
 800eea8:	429a      	cmp	r2, r3
 800eeaa:	d901      	bls.n	800eeb0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800eeac:	2300      	movs	r3, #0
 800eeae:	e095      	b.n	800efdc <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800eeb0:	8bfa      	ldrh	r2, [r7, #30]
 800eeb2:	8abb      	ldrh	r3, [r7, #20]
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	d101      	bne.n	800eebc <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	e08f      	b.n	800efdc <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800eebc:	484f      	ldr	r0, [pc, #316]	; (800effc <mem_trim+0x208>)
 800eebe:	f00a fbbd 	bl	801963c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800eec2:	69bb      	ldr	r3, [r7, #24]
 800eec4:	881b      	ldrh	r3, [r3, #0]
 800eec6:	4618      	mov	r0, r3
 800eec8:	f7ff fdb4 	bl	800ea34 <ptr_to_mem>
 800eecc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800eece:	693b      	ldr	r3, [r7, #16]
 800eed0:	791b      	ldrb	r3, [r3, #4]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d13f      	bne.n	800ef56 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800eed6:	69bb      	ldr	r3, [r7, #24]
 800eed8:	881b      	ldrh	r3, [r3, #0]
 800eeda:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800eede:	d106      	bne.n	800eeee <mem_trim+0xfa>
 800eee0:	4b42      	ldr	r3, [pc, #264]	; (800efec <mem_trim+0x1f8>)
 800eee2:	f240 22f5 	movw	r2, #757	; 0x2f5
 800eee6:	4946      	ldr	r1, [pc, #280]	; (800f000 <mem_trim+0x20c>)
 800eee8:	4842      	ldr	r0, [pc, #264]	; (800eff4 <mem_trim+0x200>)
 800eeea:	f00a fda3 	bl	8019a34 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800eeee:	693b      	ldr	r3, [r7, #16]
 800eef0:	881b      	ldrh	r3, [r3, #0]
 800eef2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800eef4:	8afa      	ldrh	r2, [r7, #22]
 800eef6:	8bfb      	ldrh	r3, [r7, #30]
 800eef8:	4413      	add	r3, r2
 800eefa:	b29b      	uxth	r3, r3
 800eefc:	3308      	adds	r3, #8
 800eefe:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800ef00:	4b40      	ldr	r3, [pc, #256]	; (800f004 <mem_trim+0x210>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	693a      	ldr	r2, [r7, #16]
 800ef06:	429a      	cmp	r2, r3
 800ef08:	d106      	bne.n	800ef18 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800ef0a:	89fb      	ldrh	r3, [r7, #14]
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f7ff fd91 	bl	800ea34 <ptr_to_mem>
 800ef12:	4603      	mov	r3, r0
 800ef14:	4a3b      	ldr	r2, [pc, #236]	; (800f004 <mem_trim+0x210>)
 800ef16:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800ef18:	89fb      	ldrh	r3, [r7, #14]
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f7ff fd8a 	bl	800ea34 <ptr_to_mem>
 800ef20:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800ef22:	693b      	ldr	r3, [r7, #16]
 800ef24:	2200      	movs	r2, #0
 800ef26:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ef28:	693b      	ldr	r3, [r7, #16]
 800ef2a:	89ba      	ldrh	r2, [r7, #12]
 800ef2c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ef2e:	693b      	ldr	r3, [r7, #16]
 800ef30:	8afa      	ldrh	r2, [r7, #22]
 800ef32:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ef34:	69bb      	ldr	r3, [r7, #24]
 800ef36:	89fa      	ldrh	r2, [r7, #14]
 800ef38:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ef3a:	693b      	ldr	r3, [r7, #16]
 800ef3c:	881b      	ldrh	r3, [r3, #0]
 800ef3e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ef42:	d047      	beq.n	800efd4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ef44:	693b      	ldr	r3, [r7, #16]
 800ef46:	881b      	ldrh	r3, [r3, #0]
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f7ff fd73 	bl	800ea34 <ptr_to_mem>
 800ef4e:	4602      	mov	r2, r0
 800ef50:	89fb      	ldrh	r3, [r7, #14]
 800ef52:	8053      	strh	r3, [r2, #2]
 800ef54:	e03e      	b.n	800efd4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ef56:	8bfb      	ldrh	r3, [r7, #30]
 800ef58:	f103 0214 	add.w	r2, r3, #20
 800ef5c:	8abb      	ldrh	r3, [r7, #20]
 800ef5e:	429a      	cmp	r2, r3
 800ef60:	d838      	bhi.n	800efd4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ef62:	8afa      	ldrh	r2, [r7, #22]
 800ef64:	8bfb      	ldrh	r3, [r7, #30]
 800ef66:	4413      	add	r3, r2
 800ef68:	b29b      	uxth	r3, r3
 800ef6a:	3308      	adds	r3, #8
 800ef6c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ef6e:	69bb      	ldr	r3, [r7, #24]
 800ef70:	881b      	ldrh	r3, [r3, #0]
 800ef72:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ef76:	d106      	bne.n	800ef86 <mem_trim+0x192>
 800ef78:	4b1c      	ldr	r3, [pc, #112]	; (800efec <mem_trim+0x1f8>)
 800ef7a:	f240 3216 	movw	r2, #790	; 0x316
 800ef7e:	4920      	ldr	r1, [pc, #128]	; (800f000 <mem_trim+0x20c>)
 800ef80:	481c      	ldr	r0, [pc, #112]	; (800eff4 <mem_trim+0x200>)
 800ef82:	f00a fd57 	bl	8019a34 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800ef86:	89fb      	ldrh	r3, [r7, #14]
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f7ff fd53 	bl	800ea34 <ptr_to_mem>
 800ef8e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800ef90:	4b1c      	ldr	r3, [pc, #112]	; (800f004 <mem_trim+0x210>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	693a      	ldr	r2, [r7, #16]
 800ef96:	429a      	cmp	r2, r3
 800ef98:	d202      	bcs.n	800efa0 <mem_trim+0x1ac>
      lfree = mem2;
 800ef9a:	4a1a      	ldr	r2, [pc, #104]	; (800f004 <mem_trim+0x210>)
 800ef9c:	693b      	ldr	r3, [r7, #16]
 800ef9e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800efa0:	693b      	ldr	r3, [r7, #16]
 800efa2:	2200      	movs	r2, #0
 800efa4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800efa6:	69bb      	ldr	r3, [r7, #24]
 800efa8:	881a      	ldrh	r2, [r3, #0]
 800efaa:	693b      	ldr	r3, [r7, #16]
 800efac:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800efae:	693b      	ldr	r3, [r7, #16]
 800efb0:	8afa      	ldrh	r2, [r7, #22]
 800efb2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800efb4:	69bb      	ldr	r3, [r7, #24]
 800efb6:	89fa      	ldrh	r2, [r7, #14]
 800efb8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800efba:	693b      	ldr	r3, [r7, #16]
 800efbc:	881b      	ldrh	r3, [r3, #0]
 800efbe:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800efc2:	d007      	beq.n	800efd4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800efc4:	693b      	ldr	r3, [r7, #16]
 800efc6:	881b      	ldrh	r3, [r3, #0]
 800efc8:	4618      	mov	r0, r3
 800efca:	f7ff fd33 	bl	800ea34 <ptr_to_mem>
 800efce:	4602      	mov	r2, r0
 800efd0:	89fb      	ldrh	r3, [r7, #14]
 800efd2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800efd4:	4809      	ldr	r0, [pc, #36]	; (800effc <mem_trim+0x208>)
 800efd6:	f00a fb40 	bl	801965a <sys_mutex_unlock>
  return rmem;
 800efda:	687b      	ldr	r3, [r7, #4]
}
 800efdc:	4618      	mov	r0, r3
 800efde:	3720      	adds	r7, #32
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}
 800efe4:	240040dc 	.word	0x240040dc
 800efe8:	240040e0 	.word	0x240040e0
 800efec:	0801abd4 	.word	0x0801abd4
 800eff0:	0801ad60 	.word	0x0801ad60
 800eff4:	0801ac1c 	.word	0x0801ac1c
 800eff8:	0801ad78 	.word	0x0801ad78
 800effc:	240040e4 	.word	0x240040e4
 800f000:	0801ad98 	.word	0x0801ad98
 800f004:	240040e8 	.word	0x240040e8

0800f008 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b088      	sub	sp, #32
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	4603      	mov	r3, r0
 800f010:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800f012:	88fb      	ldrh	r3, [r7, #6]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d101      	bne.n	800f01c <mem_malloc+0x14>
    return NULL;
 800f018:	2300      	movs	r3, #0
 800f01a:	e0e2      	b.n	800f1e2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800f01c:	88fb      	ldrh	r3, [r7, #6]
 800f01e:	3303      	adds	r3, #3
 800f020:	b29b      	uxth	r3, r3
 800f022:	f023 0303 	bic.w	r3, r3, #3
 800f026:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800f028:	8bbb      	ldrh	r3, [r7, #28]
 800f02a:	2b0b      	cmp	r3, #11
 800f02c:	d801      	bhi.n	800f032 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f02e:	230c      	movs	r3, #12
 800f030:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800f032:	8bbb      	ldrh	r3, [r7, #28]
 800f034:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800f038:	d803      	bhi.n	800f042 <mem_malloc+0x3a>
 800f03a:	8bba      	ldrh	r2, [r7, #28]
 800f03c:	88fb      	ldrh	r3, [r7, #6]
 800f03e:	429a      	cmp	r2, r3
 800f040:	d201      	bcs.n	800f046 <mem_malloc+0x3e>
    return NULL;
 800f042:	2300      	movs	r3, #0
 800f044:	e0cd      	b.n	800f1e2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800f046:	4869      	ldr	r0, [pc, #420]	; (800f1ec <mem_malloc+0x1e4>)
 800f048:	f00a faf8 	bl	801963c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f04c:	4b68      	ldr	r3, [pc, #416]	; (800f1f0 <mem_malloc+0x1e8>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	4618      	mov	r0, r3
 800f052:	f7ff fd01 	bl	800ea58 <mem_to_ptr>
 800f056:	4603      	mov	r3, r0
 800f058:	83fb      	strh	r3, [r7, #30]
 800f05a:	e0b7      	b.n	800f1cc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800f05c:	8bfb      	ldrh	r3, [r7, #30]
 800f05e:	4618      	mov	r0, r3
 800f060:	f7ff fce8 	bl	800ea34 <ptr_to_mem>
 800f064:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	791b      	ldrb	r3, [r3, #4]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	f040 80a7 	bne.w	800f1be <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f070:	697b      	ldr	r3, [r7, #20]
 800f072:	881b      	ldrh	r3, [r3, #0]
 800f074:	461a      	mov	r2, r3
 800f076:	8bfb      	ldrh	r3, [r7, #30]
 800f078:	1ad3      	subs	r3, r2, r3
 800f07a:	f1a3 0208 	sub.w	r2, r3, #8
 800f07e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800f080:	429a      	cmp	r2, r3
 800f082:	f0c0 809c 	bcc.w	800f1be <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f086:	697b      	ldr	r3, [r7, #20]
 800f088:	881b      	ldrh	r3, [r3, #0]
 800f08a:	461a      	mov	r2, r3
 800f08c:	8bfb      	ldrh	r3, [r7, #30]
 800f08e:	1ad3      	subs	r3, r2, r3
 800f090:	f1a3 0208 	sub.w	r2, r3, #8
 800f094:	8bbb      	ldrh	r3, [r7, #28]
 800f096:	3314      	adds	r3, #20
 800f098:	429a      	cmp	r2, r3
 800f09a:	d333      	bcc.n	800f104 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800f09c:	8bfa      	ldrh	r2, [r7, #30]
 800f09e:	8bbb      	ldrh	r3, [r7, #28]
 800f0a0:	4413      	add	r3, r2
 800f0a2:	b29b      	uxth	r3, r3
 800f0a4:	3308      	adds	r3, #8
 800f0a6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800f0a8:	8a7b      	ldrh	r3, [r7, #18]
 800f0aa:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800f0ae:	d106      	bne.n	800f0be <mem_malloc+0xb6>
 800f0b0:	4b50      	ldr	r3, [pc, #320]	; (800f1f4 <mem_malloc+0x1ec>)
 800f0b2:	f240 3287 	movw	r2, #903	; 0x387
 800f0b6:	4950      	ldr	r1, [pc, #320]	; (800f1f8 <mem_malloc+0x1f0>)
 800f0b8:	4850      	ldr	r0, [pc, #320]	; (800f1fc <mem_malloc+0x1f4>)
 800f0ba:	f00a fcbb 	bl	8019a34 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800f0be:	8a7b      	ldrh	r3, [r7, #18]
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	f7ff fcb7 	bl	800ea34 <ptr_to_mem>
 800f0c6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800f0ce:	697b      	ldr	r3, [r7, #20]
 800f0d0:	881a      	ldrh	r2, [r3, #0]
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	8bfa      	ldrh	r2, [r7, #30]
 800f0da:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800f0dc:	697b      	ldr	r3, [r7, #20]
 800f0de:	8a7a      	ldrh	r2, [r7, #18]
 800f0e0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800f0e2:	697b      	ldr	r3, [r7, #20]
 800f0e4:	2201      	movs	r2, #1
 800f0e6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	881b      	ldrh	r3, [r3, #0]
 800f0ec:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800f0f0:	d00b      	beq.n	800f10a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	881b      	ldrh	r3, [r3, #0]
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	f7ff fc9c 	bl	800ea34 <ptr_to_mem>
 800f0fc:	4602      	mov	r2, r0
 800f0fe:	8a7b      	ldrh	r3, [r7, #18]
 800f100:	8053      	strh	r3, [r2, #2]
 800f102:	e002      	b.n	800f10a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f104:	697b      	ldr	r3, [r7, #20]
 800f106:	2201      	movs	r2, #1
 800f108:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f10a:	4b39      	ldr	r3, [pc, #228]	; (800f1f0 <mem_malloc+0x1e8>)
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	697a      	ldr	r2, [r7, #20]
 800f110:	429a      	cmp	r2, r3
 800f112:	d127      	bne.n	800f164 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800f114:	4b36      	ldr	r3, [pc, #216]	; (800f1f0 <mem_malloc+0x1e8>)
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f11a:	e005      	b.n	800f128 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800f11c:	69bb      	ldr	r3, [r7, #24]
 800f11e:	881b      	ldrh	r3, [r3, #0]
 800f120:	4618      	mov	r0, r3
 800f122:	f7ff fc87 	bl	800ea34 <ptr_to_mem>
 800f126:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800f128:	69bb      	ldr	r3, [r7, #24]
 800f12a:	791b      	ldrb	r3, [r3, #4]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d004      	beq.n	800f13a <mem_malloc+0x132>
 800f130:	4b33      	ldr	r3, [pc, #204]	; (800f200 <mem_malloc+0x1f8>)
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	69ba      	ldr	r2, [r7, #24]
 800f136:	429a      	cmp	r2, r3
 800f138:	d1f0      	bne.n	800f11c <mem_malloc+0x114>
          }
          lfree = cur;
 800f13a:	4a2d      	ldr	r2, [pc, #180]	; (800f1f0 <mem_malloc+0x1e8>)
 800f13c:	69bb      	ldr	r3, [r7, #24]
 800f13e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f140:	4b2b      	ldr	r3, [pc, #172]	; (800f1f0 <mem_malloc+0x1e8>)
 800f142:	681a      	ldr	r2, [r3, #0]
 800f144:	4b2e      	ldr	r3, [pc, #184]	; (800f200 <mem_malloc+0x1f8>)
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	429a      	cmp	r2, r3
 800f14a:	d00b      	beq.n	800f164 <mem_malloc+0x15c>
 800f14c:	4b28      	ldr	r3, [pc, #160]	; (800f1f0 <mem_malloc+0x1e8>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	791b      	ldrb	r3, [r3, #4]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d006      	beq.n	800f164 <mem_malloc+0x15c>
 800f156:	4b27      	ldr	r3, [pc, #156]	; (800f1f4 <mem_malloc+0x1ec>)
 800f158:	f240 32b5 	movw	r2, #949	; 0x3b5
 800f15c:	4929      	ldr	r1, [pc, #164]	; (800f204 <mem_malloc+0x1fc>)
 800f15e:	4827      	ldr	r0, [pc, #156]	; (800f1fc <mem_malloc+0x1f4>)
 800f160:	f00a fc68 	bl	8019a34 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800f164:	4821      	ldr	r0, [pc, #132]	; (800f1ec <mem_malloc+0x1e4>)
 800f166:	f00a fa78 	bl	801965a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f16a:	8bba      	ldrh	r2, [r7, #28]
 800f16c:	697b      	ldr	r3, [r7, #20]
 800f16e:	4413      	add	r3, r2
 800f170:	3308      	adds	r3, #8
 800f172:	4a23      	ldr	r2, [pc, #140]	; (800f200 <mem_malloc+0x1f8>)
 800f174:	6812      	ldr	r2, [r2, #0]
 800f176:	4293      	cmp	r3, r2
 800f178:	d906      	bls.n	800f188 <mem_malloc+0x180>
 800f17a:	4b1e      	ldr	r3, [pc, #120]	; (800f1f4 <mem_malloc+0x1ec>)
 800f17c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800f180:	4921      	ldr	r1, [pc, #132]	; (800f208 <mem_malloc+0x200>)
 800f182:	481e      	ldr	r0, [pc, #120]	; (800f1fc <mem_malloc+0x1f4>)
 800f184:	f00a fc56 	bl	8019a34 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f188:	697b      	ldr	r3, [r7, #20]
 800f18a:	f003 0303 	and.w	r3, r3, #3
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d006      	beq.n	800f1a0 <mem_malloc+0x198>
 800f192:	4b18      	ldr	r3, [pc, #96]	; (800f1f4 <mem_malloc+0x1ec>)
 800f194:	f240 32bb 	movw	r2, #955	; 0x3bb
 800f198:	491c      	ldr	r1, [pc, #112]	; (800f20c <mem_malloc+0x204>)
 800f19a:	4818      	ldr	r0, [pc, #96]	; (800f1fc <mem_malloc+0x1f4>)
 800f19c:	f00a fc4a 	bl	8019a34 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f1a0:	697b      	ldr	r3, [r7, #20]
 800f1a2:	f003 0303 	and.w	r3, r3, #3
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d006      	beq.n	800f1b8 <mem_malloc+0x1b0>
 800f1aa:	4b12      	ldr	r3, [pc, #72]	; (800f1f4 <mem_malloc+0x1ec>)
 800f1ac:	f240 32bd 	movw	r2, #957	; 0x3bd
 800f1b0:	4917      	ldr	r1, [pc, #92]	; (800f210 <mem_malloc+0x208>)
 800f1b2:	4812      	ldr	r0, [pc, #72]	; (800f1fc <mem_malloc+0x1f4>)
 800f1b4:	f00a fc3e 	bl	8019a34 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	3308      	adds	r3, #8
 800f1bc:	e011      	b.n	800f1e2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800f1be:	8bfb      	ldrh	r3, [r7, #30]
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f7ff fc37 	bl	800ea34 <ptr_to_mem>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	881b      	ldrh	r3, [r3, #0]
 800f1ca:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f1cc:	8bfa      	ldrh	r2, [r7, #30]
 800f1ce:	8bbb      	ldrh	r3, [r7, #28]
 800f1d0:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800f1d4:	429a      	cmp	r2, r3
 800f1d6:	f4ff af41 	bcc.w	800f05c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800f1da:	4804      	ldr	r0, [pc, #16]	; (800f1ec <mem_malloc+0x1e4>)
 800f1dc:	f00a fa3d 	bl	801965a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800f1e0:	2300      	movs	r3, #0
}
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	3720      	adds	r7, #32
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	bd80      	pop	{r7, pc}
 800f1ea:	bf00      	nop
 800f1ec:	240040e4 	.word	0x240040e4
 800f1f0:	240040e8 	.word	0x240040e8
 800f1f4:	0801abd4 	.word	0x0801abd4
 800f1f8:	0801ad98 	.word	0x0801ad98
 800f1fc:	0801ac1c 	.word	0x0801ac1c
 800f200:	240040e0 	.word	0x240040e0
 800f204:	0801adac 	.word	0x0801adac
 800f208:	0801adc8 	.word	0x0801adc8
 800f20c:	0801adf8 	.word	0x0801adf8
 800f210:	0801ae28 	.word	0x0801ae28

0800f214 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f214:	b480      	push	{r7}
 800f216:	b085      	sub	sp, #20
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	689b      	ldr	r3, [r3, #8]
 800f220:	2200      	movs	r2, #0
 800f222:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	685b      	ldr	r3, [r3, #4]
 800f228:	3303      	adds	r3, #3
 800f22a:	f023 0303 	bic.w	r3, r3, #3
 800f22e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f230:	2300      	movs	r3, #0
 800f232:	60fb      	str	r3, [r7, #12]
 800f234:	e011      	b.n	800f25a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	689b      	ldr	r3, [r3, #8]
 800f23a:	681a      	ldr	r2, [r3, #0]
 800f23c:	68bb      	ldr	r3, [r7, #8]
 800f23e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	689b      	ldr	r3, [r3, #8]
 800f244:	68ba      	ldr	r2, [r7, #8]
 800f246:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	881b      	ldrh	r3, [r3, #0]
 800f24c:	461a      	mov	r2, r3
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	4413      	add	r3, r2
 800f252:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	3301      	adds	r3, #1
 800f258:	60fb      	str	r3, [r7, #12]
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	885b      	ldrh	r3, [r3, #2]
 800f25e:	461a      	mov	r2, r3
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	4293      	cmp	r3, r2
 800f264:	dbe7      	blt.n	800f236 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f266:	bf00      	nop
 800f268:	bf00      	nop
 800f26a:	3714      	adds	r7, #20
 800f26c:	46bd      	mov	sp, r7
 800f26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f272:	4770      	bx	lr

0800f274 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b082      	sub	sp, #8
 800f278:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f27a:	2300      	movs	r3, #0
 800f27c:	80fb      	strh	r3, [r7, #6]
 800f27e:	e009      	b.n	800f294 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800f280:	88fb      	ldrh	r3, [r7, #6]
 800f282:	4a08      	ldr	r2, [pc, #32]	; (800f2a4 <memp_init+0x30>)
 800f284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f288:	4618      	mov	r0, r3
 800f28a:	f7ff ffc3 	bl	800f214 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f28e:	88fb      	ldrh	r3, [r7, #6]
 800f290:	3301      	adds	r3, #1
 800f292:	80fb      	strh	r3, [r7, #6]
 800f294:	88fb      	ldrh	r3, [r7, #6]
 800f296:	2b0c      	cmp	r3, #12
 800f298:	d9f2      	bls.n	800f280 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800f29a:	bf00      	nop
 800f29c:	bf00      	nop
 800f29e:	3708      	adds	r7, #8
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd80      	pop	{r7, pc}
 800f2a4:	0801de4c 	.word	0x0801de4c

0800f2a8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b084      	sub	sp, #16
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800f2b0:	f00a fa06 	bl	80196c0 <sys_arch_protect>
 800f2b4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	689b      	ldr	r3, [r3, #8]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f2be:	68bb      	ldr	r3, [r7, #8]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d015      	beq.n	800f2f0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	689b      	ldr	r3, [r3, #8]
 800f2c8:	68ba      	ldr	r2, [r7, #8]
 800f2ca:	6812      	ldr	r2, [r2, #0]
 800f2cc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f2ce:	68bb      	ldr	r3, [r7, #8]
 800f2d0:	f003 0303 	and.w	r3, r3, #3
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d006      	beq.n	800f2e6 <do_memp_malloc_pool+0x3e>
 800f2d8:	4b09      	ldr	r3, [pc, #36]	; (800f300 <do_memp_malloc_pool+0x58>)
 800f2da:	f44f 728c 	mov.w	r2, #280	; 0x118
 800f2de:	4909      	ldr	r1, [pc, #36]	; (800f304 <do_memp_malloc_pool+0x5c>)
 800f2e0:	4809      	ldr	r0, [pc, #36]	; (800f308 <do_memp_malloc_pool+0x60>)
 800f2e2:	f00a fba7 	bl	8019a34 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f2e6:	68f8      	ldr	r0, [r7, #12]
 800f2e8:	f00a f9f8 	bl	80196dc <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	e003      	b.n	800f2f8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f2f0:	68f8      	ldr	r0, [r7, #12]
 800f2f2:	f00a f9f3 	bl	80196dc <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800f2f6:	2300      	movs	r3, #0
}
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	3710      	adds	r7, #16
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}
 800f300:	0801ae4c 	.word	0x0801ae4c
 800f304:	0801ae7c 	.word	0x0801ae7c
 800f308:	0801aea0 	.word	0x0801aea0

0800f30c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b082      	sub	sp, #8
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d106      	bne.n	800f328 <memp_malloc_pool+0x1c>
 800f31a:	4b0a      	ldr	r3, [pc, #40]	; (800f344 <memp_malloc_pool+0x38>)
 800f31c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800f320:	4909      	ldr	r1, [pc, #36]	; (800f348 <memp_malloc_pool+0x3c>)
 800f322:	480a      	ldr	r0, [pc, #40]	; (800f34c <memp_malloc_pool+0x40>)
 800f324:	f00a fb86 	bl	8019a34 <iprintf>
  if (desc == NULL) {
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d101      	bne.n	800f332 <memp_malloc_pool+0x26>
    return NULL;
 800f32e:	2300      	movs	r3, #0
 800f330:	e003      	b.n	800f33a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800f332:	6878      	ldr	r0, [r7, #4]
 800f334:	f7ff ffb8 	bl	800f2a8 <do_memp_malloc_pool>
 800f338:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800f33a:	4618      	mov	r0, r3
 800f33c:	3708      	adds	r7, #8
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd80      	pop	{r7, pc}
 800f342:	bf00      	nop
 800f344:	0801ae4c 	.word	0x0801ae4c
 800f348:	0801aec8 	.word	0x0801aec8
 800f34c:	0801aea0 	.word	0x0801aea0

0800f350 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b084      	sub	sp, #16
 800f354:	af00      	add	r7, sp, #0
 800f356:	4603      	mov	r3, r0
 800f358:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f35a:	79fb      	ldrb	r3, [r7, #7]
 800f35c:	2b0c      	cmp	r3, #12
 800f35e:	d908      	bls.n	800f372 <memp_malloc+0x22>
 800f360:	4b0a      	ldr	r3, [pc, #40]	; (800f38c <memp_malloc+0x3c>)
 800f362:	f240 1257 	movw	r2, #343	; 0x157
 800f366:	490a      	ldr	r1, [pc, #40]	; (800f390 <memp_malloc+0x40>)
 800f368:	480a      	ldr	r0, [pc, #40]	; (800f394 <memp_malloc+0x44>)
 800f36a:	f00a fb63 	bl	8019a34 <iprintf>
 800f36e:	2300      	movs	r3, #0
 800f370:	e008      	b.n	800f384 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800f372:	79fb      	ldrb	r3, [r7, #7]
 800f374:	4a08      	ldr	r2, [pc, #32]	; (800f398 <memp_malloc+0x48>)
 800f376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f37a:	4618      	mov	r0, r3
 800f37c:	f7ff ff94 	bl	800f2a8 <do_memp_malloc_pool>
 800f380:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800f382:	68fb      	ldr	r3, [r7, #12]
}
 800f384:	4618      	mov	r0, r3
 800f386:	3710      	adds	r7, #16
 800f388:	46bd      	mov	sp, r7
 800f38a:	bd80      	pop	{r7, pc}
 800f38c:	0801ae4c 	.word	0x0801ae4c
 800f390:	0801aedc 	.word	0x0801aedc
 800f394:	0801aea0 	.word	0x0801aea0
 800f398:	0801de4c 	.word	0x0801de4c

0800f39c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b084      	sub	sp, #16
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
 800f3a4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	f003 0303 	and.w	r3, r3, #3
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d006      	beq.n	800f3be <do_memp_free_pool+0x22>
 800f3b0:	4b0d      	ldr	r3, [pc, #52]	; (800f3e8 <do_memp_free_pool+0x4c>)
 800f3b2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800f3b6:	490d      	ldr	r1, [pc, #52]	; (800f3ec <do_memp_free_pool+0x50>)
 800f3b8:	480d      	ldr	r0, [pc, #52]	; (800f3f0 <do_memp_free_pool+0x54>)
 800f3ba:	f00a fb3b 	bl	8019a34 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800f3c2:	f00a f97d 	bl	80196c0 <sys_arch_protect>
 800f3c6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	689b      	ldr	r3, [r3, #8]
 800f3cc:	681a      	ldr	r2, [r3, #0]
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	689b      	ldr	r3, [r3, #8]
 800f3d6:	68fa      	ldr	r2, [r7, #12]
 800f3d8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800f3da:	68b8      	ldr	r0, [r7, #8]
 800f3dc:	f00a f97e 	bl	80196dc <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800f3e0:	bf00      	nop
 800f3e2:	3710      	adds	r7, #16
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd80      	pop	{r7, pc}
 800f3e8:	0801ae4c 	.word	0x0801ae4c
 800f3ec:	0801aefc 	.word	0x0801aefc
 800f3f0:	0801aea0 	.word	0x0801aea0

0800f3f4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b082      	sub	sp, #8
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
 800f3fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d106      	bne.n	800f412 <memp_free_pool+0x1e>
 800f404:	4b0a      	ldr	r3, [pc, #40]	; (800f430 <memp_free_pool+0x3c>)
 800f406:	f240 1295 	movw	r2, #405	; 0x195
 800f40a:	490a      	ldr	r1, [pc, #40]	; (800f434 <memp_free_pool+0x40>)
 800f40c:	480a      	ldr	r0, [pc, #40]	; (800f438 <memp_free_pool+0x44>)
 800f40e:	f00a fb11 	bl	8019a34 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d007      	beq.n	800f428 <memp_free_pool+0x34>
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d004      	beq.n	800f428 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800f41e:	6839      	ldr	r1, [r7, #0]
 800f420:	6878      	ldr	r0, [r7, #4]
 800f422:	f7ff ffbb 	bl	800f39c <do_memp_free_pool>
 800f426:	e000      	b.n	800f42a <memp_free_pool+0x36>
    return;
 800f428:	bf00      	nop
}
 800f42a:	3708      	adds	r7, #8
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}
 800f430:	0801ae4c 	.word	0x0801ae4c
 800f434:	0801aec8 	.word	0x0801aec8
 800f438:	0801aea0 	.word	0x0801aea0

0800f43c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b082      	sub	sp, #8
 800f440:	af00      	add	r7, sp, #0
 800f442:	4603      	mov	r3, r0
 800f444:	6039      	str	r1, [r7, #0]
 800f446:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800f448:	79fb      	ldrb	r3, [r7, #7]
 800f44a:	2b0c      	cmp	r3, #12
 800f44c:	d907      	bls.n	800f45e <memp_free+0x22>
 800f44e:	4b0c      	ldr	r3, [pc, #48]	; (800f480 <memp_free+0x44>)
 800f450:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800f454:	490b      	ldr	r1, [pc, #44]	; (800f484 <memp_free+0x48>)
 800f456:	480c      	ldr	r0, [pc, #48]	; (800f488 <memp_free+0x4c>)
 800f458:	f00a faec 	bl	8019a34 <iprintf>
 800f45c:	e00c      	b.n	800f478 <memp_free+0x3c>

  if (mem == NULL) {
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d008      	beq.n	800f476 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800f464:	79fb      	ldrb	r3, [r7, #7]
 800f466:	4a09      	ldr	r2, [pc, #36]	; (800f48c <memp_free+0x50>)
 800f468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f46c:	6839      	ldr	r1, [r7, #0]
 800f46e:	4618      	mov	r0, r3
 800f470:	f7ff ff94 	bl	800f39c <do_memp_free_pool>
 800f474:	e000      	b.n	800f478 <memp_free+0x3c>
    return;
 800f476:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800f478:	3708      	adds	r7, #8
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}
 800f47e:	bf00      	nop
 800f480:	0801ae4c 	.word	0x0801ae4c
 800f484:	0801af1c 	.word	0x0801af1c
 800f488:	0801aea0 	.word	0x0801aea0
 800f48c:	0801de4c 	.word	0x0801de4c

0800f490 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800f490:	b480      	push	{r7}
 800f492:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800f494:	bf00      	nop
 800f496:	46bd      	mov	sp, r7
 800f498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49c:	4770      	bx	lr
	...

0800f4a0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b086      	sub	sp, #24
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	60f8      	str	r0, [r7, #12]
 800f4a8:	60b9      	str	r1, [r7, #8]
 800f4aa:	607a      	str	r2, [r7, #4]
 800f4ac:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d108      	bne.n	800f4c6 <netif_add+0x26>
 800f4b4:	4b57      	ldr	r3, [pc, #348]	; (800f614 <netif_add+0x174>)
 800f4b6:	f240 1227 	movw	r2, #295	; 0x127
 800f4ba:	4957      	ldr	r1, [pc, #348]	; (800f618 <netif_add+0x178>)
 800f4bc:	4857      	ldr	r0, [pc, #348]	; (800f61c <netif_add+0x17c>)
 800f4be:	f00a fab9 	bl	8019a34 <iprintf>
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	e0a2      	b.n	800f60c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800f4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d108      	bne.n	800f4de <netif_add+0x3e>
 800f4cc:	4b51      	ldr	r3, [pc, #324]	; (800f614 <netif_add+0x174>)
 800f4ce:	f44f 7294 	mov.w	r2, #296	; 0x128
 800f4d2:	4953      	ldr	r1, [pc, #332]	; (800f620 <netif_add+0x180>)
 800f4d4:	4851      	ldr	r0, [pc, #324]	; (800f61c <netif_add+0x17c>)
 800f4d6:	f00a faad 	bl	8019a34 <iprintf>
 800f4da:	2300      	movs	r3, #0
 800f4dc:	e096      	b.n	800f60c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800f4de:	68bb      	ldr	r3, [r7, #8]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d101      	bne.n	800f4e8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800f4e4:	4b4f      	ldr	r3, [pc, #316]	; (800f624 <netif_add+0x184>)
 800f4e6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d101      	bne.n	800f4f2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800f4ee:	4b4d      	ldr	r3, [pc, #308]	; (800f624 <netif_add+0x184>)
 800f4f0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d101      	bne.n	800f4fc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800f4f8:	4b4a      	ldr	r3, [pc, #296]	; (800f624 <netif_add+0x184>)
 800f4fa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	2200      	movs	r2, #0
 800f500:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	2200      	movs	r2, #0
 800f506:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	2200      	movs	r2, #0
 800f50c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	4a45      	ldr	r2, [pc, #276]	; (800f628 <netif_add+0x188>)
 800f512:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	2200      	movs	r2, #0
 800f518:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	2200      	movs	r2, #0
 800f51e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	2200      	movs	r2, #0
 800f526:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	6a3a      	ldr	r2, [r7, #32]
 800f52c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800f52e:	4b3f      	ldr	r3, [pc, #252]	; (800f62c <netif_add+0x18c>)
 800f530:	781a      	ldrb	r2, [r3, #0]
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f53c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	687a      	ldr	r2, [r7, #4]
 800f542:	68b9      	ldr	r1, [r7, #8]
 800f544:	68f8      	ldr	r0, [r7, #12]
 800f546:	f000 f913 	bl	800f770 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800f54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f54c:	68f8      	ldr	r0, [r7, #12]
 800f54e:	4798      	blx	r3
 800f550:	4603      	mov	r3, r0
 800f552:	2b00      	cmp	r3, #0
 800f554:	d001      	beq.n	800f55a <netif_add+0xba>
    return NULL;
 800f556:	2300      	movs	r3, #0
 800f558:	e058      	b.n	800f60c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f560:	2bff      	cmp	r3, #255	; 0xff
 800f562:	d103      	bne.n	800f56c <netif_add+0xcc>
        netif->num = 0;
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	2200      	movs	r2, #0
 800f568:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800f56c:	2300      	movs	r3, #0
 800f56e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f570:	4b2f      	ldr	r3, [pc, #188]	; (800f630 <netif_add+0x190>)
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	617b      	str	r3, [r7, #20]
 800f576:	e02b      	b.n	800f5d0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800f578:	697a      	ldr	r2, [r7, #20]
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	429a      	cmp	r2, r3
 800f57e:	d106      	bne.n	800f58e <netif_add+0xee>
 800f580:	4b24      	ldr	r3, [pc, #144]	; (800f614 <netif_add+0x174>)
 800f582:	f240 128b 	movw	r2, #395	; 0x18b
 800f586:	492b      	ldr	r1, [pc, #172]	; (800f634 <netif_add+0x194>)
 800f588:	4824      	ldr	r0, [pc, #144]	; (800f61c <netif_add+0x17c>)
 800f58a:	f00a fa53 	bl	8019a34 <iprintf>
        num_netifs++;
 800f58e:	693b      	ldr	r3, [r7, #16]
 800f590:	3301      	adds	r3, #1
 800f592:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800f594:	693b      	ldr	r3, [r7, #16]
 800f596:	2bff      	cmp	r3, #255	; 0xff
 800f598:	dd06      	ble.n	800f5a8 <netif_add+0x108>
 800f59a:	4b1e      	ldr	r3, [pc, #120]	; (800f614 <netif_add+0x174>)
 800f59c:	f240 128d 	movw	r2, #397	; 0x18d
 800f5a0:	4925      	ldr	r1, [pc, #148]	; (800f638 <netif_add+0x198>)
 800f5a2:	481e      	ldr	r0, [pc, #120]	; (800f61c <netif_add+0x17c>)
 800f5a4:	f00a fa46 	bl	8019a34 <iprintf>
        if (netif2->num == netif->num) {
 800f5a8:	697b      	ldr	r3, [r7, #20]
 800f5aa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f5b4:	429a      	cmp	r2, r3
 800f5b6:	d108      	bne.n	800f5ca <netif_add+0x12a>
          netif->num++;
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f5be:	3301      	adds	r3, #1
 800f5c0:	b2da      	uxtb	r2, r3
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800f5c8:	e005      	b.n	800f5d6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f5ca:	697b      	ldr	r3, [r7, #20]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	617b      	str	r3, [r7, #20]
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d1d0      	bne.n	800f578 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800f5d6:	697b      	ldr	r3, [r7, #20]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d1be      	bne.n	800f55a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f5e2:	2bfe      	cmp	r3, #254	; 0xfe
 800f5e4:	d103      	bne.n	800f5ee <netif_add+0x14e>
    netif_num = 0;
 800f5e6:	4b11      	ldr	r3, [pc, #68]	; (800f62c <netif_add+0x18c>)
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	701a      	strb	r2, [r3, #0]
 800f5ec:	e006      	b.n	800f5fc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f5f4:	3301      	adds	r3, #1
 800f5f6:	b2da      	uxtb	r2, r3
 800f5f8:	4b0c      	ldr	r3, [pc, #48]	; (800f62c <netif_add+0x18c>)
 800f5fa:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800f5fc:	4b0c      	ldr	r3, [pc, #48]	; (800f630 <netif_add+0x190>)
 800f5fe:	681a      	ldr	r2, [r3, #0]
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800f604:	4a0a      	ldr	r2, [pc, #40]	; (800f630 <netif_add+0x190>)
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800f60a:	68fb      	ldr	r3, [r7, #12]
}
 800f60c:	4618      	mov	r0, r3
 800f60e:	3718      	adds	r7, #24
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}
 800f614:	0801af38 	.word	0x0801af38
 800f618:	0801afcc 	.word	0x0801afcc
 800f61c:	0801af88 	.word	0x0801af88
 800f620:	0801afe8 	.word	0x0801afe8
 800f624:	0801dec0 	.word	0x0801dec0
 800f628:	0800fa4b 	.word	0x0800fa4b
 800f62c:	24004120 	.word	0x24004120
 800f630:	24007854 	.word	0x24007854
 800f634:	0801b00c 	.word	0x0801b00c
 800f638:	0801b020 	.word	0x0801b020

0800f63c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b082      	sub	sp, #8
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
 800f644:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800f646:	6839      	ldr	r1, [r7, #0]
 800f648:	6878      	ldr	r0, [r7, #4]
 800f64a:	f002 fe2d 	bl	80122a8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800f64e:	6839      	ldr	r1, [r7, #0]
 800f650:	6878      	ldr	r0, [r7, #4]
 800f652:	f007 fb95 	bl	8016d80 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800f656:	bf00      	nop
 800f658:	3708      	adds	r7, #8
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bd80      	pop	{r7, pc}
	...

0800f660 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b086      	sub	sp, #24
 800f664:	af00      	add	r7, sp, #0
 800f666:	60f8      	str	r0, [r7, #12]
 800f668:	60b9      	str	r1, [r7, #8]
 800f66a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d106      	bne.n	800f680 <netif_do_set_ipaddr+0x20>
 800f672:	4b1d      	ldr	r3, [pc, #116]	; (800f6e8 <netif_do_set_ipaddr+0x88>)
 800f674:	f240 12cb 	movw	r2, #459	; 0x1cb
 800f678:	491c      	ldr	r1, [pc, #112]	; (800f6ec <netif_do_set_ipaddr+0x8c>)
 800f67a:	481d      	ldr	r0, [pc, #116]	; (800f6f0 <netif_do_set_ipaddr+0x90>)
 800f67c:	f00a f9da 	bl	8019a34 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d106      	bne.n	800f694 <netif_do_set_ipaddr+0x34>
 800f686:	4b18      	ldr	r3, [pc, #96]	; (800f6e8 <netif_do_set_ipaddr+0x88>)
 800f688:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800f68c:	4917      	ldr	r1, [pc, #92]	; (800f6ec <netif_do_set_ipaddr+0x8c>)
 800f68e:	4818      	ldr	r0, [pc, #96]	; (800f6f0 <netif_do_set_ipaddr+0x90>)
 800f690:	f00a f9d0 	bl	8019a34 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800f694:	68bb      	ldr	r3, [r7, #8]
 800f696:	681a      	ldr	r2, [r3, #0]
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	3304      	adds	r3, #4
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	429a      	cmp	r2, r3
 800f6a0:	d01c      	beq.n	800f6dc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800f6a2:	68bb      	ldr	r3, [r7, #8]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	3304      	adds	r3, #4
 800f6ac:	681a      	ldr	r2, [r3, #0]
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800f6b2:	f107 0314 	add.w	r3, r7, #20
 800f6b6:	4619      	mov	r1, r3
 800f6b8:	6878      	ldr	r0, [r7, #4]
 800f6ba:	f7ff ffbf 	bl	800f63c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d002      	beq.n	800f6ca <netif_do_set_ipaddr+0x6a>
 800f6c4:	68bb      	ldr	r3, [r7, #8]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	e000      	b.n	800f6cc <netif_do_set_ipaddr+0x6c>
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	68fa      	ldr	r2, [r7, #12]
 800f6ce:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800f6d0:	2101      	movs	r1, #1
 800f6d2:	68f8      	ldr	r0, [r7, #12]
 800f6d4:	f000 f8d2 	bl	800f87c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800f6d8:	2301      	movs	r3, #1
 800f6da:	e000      	b.n	800f6de <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800f6dc:	2300      	movs	r3, #0
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3718      	adds	r7, #24
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}
 800f6e6:	bf00      	nop
 800f6e8:	0801af38 	.word	0x0801af38
 800f6ec:	0801b050 	.word	0x0801b050
 800f6f0:	0801af88 	.word	0x0801af88

0800f6f4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800f6f4:	b480      	push	{r7}
 800f6f6:	b085      	sub	sp, #20
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	60f8      	str	r0, [r7, #12]
 800f6fc:	60b9      	str	r1, [r7, #8]
 800f6fe:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	681a      	ldr	r2, [r3, #0]
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	3308      	adds	r3, #8
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	429a      	cmp	r2, r3
 800f70c:	d00a      	beq.n	800f724 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800f70e:	68bb      	ldr	r3, [r7, #8]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d002      	beq.n	800f71a <netif_do_set_netmask+0x26>
 800f714:	68bb      	ldr	r3, [r7, #8]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	e000      	b.n	800f71c <netif_do_set_netmask+0x28>
 800f71a:	2300      	movs	r3, #0
 800f71c:	68fa      	ldr	r2, [r7, #12]
 800f71e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800f720:	2301      	movs	r3, #1
 800f722:	e000      	b.n	800f726 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800f724:	2300      	movs	r3, #0
}
 800f726:	4618      	mov	r0, r3
 800f728:	3714      	adds	r7, #20
 800f72a:	46bd      	mov	sp, r7
 800f72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f730:	4770      	bx	lr

0800f732 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800f732:	b480      	push	{r7}
 800f734:	b085      	sub	sp, #20
 800f736:	af00      	add	r7, sp, #0
 800f738:	60f8      	str	r0, [r7, #12]
 800f73a:	60b9      	str	r1, [r7, #8]
 800f73c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800f73e:	68bb      	ldr	r3, [r7, #8]
 800f740:	681a      	ldr	r2, [r3, #0]
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	330c      	adds	r3, #12
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	429a      	cmp	r2, r3
 800f74a:	d00a      	beq.n	800f762 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800f74c:	68bb      	ldr	r3, [r7, #8]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d002      	beq.n	800f758 <netif_do_set_gw+0x26>
 800f752:	68bb      	ldr	r3, [r7, #8]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	e000      	b.n	800f75a <netif_do_set_gw+0x28>
 800f758:	2300      	movs	r3, #0
 800f75a:	68fa      	ldr	r2, [r7, #12]
 800f75c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800f75e:	2301      	movs	r3, #1
 800f760:	e000      	b.n	800f764 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800f762:	2300      	movs	r3, #0
}
 800f764:	4618      	mov	r0, r3
 800f766:	3714      	adds	r7, #20
 800f768:	46bd      	mov	sp, r7
 800f76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76e:	4770      	bx	lr

0800f770 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b088      	sub	sp, #32
 800f774:	af00      	add	r7, sp, #0
 800f776:	60f8      	str	r0, [r7, #12]
 800f778:	60b9      	str	r1, [r7, #8]
 800f77a:	607a      	str	r2, [r7, #4]
 800f77c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800f77e:	2300      	movs	r3, #0
 800f780:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800f782:	2300      	movs	r3, #0
 800f784:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f786:	68bb      	ldr	r3, [r7, #8]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d101      	bne.n	800f790 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800f78c:	4b1c      	ldr	r3, [pc, #112]	; (800f800 <netif_set_addr+0x90>)
 800f78e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d101      	bne.n	800f79a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800f796:	4b1a      	ldr	r3, [pc, #104]	; (800f800 <netif_set_addr+0x90>)
 800f798:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d101      	bne.n	800f7a4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800f7a0:	4b17      	ldr	r3, [pc, #92]	; (800f800 <netif_set_addr+0x90>)
 800f7a2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800f7a4:	68bb      	ldr	r3, [r7, #8]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d003      	beq.n	800f7b2 <netif_set_addr+0x42>
 800f7aa:	68bb      	ldr	r3, [r7, #8]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d101      	bne.n	800f7b6 <netif_set_addr+0x46>
 800f7b2:	2301      	movs	r3, #1
 800f7b4:	e000      	b.n	800f7b8 <netif_set_addr+0x48>
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800f7ba:	697b      	ldr	r3, [r7, #20]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d006      	beq.n	800f7ce <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800f7c0:	f107 0310 	add.w	r3, r7, #16
 800f7c4:	461a      	mov	r2, r3
 800f7c6:	68b9      	ldr	r1, [r7, #8]
 800f7c8:	68f8      	ldr	r0, [r7, #12]
 800f7ca:	f7ff ff49 	bl	800f660 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800f7ce:	69fa      	ldr	r2, [r7, #28]
 800f7d0:	6879      	ldr	r1, [r7, #4]
 800f7d2:	68f8      	ldr	r0, [r7, #12]
 800f7d4:	f7ff ff8e 	bl	800f6f4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800f7d8:	69ba      	ldr	r2, [r7, #24]
 800f7da:	6839      	ldr	r1, [r7, #0]
 800f7dc:	68f8      	ldr	r0, [r7, #12]
 800f7de:	f7ff ffa8 	bl	800f732 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800f7e2:	697b      	ldr	r3, [r7, #20]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d106      	bne.n	800f7f6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800f7e8:	f107 0310 	add.w	r3, r7, #16
 800f7ec:	461a      	mov	r2, r3
 800f7ee:	68b9      	ldr	r1, [r7, #8]
 800f7f0:	68f8      	ldr	r0, [r7, #12]
 800f7f2:	f7ff ff35 	bl	800f660 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800f7f6:	bf00      	nop
 800f7f8:	3720      	adds	r7, #32
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd80      	pop	{r7, pc}
 800f7fe:	bf00      	nop
 800f800:	0801dec0 	.word	0x0801dec0

0800f804 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800f804:	b480      	push	{r7}
 800f806:	b083      	sub	sp, #12
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800f80c:	4a04      	ldr	r2, [pc, #16]	; (800f820 <netif_set_default+0x1c>)
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800f812:	bf00      	nop
 800f814:	370c      	adds	r7, #12
 800f816:	46bd      	mov	sp, r7
 800f818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81c:	4770      	bx	lr
 800f81e:	bf00      	nop
 800f820:	24007858 	.word	0x24007858

0800f824 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800f824:	b580      	push	{r7, lr}
 800f826:	b082      	sub	sp, #8
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d107      	bne.n	800f842 <netif_set_up+0x1e>
 800f832:	4b0f      	ldr	r3, [pc, #60]	; (800f870 <netif_set_up+0x4c>)
 800f834:	f44f 7254 	mov.w	r2, #848	; 0x350
 800f838:	490e      	ldr	r1, [pc, #56]	; (800f874 <netif_set_up+0x50>)
 800f83a:	480f      	ldr	r0, [pc, #60]	; (800f878 <netif_set_up+0x54>)
 800f83c:	f00a f8fa 	bl	8019a34 <iprintf>
 800f840:	e013      	b.n	800f86a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f848:	f003 0301 	and.w	r3, r3, #1
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d10c      	bne.n	800f86a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f856:	f043 0301 	orr.w	r3, r3, #1
 800f85a:	b2da      	uxtb	r2, r3
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800f862:	2103      	movs	r1, #3
 800f864:	6878      	ldr	r0, [r7, #4]
 800f866:	f000 f809 	bl	800f87c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800f86a:	3708      	adds	r7, #8
 800f86c:	46bd      	mov	sp, r7
 800f86e:	bd80      	pop	{r7, pc}
 800f870:	0801af38 	.word	0x0801af38
 800f874:	0801b0c0 	.word	0x0801b0c0
 800f878:	0801af88 	.word	0x0801af88

0800f87c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b082      	sub	sp, #8
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
 800f884:	460b      	mov	r3, r1
 800f886:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d106      	bne.n	800f89c <netif_issue_reports+0x20>
 800f88e:	4b18      	ldr	r3, [pc, #96]	; (800f8f0 <netif_issue_reports+0x74>)
 800f890:	f240 326d 	movw	r2, #877	; 0x36d
 800f894:	4917      	ldr	r1, [pc, #92]	; (800f8f4 <netif_issue_reports+0x78>)
 800f896:	4818      	ldr	r0, [pc, #96]	; (800f8f8 <netif_issue_reports+0x7c>)
 800f898:	f00a f8cc 	bl	8019a34 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f8a2:	f003 0304 	and.w	r3, r3, #4
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d01e      	beq.n	800f8e8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f8b0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d017      	beq.n	800f8e8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f8b8:	78fb      	ldrb	r3, [r7, #3]
 800f8ba:	f003 0301 	and.w	r3, r3, #1
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d013      	beq.n	800f8ea <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	3304      	adds	r3, #4
 800f8c6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d00e      	beq.n	800f8ea <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f8d2:	f003 0308 	and.w	r3, r3, #8
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d007      	beq.n	800f8ea <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	3304      	adds	r3, #4
 800f8de:	4619      	mov	r1, r3
 800f8e0:	6878      	ldr	r0, [r7, #4]
 800f8e2:	f008 f9b7 	bl	8017c54 <etharp_request>
 800f8e6:	e000      	b.n	800f8ea <netif_issue_reports+0x6e>
    return;
 800f8e8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800f8ea:	3708      	adds	r7, #8
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	bd80      	pop	{r7, pc}
 800f8f0:	0801af38 	.word	0x0801af38
 800f8f4:	0801b0dc 	.word	0x0801b0dc
 800f8f8:	0801af88 	.word	0x0801af88

0800f8fc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b082      	sub	sp, #8
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d107      	bne.n	800f91a <netif_set_down+0x1e>
 800f90a:	4b12      	ldr	r3, [pc, #72]	; (800f954 <netif_set_down+0x58>)
 800f90c:	f240 329b 	movw	r2, #923	; 0x39b
 800f910:	4911      	ldr	r1, [pc, #68]	; (800f958 <netif_set_down+0x5c>)
 800f912:	4812      	ldr	r0, [pc, #72]	; (800f95c <netif_set_down+0x60>)
 800f914:	f00a f88e 	bl	8019a34 <iprintf>
 800f918:	e019      	b.n	800f94e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f920:	f003 0301 	and.w	r3, r3, #1
 800f924:	2b00      	cmp	r3, #0
 800f926:	d012      	beq.n	800f94e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f92e:	f023 0301 	bic.w	r3, r3, #1
 800f932:	b2da      	uxtb	r2, r3
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f940:	f003 0308 	and.w	r3, r3, #8
 800f944:	2b00      	cmp	r3, #0
 800f946:	d002      	beq.n	800f94e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800f948:	6878      	ldr	r0, [r7, #4]
 800f94a:	f007 fd41 	bl	80173d0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800f94e:	3708      	adds	r7, #8
 800f950:	46bd      	mov	sp, r7
 800f952:	bd80      	pop	{r7, pc}
 800f954:	0801af38 	.word	0x0801af38
 800f958:	0801b100 	.word	0x0801b100
 800f95c:	0801af88 	.word	0x0801af88

0800f960 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b082      	sub	sp, #8
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d107      	bne.n	800f97e <netif_set_link_up+0x1e>
 800f96e:	4b13      	ldr	r3, [pc, #76]	; (800f9bc <netif_set_link_up+0x5c>)
 800f970:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800f974:	4912      	ldr	r1, [pc, #72]	; (800f9c0 <netif_set_link_up+0x60>)
 800f976:	4813      	ldr	r0, [pc, #76]	; (800f9c4 <netif_set_link_up+0x64>)
 800f978:	f00a f85c 	bl	8019a34 <iprintf>
 800f97c:	e01b      	b.n	800f9b6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f984:	f003 0304 	and.w	r3, r3, #4
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d114      	bne.n	800f9b6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f992:	f043 0304 	orr.w	r3, r3, #4
 800f996:	b2da      	uxtb	r2, r3
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800f99e:	2103      	movs	r1, #3
 800f9a0:	6878      	ldr	r0, [r7, #4]
 800f9a2:	f7ff ff6b 	bl	800f87c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	69db      	ldr	r3, [r3, #28]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d003      	beq.n	800f9b6 <netif_set_link_up+0x56>
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	69db      	ldr	r3, [r3, #28]
 800f9b2:	6878      	ldr	r0, [r7, #4]
 800f9b4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800f9b6:	3708      	adds	r7, #8
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd80      	pop	{r7, pc}
 800f9bc:	0801af38 	.word	0x0801af38
 800f9c0:	0801b120 	.word	0x0801b120
 800f9c4:	0801af88 	.word	0x0801af88

0800f9c8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b082      	sub	sp, #8
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d107      	bne.n	800f9e6 <netif_set_link_down+0x1e>
 800f9d6:	4b11      	ldr	r3, [pc, #68]	; (800fa1c <netif_set_link_down+0x54>)
 800f9d8:	f240 4206 	movw	r2, #1030	; 0x406
 800f9dc:	4910      	ldr	r1, [pc, #64]	; (800fa20 <netif_set_link_down+0x58>)
 800f9de:	4811      	ldr	r0, [pc, #68]	; (800fa24 <netif_set_link_down+0x5c>)
 800f9e0:	f00a f828 	bl	8019a34 <iprintf>
 800f9e4:	e017      	b.n	800fa16 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f9ec:	f003 0304 	and.w	r3, r3, #4
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d010      	beq.n	800fa16 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f9fa:	f023 0304 	bic.w	r3, r3, #4
 800f9fe:	b2da      	uxtb	r2, r3
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	69db      	ldr	r3, [r3, #28]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d003      	beq.n	800fa16 <netif_set_link_down+0x4e>
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	69db      	ldr	r3, [r3, #28]
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800fa16:	3708      	adds	r7, #8
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	bd80      	pop	{r7, pc}
 800fa1c:	0801af38 	.word	0x0801af38
 800fa20:	0801b144 	.word	0x0801b144
 800fa24:	0801af88 	.word	0x0801af88

0800fa28 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800fa28:	b480      	push	{r7}
 800fa2a:	b083      	sub	sp, #12
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
 800fa30:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d002      	beq.n	800fa3e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	683a      	ldr	r2, [r7, #0]
 800fa3c:	61da      	str	r2, [r3, #28]
  }
}
 800fa3e:	bf00      	nop
 800fa40:	370c      	adds	r7, #12
 800fa42:	46bd      	mov	sp, r7
 800fa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa48:	4770      	bx	lr

0800fa4a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800fa4a:	b480      	push	{r7}
 800fa4c:	b085      	sub	sp, #20
 800fa4e:	af00      	add	r7, sp, #0
 800fa50:	60f8      	str	r0, [r7, #12]
 800fa52:	60b9      	str	r1, [r7, #8]
 800fa54:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800fa56:	f06f 030b 	mvn.w	r3, #11
}
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	3714      	adds	r7, #20
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa64:	4770      	bx	lr
	...

0800fa68 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800fa68:	b480      	push	{r7}
 800fa6a:	b085      	sub	sp, #20
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	4603      	mov	r3, r0
 800fa70:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800fa72:	79fb      	ldrb	r3, [r7, #7]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d013      	beq.n	800faa0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800fa78:	4b0d      	ldr	r3, [pc, #52]	; (800fab0 <netif_get_by_index+0x48>)
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	60fb      	str	r3, [r7, #12]
 800fa7e:	e00c      	b.n	800fa9a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fa86:	3301      	adds	r3, #1
 800fa88:	b2db      	uxtb	r3, r3
 800fa8a:	79fa      	ldrb	r2, [r7, #7]
 800fa8c:	429a      	cmp	r2, r3
 800fa8e:	d101      	bne.n	800fa94 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	e006      	b.n	800faa2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	60fb      	str	r3, [r7, #12]
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d1ef      	bne.n	800fa80 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800faa0:	2300      	movs	r3, #0
}
 800faa2:	4618      	mov	r0, r3
 800faa4:	3714      	adds	r7, #20
 800faa6:	46bd      	mov	sp, r7
 800faa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faac:	4770      	bx	lr
 800faae:	bf00      	nop
 800fab0:	24007854 	.word	0x24007854

0800fab4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b082      	sub	sp, #8
 800fab8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800faba:	f009 fe01 	bl	80196c0 <sys_arch_protect>
 800fabe:	6038      	str	r0, [r7, #0]
 800fac0:	4b0d      	ldr	r3, [pc, #52]	; (800faf8 <pbuf_free_ooseq+0x44>)
 800fac2:	2200      	movs	r2, #0
 800fac4:	701a      	strb	r2, [r3, #0]
 800fac6:	6838      	ldr	r0, [r7, #0]
 800fac8:	f009 fe08 	bl	80196dc <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800facc:	4b0b      	ldr	r3, [pc, #44]	; (800fafc <pbuf_free_ooseq+0x48>)
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	607b      	str	r3, [r7, #4]
 800fad2:	e00a      	b.n	800faea <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d003      	beq.n	800fae4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f002 fc21 	bl	8012324 <tcp_free_ooseq>
      return;
 800fae2:	e005      	b.n	800faf0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	68db      	ldr	r3, [r3, #12]
 800fae8:	607b      	str	r3, [r7, #4]
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d1f1      	bne.n	800fad4 <pbuf_free_ooseq+0x20>
    }
  }
}
 800faf0:	3708      	adds	r7, #8
 800faf2:	46bd      	mov	sp, r7
 800faf4:	bd80      	pop	{r7, pc}
 800faf6:	bf00      	nop
 800faf8:	2400785c 	.word	0x2400785c
 800fafc:	24007864 	.word	0x24007864

0800fb00 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b082      	sub	sp, #8
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800fb08:	f7ff ffd4 	bl	800fab4 <pbuf_free_ooseq>
}
 800fb0c:	bf00      	nop
 800fb0e:	3708      	adds	r7, #8
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd80      	pop	{r7, pc}

0800fb14 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b082      	sub	sp, #8
 800fb18:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800fb1a:	f009 fdd1 	bl	80196c0 <sys_arch_protect>
 800fb1e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800fb20:	4b0f      	ldr	r3, [pc, #60]	; (800fb60 <pbuf_pool_is_empty+0x4c>)
 800fb22:	781b      	ldrb	r3, [r3, #0]
 800fb24:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800fb26:	4b0e      	ldr	r3, [pc, #56]	; (800fb60 <pbuf_pool_is_empty+0x4c>)
 800fb28:	2201      	movs	r2, #1
 800fb2a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f009 fdd5 	bl	80196dc <sys_arch_unprotect>

  if (!queued) {
 800fb32:	78fb      	ldrb	r3, [r7, #3]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d10f      	bne.n	800fb58 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800fb38:	2100      	movs	r1, #0
 800fb3a:	480a      	ldr	r0, [pc, #40]	; (800fb64 <pbuf_pool_is_empty+0x50>)
 800fb3c:	f7fe fdee 	bl	800e71c <tcpip_try_callback>
 800fb40:	4603      	mov	r3, r0
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d008      	beq.n	800fb58 <pbuf_pool_is_empty+0x44>
 800fb46:	f009 fdbb 	bl	80196c0 <sys_arch_protect>
 800fb4a:	6078      	str	r0, [r7, #4]
 800fb4c:	4b04      	ldr	r3, [pc, #16]	; (800fb60 <pbuf_pool_is_empty+0x4c>)
 800fb4e:	2200      	movs	r2, #0
 800fb50:	701a      	strb	r2, [r3, #0]
 800fb52:	6878      	ldr	r0, [r7, #4]
 800fb54:	f009 fdc2 	bl	80196dc <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800fb58:	bf00      	nop
 800fb5a:	3708      	adds	r7, #8
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	bd80      	pop	{r7, pc}
 800fb60:	2400785c 	.word	0x2400785c
 800fb64:	0800fb01 	.word	0x0800fb01

0800fb68 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800fb68:	b480      	push	{r7}
 800fb6a:	b085      	sub	sp, #20
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	60f8      	str	r0, [r7, #12]
 800fb70:	60b9      	str	r1, [r7, #8]
 800fb72:	4611      	mov	r1, r2
 800fb74:	461a      	mov	r2, r3
 800fb76:	460b      	mov	r3, r1
 800fb78:	80fb      	strh	r3, [r7, #6]
 800fb7a:	4613      	mov	r3, r2
 800fb7c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	2200      	movs	r2, #0
 800fb82:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	68ba      	ldr	r2, [r7, #8]
 800fb88:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	88fa      	ldrh	r2, [r7, #6]
 800fb8e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	88ba      	ldrh	r2, [r7, #4]
 800fb94:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800fb96:	8b3b      	ldrh	r3, [r7, #24]
 800fb98:	b2da      	uxtb	r2, r3
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	7f3a      	ldrb	r2, [r7, #28]
 800fba2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	2201      	movs	r2, #1
 800fba8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	2200      	movs	r2, #0
 800fbae:	73da      	strb	r2, [r3, #15]
}
 800fbb0:	bf00      	nop
 800fbb2:	3714      	adds	r7, #20
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbba:	4770      	bx	lr

0800fbbc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b08c      	sub	sp, #48	; 0x30
 800fbc0:	af02      	add	r7, sp, #8
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	71fb      	strb	r3, [r7, #7]
 800fbc6:	460b      	mov	r3, r1
 800fbc8:	80bb      	strh	r3, [r7, #4]
 800fbca:	4613      	mov	r3, r2
 800fbcc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800fbce:	79fb      	ldrb	r3, [r7, #7]
 800fbd0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800fbd2:	887b      	ldrh	r3, [r7, #2]
 800fbd4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800fbd8:	d07f      	beq.n	800fcda <pbuf_alloc+0x11e>
 800fbda:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800fbde:	f300 80c8 	bgt.w	800fd72 <pbuf_alloc+0x1b6>
 800fbe2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800fbe6:	d010      	beq.n	800fc0a <pbuf_alloc+0x4e>
 800fbe8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800fbec:	f300 80c1 	bgt.w	800fd72 <pbuf_alloc+0x1b6>
 800fbf0:	2b01      	cmp	r3, #1
 800fbf2:	d002      	beq.n	800fbfa <pbuf_alloc+0x3e>
 800fbf4:	2b41      	cmp	r3, #65	; 0x41
 800fbf6:	f040 80bc 	bne.w	800fd72 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800fbfa:	887a      	ldrh	r2, [r7, #2]
 800fbfc:	88bb      	ldrh	r3, [r7, #4]
 800fbfe:	4619      	mov	r1, r3
 800fc00:	2000      	movs	r0, #0
 800fc02:	f000 f8d1 	bl	800fda8 <pbuf_alloc_reference>
 800fc06:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800fc08:	e0bd      	b.n	800fd86 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800fc0e:	2300      	movs	r3, #0
 800fc10:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800fc12:	88bb      	ldrh	r3, [r7, #4]
 800fc14:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800fc16:	200c      	movs	r0, #12
 800fc18:	f7ff fb9a 	bl	800f350 <memp_malloc>
 800fc1c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800fc1e:	693b      	ldr	r3, [r7, #16]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d109      	bne.n	800fc38 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800fc24:	f7ff ff76 	bl	800fb14 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800fc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d002      	beq.n	800fc34 <pbuf_alloc+0x78>
            pbuf_free(p);
 800fc2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fc30:	f000 faa8 	bl	8010184 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800fc34:	2300      	movs	r3, #0
 800fc36:	e0a7      	b.n	800fd88 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800fc38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc3a:	3303      	adds	r3, #3
 800fc3c:	b29b      	uxth	r3, r3
 800fc3e:	f023 0303 	bic.w	r3, r3, #3
 800fc42:	b29b      	uxth	r3, r3
 800fc44:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800fc48:	b29b      	uxth	r3, r3
 800fc4a:	8b7a      	ldrh	r2, [r7, #26]
 800fc4c:	4293      	cmp	r3, r2
 800fc4e:	bf28      	it	cs
 800fc50:	4613      	movcs	r3, r2
 800fc52:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800fc54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc56:	3310      	adds	r3, #16
 800fc58:	693a      	ldr	r2, [r7, #16]
 800fc5a:	4413      	add	r3, r2
 800fc5c:	3303      	adds	r3, #3
 800fc5e:	f023 0303 	bic.w	r3, r3, #3
 800fc62:	4618      	mov	r0, r3
 800fc64:	89f9      	ldrh	r1, [r7, #14]
 800fc66:	8b7a      	ldrh	r2, [r7, #26]
 800fc68:	2300      	movs	r3, #0
 800fc6a:	9301      	str	r3, [sp, #4]
 800fc6c:	887b      	ldrh	r3, [r7, #2]
 800fc6e:	9300      	str	r3, [sp, #0]
 800fc70:	460b      	mov	r3, r1
 800fc72:	4601      	mov	r1, r0
 800fc74:	6938      	ldr	r0, [r7, #16]
 800fc76:	f7ff ff77 	bl	800fb68 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800fc7a:	693b      	ldr	r3, [r7, #16]
 800fc7c:	685b      	ldr	r3, [r3, #4]
 800fc7e:	f003 0303 	and.w	r3, r3, #3
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d006      	beq.n	800fc94 <pbuf_alloc+0xd8>
 800fc86:	4b42      	ldr	r3, [pc, #264]	; (800fd90 <pbuf_alloc+0x1d4>)
 800fc88:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fc8c:	4941      	ldr	r1, [pc, #260]	; (800fd94 <pbuf_alloc+0x1d8>)
 800fc8e:	4842      	ldr	r0, [pc, #264]	; (800fd98 <pbuf_alloc+0x1dc>)
 800fc90:	f009 fed0 	bl	8019a34 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800fc94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc96:	3303      	adds	r3, #3
 800fc98:	f023 0303 	bic.w	r3, r3, #3
 800fc9c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800fca0:	d106      	bne.n	800fcb0 <pbuf_alloc+0xf4>
 800fca2:	4b3b      	ldr	r3, [pc, #236]	; (800fd90 <pbuf_alloc+0x1d4>)
 800fca4:	f44f 7281 	mov.w	r2, #258	; 0x102
 800fca8:	493c      	ldr	r1, [pc, #240]	; (800fd9c <pbuf_alloc+0x1e0>)
 800fcaa:	483b      	ldr	r0, [pc, #236]	; (800fd98 <pbuf_alloc+0x1dc>)
 800fcac:	f009 fec2 	bl	8019a34 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800fcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d102      	bne.n	800fcbc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800fcb6:	693b      	ldr	r3, [r7, #16]
 800fcb8:	627b      	str	r3, [r7, #36]	; 0x24
 800fcba:	e002      	b.n	800fcc2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800fcbc:	69fb      	ldr	r3, [r7, #28]
 800fcbe:	693a      	ldr	r2, [r7, #16]
 800fcc0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800fcc2:	693b      	ldr	r3, [r7, #16]
 800fcc4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800fcc6:	8b7a      	ldrh	r2, [r7, #26]
 800fcc8:	89fb      	ldrh	r3, [r7, #14]
 800fcca:	1ad3      	subs	r3, r2, r3
 800fccc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800fcce:	2300      	movs	r3, #0
 800fcd0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800fcd2:	8b7b      	ldrh	r3, [r7, #26]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d19e      	bne.n	800fc16 <pbuf_alloc+0x5a>
      break;
 800fcd8:	e055      	b.n	800fd86 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800fcda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fcdc:	3303      	adds	r3, #3
 800fcde:	b29b      	uxth	r3, r3
 800fce0:	f023 0303 	bic.w	r3, r3, #3
 800fce4:	b29a      	uxth	r2, r3
 800fce6:	88bb      	ldrh	r3, [r7, #4]
 800fce8:	3303      	adds	r3, #3
 800fcea:	b29b      	uxth	r3, r3
 800fcec:	f023 0303 	bic.w	r3, r3, #3
 800fcf0:	b29b      	uxth	r3, r3
 800fcf2:	4413      	add	r3, r2
 800fcf4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800fcf6:	8b3b      	ldrh	r3, [r7, #24]
 800fcf8:	3310      	adds	r3, #16
 800fcfa:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800fcfc:	8b3a      	ldrh	r2, [r7, #24]
 800fcfe:	88bb      	ldrh	r3, [r7, #4]
 800fd00:	3303      	adds	r3, #3
 800fd02:	f023 0303 	bic.w	r3, r3, #3
 800fd06:	429a      	cmp	r2, r3
 800fd08:	d306      	bcc.n	800fd18 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800fd0a:	8afa      	ldrh	r2, [r7, #22]
 800fd0c:	88bb      	ldrh	r3, [r7, #4]
 800fd0e:	3303      	adds	r3, #3
 800fd10:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800fd14:	429a      	cmp	r2, r3
 800fd16:	d201      	bcs.n	800fd1c <pbuf_alloc+0x160>
        return NULL;
 800fd18:	2300      	movs	r3, #0
 800fd1a:	e035      	b.n	800fd88 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800fd1c:	8afb      	ldrh	r3, [r7, #22]
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f7ff f972 	bl	800f008 <mem_malloc>
 800fd24:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800fd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d101      	bne.n	800fd30 <pbuf_alloc+0x174>
        return NULL;
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	e02b      	b.n	800fd88 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800fd30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd32:	3310      	adds	r3, #16
 800fd34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd36:	4413      	add	r3, r2
 800fd38:	3303      	adds	r3, #3
 800fd3a:	f023 0303 	bic.w	r3, r3, #3
 800fd3e:	4618      	mov	r0, r3
 800fd40:	88b9      	ldrh	r1, [r7, #4]
 800fd42:	88ba      	ldrh	r2, [r7, #4]
 800fd44:	2300      	movs	r3, #0
 800fd46:	9301      	str	r3, [sp, #4]
 800fd48:	887b      	ldrh	r3, [r7, #2]
 800fd4a:	9300      	str	r3, [sp, #0]
 800fd4c:	460b      	mov	r3, r1
 800fd4e:	4601      	mov	r1, r0
 800fd50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd52:	f7ff ff09 	bl	800fb68 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800fd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd58:	685b      	ldr	r3, [r3, #4]
 800fd5a:	f003 0303 	and.w	r3, r3, #3
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d010      	beq.n	800fd84 <pbuf_alloc+0x1c8>
 800fd62:	4b0b      	ldr	r3, [pc, #44]	; (800fd90 <pbuf_alloc+0x1d4>)
 800fd64:	f44f 7291 	mov.w	r2, #290	; 0x122
 800fd68:	490d      	ldr	r1, [pc, #52]	; (800fda0 <pbuf_alloc+0x1e4>)
 800fd6a:	480b      	ldr	r0, [pc, #44]	; (800fd98 <pbuf_alloc+0x1dc>)
 800fd6c:	f009 fe62 	bl	8019a34 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800fd70:	e008      	b.n	800fd84 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800fd72:	4b07      	ldr	r3, [pc, #28]	; (800fd90 <pbuf_alloc+0x1d4>)
 800fd74:	f240 1227 	movw	r2, #295	; 0x127
 800fd78:	490a      	ldr	r1, [pc, #40]	; (800fda4 <pbuf_alloc+0x1e8>)
 800fd7a:	4807      	ldr	r0, [pc, #28]	; (800fd98 <pbuf_alloc+0x1dc>)
 800fd7c:	f009 fe5a 	bl	8019a34 <iprintf>
      return NULL;
 800fd80:	2300      	movs	r3, #0
 800fd82:	e001      	b.n	800fd88 <pbuf_alloc+0x1cc>
      break;
 800fd84:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800fd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fd88:	4618      	mov	r0, r3
 800fd8a:	3728      	adds	r7, #40	; 0x28
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	bd80      	pop	{r7, pc}
 800fd90:	0801b168 	.word	0x0801b168
 800fd94:	0801b198 	.word	0x0801b198
 800fd98:	0801b1c8 	.word	0x0801b1c8
 800fd9c:	0801b1f0 	.word	0x0801b1f0
 800fda0:	0801b224 	.word	0x0801b224
 800fda4:	0801b250 	.word	0x0801b250

0800fda8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b086      	sub	sp, #24
 800fdac:	af02      	add	r7, sp, #8
 800fdae:	6078      	str	r0, [r7, #4]
 800fdb0:	460b      	mov	r3, r1
 800fdb2:	807b      	strh	r3, [r7, #2]
 800fdb4:	4613      	mov	r3, r2
 800fdb6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800fdb8:	883b      	ldrh	r3, [r7, #0]
 800fdba:	2b41      	cmp	r3, #65	; 0x41
 800fdbc:	d009      	beq.n	800fdd2 <pbuf_alloc_reference+0x2a>
 800fdbe:	883b      	ldrh	r3, [r7, #0]
 800fdc0:	2b01      	cmp	r3, #1
 800fdc2:	d006      	beq.n	800fdd2 <pbuf_alloc_reference+0x2a>
 800fdc4:	4b0f      	ldr	r3, [pc, #60]	; (800fe04 <pbuf_alloc_reference+0x5c>)
 800fdc6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800fdca:	490f      	ldr	r1, [pc, #60]	; (800fe08 <pbuf_alloc_reference+0x60>)
 800fdcc:	480f      	ldr	r0, [pc, #60]	; (800fe0c <pbuf_alloc_reference+0x64>)
 800fdce:	f009 fe31 	bl	8019a34 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800fdd2:	200b      	movs	r0, #11
 800fdd4:	f7ff fabc 	bl	800f350 <memp_malloc>
 800fdd8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d101      	bne.n	800fde4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800fde0:	2300      	movs	r3, #0
 800fde2:	e00b      	b.n	800fdfc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800fde4:	8879      	ldrh	r1, [r7, #2]
 800fde6:	887a      	ldrh	r2, [r7, #2]
 800fde8:	2300      	movs	r3, #0
 800fdea:	9301      	str	r3, [sp, #4]
 800fdec:	883b      	ldrh	r3, [r7, #0]
 800fdee:	9300      	str	r3, [sp, #0]
 800fdf0:	460b      	mov	r3, r1
 800fdf2:	6879      	ldr	r1, [r7, #4]
 800fdf4:	68f8      	ldr	r0, [r7, #12]
 800fdf6:	f7ff feb7 	bl	800fb68 <pbuf_init_alloced_pbuf>
  return p;
 800fdfa:	68fb      	ldr	r3, [r7, #12]
}
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	3710      	adds	r7, #16
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bd80      	pop	{r7, pc}
 800fe04:	0801b168 	.word	0x0801b168
 800fe08:	0801b26c 	.word	0x0801b26c
 800fe0c:	0801b1c8 	.word	0x0801b1c8

0800fe10 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b088      	sub	sp, #32
 800fe14:	af02      	add	r7, sp, #8
 800fe16:	607b      	str	r3, [r7, #4]
 800fe18:	4603      	mov	r3, r0
 800fe1a:	73fb      	strb	r3, [r7, #15]
 800fe1c:	460b      	mov	r3, r1
 800fe1e:	81bb      	strh	r3, [r7, #12]
 800fe20:	4613      	mov	r3, r2
 800fe22:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800fe24:	7bfb      	ldrb	r3, [r7, #15]
 800fe26:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800fe28:	8a7b      	ldrh	r3, [r7, #18]
 800fe2a:	3303      	adds	r3, #3
 800fe2c:	f023 0203 	bic.w	r2, r3, #3
 800fe30:	89bb      	ldrh	r3, [r7, #12]
 800fe32:	441a      	add	r2, r3
 800fe34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe36:	429a      	cmp	r2, r3
 800fe38:	d901      	bls.n	800fe3e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	e018      	b.n	800fe70 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800fe3e:	6a3b      	ldr	r3, [r7, #32]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d007      	beq.n	800fe54 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800fe44:	8a7b      	ldrh	r3, [r7, #18]
 800fe46:	3303      	adds	r3, #3
 800fe48:	f023 0303 	bic.w	r3, r3, #3
 800fe4c:	6a3a      	ldr	r2, [r7, #32]
 800fe4e:	4413      	add	r3, r2
 800fe50:	617b      	str	r3, [r7, #20]
 800fe52:	e001      	b.n	800fe58 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800fe54:	2300      	movs	r3, #0
 800fe56:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800fe58:	6878      	ldr	r0, [r7, #4]
 800fe5a:	89b9      	ldrh	r1, [r7, #12]
 800fe5c:	89ba      	ldrh	r2, [r7, #12]
 800fe5e:	2302      	movs	r3, #2
 800fe60:	9301      	str	r3, [sp, #4]
 800fe62:	897b      	ldrh	r3, [r7, #10]
 800fe64:	9300      	str	r3, [sp, #0]
 800fe66:	460b      	mov	r3, r1
 800fe68:	6979      	ldr	r1, [r7, #20]
 800fe6a:	f7ff fe7d 	bl	800fb68 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800fe6e:	687b      	ldr	r3, [r7, #4]
}
 800fe70:	4618      	mov	r0, r3
 800fe72:	3718      	adds	r7, #24
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}

0800fe78 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b084      	sub	sp, #16
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
 800fe80:	460b      	mov	r3, r1
 800fe82:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d106      	bne.n	800fe98 <pbuf_realloc+0x20>
 800fe8a:	4b3a      	ldr	r3, [pc, #232]	; (800ff74 <pbuf_realloc+0xfc>)
 800fe8c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800fe90:	4939      	ldr	r1, [pc, #228]	; (800ff78 <pbuf_realloc+0x100>)
 800fe92:	483a      	ldr	r0, [pc, #232]	; (800ff7c <pbuf_realloc+0x104>)
 800fe94:	f009 fdce 	bl	8019a34 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	891b      	ldrh	r3, [r3, #8]
 800fe9c:	887a      	ldrh	r2, [r7, #2]
 800fe9e:	429a      	cmp	r2, r3
 800fea0:	d263      	bcs.n	800ff6a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	891a      	ldrh	r2, [r3, #8]
 800fea6:	887b      	ldrh	r3, [r7, #2]
 800fea8:	1ad3      	subs	r3, r2, r3
 800feaa:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800feac:	887b      	ldrh	r3, [r7, #2]
 800feae:	817b      	strh	r3, [r7, #10]
  q = p;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800feb4:	e018      	b.n	800fee8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	895b      	ldrh	r3, [r3, #10]
 800feba:	897a      	ldrh	r2, [r7, #10]
 800febc:	1ad3      	subs	r3, r2, r3
 800febe:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	891a      	ldrh	r2, [r3, #8]
 800fec4:	893b      	ldrh	r3, [r7, #8]
 800fec6:	1ad3      	subs	r3, r2, r3
 800fec8:	b29a      	uxth	r2, r3
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d106      	bne.n	800fee8 <pbuf_realloc+0x70>
 800feda:	4b26      	ldr	r3, [pc, #152]	; (800ff74 <pbuf_realloc+0xfc>)
 800fedc:	f240 12af 	movw	r2, #431	; 0x1af
 800fee0:	4927      	ldr	r1, [pc, #156]	; (800ff80 <pbuf_realloc+0x108>)
 800fee2:	4826      	ldr	r0, [pc, #152]	; (800ff7c <pbuf_realloc+0x104>)
 800fee4:	f009 fda6 	bl	8019a34 <iprintf>
  while (rem_len > q->len) {
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	895b      	ldrh	r3, [r3, #10]
 800feec:	897a      	ldrh	r2, [r7, #10]
 800feee:	429a      	cmp	r2, r3
 800fef0:	d8e1      	bhi.n	800feb6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	7b1b      	ldrb	r3, [r3, #12]
 800fef6:	f003 030f 	and.w	r3, r3, #15
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d121      	bne.n	800ff42 <pbuf_realloc+0xca>
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	895b      	ldrh	r3, [r3, #10]
 800ff02:	897a      	ldrh	r2, [r7, #10]
 800ff04:	429a      	cmp	r2, r3
 800ff06:	d01c      	beq.n	800ff42 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	7b5b      	ldrb	r3, [r3, #13]
 800ff0c:	f003 0302 	and.w	r3, r3, #2
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d116      	bne.n	800ff42 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	685a      	ldr	r2, [r3, #4]
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	1ad3      	subs	r3, r2, r3
 800ff1c:	b29a      	uxth	r2, r3
 800ff1e:	897b      	ldrh	r3, [r7, #10]
 800ff20:	4413      	add	r3, r2
 800ff22:	b29b      	uxth	r3, r3
 800ff24:	4619      	mov	r1, r3
 800ff26:	68f8      	ldr	r0, [r7, #12]
 800ff28:	f7fe ff64 	bl	800edf4 <mem_trim>
 800ff2c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d106      	bne.n	800ff42 <pbuf_realloc+0xca>
 800ff34:	4b0f      	ldr	r3, [pc, #60]	; (800ff74 <pbuf_realloc+0xfc>)
 800ff36:	f240 12bd 	movw	r2, #445	; 0x1bd
 800ff3a:	4912      	ldr	r1, [pc, #72]	; (800ff84 <pbuf_realloc+0x10c>)
 800ff3c:	480f      	ldr	r0, [pc, #60]	; (800ff7c <pbuf_realloc+0x104>)
 800ff3e:	f009 fd79 	bl	8019a34 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	897a      	ldrh	r2, [r7, #10]
 800ff46:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	895a      	ldrh	r2, [r3, #10]
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d004      	beq.n	800ff62 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	f000 f911 	bl	8010184 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	2200      	movs	r2, #0
 800ff66:	601a      	str	r2, [r3, #0]
 800ff68:	e000      	b.n	800ff6c <pbuf_realloc+0xf4>
    return;
 800ff6a:	bf00      	nop

}
 800ff6c:	3710      	adds	r7, #16
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	bd80      	pop	{r7, pc}
 800ff72:	bf00      	nop
 800ff74:	0801b168 	.word	0x0801b168
 800ff78:	0801b280 	.word	0x0801b280
 800ff7c:	0801b1c8 	.word	0x0801b1c8
 800ff80:	0801b298 	.word	0x0801b298
 800ff84:	0801b2b0 	.word	0x0801b2b0

0800ff88 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b086      	sub	sp, #24
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	60f8      	str	r0, [r7, #12]
 800ff90:	60b9      	str	r1, [r7, #8]
 800ff92:	4613      	mov	r3, r2
 800ff94:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d106      	bne.n	800ffaa <pbuf_add_header_impl+0x22>
 800ff9c:	4b2b      	ldr	r3, [pc, #172]	; (801004c <pbuf_add_header_impl+0xc4>)
 800ff9e:	f240 12df 	movw	r2, #479	; 0x1df
 800ffa2:	492b      	ldr	r1, [pc, #172]	; (8010050 <pbuf_add_header_impl+0xc8>)
 800ffa4:	482b      	ldr	r0, [pc, #172]	; (8010054 <pbuf_add_header_impl+0xcc>)
 800ffa6:	f009 fd45 	bl	8019a34 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d003      	beq.n	800ffb8 <pbuf_add_header_impl+0x30>
 800ffb0:	68bb      	ldr	r3, [r7, #8]
 800ffb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ffb6:	d301      	bcc.n	800ffbc <pbuf_add_header_impl+0x34>
    return 1;
 800ffb8:	2301      	movs	r3, #1
 800ffba:	e043      	b.n	8010044 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d101      	bne.n	800ffc6 <pbuf_add_header_impl+0x3e>
    return 0;
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	e03e      	b.n	8010044 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ffc6:	68bb      	ldr	r3, [r7, #8]
 800ffc8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	891a      	ldrh	r2, [r3, #8]
 800ffce:	8a7b      	ldrh	r3, [r7, #18]
 800ffd0:	4413      	add	r3, r2
 800ffd2:	b29b      	uxth	r3, r3
 800ffd4:	8a7a      	ldrh	r2, [r7, #18]
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d901      	bls.n	800ffde <pbuf_add_header_impl+0x56>
    return 1;
 800ffda:	2301      	movs	r3, #1
 800ffdc:	e032      	b.n	8010044 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	7b1b      	ldrb	r3, [r3, #12]
 800ffe2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ffe4:	8a3b      	ldrh	r3, [r7, #16]
 800ffe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d00c      	beq.n	8010008 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	685a      	ldr	r2, [r3, #4]
 800fff2:	68bb      	ldr	r3, [r7, #8]
 800fff4:	425b      	negs	r3, r3
 800fff6:	4413      	add	r3, r2
 800fff8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	3310      	adds	r3, #16
 800fffe:	697a      	ldr	r2, [r7, #20]
 8010000:	429a      	cmp	r2, r3
 8010002:	d20d      	bcs.n	8010020 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8010004:	2301      	movs	r3, #1
 8010006:	e01d      	b.n	8010044 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8010008:	79fb      	ldrb	r3, [r7, #7]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d006      	beq.n	801001c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	685a      	ldr	r2, [r3, #4]
 8010012:	68bb      	ldr	r3, [r7, #8]
 8010014:	425b      	negs	r3, r3
 8010016:	4413      	add	r3, r2
 8010018:	617b      	str	r3, [r7, #20]
 801001a:	e001      	b.n	8010020 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801001c:	2301      	movs	r3, #1
 801001e:	e011      	b.n	8010044 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	697a      	ldr	r2, [r7, #20]
 8010024:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	895a      	ldrh	r2, [r3, #10]
 801002a:	8a7b      	ldrh	r3, [r7, #18]
 801002c:	4413      	add	r3, r2
 801002e:	b29a      	uxth	r2, r3
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	891a      	ldrh	r2, [r3, #8]
 8010038:	8a7b      	ldrh	r3, [r7, #18]
 801003a:	4413      	add	r3, r2
 801003c:	b29a      	uxth	r2, r3
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	811a      	strh	r2, [r3, #8]


  return 0;
 8010042:	2300      	movs	r3, #0
}
 8010044:	4618      	mov	r0, r3
 8010046:	3718      	adds	r7, #24
 8010048:	46bd      	mov	sp, r7
 801004a:	bd80      	pop	{r7, pc}
 801004c:	0801b168 	.word	0x0801b168
 8010050:	0801b2cc 	.word	0x0801b2cc
 8010054:	0801b1c8 	.word	0x0801b1c8

08010058 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b082      	sub	sp, #8
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
 8010060:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8010062:	2200      	movs	r2, #0
 8010064:	6839      	ldr	r1, [r7, #0]
 8010066:	6878      	ldr	r0, [r7, #4]
 8010068:	f7ff ff8e 	bl	800ff88 <pbuf_add_header_impl>
 801006c:	4603      	mov	r3, r0
}
 801006e:	4618      	mov	r0, r3
 8010070:	3708      	adds	r7, #8
 8010072:	46bd      	mov	sp, r7
 8010074:	bd80      	pop	{r7, pc}
	...

08010078 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8010078:	b580      	push	{r7, lr}
 801007a:	b084      	sub	sp, #16
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
 8010080:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d106      	bne.n	8010096 <pbuf_remove_header+0x1e>
 8010088:	4b20      	ldr	r3, [pc, #128]	; (801010c <pbuf_remove_header+0x94>)
 801008a:	f240 224b 	movw	r2, #587	; 0x24b
 801008e:	4920      	ldr	r1, [pc, #128]	; (8010110 <pbuf_remove_header+0x98>)
 8010090:	4820      	ldr	r0, [pc, #128]	; (8010114 <pbuf_remove_header+0x9c>)
 8010092:	f009 fccf 	bl	8019a34 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d003      	beq.n	80100a4 <pbuf_remove_header+0x2c>
 801009c:	683b      	ldr	r3, [r7, #0]
 801009e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80100a2:	d301      	bcc.n	80100a8 <pbuf_remove_header+0x30>
    return 1;
 80100a4:	2301      	movs	r3, #1
 80100a6:	e02c      	b.n	8010102 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80100a8:	683b      	ldr	r3, [r7, #0]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d101      	bne.n	80100b2 <pbuf_remove_header+0x3a>
    return 0;
 80100ae:	2300      	movs	r3, #0
 80100b0:	e027      	b.n	8010102 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	895b      	ldrh	r3, [r3, #10]
 80100ba:	89fa      	ldrh	r2, [r7, #14]
 80100bc:	429a      	cmp	r2, r3
 80100be:	d908      	bls.n	80100d2 <pbuf_remove_header+0x5a>
 80100c0:	4b12      	ldr	r3, [pc, #72]	; (801010c <pbuf_remove_header+0x94>)
 80100c2:	f240 2255 	movw	r2, #597	; 0x255
 80100c6:	4914      	ldr	r1, [pc, #80]	; (8010118 <pbuf_remove_header+0xa0>)
 80100c8:	4812      	ldr	r0, [pc, #72]	; (8010114 <pbuf_remove_header+0x9c>)
 80100ca:	f009 fcb3 	bl	8019a34 <iprintf>
 80100ce:	2301      	movs	r3, #1
 80100d0:	e017      	b.n	8010102 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	685b      	ldr	r3, [r3, #4]
 80100d6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	685a      	ldr	r2, [r3, #4]
 80100dc:	683b      	ldr	r3, [r7, #0]
 80100de:	441a      	add	r2, r3
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	895a      	ldrh	r2, [r3, #10]
 80100e8:	89fb      	ldrh	r3, [r7, #14]
 80100ea:	1ad3      	subs	r3, r2, r3
 80100ec:	b29a      	uxth	r2, r3
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	891a      	ldrh	r2, [r3, #8]
 80100f6:	89fb      	ldrh	r3, [r7, #14]
 80100f8:	1ad3      	subs	r3, r2, r3
 80100fa:	b29a      	uxth	r2, r3
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8010100:	2300      	movs	r3, #0
}
 8010102:	4618      	mov	r0, r3
 8010104:	3710      	adds	r7, #16
 8010106:	46bd      	mov	sp, r7
 8010108:	bd80      	pop	{r7, pc}
 801010a:	bf00      	nop
 801010c:	0801b168 	.word	0x0801b168
 8010110:	0801b2cc 	.word	0x0801b2cc
 8010114:	0801b1c8 	.word	0x0801b1c8
 8010118:	0801b2d8 	.word	0x0801b2d8

0801011c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b082      	sub	sp, #8
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
 8010124:	460b      	mov	r3, r1
 8010126:	807b      	strh	r3, [r7, #2]
 8010128:	4613      	mov	r3, r2
 801012a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801012c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010130:	2b00      	cmp	r3, #0
 8010132:	da08      	bge.n	8010146 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8010134:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010138:	425b      	negs	r3, r3
 801013a:	4619      	mov	r1, r3
 801013c:	6878      	ldr	r0, [r7, #4]
 801013e:	f7ff ff9b 	bl	8010078 <pbuf_remove_header>
 8010142:	4603      	mov	r3, r0
 8010144:	e007      	b.n	8010156 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8010146:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801014a:	787a      	ldrb	r2, [r7, #1]
 801014c:	4619      	mov	r1, r3
 801014e:	6878      	ldr	r0, [r7, #4]
 8010150:	f7ff ff1a 	bl	800ff88 <pbuf_add_header_impl>
 8010154:	4603      	mov	r3, r0
  }
}
 8010156:	4618      	mov	r0, r3
 8010158:	3708      	adds	r7, #8
 801015a:	46bd      	mov	sp, r7
 801015c:	bd80      	pop	{r7, pc}

0801015e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801015e:	b580      	push	{r7, lr}
 8010160:	b082      	sub	sp, #8
 8010162:	af00      	add	r7, sp, #0
 8010164:	6078      	str	r0, [r7, #4]
 8010166:	460b      	mov	r3, r1
 8010168:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801016a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801016e:	2201      	movs	r2, #1
 8010170:	4619      	mov	r1, r3
 8010172:	6878      	ldr	r0, [r7, #4]
 8010174:	f7ff ffd2 	bl	801011c <pbuf_header_impl>
 8010178:	4603      	mov	r3, r0
}
 801017a:	4618      	mov	r0, r3
 801017c:	3708      	adds	r7, #8
 801017e:	46bd      	mov	sp, r7
 8010180:	bd80      	pop	{r7, pc}
	...

08010184 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8010184:	b580      	push	{r7, lr}
 8010186:	b088      	sub	sp, #32
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d10b      	bne.n	80101aa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d106      	bne.n	80101a6 <pbuf_free+0x22>
 8010198:	4b3b      	ldr	r3, [pc, #236]	; (8010288 <pbuf_free+0x104>)
 801019a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801019e:	493b      	ldr	r1, [pc, #236]	; (801028c <pbuf_free+0x108>)
 80101a0:	483b      	ldr	r0, [pc, #236]	; (8010290 <pbuf_free+0x10c>)
 80101a2:	f009 fc47 	bl	8019a34 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80101a6:	2300      	movs	r3, #0
 80101a8:	e069      	b.n	801027e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80101aa:	2300      	movs	r3, #0
 80101ac:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80101ae:	e062      	b.n	8010276 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80101b0:	f009 fa86 	bl	80196c0 <sys_arch_protect>
 80101b4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	7b9b      	ldrb	r3, [r3, #14]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d106      	bne.n	80101cc <pbuf_free+0x48>
 80101be:	4b32      	ldr	r3, [pc, #200]	; (8010288 <pbuf_free+0x104>)
 80101c0:	f240 22f1 	movw	r2, #753	; 0x2f1
 80101c4:	4933      	ldr	r1, [pc, #204]	; (8010294 <pbuf_free+0x110>)
 80101c6:	4832      	ldr	r0, [pc, #200]	; (8010290 <pbuf_free+0x10c>)
 80101c8:	f009 fc34 	bl	8019a34 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	7b9b      	ldrb	r3, [r3, #14]
 80101d0:	3b01      	subs	r3, #1
 80101d2:	b2da      	uxtb	r2, r3
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	739a      	strb	r2, [r3, #14]
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	7b9b      	ldrb	r3, [r3, #14]
 80101dc:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80101de:	69b8      	ldr	r0, [r7, #24]
 80101e0:	f009 fa7c 	bl	80196dc <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80101e4:	7dfb      	ldrb	r3, [r7, #23]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d143      	bne.n	8010272 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	7b1b      	ldrb	r3, [r3, #12]
 80101f4:	f003 030f 	and.w	r3, r3, #15
 80101f8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	7b5b      	ldrb	r3, [r3, #13]
 80101fe:	f003 0302 	and.w	r3, r3, #2
 8010202:	2b00      	cmp	r3, #0
 8010204:	d011      	beq.n	801022a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801020a:	68bb      	ldr	r3, [r7, #8]
 801020c:	691b      	ldr	r3, [r3, #16]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d106      	bne.n	8010220 <pbuf_free+0x9c>
 8010212:	4b1d      	ldr	r3, [pc, #116]	; (8010288 <pbuf_free+0x104>)
 8010214:	f240 22ff 	movw	r2, #767	; 0x2ff
 8010218:	491f      	ldr	r1, [pc, #124]	; (8010298 <pbuf_free+0x114>)
 801021a:	481d      	ldr	r0, [pc, #116]	; (8010290 <pbuf_free+0x10c>)
 801021c:	f009 fc0a 	bl	8019a34 <iprintf>
        pc->custom_free_function(p);
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	691b      	ldr	r3, [r3, #16]
 8010224:	6878      	ldr	r0, [r7, #4]
 8010226:	4798      	blx	r3
 8010228:	e01d      	b.n	8010266 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801022a:	7bfb      	ldrb	r3, [r7, #15]
 801022c:	2b02      	cmp	r3, #2
 801022e:	d104      	bne.n	801023a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8010230:	6879      	ldr	r1, [r7, #4]
 8010232:	200c      	movs	r0, #12
 8010234:	f7ff f902 	bl	800f43c <memp_free>
 8010238:	e015      	b.n	8010266 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801023a:	7bfb      	ldrb	r3, [r7, #15]
 801023c:	2b01      	cmp	r3, #1
 801023e:	d104      	bne.n	801024a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8010240:	6879      	ldr	r1, [r7, #4]
 8010242:	200b      	movs	r0, #11
 8010244:	f7ff f8fa 	bl	800f43c <memp_free>
 8010248:	e00d      	b.n	8010266 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801024a:	7bfb      	ldrb	r3, [r7, #15]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d103      	bne.n	8010258 <pbuf_free+0xd4>
          mem_free(p);
 8010250:	6878      	ldr	r0, [r7, #4]
 8010252:	f7fe fd3f 	bl	800ecd4 <mem_free>
 8010256:	e006      	b.n	8010266 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8010258:	4b0b      	ldr	r3, [pc, #44]	; (8010288 <pbuf_free+0x104>)
 801025a:	f240 320f 	movw	r2, #783	; 0x30f
 801025e:	490f      	ldr	r1, [pc, #60]	; (801029c <pbuf_free+0x118>)
 8010260:	480b      	ldr	r0, [pc, #44]	; (8010290 <pbuf_free+0x10c>)
 8010262:	f009 fbe7 	bl	8019a34 <iprintf>
        }
      }
      count++;
 8010266:	7ffb      	ldrb	r3, [r7, #31]
 8010268:	3301      	adds	r3, #1
 801026a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801026c:	693b      	ldr	r3, [r7, #16]
 801026e:	607b      	str	r3, [r7, #4]
 8010270:	e001      	b.n	8010276 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8010272:	2300      	movs	r3, #0
 8010274:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d199      	bne.n	80101b0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801027c:	7ffb      	ldrb	r3, [r7, #31]
}
 801027e:	4618      	mov	r0, r3
 8010280:	3720      	adds	r7, #32
 8010282:	46bd      	mov	sp, r7
 8010284:	bd80      	pop	{r7, pc}
 8010286:	bf00      	nop
 8010288:	0801b168 	.word	0x0801b168
 801028c:	0801b2cc 	.word	0x0801b2cc
 8010290:	0801b1c8 	.word	0x0801b1c8
 8010294:	0801b2f8 	.word	0x0801b2f8
 8010298:	0801b310 	.word	0x0801b310
 801029c:	0801b334 	.word	0x0801b334

080102a0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80102a0:	b480      	push	{r7}
 80102a2:	b085      	sub	sp, #20
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80102a8:	2300      	movs	r3, #0
 80102aa:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80102ac:	e005      	b.n	80102ba <pbuf_clen+0x1a>
    ++len;
 80102ae:	89fb      	ldrh	r3, [r7, #14]
 80102b0:	3301      	adds	r3, #1
 80102b2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d1f6      	bne.n	80102ae <pbuf_clen+0xe>
  }
  return len;
 80102c0:	89fb      	ldrh	r3, [r7, #14]
}
 80102c2:	4618      	mov	r0, r3
 80102c4:	3714      	adds	r7, #20
 80102c6:	46bd      	mov	sp, r7
 80102c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102cc:	4770      	bx	lr
	...

080102d0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b084      	sub	sp, #16
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d016      	beq.n	801030c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80102de:	f009 f9ef 	bl	80196c0 <sys_arch_protect>
 80102e2:	60f8      	str	r0, [r7, #12]
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	7b9b      	ldrb	r3, [r3, #14]
 80102e8:	3301      	adds	r3, #1
 80102ea:	b2da      	uxtb	r2, r3
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	739a      	strb	r2, [r3, #14]
 80102f0:	68f8      	ldr	r0, [r7, #12]
 80102f2:	f009 f9f3 	bl	80196dc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	7b9b      	ldrb	r3, [r3, #14]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d106      	bne.n	801030c <pbuf_ref+0x3c>
 80102fe:	4b05      	ldr	r3, [pc, #20]	; (8010314 <pbuf_ref+0x44>)
 8010300:	f240 3242 	movw	r2, #834	; 0x342
 8010304:	4904      	ldr	r1, [pc, #16]	; (8010318 <pbuf_ref+0x48>)
 8010306:	4805      	ldr	r0, [pc, #20]	; (801031c <pbuf_ref+0x4c>)
 8010308:	f009 fb94 	bl	8019a34 <iprintf>
  }
}
 801030c:	bf00      	nop
 801030e:	3710      	adds	r7, #16
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}
 8010314:	0801b168 	.word	0x0801b168
 8010318:	0801b348 	.word	0x0801b348
 801031c:	0801b1c8 	.word	0x0801b1c8

08010320 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b084      	sub	sp, #16
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
 8010328:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d002      	beq.n	8010336 <pbuf_cat+0x16>
 8010330:	683b      	ldr	r3, [r7, #0]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d107      	bne.n	8010346 <pbuf_cat+0x26>
 8010336:	4b20      	ldr	r3, [pc, #128]	; (80103b8 <pbuf_cat+0x98>)
 8010338:	f240 3259 	movw	r2, #857	; 0x359
 801033c:	491f      	ldr	r1, [pc, #124]	; (80103bc <pbuf_cat+0x9c>)
 801033e:	4820      	ldr	r0, [pc, #128]	; (80103c0 <pbuf_cat+0xa0>)
 8010340:	f009 fb78 	bl	8019a34 <iprintf>
 8010344:	e034      	b.n	80103b0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	60fb      	str	r3, [r7, #12]
 801034a:	e00a      	b.n	8010362 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	891a      	ldrh	r2, [r3, #8]
 8010350:	683b      	ldr	r3, [r7, #0]
 8010352:	891b      	ldrh	r3, [r3, #8]
 8010354:	4413      	add	r3, r2
 8010356:	b29a      	uxth	r2, r3
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	60fb      	str	r3, [r7, #12]
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d1f0      	bne.n	801034c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	891a      	ldrh	r2, [r3, #8]
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	895b      	ldrh	r3, [r3, #10]
 8010372:	429a      	cmp	r2, r3
 8010374:	d006      	beq.n	8010384 <pbuf_cat+0x64>
 8010376:	4b10      	ldr	r3, [pc, #64]	; (80103b8 <pbuf_cat+0x98>)
 8010378:	f240 3262 	movw	r2, #866	; 0x362
 801037c:	4911      	ldr	r1, [pc, #68]	; (80103c4 <pbuf_cat+0xa4>)
 801037e:	4810      	ldr	r0, [pc, #64]	; (80103c0 <pbuf_cat+0xa0>)
 8010380:	f009 fb58 	bl	8019a34 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d006      	beq.n	801039a <pbuf_cat+0x7a>
 801038c:	4b0a      	ldr	r3, [pc, #40]	; (80103b8 <pbuf_cat+0x98>)
 801038e:	f240 3263 	movw	r2, #867	; 0x363
 8010392:	490d      	ldr	r1, [pc, #52]	; (80103c8 <pbuf_cat+0xa8>)
 8010394:	480a      	ldr	r0, [pc, #40]	; (80103c0 <pbuf_cat+0xa0>)
 8010396:	f009 fb4d 	bl	8019a34 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	891a      	ldrh	r2, [r3, #8]
 801039e:	683b      	ldr	r3, [r7, #0]
 80103a0:	891b      	ldrh	r3, [r3, #8]
 80103a2:	4413      	add	r3, r2
 80103a4:	b29a      	uxth	r2, r3
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	683a      	ldr	r2, [r7, #0]
 80103ae:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80103b0:	3710      	adds	r7, #16
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bd80      	pop	{r7, pc}
 80103b6:	bf00      	nop
 80103b8:	0801b168 	.word	0x0801b168
 80103bc:	0801b35c 	.word	0x0801b35c
 80103c0:	0801b1c8 	.word	0x0801b1c8
 80103c4:	0801b394 	.word	0x0801b394
 80103c8:	0801b3c4 	.word	0x0801b3c4

080103cc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b082      	sub	sp, #8
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
 80103d4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80103d6:	6839      	ldr	r1, [r7, #0]
 80103d8:	6878      	ldr	r0, [r7, #4]
 80103da:	f7ff ffa1 	bl	8010320 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80103de:	6838      	ldr	r0, [r7, #0]
 80103e0:	f7ff ff76 	bl	80102d0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80103e4:	bf00      	nop
 80103e6:	3708      	adds	r7, #8
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}

080103ec <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b086      	sub	sp, #24
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
 80103f4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80103f6:	2300      	movs	r3, #0
 80103f8:	617b      	str	r3, [r7, #20]
 80103fa:	2300      	movs	r3, #0
 80103fc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d008      	beq.n	8010416 <pbuf_copy+0x2a>
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d005      	beq.n	8010416 <pbuf_copy+0x2a>
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	891a      	ldrh	r2, [r3, #8]
 801040e:	683b      	ldr	r3, [r7, #0]
 8010410:	891b      	ldrh	r3, [r3, #8]
 8010412:	429a      	cmp	r2, r3
 8010414:	d209      	bcs.n	801042a <pbuf_copy+0x3e>
 8010416:	4b57      	ldr	r3, [pc, #348]	; (8010574 <pbuf_copy+0x188>)
 8010418:	f240 32c9 	movw	r2, #969	; 0x3c9
 801041c:	4956      	ldr	r1, [pc, #344]	; (8010578 <pbuf_copy+0x18c>)
 801041e:	4857      	ldr	r0, [pc, #348]	; (801057c <pbuf_copy+0x190>)
 8010420:	f009 fb08 	bl	8019a34 <iprintf>
 8010424:	f06f 030f 	mvn.w	r3, #15
 8010428:	e09f      	b.n	801056a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	895b      	ldrh	r3, [r3, #10]
 801042e:	461a      	mov	r2, r3
 8010430:	697b      	ldr	r3, [r7, #20]
 8010432:	1ad2      	subs	r2, r2, r3
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	895b      	ldrh	r3, [r3, #10]
 8010438:	4619      	mov	r1, r3
 801043a:	693b      	ldr	r3, [r7, #16]
 801043c:	1acb      	subs	r3, r1, r3
 801043e:	429a      	cmp	r2, r3
 8010440:	d306      	bcc.n	8010450 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	895b      	ldrh	r3, [r3, #10]
 8010446:	461a      	mov	r2, r3
 8010448:	693b      	ldr	r3, [r7, #16]
 801044a:	1ad3      	subs	r3, r2, r3
 801044c:	60fb      	str	r3, [r7, #12]
 801044e:	e005      	b.n	801045c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	895b      	ldrh	r3, [r3, #10]
 8010454:	461a      	mov	r2, r3
 8010456:	697b      	ldr	r3, [r7, #20]
 8010458:	1ad3      	subs	r3, r2, r3
 801045a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	685a      	ldr	r2, [r3, #4]
 8010460:	697b      	ldr	r3, [r7, #20]
 8010462:	18d0      	adds	r0, r2, r3
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	685a      	ldr	r2, [r3, #4]
 8010468:	693b      	ldr	r3, [r7, #16]
 801046a:	4413      	add	r3, r2
 801046c:	68fa      	ldr	r2, [r7, #12]
 801046e:	4619      	mov	r1, r3
 8010470:	f009 fa6f 	bl	8019952 <memcpy>
    offset_to += len;
 8010474:	697a      	ldr	r2, [r7, #20]
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	4413      	add	r3, r2
 801047a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801047c:	693a      	ldr	r2, [r7, #16]
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	4413      	add	r3, r2
 8010482:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	895b      	ldrh	r3, [r3, #10]
 8010488:	461a      	mov	r2, r3
 801048a:	697b      	ldr	r3, [r7, #20]
 801048c:	4293      	cmp	r3, r2
 801048e:	d906      	bls.n	801049e <pbuf_copy+0xb2>
 8010490:	4b38      	ldr	r3, [pc, #224]	; (8010574 <pbuf_copy+0x188>)
 8010492:	f240 32d9 	movw	r2, #985	; 0x3d9
 8010496:	493a      	ldr	r1, [pc, #232]	; (8010580 <pbuf_copy+0x194>)
 8010498:	4838      	ldr	r0, [pc, #224]	; (801057c <pbuf_copy+0x190>)
 801049a:	f009 facb 	bl	8019a34 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801049e:	683b      	ldr	r3, [r7, #0]
 80104a0:	895b      	ldrh	r3, [r3, #10]
 80104a2:	461a      	mov	r2, r3
 80104a4:	693b      	ldr	r3, [r7, #16]
 80104a6:	4293      	cmp	r3, r2
 80104a8:	d906      	bls.n	80104b8 <pbuf_copy+0xcc>
 80104aa:	4b32      	ldr	r3, [pc, #200]	; (8010574 <pbuf_copy+0x188>)
 80104ac:	f240 32da 	movw	r2, #986	; 0x3da
 80104b0:	4934      	ldr	r1, [pc, #208]	; (8010584 <pbuf_copy+0x198>)
 80104b2:	4832      	ldr	r0, [pc, #200]	; (801057c <pbuf_copy+0x190>)
 80104b4:	f009 fabe 	bl	8019a34 <iprintf>
    if (offset_from >= p_from->len) {
 80104b8:	683b      	ldr	r3, [r7, #0]
 80104ba:	895b      	ldrh	r3, [r3, #10]
 80104bc:	461a      	mov	r2, r3
 80104be:	693b      	ldr	r3, [r7, #16]
 80104c0:	4293      	cmp	r3, r2
 80104c2:	d304      	bcc.n	80104ce <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80104c4:	2300      	movs	r3, #0
 80104c6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80104c8:	683b      	ldr	r3, [r7, #0]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	895b      	ldrh	r3, [r3, #10]
 80104d2:	461a      	mov	r2, r3
 80104d4:	697b      	ldr	r3, [r7, #20]
 80104d6:	4293      	cmp	r3, r2
 80104d8:	d114      	bne.n	8010504 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80104da:	2300      	movs	r3, #0
 80104dc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d10c      	bne.n	8010504 <pbuf_copy+0x118>
 80104ea:	683b      	ldr	r3, [r7, #0]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d009      	beq.n	8010504 <pbuf_copy+0x118>
 80104f0:	4b20      	ldr	r3, [pc, #128]	; (8010574 <pbuf_copy+0x188>)
 80104f2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80104f6:	4924      	ldr	r1, [pc, #144]	; (8010588 <pbuf_copy+0x19c>)
 80104f8:	4820      	ldr	r0, [pc, #128]	; (801057c <pbuf_copy+0x190>)
 80104fa:	f009 fa9b 	bl	8019a34 <iprintf>
 80104fe:	f06f 030f 	mvn.w	r3, #15
 8010502:	e032      	b.n	801056a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010504:	683b      	ldr	r3, [r7, #0]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d013      	beq.n	8010532 <pbuf_copy+0x146>
 801050a:	683b      	ldr	r3, [r7, #0]
 801050c:	895a      	ldrh	r2, [r3, #10]
 801050e:	683b      	ldr	r3, [r7, #0]
 8010510:	891b      	ldrh	r3, [r3, #8]
 8010512:	429a      	cmp	r2, r3
 8010514:	d10d      	bne.n	8010532 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010516:	683b      	ldr	r3, [r7, #0]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d009      	beq.n	8010532 <pbuf_copy+0x146>
 801051e:	4b15      	ldr	r3, [pc, #84]	; (8010574 <pbuf_copy+0x188>)
 8010520:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8010524:	4919      	ldr	r1, [pc, #100]	; (801058c <pbuf_copy+0x1a0>)
 8010526:	4815      	ldr	r0, [pc, #84]	; (801057c <pbuf_copy+0x190>)
 8010528:	f009 fa84 	bl	8019a34 <iprintf>
 801052c:	f06f 0305 	mvn.w	r3, #5
 8010530:	e01b      	b.n	801056a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d013      	beq.n	8010560 <pbuf_copy+0x174>
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	895a      	ldrh	r2, [r3, #10]
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	891b      	ldrh	r3, [r3, #8]
 8010540:	429a      	cmp	r2, r3
 8010542:	d10d      	bne.n	8010560 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d009      	beq.n	8010560 <pbuf_copy+0x174>
 801054c:	4b09      	ldr	r3, [pc, #36]	; (8010574 <pbuf_copy+0x188>)
 801054e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8010552:	490e      	ldr	r1, [pc, #56]	; (801058c <pbuf_copy+0x1a0>)
 8010554:	4809      	ldr	r0, [pc, #36]	; (801057c <pbuf_copy+0x190>)
 8010556:	f009 fa6d 	bl	8019a34 <iprintf>
 801055a:	f06f 0305 	mvn.w	r3, #5
 801055e:	e004      	b.n	801056a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010560:	683b      	ldr	r3, [r7, #0]
 8010562:	2b00      	cmp	r3, #0
 8010564:	f47f af61 	bne.w	801042a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010568:	2300      	movs	r3, #0
}
 801056a:	4618      	mov	r0, r3
 801056c:	3718      	adds	r7, #24
 801056e:	46bd      	mov	sp, r7
 8010570:	bd80      	pop	{r7, pc}
 8010572:	bf00      	nop
 8010574:	0801b168 	.word	0x0801b168
 8010578:	0801b410 	.word	0x0801b410
 801057c:	0801b1c8 	.word	0x0801b1c8
 8010580:	0801b440 	.word	0x0801b440
 8010584:	0801b458 	.word	0x0801b458
 8010588:	0801b474 	.word	0x0801b474
 801058c:	0801b484 	.word	0x0801b484

08010590 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b088      	sub	sp, #32
 8010594:	af00      	add	r7, sp, #0
 8010596:	60f8      	str	r0, [r7, #12]
 8010598:	60b9      	str	r1, [r7, #8]
 801059a:	4611      	mov	r1, r2
 801059c:	461a      	mov	r2, r3
 801059e:	460b      	mov	r3, r1
 80105a0:	80fb      	strh	r3, [r7, #6]
 80105a2:	4613      	mov	r3, r2
 80105a4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80105a6:	2300      	movs	r3, #0
 80105a8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80105aa:	2300      	movs	r3, #0
 80105ac:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d108      	bne.n	80105c6 <pbuf_copy_partial+0x36>
 80105b4:	4b2b      	ldr	r3, [pc, #172]	; (8010664 <pbuf_copy_partial+0xd4>)
 80105b6:	f240 420a 	movw	r2, #1034	; 0x40a
 80105ba:	492b      	ldr	r1, [pc, #172]	; (8010668 <pbuf_copy_partial+0xd8>)
 80105bc:	482b      	ldr	r0, [pc, #172]	; (801066c <pbuf_copy_partial+0xdc>)
 80105be:	f009 fa39 	bl	8019a34 <iprintf>
 80105c2:	2300      	movs	r3, #0
 80105c4:	e04a      	b.n	801065c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80105c6:	68bb      	ldr	r3, [r7, #8]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d108      	bne.n	80105de <pbuf_copy_partial+0x4e>
 80105cc:	4b25      	ldr	r3, [pc, #148]	; (8010664 <pbuf_copy_partial+0xd4>)
 80105ce:	f240 420b 	movw	r2, #1035	; 0x40b
 80105d2:	4927      	ldr	r1, [pc, #156]	; (8010670 <pbuf_copy_partial+0xe0>)
 80105d4:	4825      	ldr	r0, [pc, #148]	; (801066c <pbuf_copy_partial+0xdc>)
 80105d6:	f009 fa2d 	bl	8019a34 <iprintf>
 80105da:	2300      	movs	r3, #0
 80105dc:	e03e      	b.n	801065c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	61fb      	str	r3, [r7, #28]
 80105e2:	e034      	b.n	801064e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80105e4:	88bb      	ldrh	r3, [r7, #4]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d00a      	beq.n	8010600 <pbuf_copy_partial+0x70>
 80105ea:	69fb      	ldr	r3, [r7, #28]
 80105ec:	895b      	ldrh	r3, [r3, #10]
 80105ee:	88ba      	ldrh	r2, [r7, #4]
 80105f0:	429a      	cmp	r2, r3
 80105f2:	d305      	bcc.n	8010600 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80105f4:	69fb      	ldr	r3, [r7, #28]
 80105f6:	895b      	ldrh	r3, [r3, #10]
 80105f8:	88ba      	ldrh	r2, [r7, #4]
 80105fa:	1ad3      	subs	r3, r2, r3
 80105fc:	80bb      	strh	r3, [r7, #4]
 80105fe:	e023      	b.n	8010648 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8010600:	69fb      	ldr	r3, [r7, #28]
 8010602:	895a      	ldrh	r2, [r3, #10]
 8010604:	88bb      	ldrh	r3, [r7, #4]
 8010606:	1ad3      	subs	r3, r2, r3
 8010608:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801060a:	8b3a      	ldrh	r2, [r7, #24]
 801060c:	88fb      	ldrh	r3, [r7, #6]
 801060e:	429a      	cmp	r2, r3
 8010610:	d901      	bls.n	8010616 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8010612:	88fb      	ldrh	r3, [r7, #6]
 8010614:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8010616:	8b7b      	ldrh	r3, [r7, #26]
 8010618:	68ba      	ldr	r2, [r7, #8]
 801061a:	18d0      	adds	r0, r2, r3
 801061c:	69fb      	ldr	r3, [r7, #28]
 801061e:	685a      	ldr	r2, [r3, #4]
 8010620:	88bb      	ldrh	r3, [r7, #4]
 8010622:	4413      	add	r3, r2
 8010624:	8b3a      	ldrh	r2, [r7, #24]
 8010626:	4619      	mov	r1, r3
 8010628:	f009 f993 	bl	8019952 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801062c:	8afa      	ldrh	r2, [r7, #22]
 801062e:	8b3b      	ldrh	r3, [r7, #24]
 8010630:	4413      	add	r3, r2
 8010632:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8010634:	8b7a      	ldrh	r2, [r7, #26]
 8010636:	8b3b      	ldrh	r3, [r7, #24]
 8010638:	4413      	add	r3, r2
 801063a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 801063c:	88fa      	ldrh	r2, [r7, #6]
 801063e:	8b3b      	ldrh	r3, [r7, #24]
 8010640:	1ad3      	subs	r3, r2, r3
 8010642:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8010644:	2300      	movs	r3, #0
 8010646:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010648:	69fb      	ldr	r3, [r7, #28]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	61fb      	str	r3, [r7, #28]
 801064e:	88fb      	ldrh	r3, [r7, #6]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d002      	beq.n	801065a <pbuf_copy_partial+0xca>
 8010654:	69fb      	ldr	r3, [r7, #28]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d1c4      	bne.n	80105e4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801065a:	8afb      	ldrh	r3, [r7, #22]
}
 801065c:	4618      	mov	r0, r3
 801065e:	3720      	adds	r7, #32
 8010660:	46bd      	mov	sp, r7
 8010662:	bd80      	pop	{r7, pc}
 8010664:	0801b168 	.word	0x0801b168
 8010668:	0801b4b0 	.word	0x0801b4b0
 801066c:	0801b1c8 	.word	0x0801b1c8
 8010670:	0801b4d0 	.word	0x0801b4d0

08010674 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8010674:	b580      	push	{r7, lr}
 8010676:	b084      	sub	sp, #16
 8010678:	af00      	add	r7, sp, #0
 801067a:	4603      	mov	r3, r0
 801067c:	603a      	str	r2, [r7, #0]
 801067e:	71fb      	strb	r3, [r7, #7]
 8010680:	460b      	mov	r3, r1
 8010682:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8010684:	683b      	ldr	r3, [r7, #0]
 8010686:	8919      	ldrh	r1, [r3, #8]
 8010688:	88ba      	ldrh	r2, [r7, #4]
 801068a:	79fb      	ldrb	r3, [r7, #7]
 801068c:	4618      	mov	r0, r3
 801068e:	f7ff fa95 	bl	800fbbc <pbuf_alloc>
 8010692:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d101      	bne.n	801069e <pbuf_clone+0x2a>
    return NULL;
 801069a:	2300      	movs	r3, #0
 801069c:	e011      	b.n	80106c2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801069e:	6839      	ldr	r1, [r7, #0]
 80106a0:	68f8      	ldr	r0, [r7, #12]
 80106a2:	f7ff fea3 	bl	80103ec <pbuf_copy>
 80106a6:	4603      	mov	r3, r0
 80106a8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80106aa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d006      	beq.n	80106c0 <pbuf_clone+0x4c>
 80106b2:	4b06      	ldr	r3, [pc, #24]	; (80106cc <pbuf_clone+0x58>)
 80106b4:	f240 5224 	movw	r2, #1316	; 0x524
 80106b8:	4905      	ldr	r1, [pc, #20]	; (80106d0 <pbuf_clone+0x5c>)
 80106ba:	4806      	ldr	r0, [pc, #24]	; (80106d4 <pbuf_clone+0x60>)
 80106bc:	f009 f9ba 	bl	8019a34 <iprintf>
  return q;
 80106c0:	68fb      	ldr	r3, [r7, #12]
}
 80106c2:	4618      	mov	r0, r3
 80106c4:	3710      	adds	r7, #16
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd80      	pop	{r7, pc}
 80106ca:	bf00      	nop
 80106cc:	0801b168 	.word	0x0801b168
 80106d0:	0801b5dc 	.word	0x0801b5dc
 80106d4:	0801b1c8 	.word	0x0801b1c8

080106d8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80106dc:	f009 f9c2 	bl	8019a64 <rand>
 80106e0:	4603      	mov	r3, r0
 80106e2:	b29b      	uxth	r3, r3
 80106e4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80106e8:	b29b      	uxth	r3, r3
 80106ea:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80106ee:	b29a      	uxth	r2, r3
 80106f0:	4b01      	ldr	r3, [pc, #4]	; (80106f8 <tcp_init+0x20>)
 80106f2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80106f4:	bf00      	nop
 80106f6:	bd80      	pop	{r7, pc}
 80106f8:	24000030 	.word	0x24000030

080106fc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b082      	sub	sp, #8
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	7d1b      	ldrb	r3, [r3, #20]
 8010708:	2b01      	cmp	r3, #1
 801070a:	d105      	bne.n	8010718 <tcp_free+0x1c>
 801070c:	4b06      	ldr	r3, [pc, #24]	; (8010728 <tcp_free+0x2c>)
 801070e:	22d4      	movs	r2, #212	; 0xd4
 8010710:	4906      	ldr	r1, [pc, #24]	; (801072c <tcp_free+0x30>)
 8010712:	4807      	ldr	r0, [pc, #28]	; (8010730 <tcp_free+0x34>)
 8010714:	f009 f98e 	bl	8019a34 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8010718:	6879      	ldr	r1, [r7, #4]
 801071a:	2001      	movs	r0, #1
 801071c:	f7fe fe8e 	bl	800f43c <memp_free>
}
 8010720:	bf00      	nop
 8010722:	3708      	adds	r7, #8
 8010724:	46bd      	mov	sp, r7
 8010726:	bd80      	pop	{r7, pc}
 8010728:	0801b668 	.word	0x0801b668
 801072c:	0801b698 	.word	0x0801b698
 8010730:	0801b6ac 	.word	0x0801b6ac

08010734 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b082      	sub	sp, #8
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	7d1b      	ldrb	r3, [r3, #20]
 8010740:	2b01      	cmp	r3, #1
 8010742:	d105      	bne.n	8010750 <tcp_free_listen+0x1c>
 8010744:	4b06      	ldr	r3, [pc, #24]	; (8010760 <tcp_free_listen+0x2c>)
 8010746:	22df      	movs	r2, #223	; 0xdf
 8010748:	4906      	ldr	r1, [pc, #24]	; (8010764 <tcp_free_listen+0x30>)
 801074a:	4807      	ldr	r0, [pc, #28]	; (8010768 <tcp_free_listen+0x34>)
 801074c:	f009 f972 	bl	8019a34 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8010750:	6879      	ldr	r1, [r7, #4]
 8010752:	2002      	movs	r0, #2
 8010754:	f7fe fe72 	bl	800f43c <memp_free>
}
 8010758:	bf00      	nop
 801075a:	3708      	adds	r7, #8
 801075c:	46bd      	mov	sp, r7
 801075e:	bd80      	pop	{r7, pc}
 8010760:	0801b668 	.word	0x0801b668
 8010764:	0801b6d4 	.word	0x0801b6d4
 8010768:	0801b6ac 	.word	0x0801b6ac

0801076c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801076c:	b580      	push	{r7, lr}
 801076e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8010770:	f001 f85c 	bl	801182c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8010774:	4b07      	ldr	r3, [pc, #28]	; (8010794 <tcp_tmr+0x28>)
 8010776:	781b      	ldrb	r3, [r3, #0]
 8010778:	3301      	adds	r3, #1
 801077a:	b2da      	uxtb	r2, r3
 801077c:	4b05      	ldr	r3, [pc, #20]	; (8010794 <tcp_tmr+0x28>)
 801077e:	701a      	strb	r2, [r3, #0]
 8010780:	4b04      	ldr	r3, [pc, #16]	; (8010794 <tcp_tmr+0x28>)
 8010782:	781b      	ldrb	r3, [r3, #0]
 8010784:	f003 0301 	and.w	r3, r3, #1
 8010788:	2b00      	cmp	r3, #0
 801078a:	d001      	beq.n	8010790 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801078c:	f000 fd0e 	bl	80111ac <tcp_slowtmr>
  }
}
 8010790:	bf00      	nop
 8010792:	bd80      	pop	{r7, pc}
 8010794:	24004121 	.word	0x24004121

08010798 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b084      	sub	sp, #16
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
 80107a0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80107a2:	683b      	ldr	r3, [r7, #0]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d105      	bne.n	80107b4 <tcp_remove_listener+0x1c>
 80107a8:	4b0d      	ldr	r3, [pc, #52]	; (80107e0 <tcp_remove_listener+0x48>)
 80107aa:	22ff      	movs	r2, #255	; 0xff
 80107ac:	490d      	ldr	r1, [pc, #52]	; (80107e4 <tcp_remove_listener+0x4c>)
 80107ae:	480e      	ldr	r0, [pc, #56]	; (80107e8 <tcp_remove_listener+0x50>)
 80107b0:	f009 f940 	bl	8019a34 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	60fb      	str	r3, [r7, #12]
 80107b8:	e00a      	b.n	80107d0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80107be:	683a      	ldr	r2, [r7, #0]
 80107c0:	429a      	cmp	r2, r3
 80107c2:	d102      	bne.n	80107ca <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	2200      	movs	r2, #0
 80107c8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	68db      	ldr	r3, [r3, #12]
 80107ce:	60fb      	str	r3, [r7, #12]
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d1f1      	bne.n	80107ba <tcp_remove_listener+0x22>
    }
  }
}
 80107d6:	bf00      	nop
 80107d8:	bf00      	nop
 80107da:	3710      	adds	r7, #16
 80107dc:	46bd      	mov	sp, r7
 80107de:	bd80      	pop	{r7, pc}
 80107e0:	0801b668 	.word	0x0801b668
 80107e4:	0801b6f0 	.word	0x0801b6f0
 80107e8:	0801b6ac 	.word	0x0801b6ac

080107ec <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b084      	sub	sp, #16
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d106      	bne.n	8010808 <tcp_listen_closed+0x1c>
 80107fa:	4b14      	ldr	r3, [pc, #80]	; (801084c <tcp_listen_closed+0x60>)
 80107fc:	f240 1211 	movw	r2, #273	; 0x111
 8010800:	4913      	ldr	r1, [pc, #76]	; (8010850 <tcp_listen_closed+0x64>)
 8010802:	4814      	ldr	r0, [pc, #80]	; (8010854 <tcp_listen_closed+0x68>)
 8010804:	f009 f916 	bl	8019a34 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	7d1b      	ldrb	r3, [r3, #20]
 801080c:	2b01      	cmp	r3, #1
 801080e:	d006      	beq.n	801081e <tcp_listen_closed+0x32>
 8010810:	4b0e      	ldr	r3, [pc, #56]	; (801084c <tcp_listen_closed+0x60>)
 8010812:	f44f 7289 	mov.w	r2, #274	; 0x112
 8010816:	4910      	ldr	r1, [pc, #64]	; (8010858 <tcp_listen_closed+0x6c>)
 8010818:	480e      	ldr	r0, [pc, #56]	; (8010854 <tcp_listen_closed+0x68>)
 801081a:	f009 f90b 	bl	8019a34 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801081e:	2301      	movs	r3, #1
 8010820:	60fb      	str	r3, [r7, #12]
 8010822:	e00b      	b.n	801083c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8010824:	4a0d      	ldr	r2, [pc, #52]	; (801085c <tcp_listen_closed+0x70>)
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	6879      	ldr	r1, [r7, #4]
 8010830:	4618      	mov	r0, r3
 8010832:	f7ff ffb1 	bl	8010798 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	3301      	adds	r3, #1
 801083a:	60fb      	str	r3, [r7, #12]
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	2b03      	cmp	r3, #3
 8010840:	d9f0      	bls.n	8010824 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8010842:	bf00      	nop
 8010844:	bf00      	nop
 8010846:	3710      	adds	r7, #16
 8010848:	46bd      	mov	sp, r7
 801084a:	bd80      	pop	{r7, pc}
 801084c:	0801b668 	.word	0x0801b668
 8010850:	0801b718 	.word	0x0801b718
 8010854:	0801b6ac 	.word	0x0801b6ac
 8010858:	0801b724 	.word	0x0801b724
 801085c:	0801de98 	.word	0x0801de98

08010860 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8010860:	b5b0      	push	{r4, r5, r7, lr}
 8010862:	b088      	sub	sp, #32
 8010864:	af04      	add	r7, sp, #16
 8010866:	6078      	str	r0, [r7, #4]
 8010868:	460b      	mov	r3, r1
 801086a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d106      	bne.n	8010880 <tcp_close_shutdown+0x20>
 8010872:	4b63      	ldr	r3, [pc, #396]	; (8010a00 <tcp_close_shutdown+0x1a0>)
 8010874:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8010878:	4962      	ldr	r1, [pc, #392]	; (8010a04 <tcp_close_shutdown+0x1a4>)
 801087a:	4863      	ldr	r0, [pc, #396]	; (8010a08 <tcp_close_shutdown+0x1a8>)
 801087c:	f009 f8da 	bl	8019a34 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8010880:	78fb      	ldrb	r3, [r7, #3]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d066      	beq.n	8010954 <tcp_close_shutdown+0xf4>
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	7d1b      	ldrb	r3, [r3, #20]
 801088a:	2b04      	cmp	r3, #4
 801088c:	d003      	beq.n	8010896 <tcp_close_shutdown+0x36>
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	7d1b      	ldrb	r3, [r3, #20]
 8010892:	2b07      	cmp	r3, #7
 8010894:	d15e      	bne.n	8010954 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801089a:	2b00      	cmp	r3, #0
 801089c:	d104      	bne.n	80108a8 <tcp_close_shutdown+0x48>
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80108a2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80108a6:	d055      	beq.n	8010954 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	8b5b      	ldrh	r3, [r3, #26]
 80108ac:	f003 0310 	and.w	r3, r3, #16
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d106      	bne.n	80108c2 <tcp_close_shutdown+0x62>
 80108b4:	4b52      	ldr	r3, [pc, #328]	; (8010a00 <tcp_close_shutdown+0x1a0>)
 80108b6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80108ba:	4954      	ldr	r1, [pc, #336]	; (8010a0c <tcp_close_shutdown+0x1ac>)
 80108bc:	4852      	ldr	r0, [pc, #328]	; (8010a08 <tcp_close_shutdown+0x1a8>)
 80108be:	f009 f8b9 	bl	8019a34 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80108ca:	687d      	ldr	r5, [r7, #4]
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	3304      	adds	r3, #4
 80108d0:	687a      	ldr	r2, [r7, #4]
 80108d2:	8ad2      	ldrh	r2, [r2, #22]
 80108d4:	6879      	ldr	r1, [r7, #4]
 80108d6:	8b09      	ldrh	r1, [r1, #24]
 80108d8:	9102      	str	r1, [sp, #8]
 80108da:	9201      	str	r2, [sp, #4]
 80108dc:	9300      	str	r3, [sp, #0]
 80108de:	462b      	mov	r3, r5
 80108e0:	4622      	mov	r2, r4
 80108e2:	4601      	mov	r1, r0
 80108e4:	6878      	ldr	r0, [r7, #4]
 80108e6:	f005 fd85 	bl	80163f4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80108ea:	6878      	ldr	r0, [r7, #4]
 80108ec:	f001 fb66 	bl	8011fbc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80108f0:	4b47      	ldr	r3, [pc, #284]	; (8010a10 <tcp_close_shutdown+0x1b0>)
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	687a      	ldr	r2, [r7, #4]
 80108f6:	429a      	cmp	r2, r3
 80108f8:	d105      	bne.n	8010906 <tcp_close_shutdown+0xa6>
 80108fa:	4b45      	ldr	r3, [pc, #276]	; (8010a10 <tcp_close_shutdown+0x1b0>)
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	68db      	ldr	r3, [r3, #12]
 8010900:	4a43      	ldr	r2, [pc, #268]	; (8010a10 <tcp_close_shutdown+0x1b0>)
 8010902:	6013      	str	r3, [r2, #0]
 8010904:	e013      	b.n	801092e <tcp_close_shutdown+0xce>
 8010906:	4b42      	ldr	r3, [pc, #264]	; (8010a10 <tcp_close_shutdown+0x1b0>)
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	60fb      	str	r3, [r7, #12]
 801090c:	e00c      	b.n	8010928 <tcp_close_shutdown+0xc8>
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	68db      	ldr	r3, [r3, #12]
 8010912:	687a      	ldr	r2, [r7, #4]
 8010914:	429a      	cmp	r2, r3
 8010916:	d104      	bne.n	8010922 <tcp_close_shutdown+0xc2>
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	68da      	ldr	r2, [r3, #12]
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	60da      	str	r2, [r3, #12]
 8010920:	e005      	b.n	801092e <tcp_close_shutdown+0xce>
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	68db      	ldr	r3, [r3, #12]
 8010926:	60fb      	str	r3, [r7, #12]
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d1ef      	bne.n	801090e <tcp_close_shutdown+0xae>
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	2200      	movs	r2, #0
 8010932:	60da      	str	r2, [r3, #12]
 8010934:	4b37      	ldr	r3, [pc, #220]	; (8010a14 <tcp_close_shutdown+0x1b4>)
 8010936:	2201      	movs	r2, #1
 8010938:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801093a:	4b37      	ldr	r3, [pc, #220]	; (8010a18 <tcp_close_shutdown+0x1b8>)
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	687a      	ldr	r2, [r7, #4]
 8010940:	429a      	cmp	r2, r3
 8010942:	d102      	bne.n	801094a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8010944:	f003 fffa 	bl	801493c <tcp_trigger_input_pcb_close>
 8010948:	e002      	b.n	8010950 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801094a:	6878      	ldr	r0, [r7, #4]
 801094c:	f7ff fed6 	bl	80106fc <tcp_free>
      }
      return ERR_OK;
 8010950:	2300      	movs	r3, #0
 8010952:	e050      	b.n	80109f6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	7d1b      	ldrb	r3, [r3, #20]
 8010958:	2b02      	cmp	r3, #2
 801095a:	d03b      	beq.n	80109d4 <tcp_close_shutdown+0x174>
 801095c:	2b02      	cmp	r3, #2
 801095e:	dc44      	bgt.n	80109ea <tcp_close_shutdown+0x18a>
 8010960:	2b00      	cmp	r3, #0
 8010962:	d002      	beq.n	801096a <tcp_close_shutdown+0x10a>
 8010964:	2b01      	cmp	r3, #1
 8010966:	d02a      	beq.n	80109be <tcp_close_shutdown+0x15e>
 8010968:	e03f      	b.n	80109ea <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	8adb      	ldrh	r3, [r3, #22]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d021      	beq.n	80109b6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010972:	4b2a      	ldr	r3, [pc, #168]	; (8010a1c <tcp_close_shutdown+0x1bc>)
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	687a      	ldr	r2, [r7, #4]
 8010978:	429a      	cmp	r2, r3
 801097a:	d105      	bne.n	8010988 <tcp_close_shutdown+0x128>
 801097c:	4b27      	ldr	r3, [pc, #156]	; (8010a1c <tcp_close_shutdown+0x1bc>)
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	68db      	ldr	r3, [r3, #12]
 8010982:	4a26      	ldr	r2, [pc, #152]	; (8010a1c <tcp_close_shutdown+0x1bc>)
 8010984:	6013      	str	r3, [r2, #0]
 8010986:	e013      	b.n	80109b0 <tcp_close_shutdown+0x150>
 8010988:	4b24      	ldr	r3, [pc, #144]	; (8010a1c <tcp_close_shutdown+0x1bc>)
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	60bb      	str	r3, [r7, #8]
 801098e:	e00c      	b.n	80109aa <tcp_close_shutdown+0x14a>
 8010990:	68bb      	ldr	r3, [r7, #8]
 8010992:	68db      	ldr	r3, [r3, #12]
 8010994:	687a      	ldr	r2, [r7, #4]
 8010996:	429a      	cmp	r2, r3
 8010998:	d104      	bne.n	80109a4 <tcp_close_shutdown+0x144>
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	68da      	ldr	r2, [r3, #12]
 801099e:	68bb      	ldr	r3, [r7, #8]
 80109a0:	60da      	str	r2, [r3, #12]
 80109a2:	e005      	b.n	80109b0 <tcp_close_shutdown+0x150>
 80109a4:	68bb      	ldr	r3, [r7, #8]
 80109a6:	68db      	ldr	r3, [r3, #12]
 80109a8:	60bb      	str	r3, [r7, #8]
 80109aa:	68bb      	ldr	r3, [r7, #8]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d1ef      	bne.n	8010990 <tcp_close_shutdown+0x130>
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	2200      	movs	r2, #0
 80109b4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80109b6:	6878      	ldr	r0, [r7, #4]
 80109b8:	f7ff fea0 	bl	80106fc <tcp_free>
      break;
 80109bc:	e01a      	b.n	80109f4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80109be:	6878      	ldr	r0, [r7, #4]
 80109c0:	f7ff ff14 	bl	80107ec <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80109c4:	6879      	ldr	r1, [r7, #4]
 80109c6:	4816      	ldr	r0, [pc, #88]	; (8010a20 <tcp_close_shutdown+0x1c0>)
 80109c8:	f001 fb48 	bl	801205c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80109cc:	6878      	ldr	r0, [r7, #4]
 80109ce:	f7ff feb1 	bl	8010734 <tcp_free_listen>
      break;
 80109d2:	e00f      	b.n	80109f4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80109d4:	6879      	ldr	r1, [r7, #4]
 80109d6:	480e      	ldr	r0, [pc, #56]	; (8010a10 <tcp_close_shutdown+0x1b0>)
 80109d8:	f001 fb40 	bl	801205c <tcp_pcb_remove>
 80109dc:	4b0d      	ldr	r3, [pc, #52]	; (8010a14 <tcp_close_shutdown+0x1b4>)
 80109de:	2201      	movs	r2, #1
 80109e0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80109e2:	6878      	ldr	r0, [r7, #4]
 80109e4:	f7ff fe8a 	bl	80106fc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80109e8:	e004      	b.n	80109f4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80109ea:	6878      	ldr	r0, [r7, #4]
 80109ec:	f000 f81a 	bl	8010a24 <tcp_close_shutdown_fin>
 80109f0:	4603      	mov	r3, r0
 80109f2:	e000      	b.n	80109f6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80109f4:	2300      	movs	r3, #0
}
 80109f6:	4618      	mov	r0, r3
 80109f8:	3710      	adds	r7, #16
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bdb0      	pop	{r4, r5, r7, pc}
 80109fe:	bf00      	nop
 8010a00:	0801b668 	.word	0x0801b668
 8010a04:	0801b73c 	.word	0x0801b73c
 8010a08:	0801b6ac 	.word	0x0801b6ac
 8010a0c:	0801b75c 	.word	0x0801b75c
 8010a10:	24007864 	.word	0x24007864
 8010a14:	24007860 	.word	0x24007860
 8010a18:	24007878 	.word	0x24007878
 8010a1c:	24007870 	.word	0x24007870
 8010a20:	2400786c 	.word	0x2400786c

08010a24 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b084      	sub	sp, #16
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d106      	bne.n	8010a40 <tcp_close_shutdown_fin+0x1c>
 8010a32:	4b2e      	ldr	r3, [pc, #184]	; (8010aec <tcp_close_shutdown_fin+0xc8>)
 8010a34:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8010a38:	492d      	ldr	r1, [pc, #180]	; (8010af0 <tcp_close_shutdown_fin+0xcc>)
 8010a3a:	482e      	ldr	r0, [pc, #184]	; (8010af4 <tcp_close_shutdown_fin+0xd0>)
 8010a3c:	f008 fffa 	bl	8019a34 <iprintf>

  switch (pcb->state) {
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	7d1b      	ldrb	r3, [r3, #20]
 8010a44:	2b07      	cmp	r3, #7
 8010a46:	d020      	beq.n	8010a8a <tcp_close_shutdown_fin+0x66>
 8010a48:	2b07      	cmp	r3, #7
 8010a4a:	dc2b      	bgt.n	8010aa4 <tcp_close_shutdown_fin+0x80>
 8010a4c:	2b03      	cmp	r3, #3
 8010a4e:	d002      	beq.n	8010a56 <tcp_close_shutdown_fin+0x32>
 8010a50:	2b04      	cmp	r3, #4
 8010a52:	d00d      	beq.n	8010a70 <tcp_close_shutdown_fin+0x4c>
 8010a54:	e026      	b.n	8010aa4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8010a56:	6878      	ldr	r0, [r7, #4]
 8010a58:	f004 fdda 	bl	8015610 <tcp_send_fin>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d11f      	bne.n	8010aa8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	2205      	movs	r2, #5
 8010a6c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010a6e:	e01b      	b.n	8010aa8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8010a70:	6878      	ldr	r0, [r7, #4]
 8010a72:	f004 fdcd 	bl	8015610 <tcp_send_fin>
 8010a76:	4603      	mov	r3, r0
 8010a78:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d114      	bne.n	8010aac <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	2205      	movs	r2, #5
 8010a86:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010a88:	e010      	b.n	8010aac <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8010a8a:	6878      	ldr	r0, [r7, #4]
 8010a8c:	f004 fdc0 	bl	8015610 <tcp_send_fin>
 8010a90:	4603      	mov	r3, r0
 8010a92:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d109      	bne.n	8010ab0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	2209      	movs	r2, #9
 8010aa0:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010aa2:	e005      	b.n	8010ab0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	e01c      	b.n	8010ae2 <tcp_close_shutdown_fin+0xbe>
      break;
 8010aa8:	bf00      	nop
 8010aaa:	e002      	b.n	8010ab2 <tcp_close_shutdown_fin+0x8e>
      break;
 8010aac:	bf00      	nop
 8010aae:	e000      	b.n	8010ab2 <tcp_close_shutdown_fin+0x8e>
      break;
 8010ab0:	bf00      	nop
  }

  if (err == ERR_OK) {
 8010ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d103      	bne.n	8010ac2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8010aba:	6878      	ldr	r0, [r7, #4]
 8010abc:	f004 fee6 	bl	801588c <tcp_output>
 8010ac0:	e00d      	b.n	8010ade <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8010ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010aca:	d108      	bne.n	8010ade <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	8b5b      	ldrh	r3, [r3, #26]
 8010ad0:	f043 0308 	orr.w	r3, r3, #8
 8010ad4:	b29a      	uxth	r2, r3
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8010ada:	2300      	movs	r3, #0
 8010adc:	e001      	b.n	8010ae2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8010ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	3710      	adds	r7, #16
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	bd80      	pop	{r7, pc}
 8010aea:	bf00      	nop
 8010aec:	0801b668 	.word	0x0801b668
 8010af0:	0801b718 	.word	0x0801b718
 8010af4:	0801b6ac 	.word	0x0801b6ac

08010af8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b082      	sub	sp, #8
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d109      	bne.n	8010b1a <tcp_close+0x22>
 8010b06:	4b0f      	ldr	r3, [pc, #60]	; (8010b44 <tcp_close+0x4c>)
 8010b08:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8010b0c:	490e      	ldr	r1, [pc, #56]	; (8010b48 <tcp_close+0x50>)
 8010b0e:	480f      	ldr	r0, [pc, #60]	; (8010b4c <tcp_close+0x54>)
 8010b10:	f008 ff90 	bl	8019a34 <iprintf>
 8010b14:	f06f 030f 	mvn.w	r3, #15
 8010b18:	e00f      	b.n	8010b3a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	7d1b      	ldrb	r3, [r3, #20]
 8010b1e:	2b01      	cmp	r3, #1
 8010b20:	d006      	beq.n	8010b30 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	8b5b      	ldrh	r3, [r3, #26]
 8010b26:	f043 0310 	orr.w	r3, r3, #16
 8010b2a:	b29a      	uxth	r2, r3
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8010b30:	2101      	movs	r1, #1
 8010b32:	6878      	ldr	r0, [r7, #4]
 8010b34:	f7ff fe94 	bl	8010860 <tcp_close_shutdown>
 8010b38:	4603      	mov	r3, r0
}
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	3708      	adds	r7, #8
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	bd80      	pop	{r7, pc}
 8010b42:	bf00      	nop
 8010b44:	0801b668 	.word	0x0801b668
 8010b48:	0801b778 	.word	0x0801b778
 8010b4c:	0801b6ac 	.word	0x0801b6ac

08010b50 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b08e      	sub	sp, #56	; 0x38
 8010b54:	af04      	add	r7, sp, #16
 8010b56:	6078      	str	r0, [r7, #4]
 8010b58:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d107      	bne.n	8010b70 <tcp_abandon+0x20>
 8010b60:	4b52      	ldr	r3, [pc, #328]	; (8010cac <tcp_abandon+0x15c>)
 8010b62:	f240 223d 	movw	r2, #573	; 0x23d
 8010b66:	4952      	ldr	r1, [pc, #328]	; (8010cb0 <tcp_abandon+0x160>)
 8010b68:	4852      	ldr	r0, [pc, #328]	; (8010cb4 <tcp_abandon+0x164>)
 8010b6a:	f008 ff63 	bl	8019a34 <iprintf>
 8010b6e:	e099      	b.n	8010ca4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	7d1b      	ldrb	r3, [r3, #20]
 8010b74:	2b01      	cmp	r3, #1
 8010b76:	d106      	bne.n	8010b86 <tcp_abandon+0x36>
 8010b78:	4b4c      	ldr	r3, [pc, #304]	; (8010cac <tcp_abandon+0x15c>)
 8010b7a:	f44f 7210 	mov.w	r2, #576	; 0x240
 8010b7e:	494e      	ldr	r1, [pc, #312]	; (8010cb8 <tcp_abandon+0x168>)
 8010b80:	484c      	ldr	r0, [pc, #304]	; (8010cb4 <tcp_abandon+0x164>)
 8010b82:	f008 ff57 	bl	8019a34 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	7d1b      	ldrb	r3, [r3, #20]
 8010b8a:	2b0a      	cmp	r3, #10
 8010b8c:	d107      	bne.n	8010b9e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8010b8e:	6879      	ldr	r1, [r7, #4]
 8010b90:	484a      	ldr	r0, [pc, #296]	; (8010cbc <tcp_abandon+0x16c>)
 8010b92:	f001 fa63 	bl	801205c <tcp_pcb_remove>
    tcp_free(pcb);
 8010b96:	6878      	ldr	r0, [r7, #4]
 8010b98:	f7ff fdb0 	bl	80106fc <tcp_free>
 8010b9c:	e082      	b.n	8010ca4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010baa:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bb0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010bb8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	691b      	ldr	r3, [r3, #16]
 8010bbe:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	7d1b      	ldrb	r3, [r3, #20]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d126      	bne.n	8010c16 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	8adb      	ldrh	r3, [r3, #22]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d02e      	beq.n	8010c2e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010bd0:	4b3b      	ldr	r3, [pc, #236]	; (8010cc0 <tcp_abandon+0x170>)
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	687a      	ldr	r2, [r7, #4]
 8010bd6:	429a      	cmp	r2, r3
 8010bd8:	d105      	bne.n	8010be6 <tcp_abandon+0x96>
 8010bda:	4b39      	ldr	r3, [pc, #228]	; (8010cc0 <tcp_abandon+0x170>)
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	68db      	ldr	r3, [r3, #12]
 8010be0:	4a37      	ldr	r2, [pc, #220]	; (8010cc0 <tcp_abandon+0x170>)
 8010be2:	6013      	str	r3, [r2, #0]
 8010be4:	e013      	b.n	8010c0e <tcp_abandon+0xbe>
 8010be6:	4b36      	ldr	r3, [pc, #216]	; (8010cc0 <tcp_abandon+0x170>)
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	61fb      	str	r3, [r7, #28]
 8010bec:	e00c      	b.n	8010c08 <tcp_abandon+0xb8>
 8010bee:	69fb      	ldr	r3, [r7, #28]
 8010bf0:	68db      	ldr	r3, [r3, #12]
 8010bf2:	687a      	ldr	r2, [r7, #4]
 8010bf4:	429a      	cmp	r2, r3
 8010bf6:	d104      	bne.n	8010c02 <tcp_abandon+0xb2>
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	68da      	ldr	r2, [r3, #12]
 8010bfc:	69fb      	ldr	r3, [r7, #28]
 8010bfe:	60da      	str	r2, [r3, #12]
 8010c00:	e005      	b.n	8010c0e <tcp_abandon+0xbe>
 8010c02:	69fb      	ldr	r3, [r7, #28]
 8010c04:	68db      	ldr	r3, [r3, #12]
 8010c06:	61fb      	str	r3, [r7, #28]
 8010c08:	69fb      	ldr	r3, [r7, #28]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d1ef      	bne.n	8010bee <tcp_abandon+0x9e>
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	2200      	movs	r2, #0
 8010c12:	60da      	str	r2, [r3, #12]
 8010c14:	e00b      	b.n	8010c2e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8010c16:	683b      	ldr	r3, [r7, #0]
 8010c18:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	8adb      	ldrh	r3, [r3, #22]
 8010c1e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010c20:	6879      	ldr	r1, [r7, #4]
 8010c22:	4828      	ldr	r0, [pc, #160]	; (8010cc4 <tcp_abandon+0x174>)
 8010c24:	f001 fa1a 	bl	801205c <tcp_pcb_remove>
 8010c28:	4b27      	ldr	r3, [pc, #156]	; (8010cc8 <tcp_abandon+0x178>)
 8010c2a:	2201      	movs	r2, #1
 8010c2c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d004      	beq.n	8010c40 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	f000 fed6 	bl	80119ec <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d004      	beq.n	8010c52 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	f000 fecd 	bl	80119ec <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d004      	beq.n	8010c64 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f000 fec4 	bl	80119ec <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8010c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d00e      	beq.n	8010c88 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8010c6a:	6879      	ldr	r1, [r7, #4]
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	3304      	adds	r3, #4
 8010c70:	687a      	ldr	r2, [r7, #4]
 8010c72:	8b12      	ldrh	r2, [r2, #24]
 8010c74:	9202      	str	r2, [sp, #8]
 8010c76:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010c78:	9201      	str	r2, [sp, #4]
 8010c7a:	9300      	str	r3, [sp, #0]
 8010c7c:	460b      	mov	r3, r1
 8010c7e:	697a      	ldr	r2, [r7, #20]
 8010c80:	69b9      	ldr	r1, [r7, #24]
 8010c82:	6878      	ldr	r0, [r7, #4]
 8010c84:	f005 fbb6 	bl	80163f4 <tcp_rst>
    }
    last_state = pcb->state;
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	7d1b      	ldrb	r3, [r3, #20]
 8010c8c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8010c8e:	6878      	ldr	r0, [r7, #4]
 8010c90:	f7ff fd34 	bl	80106fc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8010c94:	693b      	ldr	r3, [r7, #16]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d004      	beq.n	8010ca4 <tcp_abandon+0x154>
 8010c9a:	693b      	ldr	r3, [r7, #16]
 8010c9c:	f06f 010c 	mvn.w	r1, #12
 8010ca0:	68f8      	ldr	r0, [r7, #12]
 8010ca2:	4798      	blx	r3
  }
}
 8010ca4:	3728      	adds	r7, #40	; 0x28
 8010ca6:	46bd      	mov	sp, r7
 8010ca8:	bd80      	pop	{r7, pc}
 8010caa:	bf00      	nop
 8010cac:	0801b668 	.word	0x0801b668
 8010cb0:	0801b7ac 	.word	0x0801b7ac
 8010cb4:	0801b6ac 	.word	0x0801b6ac
 8010cb8:	0801b7c8 	.word	0x0801b7c8
 8010cbc:	24007874 	.word	0x24007874
 8010cc0:	24007870 	.word	0x24007870
 8010cc4:	24007864 	.word	0x24007864
 8010cc8:	24007860 	.word	0x24007860

08010ccc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	b082      	sub	sp, #8
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8010cd4:	2101      	movs	r1, #1
 8010cd6:	6878      	ldr	r0, [r7, #4]
 8010cd8:	f7ff ff3a 	bl	8010b50 <tcp_abandon>
}
 8010cdc:	bf00      	nop
 8010cde:	3708      	adds	r7, #8
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	bd80      	pop	{r7, pc}

08010ce4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b088      	sub	sp, #32
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	60f8      	str	r0, [r7, #12]
 8010cec:	60b9      	str	r1, [r7, #8]
 8010cee:	4613      	mov	r3, r2
 8010cf0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8010cf2:	2304      	movs	r3, #4
 8010cf4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010cf6:	68bb      	ldr	r3, [r7, #8]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d101      	bne.n	8010d00 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8010cfc:	4b3e      	ldr	r3, [pc, #248]	; (8010df8 <tcp_bind+0x114>)
 8010cfe:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d109      	bne.n	8010d1a <tcp_bind+0x36>
 8010d06:	4b3d      	ldr	r3, [pc, #244]	; (8010dfc <tcp_bind+0x118>)
 8010d08:	f240 22a9 	movw	r2, #681	; 0x2a9
 8010d0c:	493c      	ldr	r1, [pc, #240]	; (8010e00 <tcp_bind+0x11c>)
 8010d0e:	483d      	ldr	r0, [pc, #244]	; (8010e04 <tcp_bind+0x120>)
 8010d10:	f008 fe90 	bl	8019a34 <iprintf>
 8010d14:	f06f 030f 	mvn.w	r3, #15
 8010d18:	e06a      	b.n	8010df0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	7d1b      	ldrb	r3, [r3, #20]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d009      	beq.n	8010d36 <tcp_bind+0x52>
 8010d22:	4b36      	ldr	r3, [pc, #216]	; (8010dfc <tcp_bind+0x118>)
 8010d24:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010d28:	4937      	ldr	r1, [pc, #220]	; (8010e08 <tcp_bind+0x124>)
 8010d2a:	4836      	ldr	r0, [pc, #216]	; (8010e04 <tcp_bind+0x120>)
 8010d2c:	f008 fe82 	bl	8019a34 <iprintf>
 8010d30:	f06f 0305 	mvn.w	r3, #5
 8010d34:	e05c      	b.n	8010df0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8010d36:	88fb      	ldrh	r3, [r7, #6]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d109      	bne.n	8010d50 <tcp_bind+0x6c>
    port = tcp_new_port();
 8010d3c:	f000 f9f0 	bl	8011120 <tcp_new_port>
 8010d40:	4603      	mov	r3, r0
 8010d42:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8010d44:	88fb      	ldrh	r3, [r7, #6]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d135      	bne.n	8010db6 <tcp_bind+0xd2>
      return ERR_BUF;
 8010d4a:	f06f 0301 	mvn.w	r3, #1
 8010d4e:	e04f      	b.n	8010df0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8010d50:	2300      	movs	r3, #0
 8010d52:	61fb      	str	r3, [r7, #28]
 8010d54:	e02b      	b.n	8010dae <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8010d56:	4a2d      	ldr	r2, [pc, #180]	; (8010e0c <tcp_bind+0x128>)
 8010d58:	69fb      	ldr	r3, [r7, #28]
 8010d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	61bb      	str	r3, [r7, #24]
 8010d62:	e01e      	b.n	8010da2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8010d64:	69bb      	ldr	r3, [r7, #24]
 8010d66:	8adb      	ldrh	r3, [r3, #22]
 8010d68:	88fa      	ldrh	r2, [r7, #6]
 8010d6a:	429a      	cmp	r2, r3
 8010d6c:	d116      	bne.n	8010d9c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8010d6e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d010      	beq.n	8010d96 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8010d74:	69bb      	ldr	r3, [r7, #24]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d00c      	beq.n	8010d96 <tcp_bind+0xb2>
 8010d7c:	68bb      	ldr	r3, [r7, #8]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d009      	beq.n	8010d96 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8010d82:	68bb      	ldr	r3, [r7, #8]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d005      	beq.n	8010d96 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8010d8a:	69bb      	ldr	r3, [r7, #24]
 8010d8c:	681a      	ldr	r2, [r3, #0]
 8010d8e:	68bb      	ldr	r3, [r7, #8]
 8010d90:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8010d92:	429a      	cmp	r2, r3
 8010d94:	d102      	bne.n	8010d9c <tcp_bind+0xb8>
              return ERR_USE;
 8010d96:	f06f 0307 	mvn.w	r3, #7
 8010d9a:	e029      	b.n	8010df0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8010d9c:	69bb      	ldr	r3, [r7, #24]
 8010d9e:	68db      	ldr	r3, [r3, #12]
 8010da0:	61bb      	str	r3, [r7, #24]
 8010da2:	69bb      	ldr	r3, [r7, #24]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d1dd      	bne.n	8010d64 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8010da8:	69fb      	ldr	r3, [r7, #28]
 8010daa:	3301      	adds	r3, #1
 8010dac:	61fb      	str	r3, [r7, #28]
 8010dae:	69fa      	ldr	r2, [r7, #28]
 8010db0:	697b      	ldr	r3, [r7, #20]
 8010db2:	429a      	cmp	r2, r3
 8010db4:	dbcf      	blt.n	8010d56 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8010db6:	68bb      	ldr	r3, [r7, #8]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d00c      	beq.n	8010dd6 <tcp_bind+0xf2>
 8010dbc:	68bb      	ldr	r3, [r7, #8]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d008      	beq.n	8010dd6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8010dc4:	68bb      	ldr	r3, [r7, #8]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d002      	beq.n	8010dd0 <tcp_bind+0xec>
 8010dca:	68bb      	ldr	r3, [r7, #8]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	e000      	b.n	8010dd2 <tcp_bind+0xee>
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	68fa      	ldr	r2, [r7, #12]
 8010dd4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	88fa      	ldrh	r2, [r7, #6]
 8010dda:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8010ddc:	4b0c      	ldr	r3, [pc, #48]	; (8010e10 <tcp_bind+0x12c>)
 8010dde:	681a      	ldr	r2, [r3, #0]
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	60da      	str	r2, [r3, #12]
 8010de4:	4a0a      	ldr	r2, [pc, #40]	; (8010e10 <tcp_bind+0x12c>)
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	6013      	str	r3, [r2, #0]
 8010dea:	f005 fcc5 	bl	8016778 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8010dee:	2300      	movs	r3, #0
}
 8010df0:	4618      	mov	r0, r3
 8010df2:	3720      	adds	r7, #32
 8010df4:	46bd      	mov	sp, r7
 8010df6:	bd80      	pop	{r7, pc}
 8010df8:	0801dec0 	.word	0x0801dec0
 8010dfc:	0801b668 	.word	0x0801b668
 8010e00:	0801b7fc 	.word	0x0801b7fc
 8010e04:	0801b6ac 	.word	0x0801b6ac
 8010e08:	0801b814 	.word	0x0801b814
 8010e0c:	0801de98 	.word	0x0801de98
 8010e10:	24007870 	.word	0x24007870

08010e14 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8010e14:	b580      	push	{r7, lr}
 8010e16:	b084      	sub	sp, #16
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	60f8      	str	r0, [r7, #12]
 8010e1c:	60b9      	str	r1, [r7, #8]
 8010e1e:	4613      	mov	r3, r2
 8010e20:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8010e22:	68bb      	ldr	r3, [r7, #8]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d106      	bne.n	8010e36 <tcp_accept_null+0x22>
 8010e28:	4b07      	ldr	r3, [pc, #28]	; (8010e48 <tcp_accept_null+0x34>)
 8010e2a:	f240 320f 	movw	r2, #783	; 0x30f
 8010e2e:	4907      	ldr	r1, [pc, #28]	; (8010e4c <tcp_accept_null+0x38>)
 8010e30:	4807      	ldr	r0, [pc, #28]	; (8010e50 <tcp_accept_null+0x3c>)
 8010e32:	f008 fdff 	bl	8019a34 <iprintf>

  tcp_abort(pcb);
 8010e36:	68b8      	ldr	r0, [r7, #8]
 8010e38:	f7ff ff48 	bl	8010ccc <tcp_abort>

  return ERR_ABRT;
 8010e3c:	f06f 030c 	mvn.w	r3, #12
}
 8010e40:	4618      	mov	r0, r3
 8010e42:	3710      	adds	r7, #16
 8010e44:	46bd      	mov	sp, r7
 8010e46:	bd80      	pop	{r7, pc}
 8010e48:	0801b668 	.word	0x0801b668
 8010e4c:	0801b83c 	.word	0x0801b83c
 8010e50:	0801b6ac 	.word	0x0801b6ac

08010e54 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b082      	sub	sp, #8
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
 8010e5c:	460b      	mov	r3, r1
 8010e5e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8010e60:	78fb      	ldrb	r3, [r7, #3]
 8010e62:	2200      	movs	r2, #0
 8010e64:	4619      	mov	r1, r3
 8010e66:	6878      	ldr	r0, [r7, #4]
 8010e68:	f000 f806 	bl	8010e78 <tcp_listen_with_backlog_and_err>
 8010e6c:	4603      	mov	r3, r0
}
 8010e6e:	4618      	mov	r0, r3
 8010e70:	3708      	adds	r7, #8
 8010e72:	46bd      	mov	sp, r7
 8010e74:	bd80      	pop	{r7, pc}
	...

08010e78 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b088      	sub	sp, #32
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	60f8      	str	r0, [r7, #12]
 8010e80:	460b      	mov	r3, r1
 8010e82:	607a      	str	r2, [r7, #4]
 8010e84:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8010e86:	2300      	movs	r3, #0
 8010e88:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d109      	bne.n	8010ea4 <tcp_listen_with_backlog_and_err+0x2c>
 8010e90:	4b47      	ldr	r3, [pc, #284]	; (8010fb0 <tcp_listen_with_backlog_and_err+0x138>)
 8010e92:	f240 3259 	movw	r2, #857	; 0x359
 8010e96:	4947      	ldr	r1, [pc, #284]	; (8010fb4 <tcp_listen_with_backlog_and_err+0x13c>)
 8010e98:	4847      	ldr	r0, [pc, #284]	; (8010fb8 <tcp_listen_with_backlog_and_err+0x140>)
 8010e9a:	f008 fdcb 	bl	8019a34 <iprintf>
 8010e9e:	23f0      	movs	r3, #240	; 0xf0
 8010ea0:	76fb      	strb	r3, [r7, #27]
 8010ea2:	e079      	b.n	8010f98 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	7d1b      	ldrb	r3, [r3, #20]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d009      	beq.n	8010ec0 <tcp_listen_with_backlog_and_err+0x48>
 8010eac:	4b40      	ldr	r3, [pc, #256]	; (8010fb0 <tcp_listen_with_backlog_and_err+0x138>)
 8010eae:	f240 325a 	movw	r2, #858	; 0x35a
 8010eb2:	4942      	ldr	r1, [pc, #264]	; (8010fbc <tcp_listen_with_backlog_and_err+0x144>)
 8010eb4:	4840      	ldr	r0, [pc, #256]	; (8010fb8 <tcp_listen_with_backlog_and_err+0x140>)
 8010eb6:	f008 fdbd 	bl	8019a34 <iprintf>
 8010eba:	23f1      	movs	r3, #241	; 0xf1
 8010ebc:	76fb      	strb	r3, [r7, #27]
 8010ebe:	e06b      	b.n	8010f98 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	7d1b      	ldrb	r3, [r3, #20]
 8010ec4:	2b01      	cmp	r3, #1
 8010ec6:	d104      	bne.n	8010ed2 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8010ecc:	23f7      	movs	r3, #247	; 0xf7
 8010ece:	76fb      	strb	r3, [r7, #27]
    goto done;
 8010ed0:	e062      	b.n	8010f98 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8010ed2:	2002      	movs	r0, #2
 8010ed4:	f7fe fa3c 	bl	800f350 <memp_malloc>
 8010ed8:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8010eda:	69fb      	ldr	r3, [r7, #28]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d102      	bne.n	8010ee6 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8010ee0:	23ff      	movs	r3, #255	; 0xff
 8010ee2:	76fb      	strb	r3, [r7, #27]
    goto done;
 8010ee4:	e058      	b.n	8010f98 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	691a      	ldr	r2, [r3, #16]
 8010eea:	69fb      	ldr	r3, [r7, #28]
 8010eec:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	8ada      	ldrh	r2, [r3, #22]
 8010ef2:	69fb      	ldr	r3, [r7, #28]
 8010ef4:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8010ef6:	69fb      	ldr	r3, [r7, #28]
 8010ef8:	2201      	movs	r2, #1
 8010efa:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	7d5a      	ldrb	r2, [r3, #21]
 8010f00:	69fb      	ldr	r3, [r7, #28]
 8010f02:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	7a5a      	ldrb	r2, [r3, #9]
 8010f08:	69fb      	ldr	r3, [r7, #28]
 8010f0a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8010f0c:	69fb      	ldr	r3, [r7, #28]
 8010f0e:	2200      	movs	r2, #0
 8010f10:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	7ada      	ldrb	r2, [r3, #11]
 8010f16:	69fb      	ldr	r3, [r7, #28]
 8010f18:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	7a9a      	ldrb	r2, [r3, #10]
 8010f1e:	69fb      	ldr	r3, [r7, #28]
 8010f20:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	681a      	ldr	r2, [r3, #0]
 8010f26:	69fb      	ldr	r3, [r7, #28]
 8010f28:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	8adb      	ldrh	r3, [r3, #22]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d021      	beq.n	8010f76 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8010f32:	4b23      	ldr	r3, [pc, #140]	; (8010fc0 <tcp_listen_with_backlog_and_err+0x148>)
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	68fa      	ldr	r2, [r7, #12]
 8010f38:	429a      	cmp	r2, r3
 8010f3a:	d105      	bne.n	8010f48 <tcp_listen_with_backlog_and_err+0xd0>
 8010f3c:	4b20      	ldr	r3, [pc, #128]	; (8010fc0 <tcp_listen_with_backlog_and_err+0x148>)
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	68db      	ldr	r3, [r3, #12]
 8010f42:	4a1f      	ldr	r2, [pc, #124]	; (8010fc0 <tcp_listen_with_backlog_and_err+0x148>)
 8010f44:	6013      	str	r3, [r2, #0]
 8010f46:	e013      	b.n	8010f70 <tcp_listen_with_backlog_and_err+0xf8>
 8010f48:	4b1d      	ldr	r3, [pc, #116]	; (8010fc0 <tcp_listen_with_backlog_and_err+0x148>)
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	617b      	str	r3, [r7, #20]
 8010f4e:	e00c      	b.n	8010f6a <tcp_listen_with_backlog_and_err+0xf2>
 8010f50:	697b      	ldr	r3, [r7, #20]
 8010f52:	68db      	ldr	r3, [r3, #12]
 8010f54:	68fa      	ldr	r2, [r7, #12]
 8010f56:	429a      	cmp	r2, r3
 8010f58:	d104      	bne.n	8010f64 <tcp_listen_with_backlog_and_err+0xec>
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	68da      	ldr	r2, [r3, #12]
 8010f5e:	697b      	ldr	r3, [r7, #20]
 8010f60:	60da      	str	r2, [r3, #12]
 8010f62:	e005      	b.n	8010f70 <tcp_listen_with_backlog_and_err+0xf8>
 8010f64:	697b      	ldr	r3, [r7, #20]
 8010f66:	68db      	ldr	r3, [r3, #12]
 8010f68:	617b      	str	r3, [r7, #20]
 8010f6a:	697b      	ldr	r3, [r7, #20]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d1ef      	bne.n	8010f50 <tcp_listen_with_backlog_and_err+0xd8>
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	2200      	movs	r2, #0
 8010f74:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8010f76:	68f8      	ldr	r0, [r7, #12]
 8010f78:	f7ff fbc0 	bl	80106fc <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8010f7c:	69fb      	ldr	r3, [r7, #28]
 8010f7e:	4a11      	ldr	r2, [pc, #68]	; (8010fc4 <tcp_listen_with_backlog_and_err+0x14c>)
 8010f80:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8010f82:	4b11      	ldr	r3, [pc, #68]	; (8010fc8 <tcp_listen_with_backlog_and_err+0x150>)
 8010f84:	681a      	ldr	r2, [r3, #0]
 8010f86:	69fb      	ldr	r3, [r7, #28]
 8010f88:	60da      	str	r2, [r3, #12]
 8010f8a:	4a0f      	ldr	r2, [pc, #60]	; (8010fc8 <tcp_listen_with_backlog_and_err+0x150>)
 8010f8c:	69fb      	ldr	r3, [r7, #28]
 8010f8e:	6013      	str	r3, [r2, #0]
 8010f90:	f005 fbf2 	bl	8016778 <tcp_timer_needed>
  res = ERR_OK;
 8010f94:	2300      	movs	r3, #0
 8010f96:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d002      	beq.n	8010fa4 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	7efa      	ldrb	r2, [r7, #27]
 8010fa2:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8010fa4:	69fb      	ldr	r3, [r7, #28]
}
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	3720      	adds	r7, #32
 8010faa:	46bd      	mov	sp, r7
 8010fac:	bd80      	pop	{r7, pc}
 8010fae:	bf00      	nop
 8010fb0:	0801b668 	.word	0x0801b668
 8010fb4:	0801b85c 	.word	0x0801b85c
 8010fb8:	0801b6ac 	.word	0x0801b6ac
 8010fbc:	0801b88c 	.word	0x0801b88c
 8010fc0:	24007870 	.word	0x24007870
 8010fc4:	08010e15 	.word	0x08010e15
 8010fc8:	2400786c 	.word	0x2400786c

08010fcc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b084      	sub	sp, #16
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d106      	bne.n	8010fe8 <tcp_update_rcv_ann_wnd+0x1c>
 8010fda:	4b25      	ldr	r3, [pc, #148]	; (8011070 <tcp_update_rcv_ann_wnd+0xa4>)
 8010fdc:	f240 32a6 	movw	r2, #934	; 0x3a6
 8010fe0:	4924      	ldr	r1, [pc, #144]	; (8011074 <tcp_update_rcv_ann_wnd+0xa8>)
 8010fe2:	4825      	ldr	r0, [pc, #148]	; (8011078 <tcp_update_rcv_ann_wnd+0xac>)
 8010fe4:	f008 fd26 	bl	8019a34 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fec:	687a      	ldr	r2, [r7, #4]
 8010fee:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8010ff0:	4413      	add	r3, r2
 8010ff2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ff8:	687a      	ldr	r2, [r7, #4]
 8010ffa:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8010ffc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8011000:	bf28      	it	cs
 8011002:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8011006:	b292      	uxth	r2, r2
 8011008:	4413      	add	r3, r2
 801100a:	68fa      	ldr	r2, [r7, #12]
 801100c:	1ad3      	subs	r3, r2, r3
 801100e:	2b00      	cmp	r3, #0
 8011010:	db08      	blt.n	8011024 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801101e:	68fa      	ldr	r2, [r7, #12]
 8011020:	1ad3      	subs	r3, r2, r3
 8011022:	e020      	b.n	8011066 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801102c:	1ad3      	subs	r3, r2, r3
 801102e:	2b00      	cmp	r3, #0
 8011030:	dd03      	ble.n	801103a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	2200      	movs	r2, #0
 8011036:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011038:	e014      	b.n	8011064 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011042:	1ad3      	subs	r3, r2, r3
 8011044:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8011046:	68bb      	ldr	r3, [r7, #8]
 8011048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801104c:	d306      	bcc.n	801105c <tcp_update_rcv_ann_wnd+0x90>
 801104e:	4b08      	ldr	r3, [pc, #32]	; (8011070 <tcp_update_rcv_ann_wnd+0xa4>)
 8011050:	f240 32b6 	movw	r2, #950	; 0x3b6
 8011054:	4909      	ldr	r1, [pc, #36]	; (801107c <tcp_update_rcv_ann_wnd+0xb0>)
 8011056:	4808      	ldr	r0, [pc, #32]	; (8011078 <tcp_update_rcv_ann_wnd+0xac>)
 8011058:	f008 fcec 	bl	8019a34 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801105c:	68bb      	ldr	r3, [r7, #8]
 801105e:	b29a      	uxth	r2, r3
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8011064:	2300      	movs	r3, #0
  }
}
 8011066:	4618      	mov	r0, r3
 8011068:	3710      	adds	r7, #16
 801106a:	46bd      	mov	sp, r7
 801106c:	bd80      	pop	{r7, pc}
 801106e:	bf00      	nop
 8011070:	0801b668 	.word	0x0801b668
 8011074:	0801b8c4 	.word	0x0801b8c4
 8011078:	0801b6ac 	.word	0x0801b6ac
 801107c:	0801b8e8 	.word	0x0801b8e8

08011080 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8011080:	b580      	push	{r7, lr}
 8011082:	b084      	sub	sp, #16
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
 8011088:	460b      	mov	r3, r1
 801108a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d107      	bne.n	80110a2 <tcp_recved+0x22>
 8011092:	4b1f      	ldr	r3, [pc, #124]	; (8011110 <tcp_recved+0x90>)
 8011094:	f240 32cf 	movw	r2, #975	; 0x3cf
 8011098:	491e      	ldr	r1, [pc, #120]	; (8011114 <tcp_recved+0x94>)
 801109a:	481f      	ldr	r0, [pc, #124]	; (8011118 <tcp_recved+0x98>)
 801109c:	f008 fcca 	bl	8019a34 <iprintf>
 80110a0:	e032      	b.n	8011108 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	7d1b      	ldrb	r3, [r3, #20]
 80110a6:	2b01      	cmp	r3, #1
 80110a8:	d106      	bne.n	80110b8 <tcp_recved+0x38>
 80110aa:	4b19      	ldr	r3, [pc, #100]	; (8011110 <tcp_recved+0x90>)
 80110ac:	f240 32d2 	movw	r2, #978	; 0x3d2
 80110b0:	491a      	ldr	r1, [pc, #104]	; (801111c <tcp_recved+0x9c>)
 80110b2:	4819      	ldr	r0, [pc, #100]	; (8011118 <tcp_recved+0x98>)
 80110b4:	f008 fcbe 	bl	8019a34 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80110bc:	887b      	ldrh	r3, [r7, #2]
 80110be:	4413      	add	r3, r2
 80110c0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80110c2:	89fb      	ldrh	r3, [r7, #14]
 80110c4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80110c8:	d804      	bhi.n	80110d4 <tcp_recved+0x54>
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80110ce:	89fa      	ldrh	r2, [r7, #14]
 80110d0:	429a      	cmp	r2, r3
 80110d2:	d204      	bcs.n	80110de <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80110da:	851a      	strh	r2, [r3, #40]	; 0x28
 80110dc:	e002      	b.n	80110e4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	89fa      	ldrh	r2, [r7, #14]
 80110e2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80110e4:	6878      	ldr	r0, [r7, #4]
 80110e6:	f7ff ff71 	bl	8010fcc <tcp_update_rcv_ann_wnd>
 80110ea:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80110ec:	68bb      	ldr	r3, [r7, #8]
 80110ee:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80110f2:	d309      	bcc.n	8011108 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	8b5b      	ldrh	r3, [r3, #26]
 80110f8:	f043 0302 	orr.w	r3, r3, #2
 80110fc:	b29a      	uxth	r2, r3
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011102:	6878      	ldr	r0, [r7, #4]
 8011104:	f004 fbc2 	bl	801588c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8011108:	3710      	adds	r7, #16
 801110a:	46bd      	mov	sp, r7
 801110c:	bd80      	pop	{r7, pc}
 801110e:	bf00      	nop
 8011110:	0801b668 	.word	0x0801b668
 8011114:	0801b904 	.word	0x0801b904
 8011118:	0801b6ac 	.word	0x0801b6ac
 801111c:	0801b91c 	.word	0x0801b91c

08011120 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8011120:	b480      	push	{r7}
 8011122:	b083      	sub	sp, #12
 8011124:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8011126:	2300      	movs	r3, #0
 8011128:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801112a:	4b1e      	ldr	r3, [pc, #120]	; (80111a4 <tcp_new_port+0x84>)
 801112c:	881b      	ldrh	r3, [r3, #0]
 801112e:	3301      	adds	r3, #1
 8011130:	b29a      	uxth	r2, r3
 8011132:	4b1c      	ldr	r3, [pc, #112]	; (80111a4 <tcp_new_port+0x84>)
 8011134:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8011136:	4b1b      	ldr	r3, [pc, #108]	; (80111a4 <tcp_new_port+0x84>)
 8011138:	881b      	ldrh	r3, [r3, #0]
 801113a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801113e:	4293      	cmp	r3, r2
 8011140:	d103      	bne.n	801114a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8011142:	4b18      	ldr	r3, [pc, #96]	; (80111a4 <tcp_new_port+0x84>)
 8011144:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8011148:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801114a:	2300      	movs	r3, #0
 801114c:	71fb      	strb	r3, [r7, #7]
 801114e:	e01e      	b.n	801118e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8011150:	79fb      	ldrb	r3, [r7, #7]
 8011152:	4a15      	ldr	r2, [pc, #84]	; (80111a8 <tcp_new_port+0x88>)
 8011154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	603b      	str	r3, [r7, #0]
 801115c:	e011      	b.n	8011182 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801115e:	683b      	ldr	r3, [r7, #0]
 8011160:	8ada      	ldrh	r2, [r3, #22]
 8011162:	4b10      	ldr	r3, [pc, #64]	; (80111a4 <tcp_new_port+0x84>)
 8011164:	881b      	ldrh	r3, [r3, #0]
 8011166:	429a      	cmp	r2, r3
 8011168:	d108      	bne.n	801117c <tcp_new_port+0x5c>
        n++;
 801116a:	88bb      	ldrh	r3, [r7, #4]
 801116c:	3301      	adds	r3, #1
 801116e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8011170:	88bb      	ldrh	r3, [r7, #4]
 8011172:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011176:	d3d8      	bcc.n	801112a <tcp_new_port+0xa>
          return 0;
 8011178:	2300      	movs	r3, #0
 801117a:	e00d      	b.n	8011198 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801117c:	683b      	ldr	r3, [r7, #0]
 801117e:	68db      	ldr	r3, [r3, #12]
 8011180:	603b      	str	r3, [r7, #0]
 8011182:	683b      	ldr	r3, [r7, #0]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d1ea      	bne.n	801115e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8011188:	79fb      	ldrb	r3, [r7, #7]
 801118a:	3301      	adds	r3, #1
 801118c:	71fb      	strb	r3, [r7, #7]
 801118e:	79fb      	ldrb	r3, [r7, #7]
 8011190:	2b03      	cmp	r3, #3
 8011192:	d9dd      	bls.n	8011150 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8011194:	4b03      	ldr	r3, [pc, #12]	; (80111a4 <tcp_new_port+0x84>)
 8011196:	881b      	ldrh	r3, [r3, #0]
}
 8011198:	4618      	mov	r0, r3
 801119a:	370c      	adds	r7, #12
 801119c:	46bd      	mov	sp, r7
 801119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a2:	4770      	bx	lr
 80111a4:	24000030 	.word	0x24000030
 80111a8:	0801de98 	.word	0x0801de98

080111ac <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80111ac:	b5b0      	push	{r4, r5, r7, lr}
 80111ae:	b090      	sub	sp, #64	; 0x40
 80111b0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80111b2:	2300      	movs	r3, #0
 80111b4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80111b8:	4b94      	ldr	r3, [pc, #592]	; (801140c <tcp_slowtmr+0x260>)
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	3301      	adds	r3, #1
 80111be:	4a93      	ldr	r2, [pc, #588]	; (801140c <tcp_slowtmr+0x260>)
 80111c0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80111c2:	4b93      	ldr	r3, [pc, #588]	; (8011410 <tcp_slowtmr+0x264>)
 80111c4:	781b      	ldrb	r3, [r3, #0]
 80111c6:	3301      	adds	r3, #1
 80111c8:	b2da      	uxtb	r2, r3
 80111ca:	4b91      	ldr	r3, [pc, #580]	; (8011410 <tcp_slowtmr+0x264>)
 80111cc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80111ce:	2300      	movs	r3, #0
 80111d0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80111d2:	4b90      	ldr	r3, [pc, #576]	; (8011414 <tcp_slowtmr+0x268>)
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80111d8:	e29d      	b.n	8011716 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80111da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111dc:	7d1b      	ldrb	r3, [r3, #20]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d106      	bne.n	80111f0 <tcp_slowtmr+0x44>
 80111e2:	4b8d      	ldr	r3, [pc, #564]	; (8011418 <tcp_slowtmr+0x26c>)
 80111e4:	f240 42be 	movw	r2, #1214	; 0x4be
 80111e8:	498c      	ldr	r1, [pc, #560]	; (801141c <tcp_slowtmr+0x270>)
 80111ea:	488d      	ldr	r0, [pc, #564]	; (8011420 <tcp_slowtmr+0x274>)
 80111ec:	f008 fc22 	bl	8019a34 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80111f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111f2:	7d1b      	ldrb	r3, [r3, #20]
 80111f4:	2b01      	cmp	r3, #1
 80111f6:	d106      	bne.n	8011206 <tcp_slowtmr+0x5a>
 80111f8:	4b87      	ldr	r3, [pc, #540]	; (8011418 <tcp_slowtmr+0x26c>)
 80111fa:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80111fe:	4989      	ldr	r1, [pc, #548]	; (8011424 <tcp_slowtmr+0x278>)
 8011200:	4887      	ldr	r0, [pc, #540]	; (8011420 <tcp_slowtmr+0x274>)
 8011202:	f008 fc17 	bl	8019a34 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8011206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011208:	7d1b      	ldrb	r3, [r3, #20]
 801120a:	2b0a      	cmp	r3, #10
 801120c:	d106      	bne.n	801121c <tcp_slowtmr+0x70>
 801120e:	4b82      	ldr	r3, [pc, #520]	; (8011418 <tcp_slowtmr+0x26c>)
 8011210:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8011214:	4984      	ldr	r1, [pc, #528]	; (8011428 <tcp_slowtmr+0x27c>)
 8011216:	4882      	ldr	r0, [pc, #520]	; (8011420 <tcp_slowtmr+0x274>)
 8011218:	f008 fc0c 	bl	8019a34 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801121c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801121e:	7f9a      	ldrb	r2, [r3, #30]
 8011220:	4b7b      	ldr	r3, [pc, #492]	; (8011410 <tcp_slowtmr+0x264>)
 8011222:	781b      	ldrb	r3, [r3, #0]
 8011224:	429a      	cmp	r2, r3
 8011226:	d105      	bne.n	8011234 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8011228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801122a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801122c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801122e:	68db      	ldr	r3, [r3, #12]
 8011230:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8011232:	e270      	b.n	8011716 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8011234:	4b76      	ldr	r3, [pc, #472]	; (8011410 <tcp_slowtmr+0x264>)
 8011236:	781a      	ldrb	r2, [r3, #0]
 8011238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801123a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 801123c:	2300      	movs	r3, #0
 801123e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8011242:	2300      	movs	r3, #0
 8011244:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8011248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801124a:	7d1b      	ldrb	r3, [r3, #20]
 801124c:	2b02      	cmp	r3, #2
 801124e:	d10a      	bne.n	8011266 <tcp_slowtmr+0xba>
 8011250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011252:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011256:	2b05      	cmp	r3, #5
 8011258:	d905      	bls.n	8011266 <tcp_slowtmr+0xba>
      ++pcb_remove;
 801125a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801125e:	3301      	adds	r3, #1
 8011260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011264:	e11e      	b.n	80114a4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8011266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011268:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801126c:	2b0b      	cmp	r3, #11
 801126e:	d905      	bls.n	801127c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8011270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011274:	3301      	adds	r3, #1
 8011276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801127a:	e113      	b.n	80114a4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 801127c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801127e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011282:	2b00      	cmp	r3, #0
 8011284:	d075      	beq.n	8011372 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8011286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801128a:	2b00      	cmp	r3, #0
 801128c:	d006      	beq.n	801129c <tcp_slowtmr+0xf0>
 801128e:	4b62      	ldr	r3, [pc, #392]	; (8011418 <tcp_slowtmr+0x26c>)
 8011290:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8011294:	4965      	ldr	r1, [pc, #404]	; (801142c <tcp_slowtmr+0x280>)
 8011296:	4862      	ldr	r0, [pc, #392]	; (8011420 <tcp_slowtmr+0x274>)
 8011298:	f008 fbcc 	bl	8019a34 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801129c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801129e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d106      	bne.n	80112b2 <tcp_slowtmr+0x106>
 80112a4:	4b5c      	ldr	r3, [pc, #368]	; (8011418 <tcp_slowtmr+0x26c>)
 80112a6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80112aa:	4961      	ldr	r1, [pc, #388]	; (8011430 <tcp_slowtmr+0x284>)
 80112ac:	485c      	ldr	r0, [pc, #368]	; (8011420 <tcp_slowtmr+0x274>)
 80112ae:	f008 fbc1 	bl	8019a34 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80112b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112b4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80112b8:	2b0b      	cmp	r3, #11
 80112ba:	d905      	bls.n	80112c8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80112bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80112c0:	3301      	adds	r3, #1
 80112c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80112c6:	e0ed      	b.n	80114a4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80112c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80112ce:	3b01      	subs	r3, #1
 80112d0:	4a58      	ldr	r2, [pc, #352]	; (8011434 <tcp_slowtmr+0x288>)
 80112d2:	5cd3      	ldrb	r3, [r2, r3]
 80112d4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80112d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112d8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80112dc:	7c7a      	ldrb	r2, [r7, #17]
 80112de:	429a      	cmp	r2, r3
 80112e0:	d907      	bls.n	80112f2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80112e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112e4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80112e8:	3301      	adds	r3, #1
 80112ea:	b2da      	uxtb	r2, r3
 80112ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ee:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80112f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80112f8:	7c7a      	ldrb	r2, [r7, #17]
 80112fa:	429a      	cmp	r2, r3
 80112fc:	f200 80d2 	bhi.w	80114a4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8011300:	2301      	movs	r3, #1
 8011302:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8011304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011306:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801130a:	2b00      	cmp	r3, #0
 801130c:	d108      	bne.n	8011320 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801130e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011310:	f005 f964 	bl	80165dc <tcp_zero_window_probe>
 8011314:	4603      	mov	r3, r0
 8011316:	2b00      	cmp	r3, #0
 8011318:	d014      	beq.n	8011344 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801131a:	2300      	movs	r3, #0
 801131c:	623b      	str	r3, [r7, #32]
 801131e:	e011      	b.n	8011344 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8011320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011322:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011326:	4619      	mov	r1, r3
 8011328:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801132a:	f004 f829 	bl	8015380 <tcp_split_unsent_seg>
 801132e:	4603      	mov	r3, r0
 8011330:	2b00      	cmp	r3, #0
 8011332:	d107      	bne.n	8011344 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8011334:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011336:	f004 faa9 	bl	801588c <tcp_output>
 801133a:	4603      	mov	r3, r0
 801133c:	2b00      	cmp	r3, #0
 801133e:	d101      	bne.n	8011344 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8011340:	2300      	movs	r3, #0
 8011342:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8011344:	6a3b      	ldr	r3, [r7, #32]
 8011346:	2b00      	cmp	r3, #0
 8011348:	f000 80ac 	beq.w	80114a4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 801134c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801134e:	2200      	movs	r2, #0
 8011350:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011356:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801135a:	2b06      	cmp	r3, #6
 801135c:	f200 80a2 	bhi.w	80114a4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8011360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011362:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011366:	3301      	adds	r3, #1
 8011368:	b2da      	uxtb	r2, r3
 801136a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801136c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8011370:	e098      	b.n	80114a4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8011372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011374:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011378:	2b00      	cmp	r3, #0
 801137a:	db0f      	blt.n	801139c <tcp_slowtmr+0x1f0>
 801137c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801137e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011382:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011386:	4293      	cmp	r3, r2
 8011388:	d008      	beq.n	801139c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801138a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801138c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011390:	b29b      	uxth	r3, r3
 8011392:	3301      	adds	r3, #1
 8011394:	b29b      	uxth	r3, r3
 8011396:	b21a      	sxth	r2, r3
 8011398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801139a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 801139c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801139e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80113a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113a4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80113a8:	429a      	cmp	r2, r3
 80113aa:	db7b      	blt.n	80114a4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80113ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80113ae:	f004 fd5f 	bl	8015e70 <tcp_rexmit_rto_prepare>
 80113b2:	4603      	mov	r3, r0
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d007      	beq.n	80113c8 <tcp_slowtmr+0x21c>
 80113b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d171      	bne.n	80114a4 <tcp_slowtmr+0x2f8>
 80113c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d06d      	beq.n	80114a4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80113c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ca:	7d1b      	ldrb	r3, [r3, #20]
 80113cc:	2b02      	cmp	r3, #2
 80113ce:	d03a      	beq.n	8011446 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80113d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80113d6:	2b0c      	cmp	r3, #12
 80113d8:	bf28      	it	cs
 80113da:	230c      	movcs	r3, #12
 80113dc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80113de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113e0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80113e4:	10db      	asrs	r3, r3, #3
 80113e6:	b21b      	sxth	r3, r3
 80113e8:	461a      	mov	r2, r3
 80113ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80113f0:	4413      	add	r3, r2
 80113f2:	7efa      	ldrb	r2, [r7, #27]
 80113f4:	4910      	ldr	r1, [pc, #64]	; (8011438 <tcp_slowtmr+0x28c>)
 80113f6:	5c8a      	ldrb	r2, [r1, r2]
 80113f8:	4093      	lsls	r3, r2
 80113fa:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80113fc:	697b      	ldr	r3, [r7, #20]
 80113fe:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8011402:	4293      	cmp	r3, r2
 8011404:	dc1a      	bgt.n	801143c <tcp_slowtmr+0x290>
 8011406:	697b      	ldr	r3, [r7, #20]
 8011408:	b21a      	sxth	r2, r3
 801140a:	e019      	b.n	8011440 <tcp_slowtmr+0x294>
 801140c:	24007868 	.word	0x24007868
 8011410:	24004122 	.word	0x24004122
 8011414:	24007864 	.word	0x24007864
 8011418:	0801b668 	.word	0x0801b668
 801141c:	0801b9ac 	.word	0x0801b9ac
 8011420:	0801b6ac 	.word	0x0801b6ac
 8011424:	0801b9d8 	.word	0x0801b9d8
 8011428:	0801ba04 	.word	0x0801ba04
 801142c:	0801ba34 	.word	0x0801ba34
 8011430:	0801ba68 	.word	0x0801ba68
 8011434:	0801de90 	.word	0x0801de90
 8011438:	0801de80 	.word	0x0801de80
 801143c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011442:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8011446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011448:	2200      	movs	r2, #0
 801144a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801144c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801144e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011454:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011458:	4293      	cmp	r3, r2
 801145a:	bf28      	it	cs
 801145c:	4613      	movcs	r3, r2
 801145e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8011460:	8a7b      	ldrh	r3, [r7, #18]
 8011462:	085b      	lsrs	r3, r3, #1
 8011464:	b29a      	uxth	r2, r3
 8011466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011468:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801146c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801146e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011474:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011476:	005b      	lsls	r3, r3, #1
 8011478:	b29b      	uxth	r3, r3
 801147a:	429a      	cmp	r2, r3
 801147c:	d206      	bcs.n	801148c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801147e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011480:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011482:	005b      	lsls	r3, r3, #1
 8011484:	b29a      	uxth	r2, r3
 8011486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011488:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801148c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801148e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8011490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011492:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8011496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011498:	2200      	movs	r2, #0
 801149a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801149e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80114a0:	f004 fd56 	bl	8015f50 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80114a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114a6:	7d1b      	ldrb	r3, [r3, #20]
 80114a8:	2b06      	cmp	r3, #6
 80114aa:	d111      	bne.n	80114d0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80114ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114ae:	8b5b      	ldrh	r3, [r3, #26]
 80114b0:	f003 0310 	and.w	r3, r3, #16
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d00b      	beq.n	80114d0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80114b8:	4b9c      	ldr	r3, [pc, #624]	; (801172c <tcp_slowtmr+0x580>)
 80114ba:	681a      	ldr	r2, [r3, #0]
 80114bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114be:	6a1b      	ldr	r3, [r3, #32]
 80114c0:	1ad3      	subs	r3, r2, r3
 80114c2:	2b28      	cmp	r3, #40	; 0x28
 80114c4:	d904      	bls.n	80114d0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80114c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80114ca:	3301      	adds	r3, #1
 80114cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80114d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114d2:	7a5b      	ldrb	r3, [r3, #9]
 80114d4:	f003 0308 	and.w	r3, r3, #8
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d04a      	beq.n	8011572 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80114dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114de:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80114e0:	2b04      	cmp	r3, #4
 80114e2:	d003      	beq.n	80114ec <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80114e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114e6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80114e8:	2b07      	cmp	r3, #7
 80114ea:	d142      	bne.n	8011572 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80114ec:	4b8f      	ldr	r3, [pc, #572]	; (801172c <tcp_slowtmr+0x580>)
 80114ee:	681a      	ldr	r2, [r3, #0]
 80114f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114f2:	6a1b      	ldr	r3, [r3, #32]
 80114f4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80114f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114f8:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80114fc:	4b8c      	ldr	r3, [pc, #560]	; (8011730 <tcp_slowtmr+0x584>)
 80114fe:	440b      	add	r3, r1
 8011500:	498c      	ldr	r1, [pc, #560]	; (8011734 <tcp_slowtmr+0x588>)
 8011502:	fba1 1303 	umull	r1, r3, r1, r3
 8011506:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011508:	429a      	cmp	r2, r3
 801150a:	d90a      	bls.n	8011522 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801150c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011510:	3301      	adds	r3, #1
 8011512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8011516:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801151a:	3301      	adds	r3, #1
 801151c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011520:	e027      	b.n	8011572 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011522:	4b82      	ldr	r3, [pc, #520]	; (801172c <tcp_slowtmr+0x580>)
 8011524:	681a      	ldr	r2, [r3, #0]
 8011526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011528:	6a1b      	ldr	r3, [r3, #32]
 801152a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801152c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801152e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011534:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011538:	4618      	mov	r0, r3
 801153a:	4b7f      	ldr	r3, [pc, #508]	; (8011738 <tcp_slowtmr+0x58c>)
 801153c:	fb03 f300 	mul.w	r3, r3, r0
 8011540:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8011542:	497c      	ldr	r1, [pc, #496]	; (8011734 <tcp_slowtmr+0x588>)
 8011544:	fba1 1303 	umull	r1, r3, r1, r3
 8011548:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801154a:	429a      	cmp	r2, r3
 801154c:	d911      	bls.n	8011572 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 801154e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011550:	f005 f804 	bl	801655c <tcp_keepalive>
 8011554:	4603      	mov	r3, r0
 8011556:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801155a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801155e:	2b00      	cmp	r3, #0
 8011560:	d107      	bne.n	8011572 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8011562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011564:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011568:	3301      	adds	r3, #1
 801156a:	b2da      	uxtb	r2, r3
 801156c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801156e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8011572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011576:	2b00      	cmp	r3, #0
 8011578:	d011      	beq.n	801159e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801157a:	4b6c      	ldr	r3, [pc, #432]	; (801172c <tcp_slowtmr+0x580>)
 801157c:	681a      	ldr	r2, [r3, #0]
 801157e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011580:	6a1b      	ldr	r3, [r3, #32]
 8011582:	1ad2      	subs	r2, r2, r3
 8011584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011586:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801158a:	4619      	mov	r1, r3
 801158c:	460b      	mov	r3, r1
 801158e:	005b      	lsls	r3, r3, #1
 8011590:	440b      	add	r3, r1
 8011592:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011594:	429a      	cmp	r2, r3
 8011596:	d302      	bcc.n	801159e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8011598:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801159a:	f000 fec3 	bl	8012324 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801159e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115a0:	7d1b      	ldrb	r3, [r3, #20]
 80115a2:	2b03      	cmp	r3, #3
 80115a4:	d10b      	bne.n	80115be <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80115a6:	4b61      	ldr	r3, [pc, #388]	; (801172c <tcp_slowtmr+0x580>)
 80115a8:	681a      	ldr	r2, [r3, #0]
 80115aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115ac:	6a1b      	ldr	r3, [r3, #32]
 80115ae:	1ad3      	subs	r3, r2, r3
 80115b0:	2b28      	cmp	r3, #40	; 0x28
 80115b2:	d904      	bls.n	80115be <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80115b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80115b8:	3301      	adds	r3, #1
 80115ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80115be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115c0:	7d1b      	ldrb	r3, [r3, #20]
 80115c2:	2b09      	cmp	r3, #9
 80115c4:	d10b      	bne.n	80115de <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80115c6:	4b59      	ldr	r3, [pc, #356]	; (801172c <tcp_slowtmr+0x580>)
 80115c8:	681a      	ldr	r2, [r3, #0]
 80115ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115cc:	6a1b      	ldr	r3, [r3, #32]
 80115ce:	1ad3      	subs	r3, r2, r3
 80115d0:	2bf0      	cmp	r3, #240	; 0xf0
 80115d2:	d904      	bls.n	80115de <tcp_slowtmr+0x432>
        ++pcb_remove;
 80115d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80115d8:	3301      	adds	r3, #1
 80115da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80115de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d060      	beq.n	80116a8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80115e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80115ec:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80115ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80115f0:	f000 fce4 	bl	8011fbc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80115f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d010      	beq.n	801161c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80115fa:	4b50      	ldr	r3, [pc, #320]	; (801173c <tcp_slowtmr+0x590>)
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011600:	429a      	cmp	r2, r3
 8011602:	d106      	bne.n	8011612 <tcp_slowtmr+0x466>
 8011604:	4b4e      	ldr	r3, [pc, #312]	; (8011740 <tcp_slowtmr+0x594>)
 8011606:	f240 526d 	movw	r2, #1389	; 0x56d
 801160a:	494e      	ldr	r1, [pc, #312]	; (8011744 <tcp_slowtmr+0x598>)
 801160c:	484e      	ldr	r0, [pc, #312]	; (8011748 <tcp_slowtmr+0x59c>)
 801160e:	f008 fa11 	bl	8019a34 <iprintf>
        prev->next = pcb->next;
 8011612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011614:	68da      	ldr	r2, [r3, #12]
 8011616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011618:	60da      	str	r2, [r3, #12]
 801161a:	e00f      	b.n	801163c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801161c:	4b47      	ldr	r3, [pc, #284]	; (801173c <tcp_slowtmr+0x590>)
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011622:	429a      	cmp	r2, r3
 8011624:	d006      	beq.n	8011634 <tcp_slowtmr+0x488>
 8011626:	4b46      	ldr	r3, [pc, #280]	; (8011740 <tcp_slowtmr+0x594>)
 8011628:	f240 5271 	movw	r2, #1393	; 0x571
 801162c:	4947      	ldr	r1, [pc, #284]	; (801174c <tcp_slowtmr+0x5a0>)
 801162e:	4846      	ldr	r0, [pc, #280]	; (8011748 <tcp_slowtmr+0x59c>)
 8011630:	f008 fa00 	bl	8019a34 <iprintf>
        tcp_active_pcbs = pcb->next;
 8011634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011636:	68db      	ldr	r3, [r3, #12]
 8011638:	4a40      	ldr	r2, [pc, #256]	; (801173c <tcp_slowtmr+0x590>)
 801163a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801163c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011640:	2b00      	cmp	r3, #0
 8011642:	d013      	beq.n	801166c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011646:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801164a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801164c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801164e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011650:	3304      	adds	r3, #4
 8011652:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011654:	8ad2      	ldrh	r2, [r2, #22]
 8011656:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011658:	8b09      	ldrh	r1, [r1, #24]
 801165a:	9102      	str	r1, [sp, #8]
 801165c:	9201      	str	r2, [sp, #4]
 801165e:	9300      	str	r3, [sp, #0]
 8011660:	462b      	mov	r3, r5
 8011662:	4622      	mov	r2, r4
 8011664:	4601      	mov	r1, r0
 8011666:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011668:	f004 fec4 	bl	80163f4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801166c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801166e:	691b      	ldr	r3, [r3, #16]
 8011670:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8011672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011674:	7d1b      	ldrb	r3, [r3, #20]
 8011676:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8011678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801167a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801167c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801167e:	68db      	ldr	r3, [r3, #12]
 8011680:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011682:	6838      	ldr	r0, [r7, #0]
 8011684:	f7ff f83a 	bl	80106fc <tcp_free>

      tcp_active_pcbs_changed = 0;
 8011688:	4b31      	ldr	r3, [pc, #196]	; (8011750 <tcp_slowtmr+0x5a4>)
 801168a:	2200      	movs	r2, #0
 801168c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d004      	beq.n	801169e <tcp_slowtmr+0x4f2>
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	f06f 010c 	mvn.w	r1, #12
 801169a:	68b8      	ldr	r0, [r7, #8]
 801169c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801169e:	4b2c      	ldr	r3, [pc, #176]	; (8011750 <tcp_slowtmr+0x5a4>)
 80116a0:	781b      	ldrb	r3, [r3, #0]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d037      	beq.n	8011716 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80116a6:	e592      	b.n	80111ce <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80116a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116aa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80116ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ae:	68db      	ldr	r3, [r3, #12]
 80116b0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80116b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116b4:	7f1b      	ldrb	r3, [r3, #28]
 80116b6:	3301      	adds	r3, #1
 80116b8:	b2da      	uxtb	r2, r3
 80116ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116bc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80116be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116c0:	7f1a      	ldrb	r2, [r3, #28]
 80116c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116c4:	7f5b      	ldrb	r3, [r3, #29]
 80116c6:	429a      	cmp	r2, r3
 80116c8:	d325      	bcc.n	8011716 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80116ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116cc:	2200      	movs	r2, #0
 80116ce:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80116d0:	4b1f      	ldr	r3, [pc, #124]	; (8011750 <tcp_slowtmr+0x5a4>)
 80116d2:	2200      	movs	r2, #0
 80116d4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80116d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d00b      	beq.n	80116f8 <tcp_slowtmr+0x54c>
 80116e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80116e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80116e8:	6912      	ldr	r2, [r2, #16]
 80116ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80116ec:	4610      	mov	r0, r2
 80116ee:	4798      	blx	r3
 80116f0:	4603      	mov	r3, r0
 80116f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80116f6:	e002      	b.n	80116fe <tcp_slowtmr+0x552>
 80116f8:	2300      	movs	r3, #0
 80116fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80116fe:	4b14      	ldr	r3, [pc, #80]	; (8011750 <tcp_slowtmr+0x5a4>)
 8011700:	781b      	ldrb	r3, [r3, #0]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d000      	beq.n	8011708 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8011706:	e562      	b.n	80111ce <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011708:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801170c:	2b00      	cmp	r3, #0
 801170e:	d102      	bne.n	8011716 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8011710:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011712:	f004 f8bb 	bl	801588c <tcp_output>
  while (pcb != NULL) {
 8011716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011718:	2b00      	cmp	r3, #0
 801171a:	f47f ad5e 	bne.w	80111da <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801171e:	2300      	movs	r3, #0
 8011720:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8011722:	4b0c      	ldr	r3, [pc, #48]	; (8011754 <tcp_slowtmr+0x5a8>)
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011728:	e069      	b.n	80117fe <tcp_slowtmr+0x652>
 801172a:	bf00      	nop
 801172c:	24007868 	.word	0x24007868
 8011730:	000a4cb8 	.word	0x000a4cb8
 8011734:	10624dd3 	.word	0x10624dd3
 8011738:	000124f8 	.word	0x000124f8
 801173c:	24007864 	.word	0x24007864
 8011740:	0801b668 	.word	0x0801b668
 8011744:	0801baa0 	.word	0x0801baa0
 8011748:	0801b6ac 	.word	0x0801b6ac
 801174c:	0801bacc 	.word	0x0801bacc
 8011750:	24007860 	.word	0x24007860
 8011754:	24007874 	.word	0x24007874
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801175a:	7d1b      	ldrb	r3, [r3, #20]
 801175c:	2b0a      	cmp	r3, #10
 801175e:	d006      	beq.n	801176e <tcp_slowtmr+0x5c2>
 8011760:	4b2b      	ldr	r3, [pc, #172]	; (8011810 <tcp_slowtmr+0x664>)
 8011762:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8011766:	492b      	ldr	r1, [pc, #172]	; (8011814 <tcp_slowtmr+0x668>)
 8011768:	482b      	ldr	r0, [pc, #172]	; (8011818 <tcp_slowtmr+0x66c>)
 801176a:	f008 f963 	bl	8019a34 <iprintf>
    pcb_remove = 0;
 801176e:	2300      	movs	r3, #0
 8011770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011774:	4b29      	ldr	r3, [pc, #164]	; (801181c <tcp_slowtmr+0x670>)
 8011776:	681a      	ldr	r2, [r3, #0]
 8011778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801177a:	6a1b      	ldr	r3, [r3, #32]
 801177c:	1ad3      	subs	r3, r2, r3
 801177e:	2bf0      	cmp	r3, #240	; 0xf0
 8011780:	d904      	bls.n	801178c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8011782:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011786:	3301      	adds	r3, #1
 8011788:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801178c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011790:	2b00      	cmp	r3, #0
 8011792:	d02f      	beq.n	80117f4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011794:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011796:	f000 fc11 	bl	8011fbc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801179a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801179c:	2b00      	cmp	r3, #0
 801179e:	d010      	beq.n	80117c2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80117a0:	4b1f      	ldr	r3, [pc, #124]	; (8011820 <tcp_slowtmr+0x674>)
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80117a6:	429a      	cmp	r2, r3
 80117a8:	d106      	bne.n	80117b8 <tcp_slowtmr+0x60c>
 80117aa:	4b19      	ldr	r3, [pc, #100]	; (8011810 <tcp_slowtmr+0x664>)
 80117ac:	f240 52af 	movw	r2, #1455	; 0x5af
 80117b0:	491c      	ldr	r1, [pc, #112]	; (8011824 <tcp_slowtmr+0x678>)
 80117b2:	4819      	ldr	r0, [pc, #100]	; (8011818 <tcp_slowtmr+0x66c>)
 80117b4:	f008 f93e 	bl	8019a34 <iprintf>
        prev->next = pcb->next;
 80117b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117ba:	68da      	ldr	r2, [r3, #12]
 80117bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117be:	60da      	str	r2, [r3, #12]
 80117c0:	e00f      	b.n	80117e2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80117c2:	4b17      	ldr	r3, [pc, #92]	; (8011820 <tcp_slowtmr+0x674>)
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80117c8:	429a      	cmp	r2, r3
 80117ca:	d006      	beq.n	80117da <tcp_slowtmr+0x62e>
 80117cc:	4b10      	ldr	r3, [pc, #64]	; (8011810 <tcp_slowtmr+0x664>)
 80117ce:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80117d2:	4915      	ldr	r1, [pc, #84]	; (8011828 <tcp_slowtmr+0x67c>)
 80117d4:	4810      	ldr	r0, [pc, #64]	; (8011818 <tcp_slowtmr+0x66c>)
 80117d6:	f008 f92d 	bl	8019a34 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80117da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117dc:	68db      	ldr	r3, [r3, #12]
 80117de:	4a10      	ldr	r2, [pc, #64]	; (8011820 <tcp_slowtmr+0x674>)
 80117e0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80117e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117e4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80117e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117e8:	68db      	ldr	r3, [r3, #12]
 80117ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80117ec:	69f8      	ldr	r0, [r7, #28]
 80117ee:	f7fe ff85 	bl	80106fc <tcp_free>
 80117f2:	e004      	b.n	80117fe <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80117f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117f6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80117f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117fa:	68db      	ldr	r3, [r3, #12]
 80117fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80117fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011800:	2b00      	cmp	r3, #0
 8011802:	d1a9      	bne.n	8011758 <tcp_slowtmr+0x5ac>
    }
  }
}
 8011804:	bf00      	nop
 8011806:	bf00      	nop
 8011808:	3730      	adds	r7, #48	; 0x30
 801180a:	46bd      	mov	sp, r7
 801180c:	bdb0      	pop	{r4, r5, r7, pc}
 801180e:	bf00      	nop
 8011810:	0801b668 	.word	0x0801b668
 8011814:	0801baf8 	.word	0x0801baf8
 8011818:	0801b6ac 	.word	0x0801b6ac
 801181c:	24007868 	.word	0x24007868
 8011820:	24007874 	.word	0x24007874
 8011824:	0801bb28 	.word	0x0801bb28
 8011828:	0801bb50 	.word	0x0801bb50

0801182c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801182c:	b580      	push	{r7, lr}
 801182e:	b082      	sub	sp, #8
 8011830:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8011832:	4b2d      	ldr	r3, [pc, #180]	; (80118e8 <tcp_fasttmr+0xbc>)
 8011834:	781b      	ldrb	r3, [r3, #0]
 8011836:	3301      	adds	r3, #1
 8011838:	b2da      	uxtb	r2, r3
 801183a:	4b2b      	ldr	r3, [pc, #172]	; (80118e8 <tcp_fasttmr+0xbc>)
 801183c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801183e:	4b2b      	ldr	r3, [pc, #172]	; (80118ec <tcp_fasttmr+0xc0>)
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011844:	e048      	b.n	80118d8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	7f9a      	ldrb	r2, [r3, #30]
 801184a:	4b27      	ldr	r3, [pc, #156]	; (80118e8 <tcp_fasttmr+0xbc>)
 801184c:	781b      	ldrb	r3, [r3, #0]
 801184e:	429a      	cmp	r2, r3
 8011850:	d03f      	beq.n	80118d2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8011852:	4b25      	ldr	r3, [pc, #148]	; (80118e8 <tcp_fasttmr+0xbc>)
 8011854:	781a      	ldrb	r2, [r3, #0]
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	8b5b      	ldrh	r3, [r3, #26]
 801185e:	f003 0301 	and.w	r3, r3, #1
 8011862:	2b00      	cmp	r3, #0
 8011864:	d010      	beq.n	8011888 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	8b5b      	ldrh	r3, [r3, #26]
 801186a:	f043 0302 	orr.w	r3, r3, #2
 801186e:	b29a      	uxth	r2, r3
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8011874:	6878      	ldr	r0, [r7, #4]
 8011876:	f004 f809 	bl	801588c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	8b5b      	ldrh	r3, [r3, #26]
 801187e:	f023 0303 	bic.w	r3, r3, #3
 8011882:	b29a      	uxth	r2, r3
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	8b5b      	ldrh	r3, [r3, #26]
 801188c:	f003 0308 	and.w	r3, r3, #8
 8011890:	2b00      	cmp	r3, #0
 8011892:	d009      	beq.n	80118a8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	8b5b      	ldrh	r3, [r3, #26]
 8011898:	f023 0308 	bic.w	r3, r3, #8
 801189c:	b29a      	uxth	r2, r3
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80118a2:	6878      	ldr	r0, [r7, #4]
 80118a4:	f7ff f8be 	bl	8010a24 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	68db      	ldr	r3, [r3, #12]
 80118ac:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d00a      	beq.n	80118cc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80118b6:	4b0e      	ldr	r3, [pc, #56]	; (80118f0 <tcp_fasttmr+0xc4>)
 80118b8:	2200      	movs	r2, #0
 80118ba:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80118bc:	6878      	ldr	r0, [r7, #4]
 80118be:	f000 f819 	bl	80118f4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80118c2:	4b0b      	ldr	r3, [pc, #44]	; (80118f0 <tcp_fasttmr+0xc4>)
 80118c4:	781b      	ldrb	r3, [r3, #0]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d000      	beq.n	80118cc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80118ca:	e7b8      	b.n	801183e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80118cc:	683b      	ldr	r3, [r7, #0]
 80118ce:	607b      	str	r3, [r7, #4]
 80118d0:	e002      	b.n	80118d8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	68db      	ldr	r3, [r3, #12]
 80118d6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d1b3      	bne.n	8011846 <tcp_fasttmr+0x1a>
    }
  }
}
 80118de:	bf00      	nop
 80118e0:	bf00      	nop
 80118e2:	3708      	adds	r7, #8
 80118e4:	46bd      	mov	sp, r7
 80118e6:	bd80      	pop	{r7, pc}
 80118e8:	24004122 	.word	0x24004122
 80118ec:	24007864 	.word	0x24007864
 80118f0:	24007860 	.word	0x24007860

080118f4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80118f4:	b590      	push	{r4, r7, lr}
 80118f6:	b085      	sub	sp, #20
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d109      	bne.n	8011916 <tcp_process_refused_data+0x22>
 8011902:	4b37      	ldr	r3, [pc, #220]	; (80119e0 <tcp_process_refused_data+0xec>)
 8011904:	f240 6209 	movw	r2, #1545	; 0x609
 8011908:	4936      	ldr	r1, [pc, #216]	; (80119e4 <tcp_process_refused_data+0xf0>)
 801190a:	4837      	ldr	r0, [pc, #220]	; (80119e8 <tcp_process_refused_data+0xf4>)
 801190c:	f008 f892 	bl	8019a34 <iprintf>
 8011910:	f06f 030f 	mvn.w	r3, #15
 8011914:	e060      	b.n	80119d8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801191a:	7b5b      	ldrb	r3, [r3, #13]
 801191c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011922:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	2200      	movs	r2, #0
 8011928:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011930:	2b00      	cmp	r3, #0
 8011932:	d00b      	beq.n	801194c <tcp_process_refused_data+0x58>
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	6918      	ldr	r0, [r3, #16]
 801193e:	2300      	movs	r3, #0
 8011940:	68ba      	ldr	r2, [r7, #8]
 8011942:	6879      	ldr	r1, [r7, #4]
 8011944:	47a0      	blx	r4
 8011946:	4603      	mov	r3, r0
 8011948:	73fb      	strb	r3, [r7, #15]
 801194a:	e007      	b.n	801195c <tcp_process_refused_data+0x68>
 801194c:	2300      	movs	r3, #0
 801194e:	68ba      	ldr	r2, [r7, #8]
 8011950:	6879      	ldr	r1, [r7, #4]
 8011952:	2000      	movs	r0, #0
 8011954:	f000 f8c2 	bl	8011adc <tcp_recv_null>
 8011958:	4603      	mov	r3, r0
 801195a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801195c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d12a      	bne.n	80119ba <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8011964:	7bbb      	ldrb	r3, [r7, #14]
 8011966:	f003 0320 	and.w	r3, r3, #32
 801196a:	2b00      	cmp	r3, #0
 801196c:	d033      	beq.n	80119d6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011972:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011976:	d005      	beq.n	8011984 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801197c:	3301      	adds	r3, #1
 801197e:	b29a      	uxth	r2, r3
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801198a:	2b00      	cmp	r3, #0
 801198c:	d00b      	beq.n	80119a6 <tcp_process_refused_data+0xb2>
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	6918      	ldr	r0, [r3, #16]
 8011998:	2300      	movs	r3, #0
 801199a:	2200      	movs	r2, #0
 801199c:	6879      	ldr	r1, [r7, #4]
 801199e:	47a0      	blx	r4
 80119a0:	4603      	mov	r3, r0
 80119a2:	73fb      	strb	r3, [r7, #15]
 80119a4:	e001      	b.n	80119aa <tcp_process_refused_data+0xb6>
 80119a6:	2300      	movs	r3, #0
 80119a8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80119aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119ae:	f113 0f0d 	cmn.w	r3, #13
 80119b2:	d110      	bne.n	80119d6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80119b4:	f06f 030c 	mvn.w	r3, #12
 80119b8:	e00e      	b.n	80119d8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80119ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119be:	f113 0f0d 	cmn.w	r3, #13
 80119c2:	d102      	bne.n	80119ca <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80119c4:	f06f 030c 	mvn.w	r3, #12
 80119c8:	e006      	b.n	80119d8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	68ba      	ldr	r2, [r7, #8]
 80119ce:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80119d0:	f06f 0304 	mvn.w	r3, #4
 80119d4:	e000      	b.n	80119d8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80119d6:	2300      	movs	r3, #0
}
 80119d8:	4618      	mov	r0, r3
 80119da:	3714      	adds	r7, #20
 80119dc:	46bd      	mov	sp, r7
 80119de:	bd90      	pop	{r4, r7, pc}
 80119e0:	0801b668 	.word	0x0801b668
 80119e4:	0801bb78 	.word	0x0801bb78
 80119e8:	0801b6ac 	.word	0x0801b6ac

080119ec <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b084      	sub	sp, #16
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80119f4:	e007      	b.n	8011a06 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80119fc:	6878      	ldr	r0, [r7, #4]
 80119fe:	f000 f80a 	bl	8011a16 <tcp_seg_free>
    seg = next;
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d1f4      	bne.n	80119f6 <tcp_segs_free+0xa>
  }
}
 8011a0c:	bf00      	nop
 8011a0e:	bf00      	nop
 8011a10:	3710      	adds	r7, #16
 8011a12:	46bd      	mov	sp, r7
 8011a14:	bd80      	pop	{r7, pc}

08011a16 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8011a16:	b580      	push	{r7, lr}
 8011a18:	b082      	sub	sp, #8
 8011a1a:	af00      	add	r7, sp, #0
 8011a1c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d00c      	beq.n	8011a3e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	685b      	ldr	r3, [r3, #4]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d004      	beq.n	8011a36 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	685b      	ldr	r3, [r3, #4]
 8011a30:	4618      	mov	r0, r3
 8011a32:	f7fe fba7 	bl	8010184 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8011a36:	6879      	ldr	r1, [r7, #4]
 8011a38:	2003      	movs	r0, #3
 8011a3a:	f7fd fcff 	bl	800f43c <memp_free>
  }
}
 8011a3e:	bf00      	nop
 8011a40:	3708      	adds	r7, #8
 8011a42:	46bd      	mov	sp, r7
 8011a44:	bd80      	pop	{r7, pc}
	...

08011a48 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b082      	sub	sp, #8
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
 8011a50:	460b      	mov	r3, r1
 8011a52:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d107      	bne.n	8011a6a <tcp_setprio+0x22>
 8011a5a:	4b07      	ldr	r3, [pc, #28]	; (8011a78 <tcp_setprio+0x30>)
 8011a5c:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8011a60:	4906      	ldr	r1, [pc, #24]	; (8011a7c <tcp_setprio+0x34>)
 8011a62:	4807      	ldr	r0, [pc, #28]	; (8011a80 <tcp_setprio+0x38>)
 8011a64:	f007 ffe6 	bl	8019a34 <iprintf>
 8011a68:	e002      	b.n	8011a70 <tcp_setprio+0x28>

  pcb->prio = prio;
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	78fa      	ldrb	r2, [r7, #3]
 8011a6e:	755a      	strb	r2, [r3, #21]
}
 8011a70:	3708      	adds	r7, #8
 8011a72:	46bd      	mov	sp, r7
 8011a74:	bd80      	pop	{r7, pc}
 8011a76:	bf00      	nop
 8011a78:	0801b668 	.word	0x0801b668
 8011a7c:	0801bba0 	.word	0x0801bba0
 8011a80:	0801b6ac 	.word	0x0801b6ac

08011a84 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8011a84:	b580      	push	{r7, lr}
 8011a86:	b084      	sub	sp, #16
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d106      	bne.n	8011aa0 <tcp_seg_copy+0x1c>
 8011a92:	4b0f      	ldr	r3, [pc, #60]	; (8011ad0 <tcp_seg_copy+0x4c>)
 8011a94:	f240 6282 	movw	r2, #1666	; 0x682
 8011a98:	490e      	ldr	r1, [pc, #56]	; (8011ad4 <tcp_seg_copy+0x50>)
 8011a9a:	480f      	ldr	r0, [pc, #60]	; (8011ad8 <tcp_seg_copy+0x54>)
 8011a9c:	f007 ffca 	bl	8019a34 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8011aa0:	2003      	movs	r0, #3
 8011aa2:	f7fd fc55 	bl	800f350 <memp_malloc>
 8011aa6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d101      	bne.n	8011ab2 <tcp_seg_copy+0x2e>
    return NULL;
 8011aae:	2300      	movs	r3, #0
 8011ab0:	e00a      	b.n	8011ac8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8011ab2:	2210      	movs	r2, #16
 8011ab4:	6879      	ldr	r1, [r7, #4]
 8011ab6:	68f8      	ldr	r0, [r7, #12]
 8011ab8:	f007 ff4b 	bl	8019952 <memcpy>
  pbuf_ref(cseg->p);
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	685b      	ldr	r3, [r3, #4]
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	f7fe fc05 	bl	80102d0 <pbuf_ref>
  return cseg;
 8011ac6:	68fb      	ldr	r3, [r7, #12]
}
 8011ac8:	4618      	mov	r0, r3
 8011aca:	3710      	adds	r7, #16
 8011acc:	46bd      	mov	sp, r7
 8011ace:	bd80      	pop	{r7, pc}
 8011ad0:	0801b668 	.word	0x0801b668
 8011ad4:	0801bbbc 	.word	0x0801bbbc
 8011ad8:	0801b6ac 	.word	0x0801b6ac

08011adc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b084      	sub	sp, #16
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	60f8      	str	r0, [r7, #12]
 8011ae4:	60b9      	str	r1, [r7, #8]
 8011ae6:	607a      	str	r2, [r7, #4]
 8011ae8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8011aea:	68bb      	ldr	r3, [r7, #8]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d109      	bne.n	8011b04 <tcp_recv_null+0x28>
 8011af0:	4b12      	ldr	r3, [pc, #72]	; (8011b3c <tcp_recv_null+0x60>)
 8011af2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011af6:	4912      	ldr	r1, [pc, #72]	; (8011b40 <tcp_recv_null+0x64>)
 8011af8:	4812      	ldr	r0, [pc, #72]	; (8011b44 <tcp_recv_null+0x68>)
 8011afa:	f007 ff9b 	bl	8019a34 <iprintf>
 8011afe:	f06f 030f 	mvn.w	r3, #15
 8011b02:	e016      	b.n	8011b32 <tcp_recv_null+0x56>

  if (p != NULL) {
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d009      	beq.n	8011b1e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	891b      	ldrh	r3, [r3, #8]
 8011b0e:	4619      	mov	r1, r3
 8011b10:	68b8      	ldr	r0, [r7, #8]
 8011b12:	f7ff fab5 	bl	8011080 <tcp_recved>
    pbuf_free(p);
 8011b16:	6878      	ldr	r0, [r7, #4]
 8011b18:	f7fe fb34 	bl	8010184 <pbuf_free>
 8011b1c:	e008      	b.n	8011b30 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8011b1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d104      	bne.n	8011b30 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8011b26:	68b8      	ldr	r0, [r7, #8]
 8011b28:	f7fe ffe6 	bl	8010af8 <tcp_close>
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	e000      	b.n	8011b32 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8011b30:	2300      	movs	r3, #0
}
 8011b32:	4618      	mov	r0, r3
 8011b34:	3710      	adds	r7, #16
 8011b36:	46bd      	mov	sp, r7
 8011b38:	bd80      	pop	{r7, pc}
 8011b3a:	bf00      	nop
 8011b3c:	0801b668 	.word	0x0801b668
 8011b40:	0801bbd8 	.word	0x0801bbd8
 8011b44:	0801b6ac 	.word	0x0801b6ac

08011b48 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b086      	sub	sp, #24
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	4603      	mov	r3, r0
 8011b50:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8011b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	db01      	blt.n	8011b5e <tcp_kill_prio+0x16>
 8011b5a:	79fb      	ldrb	r3, [r7, #7]
 8011b5c:	e000      	b.n	8011b60 <tcp_kill_prio+0x18>
 8011b5e:	237f      	movs	r3, #127	; 0x7f
 8011b60:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8011b62:	7afb      	ldrb	r3, [r7, #11]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d034      	beq.n	8011bd2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8011b68:	7afb      	ldrb	r3, [r7, #11]
 8011b6a:	3b01      	subs	r3, #1
 8011b6c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8011b6e:	2300      	movs	r3, #0
 8011b70:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011b72:	2300      	movs	r3, #0
 8011b74:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011b76:	4b19      	ldr	r3, [pc, #100]	; (8011bdc <tcp_kill_prio+0x94>)
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	617b      	str	r3, [r7, #20]
 8011b7c:	e01f      	b.n	8011bbe <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8011b7e:	697b      	ldr	r3, [r7, #20]
 8011b80:	7d5b      	ldrb	r3, [r3, #21]
 8011b82:	7afa      	ldrb	r2, [r7, #11]
 8011b84:	429a      	cmp	r2, r3
 8011b86:	d80c      	bhi.n	8011ba2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011b88:	697b      	ldr	r3, [r7, #20]
 8011b8a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8011b8c:	7afa      	ldrb	r2, [r7, #11]
 8011b8e:	429a      	cmp	r2, r3
 8011b90:	d112      	bne.n	8011bb8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011b92:	4b13      	ldr	r3, [pc, #76]	; (8011be0 <tcp_kill_prio+0x98>)
 8011b94:	681a      	ldr	r2, [r3, #0]
 8011b96:	697b      	ldr	r3, [r7, #20]
 8011b98:	6a1b      	ldr	r3, [r3, #32]
 8011b9a:	1ad3      	subs	r3, r2, r3
 8011b9c:	68fa      	ldr	r2, [r7, #12]
 8011b9e:	429a      	cmp	r2, r3
 8011ba0:	d80a      	bhi.n	8011bb8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8011ba2:	4b0f      	ldr	r3, [pc, #60]	; (8011be0 <tcp_kill_prio+0x98>)
 8011ba4:	681a      	ldr	r2, [r3, #0]
 8011ba6:	697b      	ldr	r3, [r7, #20]
 8011ba8:	6a1b      	ldr	r3, [r3, #32]
 8011baa:	1ad3      	subs	r3, r2, r3
 8011bac:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8011bae:	697b      	ldr	r3, [r7, #20]
 8011bb0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8011bb2:	697b      	ldr	r3, [r7, #20]
 8011bb4:	7d5b      	ldrb	r3, [r3, #21]
 8011bb6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011bb8:	697b      	ldr	r3, [r7, #20]
 8011bba:	68db      	ldr	r3, [r3, #12]
 8011bbc:	617b      	str	r3, [r7, #20]
 8011bbe:	697b      	ldr	r3, [r7, #20]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d1dc      	bne.n	8011b7e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8011bc4:	693b      	ldr	r3, [r7, #16]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d004      	beq.n	8011bd4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011bca:	6938      	ldr	r0, [r7, #16]
 8011bcc:	f7ff f87e 	bl	8010ccc <tcp_abort>
 8011bd0:	e000      	b.n	8011bd4 <tcp_kill_prio+0x8c>
    return;
 8011bd2:	bf00      	nop
  }
}
 8011bd4:	3718      	adds	r7, #24
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	bd80      	pop	{r7, pc}
 8011bda:	bf00      	nop
 8011bdc:	24007864 	.word	0x24007864
 8011be0:	24007868 	.word	0x24007868

08011be4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b086      	sub	sp, #24
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	4603      	mov	r3, r0
 8011bec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8011bee:	79fb      	ldrb	r3, [r7, #7]
 8011bf0:	2b08      	cmp	r3, #8
 8011bf2:	d009      	beq.n	8011c08 <tcp_kill_state+0x24>
 8011bf4:	79fb      	ldrb	r3, [r7, #7]
 8011bf6:	2b09      	cmp	r3, #9
 8011bf8:	d006      	beq.n	8011c08 <tcp_kill_state+0x24>
 8011bfa:	4b1a      	ldr	r3, [pc, #104]	; (8011c64 <tcp_kill_state+0x80>)
 8011bfc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8011c00:	4919      	ldr	r1, [pc, #100]	; (8011c68 <tcp_kill_state+0x84>)
 8011c02:	481a      	ldr	r0, [pc, #104]	; (8011c6c <tcp_kill_state+0x88>)
 8011c04:	f007 ff16 	bl	8019a34 <iprintf>

  inactivity = 0;
 8011c08:	2300      	movs	r3, #0
 8011c0a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011c10:	4b17      	ldr	r3, [pc, #92]	; (8011c70 <tcp_kill_state+0x8c>)
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	617b      	str	r3, [r7, #20]
 8011c16:	e017      	b.n	8011c48 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8011c18:	697b      	ldr	r3, [r7, #20]
 8011c1a:	7d1b      	ldrb	r3, [r3, #20]
 8011c1c:	79fa      	ldrb	r2, [r7, #7]
 8011c1e:	429a      	cmp	r2, r3
 8011c20:	d10f      	bne.n	8011c42 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011c22:	4b14      	ldr	r3, [pc, #80]	; (8011c74 <tcp_kill_state+0x90>)
 8011c24:	681a      	ldr	r2, [r3, #0]
 8011c26:	697b      	ldr	r3, [r7, #20]
 8011c28:	6a1b      	ldr	r3, [r3, #32]
 8011c2a:	1ad3      	subs	r3, r2, r3
 8011c2c:	68fa      	ldr	r2, [r7, #12]
 8011c2e:	429a      	cmp	r2, r3
 8011c30:	d807      	bhi.n	8011c42 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8011c32:	4b10      	ldr	r3, [pc, #64]	; (8011c74 <tcp_kill_state+0x90>)
 8011c34:	681a      	ldr	r2, [r3, #0]
 8011c36:	697b      	ldr	r3, [r7, #20]
 8011c38:	6a1b      	ldr	r3, [r3, #32]
 8011c3a:	1ad3      	subs	r3, r2, r3
 8011c3c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8011c3e:	697b      	ldr	r3, [r7, #20]
 8011c40:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011c42:	697b      	ldr	r3, [r7, #20]
 8011c44:	68db      	ldr	r3, [r3, #12]
 8011c46:	617b      	str	r3, [r7, #20]
 8011c48:	697b      	ldr	r3, [r7, #20]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d1e4      	bne.n	8011c18 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8011c4e:	693b      	ldr	r3, [r7, #16]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d003      	beq.n	8011c5c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8011c54:	2100      	movs	r1, #0
 8011c56:	6938      	ldr	r0, [r7, #16]
 8011c58:	f7fe ff7a 	bl	8010b50 <tcp_abandon>
  }
}
 8011c5c:	bf00      	nop
 8011c5e:	3718      	adds	r7, #24
 8011c60:	46bd      	mov	sp, r7
 8011c62:	bd80      	pop	{r7, pc}
 8011c64:	0801b668 	.word	0x0801b668
 8011c68:	0801bbf4 	.word	0x0801bbf4
 8011c6c:	0801b6ac 	.word	0x0801b6ac
 8011c70:	24007864 	.word	0x24007864
 8011c74:	24007868 	.word	0x24007868

08011c78 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b084      	sub	sp, #16
 8011c7c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8011c7e:	2300      	movs	r3, #0
 8011c80:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8011c82:	2300      	movs	r3, #0
 8011c84:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011c86:	4b12      	ldr	r3, [pc, #72]	; (8011cd0 <tcp_kill_timewait+0x58>)
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	60fb      	str	r3, [r7, #12]
 8011c8c:	e012      	b.n	8011cb4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011c8e:	4b11      	ldr	r3, [pc, #68]	; (8011cd4 <tcp_kill_timewait+0x5c>)
 8011c90:	681a      	ldr	r2, [r3, #0]
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	6a1b      	ldr	r3, [r3, #32]
 8011c96:	1ad3      	subs	r3, r2, r3
 8011c98:	687a      	ldr	r2, [r7, #4]
 8011c9a:	429a      	cmp	r2, r3
 8011c9c:	d807      	bhi.n	8011cae <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8011c9e:	4b0d      	ldr	r3, [pc, #52]	; (8011cd4 <tcp_kill_timewait+0x5c>)
 8011ca0:	681a      	ldr	r2, [r3, #0]
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	6a1b      	ldr	r3, [r3, #32]
 8011ca6:	1ad3      	subs	r3, r2, r3
 8011ca8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	68db      	ldr	r3, [r3, #12]
 8011cb2:	60fb      	str	r3, [r7, #12]
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d1e9      	bne.n	8011c8e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8011cba:	68bb      	ldr	r3, [r7, #8]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d002      	beq.n	8011cc6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011cc0:	68b8      	ldr	r0, [r7, #8]
 8011cc2:	f7ff f803 	bl	8010ccc <tcp_abort>
  }
}
 8011cc6:	bf00      	nop
 8011cc8:	3710      	adds	r7, #16
 8011cca:	46bd      	mov	sp, r7
 8011ccc:	bd80      	pop	{r7, pc}
 8011cce:	bf00      	nop
 8011cd0:	24007874 	.word	0x24007874
 8011cd4:	24007868 	.word	0x24007868

08011cd8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b082      	sub	sp, #8
 8011cdc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8011cde:	4b10      	ldr	r3, [pc, #64]	; (8011d20 <tcp_handle_closepend+0x48>)
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011ce4:	e014      	b.n	8011d10 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	68db      	ldr	r3, [r3, #12]
 8011cea:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	8b5b      	ldrh	r3, [r3, #26]
 8011cf0:	f003 0308 	and.w	r3, r3, #8
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d009      	beq.n	8011d0c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	8b5b      	ldrh	r3, [r3, #26]
 8011cfc:	f023 0308 	bic.w	r3, r3, #8
 8011d00:	b29a      	uxth	r2, r3
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8011d06:	6878      	ldr	r0, [r7, #4]
 8011d08:	f7fe fe8c 	bl	8010a24 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8011d0c:	683b      	ldr	r3, [r7, #0]
 8011d0e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d1e7      	bne.n	8011ce6 <tcp_handle_closepend+0xe>
  }
}
 8011d16:	bf00      	nop
 8011d18:	bf00      	nop
 8011d1a:	3708      	adds	r7, #8
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	bd80      	pop	{r7, pc}
 8011d20:	24007864 	.word	0x24007864

08011d24 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8011d24:	b580      	push	{r7, lr}
 8011d26:	b084      	sub	sp, #16
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	4603      	mov	r3, r0
 8011d2c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011d2e:	2001      	movs	r0, #1
 8011d30:	f7fd fb0e 	bl	800f350 <memp_malloc>
 8011d34:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d126      	bne.n	8011d8a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8011d3c:	f7ff ffcc 	bl	8011cd8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8011d40:	f7ff ff9a 	bl	8011c78 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011d44:	2001      	movs	r0, #1
 8011d46:	f7fd fb03 	bl	800f350 <memp_malloc>
 8011d4a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d11b      	bne.n	8011d8a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8011d52:	2009      	movs	r0, #9
 8011d54:	f7ff ff46 	bl	8011be4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011d58:	2001      	movs	r0, #1
 8011d5a:	f7fd faf9 	bl	800f350 <memp_malloc>
 8011d5e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d111      	bne.n	8011d8a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8011d66:	2008      	movs	r0, #8
 8011d68:	f7ff ff3c 	bl	8011be4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011d6c:	2001      	movs	r0, #1
 8011d6e:	f7fd faef 	bl	800f350 <memp_malloc>
 8011d72:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d107      	bne.n	8011d8a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8011d7a:	79fb      	ldrb	r3, [r7, #7]
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	f7ff fee3 	bl	8011b48 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011d82:	2001      	movs	r0, #1
 8011d84:	f7fd fae4 	bl	800f350 <memp_malloc>
 8011d88:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d03f      	beq.n	8011e10 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8011d90:	229c      	movs	r2, #156	; 0x9c
 8011d92:	2100      	movs	r1, #0
 8011d94:	68f8      	ldr	r0, [r7, #12]
 8011d96:	f007 fdea 	bl	801996e <memset>
    pcb->prio = prio;
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	79fa      	ldrb	r2, [r7, #7]
 8011d9e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8011da6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8011db0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	22ff      	movs	r2, #255	; 0xff
 8011dbe:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011dc6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	2206      	movs	r2, #6
 8011dcc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	2206      	movs	r2, #6
 8011dd4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011ddc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	2201      	movs	r2, #1
 8011de2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8011de6:	4b0d      	ldr	r3, [pc, #52]	; (8011e1c <tcp_alloc+0xf8>)
 8011de8:	681a      	ldr	r2, [r3, #0]
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8011dee:	4b0c      	ldr	r3, [pc, #48]	; (8011e20 <tcp_alloc+0xfc>)
 8011df0:	781a      	ldrb	r2, [r3, #0]
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8011dfc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	4a08      	ldr	r2, [pc, #32]	; (8011e24 <tcp_alloc+0x100>)
 8011e04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	4a07      	ldr	r2, [pc, #28]	; (8011e28 <tcp_alloc+0x104>)
 8011e0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8011e10:	68fb      	ldr	r3, [r7, #12]
}
 8011e12:	4618      	mov	r0, r3
 8011e14:	3710      	adds	r7, #16
 8011e16:	46bd      	mov	sp, r7
 8011e18:	bd80      	pop	{r7, pc}
 8011e1a:	bf00      	nop
 8011e1c:	24007868 	.word	0x24007868
 8011e20:	24004122 	.word	0x24004122
 8011e24:	08011add 	.word	0x08011add
 8011e28:	006ddd00 	.word	0x006ddd00

08011e2c <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8011e30:	2040      	movs	r0, #64	; 0x40
 8011e32:	f7ff ff77 	bl	8011d24 <tcp_alloc>
 8011e36:	4603      	mov	r3, r0
}
 8011e38:	4618      	mov	r0, r3
 8011e3a:	bd80      	pop	{r7, pc}

08011e3c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8011e3c:	b480      	push	{r7}
 8011e3e:	b083      	sub	sp, #12
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
 8011e44:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d002      	beq.n	8011e52 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	683a      	ldr	r2, [r7, #0]
 8011e50:	611a      	str	r2, [r3, #16]
  }
}
 8011e52:	bf00      	nop
 8011e54:	370c      	adds	r7, #12
 8011e56:	46bd      	mov	sp, r7
 8011e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5c:	4770      	bx	lr
	...

08011e60 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b082      	sub	sp, #8
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
 8011e68:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d00e      	beq.n	8011e8e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	7d1b      	ldrb	r3, [r3, #20]
 8011e74:	2b01      	cmp	r3, #1
 8011e76:	d106      	bne.n	8011e86 <tcp_recv+0x26>
 8011e78:	4b07      	ldr	r3, [pc, #28]	; (8011e98 <tcp_recv+0x38>)
 8011e7a:	f240 72df 	movw	r2, #2015	; 0x7df
 8011e7e:	4907      	ldr	r1, [pc, #28]	; (8011e9c <tcp_recv+0x3c>)
 8011e80:	4807      	ldr	r0, [pc, #28]	; (8011ea0 <tcp_recv+0x40>)
 8011e82:	f007 fdd7 	bl	8019a34 <iprintf>
    pcb->recv = recv;
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	683a      	ldr	r2, [r7, #0]
 8011e8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8011e8e:	bf00      	nop
 8011e90:	3708      	adds	r7, #8
 8011e92:	46bd      	mov	sp, r7
 8011e94:	bd80      	pop	{r7, pc}
 8011e96:	bf00      	nop
 8011e98:	0801b668 	.word	0x0801b668
 8011e9c:	0801bc04 	.word	0x0801bc04
 8011ea0:	0801b6ac 	.word	0x0801b6ac

08011ea4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8011ea4:	b580      	push	{r7, lr}
 8011ea6:	b082      	sub	sp, #8
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	6078      	str	r0, [r7, #4]
 8011eac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d00e      	beq.n	8011ed2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	7d1b      	ldrb	r3, [r3, #20]
 8011eb8:	2b01      	cmp	r3, #1
 8011eba:	d106      	bne.n	8011eca <tcp_sent+0x26>
 8011ebc:	4b07      	ldr	r3, [pc, #28]	; (8011edc <tcp_sent+0x38>)
 8011ebe:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8011ec2:	4907      	ldr	r1, [pc, #28]	; (8011ee0 <tcp_sent+0x3c>)
 8011ec4:	4807      	ldr	r0, [pc, #28]	; (8011ee4 <tcp_sent+0x40>)
 8011ec6:	f007 fdb5 	bl	8019a34 <iprintf>
    pcb->sent = sent;
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	683a      	ldr	r2, [r7, #0]
 8011ece:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8011ed2:	bf00      	nop
 8011ed4:	3708      	adds	r7, #8
 8011ed6:	46bd      	mov	sp, r7
 8011ed8:	bd80      	pop	{r7, pc}
 8011eda:	bf00      	nop
 8011edc:	0801b668 	.word	0x0801b668
 8011ee0:	0801bc2c 	.word	0x0801bc2c
 8011ee4:	0801b6ac 	.word	0x0801b6ac

08011ee8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8011ee8:	b580      	push	{r7, lr}
 8011eea:	b082      	sub	sp, #8
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	6078      	str	r0, [r7, #4]
 8011ef0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d00e      	beq.n	8011f16 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	7d1b      	ldrb	r3, [r3, #20]
 8011efc:	2b01      	cmp	r3, #1
 8011efe:	d106      	bne.n	8011f0e <tcp_err+0x26>
 8011f00:	4b07      	ldr	r3, [pc, #28]	; (8011f20 <tcp_err+0x38>)
 8011f02:	f640 020d 	movw	r2, #2061	; 0x80d
 8011f06:	4907      	ldr	r1, [pc, #28]	; (8011f24 <tcp_err+0x3c>)
 8011f08:	4807      	ldr	r0, [pc, #28]	; (8011f28 <tcp_err+0x40>)
 8011f0a:	f007 fd93 	bl	8019a34 <iprintf>
    pcb->errf = err;
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	683a      	ldr	r2, [r7, #0]
 8011f12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8011f16:	bf00      	nop
 8011f18:	3708      	adds	r7, #8
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	bd80      	pop	{r7, pc}
 8011f1e:	bf00      	nop
 8011f20:	0801b668 	.word	0x0801b668
 8011f24:	0801bc54 	.word	0x0801bc54
 8011f28:	0801b6ac 	.word	0x0801b6ac

08011f2c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8011f2c:	b480      	push	{r7}
 8011f2e:	b085      	sub	sp, #20
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
 8011f34:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d008      	beq.n	8011f4e <tcp_accept+0x22>
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	7d1b      	ldrb	r3, [r3, #20]
 8011f40:	2b01      	cmp	r3, #1
 8011f42:	d104      	bne.n	8011f4e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	683a      	ldr	r2, [r7, #0]
 8011f4c:	619a      	str	r2, [r3, #24]
  }
}
 8011f4e:	bf00      	nop
 8011f50:	3714      	adds	r7, #20
 8011f52:	46bd      	mov	sp, r7
 8011f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f58:	4770      	bx	lr
	...

08011f5c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b084      	sub	sp, #16
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	60f8      	str	r0, [r7, #12]
 8011f64:	60b9      	str	r1, [r7, #8]
 8011f66:	4613      	mov	r3, r2
 8011f68:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d107      	bne.n	8011f80 <tcp_poll+0x24>
 8011f70:	4b0e      	ldr	r3, [pc, #56]	; (8011fac <tcp_poll+0x50>)
 8011f72:	f640 023d 	movw	r2, #2109	; 0x83d
 8011f76:	490e      	ldr	r1, [pc, #56]	; (8011fb0 <tcp_poll+0x54>)
 8011f78:	480e      	ldr	r0, [pc, #56]	; (8011fb4 <tcp_poll+0x58>)
 8011f7a:	f007 fd5b 	bl	8019a34 <iprintf>
 8011f7e:	e011      	b.n	8011fa4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	7d1b      	ldrb	r3, [r3, #20]
 8011f84:	2b01      	cmp	r3, #1
 8011f86:	d106      	bne.n	8011f96 <tcp_poll+0x3a>
 8011f88:	4b08      	ldr	r3, [pc, #32]	; (8011fac <tcp_poll+0x50>)
 8011f8a:	f640 023e 	movw	r2, #2110	; 0x83e
 8011f8e:	490a      	ldr	r1, [pc, #40]	; (8011fb8 <tcp_poll+0x5c>)
 8011f90:	4808      	ldr	r0, [pc, #32]	; (8011fb4 <tcp_poll+0x58>)
 8011f92:	f007 fd4f 	bl	8019a34 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	68ba      	ldr	r2, [r7, #8]
 8011f9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	79fa      	ldrb	r2, [r7, #7]
 8011fa2:	775a      	strb	r2, [r3, #29]
}
 8011fa4:	3710      	adds	r7, #16
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	bd80      	pop	{r7, pc}
 8011faa:	bf00      	nop
 8011fac:	0801b668 	.word	0x0801b668
 8011fb0:	0801bc7c 	.word	0x0801bc7c
 8011fb4:	0801b6ac 	.word	0x0801b6ac
 8011fb8:	0801bc94 	.word	0x0801bc94

08011fbc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	b082      	sub	sp, #8
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d107      	bne.n	8011fda <tcp_pcb_purge+0x1e>
 8011fca:	4b21      	ldr	r3, [pc, #132]	; (8012050 <tcp_pcb_purge+0x94>)
 8011fcc:	f640 0251 	movw	r2, #2129	; 0x851
 8011fd0:	4920      	ldr	r1, [pc, #128]	; (8012054 <tcp_pcb_purge+0x98>)
 8011fd2:	4821      	ldr	r0, [pc, #132]	; (8012058 <tcp_pcb_purge+0x9c>)
 8011fd4:	f007 fd2e 	bl	8019a34 <iprintf>
 8011fd8:	e037      	b.n	801204a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	7d1b      	ldrb	r3, [r3, #20]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d033      	beq.n	801204a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8011fe6:	2b0a      	cmp	r3, #10
 8011fe8:	d02f      	beq.n	801204a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8011fee:	2b01      	cmp	r3, #1
 8011ff0:	d02b      	beq.n	801204a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d007      	beq.n	801200a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011ffe:	4618      	mov	r0, r3
 8012000:	f7fe f8c0 	bl	8010184 <pbuf_free>
      pcb->refused_data = NULL;
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	2200      	movs	r2, #0
 8012008:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801200e:	2b00      	cmp	r3, #0
 8012010:	d002      	beq.n	8012018 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8012012:	6878      	ldr	r0, [r7, #4]
 8012014:	f000 f986 	bl	8012324 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801201e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012024:	4618      	mov	r0, r3
 8012026:	f7ff fce1 	bl	80119ec <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801202e:	4618      	mov	r0, r3
 8012030:	f7ff fcdc 	bl	80119ec <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	2200      	movs	r2, #0
 8012038:	66da      	str	r2, [r3, #108]	; 0x6c
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	2200      	movs	r2, #0
 8012046:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801204a:	3708      	adds	r7, #8
 801204c:	46bd      	mov	sp, r7
 801204e:	bd80      	pop	{r7, pc}
 8012050:	0801b668 	.word	0x0801b668
 8012054:	0801bcb4 	.word	0x0801bcb4
 8012058:	0801b6ac 	.word	0x0801b6ac

0801205c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b084      	sub	sp, #16
 8012060:	af00      	add	r7, sp, #0
 8012062:	6078      	str	r0, [r7, #4]
 8012064:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8012066:	683b      	ldr	r3, [r7, #0]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d106      	bne.n	801207a <tcp_pcb_remove+0x1e>
 801206c:	4b3e      	ldr	r3, [pc, #248]	; (8012168 <tcp_pcb_remove+0x10c>)
 801206e:	f640 0283 	movw	r2, #2179	; 0x883
 8012072:	493e      	ldr	r1, [pc, #248]	; (801216c <tcp_pcb_remove+0x110>)
 8012074:	483e      	ldr	r0, [pc, #248]	; (8012170 <tcp_pcb_remove+0x114>)
 8012076:	f007 fcdd 	bl	8019a34 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d106      	bne.n	801208e <tcp_pcb_remove+0x32>
 8012080:	4b39      	ldr	r3, [pc, #228]	; (8012168 <tcp_pcb_remove+0x10c>)
 8012082:	f640 0284 	movw	r2, #2180	; 0x884
 8012086:	493b      	ldr	r1, [pc, #236]	; (8012174 <tcp_pcb_remove+0x118>)
 8012088:	4839      	ldr	r0, [pc, #228]	; (8012170 <tcp_pcb_remove+0x114>)
 801208a:	f007 fcd3 	bl	8019a34 <iprintf>

  TCP_RMV(pcblist, pcb);
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	683a      	ldr	r2, [r7, #0]
 8012094:	429a      	cmp	r2, r3
 8012096:	d105      	bne.n	80120a4 <tcp_pcb_remove+0x48>
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	68da      	ldr	r2, [r3, #12]
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	601a      	str	r2, [r3, #0]
 80120a2:	e013      	b.n	80120cc <tcp_pcb_remove+0x70>
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	60fb      	str	r3, [r7, #12]
 80120aa:	e00c      	b.n	80120c6 <tcp_pcb_remove+0x6a>
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	68db      	ldr	r3, [r3, #12]
 80120b0:	683a      	ldr	r2, [r7, #0]
 80120b2:	429a      	cmp	r2, r3
 80120b4:	d104      	bne.n	80120c0 <tcp_pcb_remove+0x64>
 80120b6:	683b      	ldr	r3, [r7, #0]
 80120b8:	68da      	ldr	r2, [r3, #12]
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	60da      	str	r2, [r3, #12]
 80120be:	e005      	b.n	80120cc <tcp_pcb_remove+0x70>
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	68db      	ldr	r3, [r3, #12]
 80120c4:	60fb      	str	r3, [r7, #12]
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d1ef      	bne.n	80120ac <tcp_pcb_remove+0x50>
 80120cc:	683b      	ldr	r3, [r7, #0]
 80120ce:	2200      	movs	r2, #0
 80120d0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80120d2:	6838      	ldr	r0, [r7, #0]
 80120d4:	f7ff ff72 	bl	8011fbc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80120d8:	683b      	ldr	r3, [r7, #0]
 80120da:	7d1b      	ldrb	r3, [r3, #20]
 80120dc:	2b0a      	cmp	r3, #10
 80120de:	d013      	beq.n	8012108 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80120e0:	683b      	ldr	r3, [r7, #0]
 80120e2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80120e4:	2b01      	cmp	r3, #1
 80120e6:	d00f      	beq.n	8012108 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80120e8:	683b      	ldr	r3, [r7, #0]
 80120ea:	8b5b      	ldrh	r3, [r3, #26]
 80120ec:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d009      	beq.n	8012108 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80120f4:	683b      	ldr	r3, [r7, #0]
 80120f6:	8b5b      	ldrh	r3, [r3, #26]
 80120f8:	f043 0302 	orr.w	r3, r3, #2
 80120fc:	b29a      	uxth	r2, r3
 80120fe:	683b      	ldr	r3, [r7, #0]
 8012100:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012102:	6838      	ldr	r0, [r7, #0]
 8012104:	f003 fbc2 	bl	801588c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8012108:	683b      	ldr	r3, [r7, #0]
 801210a:	7d1b      	ldrb	r3, [r3, #20]
 801210c:	2b01      	cmp	r3, #1
 801210e:	d020      	beq.n	8012152 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8012110:	683b      	ldr	r3, [r7, #0]
 8012112:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012114:	2b00      	cmp	r3, #0
 8012116:	d006      	beq.n	8012126 <tcp_pcb_remove+0xca>
 8012118:	4b13      	ldr	r3, [pc, #76]	; (8012168 <tcp_pcb_remove+0x10c>)
 801211a:	f640 0293 	movw	r2, #2195	; 0x893
 801211e:	4916      	ldr	r1, [pc, #88]	; (8012178 <tcp_pcb_remove+0x11c>)
 8012120:	4813      	ldr	r0, [pc, #76]	; (8012170 <tcp_pcb_remove+0x114>)
 8012122:	f007 fc87 	bl	8019a34 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8012126:	683b      	ldr	r3, [r7, #0]
 8012128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801212a:	2b00      	cmp	r3, #0
 801212c:	d006      	beq.n	801213c <tcp_pcb_remove+0xe0>
 801212e:	4b0e      	ldr	r3, [pc, #56]	; (8012168 <tcp_pcb_remove+0x10c>)
 8012130:	f640 0294 	movw	r2, #2196	; 0x894
 8012134:	4911      	ldr	r1, [pc, #68]	; (801217c <tcp_pcb_remove+0x120>)
 8012136:	480e      	ldr	r0, [pc, #56]	; (8012170 <tcp_pcb_remove+0x114>)
 8012138:	f007 fc7c 	bl	8019a34 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801213c:	683b      	ldr	r3, [r7, #0]
 801213e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012140:	2b00      	cmp	r3, #0
 8012142:	d006      	beq.n	8012152 <tcp_pcb_remove+0xf6>
 8012144:	4b08      	ldr	r3, [pc, #32]	; (8012168 <tcp_pcb_remove+0x10c>)
 8012146:	f640 0296 	movw	r2, #2198	; 0x896
 801214a:	490d      	ldr	r1, [pc, #52]	; (8012180 <tcp_pcb_remove+0x124>)
 801214c:	4808      	ldr	r0, [pc, #32]	; (8012170 <tcp_pcb_remove+0x114>)
 801214e:	f007 fc71 	bl	8019a34 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8012152:	683b      	ldr	r3, [r7, #0]
 8012154:	2200      	movs	r2, #0
 8012156:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8012158:	683b      	ldr	r3, [r7, #0]
 801215a:	2200      	movs	r2, #0
 801215c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801215e:	bf00      	nop
 8012160:	3710      	adds	r7, #16
 8012162:	46bd      	mov	sp, r7
 8012164:	bd80      	pop	{r7, pc}
 8012166:	bf00      	nop
 8012168:	0801b668 	.word	0x0801b668
 801216c:	0801bcd0 	.word	0x0801bcd0
 8012170:	0801b6ac 	.word	0x0801b6ac
 8012174:	0801bcec 	.word	0x0801bcec
 8012178:	0801bd0c 	.word	0x0801bd0c
 801217c:	0801bd24 	.word	0x0801bd24
 8012180:	0801bd40 	.word	0x0801bd40

08012184 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8012184:	b580      	push	{r7, lr}
 8012186:	b082      	sub	sp, #8
 8012188:	af00      	add	r7, sp, #0
 801218a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d106      	bne.n	80121a0 <tcp_next_iss+0x1c>
 8012192:	4b0a      	ldr	r3, [pc, #40]	; (80121bc <tcp_next_iss+0x38>)
 8012194:	f640 02af 	movw	r2, #2223	; 0x8af
 8012198:	4909      	ldr	r1, [pc, #36]	; (80121c0 <tcp_next_iss+0x3c>)
 801219a:	480a      	ldr	r0, [pc, #40]	; (80121c4 <tcp_next_iss+0x40>)
 801219c:	f007 fc4a 	bl	8019a34 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80121a0:	4b09      	ldr	r3, [pc, #36]	; (80121c8 <tcp_next_iss+0x44>)
 80121a2:	681a      	ldr	r2, [r3, #0]
 80121a4:	4b09      	ldr	r3, [pc, #36]	; (80121cc <tcp_next_iss+0x48>)
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	4413      	add	r3, r2
 80121aa:	4a07      	ldr	r2, [pc, #28]	; (80121c8 <tcp_next_iss+0x44>)
 80121ac:	6013      	str	r3, [r2, #0]
  return iss;
 80121ae:	4b06      	ldr	r3, [pc, #24]	; (80121c8 <tcp_next_iss+0x44>)
 80121b0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80121b2:	4618      	mov	r0, r3
 80121b4:	3708      	adds	r7, #8
 80121b6:	46bd      	mov	sp, r7
 80121b8:	bd80      	pop	{r7, pc}
 80121ba:	bf00      	nop
 80121bc:	0801b668 	.word	0x0801b668
 80121c0:	0801bd58 	.word	0x0801bd58
 80121c4:	0801b6ac 	.word	0x0801b6ac
 80121c8:	24000034 	.word	0x24000034
 80121cc:	24007868 	.word	0x24007868

080121d0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b086      	sub	sp, #24
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	4603      	mov	r3, r0
 80121d8:	60b9      	str	r1, [r7, #8]
 80121da:	607a      	str	r2, [r7, #4]
 80121dc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d106      	bne.n	80121f2 <tcp_eff_send_mss_netif+0x22>
 80121e4:	4b14      	ldr	r3, [pc, #80]	; (8012238 <tcp_eff_send_mss_netif+0x68>)
 80121e6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80121ea:	4914      	ldr	r1, [pc, #80]	; (801223c <tcp_eff_send_mss_netif+0x6c>)
 80121ec:	4814      	ldr	r0, [pc, #80]	; (8012240 <tcp_eff_send_mss_netif+0x70>)
 80121ee:	f007 fc21 	bl	8019a34 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80121f2:	68bb      	ldr	r3, [r7, #8]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d101      	bne.n	80121fc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80121f8:	89fb      	ldrh	r3, [r7, #14]
 80121fa:	e019      	b.n	8012230 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80121fc:	68bb      	ldr	r3, [r7, #8]
 80121fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012200:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8012202:	8afb      	ldrh	r3, [r7, #22]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d012      	beq.n	801222e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8012208:	2328      	movs	r3, #40	; 0x28
 801220a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801220c:	8afa      	ldrh	r2, [r7, #22]
 801220e:	8abb      	ldrh	r3, [r7, #20]
 8012210:	429a      	cmp	r2, r3
 8012212:	d904      	bls.n	801221e <tcp_eff_send_mss_netif+0x4e>
 8012214:	8afa      	ldrh	r2, [r7, #22]
 8012216:	8abb      	ldrh	r3, [r7, #20]
 8012218:	1ad3      	subs	r3, r2, r3
 801221a:	b29b      	uxth	r3, r3
 801221c:	e000      	b.n	8012220 <tcp_eff_send_mss_netif+0x50>
 801221e:	2300      	movs	r3, #0
 8012220:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8012222:	8a7a      	ldrh	r2, [r7, #18]
 8012224:	89fb      	ldrh	r3, [r7, #14]
 8012226:	4293      	cmp	r3, r2
 8012228:	bf28      	it	cs
 801222a:	4613      	movcs	r3, r2
 801222c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801222e:	89fb      	ldrh	r3, [r7, #14]
}
 8012230:	4618      	mov	r0, r3
 8012232:	3718      	adds	r7, #24
 8012234:	46bd      	mov	sp, r7
 8012236:	bd80      	pop	{r7, pc}
 8012238:	0801b668 	.word	0x0801b668
 801223c:	0801bd74 	.word	0x0801bd74
 8012240:	0801b6ac 	.word	0x0801b6ac

08012244 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8012244:	b580      	push	{r7, lr}
 8012246:	b084      	sub	sp, #16
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
 801224c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801224e:	683b      	ldr	r3, [r7, #0]
 8012250:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d119      	bne.n	801228c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8012258:	4b10      	ldr	r3, [pc, #64]	; (801229c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801225a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801225e:	4910      	ldr	r1, [pc, #64]	; (80122a0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8012260:	4810      	ldr	r0, [pc, #64]	; (80122a4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8012262:	f007 fbe7 	bl	8019a34 <iprintf>

  while (pcb != NULL) {
 8012266:	e011      	b.n	801228c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	681a      	ldr	r2, [r3, #0]
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	429a      	cmp	r2, r3
 8012272:	d108      	bne.n	8012286 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	68db      	ldr	r3, [r3, #12]
 8012278:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801227a:	68f8      	ldr	r0, [r7, #12]
 801227c:	f7fe fd26 	bl	8010ccc <tcp_abort>
      pcb = next;
 8012280:	68bb      	ldr	r3, [r7, #8]
 8012282:	60fb      	str	r3, [r7, #12]
 8012284:	e002      	b.n	801228c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	68db      	ldr	r3, [r3, #12]
 801228a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d1ea      	bne.n	8012268 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8012292:	bf00      	nop
 8012294:	bf00      	nop
 8012296:	3710      	adds	r7, #16
 8012298:	46bd      	mov	sp, r7
 801229a:	bd80      	pop	{r7, pc}
 801229c:	0801b668 	.word	0x0801b668
 80122a0:	0801bd9c 	.word	0x0801bd9c
 80122a4:	0801b6ac 	.word	0x0801b6ac

080122a8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b084      	sub	sp, #16
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	6078      	str	r0, [r7, #4]
 80122b0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d02a      	beq.n	801230e <tcp_netif_ip_addr_changed+0x66>
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d026      	beq.n	801230e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80122c0:	4b15      	ldr	r3, [pc, #84]	; (8012318 <tcp_netif_ip_addr_changed+0x70>)
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	4619      	mov	r1, r3
 80122c6:	6878      	ldr	r0, [r7, #4]
 80122c8:	f7ff ffbc 	bl	8012244 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80122cc:	4b13      	ldr	r3, [pc, #76]	; (801231c <tcp_netif_ip_addr_changed+0x74>)
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	4619      	mov	r1, r3
 80122d2:	6878      	ldr	r0, [r7, #4]
 80122d4:	f7ff ffb6 	bl	8012244 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80122d8:	683b      	ldr	r3, [r7, #0]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d017      	beq.n	801230e <tcp_netif_ip_addr_changed+0x66>
 80122de:	683b      	ldr	r3, [r7, #0]
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d013      	beq.n	801230e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80122e6:	4b0e      	ldr	r3, [pc, #56]	; (8012320 <tcp_netif_ip_addr_changed+0x78>)
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	60fb      	str	r3, [r7, #12]
 80122ec:	e00c      	b.n	8012308 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	681a      	ldr	r2, [r3, #0]
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	429a      	cmp	r2, r3
 80122f8:	d103      	bne.n	8012302 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80122fa:	683b      	ldr	r3, [r7, #0]
 80122fc:	681a      	ldr	r2, [r3, #0]
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	68db      	ldr	r3, [r3, #12]
 8012306:	60fb      	str	r3, [r7, #12]
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	2b00      	cmp	r3, #0
 801230c:	d1ef      	bne.n	80122ee <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801230e:	bf00      	nop
 8012310:	3710      	adds	r7, #16
 8012312:	46bd      	mov	sp, r7
 8012314:	bd80      	pop	{r7, pc}
 8012316:	bf00      	nop
 8012318:	24007864 	.word	0x24007864
 801231c:	24007870 	.word	0x24007870
 8012320:	2400786c 	.word	0x2400786c

08012324 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8012324:	b580      	push	{r7, lr}
 8012326:	b082      	sub	sp, #8
 8012328:	af00      	add	r7, sp, #0
 801232a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012330:	2b00      	cmp	r3, #0
 8012332:	d007      	beq.n	8012344 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012338:	4618      	mov	r0, r3
 801233a:	f7ff fb57 	bl	80119ec <tcp_segs_free>
    pcb->ooseq = NULL;
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	2200      	movs	r2, #0
 8012342:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8012344:	bf00      	nop
 8012346:	3708      	adds	r7, #8
 8012348:	46bd      	mov	sp, r7
 801234a:	bd80      	pop	{r7, pc}

0801234c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801234c:	b590      	push	{r4, r7, lr}
 801234e:	b08d      	sub	sp, #52	; 0x34
 8012350:	af04      	add	r7, sp, #16
 8012352:	6078      	str	r0, [r7, #4]
 8012354:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d105      	bne.n	8012368 <tcp_input+0x1c>
 801235c:	4b9b      	ldr	r3, [pc, #620]	; (80125cc <tcp_input+0x280>)
 801235e:	2283      	movs	r2, #131	; 0x83
 8012360:	499b      	ldr	r1, [pc, #620]	; (80125d0 <tcp_input+0x284>)
 8012362:	489c      	ldr	r0, [pc, #624]	; (80125d4 <tcp_input+0x288>)
 8012364:	f007 fb66 	bl	8019a34 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	685b      	ldr	r3, [r3, #4]
 801236c:	4a9a      	ldr	r2, [pc, #616]	; (80125d8 <tcp_input+0x28c>)
 801236e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	895b      	ldrh	r3, [r3, #10]
 8012374:	2b13      	cmp	r3, #19
 8012376:	f240 83c4 	bls.w	8012b02 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801237a:	4b98      	ldr	r3, [pc, #608]	; (80125dc <tcp_input+0x290>)
 801237c:	695b      	ldr	r3, [r3, #20]
 801237e:	4a97      	ldr	r2, [pc, #604]	; (80125dc <tcp_input+0x290>)
 8012380:	6812      	ldr	r2, [r2, #0]
 8012382:	4611      	mov	r1, r2
 8012384:	4618      	mov	r0, r3
 8012386:	f006 f8c1 	bl	801850c <ip4_addr_isbroadcast_u32>
 801238a:	4603      	mov	r3, r0
 801238c:	2b00      	cmp	r3, #0
 801238e:	f040 83ba 	bne.w	8012b06 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8012392:	4b92      	ldr	r3, [pc, #584]	; (80125dc <tcp_input+0x290>)
 8012394:	695b      	ldr	r3, [r3, #20]
 8012396:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801239a:	2be0      	cmp	r3, #224	; 0xe0
 801239c:	f000 83b3 	beq.w	8012b06 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80123a0:	4b8d      	ldr	r3, [pc, #564]	; (80125d8 <tcp_input+0x28c>)
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	899b      	ldrh	r3, [r3, #12]
 80123a6:	b29b      	uxth	r3, r3
 80123a8:	4618      	mov	r0, r3
 80123aa:	f7fc fa41 	bl	800e830 <lwip_htons>
 80123ae:	4603      	mov	r3, r0
 80123b0:	0b1b      	lsrs	r3, r3, #12
 80123b2:	b29b      	uxth	r3, r3
 80123b4:	b2db      	uxtb	r3, r3
 80123b6:	009b      	lsls	r3, r3, #2
 80123b8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80123ba:	7cbb      	ldrb	r3, [r7, #18]
 80123bc:	2b13      	cmp	r3, #19
 80123be:	f240 83a4 	bls.w	8012b0a <tcp_input+0x7be>
 80123c2:	7cbb      	ldrb	r3, [r7, #18]
 80123c4:	b29a      	uxth	r2, r3
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	891b      	ldrh	r3, [r3, #8]
 80123ca:	429a      	cmp	r2, r3
 80123cc:	f200 839d 	bhi.w	8012b0a <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80123d0:	7cbb      	ldrb	r3, [r7, #18]
 80123d2:	b29b      	uxth	r3, r3
 80123d4:	3b14      	subs	r3, #20
 80123d6:	b29a      	uxth	r2, r3
 80123d8:	4b81      	ldr	r3, [pc, #516]	; (80125e0 <tcp_input+0x294>)
 80123da:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80123dc:	4b81      	ldr	r3, [pc, #516]	; (80125e4 <tcp_input+0x298>)
 80123de:	2200      	movs	r2, #0
 80123e0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	895a      	ldrh	r2, [r3, #10]
 80123e6:	7cbb      	ldrb	r3, [r7, #18]
 80123e8:	b29b      	uxth	r3, r3
 80123ea:	429a      	cmp	r2, r3
 80123ec:	d309      	bcc.n	8012402 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80123ee:	4b7c      	ldr	r3, [pc, #496]	; (80125e0 <tcp_input+0x294>)
 80123f0:	881a      	ldrh	r2, [r3, #0]
 80123f2:	4b7d      	ldr	r3, [pc, #500]	; (80125e8 <tcp_input+0x29c>)
 80123f4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80123f6:	7cbb      	ldrb	r3, [r7, #18]
 80123f8:	4619      	mov	r1, r3
 80123fa:	6878      	ldr	r0, [r7, #4]
 80123fc:	f7fd fe3c 	bl	8010078 <pbuf_remove_header>
 8012400:	e04e      	b.n	80124a0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d105      	bne.n	8012416 <tcp_input+0xca>
 801240a:	4b70      	ldr	r3, [pc, #448]	; (80125cc <tcp_input+0x280>)
 801240c:	22c2      	movs	r2, #194	; 0xc2
 801240e:	4977      	ldr	r1, [pc, #476]	; (80125ec <tcp_input+0x2a0>)
 8012410:	4870      	ldr	r0, [pc, #448]	; (80125d4 <tcp_input+0x288>)
 8012412:	f007 fb0f 	bl	8019a34 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8012416:	2114      	movs	r1, #20
 8012418:	6878      	ldr	r0, [r7, #4]
 801241a:	f7fd fe2d 	bl	8010078 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	895a      	ldrh	r2, [r3, #10]
 8012422:	4b71      	ldr	r3, [pc, #452]	; (80125e8 <tcp_input+0x29c>)
 8012424:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8012426:	4b6e      	ldr	r3, [pc, #440]	; (80125e0 <tcp_input+0x294>)
 8012428:	881a      	ldrh	r2, [r3, #0]
 801242a:	4b6f      	ldr	r3, [pc, #444]	; (80125e8 <tcp_input+0x29c>)
 801242c:	881b      	ldrh	r3, [r3, #0]
 801242e:	1ad3      	subs	r3, r2, r3
 8012430:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8012432:	4b6d      	ldr	r3, [pc, #436]	; (80125e8 <tcp_input+0x29c>)
 8012434:	881b      	ldrh	r3, [r3, #0]
 8012436:	4619      	mov	r1, r3
 8012438:	6878      	ldr	r0, [r7, #4]
 801243a:	f7fd fe1d 	bl	8010078 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	895b      	ldrh	r3, [r3, #10]
 8012444:	8a3a      	ldrh	r2, [r7, #16]
 8012446:	429a      	cmp	r2, r3
 8012448:	f200 8361 	bhi.w	8012b0e <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	685b      	ldr	r3, [r3, #4]
 8012452:	4a64      	ldr	r2, [pc, #400]	; (80125e4 <tcp_input+0x298>)
 8012454:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	8a3a      	ldrh	r2, [r7, #16]
 801245c:	4611      	mov	r1, r2
 801245e:	4618      	mov	r0, r3
 8012460:	f7fd fe0a 	bl	8010078 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	891a      	ldrh	r2, [r3, #8]
 8012468:	8a3b      	ldrh	r3, [r7, #16]
 801246a:	1ad3      	subs	r3, r2, r3
 801246c:	b29a      	uxth	r2, r3
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	895b      	ldrh	r3, [r3, #10]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d005      	beq.n	8012486 <tcp_input+0x13a>
 801247a:	4b54      	ldr	r3, [pc, #336]	; (80125cc <tcp_input+0x280>)
 801247c:	22df      	movs	r2, #223	; 0xdf
 801247e:	495c      	ldr	r1, [pc, #368]	; (80125f0 <tcp_input+0x2a4>)
 8012480:	4854      	ldr	r0, [pc, #336]	; (80125d4 <tcp_input+0x288>)
 8012482:	f007 fad7 	bl	8019a34 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	891a      	ldrh	r2, [r3, #8]
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	891b      	ldrh	r3, [r3, #8]
 8012490:	429a      	cmp	r2, r3
 8012492:	d005      	beq.n	80124a0 <tcp_input+0x154>
 8012494:	4b4d      	ldr	r3, [pc, #308]	; (80125cc <tcp_input+0x280>)
 8012496:	22e0      	movs	r2, #224	; 0xe0
 8012498:	4956      	ldr	r1, [pc, #344]	; (80125f4 <tcp_input+0x2a8>)
 801249a:	484e      	ldr	r0, [pc, #312]	; (80125d4 <tcp_input+0x288>)
 801249c:	f007 faca 	bl	8019a34 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80124a0:	4b4d      	ldr	r3, [pc, #308]	; (80125d8 <tcp_input+0x28c>)
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	881b      	ldrh	r3, [r3, #0]
 80124a6:	b29b      	uxth	r3, r3
 80124a8:	4a4b      	ldr	r2, [pc, #300]	; (80125d8 <tcp_input+0x28c>)
 80124aa:	6814      	ldr	r4, [r2, #0]
 80124ac:	4618      	mov	r0, r3
 80124ae:	f7fc f9bf 	bl	800e830 <lwip_htons>
 80124b2:	4603      	mov	r3, r0
 80124b4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80124b6:	4b48      	ldr	r3, [pc, #288]	; (80125d8 <tcp_input+0x28c>)
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	885b      	ldrh	r3, [r3, #2]
 80124bc:	b29b      	uxth	r3, r3
 80124be:	4a46      	ldr	r2, [pc, #280]	; (80125d8 <tcp_input+0x28c>)
 80124c0:	6814      	ldr	r4, [r2, #0]
 80124c2:	4618      	mov	r0, r3
 80124c4:	f7fc f9b4 	bl	800e830 <lwip_htons>
 80124c8:	4603      	mov	r3, r0
 80124ca:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80124cc:	4b42      	ldr	r3, [pc, #264]	; (80125d8 <tcp_input+0x28c>)
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	685b      	ldr	r3, [r3, #4]
 80124d2:	4a41      	ldr	r2, [pc, #260]	; (80125d8 <tcp_input+0x28c>)
 80124d4:	6814      	ldr	r4, [r2, #0]
 80124d6:	4618      	mov	r0, r3
 80124d8:	f7fc f9bf 	bl	800e85a <lwip_htonl>
 80124dc:	4603      	mov	r3, r0
 80124de:	6063      	str	r3, [r4, #4]
 80124e0:	6863      	ldr	r3, [r4, #4]
 80124e2:	4a45      	ldr	r2, [pc, #276]	; (80125f8 <tcp_input+0x2ac>)
 80124e4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80124e6:	4b3c      	ldr	r3, [pc, #240]	; (80125d8 <tcp_input+0x28c>)
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	689b      	ldr	r3, [r3, #8]
 80124ec:	4a3a      	ldr	r2, [pc, #232]	; (80125d8 <tcp_input+0x28c>)
 80124ee:	6814      	ldr	r4, [r2, #0]
 80124f0:	4618      	mov	r0, r3
 80124f2:	f7fc f9b2 	bl	800e85a <lwip_htonl>
 80124f6:	4603      	mov	r3, r0
 80124f8:	60a3      	str	r3, [r4, #8]
 80124fa:	68a3      	ldr	r3, [r4, #8]
 80124fc:	4a3f      	ldr	r2, [pc, #252]	; (80125fc <tcp_input+0x2b0>)
 80124fe:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012500:	4b35      	ldr	r3, [pc, #212]	; (80125d8 <tcp_input+0x28c>)
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	89db      	ldrh	r3, [r3, #14]
 8012506:	b29b      	uxth	r3, r3
 8012508:	4a33      	ldr	r2, [pc, #204]	; (80125d8 <tcp_input+0x28c>)
 801250a:	6814      	ldr	r4, [r2, #0]
 801250c:	4618      	mov	r0, r3
 801250e:	f7fc f98f 	bl	800e830 <lwip_htons>
 8012512:	4603      	mov	r3, r0
 8012514:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8012516:	4b30      	ldr	r3, [pc, #192]	; (80125d8 <tcp_input+0x28c>)
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	899b      	ldrh	r3, [r3, #12]
 801251c:	b29b      	uxth	r3, r3
 801251e:	4618      	mov	r0, r3
 8012520:	f7fc f986 	bl	800e830 <lwip_htons>
 8012524:	4603      	mov	r3, r0
 8012526:	b2db      	uxtb	r3, r3
 8012528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801252c:	b2da      	uxtb	r2, r3
 801252e:	4b34      	ldr	r3, [pc, #208]	; (8012600 <tcp_input+0x2b4>)
 8012530:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	891a      	ldrh	r2, [r3, #8]
 8012536:	4b33      	ldr	r3, [pc, #204]	; (8012604 <tcp_input+0x2b8>)
 8012538:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801253a:	4b31      	ldr	r3, [pc, #196]	; (8012600 <tcp_input+0x2b4>)
 801253c:	781b      	ldrb	r3, [r3, #0]
 801253e:	f003 0303 	and.w	r3, r3, #3
 8012542:	2b00      	cmp	r3, #0
 8012544:	d00c      	beq.n	8012560 <tcp_input+0x214>
    tcplen++;
 8012546:	4b2f      	ldr	r3, [pc, #188]	; (8012604 <tcp_input+0x2b8>)
 8012548:	881b      	ldrh	r3, [r3, #0]
 801254a:	3301      	adds	r3, #1
 801254c:	b29a      	uxth	r2, r3
 801254e:	4b2d      	ldr	r3, [pc, #180]	; (8012604 <tcp_input+0x2b8>)
 8012550:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	891a      	ldrh	r2, [r3, #8]
 8012556:	4b2b      	ldr	r3, [pc, #172]	; (8012604 <tcp_input+0x2b8>)
 8012558:	881b      	ldrh	r3, [r3, #0]
 801255a:	429a      	cmp	r2, r3
 801255c:	f200 82d9 	bhi.w	8012b12 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012560:	2300      	movs	r3, #0
 8012562:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012564:	4b28      	ldr	r3, [pc, #160]	; (8012608 <tcp_input+0x2bc>)
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	61fb      	str	r3, [r7, #28]
 801256a:	e09d      	b.n	80126a8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801256c:	69fb      	ldr	r3, [r7, #28]
 801256e:	7d1b      	ldrb	r3, [r3, #20]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d105      	bne.n	8012580 <tcp_input+0x234>
 8012574:	4b15      	ldr	r3, [pc, #84]	; (80125cc <tcp_input+0x280>)
 8012576:	22fb      	movs	r2, #251	; 0xfb
 8012578:	4924      	ldr	r1, [pc, #144]	; (801260c <tcp_input+0x2c0>)
 801257a:	4816      	ldr	r0, [pc, #88]	; (80125d4 <tcp_input+0x288>)
 801257c:	f007 fa5a 	bl	8019a34 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012580:	69fb      	ldr	r3, [r7, #28]
 8012582:	7d1b      	ldrb	r3, [r3, #20]
 8012584:	2b0a      	cmp	r3, #10
 8012586:	d105      	bne.n	8012594 <tcp_input+0x248>
 8012588:	4b10      	ldr	r3, [pc, #64]	; (80125cc <tcp_input+0x280>)
 801258a:	22fc      	movs	r2, #252	; 0xfc
 801258c:	4920      	ldr	r1, [pc, #128]	; (8012610 <tcp_input+0x2c4>)
 801258e:	4811      	ldr	r0, [pc, #68]	; (80125d4 <tcp_input+0x288>)
 8012590:	f007 fa50 	bl	8019a34 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012594:	69fb      	ldr	r3, [r7, #28]
 8012596:	7d1b      	ldrb	r3, [r3, #20]
 8012598:	2b01      	cmp	r3, #1
 801259a:	d105      	bne.n	80125a8 <tcp_input+0x25c>
 801259c:	4b0b      	ldr	r3, [pc, #44]	; (80125cc <tcp_input+0x280>)
 801259e:	22fd      	movs	r2, #253	; 0xfd
 80125a0:	491c      	ldr	r1, [pc, #112]	; (8012614 <tcp_input+0x2c8>)
 80125a2:	480c      	ldr	r0, [pc, #48]	; (80125d4 <tcp_input+0x288>)
 80125a4:	f007 fa46 	bl	8019a34 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80125a8:	69fb      	ldr	r3, [r7, #28]
 80125aa:	7a1b      	ldrb	r3, [r3, #8]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d033      	beq.n	8012618 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80125b0:	69fb      	ldr	r3, [r7, #28]
 80125b2:	7a1a      	ldrb	r2, [r3, #8]
 80125b4:	4b09      	ldr	r3, [pc, #36]	; (80125dc <tcp_input+0x290>)
 80125b6:	685b      	ldr	r3, [r3, #4]
 80125b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80125bc:	3301      	adds	r3, #1
 80125be:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80125c0:	429a      	cmp	r2, r3
 80125c2:	d029      	beq.n	8012618 <tcp_input+0x2cc>
      prev = pcb;
 80125c4:	69fb      	ldr	r3, [r7, #28]
 80125c6:	61bb      	str	r3, [r7, #24]
      continue;
 80125c8:	e06b      	b.n	80126a2 <tcp_input+0x356>
 80125ca:	bf00      	nop
 80125cc:	0801bdd0 	.word	0x0801bdd0
 80125d0:	0801be04 	.word	0x0801be04
 80125d4:	0801be1c 	.word	0x0801be1c
 80125d8:	24004134 	.word	0x24004134
 80125dc:	240047a4 	.word	0x240047a4
 80125e0:	24004138 	.word	0x24004138
 80125e4:	2400413c 	.word	0x2400413c
 80125e8:	2400413a 	.word	0x2400413a
 80125ec:	0801be44 	.word	0x0801be44
 80125f0:	0801be54 	.word	0x0801be54
 80125f4:	0801be60 	.word	0x0801be60
 80125f8:	24004144 	.word	0x24004144
 80125fc:	24004148 	.word	0x24004148
 8012600:	24004150 	.word	0x24004150
 8012604:	2400414e 	.word	0x2400414e
 8012608:	24007864 	.word	0x24007864
 801260c:	0801be80 	.word	0x0801be80
 8012610:	0801bea8 	.word	0x0801bea8
 8012614:	0801bed4 	.word	0x0801bed4
    }

    if (pcb->remote_port == tcphdr->src &&
 8012618:	69fb      	ldr	r3, [r7, #28]
 801261a:	8b1a      	ldrh	r2, [r3, #24]
 801261c:	4b94      	ldr	r3, [pc, #592]	; (8012870 <tcp_input+0x524>)
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	881b      	ldrh	r3, [r3, #0]
 8012622:	b29b      	uxth	r3, r3
 8012624:	429a      	cmp	r2, r3
 8012626:	d13a      	bne.n	801269e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8012628:	69fb      	ldr	r3, [r7, #28]
 801262a:	8ada      	ldrh	r2, [r3, #22]
 801262c:	4b90      	ldr	r3, [pc, #576]	; (8012870 <tcp_input+0x524>)
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	885b      	ldrh	r3, [r3, #2]
 8012632:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012634:	429a      	cmp	r2, r3
 8012636:	d132      	bne.n	801269e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012638:	69fb      	ldr	r3, [r7, #28]
 801263a:	685a      	ldr	r2, [r3, #4]
 801263c:	4b8d      	ldr	r3, [pc, #564]	; (8012874 <tcp_input+0x528>)
 801263e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012640:	429a      	cmp	r2, r3
 8012642:	d12c      	bne.n	801269e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012644:	69fb      	ldr	r3, [r7, #28]
 8012646:	681a      	ldr	r2, [r3, #0]
 8012648:	4b8a      	ldr	r3, [pc, #552]	; (8012874 <tcp_input+0x528>)
 801264a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801264c:	429a      	cmp	r2, r3
 801264e:	d126      	bne.n	801269e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012650:	69fb      	ldr	r3, [r7, #28]
 8012652:	68db      	ldr	r3, [r3, #12]
 8012654:	69fa      	ldr	r2, [r7, #28]
 8012656:	429a      	cmp	r2, r3
 8012658:	d106      	bne.n	8012668 <tcp_input+0x31c>
 801265a:	4b87      	ldr	r3, [pc, #540]	; (8012878 <tcp_input+0x52c>)
 801265c:	f240 120d 	movw	r2, #269	; 0x10d
 8012660:	4986      	ldr	r1, [pc, #536]	; (801287c <tcp_input+0x530>)
 8012662:	4887      	ldr	r0, [pc, #540]	; (8012880 <tcp_input+0x534>)
 8012664:	f007 f9e6 	bl	8019a34 <iprintf>
      if (prev != NULL) {
 8012668:	69bb      	ldr	r3, [r7, #24]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d00a      	beq.n	8012684 <tcp_input+0x338>
        prev->next = pcb->next;
 801266e:	69fb      	ldr	r3, [r7, #28]
 8012670:	68da      	ldr	r2, [r3, #12]
 8012672:	69bb      	ldr	r3, [r7, #24]
 8012674:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012676:	4b83      	ldr	r3, [pc, #524]	; (8012884 <tcp_input+0x538>)
 8012678:	681a      	ldr	r2, [r3, #0]
 801267a:	69fb      	ldr	r3, [r7, #28]
 801267c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801267e:	4a81      	ldr	r2, [pc, #516]	; (8012884 <tcp_input+0x538>)
 8012680:	69fb      	ldr	r3, [r7, #28]
 8012682:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012684:	69fb      	ldr	r3, [r7, #28]
 8012686:	68db      	ldr	r3, [r3, #12]
 8012688:	69fa      	ldr	r2, [r7, #28]
 801268a:	429a      	cmp	r2, r3
 801268c:	d111      	bne.n	80126b2 <tcp_input+0x366>
 801268e:	4b7a      	ldr	r3, [pc, #488]	; (8012878 <tcp_input+0x52c>)
 8012690:	f240 1215 	movw	r2, #277	; 0x115
 8012694:	497c      	ldr	r1, [pc, #496]	; (8012888 <tcp_input+0x53c>)
 8012696:	487a      	ldr	r0, [pc, #488]	; (8012880 <tcp_input+0x534>)
 8012698:	f007 f9cc 	bl	8019a34 <iprintf>
      break;
 801269c:	e009      	b.n	80126b2 <tcp_input+0x366>
    }
    prev = pcb;
 801269e:	69fb      	ldr	r3, [r7, #28]
 80126a0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80126a2:	69fb      	ldr	r3, [r7, #28]
 80126a4:	68db      	ldr	r3, [r3, #12]
 80126a6:	61fb      	str	r3, [r7, #28]
 80126a8:	69fb      	ldr	r3, [r7, #28]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	f47f af5e 	bne.w	801256c <tcp_input+0x220>
 80126b0:	e000      	b.n	80126b4 <tcp_input+0x368>
      break;
 80126b2:	bf00      	nop
  }

  if (pcb == NULL) {
 80126b4:	69fb      	ldr	r3, [r7, #28]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	f040 8095 	bne.w	80127e6 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80126bc:	4b73      	ldr	r3, [pc, #460]	; (801288c <tcp_input+0x540>)
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	61fb      	str	r3, [r7, #28]
 80126c2:	e03f      	b.n	8012744 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80126c4:	69fb      	ldr	r3, [r7, #28]
 80126c6:	7d1b      	ldrb	r3, [r3, #20]
 80126c8:	2b0a      	cmp	r3, #10
 80126ca:	d006      	beq.n	80126da <tcp_input+0x38e>
 80126cc:	4b6a      	ldr	r3, [pc, #424]	; (8012878 <tcp_input+0x52c>)
 80126ce:	f240 121f 	movw	r2, #287	; 0x11f
 80126d2:	496f      	ldr	r1, [pc, #444]	; (8012890 <tcp_input+0x544>)
 80126d4:	486a      	ldr	r0, [pc, #424]	; (8012880 <tcp_input+0x534>)
 80126d6:	f007 f9ad 	bl	8019a34 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80126da:	69fb      	ldr	r3, [r7, #28]
 80126dc:	7a1b      	ldrb	r3, [r3, #8]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d009      	beq.n	80126f6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80126e2:	69fb      	ldr	r3, [r7, #28]
 80126e4:	7a1a      	ldrb	r2, [r3, #8]
 80126e6:	4b63      	ldr	r3, [pc, #396]	; (8012874 <tcp_input+0x528>)
 80126e8:	685b      	ldr	r3, [r3, #4]
 80126ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80126ee:	3301      	adds	r3, #1
 80126f0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80126f2:	429a      	cmp	r2, r3
 80126f4:	d122      	bne.n	801273c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80126f6:	69fb      	ldr	r3, [r7, #28]
 80126f8:	8b1a      	ldrh	r2, [r3, #24]
 80126fa:	4b5d      	ldr	r3, [pc, #372]	; (8012870 <tcp_input+0x524>)
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	881b      	ldrh	r3, [r3, #0]
 8012700:	b29b      	uxth	r3, r3
 8012702:	429a      	cmp	r2, r3
 8012704:	d11b      	bne.n	801273e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8012706:	69fb      	ldr	r3, [r7, #28]
 8012708:	8ada      	ldrh	r2, [r3, #22]
 801270a:	4b59      	ldr	r3, [pc, #356]	; (8012870 <tcp_input+0x524>)
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	885b      	ldrh	r3, [r3, #2]
 8012710:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012712:	429a      	cmp	r2, r3
 8012714:	d113      	bne.n	801273e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012716:	69fb      	ldr	r3, [r7, #28]
 8012718:	685a      	ldr	r2, [r3, #4]
 801271a:	4b56      	ldr	r3, [pc, #344]	; (8012874 <tcp_input+0x528>)
 801271c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801271e:	429a      	cmp	r2, r3
 8012720:	d10d      	bne.n	801273e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012722:	69fb      	ldr	r3, [r7, #28]
 8012724:	681a      	ldr	r2, [r3, #0]
 8012726:	4b53      	ldr	r3, [pc, #332]	; (8012874 <tcp_input+0x528>)
 8012728:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801272a:	429a      	cmp	r2, r3
 801272c:	d107      	bne.n	801273e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801272e:	69f8      	ldr	r0, [r7, #28]
 8012730:	f000 fb54 	bl	8012ddc <tcp_timewait_input>
        }
        pbuf_free(p);
 8012734:	6878      	ldr	r0, [r7, #4]
 8012736:	f7fd fd25 	bl	8010184 <pbuf_free>
        return;
 801273a:	e1f0      	b.n	8012b1e <tcp_input+0x7d2>
        continue;
 801273c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801273e:	69fb      	ldr	r3, [r7, #28]
 8012740:	68db      	ldr	r3, [r3, #12]
 8012742:	61fb      	str	r3, [r7, #28]
 8012744:	69fb      	ldr	r3, [r7, #28]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d1bc      	bne.n	80126c4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801274a:	2300      	movs	r3, #0
 801274c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801274e:	4b51      	ldr	r3, [pc, #324]	; (8012894 <tcp_input+0x548>)
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	617b      	str	r3, [r7, #20]
 8012754:	e02a      	b.n	80127ac <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012756:	697b      	ldr	r3, [r7, #20]
 8012758:	7a1b      	ldrb	r3, [r3, #8]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d00c      	beq.n	8012778 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801275e:	697b      	ldr	r3, [r7, #20]
 8012760:	7a1a      	ldrb	r2, [r3, #8]
 8012762:	4b44      	ldr	r3, [pc, #272]	; (8012874 <tcp_input+0x528>)
 8012764:	685b      	ldr	r3, [r3, #4]
 8012766:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801276a:	3301      	adds	r3, #1
 801276c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801276e:	429a      	cmp	r2, r3
 8012770:	d002      	beq.n	8012778 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8012772:	697b      	ldr	r3, [r7, #20]
 8012774:	61bb      	str	r3, [r7, #24]
        continue;
 8012776:	e016      	b.n	80127a6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012778:	697b      	ldr	r3, [r7, #20]
 801277a:	8ada      	ldrh	r2, [r3, #22]
 801277c:	4b3c      	ldr	r3, [pc, #240]	; (8012870 <tcp_input+0x524>)
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	885b      	ldrh	r3, [r3, #2]
 8012782:	b29b      	uxth	r3, r3
 8012784:	429a      	cmp	r2, r3
 8012786:	d10c      	bne.n	80127a2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012788:	697b      	ldr	r3, [r7, #20]
 801278a:	681a      	ldr	r2, [r3, #0]
 801278c:	4b39      	ldr	r3, [pc, #228]	; (8012874 <tcp_input+0x528>)
 801278e:	695b      	ldr	r3, [r3, #20]
 8012790:	429a      	cmp	r2, r3
 8012792:	d00f      	beq.n	80127b4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012794:	697b      	ldr	r3, [r7, #20]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d00d      	beq.n	80127b6 <tcp_input+0x46a>
 801279a:	697b      	ldr	r3, [r7, #20]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d009      	beq.n	80127b6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80127a2:	697b      	ldr	r3, [r7, #20]
 80127a4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80127a6:	697b      	ldr	r3, [r7, #20]
 80127a8:	68db      	ldr	r3, [r3, #12]
 80127aa:	617b      	str	r3, [r7, #20]
 80127ac:	697b      	ldr	r3, [r7, #20]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d1d1      	bne.n	8012756 <tcp_input+0x40a>
 80127b2:	e000      	b.n	80127b6 <tcp_input+0x46a>
            break;
 80127b4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80127b6:	697b      	ldr	r3, [r7, #20]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d014      	beq.n	80127e6 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80127bc:	69bb      	ldr	r3, [r7, #24]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d00a      	beq.n	80127d8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80127c2:	697b      	ldr	r3, [r7, #20]
 80127c4:	68da      	ldr	r2, [r3, #12]
 80127c6:	69bb      	ldr	r3, [r7, #24]
 80127c8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80127ca:	4b32      	ldr	r3, [pc, #200]	; (8012894 <tcp_input+0x548>)
 80127cc:	681a      	ldr	r2, [r3, #0]
 80127ce:	697b      	ldr	r3, [r7, #20]
 80127d0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80127d2:	4a30      	ldr	r2, [pc, #192]	; (8012894 <tcp_input+0x548>)
 80127d4:	697b      	ldr	r3, [r7, #20]
 80127d6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80127d8:	6978      	ldr	r0, [r7, #20]
 80127da:	f000 fa01 	bl	8012be0 <tcp_listen_input>
      }
      pbuf_free(p);
 80127de:	6878      	ldr	r0, [r7, #4]
 80127e0:	f7fd fcd0 	bl	8010184 <pbuf_free>
      return;
 80127e4:	e19b      	b.n	8012b1e <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80127e6:	69fb      	ldr	r3, [r7, #28]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	f000 8160 	beq.w	8012aae <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80127ee:	4b2a      	ldr	r3, [pc, #168]	; (8012898 <tcp_input+0x54c>)
 80127f0:	2200      	movs	r2, #0
 80127f2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	891a      	ldrh	r2, [r3, #8]
 80127f8:	4b27      	ldr	r3, [pc, #156]	; (8012898 <tcp_input+0x54c>)
 80127fa:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80127fc:	4a26      	ldr	r2, [pc, #152]	; (8012898 <tcp_input+0x54c>)
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8012802:	4b1b      	ldr	r3, [pc, #108]	; (8012870 <tcp_input+0x524>)
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	4a24      	ldr	r2, [pc, #144]	; (8012898 <tcp_input+0x54c>)
 8012808:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801280a:	4b24      	ldr	r3, [pc, #144]	; (801289c <tcp_input+0x550>)
 801280c:	2200      	movs	r2, #0
 801280e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8012810:	4b23      	ldr	r3, [pc, #140]	; (80128a0 <tcp_input+0x554>)
 8012812:	2200      	movs	r2, #0
 8012814:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012816:	4b23      	ldr	r3, [pc, #140]	; (80128a4 <tcp_input+0x558>)
 8012818:	2200      	movs	r2, #0
 801281a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801281c:	4b22      	ldr	r3, [pc, #136]	; (80128a8 <tcp_input+0x55c>)
 801281e:	781b      	ldrb	r3, [r3, #0]
 8012820:	f003 0308 	and.w	r3, r3, #8
 8012824:	2b00      	cmp	r3, #0
 8012826:	d006      	beq.n	8012836 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	7b5b      	ldrb	r3, [r3, #13]
 801282c:	f043 0301 	orr.w	r3, r3, #1
 8012830:	b2da      	uxtb	r2, r3
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012836:	69fb      	ldr	r3, [r7, #28]
 8012838:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801283a:	2b00      	cmp	r3, #0
 801283c:	d038      	beq.n	80128b0 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801283e:	69f8      	ldr	r0, [r7, #28]
 8012840:	f7ff f858 	bl	80118f4 <tcp_process_refused_data>
 8012844:	4603      	mov	r3, r0
 8012846:	f113 0f0d 	cmn.w	r3, #13
 801284a:	d007      	beq.n	801285c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801284c:	69fb      	ldr	r3, [r7, #28]
 801284e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012850:	2b00      	cmp	r3, #0
 8012852:	d02d      	beq.n	80128b0 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012854:	4b15      	ldr	r3, [pc, #84]	; (80128ac <tcp_input+0x560>)
 8012856:	881b      	ldrh	r3, [r3, #0]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d029      	beq.n	80128b0 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801285c:	69fb      	ldr	r3, [r7, #28]
 801285e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012860:	2b00      	cmp	r3, #0
 8012862:	f040 8104 	bne.w	8012a6e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012866:	69f8      	ldr	r0, [r7, #28]
 8012868:	f003 fe16 	bl	8016498 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801286c:	e0ff      	b.n	8012a6e <tcp_input+0x722>
 801286e:	bf00      	nop
 8012870:	24004134 	.word	0x24004134
 8012874:	240047a4 	.word	0x240047a4
 8012878:	0801bdd0 	.word	0x0801bdd0
 801287c:	0801befc 	.word	0x0801befc
 8012880:	0801be1c 	.word	0x0801be1c
 8012884:	24007864 	.word	0x24007864
 8012888:	0801bf28 	.word	0x0801bf28
 801288c:	24007874 	.word	0x24007874
 8012890:	0801bf54 	.word	0x0801bf54
 8012894:	2400786c 	.word	0x2400786c
 8012898:	24004124 	.word	0x24004124
 801289c:	24004154 	.word	0x24004154
 80128a0:	24004151 	.word	0x24004151
 80128a4:	2400414c 	.word	0x2400414c
 80128a8:	24004150 	.word	0x24004150
 80128ac:	2400414e 	.word	0x2400414e
      }
    }
    tcp_input_pcb = pcb;
 80128b0:	4a9c      	ldr	r2, [pc, #624]	; (8012b24 <tcp_input+0x7d8>)
 80128b2:	69fb      	ldr	r3, [r7, #28]
 80128b4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80128b6:	69f8      	ldr	r0, [r7, #28]
 80128b8:	f000 fb0a 	bl	8012ed0 <tcp_process>
 80128bc:	4603      	mov	r3, r0
 80128be:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80128c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80128c4:	f113 0f0d 	cmn.w	r3, #13
 80128c8:	f000 80d3 	beq.w	8012a72 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80128cc:	4b96      	ldr	r3, [pc, #600]	; (8012b28 <tcp_input+0x7dc>)
 80128ce:	781b      	ldrb	r3, [r3, #0]
 80128d0:	f003 0308 	and.w	r3, r3, #8
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d015      	beq.n	8012904 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80128d8:	69fb      	ldr	r3, [r7, #28]
 80128da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d008      	beq.n	80128f4 <tcp_input+0x5a8>
 80128e2:	69fb      	ldr	r3, [r7, #28]
 80128e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80128e8:	69fa      	ldr	r2, [r7, #28]
 80128ea:	6912      	ldr	r2, [r2, #16]
 80128ec:	f06f 010d 	mvn.w	r1, #13
 80128f0:	4610      	mov	r0, r2
 80128f2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80128f4:	69f9      	ldr	r1, [r7, #28]
 80128f6:	488d      	ldr	r0, [pc, #564]	; (8012b2c <tcp_input+0x7e0>)
 80128f8:	f7ff fbb0 	bl	801205c <tcp_pcb_remove>
        tcp_free(pcb);
 80128fc:	69f8      	ldr	r0, [r7, #28]
 80128fe:	f7fd fefd 	bl	80106fc <tcp_free>
 8012902:	e0c1      	b.n	8012a88 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8012904:	2300      	movs	r3, #0
 8012906:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012908:	4b89      	ldr	r3, [pc, #548]	; (8012b30 <tcp_input+0x7e4>)
 801290a:	881b      	ldrh	r3, [r3, #0]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d01d      	beq.n	801294c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8012910:	4b87      	ldr	r3, [pc, #540]	; (8012b30 <tcp_input+0x7e4>)
 8012912:	881b      	ldrh	r3, [r3, #0]
 8012914:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012916:	69fb      	ldr	r3, [r7, #28]
 8012918:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801291c:	2b00      	cmp	r3, #0
 801291e:	d00a      	beq.n	8012936 <tcp_input+0x5ea>
 8012920:	69fb      	ldr	r3, [r7, #28]
 8012922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012926:	69fa      	ldr	r2, [r7, #28]
 8012928:	6910      	ldr	r0, [r2, #16]
 801292a:	89fa      	ldrh	r2, [r7, #14]
 801292c:	69f9      	ldr	r1, [r7, #28]
 801292e:	4798      	blx	r3
 8012930:	4603      	mov	r3, r0
 8012932:	74fb      	strb	r3, [r7, #19]
 8012934:	e001      	b.n	801293a <tcp_input+0x5ee>
 8012936:	2300      	movs	r3, #0
 8012938:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801293a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801293e:	f113 0f0d 	cmn.w	r3, #13
 8012942:	f000 8098 	beq.w	8012a76 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012946:	4b7a      	ldr	r3, [pc, #488]	; (8012b30 <tcp_input+0x7e4>)
 8012948:	2200      	movs	r2, #0
 801294a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801294c:	69f8      	ldr	r0, [r7, #28]
 801294e:	f000 f907 	bl	8012b60 <tcp_input_delayed_close>
 8012952:	4603      	mov	r3, r0
 8012954:	2b00      	cmp	r3, #0
 8012956:	f040 8090 	bne.w	8012a7a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801295a:	4b76      	ldr	r3, [pc, #472]	; (8012b34 <tcp_input+0x7e8>)
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d041      	beq.n	80129e6 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8012962:	69fb      	ldr	r3, [r7, #28]
 8012964:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012966:	2b00      	cmp	r3, #0
 8012968:	d006      	beq.n	8012978 <tcp_input+0x62c>
 801296a:	4b73      	ldr	r3, [pc, #460]	; (8012b38 <tcp_input+0x7ec>)
 801296c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012970:	4972      	ldr	r1, [pc, #456]	; (8012b3c <tcp_input+0x7f0>)
 8012972:	4873      	ldr	r0, [pc, #460]	; (8012b40 <tcp_input+0x7f4>)
 8012974:	f007 f85e 	bl	8019a34 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012978:	69fb      	ldr	r3, [r7, #28]
 801297a:	8b5b      	ldrh	r3, [r3, #26]
 801297c:	f003 0310 	and.w	r3, r3, #16
 8012980:	2b00      	cmp	r3, #0
 8012982:	d008      	beq.n	8012996 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8012984:	4b6b      	ldr	r3, [pc, #428]	; (8012b34 <tcp_input+0x7e8>)
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	4618      	mov	r0, r3
 801298a:	f7fd fbfb 	bl	8010184 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801298e:	69f8      	ldr	r0, [r7, #28]
 8012990:	f7fe f99c 	bl	8010ccc <tcp_abort>
            goto aborted;
 8012994:	e078      	b.n	8012a88 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8012996:	69fb      	ldr	r3, [r7, #28]
 8012998:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801299c:	2b00      	cmp	r3, #0
 801299e:	d00c      	beq.n	80129ba <tcp_input+0x66e>
 80129a0:	69fb      	ldr	r3, [r7, #28]
 80129a2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80129a6:	69fb      	ldr	r3, [r7, #28]
 80129a8:	6918      	ldr	r0, [r3, #16]
 80129aa:	4b62      	ldr	r3, [pc, #392]	; (8012b34 <tcp_input+0x7e8>)
 80129ac:	681a      	ldr	r2, [r3, #0]
 80129ae:	2300      	movs	r3, #0
 80129b0:	69f9      	ldr	r1, [r7, #28]
 80129b2:	47a0      	blx	r4
 80129b4:	4603      	mov	r3, r0
 80129b6:	74fb      	strb	r3, [r7, #19]
 80129b8:	e008      	b.n	80129cc <tcp_input+0x680>
 80129ba:	4b5e      	ldr	r3, [pc, #376]	; (8012b34 <tcp_input+0x7e8>)
 80129bc:	681a      	ldr	r2, [r3, #0]
 80129be:	2300      	movs	r3, #0
 80129c0:	69f9      	ldr	r1, [r7, #28]
 80129c2:	2000      	movs	r0, #0
 80129c4:	f7ff f88a 	bl	8011adc <tcp_recv_null>
 80129c8:	4603      	mov	r3, r0
 80129ca:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80129cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80129d0:	f113 0f0d 	cmn.w	r3, #13
 80129d4:	d053      	beq.n	8012a7e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80129d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d003      	beq.n	80129e6 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80129de:	4b55      	ldr	r3, [pc, #340]	; (8012b34 <tcp_input+0x7e8>)
 80129e0:	681a      	ldr	r2, [r3, #0]
 80129e2:	69fb      	ldr	r3, [r7, #28]
 80129e4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80129e6:	4b50      	ldr	r3, [pc, #320]	; (8012b28 <tcp_input+0x7dc>)
 80129e8:	781b      	ldrb	r3, [r3, #0]
 80129ea:	f003 0320 	and.w	r3, r3, #32
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d030      	beq.n	8012a54 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80129f2:	69fb      	ldr	r3, [r7, #28]
 80129f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d009      	beq.n	8012a0e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80129fa:	69fb      	ldr	r3, [r7, #28]
 80129fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80129fe:	7b5a      	ldrb	r2, [r3, #13]
 8012a00:	69fb      	ldr	r3, [r7, #28]
 8012a02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012a04:	f042 0220 	orr.w	r2, r2, #32
 8012a08:	b2d2      	uxtb	r2, r2
 8012a0a:	735a      	strb	r2, [r3, #13]
 8012a0c:	e022      	b.n	8012a54 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012a0e:	69fb      	ldr	r3, [r7, #28]
 8012a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012a12:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012a16:	d005      	beq.n	8012a24 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8012a18:	69fb      	ldr	r3, [r7, #28]
 8012a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012a1c:	3301      	adds	r3, #1
 8012a1e:	b29a      	uxth	r2, r3
 8012a20:	69fb      	ldr	r3, [r7, #28]
 8012a22:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8012a24:	69fb      	ldr	r3, [r7, #28]
 8012a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d00b      	beq.n	8012a46 <tcp_input+0x6fa>
 8012a2e:	69fb      	ldr	r3, [r7, #28]
 8012a30:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012a34:	69fb      	ldr	r3, [r7, #28]
 8012a36:	6918      	ldr	r0, [r3, #16]
 8012a38:	2300      	movs	r3, #0
 8012a3a:	2200      	movs	r2, #0
 8012a3c:	69f9      	ldr	r1, [r7, #28]
 8012a3e:	47a0      	blx	r4
 8012a40:	4603      	mov	r3, r0
 8012a42:	74fb      	strb	r3, [r7, #19]
 8012a44:	e001      	b.n	8012a4a <tcp_input+0x6fe>
 8012a46:	2300      	movs	r3, #0
 8012a48:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012a4a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012a4e:	f113 0f0d 	cmn.w	r3, #13
 8012a52:	d016      	beq.n	8012a82 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8012a54:	4b33      	ldr	r3, [pc, #204]	; (8012b24 <tcp_input+0x7d8>)
 8012a56:	2200      	movs	r2, #0
 8012a58:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8012a5a:	69f8      	ldr	r0, [r7, #28]
 8012a5c:	f000 f880 	bl	8012b60 <tcp_input_delayed_close>
 8012a60:	4603      	mov	r3, r0
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d10f      	bne.n	8012a86 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8012a66:	69f8      	ldr	r0, [r7, #28]
 8012a68:	f002 ff10 	bl	801588c <tcp_output>
 8012a6c:	e00c      	b.n	8012a88 <tcp_input+0x73c>
        goto aborted;
 8012a6e:	bf00      	nop
 8012a70:	e00a      	b.n	8012a88 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8012a72:	bf00      	nop
 8012a74:	e008      	b.n	8012a88 <tcp_input+0x73c>
              goto aborted;
 8012a76:	bf00      	nop
 8012a78:	e006      	b.n	8012a88 <tcp_input+0x73c>
          goto aborted;
 8012a7a:	bf00      	nop
 8012a7c:	e004      	b.n	8012a88 <tcp_input+0x73c>
            goto aborted;
 8012a7e:	bf00      	nop
 8012a80:	e002      	b.n	8012a88 <tcp_input+0x73c>
              goto aborted;
 8012a82:	bf00      	nop
 8012a84:	e000      	b.n	8012a88 <tcp_input+0x73c>
          goto aborted;
 8012a86:	bf00      	nop
    tcp_input_pcb = NULL;
 8012a88:	4b26      	ldr	r3, [pc, #152]	; (8012b24 <tcp_input+0x7d8>)
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8012a8e:	4b29      	ldr	r3, [pc, #164]	; (8012b34 <tcp_input+0x7e8>)
 8012a90:	2200      	movs	r2, #0
 8012a92:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8012a94:	4b2b      	ldr	r3, [pc, #172]	; (8012b44 <tcp_input+0x7f8>)
 8012a96:	685b      	ldr	r3, [r3, #4]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d03f      	beq.n	8012b1c <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8012a9c:	4b29      	ldr	r3, [pc, #164]	; (8012b44 <tcp_input+0x7f8>)
 8012a9e:	685b      	ldr	r3, [r3, #4]
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	f7fd fb6f 	bl	8010184 <pbuf_free>
      inseg.p = NULL;
 8012aa6:	4b27      	ldr	r3, [pc, #156]	; (8012b44 <tcp_input+0x7f8>)
 8012aa8:	2200      	movs	r2, #0
 8012aaa:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8012aac:	e036      	b.n	8012b1c <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8012aae:	4b26      	ldr	r3, [pc, #152]	; (8012b48 <tcp_input+0x7fc>)
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	899b      	ldrh	r3, [r3, #12]
 8012ab4:	b29b      	uxth	r3, r3
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	f7fb feba 	bl	800e830 <lwip_htons>
 8012abc:	4603      	mov	r3, r0
 8012abe:	b2db      	uxtb	r3, r3
 8012ac0:	f003 0304 	and.w	r3, r3, #4
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d118      	bne.n	8012afa <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012ac8:	4b20      	ldr	r3, [pc, #128]	; (8012b4c <tcp_input+0x800>)
 8012aca:	6819      	ldr	r1, [r3, #0]
 8012acc:	4b20      	ldr	r3, [pc, #128]	; (8012b50 <tcp_input+0x804>)
 8012ace:	881b      	ldrh	r3, [r3, #0]
 8012ad0:	461a      	mov	r2, r3
 8012ad2:	4b20      	ldr	r3, [pc, #128]	; (8012b54 <tcp_input+0x808>)
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012ad8:	4b1b      	ldr	r3, [pc, #108]	; (8012b48 <tcp_input+0x7fc>)
 8012ada:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012adc:	885b      	ldrh	r3, [r3, #2]
 8012ade:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012ae0:	4a19      	ldr	r2, [pc, #100]	; (8012b48 <tcp_input+0x7fc>)
 8012ae2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012ae4:	8812      	ldrh	r2, [r2, #0]
 8012ae6:	b292      	uxth	r2, r2
 8012ae8:	9202      	str	r2, [sp, #8]
 8012aea:	9301      	str	r3, [sp, #4]
 8012aec:	4b1a      	ldr	r3, [pc, #104]	; (8012b58 <tcp_input+0x80c>)
 8012aee:	9300      	str	r3, [sp, #0]
 8012af0:	4b1a      	ldr	r3, [pc, #104]	; (8012b5c <tcp_input+0x810>)
 8012af2:	4602      	mov	r2, r0
 8012af4:	2000      	movs	r0, #0
 8012af6:	f003 fc7d 	bl	80163f4 <tcp_rst>
    pbuf_free(p);
 8012afa:	6878      	ldr	r0, [r7, #4]
 8012afc:	f7fd fb42 	bl	8010184 <pbuf_free>
  return;
 8012b00:	e00c      	b.n	8012b1c <tcp_input+0x7d0>
    goto dropped;
 8012b02:	bf00      	nop
 8012b04:	e006      	b.n	8012b14 <tcp_input+0x7c8>
    goto dropped;
 8012b06:	bf00      	nop
 8012b08:	e004      	b.n	8012b14 <tcp_input+0x7c8>
    goto dropped;
 8012b0a:	bf00      	nop
 8012b0c:	e002      	b.n	8012b14 <tcp_input+0x7c8>
      goto dropped;
 8012b0e:	bf00      	nop
 8012b10:	e000      	b.n	8012b14 <tcp_input+0x7c8>
      goto dropped;
 8012b12:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8012b14:	6878      	ldr	r0, [r7, #4]
 8012b16:	f7fd fb35 	bl	8010184 <pbuf_free>
 8012b1a:	e000      	b.n	8012b1e <tcp_input+0x7d2>
  return;
 8012b1c:	bf00      	nop
}
 8012b1e:	3724      	adds	r7, #36	; 0x24
 8012b20:	46bd      	mov	sp, r7
 8012b22:	bd90      	pop	{r4, r7, pc}
 8012b24:	24007878 	.word	0x24007878
 8012b28:	24004151 	.word	0x24004151
 8012b2c:	24007864 	.word	0x24007864
 8012b30:	2400414c 	.word	0x2400414c
 8012b34:	24004154 	.word	0x24004154
 8012b38:	0801bdd0 	.word	0x0801bdd0
 8012b3c:	0801bf84 	.word	0x0801bf84
 8012b40:	0801be1c 	.word	0x0801be1c
 8012b44:	24004124 	.word	0x24004124
 8012b48:	24004134 	.word	0x24004134
 8012b4c:	24004148 	.word	0x24004148
 8012b50:	2400414e 	.word	0x2400414e
 8012b54:	24004144 	.word	0x24004144
 8012b58:	240047b4 	.word	0x240047b4
 8012b5c:	240047b8 	.word	0x240047b8

08012b60 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b082      	sub	sp, #8
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d106      	bne.n	8012b7c <tcp_input_delayed_close+0x1c>
 8012b6e:	4b17      	ldr	r3, [pc, #92]	; (8012bcc <tcp_input_delayed_close+0x6c>)
 8012b70:	f240 225a 	movw	r2, #602	; 0x25a
 8012b74:	4916      	ldr	r1, [pc, #88]	; (8012bd0 <tcp_input_delayed_close+0x70>)
 8012b76:	4817      	ldr	r0, [pc, #92]	; (8012bd4 <tcp_input_delayed_close+0x74>)
 8012b78:	f006 ff5c 	bl	8019a34 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8012b7c:	4b16      	ldr	r3, [pc, #88]	; (8012bd8 <tcp_input_delayed_close+0x78>)
 8012b7e:	781b      	ldrb	r3, [r3, #0]
 8012b80:	f003 0310 	and.w	r3, r3, #16
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d01c      	beq.n	8012bc2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	8b5b      	ldrh	r3, [r3, #26]
 8012b8c:	f003 0310 	and.w	r3, r3, #16
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d10d      	bne.n	8012bb0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d008      	beq.n	8012bb0 <tcp_input_delayed_close+0x50>
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012ba4:	687a      	ldr	r2, [r7, #4]
 8012ba6:	6912      	ldr	r2, [r2, #16]
 8012ba8:	f06f 010e 	mvn.w	r1, #14
 8012bac:	4610      	mov	r0, r2
 8012bae:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012bb0:	6879      	ldr	r1, [r7, #4]
 8012bb2:	480a      	ldr	r0, [pc, #40]	; (8012bdc <tcp_input_delayed_close+0x7c>)
 8012bb4:	f7ff fa52 	bl	801205c <tcp_pcb_remove>
    tcp_free(pcb);
 8012bb8:	6878      	ldr	r0, [r7, #4]
 8012bba:	f7fd fd9f 	bl	80106fc <tcp_free>
    return 1;
 8012bbe:	2301      	movs	r3, #1
 8012bc0:	e000      	b.n	8012bc4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8012bc2:	2300      	movs	r3, #0
}
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	3708      	adds	r7, #8
 8012bc8:	46bd      	mov	sp, r7
 8012bca:	bd80      	pop	{r7, pc}
 8012bcc:	0801bdd0 	.word	0x0801bdd0
 8012bd0:	0801bfa0 	.word	0x0801bfa0
 8012bd4:	0801be1c 	.word	0x0801be1c
 8012bd8:	24004151 	.word	0x24004151
 8012bdc:	24007864 	.word	0x24007864

08012be0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8012be0:	b590      	push	{r4, r7, lr}
 8012be2:	b08b      	sub	sp, #44	; 0x2c
 8012be4:	af04      	add	r7, sp, #16
 8012be6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8012be8:	4b6f      	ldr	r3, [pc, #444]	; (8012da8 <tcp_listen_input+0x1c8>)
 8012bea:	781b      	ldrb	r3, [r3, #0]
 8012bec:	f003 0304 	and.w	r3, r3, #4
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	f040 80d2 	bne.w	8012d9a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d106      	bne.n	8012c0a <tcp_listen_input+0x2a>
 8012bfc:	4b6b      	ldr	r3, [pc, #428]	; (8012dac <tcp_listen_input+0x1cc>)
 8012bfe:	f240 2281 	movw	r2, #641	; 0x281
 8012c02:	496b      	ldr	r1, [pc, #428]	; (8012db0 <tcp_listen_input+0x1d0>)
 8012c04:	486b      	ldr	r0, [pc, #428]	; (8012db4 <tcp_listen_input+0x1d4>)
 8012c06:	f006 ff15 	bl	8019a34 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8012c0a:	4b67      	ldr	r3, [pc, #412]	; (8012da8 <tcp_listen_input+0x1c8>)
 8012c0c:	781b      	ldrb	r3, [r3, #0]
 8012c0e:	f003 0310 	and.w	r3, r3, #16
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d019      	beq.n	8012c4a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012c16:	4b68      	ldr	r3, [pc, #416]	; (8012db8 <tcp_listen_input+0x1d8>)
 8012c18:	6819      	ldr	r1, [r3, #0]
 8012c1a:	4b68      	ldr	r3, [pc, #416]	; (8012dbc <tcp_listen_input+0x1dc>)
 8012c1c:	881b      	ldrh	r3, [r3, #0]
 8012c1e:	461a      	mov	r2, r3
 8012c20:	4b67      	ldr	r3, [pc, #412]	; (8012dc0 <tcp_listen_input+0x1e0>)
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012c26:	4b67      	ldr	r3, [pc, #412]	; (8012dc4 <tcp_listen_input+0x1e4>)
 8012c28:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012c2a:	885b      	ldrh	r3, [r3, #2]
 8012c2c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012c2e:	4a65      	ldr	r2, [pc, #404]	; (8012dc4 <tcp_listen_input+0x1e4>)
 8012c30:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012c32:	8812      	ldrh	r2, [r2, #0]
 8012c34:	b292      	uxth	r2, r2
 8012c36:	9202      	str	r2, [sp, #8]
 8012c38:	9301      	str	r3, [sp, #4]
 8012c3a:	4b63      	ldr	r3, [pc, #396]	; (8012dc8 <tcp_listen_input+0x1e8>)
 8012c3c:	9300      	str	r3, [sp, #0]
 8012c3e:	4b63      	ldr	r3, [pc, #396]	; (8012dcc <tcp_listen_input+0x1ec>)
 8012c40:	4602      	mov	r2, r0
 8012c42:	6878      	ldr	r0, [r7, #4]
 8012c44:	f003 fbd6 	bl	80163f4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8012c48:	e0a9      	b.n	8012d9e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8012c4a:	4b57      	ldr	r3, [pc, #348]	; (8012da8 <tcp_listen_input+0x1c8>)
 8012c4c:	781b      	ldrb	r3, [r3, #0]
 8012c4e:	f003 0302 	and.w	r3, r3, #2
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	f000 80a3 	beq.w	8012d9e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	7d5b      	ldrb	r3, [r3, #21]
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	f7ff f861 	bl	8011d24 <tcp_alloc>
 8012c62:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8012c64:	697b      	ldr	r3, [r7, #20]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d111      	bne.n	8012c8e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	699b      	ldr	r3, [r3, #24]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d00a      	beq.n	8012c88 <tcp_listen_input+0xa8>
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	699b      	ldr	r3, [r3, #24]
 8012c76:	687a      	ldr	r2, [r7, #4]
 8012c78:	6910      	ldr	r0, [r2, #16]
 8012c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8012c7e:	2100      	movs	r1, #0
 8012c80:	4798      	blx	r3
 8012c82:	4603      	mov	r3, r0
 8012c84:	73bb      	strb	r3, [r7, #14]
      return;
 8012c86:	e08b      	b.n	8012da0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012c88:	23f0      	movs	r3, #240	; 0xf0
 8012c8a:	73bb      	strb	r3, [r7, #14]
      return;
 8012c8c:	e088      	b.n	8012da0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8012c8e:	4b50      	ldr	r3, [pc, #320]	; (8012dd0 <tcp_listen_input+0x1f0>)
 8012c90:	695a      	ldr	r2, [r3, #20]
 8012c92:	697b      	ldr	r3, [r7, #20]
 8012c94:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8012c96:	4b4e      	ldr	r3, [pc, #312]	; (8012dd0 <tcp_listen_input+0x1f0>)
 8012c98:	691a      	ldr	r2, [r3, #16]
 8012c9a:	697b      	ldr	r3, [r7, #20]
 8012c9c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	8ada      	ldrh	r2, [r3, #22]
 8012ca2:	697b      	ldr	r3, [r7, #20]
 8012ca4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8012ca6:	4b47      	ldr	r3, [pc, #284]	; (8012dc4 <tcp_listen_input+0x1e4>)
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	881b      	ldrh	r3, [r3, #0]
 8012cac:	b29a      	uxth	r2, r3
 8012cae:	697b      	ldr	r3, [r7, #20]
 8012cb0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8012cb2:	697b      	ldr	r3, [r7, #20]
 8012cb4:	2203      	movs	r2, #3
 8012cb6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8012cb8:	4b41      	ldr	r3, [pc, #260]	; (8012dc0 <tcp_listen_input+0x1e0>)
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	1c5a      	adds	r2, r3, #1
 8012cbe:	697b      	ldr	r3, [r7, #20]
 8012cc0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8012cc2:	697b      	ldr	r3, [r7, #20]
 8012cc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012cc6:	697b      	ldr	r3, [r7, #20]
 8012cc8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8012cca:	6978      	ldr	r0, [r7, #20]
 8012ccc:	f7ff fa5a 	bl	8012184 <tcp_next_iss>
 8012cd0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8012cd2:	697b      	ldr	r3, [r7, #20]
 8012cd4:	693a      	ldr	r2, [r7, #16]
 8012cd6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8012cd8:	697b      	ldr	r3, [r7, #20]
 8012cda:	693a      	ldr	r2, [r7, #16]
 8012cdc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8012cde:	697b      	ldr	r3, [r7, #20]
 8012ce0:	693a      	ldr	r2, [r7, #16]
 8012ce2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8012ce4:	697b      	ldr	r3, [r7, #20]
 8012ce6:	693a      	ldr	r2, [r7, #16]
 8012ce8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8012cea:	4b35      	ldr	r3, [pc, #212]	; (8012dc0 <tcp_listen_input+0x1e0>)
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	1e5a      	subs	r2, r3, #1
 8012cf0:	697b      	ldr	r3, [r7, #20]
 8012cf2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	691a      	ldr	r2, [r3, #16]
 8012cf8:	697b      	ldr	r3, [r7, #20]
 8012cfa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8012cfc:	697b      	ldr	r3, [r7, #20]
 8012cfe:	687a      	ldr	r2, [r7, #4]
 8012d00:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	7a5b      	ldrb	r3, [r3, #9]
 8012d06:	f003 030c 	and.w	r3, r3, #12
 8012d0a:	b2da      	uxtb	r2, r3
 8012d0c:	697b      	ldr	r3, [r7, #20]
 8012d0e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	7a1a      	ldrb	r2, [r3, #8]
 8012d14:	697b      	ldr	r3, [r7, #20]
 8012d16:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8012d18:	4b2e      	ldr	r3, [pc, #184]	; (8012dd4 <tcp_listen_input+0x1f4>)
 8012d1a:	681a      	ldr	r2, [r3, #0]
 8012d1c:	697b      	ldr	r3, [r7, #20]
 8012d1e:	60da      	str	r2, [r3, #12]
 8012d20:	4a2c      	ldr	r2, [pc, #176]	; (8012dd4 <tcp_listen_input+0x1f4>)
 8012d22:	697b      	ldr	r3, [r7, #20]
 8012d24:	6013      	str	r3, [r2, #0]
 8012d26:	f003 fd27 	bl	8016778 <tcp_timer_needed>
 8012d2a:	4b2b      	ldr	r3, [pc, #172]	; (8012dd8 <tcp_listen_input+0x1f8>)
 8012d2c:	2201      	movs	r2, #1
 8012d2e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8012d30:	6978      	ldr	r0, [r7, #20]
 8012d32:	f001 fd8d 	bl	8014850 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8012d36:	4b23      	ldr	r3, [pc, #140]	; (8012dc4 <tcp_listen_input+0x1e4>)
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	89db      	ldrh	r3, [r3, #14]
 8012d3c:	b29a      	uxth	r2, r3
 8012d3e:	697b      	ldr	r3, [r7, #20]
 8012d40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8012d44:	697b      	ldr	r3, [r7, #20]
 8012d46:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012d4a:	697b      	ldr	r3, [r7, #20]
 8012d4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8012d50:	697b      	ldr	r3, [r7, #20]
 8012d52:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8012d54:	697b      	ldr	r3, [r7, #20]
 8012d56:	3304      	adds	r3, #4
 8012d58:	4618      	mov	r0, r3
 8012d5a:	f005 f941 	bl	8017fe0 <ip4_route>
 8012d5e:	4601      	mov	r1, r0
 8012d60:	697b      	ldr	r3, [r7, #20]
 8012d62:	3304      	adds	r3, #4
 8012d64:	461a      	mov	r2, r3
 8012d66:	4620      	mov	r0, r4
 8012d68:	f7ff fa32 	bl	80121d0 <tcp_eff_send_mss_netif>
 8012d6c:	4603      	mov	r3, r0
 8012d6e:	461a      	mov	r2, r3
 8012d70:	697b      	ldr	r3, [r7, #20]
 8012d72:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8012d74:	2112      	movs	r1, #18
 8012d76:	6978      	ldr	r0, [r7, #20]
 8012d78:	f002 fc9a 	bl	80156b0 <tcp_enqueue_flags>
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8012d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d004      	beq.n	8012d92 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8012d88:	2100      	movs	r1, #0
 8012d8a:	6978      	ldr	r0, [r7, #20]
 8012d8c:	f7fd fee0 	bl	8010b50 <tcp_abandon>
      return;
 8012d90:	e006      	b.n	8012da0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8012d92:	6978      	ldr	r0, [r7, #20]
 8012d94:	f002 fd7a 	bl	801588c <tcp_output>
  return;
 8012d98:	e001      	b.n	8012d9e <tcp_listen_input+0x1be>
    return;
 8012d9a:	bf00      	nop
 8012d9c:	e000      	b.n	8012da0 <tcp_listen_input+0x1c0>
  return;
 8012d9e:	bf00      	nop
}
 8012da0:	371c      	adds	r7, #28
 8012da2:	46bd      	mov	sp, r7
 8012da4:	bd90      	pop	{r4, r7, pc}
 8012da6:	bf00      	nop
 8012da8:	24004150 	.word	0x24004150
 8012dac:	0801bdd0 	.word	0x0801bdd0
 8012db0:	0801bfc8 	.word	0x0801bfc8
 8012db4:	0801be1c 	.word	0x0801be1c
 8012db8:	24004148 	.word	0x24004148
 8012dbc:	2400414e 	.word	0x2400414e
 8012dc0:	24004144 	.word	0x24004144
 8012dc4:	24004134 	.word	0x24004134
 8012dc8:	240047b4 	.word	0x240047b4
 8012dcc:	240047b8 	.word	0x240047b8
 8012dd0:	240047a4 	.word	0x240047a4
 8012dd4:	24007864 	.word	0x24007864
 8012dd8:	24007860 	.word	0x24007860

08012ddc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	b086      	sub	sp, #24
 8012de0:	af04      	add	r7, sp, #16
 8012de2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8012de4:	4b2f      	ldr	r3, [pc, #188]	; (8012ea4 <tcp_timewait_input+0xc8>)
 8012de6:	781b      	ldrb	r3, [r3, #0]
 8012de8:	f003 0304 	and.w	r3, r3, #4
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d153      	bne.n	8012e98 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d106      	bne.n	8012e04 <tcp_timewait_input+0x28>
 8012df6:	4b2c      	ldr	r3, [pc, #176]	; (8012ea8 <tcp_timewait_input+0xcc>)
 8012df8:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012dfc:	492b      	ldr	r1, [pc, #172]	; (8012eac <tcp_timewait_input+0xd0>)
 8012dfe:	482c      	ldr	r0, [pc, #176]	; (8012eb0 <tcp_timewait_input+0xd4>)
 8012e00:	f006 fe18 	bl	8019a34 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8012e04:	4b27      	ldr	r3, [pc, #156]	; (8012ea4 <tcp_timewait_input+0xc8>)
 8012e06:	781b      	ldrb	r3, [r3, #0]
 8012e08:	f003 0302 	and.w	r3, r3, #2
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d02a      	beq.n	8012e66 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8012e10:	4b28      	ldr	r3, [pc, #160]	; (8012eb4 <tcp_timewait_input+0xd8>)
 8012e12:	681a      	ldr	r2, [r3, #0]
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e18:	1ad3      	subs	r3, r2, r3
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	db2d      	blt.n	8012e7a <tcp_timewait_input+0x9e>
 8012e1e:	4b25      	ldr	r3, [pc, #148]	; (8012eb4 <tcp_timewait_input+0xd8>)
 8012e20:	681a      	ldr	r2, [r3, #0]
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e26:	6879      	ldr	r1, [r7, #4]
 8012e28:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012e2a:	440b      	add	r3, r1
 8012e2c:	1ad3      	subs	r3, r2, r3
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	dc23      	bgt.n	8012e7a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012e32:	4b21      	ldr	r3, [pc, #132]	; (8012eb8 <tcp_timewait_input+0xdc>)
 8012e34:	6819      	ldr	r1, [r3, #0]
 8012e36:	4b21      	ldr	r3, [pc, #132]	; (8012ebc <tcp_timewait_input+0xe0>)
 8012e38:	881b      	ldrh	r3, [r3, #0]
 8012e3a:	461a      	mov	r2, r3
 8012e3c:	4b1d      	ldr	r3, [pc, #116]	; (8012eb4 <tcp_timewait_input+0xd8>)
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012e42:	4b1f      	ldr	r3, [pc, #124]	; (8012ec0 <tcp_timewait_input+0xe4>)
 8012e44:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012e46:	885b      	ldrh	r3, [r3, #2]
 8012e48:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012e4a:	4a1d      	ldr	r2, [pc, #116]	; (8012ec0 <tcp_timewait_input+0xe4>)
 8012e4c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012e4e:	8812      	ldrh	r2, [r2, #0]
 8012e50:	b292      	uxth	r2, r2
 8012e52:	9202      	str	r2, [sp, #8]
 8012e54:	9301      	str	r3, [sp, #4]
 8012e56:	4b1b      	ldr	r3, [pc, #108]	; (8012ec4 <tcp_timewait_input+0xe8>)
 8012e58:	9300      	str	r3, [sp, #0]
 8012e5a:	4b1b      	ldr	r3, [pc, #108]	; (8012ec8 <tcp_timewait_input+0xec>)
 8012e5c:	4602      	mov	r2, r0
 8012e5e:	6878      	ldr	r0, [r7, #4]
 8012e60:	f003 fac8 	bl	80163f4 <tcp_rst>
      return;
 8012e64:	e01b      	b.n	8012e9e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8012e66:	4b0f      	ldr	r3, [pc, #60]	; (8012ea4 <tcp_timewait_input+0xc8>)
 8012e68:	781b      	ldrb	r3, [r3, #0]
 8012e6a:	f003 0301 	and.w	r3, r3, #1
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d003      	beq.n	8012e7a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8012e72:	4b16      	ldr	r3, [pc, #88]	; (8012ecc <tcp_timewait_input+0xf0>)
 8012e74:	681a      	ldr	r2, [r3, #0]
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8012e7a:	4b10      	ldr	r3, [pc, #64]	; (8012ebc <tcp_timewait_input+0xe0>)
 8012e7c:	881b      	ldrh	r3, [r3, #0]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d00c      	beq.n	8012e9c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	8b5b      	ldrh	r3, [r3, #26]
 8012e86:	f043 0302 	orr.w	r3, r3, #2
 8012e8a:	b29a      	uxth	r2, r3
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012e90:	6878      	ldr	r0, [r7, #4]
 8012e92:	f002 fcfb 	bl	801588c <tcp_output>
  }
  return;
 8012e96:	e001      	b.n	8012e9c <tcp_timewait_input+0xc0>
    return;
 8012e98:	bf00      	nop
 8012e9a:	e000      	b.n	8012e9e <tcp_timewait_input+0xc2>
  return;
 8012e9c:	bf00      	nop
}
 8012e9e:	3708      	adds	r7, #8
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	bd80      	pop	{r7, pc}
 8012ea4:	24004150 	.word	0x24004150
 8012ea8:	0801bdd0 	.word	0x0801bdd0
 8012eac:	0801bfe8 	.word	0x0801bfe8
 8012eb0:	0801be1c 	.word	0x0801be1c
 8012eb4:	24004144 	.word	0x24004144
 8012eb8:	24004148 	.word	0x24004148
 8012ebc:	2400414e 	.word	0x2400414e
 8012ec0:	24004134 	.word	0x24004134
 8012ec4:	240047b4 	.word	0x240047b4
 8012ec8:	240047b8 	.word	0x240047b8
 8012ecc:	24007868 	.word	0x24007868

08012ed0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8012ed0:	b590      	push	{r4, r7, lr}
 8012ed2:	b08d      	sub	sp, #52	; 0x34
 8012ed4:	af04      	add	r7, sp, #16
 8012ed6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8012ed8:	2300      	movs	r3, #0
 8012eda:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8012edc:	2300      	movs	r3, #0
 8012ede:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d106      	bne.n	8012ef4 <tcp_process+0x24>
 8012ee6:	4ba5      	ldr	r3, [pc, #660]	; (801317c <tcp_process+0x2ac>)
 8012ee8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8012eec:	49a4      	ldr	r1, [pc, #656]	; (8013180 <tcp_process+0x2b0>)
 8012eee:	48a5      	ldr	r0, [pc, #660]	; (8013184 <tcp_process+0x2b4>)
 8012ef0:	f006 fda0 	bl	8019a34 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8012ef4:	4ba4      	ldr	r3, [pc, #656]	; (8013188 <tcp_process+0x2b8>)
 8012ef6:	781b      	ldrb	r3, [r3, #0]
 8012ef8:	f003 0304 	and.w	r3, r3, #4
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d04e      	beq.n	8012f9e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	7d1b      	ldrb	r3, [r3, #20]
 8012f04:	2b02      	cmp	r3, #2
 8012f06:	d108      	bne.n	8012f1a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012f0c:	4b9f      	ldr	r3, [pc, #636]	; (801318c <tcp_process+0x2bc>)
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	429a      	cmp	r2, r3
 8012f12:	d123      	bne.n	8012f5c <tcp_process+0x8c>
        acceptable = 1;
 8012f14:	2301      	movs	r3, #1
 8012f16:	76fb      	strb	r3, [r7, #27]
 8012f18:	e020      	b.n	8012f5c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012f1e:	4b9c      	ldr	r3, [pc, #624]	; (8013190 <tcp_process+0x2c0>)
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	429a      	cmp	r2, r3
 8012f24:	d102      	bne.n	8012f2c <tcp_process+0x5c>
        acceptable = 1;
 8012f26:	2301      	movs	r3, #1
 8012f28:	76fb      	strb	r3, [r7, #27]
 8012f2a:	e017      	b.n	8012f5c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012f2c:	4b98      	ldr	r3, [pc, #608]	; (8013190 <tcp_process+0x2c0>)
 8012f2e:	681a      	ldr	r2, [r3, #0]
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f34:	1ad3      	subs	r3, r2, r3
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	db10      	blt.n	8012f5c <tcp_process+0x8c>
 8012f3a:	4b95      	ldr	r3, [pc, #596]	; (8013190 <tcp_process+0x2c0>)
 8012f3c:	681a      	ldr	r2, [r3, #0]
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f42:	6879      	ldr	r1, [r7, #4]
 8012f44:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012f46:	440b      	add	r3, r1
 8012f48:	1ad3      	subs	r3, r2, r3
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	dc06      	bgt.n	8012f5c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	8b5b      	ldrh	r3, [r3, #26]
 8012f52:	f043 0302 	orr.w	r3, r3, #2
 8012f56:	b29a      	uxth	r2, r3
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8012f5c:	7efb      	ldrb	r3, [r7, #27]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d01b      	beq.n	8012f9a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	7d1b      	ldrb	r3, [r3, #20]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d106      	bne.n	8012f78 <tcp_process+0xa8>
 8012f6a:	4b84      	ldr	r3, [pc, #528]	; (801317c <tcp_process+0x2ac>)
 8012f6c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8012f70:	4988      	ldr	r1, [pc, #544]	; (8013194 <tcp_process+0x2c4>)
 8012f72:	4884      	ldr	r0, [pc, #528]	; (8013184 <tcp_process+0x2b4>)
 8012f74:	f006 fd5e 	bl	8019a34 <iprintf>
      recv_flags |= TF_RESET;
 8012f78:	4b87      	ldr	r3, [pc, #540]	; (8013198 <tcp_process+0x2c8>)
 8012f7a:	781b      	ldrb	r3, [r3, #0]
 8012f7c:	f043 0308 	orr.w	r3, r3, #8
 8012f80:	b2da      	uxtb	r2, r3
 8012f82:	4b85      	ldr	r3, [pc, #532]	; (8013198 <tcp_process+0x2c8>)
 8012f84:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	8b5b      	ldrh	r3, [r3, #26]
 8012f8a:	f023 0301 	bic.w	r3, r3, #1
 8012f8e:	b29a      	uxth	r2, r3
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8012f94:	f06f 030d 	mvn.w	r3, #13
 8012f98:	e37a      	b.n	8013690 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8012f9a:	2300      	movs	r3, #0
 8012f9c:	e378      	b.n	8013690 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8012f9e:	4b7a      	ldr	r3, [pc, #488]	; (8013188 <tcp_process+0x2b8>)
 8012fa0:	781b      	ldrb	r3, [r3, #0]
 8012fa2:	f003 0302 	and.w	r3, r3, #2
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d010      	beq.n	8012fcc <tcp_process+0xfc>
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	7d1b      	ldrb	r3, [r3, #20]
 8012fae:	2b02      	cmp	r3, #2
 8012fb0:	d00c      	beq.n	8012fcc <tcp_process+0xfc>
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	7d1b      	ldrb	r3, [r3, #20]
 8012fb6:	2b03      	cmp	r3, #3
 8012fb8:	d008      	beq.n	8012fcc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	8b5b      	ldrh	r3, [r3, #26]
 8012fbe:	f043 0302 	orr.w	r3, r3, #2
 8012fc2:	b29a      	uxth	r2, r3
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8012fc8:	2300      	movs	r3, #0
 8012fca:	e361      	b.n	8013690 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	8b5b      	ldrh	r3, [r3, #26]
 8012fd0:	f003 0310 	and.w	r3, r3, #16
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d103      	bne.n	8012fe0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8012fd8:	4b70      	ldr	r3, [pc, #448]	; (801319c <tcp_process+0x2cc>)
 8012fda:	681a      	ldr	r2, [r3, #0]
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	2200      	movs	r2, #0
 8012fe4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	2200      	movs	r2, #0
 8012fec:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8012ff0:	6878      	ldr	r0, [r7, #4]
 8012ff2:	f001 fc2d 	bl	8014850 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	7d1b      	ldrb	r3, [r3, #20]
 8012ffa:	3b02      	subs	r3, #2
 8012ffc:	2b07      	cmp	r3, #7
 8012ffe:	f200 8337 	bhi.w	8013670 <tcp_process+0x7a0>
 8013002:	a201      	add	r2, pc, #4	; (adr r2, 8013008 <tcp_process+0x138>)
 8013004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013008:	08013029 	.word	0x08013029
 801300c:	08013259 	.word	0x08013259
 8013010:	080133d1 	.word	0x080133d1
 8013014:	080133fb 	.word	0x080133fb
 8013018:	0801351f 	.word	0x0801351f
 801301c:	080133d1 	.word	0x080133d1
 8013020:	080135ab 	.word	0x080135ab
 8013024:	0801363b 	.word	0x0801363b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8013028:	4b57      	ldr	r3, [pc, #348]	; (8013188 <tcp_process+0x2b8>)
 801302a:	781b      	ldrb	r3, [r3, #0]
 801302c:	f003 0310 	and.w	r3, r3, #16
 8013030:	2b00      	cmp	r3, #0
 8013032:	f000 80e4 	beq.w	80131fe <tcp_process+0x32e>
 8013036:	4b54      	ldr	r3, [pc, #336]	; (8013188 <tcp_process+0x2b8>)
 8013038:	781b      	ldrb	r3, [r3, #0]
 801303a:	f003 0302 	and.w	r3, r3, #2
 801303e:	2b00      	cmp	r3, #0
 8013040:	f000 80dd 	beq.w	80131fe <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013048:	1c5a      	adds	r2, r3, #1
 801304a:	4b50      	ldr	r3, [pc, #320]	; (801318c <tcp_process+0x2bc>)
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	429a      	cmp	r2, r3
 8013050:	f040 80d5 	bne.w	80131fe <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8013054:	4b4e      	ldr	r3, [pc, #312]	; (8013190 <tcp_process+0x2c0>)
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	1c5a      	adds	r2, r3, #1
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8013066:	4b49      	ldr	r3, [pc, #292]	; (801318c <tcp_process+0x2bc>)
 8013068:	681a      	ldr	r2, [r3, #0]
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801306e:	4b4c      	ldr	r3, [pc, #304]	; (80131a0 <tcp_process+0x2d0>)
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	89db      	ldrh	r3, [r3, #14]
 8013074:	b29a      	uxth	r2, r3
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8013088:	4b41      	ldr	r3, [pc, #260]	; (8013190 <tcp_process+0x2c0>)
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	1e5a      	subs	r2, r3, #1
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	2204      	movs	r2, #4
 8013096:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	3304      	adds	r3, #4
 80130a0:	4618      	mov	r0, r3
 80130a2:	f004 ff9d 	bl	8017fe0 <ip4_route>
 80130a6:	4601      	mov	r1, r0
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	3304      	adds	r3, #4
 80130ac:	461a      	mov	r2, r3
 80130ae:	4620      	mov	r0, r4
 80130b0:	f7ff f88e 	bl	80121d0 <tcp_eff_send_mss_netif>
 80130b4:	4603      	mov	r3, r0
 80130b6:	461a      	mov	r2, r3
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80130c0:	009a      	lsls	r2, r3, #2
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80130c6:	005b      	lsls	r3, r3, #1
 80130c8:	f241 111c 	movw	r1, #4380	; 0x111c
 80130cc:	428b      	cmp	r3, r1
 80130ce:	bf38      	it	cc
 80130d0:	460b      	movcc	r3, r1
 80130d2:	429a      	cmp	r2, r3
 80130d4:	d204      	bcs.n	80130e0 <tcp_process+0x210>
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80130da:	009b      	lsls	r3, r3, #2
 80130dc:	b29b      	uxth	r3, r3
 80130de:	e00d      	b.n	80130fc <tcp_process+0x22c>
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80130e4:	005b      	lsls	r3, r3, #1
 80130e6:	f241 121c 	movw	r2, #4380	; 0x111c
 80130ea:	4293      	cmp	r3, r2
 80130ec:	d904      	bls.n	80130f8 <tcp_process+0x228>
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80130f2:	005b      	lsls	r3, r3, #1
 80130f4:	b29b      	uxth	r3, r3
 80130f6:	e001      	b.n	80130fc <tcp_process+0x22c>
 80130f8:	f241 131c 	movw	r3, #4380	; 0x111c
 80130fc:	687a      	ldr	r2, [r7, #4]
 80130fe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013108:	2b00      	cmp	r3, #0
 801310a:	d106      	bne.n	801311a <tcp_process+0x24a>
 801310c:	4b1b      	ldr	r3, [pc, #108]	; (801317c <tcp_process+0x2ac>)
 801310e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8013112:	4924      	ldr	r1, [pc, #144]	; (80131a4 <tcp_process+0x2d4>)
 8013114:	481b      	ldr	r0, [pc, #108]	; (8013184 <tcp_process+0x2b4>)
 8013116:	f006 fc8d 	bl	8019a34 <iprintf>
        --pcb->snd_queuelen;
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013120:	3b01      	subs	r3, #1
 8013122:	b29a      	uxth	r2, r3
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801312e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8013130:	69fb      	ldr	r3, [r7, #28]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d111      	bne.n	801315a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801313a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801313c:	69fb      	ldr	r3, [r7, #28]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d106      	bne.n	8013150 <tcp_process+0x280>
 8013142:	4b0e      	ldr	r3, [pc, #56]	; (801317c <tcp_process+0x2ac>)
 8013144:	f44f 725d 	mov.w	r2, #884	; 0x374
 8013148:	4917      	ldr	r1, [pc, #92]	; (80131a8 <tcp_process+0x2d8>)
 801314a:	480e      	ldr	r0, [pc, #56]	; (8013184 <tcp_process+0x2b4>)
 801314c:	f006 fc72 	bl	8019a34 <iprintf>
          pcb->unsent = rseg->next;
 8013150:	69fb      	ldr	r3, [r7, #28]
 8013152:	681a      	ldr	r2, [r3, #0]
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	66da      	str	r2, [r3, #108]	; 0x6c
 8013158:	e003      	b.n	8013162 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801315a:	69fb      	ldr	r3, [r7, #28]
 801315c:	681a      	ldr	r2, [r3, #0]
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8013162:	69f8      	ldr	r0, [r7, #28]
 8013164:	f7fe fc57 	bl	8011a16 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801316c:	2b00      	cmp	r3, #0
 801316e:	d11d      	bne.n	80131ac <tcp_process+0x2dc>
          pcb->rtime = -1;
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013176:	861a      	strh	r2, [r3, #48]	; 0x30
 8013178:	e01f      	b.n	80131ba <tcp_process+0x2ea>
 801317a:	bf00      	nop
 801317c:	0801bdd0 	.word	0x0801bdd0
 8013180:	0801c008 	.word	0x0801c008
 8013184:	0801be1c 	.word	0x0801be1c
 8013188:	24004150 	.word	0x24004150
 801318c:	24004148 	.word	0x24004148
 8013190:	24004144 	.word	0x24004144
 8013194:	0801c024 	.word	0x0801c024
 8013198:	24004151 	.word	0x24004151
 801319c:	24007868 	.word	0x24007868
 80131a0:	24004134 	.word	0x24004134
 80131a4:	0801c044 	.word	0x0801c044
 80131a8:	0801c05c 	.word	0x0801c05c
        } else {
          pcb->rtime = 0;
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	2200      	movs	r2, #0
 80131b0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	2200      	movs	r2, #0
 80131b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d00a      	beq.n	80131da <tcp_process+0x30a>
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80131ca:	687a      	ldr	r2, [r7, #4]
 80131cc:	6910      	ldr	r0, [r2, #16]
 80131ce:	2200      	movs	r2, #0
 80131d0:	6879      	ldr	r1, [r7, #4]
 80131d2:	4798      	blx	r3
 80131d4:	4603      	mov	r3, r0
 80131d6:	76bb      	strb	r3, [r7, #26]
 80131d8:	e001      	b.n	80131de <tcp_process+0x30e>
 80131da:	2300      	movs	r3, #0
 80131dc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80131de:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80131e2:	f113 0f0d 	cmn.w	r3, #13
 80131e6:	d102      	bne.n	80131ee <tcp_process+0x31e>
          return ERR_ABRT;
 80131e8:	f06f 030c 	mvn.w	r3, #12
 80131ec:	e250      	b.n	8013690 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	8b5b      	ldrh	r3, [r3, #26]
 80131f2:	f043 0302 	orr.w	r3, r3, #2
 80131f6:	b29a      	uxth	r2, r3
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80131fc:	e23a      	b.n	8013674 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80131fe:	4b9d      	ldr	r3, [pc, #628]	; (8013474 <tcp_process+0x5a4>)
 8013200:	781b      	ldrb	r3, [r3, #0]
 8013202:	f003 0310 	and.w	r3, r3, #16
 8013206:	2b00      	cmp	r3, #0
 8013208:	f000 8234 	beq.w	8013674 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801320c:	4b9a      	ldr	r3, [pc, #616]	; (8013478 <tcp_process+0x5a8>)
 801320e:	6819      	ldr	r1, [r3, #0]
 8013210:	4b9a      	ldr	r3, [pc, #616]	; (801347c <tcp_process+0x5ac>)
 8013212:	881b      	ldrh	r3, [r3, #0]
 8013214:	461a      	mov	r2, r3
 8013216:	4b9a      	ldr	r3, [pc, #616]	; (8013480 <tcp_process+0x5b0>)
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801321c:	4b99      	ldr	r3, [pc, #612]	; (8013484 <tcp_process+0x5b4>)
 801321e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013220:	885b      	ldrh	r3, [r3, #2]
 8013222:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013224:	4a97      	ldr	r2, [pc, #604]	; (8013484 <tcp_process+0x5b4>)
 8013226:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013228:	8812      	ldrh	r2, [r2, #0]
 801322a:	b292      	uxth	r2, r2
 801322c:	9202      	str	r2, [sp, #8]
 801322e:	9301      	str	r3, [sp, #4]
 8013230:	4b95      	ldr	r3, [pc, #596]	; (8013488 <tcp_process+0x5b8>)
 8013232:	9300      	str	r3, [sp, #0]
 8013234:	4b95      	ldr	r3, [pc, #596]	; (801348c <tcp_process+0x5bc>)
 8013236:	4602      	mov	r2, r0
 8013238:	6878      	ldr	r0, [r7, #4]
 801323a:	f003 f8db 	bl	80163f4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013244:	2b05      	cmp	r3, #5
 8013246:	f200 8215 	bhi.w	8013674 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	2200      	movs	r2, #0
 801324e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8013250:	6878      	ldr	r0, [r7, #4]
 8013252:	f002 fea5 	bl	8015fa0 <tcp_rexmit_rto>
      break;
 8013256:	e20d      	b.n	8013674 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8013258:	4b86      	ldr	r3, [pc, #536]	; (8013474 <tcp_process+0x5a4>)
 801325a:	781b      	ldrb	r3, [r3, #0]
 801325c:	f003 0310 	and.w	r3, r3, #16
 8013260:	2b00      	cmp	r3, #0
 8013262:	f000 80a1 	beq.w	80133a8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013266:	4b84      	ldr	r3, [pc, #528]	; (8013478 <tcp_process+0x5a8>)
 8013268:	681a      	ldr	r2, [r3, #0]
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801326e:	1ad3      	subs	r3, r2, r3
 8013270:	3b01      	subs	r3, #1
 8013272:	2b00      	cmp	r3, #0
 8013274:	db7e      	blt.n	8013374 <tcp_process+0x4a4>
 8013276:	4b80      	ldr	r3, [pc, #512]	; (8013478 <tcp_process+0x5a8>)
 8013278:	681a      	ldr	r2, [r3, #0]
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801327e:	1ad3      	subs	r3, r2, r3
 8013280:	2b00      	cmp	r3, #0
 8013282:	dc77      	bgt.n	8013374 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	2204      	movs	r2, #4
 8013288:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801328e:	2b00      	cmp	r3, #0
 8013290:	d102      	bne.n	8013298 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8013292:	23fa      	movs	r3, #250	; 0xfa
 8013294:	76bb      	strb	r3, [r7, #26]
 8013296:	e01d      	b.n	80132d4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801329c:	699b      	ldr	r3, [r3, #24]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d106      	bne.n	80132b0 <tcp_process+0x3e0>
 80132a2:	4b7b      	ldr	r3, [pc, #492]	; (8013490 <tcp_process+0x5c0>)
 80132a4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80132a8:	497a      	ldr	r1, [pc, #488]	; (8013494 <tcp_process+0x5c4>)
 80132aa:	487b      	ldr	r0, [pc, #492]	; (8013498 <tcp_process+0x5c8>)
 80132ac:	f006 fbc2 	bl	8019a34 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80132b4:	699b      	ldr	r3, [r3, #24]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d00a      	beq.n	80132d0 <tcp_process+0x400>
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80132be:	699b      	ldr	r3, [r3, #24]
 80132c0:	687a      	ldr	r2, [r7, #4]
 80132c2:	6910      	ldr	r0, [r2, #16]
 80132c4:	2200      	movs	r2, #0
 80132c6:	6879      	ldr	r1, [r7, #4]
 80132c8:	4798      	blx	r3
 80132ca:	4603      	mov	r3, r0
 80132cc:	76bb      	strb	r3, [r7, #26]
 80132ce:	e001      	b.n	80132d4 <tcp_process+0x404>
 80132d0:	23f0      	movs	r3, #240	; 0xf0
 80132d2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80132d4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d00a      	beq.n	80132f2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80132dc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80132e0:	f113 0f0d 	cmn.w	r3, #13
 80132e4:	d002      	beq.n	80132ec <tcp_process+0x41c>
              tcp_abort(pcb);
 80132e6:	6878      	ldr	r0, [r7, #4]
 80132e8:	f7fd fcf0 	bl	8010ccc <tcp_abort>
            }
            return ERR_ABRT;
 80132ec:	f06f 030c 	mvn.w	r3, #12
 80132f0:	e1ce      	b.n	8013690 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80132f2:	6878      	ldr	r0, [r7, #4]
 80132f4:	f000 fae0 	bl	80138b8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80132f8:	4b68      	ldr	r3, [pc, #416]	; (801349c <tcp_process+0x5cc>)
 80132fa:	881b      	ldrh	r3, [r3, #0]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d005      	beq.n	801330c <tcp_process+0x43c>
            recv_acked--;
 8013300:	4b66      	ldr	r3, [pc, #408]	; (801349c <tcp_process+0x5cc>)
 8013302:	881b      	ldrh	r3, [r3, #0]
 8013304:	3b01      	subs	r3, #1
 8013306:	b29a      	uxth	r2, r3
 8013308:	4b64      	ldr	r3, [pc, #400]	; (801349c <tcp_process+0x5cc>)
 801330a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013310:	009a      	lsls	r2, r3, #2
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013316:	005b      	lsls	r3, r3, #1
 8013318:	f241 111c 	movw	r1, #4380	; 0x111c
 801331c:	428b      	cmp	r3, r1
 801331e:	bf38      	it	cc
 8013320:	460b      	movcc	r3, r1
 8013322:	429a      	cmp	r2, r3
 8013324:	d204      	bcs.n	8013330 <tcp_process+0x460>
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801332a:	009b      	lsls	r3, r3, #2
 801332c:	b29b      	uxth	r3, r3
 801332e:	e00d      	b.n	801334c <tcp_process+0x47c>
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013334:	005b      	lsls	r3, r3, #1
 8013336:	f241 121c 	movw	r2, #4380	; 0x111c
 801333a:	4293      	cmp	r3, r2
 801333c:	d904      	bls.n	8013348 <tcp_process+0x478>
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013342:	005b      	lsls	r3, r3, #1
 8013344:	b29b      	uxth	r3, r3
 8013346:	e001      	b.n	801334c <tcp_process+0x47c>
 8013348:	f241 131c 	movw	r3, #4380	; 0x111c
 801334c:	687a      	ldr	r2, [r7, #4]
 801334e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8013352:	4b53      	ldr	r3, [pc, #332]	; (80134a0 <tcp_process+0x5d0>)
 8013354:	781b      	ldrb	r3, [r3, #0]
 8013356:	f003 0320 	and.w	r3, r3, #32
 801335a:	2b00      	cmp	r3, #0
 801335c:	d037      	beq.n	80133ce <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	8b5b      	ldrh	r3, [r3, #26]
 8013362:	f043 0302 	orr.w	r3, r3, #2
 8013366:	b29a      	uxth	r2, r3
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	2207      	movs	r2, #7
 8013370:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8013372:	e02c      	b.n	80133ce <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013374:	4b40      	ldr	r3, [pc, #256]	; (8013478 <tcp_process+0x5a8>)
 8013376:	6819      	ldr	r1, [r3, #0]
 8013378:	4b40      	ldr	r3, [pc, #256]	; (801347c <tcp_process+0x5ac>)
 801337a:	881b      	ldrh	r3, [r3, #0]
 801337c:	461a      	mov	r2, r3
 801337e:	4b40      	ldr	r3, [pc, #256]	; (8013480 <tcp_process+0x5b0>)
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013384:	4b3f      	ldr	r3, [pc, #252]	; (8013484 <tcp_process+0x5b4>)
 8013386:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013388:	885b      	ldrh	r3, [r3, #2]
 801338a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801338c:	4a3d      	ldr	r2, [pc, #244]	; (8013484 <tcp_process+0x5b4>)
 801338e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013390:	8812      	ldrh	r2, [r2, #0]
 8013392:	b292      	uxth	r2, r2
 8013394:	9202      	str	r2, [sp, #8]
 8013396:	9301      	str	r3, [sp, #4]
 8013398:	4b3b      	ldr	r3, [pc, #236]	; (8013488 <tcp_process+0x5b8>)
 801339a:	9300      	str	r3, [sp, #0]
 801339c:	4b3b      	ldr	r3, [pc, #236]	; (801348c <tcp_process+0x5bc>)
 801339e:	4602      	mov	r2, r0
 80133a0:	6878      	ldr	r0, [r7, #4]
 80133a2:	f003 f827 	bl	80163f4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80133a6:	e167      	b.n	8013678 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80133a8:	4b32      	ldr	r3, [pc, #200]	; (8013474 <tcp_process+0x5a4>)
 80133aa:	781b      	ldrb	r3, [r3, #0]
 80133ac:	f003 0302 	and.w	r3, r3, #2
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	f000 8161 	beq.w	8013678 <tcp_process+0x7a8>
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133ba:	1e5a      	subs	r2, r3, #1
 80133bc:	4b30      	ldr	r3, [pc, #192]	; (8013480 <tcp_process+0x5b0>)
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	429a      	cmp	r2, r3
 80133c2:	f040 8159 	bne.w	8013678 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80133c6:	6878      	ldr	r0, [r7, #4]
 80133c8:	f002 fe0c 	bl	8015fe4 <tcp_rexmit>
      break;
 80133cc:	e154      	b.n	8013678 <tcp_process+0x7a8>
 80133ce:	e153      	b.n	8013678 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80133d0:	6878      	ldr	r0, [r7, #4]
 80133d2:	f000 fa71 	bl	80138b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80133d6:	4b32      	ldr	r3, [pc, #200]	; (80134a0 <tcp_process+0x5d0>)
 80133d8:	781b      	ldrb	r3, [r3, #0]
 80133da:	f003 0320 	and.w	r3, r3, #32
 80133de:	2b00      	cmp	r3, #0
 80133e0:	f000 814c 	beq.w	801367c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	8b5b      	ldrh	r3, [r3, #26]
 80133e8:	f043 0302 	orr.w	r3, r3, #2
 80133ec:	b29a      	uxth	r2, r3
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	2207      	movs	r2, #7
 80133f6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80133f8:	e140      	b.n	801367c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80133fa:	6878      	ldr	r0, [r7, #4]
 80133fc:	f000 fa5c 	bl	80138b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013400:	4b27      	ldr	r3, [pc, #156]	; (80134a0 <tcp_process+0x5d0>)
 8013402:	781b      	ldrb	r3, [r3, #0]
 8013404:	f003 0320 	and.w	r3, r3, #32
 8013408:	2b00      	cmp	r3, #0
 801340a:	d071      	beq.n	80134f0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801340c:	4b19      	ldr	r3, [pc, #100]	; (8013474 <tcp_process+0x5a4>)
 801340e:	781b      	ldrb	r3, [r3, #0]
 8013410:	f003 0310 	and.w	r3, r3, #16
 8013414:	2b00      	cmp	r3, #0
 8013416:	d060      	beq.n	80134da <tcp_process+0x60a>
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801341c:	4b16      	ldr	r3, [pc, #88]	; (8013478 <tcp_process+0x5a8>)
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	429a      	cmp	r2, r3
 8013422:	d15a      	bne.n	80134da <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013428:	2b00      	cmp	r3, #0
 801342a:	d156      	bne.n	80134da <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	8b5b      	ldrh	r3, [r3, #26]
 8013430:	f043 0302 	orr.w	r3, r3, #2
 8013434:	b29a      	uxth	r2, r3
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801343a:	6878      	ldr	r0, [r7, #4]
 801343c:	f7fe fdbe 	bl	8011fbc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013440:	4b18      	ldr	r3, [pc, #96]	; (80134a4 <tcp_process+0x5d4>)
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	687a      	ldr	r2, [r7, #4]
 8013446:	429a      	cmp	r2, r3
 8013448:	d105      	bne.n	8013456 <tcp_process+0x586>
 801344a:	4b16      	ldr	r3, [pc, #88]	; (80134a4 <tcp_process+0x5d4>)
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	68db      	ldr	r3, [r3, #12]
 8013450:	4a14      	ldr	r2, [pc, #80]	; (80134a4 <tcp_process+0x5d4>)
 8013452:	6013      	str	r3, [r2, #0]
 8013454:	e02e      	b.n	80134b4 <tcp_process+0x5e4>
 8013456:	4b13      	ldr	r3, [pc, #76]	; (80134a4 <tcp_process+0x5d4>)
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	617b      	str	r3, [r7, #20]
 801345c:	e027      	b.n	80134ae <tcp_process+0x5de>
 801345e:	697b      	ldr	r3, [r7, #20]
 8013460:	68db      	ldr	r3, [r3, #12]
 8013462:	687a      	ldr	r2, [r7, #4]
 8013464:	429a      	cmp	r2, r3
 8013466:	d11f      	bne.n	80134a8 <tcp_process+0x5d8>
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	68da      	ldr	r2, [r3, #12]
 801346c:	697b      	ldr	r3, [r7, #20]
 801346e:	60da      	str	r2, [r3, #12]
 8013470:	e020      	b.n	80134b4 <tcp_process+0x5e4>
 8013472:	bf00      	nop
 8013474:	24004150 	.word	0x24004150
 8013478:	24004148 	.word	0x24004148
 801347c:	2400414e 	.word	0x2400414e
 8013480:	24004144 	.word	0x24004144
 8013484:	24004134 	.word	0x24004134
 8013488:	240047b4 	.word	0x240047b4
 801348c:	240047b8 	.word	0x240047b8
 8013490:	0801bdd0 	.word	0x0801bdd0
 8013494:	0801c070 	.word	0x0801c070
 8013498:	0801be1c 	.word	0x0801be1c
 801349c:	2400414c 	.word	0x2400414c
 80134a0:	24004151 	.word	0x24004151
 80134a4:	24007864 	.word	0x24007864
 80134a8:	697b      	ldr	r3, [r7, #20]
 80134aa:	68db      	ldr	r3, [r3, #12]
 80134ac:	617b      	str	r3, [r7, #20]
 80134ae:	697b      	ldr	r3, [r7, #20]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d1d4      	bne.n	801345e <tcp_process+0x58e>
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	2200      	movs	r2, #0
 80134b8:	60da      	str	r2, [r3, #12]
 80134ba:	4b77      	ldr	r3, [pc, #476]	; (8013698 <tcp_process+0x7c8>)
 80134bc:	2201      	movs	r2, #1
 80134be:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	220a      	movs	r2, #10
 80134c4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80134c6:	4b75      	ldr	r3, [pc, #468]	; (801369c <tcp_process+0x7cc>)
 80134c8:	681a      	ldr	r2, [r3, #0]
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	60da      	str	r2, [r3, #12]
 80134ce:	4a73      	ldr	r2, [pc, #460]	; (801369c <tcp_process+0x7cc>)
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	6013      	str	r3, [r2, #0]
 80134d4:	f003 f950 	bl	8016778 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80134d8:	e0d2      	b.n	8013680 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	8b5b      	ldrh	r3, [r3, #26]
 80134de:	f043 0302 	orr.w	r3, r3, #2
 80134e2:	b29a      	uxth	r2, r3
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	2208      	movs	r2, #8
 80134ec:	751a      	strb	r2, [r3, #20]
      break;
 80134ee:	e0c7      	b.n	8013680 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80134f0:	4b6b      	ldr	r3, [pc, #428]	; (80136a0 <tcp_process+0x7d0>)
 80134f2:	781b      	ldrb	r3, [r3, #0]
 80134f4:	f003 0310 	and.w	r3, r3, #16
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	f000 80c1 	beq.w	8013680 <tcp_process+0x7b0>
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013502:	4b68      	ldr	r3, [pc, #416]	; (80136a4 <tcp_process+0x7d4>)
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	429a      	cmp	r2, r3
 8013508:	f040 80ba 	bne.w	8013680 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013510:	2b00      	cmp	r3, #0
 8013512:	f040 80b5 	bne.w	8013680 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	2206      	movs	r2, #6
 801351a:	751a      	strb	r2, [r3, #20]
      break;
 801351c:	e0b0      	b.n	8013680 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801351e:	6878      	ldr	r0, [r7, #4]
 8013520:	f000 f9ca 	bl	80138b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013524:	4b60      	ldr	r3, [pc, #384]	; (80136a8 <tcp_process+0x7d8>)
 8013526:	781b      	ldrb	r3, [r3, #0]
 8013528:	f003 0320 	and.w	r3, r3, #32
 801352c:	2b00      	cmp	r3, #0
 801352e:	f000 80a9 	beq.w	8013684 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	8b5b      	ldrh	r3, [r3, #26]
 8013536:	f043 0302 	orr.w	r3, r3, #2
 801353a:	b29a      	uxth	r2, r3
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013540:	6878      	ldr	r0, [r7, #4]
 8013542:	f7fe fd3b 	bl	8011fbc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013546:	4b59      	ldr	r3, [pc, #356]	; (80136ac <tcp_process+0x7dc>)
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	687a      	ldr	r2, [r7, #4]
 801354c:	429a      	cmp	r2, r3
 801354e:	d105      	bne.n	801355c <tcp_process+0x68c>
 8013550:	4b56      	ldr	r3, [pc, #344]	; (80136ac <tcp_process+0x7dc>)
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	68db      	ldr	r3, [r3, #12]
 8013556:	4a55      	ldr	r2, [pc, #340]	; (80136ac <tcp_process+0x7dc>)
 8013558:	6013      	str	r3, [r2, #0]
 801355a:	e013      	b.n	8013584 <tcp_process+0x6b4>
 801355c:	4b53      	ldr	r3, [pc, #332]	; (80136ac <tcp_process+0x7dc>)
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	613b      	str	r3, [r7, #16]
 8013562:	e00c      	b.n	801357e <tcp_process+0x6ae>
 8013564:	693b      	ldr	r3, [r7, #16]
 8013566:	68db      	ldr	r3, [r3, #12]
 8013568:	687a      	ldr	r2, [r7, #4]
 801356a:	429a      	cmp	r2, r3
 801356c:	d104      	bne.n	8013578 <tcp_process+0x6a8>
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	68da      	ldr	r2, [r3, #12]
 8013572:	693b      	ldr	r3, [r7, #16]
 8013574:	60da      	str	r2, [r3, #12]
 8013576:	e005      	b.n	8013584 <tcp_process+0x6b4>
 8013578:	693b      	ldr	r3, [r7, #16]
 801357a:	68db      	ldr	r3, [r3, #12]
 801357c:	613b      	str	r3, [r7, #16]
 801357e:	693b      	ldr	r3, [r7, #16]
 8013580:	2b00      	cmp	r3, #0
 8013582:	d1ef      	bne.n	8013564 <tcp_process+0x694>
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	2200      	movs	r2, #0
 8013588:	60da      	str	r2, [r3, #12]
 801358a:	4b43      	ldr	r3, [pc, #268]	; (8013698 <tcp_process+0x7c8>)
 801358c:	2201      	movs	r2, #1
 801358e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	220a      	movs	r2, #10
 8013594:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013596:	4b41      	ldr	r3, [pc, #260]	; (801369c <tcp_process+0x7cc>)
 8013598:	681a      	ldr	r2, [r3, #0]
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	60da      	str	r2, [r3, #12]
 801359e:	4a3f      	ldr	r2, [pc, #252]	; (801369c <tcp_process+0x7cc>)
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	6013      	str	r3, [r2, #0]
 80135a4:	f003 f8e8 	bl	8016778 <tcp_timer_needed>
      }
      break;
 80135a8:	e06c      	b.n	8013684 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80135aa:	6878      	ldr	r0, [r7, #4]
 80135ac:	f000 f984 	bl	80138b8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80135b0:	4b3b      	ldr	r3, [pc, #236]	; (80136a0 <tcp_process+0x7d0>)
 80135b2:	781b      	ldrb	r3, [r3, #0]
 80135b4:	f003 0310 	and.w	r3, r3, #16
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d065      	beq.n	8013688 <tcp_process+0x7b8>
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80135c0:	4b38      	ldr	r3, [pc, #224]	; (80136a4 <tcp_process+0x7d4>)
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	429a      	cmp	r2, r3
 80135c6:	d15f      	bne.n	8013688 <tcp_process+0x7b8>
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d15b      	bne.n	8013688 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80135d0:	6878      	ldr	r0, [r7, #4]
 80135d2:	f7fe fcf3 	bl	8011fbc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80135d6:	4b35      	ldr	r3, [pc, #212]	; (80136ac <tcp_process+0x7dc>)
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	687a      	ldr	r2, [r7, #4]
 80135dc:	429a      	cmp	r2, r3
 80135de:	d105      	bne.n	80135ec <tcp_process+0x71c>
 80135e0:	4b32      	ldr	r3, [pc, #200]	; (80136ac <tcp_process+0x7dc>)
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	68db      	ldr	r3, [r3, #12]
 80135e6:	4a31      	ldr	r2, [pc, #196]	; (80136ac <tcp_process+0x7dc>)
 80135e8:	6013      	str	r3, [r2, #0]
 80135ea:	e013      	b.n	8013614 <tcp_process+0x744>
 80135ec:	4b2f      	ldr	r3, [pc, #188]	; (80136ac <tcp_process+0x7dc>)
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	60fb      	str	r3, [r7, #12]
 80135f2:	e00c      	b.n	801360e <tcp_process+0x73e>
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	68db      	ldr	r3, [r3, #12]
 80135f8:	687a      	ldr	r2, [r7, #4]
 80135fa:	429a      	cmp	r2, r3
 80135fc:	d104      	bne.n	8013608 <tcp_process+0x738>
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	68da      	ldr	r2, [r3, #12]
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	60da      	str	r2, [r3, #12]
 8013606:	e005      	b.n	8013614 <tcp_process+0x744>
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	68db      	ldr	r3, [r3, #12]
 801360c:	60fb      	str	r3, [r7, #12]
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d1ef      	bne.n	80135f4 <tcp_process+0x724>
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	2200      	movs	r2, #0
 8013618:	60da      	str	r2, [r3, #12]
 801361a:	4b1f      	ldr	r3, [pc, #124]	; (8013698 <tcp_process+0x7c8>)
 801361c:	2201      	movs	r2, #1
 801361e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	220a      	movs	r2, #10
 8013624:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013626:	4b1d      	ldr	r3, [pc, #116]	; (801369c <tcp_process+0x7cc>)
 8013628:	681a      	ldr	r2, [r3, #0]
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	60da      	str	r2, [r3, #12]
 801362e:	4a1b      	ldr	r2, [pc, #108]	; (801369c <tcp_process+0x7cc>)
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	6013      	str	r3, [r2, #0]
 8013634:	f003 f8a0 	bl	8016778 <tcp_timer_needed>
      }
      break;
 8013638:	e026      	b.n	8013688 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801363a:	6878      	ldr	r0, [r7, #4]
 801363c:	f000 f93c 	bl	80138b8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013640:	4b17      	ldr	r3, [pc, #92]	; (80136a0 <tcp_process+0x7d0>)
 8013642:	781b      	ldrb	r3, [r3, #0]
 8013644:	f003 0310 	and.w	r3, r3, #16
 8013648:	2b00      	cmp	r3, #0
 801364a:	d01f      	beq.n	801368c <tcp_process+0x7bc>
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013650:	4b14      	ldr	r3, [pc, #80]	; (80136a4 <tcp_process+0x7d4>)
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	429a      	cmp	r2, r3
 8013656:	d119      	bne.n	801368c <tcp_process+0x7bc>
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801365c:	2b00      	cmp	r3, #0
 801365e:	d115      	bne.n	801368c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8013660:	4b11      	ldr	r3, [pc, #68]	; (80136a8 <tcp_process+0x7d8>)
 8013662:	781b      	ldrb	r3, [r3, #0]
 8013664:	f043 0310 	orr.w	r3, r3, #16
 8013668:	b2da      	uxtb	r2, r3
 801366a:	4b0f      	ldr	r3, [pc, #60]	; (80136a8 <tcp_process+0x7d8>)
 801366c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801366e:	e00d      	b.n	801368c <tcp_process+0x7bc>
    default:
      break;
 8013670:	bf00      	nop
 8013672:	e00c      	b.n	801368e <tcp_process+0x7be>
      break;
 8013674:	bf00      	nop
 8013676:	e00a      	b.n	801368e <tcp_process+0x7be>
      break;
 8013678:	bf00      	nop
 801367a:	e008      	b.n	801368e <tcp_process+0x7be>
      break;
 801367c:	bf00      	nop
 801367e:	e006      	b.n	801368e <tcp_process+0x7be>
      break;
 8013680:	bf00      	nop
 8013682:	e004      	b.n	801368e <tcp_process+0x7be>
      break;
 8013684:	bf00      	nop
 8013686:	e002      	b.n	801368e <tcp_process+0x7be>
      break;
 8013688:	bf00      	nop
 801368a:	e000      	b.n	801368e <tcp_process+0x7be>
      break;
 801368c:	bf00      	nop
  }
  return ERR_OK;
 801368e:	2300      	movs	r3, #0
}
 8013690:	4618      	mov	r0, r3
 8013692:	3724      	adds	r7, #36	; 0x24
 8013694:	46bd      	mov	sp, r7
 8013696:	bd90      	pop	{r4, r7, pc}
 8013698:	24007860 	.word	0x24007860
 801369c:	24007874 	.word	0x24007874
 80136a0:	24004150 	.word	0x24004150
 80136a4:	24004148 	.word	0x24004148
 80136a8:	24004151 	.word	0x24004151
 80136ac:	24007864 	.word	0x24007864

080136b0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80136b0:	b590      	push	{r4, r7, lr}
 80136b2:	b085      	sub	sp, #20
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	6078      	str	r0, [r7, #4]
 80136b8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d106      	bne.n	80136ce <tcp_oos_insert_segment+0x1e>
 80136c0:	4b3b      	ldr	r3, [pc, #236]	; (80137b0 <tcp_oos_insert_segment+0x100>)
 80136c2:	f240 421f 	movw	r2, #1055	; 0x41f
 80136c6:	493b      	ldr	r1, [pc, #236]	; (80137b4 <tcp_oos_insert_segment+0x104>)
 80136c8:	483b      	ldr	r0, [pc, #236]	; (80137b8 <tcp_oos_insert_segment+0x108>)
 80136ca:	f006 f9b3 	bl	8019a34 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	68db      	ldr	r3, [r3, #12]
 80136d2:	899b      	ldrh	r3, [r3, #12]
 80136d4:	b29b      	uxth	r3, r3
 80136d6:	4618      	mov	r0, r3
 80136d8:	f7fb f8aa 	bl	800e830 <lwip_htons>
 80136dc:	4603      	mov	r3, r0
 80136de:	b2db      	uxtb	r3, r3
 80136e0:	f003 0301 	and.w	r3, r3, #1
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d028      	beq.n	801373a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80136e8:	6838      	ldr	r0, [r7, #0]
 80136ea:	f7fe f97f 	bl	80119ec <tcp_segs_free>
    next = NULL;
 80136ee:	2300      	movs	r3, #0
 80136f0:	603b      	str	r3, [r7, #0]
 80136f2:	e056      	b.n	80137a2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80136f4:	683b      	ldr	r3, [r7, #0]
 80136f6:	68db      	ldr	r3, [r3, #12]
 80136f8:	899b      	ldrh	r3, [r3, #12]
 80136fa:	b29b      	uxth	r3, r3
 80136fc:	4618      	mov	r0, r3
 80136fe:	f7fb f897 	bl	800e830 <lwip_htons>
 8013702:	4603      	mov	r3, r0
 8013704:	b2db      	uxtb	r3, r3
 8013706:	f003 0301 	and.w	r3, r3, #1
 801370a:	2b00      	cmp	r3, #0
 801370c:	d00d      	beq.n	801372a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	68db      	ldr	r3, [r3, #12]
 8013712:	899b      	ldrh	r3, [r3, #12]
 8013714:	b29c      	uxth	r4, r3
 8013716:	2001      	movs	r0, #1
 8013718:	f7fb f88a 	bl	800e830 <lwip_htons>
 801371c:	4603      	mov	r3, r0
 801371e:	461a      	mov	r2, r3
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	68db      	ldr	r3, [r3, #12]
 8013724:	4322      	orrs	r2, r4
 8013726:	b292      	uxth	r2, r2
 8013728:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801372a:	683b      	ldr	r3, [r7, #0]
 801372c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801372e:	683b      	ldr	r3, [r7, #0]
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013734:	68f8      	ldr	r0, [r7, #12]
 8013736:	f7fe f96e 	bl	8011a16 <tcp_seg_free>
    while (next &&
 801373a:	683b      	ldr	r3, [r7, #0]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d00e      	beq.n	801375e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	891b      	ldrh	r3, [r3, #8]
 8013744:	461a      	mov	r2, r3
 8013746:	4b1d      	ldr	r3, [pc, #116]	; (80137bc <tcp_oos_insert_segment+0x10c>)
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	441a      	add	r2, r3
 801374c:	683b      	ldr	r3, [r7, #0]
 801374e:	68db      	ldr	r3, [r3, #12]
 8013750:	685b      	ldr	r3, [r3, #4]
 8013752:	6839      	ldr	r1, [r7, #0]
 8013754:	8909      	ldrh	r1, [r1, #8]
 8013756:	440b      	add	r3, r1
 8013758:	1ad3      	subs	r3, r2, r3
    while (next &&
 801375a:	2b00      	cmp	r3, #0
 801375c:	daca      	bge.n	80136f4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801375e:	683b      	ldr	r3, [r7, #0]
 8013760:	2b00      	cmp	r3, #0
 8013762:	d01e      	beq.n	80137a2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	891b      	ldrh	r3, [r3, #8]
 8013768:	461a      	mov	r2, r3
 801376a:	4b14      	ldr	r3, [pc, #80]	; (80137bc <tcp_oos_insert_segment+0x10c>)
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	441a      	add	r2, r3
 8013770:	683b      	ldr	r3, [r7, #0]
 8013772:	68db      	ldr	r3, [r3, #12]
 8013774:	685b      	ldr	r3, [r3, #4]
 8013776:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013778:	2b00      	cmp	r3, #0
 801377a:	dd12      	ble.n	80137a2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801377c:	683b      	ldr	r3, [r7, #0]
 801377e:	68db      	ldr	r3, [r3, #12]
 8013780:	685b      	ldr	r3, [r3, #4]
 8013782:	b29a      	uxth	r2, r3
 8013784:	4b0d      	ldr	r3, [pc, #52]	; (80137bc <tcp_oos_insert_segment+0x10c>)
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	b29b      	uxth	r3, r3
 801378a:	1ad3      	subs	r3, r2, r3
 801378c:	b29a      	uxth	r2, r3
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	685a      	ldr	r2, [r3, #4]
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	891b      	ldrh	r3, [r3, #8]
 801379a:	4619      	mov	r1, r3
 801379c:	4610      	mov	r0, r2
 801379e:	f7fc fb6b 	bl	800fe78 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	683a      	ldr	r2, [r7, #0]
 80137a6:	601a      	str	r2, [r3, #0]
}
 80137a8:	bf00      	nop
 80137aa:	3714      	adds	r7, #20
 80137ac:	46bd      	mov	sp, r7
 80137ae:	bd90      	pop	{r4, r7, pc}
 80137b0:	0801bdd0 	.word	0x0801bdd0
 80137b4:	0801c090 	.word	0x0801c090
 80137b8:	0801be1c 	.word	0x0801be1c
 80137bc:	24004144 	.word	0x24004144

080137c0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80137c0:	b5b0      	push	{r4, r5, r7, lr}
 80137c2:	b086      	sub	sp, #24
 80137c4:	af00      	add	r7, sp, #0
 80137c6:	60f8      	str	r0, [r7, #12]
 80137c8:	60b9      	str	r1, [r7, #8]
 80137ca:	607a      	str	r2, [r7, #4]
 80137cc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80137ce:	e03e      	b.n	801384e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80137d0:	68bb      	ldr	r3, [r7, #8]
 80137d2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80137d4:	68bb      	ldr	r3, [r7, #8]
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80137da:	697b      	ldr	r3, [r7, #20]
 80137dc:	685b      	ldr	r3, [r3, #4]
 80137de:	4618      	mov	r0, r3
 80137e0:	f7fc fd5e 	bl	80102a0 <pbuf_clen>
 80137e4:	4603      	mov	r3, r0
 80137e6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80137ee:	8a7a      	ldrh	r2, [r7, #18]
 80137f0:	429a      	cmp	r2, r3
 80137f2:	d906      	bls.n	8013802 <tcp_free_acked_segments+0x42>
 80137f4:	4b2a      	ldr	r3, [pc, #168]	; (80138a0 <tcp_free_acked_segments+0xe0>)
 80137f6:	f240 4257 	movw	r2, #1111	; 0x457
 80137fa:	492a      	ldr	r1, [pc, #168]	; (80138a4 <tcp_free_acked_segments+0xe4>)
 80137fc:	482a      	ldr	r0, [pc, #168]	; (80138a8 <tcp_free_acked_segments+0xe8>)
 80137fe:	f006 f919 	bl	8019a34 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8013808:	8a7b      	ldrh	r3, [r7, #18]
 801380a:	1ad3      	subs	r3, r2, r3
 801380c:	b29a      	uxth	r2, r3
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8013814:	697b      	ldr	r3, [r7, #20]
 8013816:	891a      	ldrh	r2, [r3, #8]
 8013818:	4b24      	ldr	r3, [pc, #144]	; (80138ac <tcp_free_acked_segments+0xec>)
 801381a:	881b      	ldrh	r3, [r3, #0]
 801381c:	4413      	add	r3, r2
 801381e:	b29a      	uxth	r2, r3
 8013820:	4b22      	ldr	r3, [pc, #136]	; (80138ac <tcp_free_acked_segments+0xec>)
 8013822:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8013824:	6978      	ldr	r0, [r7, #20]
 8013826:	f7fe f8f6 	bl	8011a16 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013830:	2b00      	cmp	r3, #0
 8013832:	d00c      	beq.n	801384e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8013834:	68bb      	ldr	r3, [r7, #8]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d109      	bne.n	801384e <tcp_free_acked_segments+0x8e>
 801383a:	683b      	ldr	r3, [r7, #0]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d106      	bne.n	801384e <tcp_free_acked_segments+0x8e>
 8013840:	4b17      	ldr	r3, [pc, #92]	; (80138a0 <tcp_free_acked_segments+0xe0>)
 8013842:	f240 4261 	movw	r2, #1121	; 0x461
 8013846:	491a      	ldr	r1, [pc, #104]	; (80138b0 <tcp_free_acked_segments+0xf0>)
 8013848:	4817      	ldr	r0, [pc, #92]	; (80138a8 <tcp_free_acked_segments+0xe8>)
 801384a:	f006 f8f3 	bl	8019a34 <iprintf>
  while (seg_list != NULL &&
 801384e:	68bb      	ldr	r3, [r7, #8]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d020      	beq.n	8013896 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8013854:	68bb      	ldr	r3, [r7, #8]
 8013856:	68db      	ldr	r3, [r3, #12]
 8013858:	685b      	ldr	r3, [r3, #4]
 801385a:	4618      	mov	r0, r3
 801385c:	f7fa fffd 	bl	800e85a <lwip_htonl>
 8013860:	4604      	mov	r4, r0
 8013862:	68bb      	ldr	r3, [r7, #8]
 8013864:	891b      	ldrh	r3, [r3, #8]
 8013866:	461d      	mov	r5, r3
 8013868:	68bb      	ldr	r3, [r7, #8]
 801386a:	68db      	ldr	r3, [r3, #12]
 801386c:	899b      	ldrh	r3, [r3, #12]
 801386e:	b29b      	uxth	r3, r3
 8013870:	4618      	mov	r0, r3
 8013872:	f7fa ffdd 	bl	800e830 <lwip_htons>
 8013876:	4603      	mov	r3, r0
 8013878:	b2db      	uxtb	r3, r3
 801387a:	f003 0303 	and.w	r3, r3, #3
 801387e:	2b00      	cmp	r3, #0
 8013880:	d001      	beq.n	8013886 <tcp_free_acked_segments+0xc6>
 8013882:	2301      	movs	r3, #1
 8013884:	e000      	b.n	8013888 <tcp_free_acked_segments+0xc8>
 8013886:	2300      	movs	r3, #0
 8013888:	442b      	add	r3, r5
 801388a:	18e2      	adds	r2, r4, r3
 801388c:	4b09      	ldr	r3, [pc, #36]	; (80138b4 <tcp_free_acked_segments+0xf4>)
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8013892:	2b00      	cmp	r3, #0
 8013894:	dd9c      	ble.n	80137d0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8013896:	68bb      	ldr	r3, [r7, #8]
}
 8013898:	4618      	mov	r0, r3
 801389a:	3718      	adds	r7, #24
 801389c:	46bd      	mov	sp, r7
 801389e:	bdb0      	pop	{r4, r5, r7, pc}
 80138a0:	0801bdd0 	.word	0x0801bdd0
 80138a4:	0801c0b8 	.word	0x0801c0b8
 80138a8:	0801be1c 	.word	0x0801be1c
 80138ac:	2400414c 	.word	0x2400414c
 80138b0:	0801c0e0 	.word	0x0801c0e0
 80138b4:	24004148 	.word	0x24004148

080138b8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80138b8:	b5b0      	push	{r4, r5, r7, lr}
 80138ba:	b094      	sub	sp, #80	; 0x50
 80138bc:	af00      	add	r7, sp, #0
 80138be:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80138c0:	2300      	movs	r3, #0
 80138c2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d106      	bne.n	80138d8 <tcp_receive+0x20>
 80138ca:	4ba6      	ldr	r3, [pc, #664]	; (8013b64 <tcp_receive+0x2ac>)
 80138cc:	f240 427b 	movw	r2, #1147	; 0x47b
 80138d0:	49a5      	ldr	r1, [pc, #660]	; (8013b68 <tcp_receive+0x2b0>)
 80138d2:	48a6      	ldr	r0, [pc, #664]	; (8013b6c <tcp_receive+0x2b4>)
 80138d4:	f006 f8ae 	bl	8019a34 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	7d1b      	ldrb	r3, [r3, #20]
 80138dc:	2b03      	cmp	r3, #3
 80138de:	d806      	bhi.n	80138ee <tcp_receive+0x36>
 80138e0:	4ba0      	ldr	r3, [pc, #640]	; (8013b64 <tcp_receive+0x2ac>)
 80138e2:	f240 427c 	movw	r2, #1148	; 0x47c
 80138e6:	49a2      	ldr	r1, [pc, #648]	; (8013b70 <tcp_receive+0x2b8>)
 80138e8:	48a0      	ldr	r0, [pc, #640]	; (8013b6c <tcp_receive+0x2b4>)
 80138ea:	f006 f8a3 	bl	8019a34 <iprintf>

  if (flags & TCP_ACK) {
 80138ee:	4ba1      	ldr	r3, [pc, #644]	; (8013b74 <tcp_receive+0x2bc>)
 80138f0:	781b      	ldrb	r3, [r3, #0]
 80138f2:	f003 0310 	and.w	r3, r3, #16
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	f000 8263 	beq.w	8013dc2 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013902:	461a      	mov	r2, r3
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013908:	4413      	add	r3, r2
 801390a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013910:	4b99      	ldr	r3, [pc, #612]	; (8013b78 <tcp_receive+0x2c0>)
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	1ad3      	subs	r3, r2, r3
 8013916:	2b00      	cmp	r3, #0
 8013918:	db1b      	blt.n	8013952 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801391e:	4b96      	ldr	r3, [pc, #600]	; (8013b78 <tcp_receive+0x2c0>)
 8013920:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013922:	429a      	cmp	r2, r3
 8013924:	d106      	bne.n	8013934 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801392a:	4b94      	ldr	r3, [pc, #592]	; (8013b7c <tcp_receive+0x2c4>)
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	1ad3      	subs	r3, r2, r3
 8013930:	2b00      	cmp	r3, #0
 8013932:	db0e      	blt.n	8013952 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013938:	4b90      	ldr	r3, [pc, #576]	; (8013b7c <tcp_receive+0x2c4>)
 801393a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801393c:	429a      	cmp	r2, r3
 801393e:	d125      	bne.n	801398c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013940:	4b8f      	ldr	r3, [pc, #572]	; (8013b80 <tcp_receive+0x2c8>)
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	89db      	ldrh	r3, [r3, #14]
 8013946:	b29a      	uxth	r2, r3
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801394e:	429a      	cmp	r2, r3
 8013950:	d91c      	bls.n	801398c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8013952:	4b8b      	ldr	r3, [pc, #556]	; (8013b80 <tcp_receive+0x2c8>)
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	89db      	ldrh	r3, [r3, #14]
 8013958:	b29a      	uxth	r2, r3
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801396c:	429a      	cmp	r2, r3
 801396e:	d205      	bcs.n	801397c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801397c:	4b7e      	ldr	r3, [pc, #504]	; (8013b78 <tcp_receive+0x2c0>)
 801397e:	681a      	ldr	r2, [r3, #0]
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8013984:	4b7d      	ldr	r3, [pc, #500]	; (8013b7c <tcp_receive+0x2c4>)
 8013986:	681a      	ldr	r2, [r3, #0]
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801398c:	4b7b      	ldr	r3, [pc, #492]	; (8013b7c <tcp_receive+0x2c4>)
 801398e:	681a      	ldr	r2, [r3, #0]
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013994:	1ad3      	subs	r3, r2, r3
 8013996:	2b00      	cmp	r3, #0
 8013998:	dc58      	bgt.n	8013a4c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801399a:	4b7a      	ldr	r3, [pc, #488]	; (8013b84 <tcp_receive+0x2cc>)
 801399c:	881b      	ldrh	r3, [r3, #0]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d14b      	bne.n	8013a3a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80139a6:	687a      	ldr	r2, [r7, #4]
 80139a8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80139ac:	4413      	add	r3, r2
 80139ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80139b0:	429a      	cmp	r2, r3
 80139b2:	d142      	bne.n	8013a3a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	db3d      	blt.n	8013a3a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80139c2:	4b6e      	ldr	r3, [pc, #440]	; (8013b7c <tcp_receive+0x2c4>)
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	429a      	cmp	r2, r3
 80139c8:	d137      	bne.n	8013a3a <tcp_receive+0x182>
              found_dupack = 1;
 80139ca:	2301      	movs	r3, #1
 80139cc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80139d4:	2bff      	cmp	r3, #255	; 0xff
 80139d6:	d007      	beq.n	80139e8 <tcp_receive+0x130>
                ++pcb->dupacks;
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80139de:	3301      	adds	r3, #1
 80139e0:	b2da      	uxtb	r2, r3
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80139ee:	2b03      	cmp	r3, #3
 80139f0:	d91b      	bls.n	8013a2a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80139fc:	4413      	add	r3, r2
 80139fe:	b29a      	uxth	r2, r3
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013a06:	429a      	cmp	r2, r3
 8013a08:	d30a      	bcc.n	8013a20 <tcp_receive+0x168>
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013a14:	4413      	add	r3, r2
 8013a16:	b29a      	uxth	r2, r3
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013a1e:	e004      	b.n	8013a2a <tcp_receive+0x172>
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013a26:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013a30:	2b02      	cmp	r3, #2
 8013a32:	d902      	bls.n	8013a3a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8013a34:	6878      	ldr	r0, [r7, #4]
 8013a36:	f002 fb41 	bl	80160bc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8013a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	f040 8160 	bne.w	8013d02 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	2200      	movs	r2, #0
 8013a46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013a4a:	e15a      	b.n	8013d02 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013a4c:	4b4b      	ldr	r3, [pc, #300]	; (8013b7c <tcp_receive+0x2c4>)
 8013a4e:	681a      	ldr	r2, [r3, #0]
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a54:	1ad3      	subs	r3, r2, r3
 8013a56:	3b01      	subs	r3, #1
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	f2c0 814d 	blt.w	8013cf8 <tcp_receive+0x440>
 8013a5e:	4b47      	ldr	r3, [pc, #284]	; (8013b7c <tcp_receive+0x2c4>)
 8013a60:	681a      	ldr	r2, [r3, #0]
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013a66:	1ad3      	subs	r3, r2, r3
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	f300 8145 	bgt.w	8013cf8 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	8b5b      	ldrh	r3, [r3, #26]
 8013a72:	f003 0304 	and.w	r3, r3, #4
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d010      	beq.n	8013a9c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	8b5b      	ldrh	r3, [r3, #26]
 8013a7e:	f023 0304 	bic.w	r3, r3, #4
 8013a82:	b29a      	uxth	r2, r3
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	2200      	movs	r2, #0
 8013a98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	2200      	movs	r2, #0
 8013aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013aaa:	10db      	asrs	r3, r3, #3
 8013aac:	b21b      	sxth	r3, r3
 8013aae:	b29a      	uxth	r2, r3
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013ab6:	b29b      	uxth	r3, r3
 8013ab8:	4413      	add	r3, r2
 8013aba:	b29b      	uxth	r3, r3
 8013abc:	b21a      	sxth	r2, r3
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8013ac4:	4b2d      	ldr	r3, [pc, #180]	; (8013b7c <tcp_receive+0x2c4>)
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	b29a      	uxth	r2, r3
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013ace:	b29b      	uxth	r3, r3
 8013ad0:	1ad3      	subs	r3, r2, r3
 8013ad2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8013adc:	4b27      	ldr	r3, [pc, #156]	; (8013b7c <tcp_receive+0x2c4>)
 8013ade:	681a      	ldr	r2, [r3, #0]
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	7d1b      	ldrb	r3, [r3, #20]
 8013ae8:	2b03      	cmp	r3, #3
 8013aea:	f240 8096 	bls.w	8013c1a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013afa:	429a      	cmp	r2, r3
 8013afc:	d244      	bcs.n	8013b88 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	8b5b      	ldrh	r3, [r3, #26]
 8013b02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d001      	beq.n	8013b0e <tcp_receive+0x256>
 8013b0a:	2301      	movs	r3, #1
 8013b0c:	e000      	b.n	8013b10 <tcp_receive+0x258>
 8013b0e:	2302      	movs	r3, #2
 8013b10:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8013b14:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013b18:	b29a      	uxth	r2, r3
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b1e:	fb12 f303 	smulbb	r3, r2, r3
 8013b22:	b29b      	uxth	r3, r3
 8013b24:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013b26:	4293      	cmp	r3, r2
 8013b28:	bf28      	it	cs
 8013b2a:	4613      	movcs	r3, r2
 8013b2c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013b34:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013b36:	4413      	add	r3, r2
 8013b38:	b29a      	uxth	r2, r3
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013b40:	429a      	cmp	r2, r3
 8013b42:	d309      	bcc.n	8013b58 <tcp_receive+0x2a0>
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013b4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013b4c:	4413      	add	r3, r2
 8013b4e:	b29a      	uxth	r2, r3
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013b56:	e060      	b.n	8013c1a <tcp_receive+0x362>
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013b5e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013b62:	e05a      	b.n	8013c1a <tcp_receive+0x362>
 8013b64:	0801bdd0 	.word	0x0801bdd0
 8013b68:	0801c100 	.word	0x0801c100
 8013b6c:	0801be1c 	.word	0x0801be1c
 8013b70:	0801c11c 	.word	0x0801c11c
 8013b74:	24004150 	.word	0x24004150
 8013b78:	24004144 	.word	0x24004144
 8013b7c:	24004148 	.word	0x24004148
 8013b80:	24004134 	.word	0x24004134
 8013b84:	2400414e 	.word	0x2400414e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013b8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013b90:	4413      	add	r3, r2
 8013b92:	b29a      	uxth	r2, r3
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013b9a:	429a      	cmp	r2, r3
 8013b9c:	d309      	bcc.n	8013bb2 <tcp_receive+0x2fa>
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013ba4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013ba6:	4413      	add	r3, r2
 8013ba8:	b29a      	uxth	r2, r3
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8013bb0:	e004      	b.n	8013bbc <tcp_receive+0x304>
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013bb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013bc8:	429a      	cmp	r2, r3
 8013bca:	d326      	bcc.n	8013c1a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013bd8:	1ad3      	subs	r3, r2, r3
 8013bda:	b29a      	uxth	r2, r3
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013bec:	4413      	add	r3, r2
 8013bee:	b29a      	uxth	r2, r3
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013bf6:	429a      	cmp	r2, r3
 8013bf8:	d30a      	bcc.n	8013c10 <tcp_receive+0x358>
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013c04:	4413      	add	r3, r2
 8013c06:	b29a      	uxth	r2, r3
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013c0e:	e004      	b.n	8013c1a <tcp_receive+0x362>
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013c16:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c22:	4a98      	ldr	r2, [pc, #608]	; (8013e84 <tcp_receive+0x5cc>)
 8013c24:	6878      	ldr	r0, [r7, #4]
 8013c26:	f7ff fdcb 	bl	80137c0 <tcp_free_acked_segments>
 8013c2a:	4602      	mov	r2, r0
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c38:	4a93      	ldr	r2, [pc, #588]	; (8013e88 <tcp_receive+0x5d0>)
 8013c3a:	6878      	ldr	r0, [r7, #4]
 8013c3c:	f7ff fdc0 	bl	80137c0 <tcp_free_acked_segments>
 8013c40:	4602      	mov	r2, r0
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d104      	bne.n	8013c58 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013c54:	861a      	strh	r2, [r3, #48]	; 0x30
 8013c56:	e002      	b.n	8013c5e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	2200      	movs	r2, #0
 8013c5c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	2200      	movs	r2, #0
 8013c62:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d103      	bne.n	8013c74 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	2200      	movs	r2, #0
 8013c70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013c7a:	4b84      	ldr	r3, [pc, #528]	; (8013e8c <tcp_receive+0x5d4>)
 8013c7c:	881b      	ldrh	r3, [r3, #0]
 8013c7e:	4413      	add	r3, r2
 8013c80:	b29a      	uxth	r2, r3
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	8b5b      	ldrh	r3, [r3, #26]
 8013c8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d035      	beq.n	8013d00 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d118      	bne.n	8013cce <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d00c      	beq.n	8013cbe <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013cac:	68db      	ldr	r3, [r3, #12]
 8013cae:	685b      	ldr	r3, [r3, #4]
 8013cb0:	4618      	mov	r0, r3
 8013cb2:	f7fa fdd2 	bl	800e85a <lwip_htonl>
 8013cb6:	4603      	mov	r3, r0
 8013cb8:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	dc20      	bgt.n	8013d00 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	8b5b      	ldrh	r3, [r3, #26]
 8013cc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013cc6:	b29a      	uxth	r2, r3
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013ccc:	e018      	b.n	8013d00 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013cd6:	68db      	ldr	r3, [r3, #12]
 8013cd8:	685b      	ldr	r3, [r3, #4]
 8013cda:	4618      	mov	r0, r3
 8013cdc:	f7fa fdbd 	bl	800e85a <lwip_htonl>
 8013ce0:	4603      	mov	r3, r0
 8013ce2:	1ae3      	subs	r3, r4, r3
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	dc0b      	bgt.n	8013d00 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	8b5b      	ldrh	r3, [r3, #26]
 8013cec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013cf0:	b29a      	uxth	r2, r3
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013cf6:	e003      	b.n	8013d00 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8013cf8:	6878      	ldr	r0, [r7, #4]
 8013cfa:	f002 fbcd 	bl	8016498 <tcp_send_empty_ack>
 8013cfe:	e000      	b.n	8013d02 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013d00:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d05b      	beq.n	8013dc2 <tcp_receive+0x50a>
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013d0e:	4b60      	ldr	r3, [pc, #384]	; (8013e90 <tcp_receive+0x5d8>)
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	1ad3      	subs	r3, r2, r3
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	da54      	bge.n	8013dc2 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8013d18:	4b5e      	ldr	r3, [pc, #376]	; (8013e94 <tcp_receive+0x5dc>)
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	b29a      	uxth	r2, r3
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d22:	b29b      	uxth	r3, r3
 8013d24:	1ad3      	subs	r3, r2, r3
 8013d26:	b29b      	uxth	r3, r3
 8013d28:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8013d2c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013d36:	10db      	asrs	r3, r3, #3
 8013d38:	b21b      	sxth	r3, r3
 8013d3a:	b29b      	uxth	r3, r3
 8013d3c:	1ad3      	subs	r3, r2, r3
 8013d3e:	b29b      	uxth	r3, r3
 8013d40:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013d4a:	b29a      	uxth	r2, r3
 8013d4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013d50:	4413      	add	r3, r2
 8013d52:	b29b      	uxth	r3, r3
 8013d54:	b21a      	sxth	r2, r3
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8013d5a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	da05      	bge.n	8013d6e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8013d62:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013d66:	425b      	negs	r3, r3
 8013d68:	b29b      	uxth	r3, r3
 8013d6a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8013d6e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013d78:	109b      	asrs	r3, r3, #2
 8013d7a:	b21b      	sxth	r3, r3
 8013d7c:	b29b      	uxth	r3, r3
 8013d7e:	1ad3      	subs	r3, r2, r3
 8013d80:	b29b      	uxth	r3, r3
 8013d82:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013d8c:	b29a      	uxth	r2, r3
 8013d8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013d92:	4413      	add	r3, r2
 8013d94:	b29b      	uxth	r3, r3
 8013d96:	b21a      	sxth	r2, r3
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013da2:	10db      	asrs	r3, r3, #3
 8013da4:	b21b      	sxth	r3, r3
 8013da6:	b29a      	uxth	r2, r3
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013dae:	b29b      	uxth	r3, r3
 8013db0:	4413      	add	r3, r2
 8013db2:	b29b      	uxth	r3, r3
 8013db4:	b21a      	sxth	r2, r3
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	2200      	movs	r2, #0
 8013dc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8013dc2:	4b35      	ldr	r3, [pc, #212]	; (8013e98 <tcp_receive+0x5e0>)
 8013dc4:	881b      	ldrh	r3, [r3, #0]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	f000 84e1 	beq.w	801478e <tcp_receive+0xed6>
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	7d1b      	ldrb	r3, [r3, #20]
 8013dd0:	2b06      	cmp	r3, #6
 8013dd2:	f200 84dc 	bhi.w	801478e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013dda:	4b30      	ldr	r3, [pc, #192]	; (8013e9c <tcp_receive+0x5e4>)
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	1ad3      	subs	r3, r2, r3
 8013de0:	3b01      	subs	r3, #1
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	f2c0 808e 	blt.w	8013f04 <tcp_receive+0x64c>
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013dec:	4b2a      	ldr	r3, [pc, #168]	; (8013e98 <tcp_receive+0x5e0>)
 8013dee:	881b      	ldrh	r3, [r3, #0]
 8013df0:	4619      	mov	r1, r3
 8013df2:	4b2a      	ldr	r3, [pc, #168]	; (8013e9c <tcp_receive+0x5e4>)
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	440b      	add	r3, r1
 8013df8:	1ad3      	subs	r3, r2, r3
 8013dfa:	3301      	adds	r3, #1
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	f300 8081 	bgt.w	8013f04 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8013e02:	4b27      	ldr	r3, [pc, #156]	; (8013ea0 <tcp_receive+0x5e8>)
 8013e04:	685b      	ldr	r3, [r3, #4]
 8013e06:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013e0c:	4b23      	ldr	r3, [pc, #140]	; (8013e9c <tcp_receive+0x5e4>)
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	1ad3      	subs	r3, r2, r3
 8013e12:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8013e14:	4b22      	ldr	r3, [pc, #136]	; (8013ea0 <tcp_receive+0x5e8>)
 8013e16:	685b      	ldr	r3, [r3, #4]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d106      	bne.n	8013e2a <tcp_receive+0x572>
 8013e1c:	4b21      	ldr	r3, [pc, #132]	; (8013ea4 <tcp_receive+0x5ec>)
 8013e1e:	f240 5294 	movw	r2, #1428	; 0x594
 8013e22:	4921      	ldr	r1, [pc, #132]	; (8013ea8 <tcp_receive+0x5f0>)
 8013e24:	4821      	ldr	r0, [pc, #132]	; (8013eac <tcp_receive+0x5f4>)
 8013e26:	f005 fe05 	bl	8019a34 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8013e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e2c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013e30:	4293      	cmp	r3, r2
 8013e32:	d906      	bls.n	8013e42 <tcp_receive+0x58a>
 8013e34:	4b1b      	ldr	r3, [pc, #108]	; (8013ea4 <tcp_receive+0x5ec>)
 8013e36:	f240 5295 	movw	r2, #1429	; 0x595
 8013e3a:	491d      	ldr	r1, [pc, #116]	; (8013eb0 <tcp_receive+0x5f8>)
 8013e3c:	481b      	ldr	r0, [pc, #108]	; (8013eac <tcp_receive+0x5f4>)
 8013e3e:	f005 fdf9 	bl	8019a34 <iprintf>
      off = (u16_t)off32;
 8013e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e44:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8013e48:	4b15      	ldr	r3, [pc, #84]	; (8013ea0 <tcp_receive+0x5e8>)
 8013e4a:	685b      	ldr	r3, [r3, #4]
 8013e4c:	891b      	ldrh	r3, [r3, #8]
 8013e4e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013e52:	429a      	cmp	r2, r3
 8013e54:	d906      	bls.n	8013e64 <tcp_receive+0x5ac>
 8013e56:	4b13      	ldr	r3, [pc, #76]	; (8013ea4 <tcp_receive+0x5ec>)
 8013e58:	f240 5297 	movw	r2, #1431	; 0x597
 8013e5c:	4915      	ldr	r1, [pc, #84]	; (8013eb4 <tcp_receive+0x5fc>)
 8013e5e:	4813      	ldr	r0, [pc, #76]	; (8013eac <tcp_receive+0x5f4>)
 8013e60:	f005 fde8 	bl	8019a34 <iprintf>
      inseg.len -= off;
 8013e64:	4b0e      	ldr	r3, [pc, #56]	; (8013ea0 <tcp_receive+0x5e8>)
 8013e66:	891a      	ldrh	r2, [r3, #8]
 8013e68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013e6c:	1ad3      	subs	r3, r2, r3
 8013e6e:	b29a      	uxth	r2, r3
 8013e70:	4b0b      	ldr	r3, [pc, #44]	; (8013ea0 <tcp_receive+0x5e8>)
 8013e72:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8013e74:	4b0a      	ldr	r3, [pc, #40]	; (8013ea0 <tcp_receive+0x5e8>)
 8013e76:	685b      	ldr	r3, [r3, #4]
 8013e78:	891a      	ldrh	r2, [r3, #8]
 8013e7a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013e7e:	1ad3      	subs	r3, r2, r3
 8013e80:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8013e82:	e029      	b.n	8013ed8 <tcp_receive+0x620>
 8013e84:	0801c138 	.word	0x0801c138
 8013e88:	0801c140 	.word	0x0801c140
 8013e8c:	2400414c 	.word	0x2400414c
 8013e90:	24004148 	.word	0x24004148
 8013e94:	24007868 	.word	0x24007868
 8013e98:	2400414e 	.word	0x2400414e
 8013e9c:	24004144 	.word	0x24004144
 8013ea0:	24004124 	.word	0x24004124
 8013ea4:	0801bdd0 	.word	0x0801bdd0
 8013ea8:	0801c148 	.word	0x0801c148
 8013eac:	0801be1c 	.word	0x0801be1c
 8013eb0:	0801c158 	.word	0x0801c158
 8013eb4:	0801c168 	.word	0x0801c168
        off -= p->len;
 8013eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013eba:	895b      	ldrh	r3, [r3, #10]
 8013ebc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013ec0:	1ad3      	subs	r3, r2, r3
 8013ec2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8013ec6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ec8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013eca:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8013ecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ece:	2200      	movs	r2, #0
 8013ed0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8013ed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8013ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013eda:	895b      	ldrh	r3, [r3, #10]
 8013edc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013ee0:	429a      	cmp	r2, r3
 8013ee2:	d8e9      	bhi.n	8013eb8 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8013ee4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013ee8:	4619      	mov	r1, r3
 8013eea:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013eec:	f7fc f8c4 	bl	8010078 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ef4:	4a91      	ldr	r2, [pc, #580]	; (801413c <tcp_receive+0x884>)
 8013ef6:	6013      	str	r3, [r2, #0]
 8013ef8:	4b91      	ldr	r3, [pc, #580]	; (8014140 <tcp_receive+0x888>)
 8013efa:	68db      	ldr	r3, [r3, #12]
 8013efc:	4a8f      	ldr	r2, [pc, #572]	; (801413c <tcp_receive+0x884>)
 8013efe:	6812      	ldr	r2, [r2, #0]
 8013f00:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013f02:	e00d      	b.n	8013f20 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8013f04:	4b8d      	ldr	r3, [pc, #564]	; (801413c <tcp_receive+0x884>)
 8013f06:	681a      	ldr	r2, [r3, #0]
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f0c:	1ad3      	subs	r3, r2, r3
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	da06      	bge.n	8013f20 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	8b5b      	ldrh	r3, [r3, #26]
 8013f16:	f043 0302 	orr.w	r3, r3, #2
 8013f1a:	b29a      	uxth	r2, r3
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013f20:	4b86      	ldr	r3, [pc, #536]	; (801413c <tcp_receive+0x884>)
 8013f22:	681a      	ldr	r2, [r3, #0]
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f28:	1ad3      	subs	r3, r2, r3
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	f2c0 842a 	blt.w	8014784 <tcp_receive+0xecc>
 8013f30:	4b82      	ldr	r3, [pc, #520]	; (801413c <tcp_receive+0x884>)
 8013f32:	681a      	ldr	r2, [r3, #0]
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f38:	6879      	ldr	r1, [r7, #4]
 8013f3a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013f3c:	440b      	add	r3, r1
 8013f3e:	1ad3      	subs	r3, r2, r3
 8013f40:	3301      	adds	r3, #1
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	f300 841e 	bgt.w	8014784 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013f4c:	4b7b      	ldr	r3, [pc, #492]	; (801413c <tcp_receive+0x884>)
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	429a      	cmp	r2, r3
 8013f52:	f040 829a 	bne.w	801448a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8013f56:	4b7a      	ldr	r3, [pc, #488]	; (8014140 <tcp_receive+0x888>)
 8013f58:	891c      	ldrh	r4, [r3, #8]
 8013f5a:	4b79      	ldr	r3, [pc, #484]	; (8014140 <tcp_receive+0x888>)
 8013f5c:	68db      	ldr	r3, [r3, #12]
 8013f5e:	899b      	ldrh	r3, [r3, #12]
 8013f60:	b29b      	uxth	r3, r3
 8013f62:	4618      	mov	r0, r3
 8013f64:	f7fa fc64 	bl	800e830 <lwip_htons>
 8013f68:	4603      	mov	r3, r0
 8013f6a:	b2db      	uxtb	r3, r3
 8013f6c:	f003 0303 	and.w	r3, r3, #3
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d001      	beq.n	8013f78 <tcp_receive+0x6c0>
 8013f74:	2301      	movs	r3, #1
 8013f76:	e000      	b.n	8013f7a <tcp_receive+0x6c2>
 8013f78:	2300      	movs	r3, #0
 8013f7a:	4423      	add	r3, r4
 8013f7c:	b29a      	uxth	r2, r3
 8013f7e:	4b71      	ldr	r3, [pc, #452]	; (8014144 <tcp_receive+0x88c>)
 8013f80:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013f86:	4b6f      	ldr	r3, [pc, #444]	; (8014144 <tcp_receive+0x88c>)
 8013f88:	881b      	ldrh	r3, [r3, #0]
 8013f8a:	429a      	cmp	r2, r3
 8013f8c:	d275      	bcs.n	801407a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013f8e:	4b6c      	ldr	r3, [pc, #432]	; (8014140 <tcp_receive+0x888>)
 8013f90:	68db      	ldr	r3, [r3, #12]
 8013f92:	899b      	ldrh	r3, [r3, #12]
 8013f94:	b29b      	uxth	r3, r3
 8013f96:	4618      	mov	r0, r3
 8013f98:	f7fa fc4a 	bl	800e830 <lwip_htons>
 8013f9c:	4603      	mov	r3, r0
 8013f9e:	b2db      	uxtb	r3, r3
 8013fa0:	f003 0301 	and.w	r3, r3, #1
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d01f      	beq.n	8013fe8 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8013fa8:	4b65      	ldr	r3, [pc, #404]	; (8014140 <tcp_receive+0x888>)
 8013faa:	68db      	ldr	r3, [r3, #12]
 8013fac:	899b      	ldrh	r3, [r3, #12]
 8013fae:	b29b      	uxth	r3, r3
 8013fb0:	b21b      	sxth	r3, r3
 8013fb2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013fb6:	b21c      	sxth	r4, r3
 8013fb8:	4b61      	ldr	r3, [pc, #388]	; (8014140 <tcp_receive+0x888>)
 8013fba:	68db      	ldr	r3, [r3, #12]
 8013fbc:	899b      	ldrh	r3, [r3, #12]
 8013fbe:	b29b      	uxth	r3, r3
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	f7fa fc35 	bl	800e830 <lwip_htons>
 8013fc6:	4603      	mov	r3, r0
 8013fc8:	b2db      	uxtb	r3, r3
 8013fca:	b29b      	uxth	r3, r3
 8013fcc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013fd0:	b29b      	uxth	r3, r3
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	f7fa fc2c 	bl	800e830 <lwip_htons>
 8013fd8:	4603      	mov	r3, r0
 8013fda:	b21b      	sxth	r3, r3
 8013fdc:	4323      	orrs	r3, r4
 8013fde:	b21a      	sxth	r2, r3
 8013fe0:	4b57      	ldr	r3, [pc, #348]	; (8014140 <tcp_receive+0x888>)
 8013fe2:	68db      	ldr	r3, [r3, #12]
 8013fe4:	b292      	uxth	r2, r2
 8013fe6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013fec:	4b54      	ldr	r3, [pc, #336]	; (8014140 <tcp_receive+0x888>)
 8013fee:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013ff0:	4b53      	ldr	r3, [pc, #332]	; (8014140 <tcp_receive+0x888>)
 8013ff2:	68db      	ldr	r3, [r3, #12]
 8013ff4:	899b      	ldrh	r3, [r3, #12]
 8013ff6:	b29b      	uxth	r3, r3
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	f7fa fc19 	bl	800e830 <lwip_htons>
 8013ffe:	4603      	mov	r3, r0
 8014000:	b2db      	uxtb	r3, r3
 8014002:	f003 0302 	and.w	r3, r3, #2
 8014006:	2b00      	cmp	r3, #0
 8014008:	d005      	beq.n	8014016 <tcp_receive+0x75e>
            inseg.len -= 1;
 801400a:	4b4d      	ldr	r3, [pc, #308]	; (8014140 <tcp_receive+0x888>)
 801400c:	891b      	ldrh	r3, [r3, #8]
 801400e:	3b01      	subs	r3, #1
 8014010:	b29a      	uxth	r2, r3
 8014012:	4b4b      	ldr	r3, [pc, #300]	; (8014140 <tcp_receive+0x888>)
 8014014:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8014016:	4b4a      	ldr	r3, [pc, #296]	; (8014140 <tcp_receive+0x888>)
 8014018:	685b      	ldr	r3, [r3, #4]
 801401a:	4a49      	ldr	r2, [pc, #292]	; (8014140 <tcp_receive+0x888>)
 801401c:	8912      	ldrh	r2, [r2, #8]
 801401e:	4611      	mov	r1, r2
 8014020:	4618      	mov	r0, r3
 8014022:	f7fb ff29 	bl	800fe78 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8014026:	4b46      	ldr	r3, [pc, #280]	; (8014140 <tcp_receive+0x888>)
 8014028:	891c      	ldrh	r4, [r3, #8]
 801402a:	4b45      	ldr	r3, [pc, #276]	; (8014140 <tcp_receive+0x888>)
 801402c:	68db      	ldr	r3, [r3, #12]
 801402e:	899b      	ldrh	r3, [r3, #12]
 8014030:	b29b      	uxth	r3, r3
 8014032:	4618      	mov	r0, r3
 8014034:	f7fa fbfc 	bl	800e830 <lwip_htons>
 8014038:	4603      	mov	r3, r0
 801403a:	b2db      	uxtb	r3, r3
 801403c:	f003 0303 	and.w	r3, r3, #3
 8014040:	2b00      	cmp	r3, #0
 8014042:	d001      	beq.n	8014048 <tcp_receive+0x790>
 8014044:	2301      	movs	r3, #1
 8014046:	e000      	b.n	801404a <tcp_receive+0x792>
 8014048:	2300      	movs	r3, #0
 801404a:	4423      	add	r3, r4
 801404c:	b29a      	uxth	r2, r3
 801404e:	4b3d      	ldr	r3, [pc, #244]	; (8014144 <tcp_receive+0x88c>)
 8014050:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014052:	4b3c      	ldr	r3, [pc, #240]	; (8014144 <tcp_receive+0x88c>)
 8014054:	881b      	ldrh	r3, [r3, #0]
 8014056:	461a      	mov	r2, r3
 8014058:	4b38      	ldr	r3, [pc, #224]	; (801413c <tcp_receive+0x884>)
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	441a      	add	r2, r3
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014062:	6879      	ldr	r1, [r7, #4]
 8014064:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014066:	440b      	add	r3, r1
 8014068:	429a      	cmp	r2, r3
 801406a:	d006      	beq.n	801407a <tcp_receive+0x7c2>
 801406c:	4b36      	ldr	r3, [pc, #216]	; (8014148 <tcp_receive+0x890>)
 801406e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8014072:	4936      	ldr	r1, [pc, #216]	; (801414c <tcp_receive+0x894>)
 8014074:	4836      	ldr	r0, [pc, #216]	; (8014150 <tcp_receive+0x898>)
 8014076:	f005 fcdd 	bl	8019a34 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801407e:	2b00      	cmp	r3, #0
 8014080:	f000 80e7 	beq.w	8014252 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014084:	4b2e      	ldr	r3, [pc, #184]	; (8014140 <tcp_receive+0x888>)
 8014086:	68db      	ldr	r3, [r3, #12]
 8014088:	899b      	ldrh	r3, [r3, #12]
 801408a:	b29b      	uxth	r3, r3
 801408c:	4618      	mov	r0, r3
 801408e:	f7fa fbcf 	bl	800e830 <lwip_htons>
 8014092:	4603      	mov	r3, r0
 8014094:	b2db      	uxtb	r3, r3
 8014096:	f003 0301 	and.w	r3, r3, #1
 801409a:	2b00      	cmp	r3, #0
 801409c:	d010      	beq.n	80140c0 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801409e:	e00a      	b.n	80140b6 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80140a4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80140aa:	681a      	ldr	r2, [r3, #0]
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80140b0:	68f8      	ldr	r0, [r7, #12]
 80140b2:	f7fd fcb0 	bl	8011a16 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d1f0      	bne.n	80140a0 <tcp_receive+0x7e8>
 80140be:	e0c8      	b.n	8014252 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80140c4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80140c6:	e052      	b.n	801416e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80140c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80140ca:	68db      	ldr	r3, [r3, #12]
 80140cc:	899b      	ldrh	r3, [r3, #12]
 80140ce:	b29b      	uxth	r3, r3
 80140d0:	4618      	mov	r0, r3
 80140d2:	f7fa fbad 	bl	800e830 <lwip_htons>
 80140d6:	4603      	mov	r3, r0
 80140d8:	b2db      	uxtb	r3, r3
 80140da:	f003 0301 	and.w	r3, r3, #1
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d03d      	beq.n	801415e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80140e2:	4b17      	ldr	r3, [pc, #92]	; (8014140 <tcp_receive+0x888>)
 80140e4:	68db      	ldr	r3, [r3, #12]
 80140e6:	899b      	ldrh	r3, [r3, #12]
 80140e8:	b29b      	uxth	r3, r3
 80140ea:	4618      	mov	r0, r3
 80140ec:	f7fa fba0 	bl	800e830 <lwip_htons>
 80140f0:	4603      	mov	r3, r0
 80140f2:	b2db      	uxtb	r3, r3
 80140f4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d130      	bne.n	801415e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80140fc:	4b10      	ldr	r3, [pc, #64]	; (8014140 <tcp_receive+0x888>)
 80140fe:	68db      	ldr	r3, [r3, #12]
 8014100:	899b      	ldrh	r3, [r3, #12]
 8014102:	b29c      	uxth	r4, r3
 8014104:	2001      	movs	r0, #1
 8014106:	f7fa fb93 	bl	800e830 <lwip_htons>
 801410a:	4603      	mov	r3, r0
 801410c:	461a      	mov	r2, r3
 801410e:	4b0c      	ldr	r3, [pc, #48]	; (8014140 <tcp_receive+0x888>)
 8014110:	68db      	ldr	r3, [r3, #12]
 8014112:	4322      	orrs	r2, r4
 8014114:	b292      	uxth	r2, r2
 8014116:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8014118:	4b09      	ldr	r3, [pc, #36]	; (8014140 <tcp_receive+0x888>)
 801411a:	891c      	ldrh	r4, [r3, #8]
 801411c:	4b08      	ldr	r3, [pc, #32]	; (8014140 <tcp_receive+0x888>)
 801411e:	68db      	ldr	r3, [r3, #12]
 8014120:	899b      	ldrh	r3, [r3, #12]
 8014122:	b29b      	uxth	r3, r3
 8014124:	4618      	mov	r0, r3
 8014126:	f7fa fb83 	bl	800e830 <lwip_htons>
 801412a:	4603      	mov	r3, r0
 801412c:	b2db      	uxtb	r3, r3
 801412e:	f003 0303 	and.w	r3, r3, #3
 8014132:	2b00      	cmp	r3, #0
 8014134:	d00e      	beq.n	8014154 <tcp_receive+0x89c>
 8014136:	2301      	movs	r3, #1
 8014138:	e00d      	b.n	8014156 <tcp_receive+0x89e>
 801413a:	bf00      	nop
 801413c:	24004144 	.word	0x24004144
 8014140:	24004124 	.word	0x24004124
 8014144:	2400414e 	.word	0x2400414e
 8014148:	0801bdd0 	.word	0x0801bdd0
 801414c:	0801c178 	.word	0x0801c178
 8014150:	0801be1c 	.word	0x0801be1c
 8014154:	2300      	movs	r3, #0
 8014156:	4423      	add	r3, r4
 8014158:	b29a      	uxth	r2, r3
 801415a:	4b98      	ldr	r3, [pc, #608]	; (80143bc <tcp_receive+0xb04>)
 801415c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801415e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014160:	613b      	str	r3, [r7, #16]
              next = next->next;
 8014162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8014168:	6938      	ldr	r0, [r7, #16]
 801416a:	f7fd fc54 	bl	8011a16 <tcp_seg_free>
            while (next &&
 801416e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014170:	2b00      	cmp	r3, #0
 8014172:	d00e      	beq.n	8014192 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8014174:	4b91      	ldr	r3, [pc, #580]	; (80143bc <tcp_receive+0xb04>)
 8014176:	881b      	ldrh	r3, [r3, #0]
 8014178:	461a      	mov	r2, r3
 801417a:	4b91      	ldr	r3, [pc, #580]	; (80143c0 <tcp_receive+0xb08>)
 801417c:	681b      	ldr	r3, [r3, #0]
 801417e:	441a      	add	r2, r3
 8014180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014182:	68db      	ldr	r3, [r3, #12]
 8014184:	685b      	ldr	r3, [r3, #4]
 8014186:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014188:	8909      	ldrh	r1, [r1, #8]
 801418a:	440b      	add	r3, r1
 801418c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801418e:	2b00      	cmp	r3, #0
 8014190:	da9a      	bge.n	80140c8 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8014192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014194:	2b00      	cmp	r3, #0
 8014196:	d059      	beq.n	801424c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8014198:	4b88      	ldr	r3, [pc, #544]	; (80143bc <tcp_receive+0xb04>)
 801419a:	881b      	ldrh	r3, [r3, #0]
 801419c:	461a      	mov	r2, r3
 801419e:	4b88      	ldr	r3, [pc, #544]	; (80143c0 <tcp_receive+0xb08>)
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	441a      	add	r2, r3
 80141a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141a6:	68db      	ldr	r3, [r3, #12]
 80141a8:	685b      	ldr	r3, [r3, #4]
 80141aa:	1ad3      	subs	r3, r2, r3
            if (next &&
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	dd4d      	ble.n	801424c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80141b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141b2:	68db      	ldr	r3, [r3, #12]
 80141b4:	685b      	ldr	r3, [r3, #4]
 80141b6:	b29a      	uxth	r2, r3
 80141b8:	4b81      	ldr	r3, [pc, #516]	; (80143c0 <tcp_receive+0xb08>)
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	b29b      	uxth	r3, r3
 80141be:	1ad3      	subs	r3, r2, r3
 80141c0:	b29a      	uxth	r2, r3
 80141c2:	4b80      	ldr	r3, [pc, #512]	; (80143c4 <tcp_receive+0xb0c>)
 80141c4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80141c6:	4b7f      	ldr	r3, [pc, #508]	; (80143c4 <tcp_receive+0xb0c>)
 80141c8:	68db      	ldr	r3, [r3, #12]
 80141ca:	899b      	ldrh	r3, [r3, #12]
 80141cc:	b29b      	uxth	r3, r3
 80141ce:	4618      	mov	r0, r3
 80141d0:	f7fa fb2e 	bl	800e830 <lwip_htons>
 80141d4:	4603      	mov	r3, r0
 80141d6:	b2db      	uxtb	r3, r3
 80141d8:	f003 0302 	and.w	r3, r3, #2
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d005      	beq.n	80141ec <tcp_receive+0x934>
                inseg.len -= 1;
 80141e0:	4b78      	ldr	r3, [pc, #480]	; (80143c4 <tcp_receive+0xb0c>)
 80141e2:	891b      	ldrh	r3, [r3, #8]
 80141e4:	3b01      	subs	r3, #1
 80141e6:	b29a      	uxth	r2, r3
 80141e8:	4b76      	ldr	r3, [pc, #472]	; (80143c4 <tcp_receive+0xb0c>)
 80141ea:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80141ec:	4b75      	ldr	r3, [pc, #468]	; (80143c4 <tcp_receive+0xb0c>)
 80141ee:	685b      	ldr	r3, [r3, #4]
 80141f0:	4a74      	ldr	r2, [pc, #464]	; (80143c4 <tcp_receive+0xb0c>)
 80141f2:	8912      	ldrh	r2, [r2, #8]
 80141f4:	4611      	mov	r1, r2
 80141f6:	4618      	mov	r0, r3
 80141f8:	f7fb fe3e 	bl	800fe78 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80141fc:	4b71      	ldr	r3, [pc, #452]	; (80143c4 <tcp_receive+0xb0c>)
 80141fe:	891c      	ldrh	r4, [r3, #8]
 8014200:	4b70      	ldr	r3, [pc, #448]	; (80143c4 <tcp_receive+0xb0c>)
 8014202:	68db      	ldr	r3, [r3, #12]
 8014204:	899b      	ldrh	r3, [r3, #12]
 8014206:	b29b      	uxth	r3, r3
 8014208:	4618      	mov	r0, r3
 801420a:	f7fa fb11 	bl	800e830 <lwip_htons>
 801420e:	4603      	mov	r3, r0
 8014210:	b2db      	uxtb	r3, r3
 8014212:	f003 0303 	and.w	r3, r3, #3
 8014216:	2b00      	cmp	r3, #0
 8014218:	d001      	beq.n	801421e <tcp_receive+0x966>
 801421a:	2301      	movs	r3, #1
 801421c:	e000      	b.n	8014220 <tcp_receive+0x968>
 801421e:	2300      	movs	r3, #0
 8014220:	4423      	add	r3, r4
 8014222:	b29a      	uxth	r2, r3
 8014224:	4b65      	ldr	r3, [pc, #404]	; (80143bc <tcp_receive+0xb04>)
 8014226:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8014228:	4b64      	ldr	r3, [pc, #400]	; (80143bc <tcp_receive+0xb04>)
 801422a:	881b      	ldrh	r3, [r3, #0]
 801422c:	461a      	mov	r2, r3
 801422e:	4b64      	ldr	r3, [pc, #400]	; (80143c0 <tcp_receive+0xb08>)
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	441a      	add	r2, r3
 8014234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014236:	68db      	ldr	r3, [r3, #12]
 8014238:	685b      	ldr	r3, [r3, #4]
 801423a:	429a      	cmp	r2, r3
 801423c:	d006      	beq.n	801424c <tcp_receive+0x994>
 801423e:	4b62      	ldr	r3, [pc, #392]	; (80143c8 <tcp_receive+0xb10>)
 8014240:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8014244:	4961      	ldr	r1, [pc, #388]	; (80143cc <tcp_receive+0xb14>)
 8014246:	4862      	ldr	r0, [pc, #392]	; (80143d0 <tcp_receive+0xb18>)
 8014248:	f005 fbf4 	bl	8019a34 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014250:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8014252:	4b5a      	ldr	r3, [pc, #360]	; (80143bc <tcp_receive+0xb04>)
 8014254:	881b      	ldrh	r3, [r3, #0]
 8014256:	461a      	mov	r2, r3
 8014258:	4b59      	ldr	r3, [pc, #356]	; (80143c0 <tcp_receive+0xb08>)
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	441a      	add	r2, r3
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014266:	4b55      	ldr	r3, [pc, #340]	; (80143bc <tcp_receive+0xb04>)
 8014268:	881b      	ldrh	r3, [r3, #0]
 801426a:	429a      	cmp	r2, r3
 801426c:	d206      	bcs.n	801427c <tcp_receive+0x9c4>
 801426e:	4b56      	ldr	r3, [pc, #344]	; (80143c8 <tcp_receive+0xb10>)
 8014270:	f240 6207 	movw	r2, #1543	; 0x607
 8014274:	4957      	ldr	r1, [pc, #348]	; (80143d4 <tcp_receive+0xb1c>)
 8014276:	4856      	ldr	r0, [pc, #344]	; (80143d0 <tcp_receive+0xb18>)
 8014278:	f005 fbdc 	bl	8019a34 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014280:	4b4e      	ldr	r3, [pc, #312]	; (80143bc <tcp_receive+0xb04>)
 8014282:	881b      	ldrh	r3, [r3, #0]
 8014284:	1ad3      	subs	r3, r2, r3
 8014286:	b29a      	uxth	r2, r3
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801428c:	6878      	ldr	r0, [r7, #4]
 801428e:	f7fc fe9d 	bl	8010fcc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8014292:	4b4c      	ldr	r3, [pc, #304]	; (80143c4 <tcp_receive+0xb0c>)
 8014294:	685b      	ldr	r3, [r3, #4]
 8014296:	891b      	ldrh	r3, [r3, #8]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d006      	beq.n	80142aa <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801429c:	4b49      	ldr	r3, [pc, #292]	; (80143c4 <tcp_receive+0xb0c>)
 801429e:	685b      	ldr	r3, [r3, #4]
 80142a0:	4a4d      	ldr	r2, [pc, #308]	; (80143d8 <tcp_receive+0xb20>)
 80142a2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80142a4:	4b47      	ldr	r3, [pc, #284]	; (80143c4 <tcp_receive+0xb0c>)
 80142a6:	2200      	movs	r2, #0
 80142a8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80142aa:	4b46      	ldr	r3, [pc, #280]	; (80143c4 <tcp_receive+0xb0c>)
 80142ac:	68db      	ldr	r3, [r3, #12]
 80142ae:	899b      	ldrh	r3, [r3, #12]
 80142b0:	b29b      	uxth	r3, r3
 80142b2:	4618      	mov	r0, r3
 80142b4:	f7fa fabc 	bl	800e830 <lwip_htons>
 80142b8:	4603      	mov	r3, r0
 80142ba:	b2db      	uxtb	r3, r3
 80142bc:	f003 0301 	and.w	r3, r3, #1
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	f000 80b8 	beq.w	8014436 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80142c6:	4b45      	ldr	r3, [pc, #276]	; (80143dc <tcp_receive+0xb24>)
 80142c8:	781b      	ldrb	r3, [r3, #0]
 80142ca:	f043 0320 	orr.w	r3, r3, #32
 80142ce:	b2da      	uxtb	r2, r3
 80142d0:	4b42      	ldr	r3, [pc, #264]	; (80143dc <tcp_receive+0xb24>)
 80142d2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80142d4:	e0af      	b.n	8014436 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80142da:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80142e0:	68db      	ldr	r3, [r3, #12]
 80142e2:	685b      	ldr	r3, [r3, #4]
 80142e4:	4a36      	ldr	r2, [pc, #216]	; (80143c0 <tcp_receive+0xb08>)
 80142e6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80142e8:	68bb      	ldr	r3, [r7, #8]
 80142ea:	891b      	ldrh	r3, [r3, #8]
 80142ec:	461c      	mov	r4, r3
 80142ee:	68bb      	ldr	r3, [r7, #8]
 80142f0:	68db      	ldr	r3, [r3, #12]
 80142f2:	899b      	ldrh	r3, [r3, #12]
 80142f4:	b29b      	uxth	r3, r3
 80142f6:	4618      	mov	r0, r3
 80142f8:	f7fa fa9a 	bl	800e830 <lwip_htons>
 80142fc:	4603      	mov	r3, r0
 80142fe:	b2db      	uxtb	r3, r3
 8014300:	f003 0303 	and.w	r3, r3, #3
 8014304:	2b00      	cmp	r3, #0
 8014306:	d001      	beq.n	801430c <tcp_receive+0xa54>
 8014308:	2301      	movs	r3, #1
 801430a:	e000      	b.n	801430e <tcp_receive+0xa56>
 801430c:	2300      	movs	r3, #0
 801430e:	191a      	adds	r2, r3, r4
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014314:	441a      	add	r2, r3
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801431e:	461c      	mov	r4, r3
 8014320:	68bb      	ldr	r3, [r7, #8]
 8014322:	891b      	ldrh	r3, [r3, #8]
 8014324:	461d      	mov	r5, r3
 8014326:	68bb      	ldr	r3, [r7, #8]
 8014328:	68db      	ldr	r3, [r3, #12]
 801432a:	899b      	ldrh	r3, [r3, #12]
 801432c:	b29b      	uxth	r3, r3
 801432e:	4618      	mov	r0, r3
 8014330:	f7fa fa7e 	bl	800e830 <lwip_htons>
 8014334:	4603      	mov	r3, r0
 8014336:	b2db      	uxtb	r3, r3
 8014338:	f003 0303 	and.w	r3, r3, #3
 801433c:	2b00      	cmp	r3, #0
 801433e:	d001      	beq.n	8014344 <tcp_receive+0xa8c>
 8014340:	2301      	movs	r3, #1
 8014342:	e000      	b.n	8014346 <tcp_receive+0xa8e>
 8014344:	2300      	movs	r3, #0
 8014346:	442b      	add	r3, r5
 8014348:	429c      	cmp	r4, r3
 801434a:	d206      	bcs.n	801435a <tcp_receive+0xaa2>
 801434c:	4b1e      	ldr	r3, [pc, #120]	; (80143c8 <tcp_receive+0xb10>)
 801434e:	f240 622b 	movw	r2, #1579	; 0x62b
 8014352:	4923      	ldr	r1, [pc, #140]	; (80143e0 <tcp_receive+0xb28>)
 8014354:	481e      	ldr	r0, [pc, #120]	; (80143d0 <tcp_receive+0xb18>)
 8014356:	f005 fb6d 	bl	8019a34 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801435a:	68bb      	ldr	r3, [r7, #8]
 801435c:	891b      	ldrh	r3, [r3, #8]
 801435e:	461c      	mov	r4, r3
 8014360:	68bb      	ldr	r3, [r7, #8]
 8014362:	68db      	ldr	r3, [r3, #12]
 8014364:	899b      	ldrh	r3, [r3, #12]
 8014366:	b29b      	uxth	r3, r3
 8014368:	4618      	mov	r0, r3
 801436a:	f7fa fa61 	bl	800e830 <lwip_htons>
 801436e:	4603      	mov	r3, r0
 8014370:	b2db      	uxtb	r3, r3
 8014372:	f003 0303 	and.w	r3, r3, #3
 8014376:	2b00      	cmp	r3, #0
 8014378:	d001      	beq.n	801437e <tcp_receive+0xac6>
 801437a:	2301      	movs	r3, #1
 801437c:	e000      	b.n	8014380 <tcp_receive+0xac8>
 801437e:	2300      	movs	r3, #0
 8014380:	1919      	adds	r1, r3, r4
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014386:	b28b      	uxth	r3, r1
 8014388:	1ad3      	subs	r3, r2, r3
 801438a:	b29a      	uxth	r2, r3
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8014390:	6878      	ldr	r0, [r7, #4]
 8014392:	f7fc fe1b 	bl	8010fcc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8014396:	68bb      	ldr	r3, [r7, #8]
 8014398:	685b      	ldr	r3, [r3, #4]
 801439a:	891b      	ldrh	r3, [r3, #8]
 801439c:	2b00      	cmp	r3, #0
 801439e:	d028      	beq.n	80143f2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80143a0:	4b0d      	ldr	r3, [pc, #52]	; (80143d8 <tcp_receive+0xb20>)
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d01d      	beq.n	80143e4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80143a8:	4b0b      	ldr	r3, [pc, #44]	; (80143d8 <tcp_receive+0xb20>)
 80143aa:	681a      	ldr	r2, [r3, #0]
 80143ac:	68bb      	ldr	r3, [r7, #8]
 80143ae:	685b      	ldr	r3, [r3, #4]
 80143b0:	4619      	mov	r1, r3
 80143b2:	4610      	mov	r0, r2
 80143b4:	f7fb ffb4 	bl	8010320 <pbuf_cat>
 80143b8:	e018      	b.n	80143ec <tcp_receive+0xb34>
 80143ba:	bf00      	nop
 80143bc:	2400414e 	.word	0x2400414e
 80143c0:	24004144 	.word	0x24004144
 80143c4:	24004124 	.word	0x24004124
 80143c8:	0801bdd0 	.word	0x0801bdd0
 80143cc:	0801c1b0 	.word	0x0801c1b0
 80143d0:	0801be1c 	.word	0x0801be1c
 80143d4:	0801c1ec 	.word	0x0801c1ec
 80143d8:	24004154 	.word	0x24004154
 80143dc:	24004151 	.word	0x24004151
 80143e0:	0801c20c 	.word	0x0801c20c
            } else {
              recv_data = cseg->p;
 80143e4:	68bb      	ldr	r3, [r7, #8]
 80143e6:	685b      	ldr	r3, [r3, #4]
 80143e8:	4a70      	ldr	r2, [pc, #448]	; (80145ac <tcp_receive+0xcf4>)
 80143ea:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80143ec:	68bb      	ldr	r3, [r7, #8]
 80143ee:	2200      	movs	r2, #0
 80143f0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80143f2:	68bb      	ldr	r3, [r7, #8]
 80143f4:	68db      	ldr	r3, [r3, #12]
 80143f6:	899b      	ldrh	r3, [r3, #12]
 80143f8:	b29b      	uxth	r3, r3
 80143fa:	4618      	mov	r0, r3
 80143fc:	f7fa fa18 	bl	800e830 <lwip_htons>
 8014400:	4603      	mov	r3, r0
 8014402:	b2db      	uxtb	r3, r3
 8014404:	f003 0301 	and.w	r3, r3, #1
 8014408:	2b00      	cmp	r3, #0
 801440a:	d00d      	beq.n	8014428 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801440c:	4b68      	ldr	r3, [pc, #416]	; (80145b0 <tcp_receive+0xcf8>)
 801440e:	781b      	ldrb	r3, [r3, #0]
 8014410:	f043 0320 	orr.w	r3, r3, #32
 8014414:	b2da      	uxtb	r2, r3
 8014416:	4b66      	ldr	r3, [pc, #408]	; (80145b0 <tcp_receive+0xcf8>)
 8014418:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	7d1b      	ldrb	r3, [r3, #20]
 801441e:	2b04      	cmp	r3, #4
 8014420:	d102      	bne.n	8014428 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	2207      	movs	r2, #7
 8014426:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014428:	68bb      	ldr	r3, [r7, #8]
 801442a:	681a      	ldr	r2, [r3, #0]
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8014430:	68b8      	ldr	r0, [r7, #8]
 8014432:	f7fd faf0 	bl	8011a16 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801443a:	2b00      	cmp	r3, #0
 801443c:	d008      	beq.n	8014450 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014442:	68db      	ldr	r3, [r3, #12]
 8014444:	685a      	ldr	r2, [r3, #4]
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801444a:	429a      	cmp	r2, r3
 801444c:	f43f af43 	beq.w	80142d6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	8b5b      	ldrh	r3, [r3, #26]
 8014454:	f003 0301 	and.w	r3, r3, #1
 8014458:	2b00      	cmp	r3, #0
 801445a:	d00e      	beq.n	801447a <tcp_receive+0xbc2>
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	8b5b      	ldrh	r3, [r3, #26]
 8014460:	f023 0301 	bic.w	r3, r3, #1
 8014464:	b29a      	uxth	r2, r3
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	835a      	strh	r2, [r3, #26]
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	8b5b      	ldrh	r3, [r3, #26]
 801446e:	f043 0302 	orr.w	r3, r3, #2
 8014472:	b29a      	uxth	r2, r3
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014478:	e188      	b.n	801478c <tcp_receive+0xed4>
        tcp_ack(pcb);
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	8b5b      	ldrh	r3, [r3, #26]
 801447e:	f043 0301 	orr.w	r3, r3, #1
 8014482:	b29a      	uxth	r2, r3
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014488:	e180      	b.n	801478c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801448e:	2b00      	cmp	r3, #0
 8014490:	d106      	bne.n	80144a0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8014492:	4848      	ldr	r0, [pc, #288]	; (80145b4 <tcp_receive+0xcfc>)
 8014494:	f7fd faf6 	bl	8011a84 <tcp_seg_copy>
 8014498:	4602      	mov	r2, r0
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	675a      	str	r2, [r3, #116]	; 0x74
 801449e:	e16d      	b.n	801477c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80144a0:	2300      	movs	r3, #0
 80144a2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80144a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80144aa:	e157      	b.n	801475c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80144ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144ae:	68db      	ldr	r3, [r3, #12]
 80144b0:	685a      	ldr	r2, [r3, #4]
 80144b2:	4b41      	ldr	r3, [pc, #260]	; (80145b8 <tcp_receive+0xd00>)
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	429a      	cmp	r2, r3
 80144b8:	d11d      	bne.n	80144f6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80144ba:	4b3e      	ldr	r3, [pc, #248]	; (80145b4 <tcp_receive+0xcfc>)
 80144bc:	891a      	ldrh	r2, [r3, #8]
 80144be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144c0:	891b      	ldrh	r3, [r3, #8]
 80144c2:	429a      	cmp	r2, r3
 80144c4:	f240 814f 	bls.w	8014766 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80144c8:	483a      	ldr	r0, [pc, #232]	; (80145b4 <tcp_receive+0xcfc>)
 80144ca:	f7fd fadb 	bl	8011a84 <tcp_seg_copy>
 80144ce:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80144d0:	697b      	ldr	r3, [r7, #20]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	f000 8149 	beq.w	801476a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80144d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d003      	beq.n	80144e6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80144de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144e0:	697a      	ldr	r2, [r7, #20]
 80144e2:	601a      	str	r2, [r3, #0]
 80144e4:	e002      	b.n	80144ec <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	697a      	ldr	r2, [r7, #20]
 80144ea:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80144ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80144ee:	6978      	ldr	r0, [r7, #20]
 80144f0:	f7ff f8de 	bl	80136b0 <tcp_oos_insert_segment>
                }
                break;
 80144f4:	e139      	b.n	801476a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80144f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d117      	bne.n	801452c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80144fc:	4b2e      	ldr	r3, [pc, #184]	; (80145b8 <tcp_receive+0xd00>)
 80144fe:	681a      	ldr	r2, [r3, #0]
 8014500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014502:	68db      	ldr	r3, [r3, #12]
 8014504:	685b      	ldr	r3, [r3, #4]
 8014506:	1ad3      	subs	r3, r2, r3
 8014508:	2b00      	cmp	r3, #0
 801450a:	da57      	bge.n	80145bc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801450c:	4829      	ldr	r0, [pc, #164]	; (80145b4 <tcp_receive+0xcfc>)
 801450e:	f7fd fab9 	bl	8011a84 <tcp_seg_copy>
 8014512:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8014514:	69bb      	ldr	r3, [r7, #24]
 8014516:	2b00      	cmp	r3, #0
 8014518:	f000 8129 	beq.w	801476e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	69ba      	ldr	r2, [r7, #24]
 8014520:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8014522:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014524:	69b8      	ldr	r0, [r7, #24]
 8014526:	f7ff f8c3 	bl	80136b0 <tcp_oos_insert_segment>
                  }
                  break;
 801452a:	e120      	b.n	801476e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801452c:	4b22      	ldr	r3, [pc, #136]	; (80145b8 <tcp_receive+0xd00>)
 801452e:	681a      	ldr	r2, [r3, #0]
 8014530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014532:	68db      	ldr	r3, [r3, #12]
 8014534:	685b      	ldr	r3, [r3, #4]
 8014536:	1ad3      	subs	r3, r2, r3
 8014538:	3b01      	subs	r3, #1
 801453a:	2b00      	cmp	r3, #0
 801453c:	db3e      	blt.n	80145bc <tcp_receive+0xd04>
 801453e:	4b1e      	ldr	r3, [pc, #120]	; (80145b8 <tcp_receive+0xd00>)
 8014540:	681a      	ldr	r2, [r3, #0]
 8014542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014544:	68db      	ldr	r3, [r3, #12]
 8014546:	685b      	ldr	r3, [r3, #4]
 8014548:	1ad3      	subs	r3, r2, r3
 801454a:	3301      	adds	r3, #1
 801454c:	2b00      	cmp	r3, #0
 801454e:	dc35      	bgt.n	80145bc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014550:	4818      	ldr	r0, [pc, #96]	; (80145b4 <tcp_receive+0xcfc>)
 8014552:	f7fd fa97 	bl	8011a84 <tcp_seg_copy>
 8014556:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8014558:	69fb      	ldr	r3, [r7, #28]
 801455a:	2b00      	cmp	r3, #0
 801455c:	f000 8109 	beq.w	8014772 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014562:	68db      	ldr	r3, [r3, #12]
 8014564:	685b      	ldr	r3, [r3, #4]
 8014566:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014568:	8912      	ldrh	r2, [r2, #8]
 801456a:	441a      	add	r2, r3
 801456c:	4b12      	ldr	r3, [pc, #72]	; (80145b8 <tcp_receive+0xd00>)
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	1ad3      	subs	r3, r2, r3
 8014572:	2b00      	cmp	r3, #0
 8014574:	dd12      	ble.n	801459c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8014576:	4b10      	ldr	r3, [pc, #64]	; (80145b8 <tcp_receive+0xd00>)
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	b29a      	uxth	r2, r3
 801457c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801457e:	68db      	ldr	r3, [r3, #12]
 8014580:	685b      	ldr	r3, [r3, #4]
 8014582:	b29b      	uxth	r3, r3
 8014584:	1ad3      	subs	r3, r2, r3
 8014586:	b29a      	uxth	r2, r3
 8014588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801458a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801458c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801458e:	685a      	ldr	r2, [r3, #4]
 8014590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014592:	891b      	ldrh	r3, [r3, #8]
 8014594:	4619      	mov	r1, r3
 8014596:	4610      	mov	r0, r2
 8014598:	f7fb fc6e 	bl	800fe78 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801459c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801459e:	69fa      	ldr	r2, [r7, #28]
 80145a0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80145a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80145a4:	69f8      	ldr	r0, [r7, #28]
 80145a6:	f7ff f883 	bl	80136b0 <tcp_oos_insert_segment>
                  }
                  break;
 80145aa:	e0e2      	b.n	8014772 <tcp_receive+0xeba>
 80145ac:	24004154 	.word	0x24004154
 80145b0:	24004151 	.word	0x24004151
 80145b4:	24004124 	.word	0x24004124
 80145b8:	24004144 	.word	0x24004144
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80145bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145be:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80145c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	f040 80c6 	bne.w	8014756 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80145ca:	4b80      	ldr	r3, [pc, #512]	; (80147cc <tcp_receive+0xf14>)
 80145cc:	681a      	ldr	r2, [r3, #0]
 80145ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145d0:	68db      	ldr	r3, [r3, #12]
 80145d2:	685b      	ldr	r3, [r3, #4]
 80145d4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	f340 80bd 	ble.w	8014756 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80145dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145de:	68db      	ldr	r3, [r3, #12]
 80145e0:	899b      	ldrh	r3, [r3, #12]
 80145e2:	b29b      	uxth	r3, r3
 80145e4:	4618      	mov	r0, r3
 80145e6:	f7fa f923 	bl	800e830 <lwip_htons>
 80145ea:	4603      	mov	r3, r0
 80145ec:	b2db      	uxtb	r3, r3
 80145ee:	f003 0301 	and.w	r3, r3, #1
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	f040 80bf 	bne.w	8014776 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80145f8:	4875      	ldr	r0, [pc, #468]	; (80147d0 <tcp_receive+0xf18>)
 80145fa:	f7fd fa43 	bl	8011a84 <tcp_seg_copy>
 80145fe:	4602      	mov	r2, r0
 8014600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014602:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8014604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	2b00      	cmp	r3, #0
 801460a:	f000 80b6 	beq.w	801477a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801460e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014610:	68db      	ldr	r3, [r3, #12]
 8014612:	685b      	ldr	r3, [r3, #4]
 8014614:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014616:	8912      	ldrh	r2, [r2, #8]
 8014618:	441a      	add	r2, r3
 801461a:	4b6c      	ldr	r3, [pc, #432]	; (80147cc <tcp_receive+0xf14>)
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	1ad3      	subs	r3, r2, r3
 8014620:	2b00      	cmp	r3, #0
 8014622:	dd12      	ble.n	801464a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014624:	4b69      	ldr	r3, [pc, #420]	; (80147cc <tcp_receive+0xf14>)
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	b29a      	uxth	r2, r3
 801462a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801462c:	68db      	ldr	r3, [r3, #12]
 801462e:	685b      	ldr	r3, [r3, #4]
 8014630:	b29b      	uxth	r3, r3
 8014632:	1ad3      	subs	r3, r2, r3
 8014634:	b29a      	uxth	r2, r3
 8014636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014638:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801463a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801463c:	685a      	ldr	r2, [r3, #4]
 801463e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014640:	891b      	ldrh	r3, [r3, #8]
 8014642:	4619      	mov	r1, r3
 8014644:	4610      	mov	r0, r2
 8014646:	f7fb fc17 	bl	800fe78 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801464a:	4b62      	ldr	r3, [pc, #392]	; (80147d4 <tcp_receive+0xf1c>)
 801464c:	881b      	ldrh	r3, [r3, #0]
 801464e:	461a      	mov	r2, r3
 8014650:	4b5e      	ldr	r3, [pc, #376]	; (80147cc <tcp_receive+0xf14>)
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	441a      	add	r2, r3
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801465a:	6879      	ldr	r1, [r7, #4]
 801465c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801465e:	440b      	add	r3, r1
 8014660:	1ad3      	subs	r3, r2, r3
 8014662:	2b00      	cmp	r3, #0
 8014664:	f340 8089 	ble.w	801477a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	68db      	ldr	r3, [r3, #12]
 801466e:	899b      	ldrh	r3, [r3, #12]
 8014670:	b29b      	uxth	r3, r3
 8014672:	4618      	mov	r0, r3
 8014674:	f7fa f8dc 	bl	800e830 <lwip_htons>
 8014678:	4603      	mov	r3, r0
 801467a:	b2db      	uxtb	r3, r3
 801467c:	f003 0301 	and.w	r3, r3, #1
 8014680:	2b00      	cmp	r3, #0
 8014682:	d022      	beq.n	80146ca <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	68db      	ldr	r3, [r3, #12]
 801468a:	899b      	ldrh	r3, [r3, #12]
 801468c:	b29b      	uxth	r3, r3
 801468e:	b21b      	sxth	r3, r3
 8014690:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014694:	b21c      	sxth	r4, r3
 8014696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	68db      	ldr	r3, [r3, #12]
 801469c:	899b      	ldrh	r3, [r3, #12]
 801469e:	b29b      	uxth	r3, r3
 80146a0:	4618      	mov	r0, r3
 80146a2:	f7fa f8c5 	bl	800e830 <lwip_htons>
 80146a6:	4603      	mov	r3, r0
 80146a8:	b2db      	uxtb	r3, r3
 80146aa:	b29b      	uxth	r3, r3
 80146ac:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80146b0:	b29b      	uxth	r3, r3
 80146b2:	4618      	mov	r0, r3
 80146b4:	f7fa f8bc 	bl	800e830 <lwip_htons>
 80146b8:	4603      	mov	r3, r0
 80146ba:	b21b      	sxth	r3, r3
 80146bc:	4323      	orrs	r3, r4
 80146be:	b21a      	sxth	r2, r3
 80146c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	68db      	ldr	r3, [r3, #12]
 80146c6:	b292      	uxth	r2, r2
 80146c8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146ce:	b29a      	uxth	r2, r3
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80146d4:	4413      	add	r3, r2
 80146d6:	b299      	uxth	r1, r3
 80146d8:	4b3c      	ldr	r3, [pc, #240]	; (80147cc <tcp_receive+0xf14>)
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	b29a      	uxth	r2, r3
 80146de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	1a8a      	subs	r2, r1, r2
 80146e4:	b292      	uxth	r2, r2
 80146e6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80146e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	685a      	ldr	r2, [r3, #4]
 80146ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146f0:	681b      	ldr	r3, [r3, #0]
 80146f2:	891b      	ldrh	r3, [r3, #8]
 80146f4:	4619      	mov	r1, r3
 80146f6:	4610      	mov	r0, r2
 80146f8:	f7fb fbbe 	bl	800fe78 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80146fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	891c      	ldrh	r4, [r3, #8]
 8014702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	68db      	ldr	r3, [r3, #12]
 8014708:	899b      	ldrh	r3, [r3, #12]
 801470a:	b29b      	uxth	r3, r3
 801470c:	4618      	mov	r0, r3
 801470e:	f7fa f88f 	bl	800e830 <lwip_htons>
 8014712:	4603      	mov	r3, r0
 8014714:	b2db      	uxtb	r3, r3
 8014716:	f003 0303 	and.w	r3, r3, #3
 801471a:	2b00      	cmp	r3, #0
 801471c:	d001      	beq.n	8014722 <tcp_receive+0xe6a>
 801471e:	2301      	movs	r3, #1
 8014720:	e000      	b.n	8014724 <tcp_receive+0xe6c>
 8014722:	2300      	movs	r3, #0
 8014724:	4423      	add	r3, r4
 8014726:	b29a      	uxth	r2, r3
 8014728:	4b2a      	ldr	r3, [pc, #168]	; (80147d4 <tcp_receive+0xf1c>)
 801472a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801472c:	4b29      	ldr	r3, [pc, #164]	; (80147d4 <tcp_receive+0xf1c>)
 801472e:	881b      	ldrh	r3, [r3, #0]
 8014730:	461a      	mov	r2, r3
 8014732:	4b26      	ldr	r3, [pc, #152]	; (80147cc <tcp_receive+0xf14>)
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	441a      	add	r2, r3
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801473c:	6879      	ldr	r1, [r7, #4]
 801473e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014740:	440b      	add	r3, r1
 8014742:	429a      	cmp	r2, r3
 8014744:	d019      	beq.n	801477a <tcp_receive+0xec2>
 8014746:	4b24      	ldr	r3, [pc, #144]	; (80147d8 <tcp_receive+0xf20>)
 8014748:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801474c:	4923      	ldr	r1, [pc, #140]	; (80147dc <tcp_receive+0xf24>)
 801474e:	4824      	ldr	r0, [pc, #144]	; (80147e0 <tcp_receive+0xf28>)
 8014750:	f005 f970 	bl	8019a34 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014754:	e011      	b.n	801477a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	63bb      	str	r3, [r7, #56]	; 0x38
 801475c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801475e:	2b00      	cmp	r3, #0
 8014760:	f47f aea4 	bne.w	80144ac <tcp_receive+0xbf4>
 8014764:	e00a      	b.n	801477c <tcp_receive+0xec4>
                break;
 8014766:	bf00      	nop
 8014768:	e008      	b.n	801477c <tcp_receive+0xec4>
                break;
 801476a:	bf00      	nop
 801476c:	e006      	b.n	801477c <tcp_receive+0xec4>
                  break;
 801476e:	bf00      	nop
 8014770:	e004      	b.n	801477c <tcp_receive+0xec4>
                  break;
 8014772:	bf00      	nop
 8014774:	e002      	b.n	801477c <tcp_receive+0xec4>
                  break;
 8014776:	bf00      	nop
 8014778:	e000      	b.n	801477c <tcp_receive+0xec4>
                break;
 801477a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801477c:	6878      	ldr	r0, [r7, #4]
 801477e:	f001 fe8b 	bl	8016498 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8014782:	e003      	b.n	801478c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8014784:	6878      	ldr	r0, [r7, #4]
 8014786:	f001 fe87 	bl	8016498 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801478a:	e01a      	b.n	80147c2 <tcp_receive+0xf0a>
 801478c:	e019      	b.n	80147c2 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801478e:	4b0f      	ldr	r3, [pc, #60]	; (80147cc <tcp_receive+0xf14>)
 8014790:	681a      	ldr	r2, [r3, #0]
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014796:	1ad3      	subs	r3, r2, r3
 8014798:	2b00      	cmp	r3, #0
 801479a:	db0a      	blt.n	80147b2 <tcp_receive+0xefa>
 801479c:	4b0b      	ldr	r3, [pc, #44]	; (80147cc <tcp_receive+0xf14>)
 801479e:	681a      	ldr	r2, [r3, #0]
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147a4:	6879      	ldr	r1, [r7, #4]
 80147a6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80147a8:	440b      	add	r3, r1
 80147aa:	1ad3      	subs	r3, r2, r3
 80147ac:	3301      	adds	r3, #1
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	dd07      	ble.n	80147c2 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	8b5b      	ldrh	r3, [r3, #26]
 80147b6:	f043 0302 	orr.w	r3, r3, #2
 80147ba:	b29a      	uxth	r2, r3
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80147c0:	e7ff      	b.n	80147c2 <tcp_receive+0xf0a>
 80147c2:	bf00      	nop
 80147c4:	3750      	adds	r7, #80	; 0x50
 80147c6:	46bd      	mov	sp, r7
 80147c8:	bdb0      	pop	{r4, r5, r7, pc}
 80147ca:	bf00      	nop
 80147cc:	24004144 	.word	0x24004144
 80147d0:	24004124 	.word	0x24004124
 80147d4:	2400414e 	.word	0x2400414e
 80147d8:	0801bdd0 	.word	0x0801bdd0
 80147dc:	0801c178 	.word	0x0801c178
 80147e0:	0801be1c 	.word	0x0801be1c

080147e4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80147e4:	b480      	push	{r7}
 80147e6:	b083      	sub	sp, #12
 80147e8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80147ea:	4b15      	ldr	r3, [pc, #84]	; (8014840 <tcp_get_next_optbyte+0x5c>)
 80147ec:	881b      	ldrh	r3, [r3, #0]
 80147ee:	1c5a      	adds	r2, r3, #1
 80147f0:	b291      	uxth	r1, r2
 80147f2:	4a13      	ldr	r2, [pc, #76]	; (8014840 <tcp_get_next_optbyte+0x5c>)
 80147f4:	8011      	strh	r1, [r2, #0]
 80147f6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80147f8:	4b12      	ldr	r3, [pc, #72]	; (8014844 <tcp_get_next_optbyte+0x60>)
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d004      	beq.n	801480a <tcp_get_next_optbyte+0x26>
 8014800:	4b11      	ldr	r3, [pc, #68]	; (8014848 <tcp_get_next_optbyte+0x64>)
 8014802:	881b      	ldrh	r3, [r3, #0]
 8014804:	88fa      	ldrh	r2, [r7, #6]
 8014806:	429a      	cmp	r2, r3
 8014808:	d208      	bcs.n	801481c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801480a:	4b10      	ldr	r3, [pc, #64]	; (801484c <tcp_get_next_optbyte+0x68>)
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	3314      	adds	r3, #20
 8014810:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8014812:	88fb      	ldrh	r3, [r7, #6]
 8014814:	683a      	ldr	r2, [r7, #0]
 8014816:	4413      	add	r3, r2
 8014818:	781b      	ldrb	r3, [r3, #0]
 801481a:	e00b      	b.n	8014834 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801481c:	88fb      	ldrh	r3, [r7, #6]
 801481e:	b2da      	uxtb	r2, r3
 8014820:	4b09      	ldr	r3, [pc, #36]	; (8014848 <tcp_get_next_optbyte+0x64>)
 8014822:	881b      	ldrh	r3, [r3, #0]
 8014824:	b2db      	uxtb	r3, r3
 8014826:	1ad3      	subs	r3, r2, r3
 8014828:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801482a:	4b06      	ldr	r3, [pc, #24]	; (8014844 <tcp_get_next_optbyte+0x60>)
 801482c:	681a      	ldr	r2, [r3, #0]
 801482e:	797b      	ldrb	r3, [r7, #5]
 8014830:	4413      	add	r3, r2
 8014832:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014834:	4618      	mov	r0, r3
 8014836:	370c      	adds	r7, #12
 8014838:	46bd      	mov	sp, r7
 801483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801483e:	4770      	bx	lr
 8014840:	24004140 	.word	0x24004140
 8014844:	2400413c 	.word	0x2400413c
 8014848:	2400413a 	.word	0x2400413a
 801484c:	24004134 	.word	0x24004134

08014850 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014850:	b580      	push	{r7, lr}
 8014852:	b084      	sub	sp, #16
 8014854:	af00      	add	r7, sp, #0
 8014856:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	2b00      	cmp	r3, #0
 801485c:	d106      	bne.n	801486c <tcp_parseopt+0x1c>
 801485e:	4b32      	ldr	r3, [pc, #200]	; (8014928 <tcp_parseopt+0xd8>)
 8014860:	f240 727d 	movw	r2, #1917	; 0x77d
 8014864:	4931      	ldr	r1, [pc, #196]	; (801492c <tcp_parseopt+0xdc>)
 8014866:	4832      	ldr	r0, [pc, #200]	; (8014930 <tcp_parseopt+0xe0>)
 8014868:	f005 f8e4 	bl	8019a34 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801486c:	4b31      	ldr	r3, [pc, #196]	; (8014934 <tcp_parseopt+0xe4>)
 801486e:	881b      	ldrh	r3, [r3, #0]
 8014870:	2b00      	cmp	r3, #0
 8014872:	d055      	beq.n	8014920 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014874:	4b30      	ldr	r3, [pc, #192]	; (8014938 <tcp_parseopt+0xe8>)
 8014876:	2200      	movs	r2, #0
 8014878:	801a      	strh	r2, [r3, #0]
 801487a:	e045      	b.n	8014908 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801487c:	f7ff ffb2 	bl	80147e4 <tcp_get_next_optbyte>
 8014880:	4603      	mov	r3, r0
 8014882:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8014884:	7bfb      	ldrb	r3, [r7, #15]
 8014886:	2b02      	cmp	r3, #2
 8014888:	d006      	beq.n	8014898 <tcp_parseopt+0x48>
 801488a:	2b02      	cmp	r3, #2
 801488c:	dc2b      	bgt.n	80148e6 <tcp_parseopt+0x96>
 801488e:	2b00      	cmp	r3, #0
 8014890:	d041      	beq.n	8014916 <tcp_parseopt+0xc6>
 8014892:	2b01      	cmp	r3, #1
 8014894:	d127      	bne.n	80148e6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8014896:	e037      	b.n	8014908 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014898:	f7ff ffa4 	bl	80147e4 <tcp_get_next_optbyte>
 801489c:	4603      	mov	r3, r0
 801489e:	2b04      	cmp	r3, #4
 80148a0:	d13b      	bne.n	801491a <tcp_parseopt+0xca>
 80148a2:	4b25      	ldr	r3, [pc, #148]	; (8014938 <tcp_parseopt+0xe8>)
 80148a4:	881b      	ldrh	r3, [r3, #0]
 80148a6:	3301      	adds	r3, #1
 80148a8:	4a22      	ldr	r2, [pc, #136]	; (8014934 <tcp_parseopt+0xe4>)
 80148aa:	8812      	ldrh	r2, [r2, #0]
 80148ac:	4293      	cmp	r3, r2
 80148ae:	da34      	bge.n	801491a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80148b0:	f7ff ff98 	bl	80147e4 <tcp_get_next_optbyte>
 80148b4:	4603      	mov	r3, r0
 80148b6:	b29b      	uxth	r3, r3
 80148b8:	021b      	lsls	r3, r3, #8
 80148ba:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80148bc:	f7ff ff92 	bl	80147e4 <tcp_get_next_optbyte>
 80148c0:	4603      	mov	r3, r0
 80148c2:	b29a      	uxth	r2, r3
 80148c4:	89bb      	ldrh	r3, [r7, #12]
 80148c6:	4313      	orrs	r3, r2
 80148c8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80148ca:	89bb      	ldrh	r3, [r7, #12]
 80148cc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80148d0:	d804      	bhi.n	80148dc <tcp_parseopt+0x8c>
 80148d2:	89bb      	ldrh	r3, [r7, #12]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d001      	beq.n	80148dc <tcp_parseopt+0x8c>
 80148d8:	89ba      	ldrh	r2, [r7, #12]
 80148da:	e001      	b.n	80148e0 <tcp_parseopt+0x90>
 80148dc:	f44f 7206 	mov.w	r2, #536	; 0x218
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80148e4:	e010      	b.n	8014908 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80148e6:	f7ff ff7d 	bl	80147e4 <tcp_get_next_optbyte>
 80148ea:	4603      	mov	r3, r0
 80148ec:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80148ee:	7afb      	ldrb	r3, [r7, #11]
 80148f0:	2b01      	cmp	r3, #1
 80148f2:	d914      	bls.n	801491e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80148f4:	7afb      	ldrb	r3, [r7, #11]
 80148f6:	b29a      	uxth	r2, r3
 80148f8:	4b0f      	ldr	r3, [pc, #60]	; (8014938 <tcp_parseopt+0xe8>)
 80148fa:	881b      	ldrh	r3, [r3, #0]
 80148fc:	4413      	add	r3, r2
 80148fe:	b29b      	uxth	r3, r3
 8014900:	3b02      	subs	r3, #2
 8014902:	b29a      	uxth	r2, r3
 8014904:	4b0c      	ldr	r3, [pc, #48]	; (8014938 <tcp_parseopt+0xe8>)
 8014906:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014908:	4b0b      	ldr	r3, [pc, #44]	; (8014938 <tcp_parseopt+0xe8>)
 801490a:	881a      	ldrh	r2, [r3, #0]
 801490c:	4b09      	ldr	r3, [pc, #36]	; (8014934 <tcp_parseopt+0xe4>)
 801490e:	881b      	ldrh	r3, [r3, #0]
 8014910:	429a      	cmp	r2, r3
 8014912:	d3b3      	bcc.n	801487c <tcp_parseopt+0x2c>
 8014914:	e004      	b.n	8014920 <tcp_parseopt+0xd0>
          return;
 8014916:	bf00      	nop
 8014918:	e002      	b.n	8014920 <tcp_parseopt+0xd0>
            return;
 801491a:	bf00      	nop
 801491c:	e000      	b.n	8014920 <tcp_parseopt+0xd0>
            return;
 801491e:	bf00      	nop
      }
    }
  }
}
 8014920:	3710      	adds	r7, #16
 8014922:	46bd      	mov	sp, r7
 8014924:	bd80      	pop	{r7, pc}
 8014926:	bf00      	nop
 8014928:	0801bdd0 	.word	0x0801bdd0
 801492c:	0801c234 	.word	0x0801c234
 8014930:	0801be1c 	.word	0x0801be1c
 8014934:	24004138 	.word	0x24004138
 8014938:	24004140 	.word	0x24004140

0801493c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801493c:	b480      	push	{r7}
 801493e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014940:	4b05      	ldr	r3, [pc, #20]	; (8014958 <tcp_trigger_input_pcb_close+0x1c>)
 8014942:	781b      	ldrb	r3, [r3, #0]
 8014944:	f043 0310 	orr.w	r3, r3, #16
 8014948:	b2da      	uxtb	r2, r3
 801494a:	4b03      	ldr	r3, [pc, #12]	; (8014958 <tcp_trigger_input_pcb_close+0x1c>)
 801494c:	701a      	strb	r2, [r3, #0]
}
 801494e:	bf00      	nop
 8014950:	46bd      	mov	sp, r7
 8014952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014956:	4770      	bx	lr
 8014958:	24004151 	.word	0x24004151

0801495c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801495c:	b580      	push	{r7, lr}
 801495e:	b084      	sub	sp, #16
 8014960:	af00      	add	r7, sp, #0
 8014962:	60f8      	str	r0, [r7, #12]
 8014964:	60b9      	str	r1, [r7, #8]
 8014966:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	2b00      	cmp	r3, #0
 801496c:	d00a      	beq.n	8014984 <tcp_route+0x28>
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	7a1b      	ldrb	r3, [r3, #8]
 8014972:	2b00      	cmp	r3, #0
 8014974:	d006      	beq.n	8014984 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	7a1b      	ldrb	r3, [r3, #8]
 801497a:	4618      	mov	r0, r3
 801497c:	f7fb f874 	bl	800fa68 <netif_get_by_index>
 8014980:	4603      	mov	r3, r0
 8014982:	e003      	b.n	801498c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8014984:	6878      	ldr	r0, [r7, #4]
 8014986:	f003 fb2b 	bl	8017fe0 <ip4_route>
 801498a:	4603      	mov	r3, r0
  }
}
 801498c:	4618      	mov	r0, r3
 801498e:	3710      	adds	r7, #16
 8014990:	46bd      	mov	sp, r7
 8014992:	bd80      	pop	{r7, pc}

08014994 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8014994:	b590      	push	{r4, r7, lr}
 8014996:	b087      	sub	sp, #28
 8014998:	af00      	add	r7, sp, #0
 801499a:	60f8      	str	r0, [r7, #12]
 801499c:	60b9      	str	r1, [r7, #8]
 801499e:	603b      	str	r3, [r7, #0]
 80149a0:	4613      	mov	r3, r2
 80149a2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d105      	bne.n	80149b6 <tcp_create_segment+0x22>
 80149aa:	4b44      	ldr	r3, [pc, #272]	; (8014abc <tcp_create_segment+0x128>)
 80149ac:	22a3      	movs	r2, #163	; 0xa3
 80149ae:	4944      	ldr	r1, [pc, #272]	; (8014ac0 <tcp_create_segment+0x12c>)
 80149b0:	4844      	ldr	r0, [pc, #272]	; (8014ac4 <tcp_create_segment+0x130>)
 80149b2:	f005 f83f 	bl	8019a34 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80149b6:	68bb      	ldr	r3, [r7, #8]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d105      	bne.n	80149c8 <tcp_create_segment+0x34>
 80149bc:	4b3f      	ldr	r3, [pc, #252]	; (8014abc <tcp_create_segment+0x128>)
 80149be:	22a4      	movs	r2, #164	; 0xa4
 80149c0:	4941      	ldr	r1, [pc, #260]	; (8014ac8 <tcp_create_segment+0x134>)
 80149c2:	4840      	ldr	r0, [pc, #256]	; (8014ac4 <tcp_create_segment+0x130>)
 80149c4:	f005 f836 	bl	8019a34 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80149c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80149cc:	009b      	lsls	r3, r3, #2
 80149ce:	b2db      	uxtb	r3, r3
 80149d0:	f003 0304 	and.w	r3, r3, #4
 80149d4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80149d6:	2003      	movs	r0, #3
 80149d8:	f7fa fcba 	bl	800f350 <memp_malloc>
 80149dc:	6138      	str	r0, [r7, #16]
 80149de:	693b      	ldr	r3, [r7, #16]
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d104      	bne.n	80149ee <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80149e4:	68b8      	ldr	r0, [r7, #8]
 80149e6:	f7fb fbcd 	bl	8010184 <pbuf_free>
    return NULL;
 80149ea:	2300      	movs	r3, #0
 80149ec:	e061      	b.n	8014ab2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80149ee:	693b      	ldr	r3, [r7, #16]
 80149f0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80149f4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80149f6:	693b      	ldr	r3, [r7, #16]
 80149f8:	2200      	movs	r2, #0
 80149fa:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80149fc:	693b      	ldr	r3, [r7, #16]
 80149fe:	68ba      	ldr	r2, [r7, #8]
 8014a00:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8014a02:	68bb      	ldr	r3, [r7, #8]
 8014a04:	891a      	ldrh	r2, [r3, #8]
 8014a06:	7dfb      	ldrb	r3, [r7, #23]
 8014a08:	b29b      	uxth	r3, r3
 8014a0a:	429a      	cmp	r2, r3
 8014a0c:	d205      	bcs.n	8014a1a <tcp_create_segment+0x86>
 8014a0e:	4b2b      	ldr	r3, [pc, #172]	; (8014abc <tcp_create_segment+0x128>)
 8014a10:	22b0      	movs	r2, #176	; 0xb0
 8014a12:	492e      	ldr	r1, [pc, #184]	; (8014acc <tcp_create_segment+0x138>)
 8014a14:	482b      	ldr	r0, [pc, #172]	; (8014ac4 <tcp_create_segment+0x130>)
 8014a16:	f005 f80d 	bl	8019a34 <iprintf>
  seg->len = p->tot_len - optlen;
 8014a1a:	68bb      	ldr	r3, [r7, #8]
 8014a1c:	891a      	ldrh	r2, [r3, #8]
 8014a1e:	7dfb      	ldrb	r3, [r7, #23]
 8014a20:	b29b      	uxth	r3, r3
 8014a22:	1ad3      	subs	r3, r2, r3
 8014a24:	b29a      	uxth	r2, r3
 8014a26:	693b      	ldr	r3, [r7, #16]
 8014a28:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8014a2a:	2114      	movs	r1, #20
 8014a2c:	68b8      	ldr	r0, [r7, #8]
 8014a2e:	f7fb fb13 	bl	8010058 <pbuf_add_header>
 8014a32:	4603      	mov	r3, r0
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d004      	beq.n	8014a42 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014a38:	6938      	ldr	r0, [r7, #16]
 8014a3a:	f7fc ffec 	bl	8011a16 <tcp_seg_free>
    return NULL;
 8014a3e:	2300      	movs	r3, #0
 8014a40:	e037      	b.n	8014ab2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8014a42:	693b      	ldr	r3, [r7, #16]
 8014a44:	685b      	ldr	r3, [r3, #4]
 8014a46:	685a      	ldr	r2, [r3, #4]
 8014a48:	693b      	ldr	r3, [r7, #16]
 8014a4a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	8ada      	ldrh	r2, [r3, #22]
 8014a50:	693b      	ldr	r3, [r7, #16]
 8014a52:	68dc      	ldr	r4, [r3, #12]
 8014a54:	4610      	mov	r0, r2
 8014a56:	f7f9 feeb 	bl	800e830 <lwip_htons>
 8014a5a:	4603      	mov	r3, r0
 8014a5c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	8b1a      	ldrh	r2, [r3, #24]
 8014a62:	693b      	ldr	r3, [r7, #16]
 8014a64:	68dc      	ldr	r4, [r3, #12]
 8014a66:	4610      	mov	r0, r2
 8014a68:	f7f9 fee2 	bl	800e830 <lwip_htons>
 8014a6c:	4603      	mov	r3, r0
 8014a6e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8014a70:	693b      	ldr	r3, [r7, #16]
 8014a72:	68dc      	ldr	r4, [r3, #12]
 8014a74:	6838      	ldr	r0, [r7, #0]
 8014a76:	f7f9 fef0 	bl	800e85a <lwip_htonl>
 8014a7a:	4603      	mov	r3, r0
 8014a7c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8014a7e:	7dfb      	ldrb	r3, [r7, #23]
 8014a80:	089b      	lsrs	r3, r3, #2
 8014a82:	b2db      	uxtb	r3, r3
 8014a84:	b29b      	uxth	r3, r3
 8014a86:	3305      	adds	r3, #5
 8014a88:	b29b      	uxth	r3, r3
 8014a8a:	031b      	lsls	r3, r3, #12
 8014a8c:	b29a      	uxth	r2, r3
 8014a8e:	79fb      	ldrb	r3, [r7, #7]
 8014a90:	b29b      	uxth	r3, r3
 8014a92:	4313      	orrs	r3, r2
 8014a94:	b29a      	uxth	r2, r3
 8014a96:	693b      	ldr	r3, [r7, #16]
 8014a98:	68dc      	ldr	r4, [r3, #12]
 8014a9a:	4610      	mov	r0, r2
 8014a9c:	f7f9 fec8 	bl	800e830 <lwip_htons>
 8014aa0:	4603      	mov	r3, r0
 8014aa2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8014aa4:	693b      	ldr	r3, [r7, #16]
 8014aa6:	68db      	ldr	r3, [r3, #12]
 8014aa8:	2200      	movs	r2, #0
 8014aaa:	749a      	strb	r2, [r3, #18]
 8014aac:	2200      	movs	r2, #0
 8014aae:	74da      	strb	r2, [r3, #19]
  return seg;
 8014ab0:	693b      	ldr	r3, [r7, #16]
}
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	371c      	adds	r7, #28
 8014ab6:	46bd      	mov	sp, r7
 8014ab8:	bd90      	pop	{r4, r7, pc}
 8014aba:	bf00      	nop
 8014abc:	0801c250 	.word	0x0801c250
 8014ac0:	0801c284 	.word	0x0801c284
 8014ac4:	0801c2a4 	.word	0x0801c2a4
 8014ac8:	0801c2cc 	.word	0x0801c2cc
 8014acc:	0801c2f0 	.word	0x0801c2f0

08014ad0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8014ad0:	b580      	push	{r7, lr}
 8014ad2:	b086      	sub	sp, #24
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	607b      	str	r3, [r7, #4]
 8014ad8:	4603      	mov	r3, r0
 8014ada:	73fb      	strb	r3, [r7, #15]
 8014adc:	460b      	mov	r3, r1
 8014ade:	81bb      	strh	r3, [r7, #12]
 8014ae0:	4613      	mov	r3, r2
 8014ae2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8014ae4:	89bb      	ldrh	r3, [r7, #12]
 8014ae6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d105      	bne.n	8014afa <tcp_pbuf_prealloc+0x2a>
 8014aee:	4b30      	ldr	r3, [pc, #192]	; (8014bb0 <tcp_pbuf_prealloc+0xe0>)
 8014af0:	22e8      	movs	r2, #232	; 0xe8
 8014af2:	4930      	ldr	r1, [pc, #192]	; (8014bb4 <tcp_pbuf_prealloc+0xe4>)
 8014af4:	4830      	ldr	r0, [pc, #192]	; (8014bb8 <tcp_pbuf_prealloc+0xe8>)
 8014af6:	f004 ff9d 	bl	8019a34 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8014afa:	6a3b      	ldr	r3, [r7, #32]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d105      	bne.n	8014b0c <tcp_pbuf_prealloc+0x3c>
 8014b00:	4b2b      	ldr	r3, [pc, #172]	; (8014bb0 <tcp_pbuf_prealloc+0xe0>)
 8014b02:	22e9      	movs	r2, #233	; 0xe9
 8014b04:	492d      	ldr	r1, [pc, #180]	; (8014bbc <tcp_pbuf_prealloc+0xec>)
 8014b06:	482c      	ldr	r0, [pc, #176]	; (8014bb8 <tcp_pbuf_prealloc+0xe8>)
 8014b08:	f004 ff94 	bl	8019a34 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8014b0c:	89ba      	ldrh	r2, [r7, #12]
 8014b0e:	897b      	ldrh	r3, [r7, #10]
 8014b10:	429a      	cmp	r2, r3
 8014b12:	d221      	bcs.n	8014b58 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014b14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014b18:	f003 0302 	and.w	r3, r3, #2
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d111      	bne.n	8014b44 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8014b20:	6a3b      	ldr	r3, [r7, #32]
 8014b22:	8b5b      	ldrh	r3, [r3, #26]
 8014b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d115      	bne.n	8014b58 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8014b2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d007      	beq.n	8014b44 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8014b34:	6a3b      	ldr	r3, [r7, #32]
 8014b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d103      	bne.n	8014b44 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8014b3c:	6a3b      	ldr	r3, [r7, #32]
 8014b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d009      	beq.n	8014b58 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8014b44:	89bb      	ldrh	r3, [r7, #12]
 8014b46:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8014b4a:	f023 0203 	bic.w	r2, r3, #3
 8014b4e:	897b      	ldrh	r3, [r7, #10]
 8014b50:	4293      	cmp	r3, r2
 8014b52:	bf28      	it	cs
 8014b54:	4613      	movcs	r3, r2
 8014b56:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8014b58:	8af9      	ldrh	r1, [r7, #22]
 8014b5a:	7bfb      	ldrb	r3, [r7, #15]
 8014b5c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014b60:	4618      	mov	r0, r3
 8014b62:	f7fb f82b 	bl	800fbbc <pbuf_alloc>
 8014b66:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014b68:	693b      	ldr	r3, [r7, #16]
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d101      	bne.n	8014b72 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8014b6e:	2300      	movs	r3, #0
 8014b70:	e019      	b.n	8014ba6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8014b72:	693b      	ldr	r3, [r7, #16]
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d006      	beq.n	8014b88 <tcp_pbuf_prealloc+0xb8>
 8014b7a:	4b0d      	ldr	r3, [pc, #52]	; (8014bb0 <tcp_pbuf_prealloc+0xe0>)
 8014b7c:	f240 120b 	movw	r2, #267	; 0x10b
 8014b80:	490f      	ldr	r1, [pc, #60]	; (8014bc0 <tcp_pbuf_prealloc+0xf0>)
 8014b82:	480d      	ldr	r0, [pc, #52]	; (8014bb8 <tcp_pbuf_prealloc+0xe8>)
 8014b84:	f004 ff56 	bl	8019a34 <iprintf>
  *oversize = p->len - length;
 8014b88:	693b      	ldr	r3, [r7, #16]
 8014b8a:	895a      	ldrh	r2, [r3, #10]
 8014b8c:	89bb      	ldrh	r3, [r7, #12]
 8014b8e:	1ad3      	subs	r3, r2, r3
 8014b90:	b29a      	uxth	r2, r3
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8014b96:	693b      	ldr	r3, [r7, #16]
 8014b98:	89ba      	ldrh	r2, [r7, #12]
 8014b9a:	811a      	strh	r2, [r3, #8]
 8014b9c:	693b      	ldr	r3, [r7, #16]
 8014b9e:	891a      	ldrh	r2, [r3, #8]
 8014ba0:	693b      	ldr	r3, [r7, #16]
 8014ba2:	815a      	strh	r2, [r3, #10]
  return p;
 8014ba4:	693b      	ldr	r3, [r7, #16]
}
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	3718      	adds	r7, #24
 8014baa:	46bd      	mov	sp, r7
 8014bac:	bd80      	pop	{r7, pc}
 8014bae:	bf00      	nop
 8014bb0:	0801c250 	.word	0x0801c250
 8014bb4:	0801c308 	.word	0x0801c308
 8014bb8:	0801c2a4 	.word	0x0801c2a4
 8014bbc:	0801c32c 	.word	0x0801c32c
 8014bc0:	0801c34c 	.word	0x0801c34c

08014bc4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8014bc4:	b580      	push	{r7, lr}
 8014bc6:	b082      	sub	sp, #8
 8014bc8:	af00      	add	r7, sp, #0
 8014bca:	6078      	str	r0, [r7, #4]
 8014bcc:	460b      	mov	r3, r1
 8014bce:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d106      	bne.n	8014be4 <tcp_write_checks+0x20>
 8014bd6:	4b33      	ldr	r3, [pc, #204]	; (8014ca4 <tcp_write_checks+0xe0>)
 8014bd8:	f240 1233 	movw	r2, #307	; 0x133
 8014bdc:	4932      	ldr	r1, [pc, #200]	; (8014ca8 <tcp_write_checks+0xe4>)
 8014bde:	4833      	ldr	r0, [pc, #204]	; (8014cac <tcp_write_checks+0xe8>)
 8014be0:	f004 ff28 	bl	8019a34 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	7d1b      	ldrb	r3, [r3, #20]
 8014be8:	2b04      	cmp	r3, #4
 8014bea:	d00e      	beq.n	8014c0a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8014bf0:	2b07      	cmp	r3, #7
 8014bf2:	d00a      	beq.n	8014c0a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8014bf8:	2b02      	cmp	r3, #2
 8014bfa:	d006      	beq.n	8014c0a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8014c00:	2b03      	cmp	r3, #3
 8014c02:	d002      	beq.n	8014c0a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8014c04:	f06f 030a 	mvn.w	r3, #10
 8014c08:	e048      	b.n	8014c9c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8014c0a:	887b      	ldrh	r3, [r7, #2]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d101      	bne.n	8014c14 <tcp_write_checks+0x50>
    return ERR_OK;
 8014c10:	2300      	movs	r3, #0
 8014c12:	e043      	b.n	8014c9c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014c1a:	887a      	ldrh	r2, [r7, #2]
 8014c1c:	429a      	cmp	r2, r3
 8014c1e:	d909      	bls.n	8014c34 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	8b5b      	ldrh	r3, [r3, #26]
 8014c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014c28:	b29a      	uxth	r2, r3
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8014c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8014c32:	e033      	b.n	8014c9c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014c3a:	2b08      	cmp	r3, #8
 8014c3c:	d909      	bls.n	8014c52 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	8b5b      	ldrh	r3, [r3, #26]
 8014c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014c46:	b29a      	uxth	r2, r3
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8014c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8014c50:	e024      	b.n	8014c9c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d00f      	beq.n	8014c7c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d11a      	bne.n	8014c9a <tcp_write_checks+0xd6>
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d116      	bne.n	8014c9a <tcp_write_checks+0xd6>
 8014c6c:	4b0d      	ldr	r3, [pc, #52]	; (8014ca4 <tcp_write_checks+0xe0>)
 8014c6e:	f240 1255 	movw	r2, #341	; 0x155
 8014c72:	490f      	ldr	r1, [pc, #60]	; (8014cb0 <tcp_write_checks+0xec>)
 8014c74:	480d      	ldr	r0, [pc, #52]	; (8014cac <tcp_write_checks+0xe8>)
 8014c76:	f004 fedd 	bl	8019a34 <iprintf>
 8014c7a:	e00e      	b.n	8014c9a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d103      	bne.n	8014c8c <tcp_write_checks+0xc8>
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d006      	beq.n	8014c9a <tcp_write_checks+0xd6>
 8014c8c:	4b05      	ldr	r3, [pc, #20]	; (8014ca4 <tcp_write_checks+0xe0>)
 8014c8e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8014c92:	4908      	ldr	r1, [pc, #32]	; (8014cb4 <tcp_write_checks+0xf0>)
 8014c94:	4805      	ldr	r0, [pc, #20]	; (8014cac <tcp_write_checks+0xe8>)
 8014c96:	f004 fecd 	bl	8019a34 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8014c9a:	2300      	movs	r3, #0
}
 8014c9c:	4618      	mov	r0, r3
 8014c9e:	3708      	adds	r7, #8
 8014ca0:	46bd      	mov	sp, r7
 8014ca2:	bd80      	pop	{r7, pc}
 8014ca4:	0801c250 	.word	0x0801c250
 8014ca8:	0801c360 	.word	0x0801c360
 8014cac:	0801c2a4 	.word	0x0801c2a4
 8014cb0:	0801c380 	.word	0x0801c380
 8014cb4:	0801c3bc 	.word	0x0801c3bc

08014cb8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8014cb8:	b590      	push	{r4, r7, lr}
 8014cba:	b09b      	sub	sp, #108	; 0x6c
 8014cbc:	af04      	add	r7, sp, #16
 8014cbe:	60f8      	str	r0, [r7, #12]
 8014cc0:	60b9      	str	r1, [r7, #8]
 8014cc2:	4611      	mov	r1, r2
 8014cc4:	461a      	mov	r2, r3
 8014cc6:	460b      	mov	r3, r1
 8014cc8:	80fb      	strh	r3, [r7, #6]
 8014cca:	4613      	mov	r3, r2
 8014ccc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8014cce:	2300      	movs	r3, #0
 8014cd0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8014cd2:	2300      	movs	r3, #0
 8014cd4:	653b      	str	r3, [r7, #80]	; 0x50
 8014cd6:	2300      	movs	r3, #0
 8014cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014cda:	2300      	movs	r3, #0
 8014cdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8014cde:	2300      	movs	r3, #0
 8014ce0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8014ce2:	2300      	movs	r3, #0
 8014ce4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8014ce8:	2300      	movs	r3, #0
 8014cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8014cee:	2300      	movs	r3, #0
 8014cf0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8014cf2:	2300      	movs	r3, #0
 8014cf4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d109      	bne.n	8014d14 <tcp_write+0x5c>
 8014d00:	4ba4      	ldr	r3, [pc, #656]	; (8014f94 <tcp_write+0x2dc>)
 8014d02:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8014d06:	49a4      	ldr	r1, [pc, #656]	; (8014f98 <tcp_write+0x2e0>)
 8014d08:	48a4      	ldr	r0, [pc, #656]	; (8014f9c <tcp_write+0x2e4>)
 8014d0a:	f004 fe93 	bl	8019a34 <iprintf>
 8014d0e:	f06f 030f 	mvn.w	r3, #15
 8014d12:	e32a      	b.n	801536a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014d1a:	085b      	lsrs	r3, r3, #1
 8014d1c:	b29a      	uxth	r2, r3
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014d22:	4293      	cmp	r3, r2
 8014d24:	bf28      	it	cs
 8014d26:	4613      	movcs	r3, r2
 8014d28:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8014d2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d102      	bne.n	8014d36 <tcp_write+0x7e>
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014d34:	e000      	b.n	8014d38 <tcp_write+0x80>
 8014d36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014d38:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8014d3a:	68bb      	ldr	r3, [r7, #8]
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d109      	bne.n	8014d54 <tcp_write+0x9c>
 8014d40:	4b94      	ldr	r3, [pc, #592]	; (8014f94 <tcp_write+0x2dc>)
 8014d42:	f240 12ad 	movw	r2, #429	; 0x1ad
 8014d46:	4996      	ldr	r1, [pc, #600]	; (8014fa0 <tcp_write+0x2e8>)
 8014d48:	4894      	ldr	r0, [pc, #592]	; (8014f9c <tcp_write+0x2e4>)
 8014d4a:	f004 fe73 	bl	8019a34 <iprintf>
 8014d4e:	f06f 030f 	mvn.w	r3, #15
 8014d52:	e30a      	b.n	801536a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8014d54:	88fb      	ldrh	r3, [r7, #6]
 8014d56:	4619      	mov	r1, r3
 8014d58:	68f8      	ldr	r0, [r7, #12]
 8014d5a:	f7ff ff33 	bl	8014bc4 <tcp_write_checks>
 8014d5e:	4603      	mov	r3, r0
 8014d60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8014d64:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d002      	beq.n	8014d72 <tcp_write+0xba>
    return err;
 8014d6c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8014d70:	e2fb      	b.n	801536a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014d78:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	f000 80f6 	beq.w	8014f78 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d90:	653b      	str	r3, [r7, #80]	; 0x50
 8014d92:	e002      	b.n	8014d9a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8014d94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014d96:	681b      	ldr	r3, [r3, #0]
 8014d98:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014d9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d1f8      	bne.n	8014d94 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8014da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014da4:	7a9b      	ldrb	r3, [r3, #10]
 8014da6:	009b      	lsls	r3, r3, #2
 8014da8:	b29b      	uxth	r3, r3
 8014daa:	f003 0304 	and.w	r3, r3, #4
 8014dae:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8014db0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014db4:	891b      	ldrh	r3, [r3, #8]
 8014db6:	4619      	mov	r1, r3
 8014db8:	8c3b      	ldrh	r3, [r7, #32]
 8014dba:	440b      	add	r3, r1
 8014dbc:	429a      	cmp	r2, r3
 8014dbe:	da06      	bge.n	8014dce <tcp_write+0x116>
 8014dc0:	4b74      	ldr	r3, [pc, #464]	; (8014f94 <tcp_write+0x2dc>)
 8014dc2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8014dc6:	4977      	ldr	r1, [pc, #476]	; (8014fa4 <tcp_write+0x2ec>)
 8014dc8:	4874      	ldr	r0, [pc, #464]	; (8014f9c <tcp_write+0x2e4>)
 8014dca:	f004 fe33 	bl	8019a34 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8014dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014dd0:	891a      	ldrh	r2, [r3, #8]
 8014dd2:	8c3b      	ldrh	r3, [r7, #32]
 8014dd4:	4413      	add	r3, r2
 8014dd6:	b29b      	uxth	r3, r3
 8014dd8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014dda:	1ad3      	subs	r3, r2, r3
 8014ddc:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014de4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8014de6:	8a7b      	ldrh	r3, [r7, #18]
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d026      	beq.n	8014e3a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8014dec:	8a7b      	ldrh	r3, [r7, #18]
 8014dee:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014df0:	429a      	cmp	r2, r3
 8014df2:	d206      	bcs.n	8014e02 <tcp_write+0x14a>
 8014df4:	4b67      	ldr	r3, [pc, #412]	; (8014f94 <tcp_write+0x2dc>)
 8014df6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8014dfa:	496b      	ldr	r1, [pc, #428]	; (8014fa8 <tcp_write+0x2f0>)
 8014dfc:	4867      	ldr	r0, [pc, #412]	; (8014f9c <tcp_write+0x2e4>)
 8014dfe:	f004 fe19 	bl	8019a34 <iprintf>
      seg = last_unsent;
 8014e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e04:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8014e06:	8a7b      	ldrh	r3, [r7, #18]
 8014e08:	88fa      	ldrh	r2, [r7, #6]
 8014e0a:	4293      	cmp	r3, r2
 8014e0c:	bf28      	it	cs
 8014e0e:	4613      	movcs	r3, r2
 8014e10:	b29b      	uxth	r3, r3
 8014e12:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014e14:	4293      	cmp	r3, r2
 8014e16:	bf28      	it	cs
 8014e18:	4613      	movcs	r3, r2
 8014e1a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8014e1c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014e20:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014e22:	4413      	add	r3, r2
 8014e24:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8014e28:	8a7a      	ldrh	r2, [r7, #18]
 8014e2a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014e2c:	1ad3      	subs	r3, r2, r3
 8014e2e:	b29b      	uxth	r3, r3
 8014e30:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8014e32:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014e34:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014e36:	1ad3      	subs	r3, r2, r3
 8014e38:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8014e3a:	8a7b      	ldrh	r3, [r7, #18]
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d00b      	beq.n	8014e58 <tcp_write+0x1a0>
 8014e40:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014e44:	88fb      	ldrh	r3, [r7, #6]
 8014e46:	429a      	cmp	r2, r3
 8014e48:	d006      	beq.n	8014e58 <tcp_write+0x1a0>
 8014e4a:	4b52      	ldr	r3, [pc, #328]	; (8014f94 <tcp_write+0x2dc>)
 8014e4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014e50:	4956      	ldr	r1, [pc, #344]	; (8014fac <tcp_write+0x2f4>)
 8014e52:	4852      	ldr	r0, [pc, #328]	; (8014f9c <tcp_write+0x2e4>)
 8014e54:	f004 fdee 	bl	8019a34 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8014e58:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014e5c:	88fb      	ldrh	r3, [r7, #6]
 8014e5e:	429a      	cmp	r2, r3
 8014e60:	f080 8167 	bcs.w	8015132 <tcp_write+0x47a>
 8014e64:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	f000 8163 	beq.w	8015132 <tcp_write+0x47a>
 8014e6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e6e:	891b      	ldrh	r3, [r3, #8]
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	f000 815e 	beq.w	8015132 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8014e76:	88fa      	ldrh	r2, [r7, #6]
 8014e78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014e7c:	1ad2      	subs	r2, r2, r3
 8014e7e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014e80:	4293      	cmp	r3, r2
 8014e82:	bfa8      	it	ge
 8014e84:	4613      	movge	r3, r2
 8014e86:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8014e88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e8a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8014e8c:	797b      	ldrb	r3, [r7, #5]
 8014e8e:	f003 0301 	and.w	r3, r3, #1
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d027      	beq.n	8014ee6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8014e96:	f107 0012 	add.w	r0, r7, #18
 8014e9a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014e9c:	8bf9      	ldrh	r1, [r7, #30]
 8014e9e:	2301      	movs	r3, #1
 8014ea0:	9302      	str	r3, [sp, #8]
 8014ea2:	797b      	ldrb	r3, [r7, #5]
 8014ea4:	9301      	str	r3, [sp, #4]
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	9300      	str	r3, [sp, #0]
 8014eaa:	4603      	mov	r3, r0
 8014eac:	2000      	movs	r0, #0
 8014eae:	f7ff fe0f 	bl	8014ad0 <tcp_pbuf_prealloc>
 8014eb2:	6578      	str	r0, [r7, #84]	; 0x54
 8014eb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	f000 8225 	beq.w	8015306 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8014ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014ebe:	6858      	ldr	r0, [r3, #4]
 8014ec0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014ec4:	68ba      	ldr	r2, [r7, #8]
 8014ec6:	4413      	add	r3, r2
 8014ec8:	8bfa      	ldrh	r2, [r7, #30]
 8014eca:	4619      	mov	r1, r3
 8014ecc:	f004 fd41 	bl	8019952 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8014ed0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8014ed2:	f7fb f9e5 	bl	80102a0 <pbuf_clen>
 8014ed6:	4603      	mov	r3, r0
 8014ed8:	461a      	mov	r2, r3
 8014eda:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014ede:	4413      	add	r3, r2
 8014ee0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8014ee4:	e041      	b.n	8014f6a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8014ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ee8:	685b      	ldr	r3, [r3, #4]
 8014eea:	637b      	str	r3, [r7, #52]	; 0x34
 8014eec:	e002      	b.n	8014ef4 <tcp_write+0x23c>
 8014eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	637b      	str	r3, [r7, #52]	; 0x34
 8014ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d1f8      	bne.n	8014eee <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8014efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014efe:	7b1b      	ldrb	r3, [r3, #12]
 8014f00:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d115      	bne.n	8014f34 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8014f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f0a:	685b      	ldr	r3, [r3, #4]
 8014f0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014f0e:	8952      	ldrh	r2, [r2, #10]
 8014f10:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8014f12:	68ba      	ldr	r2, [r7, #8]
 8014f14:	429a      	cmp	r2, r3
 8014f16:	d10d      	bne.n	8014f34 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8014f18:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d006      	beq.n	8014f2e <tcp_write+0x276>
 8014f20:	4b1c      	ldr	r3, [pc, #112]	; (8014f94 <tcp_write+0x2dc>)
 8014f22:	f240 2231 	movw	r2, #561	; 0x231
 8014f26:	4922      	ldr	r1, [pc, #136]	; (8014fb0 <tcp_write+0x2f8>)
 8014f28:	481c      	ldr	r0, [pc, #112]	; (8014f9c <tcp_write+0x2e4>)
 8014f2a:	f004 fd83 	bl	8019a34 <iprintf>
          extendlen = seglen;
 8014f2e:	8bfb      	ldrh	r3, [r7, #30]
 8014f30:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8014f32:	e01a      	b.n	8014f6a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8014f34:	8bfb      	ldrh	r3, [r7, #30]
 8014f36:	2201      	movs	r2, #1
 8014f38:	4619      	mov	r1, r3
 8014f3a:	2000      	movs	r0, #0
 8014f3c:	f7fa fe3e 	bl	800fbbc <pbuf_alloc>
 8014f40:	6578      	str	r0, [r7, #84]	; 0x54
 8014f42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	f000 81e0 	beq.w	801530a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8014f4a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014f4e:	68ba      	ldr	r2, [r7, #8]
 8014f50:	441a      	add	r2, r3
 8014f52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014f54:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8014f56:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8014f58:	f7fb f9a2 	bl	80102a0 <pbuf_clen>
 8014f5c:	4603      	mov	r3, r0
 8014f5e:	461a      	mov	r2, r3
 8014f60:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014f64:	4413      	add	r3, r2
 8014f66:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8014f6a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014f6e:	8bfb      	ldrh	r3, [r7, #30]
 8014f70:	4413      	add	r3, r2
 8014f72:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8014f76:	e0dc      	b.n	8015132 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	f000 80d7 	beq.w	8015132 <tcp_write+0x47a>
 8014f84:	4b03      	ldr	r3, [pc, #12]	; (8014f94 <tcp_write+0x2dc>)
 8014f86:	f240 224a 	movw	r2, #586	; 0x24a
 8014f8a:	490a      	ldr	r1, [pc, #40]	; (8014fb4 <tcp_write+0x2fc>)
 8014f8c:	4803      	ldr	r0, [pc, #12]	; (8014f9c <tcp_write+0x2e4>)
 8014f8e:	f004 fd51 	bl	8019a34 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8014f92:	e0ce      	b.n	8015132 <tcp_write+0x47a>
 8014f94:	0801c250 	.word	0x0801c250
 8014f98:	0801c3f0 	.word	0x0801c3f0
 8014f9c:	0801c2a4 	.word	0x0801c2a4
 8014fa0:	0801c408 	.word	0x0801c408
 8014fa4:	0801c43c 	.word	0x0801c43c
 8014fa8:	0801c454 	.word	0x0801c454
 8014fac:	0801c474 	.word	0x0801c474
 8014fb0:	0801c494 	.word	0x0801c494
 8014fb4:	0801c4c0 	.word	0x0801c4c0
    struct pbuf *p;
    u16_t left = len - pos;
 8014fb8:	88fa      	ldrh	r2, [r7, #6]
 8014fba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014fbe:	1ad3      	subs	r3, r2, r3
 8014fc0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8014fc2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014fc6:	b29b      	uxth	r3, r3
 8014fc8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014fca:	1ad3      	subs	r3, r2, r3
 8014fcc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8014fce:	8b7a      	ldrh	r2, [r7, #26]
 8014fd0:	8bbb      	ldrh	r3, [r7, #28]
 8014fd2:	4293      	cmp	r3, r2
 8014fd4:	bf28      	it	cs
 8014fd6:	4613      	movcs	r3, r2
 8014fd8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8014fda:	797b      	ldrb	r3, [r7, #5]
 8014fdc:	f003 0301 	and.w	r3, r3, #1
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d036      	beq.n	8015052 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8014fe4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014fe8:	b29a      	uxth	r2, r3
 8014fea:	8b3b      	ldrh	r3, [r7, #24]
 8014fec:	4413      	add	r3, r2
 8014fee:	b299      	uxth	r1, r3
 8014ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	bf0c      	ite	eq
 8014ff6:	2301      	moveq	r3, #1
 8014ff8:	2300      	movne	r3, #0
 8014ffa:	b2db      	uxtb	r3, r3
 8014ffc:	f107 0012 	add.w	r0, r7, #18
 8015000:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015002:	9302      	str	r3, [sp, #8]
 8015004:	797b      	ldrb	r3, [r7, #5]
 8015006:	9301      	str	r3, [sp, #4]
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	9300      	str	r3, [sp, #0]
 801500c:	4603      	mov	r3, r0
 801500e:	2036      	movs	r0, #54	; 0x36
 8015010:	f7ff fd5e 	bl	8014ad0 <tcp_pbuf_prealloc>
 8015014:	6338      	str	r0, [r7, #48]	; 0x30
 8015016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015018:	2b00      	cmp	r3, #0
 801501a:	f000 8178 	beq.w	801530e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015020:	895b      	ldrh	r3, [r3, #10]
 8015022:	8b3a      	ldrh	r2, [r7, #24]
 8015024:	429a      	cmp	r2, r3
 8015026:	d906      	bls.n	8015036 <tcp_write+0x37e>
 8015028:	4b8c      	ldr	r3, [pc, #560]	; (801525c <tcp_write+0x5a4>)
 801502a:	f240 2266 	movw	r2, #614	; 0x266
 801502e:	498c      	ldr	r1, [pc, #560]	; (8015260 <tcp_write+0x5a8>)
 8015030:	488c      	ldr	r0, [pc, #560]	; (8015264 <tcp_write+0x5ac>)
 8015032:	f004 fcff 	bl	8019a34 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8015036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015038:	685a      	ldr	r2, [r3, #4]
 801503a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801503e:	18d0      	adds	r0, r2, r3
 8015040:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015044:	68ba      	ldr	r2, [r7, #8]
 8015046:	4413      	add	r3, r2
 8015048:	8b3a      	ldrh	r2, [r7, #24]
 801504a:	4619      	mov	r1, r3
 801504c:	f004 fc81 	bl	8019952 <memcpy>
 8015050:	e02f      	b.n	80150b2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8015052:	8a7b      	ldrh	r3, [r7, #18]
 8015054:	2b00      	cmp	r3, #0
 8015056:	d006      	beq.n	8015066 <tcp_write+0x3ae>
 8015058:	4b80      	ldr	r3, [pc, #512]	; (801525c <tcp_write+0x5a4>)
 801505a:	f240 2271 	movw	r2, #625	; 0x271
 801505e:	4982      	ldr	r1, [pc, #520]	; (8015268 <tcp_write+0x5b0>)
 8015060:	4880      	ldr	r0, [pc, #512]	; (8015264 <tcp_write+0x5ac>)
 8015062:	f004 fce7 	bl	8019a34 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8015066:	8b3b      	ldrh	r3, [r7, #24]
 8015068:	2201      	movs	r2, #1
 801506a:	4619      	mov	r1, r3
 801506c:	2036      	movs	r0, #54	; 0x36
 801506e:	f7fa fda5 	bl	800fbbc <pbuf_alloc>
 8015072:	6178      	str	r0, [r7, #20]
 8015074:	697b      	ldr	r3, [r7, #20]
 8015076:	2b00      	cmp	r3, #0
 8015078:	f000 814b 	beq.w	8015312 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801507c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015080:	68ba      	ldr	r2, [r7, #8]
 8015082:	441a      	add	r2, r3
 8015084:	697b      	ldr	r3, [r7, #20]
 8015086:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8015088:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801508c:	b29b      	uxth	r3, r3
 801508e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015092:	4619      	mov	r1, r3
 8015094:	2036      	movs	r0, #54	; 0x36
 8015096:	f7fa fd91 	bl	800fbbc <pbuf_alloc>
 801509a:	6338      	str	r0, [r7, #48]	; 0x30
 801509c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d103      	bne.n	80150aa <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80150a2:	6978      	ldr	r0, [r7, #20]
 80150a4:	f7fb f86e 	bl	8010184 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80150a8:	e136      	b.n	8015318 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80150aa:	6979      	ldr	r1, [r7, #20]
 80150ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80150ae:	f7fb f937 	bl	8010320 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80150b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80150b4:	f7fb f8f4 	bl	80102a0 <pbuf_clen>
 80150b8:	4603      	mov	r3, r0
 80150ba:	461a      	mov	r2, r3
 80150bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80150c0:	4413      	add	r3, r2
 80150c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80150c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80150ca:	2b09      	cmp	r3, #9
 80150cc:	d903      	bls.n	80150d6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80150ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80150d0:	f7fb f858 	bl	8010184 <pbuf_free>
      goto memerr;
 80150d4:	e120      	b.n	8015318 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80150da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80150de:	441a      	add	r2, r3
 80150e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80150e4:	9300      	str	r3, [sp, #0]
 80150e6:	4613      	mov	r3, r2
 80150e8:	2200      	movs	r2, #0
 80150ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80150ec:	68f8      	ldr	r0, [r7, #12]
 80150ee:	f7ff fc51 	bl	8014994 <tcp_create_segment>
 80150f2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80150f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	f000 810d 	beq.w	8015316 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80150fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d102      	bne.n	8015108 <tcp_write+0x450>
      queue = seg;
 8015102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015104:	647b      	str	r3, [r7, #68]	; 0x44
 8015106:	e00c      	b.n	8015122 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8015108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801510a:	2b00      	cmp	r3, #0
 801510c:	d106      	bne.n	801511c <tcp_write+0x464>
 801510e:	4b53      	ldr	r3, [pc, #332]	; (801525c <tcp_write+0x5a4>)
 8015110:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015114:	4955      	ldr	r1, [pc, #340]	; (801526c <tcp_write+0x5b4>)
 8015116:	4853      	ldr	r0, [pc, #332]	; (8015264 <tcp_write+0x5ac>)
 8015118:	f004 fc8c 	bl	8019a34 <iprintf>
      prev_seg->next = seg;
 801511c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801511e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015120:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8015122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015124:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8015126:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801512a:	8b3b      	ldrh	r3, [r7, #24]
 801512c:	4413      	add	r3, r2
 801512e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8015132:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015136:	88fb      	ldrh	r3, [r7, #6]
 8015138:	429a      	cmp	r2, r3
 801513a:	f4ff af3d 	bcc.w	8014fb8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801513e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015140:	2b00      	cmp	r3, #0
 8015142:	d02c      	beq.n	801519e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8015144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015146:	685b      	ldr	r3, [r3, #4]
 8015148:	62fb      	str	r3, [r7, #44]	; 0x2c
 801514a:	e01e      	b.n	801518a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801514c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801514e:	891a      	ldrh	r2, [r3, #8]
 8015150:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015152:	4413      	add	r3, r2
 8015154:	b29a      	uxth	r2, r3
 8015156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015158:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801515a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	2b00      	cmp	r3, #0
 8015160:	d110      	bne.n	8015184 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8015162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015164:	685b      	ldr	r3, [r3, #4]
 8015166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015168:	8952      	ldrh	r2, [r2, #10]
 801516a:	4413      	add	r3, r2
 801516c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801516e:	68b9      	ldr	r1, [r7, #8]
 8015170:	4618      	mov	r0, r3
 8015172:	f004 fbee 	bl	8019952 <memcpy>
        p->len += oversize_used;
 8015176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015178:	895a      	ldrh	r2, [r3, #10]
 801517a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801517c:	4413      	add	r3, r2
 801517e:	b29a      	uxth	r2, r3
 8015180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015182:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8015184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	62fb      	str	r3, [r7, #44]	; 0x2c
 801518a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801518c:	2b00      	cmp	r3, #0
 801518e:	d1dd      	bne.n	801514c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8015190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015192:	891a      	ldrh	r2, [r3, #8]
 8015194:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015196:	4413      	add	r3, r2
 8015198:	b29a      	uxth	r2, r3
 801519a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801519c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801519e:	8a7a      	ldrh	r2, [r7, #18]
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80151a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d018      	beq.n	80151de <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80151ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d106      	bne.n	80151c0 <tcp_write+0x508>
 80151b2:	4b2a      	ldr	r3, [pc, #168]	; (801525c <tcp_write+0x5a4>)
 80151b4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80151b8:	492d      	ldr	r1, [pc, #180]	; (8015270 <tcp_write+0x5b8>)
 80151ba:	482a      	ldr	r0, [pc, #168]	; (8015264 <tcp_write+0x5ac>)
 80151bc:	f004 fc3a 	bl	8019a34 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80151c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151c2:	685b      	ldr	r3, [r3, #4]
 80151c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80151c6:	4618      	mov	r0, r3
 80151c8:	f7fb f8aa 	bl	8010320 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80151cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151ce:	891a      	ldrh	r2, [r3, #8]
 80151d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80151d2:	891b      	ldrh	r3, [r3, #8]
 80151d4:	4413      	add	r3, r2
 80151d6:	b29a      	uxth	r2, r3
 80151d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151da:	811a      	strh	r2, [r3, #8]
 80151dc:	e037      	b.n	801524e <tcp_write+0x596>
  } else if (extendlen > 0) {
 80151de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d034      	beq.n	801524e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80151e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d003      	beq.n	80151f2 <tcp_write+0x53a>
 80151ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151ec:	685b      	ldr	r3, [r3, #4]
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d106      	bne.n	8015200 <tcp_write+0x548>
 80151f2:	4b1a      	ldr	r3, [pc, #104]	; (801525c <tcp_write+0x5a4>)
 80151f4:	f240 22e6 	movw	r2, #742	; 0x2e6
 80151f8:	491e      	ldr	r1, [pc, #120]	; (8015274 <tcp_write+0x5bc>)
 80151fa:	481a      	ldr	r0, [pc, #104]	; (8015264 <tcp_write+0x5ac>)
 80151fc:	f004 fc1a 	bl	8019a34 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8015200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015202:	685b      	ldr	r3, [r3, #4]
 8015204:	62bb      	str	r3, [r7, #40]	; 0x28
 8015206:	e009      	b.n	801521c <tcp_write+0x564>
      p->tot_len += extendlen;
 8015208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801520a:	891a      	ldrh	r2, [r3, #8]
 801520c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801520e:	4413      	add	r3, r2
 8015210:	b29a      	uxth	r2, r3
 8015212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015214:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8015216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015218:	681b      	ldr	r3, [r3, #0]
 801521a:	62bb      	str	r3, [r7, #40]	; 0x28
 801521c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	2b00      	cmp	r3, #0
 8015222:	d1f1      	bne.n	8015208 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8015224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015226:	891a      	ldrh	r2, [r3, #8]
 8015228:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801522a:	4413      	add	r3, r2
 801522c:	b29a      	uxth	r2, r3
 801522e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015230:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8015232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015234:	895a      	ldrh	r2, [r3, #10]
 8015236:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015238:	4413      	add	r3, r2
 801523a:	b29a      	uxth	r2, r3
 801523c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801523e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8015240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015242:	891a      	ldrh	r2, [r3, #8]
 8015244:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015246:	4413      	add	r3, r2
 8015248:	b29a      	uxth	r2, r3
 801524a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801524c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801524e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015250:	2b00      	cmp	r3, #0
 8015252:	d111      	bne.n	8015278 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015258:	66da      	str	r2, [r3, #108]	; 0x6c
 801525a:	e010      	b.n	801527e <tcp_write+0x5c6>
 801525c:	0801c250 	.word	0x0801c250
 8015260:	0801c4f0 	.word	0x0801c4f0
 8015264:	0801c2a4 	.word	0x0801c2a4
 8015268:	0801c530 	.word	0x0801c530
 801526c:	0801c540 	.word	0x0801c540
 8015270:	0801c554 	.word	0x0801c554
 8015274:	0801c58c 	.word	0x0801c58c
  } else {
    last_unsent->next = queue;
 8015278:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801527a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801527c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8015282:	88fb      	ldrh	r3, [r7, #6]
 8015284:	441a      	add	r2, r3
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8015290:	88fb      	ldrh	r3, [r7, #6]
 8015292:	1ad3      	subs	r3, r2, r3
 8015294:	b29a      	uxth	r2, r3
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80152a2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d00e      	beq.n	80152ce <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d10a      	bne.n	80152ce <tcp_write+0x616>
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d106      	bne.n	80152ce <tcp_write+0x616>
 80152c0:	4b2c      	ldr	r3, [pc, #176]	; (8015374 <tcp_write+0x6bc>)
 80152c2:	f240 3212 	movw	r2, #786	; 0x312
 80152c6:	492c      	ldr	r1, [pc, #176]	; (8015378 <tcp_write+0x6c0>)
 80152c8:	482c      	ldr	r0, [pc, #176]	; (801537c <tcp_write+0x6c4>)
 80152ca:	f004 fbb3 	bl	8019a34 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80152ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d016      	beq.n	8015302 <tcp_write+0x64a>
 80152d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80152d6:	68db      	ldr	r3, [r3, #12]
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d012      	beq.n	8015302 <tcp_write+0x64a>
 80152dc:	797b      	ldrb	r3, [r7, #5]
 80152de:	f003 0302 	and.w	r3, r3, #2
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d10d      	bne.n	8015302 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80152e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80152e8:	68db      	ldr	r3, [r3, #12]
 80152ea:	899b      	ldrh	r3, [r3, #12]
 80152ec:	b29c      	uxth	r4, r3
 80152ee:	2008      	movs	r0, #8
 80152f0:	f7f9 fa9e 	bl	800e830 <lwip_htons>
 80152f4:	4603      	mov	r3, r0
 80152f6:	461a      	mov	r2, r3
 80152f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80152fa:	68db      	ldr	r3, [r3, #12]
 80152fc:	4322      	orrs	r2, r4
 80152fe:	b292      	uxth	r2, r2
 8015300:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8015302:	2300      	movs	r3, #0
 8015304:	e031      	b.n	801536a <tcp_write+0x6b2>
          goto memerr;
 8015306:	bf00      	nop
 8015308:	e006      	b.n	8015318 <tcp_write+0x660>
            goto memerr;
 801530a:	bf00      	nop
 801530c:	e004      	b.n	8015318 <tcp_write+0x660>
        goto memerr;
 801530e:	bf00      	nop
 8015310:	e002      	b.n	8015318 <tcp_write+0x660>
        goto memerr;
 8015312:	bf00      	nop
 8015314:	e000      	b.n	8015318 <tcp_write+0x660>
      goto memerr;
 8015316:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	8b5b      	ldrh	r3, [r3, #26]
 801531c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015320:	b29a      	uxth	r2, r3
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8015326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015328:	2b00      	cmp	r3, #0
 801532a:	d002      	beq.n	8015332 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801532c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801532e:	f7fa ff29 	bl	8010184 <pbuf_free>
  }
  if (queue != NULL) {
 8015332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015334:	2b00      	cmp	r3, #0
 8015336:	d002      	beq.n	801533e <tcp_write+0x686>
    tcp_segs_free(queue);
 8015338:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801533a:	f7fc fb57 	bl	80119ec <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015344:	2b00      	cmp	r3, #0
 8015346:	d00e      	beq.n	8015366 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801534c:	2b00      	cmp	r3, #0
 801534e:	d10a      	bne.n	8015366 <tcp_write+0x6ae>
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015354:	2b00      	cmp	r3, #0
 8015356:	d106      	bne.n	8015366 <tcp_write+0x6ae>
 8015358:	4b06      	ldr	r3, [pc, #24]	; (8015374 <tcp_write+0x6bc>)
 801535a:	f240 3227 	movw	r2, #807	; 0x327
 801535e:	4906      	ldr	r1, [pc, #24]	; (8015378 <tcp_write+0x6c0>)
 8015360:	4806      	ldr	r0, [pc, #24]	; (801537c <tcp_write+0x6c4>)
 8015362:	f004 fb67 	bl	8019a34 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8015366:	f04f 33ff 	mov.w	r3, #4294967295
}
 801536a:	4618      	mov	r0, r3
 801536c:	375c      	adds	r7, #92	; 0x5c
 801536e:	46bd      	mov	sp, r7
 8015370:	bd90      	pop	{r4, r7, pc}
 8015372:	bf00      	nop
 8015374:	0801c250 	.word	0x0801c250
 8015378:	0801c5c4 	.word	0x0801c5c4
 801537c:	0801c2a4 	.word	0x0801c2a4

08015380 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8015380:	b590      	push	{r4, r7, lr}
 8015382:	b08b      	sub	sp, #44	; 0x2c
 8015384:	af02      	add	r7, sp, #8
 8015386:	6078      	str	r0, [r7, #4]
 8015388:	460b      	mov	r3, r1
 801538a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801538c:	2300      	movs	r3, #0
 801538e:	61fb      	str	r3, [r7, #28]
 8015390:	2300      	movs	r3, #0
 8015392:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8015394:	2300      	movs	r3, #0
 8015396:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	2b00      	cmp	r3, #0
 801539c:	d106      	bne.n	80153ac <tcp_split_unsent_seg+0x2c>
 801539e:	4b95      	ldr	r3, [pc, #596]	; (80155f4 <tcp_split_unsent_seg+0x274>)
 80153a0:	f240 324b 	movw	r2, #843	; 0x34b
 80153a4:	4994      	ldr	r1, [pc, #592]	; (80155f8 <tcp_split_unsent_seg+0x278>)
 80153a6:	4895      	ldr	r0, [pc, #596]	; (80155fc <tcp_split_unsent_seg+0x27c>)
 80153a8:	f004 fb44 	bl	8019a34 <iprintf>

  useg = pcb->unsent;
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80153b0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80153b2:	697b      	ldr	r3, [r7, #20]
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d102      	bne.n	80153be <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80153b8:	f04f 33ff 	mov.w	r3, #4294967295
 80153bc:	e116      	b.n	80155ec <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80153be:	887b      	ldrh	r3, [r7, #2]
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d109      	bne.n	80153d8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80153c4:	4b8b      	ldr	r3, [pc, #556]	; (80155f4 <tcp_split_unsent_seg+0x274>)
 80153c6:	f240 3253 	movw	r2, #851	; 0x353
 80153ca:	498d      	ldr	r1, [pc, #564]	; (8015600 <tcp_split_unsent_seg+0x280>)
 80153cc:	488b      	ldr	r0, [pc, #556]	; (80155fc <tcp_split_unsent_seg+0x27c>)
 80153ce:	f004 fb31 	bl	8019a34 <iprintf>
    return ERR_VAL;
 80153d2:	f06f 0305 	mvn.w	r3, #5
 80153d6:	e109      	b.n	80155ec <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80153d8:	697b      	ldr	r3, [r7, #20]
 80153da:	891b      	ldrh	r3, [r3, #8]
 80153dc:	887a      	ldrh	r2, [r7, #2]
 80153de:	429a      	cmp	r2, r3
 80153e0:	d301      	bcc.n	80153e6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80153e2:	2300      	movs	r3, #0
 80153e4:	e102      	b.n	80155ec <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80153ea:	887a      	ldrh	r2, [r7, #2]
 80153ec:	429a      	cmp	r2, r3
 80153ee:	d906      	bls.n	80153fe <tcp_split_unsent_seg+0x7e>
 80153f0:	4b80      	ldr	r3, [pc, #512]	; (80155f4 <tcp_split_unsent_seg+0x274>)
 80153f2:	f240 325b 	movw	r2, #859	; 0x35b
 80153f6:	4983      	ldr	r1, [pc, #524]	; (8015604 <tcp_split_unsent_seg+0x284>)
 80153f8:	4880      	ldr	r0, [pc, #512]	; (80155fc <tcp_split_unsent_seg+0x27c>)
 80153fa:	f004 fb1b 	bl	8019a34 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80153fe:	697b      	ldr	r3, [r7, #20]
 8015400:	891b      	ldrh	r3, [r3, #8]
 8015402:	2b00      	cmp	r3, #0
 8015404:	d106      	bne.n	8015414 <tcp_split_unsent_seg+0x94>
 8015406:	4b7b      	ldr	r3, [pc, #492]	; (80155f4 <tcp_split_unsent_seg+0x274>)
 8015408:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801540c:	497e      	ldr	r1, [pc, #504]	; (8015608 <tcp_split_unsent_seg+0x288>)
 801540e:	487b      	ldr	r0, [pc, #492]	; (80155fc <tcp_split_unsent_seg+0x27c>)
 8015410:	f004 fb10 	bl	8019a34 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8015414:	697b      	ldr	r3, [r7, #20]
 8015416:	7a9b      	ldrb	r3, [r3, #10]
 8015418:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801541a:	7bfb      	ldrb	r3, [r7, #15]
 801541c:	009b      	lsls	r3, r3, #2
 801541e:	b2db      	uxtb	r3, r3
 8015420:	f003 0304 	and.w	r3, r3, #4
 8015424:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8015426:	697b      	ldr	r3, [r7, #20]
 8015428:	891a      	ldrh	r2, [r3, #8]
 801542a:	887b      	ldrh	r3, [r7, #2]
 801542c:	1ad3      	subs	r3, r2, r3
 801542e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8015430:	7bbb      	ldrb	r3, [r7, #14]
 8015432:	b29a      	uxth	r2, r3
 8015434:	89bb      	ldrh	r3, [r7, #12]
 8015436:	4413      	add	r3, r2
 8015438:	b29b      	uxth	r3, r3
 801543a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801543e:	4619      	mov	r1, r3
 8015440:	2036      	movs	r0, #54	; 0x36
 8015442:	f7fa fbbb 	bl	800fbbc <pbuf_alloc>
 8015446:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015448:	693b      	ldr	r3, [r7, #16]
 801544a:	2b00      	cmp	r3, #0
 801544c:	f000 80b7 	beq.w	80155be <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8015450:	697b      	ldr	r3, [r7, #20]
 8015452:	685b      	ldr	r3, [r3, #4]
 8015454:	891a      	ldrh	r2, [r3, #8]
 8015456:	697b      	ldr	r3, [r7, #20]
 8015458:	891b      	ldrh	r3, [r3, #8]
 801545a:	1ad3      	subs	r3, r2, r3
 801545c:	b29a      	uxth	r2, r3
 801545e:	887b      	ldrh	r3, [r7, #2]
 8015460:	4413      	add	r3, r2
 8015462:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8015464:	697b      	ldr	r3, [r7, #20]
 8015466:	6858      	ldr	r0, [r3, #4]
 8015468:	693b      	ldr	r3, [r7, #16]
 801546a:	685a      	ldr	r2, [r3, #4]
 801546c:	7bbb      	ldrb	r3, [r7, #14]
 801546e:	18d1      	adds	r1, r2, r3
 8015470:	897b      	ldrh	r3, [r7, #10]
 8015472:	89ba      	ldrh	r2, [r7, #12]
 8015474:	f7fb f88c 	bl	8010590 <pbuf_copy_partial>
 8015478:	4603      	mov	r3, r0
 801547a:	461a      	mov	r2, r3
 801547c:	89bb      	ldrh	r3, [r7, #12]
 801547e:	4293      	cmp	r3, r2
 8015480:	f040 809f 	bne.w	80155c2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8015484:	697b      	ldr	r3, [r7, #20]
 8015486:	68db      	ldr	r3, [r3, #12]
 8015488:	899b      	ldrh	r3, [r3, #12]
 801548a:	b29b      	uxth	r3, r3
 801548c:	4618      	mov	r0, r3
 801548e:	f7f9 f9cf 	bl	800e830 <lwip_htons>
 8015492:	4603      	mov	r3, r0
 8015494:	b2db      	uxtb	r3, r3
 8015496:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801549a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801549c:	2300      	movs	r3, #0
 801549e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80154a0:	7efb      	ldrb	r3, [r7, #27]
 80154a2:	f003 0308 	and.w	r3, r3, #8
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d007      	beq.n	80154ba <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80154aa:	7efb      	ldrb	r3, [r7, #27]
 80154ac:	f023 0308 	bic.w	r3, r3, #8
 80154b0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80154b2:	7ebb      	ldrb	r3, [r7, #26]
 80154b4:	f043 0308 	orr.w	r3, r3, #8
 80154b8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80154ba:	7efb      	ldrb	r3, [r7, #27]
 80154bc:	f003 0301 	and.w	r3, r3, #1
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d007      	beq.n	80154d4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80154c4:	7efb      	ldrb	r3, [r7, #27]
 80154c6:	f023 0301 	bic.w	r3, r3, #1
 80154ca:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80154cc:	7ebb      	ldrb	r3, [r7, #26]
 80154ce:	f043 0301 	orr.w	r3, r3, #1
 80154d2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80154d4:	697b      	ldr	r3, [r7, #20]
 80154d6:	68db      	ldr	r3, [r3, #12]
 80154d8:	685b      	ldr	r3, [r3, #4]
 80154da:	4618      	mov	r0, r3
 80154dc:	f7f9 f9bd 	bl	800e85a <lwip_htonl>
 80154e0:	4602      	mov	r2, r0
 80154e2:	887b      	ldrh	r3, [r7, #2]
 80154e4:	18d1      	adds	r1, r2, r3
 80154e6:	7eba      	ldrb	r2, [r7, #26]
 80154e8:	7bfb      	ldrb	r3, [r7, #15]
 80154ea:	9300      	str	r3, [sp, #0]
 80154ec:	460b      	mov	r3, r1
 80154ee:	6939      	ldr	r1, [r7, #16]
 80154f0:	6878      	ldr	r0, [r7, #4]
 80154f2:	f7ff fa4f 	bl	8014994 <tcp_create_segment>
 80154f6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80154f8:	69fb      	ldr	r3, [r7, #28]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d063      	beq.n	80155c6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80154fe:	697b      	ldr	r3, [r7, #20]
 8015500:	685b      	ldr	r3, [r3, #4]
 8015502:	4618      	mov	r0, r3
 8015504:	f7fa fecc 	bl	80102a0 <pbuf_clen>
 8015508:	4603      	mov	r3, r0
 801550a:	461a      	mov	r2, r3
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015512:	1a9b      	subs	r3, r3, r2
 8015514:	b29a      	uxth	r2, r3
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801551c:	697b      	ldr	r3, [r7, #20]
 801551e:	6858      	ldr	r0, [r3, #4]
 8015520:	697b      	ldr	r3, [r7, #20]
 8015522:	685b      	ldr	r3, [r3, #4]
 8015524:	891a      	ldrh	r2, [r3, #8]
 8015526:	89bb      	ldrh	r3, [r7, #12]
 8015528:	1ad3      	subs	r3, r2, r3
 801552a:	b29b      	uxth	r3, r3
 801552c:	4619      	mov	r1, r3
 801552e:	f7fa fca3 	bl	800fe78 <pbuf_realloc>
  useg->len -= remainder;
 8015532:	697b      	ldr	r3, [r7, #20]
 8015534:	891a      	ldrh	r2, [r3, #8]
 8015536:	89bb      	ldrh	r3, [r7, #12]
 8015538:	1ad3      	subs	r3, r2, r3
 801553a:	b29a      	uxth	r2, r3
 801553c:	697b      	ldr	r3, [r7, #20]
 801553e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8015540:	697b      	ldr	r3, [r7, #20]
 8015542:	68db      	ldr	r3, [r3, #12]
 8015544:	899b      	ldrh	r3, [r3, #12]
 8015546:	b29c      	uxth	r4, r3
 8015548:	7efb      	ldrb	r3, [r7, #27]
 801554a:	b29b      	uxth	r3, r3
 801554c:	4618      	mov	r0, r3
 801554e:	f7f9 f96f 	bl	800e830 <lwip_htons>
 8015552:	4603      	mov	r3, r0
 8015554:	461a      	mov	r2, r3
 8015556:	697b      	ldr	r3, [r7, #20]
 8015558:	68db      	ldr	r3, [r3, #12]
 801555a:	4322      	orrs	r2, r4
 801555c:	b292      	uxth	r2, r2
 801555e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8015560:	697b      	ldr	r3, [r7, #20]
 8015562:	685b      	ldr	r3, [r3, #4]
 8015564:	4618      	mov	r0, r3
 8015566:	f7fa fe9b 	bl	80102a0 <pbuf_clen>
 801556a:	4603      	mov	r3, r0
 801556c:	461a      	mov	r2, r3
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015574:	4413      	add	r3, r2
 8015576:	b29a      	uxth	r2, r3
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801557e:	69fb      	ldr	r3, [r7, #28]
 8015580:	685b      	ldr	r3, [r3, #4]
 8015582:	4618      	mov	r0, r3
 8015584:	f7fa fe8c 	bl	80102a0 <pbuf_clen>
 8015588:	4603      	mov	r3, r0
 801558a:	461a      	mov	r2, r3
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015592:	4413      	add	r3, r2
 8015594:	b29a      	uxth	r2, r3
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801559c:	697b      	ldr	r3, [r7, #20]
 801559e:	681a      	ldr	r2, [r3, #0]
 80155a0:	69fb      	ldr	r3, [r7, #28]
 80155a2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80155a4:	697b      	ldr	r3, [r7, #20]
 80155a6:	69fa      	ldr	r2, [r7, #28]
 80155a8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80155aa:	69fb      	ldr	r3, [r7, #28]
 80155ac:	681b      	ldr	r3, [r3, #0]
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d103      	bne.n	80155ba <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	2200      	movs	r2, #0
 80155b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80155ba:	2300      	movs	r3, #0
 80155bc:	e016      	b.n	80155ec <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80155be:	bf00      	nop
 80155c0:	e002      	b.n	80155c8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80155c2:	bf00      	nop
 80155c4:	e000      	b.n	80155c8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80155c6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80155c8:	69fb      	ldr	r3, [r7, #28]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d006      	beq.n	80155dc <tcp_split_unsent_seg+0x25c>
 80155ce:	4b09      	ldr	r3, [pc, #36]	; (80155f4 <tcp_split_unsent_seg+0x274>)
 80155d0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80155d4:	490d      	ldr	r1, [pc, #52]	; (801560c <tcp_split_unsent_seg+0x28c>)
 80155d6:	4809      	ldr	r0, [pc, #36]	; (80155fc <tcp_split_unsent_seg+0x27c>)
 80155d8:	f004 fa2c 	bl	8019a34 <iprintf>
  if (p != NULL) {
 80155dc:	693b      	ldr	r3, [r7, #16]
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d002      	beq.n	80155e8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80155e2:	6938      	ldr	r0, [r7, #16]
 80155e4:	f7fa fdce 	bl	8010184 <pbuf_free>
  }

  return ERR_MEM;
 80155e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80155ec:	4618      	mov	r0, r3
 80155ee:	3724      	adds	r7, #36	; 0x24
 80155f0:	46bd      	mov	sp, r7
 80155f2:	bd90      	pop	{r4, r7, pc}
 80155f4:	0801c250 	.word	0x0801c250
 80155f8:	0801c5e4 	.word	0x0801c5e4
 80155fc:	0801c2a4 	.word	0x0801c2a4
 8015600:	0801c608 	.word	0x0801c608
 8015604:	0801c62c 	.word	0x0801c62c
 8015608:	0801c63c 	.word	0x0801c63c
 801560c:	0801c64c 	.word	0x0801c64c

08015610 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8015610:	b590      	push	{r4, r7, lr}
 8015612:	b085      	sub	sp, #20
 8015614:	af00      	add	r7, sp, #0
 8015616:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	2b00      	cmp	r3, #0
 801561c:	d106      	bne.n	801562c <tcp_send_fin+0x1c>
 801561e:	4b21      	ldr	r3, [pc, #132]	; (80156a4 <tcp_send_fin+0x94>)
 8015620:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8015624:	4920      	ldr	r1, [pc, #128]	; (80156a8 <tcp_send_fin+0x98>)
 8015626:	4821      	ldr	r0, [pc, #132]	; (80156ac <tcp_send_fin+0x9c>)
 8015628:	f004 fa04 	bl	8019a34 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015630:	2b00      	cmp	r3, #0
 8015632:	d02e      	beq.n	8015692 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015638:	60fb      	str	r3, [r7, #12]
 801563a:	e002      	b.n	8015642 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	681b      	ldr	r3, [r3, #0]
 8015640:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015642:	68fb      	ldr	r3, [r7, #12]
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	2b00      	cmp	r3, #0
 8015648:	d1f8      	bne.n	801563c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	68db      	ldr	r3, [r3, #12]
 801564e:	899b      	ldrh	r3, [r3, #12]
 8015650:	b29b      	uxth	r3, r3
 8015652:	4618      	mov	r0, r3
 8015654:	f7f9 f8ec 	bl	800e830 <lwip_htons>
 8015658:	4603      	mov	r3, r0
 801565a:	b2db      	uxtb	r3, r3
 801565c:	f003 0307 	and.w	r3, r3, #7
 8015660:	2b00      	cmp	r3, #0
 8015662:	d116      	bne.n	8015692 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	68db      	ldr	r3, [r3, #12]
 8015668:	899b      	ldrh	r3, [r3, #12]
 801566a:	b29c      	uxth	r4, r3
 801566c:	2001      	movs	r0, #1
 801566e:	f7f9 f8df 	bl	800e830 <lwip_htons>
 8015672:	4603      	mov	r3, r0
 8015674:	461a      	mov	r2, r3
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	68db      	ldr	r3, [r3, #12]
 801567a:	4322      	orrs	r2, r4
 801567c:	b292      	uxth	r2, r2
 801567e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	8b5b      	ldrh	r3, [r3, #26]
 8015684:	f043 0320 	orr.w	r3, r3, #32
 8015688:	b29a      	uxth	r2, r3
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801568e:	2300      	movs	r3, #0
 8015690:	e004      	b.n	801569c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8015692:	2101      	movs	r1, #1
 8015694:	6878      	ldr	r0, [r7, #4]
 8015696:	f000 f80b 	bl	80156b0 <tcp_enqueue_flags>
 801569a:	4603      	mov	r3, r0
}
 801569c:	4618      	mov	r0, r3
 801569e:	3714      	adds	r7, #20
 80156a0:	46bd      	mov	sp, r7
 80156a2:	bd90      	pop	{r4, r7, pc}
 80156a4:	0801c250 	.word	0x0801c250
 80156a8:	0801c658 	.word	0x0801c658
 80156ac:	0801c2a4 	.word	0x0801c2a4

080156b0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80156b0:	b580      	push	{r7, lr}
 80156b2:	b08a      	sub	sp, #40	; 0x28
 80156b4:	af02      	add	r7, sp, #8
 80156b6:	6078      	str	r0, [r7, #4]
 80156b8:	460b      	mov	r3, r1
 80156ba:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80156bc:	2300      	movs	r3, #0
 80156be:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80156c0:	2300      	movs	r3, #0
 80156c2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80156c4:	78fb      	ldrb	r3, [r7, #3]
 80156c6:	f003 0303 	and.w	r3, r3, #3
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d106      	bne.n	80156dc <tcp_enqueue_flags+0x2c>
 80156ce:	4b67      	ldr	r3, [pc, #412]	; (801586c <tcp_enqueue_flags+0x1bc>)
 80156d0:	f240 4211 	movw	r2, #1041	; 0x411
 80156d4:	4966      	ldr	r1, [pc, #408]	; (8015870 <tcp_enqueue_flags+0x1c0>)
 80156d6:	4867      	ldr	r0, [pc, #412]	; (8015874 <tcp_enqueue_flags+0x1c4>)
 80156d8:	f004 f9ac 	bl	8019a34 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d106      	bne.n	80156f0 <tcp_enqueue_flags+0x40>
 80156e2:	4b62      	ldr	r3, [pc, #392]	; (801586c <tcp_enqueue_flags+0x1bc>)
 80156e4:	f240 4213 	movw	r2, #1043	; 0x413
 80156e8:	4963      	ldr	r1, [pc, #396]	; (8015878 <tcp_enqueue_flags+0x1c8>)
 80156ea:	4862      	ldr	r0, [pc, #392]	; (8015874 <tcp_enqueue_flags+0x1c4>)
 80156ec:	f004 f9a2 	bl	8019a34 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80156f0:	78fb      	ldrb	r3, [r7, #3]
 80156f2:	f003 0302 	and.w	r3, r3, #2
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d001      	beq.n	80156fe <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80156fa:	2301      	movs	r3, #1
 80156fc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80156fe:	7ffb      	ldrb	r3, [r7, #31]
 8015700:	009b      	lsls	r3, r3, #2
 8015702:	b2db      	uxtb	r3, r3
 8015704:	f003 0304 	and.w	r3, r3, #4
 8015708:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801570a:	7dfb      	ldrb	r3, [r7, #23]
 801570c:	b29b      	uxth	r3, r3
 801570e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015712:	4619      	mov	r1, r3
 8015714:	2036      	movs	r0, #54	; 0x36
 8015716:	f7fa fa51 	bl	800fbbc <pbuf_alloc>
 801571a:	6138      	str	r0, [r7, #16]
 801571c:	693b      	ldr	r3, [r7, #16]
 801571e:	2b00      	cmp	r3, #0
 8015720:	d109      	bne.n	8015736 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	8b5b      	ldrh	r3, [r3, #26]
 8015726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801572a:	b29a      	uxth	r2, r3
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015730:	f04f 33ff 	mov.w	r3, #4294967295
 8015734:	e095      	b.n	8015862 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8015736:	693b      	ldr	r3, [r7, #16]
 8015738:	895a      	ldrh	r2, [r3, #10]
 801573a:	7dfb      	ldrb	r3, [r7, #23]
 801573c:	b29b      	uxth	r3, r3
 801573e:	429a      	cmp	r2, r3
 8015740:	d206      	bcs.n	8015750 <tcp_enqueue_flags+0xa0>
 8015742:	4b4a      	ldr	r3, [pc, #296]	; (801586c <tcp_enqueue_flags+0x1bc>)
 8015744:	f240 4239 	movw	r2, #1081	; 0x439
 8015748:	494c      	ldr	r1, [pc, #304]	; (801587c <tcp_enqueue_flags+0x1cc>)
 801574a:	484a      	ldr	r0, [pc, #296]	; (8015874 <tcp_enqueue_flags+0x1c4>)
 801574c:	f004 f972 	bl	8019a34 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8015754:	78fa      	ldrb	r2, [r7, #3]
 8015756:	7ffb      	ldrb	r3, [r7, #31]
 8015758:	9300      	str	r3, [sp, #0]
 801575a:	460b      	mov	r3, r1
 801575c:	6939      	ldr	r1, [r7, #16]
 801575e:	6878      	ldr	r0, [r7, #4]
 8015760:	f7ff f918 	bl	8014994 <tcp_create_segment>
 8015764:	60f8      	str	r0, [r7, #12]
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	2b00      	cmp	r3, #0
 801576a:	d109      	bne.n	8015780 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	8b5b      	ldrh	r3, [r3, #26]
 8015770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015774:	b29a      	uxth	r2, r3
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801577a:	f04f 33ff 	mov.w	r3, #4294967295
 801577e:	e070      	b.n	8015862 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	68db      	ldr	r3, [r3, #12]
 8015784:	f003 0303 	and.w	r3, r3, #3
 8015788:	2b00      	cmp	r3, #0
 801578a:	d006      	beq.n	801579a <tcp_enqueue_flags+0xea>
 801578c:	4b37      	ldr	r3, [pc, #220]	; (801586c <tcp_enqueue_flags+0x1bc>)
 801578e:	f240 4242 	movw	r2, #1090	; 0x442
 8015792:	493b      	ldr	r1, [pc, #236]	; (8015880 <tcp_enqueue_flags+0x1d0>)
 8015794:	4837      	ldr	r0, [pc, #220]	; (8015874 <tcp_enqueue_flags+0x1c4>)
 8015796:	f004 f94d 	bl	8019a34 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	891b      	ldrh	r3, [r3, #8]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d006      	beq.n	80157b0 <tcp_enqueue_flags+0x100>
 80157a2:	4b32      	ldr	r3, [pc, #200]	; (801586c <tcp_enqueue_flags+0x1bc>)
 80157a4:	f240 4243 	movw	r2, #1091	; 0x443
 80157a8:	4936      	ldr	r1, [pc, #216]	; (8015884 <tcp_enqueue_flags+0x1d4>)
 80157aa:	4832      	ldr	r0, [pc, #200]	; (8015874 <tcp_enqueue_flags+0x1c4>)
 80157ac:	f004 f942 	bl	8019a34 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d103      	bne.n	80157c0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	68fa      	ldr	r2, [r7, #12]
 80157bc:	66da      	str	r2, [r3, #108]	; 0x6c
 80157be:	e00d      	b.n	80157dc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157c4:	61bb      	str	r3, [r7, #24]
 80157c6:	e002      	b.n	80157ce <tcp_enqueue_flags+0x11e>
 80157c8:	69bb      	ldr	r3, [r7, #24]
 80157ca:	681b      	ldr	r3, [r3, #0]
 80157cc:	61bb      	str	r3, [r7, #24]
 80157ce:	69bb      	ldr	r3, [r7, #24]
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d1f8      	bne.n	80157c8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80157d6:	69bb      	ldr	r3, [r7, #24]
 80157d8:	68fa      	ldr	r2, [r7, #12]
 80157da:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	2200      	movs	r2, #0
 80157e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80157e4:	78fb      	ldrb	r3, [r7, #3]
 80157e6:	f003 0302 	and.w	r3, r3, #2
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d104      	bne.n	80157f8 <tcp_enqueue_flags+0x148>
 80157ee:	78fb      	ldrb	r3, [r7, #3]
 80157f0:	f003 0301 	and.w	r3, r3, #1
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d004      	beq.n	8015802 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80157fc:	1c5a      	adds	r2, r3, #1
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8015802:	78fb      	ldrb	r3, [r7, #3]
 8015804:	f003 0301 	and.w	r3, r3, #1
 8015808:	2b00      	cmp	r3, #0
 801580a:	d006      	beq.n	801581a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	8b5b      	ldrh	r3, [r3, #26]
 8015810:	f043 0320 	orr.w	r3, r3, #32
 8015814:	b29a      	uxth	r2, r3
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	685b      	ldr	r3, [r3, #4]
 801581e:	4618      	mov	r0, r3
 8015820:	f7fa fd3e 	bl	80102a0 <pbuf_clen>
 8015824:	4603      	mov	r3, r0
 8015826:	461a      	mov	r2, r3
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801582e:	4413      	add	r3, r2
 8015830:	b29a      	uxth	r2, r3
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801583e:	2b00      	cmp	r3, #0
 8015840:	d00e      	beq.n	8015860 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015846:	2b00      	cmp	r3, #0
 8015848:	d10a      	bne.n	8015860 <tcp_enqueue_flags+0x1b0>
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801584e:	2b00      	cmp	r3, #0
 8015850:	d106      	bne.n	8015860 <tcp_enqueue_flags+0x1b0>
 8015852:	4b06      	ldr	r3, [pc, #24]	; (801586c <tcp_enqueue_flags+0x1bc>)
 8015854:	f240 4265 	movw	r2, #1125	; 0x465
 8015858:	490b      	ldr	r1, [pc, #44]	; (8015888 <tcp_enqueue_flags+0x1d8>)
 801585a:	4806      	ldr	r0, [pc, #24]	; (8015874 <tcp_enqueue_flags+0x1c4>)
 801585c:	f004 f8ea 	bl	8019a34 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8015860:	2300      	movs	r3, #0
}
 8015862:	4618      	mov	r0, r3
 8015864:	3720      	adds	r7, #32
 8015866:	46bd      	mov	sp, r7
 8015868:	bd80      	pop	{r7, pc}
 801586a:	bf00      	nop
 801586c:	0801c250 	.word	0x0801c250
 8015870:	0801c674 	.word	0x0801c674
 8015874:	0801c2a4 	.word	0x0801c2a4
 8015878:	0801c6cc 	.word	0x0801c6cc
 801587c:	0801c6ec 	.word	0x0801c6ec
 8015880:	0801c728 	.word	0x0801c728
 8015884:	0801c740 	.word	0x0801c740
 8015888:	0801c76c 	.word	0x0801c76c

0801588c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801588c:	b5b0      	push	{r4, r5, r7, lr}
 801588e:	b08a      	sub	sp, #40	; 0x28
 8015890:	af00      	add	r7, sp, #0
 8015892:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	2b00      	cmp	r3, #0
 8015898:	d106      	bne.n	80158a8 <tcp_output+0x1c>
 801589a:	4b9e      	ldr	r3, [pc, #632]	; (8015b14 <tcp_output+0x288>)
 801589c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80158a0:	499d      	ldr	r1, [pc, #628]	; (8015b18 <tcp_output+0x28c>)
 80158a2:	489e      	ldr	r0, [pc, #632]	; (8015b1c <tcp_output+0x290>)
 80158a4:	f004 f8c6 	bl	8019a34 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	7d1b      	ldrb	r3, [r3, #20]
 80158ac:	2b01      	cmp	r3, #1
 80158ae:	d106      	bne.n	80158be <tcp_output+0x32>
 80158b0:	4b98      	ldr	r3, [pc, #608]	; (8015b14 <tcp_output+0x288>)
 80158b2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80158b6:	499a      	ldr	r1, [pc, #616]	; (8015b20 <tcp_output+0x294>)
 80158b8:	4898      	ldr	r0, [pc, #608]	; (8015b1c <tcp_output+0x290>)
 80158ba:	f004 f8bb 	bl	8019a34 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80158be:	4b99      	ldr	r3, [pc, #612]	; (8015b24 <tcp_output+0x298>)
 80158c0:	681b      	ldr	r3, [r3, #0]
 80158c2:	687a      	ldr	r2, [r7, #4]
 80158c4:	429a      	cmp	r2, r3
 80158c6:	d101      	bne.n	80158cc <tcp_output+0x40>
    return ERR_OK;
 80158c8:	2300      	movs	r3, #0
 80158ca:	e1ce      	b.n	8015c6a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80158d8:	4293      	cmp	r3, r2
 80158da:	bf28      	it	cs
 80158dc:	4613      	movcs	r3, r2
 80158de:	b29b      	uxth	r3, r3
 80158e0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80158e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80158e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d10b      	bne.n	8015906 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	8b5b      	ldrh	r3, [r3, #26]
 80158f2:	f003 0302 	and.w	r3, r3, #2
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	f000 81aa 	beq.w	8015c50 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80158fc:	6878      	ldr	r0, [r7, #4]
 80158fe:	f000 fdcb 	bl	8016498 <tcp_send_empty_ack>
 8015902:	4603      	mov	r3, r0
 8015904:	e1b1      	b.n	8015c6a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8015906:	6879      	ldr	r1, [r7, #4]
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	3304      	adds	r3, #4
 801590c:	461a      	mov	r2, r3
 801590e:	6878      	ldr	r0, [r7, #4]
 8015910:	f7ff f824 	bl	801495c <tcp_route>
 8015914:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8015916:	697b      	ldr	r3, [r7, #20]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d102      	bne.n	8015922 <tcp_output+0x96>
    return ERR_RTE;
 801591c:	f06f 0303 	mvn.w	r3, #3
 8015920:	e1a3      	b.n	8015c6a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	2b00      	cmp	r3, #0
 8015926:	d003      	beq.n	8015930 <tcp_output+0xa4>
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	2b00      	cmp	r3, #0
 801592e:	d111      	bne.n	8015954 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8015930:	697b      	ldr	r3, [r7, #20]
 8015932:	2b00      	cmp	r3, #0
 8015934:	d002      	beq.n	801593c <tcp_output+0xb0>
 8015936:	697b      	ldr	r3, [r7, #20]
 8015938:	3304      	adds	r3, #4
 801593a:	e000      	b.n	801593e <tcp_output+0xb2>
 801593c:	2300      	movs	r3, #0
 801593e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8015940:	693b      	ldr	r3, [r7, #16]
 8015942:	2b00      	cmp	r3, #0
 8015944:	d102      	bne.n	801594c <tcp_output+0xc0>
      return ERR_RTE;
 8015946:	f06f 0303 	mvn.w	r3, #3
 801594a:	e18e      	b.n	8015c6a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801594c:	693b      	ldr	r3, [r7, #16]
 801594e:	681a      	ldr	r2, [r3, #0]
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8015954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015956:	68db      	ldr	r3, [r3, #12]
 8015958:	685b      	ldr	r3, [r3, #4]
 801595a:	4618      	mov	r0, r3
 801595c:	f7f8 ff7d 	bl	800e85a <lwip_htonl>
 8015960:	4602      	mov	r2, r0
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015966:	1ad3      	subs	r3, r2, r3
 8015968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801596a:	8912      	ldrh	r2, [r2, #8]
 801596c:	4413      	add	r3, r2
 801596e:	69ba      	ldr	r2, [r7, #24]
 8015970:	429a      	cmp	r2, r3
 8015972:	d227      	bcs.n	80159c4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801597a:	461a      	mov	r2, r3
 801597c:	69bb      	ldr	r3, [r7, #24]
 801597e:	4293      	cmp	r3, r2
 8015980:	d114      	bne.n	80159ac <tcp_output+0x120>
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015986:	2b00      	cmp	r3, #0
 8015988:	d110      	bne.n	80159ac <tcp_output+0x120>
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015990:	2b00      	cmp	r3, #0
 8015992:	d10b      	bne.n	80159ac <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	2200      	movs	r2, #0
 8015998:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	2201      	movs	r2, #1
 80159a0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	2200      	movs	r2, #0
 80159a8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	8b5b      	ldrh	r3, [r3, #26]
 80159b0:	f003 0302 	and.w	r3, r3, #2
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	f000 814d 	beq.w	8015c54 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80159ba:	6878      	ldr	r0, [r7, #4]
 80159bc:	f000 fd6c 	bl	8016498 <tcp_send_empty_ack>
 80159c0:	4603      	mov	r3, r0
 80159c2:	e152      	b.n	8015c6a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	2200      	movs	r2, #0
 80159c8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80159d0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80159d2:	6a3b      	ldr	r3, [r7, #32]
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	f000 811c 	beq.w	8015c12 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80159da:	e002      	b.n	80159e2 <tcp_output+0x156>
 80159dc:	6a3b      	ldr	r3, [r7, #32]
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	623b      	str	r3, [r7, #32]
 80159e2:	6a3b      	ldr	r3, [r7, #32]
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d1f8      	bne.n	80159dc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80159ea:	e112      	b.n	8015c12 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80159ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159ee:	68db      	ldr	r3, [r3, #12]
 80159f0:	899b      	ldrh	r3, [r3, #12]
 80159f2:	b29b      	uxth	r3, r3
 80159f4:	4618      	mov	r0, r3
 80159f6:	f7f8 ff1b 	bl	800e830 <lwip_htons>
 80159fa:	4603      	mov	r3, r0
 80159fc:	b2db      	uxtb	r3, r3
 80159fe:	f003 0304 	and.w	r3, r3, #4
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d006      	beq.n	8015a14 <tcp_output+0x188>
 8015a06:	4b43      	ldr	r3, [pc, #268]	; (8015b14 <tcp_output+0x288>)
 8015a08:	f240 5236 	movw	r2, #1334	; 0x536
 8015a0c:	4946      	ldr	r1, [pc, #280]	; (8015b28 <tcp_output+0x29c>)
 8015a0e:	4843      	ldr	r0, [pc, #268]	; (8015b1c <tcp_output+0x290>)
 8015a10:	f004 f810 	bl	8019a34 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d01f      	beq.n	8015a5c <tcp_output+0x1d0>
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	8b5b      	ldrh	r3, [r3, #26]
 8015a20:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d119      	bne.n	8015a5c <tcp_output+0x1d0>
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d00b      	beq.n	8015a48 <tcp_output+0x1bc>
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d110      	bne.n	8015a5c <tcp_output+0x1d0>
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a3e:	891a      	ldrh	r2, [r3, #8]
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015a44:	429a      	cmp	r2, r3
 8015a46:	d209      	bcs.n	8015a5c <tcp_output+0x1d0>
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d004      	beq.n	8015a5c <tcp_output+0x1d0>
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015a58:	2b08      	cmp	r3, #8
 8015a5a:	d901      	bls.n	8015a60 <tcp_output+0x1d4>
 8015a5c:	2301      	movs	r3, #1
 8015a5e:	e000      	b.n	8015a62 <tcp_output+0x1d6>
 8015a60:	2300      	movs	r3, #0
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d106      	bne.n	8015a74 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	8b5b      	ldrh	r3, [r3, #26]
 8015a6a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	f000 80e4 	beq.w	8015c3c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	7d1b      	ldrb	r3, [r3, #20]
 8015a78:	2b02      	cmp	r3, #2
 8015a7a:	d00d      	beq.n	8015a98 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8015a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a7e:	68db      	ldr	r3, [r3, #12]
 8015a80:	899b      	ldrh	r3, [r3, #12]
 8015a82:	b29c      	uxth	r4, r3
 8015a84:	2010      	movs	r0, #16
 8015a86:	f7f8 fed3 	bl	800e830 <lwip_htons>
 8015a8a:	4603      	mov	r3, r0
 8015a8c:	461a      	mov	r2, r3
 8015a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a90:	68db      	ldr	r3, [r3, #12]
 8015a92:	4322      	orrs	r2, r4
 8015a94:	b292      	uxth	r2, r2
 8015a96:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8015a98:	697a      	ldr	r2, [r7, #20]
 8015a9a:	6879      	ldr	r1, [r7, #4]
 8015a9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015a9e:	f000 f909 	bl	8015cb4 <tcp_output_segment>
 8015aa2:	4603      	mov	r3, r0
 8015aa4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8015aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d009      	beq.n	8015ac2 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	8b5b      	ldrh	r3, [r3, #26]
 8015ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015ab6:	b29a      	uxth	r2, r3
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	835a      	strh	r2, [r3, #26]
      return err;
 8015abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015ac0:	e0d3      	b.n	8015c6a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8015ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ac4:	681a      	ldr	r2, [r3, #0]
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	7d1b      	ldrb	r3, [r3, #20]
 8015ace:	2b02      	cmp	r3, #2
 8015ad0:	d006      	beq.n	8015ae0 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	8b5b      	ldrh	r3, [r3, #26]
 8015ad6:	f023 0303 	bic.w	r3, r3, #3
 8015ada:	b29a      	uxth	r2, r3
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ae2:	68db      	ldr	r3, [r3, #12]
 8015ae4:	685b      	ldr	r3, [r3, #4]
 8015ae6:	4618      	mov	r0, r3
 8015ae8:	f7f8 feb7 	bl	800e85a <lwip_htonl>
 8015aec:	4604      	mov	r4, r0
 8015aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015af0:	891b      	ldrh	r3, [r3, #8]
 8015af2:	461d      	mov	r5, r3
 8015af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015af6:	68db      	ldr	r3, [r3, #12]
 8015af8:	899b      	ldrh	r3, [r3, #12]
 8015afa:	b29b      	uxth	r3, r3
 8015afc:	4618      	mov	r0, r3
 8015afe:	f7f8 fe97 	bl	800e830 <lwip_htons>
 8015b02:	4603      	mov	r3, r0
 8015b04:	b2db      	uxtb	r3, r3
 8015b06:	f003 0303 	and.w	r3, r3, #3
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d00e      	beq.n	8015b2c <tcp_output+0x2a0>
 8015b0e:	2301      	movs	r3, #1
 8015b10:	e00d      	b.n	8015b2e <tcp_output+0x2a2>
 8015b12:	bf00      	nop
 8015b14:	0801c250 	.word	0x0801c250
 8015b18:	0801c794 	.word	0x0801c794
 8015b1c:	0801c2a4 	.word	0x0801c2a4
 8015b20:	0801c7ac 	.word	0x0801c7ac
 8015b24:	24007878 	.word	0x24007878
 8015b28:	0801c7d4 	.word	0x0801c7d4
 8015b2c:	2300      	movs	r3, #0
 8015b2e:	442b      	add	r3, r5
 8015b30:	4423      	add	r3, r4
 8015b32:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015b38:	68bb      	ldr	r3, [r7, #8]
 8015b3a:	1ad3      	subs	r3, r2, r3
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	da02      	bge.n	8015b46 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	68ba      	ldr	r2, [r7, #8]
 8015b44:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b48:	891b      	ldrh	r3, [r3, #8]
 8015b4a:	461c      	mov	r4, r3
 8015b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b4e:	68db      	ldr	r3, [r3, #12]
 8015b50:	899b      	ldrh	r3, [r3, #12]
 8015b52:	b29b      	uxth	r3, r3
 8015b54:	4618      	mov	r0, r3
 8015b56:	f7f8 fe6b 	bl	800e830 <lwip_htons>
 8015b5a:	4603      	mov	r3, r0
 8015b5c:	b2db      	uxtb	r3, r3
 8015b5e:	f003 0303 	and.w	r3, r3, #3
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d001      	beq.n	8015b6a <tcp_output+0x2de>
 8015b66:	2301      	movs	r3, #1
 8015b68:	e000      	b.n	8015b6c <tcp_output+0x2e0>
 8015b6a:	2300      	movs	r3, #0
 8015b6c:	4423      	add	r3, r4
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d049      	beq.n	8015c06 <tcp_output+0x37a>
      seg->next = NULL;
 8015b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b74:	2200      	movs	r2, #0
 8015b76:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d105      	bne.n	8015b8c <tcp_output+0x300>
        pcb->unacked = seg;
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b84:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8015b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b88:	623b      	str	r3, [r7, #32]
 8015b8a:	e03f      	b.n	8015c0c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8015b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b8e:	68db      	ldr	r3, [r3, #12]
 8015b90:	685b      	ldr	r3, [r3, #4]
 8015b92:	4618      	mov	r0, r3
 8015b94:	f7f8 fe61 	bl	800e85a <lwip_htonl>
 8015b98:	4604      	mov	r4, r0
 8015b9a:	6a3b      	ldr	r3, [r7, #32]
 8015b9c:	68db      	ldr	r3, [r3, #12]
 8015b9e:	685b      	ldr	r3, [r3, #4]
 8015ba0:	4618      	mov	r0, r3
 8015ba2:	f7f8 fe5a 	bl	800e85a <lwip_htonl>
 8015ba6:	4603      	mov	r3, r0
 8015ba8:	1ae3      	subs	r3, r4, r3
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	da24      	bge.n	8015bf8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	3370      	adds	r3, #112	; 0x70
 8015bb2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015bb4:	e002      	b.n	8015bbc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8015bb6:	69fb      	ldr	r3, [r7, #28]
 8015bb8:	681b      	ldr	r3, [r3, #0]
 8015bba:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015bbc:	69fb      	ldr	r3, [r7, #28]
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d011      	beq.n	8015be8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015bc4:	69fb      	ldr	r3, [r7, #28]
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	68db      	ldr	r3, [r3, #12]
 8015bca:	685b      	ldr	r3, [r3, #4]
 8015bcc:	4618      	mov	r0, r3
 8015bce:	f7f8 fe44 	bl	800e85a <lwip_htonl>
 8015bd2:	4604      	mov	r4, r0
 8015bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bd6:	68db      	ldr	r3, [r3, #12]
 8015bd8:	685b      	ldr	r3, [r3, #4]
 8015bda:	4618      	mov	r0, r3
 8015bdc:	f7f8 fe3d 	bl	800e85a <lwip_htonl>
 8015be0:	4603      	mov	r3, r0
 8015be2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	dbe6      	blt.n	8015bb6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8015be8:	69fb      	ldr	r3, [r7, #28]
 8015bea:	681a      	ldr	r2, [r3, #0]
 8015bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bee:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8015bf0:	69fb      	ldr	r3, [r7, #28]
 8015bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015bf4:	601a      	str	r2, [r3, #0]
 8015bf6:	e009      	b.n	8015c0c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015bf8:	6a3b      	ldr	r3, [r7, #32]
 8015bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015bfc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8015bfe:	6a3b      	ldr	r3, [r7, #32]
 8015c00:	681b      	ldr	r3, [r3, #0]
 8015c02:	623b      	str	r3, [r7, #32]
 8015c04:	e002      	b.n	8015c0c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8015c06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015c08:	f7fb ff05 	bl	8011a16 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c10:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8015c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d012      	beq.n	8015c3e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c1a:	68db      	ldr	r3, [r3, #12]
 8015c1c:	685b      	ldr	r3, [r3, #4]
 8015c1e:	4618      	mov	r0, r3
 8015c20:	f7f8 fe1b 	bl	800e85a <lwip_htonl>
 8015c24:	4602      	mov	r2, r0
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015c2a:	1ad3      	subs	r3, r2, r3
 8015c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c2e:	8912      	ldrh	r2, [r2, #8]
 8015c30:	4413      	add	r3, r2
  while (seg != NULL &&
 8015c32:	69ba      	ldr	r2, [r7, #24]
 8015c34:	429a      	cmp	r2, r3
 8015c36:	f4bf aed9 	bcs.w	80159ec <tcp_output+0x160>
 8015c3a:	e000      	b.n	8015c3e <tcp_output+0x3b2>
      break;
 8015c3c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d108      	bne.n	8015c58 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	2200      	movs	r2, #0
 8015c4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8015c4e:	e004      	b.n	8015c5a <tcp_output+0x3ce>
    goto output_done;
 8015c50:	bf00      	nop
 8015c52:	e002      	b.n	8015c5a <tcp_output+0x3ce>
    goto output_done;
 8015c54:	bf00      	nop
 8015c56:	e000      	b.n	8015c5a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8015c58:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	8b5b      	ldrh	r3, [r3, #26]
 8015c5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015c62:	b29a      	uxth	r2, r3
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8015c68:	2300      	movs	r3, #0
}
 8015c6a:	4618      	mov	r0, r3
 8015c6c:	3728      	adds	r7, #40	; 0x28
 8015c6e:	46bd      	mov	sp, r7
 8015c70:	bdb0      	pop	{r4, r5, r7, pc}
 8015c72:	bf00      	nop

08015c74 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8015c74:	b580      	push	{r7, lr}
 8015c76:	b082      	sub	sp, #8
 8015c78:	af00      	add	r7, sp, #0
 8015c7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d106      	bne.n	8015c90 <tcp_output_segment_busy+0x1c>
 8015c82:	4b09      	ldr	r3, [pc, #36]	; (8015ca8 <tcp_output_segment_busy+0x34>)
 8015c84:	f240 529a 	movw	r2, #1434	; 0x59a
 8015c88:	4908      	ldr	r1, [pc, #32]	; (8015cac <tcp_output_segment_busy+0x38>)
 8015c8a:	4809      	ldr	r0, [pc, #36]	; (8015cb0 <tcp_output_segment_busy+0x3c>)
 8015c8c:	f003 fed2 	bl	8019a34 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	685b      	ldr	r3, [r3, #4]
 8015c94:	7b9b      	ldrb	r3, [r3, #14]
 8015c96:	2b01      	cmp	r3, #1
 8015c98:	d001      	beq.n	8015c9e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8015c9a:	2301      	movs	r3, #1
 8015c9c:	e000      	b.n	8015ca0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8015c9e:	2300      	movs	r3, #0
}
 8015ca0:	4618      	mov	r0, r3
 8015ca2:	3708      	adds	r7, #8
 8015ca4:	46bd      	mov	sp, r7
 8015ca6:	bd80      	pop	{r7, pc}
 8015ca8:	0801c250 	.word	0x0801c250
 8015cac:	0801c7ec 	.word	0x0801c7ec
 8015cb0:	0801c2a4 	.word	0x0801c2a4

08015cb4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015cb4:	b5b0      	push	{r4, r5, r7, lr}
 8015cb6:	b08c      	sub	sp, #48	; 0x30
 8015cb8:	af04      	add	r7, sp, #16
 8015cba:	60f8      	str	r0, [r7, #12]
 8015cbc:	60b9      	str	r1, [r7, #8]
 8015cbe:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d106      	bne.n	8015cd4 <tcp_output_segment+0x20>
 8015cc6:	4b63      	ldr	r3, [pc, #396]	; (8015e54 <tcp_output_segment+0x1a0>)
 8015cc8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8015ccc:	4962      	ldr	r1, [pc, #392]	; (8015e58 <tcp_output_segment+0x1a4>)
 8015cce:	4863      	ldr	r0, [pc, #396]	; (8015e5c <tcp_output_segment+0x1a8>)
 8015cd0:	f003 feb0 	bl	8019a34 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8015cd4:	68bb      	ldr	r3, [r7, #8]
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d106      	bne.n	8015ce8 <tcp_output_segment+0x34>
 8015cda:	4b5e      	ldr	r3, [pc, #376]	; (8015e54 <tcp_output_segment+0x1a0>)
 8015cdc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8015ce0:	495f      	ldr	r1, [pc, #380]	; (8015e60 <tcp_output_segment+0x1ac>)
 8015ce2:	485e      	ldr	r0, [pc, #376]	; (8015e5c <tcp_output_segment+0x1a8>)
 8015ce4:	f003 fea6 	bl	8019a34 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d106      	bne.n	8015cfc <tcp_output_segment+0x48>
 8015cee:	4b59      	ldr	r3, [pc, #356]	; (8015e54 <tcp_output_segment+0x1a0>)
 8015cf0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8015cf4:	495b      	ldr	r1, [pc, #364]	; (8015e64 <tcp_output_segment+0x1b0>)
 8015cf6:	4859      	ldr	r0, [pc, #356]	; (8015e5c <tcp_output_segment+0x1a8>)
 8015cf8:	f003 fe9c 	bl	8019a34 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8015cfc:	68f8      	ldr	r0, [r7, #12]
 8015cfe:	f7ff ffb9 	bl	8015c74 <tcp_output_segment_busy>
 8015d02:	4603      	mov	r3, r0
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d001      	beq.n	8015d0c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015d08:	2300      	movs	r3, #0
 8015d0a:	e09f      	b.n	8015e4c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015d0c:	68bb      	ldr	r3, [r7, #8]
 8015d0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015d10:	68fb      	ldr	r3, [r7, #12]
 8015d12:	68dc      	ldr	r4, [r3, #12]
 8015d14:	4610      	mov	r0, r2
 8015d16:	f7f8 fda0 	bl	800e85a <lwip_htonl>
 8015d1a:	4603      	mov	r3, r0
 8015d1c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8015d1e:	68bb      	ldr	r3, [r7, #8]
 8015d20:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	68dc      	ldr	r4, [r3, #12]
 8015d26:	4610      	mov	r0, r2
 8015d28:	f7f8 fd82 	bl	800e830 <lwip_htons>
 8015d2c:	4603      	mov	r3, r0
 8015d2e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015d30:	68bb      	ldr	r3, [r7, #8]
 8015d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d34:	68ba      	ldr	r2, [r7, #8]
 8015d36:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015d38:	441a      	add	r2, r3
 8015d3a:	68bb      	ldr	r3, [r7, #8]
 8015d3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	68db      	ldr	r3, [r3, #12]
 8015d42:	3314      	adds	r3, #20
 8015d44:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015d46:	68fb      	ldr	r3, [r7, #12]
 8015d48:	7a9b      	ldrb	r3, [r3, #10]
 8015d4a:	f003 0301 	and.w	r3, r3, #1
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d015      	beq.n	8015d7e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8015d52:	68bb      	ldr	r3, [r7, #8]
 8015d54:	3304      	adds	r3, #4
 8015d56:	461a      	mov	r2, r3
 8015d58:	6879      	ldr	r1, [r7, #4]
 8015d5a:	f44f 7006 	mov.w	r0, #536	; 0x218
 8015d5e:	f7fc fa37 	bl	80121d0 <tcp_eff_send_mss_netif>
 8015d62:	4603      	mov	r3, r0
 8015d64:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8015d66:	8b7b      	ldrh	r3, [r7, #26]
 8015d68:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8015d6c:	4618      	mov	r0, r3
 8015d6e:	f7f8 fd74 	bl	800e85a <lwip_htonl>
 8015d72:	4602      	mov	r2, r0
 8015d74:	69fb      	ldr	r3, [r7, #28]
 8015d76:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015d78:	69fb      	ldr	r3, [r7, #28]
 8015d7a:	3304      	adds	r3, #4
 8015d7c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8015d7e:	68bb      	ldr	r3, [r7, #8]
 8015d80:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	da02      	bge.n	8015d8e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8015d88:	68bb      	ldr	r3, [r7, #8]
 8015d8a:	2200      	movs	r2, #0
 8015d8c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8015d8e:	68bb      	ldr	r3, [r7, #8]
 8015d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d10c      	bne.n	8015db0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8015d96:	4b34      	ldr	r3, [pc, #208]	; (8015e68 <tcp_output_segment+0x1b4>)
 8015d98:	681a      	ldr	r2, [r3, #0]
 8015d9a:	68bb      	ldr	r3, [r7, #8]
 8015d9c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	68db      	ldr	r3, [r3, #12]
 8015da2:	685b      	ldr	r3, [r3, #4]
 8015da4:	4618      	mov	r0, r3
 8015da6:	f7f8 fd58 	bl	800e85a <lwip_htonl>
 8015daa:	4602      	mov	r2, r0
 8015dac:	68bb      	ldr	r3, [r7, #8]
 8015dae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015db0:	68fb      	ldr	r3, [r7, #12]
 8015db2:	68da      	ldr	r2, [r3, #12]
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	685b      	ldr	r3, [r3, #4]
 8015db8:	685b      	ldr	r3, [r3, #4]
 8015dba:	1ad3      	subs	r3, r2, r3
 8015dbc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	685b      	ldr	r3, [r3, #4]
 8015dc2:	8959      	ldrh	r1, [r3, #10]
 8015dc4:	68fb      	ldr	r3, [r7, #12]
 8015dc6:	685b      	ldr	r3, [r3, #4]
 8015dc8:	8b3a      	ldrh	r2, [r7, #24]
 8015dca:	1a8a      	subs	r2, r1, r2
 8015dcc:	b292      	uxth	r2, r2
 8015dce:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	685b      	ldr	r3, [r3, #4]
 8015dd4:	8919      	ldrh	r1, [r3, #8]
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	685b      	ldr	r3, [r3, #4]
 8015dda:	8b3a      	ldrh	r2, [r7, #24]
 8015ddc:	1a8a      	subs	r2, r1, r2
 8015dde:	b292      	uxth	r2, r2
 8015de0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	685b      	ldr	r3, [r3, #4]
 8015de6:	68fa      	ldr	r2, [r7, #12]
 8015de8:	68d2      	ldr	r2, [r2, #12]
 8015dea:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	68db      	ldr	r3, [r3, #12]
 8015df0:	2200      	movs	r2, #0
 8015df2:	741a      	strb	r2, [r3, #16]
 8015df4:	2200      	movs	r2, #0
 8015df6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	68db      	ldr	r3, [r3, #12]
 8015dfc:	f103 0214 	add.w	r2, r3, #20
 8015e00:	68fb      	ldr	r3, [r7, #12]
 8015e02:	7a9b      	ldrb	r3, [r3, #10]
 8015e04:	009b      	lsls	r3, r3, #2
 8015e06:	f003 0304 	and.w	r3, r3, #4
 8015e0a:	4413      	add	r3, r2
 8015e0c:	69fa      	ldr	r2, [r7, #28]
 8015e0e:	429a      	cmp	r2, r3
 8015e10:	d006      	beq.n	8015e20 <tcp_output_segment+0x16c>
 8015e12:	4b10      	ldr	r3, [pc, #64]	; (8015e54 <tcp_output_segment+0x1a0>)
 8015e14:	f240 621c 	movw	r2, #1564	; 0x61c
 8015e18:	4914      	ldr	r1, [pc, #80]	; (8015e6c <tcp_output_segment+0x1b8>)
 8015e1a:	4810      	ldr	r0, [pc, #64]	; (8015e5c <tcp_output_segment+0x1a8>)
 8015e1c:	f003 fe0a 	bl	8019a34 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015e20:	68fb      	ldr	r3, [r7, #12]
 8015e22:	6858      	ldr	r0, [r3, #4]
 8015e24:	68b9      	ldr	r1, [r7, #8]
 8015e26:	68bb      	ldr	r3, [r7, #8]
 8015e28:	1d1c      	adds	r4, r3, #4
 8015e2a:	68bb      	ldr	r3, [r7, #8]
 8015e2c:	7add      	ldrb	r5, [r3, #11]
 8015e2e:	68bb      	ldr	r3, [r7, #8]
 8015e30:	7a9b      	ldrb	r3, [r3, #10]
 8015e32:	687a      	ldr	r2, [r7, #4]
 8015e34:	9202      	str	r2, [sp, #8]
 8015e36:	2206      	movs	r2, #6
 8015e38:	9201      	str	r2, [sp, #4]
 8015e3a:	9300      	str	r3, [sp, #0]
 8015e3c:	462b      	mov	r3, r5
 8015e3e:	4622      	mov	r2, r4
 8015e40:	f002 fa8c 	bl	801835c <ip4_output_if>
 8015e44:	4603      	mov	r3, r0
 8015e46:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8015e48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015e4c:	4618      	mov	r0, r3
 8015e4e:	3720      	adds	r7, #32
 8015e50:	46bd      	mov	sp, r7
 8015e52:	bdb0      	pop	{r4, r5, r7, pc}
 8015e54:	0801c250 	.word	0x0801c250
 8015e58:	0801c814 	.word	0x0801c814
 8015e5c:	0801c2a4 	.word	0x0801c2a4
 8015e60:	0801c834 	.word	0x0801c834
 8015e64:	0801c854 	.word	0x0801c854
 8015e68:	24007868 	.word	0x24007868
 8015e6c:	0801c878 	.word	0x0801c878

08015e70 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8015e70:	b5b0      	push	{r4, r5, r7, lr}
 8015e72:	b084      	sub	sp, #16
 8015e74:	af00      	add	r7, sp, #0
 8015e76:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d106      	bne.n	8015e8c <tcp_rexmit_rto_prepare+0x1c>
 8015e7e:	4b31      	ldr	r3, [pc, #196]	; (8015f44 <tcp_rexmit_rto_prepare+0xd4>)
 8015e80:	f240 6263 	movw	r2, #1635	; 0x663
 8015e84:	4930      	ldr	r1, [pc, #192]	; (8015f48 <tcp_rexmit_rto_prepare+0xd8>)
 8015e86:	4831      	ldr	r0, [pc, #196]	; (8015f4c <tcp_rexmit_rto_prepare+0xdc>)
 8015e88:	f003 fdd4 	bl	8019a34 <iprintf>

  if (pcb->unacked == NULL) {
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d102      	bne.n	8015e9a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8015e94:	f06f 0305 	mvn.w	r3, #5
 8015e98:	e050      	b.n	8015f3c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015e9e:	60fb      	str	r3, [r7, #12]
 8015ea0:	e00b      	b.n	8015eba <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8015ea2:	68f8      	ldr	r0, [r7, #12]
 8015ea4:	f7ff fee6 	bl	8015c74 <tcp_output_segment_busy>
 8015ea8:	4603      	mov	r3, r0
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d002      	beq.n	8015eb4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8015eae:	f06f 0305 	mvn.w	r3, #5
 8015eb2:	e043      	b.n	8015f3c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	60fb      	str	r3, [r7, #12]
 8015eba:	68fb      	ldr	r3, [r7, #12]
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d1ef      	bne.n	8015ea2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8015ec2:	68f8      	ldr	r0, [r7, #12]
 8015ec4:	f7ff fed6 	bl	8015c74 <tcp_output_segment_busy>
 8015ec8:	4603      	mov	r3, r0
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d002      	beq.n	8015ed4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8015ece:	f06f 0305 	mvn.w	r3, #5
 8015ed2:	e033      	b.n	8015f3c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	2200      	movs	r2, #0
 8015ee8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	8b5b      	ldrh	r3, [r3, #26]
 8015eee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015ef2:	b29a      	uxth	r2, r3
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	68db      	ldr	r3, [r3, #12]
 8015efc:	685b      	ldr	r3, [r3, #4]
 8015efe:	4618      	mov	r0, r3
 8015f00:	f7f8 fcab 	bl	800e85a <lwip_htonl>
 8015f04:	4604      	mov	r4, r0
 8015f06:	68fb      	ldr	r3, [r7, #12]
 8015f08:	891b      	ldrh	r3, [r3, #8]
 8015f0a:	461d      	mov	r5, r3
 8015f0c:	68fb      	ldr	r3, [r7, #12]
 8015f0e:	68db      	ldr	r3, [r3, #12]
 8015f10:	899b      	ldrh	r3, [r3, #12]
 8015f12:	b29b      	uxth	r3, r3
 8015f14:	4618      	mov	r0, r3
 8015f16:	f7f8 fc8b 	bl	800e830 <lwip_htons>
 8015f1a:	4603      	mov	r3, r0
 8015f1c:	b2db      	uxtb	r3, r3
 8015f1e:	f003 0303 	and.w	r3, r3, #3
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d001      	beq.n	8015f2a <tcp_rexmit_rto_prepare+0xba>
 8015f26:	2301      	movs	r3, #1
 8015f28:	e000      	b.n	8015f2c <tcp_rexmit_rto_prepare+0xbc>
 8015f2a:	2300      	movs	r3, #0
 8015f2c:	442b      	add	r3, r5
 8015f2e:	18e2      	adds	r2, r4, r3
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	2200      	movs	r2, #0
 8015f38:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8015f3a:	2300      	movs	r3, #0
}
 8015f3c:	4618      	mov	r0, r3
 8015f3e:	3710      	adds	r7, #16
 8015f40:	46bd      	mov	sp, r7
 8015f42:	bdb0      	pop	{r4, r5, r7, pc}
 8015f44:	0801c250 	.word	0x0801c250
 8015f48:	0801c88c 	.word	0x0801c88c
 8015f4c:	0801c2a4 	.word	0x0801c2a4

08015f50 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8015f50:	b580      	push	{r7, lr}
 8015f52:	b082      	sub	sp, #8
 8015f54:	af00      	add	r7, sp, #0
 8015f56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d106      	bne.n	8015f6c <tcp_rexmit_rto_commit+0x1c>
 8015f5e:	4b0d      	ldr	r3, [pc, #52]	; (8015f94 <tcp_rexmit_rto_commit+0x44>)
 8015f60:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8015f64:	490c      	ldr	r1, [pc, #48]	; (8015f98 <tcp_rexmit_rto_commit+0x48>)
 8015f66:	480d      	ldr	r0, [pc, #52]	; (8015f9c <tcp_rexmit_rto_commit+0x4c>)
 8015f68:	f003 fd64 	bl	8019a34 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015f72:	2bff      	cmp	r3, #255	; 0xff
 8015f74:	d007      	beq.n	8015f86 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015f7c:	3301      	adds	r3, #1
 8015f7e:	b2da      	uxtb	r2, r3
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8015f86:	6878      	ldr	r0, [r7, #4]
 8015f88:	f7ff fc80 	bl	801588c <tcp_output>
}
 8015f8c:	bf00      	nop
 8015f8e:	3708      	adds	r7, #8
 8015f90:	46bd      	mov	sp, r7
 8015f92:	bd80      	pop	{r7, pc}
 8015f94:	0801c250 	.word	0x0801c250
 8015f98:	0801c8b0 	.word	0x0801c8b0
 8015f9c:	0801c2a4 	.word	0x0801c2a4

08015fa0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015fa0:	b580      	push	{r7, lr}
 8015fa2:	b082      	sub	sp, #8
 8015fa4:	af00      	add	r7, sp, #0
 8015fa6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d106      	bne.n	8015fbc <tcp_rexmit_rto+0x1c>
 8015fae:	4b0a      	ldr	r3, [pc, #40]	; (8015fd8 <tcp_rexmit_rto+0x38>)
 8015fb0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8015fb4:	4909      	ldr	r1, [pc, #36]	; (8015fdc <tcp_rexmit_rto+0x3c>)
 8015fb6:	480a      	ldr	r0, [pc, #40]	; (8015fe0 <tcp_rexmit_rto+0x40>)
 8015fb8:	f003 fd3c 	bl	8019a34 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015fbc:	6878      	ldr	r0, [r7, #4]
 8015fbe:	f7ff ff57 	bl	8015e70 <tcp_rexmit_rto_prepare>
 8015fc2:	4603      	mov	r3, r0
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d102      	bne.n	8015fce <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8015fc8:	6878      	ldr	r0, [r7, #4]
 8015fca:	f7ff ffc1 	bl	8015f50 <tcp_rexmit_rto_commit>
  }
}
 8015fce:	bf00      	nop
 8015fd0:	3708      	adds	r7, #8
 8015fd2:	46bd      	mov	sp, r7
 8015fd4:	bd80      	pop	{r7, pc}
 8015fd6:	bf00      	nop
 8015fd8:	0801c250 	.word	0x0801c250
 8015fdc:	0801c8d4 	.word	0x0801c8d4
 8015fe0:	0801c2a4 	.word	0x0801c2a4

08015fe4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015fe4:	b590      	push	{r4, r7, lr}
 8015fe6:	b085      	sub	sp, #20
 8015fe8:	af00      	add	r7, sp, #0
 8015fea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d106      	bne.n	8016000 <tcp_rexmit+0x1c>
 8015ff2:	4b2f      	ldr	r3, [pc, #188]	; (80160b0 <tcp_rexmit+0xcc>)
 8015ff4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8015ff8:	492e      	ldr	r1, [pc, #184]	; (80160b4 <tcp_rexmit+0xd0>)
 8015ffa:	482f      	ldr	r0, [pc, #188]	; (80160b8 <tcp_rexmit+0xd4>)
 8015ffc:	f003 fd1a 	bl	8019a34 <iprintf>

  if (pcb->unacked == NULL) {
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016004:	2b00      	cmp	r3, #0
 8016006:	d102      	bne.n	801600e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8016008:	f06f 0305 	mvn.w	r3, #5
 801600c:	e04c      	b.n	80160a8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016012:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8016014:	68b8      	ldr	r0, [r7, #8]
 8016016:	f7ff fe2d 	bl	8015c74 <tcp_output_segment_busy>
 801601a:	4603      	mov	r3, r0
 801601c:	2b00      	cmp	r3, #0
 801601e:	d002      	beq.n	8016026 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8016020:	f06f 0305 	mvn.w	r3, #5
 8016024:	e040      	b.n	80160a8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8016026:	68bb      	ldr	r3, [r7, #8]
 8016028:	681a      	ldr	r2, [r3, #0]
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	336c      	adds	r3, #108	; 0x6c
 8016032:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016034:	e002      	b.n	801603c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801603c:	68fb      	ldr	r3, [r7, #12]
 801603e:	681b      	ldr	r3, [r3, #0]
 8016040:	2b00      	cmp	r3, #0
 8016042:	d011      	beq.n	8016068 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016044:	68fb      	ldr	r3, [r7, #12]
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	68db      	ldr	r3, [r3, #12]
 801604a:	685b      	ldr	r3, [r3, #4]
 801604c:	4618      	mov	r0, r3
 801604e:	f7f8 fc04 	bl	800e85a <lwip_htonl>
 8016052:	4604      	mov	r4, r0
 8016054:	68bb      	ldr	r3, [r7, #8]
 8016056:	68db      	ldr	r3, [r3, #12]
 8016058:	685b      	ldr	r3, [r3, #4]
 801605a:	4618      	mov	r0, r3
 801605c:	f7f8 fbfd 	bl	800e85a <lwip_htonl>
 8016060:	4603      	mov	r3, r0
 8016062:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8016064:	2b00      	cmp	r3, #0
 8016066:	dbe6      	blt.n	8016036 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	681a      	ldr	r2, [r3, #0]
 801606c:	68bb      	ldr	r3, [r7, #8]
 801606e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	68ba      	ldr	r2, [r7, #8]
 8016074:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8016076:	68bb      	ldr	r3, [r7, #8]
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	2b00      	cmp	r3, #0
 801607c:	d103      	bne.n	8016086 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	2200      	movs	r2, #0
 8016082:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801608c:	2bff      	cmp	r3, #255	; 0xff
 801608e:	d007      	beq.n	80160a0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016096:	3301      	adds	r3, #1
 8016098:	b2da      	uxtb	r2, r3
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	2200      	movs	r2, #0
 80160a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80160a6:	2300      	movs	r3, #0
}
 80160a8:	4618      	mov	r0, r3
 80160aa:	3714      	adds	r7, #20
 80160ac:	46bd      	mov	sp, r7
 80160ae:	bd90      	pop	{r4, r7, pc}
 80160b0:	0801c250 	.word	0x0801c250
 80160b4:	0801c8f0 	.word	0x0801c8f0
 80160b8:	0801c2a4 	.word	0x0801c2a4

080160bc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80160bc:	b580      	push	{r7, lr}
 80160be:	b082      	sub	sp, #8
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d106      	bne.n	80160d8 <tcp_rexmit_fast+0x1c>
 80160ca:	4b2a      	ldr	r3, [pc, #168]	; (8016174 <tcp_rexmit_fast+0xb8>)
 80160cc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80160d0:	4929      	ldr	r1, [pc, #164]	; (8016178 <tcp_rexmit_fast+0xbc>)
 80160d2:	482a      	ldr	r0, [pc, #168]	; (801617c <tcp_rexmit_fast+0xc0>)
 80160d4:	f003 fcae 	bl	8019a34 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d045      	beq.n	801616c <tcp_rexmit_fast+0xb0>
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	8b5b      	ldrh	r3, [r3, #26]
 80160e4:	f003 0304 	and.w	r3, r3, #4
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d13f      	bne.n	801616c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80160ec:	6878      	ldr	r0, [r7, #4]
 80160ee:	f7ff ff79 	bl	8015fe4 <tcp_rexmit>
 80160f2:	4603      	mov	r3, r0
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d139      	bne.n	801616c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016104:	4293      	cmp	r3, r2
 8016106:	bf28      	it	cs
 8016108:	4613      	movcs	r3, r2
 801610a:	b29b      	uxth	r3, r3
 801610c:	2b00      	cmp	r3, #0
 801610e:	da00      	bge.n	8016112 <tcp_rexmit_fast+0x56>
 8016110:	3301      	adds	r3, #1
 8016112:	105b      	asrs	r3, r3, #1
 8016114:	b29a      	uxth	r2, r3
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8016122:	461a      	mov	r2, r3
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016128:	005b      	lsls	r3, r3, #1
 801612a:	429a      	cmp	r2, r3
 801612c:	d206      	bcs.n	801613c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016132:	005b      	lsls	r3, r3, #1
 8016134:	b29a      	uxth	r2, r3
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016146:	4619      	mov	r1, r3
 8016148:	0049      	lsls	r1, r1, #1
 801614a:	440b      	add	r3, r1
 801614c:	b29b      	uxth	r3, r3
 801614e:	4413      	add	r3, r2
 8016150:	b29a      	uxth	r2, r3
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	8b5b      	ldrh	r3, [r3, #26]
 801615c:	f043 0304 	orr.w	r3, r3, #4
 8016160:	b29a      	uxth	r2, r3
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	2200      	movs	r2, #0
 801616a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801616c:	bf00      	nop
 801616e:	3708      	adds	r7, #8
 8016170:	46bd      	mov	sp, r7
 8016172:	bd80      	pop	{r7, pc}
 8016174:	0801c250 	.word	0x0801c250
 8016178:	0801c908 	.word	0x0801c908
 801617c:	0801c2a4 	.word	0x0801c2a4

08016180 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8016180:	b580      	push	{r7, lr}
 8016182:	b086      	sub	sp, #24
 8016184:	af00      	add	r7, sp, #0
 8016186:	60f8      	str	r0, [r7, #12]
 8016188:	607b      	str	r3, [r7, #4]
 801618a:	460b      	mov	r3, r1
 801618c:	817b      	strh	r3, [r7, #10]
 801618e:	4613      	mov	r3, r2
 8016190:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8016192:	897a      	ldrh	r2, [r7, #10]
 8016194:	893b      	ldrh	r3, [r7, #8]
 8016196:	4413      	add	r3, r2
 8016198:	b29b      	uxth	r3, r3
 801619a:	3314      	adds	r3, #20
 801619c:	b29b      	uxth	r3, r3
 801619e:	f44f 7220 	mov.w	r2, #640	; 0x280
 80161a2:	4619      	mov	r1, r3
 80161a4:	2022      	movs	r0, #34	; 0x22
 80161a6:	f7f9 fd09 	bl	800fbbc <pbuf_alloc>
 80161aa:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80161ac:	697b      	ldr	r3, [r7, #20]
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d04d      	beq.n	801624e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80161b2:	897b      	ldrh	r3, [r7, #10]
 80161b4:	3313      	adds	r3, #19
 80161b6:	697a      	ldr	r2, [r7, #20]
 80161b8:	8952      	ldrh	r2, [r2, #10]
 80161ba:	4293      	cmp	r3, r2
 80161bc:	db06      	blt.n	80161cc <tcp_output_alloc_header_common+0x4c>
 80161be:	4b26      	ldr	r3, [pc, #152]	; (8016258 <tcp_output_alloc_header_common+0xd8>)
 80161c0:	f240 7223 	movw	r2, #1827	; 0x723
 80161c4:	4925      	ldr	r1, [pc, #148]	; (801625c <tcp_output_alloc_header_common+0xdc>)
 80161c6:	4826      	ldr	r0, [pc, #152]	; (8016260 <tcp_output_alloc_header_common+0xe0>)
 80161c8:	f003 fc34 	bl	8019a34 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80161cc:	697b      	ldr	r3, [r7, #20]
 80161ce:	685b      	ldr	r3, [r3, #4]
 80161d0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80161d2:	8c3b      	ldrh	r3, [r7, #32]
 80161d4:	4618      	mov	r0, r3
 80161d6:	f7f8 fb2b 	bl	800e830 <lwip_htons>
 80161da:	4603      	mov	r3, r0
 80161dc:	461a      	mov	r2, r3
 80161de:	693b      	ldr	r3, [r7, #16]
 80161e0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80161e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80161e4:	4618      	mov	r0, r3
 80161e6:	f7f8 fb23 	bl	800e830 <lwip_htons>
 80161ea:	4603      	mov	r3, r0
 80161ec:	461a      	mov	r2, r3
 80161ee:	693b      	ldr	r3, [r7, #16]
 80161f0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80161f2:	693b      	ldr	r3, [r7, #16]
 80161f4:	687a      	ldr	r2, [r7, #4]
 80161f6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80161f8:	68f8      	ldr	r0, [r7, #12]
 80161fa:	f7f8 fb2e 	bl	800e85a <lwip_htonl>
 80161fe:	4602      	mov	r2, r0
 8016200:	693b      	ldr	r3, [r7, #16]
 8016202:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8016204:	897b      	ldrh	r3, [r7, #10]
 8016206:	089b      	lsrs	r3, r3, #2
 8016208:	b29b      	uxth	r3, r3
 801620a:	3305      	adds	r3, #5
 801620c:	b29b      	uxth	r3, r3
 801620e:	031b      	lsls	r3, r3, #12
 8016210:	b29a      	uxth	r2, r3
 8016212:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016216:	b29b      	uxth	r3, r3
 8016218:	4313      	orrs	r3, r2
 801621a:	b29b      	uxth	r3, r3
 801621c:	4618      	mov	r0, r3
 801621e:	f7f8 fb07 	bl	800e830 <lwip_htons>
 8016222:	4603      	mov	r3, r0
 8016224:	461a      	mov	r2, r3
 8016226:	693b      	ldr	r3, [r7, #16]
 8016228:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801622a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801622c:	4618      	mov	r0, r3
 801622e:	f7f8 faff 	bl	800e830 <lwip_htons>
 8016232:	4603      	mov	r3, r0
 8016234:	461a      	mov	r2, r3
 8016236:	693b      	ldr	r3, [r7, #16]
 8016238:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801623a:	693b      	ldr	r3, [r7, #16]
 801623c:	2200      	movs	r2, #0
 801623e:	741a      	strb	r2, [r3, #16]
 8016240:	2200      	movs	r2, #0
 8016242:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8016244:	693b      	ldr	r3, [r7, #16]
 8016246:	2200      	movs	r2, #0
 8016248:	749a      	strb	r2, [r3, #18]
 801624a:	2200      	movs	r2, #0
 801624c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801624e:	697b      	ldr	r3, [r7, #20]
}
 8016250:	4618      	mov	r0, r3
 8016252:	3718      	adds	r7, #24
 8016254:	46bd      	mov	sp, r7
 8016256:	bd80      	pop	{r7, pc}
 8016258:	0801c250 	.word	0x0801c250
 801625c:	0801c928 	.word	0x0801c928
 8016260:	0801c2a4 	.word	0x0801c2a4

08016264 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8016264:	b5b0      	push	{r4, r5, r7, lr}
 8016266:	b08a      	sub	sp, #40	; 0x28
 8016268:	af04      	add	r7, sp, #16
 801626a:	60f8      	str	r0, [r7, #12]
 801626c:	607b      	str	r3, [r7, #4]
 801626e:	460b      	mov	r3, r1
 8016270:	817b      	strh	r3, [r7, #10]
 8016272:	4613      	mov	r3, r2
 8016274:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	2b00      	cmp	r3, #0
 801627a:	d106      	bne.n	801628a <tcp_output_alloc_header+0x26>
 801627c:	4b15      	ldr	r3, [pc, #84]	; (80162d4 <tcp_output_alloc_header+0x70>)
 801627e:	f240 7242 	movw	r2, #1858	; 0x742
 8016282:	4915      	ldr	r1, [pc, #84]	; (80162d8 <tcp_output_alloc_header+0x74>)
 8016284:	4815      	ldr	r0, [pc, #84]	; (80162dc <tcp_output_alloc_header+0x78>)
 8016286:	f003 fbd5 	bl	8019a34 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801628a:	68fb      	ldr	r3, [r7, #12]
 801628c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801628e:	68fb      	ldr	r3, [r7, #12]
 8016290:	8adb      	ldrh	r3, [r3, #22]
 8016292:	68fa      	ldr	r2, [r7, #12]
 8016294:	8b12      	ldrh	r2, [r2, #24]
 8016296:	68f9      	ldr	r1, [r7, #12]
 8016298:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801629a:	893d      	ldrh	r5, [r7, #8]
 801629c:	897c      	ldrh	r4, [r7, #10]
 801629e:	9103      	str	r1, [sp, #12]
 80162a0:	2110      	movs	r1, #16
 80162a2:	9102      	str	r1, [sp, #8]
 80162a4:	9201      	str	r2, [sp, #4]
 80162a6:	9300      	str	r3, [sp, #0]
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	462a      	mov	r2, r5
 80162ac:	4621      	mov	r1, r4
 80162ae:	f7ff ff67 	bl	8016180 <tcp_output_alloc_header_common>
 80162b2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80162b4:	697b      	ldr	r3, [r7, #20]
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d006      	beq.n	80162c8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80162ba:	68fb      	ldr	r3, [r7, #12]
 80162bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162be:	68fa      	ldr	r2, [r7, #12]
 80162c0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80162c2:	441a      	add	r2, r3
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80162c8:	697b      	ldr	r3, [r7, #20]
}
 80162ca:	4618      	mov	r0, r3
 80162cc:	3718      	adds	r7, #24
 80162ce:	46bd      	mov	sp, r7
 80162d0:	bdb0      	pop	{r4, r5, r7, pc}
 80162d2:	bf00      	nop
 80162d4:	0801c250 	.word	0x0801c250
 80162d8:	0801c958 	.word	0x0801c958
 80162dc:	0801c2a4 	.word	0x0801c2a4

080162e0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80162e0:	b580      	push	{r7, lr}
 80162e2:	b088      	sub	sp, #32
 80162e4:	af00      	add	r7, sp, #0
 80162e6:	60f8      	str	r0, [r7, #12]
 80162e8:	60b9      	str	r1, [r7, #8]
 80162ea:	4611      	mov	r1, r2
 80162ec:	461a      	mov	r2, r3
 80162ee:	460b      	mov	r3, r1
 80162f0:	71fb      	strb	r3, [r7, #7]
 80162f2:	4613      	mov	r3, r2
 80162f4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80162f6:	2300      	movs	r3, #0
 80162f8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80162fa:	68bb      	ldr	r3, [r7, #8]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d106      	bne.n	801630e <tcp_output_fill_options+0x2e>
 8016300:	4b13      	ldr	r3, [pc, #76]	; (8016350 <tcp_output_fill_options+0x70>)
 8016302:	f240 7256 	movw	r2, #1878	; 0x756
 8016306:	4913      	ldr	r1, [pc, #76]	; (8016354 <tcp_output_fill_options+0x74>)
 8016308:	4813      	ldr	r0, [pc, #76]	; (8016358 <tcp_output_fill_options+0x78>)
 801630a:	f003 fb93 	bl	8019a34 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801630e:	68bb      	ldr	r3, [r7, #8]
 8016310:	685b      	ldr	r3, [r3, #4]
 8016312:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8016314:	69bb      	ldr	r3, [r7, #24]
 8016316:	3314      	adds	r3, #20
 8016318:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801631a:	69bb      	ldr	r3, [r7, #24]
 801631c:	f103 0214 	add.w	r2, r3, #20
 8016320:	8bfb      	ldrh	r3, [r7, #30]
 8016322:	009b      	lsls	r3, r3, #2
 8016324:	4619      	mov	r1, r3
 8016326:	79fb      	ldrb	r3, [r7, #7]
 8016328:	009b      	lsls	r3, r3, #2
 801632a:	f003 0304 	and.w	r3, r3, #4
 801632e:	440b      	add	r3, r1
 8016330:	4413      	add	r3, r2
 8016332:	697a      	ldr	r2, [r7, #20]
 8016334:	429a      	cmp	r2, r3
 8016336:	d006      	beq.n	8016346 <tcp_output_fill_options+0x66>
 8016338:	4b05      	ldr	r3, [pc, #20]	; (8016350 <tcp_output_fill_options+0x70>)
 801633a:	f240 7275 	movw	r2, #1909	; 0x775
 801633e:	4907      	ldr	r1, [pc, #28]	; (801635c <tcp_output_fill_options+0x7c>)
 8016340:	4805      	ldr	r0, [pc, #20]	; (8016358 <tcp_output_fill_options+0x78>)
 8016342:	f003 fb77 	bl	8019a34 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8016346:	bf00      	nop
 8016348:	3720      	adds	r7, #32
 801634a:	46bd      	mov	sp, r7
 801634c:	bd80      	pop	{r7, pc}
 801634e:	bf00      	nop
 8016350:	0801c250 	.word	0x0801c250
 8016354:	0801c980 	.word	0x0801c980
 8016358:	0801c2a4 	.word	0x0801c2a4
 801635c:	0801c878 	.word	0x0801c878

08016360 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8016360:	b580      	push	{r7, lr}
 8016362:	b08a      	sub	sp, #40	; 0x28
 8016364:	af04      	add	r7, sp, #16
 8016366:	60f8      	str	r0, [r7, #12]
 8016368:	60b9      	str	r1, [r7, #8]
 801636a:	607a      	str	r2, [r7, #4]
 801636c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801636e:	68bb      	ldr	r3, [r7, #8]
 8016370:	2b00      	cmp	r3, #0
 8016372:	d106      	bne.n	8016382 <tcp_output_control_segment+0x22>
 8016374:	4b1c      	ldr	r3, [pc, #112]	; (80163e8 <tcp_output_control_segment+0x88>)
 8016376:	f240 7287 	movw	r2, #1927	; 0x787
 801637a:	491c      	ldr	r1, [pc, #112]	; (80163ec <tcp_output_control_segment+0x8c>)
 801637c:	481c      	ldr	r0, [pc, #112]	; (80163f0 <tcp_output_control_segment+0x90>)
 801637e:	f003 fb59 	bl	8019a34 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8016382:	683a      	ldr	r2, [r7, #0]
 8016384:	6879      	ldr	r1, [r7, #4]
 8016386:	68f8      	ldr	r0, [r7, #12]
 8016388:	f7fe fae8 	bl	801495c <tcp_route>
 801638c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801638e:	693b      	ldr	r3, [r7, #16]
 8016390:	2b00      	cmp	r3, #0
 8016392:	d102      	bne.n	801639a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8016394:	23fc      	movs	r3, #252	; 0xfc
 8016396:	75fb      	strb	r3, [r7, #23]
 8016398:	e01c      	b.n	80163d4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801639a:	68fb      	ldr	r3, [r7, #12]
 801639c:	2b00      	cmp	r3, #0
 801639e:	d006      	beq.n	80163ae <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	7adb      	ldrb	r3, [r3, #11]
 80163a4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	7a9b      	ldrb	r3, [r3, #10]
 80163aa:	757b      	strb	r3, [r7, #21]
 80163ac:	e003      	b.n	80163b6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80163ae:	23ff      	movs	r3, #255	; 0xff
 80163b0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80163b2:	2300      	movs	r3, #0
 80163b4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80163b6:	7dba      	ldrb	r2, [r7, #22]
 80163b8:	693b      	ldr	r3, [r7, #16]
 80163ba:	9302      	str	r3, [sp, #8]
 80163bc:	2306      	movs	r3, #6
 80163be:	9301      	str	r3, [sp, #4]
 80163c0:	7d7b      	ldrb	r3, [r7, #21]
 80163c2:	9300      	str	r3, [sp, #0]
 80163c4:	4613      	mov	r3, r2
 80163c6:	683a      	ldr	r2, [r7, #0]
 80163c8:	6879      	ldr	r1, [r7, #4]
 80163ca:	68b8      	ldr	r0, [r7, #8]
 80163cc:	f001 ffc6 	bl	801835c <ip4_output_if>
 80163d0:	4603      	mov	r3, r0
 80163d2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80163d4:	68b8      	ldr	r0, [r7, #8]
 80163d6:	f7f9 fed5 	bl	8010184 <pbuf_free>
  return err;
 80163da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80163de:	4618      	mov	r0, r3
 80163e0:	3718      	adds	r7, #24
 80163e2:	46bd      	mov	sp, r7
 80163e4:	bd80      	pop	{r7, pc}
 80163e6:	bf00      	nop
 80163e8:	0801c250 	.word	0x0801c250
 80163ec:	0801c9a8 	.word	0x0801c9a8
 80163f0:	0801c2a4 	.word	0x0801c2a4

080163f4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80163f4:	b590      	push	{r4, r7, lr}
 80163f6:	b08b      	sub	sp, #44	; 0x2c
 80163f8:	af04      	add	r7, sp, #16
 80163fa:	60f8      	str	r0, [r7, #12]
 80163fc:	60b9      	str	r1, [r7, #8]
 80163fe:	607a      	str	r2, [r7, #4]
 8016400:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8016402:	683b      	ldr	r3, [r7, #0]
 8016404:	2b00      	cmp	r3, #0
 8016406:	d106      	bne.n	8016416 <tcp_rst+0x22>
 8016408:	4b1f      	ldr	r3, [pc, #124]	; (8016488 <tcp_rst+0x94>)
 801640a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801640e:	491f      	ldr	r1, [pc, #124]	; (801648c <tcp_rst+0x98>)
 8016410:	481f      	ldr	r0, [pc, #124]	; (8016490 <tcp_rst+0x9c>)
 8016412:	f003 fb0f 	bl	8019a34 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8016416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016418:	2b00      	cmp	r3, #0
 801641a:	d106      	bne.n	801642a <tcp_rst+0x36>
 801641c:	4b1a      	ldr	r3, [pc, #104]	; (8016488 <tcp_rst+0x94>)
 801641e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8016422:	491c      	ldr	r1, [pc, #112]	; (8016494 <tcp_rst+0xa0>)
 8016424:	481a      	ldr	r0, [pc, #104]	; (8016490 <tcp_rst+0x9c>)
 8016426:	f003 fb05 	bl	8019a34 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801642a:	2300      	movs	r3, #0
 801642c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801642e:	f246 0308 	movw	r3, #24584	; 0x6008
 8016432:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8016434:	7dfb      	ldrb	r3, [r7, #23]
 8016436:	b29c      	uxth	r4, r3
 8016438:	68b8      	ldr	r0, [r7, #8]
 801643a:	f7f8 fa0e 	bl	800e85a <lwip_htonl>
 801643e:	4602      	mov	r2, r0
 8016440:	8abb      	ldrh	r3, [r7, #20]
 8016442:	9303      	str	r3, [sp, #12]
 8016444:	2314      	movs	r3, #20
 8016446:	9302      	str	r3, [sp, #8]
 8016448:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801644a:	9301      	str	r3, [sp, #4]
 801644c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801644e:	9300      	str	r3, [sp, #0]
 8016450:	4613      	mov	r3, r2
 8016452:	2200      	movs	r2, #0
 8016454:	4621      	mov	r1, r4
 8016456:	6878      	ldr	r0, [r7, #4]
 8016458:	f7ff fe92 	bl	8016180 <tcp_output_alloc_header_common>
 801645c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801645e:	693b      	ldr	r3, [r7, #16]
 8016460:	2b00      	cmp	r3, #0
 8016462:	d00c      	beq.n	801647e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016464:	7dfb      	ldrb	r3, [r7, #23]
 8016466:	2200      	movs	r2, #0
 8016468:	6939      	ldr	r1, [r7, #16]
 801646a:	68f8      	ldr	r0, [r7, #12]
 801646c:	f7ff ff38 	bl	80162e0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8016470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016472:	683a      	ldr	r2, [r7, #0]
 8016474:	6939      	ldr	r1, [r7, #16]
 8016476:	68f8      	ldr	r0, [r7, #12]
 8016478:	f7ff ff72 	bl	8016360 <tcp_output_control_segment>
 801647c:	e000      	b.n	8016480 <tcp_rst+0x8c>
    return;
 801647e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8016480:	371c      	adds	r7, #28
 8016482:	46bd      	mov	sp, r7
 8016484:	bd90      	pop	{r4, r7, pc}
 8016486:	bf00      	nop
 8016488:	0801c250 	.word	0x0801c250
 801648c:	0801c9d4 	.word	0x0801c9d4
 8016490:	0801c2a4 	.word	0x0801c2a4
 8016494:	0801c9f0 	.word	0x0801c9f0

08016498 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8016498:	b590      	push	{r4, r7, lr}
 801649a:	b087      	sub	sp, #28
 801649c:	af00      	add	r7, sp, #0
 801649e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80164a0:	2300      	movs	r3, #0
 80164a2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80164a4:	2300      	movs	r3, #0
 80164a6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d106      	bne.n	80164bc <tcp_send_empty_ack+0x24>
 80164ae:	4b28      	ldr	r3, [pc, #160]	; (8016550 <tcp_send_empty_ack+0xb8>)
 80164b0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80164b4:	4927      	ldr	r1, [pc, #156]	; (8016554 <tcp_send_empty_ack+0xbc>)
 80164b6:	4828      	ldr	r0, [pc, #160]	; (8016558 <tcp_send_empty_ack+0xc0>)
 80164b8:	f003 fabc 	bl	8019a34 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80164bc:	7dfb      	ldrb	r3, [r7, #23]
 80164be:	009b      	lsls	r3, r3, #2
 80164c0:	b2db      	uxtb	r3, r3
 80164c2:	f003 0304 	and.w	r3, r3, #4
 80164c6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80164c8:	7d7b      	ldrb	r3, [r7, #21]
 80164ca:	b29c      	uxth	r4, r3
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80164d0:	4618      	mov	r0, r3
 80164d2:	f7f8 f9c2 	bl	800e85a <lwip_htonl>
 80164d6:	4603      	mov	r3, r0
 80164d8:	2200      	movs	r2, #0
 80164da:	4621      	mov	r1, r4
 80164dc:	6878      	ldr	r0, [r7, #4]
 80164de:	f7ff fec1 	bl	8016264 <tcp_output_alloc_header>
 80164e2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80164e4:	693b      	ldr	r3, [r7, #16]
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d109      	bne.n	80164fe <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	8b5b      	ldrh	r3, [r3, #26]
 80164ee:	f043 0303 	orr.w	r3, r3, #3
 80164f2:	b29a      	uxth	r2, r3
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80164f8:	f06f 0301 	mvn.w	r3, #1
 80164fc:	e023      	b.n	8016546 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80164fe:	7dbb      	ldrb	r3, [r7, #22]
 8016500:	7dfa      	ldrb	r2, [r7, #23]
 8016502:	6939      	ldr	r1, [r7, #16]
 8016504:	6878      	ldr	r0, [r7, #4]
 8016506:	f7ff feeb 	bl	80162e0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801650a:	687a      	ldr	r2, [r7, #4]
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	3304      	adds	r3, #4
 8016510:	6939      	ldr	r1, [r7, #16]
 8016512:	6878      	ldr	r0, [r7, #4]
 8016514:	f7ff ff24 	bl	8016360 <tcp_output_control_segment>
 8016518:	4603      	mov	r3, r0
 801651a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801651c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016520:	2b00      	cmp	r3, #0
 8016522:	d007      	beq.n	8016534 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	8b5b      	ldrh	r3, [r3, #26]
 8016528:	f043 0303 	orr.w	r3, r3, #3
 801652c:	b29a      	uxth	r2, r3
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	835a      	strh	r2, [r3, #26]
 8016532:	e006      	b.n	8016542 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	8b5b      	ldrh	r3, [r3, #26]
 8016538:	f023 0303 	bic.w	r3, r3, #3
 801653c:	b29a      	uxth	r2, r3
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8016542:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016546:	4618      	mov	r0, r3
 8016548:	371c      	adds	r7, #28
 801654a:	46bd      	mov	sp, r7
 801654c:	bd90      	pop	{r4, r7, pc}
 801654e:	bf00      	nop
 8016550:	0801c250 	.word	0x0801c250
 8016554:	0801ca0c 	.word	0x0801ca0c
 8016558:	0801c2a4 	.word	0x0801c2a4

0801655c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801655c:	b590      	push	{r4, r7, lr}
 801655e:	b087      	sub	sp, #28
 8016560:	af00      	add	r7, sp, #0
 8016562:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016564:	2300      	movs	r3, #0
 8016566:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	2b00      	cmp	r3, #0
 801656c:	d106      	bne.n	801657c <tcp_keepalive+0x20>
 801656e:	4b18      	ldr	r3, [pc, #96]	; (80165d0 <tcp_keepalive+0x74>)
 8016570:	f640 0224 	movw	r2, #2084	; 0x824
 8016574:	4917      	ldr	r1, [pc, #92]	; (80165d4 <tcp_keepalive+0x78>)
 8016576:	4818      	ldr	r0, [pc, #96]	; (80165d8 <tcp_keepalive+0x7c>)
 8016578:	f003 fa5c 	bl	8019a34 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801657c:	7dfb      	ldrb	r3, [r7, #23]
 801657e:	b29c      	uxth	r4, r3
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016584:	3b01      	subs	r3, #1
 8016586:	4618      	mov	r0, r3
 8016588:	f7f8 f967 	bl	800e85a <lwip_htonl>
 801658c:	4603      	mov	r3, r0
 801658e:	2200      	movs	r2, #0
 8016590:	4621      	mov	r1, r4
 8016592:	6878      	ldr	r0, [r7, #4]
 8016594:	f7ff fe66 	bl	8016264 <tcp_output_alloc_header>
 8016598:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801659a:	693b      	ldr	r3, [r7, #16]
 801659c:	2b00      	cmp	r3, #0
 801659e:	d102      	bne.n	80165a6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80165a0:	f04f 33ff 	mov.w	r3, #4294967295
 80165a4:	e010      	b.n	80165c8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80165a6:	7dfb      	ldrb	r3, [r7, #23]
 80165a8:	2200      	movs	r2, #0
 80165aa:	6939      	ldr	r1, [r7, #16]
 80165ac:	6878      	ldr	r0, [r7, #4]
 80165ae:	f7ff fe97 	bl	80162e0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80165b2:	687a      	ldr	r2, [r7, #4]
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	3304      	adds	r3, #4
 80165b8:	6939      	ldr	r1, [r7, #16]
 80165ba:	6878      	ldr	r0, [r7, #4]
 80165bc:	f7ff fed0 	bl	8016360 <tcp_output_control_segment>
 80165c0:	4603      	mov	r3, r0
 80165c2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80165c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80165c8:	4618      	mov	r0, r3
 80165ca:	371c      	adds	r7, #28
 80165cc:	46bd      	mov	sp, r7
 80165ce:	bd90      	pop	{r4, r7, pc}
 80165d0:	0801c250 	.word	0x0801c250
 80165d4:	0801ca2c 	.word	0x0801ca2c
 80165d8:	0801c2a4 	.word	0x0801c2a4

080165dc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80165dc:	b590      	push	{r4, r7, lr}
 80165de:	b08b      	sub	sp, #44	; 0x2c
 80165e0:	af00      	add	r7, sp, #0
 80165e2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80165e4:	2300      	movs	r3, #0
 80165e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d106      	bne.n	80165fe <tcp_zero_window_probe+0x22>
 80165f0:	4b4c      	ldr	r3, [pc, #304]	; (8016724 <tcp_zero_window_probe+0x148>)
 80165f2:	f640 024f 	movw	r2, #2127	; 0x84f
 80165f6:	494c      	ldr	r1, [pc, #304]	; (8016728 <tcp_zero_window_probe+0x14c>)
 80165f8:	484c      	ldr	r0, [pc, #304]	; (801672c <tcp_zero_window_probe+0x150>)
 80165fa:	f003 fa1b 	bl	8019a34 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016602:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8016604:	6a3b      	ldr	r3, [r7, #32]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d101      	bne.n	801660e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801660a:	2300      	movs	r3, #0
 801660c:	e086      	b.n	801671c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016614:	2bff      	cmp	r3, #255	; 0xff
 8016616:	d007      	beq.n	8016628 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801661e:	3301      	adds	r3, #1
 8016620:	b2da      	uxtb	r2, r3
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8016628:	6a3b      	ldr	r3, [r7, #32]
 801662a:	68db      	ldr	r3, [r3, #12]
 801662c:	899b      	ldrh	r3, [r3, #12]
 801662e:	b29b      	uxth	r3, r3
 8016630:	4618      	mov	r0, r3
 8016632:	f7f8 f8fd 	bl	800e830 <lwip_htons>
 8016636:	4603      	mov	r3, r0
 8016638:	b2db      	uxtb	r3, r3
 801663a:	f003 0301 	and.w	r3, r3, #1
 801663e:	2b00      	cmp	r3, #0
 8016640:	d005      	beq.n	801664e <tcp_zero_window_probe+0x72>
 8016642:	6a3b      	ldr	r3, [r7, #32]
 8016644:	891b      	ldrh	r3, [r3, #8]
 8016646:	2b00      	cmp	r3, #0
 8016648:	d101      	bne.n	801664e <tcp_zero_window_probe+0x72>
 801664a:	2301      	movs	r3, #1
 801664c:	e000      	b.n	8016650 <tcp_zero_window_probe+0x74>
 801664e:	2300      	movs	r3, #0
 8016650:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8016652:	7ffb      	ldrb	r3, [r7, #31]
 8016654:	2b00      	cmp	r3, #0
 8016656:	bf0c      	ite	eq
 8016658:	2301      	moveq	r3, #1
 801665a:	2300      	movne	r3, #0
 801665c:	b2db      	uxtb	r3, r3
 801665e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8016660:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016664:	b299      	uxth	r1, r3
 8016666:	6a3b      	ldr	r3, [r7, #32]
 8016668:	68db      	ldr	r3, [r3, #12]
 801666a:	685b      	ldr	r3, [r3, #4]
 801666c:	8bba      	ldrh	r2, [r7, #28]
 801666e:	6878      	ldr	r0, [r7, #4]
 8016670:	f7ff fdf8 	bl	8016264 <tcp_output_alloc_header>
 8016674:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8016676:	69bb      	ldr	r3, [r7, #24]
 8016678:	2b00      	cmp	r3, #0
 801667a:	d102      	bne.n	8016682 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801667c:	f04f 33ff 	mov.w	r3, #4294967295
 8016680:	e04c      	b.n	801671c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8016682:	69bb      	ldr	r3, [r7, #24]
 8016684:	685b      	ldr	r3, [r3, #4]
 8016686:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8016688:	7ffb      	ldrb	r3, [r7, #31]
 801668a:	2b00      	cmp	r3, #0
 801668c:	d011      	beq.n	80166b2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801668e:	697b      	ldr	r3, [r7, #20]
 8016690:	899b      	ldrh	r3, [r3, #12]
 8016692:	b29b      	uxth	r3, r3
 8016694:	b21b      	sxth	r3, r3
 8016696:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801669a:	b21c      	sxth	r4, r3
 801669c:	2011      	movs	r0, #17
 801669e:	f7f8 f8c7 	bl	800e830 <lwip_htons>
 80166a2:	4603      	mov	r3, r0
 80166a4:	b21b      	sxth	r3, r3
 80166a6:	4323      	orrs	r3, r4
 80166a8:	b21b      	sxth	r3, r3
 80166aa:	b29a      	uxth	r2, r3
 80166ac:	697b      	ldr	r3, [r7, #20]
 80166ae:	819a      	strh	r2, [r3, #12]
 80166b0:	e010      	b.n	80166d4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80166b2:	69bb      	ldr	r3, [r7, #24]
 80166b4:	685b      	ldr	r3, [r3, #4]
 80166b6:	3314      	adds	r3, #20
 80166b8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80166ba:	6a3b      	ldr	r3, [r7, #32]
 80166bc:	6858      	ldr	r0, [r3, #4]
 80166be:	6a3b      	ldr	r3, [r7, #32]
 80166c0:	685b      	ldr	r3, [r3, #4]
 80166c2:	891a      	ldrh	r2, [r3, #8]
 80166c4:	6a3b      	ldr	r3, [r7, #32]
 80166c6:	891b      	ldrh	r3, [r3, #8]
 80166c8:	1ad3      	subs	r3, r2, r3
 80166ca:	b29b      	uxth	r3, r3
 80166cc:	2201      	movs	r2, #1
 80166ce:	6939      	ldr	r1, [r7, #16]
 80166d0:	f7f9 ff5e 	bl	8010590 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80166d4:	6a3b      	ldr	r3, [r7, #32]
 80166d6:	68db      	ldr	r3, [r3, #12]
 80166d8:	685b      	ldr	r3, [r3, #4]
 80166da:	4618      	mov	r0, r3
 80166dc:	f7f8 f8bd 	bl	800e85a <lwip_htonl>
 80166e0:	4603      	mov	r3, r0
 80166e2:	3301      	adds	r3, #1
 80166e4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80166ea:	68fb      	ldr	r3, [r7, #12]
 80166ec:	1ad3      	subs	r3, r2, r3
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	da02      	bge.n	80166f8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	68fa      	ldr	r2, [r7, #12]
 80166f6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80166f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80166fc:	2200      	movs	r2, #0
 80166fe:	69b9      	ldr	r1, [r7, #24]
 8016700:	6878      	ldr	r0, [r7, #4]
 8016702:	f7ff fded 	bl	80162e0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016706:	687a      	ldr	r2, [r7, #4]
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	3304      	adds	r3, #4
 801670c:	69b9      	ldr	r1, [r7, #24]
 801670e:	6878      	ldr	r0, [r7, #4]
 8016710:	f7ff fe26 	bl	8016360 <tcp_output_control_segment>
 8016714:	4603      	mov	r3, r0
 8016716:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016718:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801671c:	4618      	mov	r0, r3
 801671e:	372c      	adds	r7, #44	; 0x2c
 8016720:	46bd      	mov	sp, r7
 8016722:	bd90      	pop	{r4, r7, pc}
 8016724:	0801c250 	.word	0x0801c250
 8016728:	0801ca48 	.word	0x0801ca48
 801672c:	0801c2a4 	.word	0x0801c2a4

08016730 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8016730:	b580      	push	{r7, lr}
 8016732:	b082      	sub	sp, #8
 8016734:	af00      	add	r7, sp, #0
 8016736:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8016738:	f7fa f818 	bl	801076c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801673c:	4b0a      	ldr	r3, [pc, #40]	; (8016768 <tcpip_tcp_timer+0x38>)
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	2b00      	cmp	r3, #0
 8016742:	d103      	bne.n	801674c <tcpip_tcp_timer+0x1c>
 8016744:	4b09      	ldr	r3, [pc, #36]	; (801676c <tcpip_tcp_timer+0x3c>)
 8016746:	681b      	ldr	r3, [r3, #0]
 8016748:	2b00      	cmp	r3, #0
 801674a:	d005      	beq.n	8016758 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801674c:	2200      	movs	r2, #0
 801674e:	4908      	ldr	r1, [pc, #32]	; (8016770 <tcpip_tcp_timer+0x40>)
 8016750:	20fa      	movs	r0, #250	; 0xfa
 8016752:	f000 f8f3 	bl	801693c <sys_timeout>
 8016756:	e003      	b.n	8016760 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8016758:	4b06      	ldr	r3, [pc, #24]	; (8016774 <tcpip_tcp_timer+0x44>)
 801675a:	2200      	movs	r2, #0
 801675c:	601a      	str	r2, [r3, #0]
  }
}
 801675e:	bf00      	nop
 8016760:	bf00      	nop
 8016762:	3708      	adds	r7, #8
 8016764:	46bd      	mov	sp, r7
 8016766:	bd80      	pop	{r7, pc}
 8016768:	24007864 	.word	0x24007864
 801676c:	24007874 	.word	0x24007874
 8016770:	08016731 	.word	0x08016731
 8016774:	24004160 	.word	0x24004160

08016778 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8016778:	b580      	push	{r7, lr}
 801677a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801677c:	4b0a      	ldr	r3, [pc, #40]	; (80167a8 <tcp_timer_needed+0x30>)
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	2b00      	cmp	r3, #0
 8016782:	d10f      	bne.n	80167a4 <tcp_timer_needed+0x2c>
 8016784:	4b09      	ldr	r3, [pc, #36]	; (80167ac <tcp_timer_needed+0x34>)
 8016786:	681b      	ldr	r3, [r3, #0]
 8016788:	2b00      	cmp	r3, #0
 801678a:	d103      	bne.n	8016794 <tcp_timer_needed+0x1c>
 801678c:	4b08      	ldr	r3, [pc, #32]	; (80167b0 <tcp_timer_needed+0x38>)
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	2b00      	cmp	r3, #0
 8016792:	d007      	beq.n	80167a4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8016794:	4b04      	ldr	r3, [pc, #16]	; (80167a8 <tcp_timer_needed+0x30>)
 8016796:	2201      	movs	r2, #1
 8016798:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801679a:	2200      	movs	r2, #0
 801679c:	4905      	ldr	r1, [pc, #20]	; (80167b4 <tcp_timer_needed+0x3c>)
 801679e:	20fa      	movs	r0, #250	; 0xfa
 80167a0:	f000 f8cc 	bl	801693c <sys_timeout>
  }
}
 80167a4:	bf00      	nop
 80167a6:	bd80      	pop	{r7, pc}
 80167a8:	24004160 	.word	0x24004160
 80167ac:	24007864 	.word	0x24007864
 80167b0:	24007874 	.word	0x24007874
 80167b4:	08016731 	.word	0x08016731

080167b8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80167b8:	b580      	push	{r7, lr}
 80167ba:	b086      	sub	sp, #24
 80167bc:	af00      	add	r7, sp, #0
 80167be:	60f8      	str	r0, [r7, #12]
 80167c0:	60b9      	str	r1, [r7, #8]
 80167c2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80167c4:	200a      	movs	r0, #10
 80167c6:	f7f8 fdc3 	bl	800f350 <memp_malloc>
 80167ca:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80167cc:	693b      	ldr	r3, [r7, #16]
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d109      	bne.n	80167e6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80167d2:	693b      	ldr	r3, [r7, #16]
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d151      	bne.n	801687c <sys_timeout_abs+0xc4>
 80167d8:	4b2a      	ldr	r3, [pc, #168]	; (8016884 <sys_timeout_abs+0xcc>)
 80167da:	22be      	movs	r2, #190	; 0xbe
 80167dc:	492a      	ldr	r1, [pc, #168]	; (8016888 <sys_timeout_abs+0xd0>)
 80167de:	482b      	ldr	r0, [pc, #172]	; (801688c <sys_timeout_abs+0xd4>)
 80167e0:	f003 f928 	bl	8019a34 <iprintf>
    return;
 80167e4:	e04a      	b.n	801687c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80167e6:	693b      	ldr	r3, [r7, #16]
 80167e8:	2200      	movs	r2, #0
 80167ea:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80167ec:	693b      	ldr	r3, [r7, #16]
 80167ee:	68ba      	ldr	r2, [r7, #8]
 80167f0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80167f2:	693b      	ldr	r3, [r7, #16]
 80167f4:	687a      	ldr	r2, [r7, #4]
 80167f6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80167f8:	693b      	ldr	r3, [r7, #16]
 80167fa:	68fa      	ldr	r2, [r7, #12]
 80167fc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80167fe:	4b24      	ldr	r3, [pc, #144]	; (8016890 <sys_timeout_abs+0xd8>)
 8016800:	681b      	ldr	r3, [r3, #0]
 8016802:	2b00      	cmp	r3, #0
 8016804:	d103      	bne.n	801680e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8016806:	4a22      	ldr	r2, [pc, #136]	; (8016890 <sys_timeout_abs+0xd8>)
 8016808:	693b      	ldr	r3, [r7, #16]
 801680a:	6013      	str	r3, [r2, #0]
    return;
 801680c:	e037      	b.n	801687e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801680e:	693b      	ldr	r3, [r7, #16]
 8016810:	685a      	ldr	r2, [r3, #4]
 8016812:	4b1f      	ldr	r3, [pc, #124]	; (8016890 <sys_timeout_abs+0xd8>)
 8016814:	681b      	ldr	r3, [r3, #0]
 8016816:	685b      	ldr	r3, [r3, #4]
 8016818:	1ad3      	subs	r3, r2, r3
 801681a:	0fdb      	lsrs	r3, r3, #31
 801681c:	f003 0301 	and.w	r3, r3, #1
 8016820:	b2db      	uxtb	r3, r3
 8016822:	2b00      	cmp	r3, #0
 8016824:	d007      	beq.n	8016836 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8016826:	4b1a      	ldr	r3, [pc, #104]	; (8016890 <sys_timeout_abs+0xd8>)
 8016828:	681a      	ldr	r2, [r3, #0]
 801682a:	693b      	ldr	r3, [r7, #16]
 801682c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801682e:	4a18      	ldr	r2, [pc, #96]	; (8016890 <sys_timeout_abs+0xd8>)
 8016830:	693b      	ldr	r3, [r7, #16]
 8016832:	6013      	str	r3, [r2, #0]
 8016834:	e023      	b.n	801687e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8016836:	4b16      	ldr	r3, [pc, #88]	; (8016890 <sys_timeout_abs+0xd8>)
 8016838:	681b      	ldr	r3, [r3, #0]
 801683a:	617b      	str	r3, [r7, #20]
 801683c:	e01a      	b.n	8016874 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801683e:	697b      	ldr	r3, [r7, #20]
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	2b00      	cmp	r3, #0
 8016844:	d00b      	beq.n	801685e <sys_timeout_abs+0xa6>
 8016846:	693b      	ldr	r3, [r7, #16]
 8016848:	685a      	ldr	r2, [r3, #4]
 801684a:	697b      	ldr	r3, [r7, #20]
 801684c:	681b      	ldr	r3, [r3, #0]
 801684e:	685b      	ldr	r3, [r3, #4]
 8016850:	1ad3      	subs	r3, r2, r3
 8016852:	0fdb      	lsrs	r3, r3, #31
 8016854:	f003 0301 	and.w	r3, r3, #1
 8016858:	b2db      	uxtb	r3, r3
 801685a:	2b00      	cmp	r3, #0
 801685c:	d007      	beq.n	801686e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801685e:	697b      	ldr	r3, [r7, #20]
 8016860:	681a      	ldr	r2, [r3, #0]
 8016862:	693b      	ldr	r3, [r7, #16]
 8016864:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8016866:	697b      	ldr	r3, [r7, #20]
 8016868:	693a      	ldr	r2, [r7, #16]
 801686a:	601a      	str	r2, [r3, #0]
        break;
 801686c:	e007      	b.n	801687e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801686e:	697b      	ldr	r3, [r7, #20]
 8016870:	681b      	ldr	r3, [r3, #0]
 8016872:	617b      	str	r3, [r7, #20]
 8016874:	697b      	ldr	r3, [r7, #20]
 8016876:	2b00      	cmp	r3, #0
 8016878:	d1e1      	bne.n	801683e <sys_timeout_abs+0x86>
 801687a:	e000      	b.n	801687e <sys_timeout_abs+0xc6>
    return;
 801687c:	bf00      	nop
      }
    }
  }
}
 801687e:	3718      	adds	r7, #24
 8016880:	46bd      	mov	sp, r7
 8016882:	bd80      	pop	{r7, pc}
 8016884:	0801ca6c 	.word	0x0801ca6c
 8016888:	0801caa0 	.word	0x0801caa0
 801688c:	0801cae0 	.word	0x0801cae0
 8016890:	24004158 	.word	0x24004158

08016894 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8016894:	b580      	push	{r7, lr}
 8016896:	b086      	sub	sp, #24
 8016898:	af00      	add	r7, sp, #0
 801689a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80168a0:	697b      	ldr	r3, [r7, #20]
 80168a2:	685b      	ldr	r3, [r3, #4]
 80168a4:	4798      	blx	r3

  now = sys_now();
 80168a6:	f7f4 fe13 	bl	800b4d0 <sys_now>
 80168aa:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80168ac:	697b      	ldr	r3, [r7, #20]
 80168ae:	681a      	ldr	r2, [r3, #0]
 80168b0:	4b0f      	ldr	r3, [pc, #60]	; (80168f0 <lwip_cyclic_timer+0x5c>)
 80168b2:	681b      	ldr	r3, [r3, #0]
 80168b4:	4413      	add	r3, r2
 80168b6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80168b8:	68fa      	ldr	r2, [r7, #12]
 80168ba:	693b      	ldr	r3, [r7, #16]
 80168bc:	1ad3      	subs	r3, r2, r3
 80168be:	0fdb      	lsrs	r3, r3, #31
 80168c0:	f003 0301 	and.w	r3, r3, #1
 80168c4:	b2db      	uxtb	r3, r3
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d009      	beq.n	80168de <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80168ca:	697b      	ldr	r3, [r7, #20]
 80168cc:	681a      	ldr	r2, [r3, #0]
 80168ce:	693b      	ldr	r3, [r7, #16]
 80168d0:	4413      	add	r3, r2
 80168d2:	687a      	ldr	r2, [r7, #4]
 80168d4:	4907      	ldr	r1, [pc, #28]	; (80168f4 <lwip_cyclic_timer+0x60>)
 80168d6:	4618      	mov	r0, r3
 80168d8:	f7ff ff6e 	bl	80167b8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80168dc:	e004      	b.n	80168e8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80168de:	687a      	ldr	r2, [r7, #4]
 80168e0:	4904      	ldr	r1, [pc, #16]	; (80168f4 <lwip_cyclic_timer+0x60>)
 80168e2:	68f8      	ldr	r0, [r7, #12]
 80168e4:	f7ff ff68 	bl	80167b8 <sys_timeout_abs>
}
 80168e8:	bf00      	nop
 80168ea:	3718      	adds	r7, #24
 80168ec:	46bd      	mov	sp, r7
 80168ee:	bd80      	pop	{r7, pc}
 80168f0:	2400415c 	.word	0x2400415c
 80168f4:	08016895 	.word	0x08016895

080168f8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80168f8:	b580      	push	{r7, lr}
 80168fa:	b082      	sub	sp, #8
 80168fc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80168fe:	2301      	movs	r3, #1
 8016900:	607b      	str	r3, [r7, #4]
 8016902:	e00e      	b.n	8016922 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8016904:	4a0b      	ldr	r2, [pc, #44]	; (8016934 <sys_timeouts_init+0x3c>)
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	00db      	lsls	r3, r3, #3
 8016910:	4a08      	ldr	r2, [pc, #32]	; (8016934 <sys_timeouts_init+0x3c>)
 8016912:	4413      	add	r3, r2
 8016914:	461a      	mov	r2, r3
 8016916:	4908      	ldr	r1, [pc, #32]	; (8016938 <sys_timeouts_init+0x40>)
 8016918:	f000 f810 	bl	801693c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	3301      	adds	r3, #1
 8016920:	607b      	str	r3, [r7, #4]
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	2b02      	cmp	r3, #2
 8016926:	d9ed      	bls.n	8016904 <sys_timeouts_init+0xc>
  }
}
 8016928:	bf00      	nop
 801692a:	bf00      	nop
 801692c:	3708      	adds	r7, #8
 801692e:	46bd      	mov	sp, r7
 8016930:	bd80      	pop	{r7, pc}
 8016932:	bf00      	nop
 8016934:	0801dea8 	.word	0x0801dea8
 8016938:	08016895 	.word	0x08016895

0801693c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801693c:	b580      	push	{r7, lr}
 801693e:	b086      	sub	sp, #24
 8016940:	af00      	add	r7, sp, #0
 8016942:	60f8      	str	r0, [r7, #12]
 8016944:	60b9      	str	r1, [r7, #8]
 8016946:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8016948:	68fb      	ldr	r3, [r7, #12]
 801694a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801694e:	d306      	bcc.n	801695e <sys_timeout+0x22>
 8016950:	4b0a      	ldr	r3, [pc, #40]	; (801697c <sys_timeout+0x40>)
 8016952:	f240 1229 	movw	r2, #297	; 0x129
 8016956:	490a      	ldr	r1, [pc, #40]	; (8016980 <sys_timeout+0x44>)
 8016958:	480a      	ldr	r0, [pc, #40]	; (8016984 <sys_timeout+0x48>)
 801695a:	f003 f86b 	bl	8019a34 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801695e:	f7f4 fdb7 	bl	800b4d0 <sys_now>
 8016962:	4602      	mov	r2, r0
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	4413      	add	r3, r2
 8016968:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801696a:	687a      	ldr	r2, [r7, #4]
 801696c:	68b9      	ldr	r1, [r7, #8]
 801696e:	6978      	ldr	r0, [r7, #20]
 8016970:	f7ff ff22 	bl	80167b8 <sys_timeout_abs>
#endif
}
 8016974:	bf00      	nop
 8016976:	3718      	adds	r7, #24
 8016978:	46bd      	mov	sp, r7
 801697a:	bd80      	pop	{r7, pc}
 801697c:	0801ca6c 	.word	0x0801ca6c
 8016980:	0801cb08 	.word	0x0801cb08
 8016984:	0801cae0 	.word	0x0801cae0

08016988 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8016988:	b580      	push	{r7, lr}
 801698a:	b084      	sub	sp, #16
 801698c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801698e:	f7f4 fd9f 	bl	800b4d0 <sys_now>
 8016992:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8016994:	4b17      	ldr	r3, [pc, #92]	; (80169f4 <sys_check_timeouts+0x6c>)
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801699a:	68bb      	ldr	r3, [r7, #8]
 801699c:	2b00      	cmp	r3, #0
 801699e:	d022      	beq.n	80169e6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80169a0:	68bb      	ldr	r3, [r7, #8]
 80169a2:	685b      	ldr	r3, [r3, #4]
 80169a4:	68fa      	ldr	r2, [r7, #12]
 80169a6:	1ad3      	subs	r3, r2, r3
 80169a8:	0fdb      	lsrs	r3, r3, #31
 80169aa:	f003 0301 	and.w	r3, r3, #1
 80169ae:	b2db      	uxtb	r3, r3
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d11a      	bne.n	80169ea <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80169b4:	68bb      	ldr	r3, [r7, #8]
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	4a0e      	ldr	r2, [pc, #56]	; (80169f4 <sys_check_timeouts+0x6c>)
 80169ba:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80169bc:	68bb      	ldr	r3, [r7, #8]
 80169be:	689b      	ldr	r3, [r3, #8]
 80169c0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80169c2:	68bb      	ldr	r3, [r7, #8]
 80169c4:	68db      	ldr	r3, [r3, #12]
 80169c6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80169c8:	68bb      	ldr	r3, [r7, #8]
 80169ca:	685b      	ldr	r3, [r3, #4]
 80169cc:	4a0a      	ldr	r2, [pc, #40]	; (80169f8 <sys_check_timeouts+0x70>)
 80169ce:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80169d0:	68b9      	ldr	r1, [r7, #8]
 80169d2:	200a      	movs	r0, #10
 80169d4:	f7f8 fd32 	bl	800f43c <memp_free>
    if (handler != NULL) {
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d0da      	beq.n	8016994 <sys_check_timeouts+0xc>
      handler(arg);
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	6838      	ldr	r0, [r7, #0]
 80169e2:	4798      	blx	r3
  do {
 80169e4:	e7d6      	b.n	8016994 <sys_check_timeouts+0xc>
      return;
 80169e6:	bf00      	nop
 80169e8:	e000      	b.n	80169ec <sys_check_timeouts+0x64>
      return;
 80169ea:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80169ec:	3710      	adds	r7, #16
 80169ee:	46bd      	mov	sp, r7
 80169f0:	bd80      	pop	{r7, pc}
 80169f2:	bf00      	nop
 80169f4:	24004158 	.word	0x24004158
 80169f8:	2400415c 	.word	0x2400415c

080169fc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80169fc:	b580      	push	{r7, lr}
 80169fe:	b082      	sub	sp, #8
 8016a00:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8016a02:	4b16      	ldr	r3, [pc, #88]	; (8016a5c <sys_timeouts_sleeptime+0x60>)
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d102      	bne.n	8016a10 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8016a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8016a0e:	e020      	b.n	8016a52 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8016a10:	f7f4 fd5e 	bl	800b4d0 <sys_now>
 8016a14:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8016a16:	4b11      	ldr	r3, [pc, #68]	; (8016a5c <sys_timeouts_sleeptime+0x60>)
 8016a18:	681b      	ldr	r3, [r3, #0]
 8016a1a:	685a      	ldr	r2, [r3, #4]
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	1ad3      	subs	r3, r2, r3
 8016a20:	0fdb      	lsrs	r3, r3, #31
 8016a22:	f003 0301 	and.w	r3, r3, #1
 8016a26:	b2db      	uxtb	r3, r3
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d001      	beq.n	8016a30 <sys_timeouts_sleeptime+0x34>
    return 0;
 8016a2c:	2300      	movs	r3, #0
 8016a2e:	e010      	b.n	8016a52 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8016a30:	4b0a      	ldr	r3, [pc, #40]	; (8016a5c <sys_timeouts_sleeptime+0x60>)
 8016a32:	681b      	ldr	r3, [r3, #0]
 8016a34:	685a      	ldr	r2, [r3, #4]
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	1ad3      	subs	r3, r2, r3
 8016a3a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8016a3c:	683b      	ldr	r3, [r7, #0]
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	da06      	bge.n	8016a50 <sys_timeouts_sleeptime+0x54>
 8016a42:	4b07      	ldr	r3, [pc, #28]	; (8016a60 <sys_timeouts_sleeptime+0x64>)
 8016a44:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8016a48:	4906      	ldr	r1, [pc, #24]	; (8016a64 <sys_timeouts_sleeptime+0x68>)
 8016a4a:	4807      	ldr	r0, [pc, #28]	; (8016a68 <sys_timeouts_sleeptime+0x6c>)
 8016a4c:	f002 fff2 	bl	8019a34 <iprintf>
    return ret;
 8016a50:	683b      	ldr	r3, [r7, #0]
  }
}
 8016a52:	4618      	mov	r0, r3
 8016a54:	3708      	adds	r7, #8
 8016a56:	46bd      	mov	sp, r7
 8016a58:	bd80      	pop	{r7, pc}
 8016a5a:	bf00      	nop
 8016a5c:	24004158 	.word	0x24004158
 8016a60:	0801ca6c 	.word	0x0801ca6c
 8016a64:	0801cb40 	.word	0x0801cb40
 8016a68:	0801cae0 	.word	0x0801cae0

08016a6c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8016a6c:	b580      	push	{r7, lr}
 8016a6e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016a70:	f002 fff8 	bl	8019a64 <rand>
 8016a74:	4603      	mov	r3, r0
 8016a76:	b29b      	uxth	r3, r3
 8016a78:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016a7c:	b29b      	uxth	r3, r3
 8016a7e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8016a82:	b29a      	uxth	r2, r3
 8016a84:	4b01      	ldr	r3, [pc, #4]	; (8016a8c <udp_init+0x20>)
 8016a86:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016a88:	bf00      	nop
 8016a8a:	bd80      	pop	{r7, pc}
 8016a8c:	24000038 	.word	0x24000038

08016a90 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8016a90:	b580      	push	{r7, lr}
 8016a92:	b084      	sub	sp, #16
 8016a94:	af00      	add	r7, sp, #0
 8016a96:	60f8      	str	r0, [r7, #12]
 8016a98:	60b9      	str	r1, [r7, #8]
 8016a9a:	4613      	mov	r3, r2
 8016a9c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8016a9e:	68fb      	ldr	r3, [r7, #12]
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d105      	bne.n	8016ab0 <udp_input_local_match+0x20>
 8016aa4:	4b27      	ldr	r3, [pc, #156]	; (8016b44 <udp_input_local_match+0xb4>)
 8016aa6:	2287      	movs	r2, #135	; 0x87
 8016aa8:	4927      	ldr	r1, [pc, #156]	; (8016b48 <udp_input_local_match+0xb8>)
 8016aaa:	4828      	ldr	r0, [pc, #160]	; (8016b4c <udp_input_local_match+0xbc>)
 8016aac:	f002 ffc2 	bl	8019a34 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8016ab0:	68bb      	ldr	r3, [r7, #8]
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d105      	bne.n	8016ac2 <udp_input_local_match+0x32>
 8016ab6:	4b23      	ldr	r3, [pc, #140]	; (8016b44 <udp_input_local_match+0xb4>)
 8016ab8:	2288      	movs	r2, #136	; 0x88
 8016aba:	4925      	ldr	r1, [pc, #148]	; (8016b50 <udp_input_local_match+0xc0>)
 8016abc:	4823      	ldr	r0, [pc, #140]	; (8016b4c <udp_input_local_match+0xbc>)
 8016abe:	f002 ffb9 	bl	8019a34 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016ac2:	68fb      	ldr	r3, [r7, #12]
 8016ac4:	7a1b      	ldrb	r3, [r3, #8]
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d00b      	beq.n	8016ae2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	7a1a      	ldrb	r2, [r3, #8]
 8016ace:	4b21      	ldr	r3, [pc, #132]	; (8016b54 <udp_input_local_match+0xc4>)
 8016ad0:	685b      	ldr	r3, [r3, #4]
 8016ad2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016ad6:	3301      	adds	r3, #1
 8016ad8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016ada:	429a      	cmp	r2, r3
 8016adc:	d001      	beq.n	8016ae2 <udp_input_local_match+0x52>
    return 0;
 8016ade:	2300      	movs	r3, #0
 8016ae0:	e02b      	b.n	8016b3a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8016ae2:	79fb      	ldrb	r3, [r7, #7]
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d018      	beq.n	8016b1a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016ae8:	68fb      	ldr	r3, [r7, #12]
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d013      	beq.n	8016b16 <udp_input_local_match+0x86>
 8016aee:	68fb      	ldr	r3, [r7, #12]
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d00f      	beq.n	8016b16 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016af6:	4b17      	ldr	r3, [pc, #92]	; (8016b54 <udp_input_local_match+0xc4>)
 8016af8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016afe:	d00a      	beq.n	8016b16 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8016b00:	68fb      	ldr	r3, [r7, #12]
 8016b02:	681a      	ldr	r2, [r3, #0]
 8016b04:	4b13      	ldr	r3, [pc, #76]	; (8016b54 <udp_input_local_match+0xc4>)
 8016b06:	695b      	ldr	r3, [r3, #20]
 8016b08:	405a      	eors	r2, r3
 8016b0a:	68bb      	ldr	r3, [r7, #8]
 8016b0c:	3308      	adds	r3, #8
 8016b0e:	681b      	ldr	r3, [r3, #0]
 8016b10:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d110      	bne.n	8016b38 <udp_input_local_match+0xa8>
          return 1;
 8016b16:	2301      	movs	r3, #1
 8016b18:	e00f      	b.n	8016b3a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016b1a:	68fb      	ldr	r3, [r7, #12]
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d009      	beq.n	8016b34 <udp_input_local_match+0xa4>
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	d005      	beq.n	8016b34 <udp_input_local_match+0xa4>
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	681a      	ldr	r2, [r3, #0]
 8016b2c:	4b09      	ldr	r3, [pc, #36]	; (8016b54 <udp_input_local_match+0xc4>)
 8016b2e:	695b      	ldr	r3, [r3, #20]
 8016b30:	429a      	cmp	r2, r3
 8016b32:	d101      	bne.n	8016b38 <udp_input_local_match+0xa8>
        return 1;
 8016b34:	2301      	movs	r3, #1
 8016b36:	e000      	b.n	8016b3a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8016b38:	2300      	movs	r3, #0
}
 8016b3a:	4618      	mov	r0, r3
 8016b3c:	3710      	adds	r7, #16
 8016b3e:	46bd      	mov	sp, r7
 8016b40:	bd80      	pop	{r7, pc}
 8016b42:	bf00      	nop
 8016b44:	0801cb54 	.word	0x0801cb54
 8016b48:	0801cb84 	.word	0x0801cb84
 8016b4c:	0801cba8 	.word	0x0801cba8
 8016b50:	0801cbd0 	.word	0x0801cbd0
 8016b54:	240047a4 	.word	0x240047a4

08016b58 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8016b58:	b590      	push	{r4, r7, lr}
 8016b5a:	b08d      	sub	sp, #52	; 0x34
 8016b5c:	af02      	add	r7, sp, #8
 8016b5e:	6078      	str	r0, [r7, #4]
 8016b60:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8016b62:	2300      	movs	r3, #0
 8016b64:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	d105      	bne.n	8016b78 <udp_input+0x20>
 8016b6c:	4b7c      	ldr	r3, [pc, #496]	; (8016d60 <udp_input+0x208>)
 8016b6e:	22cf      	movs	r2, #207	; 0xcf
 8016b70:	497c      	ldr	r1, [pc, #496]	; (8016d64 <udp_input+0x20c>)
 8016b72:	487d      	ldr	r0, [pc, #500]	; (8016d68 <udp_input+0x210>)
 8016b74:	f002 ff5e 	bl	8019a34 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8016b78:	683b      	ldr	r3, [r7, #0]
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d105      	bne.n	8016b8a <udp_input+0x32>
 8016b7e:	4b78      	ldr	r3, [pc, #480]	; (8016d60 <udp_input+0x208>)
 8016b80:	22d0      	movs	r2, #208	; 0xd0
 8016b82:	497a      	ldr	r1, [pc, #488]	; (8016d6c <udp_input+0x214>)
 8016b84:	4878      	ldr	r0, [pc, #480]	; (8016d68 <udp_input+0x210>)
 8016b86:	f002 ff55 	bl	8019a34 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	895b      	ldrh	r3, [r3, #10]
 8016b8e:	2b07      	cmp	r3, #7
 8016b90:	d803      	bhi.n	8016b9a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8016b92:	6878      	ldr	r0, [r7, #4]
 8016b94:	f7f9 faf6 	bl	8010184 <pbuf_free>
    goto end;
 8016b98:	e0de      	b.n	8016d58 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	685b      	ldr	r3, [r3, #4]
 8016b9e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8016ba0:	4b73      	ldr	r3, [pc, #460]	; (8016d70 <udp_input+0x218>)
 8016ba2:	695b      	ldr	r3, [r3, #20]
 8016ba4:	4a72      	ldr	r2, [pc, #456]	; (8016d70 <udp_input+0x218>)
 8016ba6:	6812      	ldr	r2, [r2, #0]
 8016ba8:	4611      	mov	r1, r2
 8016baa:	4618      	mov	r0, r3
 8016bac:	f001 fcae 	bl	801850c <ip4_addr_isbroadcast_u32>
 8016bb0:	4603      	mov	r3, r0
 8016bb2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016bb4:	697b      	ldr	r3, [r7, #20]
 8016bb6:	881b      	ldrh	r3, [r3, #0]
 8016bb8:	b29b      	uxth	r3, r3
 8016bba:	4618      	mov	r0, r3
 8016bbc:	f7f7 fe38 	bl	800e830 <lwip_htons>
 8016bc0:	4603      	mov	r3, r0
 8016bc2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016bc4:	697b      	ldr	r3, [r7, #20]
 8016bc6:	885b      	ldrh	r3, [r3, #2]
 8016bc8:	b29b      	uxth	r3, r3
 8016bca:	4618      	mov	r0, r3
 8016bcc:	f7f7 fe30 	bl	800e830 <lwip_htons>
 8016bd0:	4603      	mov	r3, r0
 8016bd2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016bd4:	2300      	movs	r3, #0
 8016bd6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8016bd8:	2300      	movs	r3, #0
 8016bda:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8016bdc:	2300      	movs	r3, #0
 8016bde:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016be0:	4b64      	ldr	r3, [pc, #400]	; (8016d74 <udp_input+0x21c>)
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	627b      	str	r3, [r7, #36]	; 0x24
 8016be6:	e054      	b.n	8016c92 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bea:	8a5b      	ldrh	r3, [r3, #18]
 8016bec:	89fa      	ldrh	r2, [r7, #14]
 8016bee:	429a      	cmp	r2, r3
 8016bf0:	d14a      	bne.n	8016c88 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8016bf2:	7cfb      	ldrb	r3, [r7, #19]
 8016bf4:	461a      	mov	r2, r3
 8016bf6:	6839      	ldr	r1, [r7, #0]
 8016bf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016bfa:	f7ff ff49 	bl	8016a90 <udp_input_local_match>
 8016bfe:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d041      	beq.n	8016c88 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8016c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c06:	7c1b      	ldrb	r3, [r3, #16]
 8016c08:	f003 0304 	and.w	r3, r3, #4
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d11d      	bne.n	8016c4c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8016c10:	69fb      	ldr	r3, [r7, #28]
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d102      	bne.n	8016c1c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8016c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c18:	61fb      	str	r3, [r7, #28]
 8016c1a:	e017      	b.n	8016c4c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8016c1c:	7cfb      	ldrb	r3, [r7, #19]
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d014      	beq.n	8016c4c <udp_input+0xf4>
 8016c22:	4b53      	ldr	r3, [pc, #332]	; (8016d70 <udp_input+0x218>)
 8016c24:	695b      	ldr	r3, [r3, #20]
 8016c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c2a:	d10f      	bne.n	8016c4c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8016c2c:	69fb      	ldr	r3, [r7, #28]
 8016c2e:	681a      	ldr	r2, [r3, #0]
 8016c30:	683b      	ldr	r3, [r7, #0]
 8016c32:	3304      	adds	r3, #4
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	429a      	cmp	r2, r3
 8016c38:	d008      	beq.n	8016c4c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8016c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c3c:	681a      	ldr	r2, [r3, #0]
 8016c3e:	683b      	ldr	r3, [r7, #0]
 8016c40:	3304      	adds	r3, #4
 8016c42:	681b      	ldr	r3, [r3, #0]
 8016c44:	429a      	cmp	r2, r3
 8016c46:	d101      	bne.n	8016c4c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8016c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c4a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8016c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c4e:	8a9b      	ldrh	r3, [r3, #20]
 8016c50:	8a3a      	ldrh	r2, [r7, #16]
 8016c52:	429a      	cmp	r2, r3
 8016c54:	d118      	bne.n	8016c88 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c58:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d005      	beq.n	8016c6a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8016c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c60:	685a      	ldr	r2, [r3, #4]
 8016c62:	4b43      	ldr	r3, [pc, #268]	; (8016d70 <udp_input+0x218>)
 8016c64:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016c66:	429a      	cmp	r2, r3
 8016c68:	d10e      	bne.n	8016c88 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8016c6a:	6a3b      	ldr	r3, [r7, #32]
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d014      	beq.n	8016c9a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8016c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c72:	68da      	ldr	r2, [r3, #12]
 8016c74:	6a3b      	ldr	r3, [r7, #32]
 8016c76:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016c78:	4b3e      	ldr	r3, [pc, #248]	; (8016d74 <udp_input+0x21c>)
 8016c7a:	681a      	ldr	r2, [r3, #0]
 8016c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c7e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8016c80:	4a3c      	ldr	r2, [pc, #240]	; (8016d74 <udp_input+0x21c>)
 8016c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c84:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016c86:	e008      	b.n	8016c9a <udp_input+0x142>
      }
    }

    prev = pcb;
 8016c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c8a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c8e:	68db      	ldr	r3, [r3, #12]
 8016c90:	627b      	str	r3, [r7, #36]	; 0x24
 8016c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d1a7      	bne.n	8016be8 <udp_input+0x90>
 8016c98:	e000      	b.n	8016c9c <udp_input+0x144>
        break;
 8016c9a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8016c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	d101      	bne.n	8016ca6 <udp_input+0x14e>
    pcb = uncon_pcb;
 8016ca2:	69fb      	ldr	r3, [r7, #28]
 8016ca4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d002      	beq.n	8016cb2 <udp_input+0x15a>
    for_us = 1;
 8016cac:	2301      	movs	r3, #1
 8016cae:	76fb      	strb	r3, [r7, #27]
 8016cb0:	e00a      	b.n	8016cc8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8016cb2:	683b      	ldr	r3, [r7, #0]
 8016cb4:	3304      	adds	r3, #4
 8016cb6:	681a      	ldr	r2, [r3, #0]
 8016cb8:	4b2d      	ldr	r3, [pc, #180]	; (8016d70 <udp_input+0x218>)
 8016cba:	695b      	ldr	r3, [r3, #20]
 8016cbc:	429a      	cmp	r2, r3
 8016cbe:	bf0c      	ite	eq
 8016cc0:	2301      	moveq	r3, #1
 8016cc2:	2300      	movne	r3, #0
 8016cc4:	b2db      	uxtb	r3, r3
 8016cc6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016cc8:	7efb      	ldrb	r3, [r7, #27]
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d041      	beq.n	8016d52 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8016cce:	2108      	movs	r1, #8
 8016cd0:	6878      	ldr	r0, [r7, #4]
 8016cd2:	f7f9 f9d1 	bl	8010078 <pbuf_remove_header>
 8016cd6:	4603      	mov	r3, r0
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d00a      	beq.n	8016cf2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8016cdc:	4b20      	ldr	r3, [pc, #128]	; (8016d60 <udp_input+0x208>)
 8016cde:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8016ce2:	4925      	ldr	r1, [pc, #148]	; (8016d78 <udp_input+0x220>)
 8016ce4:	4820      	ldr	r0, [pc, #128]	; (8016d68 <udp_input+0x210>)
 8016ce6:	f002 fea5 	bl	8019a34 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8016cea:	6878      	ldr	r0, [r7, #4]
 8016cec:	f7f9 fa4a 	bl	8010184 <pbuf_free>
      goto end;
 8016cf0:	e032      	b.n	8016d58 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8016cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d012      	beq.n	8016d1e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cfa:	699b      	ldr	r3, [r3, #24]
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d00a      	beq.n	8016d16 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8016d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d02:	699c      	ldr	r4, [r3, #24]
 8016d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d06:	69d8      	ldr	r0, [r3, #28]
 8016d08:	8a3b      	ldrh	r3, [r7, #16]
 8016d0a:	9300      	str	r3, [sp, #0]
 8016d0c:	4b1b      	ldr	r3, [pc, #108]	; (8016d7c <udp_input+0x224>)
 8016d0e:	687a      	ldr	r2, [r7, #4]
 8016d10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016d12:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016d14:	e021      	b.n	8016d5a <udp_input+0x202>
        pbuf_free(p);
 8016d16:	6878      	ldr	r0, [r7, #4]
 8016d18:	f7f9 fa34 	bl	8010184 <pbuf_free>
        goto end;
 8016d1c:	e01c      	b.n	8016d58 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8016d1e:	7cfb      	ldrb	r3, [r7, #19]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d112      	bne.n	8016d4a <udp_input+0x1f2>
 8016d24:	4b12      	ldr	r3, [pc, #72]	; (8016d70 <udp_input+0x218>)
 8016d26:	695b      	ldr	r3, [r3, #20]
 8016d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016d2c:	2be0      	cmp	r3, #224	; 0xe0
 8016d2e:	d00c      	beq.n	8016d4a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8016d30:	4b0f      	ldr	r3, [pc, #60]	; (8016d70 <udp_input+0x218>)
 8016d32:	899b      	ldrh	r3, [r3, #12]
 8016d34:	3308      	adds	r3, #8
 8016d36:	b29b      	uxth	r3, r3
 8016d38:	b21b      	sxth	r3, r3
 8016d3a:	4619      	mov	r1, r3
 8016d3c:	6878      	ldr	r0, [r7, #4]
 8016d3e:	f7f9 fa0e 	bl	801015e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8016d42:	2103      	movs	r1, #3
 8016d44:	6878      	ldr	r0, [r7, #4]
 8016d46:	f001 f8b7 	bl	8017eb8 <icmp_dest_unreach>
      pbuf_free(p);
 8016d4a:	6878      	ldr	r0, [r7, #4]
 8016d4c:	f7f9 fa1a 	bl	8010184 <pbuf_free>
  return;
 8016d50:	e003      	b.n	8016d5a <udp_input+0x202>
    pbuf_free(p);
 8016d52:	6878      	ldr	r0, [r7, #4]
 8016d54:	f7f9 fa16 	bl	8010184 <pbuf_free>
  return;
 8016d58:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8016d5a:	372c      	adds	r7, #44	; 0x2c
 8016d5c:	46bd      	mov	sp, r7
 8016d5e:	bd90      	pop	{r4, r7, pc}
 8016d60:	0801cb54 	.word	0x0801cb54
 8016d64:	0801cbf8 	.word	0x0801cbf8
 8016d68:	0801cba8 	.word	0x0801cba8
 8016d6c:	0801cc10 	.word	0x0801cc10
 8016d70:	240047a4 	.word	0x240047a4
 8016d74:	2400787c 	.word	0x2400787c
 8016d78:	0801cc2c 	.word	0x0801cc2c
 8016d7c:	240047b4 	.word	0x240047b4

08016d80 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016d80:	b480      	push	{r7}
 8016d82:	b085      	sub	sp, #20
 8016d84:	af00      	add	r7, sp, #0
 8016d86:	6078      	str	r0, [r7, #4]
 8016d88:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d01e      	beq.n	8016dce <udp_netif_ip_addr_changed+0x4e>
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	681b      	ldr	r3, [r3, #0]
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d01a      	beq.n	8016dce <udp_netif_ip_addr_changed+0x4e>
 8016d98:	683b      	ldr	r3, [r7, #0]
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d017      	beq.n	8016dce <udp_netif_ip_addr_changed+0x4e>
 8016d9e:	683b      	ldr	r3, [r7, #0]
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d013      	beq.n	8016dce <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016da6:	4b0d      	ldr	r3, [pc, #52]	; (8016ddc <udp_netif_ip_addr_changed+0x5c>)
 8016da8:	681b      	ldr	r3, [r3, #0]
 8016daa:	60fb      	str	r3, [r7, #12]
 8016dac:	e00c      	b.n	8016dc8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	681a      	ldr	r2, [r3, #0]
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	681b      	ldr	r3, [r3, #0]
 8016db6:	429a      	cmp	r2, r3
 8016db8:	d103      	bne.n	8016dc2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8016dba:	683b      	ldr	r3, [r7, #0]
 8016dbc:	681a      	ldr	r2, [r3, #0]
 8016dbe:	68fb      	ldr	r3, [r7, #12]
 8016dc0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016dc2:	68fb      	ldr	r3, [r7, #12]
 8016dc4:	68db      	ldr	r3, [r3, #12]
 8016dc6:	60fb      	str	r3, [r7, #12]
 8016dc8:	68fb      	ldr	r3, [r7, #12]
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d1ef      	bne.n	8016dae <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8016dce:	bf00      	nop
 8016dd0:	3714      	adds	r7, #20
 8016dd2:	46bd      	mov	sp, r7
 8016dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dd8:	4770      	bx	lr
 8016dda:	bf00      	nop
 8016ddc:	2400787c 	.word	0x2400787c

08016de0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016de0:	b580      	push	{r7, lr}
 8016de2:	b082      	sub	sp, #8
 8016de4:	af00      	add	r7, sp, #0
 8016de6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016de8:	4915      	ldr	r1, [pc, #84]	; (8016e40 <etharp_free_entry+0x60>)
 8016dea:	687a      	ldr	r2, [r7, #4]
 8016dec:	4613      	mov	r3, r2
 8016dee:	005b      	lsls	r3, r3, #1
 8016df0:	4413      	add	r3, r2
 8016df2:	00db      	lsls	r3, r3, #3
 8016df4:	440b      	add	r3, r1
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d013      	beq.n	8016e24 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016dfc:	4910      	ldr	r1, [pc, #64]	; (8016e40 <etharp_free_entry+0x60>)
 8016dfe:	687a      	ldr	r2, [r7, #4]
 8016e00:	4613      	mov	r3, r2
 8016e02:	005b      	lsls	r3, r3, #1
 8016e04:	4413      	add	r3, r2
 8016e06:	00db      	lsls	r3, r3, #3
 8016e08:	440b      	add	r3, r1
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	4618      	mov	r0, r3
 8016e0e:	f7f9 f9b9 	bl	8010184 <pbuf_free>
    arp_table[i].q = NULL;
 8016e12:	490b      	ldr	r1, [pc, #44]	; (8016e40 <etharp_free_entry+0x60>)
 8016e14:	687a      	ldr	r2, [r7, #4]
 8016e16:	4613      	mov	r3, r2
 8016e18:	005b      	lsls	r3, r3, #1
 8016e1a:	4413      	add	r3, r2
 8016e1c:	00db      	lsls	r3, r3, #3
 8016e1e:	440b      	add	r3, r1
 8016e20:	2200      	movs	r2, #0
 8016e22:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016e24:	4906      	ldr	r1, [pc, #24]	; (8016e40 <etharp_free_entry+0x60>)
 8016e26:	687a      	ldr	r2, [r7, #4]
 8016e28:	4613      	mov	r3, r2
 8016e2a:	005b      	lsls	r3, r3, #1
 8016e2c:	4413      	add	r3, r2
 8016e2e:	00db      	lsls	r3, r3, #3
 8016e30:	440b      	add	r3, r1
 8016e32:	3314      	adds	r3, #20
 8016e34:	2200      	movs	r2, #0
 8016e36:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016e38:	bf00      	nop
 8016e3a:	3708      	adds	r7, #8
 8016e3c:	46bd      	mov	sp, r7
 8016e3e:	bd80      	pop	{r7, pc}
 8016e40:	24004164 	.word	0x24004164

08016e44 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016e44:	b580      	push	{r7, lr}
 8016e46:	b082      	sub	sp, #8
 8016e48:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016e4a:	2300      	movs	r3, #0
 8016e4c:	607b      	str	r3, [r7, #4]
 8016e4e:	e096      	b.n	8016f7e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016e50:	494f      	ldr	r1, [pc, #316]	; (8016f90 <etharp_tmr+0x14c>)
 8016e52:	687a      	ldr	r2, [r7, #4]
 8016e54:	4613      	mov	r3, r2
 8016e56:	005b      	lsls	r3, r3, #1
 8016e58:	4413      	add	r3, r2
 8016e5a:	00db      	lsls	r3, r3, #3
 8016e5c:	440b      	add	r3, r1
 8016e5e:	3314      	adds	r3, #20
 8016e60:	781b      	ldrb	r3, [r3, #0]
 8016e62:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016e64:	78fb      	ldrb	r3, [r7, #3]
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	f000 8086 	beq.w	8016f78 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016e6c:	4948      	ldr	r1, [pc, #288]	; (8016f90 <etharp_tmr+0x14c>)
 8016e6e:	687a      	ldr	r2, [r7, #4]
 8016e70:	4613      	mov	r3, r2
 8016e72:	005b      	lsls	r3, r3, #1
 8016e74:	4413      	add	r3, r2
 8016e76:	00db      	lsls	r3, r3, #3
 8016e78:	440b      	add	r3, r1
 8016e7a:	3312      	adds	r3, #18
 8016e7c:	881b      	ldrh	r3, [r3, #0]
 8016e7e:	3301      	adds	r3, #1
 8016e80:	b298      	uxth	r0, r3
 8016e82:	4943      	ldr	r1, [pc, #268]	; (8016f90 <etharp_tmr+0x14c>)
 8016e84:	687a      	ldr	r2, [r7, #4]
 8016e86:	4613      	mov	r3, r2
 8016e88:	005b      	lsls	r3, r3, #1
 8016e8a:	4413      	add	r3, r2
 8016e8c:	00db      	lsls	r3, r3, #3
 8016e8e:	440b      	add	r3, r1
 8016e90:	3312      	adds	r3, #18
 8016e92:	4602      	mov	r2, r0
 8016e94:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016e96:	493e      	ldr	r1, [pc, #248]	; (8016f90 <etharp_tmr+0x14c>)
 8016e98:	687a      	ldr	r2, [r7, #4]
 8016e9a:	4613      	mov	r3, r2
 8016e9c:	005b      	lsls	r3, r3, #1
 8016e9e:	4413      	add	r3, r2
 8016ea0:	00db      	lsls	r3, r3, #3
 8016ea2:	440b      	add	r3, r1
 8016ea4:	3312      	adds	r3, #18
 8016ea6:	881b      	ldrh	r3, [r3, #0]
 8016ea8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016eac:	d215      	bcs.n	8016eda <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016eae:	4938      	ldr	r1, [pc, #224]	; (8016f90 <etharp_tmr+0x14c>)
 8016eb0:	687a      	ldr	r2, [r7, #4]
 8016eb2:	4613      	mov	r3, r2
 8016eb4:	005b      	lsls	r3, r3, #1
 8016eb6:	4413      	add	r3, r2
 8016eb8:	00db      	lsls	r3, r3, #3
 8016eba:	440b      	add	r3, r1
 8016ebc:	3314      	adds	r3, #20
 8016ebe:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016ec0:	2b01      	cmp	r3, #1
 8016ec2:	d10e      	bne.n	8016ee2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016ec4:	4932      	ldr	r1, [pc, #200]	; (8016f90 <etharp_tmr+0x14c>)
 8016ec6:	687a      	ldr	r2, [r7, #4]
 8016ec8:	4613      	mov	r3, r2
 8016eca:	005b      	lsls	r3, r3, #1
 8016ecc:	4413      	add	r3, r2
 8016ece:	00db      	lsls	r3, r3, #3
 8016ed0:	440b      	add	r3, r1
 8016ed2:	3312      	adds	r3, #18
 8016ed4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016ed6:	2b04      	cmp	r3, #4
 8016ed8:	d903      	bls.n	8016ee2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016eda:	6878      	ldr	r0, [r7, #4]
 8016edc:	f7ff ff80 	bl	8016de0 <etharp_free_entry>
 8016ee0:	e04a      	b.n	8016f78 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016ee2:	492b      	ldr	r1, [pc, #172]	; (8016f90 <etharp_tmr+0x14c>)
 8016ee4:	687a      	ldr	r2, [r7, #4]
 8016ee6:	4613      	mov	r3, r2
 8016ee8:	005b      	lsls	r3, r3, #1
 8016eea:	4413      	add	r3, r2
 8016eec:	00db      	lsls	r3, r3, #3
 8016eee:	440b      	add	r3, r1
 8016ef0:	3314      	adds	r3, #20
 8016ef2:	781b      	ldrb	r3, [r3, #0]
 8016ef4:	2b03      	cmp	r3, #3
 8016ef6:	d10a      	bne.n	8016f0e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016ef8:	4925      	ldr	r1, [pc, #148]	; (8016f90 <etharp_tmr+0x14c>)
 8016efa:	687a      	ldr	r2, [r7, #4]
 8016efc:	4613      	mov	r3, r2
 8016efe:	005b      	lsls	r3, r3, #1
 8016f00:	4413      	add	r3, r2
 8016f02:	00db      	lsls	r3, r3, #3
 8016f04:	440b      	add	r3, r1
 8016f06:	3314      	adds	r3, #20
 8016f08:	2204      	movs	r2, #4
 8016f0a:	701a      	strb	r2, [r3, #0]
 8016f0c:	e034      	b.n	8016f78 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016f0e:	4920      	ldr	r1, [pc, #128]	; (8016f90 <etharp_tmr+0x14c>)
 8016f10:	687a      	ldr	r2, [r7, #4]
 8016f12:	4613      	mov	r3, r2
 8016f14:	005b      	lsls	r3, r3, #1
 8016f16:	4413      	add	r3, r2
 8016f18:	00db      	lsls	r3, r3, #3
 8016f1a:	440b      	add	r3, r1
 8016f1c:	3314      	adds	r3, #20
 8016f1e:	781b      	ldrb	r3, [r3, #0]
 8016f20:	2b04      	cmp	r3, #4
 8016f22:	d10a      	bne.n	8016f3a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016f24:	491a      	ldr	r1, [pc, #104]	; (8016f90 <etharp_tmr+0x14c>)
 8016f26:	687a      	ldr	r2, [r7, #4]
 8016f28:	4613      	mov	r3, r2
 8016f2a:	005b      	lsls	r3, r3, #1
 8016f2c:	4413      	add	r3, r2
 8016f2e:	00db      	lsls	r3, r3, #3
 8016f30:	440b      	add	r3, r1
 8016f32:	3314      	adds	r3, #20
 8016f34:	2202      	movs	r2, #2
 8016f36:	701a      	strb	r2, [r3, #0]
 8016f38:	e01e      	b.n	8016f78 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016f3a:	4915      	ldr	r1, [pc, #84]	; (8016f90 <etharp_tmr+0x14c>)
 8016f3c:	687a      	ldr	r2, [r7, #4]
 8016f3e:	4613      	mov	r3, r2
 8016f40:	005b      	lsls	r3, r3, #1
 8016f42:	4413      	add	r3, r2
 8016f44:	00db      	lsls	r3, r3, #3
 8016f46:	440b      	add	r3, r1
 8016f48:	3314      	adds	r3, #20
 8016f4a:	781b      	ldrb	r3, [r3, #0]
 8016f4c:	2b01      	cmp	r3, #1
 8016f4e:	d113      	bne.n	8016f78 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016f50:	490f      	ldr	r1, [pc, #60]	; (8016f90 <etharp_tmr+0x14c>)
 8016f52:	687a      	ldr	r2, [r7, #4]
 8016f54:	4613      	mov	r3, r2
 8016f56:	005b      	lsls	r3, r3, #1
 8016f58:	4413      	add	r3, r2
 8016f5a:	00db      	lsls	r3, r3, #3
 8016f5c:	440b      	add	r3, r1
 8016f5e:	3308      	adds	r3, #8
 8016f60:	6818      	ldr	r0, [r3, #0]
 8016f62:	687a      	ldr	r2, [r7, #4]
 8016f64:	4613      	mov	r3, r2
 8016f66:	005b      	lsls	r3, r3, #1
 8016f68:	4413      	add	r3, r2
 8016f6a:	00db      	lsls	r3, r3, #3
 8016f6c:	4a08      	ldr	r2, [pc, #32]	; (8016f90 <etharp_tmr+0x14c>)
 8016f6e:	4413      	add	r3, r2
 8016f70:	3304      	adds	r3, #4
 8016f72:	4619      	mov	r1, r3
 8016f74:	f000 fe6e 	bl	8017c54 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	3301      	adds	r3, #1
 8016f7c:	607b      	str	r3, [r7, #4]
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	2b09      	cmp	r3, #9
 8016f82:	f77f af65 	ble.w	8016e50 <etharp_tmr+0xc>
      }
    }
  }
}
 8016f86:	bf00      	nop
 8016f88:	bf00      	nop
 8016f8a:	3708      	adds	r7, #8
 8016f8c:	46bd      	mov	sp, r7
 8016f8e:	bd80      	pop	{r7, pc}
 8016f90:	24004164 	.word	0x24004164

08016f94 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016f94:	b580      	push	{r7, lr}
 8016f96:	b08a      	sub	sp, #40	; 0x28
 8016f98:	af00      	add	r7, sp, #0
 8016f9a:	60f8      	str	r0, [r7, #12]
 8016f9c:	460b      	mov	r3, r1
 8016f9e:	607a      	str	r2, [r7, #4]
 8016fa0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016fa2:	230a      	movs	r3, #10
 8016fa4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016fa6:	230a      	movs	r3, #10
 8016fa8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8016faa:	230a      	movs	r3, #10
 8016fac:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8016fae:	2300      	movs	r3, #0
 8016fb0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016fb2:	230a      	movs	r3, #10
 8016fb4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016fb6:	2300      	movs	r3, #0
 8016fb8:	83bb      	strh	r3, [r7, #28]
 8016fba:	2300      	movs	r3, #0
 8016fbc:	837b      	strh	r3, [r7, #26]
 8016fbe:	2300      	movs	r3, #0
 8016fc0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016fc2:	2300      	movs	r3, #0
 8016fc4:	843b      	strh	r3, [r7, #32]
 8016fc6:	e0ae      	b.n	8017126 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016fc8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016fcc:	49a6      	ldr	r1, [pc, #664]	; (8017268 <etharp_find_entry+0x2d4>)
 8016fce:	4613      	mov	r3, r2
 8016fd0:	005b      	lsls	r3, r3, #1
 8016fd2:	4413      	add	r3, r2
 8016fd4:	00db      	lsls	r3, r3, #3
 8016fd6:	440b      	add	r3, r1
 8016fd8:	3314      	adds	r3, #20
 8016fda:	781b      	ldrb	r3, [r3, #0]
 8016fdc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016fde:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016fe2:	2b0a      	cmp	r3, #10
 8016fe4:	d105      	bne.n	8016ff2 <etharp_find_entry+0x5e>
 8016fe6:	7dfb      	ldrb	r3, [r7, #23]
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d102      	bne.n	8016ff2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016fec:	8c3b      	ldrh	r3, [r7, #32]
 8016fee:	847b      	strh	r3, [r7, #34]	; 0x22
 8016ff0:	e095      	b.n	801711e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016ff2:	7dfb      	ldrb	r3, [r7, #23]
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	f000 8092 	beq.w	801711e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016ffa:	7dfb      	ldrb	r3, [r7, #23]
 8016ffc:	2b01      	cmp	r3, #1
 8016ffe:	d009      	beq.n	8017014 <etharp_find_entry+0x80>
 8017000:	7dfb      	ldrb	r3, [r7, #23]
 8017002:	2b01      	cmp	r3, #1
 8017004:	d806      	bhi.n	8017014 <etharp_find_entry+0x80>
 8017006:	4b99      	ldr	r3, [pc, #612]	; (801726c <etharp_find_entry+0x2d8>)
 8017008:	f240 1223 	movw	r2, #291	; 0x123
 801700c:	4998      	ldr	r1, [pc, #608]	; (8017270 <etharp_find_entry+0x2dc>)
 801700e:	4899      	ldr	r0, [pc, #612]	; (8017274 <etharp_find_entry+0x2e0>)
 8017010:	f002 fd10 	bl	8019a34 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8017014:	68fb      	ldr	r3, [r7, #12]
 8017016:	2b00      	cmp	r3, #0
 8017018:	d020      	beq.n	801705c <etharp_find_entry+0xc8>
 801701a:	68fb      	ldr	r3, [r7, #12]
 801701c:	6819      	ldr	r1, [r3, #0]
 801701e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017022:	4891      	ldr	r0, [pc, #580]	; (8017268 <etharp_find_entry+0x2d4>)
 8017024:	4613      	mov	r3, r2
 8017026:	005b      	lsls	r3, r3, #1
 8017028:	4413      	add	r3, r2
 801702a:	00db      	lsls	r3, r3, #3
 801702c:	4403      	add	r3, r0
 801702e:	3304      	adds	r3, #4
 8017030:	681b      	ldr	r3, [r3, #0]
 8017032:	4299      	cmp	r1, r3
 8017034:	d112      	bne.n	801705c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	2b00      	cmp	r3, #0
 801703a:	d00c      	beq.n	8017056 <etharp_find_entry+0xc2>
 801703c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017040:	4989      	ldr	r1, [pc, #548]	; (8017268 <etharp_find_entry+0x2d4>)
 8017042:	4613      	mov	r3, r2
 8017044:	005b      	lsls	r3, r3, #1
 8017046:	4413      	add	r3, r2
 8017048:	00db      	lsls	r3, r3, #3
 801704a:	440b      	add	r3, r1
 801704c:	3308      	adds	r3, #8
 801704e:	681b      	ldr	r3, [r3, #0]
 8017050:	687a      	ldr	r2, [r7, #4]
 8017052:	429a      	cmp	r2, r3
 8017054:	d102      	bne.n	801705c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8017056:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801705a:	e100      	b.n	801725e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801705c:	7dfb      	ldrb	r3, [r7, #23]
 801705e:	2b01      	cmp	r3, #1
 8017060:	d140      	bne.n	80170e4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8017062:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017066:	4980      	ldr	r1, [pc, #512]	; (8017268 <etharp_find_entry+0x2d4>)
 8017068:	4613      	mov	r3, r2
 801706a:	005b      	lsls	r3, r3, #1
 801706c:	4413      	add	r3, r2
 801706e:	00db      	lsls	r3, r3, #3
 8017070:	440b      	add	r3, r1
 8017072:	681b      	ldr	r3, [r3, #0]
 8017074:	2b00      	cmp	r3, #0
 8017076:	d01a      	beq.n	80170ae <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8017078:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801707c:	497a      	ldr	r1, [pc, #488]	; (8017268 <etharp_find_entry+0x2d4>)
 801707e:	4613      	mov	r3, r2
 8017080:	005b      	lsls	r3, r3, #1
 8017082:	4413      	add	r3, r2
 8017084:	00db      	lsls	r3, r3, #3
 8017086:	440b      	add	r3, r1
 8017088:	3312      	adds	r3, #18
 801708a:	881b      	ldrh	r3, [r3, #0]
 801708c:	8bba      	ldrh	r2, [r7, #28]
 801708e:	429a      	cmp	r2, r3
 8017090:	d845      	bhi.n	801711e <etharp_find_entry+0x18a>
            old_queue = i;
 8017092:	8c3b      	ldrh	r3, [r7, #32]
 8017094:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8017096:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801709a:	4973      	ldr	r1, [pc, #460]	; (8017268 <etharp_find_entry+0x2d4>)
 801709c:	4613      	mov	r3, r2
 801709e:	005b      	lsls	r3, r3, #1
 80170a0:	4413      	add	r3, r2
 80170a2:	00db      	lsls	r3, r3, #3
 80170a4:	440b      	add	r3, r1
 80170a6:	3312      	adds	r3, #18
 80170a8:	881b      	ldrh	r3, [r3, #0]
 80170aa:	83bb      	strh	r3, [r7, #28]
 80170ac:	e037      	b.n	801711e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80170ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80170b2:	496d      	ldr	r1, [pc, #436]	; (8017268 <etharp_find_entry+0x2d4>)
 80170b4:	4613      	mov	r3, r2
 80170b6:	005b      	lsls	r3, r3, #1
 80170b8:	4413      	add	r3, r2
 80170ba:	00db      	lsls	r3, r3, #3
 80170bc:	440b      	add	r3, r1
 80170be:	3312      	adds	r3, #18
 80170c0:	881b      	ldrh	r3, [r3, #0]
 80170c2:	8b7a      	ldrh	r2, [r7, #26]
 80170c4:	429a      	cmp	r2, r3
 80170c6:	d82a      	bhi.n	801711e <etharp_find_entry+0x18a>
            old_pending = i;
 80170c8:	8c3b      	ldrh	r3, [r7, #32]
 80170ca:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80170cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80170d0:	4965      	ldr	r1, [pc, #404]	; (8017268 <etharp_find_entry+0x2d4>)
 80170d2:	4613      	mov	r3, r2
 80170d4:	005b      	lsls	r3, r3, #1
 80170d6:	4413      	add	r3, r2
 80170d8:	00db      	lsls	r3, r3, #3
 80170da:	440b      	add	r3, r1
 80170dc:	3312      	adds	r3, #18
 80170de:	881b      	ldrh	r3, [r3, #0]
 80170e0:	837b      	strh	r3, [r7, #26]
 80170e2:	e01c      	b.n	801711e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80170e4:	7dfb      	ldrb	r3, [r7, #23]
 80170e6:	2b01      	cmp	r3, #1
 80170e8:	d919      	bls.n	801711e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80170ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80170ee:	495e      	ldr	r1, [pc, #376]	; (8017268 <etharp_find_entry+0x2d4>)
 80170f0:	4613      	mov	r3, r2
 80170f2:	005b      	lsls	r3, r3, #1
 80170f4:	4413      	add	r3, r2
 80170f6:	00db      	lsls	r3, r3, #3
 80170f8:	440b      	add	r3, r1
 80170fa:	3312      	adds	r3, #18
 80170fc:	881b      	ldrh	r3, [r3, #0]
 80170fe:	8b3a      	ldrh	r2, [r7, #24]
 8017100:	429a      	cmp	r2, r3
 8017102:	d80c      	bhi.n	801711e <etharp_find_entry+0x18a>
            old_stable = i;
 8017104:	8c3b      	ldrh	r3, [r7, #32]
 8017106:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8017108:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801710c:	4956      	ldr	r1, [pc, #344]	; (8017268 <etharp_find_entry+0x2d4>)
 801710e:	4613      	mov	r3, r2
 8017110:	005b      	lsls	r3, r3, #1
 8017112:	4413      	add	r3, r2
 8017114:	00db      	lsls	r3, r3, #3
 8017116:	440b      	add	r3, r1
 8017118:	3312      	adds	r3, #18
 801711a:	881b      	ldrh	r3, [r3, #0]
 801711c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801711e:	8c3b      	ldrh	r3, [r7, #32]
 8017120:	3301      	adds	r3, #1
 8017122:	b29b      	uxth	r3, r3
 8017124:	843b      	strh	r3, [r7, #32]
 8017126:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801712a:	2b09      	cmp	r3, #9
 801712c:	f77f af4c 	ble.w	8016fc8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8017130:	7afb      	ldrb	r3, [r7, #11]
 8017132:	f003 0302 	and.w	r3, r3, #2
 8017136:	2b00      	cmp	r3, #0
 8017138:	d108      	bne.n	801714c <etharp_find_entry+0x1b8>
 801713a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801713e:	2b0a      	cmp	r3, #10
 8017140:	d107      	bne.n	8017152 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8017142:	7afb      	ldrb	r3, [r7, #11]
 8017144:	f003 0301 	and.w	r3, r3, #1
 8017148:	2b00      	cmp	r3, #0
 801714a:	d102      	bne.n	8017152 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801714c:	f04f 33ff 	mov.w	r3, #4294967295
 8017150:	e085      	b.n	801725e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8017152:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017156:	2b09      	cmp	r3, #9
 8017158:	dc02      	bgt.n	8017160 <etharp_find_entry+0x1cc>
    i = empty;
 801715a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801715c:	843b      	strh	r3, [r7, #32]
 801715e:	e039      	b.n	80171d4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8017160:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8017164:	2b09      	cmp	r3, #9
 8017166:	dc14      	bgt.n	8017192 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8017168:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801716a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801716c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017170:	493d      	ldr	r1, [pc, #244]	; (8017268 <etharp_find_entry+0x2d4>)
 8017172:	4613      	mov	r3, r2
 8017174:	005b      	lsls	r3, r3, #1
 8017176:	4413      	add	r3, r2
 8017178:	00db      	lsls	r3, r3, #3
 801717a:	440b      	add	r3, r1
 801717c:	681b      	ldr	r3, [r3, #0]
 801717e:	2b00      	cmp	r3, #0
 8017180:	d018      	beq.n	80171b4 <etharp_find_entry+0x220>
 8017182:	4b3a      	ldr	r3, [pc, #232]	; (801726c <etharp_find_entry+0x2d8>)
 8017184:	f240 126d 	movw	r2, #365	; 0x16d
 8017188:	493b      	ldr	r1, [pc, #236]	; (8017278 <etharp_find_entry+0x2e4>)
 801718a:	483a      	ldr	r0, [pc, #232]	; (8017274 <etharp_find_entry+0x2e0>)
 801718c:	f002 fc52 	bl	8019a34 <iprintf>
 8017190:	e010      	b.n	80171b4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8017192:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8017196:	2b09      	cmp	r3, #9
 8017198:	dc02      	bgt.n	80171a0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801719a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801719c:	843b      	strh	r3, [r7, #32]
 801719e:	e009      	b.n	80171b4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80171a0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80171a4:	2b09      	cmp	r3, #9
 80171a6:	dc02      	bgt.n	80171ae <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80171a8:	8bfb      	ldrh	r3, [r7, #30]
 80171aa:	843b      	strh	r3, [r7, #32]
 80171ac:	e002      	b.n	80171b4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80171ae:	f04f 33ff 	mov.w	r3, #4294967295
 80171b2:	e054      	b.n	801725e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80171b4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80171b8:	2b09      	cmp	r3, #9
 80171ba:	dd06      	ble.n	80171ca <etharp_find_entry+0x236>
 80171bc:	4b2b      	ldr	r3, [pc, #172]	; (801726c <etharp_find_entry+0x2d8>)
 80171be:	f240 127f 	movw	r2, #383	; 0x17f
 80171c2:	492e      	ldr	r1, [pc, #184]	; (801727c <etharp_find_entry+0x2e8>)
 80171c4:	482b      	ldr	r0, [pc, #172]	; (8017274 <etharp_find_entry+0x2e0>)
 80171c6:	f002 fc35 	bl	8019a34 <iprintf>
    etharp_free_entry(i);
 80171ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80171ce:	4618      	mov	r0, r3
 80171d0:	f7ff fe06 	bl	8016de0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80171d4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80171d8:	2b09      	cmp	r3, #9
 80171da:	dd06      	ble.n	80171ea <etharp_find_entry+0x256>
 80171dc:	4b23      	ldr	r3, [pc, #140]	; (801726c <etharp_find_entry+0x2d8>)
 80171de:	f240 1283 	movw	r2, #387	; 0x183
 80171e2:	4926      	ldr	r1, [pc, #152]	; (801727c <etharp_find_entry+0x2e8>)
 80171e4:	4823      	ldr	r0, [pc, #140]	; (8017274 <etharp_find_entry+0x2e0>)
 80171e6:	f002 fc25 	bl	8019a34 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80171ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80171ee:	491e      	ldr	r1, [pc, #120]	; (8017268 <etharp_find_entry+0x2d4>)
 80171f0:	4613      	mov	r3, r2
 80171f2:	005b      	lsls	r3, r3, #1
 80171f4:	4413      	add	r3, r2
 80171f6:	00db      	lsls	r3, r3, #3
 80171f8:	440b      	add	r3, r1
 80171fa:	3314      	adds	r3, #20
 80171fc:	781b      	ldrb	r3, [r3, #0]
 80171fe:	2b00      	cmp	r3, #0
 8017200:	d006      	beq.n	8017210 <etharp_find_entry+0x27c>
 8017202:	4b1a      	ldr	r3, [pc, #104]	; (801726c <etharp_find_entry+0x2d8>)
 8017204:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8017208:	491d      	ldr	r1, [pc, #116]	; (8017280 <etharp_find_entry+0x2ec>)
 801720a:	481a      	ldr	r0, [pc, #104]	; (8017274 <etharp_find_entry+0x2e0>)
 801720c:	f002 fc12 	bl	8019a34 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8017210:	68fb      	ldr	r3, [r7, #12]
 8017212:	2b00      	cmp	r3, #0
 8017214:	d00b      	beq.n	801722e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8017216:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801721a:	68fb      	ldr	r3, [r7, #12]
 801721c:	6819      	ldr	r1, [r3, #0]
 801721e:	4812      	ldr	r0, [pc, #72]	; (8017268 <etharp_find_entry+0x2d4>)
 8017220:	4613      	mov	r3, r2
 8017222:	005b      	lsls	r3, r3, #1
 8017224:	4413      	add	r3, r2
 8017226:	00db      	lsls	r3, r3, #3
 8017228:	4403      	add	r3, r0
 801722a:	3304      	adds	r3, #4
 801722c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801722e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017232:	490d      	ldr	r1, [pc, #52]	; (8017268 <etharp_find_entry+0x2d4>)
 8017234:	4613      	mov	r3, r2
 8017236:	005b      	lsls	r3, r3, #1
 8017238:	4413      	add	r3, r2
 801723a:	00db      	lsls	r3, r3, #3
 801723c:	440b      	add	r3, r1
 801723e:	3312      	adds	r3, #18
 8017240:	2200      	movs	r2, #0
 8017242:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8017244:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017248:	4907      	ldr	r1, [pc, #28]	; (8017268 <etharp_find_entry+0x2d4>)
 801724a:	4613      	mov	r3, r2
 801724c:	005b      	lsls	r3, r3, #1
 801724e:	4413      	add	r3, r2
 8017250:	00db      	lsls	r3, r3, #3
 8017252:	440b      	add	r3, r1
 8017254:	3308      	adds	r3, #8
 8017256:	687a      	ldr	r2, [r7, #4]
 8017258:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801725a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801725e:	4618      	mov	r0, r3
 8017260:	3728      	adds	r7, #40	; 0x28
 8017262:	46bd      	mov	sp, r7
 8017264:	bd80      	pop	{r7, pc}
 8017266:	bf00      	nop
 8017268:	24004164 	.word	0x24004164
 801726c:	0801ceb8 	.word	0x0801ceb8
 8017270:	0801cef0 	.word	0x0801cef0
 8017274:	0801cf30 	.word	0x0801cf30
 8017278:	0801cf58 	.word	0x0801cf58
 801727c:	0801cf70 	.word	0x0801cf70
 8017280:	0801cf84 	.word	0x0801cf84

08017284 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8017284:	b580      	push	{r7, lr}
 8017286:	b088      	sub	sp, #32
 8017288:	af02      	add	r7, sp, #8
 801728a:	60f8      	str	r0, [r7, #12]
 801728c:	60b9      	str	r1, [r7, #8]
 801728e:	607a      	str	r2, [r7, #4]
 8017290:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8017292:	68fb      	ldr	r3, [r7, #12]
 8017294:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017298:	2b06      	cmp	r3, #6
 801729a:	d006      	beq.n	80172aa <etharp_update_arp_entry+0x26>
 801729c:	4b48      	ldr	r3, [pc, #288]	; (80173c0 <etharp_update_arp_entry+0x13c>)
 801729e:	f240 12a9 	movw	r2, #425	; 0x1a9
 80172a2:	4948      	ldr	r1, [pc, #288]	; (80173c4 <etharp_update_arp_entry+0x140>)
 80172a4:	4848      	ldr	r0, [pc, #288]	; (80173c8 <etharp_update_arp_entry+0x144>)
 80172a6:	f002 fbc5 	bl	8019a34 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80172aa:	68bb      	ldr	r3, [r7, #8]
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d012      	beq.n	80172d6 <etharp_update_arp_entry+0x52>
 80172b0:	68bb      	ldr	r3, [r7, #8]
 80172b2:	681b      	ldr	r3, [r3, #0]
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d00e      	beq.n	80172d6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80172b8:	68bb      	ldr	r3, [r7, #8]
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	68f9      	ldr	r1, [r7, #12]
 80172be:	4618      	mov	r0, r3
 80172c0:	f001 f924 	bl	801850c <ip4_addr_isbroadcast_u32>
 80172c4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d105      	bne.n	80172d6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80172ca:	68bb      	ldr	r3, [r7, #8]
 80172cc:	681b      	ldr	r3, [r3, #0]
 80172ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80172d2:	2be0      	cmp	r3, #224	; 0xe0
 80172d4:	d102      	bne.n	80172dc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80172d6:	f06f 030f 	mvn.w	r3, #15
 80172da:	e06c      	b.n	80173b6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80172dc:	78fb      	ldrb	r3, [r7, #3]
 80172de:	68fa      	ldr	r2, [r7, #12]
 80172e0:	4619      	mov	r1, r3
 80172e2:	68b8      	ldr	r0, [r7, #8]
 80172e4:	f7ff fe56 	bl	8016f94 <etharp_find_entry>
 80172e8:	4603      	mov	r3, r0
 80172ea:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80172ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	da02      	bge.n	80172fa <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80172f4:	8afb      	ldrh	r3, [r7, #22]
 80172f6:	b25b      	sxtb	r3, r3
 80172f8:	e05d      	b.n	80173b6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80172fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80172fe:	4933      	ldr	r1, [pc, #204]	; (80173cc <etharp_update_arp_entry+0x148>)
 8017300:	4613      	mov	r3, r2
 8017302:	005b      	lsls	r3, r3, #1
 8017304:	4413      	add	r3, r2
 8017306:	00db      	lsls	r3, r3, #3
 8017308:	440b      	add	r3, r1
 801730a:	3314      	adds	r3, #20
 801730c:	2202      	movs	r2, #2
 801730e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8017310:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017314:	492d      	ldr	r1, [pc, #180]	; (80173cc <etharp_update_arp_entry+0x148>)
 8017316:	4613      	mov	r3, r2
 8017318:	005b      	lsls	r3, r3, #1
 801731a:	4413      	add	r3, r2
 801731c:	00db      	lsls	r3, r3, #3
 801731e:	440b      	add	r3, r1
 8017320:	3308      	adds	r3, #8
 8017322:	68fa      	ldr	r2, [r7, #12]
 8017324:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8017326:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801732a:	4613      	mov	r3, r2
 801732c:	005b      	lsls	r3, r3, #1
 801732e:	4413      	add	r3, r2
 8017330:	00db      	lsls	r3, r3, #3
 8017332:	3308      	adds	r3, #8
 8017334:	4a25      	ldr	r2, [pc, #148]	; (80173cc <etharp_update_arp_entry+0x148>)
 8017336:	4413      	add	r3, r2
 8017338:	3304      	adds	r3, #4
 801733a:	2206      	movs	r2, #6
 801733c:	6879      	ldr	r1, [r7, #4]
 801733e:	4618      	mov	r0, r3
 8017340:	f002 fb07 	bl	8019952 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8017344:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017348:	4920      	ldr	r1, [pc, #128]	; (80173cc <etharp_update_arp_entry+0x148>)
 801734a:	4613      	mov	r3, r2
 801734c:	005b      	lsls	r3, r3, #1
 801734e:	4413      	add	r3, r2
 8017350:	00db      	lsls	r3, r3, #3
 8017352:	440b      	add	r3, r1
 8017354:	3312      	adds	r3, #18
 8017356:	2200      	movs	r2, #0
 8017358:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801735a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801735e:	491b      	ldr	r1, [pc, #108]	; (80173cc <etharp_update_arp_entry+0x148>)
 8017360:	4613      	mov	r3, r2
 8017362:	005b      	lsls	r3, r3, #1
 8017364:	4413      	add	r3, r2
 8017366:	00db      	lsls	r3, r3, #3
 8017368:	440b      	add	r3, r1
 801736a:	681b      	ldr	r3, [r3, #0]
 801736c:	2b00      	cmp	r3, #0
 801736e:	d021      	beq.n	80173b4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8017370:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017374:	4915      	ldr	r1, [pc, #84]	; (80173cc <etharp_update_arp_entry+0x148>)
 8017376:	4613      	mov	r3, r2
 8017378:	005b      	lsls	r3, r3, #1
 801737a:	4413      	add	r3, r2
 801737c:	00db      	lsls	r3, r3, #3
 801737e:	440b      	add	r3, r1
 8017380:	681b      	ldr	r3, [r3, #0]
 8017382:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8017384:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017388:	4910      	ldr	r1, [pc, #64]	; (80173cc <etharp_update_arp_entry+0x148>)
 801738a:	4613      	mov	r3, r2
 801738c:	005b      	lsls	r3, r3, #1
 801738e:	4413      	add	r3, r2
 8017390:	00db      	lsls	r3, r3, #3
 8017392:	440b      	add	r3, r1
 8017394:	2200      	movs	r2, #0
 8017396:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801739e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80173a2:	9300      	str	r3, [sp, #0]
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	6939      	ldr	r1, [r7, #16]
 80173a8:	68f8      	ldr	r0, [r7, #12]
 80173aa:	f002 f849 	bl	8019440 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80173ae:	6938      	ldr	r0, [r7, #16]
 80173b0:	f7f8 fee8 	bl	8010184 <pbuf_free>
  }
  return ERR_OK;
 80173b4:	2300      	movs	r3, #0
}
 80173b6:	4618      	mov	r0, r3
 80173b8:	3718      	adds	r7, #24
 80173ba:	46bd      	mov	sp, r7
 80173bc:	bd80      	pop	{r7, pc}
 80173be:	bf00      	nop
 80173c0:	0801ceb8 	.word	0x0801ceb8
 80173c4:	0801cfb0 	.word	0x0801cfb0
 80173c8:	0801cf30 	.word	0x0801cf30
 80173cc:	24004164 	.word	0x24004164

080173d0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80173d0:	b580      	push	{r7, lr}
 80173d2:	b084      	sub	sp, #16
 80173d4:	af00      	add	r7, sp, #0
 80173d6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80173d8:	2300      	movs	r3, #0
 80173da:	60fb      	str	r3, [r7, #12]
 80173dc:	e01e      	b.n	801741c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80173de:	4913      	ldr	r1, [pc, #76]	; (801742c <etharp_cleanup_netif+0x5c>)
 80173e0:	68fa      	ldr	r2, [r7, #12]
 80173e2:	4613      	mov	r3, r2
 80173e4:	005b      	lsls	r3, r3, #1
 80173e6:	4413      	add	r3, r2
 80173e8:	00db      	lsls	r3, r3, #3
 80173ea:	440b      	add	r3, r1
 80173ec:	3314      	adds	r3, #20
 80173ee:	781b      	ldrb	r3, [r3, #0]
 80173f0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80173f2:	7afb      	ldrb	r3, [r7, #11]
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	d00e      	beq.n	8017416 <etharp_cleanup_netif+0x46>
 80173f8:	490c      	ldr	r1, [pc, #48]	; (801742c <etharp_cleanup_netif+0x5c>)
 80173fa:	68fa      	ldr	r2, [r7, #12]
 80173fc:	4613      	mov	r3, r2
 80173fe:	005b      	lsls	r3, r3, #1
 8017400:	4413      	add	r3, r2
 8017402:	00db      	lsls	r3, r3, #3
 8017404:	440b      	add	r3, r1
 8017406:	3308      	adds	r3, #8
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	687a      	ldr	r2, [r7, #4]
 801740c:	429a      	cmp	r2, r3
 801740e:	d102      	bne.n	8017416 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8017410:	68f8      	ldr	r0, [r7, #12]
 8017412:	f7ff fce5 	bl	8016de0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017416:	68fb      	ldr	r3, [r7, #12]
 8017418:	3301      	adds	r3, #1
 801741a:	60fb      	str	r3, [r7, #12]
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	2b09      	cmp	r3, #9
 8017420:	dddd      	ble.n	80173de <etharp_cleanup_netif+0xe>
    }
  }
}
 8017422:	bf00      	nop
 8017424:	bf00      	nop
 8017426:	3710      	adds	r7, #16
 8017428:	46bd      	mov	sp, r7
 801742a:	bd80      	pop	{r7, pc}
 801742c:	24004164 	.word	0x24004164

08017430 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8017430:	b5b0      	push	{r4, r5, r7, lr}
 8017432:	b08a      	sub	sp, #40	; 0x28
 8017434:	af04      	add	r7, sp, #16
 8017436:	6078      	str	r0, [r7, #4]
 8017438:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801743a:	683b      	ldr	r3, [r7, #0]
 801743c:	2b00      	cmp	r3, #0
 801743e:	d107      	bne.n	8017450 <etharp_input+0x20>
 8017440:	4b3d      	ldr	r3, [pc, #244]	; (8017538 <etharp_input+0x108>)
 8017442:	f240 228a 	movw	r2, #650	; 0x28a
 8017446:	493d      	ldr	r1, [pc, #244]	; (801753c <etharp_input+0x10c>)
 8017448:	483d      	ldr	r0, [pc, #244]	; (8017540 <etharp_input+0x110>)
 801744a:	f002 faf3 	bl	8019a34 <iprintf>
 801744e:	e06f      	b.n	8017530 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	685b      	ldr	r3, [r3, #4]
 8017454:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017456:	693b      	ldr	r3, [r7, #16]
 8017458:	881b      	ldrh	r3, [r3, #0]
 801745a:	b29b      	uxth	r3, r3
 801745c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017460:	d10c      	bne.n	801747c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017462:	693b      	ldr	r3, [r7, #16]
 8017464:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017466:	2b06      	cmp	r3, #6
 8017468:	d108      	bne.n	801747c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801746a:	693b      	ldr	r3, [r7, #16]
 801746c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801746e:	2b04      	cmp	r3, #4
 8017470:	d104      	bne.n	801747c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8017472:	693b      	ldr	r3, [r7, #16]
 8017474:	885b      	ldrh	r3, [r3, #2]
 8017476:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017478:	2b08      	cmp	r3, #8
 801747a:	d003      	beq.n	8017484 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801747c:	6878      	ldr	r0, [r7, #4]
 801747e:	f7f8 fe81 	bl	8010184 <pbuf_free>
    return;
 8017482:	e055      	b.n	8017530 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8017484:	693b      	ldr	r3, [r7, #16]
 8017486:	330e      	adds	r3, #14
 8017488:	681b      	ldr	r3, [r3, #0]
 801748a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801748c:	693b      	ldr	r3, [r7, #16]
 801748e:	3318      	adds	r3, #24
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017494:	683b      	ldr	r3, [r7, #0]
 8017496:	3304      	adds	r3, #4
 8017498:	681b      	ldr	r3, [r3, #0]
 801749a:	2b00      	cmp	r3, #0
 801749c:	d102      	bne.n	80174a4 <etharp_input+0x74>
    for_us = 0;
 801749e:	2300      	movs	r3, #0
 80174a0:	75fb      	strb	r3, [r7, #23]
 80174a2:	e009      	b.n	80174b8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80174a4:	68ba      	ldr	r2, [r7, #8]
 80174a6:	683b      	ldr	r3, [r7, #0]
 80174a8:	3304      	adds	r3, #4
 80174aa:	681b      	ldr	r3, [r3, #0]
 80174ac:	429a      	cmp	r2, r3
 80174ae:	bf0c      	ite	eq
 80174b0:	2301      	moveq	r3, #1
 80174b2:	2300      	movne	r3, #0
 80174b4:	b2db      	uxtb	r3, r3
 80174b6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80174b8:	693b      	ldr	r3, [r7, #16]
 80174ba:	f103 0208 	add.w	r2, r3, #8
 80174be:	7dfb      	ldrb	r3, [r7, #23]
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d001      	beq.n	80174c8 <etharp_input+0x98>
 80174c4:	2301      	movs	r3, #1
 80174c6:	e000      	b.n	80174ca <etharp_input+0x9a>
 80174c8:	2302      	movs	r3, #2
 80174ca:	f107 010c 	add.w	r1, r7, #12
 80174ce:	6838      	ldr	r0, [r7, #0]
 80174d0:	f7ff fed8 	bl	8017284 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80174d4:	693b      	ldr	r3, [r7, #16]
 80174d6:	88db      	ldrh	r3, [r3, #6]
 80174d8:	b29b      	uxth	r3, r3
 80174da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80174de:	d003      	beq.n	80174e8 <etharp_input+0xb8>
 80174e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80174e4:	d01e      	beq.n	8017524 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80174e6:	e020      	b.n	801752a <etharp_input+0xfa>
      if (for_us) {
 80174e8:	7dfb      	ldrb	r3, [r7, #23]
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d01c      	beq.n	8017528 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80174ee:	683b      	ldr	r3, [r7, #0]
 80174f0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80174f4:	693b      	ldr	r3, [r7, #16]
 80174f6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80174fa:	683b      	ldr	r3, [r7, #0]
 80174fc:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8017500:	683b      	ldr	r3, [r7, #0]
 8017502:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8017504:	693a      	ldr	r2, [r7, #16]
 8017506:	3208      	adds	r2, #8
        etharp_raw(netif,
 8017508:	2102      	movs	r1, #2
 801750a:	9103      	str	r1, [sp, #12]
 801750c:	f107 010c 	add.w	r1, r7, #12
 8017510:	9102      	str	r1, [sp, #8]
 8017512:	9201      	str	r2, [sp, #4]
 8017514:	9300      	str	r3, [sp, #0]
 8017516:	462b      	mov	r3, r5
 8017518:	4622      	mov	r2, r4
 801751a:	4601      	mov	r1, r0
 801751c:	6838      	ldr	r0, [r7, #0]
 801751e:	f000 faeb 	bl	8017af8 <etharp_raw>
      break;
 8017522:	e001      	b.n	8017528 <etharp_input+0xf8>
      break;
 8017524:	bf00      	nop
 8017526:	e000      	b.n	801752a <etharp_input+0xfa>
      break;
 8017528:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801752a:	6878      	ldr	r0, [r7, #4]
 801752c:	f7f8 fe2a 	bl	8010184 <pbuf_free>
}
 8017530:	3718      	adds	r7, #24
 8017532:	46bd      	mov	sp, r7
 8017534:	bdb0      	pop	{r4, r5, r7, pc}
 8017536:	bf00      	nop
 8017538:	0801ceb8 	.word	0x0801ceb8
 801753c:	0801d008 	.word	0x0801d008
 8017540:	0801cf30 	.word	0x0801cf30

08017544 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8017544:	b580      	push	{r7, lr}
 8017546:	b086      	sub	sp, #24
 8017548:	af02      	add	r7, sp, #8
 801754a:	60f8      	str	r0, [r7, #12]
 801754c:	60b9      	str	r1, [r7, #8]
 801754e:	4613      	mov	r3, r2
 8017550:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8017552:	79fa      	ldrb	r2, [r7, #7]
 8017554:	4944      	ldr	r1, [pc, #272]	; (8017668 <etharp_output_to_arp_index+0x124>)
 8017556:	4613      	mov	r3, r2
 8017558:	005b      	lsls	r3, r3, #1
 801755a:	4413      	add	r3, r2
 801755c:	00db      	lsls	r3, r3, #3
 801755e:	440b      	add	r3, r1
 8017560:	3314      	adds	r3, #20
 8017562:	781b      	ldrb	r3, [r3, #0]
 8017564:	2b01      	cmp	r3, #1
 8017566:	d806      	bhi.n	8017576 <etharp_output_to_arp_index+0x32>
 8017568:	4b40      	ldr	r3, [pc, #256]	; (801766c <etharp_output_to_arp_index+0x128>)
 801756a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801756e:	4940      	ldr	r1, [pc, #256]	; (8017670 <etharp_output_to_arp_index+0x12c>)
 8017570:	4840      	ldr	r0, [pc, #256]	; (8017674 <etharp_output_to_arp_index+0x130>)
 8017572:	f002 fa5f 	bl	8019a34 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8017576:	79fa      	ldrb	r2, [r7, #7]
 8017578:	493b      	ldr	r1, [pc, #236]	; (8017668 <etharp_output_to_arp_index+0x124>)
 801757a:	4613      	mov	r3, r2
 801757c:	005b      	lsls	r3, r3, #1
 801757e:	4413      	add	r3, r2
 8017580:	00db      	lsls	r3, r3, #3
 8017582:	440b      	add	r3, r1
 8017584:	3314      	adds	r3, #20
 8017586:	781b      	ldrb	r3, [r3, #0]
 8017588:	2b02      	cmp	r3, #2
 801758a:	d153      	bne.n	8017634 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801758c:	79fa      	ldrb	r2, [r7, #7]
 801758e:	4936      	ldr	r1, [pc, #216]	; (8017668 <etharp_output_to_arp_index+0x124>)
 8017590:	4613      	mov	r3, r2
 8017592:	005b      	lsls	r3, r3, #1
 8017594:	4413      	add	r3, r2
 8017596:	00db      	lsls	r3, r3, #3
 8017598:	440b      	add	r3, r1
 801759a:	3312      	adds	r3, #18
 801759c:	881b      	ldrh	r3, [r3, #0]
 801759e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80175a2:	d919      	bls.n	80175d8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80175a4:	79fa      	ldrb	r2, [r7, #7]
 80175a6:	4613      	mov	r3, r2
 80175a8:	005b      	lsls	r3, r3, #1
 80175aa:	4413      	add	r3, r2
 80175ac:	00db      	lsls	r3, r3, #3
 80175ae:	4a2e      	ldr	r2, [pc, #184]	; (8017668 <etharp_output_to_arp_index+0x124>)
 80175b0:	4413      	add	r3, r2
 80175b2:	3304      	adds	r3, #4
 80175b4:	4619      	mov	r1, r3
 80175b6:	68f8      	ldr	r0, [r7, #12]
 80175b8:	f000 fb4c 	bl	8017c54 <etharp_request>
 80175bc:	4603      	mov	r3, r0
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d138      	bne.n	8017634 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80175c2:	79fa      	ldrb	r2, [r7, #7]
 80175c4:	4928      	ldr	r1, [pc, #160]	; (8017668 <etharp_output_to_arp_index+0x124>)
 80175c6:	4613      	mov	r3, r2
 80175c8:	005b      	lsls	r3, r3, #1
 80175ca:	4413      	add	r3, r2
 80175cc:	00db      	lsls	r3, r3, #3
 80175ce:	440b      	add	r3, r1
 80175d0:	3314      	adds	r3, #20
 80175d2:	2203      	movs	r2, #3
 80175d4:	701a      	strb	r2, [r3, #0]
 80175d6:	e02d      	b.n	8017634 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80175d8:	79fa      	ldrb	r2, [r7, #7]
 80175da:	4923      	ldr	r1, [pc, #140]	; (8017668 <etharp_output_to_arp_index+0x124>)
 80175dc:	4613      	mov	r3, r2
 80175de:	005b      	lsls	r3, r3, #1
 80175e0:	4413      	add	r3, r2
 80175e2:	00db      	lsls	r3, r3, #3
 80175e4:	440b      	add	r3, r1
 80175e6:	3312      	adds	r3, #18
 80175e8:	881b      	ldrh	r3, [r3, #0]
 80175ea:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80175ee:	d321      	bcc.n	8017634 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80175f0:	79fa      	ldrb	r2, [r7, #7]
 80175f2:	4613      	mov	r3, r2
 80175f4:	005b      	lsls	r3, r3, #1
 80175f6:	4413      	add	r3, r2
 80175f8:	00db      	lsls	r3, r3, #3
 80175fa:	4a1b      	ldr	r2, [pc, #108]	; (8017668 <etharp_output_to_arp_index+0x124>)
 80175fc:	4413      	add	r3, r2
 80175fe:	1d19      	adds	r1, r3, #4
 8017600:	79fa      	ldrb	r2, [r7, #7]
 8017602:	4613      	mov	r3, r2
 8017604:	005b      	lsls	r3, r3, #1
 8017606:	4413      	add	r3, r2
 8017608:	00db      	lsls	r3, r3, #3
 801760a:	3308      	adds	r3, #8
 801760c:	4a16      	ldr	r2, [pc, #88]	; (8017668 <etharp_output_to_arp_index+0x124>)
 801760e:	4413      	add	r3, r2
 8017610:	3304      	adds	r3, #4
 8017612:	461a      	mov	r2, r3
 8017614:	68f8      	ldr	r0, [r7, #12]
 8017616:	f000 fafb 	bl	8017c10 <etharp_request_dst>
 801761a:	4603      	mov	r3, r0
 801761c:	2b00      	cmp	r3, #0
 801761e:	d109      	bne.n	8017634 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017620:	79fa      	ldrb	r2, [r7, #7]
 8017622:	4911      	ldr	r1, [pc, #68]	; (8017668 <etharp_output_to_arp_index+0x124>)
 8017624:	4613      	mov	r3, r2
 8017626:	005b      	lsls	r3, r3, #1
 8017628:	4413      	add	r3, r2
 801762a:	00db      	lsls	r3, r3, #3
 801762c:	440b      	add	r3, r1
 801762e:	3314      	adds	r3, #20
 8017630:	2203      	movs	r2, #3
 8017632:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8017634:	68fb      	ldr	r3, [r7, #12]
 8017636:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801763a:	79fa      	ldrb	r2, [r7, #7]
 801763c:	4613      	mov	r3, r2
 801763e:	005b      	lsls	r3, r3, #1
 8017640:	4413      	add	r3, r2
 8017642:	00db      	lsls	r3, r3, #3
 8017644:	3308      	adds	r3, #8
 8017646:	4a08      	ldr	r2, [pc, #32]	; (8017668 <etharp_output_to_arp_index+0x124>)
 8017648:	4413      	add	r3, r2
 801764a:	3304      	adds	r3, #4
 801764c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017650:	9200      	str	r2, [sp, #0]
 8017652:	460a      	mov	r2, r1
 8017654:	68b9      	ldr	r1, [r7, #8]
 8017656:	68f8      	ldr	r0, [r7, #12]
 8017658:	f001 fef2 	bl	8019440 <ethernet_output>
 801765c:	4603      	mov	r3, r0
}
 801765e:	4618      	mov	r0, r3
 8017660:	3710      	adds	r7, #16
 8017662:	46bd      	mov	sp, r7
 8017664:	bd80      	pop	{r7, pc}
 8017666:	bf00      	nop
 8017668:	24004164 	.word	0x24004164
 801766c:	0801ceb8 	.word	0x0801ceb8
 8017670:	0801d028 	.word	0x0801d028
 8017674:	0801cf30 	.word	0x0801cf30

08017678 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8017678:	b580      	push	{r7, lr}
 801767a:	b08a      	sub	sp, #40	; 0x28
 801767c:	af02      	add	r7, sp, #8
 801767e:	60f8      	str	r0, [r7, #12]
 8017680:	60b9      	str	r1, [r7, #8]
 8017682:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	2b00      	cmp	r3, #0
 801768c:	d106      	bne.n	801769c <etharp_output+0x24>
 801768e:	4b73      	ldr	r3, [pc, #460]	; (801785c <etharp_output+0x1e4>)
 8017690:	f240 321e 	movw	r2, #798	; 0x31e
 8017694:	4972      	ldr	r1, [pc, #456]	; (8017860 <etharp_output+0x1e8>)
 8017696:	4873      	ldr	r0, [pc, #460]	; (8017864 <etharp_output+0x1ec>)
 8017698:	f002 f9cc 	bl	8019a34 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801769c:	68bb      	ldr	r3, [r7, #8]
 801769e:	2b00      	cmp	r3, #0
 80176a0:	d106      	bne.n	80176b0 <etharp_output+0x38>
 80176a2:	4b6e      	ldr	r3, [pc, #440]	; (801785c <etharp_output+0x1e4>)
 80176a4:	f240 321f 	movw	r2, #799	; 0x31f
 80176a8:	496f      	ldr	r1, [pc, #444]	; (8017868 <etharp_output+0x1f0>)
 80176aa:	486e      	ldr	r0, [pc, #440]	; (8017864 <etharp_output+0x1ec>)
 80176ac:	f002 f9c2 	bl	8019a34 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d106      	bne.n	80176c4 <etharp_output+0x4c>
 80176b6:	4b69      	ldr	r3, [pc, #420]	; (801785c <etharp_output+0x1e4>)
 80176b8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80176bc:	496b      	ldr	r1, [pc, #428]	; (801786c <etharp_output+0x1f4>)
 80176be:	4869      	ldr	r0, [pc, #420]	; (8017864 <etharp_output+0x1ec>)
 80176c0:	f002 f9b8 	bl	8019a34 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	68f9      	ldr	r1, [r7, #12]
 80176ca:	4618      	mov	r0, r3
 80176cc:	f000 ff1e 	bl	801850c <ip4_addr_isbroadcast_u32>
 80176d0:	4603      	mov	r3, r0
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	d002      	beq.n	80176dc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80176d6:	4b66      	ldr	r3, [pc, #408]	; (8017870 <etharp_output+0x1f8>)
 80176d8:	61fb      	str	r3, [r7, #28]
 80176da:	e0af      	b.n	801783c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	681b      	ldr	r3, [r3, #0]
 80176e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80176e4:	2be0      	cmp	r3, #224	; 0xe0
 80176e6:	d118      	bne.n	801771a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80176e8:	2301      	movs	r3, #1
 80176ea:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80176ec:	2300      	movs	r3, #0
 80176ee:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80176f0:	235e      	movs	r3, #94	; 0x5e
 80176f2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	3301      	adds	r3, #1
 80176f8:	781b      	ldrb	r3, [r3, #0]
 80176fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80176fe:	b2db      	uxtb	r3, r3
 8017700:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	3302      	adds	r3, #2
 8017706:	781b      	ldrb	r3, [r3, #0]
 8017708:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	3303      	adds	r3, #3
 801770e:	781b      	ldrb	r3, [r3, #0]
 8017710:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8017712:	f107 0310 	add.w	r3, r7, #16
 8017716:	61fb      	str	r3, [r7, #28]
 8017718:	e090      	b.n	801783c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	681a      	ldr	r2, [r3, #0]
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	3304      	adds	r3, #4
 8017722:	681b      	ldr	r3, [r3, #0]
 8017724:	405a      	eors	r2, r3
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	3308      	adds	r3, #8
 801772a:	681b      	ldr	r3, [r3, #0]
 801772c:	4013      	ands	r3, r2
 801772e:	2b00      	cmp	r3, #0
 8017730:	d012      	beq.n	8017758 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	681b      	ldr	r3, [r3, #0]
 8017736:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017738:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801773c:	4293      	cmp	r3, r2
 801773e:	d00b      	beq.n	8017758 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8017740:	68fb      	ldr	r3, [r7, #12]
 8017742:	330c      	adds	r3, #12
 8017744:	681b      	ldr	r3, [r3, #0]
 8017746:	2b00      	cmp	r3, #0
 8017748:	d003      	beq.n	8017752 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801774a:	68fb      	ldr	r3, [r7, #12]
 801774c:	330c      	adds	r3, #12
 801774e:	61bb      	str	r3, [r7, #24]
 8017750:	e002      	b.n	8017758 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8017752:	f06f 0303 	mvn.w	r3, #3
 8017756:	e07d      	b.n	8017854 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017758:	4b46      	ldr	r3, [pc, #280]	; (8017874 <etharp_output+0x1fc>)
 801775a:	781b      	ldrb	r3, [r3, #0]
 801775c:	4619      	mov	r1, r3
 801775e:	4a46      	ldr	r2, [pc, #280]	; (8017878 <etharp_output+0x200>)
 8017760:	460b      	mov	r3, r1
 8017762:	005b      	lsls	r3, r3, #1
 8017764:	440b      	add	r3, r1
 8017766:	00db      	lsls	r3, r3, #3
 8017768:	4413      	add	r3, r2
 801776a:	3314      	adds	r3, #20
 801776c:	781b      	ldrb	r3, [r3, #0]
 801776e:	2b01      	cmp	r3, #1
 8017770:	d925      	bls.n	80177be <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017772:	4b40      	ldr	r3, [pc, #256]	; (8017874 <etharp_output+0x1fc>)
 8017774:	781b      	ldrb	r3, [r3, #0]
 8017776:	4619      	mov	r1, r3
 8017778:	4a3f      	ldr	r2, [pc, #252]	; (8017878 <etharp_output+0x200>)
 801777a:	460b      	mov	r3, r1
 801777c:	005b      	lsls	r3, r3, #1
 801777e:	440b      	add	r3, r1
 8017780:	00db      	lsls	r3, r3, #3
 8017782:	4413      	add	r3, r2
 8017784:	3308      	adds	r3, #8
 8017786:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017788:	68fa      	ldr	r2, [r7, #12]
 801778a:	429a      	cmp	r2, r3
 801778c:	d117      	bne.n	80177be <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801778e:	69bb      	ldr	r3, [r7, #24]
 8017790:	681a      	ldr	r2, [r3, #0]
 8017792:	4b38      	ldr	r3, [pc, #224]	; (8017874 <etharp_output+0x1fc>)
 8017794:	781b      	ldrb	r3, [r3, #0]
 8017796:	4618      	mov	r0, r3
 8017798:	4937      	ldr	r1, [pc, #220]	; (8017878 <etharp_output+0x200>)
 801779a:	4603      	mov	r3, r0
 801779c:	005b      	lsls	r3, r3, #1
 801779e:	4403      	add	r3, r0
 80177a0:	00db      	lsls	r3, r3, #3
 80177a2:	440b      	add	r3, r1
 80177a4:	3304      	adds	r3, #4
 80177a6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80177a8:	429a      	cmp	r2, r3
 80177aa:	d108      	bne.n	80177be <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80177ac:	4b31      	ldr	r3, [pc, #196]	; (8017874 <etharp_output+0x1fc>)
 80177ae:	781b      	ldrb	r3, [r3, #0]
 80177b0:	461a      	mov	r2, r3
 80177b2:	68b9      	ldr	r1, [r7, #8]
 80177b4:	68f8      	ldr	r0, [r7, #12]
 80177b6:	f7ff fec5 	bl	8017544 <etharp_output_to_arp_index>
 80177ba:	4603      	mov	r3, r0
 80177bc:	e04a      	b.n	8017854 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80177be:	2300      	movs	r3, #0
 80177c0:	75fb      	strb	r3, [r7, #23]
 80177c2:	e031      	b.n	8017828 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80177c4:	7dfa      	ldrb	r2, [r7, #23]
 80177c6:	492c      	ldr	r1, [pc, #176]	; (8017878 <etharp_output+0x200>)
 80177c8:	4613      	mov	r3, r2
 80177ca:	005b      	lsls	r3, r3, #1
 80177cc:	4413      	add	r3, r2
 80177ce:	00db      	lsls	r3, r3, #3
 80177d0:	440b      	add	r3, r1
 80177d2:	3314      	adds	r3, #20
 80177d4:	781b      	ldrb	r3, [r3, #0]
 80177d6:	2b01      	cmp	r3, #1
 80177d8:	d923      	bls.n	8017822 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80177da:	7dfa      	ldrb	r2, [r7, #23]
 80177dc:	4926      	ldr	r1, [pc, #152]	; (8017878 <etharp_output+0x200>)
 80177de:	4613      	mov	r3, r2
 80177e0:	005b      	lsls	r3, r3, #1
 80177e2:	4413      	add	r3, r2
 80177e4:	00db      	lsls	r3, r3, #3
 80177e6:	440b      	add	r3, r1
 80177e8:	3308      	adds	r3, #8
 80177ea:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80177ec:	68fa      	ldr	r2, [r7, #12]
 80177ee:	429a      	cmp	r2, r3
 80177f0:	d117      	bne.n	8017822 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80177f2:	69bb      	ldr	r3, [r7, #24]
 80177f4:	6819      	ldr	r1, [r3, #0]
 80177f6:	7dfa      	ldrb	r2, [r7, #23]
 80177f8:	481f      	ldr	r0, [pc, #124]	; (8017878 <etharp_output+0x200>)
 80177fa:	4613      	mov	r3, r2
 80177fc:	005b      	lsls	r3, r3, #1
 80177fe:	4413      	add	r3, r2
 8017800:	00db      	lsls	r3, r3, #3
 8017802:	4403      	add	r3, r0
 8017804:	3304      	adds	r3, #4
 8017806:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8017808:	4299      	cmp	r1, r3
 801780a:	d10a      	bne.n	8017822 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801780c:	4a19      	ldr	r2, [pc, #100]	; (8017874 <etharp_output+0x1fc>)
 801780e:	7dfb      	ldrb	r3, [r7, #23]
 8017810:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8017812:	7dfb      	ldrb	r3, [r7, #23]
 8017814:	461a      	mov	r2, r3
 8017816:	68b9      	ldr	r1, [r7, #8]
 8017818:	68f8      	ldr	r0, [r7, #12]
 801781a:	f7ff fe93 	bl	8017544 <etharp_output_to_arp_index>
 801781e:	4603      	mov	r3, r0
 8017820:	e018      	b.n	8017854 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017822:	7dfb      	ldrb	r3, [r7, #23]
 8017824:	3301      	adds	r3, #1
 8017826:	75fb      	strb	r3, [r7, #23]
 8017828:	7dfb      	ldrb	r3, [r7, #23]
 801782a:	2b09      	cmp	r3, #9
 801782c:	d9ca      	bls.n	80177c4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801782e:	68ba      	ldr	r2, [r7, #8]
 8017830:	69b9      	ldr	r1, [r7, #24]
 8017832:	68f8      	ldr	r0, [r7, #12]
 8017834:	f000 f822 	bl	801787c <etharp_query>
 8017838:	4603      	mov	r3, r0
 801783a:	e00b      	b.n	8017854 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801783c:	68fb      	ldr	r3, [r7, #12]
 801783e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8017842:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017846:	9300      	str	r3, [sp, #0]
 8017848:	69fb      	ldr	r3, [r7, #28]
 801784a:	68b9      	ldr	r1, [r7, #8]
 801784c:	68f8      	ldr	r0, [r7, #12]
 801784e:	f001 fdf7 	bl	8019440 <ethernet_output>
 8017852:	4603      	mov	r3, r0
}
 8017854:	4618      	mov	r0, r3
 8017856:	3720      	adds	r7, #32
 8017858:	46bd      	mov	sp, r7
 801785a:	bd80      	pop	{r7, pc}
 801785c:	0801ceb8 	.word	0x0801ceb8
 8017860:	0801d008 	.word	0x0801d008
 8017864:	0801cf30 	.word	0x0801cf30
 8017868:	0801d058 	.word	0x0801d058
 801786c:	0801cff8 	.word	0x0801cff8
 8017870:	0801dec4 	.word	0x0801dec4
 8017874:	24004254 	.word	0x24004254
 8017878:	24004164 	.word	0x24004164

0801787c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801787c:	b580      	push	{r7, lr}
 801787e:	b08c      	sub	sp, #48	; 0x30
 8017880:	af02      	add	r7, sp, #8
 8017882:	60f8      	str	r0, [r7, #12]
 8017884:	60b9      	str	r1, [r7, #8]
 8017886:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8017888:	68fb      	ldr	r3, [r7, #12]
 801788a:	3326      	adds	r3, #38	; 0x26
 801788c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801788e:	23ff      	movs	r3, #255	; 0xff
 8017890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8017894:	2300      	movs	r3, #0
 8017896:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017898:	68bb      	ldr	r3, [r7, #8]
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	68f9      	ldr	r1, [r7, #12]
 801789e:	4618      	mov	r0, r3
 80178a0:	f000 fe34 	bl	801850c <ip4_addr_isbroadcast_u32>
 80178a4:	4603      	mov	r3, r0
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d10c      	bne.n	80178c4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80178aa:	68bb      	ldr	r3, [r7, #8]
 80178ac:	681b      	ldr	r3, [r3, #0]
 80178ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80178b2:	2be0      	cmp	r3, #224	; 0xe0
 80178b4:	d006      	beq.n	80178c4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80178b6:	68bb      	ldr	r3, [r7, #8]
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d003      	beq.n	80178c4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80178bc:	68bb      	ldr	r3, [r7, #8]
 80178be:	681b      	ldr	r3, [r3, #0]
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d102      	bne.n	80178ca <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80178c4:	f06f 030f 	mvn.w	r3, #15
 80178c8:	e101      	b.n	8017ace <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80178ca:	68fa      	ldr	r2, [r7, #12]
 80178cc:	2101      	movs	r1, #1
 80178ce:	68b8      	ldr	r0, [r7, #8]
 80178d0:	f7ff fb60 	bl	8016f94 <etharp_find_entry>
 80178d4:	4603      	mov	r3, r0
 80178d6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80178d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80178dc:	2b00      	cmp	r3, #0
 80178de:	da02      	bge.n	80178e6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80178e0:	8a7b      	ldrh	r3, [r7, #18]
 80178e2:	b25b      	sxtb	r3, r3
 80178e4:	e0f3      	b.n	8017ace <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80178e6:	8a7b      	ldrh	r3, [r7, #18]
 80178e8:	2b7e      	cmp	r3, #126	; 0x7e
 80178ea:	d906      	bls.n	80178fa <etharp_query+0x7e>
 80178ec:	4b7a      	ldr	r3, [pc, #488]	; (8017ad8 <etharp_query+0x25c>)
 80178ee:	f240 32c1 	movw	r2, #961	; 0x3c1
 80178f2:	497a      	ldr	r1, [pc, #488]	; (8017adc <etharp_query+0x260>)
 80178f4:	487a      	ldr	r0, [pc, #488]	; (8017ae0 <etharp_query+0x264>)
 80178f6:	f002 f89d 	bl	8019a34 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80178fa:	8a7b      	ldrh	r3, [r7, #18]
 80178fc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80178fe:	7c7a      	ldrb	r2, [r7, #17]
 8017900:	4978      	ldr	r1, [pc, #480]	; (8017ae4 <etharp_query+0x268>)
 8017902:	4613      	mov	r3, r2
 8017904:	005b      	lsls	r3, r3, #1
 8017906:	4413      	add	r3, r2
 8017908:	00db      	lsls	r3, r3, #3
 801790a:	440b      	add	r3, r1
 801790c:	3314      	adds	r3, #20
 801790e:	781b      	ldrb	r3, [r3, #0]
 8017910:	2b00      	cmp	r3, #0
 8017912:	d115      	bne.n	8017940 <etharp_query+0xc4>
    is_new_entry = 1;
 8017914:	2301      	movs	r3, #1
 8017916:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8017918:	7c7a      	ldrb	r2, [r7, #17]
 801791a:	4972      	ldr	r1, [pc, #456]	; (8017ae4 <etharp_query+0x268>)
 801791c:	4613      	mov	r3, r2
 801791e:	005b      	lsls	r3, r3, #1
 8017920:	4413      	add	r3, r2
 8017922:	00db      	lsls	r3, r3, #3
 8017924:	440b      	add	r3, r1
 8017926:	3314      	adds	r3, #20
 8017928:	2201      	movs	r2, #1
 801792a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801792c:	7c7a      	ldrb	r2, [r7, #17]
 801792e:	496d      	ldr	r1, [pc, #436]	; (8017ae4 <etharp_query+0x268>)
 8017930:	4613      	mov	r3, r2
 8017932:	005b      	lsls	r3, r3, #1
 8017934:	4413      	add	r3, r2
 8017936:	00db      	lsls	r3, r3, #3
 8017938:	440b      	add	r3, r1
 801793a:	3308      	adds	r3, #8
 801793c:	68fa      	ldr	r2, [r7, #12]
 801793e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8017940:	7c7a      	ldrb	r2, [r7, #17]
 8017942:	4968      	ldr	r1, [pc, #416]	; (8017ae4 <etharp_query+0x268>)
 8017944:	4613      	mov	r3, r2
 8017946:	005b      	lsls	r3, r3, #1
 8017948:	4413      	add	r3, r2
 801794a:	00db      	lsls	r3, r3, #3
 801794c:	440b      	add	r3, r1
 801794e:	3314      	adds	r3, #20
 8017950:	781b      	ldrb	r3, [r3, #0]
 8017952:	2b01      	cmp	r3, #1
 8017954:	d011      	beq.n	801797a <etharp_query+0xfe>
 8017956:	7c7a      	ldrb	r2, [r7, #17]
 8017958:	4962      	ldr	r1, [pc, #392]	; (8017ae4 <etharp_query+0x268>)
 801795a:	4613      	mov	r3, r2
 801795c:	005b      	lsls	r3, r3, #1
 801795e:	4413      	add	r3, r2
 8017960:	00db      	lsls	r3, r3, #3
 8017962:	440b      	add	r3, r1
 8017964:	3314      	adds	r3, #20
 8017966:	781b      	ldrb	r3, [r3, #0]
 8017968:	2b01      	cmp	r3, #1
 801796a:	d806      	bhi.n	801797a <etharp_query+0xfe>
 801796c:	4b5a      	ldr	r3, [pc, #360]	; (8017ad8 <etharp_query+0x25c>)
 801796e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8017972:	495d      	ldr	r1, [pc, #372]	; (8017ae8 <etharp_query+0x26c>)
 8017974:	485a      	ldr	r0, [pc, #360]	; (8017ae0 <etharp_query+0x264>)
 8017976:	f002 f85d 	bl	8019a34 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801797a:	6a3b      	ldr	r3, [r7, #32]
 801797c:	2b00      	cmp	r3, #0
 801797e:	d102      	bne.n	8017986 <etharp_query+0x10a>
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	2b00      	cmp	r3, #0
 8017984:	d10c      	bne.n	80179a0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8017986:	68b9      	ldr	r1, [r7, #8]
 8017988:	68f8      	ldr	r0, [r7, #12]
 801798a:	f000 f963 	bl	8017c54 <etharp_request>
 801798e:	4603      	mov	r3, r0
 8017990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	2b00      	cmp	r3, #0
 8017998:	d102      	bne.n	80179a0 <etharp_query+0x124>
      return result;
 801799a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801799e:	e096      	b.n	8017ace <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	d106      	bne.n	80179b4 <etharp_query+0x138>
 80179a6:	4b4c      	ldr	r3, [pc, #304]	; (8017ad8 <etharp_query+0x25c>)
 80179a8:	f240 32e1 	movw	r2, #993	; 0x3e1
 80179ac:	494f      	ldr	r1, [pc, #316]	; (8017aec <etharp_query+0x270>)
 80179ae:	484c      	ldr	r0, [pc, #304]	; (8017ae0 <etharp_query+0x264>)
 80179b0:	f002 f840 	bl	8019a34 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80179b4:	7c7a      	ldrb	r2, [r7, #17]
 80179b6:	494b      	ldr	r1, [pc, #300]	; (8017ae4 <etharp_query+0x268>)
 80179b8:	4613      	mov	r3, r2
 80179ba:	005b      	lsls	r3, r3, #1
 80179bc:	4413      	add	r3, r2
 80179be:	00db      	lsls	r3, r3, #3
 80179c0:	440b      	add	r3, r1
 80179c2:	3314      	adds	r3, #20
 80179c4:	781b      	ldrb	r3, [r3, #0]
 80179c6:	2b01      	cmp	r3, #1
 80179c8:	d917      	bls.n	80179fa <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80179ca:	4a49      	ldr	r2, [pc, #292]	; (8017af0 <etharp_query+0x274>)
 80179cc:	7c7b      	ldrb	r3, [r7, #17]
 80179ce:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80179d0:	7c7a      	ldrb	r2, [r7, #17]
 80179d2:	4613      	mov	r3, r2
 80179d4:	005b      	lsls	r3, r3, #1
 80179d6:	4413      	add	r3, r2
 80179d8:	00db      	lsls	r3, r3, #3
 80179da:	3308      	adds	r3, #8
 80179dc:	4a41      	ldr	r2, [pc, #260]	; (8017ae4 <etharp_query+0x268>)
 80179de:	4413      	add	r3, r2
 80179e0:	3304      	adds	r3, #4
 80179e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80179e6:	9200      	str	r2, [sp, #0]
 80179e8:	697a      	ldr	r2, [r7, #20]
 80179ea:	6879      	ldr	r1, [r7, #4]
 80179ec:	68f8      	ldr	r0, [r7, #12]
 80179ee:	f001 fd27 	bl	8019440 <ethernet_output>
 80179f2:	4603      	mov	r3, r0
 80179f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80179f8:	e067      	b.n	8017aca <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80179fa:	7c7a      	ldrb	r2, [r7, #17]
 80179fc:	4939      	ldr	r1, [pc, #228]	; (8017ae4 <etharp_query+0x268>)
 80179fe:	4613      	mov	r3, r2
 8017a00:	005b      	lsls	r3, r3, #1
 8017a02:	4413      	add	r3, r2
 8017a04:	00db      	lsls	r3, r3, #3
 8017a06:	440b      	add	r3, r1
 8017a08:	3314      	adds	r3, #20
 8017a0a:	781b      	ldrb	r3, [r3, #0]
 8017a0c:	2b01      	cmp	r3, #1
 8017a0e:	d15c      	bne.n	8017aca <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8017a10:	2300      	movs	r3, #0
 8017a12:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017a18:	e01c      	b.n	8017a54 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8017a1a:	69fb      	ldr	r3, [r7, #28]
 8017a1c:	895a      	ldrh	r2, [r3, #10]
 8017a1e:	69fb      	ldr	r3, [r7, #28]
 8017a20:	891b      	ldrh	r3, [r3, #8]
 8017a22:	429a      	cmp	r2, r3
 8017a24:	d10a      	bne.n	8017a3c <etharp_query+0x1c0>
 8017a26:	69fb      	ldr	r3, [r7, #28]
 8017a28:	681b      	ldr	r3, [r3, #0]
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d006      	beq.n	8017a3c <etharp_query+0x1c0>
 8017a2e:	4b2a      	ldr	r3, [pc, #168]	; (8017ad8 <etharp_query+0x25c>)
 8017a30:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8017a34:	492f      	ldr	r1, [pc, #188]	; (8017af4 <etharp_query+0x278>)
 8017a36:	482a      	ldr	r0, [pc, #168]	; (8017ae0 <etharp_query+0x264>)
 8017a38:	f001 fffc 	bl	8019a34 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8017a3c:	69fb      	ldr	r3, [r7, #28]
 8017a3e:	7b1b      	ldrb	r3, [r3, #12]
 8017a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d002      	beq.n	8017a4e <etharp_query+0x1d2>
        copy_needed = 1;
 8017a48:	2301      	movs	r3, #1
 8017a4a:	61bb      	str	r3, [r7, #24]
        break;
 8017a4c:	e005      	b.n	8017a5a <etharp_query+0x1de>
      }
      p = p->next;
 8017a4e:	69fb      	ldr	r3, [r7, #28]
 8017a50:	681b      	ldr	r3, [r3, #0]
 8017a52:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017a54:	69fb      	ldr	r3, [r7, #28]
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d1df      	bne.n	8017a1a <etharp_query+0x19e>
    }
    if (copy_needed) {
 8017a5a:	69bb      	ldr	r3, [r7, #24]
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d007      	beq.n	8017a70 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8017a60:	687a      	ldr	r2, [r7, #4]
 8017a62:	f44f 7120 	mov.w	r1, #640	; 0x280
 8017a66:	200e      	movs	r0, #14
 8017a68:	f7f8 fe04 	bl	8010674 <pbuf_clone>
 8017a6c:	61f8      	str	r0, [r7, #28]
 8017a6e:	e004      	b.n	8017a7a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8017a74:	69f8      	ldr	r0, [r7, #28]
 8017a76:	f7f8 fc2b 	bl	80102d0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8017a7a:	69fb      	ldr	r3, [r7, #28]
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d021      	beq.n	8017ac4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8017a80:	7c7a      	ldrb	r2, [r7, #17]
 8017a82:	4918      	ldr	r1, [pc, #96]	; (8017ae4 <etharp_query+0x268>)
 8017a84:	4613      	mov	r3, r2
 8017a86:	005b      	lsls	r3, r3, #1
 8017a88:	4413      	add	r3, r2
 8017a8a:	00db      	lsls	r3, r3, #3
 8017a8c:	440b      	add	r3, r1
 8017a8e:	681b      	ldr	r3, [r3, #0]
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	d00a      	beq.n	8017aaa <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8017a94:	7c7a      	ldrb	r2, [r7, #17]
 8017a96:	4913      	ldr	r1, [pc, #76]	; (8017ae4 <etharp_query+0x268>)
 8017a98:	4613      	mov	r3, r2
 8017a9a:	005b      	lsls	r3, r3, #1
 8017a9c:	4413      	add	r3, r2
 8017a9e:	00db      	lsls	r3, r3, #3
 8017aa0:	440b      	add	r3, r1
 8017aa2:	681b      	ldr	r3, [r3, #0]
 8017aa4:	4618      	mov	r0, r3
 8017aa6:	f7f8 fb6d 	bl	8010184 <pbuf_free>
      }
      arp_table[i].q = p;
 8017aaa:	7c7a      	ldrb	r2, [r7, #17]
 8017aac:	490d      	ldr	r1, [pc, #52]	; (8017ae4 <etharp_query+0x268>)
 8017aae:	4613      	mov	r3, r2
 8017ab0:	005b      	lsls	r3, r3, #1
 8017ab2:	4413      	add	r3, r2
 8017ab4:	00db      	lsls	r3, r3, #3
 8017ab6:	440b      	add	r3, r1
 8017ab8:	69fa      	ldr	r2, [r7, #28]
 8017aba:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8017abc:	2300      	movs	r3, #0
 8017abe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017ac2:	e002      	b.n	8017aca <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017ac4:	23ff      	movs	r3, #255	; 0xff
 8017ac6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8017aca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8017ace:	4618      	mov	r0, r3
 8017ad0:	3728      	adds	r7, #40	; 0x28
 8017ad2:	46bd      	mov	sp, r7
 8017ad4:	bd80      	pop	{r7, pc}
 8017ad6:	bf00      	nop
 8017ad8:	0801ceb8 	.word	0x0801ceb8
 8017adc:	0801d064 	.word	0x0801d064
 8017ae0:	0801cf30 	.word	0x0801cf30
 8017ae4:	24004164 	.word	0x24004164
 8017ae8:	0801d074 	.word	0x0801d074
 8017aec:	0801d058 	.word	0x0801d058
 8017af0:	24004254 	.word	0x24004254
 8017af4:	0801d09c 	.word	0x0801d09c

08017af8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8017af8:	b580      	push	{r7, lr}
 8017afa:	b08a      	sub	sp, #40	; 0x28
 8017afc:	af02      	add	r7, sp, #8
 8017afe:	60f8      	str	r0, [r7, #12]
 8017b00:	60b9      	str	r1, [r7, #8]
 8017b02:	607a      	str	r2, [r7, #4]
 8017b04:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8017b06:	2300      	movs	r3, #0
 8017b08:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017b0a:	68fb      	ldr	r3, [r7, #12]
 8017b0c:	2b00      	cmp	r3, #0
 8017b0e:	d106      	bne.n	8017b1e <etharp_raw+0x26>
 8017b10:	4b3a      	ldr	r3, [pc, #232]	; (8017bfc <etharp_raw+0x104>)
 8017b12:	f240 4257 	movw	r2, #1111	; 0x457
 8017b16:	493a      	ldr	r1, [pc, #232]	; (8017c00 <etharp_raw+0x108>)
 8017b18:	483a      	ldr	r0, [pc, #232]	; (8017c04 <etharp_raw+0x10c>)
 8017b1a:	f001 ff8b 	bl	8019a34 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8017b1e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017b22:	211c      	movs	r1, #28
 8017b24:	200e      	movs	r0, #14
 8017b26:	f7f8 f849 	bl	800fbbc <pbuf_alloc>
 8017b2a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017b2c:	69bb      	ldr	r3, [r7, #24]
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	d102      	bne.n	8017b38 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8017b32:	f04f 33ff 	mov.w	r3, #4294967295
 8017b36:	e05d      	b.n	8017bf4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8017b38:	69bb      	ldr	r3, [r7, #24]
 8017b3a:	895b      	ldrh	r3, [r3, #10]
 8017b3c:	2b1b      	cmp	r3, #27
 8017b3e:	d806      	bhi.n	8017b4e <etharp_raw+0x56>
 8017b40:	4b2e      	ldr	r3, [pc, #184]	; (8017bfc <etharp_raw+0x104>)
 8017b42:	f240 4262 	movw	r2, #1122	; 0x462
 8017b46:	4930      	ldr	r1, [pc, #192]	; (8017c08 <etharp_raw+0x110>)
 8017b48:	482e      	ldr	r0, [pc, #184]	; (8017c04 <etharp_raw+0x10c>)
 8017b4a:	f001 ff73 	bl	8019a34 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8017b4e:	69bb      	ldr	r3, [r7, #24]
 8017b50:	685b      	ldr	r3, [r3, #4]
 8017b52:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017b54:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017b56:	4618      	mov	r0, r3
 8017b58:	f7f6 fe6a 	bl	800e830 <lwip_htons>
 8017b5c:	4603      	mov	r3, r0
 8017b5e:	461a      	mov	r2, r3
 8017b60:	697b      	ldr	r3, [r7, #20]
 8017b62:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017b64:	68fb      	ldr	r3, [r7, #12]
 8017b66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017b6a:	2b06      	cmp	r3, #6
 8017b6c:	d006      	beq.n	8017b7c <etharp_raw+0x84>
 8017b6e:	4b23      	ldr	r3, [pc, #140]	; (8017bfc <etharp_raw+0x104>)
 8017b70:	f240 4269 	movw	r2, #1129	; 0x469
 8017b74:	4925      	ldr	r1, [pc, #148]	; (8017c0c <etharp_raw+0x114>)
 8017b76:	4823      	ldr	r0, [pc, #140]	; (8017c04 <etharp_raw+0x10c>)
 8017b78:	f001 ff5c 	bl	8019a34 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8017b7c:	697b      	ldr	r3, [r7, #20]
 8017b7e:	3308      	adds	r3, #8
 8017b80:	2206      	movs	r2, #6
 8017b82:	6839      	ldr	r1, [r7, #0]
 8017b84:	4618      	mov	r0, r3
 8017b86:	f001 fee4 	bl	8019952 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8017b8a:	697b      	ldr	r3, [r7, #20]
 8017b8c:	3312      	adds	r3, #18
 8017b8e:	2206      	movs	r2, #6
 8017b90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017b92:	4618      	mov	r0, r3
 8017b94:	f001 fedd 	bl	8019952 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8017b98:	697b      	ldr	r3, [r7, #20]
 8017b9a:	330e      	adds	r3, #14
 8017b9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017b9e:	6812      	ldr	r2, [r2, #0]
 8017ba0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8017ba2:	697b      	ldr	r3, [r7, #20]
 8017ba4:	3318      	adds	r3, #24
 8017ba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017ba8:	6812      	ldr	r2, [r2, #0]
 8017baa:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8017bac:	697b      	ldr	r3, [r7, #20]
 8017bae:	2200      	movs	r2, #0
 8017bb0:	701a      	strb	r2, [r3, #0]
 8017bb2:	2200      	movs	r2, #0
 8017bb4:	f042 0201 	orr.w	r2, r2, #1
 8017bb8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8017bba:	697b      	ldr	r3, [r7, #20]
 8017bbc:	2200      	movs	r2, #0
 8017bbe:	f042 0208 	orr.w	r2, r2, #8
 8017bc2:	709a      	strb	r2, [r3, #2]
 8017bc4:	2200      	movs	r2, #0
 8017bc6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8017bc8:	697b      	ldr	r3, [r7, #20]
 8017bca:	2206      	movs	r2, #6
 8017bcc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8017bce:	697b      	ldr	r3, [r7, #20]
 8017bd0:	2204      	movs	r2, #4
 8017bd2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017bd4:	f640 0306 	movw	r3, #2054	; 0x806
 8017bd8:	9300      	str	r3, [sp, #0]
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	68ba      	ldr	r2, [r7, #8]
 8017bde:	69b9      	ldr	r1, [r7, #24]
 8017be0:	68f8      	ldr	r0, [r7, #12]
 8017be2:	f001 fc2d 	bl	8019440 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8017be6:	69b8      	ldr	r0, [r7, #24]
 8017be8:	f7f8 facc 	bl	8010184 <pbuf_free>
  p = NULL;
 8017bec:	2300      	movs	r3, #0
 8017bee:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017bf0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017bf4:	4618      	mov	r0, r3
 8017bf6:	3720      	adds	r7, #32
 8017bf8:	46bd      	mov	sp, r7
 8017bfa:	bd80      	pop	{r7, pc}
 8017bfc:	0801ceb8 	.word	0x0801ceb8
 8017c00:	0801d008 	.word	0x0801d008
 8017c04:	0801cf30 	.word	0x0801cf30
 8017c08:	0801d0b8 	.word	0x0801d0b8
 8017c0c:	0801d0ec 	.word	0x0801d0ec

08017c10 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8017c10:	b580      	push	{r7, lr}
 8017c12:	b088      	sub	sp, #32
 8017c14:	af04      	add	r7, sp, #16
 8017c16:	60f8      	str	r0, [r7, #12]
 8017c18:	60b9      	str	r1, [r7, #8]
 8017c1a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017c1c:	68fb      	ldr	r3, [r7, #12]
 8017c1e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8017c22:	68fb      	ldr	r3, [r7, #12]
 8017c24:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8017c28:	68fb      	ldr	r3, [r7, #12]
 8017c2a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017c2c:	2201      	movs	r2, #1
 8017c2e:	9203      	str	r2, [sp, #12]
 8017c30:	68ba      	ldr	r2, [r7, #8]
 8017c32:	9202      	str	r2, [sp, #8]
 8017c34:	4a06      	ldr	r2, [pc, #24]	; (8017c50 <etharp_request_dst+0x40>)
 8017c36:	9201      	str	r2, [sp, #4]
 8017c38:	9300      	str	r3, [sp, #0]
 8017c3a:	4603      	mov	r3, r0
 8017c3c:	687a      	ldr	r2, [r7, #4]
 8017c3e:	68f8      	ldr	r0, [r7, #12]
 8017c40:	f7ff ff5a 	bl	8017af8 <etharp_raw>
 8017c44:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8017c46:	4618      	mov	r0, r3
 8017c48:	3710      	adds	r7, #16
 8017c4a:	46bd      	mov	sp, r7
 8017c4c:	bd80      	pop	{r7, pc}
 8017c4e:	bf00      	nop
 8017c50:	0801decc 	.word	0x0801decc

08017c54 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017c54:	b580      	push	{r7, lr}
 8017c56:	b082      	sub	sp, #8
 8017c58:	af00      	add	r7, sp, #0
 8017c5a:	6078      	str	r0, [r7, #4]
 8017c5c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8017c5e:	4a05      	ldr	r2, [pc, #20]	; (8017c74 <etharp_request+0x20>)
 8017c60:	6839      	ldr	r1, [r7, #0]
 8017c62:	6878      	ldr	r0, [r7, #4]
 8017c64:	f7ff ffd4 	bl	8017c10 <etharp_request_dst>
 8017c68:	4603      	mov	r3, r0
}
 8017c6a:	4618      	mov	r0, r3
 8017c6c:	3708      	adds	r7, #8
 8017c6e:	46bd      	mov	sp, r7
 8017c70:	bd80      	pop	{r7, pc}
 8017c72:	bf00      	nop
 8017c74:	0801dec4 	.word	0x0801dec4

08017c78 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017c78:	b580      	push	{r7, lr}
 8017c7a:	b08e      	sub	sp, #56	; 0x38
 8017c7c:	af04      	add	r7, sp, #16
 8017c7e:	6078      	str	r0, [r7, #4]
 8017c80:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8017c82:	4b87      	ldr	r3, [pc, #540]	; (8017ea0 <icmp_input+0x228>)
 8017c84:	689b      	ldr	r3, [r3, #8]
 8017c86:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c8a:	781b      	ldrb	r3, [r3, #0]
 8017c8c:	f003 030f 	and.w	r3, r3, #15
 8017c90:	b2db      	uxtb	r3, r3
 8017c92:	009b      	lsls	r3, r3, #2
 8017c94:	b2db      	uxtb	r3, r3
 8017c96:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8017c98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017c9a:	2b13      	cmp	r3, #19
 8017c9c:	f240 80e8 	bls.w	8017e70 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	895b      	ldrh	r3, [r3, #10]
 8017ca4:	2b03      	cmp	r3, #3
 8017ca6:	f240 80e5 	bls.w	8017e74 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	685b      	ldr	r3, [r3, #4]
 8017cae:	781b      	ldrb	r3, [r3, #0]
 8017cb0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017cb4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	f000 80d2 	beq.w	8017e62 <icmp_input+0x1ea>
 8017cbe:	2b08      	cmp	r3, #8
 8017cc0:	f040 80d2 	bne.w	8017e68 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017cc4:	4b77      	ldr	r3, [pc, #476]	; (8017ea4 <icmp_input+0x22c>)
 8017cc6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017cc8:	4b75      	ldr	r3, [pc, #468]	; (8017ea0 <icmp_input+0x228>)
 8017cca:	695b      	ldr	r3, [r3, #20]
 8017ccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017cd0:	2be0      	cmp	r3, #224	; 0xe0
 8017cd2:	f000 80d6 	beq.w	8017e82 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8017cd6:	4b72      	ldr	r3, [pc, #456]	; (8017ea0 <icmp_input+0x228>)
 8017cd8:	695b      	ldr	r3, [r3, #20]
 8017cda:	4a71      	ldr	r2, [pc, #452]	; (8017ea0 <icmp_input+0x228>)
 8017cdc:	6812      	ldr	r2, [r2, #0]
 8017cde:	4611      	mov	r1, r2
 8017ce0:	4618      	mov	r0, r3
 8017ce2:	f000 fc13 	bl	801850c <ip4_addr_isbroadcast_u32>
 8017ce6:	4603      	mov	r3, r0
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	f040 80cc 	bne.w	8017e86 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	891b      	ldrh	r3, [r3, #8]
 8017cf2:	2b07      	cmp	r3, #7
 8017cf4:	f240 80c0 	bls.w	8017e78 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8017cf8:	6878      	ldr	r0, [r7, #4]
 8017cfa:	f7f6 fe36 	bl	800e96a <inet_chksum_pbuf>
 8017cfe:	4603      	mov	r3, r0
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d003      	beq.n	8017d0c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8017d04:	6878      	ldr	r0, [r7, #4]
 8017d06:	f7f8 fa3d 	bl	8010184 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8017d0a:	e0c5      	b.n	8017e98 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017d0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017d0e:	330e      	adds	r3, #14
 8017d10:	4619      	mov	r1, r3
 8017d12:	6878      	ldr	r0, [r7, #4]
 8017d14:	f7f8 f9a0 	bl	8010058 <pbuf_add_header>
 8017d18:	4603      	mov	r3, r0
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d04b      	beq.n	8017db6 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	891a      	ldrh	r2, [r3, #8]
 8017d22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017d24:	4413      	add	r3, r2
 8017d26:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	891b      	ldrh	r3, [r3, #8]
 8017d2c:	8b7a      	ldrh	r2, [r7, #26]
 8017d2e:	429a      	cmp	r2, r3
 8017d30:	f0c0 80ab 	bcc.w	8017e8a <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8017d34:	8b7b      	ldrh	r3, [r7, #26]
 8017d36:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017d3a:	4619      	mov	r1, r3
 8017d3c:	200e      	movs	r0, #14
 8017d3e:	f7f7 ff3d 	bl	800fbbc <pbuf_alloc>
 8017d42:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8017d44:	697b      	ldr	r3, [r7, #20]
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	f000 80a1 	beq.w	8017e8e <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017d4c:	697b      	ldr	r3, [r7, #20]
 8017d4e:	895b      	ldrh	r3, [r3, #10]
 8017d50:	461a      	mov	r2, r3
 8017d52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017d54:	3308      	adds	r3, #8
 8017d56:	429a      	cmp	r2, r3
 8017d58:	d203      	bcs.n	8017d62 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8017d5a:	6978      	ldr	r0, [r7, #20]
 8017d5c:	f7f8 fa12 	bl	8010184 <pbuf_free>
          goto icmperr;
 8017d60:	e096      	b.n	8017e90 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8017d62:	697b      	ldr	r3, [r7, #20]
 8017d64:	685b      	ldr	r3, [r3, #4]
 8017d66:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017d68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017d6a:	4618      	mov	r0, r3
 8017d6c:	f001 fdf1 	bl	8019952 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017d70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017d72:	4619      	mov	r1, r3
 8017d74:	6978      	ldr	r0, [r7, #20]
 8017d76:	f7f8 f97f 	bl	8010078 <pbuf_remove_header>
 8017d7a:	4603      	mov	r3, r0
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d009      	beq.n	8017d94 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017d80:	4b49      	ldr	r3, [pc, #292]	; (8017ea8 <icmp_input+0x230>)
 8017d82:	22b6      	movs	r2, #182	; 0xb6
 8017d84:	4949      	ldr	r1, [pc, #292]	; (8017eac <icmp_input+0x234>)
 8017d86:	484a      	ldr	r0, [pc, #296]	; (8017eb0 <icmp_input+0x238>)
 8017d88:	f001 fe54 	bl	8019a34 <iprintf>
          pbuf_free(r);
 8017d8c:	6978      	ldr	r0, [r7, #20]
 8017d8e:	f7f8 f9f9 	bl	8010184 <pbuf_free>
          goto icmperr;
 8017d92:	e07d      	b.n	8017e90 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8017d94:	6879      	ldr	r1, [r7, #4]
 8017d96:	6978      	ldr	r0, [r7, #20]
 8017d98:	f7f8 fb28 	bl	80103ec <pbuf_copy>
 8017d9c:	4603      	mov	r3, r0
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d003      	beq.n	8017daa <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8017da2:	6978      	ldr	r0, [r7, #20]
 8017da4:	f7f8 f9ee 	bl	8010184 <pbuf_free>
          goto icmperr;
 8017da8:	e072      	b.n	8017e90 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8017daa:	6878      	ldr	r0, [r7, #4]
 8017dac:	f7f8 f9ea 	bl	8010184 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017db0:	697b      	ldr	r3, [r7, #20]
 8017db2:	607b      	str	r3, [r7, #4]
 8017db4:	e00f      	b.n	8017dd6 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017db6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017db8:	330e      	adds	r3, #14
 8017dba:	4619      	mov	r1, r3
 8017dbc:	6878      	ldr	r0, [r7, #4]
 8017dbe:	f7f8 f95b 	bl	8010078 <pbuf_remove_header>
 8017dc2:	4603      	mov	r3, r0
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d006      	beq.n	8017dd6 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017dc8:	4b37      	ldr	r3, [pc, #220]	; (8017ea8 <icmp_input+0x230>)
 8017dca:	22c7      	movs	r2, #199	; 0xc7
 8017dcc:	4939      	ldr	r1, [pc, #228]	; (8017eb4 <icmp_input+0x23c>)
 8017dce:	4838      	ldr	r0, [pc, #224]	; (8017eb0 <icmp_input+0x238>)
 8017dd0:	f001 fe30 	bl	8019a34 <iprintf>
          goto icmperr;
 8017dd4:	e05c      	b.n	8017e90 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	685b      	ldr	r3, [r3, #4]
 8017dda:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017ddc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017dde:	4619      	mov	r1, r3
 8017de0:	6878      	ldr	r0, [r7, #4]
 8017de2:	f7f8 f939 	bl	8010058 <pbuf_add_header>
 8017de6:	4603      	mov	r3, r0
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	d13c      	bne.n	8017e66 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	685b      	ldr	r3, [r3, #4]
 8017df0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8017df2:	69fb      	ldr	r3, [r7, #28]
 8017df4:	681a      	ldr	r2, [r3, #0]
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8017dfa:	4b29      	ldr	r3, [pc, #164]	; (8017ea0 <icmp_input+0x228>)
 8017dfc:	691a      	ldr	r2, [r3, #16]
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017e02:	693b      	ldr	r3, [r7, #16]
 8017e04:	2200      	movs	r2, #0
 8017e06:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8017e08:	693b      	ldr	r3, [r7, #16]
 8017e0a:	885b      	ldrh	r3, [r3, #2]
 8017e0c:	b29b      	uxth	r3, r3
 8017e0e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8017e12:	4293      	cmp	r3, r2
 8017e14:	d907      	bls.n	8017e26 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8017e16:	693b      	ldr	r3, [r7, #16]
 8017e18:	885b      	ldrh	r3, [r3, #2]
 8017e1a:	b29b      	uxth	r3, r3
 8017e1c:	3309      	adds	r3, #9
 8017e1e:	b29a      	uxth	r2, r3
 8017e20:	693b      	ldr	r3, [r7, #16]
 8017e22:	805a      	strh	r2, [r3, #2]
 8017e24:	e006      	b.n	8017e34 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8017e26:	693b      	ldr	r3, [r7, #16]
 8017e28:	885b      	ldrh	r3, [r3, #2]
 8017e2a:	b29b      	uxth	r3, r3
 8017e2c:	3308      	adds	r3, #8
 8017e2e:	b29a      	uxth	r2, r3
 8017e30:	693b      	ldr	r3, [r7, #16]
 8017e32:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	22ff      	movs	r2, #255	; 0xff
 8017e38:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017e3a:	68fb      	ldr	r3, [r7, #12]
 8017e3c:	2200      	movs	r2, #0
 8017e3e:	729a      	strb	r2, [r3, #10]
 8017e40:	2200      	movs	r2, #0
 8017e42:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017e44:	683b      	ldr	r3, [r7, #0]
 8017e46:	9302      	str	r3, [sp, #8]
 8017e48:	2301      	movs	r3, #1
 8017e4a:	9301      	str	r3, [sp, #4]
 8017e4c:	2300      	movs	r3, #0
 8017e4e:	9300      	str	r3, [sp, #0]
 8017e50:	23ff      	movs	r3, #255	; 0xff
 8017e52:	2200      	movs	r2, #0
 8017e54:	69f9      	ldr	r1, [r7, #28]
 8017e56:	6878      	ldr	r0, [r7, #4]
 8017e58:	f000 fa80 	bl	801835c <ip4_output_if>
 8017e5c:	4603      	mov	r3, r0
 8017e5e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017e60:	e001      	b.n	8017e66 <icmp_input+0x1ee>
      break;
 8017e62:	bf00      	nop
 8017e64:	e000      	b.n	8017e68 <icmp_input+0x1f0>
      break;
 8017e66:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017e68:	6878      	ldr	r0, [r7, #4]
 8017e6a:	f7f8 f98b 	bl	8010184 <pbuf_free>
  return;
 8017e6e:	e013      	b.n	8017e98 <icmp_input+0x220>
    goto lenerr;
 8017e70:	bf00      	nop
 8017e72:	e002      	b.n	8017e7a <icmp_input+0x202>
    goto lenerr;
 8017e74:	bf00      	nop
 8017e76:	e000      	b.n	8017e7a <icmp_input+0x202>
        goto lenerr;
 8017e78:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017e7a:	6878      	ldr	r0, [r7, #4]
 8017e7c:	f7f8 f982 	bl	8010184 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017e80:	e00a      	b.n	8017e98 <icmp_input+0x220>
        goto icmperr;
 8017e82:	bf00      	nop
 8017e84:	e004      	b.n	8017e90 <icmp_input+0x218>
        goto icmperr;
 8017e86:	bf00      	nop
 8017e88:	e002      	b.n	8017e90 <icmp_input+0x218>
          goto icmperr;
 8017e8a:	bf00      	nop
 8017e8c:	e000      	b.n	8017e90 <icmp_input+0x218>
          goto icmperr;
 8017e8e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017e90:	6878      	ldr	r0, [r7, #4]
 8017e92:	f7f8 f977 	bl	8010184 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017e96:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017e98:	3728      	adds	r7, #40	; 0x28
 8017e9a:	46bd      	mov	sp, r7
 8017e9c:	bd80      	pop	{r7, pc}
 8017e9e:	bf00      	nop
 8017ea0:	240047a4 	.word	0x240047a4
 8017ea4:	240047b8 	.word	0x240047b8
 8017ea8:	0801d130 	.word	0x0801d130
 8017eac:	0801d168 	.word	0x0801d168
 8017eb0:	0801d1a0 	.word	0x0801d1a0
 8017eb4:	0801d1c8 	.word	0x0801d1c8

08017eb8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017eb8:	b580      	push	{r7, lr}
 8017eba:	b082      	sub	sp, #8
 8017ebc:	af00      	add	r7, sp, #0
 8017ebe:	6078      	str	r0, [r7, #4]
 8017ec0:	460b      	mov	r3, r1
 8017ec2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017ec4:	78fb      	ldrb	r3, [r7, #3]
 8017ec6:	461a      	mov	r2, r3
 8017ec8:	2103      	movs	r1, #3
 8017eca:	6878      	ldr	r0, [r7, #4]
 8017ecc:	f000 f814 	bl	8017ef8 <icmp_send_response>
}
 8017ed0:	bf00      	nop
 8017ed2:	3708      	adds	r7, #8
 8017ed4:	46bd      	mov	sp, r7
 8017ed6:	bd80      	pop	{r7, pc}

08017ed8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017ed8:	b580      	push	{r7, lr}
 8017eda:	b082      	sub	sp, #8
 8017edc:	af00      	add	r7, sp, #0
 8017ede:	6078      	str	r0, [r7, #4]
 8017ee0:	460b      	mov	r3, r1
 8017ee2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017ee4:	78fb      	ldrb	r3, [r7, #3]
 8017ee6:	461a      	mov	r2, r3
 8017ee8:	210b      	movs	r1, #11
 8017eea:	6878      	ldr	r0, [r7, #4]
 8017eec:	f000 f804 	bl	8017ef8 <icmp_send_response>
}
 8017ef0:	bf00      	nop
 8017ef2:	3708      	adds	r7, #8
 8017ef4:	46bd      	mov	sp, r7
 8017ef6:	bd80      	pop	{r7, pc}

08017ef8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017ef8:	b580      	push	{r7, lr}
 8017efa:	b08c      	sub	sp, #48	; 0x30
 8017efc:	af04      	add	r7, sp, #16
 8017efe:	6078      	str	r0, [r7, #4]
 8017f00:	460b      	mov	r3, r1
 8017f02:	70fb      	strb	r3, [r7, #3]
 8017f04:	4613      	mov	r3, r2
 8017f06:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017f08:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017f0c:	2124      	movs	r1, #36	; 0x24
 8017f0e:	2022      	movs	r0, #34	; 0x22
 8017f10:	f7f7 fe54 	bl	800fbbc <pbuf_alloc>
 8017f14:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017f16:	69fb      	ldr	r3, [r7, #28]
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d056      	beq.n	8017fca <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017f1c:	69fb      	ldr	r3, [r7, #28]
 8017f1e:	895b      	ldrh	r3, [r3, #10]
 8017f20:	2b23      	cmp	r3, #35	; 0x23
 8017f22:	d806      	bhi.n	8017f32 <icmp_send_response+0x3a>
 8017f24:	4b2b      	ldr	r3, [pc, #172]	; (8017fd4 <icmp_send_response+0xdc>)
 8017f26:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8017f2a:	492b      	ldr	r1, [pc, #172]	; (8017fd8 <icmp_send_response+0xe0>)
 8017f2c:	482b      	ldr	r0, [pc, #172]	; (8017fdc <icmp_send_response+0xe4>)
 8017f2e:	f001 fd81 	bl	8019a34 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	685b      	ldr	r3, [r3, #4]
 8017f36:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017f38:	69fb      	ldr	r3, [r7, #28]
 8017f3a:	685b      	ldr	r3, [r3, #4]
 8017f3c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017f3e:	697b      	ldr	r3, [r7, #20]
 8017f40:	78fa      	ldrb	r2, [r7, #3]
 8017f42:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017f44:	697b      	ldr	r3, [r7, #20]
 8017f46:	78ba      	ldrb	r2, [r7, #2]
 8017f48:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017f4a:	697b      	ldr	r3, [r7, #20]
 8017f4c:	2200      	movs	r2, #0
 8017f4e:	711a      	strb	r2, [r3, #4]
 8017f50:	2200      	movs	r2, #0
 8017f52:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017f54:	697b      	ldr	r3, [r7, #20]
 8017f56:	2200      	movs	r2, #0
 8017f58:	719a      	strb	r2, [r3, #6]
 8017f5a:	2200      	movs	r2, #0
 8017f5c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017f5e:	69fb      	ldr	r3, [r7, #28]
 8017f60:	685b      	ldr	r3, [r3, #4]
 8017f62:	f103 0008 	add.w	r0, r3, #8
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	685b      	ldr	r3, [r3, #4]
 8017f6a:	221c      	movs	r2, #28
 8017f6c:	4619      	mov	r1, r3
 8017f6e:	f001 fcf0 	bl	8019952 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017f72:	69bb      	ldr	r3, [r7, #24]
 8017f74:	68db      	ldr	r3, [r3, #12]
 8017f76:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017f78:	f107 030c 	add.w	r3, r7, #12
 8017f7c:	4618      	mov	r0, r3
 8017f7e:	f000 f82f 	bl	8017fe0 <ip4_route>
 8017f82:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017f84:	693b      	ldr	r3, [r7, #16]
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d01b      	beq.n	8017fc2 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017f8a:	697b      	ldr	r3, [r7, #20]
 8017f8c:	2200      	movs	r2, #0
 8017f8e:	709a      	strb	r2, [r3, #2]
 8017f90:	2200      	movs	r2, #0
 8017f92:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8017f94:	69fb      	ldr	r3, [r7, #28]
 8017f96:	895b      	ldrh	r3, [r3, #10]
 8017f98:	4619      	mov	r1, r3
 8017f9a:	6978      	ldr	r0, [r7, #20]
 8017f9c:	f7f6 fcd3 	bl	800e946 <inet_chksum>
 8017fa0:	4603      	mov	r3, r0
 8017fa2:	461a      	mov	r2, r3
 8017fa4:	697b      	ldr	r3, [r7, #20]
 8017fa6:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017fa8:	f107 020c 	add.w	r2, r7, #12
 8017fac:	693b      	ldr	r3, [r7, #16]
 8017fae:	9302      	str	r3, [sp, #8]
 8017fb0:	2301      	movs	r3, #1
 8017fb2:	9301      	str	r3, [sp, #4]
 8017fb4:	2300      	movs	r3, #0
 8017fb6:	9300      	str	r3, [sp, #0]
 8017fb8:	23ff      	movs	r3, #255	; 0xff
 8017fba:	2100      	movs	r1, #0
 8017fbc:	69f8      	ldr	r0, [r7, #28]
 8017fbe:	f000 f9cd 	bl	801835c <ip4_output_if>
  }
  pbuf_free(q);
 8017fc2:	69f8      	ldr	r0, [r7, #28]
 8017fc4:	f7f8 f8de 	bl	8010184 <pbuf_free>
 8017fc8:	e000      	b.n	8017fcc <icmp_send_response+0xd4>
    return;
 8017fca:	bf00      	nop
}
 8017fcc:	3720      	adds	r7, #32
 8017fce:	46bd      	mov	sp, r7
 8017fd0:	bd80      	pop	{r7, pc}
 8017fd2:	bf00      	nop
 8017fd4:	0801d130 	.word	0x0801d130
 8017fd8:	0801d1fc 	.word	0x0801d1fc
 8017fdc:	0801d1a0 	.word	0x0801d1a0

08017fe0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017fe0:	b480      	push	{r7}
 8017fe2:	b085      	sub	sp, #20
 8017fe4:	af00      	add	r7, sp, #0
 8017fe6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017fe8:	4b33      	ldr	r3, [pc, #204]	; (80180b8 <ip4_route+0xd8>)
 8017fea:	681b      	ldr	r3, [r3, #0]
 8017fec:	60fb      	str	r3, [r7, #12]
 8017fee:	e036      	b.n	801805e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017ff0:	68fb      	ldr	r3, [r7, #12]
 8017ff2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017ff6:	f003 0301 	and.w	r3, r3, #1
 8017ffa:	b2db      	uxtb	r3, r3
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d02b      	beq.n	8018058 <ip4_route+0x78>
 8018000:	68fb      	ldr	r3, [r7, #12]
 8018002:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018006:	089b      	lsrs	r3, r3, #2
 8018008:	f003 0301 	and.w	r3, r3, #1
 801800c:	b2db      	uxtb	r3, r3
 801800e:	2b00      	cmp	r3, #0
 8018010:	d022      	beq.n	8018058 <ip4_route+0x78>
 8018012:	68fb      	ldr	r3, [r7, #12]
 8018014:	3304      	adds	r3, #4
 8018016:	681b      	ldr	r3, [r3, #0]
 8018018:	2b00      	cmp	r3, #0
 801801a:	d01d      	beq.n	8018058 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	681a      	ldr	r2, [r3, #0]
 8018020:	68fb      	ldr	r3, [r7, #12]
 8018022:	3304      	adds	r3, #4
 8018024:	681b      	ldr	r3, [r3, #0]
 8018026:	405a      	eors	r2, r3
 8018028:	68fb      	ldr	r3, [r7, #12]
 801802a:	3308      	adds	r3, #8
 801802c:	681b      	ldr	r3, [r3, #0]
 801802e:	4013      	ands	r3, r2
 8018030:	2b00      	cmp	r3, #0
 8018032:	d101      	bne.n	8018038 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8018034:	68fb      	ldr	r3, [r7, #12]
 8018036:	e038      	b.n	80180aa <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8018038:	68fb      	ldr	r3, [r7, #12]
 801803a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801803e:	f003 0302 	and.w	r3, r3, #2
 8018042:	2b00      	cmp	r3, #0
 8018044:	d108      	bne.n	8018058 <ip4_route+0x78>
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	681a      	ldr	r2, [r3, #0]
 801804a:	68fb      	ldr	r3, [r7, #12]
 801804c:	330c      	adds	r3, #12
 801804e:	681b      	ldr	r3, [r3, #0]
 8018050:	429a      	cmp	r2, r3
 8018052:	d101      	bne.n	8018058 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8018054:	68fb      	ldr	r3, [r7, #12]
 8018056:	e028      	b.n	80180aa <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8018058:	68fb      	ldr	r3, [r7, #12]
 801805a:	681b      	ldr	r3, [r3, #0]
 801805c:	60fb      	str	r3, [r7, #12]
 801805e:	68fb      	ldr	r3, [r7, #12]
 8018060:	2b00      	cmp	r3, #0
 8018062:	d1c5      	bne.n	8017ff0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018064:	4b15      	ldr	r3, [pc, #84]	; (80180bc <ip4_route+0xdc>)
 8018066:	681b      	ldr	r3, [r3, #0]
 8018068:	2b00      	cmp	r3, #0
 801806a:	d01a      	beq.n	80180a2 <ip4_route+0xc2>
 801806c:	4b13      	ldr	r3, [pc, #76]	; (80180bc <ip4_route+0xdc>)
 801806e:	681b      	ldr	r3, [r3, #0]
 8018070:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018074:	f003 0301 	and.w	r3, r3, #1
 8018078:	2b00      	cmp	r3, #0
 801807a:	d012      	beq.n	80180a2 <ip4_route+0xc2>
 801807c:	4b0f      	ldr	r3, [pc, #60]	; (80180bc <ip4_route+0xdc>)
 801807e:	681b      	ldr	r3, [r3, #0]
 8018080:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018084:	f003 0304 	and.w	r3, r3, #4
 8018088:	2b00      	cmp	r3, #0
 801808a:	d00a      	beq.n	80180a2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801808c:	4b0b      	ldr	r3, [pc, #44]	; (80180bc <ip4_route+0xdc>)
 801808e:	681b      	ldr	r3, [r3, #0]
 8018090:	3304      	adds	r3, #4
 8018092:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018094:	2b00      	cmp	r3, #0
 8018096:	d004      	beq.n	80180a2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	681b      	ldr	r3, [r3, #0]
 801809c:	b2db      	uxtb	r3, r3
 801809e:	2b7f      	cmp	r3, #127	; 0x7f
 80180a0:	d101      	bne.n	80180a6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80180a2:	2300      	movs	r3, #0
 80180a4:	e001      	b.n	80180aa <ip4_route+0xca>
  }

  return netif_default;
 80180a6:	4b05      	ldr	r3, [pc, #20]	; (80180bc <ip4_route+0xdc>)
 80180a8:	681b      	ldr	r3, [r3, #0]
}
 80180aa:	4618      	mov	r0, r3
 80180ac:	3714      	adds	r7, #20
 80180ae:	46bd      	mov	sp, r7
 80180b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180b4:	4770      	bx	lr
 80180b6:	bf00      	nop
 80180b8:	24007854 	.word	0x24007854
 80180bc:	24007858 	.word	0x24007858

080180c0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80180c0:	b580      	push	{r7, lr}
 80180c2:	b082      	sub	sp, #8
 80180c4:	af00      	add	r7, sp, #0
 80180c6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80180ce:	f003 0301 	and.w	r3, r3, #1
 80180d2:	b2db      	uxtb	r3, r3
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	d016      	beq.n	8018106 <ip4_input_accept+0x46>
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	3304      	adds	r3, #4
 80180dc:	681b      	ldr	r3, [r3, #0]
 80180de:	2b00      	cmp	r3, #0
 80180e0:	d011      	beq.n	8018106 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80180e2:	4b0b      	ldr	r3, [pc, #44]	; (8018110 <ip4_input_accept+0x50>)
 80180e4:	695a      	ldr	r2, [r3, #20]
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	3304      	adds	r3, #4
 80180ea:	681b      	ldr	r3, [r3, #0]
 80180ec:	429a      	cmp	r2, r3
 80180ee:	d008      	beq.n	8018102 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80180f0:	4b07      	ldr	r3, [pc, #28]	; (8018110 <ip4_input_accept+0x50>)
 80180f2:	695b      	ldr	r3, [r3, #20]
 80180f4:	6879      	ldr	r1, [r7, #4]
 80180f6:	4618      	mov	r0, r3
 80180f8:	f000 fa08 	bl	801850c <ip4_addr_isbroadcast_u32>
 80180fc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d001      	beq.n	8018106 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8018102:	2301      	movs	r3, #1
 8018104:	e000      	b.n	8018108 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8018106:	2300      	movs	r3, #0
}
 8018108:	4618      	mov	r0, r3
 801810a:	3708      	adds	r7, #8
 801810c:	46bd      	mov	sp, r7
 801810e:	bd80      	pop	{r7, pc}
 8018110:	240047a4 	.word	0x240047a4

08018114 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8018114:	b580      	push	{r7, lr}
 8018116:	b086      	sub	sp, #24
 8018118:	af00      	add	r7, sp, #0
 801811a:	6078      	str	r0, [r7, #4]
 801811c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	685b      	ldr	r3, [r3, #4]
 8018122:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8018124:	697b      	ldr	r3, [r7, #20]
 8018126:	781b      	ldrb	r3, [r3, #0]
 8018128:	091b      	lsrs	r3, r3, #4
 801812a:	b2db      	uxtb	r3, r3
 801812c:	2b04      	cmp	r3, #4
 801812e:	d004      	beq.n	801813a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8018130:	6878      	ldr	r0, [r7, #4]
 8018132:	f7f8 f827 	bl	8010184 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8018136:	2300      	movs	r3, #0
 8018138:	e107      	b.n	801834a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801813a:	697b      	ldr	r3, [r7, #20]
 801813c:	781b      	ldrb	r3, [r3, #0]
 801813e:	f003 030f 	and.w	r3, r3, #15
 8018142:	b2db      	uxtb	r3, r3
 8018144:	009b      	lsls	r3, r3, #2
 8018146:	b2db      	uxtb	r3, r3
 8018148:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801814a:	697b      	ldr	r3, [r7, #20]
 801814c:	885b      	ldrh	r3, [r3, #2]
 801814e:	b29b      	uxth	r3, r3
 8018150:	4618      	mov	r0, r3
 8018152:	f7f6 fb6d 	bl	800e830 <lwip_htons>
 8018156:	4603      	mov	r3, r0
 8018158:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	891b      	ldrh	r3, [r3, #8]
 801815e:	89ba      	ldrh	r2, [r7, #12]
 8018160:	429a      	cmp	r2, r3
 8018162:	d204      	bcs.n	801816e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8018164:	89bb      	ldrh	r3, [r7, #12]
 8018166:	4619      	mov	r1, r3
 8018168:	6878      	ldr	r0, [r7, #4]
 801816a:	f7f7 fe85 	bl	800fe78 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	895b      	ldrh	r3, [r3, #10]
 8018172:	89fa      	ldrh	r2, [r7, #14]
 8018174:	429a      	cmp	r2, r3
 8018176:	d807      	bhi.n	8018188 <ip4_input+0x74>
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	891b      	ldrh	r3, [r3, #8]
 801817c:	89ba      	ldrh	r2, [r7, #12]
 801817e:	429a      	cmp	r2, r3
 8018180:	d802      	bhi.n	8018188 <ip4_input+0x74>
 8018182:	89fb      	ldrh	r3, [r7, #14]
 8018184:	2b13      	cmp	r3, #19
 8018186:	d804      	bhi.n	8018192 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8018188:	6878      	ldr	r0, [r7, #4]
 801818a:	f7f7 fffb 	bl	8010184 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801818e:	2300      	movs	r3, #0
 8018190:	e0db      	b.n	801834a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8018192:	697b      	ldr	r3, [r7, #20]
 8018194:	691b      	ldr	r3, [r3, #16]
 8018196:	4a6f      	ldr	r2, [pc, #444]	; (8018354 <ip4_input+0x240>)
 8018198:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801819a:	697b      	ldr	r3, [r7, #20]
 801819c:	68db      	ldr	r3, [r3, #12]
 801819e:	4a6d      	ldr	r2, [pc, #436]	; (8018354 <ip4_input+0x240>)
 80181a0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80181a2:	4b6c      	ldr	r3, [pc, #432]	; (8018354 <ip4_input+0x240>)
 80181a4:	695b      	ldr	r3, [r3, #20]
 80181a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80181aa:	2be0      	cmp	r3, #224	; 0xe0
 80181ac:	d112      	bne.n	80181d4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80181ae:	683b      	ldr	r3, [r7, #0]
 80181b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80181b4:	f003 0301 	and.w	r3, r3, #1
 80181b8:	b2db      	uxtb	r3, r3
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	d007      	beq.n	80181ce <ip4_input+0xba>
 80181be:	683b      	ldr	r3, [r7, #0]
 80181c0:	3304      	adds	r3, #4
 80181c2:	681b      	ldr	r3, [r3, #0]
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	d002      	beq.n	80181ce <ip4_input+0xba>
      netif = inp;
 80181c8:	683b      	ldr	r3, [r7, #0]
 80181ca:	613b      	str	r3, [r7, #16]
 80181cc:	e02a      	b.n	8018224 <ip4_input+0x110>
    } else {
      netif = NULL;
 80181ce:	2300      	movs	r3, #0
 80181d0:	613b      	str	r3, [r7, #16]
 80181d2:	e027      	b.n	8018224 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80181d4:	6838      	ldr	r0, [r7, #0]
 80181d6:	f7ff ff73 	bl	80180c0 <ip4_input_accept>
 80181da:	4603      	mov	r3, r0
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d002      	beq.n	80181e6 <ip4_input+0xd2>
      netif = inp;
 80181e0:	683b      	ldr	r3, [r7, #0]
 80181e2:	613b      	str	r3, [r7, #16]
 80181e4:	e01e      	b.n	8018224 <ip4_input+0x110>
    } else {
      netif = NULL;
 80181e6:	2300      	movs	r3, #0
 80181e8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80181ea:	4b5a      	ldr	r3, [pc, #360]	; (8018354 <ip4_input+0x240>)
 80181ec:	695b      	ldr	r3, [r3, #20]
 80181ee:	b2db      	uxtb	r3, r3
 80181f0:	2b7f      	cmp	r3, #127	; 0x7f
 80181f2:	d017      	beq.n	8018224 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80181f4:	4b58      	ldr	r3, [pc, #352]	; (8018358 <ip4_input+0x244>)
 80181f6:	681b      	ldr	r3, [r3, #0]
 80181f8:	613b      	str	r3, [r7, #16]
 80181fa:	e00e      	b.n	801821a <ip4_input+0x106>
          if (netif == inp) {
 80181fc:	693a      	ldr	r2, [r7, #16]
 80181fe:	683b      	ldr	r3, [r7, #0]
 8018200:	429a      	cmp	r2, r3
 8018202:	d006      	beq.n	8018212 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8018204:	6938      	ldr	r0, [r7, #16]
 8018206:	f7ff ff5b 	bl	80180c0 <ip4_input_accept>
 801820a:	4603      	mov	r3, r0
 801820c:	2b00      	cmp	r3, #0
 801820e:	d108      	bne.n	8018222 <ip4_input+0x10e>
 8018210:	e000      	b.n	8018214 <ip4_input+0x100>
            continue;
 8018212:	bf00      	nop
        NETIF_FOREACH(netif) {
 8018214:	693b      	ldr	r3, [r7, #16]
 8018216:	681b      	ldr	r3, [r3, #0]
 8018218:	613b      	str	r3, [r7, #16]
 801821a:	693b      	ldr	r3, [r7, #16]
 801821c:	2b00      	cmp	r3, #0
 801821e:	d1ed      	bne.n	80181fc <ip4_input+0xe8>
 8018220:	e000      	b.n	8018224 <ip4_input+0x110>
            break;
 8018222:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018224:	4b4b      	ldr	r3, [pc, #300]	; (8018354 <ip4_input+0x240>)
 8018226:	691b      	ldr	r3, [r3, #16]
 8018228:	6839      	ldr	r1, [r7, #0]
 801822a:	4618      	mov	r0, r3
 801822c:	f000 f96e 	bl	801850c <ip4_addr_isbroadcast_u32>
 8018230:	4603      	mov	r3, r0
 8018232:	2b00      	cmp	r3, #0
 8018234:	d105      	bne.n	8018242 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8018236:	4b47      	ldr	r3, [pc, #284]	; (8018354 <ip4_input+0x240>)
 8018238:	691b      	ldr	r3, [r3, #16]
 801823a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801823e:	2be0      	cmp	r3, #224	; 0xe0
 8018240:	d104      	bne.n	801824c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8018242:	6878      	ldr	r0, [r7, #4]
 8018244:	f7f7 ff9e 	bl	8010184 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8018248:	2300      	movs	r3, #0
 801824a:	e07e      	b.n	801834a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801824c:	693b      	ldr	r3, [r7, #16]
 801824e:	2b00      	cmp	r3, #0
 8018250:	d104      	bne.n	801825c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8018252:	6878      	ldr	r0, [r7, #4]
 8018254:	f7f7 ff96 	bl	8010184 <pbuf_free>
    return ERR_OK;
 8018258:	2300      	movs	r3, #0
 801825a:	e076      	b.n	801834a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801825c:	697b      	ldr	r3, [r7, #20]
 801825e:	88db      	ldrh	r3, [r3, #6]
 8018260:	b29b      	uxth	r3, r3
 8018262:	461a      	mov	r2, r3
 8018264:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8018268:	4013      	ands	r3, r2
 801826a:	2b00      	cmp	r3, #0
 801826c:	d00b      	beq.n	8018286 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801826e:	6878      	ldr	r0, [r7, #4]
 8018270:	f000 fd24 	bl	8018cbc <ip4_reass>
 8018274:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	2b00      	cmp	r3, #0
 801827a:	d101      	bne.n	8018280 <ip4_input+0x16c>
      return ERR_OK;
 801827c:	2300      	movs	r3, #0
 801827e:	e064      	b.n	801834a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	685b      	ldr	r3, [r3, #4]
 8018284:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8018286:	4a33      	ldr	r2, [pc, #204]	; (8018354 <ip4_input+0x240>)
 8018288:	693b      	ldr	r3, [r7, #16]
 801828a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801828c:	4a31      	ldr	r2, [pc, #196]	; (8018354 <ip4_input+0x240>)
 801828e:	683b      	ldr	r3, [r7, #0]
 8018290:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8018292:	4a30      	ldr	r2, [pc, #192]	; (8018354 <ip4_input+0x240>)
 8018294:	697b      	ldr	r3, [r7, #20]
 8018296:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8018298:	697b      	ldr	r3, [r7, #20]
 801829a:	781b      	ldrb	r3, [r3, #0]
 801829c:	f003 030f 	and.w	r3, r3, #15
 80182a0:	b2db      	uxtb	r3, r3
 80182a2:	009b      	lsls	r3, r3, #2
 80182a4:	b2db      	uxtb	r3, r3
 80182a6:	b29a      	uxth	r2, r3
 80182a8:	4b2a      	ldr	r3, [pc, #168]	; (8018354 <ip4_input+0x240>)
 80182aa:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80182ac:	89fb      	ldrh	r3, [r7, #14]
 80182ae:	4619      	mov	r1, r3
 80182b0:	6878      	ldr	r0, [r7, #4]
 80182b2:	f7f7 fee1 	bl	8010078 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80182b6:	697b      	ldr	r3, [r7, #20]
 80182b8:	7a5b      	ldrb	r3, [r3, #9]
 80182ba:	2b11      	cmp	r3, #17
 80182bc:	d006      	beq.n	80182cc <ip4_input+0x1b8>
 80182be:	2b11      	cmp	r3, #17
 80182c0:	dc13      	bgt.n	80182ea <ip4_input+0x1d6>
 80182c2:	2b01      	cmp	r3, #1
 80182c4:	d00c      	beq.n	80182e0 <ip4_input+0x1cc>
 80182c6:	2b06      	cmp	r3, #6
 80182c8:	d005      	beq.n	80182d6 <ip4_input+0x1c2>
 80182ca:	e00e      	b.n	80182ea <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80182cc:	6839      	ldr	r1, [r7, #0]
 80182ce:	6878      	ldr	r0, [r7, #4]
 80182d0:	f7fe fc42 	bl	8016b58 <udp_input>
        break;
 80182d4:	e026      	b.n	8018324 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80182d6:	6839      	ldr	r1, [r7, #0]
 80182d8:	6878      	ldr	r0, [r7, #4]
 80182da:	f7fa f837 	bl	801234c <tcp_input>
        break;
 80182de:	e021      	b.n	8018324 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80182e0:	6839      	ldr	r1, [r7, #0]
 80182e2:	6878      	ldr	r0, [r7, #4]
 80182e4:	f7ff fcc8 	bl	8017c78 <icmp_input>
        break;
 80182e8:	e01c      	b.n	8018324 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80182ea:	4b1a      	ldr	r3, [pc, #104]	; (8018354 <ip4_input+0x240>)
 80182ec:	695b      	ldr	r3, [r3, #20]
 80182ee:	6939      	ldr	r1, [r7, #16]
 80182f0:	4618      	mov	r0, r3
 80182f2:	f000 f90b 	bl	801850c <ip4_addr_isbroadcast_u32>
 80182f6:	4603      	mov	r3, r0
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	d10f      	bne.n	801831c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80182fc:	4b15      	ldr	r3, [pc, #84]	; (8018354 <ip4_input+0x240>)
 80182fe:	695b      	ldr	r3, [r3, #20]
 8018300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018304:	2be0      	cmp	r3, #224	; 0xe0
 8018306:	d009      	beq.n	801831c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8018308:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801830c:	4619      	mov	r1, r3
 801830e:	6878      	ldr	r0, [r7, #4]
 8018310:	f7f7 ff25 	bl	801015e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018314:	2102      	movs	r1, #2
 8018316:	6878      	ldr	r0, [r7, #4]
 8018318:	f7ff fdce 	bl	8017eb8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801831c:	6878      	ldr	r0, [r7, #4]
 801831e:	f7f7 ff31 	bl	8010184 <pbuf_free>
        break;
 8018322:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8018324:	4b0b      	ldr	r3, [pc, #44]	; (8018354 <ip4_input+0x240>)
 8018326:	2200      	movs	r2, #0
 8018328:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801832a:	4b0a      	ldr	r3, [pc, #40]	; (8018354 <ip4_input+0x240>)
 801832c:	2200      	movs	r2, #0
 801832e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8018330:	4b08      	ldr	r3, [pc, #32]	; (8018354 <ip4_input+0x240>)
 8018332:	2200      	movs	r2, #0
 8018334:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8018336:	4b07      	ldr	r3, [pc, #28]	; (8018354 <ip4_input+0x240>)
 8018338:	2200      	movs	r2, #0
 801833a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801833c:	4b05      	ldr	r3, [pc, #20]	; (8018354 <ip4_input+0x240>)
 801833e:	2200      	movs	r2, #0
 8018340:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8018342:	4b04      	ldr	r3, [pc, #16]	; (8018354 <ip4_input+0x240>)
 8018344:	2200      	movs	r2, #0
 8018346:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8018348:	2300      	movs	r3, #0
}
 801834a:	4618      	mov	r0, r3
 801834c:	3718      	adds	r7, #24
 801834e:	46bd      	mov	sp, r7
 8018350:	bd80      	pop	{r7, pc}
 8018352:	bf00      	nop
 8018354:	240047a4 	.word	0x240047a4
 8018358:	24007854 	.word	0x24007854

0801835c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801835c:	b580      	push	{r7, lr}
 801835e:	b08a      	sub	sp, #40	; 0x28
 8018360:	af04      	add	r7, sp, #16
 8018362:	60f8      	str	r0, [r7, #12]
 8018364:	60b9      	str	r1, [r7, #8]
 8018366:	607a      	str	r2, [r7, #4]
 8018368:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801836a:	68bb      	ldr	r3, [r7, #8]
 801836c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	2b00      	cmp	r3, #0
 8018372:	d009      	beq.n	8018388 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8018374:	68bb      	ldr	r3, [r7, #8]
 8018376:	2b00      	cmp	r3, #0
 8018378:	d003      	beq.n	8018382 <ip4_output_if+0x26>
 801837a:	68bb      	ldr	r3, [r7, #8]
 801837c:	681b      	ldr	r3, [r3, #0]
 801837e:	2b00      	cmp	r3, #0
 8018380:	d102      	bne.n	8018388 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8018382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018384:	3304      	adds	r3, #4
 8018386:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8018388:	78fa      	ldrb	r2, [r7, #3]
 801838a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801838c:	9302      	str	r3, [sp, #8]
 801838e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018392:	9301      	str	r3, [sp, #4]
 8018394:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018398:	9300      	str	r3, [sp, #0]
 801839a:	4613      	mov	r3, r2
 801839c:	687a      	ldr	r2, [r7, #4]
 801839e:	6979      	ldr	r1, [r7, #20]
 80183a0:	68f8      	ldr	r0, [r7, #12]
 80183a2:	f000 f805 	bl	80183b0 <ip4_output_if_src>
 80183a6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80183a8:	4618      	mov	r0, r3
 80183aa:	3718      	adds	r7, #24
 80183ac:	46bd      	mov	sp, r7
 80183ae:	bd80      	pop	{r7, pc}

080183b0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80183b0:	b580      	push	{r7, lr}
 80183b2:	b088      	sub	sp, #32
 80183b4:	af00      	add	r7, sp, #0
 80183b6:	60f8      	str	r0, [r7, #12]
 80183b8:	60b9      	str	r1, [r7, #8]
 80183ba:	607a      	str	r2, [r7, #4]
 80183bc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80183be:	68fb      	ldr	r3, [r7, #12]
 80183c0:	7b9b      	ldrb	r3, [r3, #14]
 80183c2:	2b01      	cmp	r3, #1
 80183c4:	d006      	beq.n	80183d4 <ip4_output_if_src+0x24>
 80183c6:	4b4b      	ldr	r3, [pc, #300]	; (80184f4 <ip4_output_if_src+0x144>)
 80183c8:	f44f 7255 	mov.w	r2, #852	; 0x354
 80183cc:	494a      	ldr	r1, [pc, #296]	; (80184f8 <ip4_output_if_src+0x148>)
 80183ce:	484b      	ldr	r0, [pc, #300]	; (80184fc <ip4_output_if_src+0x14c>)
 80183d0:	f001 fb30 	bl	8019a34 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	d060      	beq.n	801849c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80183da:	2314      	movs	r3, #20
 80183dc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80183de:	2114      	movs	r1, #20
 80183e0:	68f8      	ldr	r0, [r7, #12]
 80183e2:	f7f7 fe39 	bl	8010058 <pbuf_add_header>
 80183e6:	4603      	mov	r3, r0
 80183e8:	2b00      	cmp	r3, #0
 80183ea:	d002      	beq.n	80183f2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80183ec:	f06f 0301 	mvn.w	r3, #1
 80183f0:	e07c      	b.n	80184ec <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80183f2:	68fb      	ldr	r3, [r7, #12]
 80183f4:	685b      	ldr	r3, [r3, #4]
 80183f6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80183f8:	68fb      	ldr	r3, [r7, #12]
 80183fa:	895b      	ldrh	r3, [r3, #10]
 80183fc:	2b13      	cmp	r3, #19
 80183fe:	d806      	bhi.n	801840e <ip4_output_if_src+0x5e>
 8018400:	4b3c      	ldr	r3, [pc, #240]	; (80184f4 <ip4_output_if_src+0x144>)
 8018402:	f44f 7262 	mov.w	r2, #904	; 0x388
 8018406:	493e      	ldr	r1, [pc, #248]	; (8018500 <ip4_output_if_src+0x150>)
 8018408:	483c      	ldr	r0, [pc, #240]	; (80184fc <ip4_output_if_src+0x14c>)
 801840a:	f001 fb13 	bl	8019a34 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801840e:	69fb      	ldr	r3, [r7, #28]
 8018410:	78fa      	ldrb	r2, [r7, #3]
 8018412:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8018414:	69fb      	ldr	r3, [r7, #28]
 8018416:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801841a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	681a      	ldr	r2, [r3, #0]
 8018420:	69fb      	ldr	r3, [r7, #28]
 8018422:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8018424:	8b7b      	ldrh	r3, [r7, #26]
 8018426:	089b      	lsrs	r3, r3, #2
 8018428:	b29b      	uxth	r3, r3
 801842a:	b2db      	uxtb	r3, r3
 801842c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018430:	b2da      	uxtb	r2, r3
 8018432:	69fb      	ldr	r3, [r7, #28]
 8018434:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8018436:	69fb      	ldr	r3, [r7, #28]
 8018438:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801843c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801843e:	68fb      	ldr	r3, [r7, #12]
 8018440:	891b      	ldrh	r3, [r3, #8]
 8018442:	4618      	mov	r0, r3
 8018444:	f7f6 f9f4 	bl	800e830 <lwip_htons>
 8018448:	4603      	mov	r3, r0
 801844a:	461a      	mov	r2, r3
 801844c:	69fb      	ldr	r3, [r7, #28]
 801844e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8018450:	69fb      	ldr	r3, [r7, #28]
 8018452:	2200      	movs	r2, #0
 8018454:	719a      	strb	r2, [r3, #6]
 8018456:	2200      	movs	r2, #0
 8018458:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801845a:	4b2a      	ldr	r3, [pc, #168]	; (8018504 <ip4_output_if_src+0x154>)
 801845c:	881b      	ldrh	r3, [r3, #0]
 801845e:	4618      	mov	r0, r3
 8018460:	f7f6 f9e6 	bl	800e830 <lwip_htons>
 8018464:	4603      	mov	r3, r0
 8018466:	461a      	mov	r2, r3
 8018468:	69fb      	ldr	r3, [r7, #28]
 801846a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801846c:	4b25      	ldr	r3, [pc, #148]	; (8018504 <ip4_output_if_src+0x154>)
 801846e:	881b      	ldrh	r3, [r3, #0]
 8018470:	3301      	adds	r3, #1
 8018472:	b29a      	uxth	r2, r3
 8018474:	4b23      	ldr	r3, [pc, #140]	; (8018504 <ip4_output_if_src+0x154>)
 8018476:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8018478:	68bb      	ldr	r3, [r7, #8]
 801847a:	2b00      	cmp	r3, #0
 801847c:	d104      	bne.n	8018488 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801847e:	4b22      	ldr	r3, [pc, #136]	; (8018508 <ip4_output_if_src+0x158>)
 8018480:	681a      	ldr	r2, [r3, #0]
 8018482:	69fb      	ldr	r3, [r7, #28]
 8018484:	60da      	str	r2, [r3, #12]
 8018486:	e003      	b.n	8018490 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8018488:	68bb      	ldr	r3, [r7, #8]
 801848a:	681a      	ldr	r2, [r3, #0]
 801848c:	69fb      	ldr	r3, [r7, #28]
 801848e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8018490:	69fb      	ldr	r3, [r7, #28]
 8018492:	2200      	movs	r2, #0
 8018494:	729a      	strb	r2, [r3, #10]
 8018496:	2200      	movs	r2, #0
 8018498:	72da      	strb	r2, [r3, #11]
 801849a:	e00f      	b.n	80184bc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801849c:	68fb      	ldr	r3, [r7, #12]
 801849e:	895b      	ldrh	r3, [r3, #10]
 80184a0:	2b13      	cmp	r3, #19
 80184a2:	d802      	bhi.n	80184aa <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80184a4:	f06f 0301 	mvn.w	r3, #1
 80184a8:	e020      	b.n	80184ec <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80184aa:	68fb      	ldr	r3, [r7, #12]
 80184ac:	685b      	ldr	r3, [r3, #4]
 80184ae:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80184b0:	69fb      	ldr	r3, [r7, #28]
 80184b2:	691b      	ldr	r3, [r3, #16]
 80184b4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80184b6:	f107 0314 	add.w	r3, r7, #20
 80184ba:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80184bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80184c0:	2b00      	cmp	r3, #0
 80184c2:	d00c      	beq.n	80184de <ip4_output_if_src+0x12e>
 80184c4:	68fb      	ldr	r3, [r7, #12]
 80184c6:	891a      	ldrh	r2, [r3, #8]
 80184c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80184cc:	429a      	cmp	r2, r3
 80184ce:	d906      	bls.n	80184de <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80184d0:	687a      	ldr	r2, [r7, #4]
 80184d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80184d4:	68f8      	ldr	r0, [r7, #12]
 80184d6:	f000 fddf 	bl	8019098 <ip4_frag>
 80184da:	4603      	mov	r3, r0
 80184dc:	e006      	b.n	80184ec <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80184de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184e0:	695b      	ldr	r3, [r3, #20]
 80184e2:	687a      	ldr	r2, [r7, #4]
 80184e4:	68f9      	ldr	r1, [r7, #12]
 80184e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80184e8:	4798      	blx	r3
 80184ea:	4603      	mov	r3, r0
}
 80184ec:	4618      	mov	r0, r3
 80184ee:	3720      	adds	r7, #32
 80184f0:	46bd      	mov	sp, r7
 80184f2:	bd80      	pop	{r7, pc}
 80184f4:	0801d228 	.word	0x0801d228
 80184f8:	0801d25c 	.word	0x0801d25c
 80184fc:	0801d268 	.word	0x0801d268
 8018500:	0801d290 	.word	0x0801d290
 8018504:	24004256 	.word	0x24004256
 8018508:	0801dec0 	.word	0x0801dec0

0801850c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801850c:	b480      	push	{r7}
 801850e:	b085      	sub	sp, #20
 8018510:	af00      	add	r7, sp, #0
 8018512:	6078      	str	r0, [r7, #4]
 8018514:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018520:	d002      	beq.n	8018528 <ip4_addr_isbroadcast_u32+0x1c>
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	2b00      	cmp	r3, #0
 8018526:	d101      	bne.n	801852c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8018528:	2301      	movs	r3, #1
 801852a:	e02a      	b.n	8018582 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801852c:	683b      	ldr	r3, [r7, #0]
 801852e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018532:	f003 0302 	and.w	r3, r3, #2
 8018536:	2b00      	cmp	r3, #0
 8018538:	d101      	bne.n	801853e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801853a:	2300      	movs	r3, #0
 801853c:	e021      	b.n	8018582 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801853e:	683b      	ldr	r3, [r7, #0]
 8018540:	3304      	adds	r3, #4
 8018542:	681b      	ldr	r3, [r3, #0]
 8018544:	687a      	ldr	r2, [r7, #4]
 8018546:	429a      	cmp	r2, r3
 8018548:	d101      	bne.n	801854e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801854a:	2300      	movs	r3, #0
 801854c:	e019      	b.n	8018582 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801854e:	68fa      	ldr	r2, [r7, #12]
 8018550:	683b      	ldr	r3, [r7, #0]
 8018552:	3304      	adds	r3, #4
 8018554:	681b      	ldr	r3, [r3, #0]
 8018556:	405a      	eors	r2, r3
 8018558:	683b      	ldr	r3, [r7, #0]
 801855a:	3308      	adds	r3, #8
 801855c:	681b      	ldr	r3, [r3, #0]
 801855e:	4013      	ands	r3, r2
 8018560:	2b00      	cmp	r3, #0
 8018562:	d10d      	bne.n	8018580 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018564:	683b      	ldr	r3, [r7, #0]
 8018566:	3308      	adds	r3, #8
 8018568:	681b      	ldr	r3, [r3, #0]
 801856a:	43da      	mvns	r2, r3
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8018570:	683b      	ldr	r3, [r7, #0]
 8018572:	3308      	adds	r3, #8
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018578:	429a      	cmp	r2, r3
 801857a:	d101      	bne.n	8018580 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801857c:	2301      	movs	r3, #1
 801857e:	e000      	b.n	8018582 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8018580:	2300      	movs	r3, #0
  }
}
 8018582:	4618      	mov	r0, r3
 8018584:	3714      	adds	r7, #20
 8018586:	46bd      	mov	sp, r7
 8018588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801858c:	4770      	bx	lr
	...

08018590 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8018590:	b580      	push	{r7, lr}
 8018592:	b082      	sub	sp, #8
 8018594:	af00      	add	r7, sp, #0
 8018596:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8018598:	2210      	movs	r2, #16
 801859a:	4904      	ldr	r1, [pc, #16]	; (80185ac <ip4addr_ntoa+0x1c>)
 801859c:	6878      	ldr	r0, [r7, #4]
 801859e:	f000 f807 	bl	80185b0 <ip4addr_ntoa_r>
 80185a2:	4603      	mov	r3, r0
}
 80185a4:	4618      	mov	r0, r3
 80185a6:	3708      	adds	r7, #8
 80185a8:	46bd      	mov	sp, r7
 80185aa:	bd80      	pop	{r7, pc}
 80185ac:	24004258 	.word	0x24004258

080185b0 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 80185b0:	b480      	push	{r7}
 80185b2:	b08d      	sub	sp, #52	; 0x34
 80185b4:	af00      	add	r7, sp, #0
 80185b6:	60f8      	str	r0, [r7, #12]
 80185b8:	60b9      	str	r1, [r7, #8]
 80185ba:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 80185bc:	2300      	movs	r3, #0
 80185be:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 80185c0:	68fb      	ldr	r3, [r7, #12]
 80185c2:	681b      	ldr	r3, [r3, #0]
 80185c4:	61bb      	str	r3, [r7, #24]

  rp = buf;
 80185c6:	68bb      	ldr	r3, [r7, #8]
 80185c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 80185ca:	f107 0318 	add.w	r3, r7, #24
 80185ce:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80185d0:	2300      	movs	r3, #0
 80185d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80185d6:	e059      	b.n	801868c <ip4addr_ntoa_r+0xdc>
    i = 0;
 80185d8:	2300      	movs	r3, #0
 80185da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 80185de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185e0:	781a      	ldrb	r2, [r3, #0]
 80185e2:	4b33      	ldr	r3, [pc, #204]	; (80186b0 <ip4addr_ntoa_r+0x100>)
 80185e4:	fba3 1302 	umull	r1, r3, r3, r2
 80185e8:	08d9      	lsrs	r1, r3, #3
 80185ea:	460b      	mov	r3, r1
 80185ec:	009b      	lsls	r3, r3, #2
 80185ee:	440b      	add	r3, r1
 80185f0:	005b      	lsls	r3, r3, #1
 80185f2:	1ad3      	subs	r3, r2, r3
 80185f4:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 80185f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185f8:	781b      	ldrb	r3, [r3, #0]
 80185fa:	4a2d      	ldr	r2, [pc, #180]	; (80186b0 <ip4addr_ntoa_r+0x100>)
 80185fc:	fba2 2303 	umull	r2, r3, r2, r3
 8018600:	08db      	lsrs	r3, r3, #3
 8018602:	b2da      	uxtb	r2, r3
 8018604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018606:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8018608:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801860c:	1c5a      	adds	r2, r3, #1
 801860e:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8018612:	4619      	mov	r1, r3
 8018614:	7ffb      	ldrb	r3, [r7, #31]
 8018616:	3330      	adds	r3, #48	; 0x30
 8018618:	b2da      	uxtb	r2, r3
 801861a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801861e:	440b      	add	r3, r1
 8018620:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8018624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018626:	781b      	ldrb	r3, [r3, #0]
 8018628:	2b00      	cmp	r3, #0
 801862a:	d1d8      	bne.n	80185de <ip4addr_ntoa_r+0x2e>
    while (i--) {
 801862c:	e012      	b.n	8018654 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 801862e:	6a3b      	ldr	r3, [r7, #32]
 8018630:	1c5a      	adds	r2, r3, #1
 8018632:	623a      	str	r2, [r7, #32]
 8018634:	687a      	ldr	r2, [r7, #4]
 8018636:	429a      	cmp	r2, r3
 8018638:	dc01      	bgt.n	801863e <ip4addr_ntoa_r+0x8e>
        return NULL;
 801863a:	2300      	movs	r3, #0
 801863c:	e031      	b.n	80186a2 <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 801863e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8018642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018644:	1c59      	adds	r1, r3, #1
 8018646:	62f9      	str	r1, [r7, #44]	; 0x2c
 8018648:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801864c:	440a      	add	r2, r1
 801864e:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8018652:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8018654:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018658:	1e5a      	subs	r2, r3, #1
 801865a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801865e:	2b00      	cmp	r3, #0
 8018660:	d1e5      	bne.n	801862e <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8018662:	6a3b      	ldr	r3, [r7, #32]
 8018664:	1c5a      	adds	r2, r3, #1
 8018666:	623a      	str	r2, [r7, #32]
 8018668:	687a      	ldr	r2, [r7, #4]
 801866a:	429a      	cmp	r2, r3
 801866c:	dc01      	bgt.n	8018672 <ip4addr_ntoa_r+0xc2>
      return NULL;
 801866e:	2300      	movs	r3, #0
 8018670:	e017      	b.n	80186a2 <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 8018672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018674:	1c5a      	adds	r2, r3, #1
 8018676:	62fa      	str	r2, [r7, #44]	; 0x2c
 8018678:	222e      	movs	r2, #46	; 0x2e
 801867a:	701a      	strb	r2, [r3, #0]
    ap++;
 801867c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801867e:	3301      	adds	r3, #1
 8018680:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8018682:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018686:	3301      	adds	r3, #1
 8018688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801868c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018690:	2b03      	cmp	r3, #3
 8018692:	d9a1      	bls.n	80185d8 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8018694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018696:	3b01      	subs	r3, #1
 8018698:	62fb      	str	r3, [r7, #44]	; 0x2c
 801869a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801869c:	2200      	movs	r2, #0
 801869e:	701a      	strb	r2, [r3, #0]
  return buf;
 80186a0:	68bb      	ldr	r3, [r7, #8]
}
 80186a2:	4618      	mov	r0, r3
 80186a4:	3734      	adds	r7, #52	; 0x34
 80186a6:	46bd      	mov	sp, r7
 80186a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186ac:	4770      	bx	lr
 80186ae:	bf00      	nop
 80186b0:	cccccccd 	.word	0xcccccccd

080186b4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80186b4:	b580      	push	{r7, lr}
 80186b6:	b084      	sub	sp, #16
 80186b8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80186ba:	2300      	movs	r3, #0
 80186bc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80186be:	4b12      	ldr	r3, [pc, #72]	; (8018708 <ip_reass_tmr+0x54>)
 80186c0:	681b      	ldr	r3, [r3, #0]
 80186c2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80186c4:	e018      	b.n	80186f8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80186c6:	68fb      	ldr	r3, [r7, #12]
 80186c8:	7fdb      	ldrb	r3, [r3, #31]
 80186ca:	2b00      	cmp	r3, #0
 80186cc:	d00b      	beq.n	80186e6 <ip_reass_tmr+0x32>
      r->timer--;
 80186ce:	68fb      	ldr	r3, [r7, #12]
 80186d0:	7fdb      	ldrb	r3, [r3, #31]
 80186d2:	3b01      	subs	r3, #1
 80186d4:	b2da      	uxtb	r2, r3
 80186d6:	68fb      	ldr	r3, [r7, #12]
 80186d8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80186da:	68fb      	ldr	r3, [r7, #12]
 80186dc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80186de:	68fb      	ldr	r3, [r7, #12]
 80186e0:	681b      	ldr	r3, [r3, #0]
 80186e2:	60fb      	str	r3, [r7, #12]
 80186e4:	e008      	b.n	80186f8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80186e6:	68fb      	ldr	r3, [r7, #12]
 80186e8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80186ea:	68fb      	ldr	r3, [r7, #12]
 80186ec:	681b      	ldr	r3, [r3, #0]
 80186ee:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80186f0:	68b9      	ldr	r1, [r7, #8]
 80186f2:	6878      	ldr	r0, [r7, #4]
 80186f4:	f000 f80a 	bl	801870c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80186f8:	68fb      	ldr	r3, [r7, #12]
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	d1e3      	bne.n	80186c6 <ip_reass_tmr+0x12>
    }
  }
}
 80186fe:	bf00      	nop
 8018700:	bf00      	nop
 8018702:	3710      	adds	r7, #16
 8018704:	46bd      	mov	sp, r7
 8018706:	bd80      	pop	{r7, pc}
 8018708:	24004268 	.word	0x24004268

0801870c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801870c:	b580      	push	{r7, lr}
 801870e:	b088      	sub	sp, #32
 8018710:	af00      	add	r7, sp, #0
 8018712:	6078      	str	r0, [r7, #4]
 8018714:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8018716:	2300      	movs	r3, #0
 8018718:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801871a:	683a      	ldr	r2, [r7, #0]
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	429a      	cmp	r2, r3
 8018720:	d105      	bne.n	801872e <ip_reass_free_complete_datagram+0x22>
 8018722:	4b45      	ldr	r3, [pc, #276]	; (8018838 <ip_reass_free_complete_datagram+0x12c>)
 8018724:	22ab      	movs	r2, #171	; 0xab
 8018726:	4945      	ldr	r1, [pc, #276]	; (801883c <ip_reass_free_complete_datagram+0x130>)
 8018728:	4845      	ldr	r0, [pc, #276]	; (8018840 <ip_reass_free_complete_datagram+0x134>)
 801872a:	f001 f983 	bl	8019a34 <iprintf>
  if (prev != NULL) {
 801872e:	683b      	ldr	r3, [r7, #0]
 8018730:	2b00      	cmp	r3, #0
 8018732:	d00a      	beq.n	801874a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018734:	683b      	ldr	r3, [r7, #0]
 8018736:	681b      	ldr	r3, [r3, #0]
 8018738:	687a      	ldr	r2, [r7, #4]
 801873a:	429a      	cmp	r2, r3
 801873c:	d005      	beq.n	801874a <ip_reass_free_complete_datagram+0x3e>
 801873e:	4b3e      	ldr	r3, [pc, #248]	; (8018838 <ip_reass_free_complete_datagram+0x12c>)
 8018740:	22ad      	movs	r2, #173	; 0xad
 8018742:	4940      	ldr	r1, [pc, #256]	; (8018844 <ip_reass_free_complete_datagram+0x138>)
 8018744:	483e      	ldr	r0, [pc, #248]	; (8018840 <ip_reass_free_complete_datagram+0x134>)
 8018746:	f001 f975 	bl	8019a34 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801874a:	687b      	ldr	r3, [r7, #4]
 801874c:	685b      	ldr	r3, [r3, #4]
 801874e:	685b      	ldr	r3, [r3, #4]
 8018750:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8018752:	697b      	ldr	r3, [r7, #20]
 8018754:	889b      	ldrh	r3, [r3, #4]
 8018756:	b29b      	uxth	r3, r3
 8018758:	2b00      	cmp	r3, #0
 801875a:	d12a      	bne.n	80187b2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	685b      	ldr	r3, [r3, #4]
 8018760:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8018762:	697b      	ldr	r3, [r7, #20]
 8018764:	681a      	ldr	r2, [r3, #0]
 8018766:	687b      	ldr	r3, [r7, #4]
 8018768:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801876a:	69bb      	ldr	r3, [r7, #24]
 801876c:	6858      	ldr	r0, [r3, #4]
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	3308      	adds	r3, #8
 8018772:	2214      	movs	r2, #20
 8018774:	4619      	mov	r1, r3
 8018776:	f001 f8ec 	bl	8019952 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801877a:	2101      	movs	r1, #1
 801877c:	69b8      	ldr	r0, [r7, #24]
 801877e:	f7ff fbab 	bl	8017ed8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8018782:	69b8      	ldr	r0, [r7, #24]
 8018784:	f7f7 fd8c 	bl	80102a0 <pbuf_clen>
 8018788:	4603      	mov	r3, r0
 801878a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801878c:	8bfa      	ldrh	r2, [r7, #30]
 801878e:	8a7b      	ldrh	r3, [r7, #18]
 8018790:	4413      	add	r3, r2
 8018792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018796:	db05      	blt.n	80187a4 <ip_reass_free_complete_datagram+0x98>
 8018798:	4b27      	ldr	r3, [pc, #156]	; (8018838 <ip_reass_free_complete_datagram+0x12c>)
 801879a:	22bc      	movs	r2, #188	; 0xbc
 801879c:	492a      	ldr	r1, [pc, #168]	; (8018848 <ip_reass_free_complete_datagram+0x13c>)
 801879e:	4828      	ldr	r0, [pc, #160]	; (8018840 <ip_reass_free_complete_datagram+0x134>)
 80187a0:	f001 f948 	bl	8019a34 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80187a4:	8bfa      	ldrh	r2, [r7, #30]
 80187a6:	8a7b      	ldrh	r3, [r7, #18]
 80187a8:	4413      	add	r3, r2
 80187aa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80187ac:	69b8      	ldr	r0, [r7, #24]
 80187ae:	f7f7 fce9 	bl	8010184 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80187b2:	687b      	ldr	r3, [r7, #4]
 80187b4:	685b      	ldr	r3, [r3, #4]
 80187b6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80187b8:	e01f      	b.n	80187fa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80187ba:	69bb      	ldr	r3, [r7, #24]
 80187bc:	685b      	ldr	r3, [r3, #4]
 80187be:	617b      	str	r3, [r7, #20]
    pcur = p;
 80187c0:	69bb      	ldr	r3, [r7, #24]
 80187c2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80187c4:	697b      	ldr	r3, [r7, #20]
 80187c6:	681b      	ldr	r3, [r3, #0]
 80187c8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80187ca:	68f8      	ldr	r0, [r7, #12]
 80187cc:	f7f7 fd68 	bl	80102a0 <pbuf_clen>
 80187d0:	4603      	mov	r3, r0
 80187d2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80187d4:	8bfa      	ldrh	r2, [r7, #30]
 80187d6:	8a7b      	ldrh	r3, [r7, #18]
 80187d8:	4413      	add	r3, r2
 80187da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80187de:	db05      	blt.n	80187ec <ip_reass_free_complete_datagram+0xe0>
 80187e0:	4b15      	ldr	r3, [pc, #84]	; (8018838 <ip_reass_free_complete_datagram+0x12c>)
 80187e2:	22cc      	movs	r2, #204	; 0xcc
 80187e4:	4918      	ldr	r1, [pc, #96]	; (8018848 <ip_reass_free_complete_datagram+0x13c>)
 80187e6:	4816      	ldr	r0, [pc, #88]	; (8018840 <ip_reass_free_complete_datagram+0x134>)
 80187e8:	f001 f924 	bl	8019a34 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80187ec:	8bfa      	ldrh	r2, [r7, #30]
 80187ee:	8a7b      	ldrh	r3, [r7, #18]
 80187f0:	4413      	add	r3, r2
 80187f2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80187f4:	68f8      	ldr	r0, [r7, #12]
 80187f6:	f7f7 fcc5 	bl	8010184 <pbuf_free>
  while (p != NULL) {
 80187fa:	69bb      	ldr	r3, [r7, #24]
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	d1dc      	bne.n	80187ba <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8018800:	6839      	ldr	r1, [r7, #0]
 8018802:	6878      	ldr	r0, [r7, #4]
 8018804:	f000 f8c2 	bl	801898c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8018808:	4b10      	ldr	r3, [pc, #64]	; (801884c <ip_reass_free_complete_datagram+0x140>)
 801880a:	881b      	ldrh	r3, [r3, #0]
 801880c:	8bfa      	ldrh	r2, [r7, #30]
 801880e:	429a      	cmp	r2, r3
 8018810:	d905      	bls.n	801881e <ip_reass_free_complete_datagram+0x112>
 8018812:	4b09      	ldr	r3, [pc, #36]	; (8018838 <ip_reass_free_complete_datagram+0x12c>)
 8018814:	22d2      	movs	r2, #210	; 0xd2
 8018816:	490e      	ldr	r1, [pc, #56]	; (8018850 <ip_reass_free_complete_datagram+0x144>)
 8018818:	4809      	ldr	r0, [pc, #36]	; (8018840 <ip_reass_free_complete_datagram+0x134>)
 801881a:	f001 f90b 	bl	8019a34 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801881e:	4b0b      	ldr	r3, [pc, #44]	; (801884c <ip_reass_free_complete_datagram+0x140>)
 8018820:	881a      	ldrh	r2, [r3, #0]
 8018822:	8bfb      	ldrh	r3, [r7, #30]
 8018824:	1ad3      	subs	r3, r2, r3
 8018826:	b29a      	uxth	r2, r3
 8018828:	4b08      	ldr	r3, [pc, #32]	; (801884c <ip_reass_free_complete_datagram+0x140>)
 801882a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801882c:	8bfb      	ldrh	r3, [r7, #30]
}
 801882e:	4618      	mov	r0, r3
 8018830:	3720      	adds	r7, #32
 8018832:	46bd      	mov	sp, r7
 8018834:	bd80      	pop	{r7, pc}
 8018836:	bf00      	nop
 8018838:	0801d2c0 	.word	0x0801d2c0
 801883c:	0801d2fc 	.word	0x0801d2fc
 8018840:	0801d308 	.word	0x0801d308
 8018844:	0801d330 	.word	0x0801d330
 8018848:	0801d344 	.word	0x0801d344
 801884c:	2400426c 	.word	0x2400426c
 8018850:	0801d364 	.word	0x0801d364

08018854 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8018854:	b580      	push	{r7, lr}
 8018856:	b08a      	sub	sp, #40	; 0x28
 8018858:	af00      	add	r7, sp, #0
 801885a:	6078      	str	r0, [r7, #4]
 801885c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801885e:	2300      	movs	r3, #0
 8018860:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8018862:	2300      	movs	r3, #0
 8018864:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8018866:	2300      	movs	r3, #0
 8018868:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801886a:	2300      	movs	r3, #0
 801886c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801886e:	2300      	movs	r3, #0
 8018870:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8018872:	4b28      	ldr	r3, [pc, #160]	; (8018914 <ip_reass_remove_oldest_datagram+0xc0>)
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018878:	e030      	b.n	80188dc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801887a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801887c:	695a      	ldr	r2, [r3, #20]
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	68db      	ldr	r3, [r3, #12]
 8018882:	429a      	cmp	r2, r3
 8018884:	d10c      	bne.n	80188a0 <ip_reass_remove_oldest_datagram+0x4c>
 8018886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018888:	699a      	ldr	r2, [r3, #24]
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	691b      	ldr	r3, [r3, #16]
 801888e:	429a      	cmp	r2, r3
 8018890:	d106      	bne.n	80188a0 <ip_reass_remove_oldest_datagram+0x4c>
 8018892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018894:	899a      	ldrh	r2, [r3, #12]
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	889b      	ldrh	r3, [r3, #4]
 801889a:	b29b      	uxth	r3, r3
 801889c:	429a      	cmp	r2, r3
 801889e:	d014      	beq.n	80188ca <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80188a0:	693b      	ldr	r3, [r7, #16]
 80188a2:	3301      	adds	r3, #1
 80188a4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80188a6:	6a3b      	ldr	r3, [r7, #32]
 80188a8:	2b00      	cmp	r3, #0
 80188aa:	d104      	bne.n	80188b6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80188ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188ae:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80188b0:	69fb      	ldr	r3, [r7, #28]
 80188b2:	61bb      	str	r3, [r7, #24]
 80188b4:	e009      	b.n	80188ca <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80188b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188b8:	7fda      	ldrb	r2, [r3, #31]
 80188ba:	6a3b      	ldr	r3, [r7, #32]
 80188bc:	7fdb      	ldrb	r3, [r3, #31]
 80188be:	429a      	cmp	r2, r3
 80188c0:	d803      	bhi.n	80188ca <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80188c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188c4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80188c6:	69fb      	ldr	r3, [r7, #28]
 80188c8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80188ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188cc:	681b      	ldr	r3, [r3, #0]
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	d001      	beq.n	80188d6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80188d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188d4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80188d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188d8:	681b      	ldr	r3, [r3, #0]
 80188da:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80188dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188de:	2b00      	cmp	r3, #0
 80188e0:	d1cb      	bne.n	801887a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80188e2:	6a3b      	ldr	r3, [r7, #32]
 80188e4:	2b00      	cmp	r3, #0
 80188e6:	d008      	beq.n	80188fa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80188e8:	69b9      	ldr	r1, [r7, #24]
 80188ea:	6a38      	ldr	r0, [r7, #32]
 80188ec:	f7ff ff0e 	bl	801870c <ip_reass_free_complete_datagram>
 80188f0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80188f2:	697a      	ldr	r2, [r7, #20]
 80188f4:	68fb      	ldr	r3, [r7, #12]
 80188f6:	4413      	add	r3, r2
 80188f8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80188fa:	697a      	ldr	r2, [r7, #20]
 80188fc:	683b      	ldr	r3, [r7, #0]
 80188fe:	429a      	cmp	r2, r3
 8018900:	da02      	bge.n	8018908 <ip_reass_remove_oldest_datagram+0xb4>
 8018902:	693b      	ldr	r3, [r7, #16]
 8018904:	2b01      	cmp	r3, #1
 8018906:	dcac      	bgt.n	8018862 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018908:	697b      	ldr	r3, [r7, #20]
}
 801890a:	4618      	mov	r0, r3
 801890c:	3728      	adds	r7, #40	; 0x28
 801890e:	46bd      	mov	sp, r7
 8018910:	bd80      	pop	{r7, pc}
 8018912:	bf00      	nop
 8018914:	24004268 	.word	0x24004268

08018918 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8018918:	b580      	push	{r7, lr}
 801891a:	b084      	sub	sp, #16
 801891c:	af00      	add	r7, sp, #0
 801891e:	6078      	str	r0, [r7, #4]
 8018920:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018922:	2004      	movs	r0, #4
 8018924:	f7f6 fd14 	bl	800f350 <memp_malloc>
 8018928:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801892a:	68fb      	ldr	r3, [r7, #12]
 801892c:	2b00      	cmp	r3, #0
 801892e:	d110      	bne.n	8018952 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8018930:	6839      	ldr	r1, [r7, #0]
 8018932:	6878      	ldr	r0, [r7, #4]
 8018934:	f7ff ff8e 	bl	8018854 <ip_reass_remove_oldest_datagram>
 8018938:	4602      	mov	r2, r0
 801893a:	683b      	ldr	r3, [r7, #0]
 801893c:	4293      	cmp	r3, r2
 801893e:	dc03      	bgt.n	8018948 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018940:	2004      	movs	r0, #4
 8018942:	f7f6 fd05 	bl	800f350 <memp_malloc>
 8018946:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018948:	68fb      	ldr	r3, [r7, #12]
 801894a:	2b00      	cmp	r3, #0
 801894c:	d101      	bne.n	8018952 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801894e:	2300      	movs	r3, #0
 8018950:	e016      	b.n	8018980 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8018952:	2220      	movs	r2, #32
 8018954:	2100      	movs	r1, #0
 8018956:	68f8      	ldr	r0, [r7, #12]
 8018958:	f001 f809 	bl	801996e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801895c:	68fb      	ldr	r3, [r7, #12]
 801895e:	220f      	movs	r2, #15
 8018960:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8018962:	4b09      	ldr	r3, [pc, #36]	; (8018988 <ip_reass_enqueue_new_datagram+0x70>)
 8018964:	681a      	ldr	r2, [r3, #0]
 8018966:	68fb      	ldr	r3, [r7, #12]
 8018968:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801896a:	4a07      	ldr	r2, [pc, #28]	; (8018988 <ip_reass_enqueue_new_datagram+0x70>)
 801896c:	68fb      	ldr	r3, [r7, #12]
 801896e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8018970:	68fb      	ldr	r3, [r7, #12]
 8018972:	3308      	adds	r3, #8
 8018974:	2214      	movs	r2, #20
 8018976:	6879      	ldr	r1, [r7, #4]
 8018978:	4618      	mov	r0, r3
 801897a:	f000 ffea 	bl	8019952 <memcpy>
  return ipr;
 801897e:	68fb      	ldr	r3, [r7, #12]
}
 8018980:	4618      	mov	r0, r3
 8018982:	3710      	adds	r7, #16
 8018984:	46bd      	mov	sp, r7
 8018986:	bd80      	pop	{r7, pc}
 8018988:	24004268 	.word	0x24004268

0801898c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801898c:	b580      	push	{r7, lr}
 801898e:	b082      	sub	sp, #8
 8018990:	af00      	add	r7, sp, #0
 8018992:	6078      	str	r0, [r7, #4]
 8018994:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8018996:	4b10      	ldr	r3, [pc, #64]	; (80189d8 <ip_reass_dequeue_datagram+0x4c>)
 8018998:	681b      	ldr	r3, [r3, #0]
 801899a:	687a      	ldr	r2, [r7, #4]
 801899c:	429a      	cmp	r2, r3
 801899e:	d104      	bne.n	80189aa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	681b      	ldr	r3, [r3, #0]
 80189a4:	4a0c      	ldr	r2, [pc, #48]	; (80189d8 <ip_reass_dequeue_datagram+0x4c>)
 80189a6:	6013      	str	r3, [r2, #0]
 80189a8:	e00d      	b.n	80189c6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80189aa:	683b      	ldr	r3, [r7, #0]
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	d106      	bne.n	80189be <ip_reass_dequeue_datagram+0x32>
 80189b0:	4b0a      	ldr	r3, [pc, #40]	; (80189dc <ip_reass_dequeue_datagram+0x50>)
 80189b2:	f240 1245 	movw	r2, #325	; 0x145
 80189b6:	490a      	ldr	r1, [pc, #40]	; (80189e0 <ip_reass_dequeue_datagram+0x54>)
 80189b8:	480a      	ldr	r0, [pc, #40]	; (80189e4 <ip_reass_dequeue_datagram+0x58>)
 80189ba:	f001 f83b 	bl	8019a34 <iprintf>
    prev->next = ipr->next;
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	681a      	ldr	r2, [r3, #0]
 80189c2:	683b      	ldr	r3, [r7, #0]
 80189c4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80189c6:	6879      	ldr	r1, [r7, #4]
 80189c8:	2004      	movs	r0, #4
 80189ca:	f7f6 fd37 	bl	800f43c <memp_free>
}
 80189ce:	bf00      	nop
 80189d0:	3708      	adds	r7, #8
 80189d2:	46bd      	mov	sp, r7
 80189d4:	bd80      	pop	{r7, pc}
 80189d6:	bf00      	nop
 80189d8:	24004268 	.word	0x24004268
 80189dc:	0801d2c0 	.word	0x0801d2c0
 80189e0:	0801d388 	.word	0x0801d388
 80189e4:	0801d308 	.word	0x0801d308

080189e8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80189e8:	b580      	push	{r7, lr}
 80189ea:	b08c      	sub	sp, #48	; 0x30
 80189ec:	af00      	add	r7, sp, #0
 80189ee:	60f8      	str	r0, [r7, #12]
 80189f0:	60b9      	str	r1, [r7, #8]
 80189f2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80189f4:	2300      	movs	r3, #0
 80189f6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80189f8:	2301      	movs	r3, #1
 80189fa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80189fc:	68bb      	ldr	r3, [r7, #8]
 80189fe:	685b      	ldr	r3, [r3, #4]
 8018a00:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018a02:	69fb      	ldr	r3, [r7, #28]
 8018a04:	885b      	ldrh	r3, [r3, #2]
 8018a06:	b29b      	uxth	r3, r3
 8018a08:	4618      	mov	r0, r3
 8018a0a:	f7f5 ff11 	bl	800e830 <lwip_htons>
 8018a0e:	4603      	mov	r3, r0
 8018a10:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8018a12:	69fb      	ldr	r3, [r7, #28]
 8018a14:	781b      	ldrb	r3, [r3, #0]
 8018a16:	f003 030f 	and.w	r3, r3, #15
 8018a1a:	b2db      	uxtb	r3, r3
 8018a1c:	009b      	lsls	r3, r3, #2
 8018a1e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8018a20:	7e7b      	ldrb	r3, [r7, #25]
 8018a22:	b29b      	uxth	r3, r3
 8018a24:	8b7a      	ldrh	r2, [r7, #26]
 8018a26:	429a      	cmp	r2, r3
 8018a28:	d202      	bcs.n	8018a30 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8018a2e:	e135      	b.n	8018c9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8018a30:	7e7b      	ldrb	r3, [r7, #25]
 8018a32:	b29b      	uxth	r3, r3
 8018a34:	8b7a      	ldrh	r2, [r7, #26]
 8018a36:	1ad3      	subs	r3, r2, r3
 8018a38:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8018a3a:	69fb      	ldr	r3, [r7, #28]
 8018a3c:	88db      	ldrh	r3, [r3, #6]
 8018a3e:	b29b      	uxth	r3, r3
 8018a40:	4618      	mov	r0, r3
 8018a42:	f7f5 fef5 	bl	800e830 <lwip_htons>
 8018a46:	4603      	mov	r3, r0
 8018a48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018a4c:	b29b      	uxth	r3, r3
 8018a4e:	00db      	lsls	r3, r3, #3
 8018a50:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8018a52:	68bb      	ldr	r3, [r7, #8]
 8018a54:	685b      	ldr	r3, [r3, #4]
 8018a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8018a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a5a:	2200      	movs	r2, #0
 8018a5c:	701a      	strb	r2, [r3, #0]
 8018a5e:	2200      	movs	r2, #0
 8018a60:	705a      	strb	r2, [r3, #1]
 8018a62:	2200      	movs	r2, #0
 8018a64:	709a      	strb	r2, [r3, #2]
 8018a66:	2200      	movs	r2, #0
 8018a68:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8018a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a6c:	8afa      	ldrh	r2, [r7, #22]
 8018a6e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8018a70:	8afa      	ldrh	r2, [r7, #22]
 8018a72:	8b7b      	ldrh	r3, [r7, #26]
 8018a74:	4413      	add	r3, r2
 8018a76:	b29a      	uxth	r2, r3
 8018a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a7a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8018a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a7e:	88db      	ldrh	r3, [r3, #6]
 8018a80:	b29b      	uxth	r3, r3
 8018a82:	8afa      	ldrh	r2, [r7, #22]
 8018a84:	429a      	cmp	r2, r3
 8018a86:	d902      	bls.n	8018a8e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018a88:	f04f 33ff 	mov.w	r3, #4294967295
 8018a8c:	e106      	b.n	8018c9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8018a8e:	68fb      	ldr	r3, [r7, #12]
 8018a90:	685b      	ldr	r3, [r3, #4]
 8018a92:	627b      	str	r3, [r7, #36]	; 0x24
 8018a94:	e068      	b.n	8018b68 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8018a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a98:	685b      	ldr	r3, [r3, #4]
 8018a9a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8018a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a9e:	889b      	ldrh	r3, [r3, #4]
 8018aa0:	b29a      	uxth	r2, r3
 8018aa2:	693b      	ldr	r3, [r7, #16]
 8018aa4:	889b      	ldrh	r3, [r3, #4]
 8018aa6:	b29b      	uxth	r3, r3
 8018aa8:	429a      	cmp	r2, r3
 8018aaa:	d235      	bcs.n	8018b18 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8018aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018ab0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8018ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ab4:	2b00      	cmp	r3, #0
 8018ab6:	d020      	beq.n	8018afa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8018ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018aba:	889b      	ldrh	r3, [r3, #4]
 8018abc:	b29a      	uxth	r2, r3
 8018abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ac0:	88db      	ldrh	r3, [r3, #6]
 8018ac2:	b29b      	uxth	r3, r3
 8018ac4:	429a      	cmp	r2, r3
 8018ac6:	d307      	bcc.n	8018ad8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8018ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018aca:	88db      	ldrh	r3, [r3, #6]
 8018acc:	b29a      	uxth	r2, r3
 8018ace:	693b      	ldr	r3, [r7, #16]
 8018ad0:	889b      	ldrh	r3, [r3, #4]
 8018ad2:	b29b      	uxth	r3, r3
 8018ad4:	429a      	cmp	r2, r3
 8018ad6:	d902      	bls.n	8018ade <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8018adc:	e0de      	b.n	8018c9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8018ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ae0:	68ba      	ldr	r2, [r7, #8]
 8018ae2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8018ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ae6:	88db      	ldrh	r3, [r3, #6]
 8018ae8:	b29a      	uxth	r2, r3
 8018aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018aec:	889b      	ldrh	r3, [r3, #4]
 8018aee:	b29b      	uxth	r3, r3
 8018af0:	429a      	cmp	r2, r3
 8018af2:	d03d      	beq.n	8018b70 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018af4:	2300      	movs	r3, #0
 8018af6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018af8:	e03a      	b.n	8018b70 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8018afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018afc:	88db      	ldrh	r3, [r3, #6]
 8018afe:	b29a      	uxth	r2, r3
 8018b00:	693b      	ldr	r3, [r7, #16]
 8018b02:	889b      	ldrh	r3, [r3, #4]
 8018b04:	b29b      	uxth	r3, r3
 8018b06:	429a      	cmp	r2, r3
 8018b08:	d902      	bls.n	8018b10 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8018b0e:	e0c5      	b.n	8018c9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8018b10:	68fb      	ldr	r3, [r7, #12]
 8018b12:	68ba      	ldr	r2, [r7, #8]
 8018b14:	605a      	str	r2, [r3, #4]
      break;
 8018b16:	e02b      	b.n	8018b70 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8018b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b1a:	889b      	ldrh	r3, [r3, #4]
 8018b1c:	b29a      	uxth	r2, r3
 8018b1e:	693b      	ldr	r3, [r7, #16]
 8018b20:	889b      	ldrh	r3, [r3, #4]
 8018b22:	b29b      	uxth	r3, r3
 8018b24:	429a      	cmp	r2, r3
 8018b26:	d102      	bne.n	8018b2e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018b28:	f04f 33ff 	mov.w	r3, #4294967295
 8018b2c:	e0b6      	b.n	8018c9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8018b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b30:	889b      	ldrh	r3, [r3, #4]
 8018b32:	b29a      	uxth	r2, r3
 8018b34:	693b      	ldr	r3, [r7, #16]
 8018b36:	88db      	ldrh	r3, [r3, #6]
 8018b38:	b29b      	uxth	r3, r3
 8018b3a:	429a      	cmp	r2, r3
 8018b3c:	d202      	bcs.n	8018b44 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8018b42:	e0ab      	b.n	8018c9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b46:	2b00      	cmp	r3, #0
 8018b48:	d009      	beq.n	8018b5e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8018b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b4c:	88db      	ldrh	r3, [r3, #6]
 8018b4e:	b29a      	uxth	r2, r3
 8018b50:	693b      	ldr	r3, [r7, #16]
 8018b52:	889b      	ldrh	r3, [r3, #4]
 8018b54:	b29b      	uxth	r3, r3
 8018b56:	429a      	cmp	r2, r3
 8018b58:	d001      	beq.n	8018b5e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018b5a:	2300      	movs	r3, #0
 8018b5c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8018b5e:	693b      	ldr	r3, [r7, #16]
 8018b60:	681b      	ldr	r3, [r3, #0]
 8018b62:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8018b64:	693b      	ldr	r3, [r7, #16]
 8018b66:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8018b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b6a:	2b00      	cmp	r3, #0
 8018b6c:	d193      	bne.n	8018a96 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8018b6e:	e000      	b.n	8018b72 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8018b70:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8018b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b74:	2b00      	cmp	r3, #0
 8018b76:	d12d      	bne.n	8018bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8018b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b7a:	2b00      	cmp	r3, #0
 8018b7c:	d01c      	beq.n	8018bb8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8018b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b80:	88db      	ldrh	r3, [r3, #6]
 8018b82:	b29a      	uxth	r2, r3
 8018b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b86:	889b      	ldrh	r3, [r3, #4]
 8018b88:	b29b      	uxth	r3, r3
 8018b8a:	429a      	cmp	r2, r3
 8018b8c:	d906      	bls.n	8018b9c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8018b8e:	4b45      	ldr	r3, [pc, #276]	; (8018ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018b90:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8018b94:	4944      	ldr	r1, [pc, #272]	; (8018ca8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018b96:	4845      	ldr	r0, [pc, #276]	; (8018cac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018b98:	f000 ff4c 	bl	8019a34 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8018b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b9e:	68ba      	ldr	r2, [r7, #8]
 8018ba0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8018ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ba4:	88db      	ldrh	r3, [r3, #6]
 8018ba6:	b29a      	uxth	r2, r3
 8018ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018baa:	889b      	ldrh	r3, [r3, #4]
 8018bac:	b29b      	uxth	r3, r3
 8018bae:	429a      	cmp	r2, r3
 8018bb0:	d010      	beq.n	8018bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8018bb2:	2300      	movs	r3, #0
 8018bb4:	623b      	str	r3, [r7, #32]
 8018bb6:	e00d      	b.n	8018bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8018bb8:	68fb      	ldr	r3, [r7, #12]
 8018bba:	685b      	ldr	r3, [r3, #4]
 8018bbc:	2b00      	cmp	r3, #0
 8018bbe:	d006      	beq.n	8018bce <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8018bc0:	4b38      	ldr	r3, [pc, #224]	; (8018ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018bc2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8018bc6:	493a      	ldr	r1, [pc, #232]	; (8018cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018bc8:	4838      	ldr	r0, [pc, #224]	; (8018cac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018bca:	f000 ff33 	bl	8019a34 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8018bce:	68fb      	ldr	r3, [r7, #12]
 8018bd0:	68ba      	ldr	r2, [r7, #8]
 8018bd2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	2b00      	cmp	r3, #0
 8018bd8:	d105      	bne.n	8018be6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8018bda:	68fb      	ldr	r3, [r7, #12]
 8018bdc:	7f9b      	ldrb	r3, [r3, #30]
 8018bde:	f003 0301 	and.w	r3, r3, #1
 8018be2:	2b00      	cmp	r3, #0
 8018be4:	d059      	beq.n	8018c9a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8018be6:	6a3b      	ldr	r3, [r7, #32]
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	d04f      	beq.n	8018c8c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8018bec:	68fb      	ldr	r3, [r7, #12]
 8018bee:	685b      	ldr	r3, [r3, #4]
 8018bf0:	2b00      	cmp	r3, #0
 8018bf2:	d006      	beq.n	8018c02 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8018bf4:	68fb      	ldr	r3, [r7, #12]
 8018bf6:	685b      	ldr	r3, [r3, #4]
 8018bf8:	685b      	ldr	r3, [r3, #4]
 8018bfa:	889b      	ldrh	r3, [r3, #4]
 8018bfc:	b29b      	uxth	r3, r3
 8018bfe:	2b00      	cmp	r3, #0
 8018c00:	d002      	beq.n	8018c08 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8018c02:	2300      	movs	r3, #0
 8018c04:	623b      	str	r3, [r7, #32]
 8018c06:	e041      	b.n	8018c8c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c0a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8018c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c0e:	681b      	ldr	r3, [r3, #0]
 8018c10:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018c12:	e012      	b.n	8018c3a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c16:	685b      	ldr	r3, [r3, #4]
 8018c18:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8018c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c1c:	88db      	ldrh	r3, [r3, #6]
 8018c1e:	b29a      	uxth	r2, r3
 8018c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c22:	889b      	ldrh	r3, [r3, #4]
 8018c24:	b29b      	uxth	r3, r3
 8018c26:	429a      	cmp	r2, r3
 8018c28:	d002      	beq.n	8018c30 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8018c2a:	2300      	movs	r3, #0
 8018c2c:	623b      	str	r3, [r7, #32]
            break;
 8018c2e:	e007      	b.n	8018c40 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8018c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c32:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c36:	681b      	ldr	r3, [r3, #0]
 8018c38:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	d1e9      	bne.n	8018c14 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8018c40:	6a3b      	ldr	r3, [r7, #32]
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	d022      	beq.n	8018c8c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018c46:	68fb      	ldr	r3, [r7, #12]
 8018c48:	685b      	ldr	r3, [r3, #4]
 8018c4a:	2b00      	cmp	r3, #0
 8018c4c:	d106      	bne.n	8018c5c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8018c4e:	4b15      	ldr	r3, [pc, #84]	; (8018ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018c50:	f240 12df 	movw	r2, #479	; 0x1df
 8018c54:	4917      	ldr	r1, [pc, #92]	; (8018cb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018c56:	4815      	ldr	r0, [pc, #84]	; (8018cac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018c58:	f000 feec 	bl	8019a34 <iprintf>
          LWIP_ASSERT("sanity check",
 8018c5c:	68fb      	ldr	r3, [r7, #12]
 8018c5e:	685b      	ldr	r3, [r3, #4]
 8018c60:	685b      	ldr	r3, [r3, #4]
 8018c62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018c64:	429a      	cmp	r2, r3
 8018c66:	d106      	bne.n	8018c76 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018c68:	4b0e      	ldr	r3, [pc, #56]	; (8018ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018c6a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8018c6e:	4911      	ldr	r1, [pc, #68]	; (8018cb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018c70:	480e      	ldr	r0, [pc, #56]	; (8018cac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018c72:	f000 fedf 	bl	8019a34 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8018c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c78:	681b      	ldr	r3, [r3, #0]
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	d006      	beq.n	8018c8c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8018c7e:	4b09      	ldr	r3, [pc, #36]	; (8018ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018c80:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8018c84:	490c      	ldr	r1, [pc, #48]	; (8018cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8018c86:	4809      	ldr	r0, [pc, #36]	; (8018cac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018c88:	f000 fed4 	bl	8019a34 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018c8c:	6a3b      	ldr	r3, [r7, #32]
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	bf14      	ite	ne
 8018c92:	2301      	movne	r3, #1
 8018c94:	2300      	moveq	r3, #0
 8018c96:	b2db      	uxtb	r3, r3
 8018c98:	e000      	b.n	8018c9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8018c9a:	2300      	movs	r3, #0
}
 8018c9c:	4618      	mov	r0, r3
 8018c9e:	3730      	adds	r7, #48	; 0x30
 8018ca0:	46bd      	mov	sp, r7
 8018ca2:	bd80      	pop	{r7, pc}
 8018ca4:	0801d2c0 	.word	0x0801d2c0
 8018ca8:	0801d3a4 	.word	0x0801d3a4
 8018cac:	0801d308 	.word	0x0801d308
 8018cb0:	0801d3c4 	.word	0x0801d3c4
 8018cb4:	0801d3fc 	.word	0x0801d3fc
 8018cb8:	0801d40c 	.word	0x0801d40c

08018cbc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8018cbc:	b580      	push	{r7, lr}
 8018cbe:	b08e      	sub	sp, #56	; 0x38
 8018cc0:	af00      	add	r7, sp, #0
 8018cc2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	685b      	ldr	r3, [r3, #4]
 8018cc8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8018cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ccc:	781b      	ldrb	r3, [r3, #0]
 8018cce:	f003 030f 	and.w	r3, r3, #15
 8018cd2:	b2db      	uxtb	r3, r3
 8018cd4:	009b      	lsls	r3, r3, #2
 8018cd6:	b2db      	uxtb	r3, r3
 8018cd8:	2b14      	cmp	r3, #20
 8018cda:	f040 8167 	bne.w	8018fac <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8018cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ce0:	88db      	ldrh	r3, [r3, #6]
 8018ce2:	b29b      	uxth	r3, r3
 8018ce4:	4618      	mov	r0, r3
 8018ce6:	f7f5 fda3 	bl	800e830 <lwip_htons>
 8018cea:	4603      	mov	r3, r0
 8018cec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018cf0:	b29b      	uxth	r3, r3
 8018cf2:	00db      	lsls	r3, r3, #3
 8018cf4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018cf8:	885b      	ldrh	r3, [r3, #2]
 8018cfa:	b29b      	uxth	r3, r3
 8018cfc:	4618      	mov	r0, r3
 8018cfe:	f7f5 fd97 	bl	800e830 <lwip_htons>
 8018d02:	4603      	mov	r3, r0
 8018d04:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d08:	781b      	ldrb	r3, [r3, #0]
 8018d0a:	f003 030f 	and.w	r3, r3, #15
 8018d0e:	b2db      	uxtb	r3, r3
 8018d10:	009b      	lsls	r3, r3, #2
 8018d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8018d16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018d1a:	b29b      	uxth	r3, r3
 8018d1c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018d1e:	429a      	cmp	r2, r3
 8018d20:	f0c0 8146 	bcc.w	8018fb0 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018d24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018d28:	b29b      	uxth	r3, r3
 8018d2a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018d2c:	1ad3      	subs	r3, r2, r3
 8018d2e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018d30:	6878      	ldr	r0, [r7, #4]
 8018d32:	f7f7 fab5 	bl	80102a0 <pbuf_clen>
 8018d36:	4603      	mov	r3, r0
 8018d38:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018d3a:	4b9f      	ldr	r3, [pc, #636]	; (8018fb8 <ip4_reass+0x2fc>)
 8018d3c:	881b      	ldrh	r3, [r3, #0]
 8018d3e:	461a      	mov	r2, r3
 8018d40:	8c3b      	ldrh	r3, [r7, #32]
 8018d42:	4413      	add	r3, r2
 8018d44:	2b0a      	cmp	r3, #10
 8018d46:	dd10      	ble.n	8018d6a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018d48:	8c3b      	ldrh	r3, [r7, #32]
 8018d4a:	4619      	mov	r1, r3
 8018d4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018d4e:	f7ff fd81 	bl	8018854 <ip_reass_remove_oldest_datagram>
 8018d52:	4603      	mov	r3, r0
 8018d54:	2b00      	cmp	r3, #0
 8018d56:	f000 812d 	beq.w	8018fb4 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018d5a:	4b97      	ldr	r3, [pc, #604]	; (8018fb8 <ip4_reass+0x2fc>)
 8018d5c:	881b      	ldrh	r3, [r3, #0]
 8018d5e:	461a      	mov	r2, r3
 8018d60:	8c3b      	ldrh	r3, [r7, #32]
 8018d62:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018d64:	2b0a      	cmp	r3, #10
 8018d66:	f300 8125 	bgt.w	8018fb4 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018d6a:	4b94      	ldr	r3, [pc, #592]	; (8018fbc <ip4_reass+0x300>)
 8018d6c:	681b      	ldr	r3, [r3, #0]
 8018d6e:	633b      	str	r3, [r7, #48]	; 0x30
 8018d70:	e015      	b.n	8018d9e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8018d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d74:	695a      	ldr	r2, [r3, #20]
 8018d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d78:	68db      	ldr	r3, [r3, #12]
 8018d7a:	429a      	cmp	r2, r3
 8018d7c:	d10c      	bne.n	8018d98 <ip4_reass+0xdc>
 8018d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d80:	699a      	ldr	r2, [r3, #24]
 8018d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d84:	691b      	ldr	r3, [r3, #16]
 8018d86:	429a      	cmp	r2, r3
 8018d88:	d106      	bne.n	8018d98 <ip4_reass+0xdc>
 8018d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d8c:	899a      	ldrh	r2, [r3, #12]
 8018d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d90:	889b      	ldrh	r3, [r3, #4]
 8018d92:	b29b      	uxth	r3, r3
 8018d94:	429a      	cmp	r2, r3
 8018d96:	d006      	beq.n	8018da6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d9a:	681b      	ldr	r3, [r3, #0]
 8018d9c:	633b      	str	r3, [r7, #48]	; 0x30
 8018d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018da0:	2b00      	cmp	r3, #0
 8018da2:	d1e6      	bne.n	8018d72 <ip4_reass+0xb6>
 8018da4:	e000      	b.n	8018da8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8018da6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	d109      	bne.n	8018dc2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8018dae:	8c3b      	ldrh	r3, [r7, #32]
 8018db0:	4619      	mov	r1, r3
 8018db2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018db4:	f7ff fdb0 	bl	8018918 <ip_reass_enqueue_new_datagram>
 8018db8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8018dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018dbc:	2b00      	cmp	r3, #0
 8018dbe:	d11c      	bne.n	8018dfa <ip4_reass+0x13e>
      goto nullreturn;
 8018dc0:	e109      	b.n	8018fd6 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dc4:	88db      	ldrh	r3, [r3, #6]
 8018dc6:	b29b      	uxth	r3, r3
 8018dc8:	4618      	mov	r0, r3
 8018dca:	f7f5 fd31 	bl	800e830 <lwip_htons>
 8018dce:	4603      	mov	r3, r0
 8018dd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	d110      	bne.n	8018dfa <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018dda:	89db      	ldrh	r3, [r3, #14]
 8018ddc:	4618      	mov	r0, r3
 8018dde:	f7f5 fd27 	bl	800e830 <lwip_htons>
 8018de2:	4603      	mov	r3, r0
 8018de4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018de8:	2b00      	cmp	r3, #0
 8018dea:	d006      	beq.n	8018dfa <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018dee:	3308      	adds	r3, #8
 8018df0:	2214      	movs	r2, #20
 8018df2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018df4:	4618      	mov	r0, r3
 8018df6:	f000 fdac 	bl	8019952 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dfc:	88db      	ldrh	r3, [r3, #6]
 8018dfe:	b29b      	uxth	r3, r3
 8018e00:	f003 0320 	and.w	r3, r3, #32
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	bf0c      	ite	eq
 8018e08:	2301      	moveq	r3, #1
 8018e0a:	2300      	movne	r3, #0
 8018e0c:	b2db      	uxtb	r3, r3
 8018e0e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018e10:	69fb      	ldr	r3, [r7, #28]
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	d00e      	beq.n	8018e34 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8018e16:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018e18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e1a:	4413      	add	r3, r2
 8018e1c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8018e1e:	8b7a      	ldrh	r2, [r7, #26]
 8018e20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018e22:	429a      	cmp	r2, r3
 8018e24:	f0c0 80a0 	bcc.w	8018f68 <ip4_reass+0x2ac>
 8018e28:	8b7b      	ldrh	r3, [r7, #26]
 8018e2a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8018e2e:	4293      	cmp	r3, r2
 8018e30:	f200 809a 	bhi.w	8018f68 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018e34:	69fa      	ldr	r2, [r7, #28]
 8018e36:	6879      	ldr	r1, [r7, #4]
 8018e38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018e3a:	f7ff fdd5 	bl	80189e8 <ip_reass_chain_frag_into_datagram_and_validate>
 8018e3e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018e40:	697b      	ldr	r3, [r7, #20]
 8018e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018e46:	f000 8091 	beq.w	8018f6c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018e4a:	4b5b      	ldr	r3, [pc, #364]	; (8018fb8 <ip4_reass+0x2fc>)
 8018e4c:	881a      	ldrh	r2, [r3, #0]
 8018e4e:	8c3b      	ldrh	r3, [r7, #32]
 8018e50:	4413      	add	r3, r2
 8018e52:	b29a      	uxth	r2, r3
 8018e54:	4b58      	ldr	r3, [pc, #352]	; (8018fb8 <ip4_reass+0x2fc>)
 8018e56:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018e58:	69fb      	ldr	r3, [r7, #28]
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d00d      	beq.n	8018e7a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8018e5e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018e60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e62:	4413      	add	r3, r2
 8018e64:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e68:	8a7a      	ldrh	r2, [r7, #18]
 8018e6a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e6e:	7f9b      	ldrb	r3, [r3, #30]
 8018e70:	f043 0301 	orr.w	r3, r3, #1
 8018e74:	b2da      	uxtb	r2, r3
 8018e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e78:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018e7a:	697b      	ldr	r3, [r7, #20]
 8018e7c:	2b01      	cmp	r3, #1
 8018e7e:	d171      	bne.n	8018f64 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e82:	8b9b      	ldrh	r3, [r3, #28]
 8018e84:	3314      	adds	r3, #20
 8018e86:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e8a:	685b      	ldr	r3, [r3, #4]
 8018e8c:	685b      	ldr	r3, [r3, #4]
 8018e8e:	681b      	ldr	r3, [r3, #0]
 8018e90:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8018e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e94:	685b      	ldr	r3, [r3, #4]
 8018e96:	685b      	ldr	r3, [r3, #4]
 8018e98:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8018e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e9c:	3308      	adds	r3, #8
 8018e9e:	2214      	movs	r2, #20
 8018ea0:	4619      	mov	r1, r3
 8018ea2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018ea4:	f000 fd55 	bl	8019952 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018ea8:	8a3b      	ldrh	r3, [r7, #16]
 8018eaa:	4618      	mov	r0, r3
 8018eac:	f7f5 fcc0 	bl	800e830 <lwip_htons>
 8018eb0:	4603      	mov	r3, r0
 8018eb2:	461a      	mov	r2, r3
 8018eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018eb6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018eba:	2200      	movs	r2, #0
 8018ebc:	719a      	strb	r2, [r3, #6]
 8018ebe:	2200      	movs	r2, #0
 8018ec0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8018ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ec4:	2200      	movs	r2, #0
 8018ec6:	729a      	strb	r2, [r3, #10]
 8018ec8:	2200      	movs	r2, #0
 8018eca:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ece:	685b      	ldr	r3, [r3, #4]
 8018ed0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018ed2:	e00d      	b.n	8018ef0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018ed6:	685b      	ldr	r3, [r3, #4]
 8018ed8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8018eda:	2114      	movs	r1, #20
 8018edc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018ede:	f7f7 f8cb 	bl	8010078 <pbuf_remove_header>
      pbuf_cat(p, r);
 8018ee2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018ee4:	6878      	ldr	r0, [r7, #4]
 8018ee6:	f7f7 fa1b 	bl	8010320 <pbuf_cat>
      r = iprh->next_pbuf;
 8018eea:	68fb      	ldr	r3, [r7, #12]
 8018eec:	681b      	ldr	r3, [r3, #0]
 8018eee:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8018ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	d1ee      	bne.n	8018ed4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018ef6:	4b31      	ldr	r3, [pc, #196]	; (8018fbc <ip4_reass+0x300>)
 8018ef8:	681b      	ldr	r3, [r3, #0]
 8018efa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018efc:	429a      	cmp	r2, r3
 8018efe:	d102      	bne.n	8018f06 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018f00:	2300      	movs	r3, #0
 8018f02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018f04:	e010      	b.n	8018f28 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018f06:	4b2d      	ldr	r3, [pc, #180]	; (8018fbc <ip4_reass+0x300>)
 8018f08:	681b      	ldr	r3, [r3, #0]
 8018f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018f0c:	e007      	b.n	8018f1e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8018f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f10:	681b      	ldr	r3, [r3, #0]
 8018f12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018f14:	429a      	cmp	r2, r3
 8018f16:	d006      	beq.n	8018f26 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f1a:	681b      	ldr	r3, [r3, #0]
 8018f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	d1f4      	bne.n	8018f0e <ip4_reass+0x252>
 8018f24:	e000      	b.n	8018f28 <ip4_reass+0x26c>
          break;
 8018f26:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018f28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018f2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018f2c:	f7ff fd2e 	bl	801898c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018f30:	6878      	ldr	r0, [r7, #4]
 8018f32:	f7f7 f9b5 	bl	80102a0 <pbuf_clen>
 8018f36:	4603      	mov	r3, r0
 8018f38:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018f3a:	4b1f      	ldr	r3, [pc, #124]	; (8018fb8 <ip4_reass+0x2fc>)
 8018f3c:	881b      	ldrh	r3, [r3, #0]
 8018f3e:	8c3a      	ldrh	r2, [r7, #32]
 8018f40:	429a      	cmp	r2, r3
 8018f42:	d906      	bls.n	8018f52 <ip4_reass+0x296>
 8018f44:	4b1e      	ldr	r3, [pc, #120]	; (8018fc0 <ip4_reass+0x304>)
 8018f46:	f240 229b 	movw	r2, #667	; 0x29b
 8018f4a:	491e      	ldr	r1, [pc, #120]	; (8018fc4 <ip4_reass+0x308>)
 8018f4c:	481e      	ldr	r0, [pc, #120]	; (8018fc8 <ip4_reass+0x30c>)
 8018f4e:	f000 fd71 	bl	8019a34 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018f52:	4b19      	ldr	r3, [pc, #100]	; (8018fb8 <ip4_reass+0x2fc>)
 8018f54:	881a      	ldrh	r2, [r3, #0]
 8018f56:	8c3b      	ldrh	r3, [r7, #32]
 8018f58:	1ad3      	subs	r3, r2, r3
 8018f5a:	b29a      	uxth	r2, r3
 8018f5c:	4b16      	ldr	r3, [pc, #88]	; (8018fb8 <ip4_reass+0x2fc>)
 8018f5e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	e03c      	b.n	8018fde <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018f64:	2300      	movs	r3, #0
 8018f66:	e03a      	b.n	8018fde <ip4_reass+0x322>
      goto nullreturn_ipr;
 8018f68:	bf00      	nop
 8018f6a:	e000      	b.n	8018f6e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8018f6c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8018f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	d106      	bne.n	8018f82 <ip4_reass+0x2c6>
 8018f74:	4b12      	ldr	r3, [pc, #72]	; (8018fc0 <ip4_reass+0x304>)
 8018f76:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8018f7a:	4914      	ldr	r1, [pc, #80]	; (8018fcc <ip4_reass+0x310>)
 8018f7c:	4812      	ldr	r0, [pc, #72]	; (8018fc8 <ip4_reass+0x30c>)
 8018f7e:	f000 fd59 	bl	8019a34 <iprintf>
  if (ipr->p == NULL) {
 8018f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f84:	685b      	ldr	r3, [r3, #4]
 8018f86:	2b00      	cmp	r3, #0
 8018f88:	d124      	bne.n	8018fd4 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8018f8a:	4b0c      	ldr	r3, [pc, #48]	; (8018fbc <ip4_reass+0x300>)
 8018f8c:	681b      	ldr	r3, [r3, #0]
 8018f8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018f90:	429a      	cmp	r2, r3
 8018f92:	d006      	beq.n	8018fa2 <ip4_reass+0x2e6>
 8018f94:	4b0a      	ldr	r3, [pc, #40]	; (8018fc0 <ip4_reass+0x304>)
 8018f96:	f240 22ab 	movw	r2, #683	; 0x2ab
 8018f9a:	490d      	ldr	r1, [pc, #52]	; (8018fd0 <ip4_reass+0x314>)
 8018f9c:	480a      	ldr	r0, [pc, #40]	; (8018fc8 <ip4_reass+0x30c>)
 8018f9e:	f000 fd49 	bl	8019a34 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8018fa2:	2100      	movs	r1, #0
 8018fa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018fa6:	f7ff fcf1 	bl	801898c <ip_reass_dequeue_datagram>
 8018faa:	e014      	b.n	8018fd6 <ip4_reass+0x31a>
    goto nullreturn;
 8018fac:	bf00      	nop
 8018fae:	e012      	b.n	8018fd6 <ip4_reass+0x31a>
    goto nullreturn;
 8018fb0:	bf00      	nop
 8018fb2:	e010      	b.n	8018fd6 <ip4_reass+0x31a>
      goto nullreturn;
 8018fb4:	bf00      	nop
 8018fb6:	e00e      	b.n	8018fd6 <ip4_reass+0x31a>
 8018fb8:	2400426c 	.word	0x2400426c
 8018fbc:	24004268 	.word	0x24004268
 8018fc0:	0801d2c0 	.word	0x0801d2c0
 8018fc4:	0801d430 	.word	0x0801d430
 8018fc8:	0801d308 	.word	0x0801d308
 8018fcc:	0801d44c 	.word	0x0801d44c
 8018fd0:	0801d458 	.word	0x0801d458
  }

nullreturn:
 8018fd4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018fd6:	6878      	ldr	r0, [r7, #4]
 8018fd8:	f7f7 f8d4 	bl	8010184 <pbuf_free>
  return NULL;
 8018fdc:	2300      	movs	r3, #0
}
 8018fde:	4618      	mov	r0, r3
 8018fe0:	3738      	adds	r7, #56	; 0x38
 8018fe2:	46bd      	mov	sp, r7
 8018fe4:	bd80      	pop	{r7, pc}
 8018fe6:	bf00      	nop

08018fe8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018fe8:	b580      	push	{r7, lr}
 8018fea:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018fec:	2005      	movs	r0, #5
 8018fee:	f7f6 f9af 	bl	800f350 <memp_malloc>
 8018ff2:	4603      	mov	r3, r0
}
 8018ff4:	4618      	mov	r0, r3
 8018ff6:	bd80      	pop	{r7, pc}

08018ff8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018ff8:	b580      	push	{r7, lr}
 8018ffa:	b082      	sub	sp, #8
 8018ffc:	af00      	add	r7, sp, #0
 8018ffe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	2b00      	cmp	r3, #0
 8019004:	d106      	bne.n	8019014 <ip_frag_free_pbuf_custom_ref+0x1c>
 8019006:	4b07      	ldr	r3, [pc, #28]	; (8019024 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8019008:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801900c:	4906      	ldr	r1, [pc, #24]	; (8019028 <ip_frag_free_pbuf_custom_ref+0x30>)
 801900e:	4807      	ldr	r0, [pc, #28]	; (801902c <ip_frag_free_pbuf_custom_ref+0x34>)
 8019010:	f000 fd10 	bl	8019a34 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8019014:	6879      	ldr	r1, [r7, #4]
 8019016:	2005      	movs	r0, #5
 8019018:	f7f6 fa10 	bl	800f43c <memp_free>
}
 801901c:	bf00      	nop
 801901e:	3708      	adds	r7, #8
 8019020:	46bd      	mov	sp, r7
 8019022:	bd80      	pop	{r7, pc}
 8019024:	0801d2c0 	.word	0x0801d2c0
 8019028:	0801d478 	.word	0x0801d478
 801902c:	0801d308 	.word	0x0801d308

08019030 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8019030:	b580      	push	{r7, lr}
 8019032:	b084      	sub	sp, #16
 8019034:	af00      	add	r7, sp, #0
 8019036:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801903c:	68fb      	ldr	r3, [r7, #12]
 801903e:	2b00      	cmp	r3, #0
 8019040:	d106      	bne.n	8019050 <ipfrag_free_pbuf_custom+0x20>
 8019042:	4b11      	ldr	r3, [pc, #68]	; (8019088 <ipfrag_free_pbuf_custom+0x58>)
 8019044:	f240 22ce 	movw	r2, #718	; 0x2ce
 8019048:	4910      	ldr	r1, [pc, #64]	; (801908c <ipfrag_free_pbuf_custom+0x5c>)
 801904a:	4811      	ldr	r0, [pc, #68]	; (8019090 <ipfrag_free_pbuf_custom+0x60>)
 801904c:	f000 fcf2 	bl	8019a34 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8019050:	68fa      	ldr	r2, [r7, #12]
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	429a      	cmp	r2, r3
 8019056:	d006      	beq.n	8019066 <ipfrag_free_pbuf_custom+0x36>
 8019058:	4b0b      	ldr	r3, [pc, #44]	; (8019088 <ipfrag_free_pbuf_custom+0x58>)
 801905a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801905e:	490d      	ldr	r1, [pc, #52]	; (8019094 <ipfrag_free_pbuf_custom+0x64>)
 8019060:	480b      	ldr	r0, [pc, #44]	; (8019090 <ipfrag_free_pbuf_custom+0x60>)
 8019062:	f000 fce7 	bl	8019a34 <iprintf>
  if (pcr->original != NULL) {
 8019066:	68fb      	ldr	r3, [r7, #12]
 8019068:	695b      	ldr	r3, [r3, #20]
 801906a:	2b00      	cmp	r3, #0
 801906c:	d004      	beq.n	8019078 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801906e:	68fb      	ldr	r3, [r7, #12]
 8019070:	695b      	ldr	r3, [r3, #20]
 8019072:	4618      	mov	r0, r3
 8019074:	f7f7 f886 	bl	8010184 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8019078:	68f8      	ldr	r0, [r7, #12]
 801907a:	f7ff ffbd 	bl	8018ff8 <ip_frag_free_pbuf_custom_ref>
}
 801907e:	bf00      	nop
 8019080:	3710      	adds	r7, #16
 8019082:	46bd      	mov	sp, r7
 8019084:	bd80      	pop	{r7, pc}
 8019086:	bf00      	nop
 8019088:	0801d2c0 	.word	0x0801d2c0
 801908c:	0801d484 	.word	0x0801d484
 8019090:	0801d308 	.word	0x0801d308
 8019094:	0801d490 	.word	0x0801d490

08019098 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8019098:	b580      	push	{r7, lr}
 801909a:	b094      	sub	sp, #80	; 0x50
 801909c:	af02      	add	r7, sp, #8
 801909e:	60f8      	str	r0, [r7, #12]
 80190a0:	60b9      	str	r1, [r7, #8]
 80190a2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80190a4:	2300      	movs	r3, #0
 80190a6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80190aa:	68bb      	ldr	r3, [r7, #8]
 80190ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80190ae:	3b14      	subs	r3, #20
 80190b0:	2b00      	cmp	r3, #0
 80190b2:	da00      	bge.n	80190b6 <ip4_frag+0x1e>
 80190b4:	3307      	adds	r3, #7
 80190b6:	10db      	asrs	r3, r3, #3
 80190b8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80190ba:	2314      	movs	r3, #20
 80190bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80190be:	68fb      	ldr	r3, [r7, #12]
 80190c0:	685b      	ldr	r3, [r3, #4]
 80190c2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80190c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80190c6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80190c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190ca:	781b      	ldrb	r3, [r3, #0]
 80190cc:	f003 030f 	and.w	r3, r3, #15
 80190d0:	b2db      	uxtb	r3, r3
 80190d2:	009b      	lsls	r3, r3, #2
 80190d4:	b2db      	uxtb	r3, r3
 80190d6:	2b14      	cmp	r3, #20
 80190d8:	d002      	beq.n	80190e0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80190da:	f06f 0305 	mvn.w	r3, #5
 80190de:	e110      	b.n	8019302 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80190e0:	68fb      	ldr	r3, [r7, #12]
 80190e2:	895b      	ldrh	r3, [r3, #10]
 80190e4:	2b13      	cmp	r3, #19
 80190e6:	d809      	bhi.n	80190fc <ip4_frag+0x64>
 80190e8:	4b88      	ldr	r3, [pc, #544]	; (801930c <ip4_frag+0x274>)
 80190ea:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80190ee:	4988      	ldr	r1, [pc, #544]	; (8019310 <ip4_frag+0x278>)
 80190f0:	4888      	ldr	r0, [pc, #544]	; (8019314 <ip4_frag+0x27c>)
 80190f2:	f000 fc9f 	bl	8019a34 <iprintf>
 80190f6:	f06f 0305 	mvn.w	r3, #5
 80190fa:	e102      	b.n	8019302 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80190fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190fe:	88db      	ldrh	r3, [r3, #6]
 8019100:	b29b      	uxth	r3, r3
 8019102:	4618      	mov	r0, r3
 8019104:	f7f5 fb94 	bl	800e830 <lwip_htons>
 8019108:	4603      	mov	r3, r0
 801910a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801910c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801910e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019112:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8019116:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019118:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801911c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801911e:	68fb      	ldr	r3, [r7, #12]
 8019120:	891b      	ldrh	r3, [r3, #8]
 8019122:	3b14      	subs	r3, #20
 8019124:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8019128:	e0e1      	b.n	80192ee <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801912a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801912c:	00db      	lsls	r3, r3, #3
 801912e:	b29b      	uxth	r3, r3
 8019130:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019134:	4293      	cmp	r3, r2
 8019136:	bf28      	it	cs
 8019138:	4613      	movcs	r3, r2
 801913a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801913c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019140:	2114      	movs	r1, #20
 8019142:	200e      	movs	r0, #14
 8019144:	f7f6 fd3a 	bl	800fbbc <pbuf_alloc>
 8019148:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801914a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801914c:	2b00      	cmp	r3, #0
 801914e:	f000 80d5 	beq.w	80192fc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8019152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019154:	895b      	ldrh	r3, [r3, #10]
 8019156:	2b13      	cmp	r3, #19
 8019158:	d806      	bhi.n	8019168 <ip4_frag+0xd0>
 801915a:	4b6c      	ldr	r3, [pc, #432]	; (801930c <ip4_frag+0x274>)
 801915c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8019160:	496d      	ldr	r1, [pc, #436]	; (8019318 <ip4_frag+0x280>)
 8019162:	486c      	ldr	r0, [pc, #432]	; (8019314 <ip4_frag+0x27c>)
 8019164:	f000 fc66 	bl	8019a34 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8019168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801916a:	685b      	ldr	r3, [r3, #4]
 801916c:	2214      	movs	r2, #20
 801916e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019170:	4618      	mov	r0, r3
 8019172:	f000 fbee 	bl	8019952 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8019176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019178:	685b      	ldr	r3, [r3, #4]
 801917a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801917c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801917e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8019182:	e064      	b.n	801924e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8019184:	68fb      	ldr	r3, [r7, #12]
 8019186:	895a      	ldrh	r2, [r3, #10]
 8019188:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801918a:	1ad3      	subs	r3, r2, r3
 801918c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801918e:	68fb      	ldr	r3, [r7, #12]
 8019190:	895b      	ldrh	r3, [r3, #10]
 8019192:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019194:	429a      	cmp	r2, r3
 8019196:	d906      	bls.n	80191a6 <ip4_frag+0x10e>
 8019198:	4b5c      	ldr	r3, [pc, #368]	; (801930c <ip4_frag+0x274>)
 801919a:	f240 322d 	movw	r2, #813	; 0x32d
 801919e:	495f      	ldr	r1, [pc, #380]	; (801931c <ip4_frag+0x284>)
 80191a0:	485c      	ldr	r0, [pc, #368]	; (8019314 <ip4_frag+0x27c>)
 80191a2:	f000 fc47 	bl	8019a34 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80191a6:	8bfa      	ldrh	r2, [r7, #30]
 80191a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80191ac:	4293      	cmp	r3, r2
 80191ae:	bf28      	it	cs
 80191b0:	4613      	movcs	r3, r2
 80191b2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80191b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80191ba:	2b00      	cmp	r3, #0
 80191bc:	d105      	bne.n	80191ca <ip4_frag+0x132>
        poff = 0;
 80191be:	2300      	movs	r3, #0
 80191c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80191c2:	68fb      	ldr	r3, [r7, #12]
 80191c4:	681b      	ldr	r3, [r3, #0]
 80191c6:	60fb      	str	r3, [r7, #12]
        continue;
 80191c8:	e041      	b.n	801924e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80191ca:	f7ff ff0d 	bl	8018fe8 <ip_frag_alloc_pbuf_custom_ref>
 80191ce:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80191d0:	69bb      	ldr	r3, [r7, #24]
 80191d2:	2b00      	cmp	r3, #0
 80191d4:	d103      	bne.n	80191de <ip4_frag+0x146>
        pbuf_free(rambuf);
 80191d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80191d8:	f7f6 ffd4 	bl	8010184 <pbuf_free>
        goto memerr;
 80191dc:	e08f      	b.n	80192fe <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80191de:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80191e0:	68fb      	ldr	r3, [r7, #12]
 80191e2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80191e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80191e6:	4413      	add	r3, r2
 80191e8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80191ec:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80191f0:	9201      	str	r2, [sp, #4]
 80191f2:	9300      	str	r3, [sp, #0]
 80191f4:	4603      	mov	r3, r0
 80191f6:	2241      	movs	r2, #65	; 0x41
 80191f8:	2000      	movs	r0, #0
 80191fa:	f7f6 fe09 	bl	800fe10 <pbuf_alloced_custom>
 80191fe:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8019200:	697b      	ldr	r3, [r7, #20]
 8019202:	2b00      	cmp	r3, #0
 8019204:	d106      	bne.n	8019214 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8019206:	69b8      	ldr	r0, [r7, #24]
 8019208:	f7ff fef6 	bl	8018ff8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801920c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801920e:	f7f6 ffb9 	bl	8010184 <pbuf_free>
        goto memerr;
 8019212:	e074      	b.n	80192fe <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8019214:	68f8      	ldr	r0, [r7, #12]
 8019216:	f7f7 f85b 	bl	80102d0 <pbuf_ref>
      pcr->original = p;
 801921a:	69bb      	ldr	r3, [r7, #24]
 801921c:	68fa      	ldr	r2, [r7, #12]
 801921e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8019220:	69bb      	ldr	r3, [r7, #24]
 8019222:	4a3f      	ldr	r2, [pc, #252]	; (8019320 <ip4_frag+0x288>)
 8019224:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8019226:	6979      	ldr	r1, [r7, #20]
 8019228:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801922a:	f7f7 f879 	bl	8010320 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801922e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8019232:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019236:	1ad3      	subs	r3, r2, r3
 8019238:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801923c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019240:	2b00      	cmp	r3, #0
 8019242:	d004      	beq.n	801924e <ip4_frag+0x1b6>
        poff = 0;
 8019244:	2300      	movs	r3, #0
 8019246:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8019248:	68fb      	ldr	r3, [r7, #12]
 801924a:	681b      	ldr	r3, [r3, #0]
 801924c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801924e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019252:	2b00      	cmp	r3, #0
 8019254:	d196      	bne.n	8019184 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8019256:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019258:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801925c:	4413      	add	r3, r2
 801925e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8019260:	68bb      	ldr	r3, [r7, #8]
 8019262:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019264:	f1a3 0213 	sub.w	r2, r3, #19
 8019268:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801926c:	429a      	cmp	r2, r3
 801926e:	bfcc      	ite	gt
 8019270:	2301      	movgt	r3, #1
 8019272:	2300      	movle	r3, #0
 8019274:	b2db      	uxtb	r3, r3
 8019276:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8019278:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801927c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019280:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8019282:	6a3b      	ldr	r3, [r7, #32]
 8019284:	2b00      	cmp	r3, #0
 8019286:	d002      	beq.n	801928e <ip4_frag+0x1f6>
 8019288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801928a:	2b00      	cmp	r3, #0
 801928c:	d003      	beq.n	8019296 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801928e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019290:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8019294:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8019296:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019298:	4618      	mov	r0, r3
 801929a:	f7f5 fac9 	bl	800e830 <lwip_htons>
 801929e:	4603      	mov	r3, r0
 80192a0:	461a      	mov	r2, r3
 80192a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192a4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80192a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80192a8:	3314      	adds	r3, #20
 80192aa:	b29b      	uxth	r3, r3
 80192ac:	4618      	mov	r0, r3
 80192ae:	f7f5 fabf 	bl	800e830 <lwip_htons>
 80192b2:	4603      	mov	r3, r0
 80192b4:	461a      	mov	r2, r3
 80192b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192b8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80192ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192bc:	2200      	movs	r2, #0
 80192be:	729a      	strb	r2, [r3, #10]
 80192c0:	2200      	movs	r2, #0
 80192c2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80192c4:	68bb      	ldr	r3, [r7, #8]
 80192c6:	695b      	ldr	r3, [r3, #20]
 80192c8:	687a      	ldr	r2, [r7, #4]
 80192ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80192cc:	68b8      	ldr	r0, [r7, #8]
 80192ce:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80192d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80192d2:	f7f6 ff57 	bl	8010184 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80192d6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80192da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80192dc:	1ad3      	subs	r3, r2, r3
 80192de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80192e2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80192e6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80192e8:	4413      	add	r3, r2
 80192ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80192ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80192f2:	2b00      	cmp	r3, #0
 80192f4:	f47f af19 	bne.w	801912a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80192f8:	2300      	movs	r3, #0
 80192fa:	e002      	b.n	8019302 <ip4_frag+0x26a>
      goto memerr;
 80192fc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80192fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019302:	4618      	mov	r0, r3
 8019304:	3748      	adds	r7, #72	; 0x48
 8019306:	46bd      	mov	sp, r7
 8019308:	bd80      	pop	{r7, pc}
 801930a:	bf00      	nop
 801930c:	0801d2c0 	.word	0x0801d2c0
 8019310:	0801d49c 	.word	0x0801d49c
 8019314:	0801d308 	.word	0x0801d308
 8019318:	0801d4b8 	.word	0x0801d4b8
 801931c:	0801d4d8 	.word	0x0801d4d8
 8019320:	08019031 	.word	0x08019031

08019324 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8019324:	b580      	push	{r7, lr}
 8019326:	b086      	sub	sp, #24
 8019328:	af00      	add	r7, sp, #0
 801932a:	6078      	str	r0, [r7, #4]
 801932c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801932e:	230e      	movs	r3, #14
 8019330:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	895b      	ldrh	r3, [r3, #10]
 8019336:	2b0e      	cmp	r3, #14
 8019338:	d96e      	bls.n	8019418 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	7bdb      	ldrb	r3, [r3, #15]
 801933e:	2b00      	cmp	r3, #0
 8019340:	d106      	bne.n	8019350 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8019342:	683b      	ldr	r3, [r7, #0]
 8019344:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019348:	3301      	adds	r3, #1
 801934a:	b2da      	uxtb	r2, r3
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	685b      	ldr	r3, [r3, #4]
 8019354:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8019356:	693b      	ldr	r3, [r7, #16]
 8019358:	7b1a      	ldrb	r2, [r3, #12]
 801935a:	7b5b      	ldrb	r3, [r3, #13]
 801935c:	021b      	lsls	r3, r3, #8
 801935e:	4313      	orrs	r3, r2
 8019360:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8019362:	693b      	ldr	r3, [r7, #16]
 8019364:	781b      	ldrb	r3, [r3, #0]
 8019366:	f003 0301 	and.w	r3, r3, #1
 801936a:	2b00      	cmp	r3, #0
 801936c:	d023      	beq.n	80193b6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801936e:	693b      	ldr	r3, [r7, #16]
 8019370:	781b      	ldrb	r3, [r3, #0]
 8019372:	2b01      	cmp	r3, #1
 8019374:	d10f      	bne.n	8019396 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019376:	693b      	ldr	r3, [r7, #16]
 8019378:	785b      	ldrb	r3, [r3, #1]
 801937a:	2b00      	cmp	r3, #0
 801937c:	d11b      	bne.n	80193b6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801937e:	693b      	ldr	r3, [r7, #16]
 8019380:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019382:	2b5e      	cmp	r3, #94	; 0x5e
 8019384:	d117      	bne.n	80193b6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	7b5b      	ldrb	r3, [r3, #13]
 801938a:	f043 0310 	orr.w	r3, r3, #16
 801938e:	b2da      	uxtb	r2, r3
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	735a      	strb	r2, [r3, #13]
 8019394:	e00f      	b.n	80193b6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8019396:	693b      	ldr	r3, [r7, #16]
 8019398:	2206      	movs	r2, #6
 801939a:	4928      	ldr	r1, [pc, #160]	; (801943c <ethernet_input+0x118>)
 801939c:	4618      	mov	r0, r3
 801939e:	f000 faca 	bl	8019936 <memcmp>
 80193a2:	4603      	mov	r3, r0
 80193a4:	2b00      	cmp	r3, #0
 80193a6:	d106      	bne.n	80193b6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	7b5b      	ldrb	r3, [r3, #13]
 80193ac:	f043 0308 	orr.w	r3, r3, #8
 80193b0:	b2da      	uxtb	r2, r3
 80193b2:	687b      	ldr	r3, [r7, #4]
 80193b4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80193b6:	89fb      	ldrh	r3, [r7, #14]
 80193b8:	2b08      	cmp	r3, #8
 80193ba:	d003      	beq.n	80193c4 <ethernet_input+0xa0>
 80193bc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80193c0:	d014      	beq.n	80193ec <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80193c2:	e032      	b.n	801942a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80193c4:	683b      	ldr	r3, [r7, #0]
 80193c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80193ca:	f003 0308 	and.w	r3, r3, #8
 80193ce:	2b00      	cmp	r3, #0
 80193d0:	d024      	beq.n	801941c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80193d2:	8afb      	ldrh	r3, [r7, #22]
 80193d4:	4619      	mov	r1, r3
 80193d6:	6878      	ldr	r0, [r7, #4]
 80193d8:	f7f6 fe4e 	bl	8010078 <pbuf_remove_header>
 80193dc:	4603      	mov	r3, r0
 80193de:	2b00      	cmp	r3, #0
 80193e0:	d11e      	bne.n	8019420 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80193e2:	6839      	ldr	r1, [r7, #0]
 80193e4:	6878      	ldr	r0, [r7, #4]
 80193e6:	f7fe fe95 	bl	8018114 <ip4_input>
      break;
 80193ea:	e013      	b.n	8019414 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80193ec:	683b      	ldr	r3, [r7, #0]
 80193ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80193f2:	f003 0308 	and.w	r3, r3, #8
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	d014      	beq.n	8019424 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80193fa:	8afb      	ldrh	r3, [r7, #22]
 80193fc:	4619      	mov	r1, r3
 80193fe:	6878      	ldr	r0, [r7, #4]
 8019400:	f7f6 fe3a 	bl	8010078 <pbuf_remove_header>
 8019404:	4603      	mov	r3, r0
 8019406:	2b00      	cmp	r3, #0
 8019408:	d10e      	bne.n	8019428 <ethernet_input+0x104>
        etharp_input(p, netif);
 801940a:	6839      	ldr	r1, [r7, #0]
 801940c:	6878      	ldr	r0, [r7, #4]
 801940e:	f7fe f80f 	bl	8017430 <etharp_input>
      break;
 8019412:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8019414:	2300      	movs	r3, #0
 8019416:	e00c      	b.n	8019432 <ethernet_input+0x10e>
    goto free_and_return;
 8019418:	bf00      	nop
 801941a:	e006      	b.n	801942a <ethernet_input+0x106>
        goto free_and_return;
 801941c:	bf00      	nop
 801941e:	e004      	b.n	801942a <ethernet_input+0x106>
        goto free_and_return;
 8019420:	bf00      	nop
 8019422:	e002      	b.n	801942a <ethernet_input+0x106>
        goto free_and_return;
 8019424:	bf00      	nop
 8019426:	e000      	b.n	801942a <ethernet_input+0x106>
        goto free_and_return;
 8019428:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801942a:	6878      	ldr	r0, [r7, #4]
 801942c:	f7f6 feaa 	bl	8010184 <pbuf_free>
  return ERR_OK;
 8019430:	2300      	movs	r3, #0
}
 8019432:	4618      	mov	r0, r3
 8019434:	3718      	adds	r7, #24
 8019436:	46bd      	mov	sp, r7
 8019438:	bd80      	pop	{r7, pc}
 801943a:	bf00      	nop
 801943c:	0801dec4 	.word	0x0801dec4

08019440 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8019440:	b580      	push	{r7, lr}
 8019442:	b086      	sub	sp, #24
 8019444:	af00      	add	r7, sp, #0
 8019446:	60f8      	str	r0, [r7, #12]
 8019448:	60b9      	str	r1, [r7, #8]
 801944a:	607a      	str	r2, [r7, #4]
 801944c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801944e:	8c3b      	ldrh	r3, [r7, #32]
 8019450:	4618      	mov	r0, r3
 8019452:	f7f5 f9ed 	bl	800e830 <lwip_htons>
 8019456:	4603      	mov	r3, r0
 8019458:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801945a:	210e      	movs	r1, #14
 801945c:	68b8      	ldr	r0, [r7, #8]
 801945e:	f7f6 fdfb 	bl	8010058 <pbuf_add_header>
 8019462:	4603      	mov	r3, r0
 8019464:	2b00      	cmp	r3, #0
 8019466:	d125      	bne.n	80194b4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8019468:	68bb      	ldr	r3, [r7, #8]
 801946a:	685b      	ldr	r3, [r3, #4]
 801946c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801946e:	693b      	ldr	r3, [r7, #16]
 8019470:	8afa      	ldrh	r2, [r7, #22]
 8019472:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8019474:	693b      	ldr	r3, [r7, #16]
 8019476:	2206      	movs	r2, #6
 8019478:	6839      	ldr	r1, [r7, #0]
 801947a:	4618      	mov	r0, r3
 801947c:	f000 fa69 	bl	8019952 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8019480:	693b      	ldr	r3, [r7, #16]
 8019482:	3306      	adds	r3, #6
 8019484:	2206      	movs	r2, #6
 8019486:	6879      	ldr	r1, [r7, #4]
 8019488:	4618      	mov	r0, r3
 801948a:	f000 fa62 	bl	8019952 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801948e:	68fb      	ldr	r3, [r7, #12]
 8019490:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8019494:	2b06      	cmp	r3, #6
 8019496:	d006      	beq.n	80194a6 <ethernet_output+0x66>
 8019498:	4b0a      	ldr	r3, [pc, #40]	; (80194c4 <ethernet_output+0x84>)
 801949a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801949e:	490a      	ldr	r1, [pc, #40]	; (80194c8 <ethernet_output+0x88>)
 80194a0:	480a      	ldr	r0, [pc, #40]	; (80194cc <ethernet_output+0x8c>)
 80194a2:	f000 fac7 	bl	8019a34 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80194a6:	68fb      	ldr	r3, [r7, #12]
 80194a8:	699b      	ldr	r3, [r3, #24]
 80194aa:	68b9      	ldr	r1, [r7, #8]
 80194ac:	68f8      	ldr	r0, [r7, #12]
 80194ae:	4798      	blx	r3
 80194b0:	4603      	mov	r3, r0
 80194b2:	e002      	b.n	80194ba <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80194b4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80194b6:	f06f 0301 	mvn.w	r3, #1
}
 80194ba:	4618      	mov	r0, r3
 80194bc:	3718      	adds	r7, #24
 80194be:	46bd      	mov	sp, r7
 80194c0:	bd80      	pop	{r7, pc}
 80194c2:	bf00      	nop
 80194c4:	0801d4e8 	.word	0x0801d4e8
 80194c8:	0801d520 	.word	0x0801d520
 80194cc:	0801d554 	.word	0x0801d554

080194d0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80194d0:	b580      	push	{r7, lr}
 80194d2:	b086      	sub	sp, #24
 80194d4:	af00      	add	r7, sp, #0
 80194d6:	6078      	str	r0, [r7, #4]
 80194d8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80194da:	683b      	ldr	r3, [r7, #0]
 80194dc:	60bb      	str	r3, [r7, #8]
 80194de:	2304      	movs	r3, #4
 80194e0:	60fb      	str	r3, [r7, #12]
 80194e2:	2300      	movs	r3, #0
 80194e4:	613b      	str	r3, [r7, #16]
 80194e6:	2300      	movs	r3, #0
 80194e8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80194ea:	f107 0308 	add.w	r3, r7, #8
 80194ee:	2100      	movs	r1, #0
 80194f0:	4618      	mov	r0, r3
 80194f2:	f7f2 fabd 	bl	800ba70 <osMessageCreate>
 80194f6:	4602      	mov	r2, r0
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80194fc:	687b      	ldr	r3, [r7, #4]
 80194fe:	681b      	ldr	r3, [r3, #0]
 8019500:	2b00      	cmp	r3, #0
 8019502:	d102      	bne.n	801950a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8019504:	f04f 33ff 	mov.w	r3, #4294967295
 8019508:	e000      	b.n	801950c <sys_mbox_new+0x3c>

  return ERR_OK;
 801950a:	2300      	movs	r3, #0
}
 801950c:	4618      	mov	r0, r3
 801950e:	3718      	adds	r7, #24
 8019510:	46bd      	mov	sp, r7
 8019512:	bd80      	pop	{r7, pc}

08019514 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8019514:	b580      	push	{r7, lr}
 8019516:	b084      	sub	sp, #16
 8019518:	af00      	add	r7, sp, #0
 801951a:	6078      	str	r0, [r7, #4]
 801951c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	681b      	ldr	r3, [r3, #0]
 8019522:	6839      	ldr	r1, [r7, #0]
 8019524:	2200      	movs	r2, #0
 8019526:	4618      	mov	r0, r3
 8019528:	f7f2 faca 	bl	800bac0 <osMessagePut>
 801952c:	4603      	mov	r3, r0
 801952e:	2b00      	cmp	r3, #0
 8019530:	d102      	bne.n	8019538 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8019532:	2300      	movs	r3, #0
 8019534:	73fb      	strb	r3, [r7, #15]
 8019536:	e001      	b.n	801953c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8019538:	23ff      	movs	r3, #255	; 0xff
 801953a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801953c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019540:	4618      	mov	r0, r3
 8019542:	3710      	adds	r7, #16
 8019544:	46bd      	mov	sp, r7
 8019546:	bd80      	pop	{r7, pc}

08019548 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8019548:	b580      	push	{r7, lr}
 801954a:	b08c      	sub	sp, #48	; 0x30
 801954c:	af00      	add	r7, sp, #0
 801954e:	61f8      	str	r0, [r7, #28]
 8019550:	61b9      	str	r1, [r7, #24]
 8019552:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8019554:	f7f2 f8c9 	bl	800b6ea <osKernelSysTick>
 8019558:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801955a:	697b      	ldr	r3, [r7, #20]
 801955c:	2b00      	cmp	r3, #0
 801955e:	d017      	beq.n	8019590 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8019560:	69fb      	ldr	r3, [r7, #28]
 8019562:	6819      	ldr	r1, [r3, #0]
 8019564:	f107 0320 	add.w	r3, r7, #32
 8019568:	697a      	ldr	r2, [r7, #20]
 801956a:	4618      	mov	r0, r3
 801956c:	f7f2 fae8 	bl	800bb40 <osMessageGet>

    if(event.status == osEventMessage)
 8019570:	6a3b      	ldr	r3, [r7, #32]
 8019572:	2b10      	cmp	r3, #16
 8019574:	d109      	bne.n	801958a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8019576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019578:	461a      	mov	r2, r3
 801957a:	69bb      	ldr	r3, [r7, #24]
 801957c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801957e:	f7f2 f8b4 	bl	800b6ea <osKernelSysTick>
 8019582:	4602      	mov	r2, r0
 8019584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019586:	1ad3      	subs	r3, r2, r3
 8019588:	e019      	b.n	80195be <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801958a:	f04f 33ff 	mov.w	r3, #4294967295
 801958e:	e016      	b.n	80195be <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8019590:	69fb      	ldr	r3, [r7, #28]
 8019592:	6819      	ldr	r1, [r3, #0]
 8019594:	463b      	mov	r3, r7
 8019596:	f04f 32ff 	mov.w	r2, #4294967295
 801959a:	4618      	mov	r0, r3
 801959c:	f7f2 fad0 	bl	800bb40 <osMessageGet>
 80195a0:	f107 0320 	add.w	r3, r7, #32
 80195a4:	463a      	mov	r2, r7
 80195a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80195a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80195ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195ae:	461a      	mov	r2, r3
 80195b0:	69bb      	ldr	r3, [r7, #24]
 80195b2:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80195b4:	f7f2 f899 	bl	800b6ea <osKernelSysTick>
 80195b8:	4602      	mov	r2, r0
 80195ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195bc:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80195be:	4618      	mov	r0, r3
 80195c0:	3730      	adds	r7, #48	; 0x30
 80195c2:	46bd      	mov	sp, r7
 80195c4:	bd80      	pop	{r7, pc}

080195c6 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80195c6:	b480      	push	{r7}
 80195c8:	b083      	sub	sp, #12
 80195ca:	af00      	add	r7, sp, #0
 80195cc:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80195ce:	687b      	ldr	r3, [r7, #4]
 80195d0:	681b      	ldr	r3, [r3, #0]
 80195d2:	2b00      	cmp	r3, #0
 80195d4:	d101      	bne.n	80195da <sys_mbox_valid+0x14>
    return 0;
 80195d6:	2300      	movs	r3, #0
 80195d8:	e000      	b.n	80195dc <sys_mbox_valid+0x16>
  else
    return 1;
 80195da:	2301      	movs	r3, #1
}
 80195dc:	4618      	mov	r0, r3
 80195de:	370c      	adds	r7, #12
 80195e0:	46bd      	mov	sp, r7
 80195e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195e6:	4770      	bx	lr

080195e8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80195e8:	b580      	push	{r7, lr}
 80195ea:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80195ec:	4803      	ldr	r0, [pc, #12]	; (80195fc <sys_init+0x14>)
 80195ee:	f7f2 f8ec 	bl	800b7ca <osMutexCreate>
 80195f2:	4603      	mov	r3, r0
 80195f4:	4a02      	ldr	r2, [pc, #8]	; (8019600 <sys_init+0x18>)
 80195f6:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80195f8:	bf00      	nop
 80195fa:	bd80      	pop	{r7, pc}
 80195fc:	0801ded4 	.word	0x0801ded4
 8019600:	24007884 	.word	0x24007884

08019604 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8019604:	b580      	push	{r7, lr}
 8019606:	b084      	sub	sp, #16
 8019608:	af00      	add	r7, sp, #0
 801960a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801960c:	2300      	movs	r3, #0
 801960e:	60bb      	str	r3, [r7, #8]
 8019610:	2300      	movs	r3, #0
 8019612:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8019614:	f107 0308 	add.w	r3, r7, #8
 8019618:	4618      	mov	r0, r3
 801961a:	f7f2 f8d6 	bl	800b7ca <osMutexCreate>
 801961e:	4602      	mov	r2, r0
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8019624:	687b      	ldr	r3, [r7, #4]
 8019626:	681b      	ldr	r3, [r3, #0]
 8019628:	2b00      	cmp	r3, #0
 801962a:	d102      	bne.n	8019632 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801962c:	f04f 33ff 	mov.w	r3, #4294967295
 8019630:	e000      	b.n	8019634 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8019632:	2300      	movs	r3, #0
}
 8019634:	4618      	mov	r0, r3
 8019636:	3710      	adds	r7, #16
 8019638:	46bd      	mov	sp, r7
 801963a:	bd80      	pop	{r7, pc}

0801963c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801963c:	b580      	push	{r7, lr}
 801963e:	b082      	sub	sp, #8
 8019640:	af00      	add	r7, sp, #0
 8019642:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	681b      	ldr	r3, [r3, #0]
 8019648:	f04f 31ff 	mov.w	r1, #4294967295
 801964c:	4618      	mov	r0, r3
 801964e:	f7f2 f8d5 	bl	800b7fc <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8019652:	bf00      	nop
 8019654:	3708      	adds	r7, #8
 8019656:	46bd      	mov	sp, r7
 8019658:	bd80      	pop	{r7, pc}

0801965a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801965a:	b580      	push	{r7, lr}
 801965c:	b082      	sub	sp, #8
 801965e:	af00      	add	r7, sp, #0
 8019660:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8019662:	687b      	ldr	r3, [r7, #4]
 8019664:	681b      	ldr	r3, [r3, #0]
 8019666:	4618      	mov	r0, r3
 8019668:	f7f2 f916 	bl	800b898 <osMutexRelease>
}
 801966c:	bf00      	nop
 801966e:	3708      	adds	r7, #8
 8019670:	46bd      	mov	sp, r7
 8019672:	bd80      	pop	{r7, pc}

08019674 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8019674:	b580      	push	{r7, lr}
 8019676:	b08c      	sub	sp, #48	; 0x30
 8019678:	af00      	add	r7, sp, #0
 801967a:	60f8      	str	r0, [r7, #12]
 801967c:	60b9      	str	r1, [r7, #8]
 801967e:	607a      	str	r2, [r7, #4]
 8019680:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8019682:	f107 0314 	add.w	r3, r7, #20
 8019686:	2200      	movs	r2, #0
 8019688:	601a      	str	r2, [r3, #0]
 801968a:	605a      	str	r2, [r3, #4]
 801968c:	609a      	str	r2, [r3, #8]
 801968e:	60da      	str	r2, [r3, #12]
 8019690:	611a      	str	r2, [r3, #16]
 8019692:	615a      	str	r2, [r3, #20]
 8019694:	619a      	str	r2, [r3, #24]
 8019696:	68fb      	ldr	r3, [r7, #12]
 8019698:	617b      	str	r3, [r7, #20]
 801969a:	68bb      	ldr	r3, [r7, #8]
 801969c:	61bb      	str	r3, [r7, #24]
 801969e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196a0:	b21b      	sxth	r3, r3
 80196a2:	83bb      	strh	r3, [r7, #28]
 80196a4:	683b      	ldr	r3, [r7, #0]
 80196a6:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80196a8:	f107 0314 	add.w	r3, r7, #20
 80196ac:	6879      	ldr	r1, [r7, #4]
 80196ae:	4618      	mov	r0, r3
 80196b0:	f7f2 f82b 	bl	800b70a <osThreadCreate>
 80196b4:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80196b6:	4618      	mov	r0, r3
 80196b8:	3730      	adds	r7, #48	; 0x30
 80196ba:	46bd      	mov	sp, r7
 80196bc:	bd80      	pop	{r7, pc}
	...

080196c0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80196c0:	b580      	push	{r7, lr}
 80196c2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80196c4:	4b04      	ldr	r3, [pc, #16]	; (80196d8 <sys_arch_protect+0x18>)
 80196c6:	681b      	ldr	r3, [r3, #0]
 80196c8:	f04f 31ff 	mov.w	r1, #4294967295
 80196cc:	4618      	mov	r0, r3
 80196ce:	f7f2 f895 	bl	800b7fc <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80196d2:	2301      	movs	r3, #1
}
 80196d4:	4618      	mov	r0, r3
 80196d6:	bd80      	pop	{r7, pc}
 80196d8:	24007884 	.word	0x24007884

080196dc <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80196dc:	b580      	push	{r7, lr}
 80196de:	b082      	sub	sp, #8
 80196e0:	af00      	add	r7, sp, #0
 80196e2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80196e4:	4b04      	ldr	r3, [pc, #16]	; (80196f8 <sys_arch_unprotect+0x1c>)
 80196e6:	681b      	ldr	r3, [r3, #0]
 80196e8:	4618      	mov	r0, r3
 80196ea:	f7f2 f8d5 	bl	800b898 <osMutexRelease>
}
 80196ee:	bf00      	nop
 80196f0:	3708      	adds	r7, #8
 80196f2:	46bd      	mov	sp, r7
 80196f4:	bd80      	pop	{r7, pc}
 80196f6:	bf00      	nop
 80196f8:	24007884 	.word	0x24007884

080196fc <std>:
 80196fc:	2300      	movs	r3, #0
 80196fe:	b510      	push	{r4, lr}
 8019700:	4604      	mov	r4, r0
 8019702:	e9c0 3300 	strd	r3, r3, [r0]
 8019706:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801970a:	6083      	str	r3, [r0, #8]
 801970c:	8181      	strh	r1, [r0, #12]
 801970e:	6643      	str	r3, [r0, #100]	; 0x64
 8019710:	81c2      	strh	r2, [r0, #14]
 8019712:	6183      	str	r3, [r0, #24]
 8019714:	4619      	mov	r1, r3
 8019716:	2208      	movs	r2, #8
 8019718:	305c      	adds	r0, #92	; 0x5c
 801971a:	f000 f928 	bl	801996e <memset>
 801971e:	4b05      	ldr	r3, [pc, #20]	; (8019734 <std+0x38>)
 8019720:	6263      	str	r3, [r4, #36]	; 0x24
 8019722:	4b05      	ldr	r3, [pc, #20]	; (8019738 <std+0x3c>)
 8019724:	62a3      	str	r3, [r4, #40]	; 0x28
 8019726:	4b05      	ldr	r3, [pc, #20]	; (801973c <std+0x40>)
 8019728:	62e3      	str	r3, [r4, #44]	; 0x2c
 801972a:	4b05      	ldr	r3, [pc, #20]	; (8019740 <std+0x44>)
 801972c:	6224      	str	r4, [r4, #32]
 801972e:	6323      	str	r3, [r4, #48]	; 0x30
 8019730:	bd10      	pop	{r4, pc}
 8019732:	bf00      	nop
 8019734:	08019bd9 	.word	0x08019bd9
 8019738:	08019bfb 	.word	0x08019bfb
 801973c:	08019c33 	.word	0x08019c33
 8019740:	08019c57 	.word	0x08019c57

08019744 <_cleanup_r>:
 8019744:	4901      	ldr	r1, [pc, #4]	; (801974c <_cleanup_r+0x8>)
 8019746:	f000 b8af 	b.w	80198a8 <_fwalk_reent>
 801974a:	bf00      	nop
 801974c:	08019e21 	.word	0x08019e21

08019750 <__sfmoreglue>:
 8019750:	b570      	push	{r4, r5, r6, lr}
 8019752:	1e4a      	subs	r2, r1, #1
 8019754:	2568      	movs	r5, #104	; 0x68
 8019756:	4355      	muls	r5, r2
 8019758:	460e      	mov	r6, r1
 801975a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801975e:	f000 f90f 	bl	8019980 <_malloc_r>
 8019762:	4604      	mov	r4, r0
 8019764:	b140      	cbz	r0, 8019778 <__sfmoreglue+0x28>
 8019766:	2100      	movs	r1, #0
 8019768:	e9c0 1600 	strd	r1, r6, [r0]
 801976c:	300c      	adds	r0, #12
 801976e:	60a0      	str	r0, [r4, #8]
 8019770:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019774:	f000 f8fb 	bl	801996e <memset>
 8019778:	4620      	mov	r0, r4
 801977a:	bd70      	pop	{r4, r5, r6, pc}

0801977c <__sfp_lock_acquire>:
 801977c:	4801      	ldr	r0, [pc, #4]	; (8019784 <__sfp_lock_acquire+0x8>)
 801977e:	f000 b8d8 	b.w	8019932 <__retarget_lock_acquire_recursive>
 8019782:	bf00      	nop
 8019784:	24007890 	.word	0x24007890

08019788 <__sfp_lock_release>:
 8019788:	4801      	ldr	r0, [pc, #4]	; (8019790 <__sfp_lock_release+0x8>)
 801978a:	f000 b8d3 	b.w	8019934 <__retarget_lock_release_recursive>
 801978e:	bf00      	nop
 8019790:	24007890 	.word	0x24007890

08019794 <__sinit_lock_acquire>:
 8019794:	4801      	ldr	r0, [pc, #4]	; (801979c <__sinit_lock_acquire+0x8>)
 8019796:	f000 b8cc 	b.w	8019932 <__retarget_lock_acquire_recursive>
 801979a:	bf00      	nop
 801979c:	2400788b 	.word	0x2400788b

080197a0 <__sinit_lock_release>:
 80197a0:	4801      	ldr	r0, [pc, #4]	; (80197a8 <__sinit_lock_release+0x8>)
 80197a2:	f000 b8c7 	b.w	8019934 <__retarget_lock_release_recursive>
 80197a6:	bf00      	nop
 80197a8:	2400788b 	.word	0x2400788b

080197ac <__sinit>:
 80197ac:	b510      	push	{r4, lr}
 80197ae:	4604      	mov	r4, r0
 80197b0:	f7ff fff0 	bl	8019794 <__sinit_lock_acquire>
 80197b4:	69a3      	ldr	r3, [r4, #24]
 80197b6:	b11b      	cbz	r3, 80197c0 <__sinit+0x14>
 80197b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80197bc:	f7ff bff0 	b.w	80197a0 <__sinit_lock_release>
 80197c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80197c4:	6523      	str	r3, [r4, #80]	; 0x50
 80197c6:	4b13      	ldr	r3, [pc, #76]	; (8019814 <__sinit+0x68>)
 80197c8:	4a13      	ldr	r2, [pc, #76]	; (8019818 <__sinit+0x6c>)
 80197ca:	681b      	ldr	r3, [r3, #0]
 80197cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80197ce:	42a3      	cmp	r3, r4
 80197d0:	bf04      	itt	eq
 80197d2:	2301      	moveq	r3, #1
 80197d4:	61a3      	streq	r3, [r4, #24]
 80197d6:	4620      	mov	r0, r4
 80197d8:	f000 f820 	bl	801981c <__sfp>
 80197dc:	6060      	str	r0, [r4, #4]
 80197de:	4620      	mov	r0, r4
 80197e0:	f000 f81c 	bl	801981c <__sfp>
 80197e4:	60a0      	str	r0, [r4, #8]
 80197e6:	4620      	mov	r0, r4
 80197e8:	f000 f818 	bl	801981c <__sfp>
 80197ec:	2200      	movs	r2, #0
 80197ee:	60e0      	str	r0, [r4, #12]
 80197f0:	2104      	movs	r1, #4
 80197f2:	6860      	ldr	r0, [r4, #4]
 80197f4:	f7ff ff82 	bl	80196fc <std>
 80197f8:	68a0      	ldr	r0, [r4, #8]
 80197fa:	2201      	movs	r2, #1
 80197fc:	2109      	movs	r1, #9
 80197fe:	f7ff ff7d 	bl	80196fc <std>
 8019802:	68e0      	ldr	r0, [r4, #12]
 8019804:	2202      	movs	r2, #2
 8019806:	2112      	movs	r1, #18
 8019808:	f7ff ff78 	bl	80196fc <std>
 801980c:	2301      	movs	r3, #1
 801980e:	61a3      	str	r3, [r4, #24]
 8019810:	e7d2      	b.n	80197b8 <__sinit+0xc>
 8019812:	bf00      	nop
 8019814:	0801df3c 	.word	0x0801df3c
 8019818:	08019745 	.word	0x08019745

0801981c <__sfp>:
 801981c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801981e:	4607      	mov	r7, r0
 8019820:	f7ff ffac 	bl	801977c <__sfp_lock_acquire>
 8019824:	4b1e      	ldr	r3, [pc, #120]	; (80198a0 <__sfp+0x84>)
 8019826:	681e      	ldr	r6, [r3, #0]
 8019828:	69b3      	ldr	r3, [r6, #24]
 801982a:	b913      	cbnz	r3, 8019832 <__sfp+0x16>
 801982c:	4630      	mov	r0, r6
 801982e:	f7ff ffbd 	bl	80197ac <__sinit>
 8019832:	3648      	adds	r6, #72	; 0x48
 8019834:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019838:	3b01      	subs	r3, #1
 801983a:	d503      	bpl.n	8019844 <__sfp+0x28>
 801983c:	6833      	ldr	r3, [r6, #0]
 801983e:	b30b      	cbz	r3, 8019884 <__sfp+0x68>
 8019840:	6836      	ldr	r6, [r6, #0]
 8019842:	e7f7      	b.n	8019834 <__sfp+0x18>
 8019844:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019848:	b9d5      	cbnz	r5, 8019880 <__sfp+0x64>
 801984a:	4b16      	ldr	r3, [pc, #88]	; (80198a4 <__sfp+0x88>)
 801984c:	60e3      	str	r3, [r4, #12]
 801984e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019852:	6665      	str	r5, [r4, #100]	; 0x64
 8019854:	f000 f86c 	bl	8019930 <__retarget_lock_init_recursive>
 8019858:	f7ff ff96 	bl	8019788 <__sfp_lock_release>
 801985c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019860:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019864:	6025      	str	r5, [r4, #0]
 8019866:	61a5      	str	r5, [r4, #24]
 8019868:	2208      	movs	r2, #8
 801986a:	4629      	mov	r1, r5
 801986c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019870:	f000 f87d 	bl	801996e <memset>
 8019874:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019878:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801987c:	4620      	mov	r0, r4
 801987e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019880:	3468      	adds	r4, #104	; 0x68
 8019882:	e7d9      	b.n	8019838 <__sfp+0x1c>
 8019884:	2104      	movs	r1, #4
 8019886:	4638      	mov	r0, r7
 8019888:	f7ff ff62 	bl	8019750 <__sfmoreglue>
 801988c:	4604      	mov	r4, r0
 801988e:	6030      	str	r0, [r6, #0]
 8019890:	2800      	cmp	r0, #0
 8019892:	d1d5      	bne.n	8019840 <__sfp+0x24>
 8019894:	f7ff ff78 	bl	8019788 <__sfp_lock_release>
 8019898:	230c      	movs	r3, #12
 801989a:	603b      	str	r3, [r7, #0]
 801989c:	e7ee      	b.n	801987c <__sfp+0x60>
 801989e:	bf00      	nop
 80198a0:	0801df3c 	.word	0x0801df3c
 80198a4:	ffff0001 	.word	0xffff0001

080198a8 <_fwalk_reent>:
 80198a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80198ac:	4606      	mov	r6, r0
 80198ae:	4688      	mov	r8, r1
 80198b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80198b4:	2700      	movs	r7, #0
 80198b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80198ba:	f1b9 0901 	subs.w	r9, r9, #1
 80198be:	d505      	bpl.n	80198cc <_fwalk_reent+0x24>
 80198c0:	6824      	ldr	r4, [r4, #0]
 80198c2:	2c00      	cmp	r4, #0
 80198c4:	d1f7      	bne.n	80198b6 <_fwalk_reent+0xe>
 80198c6:	4638      	mov	r0, r7
 80198c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80198cc:	89ab      	ldrh	r3, [r5, #12]
 80198ce:	2b01      	cmp	r3, #1
 80198d0:	d907      	bls.n	80198e2 <_fwalk_reent+0x3a>
 80198d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80198d6:	3301      	adds	r3, #1
 80198d8:	d003      	beq.n	80198e2 <_fwalk_reent+0x3a>
 80198da:	4629      	mov	r1, r5
 80198dc:	4630      	mov	r0, r6
 80198de:	47c0      	blx	r8
 80198e0:	4307      	orrs	r7, r0
 80198e2:	3568      	adds	r5, #104	; 0x68
 80198e4:	e7e9      	b.n	80198ba <_fwalk_reent+0x12>
	...

080198e8 <__libc_init_array>:
 80198e8:	b570      	push	{r4, r5, r6, lr}
 80198ea:	4d0d      	ldr	r5, [pc, #52]	; (8019920 <__libc_init_array+0x38>)
 80198ec:	4c0d      	ldr	r4, [pc, #52]	; (8019924 <__libc_init_array+0x3c>)
 80198ee:	1b64      	subs	r4, r4, r5
 80198f0:	10a4      	asrs	r4, r4, #2
 80198f2:	2600      	movs	r6, #0
 80198f4:	42a6      	cmp	r6, r4
 80198f6:	d109      	bne.n	801990c <__libc_init_array+0x24>
 80198f8:	4d0b      	ldr	r5, [pc, #44]	; (8019928 <__libc_init_array+0x40>)
 80198fa:	4c0c      	ldr	r4, [pc, #48]	; (801992c <__libc_init_array+0x44>)
 80198fc:	f000 ffe6 	bl	801a8cc <_init>
 8019900:	1b64      	subs	r4, r4, r5
 8019902:	10a4      	asrs	r4, r4, #2
 8019904:	2600      	movs	r6, #0
 8019906:	42a6      	cmp	r6, r4
 8019908:	d105      	bne.n	8019916 <__libc_init_array+0x2e>
 801990a:	bd70      	pop	{r4, r5, r6, pc}
 801990c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019910:	4798      	blx	r3
 8019912:	3601      	adds	r6, #1
 8019914:	e7ee      	b.n	80198f4 <__libc_init_array+0xc>
 8019916:	f855 3b04 	ldr.w	r3, [r5], #4
 801991a:	4798      	blx	r3
 801991c:	3601      	adds	r6, #1
 801991e:	e7f2      	b.n	8019906 <__libc_init_array+0x1e>
 8019920:	0801e030 	.word	0x0801e030
 8019924:	0801e030 	.word	0x0801e030
 8019928:	0801e030 	.word	0x0801e030
 801992c:	0801e034 	.word	0x0801e034

08019930 <__retarget_lock_init_recursive>:
 8019930:	4770      	bx	lr

08019932 <__retarget_lock_acquire_recursive>:
 8019932:	4770      	bx	lr

08019934 <__retarget_lock_release_recursive>:
 8019934:	4770      	bx	lr

08019936 <memcmp>:
 8019936:	b530      	push	{r4, r5, lr}
 8019938:	3901      	subs	r1, #1
 801993a:	2400      	movs	r4, #0
 801993c:	42a2      	cmp	r2, r4
 801993e:	d101      	bne.n	8019944 <memcmp+0xe>
 8019940:	2000      	movs	r0, #0
 8019942:	e005      	b.n	8019950 <memcmp+0x1a>
 8019944:	5d03      	ldrb	r3, [r0, r4]
 8019946:	3401      	adds	r4, #1
 8019948:	5d0d      	ldrb	r5, [r1, r4]
 801994a:	42ab      	cmp	r3, r5
 801994c:	d0f6      	beq.n	801993c <memcmp+0x6>
 801994e:	1b58      	subs	r0, r3, r5
 8019950:	bd30      	pop	{r4, r5, pc}

08019952 <memcpy>:
 8019952:	440a      	add	r2, r1
 8019954:	4291      	cmp	r1, r2
 8019956:	f100 33ff 	add.w	r3, r0, #4294967295
 801995a:	d100      	bne.n	801995e <memcpy+0xc>
 801995c:	4770      	bx	lr
 801995e:	b510      	push	{r4, lr}
 8019960:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019964:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019968:	4291      	cmp	r1, r2
 801996a:	d1f9      	bne.n	8019960 <memcpy+0xe>
 801996c:	bd10      	pop	{r4, pc}

0801996e <memset>:
 801996e:	4402      	add	r2, r0
 8019970:	4603      	mov	r3, r0
 8019972:	4293      	cmp	r3, r2
 8019974:	d100      	bne.n	8019978 <memset+0xa>
 8019976:	4770      	bx	lr
 8019978:	f803 1b01 	strb.w	r1, [r3], #1
 801997c:	e7f9      	b.n	8019972 <memset+0x4>
	...

08019980 <_malloc_r>:
 8019980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019982:	1ccd      	adds	r5, r1, #3
 8019984:	f025 0503 	bic.w	r5, r5, #3
 8019988:	3508      	adds	r5, #8
 801998a:	2d0c      	cmp	r5, #12
 801998c:	bf38      	it	cc
 801998e:	250c      	movcc	r5, #12
 8019990:	2d00      	cmp	r5, #0
 8019992:	4606      	mov	r6, r0
 8019994:	db01      	blt.n	801999a <_malloc_r+0x1a>
 8019996:	42a9      	cmp	r1, r5
 8019998:	d903      	bls.n	80199a2 <_malloc_r+0x22>
 801999a:	230c      	movs	r3, #12
 801999c:	6033      	str	r3, [r6, #0]
 801999e:	2000      	movs	r0, #0
 80199a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80199a2:	f000 faa5 	bl	8019ef0 <__malloc_lock>
 80199a6:	4921      	ldr	r1, [pc, #132]	; (8019a2c <_malloc_r+0xac>)
 80199a8:	680a      	ldr	r2, [r1, #0]
 80199aa:	4614      	mov	r4, r2
 80199ac:	b99c      	cbnz	r4, 80199d6 <_malloc_r+0x56>
 80199ae:	4f20      	ldr	r7, [pc, #128]	; (8019a30 <_malloc_r+0xb0>)
 80199b0:	683b      	ldr	r3, [r7, #0]
 80199b2:	b923      	cbnz	r3, 80199be <_malloc_r+0x3e>
 80199b4:	4621      	mov	r1, r4
 80199b6:	4630      	mov	r0, r6
 80199b8:	f000 f8fe 	bl	8019bb8 <_sbrk_r>
 80199bc:	6038      	str	r0, [r7, #0]
 80199be:	4629      	mov	r1, r5
 80199c0:	4630      	mov	r0, r6
 80199c2:	f000 f8f9 	bl	8019bb8 <_sbrk_r>
 80199c6:	1c43      	adds	r3, r0, #1
 80199c8:	d123      	bne.n	8019a12 <_malloc_r+0x92>
 80199ca:	230c      	movs	r3, #12
 80199cc:	6033      	str	r3, [r6, #0]
 80199ce:	4630      	mov	r0, r6
 80199d0:	f000 fa94 	bl	8019efc <__malloc_unlock>
 80199d4:	e7e3      	b.n	801999e <_malloc_r+0x1e>
 80199d6:	6823      	ldr	r3, [r4, #0]
 80199d8:	1b5b      	subs	r3, r3, r5
 80199da:	d417      	bmi.n	8019a0c <_malloc_r+0x8c>
 80199dc:	2b0b      	cmp	r3, #11
 80199de:	d903      	bls.n	80199e8 <_malloc_r+0x68>
 80199e0:	6023      	str	r3, [r4, #0]
 80199e2:	441c      	add	r4, r3
 80199e4:	6025      	str	r5, [r4, #0]
 80199e6:	e004      	b.n	80199f2 <_malloc_r+0x72>
 80199e8:	6863      	ldr	r3, [r4, #4]
 80199ea:	42a2      	cmp	r2, r4
 80199ec:	bf0c      	ite	eq
 80199ee:	600b      	streq	r3, [r1, #0]
 80199f0:	6053      	strne	r3, [r2, #4]
 80199f2:	4630      	mov	r0, r6
 80199f4:	f000 fa82 	bl	8019efc <__malloc_unlock>
 80199f8:	f104 000b 	add.w	r0, r4, #11
 80199fc:	1d23      	adds	r3, r4, #4
 80199fe:	f020 0007 	bic.w	r0, r0, #7
 8019a02:	1ac2      	subs	r2, r0, r3
 8019a04:	d0cc      	beq.n	80199a0 <_malloc_r+0x20>
 8019a06:	1a1b      	subs	r3, r3, r0
 8019a08:	50a3      	str	r3, [r4, r2]
 8019a0a:	e7c9      	b.n	80199a0 <_malloc_r+0x20>
 8019a0c:	4622      	mov	r2, r4
 8019a0e:	6864      	ldr	r4, [r4, #4]
 8019a10:	e7cc      	b.n	80199ac <_malloc_r+0x2c>
 8019a12:	1cc4      	adds	r4, r0, #3
 8019a14:	f024 0403 	bic.w	r4, r4, #3
 8019a18:	42a0      	cmp	r0, r4
 8019a1a:	d0e3      	beq.n	80199e4 <_malloc_r+0x64>
 8019a1c:	1a21      	subs	r1, r4, r0
 8019a1e:	4630      	mov	r0, r6
 8019a20:	f000 f8ca 	bl	8019bb8 <_sbrk_r>
 8019a24:	3001      	adds	r0, #1
 8019a26:	d1dd      	bne.n	80199e4 <_malloc_r+0x64>
 8019a28:	e7cf      	b.n	80199ca <_malloc_r+0x4a>
 8019a2a:	bf00      	nop
 8019a2c:	24004270 	.word	0x24004270
 8019a30:	24004274 	.word	0x24004274

08019a34 <iprintf>:
 8019a34:	b40f      	push	{r0, r1, r2, r3}
 8019a36:	4b0a      	ldr	r3, [pc, #40]	; (8019a60 <iprintf+0x2c>)
 8019a38:	b513      	push	{r0, r1, r4, lr}
 8019a3a:	681c      	ldr	r4, [r3, #0]
 8019a3c:	b124      	cbz	r4, 8019a48 <iprintf+0x14>
 8019a3e:	69a3      	ldr	r3, [r4, #24]
 8019a40:	b913      	cbnz	r3, 8019a48 <iprintf+0x14>
 8019a42:	4620      	mov	r0, r4
 8019a44:	f7ff feb2 	bl	80197ac <__sinit>
 8019a48:	ab05      	add	r3, sp, #20
 8019a4a:	9a04      	ldr	r2, [sp, #16]
 8019a4c:	68a1      	ldr	r1, [r4, #8]
 8019a4e:	9301      	str	r3, [sp, #4]
 8019a50:	4620      	mov	r0, r4
 8019a52:	f000 fad3 	bl	8019ffc <_vfiprintf_r>
 8019a56:	b002      	add	sp, #8
 8019a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a5c:	b004      	add	sp, #16
 8019a5e:	4770      	bx	lr
 8019a60:	2400003c 	.word	0x2400003c

08019a64 <rand>:
 8019a64:	4b17      	ldr	r3, [pc, #92]	; (8019ac4 <rand+0x60>)
 8019a66:	b510      	push	{r4, lr}
 8019a68:	681c      	ldr	r4, [r3, #0]
 8019a6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019a6c:	b9b3      	cbnz	r3, 8019a9c <rand+0x38>
 8019a6e:	2018      	movs	r0, #24
 8019a70:	f000 fa36 	bl	8019ee0 <malloc>
 8019a74:	63a0      	str	r0, [r4, #56]	; 0x38
 8019a76:	b928      	cbnz	r0, 8019a84 <rand+0x20>
 8019a78:	4602      	mov	r2, r0
 8019a7a:	4b13      	ldr	r3, [pc, #76]	; (8019ac8 <rand+0x64>)
 8019a7c:	4813      	ldr	r0, [pc, #76]	; (8019acc <rand+0x68>)
 8019a7e:	214e      	movs	r1, #78	; 0x4e
 8019a80:	f000 f91a 	bl	8019cb8 <__assert_func>
 8019a84:	4a12      	ldr	r2, [pc, #72]	; (8019ad0 <rand+0x6c>)
 8019a86:	4b13      	ldr	r3, [pc, #76]	; (8019ad4 <rand+0x70>)
 8019a88:	e9c0 2300 	strd	r2, r3, [r0]
 8019a8c:	4b12      	ldr	r3, [pc, #72]	; (8019ad8 <rand+0x74>)
 8019a8e:	6083      	str	r3, [r0, #8]
 8019a90:	230b      	movs	r3, #11
 8019a92:	8183      	strh	r3, [r0, #12]
 8019a94:	2201      	movs	r2, #1
 8019a96:	2300      	movs	r3, #0
 8019a98:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8019a9c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019a9e:	480f      	ldr	r0, [pc, #60]	; (8019adc <rand+0x78>)
 8019aa0:	690a      	ldr	r2, [r1, #16]
 8019aa2:	694b      	ldr	r3, [r1, #20]
 8019aa4:	4c0e      	ldr	r4, [pc, #56]	; (8019ae0 <rand+0x7c>)
 8019aa6:	4350      	muls	r0, r2
 8019aa8:	fb04 0003 	mla	r0, r4, r3, r0
 8019aac:	fba2 3404 	umull	r3, r4, r2, r4
 8019ab0:	1c5a      	adds	r2, r3, #1
 8019ab2:	4404      	add	r4, r0
 8019ab4:	f144 0000 	adc.w	r0, r4, #0
 8019ab8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8019abc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019ac0:	bd10      	pop	{r4, pc}
 8019ac2:	bf00      	nop
 8019ac4:	2400003c 	.word	0x2400003c
 8019ac8:	0801df40 	.word	0x0801df40
 8019acc:	0801df57 	.word	0x0801df57
 8019ad0:	abcd330e 	.word	0xabcd330e
 8019ad4:	e66d1234 	.word	0xe66d1234
 8019ad8:	0005deec 	.word	0x0005deec
 8019adc:	5851f42d 	.word	0x5851f42d
 8019ae0:	4c957f2d 	.word	0x4c957f2d

08019ae4 <cleanup_glue>:
 8019ae4:	b538      	push	{r3, r4, r5, lr}
 8019ae6:	460c      	mov	r4, r1
 8019ae8:	6809      	ldr	r1, [r1, #0]
 8019aea:	4605      	mov	r5, r0
 8019aec:	b109      	cbz	r1, 8019af2 <cleanup_glue+0xe>
 8019aee:	f7ff fff9 	bl	8019ae4 <cleanup_glue>
 8019af2:	4621      	mov	r1, r4
 8019af4:	4628      	mov	r0, r5
 8019af6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019afa:	f000 ba05 	b.w	8019f08 <_free_r>
	...

08019b00 <_reclaim_reent>:
 8019b00:	4b2c      	ldr	r3, [pc, #176]	; (8019bb4 <_reclaim_reent+0xb4>)
 8019b02:	681b      	ldr	r3, [r3, #0]
 8019b04:	4283      	cmp	r3, r0
 8019b06:	b570      	push	{r4, r5, r6, lr}
 8019b08:	4604      	mov	r4, r0
 8019b0a:	d051      	beq.n	8019bb0 <_reclaim_reent+0xb0>
 8019b0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8019b0e:	b143      	cbz	r3, 8019b22 <_reclaim_reent+0x22>
 8019b10:	68db      	ldr	r3, [r3, #12]
 8019b12:	2b00      	cmp	r3, #0
 8019b14:	d14a      	bne.n	8019bac <_reclaim_reent+0xac>
 8019b16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019b18:	6819      	ldr	r1, [r3, #0]
 8019b1a:	b111      	cbz	r1, 8019b22 <_reclaim_reent+0x22>
 8019b1c:	4620      	mov	r0, r4
 8019b1e:	f000 f9f3 	bl	8019f08 <_free_r>
 8019b22:	6961      	ldr	r1, [r4, #20]
 8019b24:	b111      	cbz	r1, 8019b2c <_reclaim_reent+0x2c>
 8019b26:	4620      	mov	r0, r4
 8019b28:	f000 f9ee 	bl	8019f08 <_free_r>
 8019b2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019b2e:	b111      	cbz	r1, 8019b36 <_reclaim_reent+0x36>
 8019b30:	4620      	mov	r0, r4
 8019b32:	f000 f9e9 	bl	8019f08 <_free_r>
 8019b36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019b38:	b111      	cbz	r1, 8019b40 <_reclaim_reent+0x40>
 8019b3a:	4620      	mov	r0, r4
 8019b3c:	f000 f9e4 	bl	8019f08 <_free_r>
 8019b40:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8019b42:	b111      	cbz	r1, 8019b4a <_reclaim_reent+0x4a>
 8019b44:	4620      	mov	r0, r4
 8019b46:	f000 f9df 	bl	8019f08 <_free_r>
 8019b4a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8019b4c:	b111      	cbz	r1, 8019b54 <_reclaim_reent+0x54>
 8019b4e:	4620      	mov	r0, r4
 8019b50:	f000 f9da 	bl	8019f08 <_free_r>
 8019b54:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8019b56:	b111      	cbz	r1, 8019b5e <_reclaim_reent+0x5e>
 8019b58:	4620      	mov	r0, r4
 8019b5a:	f000 f9d5 	bl	8019f08 <_free_r>
 8019b5e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8019b60:	b111      	cbz	r1, 8019b68 <_reclaim_reent+0x68>
 8019b62:	4620      	mov	r0, r4
 8019b64:	f000 f9d0 	bl	8019f08 <_free_r>
 8019b68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019b6a:	b111      	cbz	r1, 8019b72 <_reclaim_reent+0x72>
 8019b6c:	4620      	mov	r0, r4
 8019b6e:	f000 f9cb 	bl	8019f08 <_free_r>
 8019b72:	69a3      	ldr	r3, [r4, #24]
 8019b74:	b1e3      	cbz	r3, 8019bb0 <_reclaim_reent+0xb0>
 8019b76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8019b78:	4620      	mov	r0, r4
 8019b7a:	4798      	blx	r3
 8019b7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8019b7e:	b1b9      	cbz	r1, 8019bb0 <_reclaim_reent+0xb0>
 8019b80:	4620      	mov	r0, r4
 8019b82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019b86:	f7ff bfad 	b.w	8019ae4 <cleanup_glue>
 8019b8a:	5949      	ldr	r1, [r1, r5]
 8019b8c:	b941      	cbnz	r1, 8019ba0 <_reclaim_reent+0xa0>
 8019b8e:	3504      	adds	r5, #4
 8019b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019b92:	2d80      	cmp	r5, #128	; 0x80
 8019b94:	68d9      	ldr	r1, [r3, #12]
 8019b96:	d1f8      	bne.n	8019b8a <_reclaim_reent+0x8a>
 8019b98:	4620      	mov	r0, r4
 8019b9a:	f000 f9b5 	bl	8019f08 <_free_r>
 8019b9e:	e7ba      	b.n	8019b16 <_reclaim_reent+0x16>
 8019ba0:	680e      	ldr	r6, [r1, #0]
 8019ba2:	4620      	mov	r0, r4
 8019ba4:	f000 f9b0 	bl	8019f08 <_free_r>
 8019ba8:	4631      	mov	r1, r6
 8019baa:	e7ef      	b.n	8019b8c <_reclaim_reent+0x8c>
 8019bac:	2500      	movs	r5, #0
 8019bae:	e7ef      	b.n	8019b90 <_reclaim_reent+0x90>
 8019bb0:	bd70      	pop	{r4, r5, r6, pc}
 8019bb2:	bf00      	nop
 8019bb4:	2400003c 	.word	0x2400003c

08019bb8 <_sbrk_r>:
 8019bb8:	b538      	push	{r3, r4, r5, lr}
 8019bba:	4d06      	ldr	r5, [pc, #24]	; (8019bd4 <_sbrk_r+0x1c>)
 8019bbc:	2300      	movs	r3, #0
 8019bbe:	4604      	mov	r4, r0
 8019bc0:	4608      	mov	r0, r1
 8019bc2:	602b      	str	r3, [r5, #0]
 8019bc4:	f7e8 f848 	bl	8001c58 <_sbrk>
 8019bc8:	1c43      	adds	r3, r0, #1
 8019bca:	d102      	bne.n	8019bd2 <_sbrk_r+0x1a>
 8019bcc:	682b      	ldr	r3, [r5, #0]
 8019bce:	b103      	cbz	r3, 8019bd2 <_sbrk_r+0x1a>
 8019bd0:	6023      	str	r3, [r4, #0]
 8019bd2:	bd38      	pop	{r3, r4, r5, pc}
 8019bd4:	24007880 	.word	0x24007880

08019bd8 <__sread>:
 8019bd8:	b510      	push	{r4, lr}
 8019bda:	460c      	mov	r4, r1
 8019bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019be0:	f000 fcd0 	bl	801a584 <_read_r>
 8019be4:	2800      	cmp	r0, #0
 8019be6:	bfab      	itete	ge
 8019be8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019bea:	89a3      	ldrhlt	r3, [r4, #12]
 8019bec:	181b      	addge	r3, r3, r0
 8019bee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019bf2:	bfac      	ite	ge
 8019bf4:	6563      	strge	r3, [r4, #84]	; 0x54
 8019bf6:	81a3      	strhlt	r3, [r4, #12]
 8019bf8:	bd10      	pop	{r4, pc}

08019bfa <__swrite>:
 8019bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019bfe:	461f      	mov	r7, r3
 8019c00:	898b      	ldrh	r3, [r1, #12]
 8019c02:	05db      	lsls	r3, r3, #23
 8019c04:	4605      	mov	r5, r0
 8019c06:	460c      	mov	r4, r1
 8019c08:	4616      	mov	r6, r2
 8019c0a:	d505      	bpl.n	8019c18 <__swrite+0x1e>
 8019c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c10:	2302      	movs	r3, #2
 8019c12:	2200      	movs	r2, #0
 8019c14:	f000 f952 	bl	8019ebc <_lseek_r>
 8019c18:	89a3      	ldrh	r3, [r4, #12]
 8019c1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019c1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019c22:	81a3      	strh	r3, [r4, #12]
 8019c24:	4632      	mov	r2, r6
 8019c26:	463b      	mov	r3, r7
 8019c28:	4628      	mov	r0, r5
 8019c2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019c2e:	f000 b831 	b.w	8019c94 <_write_r>

08019c32 <__sseek>:
 8019c32:	b510      	push	{r4, lr}
 8019c34:	460c      	mov	r4, r1
 8019c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c3a:	f000 f93f 	bl	8019ebc <_lseek_r>
 8019c3e:	1c43      	adds	r3, r0, #1
 8019c40:	89a3      	ldrh	r3, [r4, #12]
 8019c42:	bf15      	itete	ne
 8019c44:	6560      	strne	r0, [r4, #84]	; 0x54
 8019c46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019c4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019c4e:	81a3      	strheq	r3, [r4, #12]
 8019c50:	bf18      	it	ne
 8019c52:	81a3      	strhne	r3, [r4, #12]
 8019c54:	bd10      	pop	{r4, pc}

08019c56 <__sclose>:
 8019c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c5a:	f000 b84b 	b.w	8019cf4 <_close_r>

08019c5e <strcpy>:
 8019c5e:	4603      	mov	r3, r0
 8019c60:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019c64:	f803 2b01 	strb.w	r2, [r3], #1
 8019c68:	2a00      	cmp	r2, #0
 8019c6a:	d1f9      	bne.n	8019c60 <strcpy+0x2>
 8019c6c:	4770      	bx	lr

08019c6e <strncpy>:
 8019c6e:	b510      	push	{r4, lr}
 8019c70:	3901      	subs	r1, #1
 8019c72:	4603      	mov	r3, r0
 8019c74:	b132      	cbz	r2, 8019c84 <strncpy+0x16>
 8019c76:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019c7a:	f803 4b01 	strb.w	r4, [r3], #1
 8019c7e:	3a01      	subs	r2, #1
 8019c80:	2c00      	cmp	r4, #0
 8019c82:	d1f7      	bne.n	8019c74 <strncpy+0x6>
 8019c84:	441a      	add	r2, r3
 8019c86:	2100      	movs	r1, #0
 8019c88:	4293      	cmp	r3, r2
 8019c8a:	d100      	bne.n	8019c8e <strncpy+0x20>
 8019c8c:	bd10      	pop	{r4, pc}
 8019c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8019c92:	e7f9      	b.n	8019c88 <strncpy+0x1a>

08019c94 <_write_r>:
 8019c94:	b538      	push	{r3, r4, r5, lr}
 8019c96:	4d07      	ldr	r5, [pc, #28]	; (8019cb4 <_write_r+0x20>)
 8019c98:	4604      	mov	r4, r0
 8019c9a:	4608      	mov	r0, r1
 8019c9c:	4611      	mov	r1, r2
 8019c9e:	2200      	movs	r2, #0
 8019ca0:	602a      	str	r2, [r5, #0]
 8019ca2:	461a      	mov	r2, r3
 8019ca4:	f7e7 ff87 	bl	8001bb6 <_write>
 8019ca8:	1c43      	adds	r3, r0, #1
 8019caa:	d102      	bne.n	8019cb2 <_write_r+0x1e>
 8019cac:	682b      	ldr	r3, [r5, #0]
 8019cae:	b103      	cbz	r3, 8019cb2 <_write_r+0x1e>
 8019cb0:	6023      	str	r3, [r4, #0]
 8019cb2:	bd38      	pop	{r3, r4, r5, pc}
 8019cb4:	24007880 	.word	0x24007880

08019cb8 <__assert_func>:
 8019cb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019cba:	4614      	mov	r4, r2
 8019cbc:	461a      	mov	r2, r3
 8019cbe:	4b09      	ldr	r3, [pc, #36]	; (8019ce4 <__assert_func+0x2c>)
 8019cc0:	681b      	ldr	r3, [r3, #0]
 8019cc2:	4605      	mov	r5, r0
 8019cc4:	68d8      	ldr	r0, [r3, #12]
 8019cc6:	b14c      	cbz	r4, 8019cdc <__assert_func+0x24>
 8019cc8:	4b07      	ldr	r3, [pc, #28]	; (8019ce8 <__assert_func+0x30>)
 8019cca:	9100      	str	r1, [sp, #0]
 8019ccc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019cd0:	4906      	ldr	r1, [pc, #24]	; (8019cec <__assert_func+0x34>)
 8019cd2:	462b      	mov	r3, r5
 8019cd4:	f000 f8e0 	bl	8019e98 <fiprintf>
 8019cd8:	f000 fd26 	bl	801a728 <abort>
 8019cdc:	4b04      	ldr	r3, [pc, #16]	; (8019cf0 <__assert_func+0x38>)
 8019cde:	461c      	mov	r4, r3
 8019ce0:	e7f3      	b.n	8019cca <__assert_func+0x12>
 8019ce2:	bf00      	nop
 8019ce4:	2400003c 	.word	0x2400003c
 8019ce8:	0801dfb6 	.word	0x0801dfb6
 8019cec:	0801dfc3 	.word	0x0801dfc3
 8019cf0:	0801dff1 	.word	0x0801dff1

08019cf4 <_close_r>:
 8019cf4:	b538      	push	{r3, r4, r5, lr}
 8019cf6:	4d06      	ldr	r5, [pc, #24]	; (8019d10 <_close_r+0x1c>)
 8019cf8:	2300      	movs	r3, #0
 8019cfa:	4604      	mov	r4, r0
 8019cfc:	4608      	mov	r0, r1
 8019cfe:	602b      	str	r3, [r5, #0]
 8019d00:	f7e7 ff75 	bl	8001bee <_close>
 8019d04:	1c43      	adds	r3, r0, #1
 8019d06:	d102      	bne.n	8019d0e <_close_r+0x1a>
 8019d08:	682b      	ldr	r3, [r5, #0]
 8019d0a:	b103      	cbz	r3, 8019d0e <_close_r+0x1a>
 8019d0c:	6023      	str	r3, [r4, #0]
 8019d0e:	bd38      	pop	{r3, r4, r5, pc}
 8019d10:	24007880 	.word	0x24007880

08019d14 <__sflush_r>:
 8019d14:	898a      	ldrh	r2, [r1, #12]
 8019d16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d1a:	4605      	mov	r5, r0
 8019d1c:	0710      	lsls	r0, r2, #28
 8019d1e:	460c      	mov	r4, r1
 8019d20:	d458      	bmi.n	8019dd4 <__sflush_r+0xc0>
 8019d22:	684b      	ldr	r3, [r1, #4]
 8019d24:	2b00      	cmp	r3, #0
 8019d26:	dc05      	bgt.n	8019d34 <__sflush_r+0x20>
 8019d28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019d2a:	2b00      	cmp	r3, #0
 8019d2c:	dc02      	bgt.n	8019d34 <__sflush_r+0x20>
 8019d2e:	2000      	movs	r0, #0
 8019d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019d36:	2e00      	cmp	r6, #0
 8019d38:	d0f9      	beq.n	8019d2e <__sflush_r+0x1a>
 8019d3a:	2300      	movs	r3, #0
 8019d3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019d40:	682f      	ldr	r7, [r5, #0]
 8019d42:	602b      	str	r3, [r5, #0]
 8019d44:	d032      	beq.n	8019dac <__sflush_r+0x98>
 8019d46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019d48:	89a3      	ldrh	r3, [r4, #12]
 8019d4a:	075a      	lsls	r2, r3, #29
 8019d4c:	d505      	bpl.n	8019d5a <__sflush_r+0x46>
 8019d4e:	6863      	ldr	r3, [r4, #4]
 8019d50:	1ac0      	subs	r0, r0, r3
 8019d52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019d54:	b10b      	cbz	r3, 8019d5a <__sflush_r+0x46>
 8019d56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019d58:	1ac0      	subs	r0, r0, r3
 8019d5a:	2300      	movs	r3, #0
 8019d5c:	4602      	mov	r2, r0
 8019d5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019d60:	6a21      	ldr	r1, [r4, #32]
 8019d62:	4628      	mov	r0, r5
 8019d64:	47b0      	blx	r6
 8019d66:	1c43      	adds	r3, r0, #1
 8019d68:	89a3      	ldrh	r3, [r4, #12]
 8019d6a:	d106      	bne.n	8019d7a <__sflush_r+0x66>
 8019d6c:	6829      	ldr	r1, [r5, #0]
 8019d6e:	291d      	cmp	r1, #29
 8019d70:	d82c      	bhi.n	8019dcc <__sflush_r+0xb8>
 8019d72:	4a2a      	ldr	r2, [pc, #168]	; (8019e1c <__sflush_r+0x108>)
 8019d74:	40ca      	lsrs	r2, r1
 8019d76:	07d6      	lsls	r6, r2, #31
 8019d78:	d528      	bpl.n	8019dcc <__sflush_r+0xb8>
 8019d7a:	2200      	movs	r2, #0
 8019d7c:	6062      	str	r2, [r4, #4]
 8019d7e:	04d9      	lsls	r1, r3, #19
 8019d80:	6922      	ldr	r2, [r4, #16]
 8019d82:	6022      	str	r2, [r4, #0]
 8019d84:	d504      	bpl.n	8019d90 <__sflush_r+0x7c>
 8019d86:	1c42      	adds	r2, r0, #1
 8019d88:	d101      	bne.n	8019d8e <__sflush_r+0x7a>
 8019d8a:	682b      	ldr	r3, [r5, #0]
 8019d8c:	b903      	cbnz	r3, 8019d90 <__sflush_r+0x7c>
 8019d8e:	6560      	str	r0, [r4, #84]	; 0x54
 8019d90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019d92:	602f      	str	r7, [r5, #0]
 8019d94:	2900      	cmp	r1, #0
 8019d96:	d0ca      	beq.n	8019d2e <__sflush_r+0x1a>
 8019d98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019d9c:	4299      	cmp	r1, r3
 8019d9e:	d002      	beq.n	8019da6 <__sflush_r+0x92>
 8019da0:	4628      	mov	r0, r5
 8019da2:	f000 f8b1 	bl	8019f08 <_free_r>
 8019da6:	2000      	movs	r0, #0
 8019da8:	6360      	str	r0, [r4, #52]	; 0x34
 8019daa:	e7c1      	b.n	8019d30 <__sflush_r+0x1c>
 8019dac:	6a21      	ldr	r1, [r4, #32]
 8019dae:	2301      	movs	r3, #1
 8019db0:	4628      	mov	r0, r5
 8019db2:	47b0      	blx	r6
 8019db4:	1c41      	adds	r1, r0, #1
 8019db6:	d1c7      	bne.n	8019d48 <__sflush_r+0x34>
 8019db8:	682b      	ldr	r3, [r5, #0]
 8019dba:	2b00      	cmp	r3, #0
 8019dbc:	d0c4      	beq.n	8019d48 <__sflush_r+0x34>
 8019dbe:	2b1d      	cmp	r3, #29
 8019dc0:	d001      	beq.n	8019dc6 <__sflush_r+0xb2>
 8019dc2:	2b16      	cmp	r3, #22
 8019dc4:	d101      	bne.n	8019dca <__sflush_r+0xb6>
 8019dc6:	602f      	str	r7, [r5, #0]
 8019dc8:	e7b1      	b.n	8019d2e <__sflush_r+0x1a>
 8019dca:	89a3      	ldrh	r3, [r4, #12]
 8019dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019dd0:	81a3      	strh	r3, [r4, #12]
 8019dd2:	e7ad      	b.n	8019d30 <__sflush_r+0x1c>
 8019dd4:	690f      	ldr	r7, [r1, #16]
 8019dd6:	2f00      	cmp	r7, #0
 8019dd8:	d0a9      	beq.n	8019d2e <__sflush_r+0x1a>
 8019dda:	0793      	lsls	r3, r2, #30
 8019ddc:	680e      	ldr	r6, [r1, #0]
 8019dde:	bf08      	it	eq
 8019de0:	694b      	ldreq	r3, [r1, #20]
 8019de2:	600f      	str	r7, [r1, #0]
 8019de4:	bf18      	it	ne
 8019de6:	2300      	movne	r3, #0
 8019de8:	eba6 0807 	sub.w	r8, r6, r7
 8019dec:	608b      	str	r3, [r1, #8]
 8019dee:	f1b8 0f00 	cmp.w	r8, #0
 8019df2:	dd9c      	ble.n	8019d2e <__sflush_r+0x1a>
 8019df4:	6a21      	ldr	r1, [r4, #32]
 8019df6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019df8:	4643      	mov	r3, r8
 8019dfa:	463a      	mov	r2, r7
 8019dfc:	4628      	mov	r0, r5
 8019dfe:	47b0      	blx	r6
 8019e00:	2800      	cmp	r0, #0
 8019e02:	dc06      	bgt.n	8019e12 <__sflush_r+0xfe>
 8019e04:	89a3      	ldrh	r3, [r4, #12]
 8019e06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019e0a:	81a3      	strh	r3, [r4, #12]
 8019e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8019e10:	e78e      	b.n	8019d30 <__sflush_r+0x1c>
 8019e12:	4407      	add	r7, r0
 8019e14:	eba8 0800 	sub.w	r8, r8, r0
 8019e18:	e7e9      	b.n	8019dee <__sflush_r+0xda>
 8019e1a:	bf00      	nop
 8019e1c:	20400001 	.word	0x20400001

08019e20 <_fflush_r>:
 8019e20:	b538      	push	{r3, r4, r5, lr}
 8019e22:	690b      	ldr	r3, [r1, #16]
 8019e24:	4605      	mov	r5, r0
 8019e26:	460c      	mov	r4, r1
 8019e28:	b913      	cbnz	r3, 8019e30 <_fflush_r+0x10>
 8019e2a:	2500      	movs	r5, #0
 8019e2c:	4628      	mov	r0, r5
 8019e2e:	bd38      	pop	{r3, r4, r5, pc}
 8019e30:	b118      	cbz	r0, 8019e3a <_fflush_r+0x1a>
 8019e32:	6983      	ldr	r3, [r0, #24]
 8019e34:	b90b      	cbnz	r3, 8019e3a <_fflush_r+0x1a>
 8019e36:	f7ff fcb9 	bl	80197ac <__sinit>
 8019e3a:	4b14      	ldr	r3, [pc, #80]	; (8019e8c <_fflush_r+0x6c>)
 8019e3c:	429c      	cmp	r4, r3
 8019e3e:	d11b      	bne.n	8019e78 <_fflush_r+0x58>
 8019e40:	686c      	ldr	r4, [r5, #4]
 8019e42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019e46:	2b00      	cmp	r3, #0
 8019e48:	d0ef      	beq.n	8019e2a <_fflush_r+0xa>
 8019e4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019e4c:	07d0      	lsls	r0, r2, #31
 8019e4e:	d404      	bmi.n	8019e5a <_fflush_r+0x3a>
 8019e50:	0599      	lsls	r1, r3, #22
 8019e52:	d402      	bmi.n	8019e5a <_fflush_r+0x3a>
 8019e54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019e56:	f7ff fd6c 	bl	8019932 <__retarget_lock_acquire_recursive>
 8019e5a:	4628      	mov	r0, r5
 8019e5c:	4621      	mov	r1, r4
 8019e5e:	f7ff ff59 	bl	8019d14 <__sflush_r>
 8019e62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019e64:	07da      	lsls	r2, r3, #31
 8019e66:	4605      	mov	r5, r0
 8019e68:	d4e0      	bmi.n	8019e2c <_fflush_r+0xc>
 8019e6a:	89a3      	ldrh	r3, [r4, #12]
 8019e6c:	059b      	lsls	r3, r3, #22
 8019e6e:	d4dd      	bmi.n	8019e2c <_fflush_r+0xc>
 8019e70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019e72:	f7ff fd5f 	bl	8019934 <__retarget_lock_release_recursive>
 8019e76:	e7d9      	b.n	8019e2c <_fflush_r+0xc>
 8019e78:	4b05      	ldr	r3, [pc, #20]	; (8019e90 <_fflush_r+0x70>)
 8019e7a:	429c      	cmp	r4, r3
 8019e7c:	d101      	bne.n	8019e82 <_fflush_r+0x62>
 8019e7e:	68ac      	ldr	r4, [r5, #8]
 8019e80:	e7df      	b.n	8019e42 <_fflush_r+0x22>
 8019e82:	4b04      	ldr	r3, [pc, #16]	; (8019e94 <_fflush_r+0x74>)
 8019e84:	429c      	cmp	r4, r3
 8019e86:	bf08      	it	eq
 8019e88:	68ec      	ldreq	r4, [r5, #12]
 8019e8a:	e7da      	b.n	8019e42 <_fflush_r+0x22>
 8019e8c:	0801defc 	.word	0x0801defc
 8019e90:	0801df1c 	.word	0x0801df1c
 8019e94:	0801dedc 	.word	0x0801dedc

08019e98 <fiprintf>:
 8019e98:	b40e      	push	{r1, r2, r3}
 8019e9a:	b503      	push	{r0, r1, lr}
 8019e9c:	4601      	mov	r1, r0
 8019e9e:	ab03      	add	r3, sp, #12
 8019ea0:	4805      	ldr	r0, [pc, #20]	; (8019eb8 <fiprintf+0x20>)
 8019ea2:	f853 2b04 	ldr.w	r2, [r3], #4
 8019ea6:	6800      	ldr	r0, [r0, #0]
 8019ea8:	9301      	str	r3, [sp, #4]
 8019eaa:	f000 f8a7 	bl	8019ffc <_vfiprintf_r>
 8019eae:	b002      	add	sp, #8
 8019eb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8019eb4:	b003      	add	sp, #12
 8019eb6:	4770      	bx	lr
 8019eb8:	2400003c 	.word	0x2400003c

08019ebc <_lseek_r>:
 8019ebc:	b538      	push	{r3, r4, r5, lr}
 8019ebe:	4d07      	ldr	r5, [pc, #28]	; (8019edc <_lseek_r+0x20>)
 8019ec0:	4604      	mov	r4, r0
 8019ec2:	4608      	mov	r0, r1
 8019ec4:	4611      	mov	r1, r2
 8019ec6:	2200      	movs	r2, #0
 8019ec8:	602a      	str	r2, [r5, #0]
 8019eca:	461a      	mov	r2, r3
 8019ecc:	f7e7 feb6 	bl	8001c3c <_lseek>
 8019ed0:	1c43      	adds	r3, r0, #1
 8019ed2:	d102      	bne.n	8019eda <_lseek_r+0x1e>
 8019ed4:	682b      	ldr	r3, [r5, #0]
 8019ed6:	b103      	cbz	r3, 8019eda <_lseek_r+0x1e>
 8019ed8:	6023      	str	r3, [r4, #0]
 8019eda:	bd38      	pop	{r3, r4, r5, pc}
 8019edc:	24007880 	.word	0x24007880

08019ee0 <malloc>:
 8019ee0:	4b02      	ldr	r3, [pc, #8]	; (8019eec <malloc+0xc>)
 8019ee2:	4601      	mov	r1, r0
 8019ee4:	6818      	ldr	r0, [r3, #0]
 8019ee6:	f7ff bd4b 	b.w	8019980 <_malloc_r>
 8019eea:	bf00      	nop
 8019eec:	2400003c 	.word	0x2400003c

08019ef0 <__malloc_lock>:
 8019ef0:	4801      	ldr	r0, [pc, #4]	; (8019ef8 <__malloc_lock+0x8>)
 8019ef2:	f7ff bd1e 	b.w	8019932 <__retarget_lock_acquire_recursive>
 8019ef6:	bf00      	nop
 8019ef8:	2400788c 	.word	0x2400788c

08019efc <__malloc_unlock>:
 8019efc:	4801      	ldr	r0, [pc, #4]	; (8019f04 <__malloc_unlock+0x8>)
 8019efe:	f7ff bd19 	b.w	8019934 <__retarget_lock_release_recursive>
 8019f02:	bf00      	nop
 8019f04:	2400788c 	.word	0x2400788c

08019f08 <_free_r>:
 8019f08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019f0a:	2900      	cmp	r1, #0
 8019f0c:	d048      	beq.n	8019fa0 <_free_r+0x98>
 8019f0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019f12:	9001      	str	r0, [sp, #4]
 8019f14:	2b00      	cmp	r3, #0
 8019f16:	f1a1 0404 	sub.w	r4, r1, #4
 8019f1a:	bfb8      	it	lt
 8019f1c:	18e4      	addlt	r4, r4, r3
 8019f1e:	f7ff ffe7 	bl	8019ef0 <__malloc_lock>
 8019f22:	4a20      	ldr	r2, [pc, #128]	; (8019fa4 <_free_r+0x9c>)
 8019f24:	9801      	ldr	r0, [sp, #4]
 8019f26:	6813      	ldr	r3, [r2, #0]
 8019f28:	4615      	mov	r5, r2
 8019f2a:	b933      	cbnz	r3, 8019f3a <_free_r+0x32>
 8019f2c:	6063      	str	r3, [r4, #4]
 8019f2e:	6014      	str	r4, [r2, #0]
 8019f30:	b003      	add	sp, #12
 8019f32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019f36:	f7ff bfe1 	b.w	8019efc <__malloc_unlock>
 8019f3a:	42a3      	cmp	r3, r4
 8019f3c:	d90b      	bls.n	8019f56 <_free_r+0x4e>
 8019f3e:	6821      	ldr	r1, [r4, #0]
 8019f40:	1862      	adds	r2, r4, r1
 8019f42:	4293      	cmp	r3, r2
 8019f44:	bf04      	itt	eq
 8019f46:	681a      	ldreq	r2, [r3, #0]
 8019f48:	685b      	ldreq	r3, [r3, #4]
 8019f4a:	6063      	str	r3, [r4, #4]
 8019f4c:	bf04      	itt	eq
 8019f4e:	1852      	addeq	r2, r2, r1
 8019f50:	6022      	streq	r2, [r4, #0]
 8019f52:	602c      	str	r4, [r5, #0]
 8019f54:	e7ec      	b.n	8019f30 <_free_r+0x28>
 8019f56:	461a      	mov	r2, r3
 8019f58:	685b      	ldr	r3, [r3, #4]
 8019f5a:	b10b      	cbz	r3, 8019f60 <_free_r+0x58>
 8019f5c:	42a3      	cmp	r3, r4
 8019f5e:	d9fa      	bls.n	8019f56 <_free_r+0x4e>
 8019f60:	6811      	ldr	r1, [r2, #0]
 8019f62:	1855      	adds	r5, r2, r1
 8019f64:	42a5      	cmp	r5, r4
 8019f66:	d10b      	bne.n	8019f80 <_free_r+0x78>
 8019f68:	6824      	ldr	r4, [r4, #0]
 8019f6a:	4421      	add	r1, r4
 8019f6c:	1854      	adds	r4, r2, r1
 8019f6e:	42a3      	cmp	r3, r4
 8019f70:	6011      	str	r1, [r2, #0]
 8019f72:	d1dd      	bne.n	8019f30 <_free_r+0x28>
 8019f74:	681c      	ldr	r4, [r3, #0]
 8019f76:	685b      	ldr	r3, [r3, #4]
 8019f78:	6053      	str	r3, [r2, #4]
 8019f7a:	4421      	add	r1, r4
 8019f7c:	6011      	str	r1, [r2, #0]
 8019f7e:	e7d7      	b.n	8019f30 <_free_r+0x28>
 8019f80:	d902      	bls.n	8019f88 <_free_r+0x80>
 8019f82:	230c      	movs	r3, #12
 8019f84:	6003      	str	r3, [r0, #0]
 8019f86:	e7d3      	b.n	8019f30 <_free_r+0x28>
 8019f88:	6825      	ldr	r5, [r4, #0]
 8019f8a:	1961      	adds	r1, r4, r5
 8019f8c:	428b      	cmp	r3, r1
 8019f8e:	bf04      	itt	eq
 8019f90:	6819      	ldreq	r1, [r3, #0]
 8019f92:	685b      	ldreq	r3, [r3, #4]
 8019f94:	6063      	str	r3, [r4, #4]
 8019f96:	bf04      	itt	eq
 8019f98:	1949      	addeq	r1, r1, r5
 8019f9a:	6021      	streq	r1, [r4, #0]
 8019f9c:	6054      	str	r4, [r2, #4]
 8019f9e:	e7c7      	b.n	8019f30 <_free_r+0x28>
 8019fa0:	b003      	add	sp, #12
 8019fa2:	bd30      	pop	{r4, r5, pc}
 8019fa4:	24004270 	.word	0x24004270

08019fa8 <__sfputc_r>:
 8019fa8:	6893      	ldr	r3, [r2, #8]
 8019faa:	3b01      	subs	r3, #1
 8019fac:	2b00      	cmp	r3, #0
 8019fae:	b410      	push	{r4}
 8019fb0:	6093      	str	r3, [r2, #8]
 8019fb2:	da08      	bge.n	8019fc6 <__sfputc_r+0x1e>
 8019fb4:	6994      	ldr	r4, [r2, #24]
 8019fb6:	42a3      	cmp	r3, r4
 8019fb8:	db01      	blt.n	8019fbe <__sfputc_r+0x16>
 8019fba:	290a      	cmp	r1, #10
 8019fbc:	d103      	bne.n	8019fc6 <__sfputc_r+0x1e>
 8019fbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019fc2:	f000 baf1 	b.w	801a5a8 <__swbuf_r>
 8019fc6:	6813      	ldr	r3, [r2, #0]
 8019fc8:	1c58      	adds	r0, r3, #1
 8019fca:	6010      	str	r0, [r2, #0]
 8019fcc:	7019      	strb	r1, [r3, #0]
 8019fce:	4608      	mov	r0, r1
 8019fd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019fd4:	4770      	bx	lr

08019fd6 <__sfputs_r>:
 8019fd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019fd8:	4606      	mov	r6, r0
 8019fda:	460f      	mov	r7, r1
 8019fdc:	4614      	mov	r4, r2
 8019fde:	18d5      	adds	r5, r2, r3
 8019fe0:	42ac      	cmp	r4, r5
 8019fe2:	d101      	bne.n	8019fe8 <__sfputs_r+0x12>
 8019fe4:	2000      	movs	r0, #0
 8019fe6:	e007      	b.n	8019ff8 <__sfputs_r+0x22>
 8019fe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019fec:	463a      	mov	r2, r7
 8019fee:	4630      	mov	r0, r6
 8019ff0:	f7ff ffda 	bl	8019fa8 <__sfputc_r>
 8019ff4:	1c43      	adds	r3, r0, #1
 8019ff6:	d1f3      	bne.n	8019fe0 <__sfputs_r+0xa>
 8019ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019ffc <_vfiprintf_r>:
 8019ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a000:	460d      	mov	r5, r1
 801a002:	b09d      	sub	sp, #116	; 0x74
 801a004:	4614      	mov	r4, r2
 801a006:	4698      	mov	r8, r3
 801a008:	4606      	mov	r6, r0
 801a00a:	b118      	cbz	r0, 801a014 <_vfiprintf_r+0x18>
 801a00c:	6983      	ldr	r3, [r0, #24]
 801a00e:	b90b      	cbnz	r3, 801a014 <_vfiprintf_r+0x18>
 801a010:	f7ff fbcc 	bl	80197ac <__sinit>
 801a014:	4b89      	ldr	r3, [pc, #548]	; (801a23c <_vfiprintf_r+0x240>)
 801a016:	429d      	cmp	r5, r3
 801a018:	d11b      	bne.n	801a052 <_vfiprintf_r+0x56>
 801a01a:	6875      	ldr	r5, [r6, #4]
 801a01c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a01e:	07d9      	lsls	r1, r3, #31
 801a020:	d405      	bmi.n	801a02e <_vfiprintf_r+0x32>
 801a022:	89ab      	ldrh	r3, [r5, #12]
 801a024:	059a      	lsls	r2, r3, #22
 801a026:	d402      	bmi.n	801a02e <_vfiprintf_r+0x32>
 801a028:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a02a:	f7ff fc82 	bl	8019932 <__retarget_lock_acquire_recursive>
 801a02e:	89ab      	ldrh	r3, [r5, #12]
 801a030:	071b      	lsls	r3, r3, #28
 801a032:	d501      	bpl.n	801a038 <_vfiprintf_r+0x3c>
 801a034:	692b      	ldr	r3, [r5, #16]
 801a036:	b9eb      	cbnz	r3, 801a074 <_vfiprintf_r+0x78>
 801a038:	4629      	mov	r1, r5
 801a03a:	4630      	mov	r0, r6
 801a03c:	f000 fb06 	bl	801a64c <__swsetup_r>
 801a040:	b1c0      	cbz	r0, 801a074 <_vfiprintf_r+0x78>
 801a042:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a044:	07dc      	lsls	r4, r3, #31
 801a046:	d50e      	bpl.n	801a066 <_vfiprintf_r+0x6a>
 801a048:	f04f 30ff 	mov.w	r0, #4294967295
 801a04c:	b01d      	add	sp, #116	; 0x74
 801a04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a052:	4b7b      	ldr	r3, [pc, #492]	; (801a240 <_vfiprintf_r+0x244>)
 801a054:	429d      	cmp	r5, r3
 801a056:	d101      	bne.n	801a05c <_vfiprintf_r+0x60>
 801a058:	68b5      	ldr	r5, [r6, #8]
 801a05a:	e7df      	b.n	801a01c <_vfiprintf_r+0x20>
 801a05c:	4b79      	ldr	r3, [pc, #484]	; (801a244 <_vfiprintf_r+0x248>)
 801a05e:	429d      	cmp	r5, r3
 801a060:	bf08      	it	eq
 801a062:	68f5      	ldreq	r5, [r6, #12]
 801a064:	e7da      	b.n	801a01c <_vfiprintf_r+0x20>
 801a066:	89ab      	ldrh	r3, [r5, #12]
 801a068:	0598      	lsls	r0, r3, #22
 801a06a:	d4ed      	bmi.n	801a048 <_vfiprintf_r+0x4c>
 801a06c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a06e:	f7ff fc61 	bl	8019934 <__retarget_lock_release_recursive>
 801a072:	e7e9      	b.n	801a048 <_vfiprintf_r+0x4c>
 801a074:	2300      	movs	r3, #0
 801a076:	9309      	str	r3, [sp, #36]	; 0x24
 801a078:	2320      	movs	r3, #32
 801a07a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a07e:	f8cd 800c 	str.w	r8, [sp, #12]
 801a082:	2330      	movs	r3, #48	; 0x30
 801a084:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a248 <_vfiprintf_r+0x24c>
 801a088:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a08c:	f04f 0901 	mov.w	r9, #1
 801a090:	4623      	mov	r3, r4
 801a092:	469a      	mov	sl, r3
 801a094:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a098:	b10a      	cbz	r2, 801a09e <_vfiprintf_r+0xa2>
 801a09a:	2a25      	cmp	r2, #37	; 0x25
 801a09c:	d1f9      	bne.n	801a092 <_vfiprintf_r+0x96>
 801a09e:	ebba 0b04 	subs.w	fp, sl, r4
 801a0a2:	d00b      	beq.n	801a0bc <_vfiprintf_r+0xc0>
 801a0a4:	465b      	mov	r3, fp
 801a0a6:	4622      	mov	r2, r4
 801a0a8:	4629      	mov	r1, r5
 801a0aa:	4630      	mov	r0, r6
 801a0ac:	f7ff ff93 	bl	8019fd6 <__sfputs_r>
 801a0b0:	3001      	adds	r0, #1
 801a0b2:	f000 80aa 	beq.w	801a20a <_vfiprintf_r+0x20e>
 801a0b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a0b8:	445a      	add	r2, fp
 801a0ba:	9209      	str	r2, [sp, #36]	; 0x24
 801a0bc:	f89a 3000 	ldrb.w	r3, [sl]
 801a0c0:	2b00      	cmp	r3, #0
 801a0c2:	f000 80a2 	beq.w	801a20a <_vfiprintf_r+0x20e>
 801a0c6:	2300      	movs	r3, #0
 801a0c8:	f04f 32ff 	mov.w	r2, #4294967295
 801a0cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a0d0:	f10a 0a01 	add.w	sl, sl, #1
 801a0d4:	9304      	str	r3, [sp, #16]
 801a0d6:	9307      	str	r3, [sp, #28]
 801a0d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a0dc:	931a      	str	r3, [sp, #104]	; 0x68
 801a0de:	4654      	mov	r4, sl
 801a0e0:	2205      	movs	r2, #5
 801a0e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a0e6:	4858      	ldr	r0, [pc, #352]	; (801a248 <_vfiprintf_r+0x24c>)
 801a0e8:	f7e6 f91a 	bl	8000320 <memchr>
 801a0ec:	9a04      	ldr	r2, [sp, #16]
 801a0ee:	b9d8      	cbnz	r0, 801a128 <_vfiprintf_r+0x12c>
 801a0f0:	06d1      	lsls	r1, r2, #27
 801a0f2:	bf44      	itt	mi
 801a0f4:	2320      	movmi	r3, #32
 801a0f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a0fa:	0713      	lsls	r3, r2, #28
 801a0fc:	bf44      	itt	mi
 801a0fe:	232b      	movmi	r3, #43	; 0x2b
 801a100:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a104:	f89a 3000 	ldrb.w	r3, [sl]
 801a108:	2b2a      	cmp	r3, #42	; 0x2a
 801a10a:	d015      	beq.n	801a138 <_vfiprintf_r+0x13c>
 801a10c:	9a07      	ldr	r2, [sp, #28]
 801a10e:	4654      	mov	r4, sl
 801a110:	2000      	movs	r0, #0
 801a112:	f04f 0c0a 	mov.w	ip, #10
 801a116:	4621      	mov	r1, r4
 801a118:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a11c:	3b30      	subs	r3, #48	; 0x30
 801a11e:	2b09      	cmp	r3, #9
 801a120:	d94e      	bls.n	801a1c0 <_vfiprintf_r+0x1c4>
 801a122:	b1b0      	cbz	r0, 801a152 <_vfiprintf_r+0x156>
 801a124:	9207      	str	r2, [sp, #28]
 801a126:	e014      	b.n	801a152 <_vfiprintf_r+0x156>
 801a128:	eba0 0308 	sub.w	r3, r0, r8
 801a12c:	fa09 f303 	lsl.w	r3, r9, r3
 801a130:	4313      	orrs	r3, r2
 801a132:	9304      	str	r3, [sp, #16]
 801a134:	46a2      	mov	sl, r4
 801a136:	e7d2      	b.n	801a0de <_vfiprintf_r+0xe2>
 801a138:	9b03      	ldr	r3, [sp, #12]
 801a13a:	1d19      	adds	r1, r3, #4
 801a13c:	681b      	ldr	r3, [r3, #0]
 801a13e:	9103      	str	r1, [sp, #12]
 801a140:	2b00      	cmp	r3, #0
 801a142:	bfbb      	ittet	lt
 801a144:	425b      	neglt	r3, r3
 801a146:	f042 0202 	orrlt.w	r2, r2, #2
 801a14a:	9307      	strge	r3, [sp, #28]
 801a14c:	9307      	strlt	r3, [sp, #28]
 801a14e:	bfb8      	it	lt
 801a150:	9204      	strlt	r2, [sp, #16]
 801a152:	7823      	ldrb	r3, [r4, #0]
 801a154:	2b2e      	cmp	r3, #46	; 0x2e
 801a156:	d10c      	bne.n	801a172 <_vfiprintf_r+0x176>
 801a158:	7863      	ldrb	r3, [r4, #1]
 801a15a:	2b2a      	cmp	r3, #42	; 0x2a
 801a15c:	d135      	bne.n	801a1ca <_vfiprintf_r+0x1ce>
 801a15e:	9b03      	ldr	r3, [sp, #12]
 801a160:	1d1a      	adds	r2, r3, #4
 801a162:	681b      	ldr	r3, [r3, #0]
 801a164:	9203      	str	r2, [sp, #12]
 801a166:	2b00      	cmp	r3, #0
 801a168:	bfb8      	it	lt
 801a16a:	f04f 33ff 	movlt.w	r3, #4294967295
 801a16e:	3402      	adds	r4, #2
 801a170:	9305      	str	r3, [sp, #20]
 801a172:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a258 <_vfiprintf_r+0x25c>
 801a176:	7821      	ldrb	r1, [r4, #0]
 801a178:	2203      	movs	r2, #3
 801a17a:	4650      	mov	r0, sl
 801a17c:	f7e6 f8d0 	bl	8000320 <memchr>
 801a180:	b140      	cbz	r0, 801a194 <_vfiprintf_r+0x198>
 801a182:	2340      	movs	r3, #64	; 0x40
 801a184:	eba0 000a 	sub.w	r0, r0, sl
 801a188:	fa03 f000 	lsl.w	r0, r3, r0
 801a18c:	9b04      	ldr	r3, [sp, #16]
 801a18e:	4303      	orrs	r3, r0
 801a190:	3401      	adds	r4, #1
 801a192:	9304      	str	r3, [sp, #16]
 801a194:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a198:	482c      	ldr	r0, [pc, #176]	; (801a24c <_vfiprintf_r+0x250>)
 801a19a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a19e:	2206      	movs	r2, #6
 801a1a0:	f7e6 f8be 	bl	8000320 <memchr>
 801a1a4:	2800      	cmp	r0, #0
 801a1a6:	d03f      	beq.n	801a228 <_vfiprintf_r+0x22c>
 801a1a8:	4b29      	ldr	r3, [pc, #164]	; (801a250 <_vfiprintf_r+0x254>)
 801a1aa:	bb1b      	cbnz	r3, 801a1f4 <_vfiprintf_r+0x1f8>
 801a1ac:	9b03      	ldr	r3, [sp, #12]
 801a1ae:	3307      	adds	r3, #7
 801a1b0:	f023 0307 	bic.w	r3, r3, #7
 801a1b4:	3308      	adds	r3, #8
 801a1b6:	9303      	str	r3, [sp, #12]
 801a1b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a1ba:	443b      	add	r3, r7
 801a1bc:	9309      	str	r3, [sp, #36]	; 0x24
 801a1be:	e767      	b.n	801a090 <_vfiprintf_r+0x94>
 801a1c0:	fb0c 3202 	mla	r2, ip, r2, r3
 801a1c4:	460c      	mov	r4, r1
 801a1c6:	2001      	movs	r0, #1
 801a1c8:	e7a5      	b.n	801a116 <_vfiprintf_r+0x11a>
 801a1ca:	2300      	movs	r3, #0
 801a1cc:	3401      	adds	r4, #1
 801a1ce:	9305      	str	r3, [sp, #20]
 801a1d0:	4619      	mov	r1, r3
 801a1d2:	f04f 0c0a 	mov.w	ip, #10
 801a1d6:	4620      	mov	r0, r4
 801a1d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a1dc:	3a30      	subs	r2, #48	; 0x30
 801a1de:	2a09      	cmp	r2, #9
 801a1e0:	d903      	bls.n	801a1ea <_vfiprintf_r+0x1ee>
 801a1e2:	2b00      	cmp	r3, #0
 801a1e4:	d0c5      	beq.n	801a172 <_vfiprintf_r+0x176>
 801a1e6:	9105      	str	r1, [sp, #20]
 801a1e8:	e7c3      	b.n	801a172 <_vfiprintf_r+0x176>
 801a1ea:	fb0c 2101 	mla	r1, ip, r1, r2
 801a1ee:	4604      	mov	r4, r0
 801a1f0:	2301      	movs	r3, #1
 801a1f2:	e7f0      	b.n	801a1d6 <_vfiprintf_r+0x1da>
 801a1f4:	ab03      	add	r3, sp, #12
 801a1f6:	9300      	str	r3, [sp, #0]
 801a1f8:	462a      	mov	r2, r5
 801a1fa:	4b16      	ldr	r3, [pc, #88]	; (801a254 <_vfiprintf_r+0x258>)
 801a1fc:	a904      	add	r1, sp, #16
 801a1fe:	4630      	mov	r0, r6
 801a200:	f3af 8000 	nop.w
 801a204:	4607      	mov	r7, r0
 801a206:	1c78      	adds	r0, r7, #1
 801a208:	d1d6      	bne.n	801a1b8 <_vfiprintf_r+0x1bc>
 801a20a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a20c:	07d9      	lsls	r1, r3, #31
 801a20e:	d405      	bmi.n	801a21c <_vfiprintf_r+0x220>
 801a210:	89ab      	ldrh	r3, [r5, #12]
 801a212:	059a      	lsls	r2, r3, #22
 801a214:	d402      	bmi.n	801a21c <_vfiprintf_r+0x220>
 801a216:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a218:	f7ff fb8c 	bl	8019934 <__retarget_lock_release_recursive>
 801a21c:	89ab      	ldrh	r3, [r5, #12]
 801a21e:	065b      	lsls	r3, r3, #25
 801a220:	f53f af12 	bmi.w	801a048 <_vfiprintf_r+0x4c>
 801a224:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a226:	e711      	b.n	801a04c <_vfiprintf_r+0x50>
 801a228:	ab03      	add	r3, sp, #12
 801a22a:	9300      	str	r3, [sp, #0]
 801a22c:	462a      	mov	r2, r5
 801a22e:	4b09      	ldr	r3, [pc, #36]	; (801a254 <_vfiprintf_r+0x258>)
 801a230:	a904      	add	r1, sp, #16
 801a232:	4630      	mov	r0, r6
 801a234:	f000 f880 	bl	801a338 <_printf_i>
 801a238:	e7e4      	b.n	801a204 <_vfiprintf_r+0x208>
 801a23a:	bf00      	nop
 801a23c:	0801defc 	.word	0x0801defc
 801a240:	0801df1c 	.word	0x0801df1c
 801a244:	0801dedc 	.word	0x0801dedc
 801a248:	0801dff2 	.word	0x0801dff2
 801a24c:	0801dffc 	.word	0x0801dffc
 801a250:	00000000 	.word	0x00000000
 801a254:	08019fd7 	.word	0x08019fd7
 801a258:	0801dff8 	.word	0x0801dff8

0801a25c <_printf_common>:
 801a25c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a260:	4616      	mov	r6, r2
 801a262:	4699      	mov	r9, r3
 801a264:	688a      	ldr	r2, [r1, #8]
 801a266:	690b      	ldr	r3, [r1, #16]
 801a268:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a26c:	4293      	cmp	r3, r2
 801a26e:	bfb8      	it	lt
 801a270:	4613      	movlt	r3, r2
 801a272:	6033      	str	r3, [r6, #0]
 801a274:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a278:	4607      	mov	r7, r0
 801a27a:	460c      	mov	r4, r1
 801a27c:	b10a      	cbz	r2, 801a282 <_printf_common+0x26>
 801a27e:	3301      	adds	r3, #1
 801a280:	6033      	str	r3, [r6, #0]
 801a282:	6823      	ldr	r3, [r4, #0]
 801a284:	0699      	lsls	r1, r3, #26
 801a286:	bf42      	ittt	mi
 801a288:	6833      	ldrmi	r3, [r6, #0]
 801a28a:	3302      	addmi	r3, #2
 801a28c:	6033      	strmi	r3, [r6, #0]
 801a28e:	6825      	ldr	r5, [r4, #0]
 801a290:	f015 0506 	ands.w	r5, r5, #6
 801a294:	d106      	bne.n	801a2a4 <_printf_common+0x48>
 801a296:	f104 0a19 	add.w	sl, r4, #25
 801a29a:	68e3      	ldr	r3, [r4, #12]
 801a29c:	6832      	ldr	r2, [r6, #0]
 801a29e:	1a9b      	subs	r3, r3, r2
 801a2a0:	42ab      	cmp	r3, r5
 801a2a2:	dc26      	bgt.n	801a2f2 <_printf_common+0x96>
 801a2a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a2a8:	1e13      	subs	r3, r2, #0
 801a2aa:	6822      	ldr	r2, [r4, #0]
 801a2ac:	bf18      	it	ne
 801a2ae:	2301      	movne	r3, #1
 801a2b0:	0692      	lsls	r2, r2, #26
 801a2b2:	d42b      	bmi.n	801a30c <_printf_common+0xb0>
 801a2b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a2b8:	4649      	mov	r1, r9
 801a2ba:	4638      	mov	r0, r7
 801a2bc:	47c0      	blx	r8
 801a2be:	3001      	adds	r0, #1
 801a2c0:	d01e      	beq.n	801a300 <_printf_common+0xa4>
 801a2c2:	6823      	ldr	r3, [r4, #0]
 801a2c4:	68e5      	ldr	r5, [r4, #12]
 801a2c6:	6832      	ldr	r2, [r6, #0]
 801a2c8:	f003 0306 	and.w	r3, r3, #6
 801a2cc:	2b04      	cmp	r3, #4
 801a2ce:	bf08      	it	eq
 801a2d0:	1aad      	subeq	r5, r5, r2
 801a2d2:	68a3      	ldr	r3, [r4, #8]
 801a2d4:	6922      	ldr	r2, [r4, #16]
 801a2d6:	bf0c      	ite	eq
 801a2d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a2dc:	2500      	movne	r5, #0
 801a2de:	4293      	cmp	r3, r2
 801a2e0:	bfc4      	itt	gt
 801a2e2:	1a9b      	subgt	r3, r3, r2
 801a2e4:	18ed      	addgt	r5, r5, r3
 801a2e6:	2600      	movs	r6, #0
 801a2e8:	341a      	adds	r4, #26
 801a2ea:	42b5      	cmp	r5, r6
 801a2ec:	d11a      	bne.n	801a324 <_printf_common+0xc8>
 801a2ee:	2000      	movs	r0, #0
 801a2f0:	e008      	b.n	801a304 <_printf_common+0xa8>
 801a2f2:	2301      	movs	r3, #1
 801a2f4:	4652      	mov	r2, sl
 801a2f6:	4649      	mov	r1, r9
 801a2f8:	4638      	mov	r0, r7
 801a2fa:	47c0      	blx	r8
 801a2fc:	3001      	adds	r0, #1
 801a2fe:	d103      	bne.n	801a308 <_printf_common+0xac>
 801a300:	f04f 30ff 	mov.w	r0, #4294967295
 801a304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a308:	3501      	adds	r5, #1
 801a30a:	e7c6      	b.n	801a29a <_printf_common+0x3e>
 801a30c:	18e1      	adds	r1, r4, r3
 801a30e:	1c5a      	adds	r2, r3, #1
 801a310:	2030      	movs	r0, #48	; 0x30
 801a312:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a316:	4422      	add	r2, r4
 801a318:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a31c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a320:	3302      	adds	r3, #2
 801a322:	e7c7      	b.n	801a2b4 <_printf_common+0x58>
 801a324:	2301      	movs	r3, #1
 801a326:	4622      	mov	r2, r4
 801a328:	4649      	mov	r1, r9
 801a32a:	4638      	mov	r0, r7
 801a32c:	47c0      	blx	r8
 801a32e:	3001      	adds	r0, #1
 801a330:	d0e6      	beq.n	801a300 <_printf_common+0xa4>
 801a332:	3601      	adds	r6, #1
 801a334:	e7d9      	b.n	801a2ea <_printf_common+0x8e>
	...

0801a338 <_printf_i>:
 801a338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a33c:	460c      	mov	r4, r1
 801a33e:	4691      	mov	r9, r2
 801a340:	7e27      	ldrb	r7, [r4, #24]
 801a342:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a344:	2f78      	cmp	r7, #120	; 0x78
 801a346:	4680      	mov	r8, r0
 801a348:	469a      	mov	sl, r3
 801a34a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a34e:	d807      	bhi.n	801a360 <_printf_i+0x28>
 801a350:	2f62      	cmp	r7, #98	; 0x62
 801a352:	d80a      	bhi.n	801a36a <_printf_i+0x32>
 801a354:	2f00      	cmp	r7, #0
 801a356:	f000 80d8 	beq.w	801a50a <_printf_i+0x1d2>
 801a35a:	2f58      	cmp	r7, #88	; 0x58
 801a35c:	f000 80a3 	beq.w	801a4a6 <_printf_i+0x16e>
 801a360:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a364:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a368:	e03a      	b.n	801a3e0 <_printf_i+0xa8>
 801a36a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a36e:	2b15      	cmp	r3, #21
 801a370:	d8f6      	bhi.n	801a360 <_printf_i+0x28>
 801a372:	a001      	add	r0, pc, #4	; (adr r0, 801a378 <_printf_i+0x40>)
 801a374:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801a378:	0801a3d1 	.word	0x0801a3d1
 801a37c:	0801a3e5 	.word	0x0801a3e5
 801a380:	0801a361 	.word	0x0801a361
 801a384:	0801a361 	.word	0x0801a361
 801a388:	0801a361 	.word	0x0801a361
 801a38c:	0801a361 	.word	0x0801a361
 801a390:	0801a3e5 	.word	0x0801a3e5
 801a394:	0801a361 	.word	0x0801a361
 801a398:	0801a361 	.word	0x0801a361
 801a39c:	0801a361 	.word	0x0801a361
 801a3a0:	0801a361 	.word	0x0801a361
 801a3a4:	0801a4f1 	.word	0x0801a4f1
 801a3a8:	0801a415 	.word	0x0801a415
 801a3ac:	0801a4d3 	.word	0x0801a4d3
 801a3b0:	0801a361 	.word	0x0801a361
 801a3b4:	0801a361 	.word	0x0801a361
 801a3b8:	0801a513 	.word	0x0801a513
 801a3bc:	0801a361 	.word	0x0801a361
 801a3c0:	0801a415 	.word	0x0801a415
 801a3c4:	0801a361 	.word	0x0801a361
 801a3c8:	0801a361 	.word	0x0801a361
 801a3cc:	0801a4db 	.word	0x0801a4db
 801a3d0:	680b      	ldr	r3, [r1, #0]
 801a3d2:	1d1a      	adds	r2, r3, #4
 801a3d4:	681b      	ldr	r3, [r3, #0]
 801a3d6:	600a      	str	r2, [r1, #0]
 801a3d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a3dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a3e0:	2301      	movs	r3, #1
 801a3e2:	e0a3      	b.n	801a52c <_printf_i+0x1f4>
 801a3e4:	6825      	ldr	r5, [r4, #0]
 801a3e6:	6808      	ldr	r0, [r1, #0]
 801a3e8:	062e      	lsls	r6, r5, #24
 801a3ea:	f100 0304 	add.w	r3, r0, #4
 801a3ee:	d50a      	bpl.n	801a406 <_printf_i+0xce>
 801a3f0:	6805      	ldr	r5, [r0, #0]
 801a3f2:	600b      	str	r3, [r1, #0]
 801a3f4:	2d00      	cmp	r5, #0
 801a3f6:	da03      	bge.n	801a400 <_printf_i+0xc8>
 801a3f8:	232d      	movs	r3, #45	; 0x2d
 801a3fa:	426d      	negs	r5, r5
 801a3fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a400:	485e      	ldr	r0, [pc, #376]	; (801a57c <_printf_i+0x244>)
 801a402:	230a      	movs	r3, #10
 801a404:	e019      	b.n	801a43a <_printf_i+0x102>
 801a406:	f015 0f40 	tst.w	r5, #64	; 0x40
 801a40a:	6805      	ldr	r5, [r0, #0]
 801a40c:	600b      	str	r3, [r1, #0]
 801a40e:	bf18      	it	ne
 801a410:	b22d      	sxthne	r5, r5
 801a412:	e7ef      	b.n	801a3f4 <_printf_i+0xbc>
 801a414:	680b      	ldr	r3, [r1, #0]
 801a416:	6825      	ldr	r5, [r4, #0]
 801a418:	1d18      	adds	r0, r3, #4
 801a41a:	6008      	str	r0, [r1, #0]
 801a41c:	0628      	lsls	r0, r5, #24
 801a41e:	d501      	bpl.n	801a424 <_printf_i+0xec>
 801a420:	681d      	ldr	r5, [r3, #0]
 801a422:	e002      	b.n	801a42a <_printf_i+0xf2>
 801a424:	0669      	lsls	r1, r5, #25
 801a426:	d5fb      	bpl.n	801a420 <_printf_i+0xe8>
 801a428:	881d      	ldrh	r5, [r3, #0]
 801a42a:	4854      	ldr	r0, [pc, #336]	; (801a57c <_printf_i+0x244>)
 801a42c:	2f6f      	cmp	r7, #111	; 0x6f
 801a42e:	bf0c      	ite	eq
 801a430:	2308      	moveq	r3, #8
 801a432:	230a      	movne	r3, #10
 801a434:	2100      	movs	r1, #0
 801a436:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a43a:	6866      	ldr	r6, [r4, #4]
 801a43c:	60a6      	str	r6, [r4, #8]
 801a43e:	2e00      	cmp	r6, #0
 801a440:	bfa2      	ittt	ge
 801a442:	6821      	ldrge	r1, [r4, #0]
 801a444:	f021 0104 	bicge.w	r1, r1, #4
 801a448:	6021      	strge	r1, [r4, #0]
 801a44a:	b90d      	cbnz	r5, 801a450 <_printf_i+0x118>
 801a44c:	2e00      	cmp	r6, #0
 801a44e:	d04d      	beq.n	801a4ec <_printf_i+0x1b4>
 801a450:	4616      	mov	r6, r2
 801a452:	fbb5 f1f3 	udiv	r1, r5, r3
 801a456:	fb03 5711 	mls	r7, r3, r1, r5
 801a45a:	5dc7      	ldrb	r7, [r0, r7]
 801a45c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a460:	462f      	mov	r7, r5
 801a462:	42bb      	cmp	r3, r7
 801a464:	460d      	mov	r5, r1
 801a466:	d9f4      	bls.n	801a452 <_printf_i+0x11a>
 801a468:	2b08      	cmp	r3, #8
 801a46a:	d10b      	bne.n	801a484 <_printf_i+0x14c>
 801a46c:	6823      	ldr	r3, [r4, #0]
 801a46e:	07df      	lsls	r7, r3, #31
 801a470:	d508      	bpl.n	801a484 <_printf_i+0x14c>
 801a472:	6923      	ldr	r3, [r4, #16]
 801a474:	6861      	ldr	r1, [r4, #4]
 801a476:	4299      	cmp	r1, r3
 801a478:	bfde      	ittt	le
 801a47a:	2330      	movle	r3, #48	; 0x30
 801a47c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a480:	f106 36ff 	addle.w	r6, r6, #4294967295
 801a484:	1b92      	subs	r2, r2, r6
 801a486:	6122      	str	r2, [r4, #16]
 801a488:	f8cd a000 	str.w	sl, [sp]
 801a48c:	464b      	mov	r3, r9
 801a48e:	aa03      	add	r2, sp, #12
 801a490:	4621      	mov	r1, r4
 801a492:	4640      	mov	r0, r8
 801a494:	f7ff fee2 	bl	801a25c <_printf_common>
 801a498:	3001      	adds	r0, #1
 801a49a:	d14c      	bne.n	801a536 <_printf_i+0x1fe>
 801a49c:	f04f 30ff 	mov.w	r0, #4294967295
 801a4a0:	b004      	add	sp, #16
 801a4a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a4a6:	4835      	ldr	r0, [pc, #212]	; (801a57c <_printf_i+0x244>)
 801a4a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801a4ac:	6823      	ldr	r3, [r4, #0]
 801a4ae:	680e      	ldr	r6, [r1, #0]
 801a4b0:	061f      	lsls	r7, r3, #24
 801a4b2:	f856 5b04 	ldr.w	r5, [r6], #4
 801a4b6:	600e      	str	r6, [r1, #0]
 801a4b8:	d514      	bpl.n	801a4e4 <_printf_i+0x1ac>
 801a4ba:	07d9      	lsls	r1, r3, #31
 801a4bc:	bf44      	itt	mi
 801a4be:	f043 0320 	orrmi.w	r3, r3, #32
 801a4c2:	6023      	strmi	r3, [r4, #0]
 801a4c4:	b91d      	cbnz	r5, 801a4ce <_printf_i+0x196>
 801a4c6:	6823      	ldr	r3, [r4, #0]
 801a4c8:	f023 0320 	bic.w	r3, r3, #32
 801a4cc:	6023      	str	r3, [r4, #0]
 801a4ce:	2310      	movs	r3, #16
 801a4d0:	e7b0      	b.n	801a434 <_printf_i+0xfc>
 801a4d2:	6823      	ldr	r3, [r4, #0]
 801a4d4:	f043 0320 	orr.w	r3, r3, #32
 801a4d8:	6023      	str	r3, [r4, #0]
 801a4da:	2378      	movs	r3, #120	; 0x78
 801a4dc:	4828      	ldr	r0, [pc, #160]	; (801a580 <_printf_i+0x248>)
 801a4de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a4e2:	e7e3      	b.n	801a4ac <_printf_i+0x174>
 801a4e4:	065e      	lsls	r6, r3, #25
 801a4e6:	bf48      	it	mi
 801a4e8:	b2ad      	uxthmi	r5, r5
 801a4ea:	e7e6      	b.n	801a4ba <_printf_i+0x182>
 801a4ec:	4616      	mov	r6, r2
 801a4ee:	e7bb      	b.n	801a468 <_printf_i+0x130>
 801a4f0:	680b      	ldr	r3, [r1, #0]
 801a4f2:	6826      	ldr	r6, [r4, #0]
 801a4f4:	6960      	ldr	r0, [r4, #20]
 801a4f6:	1d1d      	adds	r5, r3, #4
 801a4f8:	600d      	str	r5, [r1, #0]
 801a4fa:	0635      	lsls	r5, r6, #24
 801a4fc:	681b      	ldr	r3, [r3, #0]
 801a4fe:	d501      	bpl.n	801a504 <_printf_i+0x1cc>
 801a500:	6018      	str	r0, [r3, #0]
 801a502:	e002      	b.n	801a50a <_printf_i+0x1d2>
 801a504:	0671      	lsls	r1, r6, #25
 801a506:	d5fb      	bpl.n	801a500 <_printf_i+0x1c8>
 801a508:	8018      	strh	r0, [r3, #0]
 801a50a:	2300      	movs	r3, #0
 801a50c:	6123      	str	r3, [r4, #16]
 801a50e:	4616      	mov	r6, r2
 801a510:	e7ba      	b.n	801a488 <_printf_i+0x150>
 801a512:	680b      	ldr	r3, [r1, #0]
 801a514:	1d1a      	adds	r2, r3, #4
 801a516:	600a      	str	r2, [r1, #0]
 801a518:	681e      	ldr	r6, [r3, #0]
 801a51a:	6862      	ldr	r2, [r4, #4]
 801a51c:	2100      	movs	r1, #0
 801a51e:	4630      	mov	r0, r6
 801a520:	f7e5 fefe 	bl	8000320 <memchr>
 801a524:	b108      	cbz	r0, 801a52a <_printf_i+0x1f2>
 801a526:	1b80      	subs	r0, r0, r6
 801a528:	6060      	str	r0, [r4, #4]
 801a52a:	6863      	ldr	r3, [r4, #4]
 801a52c:	6123      	str	r3, [r4, #16]
 801a52e:	2300      	movs	r3, #0
 801a530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a534:	e7a8      	b.n	801a488 <_printf_i+0x150>
 801a536:	6923      	ldr	r3, [r4, #16]
 801a538:	4632      	mov	r2, r6
 801a53a:	4649      	mov	r1, r9
 801a53c:	4640      	mov	r0, r8
 801a53e:	47d0      	blx	sl
 801a540:	3001      	adds	r0, #1
 801a542:	d0ab      	beq.n	801a49c <_printf_i+0x164>
 801a544:	6823      	ldr	r3, [r4, #0]
 801a546:	079b      	lsls	r3, r3, #30
 801a548:	d413      	bmi.n	801a572 <_printf_i+0x23a>
 801a54a:	68e0      	ldr	r0, [r4, #12]
 801a54c:	9b03      	ldr	r3, [sp, #12]
 801a54e:	4298      	cmp	r0, r3
 801a550:	bfb8      	it	lt
 801a552:	4618      	movlt	r0, r3
 801a554:	e7a4      	b.n	801a4a0 <_printf_i+0x168>
 801a556:	2301      	movs	r3, #1
 801a558:	4632      	mov	r2, r6
 801a55a:	4649      	mov	r1, r9
 801a55c:	4640      	mov	r0, r8
 801a55e:	47d0      	blx	sl
 801a560:	3001      	adds	r0, #1
 801a562:	d09b      	beq.n	801a49c <_printf_i+0x164>
 801a564:	3501      	adds	r5, #1
 801a566:	68e3      	ldr	r3, [r4, #12]
 801a568:	9903      	ldr	r1, [sp, #12]
 801a56a:	1a5b      	subs	r3, r3, r1
 801a56c:	42ab      	cmp	r3, r5
 801a56e:	dcf2      	bgt.n	801a556 <_printf_i+0x21e>
 801a570:	e7eb      	b.n	801a54a <_printf_i+0x212>
 801a572:	2500      	movs	r5, #0
 801a574:	f104 0619 	add.w	r6, r4, #25
 801a578:	e7f5      	b.n	801a566 <_printf_i+0x22e>
 801a57a:	bf00      	nop
 801a57c:	0801e003 	.word	0x0801e003
 801a580:	0801e014 	.word	0x0801e014

0801a584 <_read_r>:
 801a584:	b538      	push	{r3, r4, r5, lr}
 801a586:	4d07      	ldr	r5, [pc, #28]	; (801a5a4 <_read_r+0x20>)
 801a588:	4604      	mov	r4, r0
 801a58a:	4608      	mov	r0, r1
 801a58c:	4611      	mov	r1, r2
 801a58e:	2200      	movs	r2, #0
 801a590:	602a      	str	r2, [r5, #0]
 801a592:	461a      	mov	r2, r3
 801a594:	f7e7 faf2 	bl	8001b7c <_read>
 801a598:	1c43      	adds	r3, r0, #1
 801a59a:	d102      	bne.n	801a5a2 <_read_r+0x1e>
 801a59c:	682b      	ldr	r3, [r5, #0]
 801a59e:	b103      	cbz	r3, 801a5a2 <_read_r+0x1e>
 801a5a0:	6023      	str	r3, [r4, #0]
 801a5a2:	bd38      	pop	{r3, r4, r5, pc}
 801a5a4:	24007880 	.word	0x24007880

0801a5a8 <__swbuf_r>:
 801a5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5aa:	460e      	mov	r6, r1
 801a5ac:	4614      	mov	r4, r2
 801a5ae:	4605      	mov	r5, r0
 801a5b0:	b118      	cbz	r0, 801a5ba <__swbuf_r+0x12>
 801a5b2:	6983      	ldr	r3, [r0, #24]
 801a5b4:	b90b      	cbnz	r3, 801a5ba <__swbuf_r+0x12>
 801a5b6:	f7ff f8f9 	bl	80197ac <__sinit>
 801a5ba:	4b21      	ldr	r3, [pc, #132]	; (801a640 <__swbuf_r+0x98>)
 801a5bc:	429c      	cmp	r4, r3
 801a5be:	d12b      	bne.n	801a618 <__swbuf_r+0x70>
 801a5c0:	686c      	ldr	r4, [r5, #4]
 801a5c2:	69a3      	ldr	r3, [r4, #24]
 801a5c4:	60a3      	str	r3, [r4, #8]
 801a5c6:	89a3      	ldrh	r3, [r4, #12]
 801a5c8:	071a      	lsls	r2, r3, #28
 801a5ca:	d52f      	bpl.n	801a62c <__swbuf_r+0x84>
 801a5cc:	6923      	ldr	r3, [r4, #16]
 801a5ce:	b36b      	cbz	r3, 801a62c <__swbuf_r+0x84>
 801a5d0:	6923      	ldr	r3, [r4, #16]
 801a5d2:	6820      	ldr	r0, [r4, #0]
 801a5d4:	1ac0      	subs	r0, r0, r3
 801a5d6:	6963      	ldr	r3, [r4, #20]
 801a5d8:	b2f6      	uxtb	r6, r6
 801a5da:	4283      	cmp	r3, r0
 801a5dc:	4637      	mov	r7, r6
 801a5de:	dc04      	bgt.n	801a5ea <__swbuf_r+0x42>
 801a5e0:	4621      	mov	r1, r4
 801a5e2:	4628      	mov	r0, r5
 801a5e4:	f7ff fc1c 	bl	8019e20 <_fflush_r>
 801a5e8:	bb30      	cbnz	r0, 801a638 <__swbuf_r+0x90>
 801a5ea:	68a3      	ldr	r3, [r4, #8]
 801a5ec:	3b01      	subs	r3, #1
 801a5ee:	60a3      	str	r3, [r4, #8]
 801a5f0:	6823      	ldr	r3, [r4, #0]
 801a5f2:	1c5a      	adds	r2, r3, #1
 801a5f4:	6022      	str	r2, [r4, #0]
 801a5f6:	701e      	strb	r6, [r3, #0]
 801a5f8:	6963      	ldr	r3, [r4, #20]
 801a5fa:	3001      	adds	r0, #1
 801a5fc:	4283      	cmp	r3, r0
 801a5fe:	d004      	beq.n	801a60a <__swbuf_r+0x62>
 801a600:	89a3      	ldrh	r3, [r4, #12]
 801a602:	07db      	lsls	r3, r3, #31
 801a604:	d506      	bpl.n	801a614 <__swbuf_r+0x6c>
 801a606:	2e0a      	cmp	r6, #10
 801a608:	d104      	bne.n	801a614 <__swbuf_r+0x6c>
 801a60a:	4621      	mov	r1, r4
 801a60c:	4628      	mov	r0, r5
 801a60e:	f7ff fc07 	bl	8019e20 <_fflush_r>
 801a612:	b988      	cbnz	r0, 801a638 <__swbuf_r+0x90>
 801a614:	4638      	mov	r0, r7
 801a616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a618:	4b0a      	ldr	r3, [pc, #40]	; (801a644 <__swbuf_r+0x9c>)
 801a61a:	429c      	cmp	r4, r3
 801a61c:	d101      	bne.n	801a622 <__swbuf_r+0x7a>
 801a61e:	68ac      	ldr	r4, [r5, #8]
 801a620:	e7cf      	b.n	801a5c2 <__swbuf_r+0x1a>
 801a622:	4b09      	ldr	r3, [pc, #36]	; (801a648 <__swbuf_r+0xa0>)
 801a624:	429c      	cmp	r4, r3
 801a626:	bf08      	it	eq
 801a628:	68ec      	ldreq	r4, [r5, #12]
 801a62a:	e7ca      	b.n	801a5c2 <__swbuf_r+0x1a>
 801a62c:	4621      	mov	r1, r4
 801a62e:	4628      	mov	r0, r5
 801a630:	f000 f80c 	bl	801a64c <__swsetup_r>
 801a634:	2800      	cmp	r0, #0
 801a636:	d0cb      	beq.n	801a5d0 <__swbuf_r+0x28>
 801a638:	f04f 37ff 	mov.w	r7, #4294967295
 801a63c:	e7ea      	b.n	801a614 <__swbuf_r+0x6c>
 801a63e:	bf00      	nop
 801a640:	0801defc 	.word	0x0801defc
 801a644:	0801df1c 	.word	0x0801df1c
 801a648:	0801dedc 	.word	0x0801dedc

0801a64c <__swsetup_r>:
 801a64c:	4b32      	ldr	r3, [pc, #200]	; (801a718 <__swsetup_r+0xcc>)
 801a64e:	b570      	push	{r4, r5, r6, lr}
 801a650:	681d      	ldr	r5, [r3, #0]
 801a652:	4606      	mov	r6, r0
 801a654:	460c      	mov	r4, r1
 801a656:	b125      	cbz	r5, 801a662 <__swsetup_r+0x16>
 801a658:	69ab      	ldr	r3, [r5, #24]
 801a65a:	b913      	cbnz	r3, 801a662 <__swsetup_r+0x16>
 801a65c:	4628      	mov	r0, r5
 801a65e:	f7ff f8a5 	bl	80197ac <__sinit>
 801a662:	4b2e      	ldr	r3, [pc, #184]	; (801a71c <__swsetup_r+0xd0>)
 801a664:	429c      	cmp	r4, r3
 801a666:	d10f      	bne.n	801a688 <__swsetup_r+0x3c>
 801a668:	686c      	ldr	r4, [r5, #4]
 801a66a:	89a3      	ldrh	r3, [r4, #12]
 801a66c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a670:	0719      	lsls	r1, r3, #28
 801a672:	d42c      	bmi.n	801a6ce <__swsetup_r+0x82>
 801a674:	06dd      	lsls	r5, r3, #27
 801a676:	d411      	bmi.n	801a69c <__swsetup_r+0x50>
 801a678:	2309      	movs	r3, #9
 801a67a:	6033      	str	r3, [r6, #0]
 801a67c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a680:	81a3      	strh	r3, [r4, #12]
 801a682:	f04f 30ff 	mov.w	r0, #4294967295
 801a686:	e03e      	b.n	801a706 <__swsetup_r+0xba>
 801a688:	4b25      	ldr	r3, [pc, #148]	; (801a720 <__swsetup_r+0xd4>)
 801a68a:	429c      	cmp	r4, r3
 801a68c:	d101      	bne.n	801a692 <__swsetup_r+0x46>
 801a68e:	68ac      	ldr	r4, [r5, #8]
 801a690:	e7eb      	b.n	801a66a <__swsetup_r+0x1e>
 801a692:	4b24      	ldr	r3, [pc, #144]	; (801a724 <__swsetup_r+0xd8>)
 801a694:	429c      	cmp	r4, r3
 801a696:	bf08      	it	eq
 801a698:	68ec      	ldreq	r4, [r5, #12]
 801a69a:	e7e6      	b.n	801a66a <__swsetup_r+0x1e>
 801a69c:	0758      	lsls	r0, r3, #29
 801a69e:	d512      	bpl.n	801a6c6 <__swsetup_r+0x7a>
 801a6a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a6a2:	b141      	cbz	r1, 801a6b6 <__swsetup_r+0x6a>
 801a6a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a6a8:	4299      	cmp	r1, r3
 801a6aa:	d002      	beq.n	801a6b2 <__swsetup_r+0x66>
 801a6ac:	4630      	mov	r0, r6
 801a6ae:	f7ff fc2b 	bl	8019f08 <_free_r>
 801a6b2:	2300      	movs	r3, #0
 801a6b4:	6363      	str	r3, [r4, #52]	; 0x34
 801a6b6:	89a3      	ldrh	r3, [r4, #12]
 801a6b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a6bc:	81a3      	strh	r3, [r4, #12]
 801a6be:	2300      	movs	r3, #0
 801a6c0:	6063      	str	r3, [r4, #4]
 801a6c2:	6923      	ldr	r3, [r4, #16]
 801a6c4:	6023      	str	r3, [r4, #0]
 801a6c6:	89a3      	ldrh	r3, [r4, #12]
 801a6c8:	f043 0308 	orr.w	r3, r3, #8
 801a6cc:	81a3      	strh	r3, [r4, #12]
 801a6ce:	6923      	ldr	r3, [r4, #16]
 801a6d0:	b94b      	cbnz	r3, 801a6e6 <__swsetup_r+0x9a>
 801a6d2:	89a3      	ldrh	r3, [r4, #12]
 801a6d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a6d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a6dc:	d003      	beq.n	801a6e6 <__swsetup_r+0x9a>
 801a6de:	4621      	mov	r1, r4
 801a6e0:	4630      	mov	r0, r6
 801a6e2:	f000 f84d 	bl	801a780 <__smakebuf_r>
 801a6e6:	89a0      	ldrh	r0, [r4, #12]
 801a6e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a6ec:	f010 0301 	ands.w	r3, r0, #1
 801a6f0:	d00a      	beq.n	801a708 <__swsetup_r+0xbc>
 801a6f2:	2300      	movs	r3, #0
 801a6f4:	60a3      	str	r3, [r4, #8]
 801a6f6:	6963      	ldr	r3, [r4, #20]
 801a6f8:	425b      	negs	r3, r3
 801a6fa:	61a3      	str	r3, [r4, #24]
 801a6fc:	6923      	ldr	r3, [r4, #16]
 801a6fe:	b943      	cbnz	r3, 801a712 <__swsetup_r+0xc6>
 801a700:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a704:	d1ba      	bne.n	801a67c <__swsetup_r+0x30>
 801a706:	bd70      	pop	{r4, r5, r6, pc}
 801a708:	0781      	lsls	r1, r0, #30
 801a70a:	bf58      	it	pl
 801a70c:	6963      	ldrpl	r3, [r4, #20]
 801a70e:	60a3      	str	r3, [r4, #8]
 801a710:	e7f4      	b.n	801a6fc <__swsetup_r+0xb0>
 801a712:	2000      	movs	r0, #0
 801a714:	e7f7      	b.n	801a706 <__swsetup_r+0xba>
 801a716:	bf00      	nop
 801a718:	2400003c 	.word	0x2400003c
 801a71c:	0801defc 	.word	0x0801defc
 801a720:	0801df1c 	.word	0x0801df1c
 801a724:	0801dedc 	.word	0x0801dedc

0801a728 <abort>:
 801a728:	b508      	push	{r3, lr}
 801a72a:	2006      	movs	r0, #6
 801a72c:	f000 f890 	bl	801a850 <raise>
 801a730:	2001      	movs	r0, #1
 801a732:	f7e7 fa19 	bl	8001b68 <_exit>

0801a736 <__swhatbuf_r>:
 801a736:	b570      	push	{r4, r5, r6, lr}
 801a738:	460e      	mov	r6, r1
 801a73a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a73e:	2900      	cmp	r1, #0
 801a740:	b096      	sub	sp, #88	; 0x58
 801a742:	4614      	mov	r4, r2
 801a744:	461d      	mov	r5, r3
 801a746:	da07      	bge.n	801a758 <__swhatbuf_r+0x22>
 801a748:	2300      	movs	r3, #0
 801a74a:	602b      	str	r3, [r5, #0]
 801a74c:	89b3      	ldrh	r3, [r6, #12]
 801a74e:	061a      	lsls	r2, r3, #24
 801a750:	d410      	bmi.n	801a774 <__swhatbuf_r+0x3e>
 801a752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a756:	e00e      	b.n	801a776 <__swhatbuf_r+0x40>
 801a758:	466a      	mov	r2, sp
 801a75a:	f000 f895 	bl	801a888 <_fstat_r>
 801a75e:	2800      	cmp	r0, #0
 801a760:	dbf2      	blt.n	801a748 <__swhatbuf_r+0x12>
 801a762:	9a01      	ldr	r2, [sp, #4]
 801a764:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a768:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a76c:	425a      	negs	r2, r3
 801a76e:	415a      	adcs	r2, r3
 801a770:	602a      	str	r2, [r5, #0]
 801a772:	e7ee      	b.n	801a752 <__swhatbuf_r+0x1c>
 801a774:	2340      	movs	r3, #64	; 0x40
 801a776:	2000      	movs	r0, #0
 801a778:	6023      	str	r3, [r4, #0]
 801a77a:	b016      	add	sp, #88	; 0x58
 801a77c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a780 <__smakebuf_r>:
 801a780:	898b      	ldrh	r3, [r1, #12]
 801a782:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a784:	079d      	lsls	r5, r3, #30
 801a786:	4606      	mov	r6, r0
 801a788:	460c      	mov	r4, r1
 801a78a:	d507      	bpl.n	801a79c <__smakebuf_r+0x1c>
 801a78c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a790:	6023      	str	r3, [r4, #0]
 801a792:	6123      	str	r3, [r4, #16]
 801a794:	2301      	movs	r3, #1
 801a796:	6163      	str	r3, [r4, #20]
 801a798:	b002      	add	sp, #8
 801a79a:	bd70      	pop	{r4, r5, r6, pc}
 801a79c:	ab01      	add	r3, sp, #4
 801a79e:	466a      	mov	r2, sp
 801a7a0:	f7ff ffc9 	bl	801a736 <__swhatbuf_r>
 801a7a4:	9900      	ldr	r1, [sp, #0]
 801a7a6:	4605      	mov	r5, r0
 801a7a8:	4630      	mov	r0, r6
 801a7aa:	f7ff f8e9 	bl	8019980 <_malloc_r>
 801a7ae:	b948      	cbnz	r0, 801a7c4 <__smakebuf_r+0x44>
 801a7b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a7b4:	059a      	lsls	r2, r3, #22
 801a7b6:	d4ef      	bmi.n	801a798 <__smakebuf_r+0x18>
 801a7b8:	f023 0303 	bic.w	r3, r3, #3
 801a7bc:	f043 0302 	orr.w	r3, r3, #2
 801a7c0:	81a3      	strh	r3, [r4, #12]
 801a7c2:	e7e3      	b.n	801a78c <__smakebuf_r+0xc>
 801a7c4:	4b0d      	ldr	r3, [pc, #52]	; (801a7fc <__smakebuf_r+0x7c>)
 801a7c6:	62b3      	str	r3, [r6, #40]	; 0x28
 801a7c8:	89a3      	ldrh	r3, [r4, #12]
 801a7ca:	6020      	str	r0, [r4, #0]
 801a7cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a7d0:	81a3      	strh	r3, [r4, #12]
 801a7d2:	9b00      	ldr	r3, [sp, #0]
 801a7d4:	6163      	str	r3, [r4, #20]
 801a7d6:	9b01      	ldr	r3, [sp, #4]
 801a7d8:	6120      	str	r0, [r4, #16]
 801a7da:	b15b      	cbz	r3, 801a7f4 <__smakebuf_r+0x74>
 801a7dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a7e0:	4630      	mov	r0, r6
 801a7e2:	f000 f863 	bl	801a8ac <_isatty_r>
 801a7e6:	b128      	cbz	r0, 801a7f4 <__smakebuf_r+0x74>
 801a7e8:	89a3      	ldrh	r3, [r4, #12]
 801a7ea:	f023 0303 	bic.w	r3, r3, #3
 801a7ee:	f043 0301 	orr.w	r3, r3, #1
 801a7f2:	81a3      	strh	r3, [r4, #12]
 801a7f4:	89a0      	ldrh	r0, [r4, #12]
 801a7f6:	4305      	orrs	r5, r0
 801a7f8:	81a5      	strh	r5, [r4, #12]
 801a7fa:	e7cd      	b.n	801a798 <__smakebuf_r+0x18>
 801a7fc:	08019745 	.word	0x08019745

0801a800 <_raise_r>:
 801a800:	291f      	cmp	r1, #31
 801a802:	b538      	push	{r3, r4, r5, lr}
 801a804:	4604      	mov	r4, r0
 801a806:	460d      	mov	r5, r1
 801a808:	d904      	bls.n	801a814 <_raise_r+0x14>
 801a80a:	2316      	movs	r3, #22
 801a80c:	6003      	str	r3, [r0, #0]
 801a80e:	f04f 30ff 	mov.w	r0, #4294967295
 801a812:	bd38      	pop	{r3, r4, r5, pc}
 801a814:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a816:	b112      	cbz	r2, 801a81e <_raise_r+0x1e>
 801a818:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a81c:	b94b      	cbnz	r3, 801a832 <_raise_r+0x32>
 801a81e:	4620      	mov	r0, r4
 801a820:	f000 f830 	bl	801a884 <_getpid_r>
 801a824:	462a      	mov	r2, r5
 801a826:	4601      	mov	r1, r0
 801a828:	4620      	mov	r0, r4
 801a82a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a82e:	f000 b817 	b.w	801a860 <_kill_r>
 801a832:	2b01      	cmp	r3, #1
 801a834:	d00a      	beq.n	801a84c <_raise_r+0x4c>
 801a836:	1c59      	adds	r1, r3, #1
 801a838:	d103      	bne.n	801a842 <_raise_r+0x42>
 801a83a:	2316      	movs	r3, #22
 801a83c:	6003      	str	r3, [r0, #0]
 801a83e:	2001      	movs	r0, #1
 801a840:	e7e7      	b.n	801a812 <_raise_r+0x12>
 801a842:	2400      	movs	r4, #0
 801a844:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a848:	4628      	mov	r0, r5
 801a84a:	4798      	blx	r3
 801a84c:	2000      	movs	r0, #0
 801a84e:	e7e0      	b.n	801a812 <_raise_r+0x12>

0801a850 <raise>:
 801a850:	4b02      	ldr	r3, [pc, #8]	; (801a85c <raise+0xc>)
 801a852:	4601      	mov	r1, r0
 801a854:	6818      	ldr	r0, [r3, #0]
 801a856:	f7ff bfd3 	b.w	801a800 <_raise_r>
 801a85a:	bf00      	nop
 801a85c:	2400003c 	.word	0x2400003c

0801a860 <_kill_r>:
 801a860:	b538      	push	{r3, r4, r5, lr}
 801a862:	4d07      	ldr	r5, [pc, #28]	; (801a880 <_kill_r+0x20>)
 801a864:	2300      	movs	r3, #0
 801a866:	4604      	mov	r4, r0
 801a868:	4608      	mov	r0, r1
 801a86a:	4611      	mov	r1, r2
 801a86c:	602b      	str	r3, [r5, #0]
 801a86e:	f7e7 f969 	bl	8001b44 <_kill>
 801a872:	1c43      	adds	r3, r0, #1
 801a874:	d102      	bne.n	801a87c <_kill_r+0x1c>
 801a876:	682b      	ldr	r3, [r5, #0]
 801a878:	b103      	cbz	r3, 801a87c <_kill_r+0x1c>
 801a87a:	6023      	str	r3, [r4, #0]
 801a87c:	bd38      	pop	{r3, r4, r5, pc}
 801a87e:	bf00      	nop
 801a880:	24007880 	.word	0x24007880

0801a884 <_getpid_r>:
 801a884:	f7e7 b956 	b.w	8001b34 <_getpid>

0801a888 <_fstat_r>:
 801a888:	b538      	push	{r3, r4, r5, lr}
 801a88a:	4d07      	ldr	r5, [pc, #28]	; (801a8a8 <_fstat_r+0x20>)
 801a88c:	2300      	movs	r3, #0
 801a88e:	4604      	mov	r4, r0
 801a890:	4608      	mov	r0, r1
 801a892:	4611      	mov	r1, r2
 801a894:	602b      	str	r3, [r5, #0]
 801a896:	f7e7 f9b6 	bl	8001c06 <_fstat>
 801a89a:	1c43      	adds	r3, r0, #1
 801a89c:	d102      	bne.n	801a8a4 <_fstat_r+0x1c>
 801a89e:	682b      	ldr	r3, [r5, #0]
 801a8a0:	b103      	cbz	r3, 801a8a4 <_fstat_r+0x1c>
 801a8a2:	6023      	str	r3, [r4, #0]
 801a8a4:	bd38      	pop	{r3, r4, r5, pc}
 801a8a6:	bf00      	nop
 801a8a8:	24007880 	.word	0x24007880

0801a8ac <_isatty_r>:
 801a8ac:	b538      	push	{r3, r4, r5, lr}
 801a8ae:	4d06      	ldr	r5, [pc, #24]	; (801a8c8 <_isatty_r+0x1c>)
 801a8b0:	2300      	movs	r3, #0
 801a8b2:	4604      	mov	r4, r0
 801a8b4:	4608      	mov	r0, r1
 801a8b6:	602b      	str	r3, [r5, #0]
 801a8b8:	f7e7 f9b5 	bl	8001c26 <_isatty>
 801a8bc:	1c43      	adds	r3, r0, #1
 801a8be:	d102      	bne.n	801a8c6 <_isatty_r+0x1a>
 801a8c0:	682b      	ldr	r3, [r5, #0]
 801a8c2:	b103      	cbz	r3, 801a8c6 <_isatty_r+0x1a>
 801a8c4:	6023      	str	r3, [r4, #0]
 801a8c6:	bd38      	pop	{r3, r4, r5, pc}
 801a8c8:	24007880 	.word	0x24007880

0801a8cc <_init>:
 801a8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a8ce:	bf00      	nop
 801a8d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a8d2:	bc08      	pop	{r3}
 801a8d4:	469e      	mov	lr, r3
 801a8d6:	4770      	bx	lr

0801a8d8 <_fini>:
 801a8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a8da:	bf00      	nop
 801a8dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a8de:	bc08      	pop	{r3}
 801a8e0:	469e      	mov	lr, r3
 801a8e2:	4770      	bx	lr
