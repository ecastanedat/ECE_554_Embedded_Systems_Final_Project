
ECE_554_ProjectBaseline.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015a6c  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003538  08015d3c  08015d3c  00025d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019274  08019274  00029274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801927c  0801927c  0002927c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08019280  08019280  00029280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  24000000  08019284  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000035a4  2400009c  08019320  0003009c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24003640  08019320  00033640  2**0
                  ALLOC
  9 .lwip_sec     00001900  30000000  30000000  00040000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0005450b  00000000  00000000  000300ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00008253  00000000  00000000  000845d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002440  00000000  00000000  0008c828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00002308  00000000  00000000  0008ec68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000432b6  00000000  00000000  00090f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00038ea4  00000000  00000000  000d4226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00174712  00000000  00000000  0010d0ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  002817dc  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000a2d8  00000000  00000000  00281830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400009c 	.word	0x2400009c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08015d24 	.word	0x08015d24

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000a0 	.word	0x240000a0
 800030c:	08015d24 	.word	0x08015d24

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96e 	b.w	80006b4 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80006b8:	b590      	push	{r4, r7, lr}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af02      	add	r7, sp, #8
 80006be:	4604      	mov	r4, r0
 80006c0:	4608      	mov	r0, r1
 80006c2:	4611      	mov	r1, r2
 80006c4:	461a      	mov	r2, r3
 80006c6:	4623      	mov	r3, r4
 80006c8:	80fb      	strh	r3, [r7, #6]
 80006ca:	4603      	mov	r3, r0
 80006cc:	80bb      	strh	r3, [r7, #4]
 80006ce:	460b      	mov	r3, r1
 80006d0:	807b      	strh	r3, [r7, #2]
 80006d2:	4613      	mov	r3, r2
 80006d4:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 80006d6:	88f8      	ldrh	r0, [r7, #6]
 80006d8:	88b9      	ldrh	r1, [r7, #4]
 80006da:	887a      	ldrh	r2, [r7, #2]
 80006dc:	883c      	ldrh	r4, [r7, #0]
 80006de:	8b3b      	ldrh	r3, [r7, #24]
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	4623      	mov	r3, r4
 80006e4:	f000 fa88 	bl	8000bf8 <ST7735_FillRectangle>
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd90      	pop	{r4, r7, pc}

080006f0 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af02      	add	r7, sp, #8
 80006f6:	4603      	mov	r3, r0
 80006f8:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <fillScreen+0x2c>)
 80006fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <fillScreen+0x30>)
 8000702:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000706:	88fb      	ldrh	r3, [r7, #6]
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	460b      	mov	r3, r1
 800070c:	2100      	movs	r1, #0
 800070e:	2000      	movs	r0, #0
 8000710:	f7ff ffd2 	bl	80006b8 <fillRect>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	24000250 	.word	0x24000250
 8000720:	24000254 	.word	0x24000254

08000724 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	2101      	movs	r1, #1
 800072c:	4802      	ldr	r0, [pc, #8]	; (8000738 <ST7735_Select+0x14>)
 800072e:	f004 fd4d 	bl	80051cc <HAL_GPIO_WritePin>
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	58020800 	.word	0x58020800

0800073c <ST7735_Unselect>:

void ST7735_Unselect()
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000740:	2201      	movs	r2, #1
 8000742:	2101      	movs	r1, #1
 8000744:	4802      	ldr	r0, [pc, #8]	; (8000750 <ST7735_Unselect+0x14>)
 8000746:	f004 fd41 	bl	80051cc <HAL_GPIO_WritePin>
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	58020800 	.word	0x58020800

08000754 <ST7735_Reset>:

void ST7735_Reset()
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	2108      	movs	r1, #8
 800075c:	4806      	ldr	r0, [pc, #24]	; (8000778 <ST7735_Reset+0x24>)
 800075e:	f004 fd35 	bl	80051cc <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000762:	2005      	movs	r0, #5
 8000764:	f001 ff38 	bl	80025d8 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000768:	2201      	movs	r2, #1
 800076a:	2108      	movs	r1, #8
 800076c:	4802      	ldr	r0, [pc, #8]	; (8000778 <ST7735_Reset+0x24>)
 800076e:	f004 fd2d 	bl	80051cc <HAL_GPIO_WritePin>
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	58020800 	.word	0x58020800

0800077c <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2108      	movs	r1, #8
 800078a:	4807      	ldr	r0, [pc, #28]	; (80007a8 <ST7735_WriteCommand+0x2c>)
 800078c:	f004 fd1e 	bl	80051cc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000790:	1df9      	adds	r1, r7, #7
 8000792:	f04f 33ff 	mov.w	r3, #4294967295
 8000796:	2201      	movs	r2, #1
 8000798:	4804      	ldr	r0, [pc, #16]	; (80007ac <ST7735_WriteCommand+0x30>)
 800079a:	f007 f8df 	bl	800795c <HAL_SPI_Transmit>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	58020000 	.word	0x58020000
 80007ac:	240003e8 	.word	0x240003e8

080007b0 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80007ba:	2201      	movs	r2, #1
 80007bc:	2108      	movs	r1, #8
 80007be:	4807      	ldr	r0, [pc, #28]	; (80007dc <ST7735_WriteData+0x2c>)
 80007c0:	f004 fd04 	bl	80051cc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	f04f 33ff 	mov.w	r3, #4294967295
 80007cc:	6879      	ldr	r1, [r7, #4]
 80007ce:	4804      	ldr	r0, [pc, #16]	; (80007e0 <ST7735_WriteData+0x30>)
 80007d0:	f007 f8c4 	bl	800795c <HAL_SPI_Transmit>
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	58020000 	.word	0x58020000
 80007e0:	240003e8 	.word	0x240003e8

080007e4 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	1c5a      	adds	r2, r3, #1
 80007f0:	607a      	str	r2, [r7, #4]
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80007f6:	e034      	b.n	8000862 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	1c5a      	adds	r2, r3, #1
 80007fc:	607a      	str	r2, [r7, #4]
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000802:	7afb      	ldrb	r3, [r7, #11]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ffb9 	bl	800077c <ST7735_WriteCommand>

        numArgs = *addr++;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	1c5a      	adds	r2, r3, #1
 800080e:	607a      	str	r2, [r7, #4]
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000814:	7abb      	ldrb	r3, [r7, #10]
 8000816:	b29b      	uxth	r3, r3
 8000818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081c:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800081e:	7abb      	ldrb	r3, [r7, #10]
 8000820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000824:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000826:	7abb      	ldrb	r3, [r7, #10]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d008      	beq.n	800083e <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800082c:	7abb      	ldrb	r3, [r7, #10]
 800082e:	4619      	mov	r1, r3
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f7ff ffbd 	bl	80007b0 <ST7735_WriteData>
            addr += numArgs;
 8000836:	7abb      	ldrb	r3, [r7, #10]
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	4413      	add	r3, r2
 800083c:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800083e:	89bb      	ldrh	r3, [r7, #12]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d00e      	beq.n	8000862 <DisplayInit+0x7e>
            ms = *addr++;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	1c5a      	adds	r2, r3, #1
 8000848:	607a      	str	r2, [r7, #4]
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800084e:	89bb      	ldrh	r3, [r7, #12]
 8000850:	2bff      	cmp	r3, #255	; 0xff
 8000852:	d102      	bne.n	800085a <DisplayInit+0x76>
 8000854:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000858:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800085a:	89bb      	ldrh	r3, [r7, #12]
 800085c:	4618      	mov	r0, r3
 800085e:	f001 febb 	bl	80025d8 <HAL_Delay>
    while(numCommands--) {
 8000862:	7bfb      	ldrb	r3, [r7, #15]
 8000864:	1e5a      	subs	r2, r3, #1
 8000866:	73fa      	strb	r2, [r7, #15]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d1c5      	bne.n	80007f8 <DisplayInit+0x14>
        }
    }
}
 800086c:	bf00      	nop
 800086e:	bf00      	nop
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	4604      	mov	r4, r0
 8000880:	4608      	mov	r0, r1
 8000882:	4611      	mov	r1, r2
 8000884:	461a      	mov	r2, r3
 8000886:	4623      	mov	r3, r4
 8000888:	71fb      	strb	r3, [r7, #7]
 800088a:	4603      	mov	r3, r0
 800088c:	71bb      	strb	r3, [r7, #6]
 800088e:	460b      	mov	r3, r1
 8000890:	717b      	strb	r3, [r7, #5]
 8000892:	4613      	mov	r3, r2
 8000894:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000896:	202a      	movs	r0, #42	; 0x2a
 8000898:	f7ff ff70 	bl	800077c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 800089c:	2300      	movs	r3, #0
 800089e:	733b      	strb	r3, [r7, #12]
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <ST7735_SetAddressWindow+0x88>)
 80008a2:	781a      	ldrb	r2, [r3, #0]
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	4413      	add	r3, r2
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	737b      	strb	r3, [r7, #13]
 80008ac:	2300      	movs	r3, #0
 80008ae:	73bb      	strb	r3, [r7, #14]
 80008b0:	4b13      	ldr	r3, [pc, #76]	; (8000900 <ST7735_SetAddressWindow+0x88>)
 80008b2:	781a      	ldrb	r2, [r3, #0]
 80008b4:	797b      	ldrb	r3, [r7, #5]
 80008b6:	4413      	add	r3, r2
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	2104      	movs	r1, #4
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff ff74 	bl	80007b0 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80008c8:	202b      	movs	r0, #43	; 0x2b
 80008ca:	f7ff ff57 	bl	800077c <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 80008ce:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <ST7735_SetAddressWindow+0x8c>)
 80008d0:	781a      	ldrb	r2, [r3, #0]
 80008d2:	79bb      	ldrb	r3, [r7, #6]
 80008d4:	4413      	add	r3, r2
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 80008da:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <ST7735_SetAddressWindow+0x8c>)
 80008dc:	781a      	ldrb	r2, [r3, #0]
 80008de:	793b      	ldrb	r3, [r7, #4]
 80008e0:	4413      	add	r3, r2
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80008e6:	f107 030c 	add.w	r3, r7, #12
 80008ea:	2104      	movs	r1, #4
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff ff5f 	bl	80007b0 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80008f2:	202c      	movs	r0, #44	; 0x2c
 80008f4:	f7ff ff42 	bl	800077c <ST7735_WriteCommand>
}
 80008f8:	bf00      	nop
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd90      	pop	{r4, r7, pc}
 8000900:	24000248 	.word	0x24000248
 8000904:	2400024c 	.word	0x2400024c

08000908 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8000912:	f7ff ff07 	bl	8000724 <ST7735_Select>
    ST7735_Reset();
 8000916:	f7ff ff1d 	bl	8000754 <ST7735_Reset>
    DisplayInit(init_cmds1);
 800091a:	480c      	ldr	r0, [pc, #48]	; (800094c <ST7735_Init+0x44>)
 800091c:	f7ff ff62 	bl	80007e4 <DisplayInit>
    DisplayInit(init_cmds2);
 8000920:	480b      	ldr	r0, [pc, #44]	; (8000950 <ST7735_Init+0x48>)
 8000922:	f7ff ff5f 	bl	80007e4 <DisplayInit>
    DisplayInit(init_cmds3);
 8000926:	480b      	ldr	r0, [pc, #44]	; (8000954 <ST7735_Init+0x4c>)
 8000928:	f7ff ff5c 	bl	80007e4 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 800092c:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <ST7735_Init+0x50>)
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <ST7735_Init+0x54>)
 8000934:	2200      	movs	r2, #0
 8000936:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	4618      	mov	r0, r3
 800093c:	f000 f810 	bl	8000960 <ST7735_SetRotation>
    ST7735_Unselect();
 8000940:	f7ff fefc 	bl	800073c <ST7735_Unselect>

}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	08018810 	.word	0x08018810
 8000950:	08018848 	.word	0x08018848
 8000954:	08018858 	.word	0x08018858
 8000958:	24000249 	.word	0x24000249
 800095c:	2400024d 	.word	0x2400024d

08000960 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	f003 0303 	and.w	r3, r3, #3
 8000974:	b2da      	uxtb	r2, r3
 8000976:	4b33      	ldr	r3, [pc, #204]	; (8000a44 <ST7735_SetRotation+0xe4>)
 8000978:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 800097a:	4b32      	ldr	r3, [pc, #200]	; (8000a44 <ST7735_SetRotation+0xe4>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b03      	cmp	r3, #3
 8000980:	d84e      	bhi.n	8000a20 <ST7735_SetRotation+0xc0>
 8000982:	a201      	add	r2, pc, #4	; (adr r2, 8000988 <ST7735_SetRotation+0x28>)
 8000984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000988:	08000999 	.word	0x08000999
 800098c:	080009bb 	.word	0x080009bb
 8000990:	080009dd 	.word	0x080009dd
 8000994:	080009ff 	.word	0x080009ff
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8000998:	23c0      	movs	r3, #192	; 0xc0
 800099a:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 800099c:	4b2a      	ldr	r3, [pc, #168]	; (8000a48 <ST7735_SetRotation+0xe8>)
 800099e:	22a0      	movs	r2, #160	; 0xa0
 80009a0:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80009a2:	4b2a      	ldr	r3, [pc, #168]	; (8000a4c <ST7735_SetRotation+0xec>)
 80009a4:	2280      	movs	r2, #128	; 0x80
 80009a6:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 80009a8:	4b29      	ldr	r3, [pc, #164]	; (8000a50 <ST7735_SetRotation+0xf0>)
 80009aa:	781a      	ldrb	r2, [r3, #0]
 80009ac:	4b29      	ldr	r3, [pc, #164]	; (8000a54 <ST7735_SetRotation+0xf4>)
 80009ae:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 80009b0:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <ST7735_SetRotation+0xf8>)
 80009b2:	781a      	ldrb	r2, [r3, #0]
 80009b4:	4b29      	ldr	r3, [pc, #164]	; (8000a5c <ST7735_SetRotation+0xfc>)
 80009b6:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80009b8:	e032      	b.n	8000a20 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80009ba:	23a0      	movs	r3, #160	; 0xa0
 80009bc:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80009be:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <ST7735_SetRotation+0xec>)
 80009c0:	22a0      	movs	r2, #160	; 0xa0
 80009c2:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80009c4:	4b20      	ldr	r3, [pc, #128]	; (8000a48 <ST7735_SetRotation+0xe8>)
 80009c6:	2280      	movs	r2, #128	; 0x80
 80009c8:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80009ca:	4b21      	ldr	r3, [pc, #132]	; (8000a50 <ST7735_SetRotation+0xf0>)
 80009cc:	781a      	ldrb	r2, [r3, #0]
 80009ce:	4b23      	ldr	r3, [pc, #140]	; (8000a5c <ST7735_SetRotation+0xfc>)
 80009d0:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80009d2:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <ST7735_SetRotation+0xf8>)
 80009d4:	781a      	ldrb	r2, [r3, #0]
 80009d6:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <ST7735_SetRotation+0xf4>)
 80009d8:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80009da:	e021      	b.n	8000a20 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 80009dc:	2300      	movs	r3, #0
 80009de:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 80009e0:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <ST7735_SetRotation+0xe8>)
 80009e2:	22a0      	movs	r2, #160	; 0xa0
 80009e4:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80009e6:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <ST7735_SetRotation+0xec>)
 80009e8:	2280      	movs	r2, #128	; 0x80
 80009ea:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 80009ec:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <ST7735_SetRotation+0xf0>)
 80009ee:	781a      	ldrb	r2, [r3, #0]
 80009f0:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <ST7735_SetRotation+0xf4>)
 80009f2:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 80009f4:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <ST7735_SetRotation+0xf8>)
 80009f6:	781a      	ldrb	r2, [r3, #0]
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <ST7735_SetRotation+0xfc>)
 80009fa:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80009fc:	e010      	b.n	8000a20 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80009fe:	2360      	movs	r3, #96	; 0x60
 8000a00:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000a02:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <ST7735_SetRotation+0xec>)
 8000a04:	22a0      	movs	r2, #160	; 0xa0
 8000a06:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <ST7735_SetRotation+0xe8>)
 8000a0a:	2280      	movs	r2, #128	; 0x80
 8000a0c:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <ST7735_SetRotation+0xf0>)
 8000a10:	781a      	ldrb	r2, [r3, #0]
 8000a12:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <ST7735_SetRotation+0xfc>)
 8000a14:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <ST7735_SetRotation+0xf8>)
 8000a18:	781a      	ldrb	r2, [r3, #0]
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <ST7735_SetRotation+0xf4>)
 8000a1c:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000a1e:	bf00      	nop
  }
  ST7735_Select();
 8000a20:	f7ff fe80 	bl	8000724 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8000a24:	2036      	movs	r0, #54	; 0x36
 8000a26:	f7ff fea9 	bl	800077c <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8000a2a:	f107 030f 	add.w	r3, r7, #15
 8000a2e:	2101      	movs	r1, #1
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff febd 	bl	80007b0 <ST7735_WriteData>
  ST7735_Unselect();
 8000a36:	f7ff fe81 	bl	800073c <ST7735_Unselect>
}
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	2400024e 	.word	0x2400024e
 8000a48:	24000254 	.word	0x24000254
 8000a4c:	24000250 	.word	0x24000250
 8000a50:	24000249 	.word	0x24000249
 8000a54:	24000248 	.word	0x24000248
 8000a58:	2400024d 	.word	0x2400024d
 8000a5c:	2400024c 	.word	0x2400024c

08000a60 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000a60:	b082      	sub	sp, #8
 8000a62:	b590      	push	{r4, r7, lr}
 8000a64:	b089      	sub	sp, #36	; 0x24
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	637b      	str	r3, [r7, #52]	; 0x34
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	80fb      	strh	r3, [r7, #6]
 8000a6e:	460b      	mov	r3, r1
 8000a70:	80bb      	strh	r3, [r7, #4]
 8000a72:	4613      	mov	r3, r2
 8000a74:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000a76:	88fb      	ldrh	r3, [r7, #6]
 8000a78:	b2d8      	uxtb	r0, r3
 8000a7a:	88bb      	ldrh	r3, [r7, #4]
 8000a7c:	b2d9      	uxtb	r1, r3
 8000a7e:	88fb      	ldrh	r3, [r7, #6]
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000a86:	4413      	add	r3, r2
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	b2dc      	uxtb	r4, r3
 8000a8e:	88bb      	ldrh	r3, [r7, #4]
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000a96:	4413      	add	r3, r2
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	4622      	mov	r2, r4
 8000aa0:	f7ff feea 	bl	8000878 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
 8000aa8:	e043      	b.n	8000b32 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8000aaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000aac:	78fb      	ldrb	r3, [r7, #3]
 8000aae:	3b20      	subs	r3, #32
 8000ab0:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000ab4:	fb01 f303 	mul.w	r3, r1, r3
 8000ab8:	4619      	mov	r1, r3
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	440b      	add	r3, r1
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	4413      	add	r3, r2
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61bb      	str	r3, [r7, #24]
 8000aca:	e029      	b.n	8000b20 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8000acc:	697a      	ldr	r2, [r7, #20]
 8000ace:	69bb      	ldr	r3, [r7, #24]
 8000ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d00e      	beq.n	8000afa <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000adc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000ade:	0a1b      	lsrs	r3, r3, #8
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	743b      	strb	r3, [r7, #16]
 8000ae6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000aec:	f107 0310 	add.w	r3, r7, #16
 8000af0:	2102      	movs	r1, #2
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff fe5c 	bl	80007b0 <ST7735_WriteData>
 8000af8:	e00f      	b.n	8000b1a <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000afa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000afe:	0a1b      	lsrs	r3, r3, #8
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	733b      	strb	r3, [r7, #12]
 8000b06:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	2102      	movs	r1, #2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fe4b 	bl	80007b0 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	61bb      	str	r3, [r7, #24]
 8000b20:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000b24:	461a      	mov	r2, r3
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d3cf      	bcc.n	8000acc <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	61fb      	str	r3, [r7, #28]
 8000b32:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000b36:	461a      	mov	r2, r3
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d3b5      	bcc.n	8000aaa <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000b3e:	bf00      	nop
 8000b40:	bf00      	nop
 8000b42:	3724      	adds	r7, #36	; 0x24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000b4a:	b002      	add	sp, #8
 8000b4c:	4770      	bx	lr
	...

08000b50 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000b50:	b082      	sub	sp, #8
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b086      	sub	sp, #24
 8000b56:	af04      	add	r7, sp, #16
 8000b58:	603a      	str	r2, [r7, #0]
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	80fb      	strh	r3, [r7, #6]
 8000b60:	460b      	mov	r3, r1
 8000b62:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000b64:	f7ff fdde 	bl	8000724 <ST7735_Select>

    while(*str) {
 8000b68:	e033      	b.n	8000bd2 <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8000b6a:	88fb      	ldrh	r3, [r7, #6]
 8000b6c:	7d3a      	ldrb	r2, [r7, #20]
 8000b6e:	4413      	add	r3, r2
 8000b70:	4a1f      	ldr	r2, [pc, #124]	; (8000bf0 <ST7735_WriteString+0xa0>)
 8000b72:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b76:	4293      	cmp	r3, r2
 8000b78:	db16      	blt.n	8000ba8 <ST7735_WriteString+0x58>
            x = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000b7e:	7d7b      	ldrb	r3, [r7, #21]
 8000b80:	b29a      	uxth	r2, r3
 8000b82:	88bb      	ldrh	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8000b88:	88bb      	ldrh	r3, [r7, #4]
 8000b8a:	7d7a      	ldrb	r2, [r7, #21]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	4a19      	ldr	r2, [pc, #100]	; (8000bf4 <ST7735_WriteString+0xa4>)
 8000b90:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b94:	4293      	cmp	r3, r2
 8000b96:	da21      	bge.n	8000bdc <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b20      	cmp	r3, #32
 8000b9e:	d103      	bne.n	8000ba8 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	603b      	str	r3, [r7, #0]
                continue;
 8000ba6:	e014      	b.n	8000bd2 <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	781a      	ldrb	r2, [r3, #0]
 8000bac:	88b9      	ldrh	r1, [r7, #4]
 8000bae:	88f8      	ldrh	r0, [r7, #6]
 8000bb0:	8c3b      	ldrh	r3, [r7, #32]
 8000bb2:	9302      	str	r3, [sp, #8]
 8000bb4:	8bbb      	ldrh	r3, [r7, #28]
 8000bb6:	9301      	str	r3, [sp, #4]
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	9300      	str	r3, [sp, #0]
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	f7ff ff4f 	bl	8000a60 <ST7735_WriteChar>
        x += font.width;
 8000bc2:	7d3b      	ldrb	r3, [r7, #20]
 8000bc4:	b29a      	uxth	r2, r3
 8000bc6:	88fb      	ldrh	r3, [r7, #6]
 8000bc8:	4413      	add	r3, r2
 8000bca:	80fb      	strh	r3, [r7, #6]
        str++;
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d1c7      	bne.n	8000b6a <ST7735_WriteString+0x1a>
 8000bda:	e000      	b.n	8000bde <ST7735_WriteString+0x8e>
                break;
 8000bdc:	bf00      	nop
    }

    ST7735_Unselect();
 8000bde:	f7ff fdad 	bl	800073c <ST7735_Unselect>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bec:	b002      	add	sp, #8
 8000bee:	4770      	bx	lr
 8000bf0:	24000250 	.word	0x24000250
 8000bf4:	24000254 	.word	0x24000254

08000bf8 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4604      	mov	r4, r0
 8000c00:	4608      	mov	r0, r1
 8000c02:	4611      	mov	r1, r2
 8000c04:	461a      	mov	r2, r3
 8000c06:	4623      	mov	r3, r4
 8000c08:	80fb      	strh	r3, [r7, #6]
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	80bb      	strh	r3, [r7, #4]
 8000c0e:	460b      	mov	r3, r1
 8000c10:	807b      	strh	r3, [r7, #2]
 8000c12:	4613      	mov	r3, r2
 8000c14:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	4a37      	ldr	r2, [pc, #220]	; (8000cf8 <ST7735_FillRectangle+0x100>)
 8000c1a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	da66      	bge.n	8000cf0 <ST7735_FillRectangle+0xf8>
 8000c22:	88bb      	ldrh	r3, [r7, #4]
 8000c24:	4a35      	ldr	r2, [pc, #212]	; (8000cfc <ST7735_FillRectangle+0x104>)
 8000c26:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	da60      	bge.n	8000cf0 <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 8000c2e:	88fa      	ldrh	r2, [r7, #6]
 8000c30:	887b      	ldrh	r3, [r7, #2]
 8000c32:	4413      	add	r3, r2
 8000c34:	4a30      	ldr	r2, [pc, #192]	; (8000cf8 <ST7735_FillRectangle+0x100>)
 8000c36:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	dd06      	ble.n	8000c4c <ST7735_FillRectangle+0x54>
 8000c3e:	4b2e      	ldr	r3, [pc, #184]	; (8000cf8 <ST7735_FillRectangle+0x100>)
 8000c40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	88fb      	ldrh	r3, [r7, #6]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8000c4c:	88ba      	ldrh	r2, [r7, #4]
 8000c4e:	883b      	ldrh	r3, [r7, #0]
 8000c50:	4413      	add	r3, r2
 8000c52:	4a2a      	ldr	r2, [pc, #168]	; (8000cfc <ST7735_FillRectangle+0x104>)
 8000c54:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	dd06      	ble.n	8000c6a <ST7735_FillRectangle+0x72>
 8000c5c:	4b27      	ldr	r3, [pc, #156]	; (8000cfc <ST7735_FillRectangle+0x104>)
 8000c5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	88bb      	ldrh	r3, [r7, #4]
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000c6a:	f7ff fd5b 	bl	8000724 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000c6e:	88fb      	ldrh	r3, [r7, #6]
 8000c70:	b2d8      	uxtb	r0, r3
 8000c72:	88bb      	ldrh	r3, [r7, #4]
 8000c74:	b2d9      	uxtb	r1, r3
 8000c76:	88fb      	ldrh	r3, [r7, #6]
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	887b      	ldrh	r3, [r7, #2]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	4413      	add	r3, r2
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	3b01      	subs	r3, #1
 8000c84:	b2dc      	uxtb	r4, r3
 8000c86:	88bb      	ldrh	r3, [r7, #4]
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	883b      	ldrh	r3, [r7, #0]
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	4413      	add	r3, r2
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	3b01      	subs	r3, #1
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	4622      	mov	r2, r4
 8000c98:	f7ff fdee 	bl	8000878 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000c9c:	8c3b      	ldrh	r3, [r7, #32]
 8000c9e:	0a1b      	lsrs	r3, r3, #8
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	733b      	strb	r3, [r7, #12]
 8000ca6:	8c3b      	ldrh	r3, [r7, #32]
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000cac:	2201      	movs	r2, #1
 8000cae:	2108      	movs	r1, #8
 8000cb0:	4813      	ldr	r0, [pc, #76]	; (8000d00 <ST7735_FillRectangle+0x108>)
 8000cb2:	f004 fa8b 	bl	80051cc <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000cb6:	883b      	ldrh	r3, [r7, #0]
 8000cb8:	80bb      	strh	r3, [r7, #4]
 8000cba:	e013      	b.n	8000ce4 <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 8000cbc:	887b      	ldrh	r3, [r7, #2]
 8000cbe:	80fb      	strh	r3, [r7, #6]
 8000cc0:	e00a      	b.n	8000cd8 <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000cc2:	f107 010c 	add.w	r1, r7, #12
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cca:	2202      	movs	r2, #2
 8000ccc:	480d      	ldr	r0, [pc, #52]	; (8000d04 <ST7735_FillRectangle+0x10c>)
 8000cce:	f006 fe45 	bl	800795c <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000cd2:	88fb      	ldrh	r3, [r7, #6]
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	80fb      	strh	r3, [r7, #6]
 8000cd8:	88fb      	ldrh	r3, [r7, #6]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d1f1      	bne.n	8000cc2 <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 8000cde:	88bb      	ldrh	r3, [r7, #4]
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	80bb      	strh	r3, [r7, #4]
 8000ce4:	88bb      	ldrh	r3, [r7, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d1e8      	bne.n	8000cbc <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 8000cea:	f7ff fd27 	bl	800073c <ST7735_Unselect>
 8000cee:	e000      	b.n	8000cf2 <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 8000cf0:	bf00      	nop
}
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd90      	pop	{r4, r7, pc}
 8000cf8:	24000250 	.word	0x24000250
 8000cfc:	24000254 	.word	0x24000254
 8000d00:	58020000 	.word	0x58020000
 8000d04:	240003e8 	.word	0x240003e8

08000d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b088      	sub	sp, #32
 8000d0c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  SM_STATES state = INIT;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	73fb      	strb	r3, [r7, #15]

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000d12:	f000 fc8d 	bl	8001630 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000d16:	4b7b      	ldr	r3, [pc, #492]	; (8000f04 <main+0x1fc>)
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d11b      	bne.n	8000d5a <main+0x52>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d22:	f3bf 8f4f 	dsb	sy
}
 8000d26:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d28:	f3bf 8f6f 	isb	sy
}
 8000d2c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000d2e:	4b75      	ldr	r3, [pc, #468]	; (8000f04 <main+0x1fc>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000d36:	f3bf 8f4f 	dsb	sy
}
 8000d3a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d3c:	f3bf 8f6f 	isb	sy
}
 8000d40:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000d42:	4b70      	ldr	r3, [pc, #448]	; (8000f04 <main+0x1fc>)
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	4a6f      	ldr	r2, [pc, #444]	; (8000f04 <main+0x1fc>)
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d4e:	f3bf 8f4f 	dsb	sy
}
 8000d52:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d54:	f3bf 8f6f 	isb	sy
}
 8000d58:	e000      	b.n	8000d5c <main+0x54>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000d5a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000d5c:	4b69      	ldr	r3, [pc, #420]	; (8000f04 <main+0x1fc>)
 8000d5e:	695b      	ldr	r3, [r3, #20]
 8000d60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d138      	bne.n	8000dda <main+0xd2>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000d68:	4b66      	ldr	r3, [pc, #408]	; (8000f04 <main+0x1fc>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000d70:	f3bf 8f4f 	dsb	sy
}
 8000d74:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000d76:	4b63      	ldr	r3, [pc, #396]	; (8000f04 <main+0x1fc>)
 8000d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d7c:	60bb      	str	r3, [r7, #8]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	0b5b      	lsrs	r3, r3, #13
 8000d82:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000d86:	607b      	str	r3, [r7, #4]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	08db      	lsrs	r3, r3, #3
 8000d8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d90:	603b      	str	r3, [r7, #0]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	015a      	lsls	r2, r3, #5
 8000d96:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000d9a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000d9c:	683a      	ldr	r2, [r7, #0]
 8000d9e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000da0:	4958      	ldr	r1, [pc, #352]	; (8000f04 <main+0x1fc>)
 8000da2:	4313      	orrs	r3, r2
 8000da4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	1e5a      	subs	r2, r3, #1
 8000dac:	603a      	str	r2, [r7, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d1ef      	bne.n	8000d92 <main+0x8a>
    } while(sets-- != 0U);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	1e5a      	subs	r2, r3, #1
 8000db6:	607a      	str	r2, [r7, #4]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1e5      	bne.n	8000d88 <main+0x80>
  __ASM volatile ("dsb 0xF":::"memory");
 8000dbc:	f3bf 8f4f 	dsb	sy
}
 8000dc0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000dc2:	4b50      	ldr	r3, [pc, #320]	; (8000f04 <main+0x1fc>)
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	4a4f      	ldr	r2, [pc, #316]	; (8000f04 <main+0x1fc>)
 8000dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dcc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000dce:	f3bf 8f4f 	dsb	sy
}
 8000dd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dd4:	f3bf 8f6f 	isb	sy
}
 8000dd8:	e000      	b.n	8000ddc <main+0xd4>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000dda:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ddc:	f001 fb6a 	bl	80024b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de0:	f000 f8aa 	bl	8000f38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de4:	f000 fabe 	bl	8001364 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000de8:	f000 fa68 	bl	80012bc <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000dec:	f000 fab2 	bl	8001354 <MX_USB_OTG_HS_USB_Init>
  MX_LWIP_Init();
 8000df0:	f008 fca2 	bl	8009738 <MX_LWIP_Init>
  MX_FDCAN1_Init();
 8000df4:	f000 f91c 	bl	8001030 <MX_FDCAN1_Init>
  MX_TIM6_Init();
 8000df8:	f000 fa28 	bl	800124c <MX_TIM6_Init>
  MX_SPI1_Init();
 8000dfc:	f000 f9d0 	bl	80011a0 <MX_SPI1_Init>

  /* USER CODE BEGIN 2 */
  ST7735_Init(0);
 8000e00:	2000      	movs	r0, #0
 8000e02:	f7ff fd81 	bl	8000908 <ST7735_Init>
  fillScreen(BLACK);
 8000e06:	2000      	movs	r0, #0
 8000e08:	f7ff fc72 	bl	80006f0 <fillScreen>
  tcp_server_init();
 8000e0c:	f000 ff54 	bl	8001cb8 <tcp_server_init>
  //testAll();

  //Start Timer
  HAL_TIM_Base_Start(&htim6);
 8000e10:	483d      	ldr	r0, [pc, #244]	; (8000f08 <main+0x200>)
 8000e12:	f007 f8d5 	bl	8007fc0 <HAL_TIM_Base_Start>

  //Get current time
  timer_val = __HAL_TIM_GET_COUNTER(&htim6);
 8000e16:	4b3c      	ldr	r3, [pc, #240]	; (8000f08 <main+0x200>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	4b3b      	ldr	r3, [pc, #236]	; (8000f0c <main+0x204>)
 8000e20:	801a      	strh	r2, [r3, #0]

  //Prepare CAN data
  myTxData[0] = 0xFF;
 8000e22:	4b3b      	ldr	r3, [pc, #236]	; (8000f10 <main+0x208>)
 8000e24:	22ff      	movs	r2, #255	; 0xff
 8000e26:	701a      	strb	r2, [r3, #0]
  myTxData[1] = 0x00;
 8000e28:	4b39      	ldr	r3, [pc, #228]	; (8000f10 <main+0x208>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	705a      	strb	r2, [r3, #1]
  myTxData[2] = 0xFF;
 8000e2e:	4b38      	ldr	r3, [pc, #224]	; (8000f10 <main+0x208>)
 8000e30:	22ff      	movs	r2, #255	; 0xff
 8000e32:	709a      	strb	r2, [r3, #2]
  myTxData[3] = 0x00;
 8000e34:	4b36      	ldr	r3, [pc, #216]	; (8000f10 <main+0x208>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	70da      	strb	r2, [r3, #3]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch(state)
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d05c      	beq.n	8000efa <main+0x1f2>
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	dc5c      	bgt.n	8000efe <main+0x1f6>
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d002      	beq.n	8000e4e <main+0x146>
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d033      	beq.n	8000eb4 <main+0x1ac>
					 state = IDLE;
					 break;

		  case STATE_2: break;

		  default: break;
 8000e4c:	e057      	b.n	8000efe <main+0x1f6>
		  case INIT: print_to_serial("Ethernet + CAN!\r\n");
 8000e4e:	4831      	ldr	r0, [pc, #196]	; (8000f14 <main+0x20c>)
 8000e50:	f000 fbaa 	bl	80015a8 <print_to_serial>
		  	  	  	 ST7735_SetRotation(2);
 8000e54:	2002      	movs	r0, #2
 8000e56:	f7ff fd83 	bl	8000960 <ST7735_SetRotation>
		  			 ST7735_WriteString(0, 0, "Hello Ethernet!", Font_7x10, WHITE,BLACK);
 8000e5a:	4b2f      	ldr	r3, [pc, #188]	; (8000f18 <main+0x210>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	9202      	str	r2, [sp, #8]
 8000e60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e64:	9201      	str	r2, [sp, #4]
 8000e66:	685a      	ldr	r2, [r3, #4]
 8000e68:	9200      	str	r2, [sp, #0]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a2b      	ldr	r2, [pc, #172]	; (8000f1c <main+0x214>)
 8000e6e:	2100      	movs	r1, #0
 8000e70:	2000      	movs	r0, #0
 8000e72:	f7ff fe6d 	bl	8000b50 <ST7735_WriteString>
		  			 ST7735_WriteString(0, 12, "Hello CAN!", Font_7x10, WHITE,BLACK);
 8000e76:	4b28      	ldr	r3, [pc, #160]	; (8000f18 <main+0x210>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	9202      	str	r2, [sp, #8]
 8000e7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e80:	9201      	str	r2, [sp, #4]
 8000e82:	685a      	ldr	r2, [r3, #4]
 8000e84:	9200      	str	r2, [sp, #0]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a25      	ldr	r2, [pc, #148]	; (8000f20 <main+0x218>)
 8000e8a:	210c      	movs	r1, #12
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f7ff fe5f 	bl	8000b50 <ST7735_WriteString>
		  			 ST7735_WriteString(0, 22, "Hello SPI!", Font_7x10, WHITE,BLACK);
 8000e92:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <main+0x210>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	9202      	str	r2, [sp, #8]
 8000e98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e9c:	9201      	str	r2, [sp, #4]
 8000e9e:	685a      	ldr	r2, [r3, #4]
 8000ea0:	9200      	str	r2, [sp, #0]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a1f      	ldr	r2, [pc, #124]	; (8000f24 <main+0x21c>)
 8000ea6:	2116      	movs	r1, #22
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f7ff fe51 	bl	8000b50 <ST7735_WriteString>
					 state = IDLE;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	73fb      	strb	r3, [r7, #15]
					 break;
 8000eb2:	e025      	b.n	8000f00 <main+0x1f8>
			  	  	 ethernetif_input(&gnetif);
 8000eb4:	481c      	ldr	r0, [pc, #112]	; (8000f28 <main+0x220>)
 8000eb6:	f008 ffff 	bl	8009eb8 <ethernetif_input>
					 sys_check_timeouts();
 8000eba:	f011 f941 	bl	8012140 <sys_check_timeouts>
					 if(__HAL_TIM_GET_COUNTER(&htim6) - timer_val >= 10000)
 8000ebe:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <main+0x200>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec4:	4a11      	ldr	r2, [pc, #68]	; (8000f0c <main+0x204>)
 8000ec6:	8812      	ldrh	r2, [r2, #0]
 8000ec8:	1a9b      	subs	r3, r3, r2
 8000eca:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d910      	bls.n	8000ef4 <main+0x1ec>
					   	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 8000ed2:	2102      	movs	r1, #2
 8000ed4:	4815      	ldr	r0, [pc, #84]	; (8000f2c <main+0x224>)
 8000ed6:	f004 f992 	bl	80051fe <HAL_GPIO_TogglePin>
					   	  timer_val = __HAL_TIM_GET_COUNTER(&htim6);
 8000eda:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <main+0x200>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <main+0x204>)
 8000ee4:	801a      	strh	r2, [r3, #0]
					   	  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, myTxData);
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <main+0x208>)
 8000ee8:	4911      	ldr	r1, [pc, #68]	; (8000f30 <main+0x228>)
 8000eea:	4812      	ldr	r0, [pc, #72]	; (8000f34 <main+0x22c>)
 8000eec:	f003 fcec 	bl	80048c8 <HAL_FDCAN_AddMessageToTxFifoQ>
					   	  Toggle_CAN_Data();
 8000ef0:	f000 fb78 	bl	80015e4 <Toggle_CAN_Data>
					 state = IDLE;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	73fb      	strb	r3, [r7, #15]
					 break;
 8000ef8:	e002      	b.n	8000f00 <main+0x1f8>
		  case STATE_2: break;
 8000efa:	bf00      	nop
 8000efc:	e79d      	b.n	8000e3a <main+0x132>
		  default: break;
 8000efe:	bf00      	nop
	  switch(state)
 8000f00:	e79b      	b.n	8000e3a <main+0x132>
 8000f02:	bf00      	nop
 8000f04:	e000ed00 	.word	0xe000ed00
 8000f08:	24000398 	.word	0x24000398
 8000f0c:	240003e4 	.word	0x240003e4
 8000f10:	240002e8 	.word	0x240002e8
 8000f14:	08015d3c 	.word	0x08015d3c
 8000f18:	24000000 	.word	0x24000000
 8000f1c:	08015d50 	.word	0x08015d50
 8000f20:	08015d60 	.word	0x08015d60
 8000f24:	08015d6c 	.word	0x08015d6c
 8000f28:	24000530 	.word	0x24000530
 8000f2c:	58021000 	.word	0x58021000
 8000f30:	24000478 	.word	0x24000478
 8000f34:	240002f0 	.word	0x240002f0

08000f38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b09c      	sub	sp, #112	; 0x70
 8000f3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f42:	224c      	movs	r2, #76	; 0x4c
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f013 feae 	bl	8014ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	2220      	movs	r2, #32
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f013 fea8 	bl	8014ca8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f58:	2002      	movs	r0, #2
 8000f5a:	f004 f96b 	bl	8005234 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f5e:	2300      	movs	r3, #0
 8000f60:	603b      	str	r3, [r7, #0]
 8000f62:	4b31      	ldr	r3, [pc, #196]	; (8001028 <SystemClock_Config+0xf0>)
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f6a:	4a2f      	ldr	r2, [pc, #188]	; (8001028 <SystemClock_Config+0xf0>)
 8000f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f70:	6193      	str	r3, [r2, #24]
 8000f72:	4b2d      	ldr	r3, [pc, #180]	; (8001028 <SystemClock_Config+0xf0>)
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f7e:	bf00      	nop
 8000f80:	4b29      	ldr	r3, [pc, #164]	; (8001028 <SystemClock_Config+0xf0>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f8c:	d1f8      	bne.n	8000f80 <SystemClock_Config+0x48>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000f8e:	4b27      	ldr	r3, [pc, #156]	; (800102c <SystemClock_Config+0xf4>)
 8000f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f92:	f023 0303 	bic.w	r3, r3, #3
 8000f96:	4a25      	ldr	r2, [pc, #148]	; (800102c <SystemClock_Config+0xf4>)
 8000f98:	f043 0302 	orr.w	r3, r3, #2
 8000f9c:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000f9e:	2321      	movs	r3, #33	; 0x21
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fa2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000fa6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fac:	2302      	movs	r3, #2
 8000fae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000fb8:	2318      	movs	r3, #24
 8000fba:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000fc8:	230c      	movs	r3, #12
 8000fca:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f004 f965 	bl	80052a8 <HAL_RCC_OscConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000fe4:	f000 fb51 	bl	800168a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe8:	233f      	movs	r3, #63	; 0x3f
 8000fea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fec:	2303      	movs	r3, #3
 8000fee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ff4:	2308      	movs	r3, #8
 8000ff6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ff8:	2340      	movs	r3, #64	; 0x40
 8000ffa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ffc:	2340      	movs	r3, #64	; 0x40
 8000ffe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001000:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001004:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001006:	2340      	movs	r3, #64	; 0x40
 8001008:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2101      	movs	r1, #1
 800100e:	4618      	mov	r0, r3
 8001010:	f004 fcf6 	bl	8005a00 <HAL_RCC_ClockConfig>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800101a:	f000 fb36 	bl	800168a <Error_Handler>
  }
}
 800101e:	bf00      	nop
 8001020:	3770      	adds	r7, #112	; 0x70
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	58024800 	.word	0x58024800
 800102c:	58024400 	.word	0x58024400

08001030 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001036:	4b57      	ldr	r3, [pc, #348]	; (8001194 <MX_FDCAN1_Init+0x164>)
 8001038:	4a57      	ldr	r2, [pc, #348]	; (8001198 <MX_FDCAN1_Init+0x168>)
 800103a:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800103c:	4b55      	ldr	r3, [pc, #340]	; (8001194 <MX_FDCAN1_Init+0x164>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001042:	4b54      	ldr	r3, [pc, #336]	; (8001194 <MX_FDCAN1_Init+0x164>)
 8001044:	2200      	movs	r2, #0
 8001046:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001048:	4b52      	ldr	r3, [pc, #328]	; (8001194 <MX_FDCAN1_Init+0x164>)
 800104a:	2201      	movs	r2, #1
 800104c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800104e:	4b51      	ldr	r3, [pc, #324]	; (8001194 <MX_FDCAN1_Init+0x164>)
 8001050:	2200      	movs	r2, #0
 8001052:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8001054:	4b4f      	ldr	r3, [pc, #316]	; (8001194 <MX_FDCAN1_Init+0x164>)
 8001056:	2201      	movs	r2, #1
 8001058:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 800105a:	4b4e      	ldr	r3, [pc, #312]	; (8001194 <MX_FDCAN1_Init+0x164>)
 800105c:	2202      	movs	r2, #2
 800105e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8001060:	4b4c      	ldr	r3, [pc, #304]	; (8001194 <MX_FDCAN1_Init+0x164>)
 8001062:	2208      	movs	r2, #8
 8001064:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 31;
 8001066:	4b4b      	ldr	r3, [pc, #300]	; (8001194 <MX_FDCAN1_Init+0x164>)
 8001068:	221f      	movs	r2, #31
 800106a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 800106c:	4b49      	ldr	r3, [pc, #292]	; (8001194 <MX_FDCAN1_Init+0x164>)
 800106e:	2208      	movs	r2, #8
 8001070:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001072:	4b48      	ldr	r3, [pc, #288]	; (8001194 <MX_FDCAN1_Init+0x164>)
 8001074:	2201      	movs	r2, #1
 8001076:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001078:	4b46      	ldr	r3, [pc, #280]	; (8001194 <MX_FDCAN1_Init+0x164>)
 800107a:	2201      	movs	r2, #1
 800107c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800107e:	4b45      	ldr	r3, [pc, #276]	; (8001194 <MX_FDCAN1_Init+0x164>)
 8001080:	2201      	movs	r2, #1
 8001082:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001084:	4b43      	ldr	r3, [pc, #268]	; (8001194 <MX_FDCAN1_Init+0x164>)
 8001086:	2201      	movs	r2, #1
 8001088:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800108a:	4b42      	ldr	r3, [pc, #264]	; (8001194 <MX_FDCAN1_Init+0x164>)
 800108c:	2200      	movs	r2, #0
 800108e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8001090:	4b40      	ldr	r3, [pc, #256]	; (8001194 <MX_FDCAN1_Init+0x164>)
 8001092:	2201      	movs	r2, #1
 8001094:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001096:	4b3f      	ldr	r3, [pc, #252]	; (8001194 <MX_FDCAN1_Init+0x164>)
 8001098:	2200      	movs	r2, #0
 800109a:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 800109c:	4b3d      	ldr	r3, [pc, #244]	; (8001194 <MX_FDCAN1_Init+0x164>)
 800109e:	2201      	movs	r2, #1
 80010a0:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80010a2:	4b3c      	ldr	r3, [pc, #240]	; (8001194 <MX_FDCAN1_Init+0x164>)
 80010a4:	2204      	movs	r2, #4
 80010a6:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80010a8:	4b3a      	ldr	r3, [pc, #232]	; (8001194 <MX_FDCAN1_Init+0x164>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80010ae:	4b39      	ldr	r3, [pc, #228]	; (8001194 <MX_FDCAN1_Init+0x164>)
 80010b0:	2204      	movs	r2, #4
 80010b2:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80010b4:	4b37      	ldr	r3, [pc, #220]	; (8001194 <MX_FDCAN1_Init+0x164>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80010ba:	4b36      	ldr	r3, [pc, #216]	; (8001194 <MX_FDCAN1_Init+0x164>)
 80010bc:	2204      	movs	r2, #4
 80010be:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80010c0:	4b34      	ldr	r3, [pc, #208]	; (8001194 <MX_FDCAN1_Init+0x164>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80010c6:	4b33      	ldr	r3, [pc, #204]	; (8001194 <MX_FDCAN1_Init+0x164>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 80010cc:	4b31      	ldr	r3, [pc, #196]	; (8001194 <MX_FDCAN1_Init+0x164>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80010d2:	4b30      	ldr	r3, [pc, #192]	; (8001194 <MX_FDCAN1_Init+0x164>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80010d8:	4b2e      	ldr	r3, [pc, #184]	; (8001194 <MX_FDCAN1_Init+0x164>)
 80010da:	2204      	movs	r2, #4
 80010dc:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80010de:	482d      	ldr	r0, [pc, #180]	; (8001194 <MX_FDCAN1_Init+0x164>)
 80010e0:	f003 f942 	bl	8004368 <HAL_FDCAN_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 80010ea:	f000 face 	bl	800168a <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;

  /* Configure Rx filter */
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80010ee:	2300      	movs	r3, #0
 80010f0:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80010f6:	2302      	movs	r3, #2
 80010f8:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80010fa:	2301      	movs	r3, #1
 80010fc:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x123;
 80010fe:	f240 1323 	movw	r3, #291	; 0x123
 8001102:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x7FF;
 8001104:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001108:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 800110a:	463b      	mov	r3, r7
 800110c:	4619      	mov	r1, r3
 800110e:	4821      	ldr	r0, [pc, #132]	; (8001194 <MX_FDCAN1_Init+0x164>)
 8001110:	f003 fb0c 	bl	800472c <HAL_FDCAN_ConfigFilter>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_FDCAN1_Init+0xee>
  {
     Error_Handler();
 800111a:	f000 fab6 	bl	800168a <Error_Handler>
  }

  /* Configure global filter to reject all non-matching frames */
  HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 800111e:	2301      	movs	r3, #1
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	2202      	movs	r2, #2
 8001126:	2102      	movs	r1, #2
 8001128:	481a      	ldr	r0, [pc, #104]	; (8001194 <MX_FDCAN1_Init+0x164>)
 800112a:	f003 fb75 	bl	8004818 <HAL_FDCAN_ConfigGlobalFilter>

  /* Start the FDCAN module */
  if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800112e:	4819      	ldr	r0, [pc, #100]	; (8001194 <MX_FDCAN1_Init+0x164>)
 8001130:	f003 fb9f 	bl	8004872 <HAL_FDCAN_Start>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_FDCAN1_Init+0x10e>
  {
     Error_Handler();
 800113a:	f000 faa6 	bl	800168a <Error_Handler>
  }

  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800113e:	2200      	movs	r2, #0
 8001140:	2101      	movs	r1, #1
 8001142:	4814      	ldr	r0, [pc, #80]	; (8001194 <MX_FDCAN1_Init+0x164>)
 8001144:	f003 fc1c 	bl	8004980 <HAL_FDCAN_ActivateNotification>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_FDCAN1_Init+0x122>
  {
     Error_Handler();
 800114e:	f000 fa9c 	bl	800168a <Error_Handler>
  }

  /* Prepare Tx Header */
  TxHeader.Identifier = 0x322;
 8001152:	4b12      	ldr	r3, [pc, #72]	; (800119c <MX_FDCAN1_Init+0x16c>)
 8001154:	f240 3222 	movw	r2, #802	; 0x322
 8001158:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <MX_FDCAN1_Init+0x16c>)
 800115c:	2200      	movs	r2, #0
 800115e:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001160:	4b0e      	ldr	r3, [pc, #56]	; (800119c <MX_FDCAN1_Init+0x16c>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001166:	4b0d      	ldr	r3, [pc, #52]	; (800119c <MX_FDCAN1_Init+0x16c>)
 8001168:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800116c:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <MX_FDCAN1_Init+0x16c>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001174:	4b09      	ldr	r3, [pc, #36]	; (800119c <MX_FDCAN1_Init+0x16c>)
 8001176:	2200      	movs	r2, #0
 8001178:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800117a:	4b08      	ldr	r3, [pc, #32]	; (800119c <MX_FDCAN1_Init+0x16c>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <MX_FDCAN1_Init+0x16c>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8001186:	4b05      	ldr	r3, [pc, #20]	; (800119c <MX_FDCAN1_Init+0x16c>)
 8001188:	2200      	movs	r2, #0
 800118a:	621a      	str	r2, [r3, #32]

  /* USER CODE END FDCAN1_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	3720      	adds	r7, #32
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	240002f0 	.word	0x240002f0
 8001198:	4000a000 	.word	0x4000a000
 800119c:	24000478 	.word	0x24000478

080011a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011a4:	4b27      	ldr	r3, [pc, #156]	; (8001244 <MX_SPI1_Init+0xa4>)
 80011a6:	4a28      	ldr	r2, [pc, #160]	; (8001248 <MX_SPI1_Init+0xa8>)
 80011a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011aa:	4b26      	ldr	r3, [pc, #152]	; (8001244 <MX_SPI1_Init+0xa4>)
 80011ac:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80011b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80011b2:	4b24      	ldr	r3, [pc, #144]	; (8001244 <MX_SPI1_Init+0xa4>)
 80011b4:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80011b8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011ba:	4b22      	ldr	r3, [pc, #136]	; (8001244 <MX_SPI1_Init+0xa4>)
 80011bc:	2207      	movs	r2, #7
 80011be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011c0:	4b20      	ldr	r3, [pc, #128]	; (8001244 <MX_SPI1_Init+0xa4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011c6:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <MX_SPI1_Init+0xa4>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011cc:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <MX_SPI1_Init+0xa4>)
 80011ce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80011d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <MX_SPI1_Init+0xa4>)
 80011d6:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80011da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011dc:	4b19      	ldr	r3, [pc, #100]	; (8001244 <MX_SPI1_Init+0xa4>)
 80011de:	2200      	movs	r2, #0
 80011e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011e2:	4b18      	ldr	r3, [pc, #96]	; (8001244 <MX_SPI1_Init+0xa4>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011e8:	4b16      	ldr	r3, [pc, #88]	; (8001244 <MX_SPI1_Init+0xa4>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80011ee:	4b15      	ldr	r3, [pc, #84]	; (8001244 <MX_SPI1_Init+0xa4>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <MX_SPI1_Init+0xa4>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011fa:	4b12      	ldr	r3, [pc, #72]	; (8001244 <MX_SPI1_Init+0xa4>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001200:	4b10      	ldr	r3, [pc, #64]	; (8001244 <MX_SPI1_Init+0xa4>)
 8001202:	2200      	movs	r2, #0
 8001204:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001206:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <MX_SPI1_Init+0xa4>)
 8001208:	2200      	movs	r2, #0
 800120a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800120c:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <MX_SPI1_Init+0xa4>)
 800120e:	2200      	movs	r2, #0
 8001210:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001212:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <MX_SPI1_Init+0xa4>)
 8001214:	2200      	movs	r2, #0
 8001216:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001218:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <MX_SPI1_Init+0xa4>)
 800121a:	2200      	movs	r2, #0
 800121c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_SPI1_Init+0xa4>)
 8001220:	2200      	movs	r2, #0
 8001222:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001224:	4b07      	ldr	r3, [pc, #28]	; (8001244 <MX_SPI1_Init+0xa4>)
 8001226:	2200      	movs	r2, #0
 8001228:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <MX_SPI1_Init+0xa4>)
 800122c:	2200      	movs	r2, #0
 800122e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001230:	4804      	ldr	r0, [pc, #16]	; (8001244 <MX_SPI1_Init+0xa4>)
 8001232:	f006 fa8d 	bl	8007750 <HAL_SPI_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800123c:	f000 fa25 	bl	800168a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	240003e8 	.word	0x240003e8
 8001248:	40013000 	.word	0x40013000

0800124c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800125c:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <MX_TIM6_Init+0x68>)
 800125e:	4a16      	ldr	r2, [pc, #88]	; (80012b8 <MX_TIM6_Init+0x6c>)
 8001260:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000 - 1;
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <MX_TIM6_Init+0x68>)
 8001264:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001268:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126a:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <MX_TIM6_Init+0x68>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001270:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <MX_TIM6_Init+0x68>)
 8001272:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001276:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001278:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <MX_TIM6_Init+0x68>)
 800127a:	2200      	movs	r2, #0
 800127c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800127e:	480d      	ldr	r0, [pc, #52]	; (80012b4 <MX_TIM6_Init+0x68>)
 8001280:	f006 fe47 	bl	8007f12 <HAL_TIM_Base_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800128a:	f000 f9fe 	bl	800168a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	4619      	mov	r1, r3
 800129a:	4806      	ldr	r0, [pc, #24]	; (80012b4 <MX_TIM6_Init+0x68>)
 800129c:	f006 ffb4 	bl	8008208 <HAL_TIMEx_MasterConfigSynchronization>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80012a6:	f000 f9f0 	bl	800168a <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	24000398 	.word	0x24000398
 80012b8:	40001000 	.word	0x40001000

080012bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012c0:	4b22      	ldr	r3, [pc, #136]	; (800134c <MX_USART3_UART_Init+0x90>)
 80012c2:	4a23      	ldr	r2, [pc, #140]	; (8001350 <MX_USART3_UART_Init+0x94>)
 80012c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012c6:	4b21      	ldr	r3, [pc, #132]	; (800134c <MX_USART3_UART_Init+0x90>)
 80012c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012ce:	4b1f      	ldr	r3, [pc, #124]	; (800134c <MX_USART3_UART_Init+0x90>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012d4:	4b1d      	ldr	r3, [pc, #116]	; (800134c <MX_USART3_UART_Init+0x90>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012da:	4b1c      	ldr	r3, [pc, #112]	; (800134c <MX_USART3_UART_Init+0x90>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012e0:	4b1a      	ldr	r3, [pc, #104]	; (800134c <MX_USART3_UART_Init+0x90>)
 80012e2:	220c      	movs	r2, #12
 80012e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e6:	4b19      	ldr	r3, [pc, #100]	; (800134c <MX_USART3_UART_Init+0x90>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012ec:	4b17      	ldr	r3, [pc, #92]	; (800134c <MX_USART3_UART_Init+0x90>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012f2:	4b16      	ldr	r3, [pc, #88]	; (800134c <MX_USART3_UART_Init+0x90>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <MX_USART3_UART_Init+0x90>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012fe:	4b13      	ldr	r3, [pc, #76]	; (800134c <MX_USART3_UART_Init+0x90>)
 8001300:	2200      	movs	r2, #0
 8001302:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001304:	4811      	ldr	r0, [pc, #68]	; (800134c <MX_USART3_UART_Init+0x90>)
 8001306:	f007 f81b 	bl	8008340 <HAL_UART_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001310:	f000 f9bb 	bl	800168a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001314:	2100      	movs	r1, #0
 8001316:	480d      	ldr	r0, [pc, #52]	; (800134c <MX_USART3_UART_Init+0x90>)
 8001318:	f008 f944 	bl	80095a4 <HAL_UARTEx_SetTxFifoThreshold>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001322:	f000 f9b2 	bl	800168a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001326:	2100      	movs	r1, #0
 8001328:	4808      	ldr	r0, [pc, #32]	; (800134c <MX_USART3_UART_Init+0x90>)
 800132a:	f008 f979 	bl	8009620 <HAL_UARTEx_SetRxFifoThreshold>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001334:	f000 f9a9 	bl	800168a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001338:	4804      	ldr	r0, [pc, #16]	; (800134c <MX_USART3_UART_Init+0x90>)
 800133a:	f008 f8fa 	bl	8009532 <HAL_UARTEx_DisableFifoMode>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001344:	f000 f9a1 	bl	800168a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	24000258 	.word	0x24000258
 8001350:	40004800 	.word	0x40004800

08001354 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
	...

08001364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08c      	sub	sp, #48	; 0x30
 8001368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137a:	4b84      	ldr	r3, [pc, #528]	; (800158c <MX_GPIO_Init+0x228>)
 800137c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001380:	4a82      	ldr	r2, [pc, #520]	; (800158c <MX_GPIO_Init+0x228>)
 8001382:	f043 0304 	orr.w	r3, r3, #4
 8001386:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800138a:	4b80      	ldr	r3, [pc, #512]	; (800158c <MX_GPIO_Init+0x228>)
 800138c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001390:	f003 0304 	and.w	r3, r3, #4
 8001394:	61bb      	str	r3, [r7, #24]
 8001396:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001398:	4b7c      	ldr	r3, [pc, #496]	; (800158c <MX_GPIO_Init+0x228>)
 800139a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800139e:	4a7b      	ldr	r2, [pc, #492]	; (800158c <MX_GPIO_Init+0x228>)
 80013a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013a8:	4b78      	ldr	r3, [pc, #480]	; (800158c <MX_GPIO_Init+0x228>)
 80013aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b6:	4b75      	ldr	r3, [pc, #468]	; (800158c <MX_GPIO_Init+0x228>)
 80013b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013bc:	4a73      	ldr	r2, [pc, #460]	; (800158c <MX_GPIO_Init+0x228>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013c6:	4b71      	ldr	r3, [pc, #452]	; (800158c <MX_GPIO_Init+0x228>)
 80013c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d4:	4b6d      	ldr	r3, [pc, #436]	; (800158c <MX_GPIO_Init+0x228>)
 80013d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013da:	4a6c      	ldr	r2, [pc, #432]	; (800158c <MX_GPIO_Init+0x228>)
 80013dc:	f043 0302 	orr.w	r3, r3, #2
 80013e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013e4:	4b69      	ldr	r3, [pc, #420]	; (800158c <MX_GPIO_Init+0x228>)
 80013e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f2:	4b66      	ldr	r3, [pc, #408]	; (800158c <MX_GPIO_Init+0x228>)
 80013f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f8:	4a64      	ldr	r2, [pc, #400]	; (800158c <MX_GPIO_Init+0x228>)
 80013fa:	f043 0308 	orr.w	r3, r3, #8
 80013fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001402:	4b62      	ldr	r3, [pc, #392]	; (800158c <MX_GPIO_Init+0x228>)
 8001404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001408:	f003 0308 	and.w	r3, r3, #8
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001410:	4b5e      	ldr	r3, [pc, #376]	; (800158c <MX_GPIO_Init+0x228>)
 8001412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001416:	4a5d      	ldr	r2, [pc, #372]	; (800158c <MX_GPIO_Init+0x228>)
 8001418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800141c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001420:	4b5a      	ldr	r3, [pc, #360]	; (800158c <MX_GPIO_Init+0x228>)
 8001422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800142e:	4b57      	ldr	r3, [pc, #348]	; (800158c <MX_GPIO_Init+0x228>)
 8001430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001434:	4a55      	ldr	r2, [pc, #340]	; (800158c <MX_GPIO_Init+0x228>)
 8001436:	f043 0310 	orr.w	r3, r3, #16
 800143a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800143e:	4b53      	ldr	r3, [pc, #332]	; (800158c <MX_GPIO_Init+0x228>)
 8001440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001444:	f003 0310 	and.w	r3, r3, #16
 8001448:	603b      	str	r3, [r7, #0]
 800144a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_3, GPIO_PIN_RESET);
 800144c:	2200      	movs	r2, #0
 800144e:	2109      	movs	r1, #9
 8001450:	484f      	ldr	r0, [pc, #316]	; (8001590 <MX_GPIO_Init+0x22c>)
 8001452:	f003 febb 	bl	80051cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	2108      	movs	r1, #8
 800145a:	484e      	ldr	r0, [pc, #312]	; (8001594 <MX_GPIO_Init+0x230>)
 800145c:	f003 feb6 	bl	80051cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	f244 0101 	movw	r1, #16385	; 0x4001
 8001466:	484c      	ldr	r0, [pc, #304]	; (8001598 <MX_GPIO_Init+0x234>)
 8001468:	f003 feb0 	bl	80051cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800146c:	2200      	movs	r2, #0
 800146e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001472:	484a      	ldr	r0, [pc, #296]	; (800159c <MX_GPIO_Init+0x238>)
 8001474:	f003 feaa 	bl	80051cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001478:	2200      	movs	r2, #0
 800147a:	2102      	movs	r1, #2
 800147c:	4848      	ldr	r0, [pc, #288]	; (80015a0 <MX_GPIO_Init+0x23c>)
 800147e:	f003 fea5 	bl	80051cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001482:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001486:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001488:	2300      	movs	r3, #0
 800148a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001490:	f107 031c 	add.w	r3, r7, #28
 8001494:	4619      	mov	r1, r3
 8001496:	483e      	ldr	r0, [pc, #248]	; (8001590 <MX_GPIO_Init+0x22c>)
 8001498:	f003 fcf0 	bl	8004e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 800149c:	2309      	movs	r3, #9
 800149e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ac:	f107 031c 	add.w	r3, r7, #28
 80014b0:	4619      	mov	r1, r3
 80014b2:	4837      	ldr	r0, [pc, #220]	; (8001590 <MX_GPIO_Init+0x22c>)
 80014b4:	f003 fce2 	bl	8004e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014b8:	2308      	movs	r3, #8
 80014ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014bc:	2301      	movs	r3, #1
 80014be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c8:	f107 031c 	add.w	r3, r7, #28
 80014cc:	4619      	mov	r1, r3
 80014ce:	4831      	ldr	r0, [pc, #196]	; (8001594 <MX_GPIO_Init+0x230>)
 80014d0:	f003 fcd4 	bl	8004e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80014d4:	f244 0301 	movw	r3, #16385	; 0x4001
 80014d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014da:	2301      	movs	r3, #1
 80014dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e6:	f107 031c 	add.w	r3, r7, #28
 80014ea:	4619      	mov	r1, r3
 80014ec:	482a      	ldr	r0, [pc, #168]	; (8001598 <MX_GPIO_Init+0x234>)
 80014ee:	f003 fcc5 	bl	8004e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80014f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001504:	f107 031c 	add.w	r3, r7, #28
 8001508:	4619      	mov	r1, r3
 800150a:	4824      	ldr	r0, [pc, #144]	; (800159c <MX_GPIO_Init+0x238>)
 800150c:	f003 fcb6 	bl	8004e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001514:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001518:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800151e:	f107 031c 	add.w	r3, r7, #28
 8001522:	4619      	mov	r1, r3
 8001524:	481f      	ldr	r0, [pc, #124]	; (80015a4 <MX_GPIO_Init+0x240>)
 8001526:	f003 fca9 	bl	8004e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800152a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800152e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001530:	2300      	movs	r3, #0
 8001532:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001538:	f107 031c 	add.w	r3, r7, #28
 800153c:	4619      	mov	r1, r3
 800153e:	4815      	ldr	r0, [pc, #84]	; (8001594 <MX_GPIO_Init+0x230>)
 8001540:	f003 fc9c 	bl	8004e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001544:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154a:	2302      	movs	r3, #2
 800154c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001552:	2300      	movs	r3, #0
 8001554:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001556:	230a      	movs	r3, #10
 8001558:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800155a:	f107 031c 	add.w	r3, r7, #28
 800155e:	4619      	mov	r1, r3
 8001560:	480c      	ldr	r0, [pc, #48]	; (8001594 <MX_GPIO_Init+0x230>)
 8001562:	f003 fc8b 	bl	8004e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8001566:	2302      	movs	r3, #2
 8001568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156a:	2301      	movs	r3, #1
 800156c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8001576:	f107 031c 	add.w	r3, r7, #28
 800157a:	4619      	mov	r1, r3
 800157c:	4808      	ldr	r0, [pc, #32]	; (80015a0 <MX_GPIO_Init+0x23c>)
 800157e:	f003 fc7d 	bl	8004e7c <HAL_GPIO_Init>

}
 8001582:	bf00      	nop
 8001584:	3730      	adds	r7, #48	; 0x30
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	58024400 	.word	0x58024400
 8001590:	58020800 	.word	0x58020800
 8001594:	58020000 	.word	0x58020000
 8001598:	58020400 	.word	0x58020400
 800159c:	58020c00 	.word	0x58020c00
 80015a0:	58021000 	.word	0x58021000
 80015a4:	58021800 	.word	0x58021800

080015a8 <print_to_serial>:
  * @brief print_to_serial
  * @param String to be printed to serial port
  * @retval None
  */
static void print_to_serial(char *myString)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b09c      	sub	sp, #112	; 0x70
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	uint8_t buffer[100];

	strcpy((char*)buffer, myString);
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f013 fbd6 	bl	8014d68 <strcpy>
	HAL_UART_Transmit(&huart3, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe fea5 	bl	8000310 <strlen>
 80015c6:	4603      	mov	r3, r0
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	f107 010c 	add.w	r1, r7, #12
 80015ce:	f04f 33ff 	mov.w	r3, #4294967295
 80015d2:	4803      	ldr	r0, [pc, #12]	; (80015e0 <print_to_serial+0x38>)
 80015d4:	f006 ff04 	bl	80083e0 <HAL_UART_Transmit>

}
 80015d8:	bf00      	nop
 80015da:	3770      	adds	r7, #112	; 0x70
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	24000258 	.word	0x24000258

080015e4 <Toggle_CAN_Data>:
  * @brief Toggle_CAN_Data
  * @param None
  * @retval None
  */
static void Toggle_CAN_Data(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
	if(myTxData[0] == 0x00)
 80015e8:	4b10      	ldr	r3, [pc, #64]	; (800162c <Toggle_CAN_Data+0x48>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d10c      	bne.n	800160a <Toggle_CAN_Data+0x26>
	{
		myTxData[0] = 0xFF;
 80015f0:	4b0e      	ldr	r3, [pc, #56]	; (800162c <Toggle_CAN_Data+0x48>)
 80015f2:	22ff      	movs	r2, #255	; 0xff
 80015f4:	701a      	strb	r2, [r3, #0]
        myTxData[1] = 0x00;
 80015f6:	4b0d      	ldr	r3, [pc, #52]	; (800162c <Toggle_CAN_Data+0x48>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	705a      	strb	r2, [r3, #1]
		myTxData[2] = 0xFF;
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <Toggle_CAN_Data+0x48>)
 80015fe:	22ff      	movs	r2, #255	; 0xff
 8001600:	709a      	strb	r2, [r3, #2]
		myTxData[3] = 0x00;
 8001602:	4b0a      	ldr	r3, [pc, #40]	; (800162c <Toggle_CAN_Data+0x48>)
 8001604:	2200      	movs	r2, #0
 8001606:	70da      	strb	r2, [r3, #3]
		myTxData[0] = 0x00;
		myTxData[1] = 0xFF;
		myTxData[2] = 0x00;
		myTxData[3] = 0xFF;
	}
}
 8001608:	e00b      	b.n	8001622 <Toggle_CAN_Data+0x3e>
		myTxData[0] = 0x00;
 800160a:	4b08      	ldr	r3, [pc, #32]	; (800162c <Toggle_CAN_Data+0x48>)
 800160c:	2200      	movs	r2, #0
 800160e:	701a      	strb	r2, [r3, #0]
		myTxData[1] = 0xFF;
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <Toggle_CAN_Data+0x48>)
 8001612:	22ff      	movs	r2, #255	; 0xff
 8001614:	705a      	strb	r2, [r3, #1]
		myTxData[2] = 0x00;
 8001616:	4b05      	ldr	r3, [pc, #20]	; (800162c <Toggle_CAN_Data+0x48>)
 8001618:	2200      	movs	r2, #0
 800161a:	709a      	strb	r2, [r3, #2]
		myTxData[3] = 0xFF;
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <Toggle_CAN_Data+0x48>)
 800161e:	22ff      	movs	r2, #255	; 0xff
 8001620:	70da      	strb	r2, [r3, #3]
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	240002e8 	.word	0x240002e8

08001630 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001636:	463b      	mov	r3, r7
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001642:	f001 f8e5 	bl	8002810 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001646:	2301      	movs	r3, #1
 8001648:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800164a:	2300      	movs	r3, #0
 800164c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 800164e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001652:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8001654:	230e      	movs	r3, #14
 8001656:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001658:	2300      	movs	r3, #0
 800165a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800165c:	2301      	movs	r3, #1
 800165e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001660:	2303      	movs	r3, #3
 8001662:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001664:	2301      	movs	r3, #1
 8001666:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001668:	2301      	movs	r3, #1
 800166a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800166c:	2300      	movs	r3, #0
 800166e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001674:	463b      	mov	r3, r7
 8001676:	4618      	mov	r0, r3
 8001678:	f001 f902 	bl	8002880 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800167c:	2004      	movs	r0, #4
 800167e:	f001 f8df 	bl	8002840 <HAL_MPU_Enable>

}
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800168e:	b672      	cpsid	i
}
 8001690:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001692:	e7fe      	b.n	8001692 <Error_Handler+0x8>

08001694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <HAL_MspInit+0x30>)
 800169c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016a0:	4a08      	ldr	r2, [pc, #32]	; (80016c4 <HAL_MspInit+0x30>)
 80016a2:	f043 0302 	orr.w	r3, r3, #2
 80016a6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_MspInit+0x30>)
 80016ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	58024400 	.word	0x58024400

080016c8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b0b6      	sub	sp, #216	; 0xd8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016e0:	f107 0310 	add.w	r3, r7, #16
 80016e4:	22b4      	movs	r2, #180	; 0xb4
 80016e6:	2100      	movs	r1, #0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f013 fadd 	bl	8014ca8 <memset>
  if(hfdcan->Instance==FDCAN1)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a2d      	ldr	r2, [pc, #180]	; (80017a8 <HAL_FDCAN_MspInit+0xe0>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d152      	bne.n	800179e <HAL_FDCAN_MspInit+0xd6>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80016f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016fc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80016fe:	2301      	movs	r3, #1
 8001700:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 25;
 8001702:	2319      	movs	r3, #25
 8001704:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001706:	2302      	movs	r3, #2
 8001708:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 5;
 800170a:	2305      	movs	r3, #5
 800170c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800170e:	2302      	movs	r3, #2
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001712:	23c0      	movs	r3, #192	; 0xc0
 8001714:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001716:	2300      	movs	r3, #0
 8001718:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 800171e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001722:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001724:	f107 0310 	add.w	r3, r7, #16
 8001728:	4618      	mov	r0, r3
 800172a:	f004 fcf5 	bl	8006118 <HAL_RCCEx_PeriphCLKConfig>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <HAL_FDCAN_MspInit+0x70>
    {
      Error_Handler();
 8001734:	f7ff ffa9 	bl	800168a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001738:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <HAL_FDCAN_MspInit+0xe4>)
 800173a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800173e:	4a1b      	ldr	r2, [pc, #108]	; (80017ac <HAL_FDCAN_MspInit+0xe4>)
 8001740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001744:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001748:	4b18      	ldr	r3, [pc, #96]	; (80017ac <HAL_FDCAN_MspInit+0xe4>)
 800174a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800174e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <HAL_FDCAN_MspInit+0xe4>)
 8001758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800175c:	4a13      	ldr	r2, [pc, #76]	; (80017ac <HAL_FDCAN_MspInit+0xe4>)
 800175e:	f043 0308 	orr.w	r3, r3, #8
 8001762:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001766:	4b11      	ldr	r3, [pc, #68]	; (80017ac <HAL_FDCAN_MspInit+0xe4>)
 8001768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800176c:	f003 0308 	and.w	r3, r3, #8
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001774:	2303      	movs	r3, #3
 8001776:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177a:	2302      	movs	r3, #2
 800177c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	2300      	movs	r3, #0
 8001788:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800178c:	2309      	movs	r3, #9
 800178e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001792:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001796:	4619      	mov	r1, r3
 8001798:	4805      	ldr	r0, [pc, #20]	; (80017b0 <HAL_FDCAN_MspInit+0xe8>)
 800179a:	f003 fb6f 	bl	8004e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800179e:	bf00      	nop
 80017a0:	37d8      	adds	r7, #216	; 0xd8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	4000a000 	.word	0x4000a000
 80017ac:	58024400 	.word	0x58024400
 80017b0:	58020c00 	.word	0x58020c00

080017b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b0b8      	sub	sp, #224	; 0xe0
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017cc:	f107 0318 	add.w	r3, r7, #24
 80017d0:	22b4      	movs	r2, #180	; 0xb4
 80017d2:	2100      	movs	r1, #0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f013 fa67 	bl	8014ca8 <memset>
  if(hspi->Instance==SPI1)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a36      	ldr	r2, [pc, #216]	; (80018b8 <HAL_SPI_MspInit+0x104>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d165      	bne.n	80018b0 <HAL_SPI_MspInit+0xfc>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80017e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ee:	f107 0318 	add.w	r3, r7, #24
 80017f2:	4618      	mov	r0, r3
 80017f4:	f004 fc90 	bl	8006118 <HAL_RCCEx_PeriphCLKConfig>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80017fe:	f7ff ff44 	bl	800168a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001802:	4b2e      	ldr	r3, [pc, #184]	; (80018bc <HAL_SPI_MspInit+0x108>)
 8001804:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001808:	4a2c      	ldr	r2, [pc, #176]	; (80018bc <HAL_SPI_MspInit+0x108>)
 800180a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800180e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001812:	4b2a      	ldr	r3, [pc, #168]	; (80018bc <HAL_SPI_MspInit+0x108>)
 8001814:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001818:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001820:	4b26      	ldr	r3, [pc, #152]	; (80018bc <HAL_SPI_MspInit+0x108>)
 8001822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001826:	4a25      	ldr	r2, [pc, #148]	; (80018bc <HAL_SPI_MspInit+0x108>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001830:	4b22      	ldr	r3, [pc, #136]	; (80018bc <HAL_SPI_MspInit+0x108>)
 8001832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800183e:	4b1f      	ldr	r3, [pc, #124]	; (80018bc <HAL_SPI_MspInit+0x108>)
 8001840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001844:	4a1d      	ldr	r2, [pc, #116]	; (80018bc <HAL_SPI_MspInit+0x108>)
 8001846:	f043 0308 	orr.w	r3, r3, #8
 800184a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800184e:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <HAL_SPI_MspInit+0x108>)
 8001850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001854:	f003 0308 	and.w	r3, r3, #8
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800185c:	2320      	movs	r3, #32
 800185e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001862:	2302      	movs	r3, #2
 8001864:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	2300      	movs	r3, #0
 8001870:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001874:	2305      	movs	r3, #5
 8001876:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800187e:	4619      	mov	r1, r3
 8001880:	480f      	ldr	r0, [pc, #60]	; (80018c0 <HAL_SPI_MspInit+0x10c>)
 8001882:	f003 fafb 	bl	8004e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001886:	2380      	movs	r3, #128	; 0x80
 8001888:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	2302      	movs	r3, #2
 800188e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	2300      	movs	r3, #0
 800189a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800189e:	2305      	movs	r3, #5
 80018a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018a8:	4619      	mov	r1, r3
 80018aa:	4806      	ldr	r0, [pc, #24]	; (80018c4 <HAL_SPI_MspInit+0x110>)
 80018ac:	f003 fae6 	bl	8004e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80018b0:	bf00      	nop
 80018b2:	37e0      	adds	r7, #224	; 0xe0
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40013000 	.word	0x40013000
 80018bc:	58024400 	.word	0x58024400
 80018c0:	58020000 	.word	0x58020000
 80018c4:	58020c00 	.word	0x58020c00

080018c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0b      	ldr	r2, [pc, #44]	; (8001904 <HAL_TIM_Base_MspInit+0x3c>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d10e      	bne.n	80018f8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80018da:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <HAL_TIM_Base_MspInit+0x40>)
 80018dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018e0:	4a09      	ldr	r2, [pc, #36]	; (8001908 <HAL_TIM_Base_MspInit+0x40>)
 80018e2:	f043 0310 	orr.w	r3, r3, #16
 80018e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018ea:	4b07      	ldr	r3, [pc, #28]	; (8001908 <HAL_TIM_Base_MspInit+0x40>)
 80018ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018f0:	f003 0310 	and.w	r3, r3, #16
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	40001000 	.word	0x40001000
 8001908:	58024400 	.word	0x58024400

0800190c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b0b6      	sub	sp, #216	; 0xd8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001924:	f107 0310 	add.w	r3, r7, #16
 8001928:	22b4      	movs	r2, #180	; 0xb4
 800192a:	2100      	movs	r1, #0
 800192c:	4618      	mov	r0, r3
 800192e:	f013 f9bb 	bl	8014ca8 <memset>
  if(huart->Instance==USART3)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a25      	ldr	r2, [pc, #148]	; (80019cc <HAL_UART_MspInit+0xc0>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d142      	bne.n	80019c2 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800193c:	2302      	movs	r3, #2
 800193e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001940:	2300      	movs	r3, #0
 8001942:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001946:	f107 0310 	add.w	r3, r7, #16
 800194a:	4618      	mov	r0, r3
 800194c:	f004 fbe4 	bl	8006118 <HAL_RCCEx_PeriphCLKConfig>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001956:	f7ff fe98 	bl	800168a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800195a:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <HAL_UART_MspInit+0xc4>)
 800195c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001960:	4a1b      	ldr	r2, [pc, #108]	; (80019d0 <HAL_UART_MspInit+0xc4>)
 8001962:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001966:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800196a:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <HAL_UART_MspInit+0xc4>)
 800196c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001970:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001978:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <HAL_UART_MspInit+0xc4>)
 800197a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800197e:	4a14      	ldr	r2, [pc, #80]	; (80019d0 <HAL_UART_MspInit+0xc4>)
 8001980:	f043 0308 	orr.w	r3, r3, #8
 8001984:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001988:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <HAL_UART_MspInit+0xc4>)
 800198a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001996:	f44f 7340 	mov.w	r3, #768	; 0x300
 800199a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019b0:	2307      	movs	r3, #7
 80019b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019b6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80019ba:	4619      	mov	r1, r3
 80019bc:	4805      	ldr	r0, [pc, #20]	; (80019d4 <HAL_UART_MspInit+0xc8>)
 80019be:	f003 fa5d 	bl	8004e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019c2:	bf00      	nop
 80019c4:	37d8      	adds	r7, #216	; 0xd8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40004800 	.word	0x40004800
 80019d0:	58024400 	.word	0x58024400
 80019d4:	58020c00 	.word	0x58020c00

080019d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <NMI_Handler+0x4>

080019de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e2:	e7fe      	b.n	80019e2 <HardFault_Handler+0x4>

080019e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <MemManage_Handler+0x4>

080019ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ee:	e7fe      	b.n	80019ee <BusFault_Handler+0x4>

080019f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <UsageFault_Handler+0x4>

080019f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a24:	f000 fdb8 	bl	8002598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
	return 1;
 8001a30:	2301      	movs	r3, #1
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <_kill>:

int _kill(int pid, int sig)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a46:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <_kill+0x20>)
 8001a48:	2216      	movs	r2, #22
 8001a4a:	601a      	str	r2, [r3, #0]
	return -1;
 8001a4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	24003630 	.word	0x24003630

08001a60 <_exit>:

void _exit (int status)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a68:	f04f 31ff 	mov.w	r1, #4294967295
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff ffe5 	bl	8001a3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a72:	e7fe      	b.n	8001a72 <_exit+0x12>

08001a74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	e00a      	b.n	8001a9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a86:	f3af 8000 	nop.w
 8001a8a:	4601      	mov	r1, r0
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	1c5a      	adds	r2, r3, #1
 8001a90:	60ba      	str	r2, [r7, #8]
 8001a92:	b2ca      	uxtb	r2, r1
 8001a94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	dbf0      	blt.n	8001a86 <_read+0x12>
	}

return len;
 8001aa4:	687b      	ldr	r3, [r7, #4]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	e009      	b.n	8001ad4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	1c5a      	adds	r2, r3, #1
 8001ac4:	60ba      	str	r2, [r7, #8]
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	697a      	ldr	r2, [r7, #20]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	dbf1      	blt.n	8001ac0 <_write+0x12>
	}
	return len;
 8001adc:	687b      	ldr	r3, [r7, #4]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <_close>:

int _close(int file)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
	return -1;
 8001aee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b0e:	605a      	str	r2, [r3, #4]
	return 0;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <_isatty>:

int _isatty(int file)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
	return 1;
 8001b26:	2301      	movs	r3, #1
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
	return 0;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b087      	sub	sp, #28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b58:	4a14      	ldr	r2, [pc, #80]	; (8001bac <_sbrk+0x5c>)
 8001b5a:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <_sbrk+0x60>)
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b64:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <_sbrk+0x64>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d102      	bne.n	8001b72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <_sbrk+0x64>)
 8001b6e:	4a12      	ldr	r2, [pc, #72]	; (8001bb8 <_sbrk+0x68>)
 8001b70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b72:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <_sbrk+0x64>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d205      	bcs.n	8001b8c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001b80:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <_sbrk+0x6c>)
 8001b82:	220c      	movs	r2, #12
 8001b84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8a:	e009      	b.n	8001ba0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <_sbrk+0x64>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b92:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <_sbrk+0x64>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	4a06      	ldr	r2, [pc, #24]	; (8001bb4 <_sbrk+0x64>)
 8001b9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	371c      	adds	r7, #28
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	24050000 	.word	0x24050000
 8001bb0:	00000400 	.word	0x00000400
 8001bb4:	240000b8 	.word	0x240000b8
 8001bb8:	24003640 	.word	0x24003640
 8001bbc:	24003630 	.word	0x24003630

08001bc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001bc4:	4b34      	ldr	r3, [pc, #208]	; (8001c98 <SystemInit+0xd8>)
 8001bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bca:	4a33      	ldr	r2, [pc, #204]	; (8001c98 <SystemInit+0xd8>)
 8001bcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bd4:	4b31      	ldr	r3, [pc, #196]	; (8001c9c <SystemInit+0xdc>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 030f 	and.w	r3, r3, #15
 8001bdc:	2b06      	cmp	r3, #6
 8001bde:	d807      	bhi.n	8001bf0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001be0:	4b2e      	ldr	r3, [pc, #184]	; (8001c9c <SystemInit+0xdc>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f023 030f 	bic.w	r3, r3, #15
 8001be8:	4a2c      	ldr	r2, [pc, #176]	; (8001c9c <SystemInit+0xdc>)
 8001bea:	f043 0307 	orr.w	r3, r3, #7
 8001bee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001bf0:	4b2b      	ldr	r3, [pc, #172]	; (8001ca0 <SystemInit+0xe0>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a2a      	ldr	r2, [pc, #168]	; (8001ca0 <SystemInit+0xe0>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001bfc:	4b28      	ldr	r3, [pc, #160]	; (8001ca0 <SystemInit+0xe0>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001c02:	4b27      	ldr	r3, [pc, #156]	; (8001ca0 <SystemInit+0xe0>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	4926      	ldr	r1, [pc, #152]	; (8001ca0 <SystemInit+0xe0>)
 8001c08:	4b26      	ldr	r3, [pc, #152]	; (8001ca4 <SystemInit+0xe4>)
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c0e:	4b23      	ldr	r3, [pc, #140]	; (8001c9c <SystemInit+0xdc>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d007      	beq.n	8001c2a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c1a:	4b20      	ldr	r3, [pc, #128]	; (8001c9c <SystemInit+0xdc>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f023 030f 	bic.w	r3, r3, #15
 8001c22:	4a1e      	ldr	r2, [pc, #120]	; (8001c9c <SystemInit+0xdc>)
 8001c24:	f043 0307 	orr.w	r3, r3, #7
 8001c28:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001c2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ca0 <SystemInit+0xe0>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001c30:	4b1b      	ldr	r3, [pc, #108]	; (8001ca0 <SystemInit+0xe0>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001c36:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <SystemInit+0xe0>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001c3c:	4b18      	ldr	r3, [pc, #96]	; (8001ca0 <SystemInit+0xe0>)
 8001c3e:	4a1a      	ldr	r2, [pc, #104]	; (8001ca8 <SystemInit+0xe8>)
 8001c40:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001c42:	4b17      	ldr	r3, [pc, #92]	; (8001ca0 <SystemInit+0xe0>)
 8001c44:	4a19      	ldr	r2, [pc, #100]	; (8001cac <SystemInit+0xec>)
 8001c46:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001c48:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <SystemInit+0xe0>)
 8001c4a:	4a19      	ldr	r2, [pc, #100]	; (8001cb0 <SystemInit+0xf0>)
 8001c4c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001c4e:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <SystemInit+0xe0>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001c54:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <SystemInit+0xe0>)
 8001c56:	4a16      	ldr	r2, [pc, #88]	; (8001cb0 <SystemInit+0xf0>)
 8001c58:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001c5a:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <SystemInit+0xe0>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001c60:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <SystemInit+0xe0>)
 8001c62:	4a13      	ldr	r2, [pc, #76]	; (8001cb0 <SystemInit+0xf0>)
 8001c64:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c66:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <SystemInit+0xe0>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <SystemInit+0xe0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a0b      	ldr	r2, [pc, #44]	; (8001ca0 <SystemInit+0xe0>)
 8001c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c76:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c78:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <SystemInit+0xe0>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	; (8001cb4 <SystemInit+0xf4>)
 8001c80:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001c84:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c86:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <SystemInit+0xd8>)
 8001c88:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c8c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001c8e:	bf00      	nop
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000ed00 	.word	0xe000ed00
 8001c9c:	52002000 	.word	0x52002000
 8001ca0:	58024400 	.word	0x58024400
 8001ca4:	eaf6ed7f 	.word	0xeaf6ed7f
 8001ca8:	02020200 	.word	0x02020200
 8001cac:	01ff0000 	.word	0x01ff0000
 8001cb0:	01010280 	.word	0x01010280
 8001cb4:	52004000 	.word	0x52004000

08001cb8 <tcp_server_init>:
   3. Listen for the  incoming requests by the client
   4. Accept the Request, and now the server is ready for the data transfer
 */

void tcp_server_init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;

	tpcb = tcp_new();
 8001cbe:	f00b fc91 	bl	800d5e4 <tcp_new>
 8001cc2:	60f8      	str	r0, [r7, #12]

	err_t err;

	/* 2. bind _pcb to port 7 ( protocol) */
	ip_addr_t myIPADDR;
	IP_ADDR4(&myIPADDR, 192, 168, 1, 200);
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <tcp_server_init+0x4c>)
 8001cc6:	607b      	str	r3, [r7, #4]
	err = tcp_bind(tpcb, &myIPADDR, 10);
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	220a      	movs	r2, #10
 8001ccc:	4619      	mov	r1, r3
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f00a fbe4 	bl	800c49c <tcp_bind>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	72fb      	strb	r3, [r7, #11]

	if (err == ERR_OK)
 8001cd8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d109      	bne.n	8001cf4 <tcp_server_init+0x3c>
	{
		/* 3. start tcp listening for _pcb */
		tpcb = tcp_listen(tpcb);
 8001ce0:	21ff      	movs	r1, #255	; 0xff
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f00a fc92 	bl	800c60c <tcp_listen_with_backlog>
 8001ce8:	60f8      	str	r0, [r7, #12]

		/* 4. initialize LwIP tcp_accept callback function */
		tcp_accept(tpcb, tcp_server_accept);
 8001cea:	4907      	ldr	r1, [pc, #28]	; (8001d08 <tcp_server_init+0x50>)
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f00b fcf9 	bl	800d6e4 <tcp_accept>
	else
	{
		/* deallocate the pcb */
		memp_free(MEMP_TCP_PCB, tpcb);
	}
}
 8001cf2:	e003      	b.n	8001cfc <tcp_server_init+0x44>
		memp_free(MEMP_TCP_PCB, tpcb);
 8001cf4:	68f9      	ldr	r1, [r7, #12]
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	f008 ffb6 	bl	800ac68 <memp_free>
}
 8001cfc:	bf00      	nop
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	c801a8c0 	.word	0xc801a8c0
 8001d08:	08001d0d 	.word	0x08001d0d

08001d0c <tcp_server_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	4613      	mov	r3, r2
 8001d18:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	68b8      	ldr	r0, [r7, #8]
 8001d1e:	f00b fa6f 	bl	800d200 <tcp_setprio>

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_server_struct *)mem_malloc(sizeof(struct tcp_server_struct));
 8001d22:	200c      	movs	r0, #12
 8001d24:	f008 fda0 	bl	800a868 <mem_malloc>
 8001d28:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d01f      	beq.n	8001d70 <tcp_server_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	2201      	movs	r2, #1
 8001d34:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	68ba      	ldr	r2, [r7, #8]
 8001d3a:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	2200      	movs	r2, #0
 8001d46:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8001d48:	6939      	ldr	r1, [r7, #16]
 8001d4a:	68b8      	ldr	r0, [r7, #8]
 8001d4c:	f00b fc52 	bl	800d5f4 <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_server_recv);
 8001d50:	490d      	ldr	r1, [pc, #52]	; (8001d88 <tcp_server_accept+0x7c>)
 8001d52:	68b8      	ldr	r0, [r7, #8]
 8001d54:	f00b fc60 	bl	800d618 <tcp_recv>

    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_server_error);
 8001d58:	490c      	ldr	r1, [pc, #48]	; (8001d8c <tcp_server_accept+0x80>)
 8001d5a:	68b8      	ldr	r0, [r7, #8]
 8001d5c:	f00b fca0 	bl	800d6a0 <tcp_err>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_server_poll, 0);
 8001d60:	2200      	movs	r2, #0
 8001d62:	490b      	ldr	r1, [pc, #44]	; (8001d90 <tcp_server_accept+0x84>)
 8001d64:	68b8      	ldr	r0, [r7, #8]
 8001d66:	f00b fcd5 	bl	800d714 <tcp_poll>

    ret_err = ERR_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	75fb      	strb	r3, [r7, #23]
 8001d6e:	e005      	b.n	8001d7c <tcp_server_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_server_connection_close(newpcb, es);
 8001d70:	6939      	ldr	r1, [r7, #16]
 8001d72:	68b8      	ldr	r0, [r7, #8]
 8001d74:	f000 f965 	bl	8002042 <tcp_server_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8001d78:	23ff      	movs	r3, #255	; 0xff
 8001d7a:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8001d7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	08001d95 	.word	0x08001d95
 8001d8c:	08001ec9 	.word	0x08001ec9
 8001d90:	08001eed 	.word	0x08001eed

08001d94 <tcp_server_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
 8001da0:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d105      	bne.n	8001db4 <tcp_server_recv+0x20>
 8001da8:	4b43      	ldr	r3, [pc, #268]	; (8001eb8 <tcp_server_recv+0x124>)
 8001daa:	22c3      	movs	r2, #195	; 0xc3
 8001dac:	4943      	ldr	r1, [pc, #268]	; (8001ebc <tcp_server_recv+0x128>)
 8001dae:	4844      	ldr	r0, [pc, #272]	; (8001ec0 <tcp_server_recv+0x12c>)
 8001db0:	f012 ff82 	bl	8014cb8 <iprintf>

  es = (struct tcp_server_struct *)arg;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	61bb      	str	r3, [r7, #24]

  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d116      	bne.n	8001dec <tcp_server_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d104      	bne.n	8001dd6 <tcp_server_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_server_connection_close(tpcb, es);
 8001dcc:	69b9      	ldr	r1, [r7, #24]
 8001dce:	68b8      	ldr	r0, [r7, #8]
 8001dd0:	f000 f937 	bl	8002042 <tcp_server_connection_close>
 8001dd4:	e007      	b.n	8001de6 <tcp_server_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_server_sent);
 8001dd6:	493b      	ldr	r1, [pc, #236]	; (8001ec4 <tcp_server_recv+0x130>)
 8001dd8:	68b8      	ldr	r0, [r7, #8]
 8001dda:	f00b fc3f 	bl	800d65c <tcp_sent>

      /* send remaining data*/
      tcp_server_send(tpcb, es);
 8001dde:	69b9      	ldr	r1, [r7, #24]
 8001de0:	68b8      	ldr	r0, [r7, #8]
 8001de2:	f000 f8db 	bl	8001f9c <tcp_server_send>
    }
    ret_err = ERR_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	77fb      	strb	r3, [r7, #31]
 8001dea:	e05f      	b.n	8001eac <tcp_server_recv+0x118>
  }
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8001dec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00b      	beq.n	8001e0c <tcp_server_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d005      	beq.n	8001e06 <tcp_server_recv+0x72>
    {
      es->p = NULL;
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f009 fda7 	bl	800b954 <pbuf_free>
    }
    ret_err = err;
 8001e06:	78fb      	ldrb	r3, [r7, #3]
 8001e08:	77fb      	strb	r3, [r7, #31]
 8001e0a:	e04f      	b.n	8001eac <tcp_server_recv+0x118>
  }
  else if(es->state == ES_ACCEPTED)
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d110      	bne.n	8001e36 <tcp_server_recv+0xa2>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	2202      	movs	r2, #2
 8001e18:	701a      	strb	r2, [r3, #0]

    /* store reference to incoming pbuf (chain) */
    es->p = p;
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	609a      	str	r2, [r3, #8]

    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_server_sent);
 8001e20:	4928      	ldr	r1, [pc, #160]	; (8001ec4 <tcp_server_recv+0x130>)
 8001e22:	68b8      	ldr	r0, [r7, #8]
 8001e24:	f00b fc1a 	bl	800d65c <tcp_sent>

    /* handle the received data */
    tcp_server_handle(tpcb, es);
 8001e28:	69b9      	ldr	r1, [r7, #24]
 8001e2a:	68b8      	ldr	r0, [r7, #8]
 8001e2c:	f000 f930 	bl	8002090 <tcp_server_handle>

    ret_err = ERR_OK;
 8001e30:	2300      	movs	r3, #0
 8001e32:	77fb      	strb	r3, [r7, #31]
 8001e34:	e03a      	b.n	8001eac <tcp_server_recv+0x118>
  }
  else if (es->state == ES_RECEIVED)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d115      	bne.n	8001e6a <tcp_server_recv+0xd6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d107      	bne.n	8001e56 <tcp_server_recv+0xc2>
    {
      es->p = p;
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	609a      	str	r2, [r3, #8]

      /* handle the received data */
      tcp_server_handle(tpcb, es);
 8001e4c:	69b9      	ldr	r1, [r7, #24]
 8001e4e:	68b8      	ldr	r0, [r7, #8]
 8001e50:	f000 f91e 	bl	8002090 <tcp_server_handle>
 8001e54:	e006      	b.n	8001e64 <tcp_server_recv+0xd0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	6978      	ldr	r0, [r7, #20]
 8001e60:	f009 fe90 	bl	800bb84 <pbuf_chain>
    }
    ret_err = ERR_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	77fb      	strb	r3, [r7, #31]
 8001e68:	e020      	b.n	8001eac <tcp_server_recv+0x118>
  }
  else if(es->state == ES_CLOSING)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d10e      	bne.n	8001e90 <tcp_server_recv+0xfc>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	891b      	ldrh	r3, [r3, #8]
 8001e76:	4619      	mov	r1, r3
 8001e78:	68b8      	ldr	r0, [r7, #8]
 8001e7a:	f00a fcdd 	bl	800c838 <tcp_recved>
    es->p = NULL;
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f009 fd65 	bl	800b954 <pbuf_free>
    ret_err = ERR_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	77fb      	strb	r3, [r7, #31]
 8001e8e:	e00d      	b.n	8001eac <tcp_server_recv+0x118>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	891b      	ldrh	r3, [r3, #8]
 8001e94:	4619      	mov	r1, r3
 8001e96:	68b8      	ldr	r0, [r7, #8]
 8001e98:	f00a fcce 	bl	800c838 <tcp_recved>
    es->p = NULL;
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f009 fd56 	bl	800b954 <pbuf_free>
    ret_err = ERR_OK;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8001eac:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3720      	adds	r7, #32
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	08015d78 	.word	0x08015d78
 8001ebc:	08015d94 	.word	0x08015d94
 8001ec0:	08015da0 	.word	0x08015da0
 8001ec4:	08001f4d 	.word	0x08001f4d

08001ec8 <tcp_server_error>:
  * @param  arg: pointer on argument parameter
  * @param  err: not used
  * @retval None
  */
static void tcp_server_error(void *arg, err_t err)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_server_struct *)arg;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d002      	beq.n	8001ee4 <tcp_server_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f008 fb5c 	bl	800a59c <mem_free>
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <tcp_server_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_server_struct *es;

  es = (struct tcp_server_struct *)arg;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d017      	beq.n	8001f30 <tcp_server_poll+0x44>
  {
    if (es->p != NULL)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d008      	beq.n	8001f1a <tcp_server_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_server_sent);
 8001f08:	490f      	ldr	r1, [pc, #60]	; (8001f48 <tcp_server_poll+0x5c>)
 8001f0a:	6838      	ldr	r0, [r7, #0]
 8001f0c:	f00b fba6 	bl	800d65c <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_server_send(tpcb, es);
 8001f10:	68b9      	ldr	r1, [r7, #8]
 8001f12:	6838      	ldr	r0, [r7, #0]
 8001f14:	f000 f842 	bl	8001f9c <tcp_server_send>
 8001f18:	e007      	b.n	8001f2a <tcp_server_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b03      	cmp	r3, #3
 8001f20:	d103      	bne.n	8001f2a <tcp_server_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_server_connection_close(tpcb, es);
 8001f22:	68b9      	ldr	r1, [r7, #8]
 8001f24:	6838      	ldr	r0, [r7, #0]
 8001f26:	f000 f88c 	bl	8002042 <tcp_server_connection_close>
      }
    }
    ret_err = ERR_OK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	73fb      	strb	r3, [r7, #15]
 8001f2e:	e004      	b.n	8001f3a <tcp_server_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8001f30:	6838      	ldr	r0, [r7, #0]
 8001f32:	f00a faa7 	bl	800c484 <tcp_abort>
    ret_err = ERR_ABRT;
 8001f36:	23f3      	movs	r3, #243	; 0xf3
 8001f38:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8001f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	08001f4d 	.word	0x08001f4d

08001f4c <tcp_server_sent>:
  *         is received from remote host for sent data)
  * @param  None
  * @retval None
  */
static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	4613      	mov	r3, r2
 8001f58:	80fb      	strh	r3, [r7, #6]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_server_struct *)arg;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	2200      	movs	r2, #0
 8001f62:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d008      	beq.n	8001f7e <tcp_server_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_server_sent);
 8001f6c:	490a      	ldr	r1, [pc, #40]	; (8001f98 <tcp_server_sent+0x4c>)
 8001f6e:	68b8      	ldr	r0, [r7, #8]
 8001f70:	f00b fb74 	bl	800d65c <tcp_sent>
    tcp_server_send(tpcb, es);
 8001f74:	6979      	ldr	r1, [r7, #20]
 8001f76:	68b8      	ldr	r0, [r7, #8]
 8001f78:	f000 f810 	bl	8001f9c <tcp_server_send>
 8001f7c:	e007      	b.n	8001f8e <tcp_server_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d103      	bne.n	8001f8e <tcp_server_sent+0x42>
      tcp_server_connection_close(tpcb, es);
 8001f86:	6979      	ldr	r1, [r7, #20]
 8001f88:	68b8      	ldr	r0, [r7, #8]
 8001f8a:	f000 f85a 	bl	8002042 <tcp_server_connection_close>
  }
  return ERR_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	08001f4d 	.word	0x08001f4d

08001f9c <tcp_server_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 8001faa:	e036      	b.n	800201a <tcp_server_send+0x7e>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	6859      	ldr	r1, [r3, #4]
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	895a      	ldrh	r2, [r3, #10]
 8001fba:	2301      	movs	r3, #1
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f00e fa57 	bl	8010470 <tcp_write>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 8001fc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d11d      	bne.n	800200a <tcp_server_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	895b      	ldrh	r3, [r3, #10]
 8001fd2:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d004      	beq.n	8001fee <tcp_server_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f009 fd53 	bl	800ba94 <pbuf_ref>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8001fee:	6938      	ldr	r0, [r7, #16]
 8001ff0:	f009 fcb0 	bl	800b954 <pbuf_free>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8001ff8:	7b7b      	ldrb	r3, [r7, #13]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0f7      	beq.n	8001fee <tcp_server_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 8001ffe:	89fb      	ldrh	r3, [r7, #14]
 8002000:	4619      	mov	r1, r3
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f00a fc18 	bl	800c838 <tcp_recved>
 8002008:	e007      	b.n	800201a <tcp_server_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 800200a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800200e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002012:	d102      	bne.n	800201a <tcp_server_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 800201a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10b      	bne.n	800203a <tcp_server_send+0x9e>
         (es->p != NULL) &&
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8002026:	2b00      	cmp	r3, #0
 8002028:	d007      	beq.n	800203a <tcp_server_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	895a      	ldrh	r2, [r3, #10]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) &&
 8002036:	429a      	cmp	r2, r3
 8002038:	d9b8      	bls.n	8001fac <tcp_server_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 800203a:	bf00      	nop
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <tcp_server_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 800204c:	2100      	movs	r1, #0
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f00b fad0 	bl	800d5f4 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8002054:	2100      	movs	r1, #0
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f00b fb00 	bl	800d65c <tcp_sent>
  tcp_recv(tpcb, NULL);
 800205c:	2100      	movs	r1, #0
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f00b fada 	bl	800d618 <tcp_recv>
  tcp_err(tpcb, NULL);
 8002064:	2100      	movs	r1, #0
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f00b fb1a 	bl	800d6a0 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 800206c:	2200      	movs	r2, #0
 800206e:	2100      	movs	r1, #0
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f00b fb4f 	bl	800d714 <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d002      	beq.n	8002082 <tcp_server_connection_close+0x40>
  {
    mem_free(es);
 800207c:	6838      	ldr	r0, [r7, #0]
 800207e:	f008 fa8d 	bl	800a59c <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f00a f914 	bl	800c2b0 <tcp_close>
}
 8002088:	bf00      	nop
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <tcp_server_handle>:

/* Handle the incoming TCP Data */

static void tcp_server_handle(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8002090:	b5b0      	push	{r4, r5, r7, lr}
 8002092:	b0a0      	sub	sp, #128	; 0x80
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
	struct tcp_server_struct *esTx = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	67fb      	str	r3, [r7, #124]	; 0x7c

	/* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	673b      	str	r3, [r7, #112]	; 0x70
	uint16_t inPort = tpcb->remote_port;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	8b1b      	ldrh	r3, [r3, #24]
 80020a8:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
 80020ac:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80020b0:	4618      	mov	r0, r3
 80020b2:	f011 fe19 	bl	8013ce8 <ip4addr_ntoa>
 80020b6:	6778      	str	r0, [r7, #116]	; 0x74

	esTx->state = es->state;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	781a      	ldrb	r2, [r3, #0]
 80020bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020be:	701a      	strb	r2, [r3, #0]
	esTx->pcb = es->pcb;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020c6:	605a      	str	r2, [r3, #4]
	esTx->p = es->p;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020ce:	609a      	str	r2, [r3, #8]

	char buf[100];
	memset(buf, '\0', 100);
 80020d0:	f107 030c 	add.w	r3, r7, #12
 80020d4:	2264      	movs	r2, #100	; 0x64
 80020d6:	2100      	movs	r1, #0
 80020d8:	4618      	mov	r0, r3
 80020da:	f012 fde5 	bl	8014ca8 <memset>

	strncpy(buf, (char *)es->p->payload, es->p->tot_len);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	6859      	ldr	r1, [r3, #4]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	891b      	ldrh	r3, [r3, #8]
 80020ea:	461a      	mov	r2, r3
 80020ec:	f107 030c 	add.w	r3, r7, #12
 80020f0:	4618      	mov	r0, r3
 80020f2:	f012 fe41 	bl	8014d78 <strncpy>
	strncpy(globalCluster.myString, (char *)es->p->payload, es->p->tot_len);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	6859      	ldr	r1, [r3, #4]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	891b      	ldrh	r3, [r3, #8]
 8002102:	461a      	mov	r2, r3
 8002104:	4824      	ldr	r0, [pc, #144]	; (8002198 <tcp_server_handle+0x108>)
 8002106:	f012 fe37 	bl	8014d78 <strncpy>
	strcat (buf, "+ Hello from TCP SERVER\n");
 800210a:	f107 030c 	add.w	r3, r7, #12
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe f8fe 	bl	8000310 <strlen>
 8002114:	4603      	mov	r3, r0
 8002116:	461a      	mov	r2, r3
 8002118:	f107 030c 	add.w	r3, r7, #12
 800211c:	4413      	add	r3, r2
 800211e:	4a1f      	ldr	r2, [pc, #124]	; (800219c <tcp_server_handle+0x10c>)
 8002120:	461d      	mov	r5, r3
 8002122:	4614      	mov	r4, r2
 8002124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002126:	6028      	str	r0, [r5, #0]
 8002128:	6069      	str	r1, [r5, #4]
 800212a:	60aa      	str	r2, [r5, #8]
 800212c:	60eb      	str	r3, [r5, #12]
 800212e:	cc03      	ldmia	r4!, {r0, r1}
 8002130:	6128      	str	r0, [r5, #16]
 8002132:	6169      	str	r1, [r5, #20]
 8002134:	7823      	ldrb	r3, [r4, #0]
 8002136:	762b      	strb	r3, [r5, #24]


	esTx->p->payload = (void *)buf;
 8002138:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f107 020c 	add.w	r2, r7, #12
 8002140:	605a      	str	r2, [r3, #4]
	esTx->p->tot_len = (es->p->tot_len - es->p->len) + strlen (buf);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	891a      	ldrh	r2, [r3, #8]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	895b      	ldrh	r3, [r3, #10]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	b29c      	uxth	r4, r3
 8002152:	f107 030c 	add.w	r3, r7, #12
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe f8da 	bl	8000310 <strlen>
 800215c:	4603      	mov	r3, r0
 800215e:	b29a      	uxth	r2, r3
 8002160:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	4422      	add	r2, r4
 8002166:	b292      	uxth	r2, r2
 8002168:	811a      	strh	r2, [r3, #8]
	esTx->p->len = strlen (buf);
 800216a:	f107 030c 	add.w	r3, r7, #12
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe f8ce 	bl	8000310 <strlen>
 8002174:	4602      	mov	r2, r0
 8002176:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	b292      	uxth	r2, r2
 800217c:	815a      	strh	r2, [r3, #10]

	tcp_server_send(tpcb, esTx);
 800217e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7ff ff0b 	bl	8001f9c <tcp_server_send>

	pbuf_free(es->p);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	4618      	mov	r0, r3
 800218c:	f009 fbe2 	bl	800b954 <pbuf_free>

}
 8002190:	bf00      	nop
 8002192:	3780      	adds	r7, #128	; 0x80
 8002194:	46bd      	mov	sp, r7
 8002196:	bdb0      	pop	{r4, r5, r7, pc}
 8002198:	240004c4 	.word	0x240004c4
 800219c:	08015dc8 	.word	0x08015dc8

080021a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80021a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80021a4:	f7ff fd0c 	bl	8001bc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021a8:	480c      	ldr	r0, [pc, #48]	; (80021dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021aa:	490d      	ldr	r1, [pc, #52]	; (80021e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021ac:	4a0d      	ldr	r2, [pc, #52]	; (80021e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021b0:	e002      	b.n	80021b8 <LoopCopyDataInit>

080021b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021b6:	3304      	adds	r3, #4

080021b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021bc:	d3f9      	bcc.n	80021b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021be:	4a0a      	ldr	r2, [pc, #40]	; (80021e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021c0:	4c0a      	ldr	r4, [pc, #40]	; (80021ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80021c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021c4:	e001      	b.n	80021ca <LoopFillZerobss>

080021c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021c8:	3204      	adds	r2, #4

080021ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021cc:	d3fb      	bcc.n	80021c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021ce:	f012 fd2b 	bl	8014c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021d2:	f7fe fd99 	bl	8000d08 <main>
  bx  lr
 80021d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021d8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80021dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80021e0:	2400009c 	.word	0x2400009c
  ldr r2, =_sidata
 80021e4:	08019284 	.word	0x08019284
  ldr r2, =_sbss
 80021e8:	2400009c 	.word	0x2400009c
  ldr r4, =_ebss
 80021ec:	24003640 	.word	0x24003640

080021f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021f0:	e7fe      	b.n	80021f0 <ADC3_IRQHandler>

080021f2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
 80021fa:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00b      	beq.n	800221a <LAN8742_RegisterBusIO+0x28>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d007      	beq.n	800221a <LAN8742_RegisterBusIO+0x28>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <LAN8742_RegisterBusIO+0x28>
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d102      	bne.n	8002220 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800221a:	f04f 33ff 	mov.w	r3, #4294967295
 800221e:	e014      	b.n	800224a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002256:	b580      	push	{r7, lr}
 8002258:	b086      	sub	sp, #24
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	2300      	movs	r3, #0
 8002264:	60bb      	str	r3, [r7, #8]
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d17c      	bne.n	8002370 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d002      	beq.n	8002284 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2220      	movs	r2, #32
 8002288:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
 800228e:	e01c      	b.n	80022ca <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	f107 0208 	add.w	r2, r7, #8
 8002298:	2112      	movs	r1, #18
 800229a:	6978      	ldr	r0, [r7, #20]
 800229c:	4798      	blx	r3
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	da03      	bge.n	80022ac <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80022a4:	f06f 0304 	mvn.w	r3, #4
 80022a8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80022aa:	e00b      	b.n	80022c4 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	f003 031f 	and.w	r3, r3, #31
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d105      	bne.n	80022c4 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	613b      	str	r3, [r7, #16]
         break;
 80022c2:	e005      	b.n	80022d0 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	3301      	adds	r3, #1
 80022c8:	617b      	str	r3, [r7, #20]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	2b1f      	cmp	r3, #31
 80022ce:	d9df      	bls.n	8002290 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b1f      	cmp	r3, #31
 80022d6:	d902      	bls.n	80022de <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80022d8:	f06f 0302 	mvn.w	r3, #2
 80022dc:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d145      	bne.n	8002370 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6810      	ldr	r0, [r2, #0]
 80022ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80022f0:	2100      	movs	r1, #0
 80022f2:	4798      	blx	r3
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	db37      	blt.n	800236a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6810      	ldr	r0, [r2, #0]
 8002302:	f107 0208 	add.w	r2, r7, #8
 8002306:	2100      	movs	r1, #0
 8002308:	4798      	blx	r3
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	db28      	blt.n	8002362 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	4798      	blx	r3
 8002316:	4603      	mov	r3, r0
 8002318:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800231a:	e01c      	b.n	8002356 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	4798      	blx	r3
 8002322:	4603      	mov	r3, r0
 8002324:	461a      	mov	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800232e:	d80e      	bhi.n	800234e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6810      	ldr	r0, [r2, #0]
 8002338:	f107 0208 	add.w	r2, r7, #8
 800233c:	2100      	movs	r1, #0
 800233e:	4798      	blx	r3
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	da07      	bge.n	8002356 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8002346:	f06f 0304 	mvn.w	r3, #4
 800234a:	613b      	str	r3, [r7, #16]
                 break;
 800234c:	e010      	b.n	8002370 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800234e:	f06f 0301 	mvn.w	r3, #1
 8002352:	613b      	str	r3, [r7, #16]
               break;
 8002354:	e00c      	b.n	8002370 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1dd      	bne.n	800231c <LAN8742_Init+0xc6>
 8002360:	e006      	b.n	8002370 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8002362:	f06f 0304 	mvn.w	r3, #4
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	e002      	b.n	8002370 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800236a:	f06f 0303 	mvn.w	r3, #3
 800236e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d112      	bne.n	800239c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	4798      	blx	r3
 800237c:	4603      	mov	r3, r0
 800237e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8002380:	bf00      	nop
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	4798      	blx	r3
 8002388:	4603      	mov	r3, r0
 800238a:	461a      	mov	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002394:	d9f5      	bls.n	8002382 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 800239c:	693b      	ldr	r3, [r7, #16]
 }
 800239e:	4618      	mov	r0, r3
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b084      	sub	sp, #16
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	6810      	ldr	r0, [r2, #0]
 80023ba:	f107 020c 	add.w	r2, r7, #12
 80023be:	2101      	movs	r1, #1
 80023c0:	4798      	blx	r3
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	da02      	bge.n	80023ce <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80023c8:	f06f 0304 	mvn.w	r3, #4
 80023cc:	e06e      	b.n	80024ac <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6810      	ldr	r0, [r2, #0]
 80023d6:	f107 020c 	add.w	r2, r7, #12
 80023da:	2101      	movs	r1, #1
 80023dc:	4798      	blx	r3
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	da02      	bge.n	80023ea <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80023e4:	f06f 0304 	mvn.w	r3, #4
 80023e8:	e060      	b.n	80024ac <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80023f4:	2301      	movs	r3, #1
 80023f6:	e059      	b.n	80024ac <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6810      	ldr	r0, [r2, #0]
 8002400:	f107 020c 	add.w	r2, r7, #12
 8002404:	2100      	movs	r1, #0
 8002406:	4798      	blx	r3
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	da02      	bge.n	8002414 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800240e:	f06f 0304 	mvn.w	r3, #4
 8002412:	e04b      	b.n	80024ac <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d11b      	bne.n	8002456 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d006      	beq.n	8002436 <LAN8742_GetLinkState+0x90>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002432:	2302      	movs	r3, #2
 8002434:	e03a      	b.n	80024ac <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002440:	2303      	movs	r3, #3
 8002442:	e033      	b.n	80024ac <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800244e:	2304      	movs	r3, #4
 8002450:	e02c      	b.n	80024ac <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002452:	2305      	movs	r3, #5
 8002454:	e02a      	b.n	80024ac <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6810      	ldr	r0, [r2, #0]
 800245e:	f107 020c 	add.w	r2, r7, #12
 8002462:	211f      	movs	r1, #31
 8002464:	4798      	blx	r3
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	da02      	bge.n	8002472 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800246c:	f06f 0304 	mvn.w	r3, #4
 8002470:	e01c      	b.n	80024ac <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800247c:	2306      	movs	r3, #6
 800247e:	e015      	b.n	80024ac <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f003 031c 	and.w	r3, r3, #28
 8002486:	2b18      	cmp	r3, #24
 8002488:	d101      	bne.n	800248e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800248a:	2302      	movs	r3, #2
 800248c:	e00e      	b.n	80024ac <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f003 031c 	and.w	r3, r3, #28
 8002494:	2b08      	cmp	r3, #8
 8002496:	d101      	bne.n	800249c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002498:	2303      	movs	r3, #3
 800249a:	e007      	b.n	80024ac <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f003 031c 	and.w	r3, r3, #28
 80024a2:	2b14      	cmp	r3, #20
 80024a4:	d101      	bne.n	80024aa <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80024a6:	2304      	movs	r3, #4
 80024a8:	e000      	b.n	80024ac <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80024aa:	2305      	movs	r3, #5
    }				
  }
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ba:	2003      	movs	r0, #3
 80024bc:	f000 f976 	bl	80027ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80024c0:	f003 fc54 	bl	8005d6c <HAL_RCC_GetSysClockFreq>
 80024c4:	4602      	mov	r2, r0
 80024c6:	4b15      	ldr	r3, [pc, #84]	; (800251c <HAL_Init+0x68>)
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	0a1b      	lsrs	r3, r3, #8
 80024cc:	f003 030f 	and.w	r3, r3, #15
 80024d0:	4913      	ldr	r1, [pc, #76]	; (8002520 <HAL_Init+0x6c>)
 80024d2:	5ccb      	ldrb	r3, [r1, r3]
 80024d4:	f003 031f 	and.w	r3, r3, #31
 80024d8:	fa22 f303 	lsr.w	r3, r2, r3
 80024dc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024de:	4b0f      	ldr	r3, [pc, #60]	; (800251c <HAL_Init+0x68>)
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	4a0e      	ldr	r2, [pc, #56]	; (8002520 <HAL_Init+0x6c>)
 80024e8:	5cd3      	ldrb	r3, [r2, r3]
 80024ea:	f003 031f 	and.w	r3, r3, #31
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	fa22 f303 	lsr.w	r3, r2, r3
 80024f4:	4a0b      	ldr	r2, [pc, #44]	; (8002524 <HAL_Init+0x70>)
 80024f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024f8:	4a0b      	ldr	r2, [pc, #44]	; (8002528 <HAL_Init+0x74>)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024fe:	2000      	movs	r0, #0
 8002500:	f000 f814 	bl	800252c <HAL_InitTick>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e002      	b.n	8002514 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800250e:	f7ff f8c1 	bl	8001694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	58024400 	.word	0x58024400
 8002520:	08018ff0 	.word	0x08018ff0
 8002524:	2400000c 	.word	0x2400000c
 8002528:	24000008 	.word	0x24000008

0800252c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002534:	4b15      	ldr	r3, [pc, #84]	; (800258c <HAL_InitTick+0x60>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e021      	b.n	8002584 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002540:	4b13      	ldr	r3, [pc, #76]	; (8002590 <HAL_InitTick+0x64>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4b11      	ldr	r3, [pc, #68]	; (800258c <HAL_InitTick+0x60>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	4619      	mov	r1, r3
 800254a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800254e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002552:	fbb2 f3f3 	udiv	r3, r2, r3
 8002556:	4618      	mov	r0, r3
 8002558:	f000 f94d 	bl	80027f6 <HAL_SYSTICK_Config>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e00e      	b.n	8002584 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b0f      	cmp	r3, #15
 800256a:	d80a      	bhi.n	8002582 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800256c:	2200      	movs	r2, #0
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	f04f 30ff 	mov.w	r0, #4294967295
 8002574:	f000 f925 	bl	80027c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002578:	4a06      	ldr	r2, [pc, #24]	; (8002594 <HAL_InitTick+0x68>)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	e000      	b.n	8002584 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
}
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	24000014 	.word	0x24000014
 8002590:	24000008 	.word	0x24000008
 8002594:	24000010 	.word	0x24000010

08002598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800259c:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <HAL_IncTick+0x20>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	461a      	mov	r2, r3
 80025a2:	4b06      	ldr	r3, [pc, #24]	; (80025bc <HAL_IncTick+0x24>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4413      	add	r3, r2
 80025a8:	4a04      	ldr	r2, [pc, #16]	; (80025bc <HAL_IncTick+0x24>)
 80025aa:	6013      	str	r3, [r2, #0]
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	24000014 	.word	0x24000014
 80025bc:	24000528 	.word	0x24000528

080025c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return uwTick;
 80025c4:	4b03      	ldr	r3, [pc, #12]	; (80025d4 <HAL_GetTick+0x14>)
 80025c6:	681b      	ldr	r3, [r3, #0]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	24000528 	.word	0x24000528

080025d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025e0:	f7ff ffee 	bl	80025c0 <HAL_GetTick>
 80025e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f0:	d005      	beq.n	80025fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025f2:	4b0a      	ldr	r3, [pc, #40]	; (800261c <HAL_Delay+0x44>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4413      	add	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025fe:	bf00      	nop
 8002600:	f7ff ffde 	bl	80025c0 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	429a      	cmp	r2, r3
 800260e:	d8f7      	bhi.n	8002600 <HAL_Delay+0x28>
  {
  }
}
 8002610:	bf00      	nop
 8002612:	bf00      	nop
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	24000014 	.word	0x24000014

08002620 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002630:	4904      	ldr	r1, [pc, #16]	; (8002644 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4313      	orrs	r3, r2
 8002636:	604b      	str	r3, [r1, #4]
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	58000400 	.word	0x58000400

08002648 <__NVIC_SetPriorityGrouping>:
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <__NVIC_SetPriorityGrouping+0x40>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002664:	4013      	ands	r3, r2
 8002666:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <__NVIC_SetPriorityGrouping+0x44>)
 8002672:	4313      	orrs	r3, r2
 8002674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002676:	4a04      	ldr	r2, [pc, #16]	; (8002688 <__NVIC_SetPriorityGrouping+0x40>)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	60d3      	str	r3, [r2, #12]
}
 800267c:	bf00      	nop
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	e000ed00 	.word	0xe000ed00
 800268c:	05fa0000 	.word	0x05fa0000

08002690 <__NVIC_GetPriorityGrouping>:
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002694:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	0a1b      	lsrs	r3, r3, #8
 800269a:	f003 0307 	and.w	r3, r3, #7
}
 800269e:	4618      	mov	r0, r3
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <__NVIC_SetPriority>:
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	6039      	str	r1, [r7, #0]
 80026b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	db0a      	blt.n	80026d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	490c      	ldr	r1, [pc, #48]	; (80026f8 <__NVIC_SetPriority+0x4c>)
 80026c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026ca:	0112      	lsls	r2, r2, #4
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	440b      	add	r3, r1
 80026d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80026d4:	e00a      	b.n	80026ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	4908      	ldr	r1, [pc, #32]	; (80026fc <__NVIC_SetPriority+0x50>)
 80026dc:	88fb      	ldrh	r3, [r7, #6]
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	3b04      	subs	r3, #4
 80026e4:	0112      	lsls	r2, r2, #4
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	440b      	add	r3, r1
 80026ea:	761a      	strb	r2, [r3, #24]
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	e000e100 	.word	0xe000e100
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <NVIC_EncodePriority>:
{
 8002700:	b480      	push	{r7}
 8002702:	b089      	sub	sp, #36	; 0x24
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f1c3 0307 	rsb	r3, r3, #7
 800271a:	2b04      	cmp	r3, #4
 800271c:	bf28      	it	cs
 800271e:	2304      	movcs	r3, #4
 8002720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3304      	adds	r3, #4
 8002726:	2b06      	cmp	r3, #6
 8002728:	d902      	bls.n	8002730 <NVIC_EncodePriority+0x30>
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3b03      	subs	r3, #3
 800272e:	e000      	b.n	8002732 <NVIC_EncodePriority+0x32>
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002734:	f04f 32ff 	mov.w	r2, #4294967295
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43da      	mvns	r2, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	401a      	ands	r2, r3
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002748:	f04f 31ff 	mov.w	r1, #4294967295
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	fa01 f303 	lsl.w	r3, r1, r3
 8002752:	43d9      	mvns	r1, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002758:	4313      	orrs	r3, r2
}
 800275a:	4618      	mov	r0, r3
 800275c:	3724      	adds	r7, #36	; 0x24
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3b01      	subs	r3, #1
 8002774:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002778:	d301      	bcc.n	800277e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800277a:	2301      	movs	r3, #1
 800277c:	e00f      	b.n	800279e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800277e:	4a0a      	ldr	r2, [pc, #40]	; (80027a8 <SysTick_Config+0x40>)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3b01      	subs	r3, #1
 8002784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002786:	210f      	movs	r1, #15
 8002788:	f04f 30ff 	mov.w	r0, #4294967295
 800278c:	f7ff ff8e 	bl	80026ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <SysTick_Config+0x40>)
 8002792:	2200      	movs	r2, #0
 8002794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002796:	4b04      	ldr	r3, [pc, #16]	; (80027a8 <SysTick_Config+0x40>)
 8002798:	2207      	movs	r2, #7
 800279a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	e000e010 	.word	0xe000e010

080027ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff ff47 	bl	8002648 <__NVIC_SetPriorityGrouping>
}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b086      	sub	sp, #24
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	4603      	mov	r3, r0
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	607a      	str	r2, [r7, #4]
 80027ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027d0:	f7ff ff5e 	bl	8002690 <__NVIC_GetPriorityGrouping>
 80027d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	68b9      	ldr	r1, [r7, #8]
 80027da:	6978      	ldr	r0, [r7, #20]
 80027dc:	f7ff ff90 	bl	8002700 <NVIC_EncodePriority>
 80027e0:	4602      	mov	r2, r0
 80027e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027e6:	4611      	mov	r1, r2
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ff5f 	bl	80026ac <__NVIC_SetPriority>
}
 80027ee:	bf00      	nop
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff ffb2 	bl	8002768 <SysTick_Config>
 8002804:	4603      	mov	r3, r0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002814:	f3bf 8f5f 	dmb	sy
}
 8002818:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800281a:	4b07      	ldr	r3, [pc, #28]	; (8002838 <HAL_MPU_Disable+0x28>)
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	4a06      	ldr	r2, [pc, #24]	; (8002838 <HAL_MPU_Disable+0x28>)
 8002820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002824:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002826:	4b05      	ldr	r3, [pc, #20]	; (800283c <HAL_MPU_Disable+0x2c>)
 8002828:	2200      	movs	r2, #0
 800282a:	605a      	str	r2, [r3, #4]
}
 800282c:	bf00      	nop
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	e000ed00 	.word	0xe000ed00
 800283c:	e000ed90 	.word	0xe000ed90

08002840 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002848:	4a0b      	ldr	r2, [pc, #44]	; (8002878 <HAL_MPU_Enable+0x38>)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002852:	4b0a      	ldr	r3, [pc, #40]	; (800287c <HAL_MPU_Enable+0x3c>)
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	4a09      	ldr	r2, [pc, #36]	; (800287c <HAL_MPU_Enable+0x3c>)
 8002858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800285e:	f3bf 8f4f 	dsb	sy
}
 8002862:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002864:	f3bf 8f6f 	isb	sy
}
 8002868:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	e000ed90 	.word	0xe000ed90
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	785a      	ldrb	r2, [r3, #1]
 800288c:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <HAL_MPU_ConfigRegion+0x84>)
 800288e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d029      	beq.n	80028ec <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002898:	4a1a      	ldr	r2, [pc, #104]	; (8002904 <HAL_MPU_ConfigRegion+0x84>)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	7b1b      	ldrb	r3, [r3, #12]
 80028a4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	7adb      	ldrb	r3, [r3, #11]
 80028aa:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80028ac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	7a9b      	ldrb	r3, [r3, #10]
 80028b2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80028b4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	7b5b      	ldrb	r3, [r3, #13]
 80028ba:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80028bc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	7b9b      	ldrb	r3, [r3, #14]
 80028c2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80028c4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	7bdb      	ldrb	r3, [r3, #15]
 80028ca:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80028cc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	7a5b      	ldrb	r3, [r3, #9]
 80028d2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80028d4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	7a1b      	ldrb	r3, [r3, #8]
 80028da:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80028dc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	7812      	ldrb	r2, [r2, #0]
 80028e2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80028e4:	4a07      	ldr	r2, [pc, #28]	; (8002904 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80028e6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80028e8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80028ea:	e005      	b.n	80028f8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80028ec:	4b05      	ldr	r3, [pc, #20]	; (8002904 <HAL_MPU_ConfigRegion+0x84>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80028f2:	4b04      	ldr	r3, [pc, #16]	; (8002904 <HAL_MPU_ConfigRegion+0x84>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	611a      	str	r2, [r3, #16]
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	e000ed90 	.word	0xe000ed90

08002908 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e0c6      	b.n	8002aa8 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800291e:	2b00      	cmp	r3, #0
 8002920:	d102      	bne.n	8002928 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f007 f844 	bl	80099b0 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2223      	movs	r2, #35	; 0x23
 800292c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800292e:	4b60      	ldr	r3, [pc, #384]	; (8002ab0 <HAL_ETH_Init+0x1a8>)
 8002930:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002934:	4a5e      	ldr	r2, [pc, #376]	; (8002ab0 <HAL_ETH_Init+0x1a8>)
 8002936:	f043 0302 	orr.w	r3, r3, #2
 800293a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800293e:	4b5c      	ldr	r3, [pc, #368]	; (8002ab0 <HAL_ETH_Init+0x1a8>)
 8002940:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	60bb      	str	r3, [r7, #8]
 800294a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	7a1b      	ldrb	r3, [r3, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d103      	bne.n	800295c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002954:	2000      	movs	r0, #0
 8002956:	f7ff fe63 	bl	8002620 <HAL_SYSCFG_ETHInterfaceSelect>
 800295a:	e003      	b.n	8002964 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800295c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002960:	f7ff fe5e 	bl	8002620 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f042 0201 	orr.w	r2, r2, #1
 8002976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800297a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800297c:	f7ff fe20 	bl	80025c0 <HAL_GetTick>
 8002980:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002982:	e00f      	b.n	80029a4 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8002984:	f7ff fe1c 	bl	80025c0 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002992:	d907      	bls.n	80029a4 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2204      	movs	r2, #4
 8002998:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	22e0      	movs	r2, #224	; 0xe0
 800299e:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e081      	b.n	8002aa8 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1e6      	bne.n	8002984 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f001 f95c 	bl	8003c74 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80029bc:	f003 fb50 	bl	8006060 <HAL_RCC_GetHCLKFreq>
 80029c0:	4603      	mov	r3, r0
 80029c2:	4a3c      	ldr	r2, [pc, #240]	; (8002ab4 <HAL_ETH_Init+0x1ac>)
 80029c4:	fba2 2303 	umull	r2, r3, r2, r3
 80029c8:	0c9a      	lsrs	r2, r3, #18
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	3a01      	subs	r2, #1
 80029d0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f001 f8af 	bl	8003b38 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80029f0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80029f4:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d007      	beq.n	8002a12 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	22e0      	movs	r2, #224	; 0xe0
 8002a0c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e04a      	b.n	8002aa8 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	f241 1308 	movw	r3, #4360	; 0x1108
 8002a1a:	4413      	add	r3, r2
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	4b26      	ldr	r3, [pc, #152]	; (8002ab8 <HAL_ETH_Init+0x1b0>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6952      	ldr	r2, [r2, #20]
 8002a26:	0052      	lsls	r2, r2, #1
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	6809      	ldr	r1, [r1, #0]
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	f241 1308 	movw	r3, #4360	; 0x1108
 8002a32:	440b      	add	r3, r1
 8002a34:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f001 f974 	bl	8003d24 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f001 f9b8 	bl	8003db2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	3305      	adds	r3, #5
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	021a      	lsls	r2, r3, #8
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	3304      	adds	r3, #4
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	4619      	mov	r1, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	3303      	adds	r3, #3
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	061a      	lsls	r2, r3, #24
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	3302      	adds	r3, #2
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	041b      	lsls	r3, r3, #16
 8002a74:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002a80:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002a8e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002a90:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2210      	movs	r2, #16
 8002a9e:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2210      	movs	r2, #16
 8002aa4:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	58024400 	.word	0x58024400
 8002ab4:	431bde83 	.word	0x431bde83
 8002ab8:	ffff8001 	.word	0xffff8001

08002abc <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b087      	sub	sp, #28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
 8002ac8:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	3310      	adds	r3, #16
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d002      	beq.n	8002ae4 <HAL_ETH_DescAssignMemory+0x28>
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2b03      	cmp	r3, #3
 8002ae2:	d904      	bls.n	8002aee <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e021      	b.n	8002b32 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00b      	beq.n	8002b24 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	371c      	adds	r7, #28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  if(heth->gState == HAL_ETH_STATE_READY)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b4a:	2b10      	cmp	r3, #16
 8002b4c:	d14c      	bne.n	8002be8 <HAL_ETH_Start+0xaa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2223      	movs	r2, #35	; 0x23
 8002b52:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 0202 	orr.w	r2, r2, #2
 8002b62:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0201 	orr.w	r2, r2, #1
 8002b72:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f042 0201 	orr.w	r2, r2, #1
 8002b84:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	f241 1304 	movw	r3, #4356	; 0x1104
 8002b90:	4413      	add	r3, r2
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6811      	ldr	r1, [r2, #0]
 8002b98:	f043 0201 	orr.w	r2, r3, #1
 8002b9c:	f241 1304 	movw	r3, #4356	; 0x1104
 8002ba0:	440b      	add	r3, r1
 8002ba2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	f241 1308 	movw	r3, #4360	; 0x1108
 8002bac:	4413      	add	r3, r2
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6811      	ldr	r1, [r2, #0]
 8002bb4:	f043 0201 	orr.w	r2, r3, #1
 8002bb8:	f241 1308 	movw	r3, #4360	; 0x1108
 8002bbc:	440b      	add	r3, r1
 8002bbe:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8002bd2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002bd6:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2210      	movs	r2, #16
 8002bdc:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2222      	movs	r2, #34	; 0x22
 8002be2:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002be4:	2300      	movs	r3, #0
 8002be6:	e000      	b.n	8002bea <HAL_ETH_Start+0xac>
  }
  else
  {
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
  }
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  if(heth->gState != HAL_ETH_STATE_RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d040      	beq.n	8002c88 <HAL_ETH_Stop+0x92>
  {
     /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2223      	movs	r2, #35	; 0x23
 8002c0a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	f241 1304 	movw	r3, #4356	; 0x1104
 8002c14:	4413      	add	r3, r2
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6811      	ldr	r1, [r2, #0]
 8002c1c:	f023 0201 	bic.w	r2, r3, #1
 8002c20:	f241 1304 	movw	r3, #4356	; 0x1104
 8002c24:	440b      	add	r3, r1
 8002c26:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	f241 1308 	movw	r3, #4360	; 0x1108
 8002c30:	4413      	add	r3, r2
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6811      	ldr	r1, [r2, #0]
 8002c38:	f023 0201 	bic.w	r2, r3, #1
 8002c3c:	f241 1308 	movw	r3, #4360	; 0x1108
 8002c40:	440b      	add	r3, r1
 8002c42:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 0201 	bic.w	r2, r2, #1
 8002c52:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f042 0201 	orr.w	r2, r2, #1
 8002c64:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0202 	bic.w	r2, r2, #2
 8002c76:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2210      	movs	r2, #16
 8002c7c:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2210      	movs	r2, #16
 8002c82:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	e000      	b.n	8002c8a <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
  }
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b086      	sub	sp, #24
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	60f8      	str	r0, [r7, #12]
 8002c9e:	60b9      	str	r1, [r7, #8]
 8002ca0:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d107      	bne.n	8002cb8 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cac:	f043 0201 	orr.w	r2, r3, #1
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e073      	b.n	8002da0 <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cbc:	2b10      	cmp	r3, #16
 8002cbe:	d16e      	bne.n	8002d9e <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	68b9      	ldr	r1, [r7, #8]
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f001 f8d1 	bl	8003e6c <ETH_Prepare_Tx_Descriptors>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d007      	beq.n	8002ce0 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cd4:	f043 0202 	orr.w	r2, r3, #2
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e05f      	b.n	8002da0 <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	3206      	adds	r2, #6
 8002ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cec:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf2:	1c5a      	adds	r2, r3, #1
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	629a      	str	r2, [r3, #40]	; 0x28
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d904      	bls.n	8002d0a <HAL_ETH_Transmit+0x74>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d04:	1f1a      	subs	r2, r3, #4
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	3106      	adds	r1, #6
 8002d16:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002d1a:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002d1e:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8002d20:	f7ff fc4e 	bl	80025c0 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8002d26:	e034      	b.n	8002d92 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d011      	beq.n	8002d5e <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d3e:	f043 0208 	orr.w	r2, r3, #8
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	22e0      	movs	r2, #224	; 0xe0
 8002d58:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e020      	b.n	8002da0 <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d64:	d015      	beq.n	8002d92 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8002d66:	f7ff fc2b 	bl	80025c0 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d302      	bcc.n	8002d7c <HAL_ETH_Transmit+0xe6>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10a      	bne.n	8002d92 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d80:	f043 0204 	orr.w	r2, r3, #4
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	22e0      	movs	r2, #224	; 0xe0
 8002d8c:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e006      	b.n	8002da0 <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	dbc6      	blt.n	8002d28 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	e000      	b.n	8002da0 <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
  }
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b089      	sub	sp, #36	; 0x24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3344      	adds	r3, #68	; 0x44
 8002db4:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	69fa      	ldr	r2, [r7, #28]
 8002dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc4:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	613b      	str	r3, [r7, #16]
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d06b      	beq.n	8002eb2 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	e0ce      	b.n	8002f7c <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	3301      	adds	r3, #1
 8002de2:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d036      	beq.n	8002e5e <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	3301      	adds	r3, #1
 8002df4:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d101      	bne.n	8002e00 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	3301      	adds	r3, #1
 8002e04:	61fb      	str	r3, [r7, #28]
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d902      	bls.n	8002e12 <HAL_ETH_IsRxDataAvailable+0x6a>
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	3b04      	subs	r3, #4
 8002e10:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	69fa      	ldr	r2, [r7, #28]
 8002e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e1a:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	db11      	blt.n	8002e48 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00b      	beq.n	8002e48 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2201      	movs	r2, #1
 8002e34:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	61fb      	str	r3, [r7, #28]
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d902      	bls.n	8002e48 <HAL_ETH_IsRxDataAvailable+0xa0>
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	3b04      	subs	r3, #4
 8002e46:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	69fa      	ldr	r2, [r7, #28]
 8002e4c:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e08e      	b.n	8002f7c <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d012      	beq.n	8002e90 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	3301      	adds	r3, #1
 8002e76:	61fb      	str	r3, [r7, #28]
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	2b03      	cmp	r3, #3
 8002e7c:	d902      	bls.n	8002e84 <HAL_ETH_IsRxDataAvailable+0xdc>
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	3b04      	subs	r3, #4
 8002e82:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	69fa      	ldr	r2, [r7, #28]
 8002e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e8c:	61bb      	str	r3, [r7, #24]
 8002e8e:	e010      	b.n	8002eb2 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	3301      	adds	r3, #1
 8002e94:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	61fb      	str	r3, [r7, #28]
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	2b03      	cmp	r3, #3
 8002ea0:	d902      	bls.n	8002ea8 <HAL_ETH_IsRxDataAvailable+0x100>
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	3b04      	subs	r3, #4
 8002ea6:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	69fa      	ldr	r2, [r7, #28]
 8002eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eb0:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	db02      	blt.n	8002ec0 <HAL_ETH_IsRxDataAvailable+0x118>
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d98e      	bls.n	8002dde <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d056      	beq.n	8002f74 <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	69fa      	ldr	r2, [r7, #28]
 8002eca:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	69fa      	ldr	r2, [r7, #28]
 8002eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ede:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]
 8002ee4:	e03b      	b.n	8002f5e <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	691a      	ldr	r2, [r3, #16]
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ef4:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d009      	beq.n	8002f12 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	695a      	ldr	r2, [r3, #20]
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d005      	beq.n	8002f32 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	3b01      	subs	r3, #1
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d20d      	bcs.n	8002f58 <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	61fb      	str	r3, [r7, #28]
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	2b03      	cmp	r3, #3
 8002f46:	d902      	bls.n	8002f4e <HAL_ETH_IsRxDataAvailable+0x1a6>
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	3b04      	subs	r3, #4
 8002f4c:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	69fa      	ldr	r2, [r7, #28]
 8002f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f56:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	617b      	str	r3, [r7, #20]
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d3bf      	bcc.n	8002ee6 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6819      	ldr	r1, [r3, #0]
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	f241 1328 	movw	r3, #4392	; 0x1128
 8002f70:	440b      	add	r3, r1
 8002f72:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2200      	movs	r2, #0
 8002f78:	619a      	str	r2, [r3, #24]

  return 0;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3724      	adds	r7, #36	; 0x24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b08a      	sub	sp, #40	; 0x28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3344      	adds	r3, #68	; 0x44
 8002f96:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002faa:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d104      	bne.n	8002fc0 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e07d      	b.n	80030bc <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10f      	bne.n	8002fe8 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7ff feed 	bl	8002da8 <HAL_ETH_IsRxDataAvailable>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e071      	b.n	80030bc <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fe6:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8002fe8:	2300      	movs	r3, #0
 8002fea:	623b      	str	r3, [r7, #32]
 8002fec:	e031      	b.n	8003052 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	695a      	ldr	r2, [r3, #20]
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00b      	beq.n	8003020 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	461a      	mov	r2, r3
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	695a      	ldr	r2, [r3, #20]
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003028:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	3301      	adds	r3, #1
 800302e:	627b      	str	r3, [r7, #36]	; 0x24
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	2b03      	cmp	r3, #3
 8003034:	d902      	bls.n	800303c <HAL_ETH_GetRxDataBuffer+0xb4>
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	3b04      	subs	r3, #4
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003044:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 800304c:	6a3b      	ldr	r3, [r7, #32]
 800304e:	3301      	adds	r3, #1
 8003050:	623b      	str	r3, [r7, #32]
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	3b01      	subs	r3, #1
 8003058:	6a3a      	ldr	r2, [r7, #32]
 800305a:	429a      	cmp	r2, r3
 800305c:	d3c7      	bcc.n	8002fee <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	461a      	mov	r2, r3
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	429a      	cmp	r2, r3
 800307e:	d803      	bhi.n	8003088 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	605a      	str	r2, [r3, #4]
 8003086:	e018      	b.n	80030ba <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d012      	beq.n	80030b6 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	695a      	ldr	r2, [r3, #20]
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	461a      	mov	r2, r3
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	1ad2      	subs	r2, r2, r3
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	605a      	str	r2, [r3, #4]
 80030b4:	e001      	b.n	80030ba <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3728      	adds	r7, #40	; 0x28
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	3344      	adds	r3, #68	; 0x44
 80030d2:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d107      	bne.n	80030f2 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7ff fe60 	bl	8002da8 <HAL_ETH_IsRxDataAvailable>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e017      	b.n	8003122 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	699a      	ldr	r2, [r3, #24]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	4413      	add	r3, r2
 80030fa:	3b01      	subs	r3, #1
 80030fc:	617b      	str	r3, [r7, #20]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	2b03      	cmp	r3, #3
 8003102:	d902      	bls.n	800310a <HAL_ETH_GetRxDataLength+0x46>
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	3b04      	subs	r3, #4
 8003108:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003112:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 800312a:	b480      	push	{r7}
 800312c:	b089      	sub	sp, #36	; 0x24
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	3344      	adds	r3, #68	; 0x44
 8003136:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	69fa      	ldr	r2, [r7, #28]
 8003142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003146:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e057      	b.n	800320a <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d002      	beq.n	8003168 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	3301      	adds	r3, #1
 8003166:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8003168:	2300      	movs	r3, #0
 800316a:	613b      	str	r3, [r7, #16]
 800316c:	e03b      	b.n	80031e6 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	691a      	ldr	r2, [r3, #16]
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800317c:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d009      	beq.n	800319a <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	695a      	ldr	r2, [r3, #20]
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d005      	beq.n	80031ba <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	3b01      	subs	r3, #1
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d20d      	bcs.n	80031e0 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	3301      	adds	r3, #1
 80031c8:	61fb      	str	r3, [r7, #28]
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	2b03      	cmp	r3, #3
 80031ce:	d902      	bls.n	80031d6 <HAL_ETH_BuildRxDescriptors+0xac>
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	3b04      	subs	r3, #4
 80031d4:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	69fa      	ldr	r2, [r7, #28]
 80031da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031de:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	3301      	adds	r3, #1
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d3bf      	bcc.n	800316e <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6819      	ldr	r1, [r3, #0]
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	f241 1328 	movw	r3, #4392	; 0x1128
 80031f8:	440b      	add	r3, r1
 80031fa:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3724      	adds	r7, #36	; 0x24
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b086      	sub	sp, #24
 800321a:	af00      	add	r7, sp, #0
 800321c:	60f8      	str	r0, [r7, #12]
 800321e:	60b9      	str	r1, [r7, #8]
 8003220:	607a      	str	r2, [r7, #4]
 8003222:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e03e      	b.n	80032b6 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003240:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	055b      	lsls	r3, r3, #21
 800324c:	4313      	orrs	r3, r2
 800324e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	041b      	lsls	r3, r3, #16
 800325a:	4313      	orrs	r3, r2
 800325c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f043 030c 	orr.w	r3, r3, #12
 8003264:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f043 0301 	orr.w	r3, r3, #1
 800326c:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8003278:	f7ff f9a2 	bl	80025c0 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800327e:	e009      	b.n	8003294 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8003280:	f7ff f99e 	bl	80025c0 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800328e:	d901      	bls.n	8003294 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e010      	b.n	80032b6 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1ed      	bne.n	8003280 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	461a      	mov	r2, r3
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
	...

080032c0 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
 80032cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e03c      	b.n	800335c <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80032ea:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	055b      	lsls	r3, r3, #21
 80032f6:	4313      	orrs	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	041b      	lsls	r3, r3, #16
 8003304:	4313      	orrs	r3, r2
 8003306:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f023 030c 	bic.w	r3, r3, #12
 800330e:	f043 0304 	orr.w	r3, r3, #4
 8003312:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f043 0301 	orr.w	r3, r3, #1
 800331a:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	b29a      	uxth	r2, r3
 8003320:	4b10      	ldr	r3, [pc, #64]	; (8003364 <HAL_ETH_WritePHYRegister+0xa4>)
 8003322:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8003326:	4a0f      	ldr	r2, [pc, #60]	; (8003364 <HAL_ETH_WritePHYRegister+0xa4>)
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 800332e:	f7ff f947 	bl	80025c0 <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003334:	e009      	b.n	800334a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8003336:	f7ff f943 	bl	80025c0 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003344:	d901      	bls.n	800334a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e008      	b.n	800335c <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1ed      	bne.n	8003336 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40028000 	.word	0x40028000

08003368 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e1c3      	b.n	8003704 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 020c 	and.w	r2, r3, #12
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0310 	and.w	r3, r3, #16
 8003394:	2b00      	cmp	r3, #0
 8003396:	bf14      	ite	ne
 8003398:	2301      	movne	r3, #1
 800339a:	2300      	moveq	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	461a      	mov	r2, r3
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033be:	2b00      	cmp	r3, #0
 80033c0:	bf0c      	ite	eq
 80033c2:	2301      	moveq	r3, #1
 80033c4:	2300      	movne	r3, #0
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	461a      	mov	r2, r3
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033da:	2b00      	cmp	r3, #0
 80033dc:	bf14      	ite	ne
 80033de:	2301      	movne	r3, #1
 80033e0:	2300      	moveq	r3, #0
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	461a      	mov	r2, r3
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	bf0c      	ite	eq
 80033f8:	2301      	moveq	r3, #1
 80033fa:	2300      	movne	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	461a      	mov	r2, r3
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800340e:	2b00      	cmp	r3, #0
 8003410:	bf14      	ite	ne
 8003412:	2301      	movne	r3, #1
 8003414:	2300      	moveq	r3, #0
 8003416:	b2db      	uxtb	r3, r3
 8003418:	461a      	mov	r2, r3
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003428:	2b00      	cmp	r3, #0
 800342a:	bf14      	ite	ne
 800342c:	2301      	movne	r3, #1
 800342e:	2300      	moveq	r3, #0
 8003430:	b2db      	uxtb	r3, r3
 8003432:	461a      	mov	r2, r3
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800345e:	2b00      	cmp	r3, #0
 8003460:	bf14      	ite	ne
 8003462:	2301      	movne	r3, #1
 8003464:	2300      	moveq	r3, #0
 8003466:	b2db      	uxtb	r3, r3
 8003468:	461a      	mov	r2, r3
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003478:	2b00      	cmp	r3, #0
 800347a:	bf0c      	ite	eq
 800347c:	2301      	moveq	r3, #1
 800347e:	2300      	movne	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	461a      	mov	r2, r3
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003492:	2b00      	cmp	r3, #0
 8003494:	bf0c      	ite	eq
 8003496:	2301      	moveq	r3, #1
 8003498:	2300      	movne	r3, #0
 800349a:	b2db      	uxtb	r3, r3
 800349c:	461a      	mov	r2, r3
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	bf14      	ite	ne
 80034b0:	2301      	movne	r3, #1
 80034b2:	2300      	moveq	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	461a      	mov	r2, r3
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	bf14      	ite	ne
 80034ca:	2301      	movne	r3, #1
 80034cc:	2300      	moveq	r3, #0
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	461a      	mov	r2, r3
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	bf14      	ite	ne
 80034e4:	2301      	movne	r3, #1
 80034e6:	2300      	moveq	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	461a      	mov	r2, r3
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	bf14      	ite	ne
 80034fe:	2301      	movne	r3, #1
 8003500:	2300      	moveq	r3, #0
 8003502:	b2db      	uxtb	r3, r3
 8003504:	461a      	mov	r2, r3
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	bf14      	ite	ne
 8003526:	2301      	movne	r3, #1
 8003528:	2300      	moveq	r3, #0
 800352a:	b2db      	uxtb	r3, r3
 800352c:	461a      	mov	r2, r3
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003558:	2b00      	cmp	r3, #0
 800355a:	bf0c      	ite	eq
 800355c:	2301      	moveq	r3, #1
 800355e:	2300      	movne	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	461a      	mov	r2, r3
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003574:	2b00      	cmp	r3, #0
 8003576:	bf14      	ite	ne
 8003578:	2301      	movne	r3, #1
 800357a:	2300      	moveq	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	461a      	mov	r2, r3
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003590:	2b00      	cmp	r3, #0
 8003592:	bf14      	ite	ne
 8003594:	2301      	movne	r3, #1
 8003596:	2300      	moveq	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	461a      	mov	r2, r3
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	bf14      	ite	ne
 80035b0:	2301      	movne	r3, #1
 80035b2:	2300      	moveq	r3, #0
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	461a      	mov	r2, r3
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	0e5b      	lsrs	r3, r3, #25
 80035c6:	f003 021f 	and.w	r2, r3, #31
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d8:	2b00      	cmp	r3, #0
 80035da:	bf14      	ite	ne
 80035dc:	2301      	movne	r3, #1
 80035de:	2300      	moveq	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	461a      	mov	r2, r3
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f003 020f 	and.w	r2, r3, #15
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	bf14      	ite	ne
 8003606:	2301      	movne	r3, #1
 8003608:	2300      	moveq	r3, #0
 800360a:	b2db      	uxtb	r3, r3
 800360c:	461a      	mov	r2, r3
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800361e:	2b00      	cmp	r3, #0
 8003620:	bf0c      	ite	eq
 8003622:	2301      	moveq	r3, #1
 8003624:	2300      	movne	r3, #0
 8003626:	b2db      	uxtb	r3, r3
 8003628:	461a      	mov	r2, r3
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003636:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003644:	0c1b      	lsrs	r3, r3, #16
 8003646:	b29a      	uxth	r2, r3
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b00      	cmp	r3, #0
 800365a:	bf14      	ite	ne
 800365c:	2301      	movne	r3, #1
 800365e:	2300      	moveq	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	461a      	mov	r2, r3
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	bf14      	ite	ne
 800367a:	2301      	movne	r3, #1
 800367c:	2300      	moveq	r3, #0
 800367e:	b2db      	uxtb	r3, r3
 8003680:	461a      	mov	r2, r3
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003690:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80036a0:	f003 0223 	and.w	r2, r3, #35	; 0x23
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80036b0:	f003 0308 	and.w	r3, r3, #8
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	bf14      	ite	ne
 80036b8:	2301      	movne	r3, #1
 80036ba:	2300      	moveq	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	461a      	mov	r2, r3
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80036ce:	f003 0310 	and.w	r3, r3, #16
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	bf14      	ite	ne
 80036d6:	2301      	movne	r3, #1
 80036d8:	2300      	moveq	r3, #0
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	461a      	mov	r2, r3
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80036ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	bf0c      	ite	eq
 80036f4:	2301      	moveq	r3, #1
 80036f6:	2300      	movne	r3, #0
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	461a      	mov	r2, r3
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e00a      	b.n	800373a <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003728:	2b10      	cmp	r3, #16
 800372a:	d105      	bne.n	8003738 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 800372c:	6839      	ldr	r1, [r7, #0]
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f860 	bl	80037f4 <ETH_SetMACConfig>

    return HAL_OK;
 8003734:	2300      	movs	r3, #0
 8003736:	e000      	b.n	800373a <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
  }
}
 800373a:	4618      	mov	r0, r3
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
	...

08003744 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003754:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800375c:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800375e:	f002 fc7f 	bl	8006060 <HAL_RCC_GetHCLKFreq>
 8003762:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	4a1e      	ldr	r2, [pc, #120]	; (80037e0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d908      	bls.n	800377e <HAL_ETH_SetMDIOClockRange+0x3a>
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	4a1d      	ldr	r2, [pc, #116]	; (80037e4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d804      	bhi.n	800377e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	e027      	b.n	80037ce <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	4a18      	ldr	r2, [pc, #96]	; (80037e4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d908      	bls.n	8003798 <HAL_ETH_SetMDIOClockRange+0x54>
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	4a17      	ldr	r2, [pc, #92]	; (80037e8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d204      	bcs.n	8003798 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	e01a      	b.n	80037ce <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4a13      	ldr	r2, [pc, #76]	; (80037e8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d303      	bcc.n	80037a8 <HAL_ETH_SetMDIOClockRange+0x64>
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	4a12      	ldr	r2, [pc, #72]	; (80037ec <HAL_ETH_SetMDIOClockRange+0xa8>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d911      	bls.n	80037cc <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	4a10      	ldr	r2, [pc, #64]	; (80037ec <HAL_ETH_SetMDIOClockRange+0xa8>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d908      	bls.n	80037c2 <HAL_ETH_SetMDIOClockRange+0x7e>
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	4a0f      	ldr	r2, [pc, #60]	; (80037f0 <HAL_ETH_SetMDIOClockRange+0xac>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d804      	bhi.n	80037c2 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	e005      	b.n	80037ce <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	e000      	b.n	80037ce <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80037cc:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80037d8:	bf00      	nop
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	01312cff 	.word	0x01312cff
 80037e4:	02160ebf 	.word	0x02160ebf
 80037e8:	03938700 	.word	0x03938700
 80037ec:	05f5e0ff 	.word	0x05f5e0ff
 80037f0:	08f0d17f 	.word	0x08f0d17f

080037f4 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8003806:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	791b      	ldrb	r3, [r3, #4]
 800380c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800380e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	7b1b      	ldrb	r3, [r3, #12]
 8003814:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003816:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	7b5b      	ldrb	r3, [r3, #13]
 800381c:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800381e:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	7b9b      	ldrb	r3, [r3, #14]
 8003824:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003826:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	7bdb      	ldrb	r3, [r3, #15]
 800382c:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800382e:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	7c12      	ldrb	r2, [r2, #16]
 8003834:	2a00      	cmp	r2, #0
 8003836:	d102      	bne.n	800383e <ETH_SetMACConfig+0x4a>
 8003838:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800383c:	e000      	b.n	8003840 <ETH_SetMACConfig+0x4c>
 800383e:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003840:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	7c52      	ldrb	r2, [r2, #17]
 8003846:	2a00      	cmp	r2, #0
 8003848:	d102      	bne.n	8003850 <ETH_SetMACConfig+0x5c>
 800384a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800384e:	e000      	b.n	8003852 <ETH_SetMACConfig+0x5e>
 8003850:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003852:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	7c9b      	ldrb	r3, [r3, #18]
 8003858:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800385a:	431a      	orrs	r2, r3
                                macconf->Speed |
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003860:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8003866:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	7f1b      	ldrb	r3, [r3, #28]
 800386c:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800386e:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	7f5b      	ldrb	r3, [r3, #29]
 8003874:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003876:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	7f92      	ldrb	r2, [r2, #30]
 800387c:	2a00      	cmp	r2, #0
 800387e:	d102      	bne.n	8003886 <ETH_SetMACConfig+0x92>
 8003880:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003884:	e000      	b.n	8003888 <ETH_SetMACConfig+0x94>
 8003886:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003888:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	7fdb      	ldrb	r3, [r3, #31]
 800388e:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8003890:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003898:	2a00      	cmp	r2, #0
 800389a:	d102      	bne.n	80038a2 <ETH_SetMACConfig+0xae>
 800389c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038a0:	e000      	b.n	80038a4 <ETH_SetMACConfig+0xb0>
 80038a2:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80038a4:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80038aa:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038b2:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80038b4:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80038ba:	4313      	orrs	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	4b56      	ldr	r3, [pc, #344]	; (8003a20 <ETH_SetMACConfig+0x22c>)
 80038c6:	4013      	ands	r3, r2
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6812      	ldr	r2, [r2, #0]
 80038cc:	68f9      	ldr	r1, [r7, #12]
 80038ce:	430b      	orrs	r3, r1
 80038d0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038de:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80038e0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038e8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80038ea:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80038f2:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80038f4:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80038fc:	2a00      	cmp	r2, #0
 80038fe:	d102      	bne.n	8003906 <ETH_SetMACConfig+0x112>
 8003900:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003904:	e000      	b.n	8003908 <ETH_SetMACConfig+0x114>
 8003906:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003908:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	4b42      	ldr	r3, [pc, #264]	; (8003a24 <ETH_SetMACConfig+0x230>)
 800391a:	4013      	ands	r3, r2
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6812      	ldr	r2, [r2, #0]
 8003920:	68f9      	ldr	r1, [r7, #12]
 8003922:	430b      	orrs	r3, r1
 8003924:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800392c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003932:	4313      	orrs	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68da      	ldr	r2, [r3, #12]
 800393c:	4b3a      	ldr	r3, [pc, #232]	; (8003a28 <ETH_SetMACConfig+0x234>)
 800393e:	4013      	ands	r3, r2
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6812      	ldr	r2, [r2, #0]
 8003944:	68f9      	ldr	r1, [r7, #12]
 8003946:	430b      	orrs	r3, r1
 8003948:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003950:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003956:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800395e:	2a00      	cmp	r2, #0
 8003960:	d101      	bne.n	8003966 <ETH_SetMACConfig+0x172>
 8003962:	2280      	movs	r2, #128	; 0x80
 8003964:	e000      	b.n	8003968 <ETH_SetMACConfig+0x174>
 8003966:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003968:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800396e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003970:	4313      	orrs	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800397a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800397e:	4013      	ands	r3, r2
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6812      	ldr	r2, [r2, #0]
 8003984:	68f9      	ldr	r1, [r7, #12]
 8003986:	430b      	orrs	r3, r1
 8003988:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003990:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003998:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800399a:	4313      	orrs	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a6:	f023 0103 	bic.w	r1, r3, #3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80039be:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80039da:	2a00      	cmp	r2, #0
 80039dc:	d101      	bne.n	80039e2 <ETH_SetMACConfig+0x1ee>
 80039de:	2240      	movs	r2, #64	; 0x40
 80039e0:	e000      	b.n	80039e4 <ETH_SetMACConfig+0x1f0>
 80039e2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80039e4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80039ec:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80039ee:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80039f6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80039f8:	4313      	orrs	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003a04:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003a14:	bf00      	nop
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	00048083 	.word	0x00048083
 8003a24:	c0f88000 	.word	0xc0f88000
 8003a28:	fffffef0 	.word	0xfffffef0

08003a2c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	4b38      	ldr	r3, [pc, #224]	; (8003b24 <ETH_SetDMAConfig+0xf8>)
 8003a42:	4013      	ands	r3, r2
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	6812      	ldr	r2, [r2, #0]
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	6809      	ldr	r1, [r1, #0]
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8003a52:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	791b      	ldrb	r3, [r3, #4]
 8003a58:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003a5e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	7b1b      	ldrb	r3, [r3, #12]
 8003a64:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003a66:	4313      	orrs	r3, r2
 8003a68:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	f241 0304 	movw	r3, #4100	; 0x1004
 8003a72:	4413      	add	r3, r2
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	4b2c      	ldr	r3, [pc, #176]	; (8003b28 <ETH_SetDMAConfig+0xfc>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6811      	ldr	r1, [r2, #0]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	431a      	orrs	r2, r3
 8003a82:	f241 0304 	movw	r3, #4100	; 0x1004
 8003a86:	440b      	add	r3, r1
 8003a88:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	7b5b      	ldrb	r3, [r3, #13]
 8003a8e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003a94:	4313      	orrs	r3, r2
 8003a96:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	4b22      	ldr	r3, [pc, #136]	; (8003b2c <ETH_SetDMAConfig+0x100>)
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6811      	ldr	r1, [r2, #0]
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	431a      	orrs	r2, r3
 8003aae:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8003ab2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	7d1b      	ldrb	r3, [r3, #20]
 8003abc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003abe:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	7f5b      	ldrb	r3, [r3, #29]
 8003ac4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	f241 1304 	movw	r3, #4356	; 0x1104
 8003ad2:	4413      	add	r3, r2
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	4b16      	ldr	r3, [pc, #88]	; (8003b30 <ETH_SetDMAConfig+0x104>)
 8003ad8:	4013      	ands	r3, r2
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6811      	ldr	r1, [r2, #0]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	f241 1304 	movw	r3, #4356	; 0x1104
 8003ae6:	440b      	add	r3, r1
 8003ae8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	7f1b      	ldrb	r3, [r3, #28]
 8003aee:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	f241 1308 	movw	r3, #4360	; 0x1108
 8003b00:	4413      	add	r3, r2
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <ETH_SetDMAConfig+0x108>)
 8003b06:	4013      	ands	r3, r2
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6811      	ldr	r1, [r2, #0]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	f241 1308 	movw	r3, #4360	; 0x1108
 8003b14:	440b      	add	r3, r1
 8003b16:	601a      	str	r2, [r3, #0]
}
 8003b18:	bf00      	nop
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	ffff87fd 	.word	0xffff87fd
 8003b28:	ffff2ffe 	.word	0xffff2ffe
 8003b2c:	fffec000 	.word	0xfffec000
 8003b30:	ffc0efef 	.word	0xffc0efef
 8003b34:	7fc0ffff 	.word	0x7fc0ffff

08003b38 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b0a4      	sub	sp, #144	; 0x90
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003b40:	2301      	movs	r3, #1
 8003b42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003b46:	2300      	movs	r3, #0
 8003b48:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003b50:	2300      	movs	r3, #0
 8003b52:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003b56:	2301      	movs	r3, #1
 8003b58:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003b62:	2301      	movs	r3, #1
 8003b64:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003b74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b78:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003b80:	2300      	movs	r3, #0
 8003b82:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003b84:	2300      	movs	r3, #0
 8003b86:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003b90:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003b94:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003b96:	2300      	movs	r3, #0
 8003b98:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003bac:	2300      	movs	r3, #0
 8003bae:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003bd0:	2320      	movs	r3, #32
 8003bd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003be2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003be8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003bec:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003c00:	2300      	movs	r3, #0
 8003c02:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003c06:	2300      	movs	r3, #0
 8003c08:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003c12:	2300      	movs	r3, #0
 8003c14:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003c16:	2301      	movs	r3, #1
 8003c18:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003c1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c20:	4619      	mov	r1, r3
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7ff fde6 	bl	80037f4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003c30:	2300      	movs	r3, #0
 8003c32:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003c34:	2300      	movs	r3, #0
 8003c36:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003c42:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003c46:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003c4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003c50:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003c52:	2300      	movs	r3, #0
 8003c54:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8003c58:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003c5c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003c5e:	f107 0308 	add.w	r3, r7, #8
 8003c62:	4619      	mov	r1, r3
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7ff fee1 	bl	8003a2c <ETH_SetDMAConfig>
}
 8003c6a:	bf00      	nop
 8003c6c:	3790      	adds	r7, #144	; 0x90
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
	...

08003c74 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c84:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c8c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003c8e:	f002 f9e7 	bl	8006060 <HAL_RCC_GetHCLKFreq>
 8003c92:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	4a1e      	ldr	r2, [pc, #120]	; (8003d10 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d908      	bls.n	8003cae <ETH_MAC_MDIO_ClkConfig+0x3a>
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	4a1d      	ldr	r2, [pc, #116]	; (8003d14 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d804      	bhi.n	8003cae <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003caa:	60fb      	str	r3, [r7, #12]
 8003cac:	e027      	b.n	8003cfe <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	4a18      	ldr	r2, [pc, #96]	; (8003d14 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d908      	bls.n	8003cc8 <ETH_MAC_MDIO_ClkConfig+0x54>
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	4a17      	ldr	r2, [pc, #92]	; (8003d18 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d204      	bcs.n	8003cc8 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	e01a      	b.n	8003cfe <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	4a13      	ldr	r2, [pc, #76]	; (8003d18 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d303      	bcc.n	8003cd8 <ETH_MAC_MDIO_ClkConfig+0x64>
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	4a12      	ldr	r2, [pc, #72]	; (8003d1c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d911      	bls.n	8003cfc <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	4a10      	ldr	r2, [pc, #64]	; (8003d1c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d908      	bls.n	8003cf2 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	4a0f      	ldr	r2, [pc, #60]	; (8003d20 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d804      	bhi.n	8003cf2 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	e005      	b.n	8003cfe <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cf8:	60fb      	str	r3, [r7, #12]
 8003cfa:	e000      	b.n	8003cfe <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003cfc:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003d08:	bf00      	nop
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	01312cff 	.word	0x01312cff
 8003d14:	02160ebf 	.word	0x02160ebf
 8003d18:	03938700 	.word	0x03938700
 8003d1c:	05f5e0ff 	.word	0x05f5e0ff
 8003d20:	08f0d17f 	.word	0x08f0d17f

08003d24 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	e01d      	b.n	8003d6e <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68d9      	ldr	r1, [r3, #12]
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	4413      	add	r3, r2
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	440b      	add	r3, r1
 8003d42:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2200      	movs	r2, #0
 8003d48:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2200      	movs	r2, #0
 8003d54:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003d5c:	68b9      	ldr	r1, [r7, #8]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	3206      	adds	r2, #6
 8003d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2b03      	cmp	r3, #3
 8003d72:	d9de      	bls.n	8003d32 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	f241 132c 	movw	r3, #4396	; 0x112c
 8003d82:	4413      	add	r3, r2
 8003d84:	2203      	movs	r2, #3
 8003d86:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68d9      	ldr	r1, [r3, #12]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	f241 1314 	movw	r3, #4372	; 0x1114
 8003d94:	4413      	add	r3, r2
 8003d96:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68da      	ldr	r2, [r3, #12]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8003da4:	601a      	str	r2, [r3, #0]
}
 8003da6:	bf00      	nop
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b085      	sub	sp, #20
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	e024      	b.n	8003e0a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6919      	ldr	r1, [r3, #16]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	4413      	add	r3, r2
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	440b      	add	r3, r1
 8003dd0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	2200      	movs	r2, #0
 8003de2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	2200      	movs	r2, #0
 8003de8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2200      	movs	r2, #0
 8003dee:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	2200      	movs	r2, #0
 8003df4:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	3310      	adds	r3, #16
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	3301      	adds	r3, #1
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2b03      	cmp	r3, #3
 8003e0e:	d9d7      	bls.n	8003dc0 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	f241 1330 	movw	r3, #4400	; 0x1130
 8003e36:	4413      	add	r3, r2
 8003e38:	2203      	movs	r2, #3
 8003e3a:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6919      	ldr	r1, [r3, #16]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	f241 131c 	movw	r3, #4380	; 0x111c
 8003e48:	4413      	add	r3, r2
 8003e4a:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	f241 1328 	movw	r3, #4392	; 0x1128
 8003e5c:	4413      	add	r3, r2
 8003e5e:	6019      	str	r1, [r3, #0]
}
 8003e60:	bf00      	nop
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b08d      	sub	sp, #52	; 0x34
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	3318      	adds	r3, #24
 8003e7c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e96:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003eae:	d007      	beq.n	8003ec0 <ETH_Prepare_Tx_Descriptors+0x54>
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	e24a      	b.n	800435a <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d044      	beq.n	8003f5a <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8003ed0:	6a3b      	ldr	r3, [r7, #32]
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	4b72      	ldr	r3, [pc, #456]	; (80040a0 <ETH_Prepare_Tx_Descriptors+0x234>)
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003edc:	431a      	orrs	r2, r3
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8003ee2:	6a3b      	ldr	r3, [r7, #32]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003efc:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0308 	and.w	r3, r3, #8
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d027      	beq.n	8003f5a <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8003f0a:	6a3b      	ldr	r3, [r7, #32]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f14:	041b      	lsls	r3, r3, #16
 8003f16:	431a      	orrs	r2, r3
 8003f18:	6a3b      	ldr	r3, [r7, #32]
 8003f1a:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f34:	431a      	orrs	r2, r3
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003f48:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003f58:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0310 	and.w	r3, r3, #16
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00e      	beq.n	8003f84 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8003f66:	6a3b      	ldr	r3, [r7, #32]
 8003f68:	689a      	ldr	r2, [r3, #8]
 8003f6a:	4b4e      	ldr	r3, [pc, #312]	; (80040a4 <ETH_Prepare_Tx_Descriptors+0x238>)
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	6992      	ldr	r2, [r2, #24]
 8003f72:	431a      	orrs	r2, r3
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8003f78:	6a3b      	ldr	r3, [r7, #32]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d105      	bne.n	8003f9c <ETH_Prepare_Tx_Descriptors+0x130>
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0310 	and.w	r3, r3, #16
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d030      	beq.n	8003ffe <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fbc:	2b03      	cmp	r3, #3
 8003fbe:	d902      	bls.n	8003fc6 <ETH_Prepare_Tx_Descriptors+0x15a>
 8003fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc2:	3b04      	subs	r3, #4
 8003fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fce:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8003fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fe2:	d10c      	bne.n	8003ffe <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fec:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003fee:	6a3b      	ldr	r3, [r7, #32]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	e1ad      	b.n	800435a <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8003ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004000:	3301      	adds	r3, #1
 8004002:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	461a      	mov	r2, r3
 800400a:	6a3b      	ldr	r3, [r7, #32]
 800400c:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	689a      	ldr	r2, [r3, #8]
 8004012:	4b24      	ldr	r3, [pc, #144]	; (80040a4 <ETH_Prepare_Tx_Descriptors+0x238>)
 8004014:	4013      	ands	r3, r2
 8004016:	69fa      	ldr	r2, [r7, #28]
 8004018:	6852      	ldr	r2, [r2, #4]
 800401a:	431a      	orrs	r2, r3
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d012      	beq.n	800404e <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	461a      	mov	r2, r3
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	4b1a      	ldr	r3, [pc, #104]	; (80040a8 <ETH_Prepare_Tx_Descriptors+0x23c>)
 800403e:	4013      	ands	r3, r2
 8004040:	69fa      	ldr	r2, [r7, #28]
 8004042:	6852      	ldr	r2, [r2, #4]
 8004044:	0412      	lsls	r2, r2, #16
 8004046:	431a      	orrs	r2, r3
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	609a      	str	r2, [r3, #8]
 800404c:	e008      	b.n	8004060 <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	2200      	movs	r2, #0
 8004052:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	4b13      	ldr	r3, [pc, #76]	; (80040a8 <ETH_Prepare_Tx_Descriptors+0x23c>)
 800405a:	4013      	ands	r3, r2
 800405c:	6a3a      	ldr	r2, [r7, #32]
 800405e:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0310 	and.w	r3, r3, #16
 8004068:	2b00      	cmp	r3, #0
 800406a:	d021      	beq.n	80040b0 <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	04db      	lsls	r3, r3, #19
 800407a:	431a      	orrs	r2, r3
 800407c:	6a3b      	ldr	r3, [r7, #32]
 800407e:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	4b09      	ldr	r3, [pc, #36]	; (80040ac <ETH_Prepare_Tx_Descriptors+0x240>)
 8004086:	4013      	ands	r3, r2
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	69d2      	ldr	r2, [r2, #28]
 800408c:	431a      	orrs	r2, r3
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	60da      	str	r2, [r3, #12]
 800409e:	e02e      	b.n	80040fe <ETH_Prepare_Tx_Descriptors+0x292>
 80040a0:	ffff0000 	.word	0xffff0000
 80040a4:	ffffc000 	.word	0xffffc000
 80040a8:	c000ffff 	.word	0xc000ffff
 80040ac:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	68da      	ldr	r2, [r3, #12]
 80040b4:	4b93      	ldr	r3, [pc, #588]	; (8004304 <ETH_Prepare_Tx_Descriptors+0x498>)
 80040b6:	4013      	ands	r3, r2
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	6852      	ldr	r2, [r2, #4]
 80040bc:	431a      	orrs	r2, r3
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d008      	beq.n	80040e0 <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	431a      	orrs	r2, r3
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0320 	and.w	r3, r3, #32
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d008      	beq.n	80040fe <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	431a      	orrs	r2, r3
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0304 	and.w	r3, r3, #4
 8004106:	2b00      	cmp	r3, #0
 8004108:	d008      	beq.n	800411c <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004116:	431a      	orrs	r2, r3
 8004118:	6a3b      	ldr	r3, [r7, #32]
 800411a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004124:	6a3b      	ldr	r3, [r7, #32]
 8004126:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004130:	6a3b      	ldr	r3, [r7, #32]
 8004132:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800413c:	6a3b      	ldr	r3, [r7, #32]
 800413e:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 80cb 	beq.w	80042e4 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	431a      	orrs	r2, r3
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004160:	e0c0      	b.n	80042e4 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8004162:	6a3b      	ldr	r3, [r7, #32]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800416e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004170:	3301      	adds	r3, #1
 8004172:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004176:	2b03      	cmp	r3, #3
 8004178:	d902      	bls.n	8004180 <ETH_Prepare_Tx_Descriptors+0x314>
 800417a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417c:	3b04      	subs	r3, #4
 800417e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004188:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004196:	6a3b      	ldr	r3, [r7, #32]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800419e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041a2:	d007      	beq.n	80041b4 <ETH_Prepare_Tx_Descriptors+0x348>
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a8:	3304      	adds	r3, #4
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d026      	beq.n	8004202 <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041c0:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 80041c2:	2300      	movs	r3, #0
 80041c4:	627b      	str	r3, [r7, #36]	; 0x24
 80041c6:	e016      	b.n	80041f6 <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80041c8:	6a3b      	ldr	r3, [r7, #32]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041d0:	6a3b      	ldr	r3, [r7, #32]
 80041d2:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80041d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d6:	3301      	adds	r3, #1
 80041d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041dc:	2b03      	cmp	r3, #3
 80041de:	d902      	bls.n	80041e6 <ETH_Prepare_Tx_Descriptors+0x37a>
 80041e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e2:	3b04      	subs	r3, #4
 80041e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ee:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	3301      	adds	r3, #1
 80041f4:	627b      	str	r3, [r7, #36]	; 0x24
 80041f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d3e4      	bcc.n	80041c8 <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 80041fe:	2302      	movs	r3, #2
 8004200:	e0ab      	b.n	800435a <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 8004202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004204:	3301      	adds	r3, #1
 8004206:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	461a      	mov	r2, r3
 8004214:	6a3b      	ldr	r3, [r7, #32]
 8004216:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8004218:	6a3b      	ldr	r3, [r7, #32]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	4b3a      	ldr	r3, [pc, #232]	; (8004308 <ETH_Prepare_Tx_Descriptors+0x49c>)
 800421e:	4013      	ands	r3, r2
 8004220:	69fa      	ldr	r2, [r7, #28]
 8004222:	6852      	ldr	r2, [r2, #4]
 8004224:	431a      	orrs	r2, r3
 8004226:	6a3b      	ldr	r3, [r7, #32]
 8004228:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d012      	beq.n	8004258 <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	461a      	mov	r2, r3
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	4b31      	ldr	r3, [pc, #196]	; (800430c <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8004248:	4013      	ands	r3, r2
 800424a:	69fa      	ldr	r2, [r7, #28]
 800424c:	6852      	ldr	r2, [r2, #4]
 800424e:	0412      	lsls	r2, r2, #16
 8004250:	431a      	orrs	r2, r3
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	609a      	str	r2, [r3, #8]
 8004256:	e008      	b.n	800426a <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004258:	6a3b      	ldr	r3, [r7, #32]
 800425a:	2200      	movs	r2, #0
 800425c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	689a      	ldr	r2, [r3, #8]
 8004262:	4b2a      	ldr	r3, [pc, #168]	; (800430c <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8004264:	4013      	ands	r3, r2
 8004266:	6a3a      	ldr	r2, [r7, #32]
 8004268:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0310 	and.w	r3, r3, #16
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00f      	beq.n	8004296 <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	4b25      	ldr	r3, [pc, #148]	; (8004310 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 800427c:	4013      	ands	r3, r2
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	69d2      	ldr	r2, [r2, #28]
 8004282:	431a      	orrs	r2, r3
 8004284:	6a3b      	ldr	r3, [r7, #32]
 8004286:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	60da      	str	r2, [r3, #12]
 8004294:	e017      	b.n	80042c6 <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	4b1a      	ldr	r3, [pc, #104]	; (8004304 <ETH_Prepare_Tx_Descriptors+0x498>)
 800429c:	4013      	ands	r3, r2
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	6852      	ldr	r2, [r2, #4]
 80042a2:	431a      	orrs	r2, r3
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d008      	beq.n	80042c6 <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80042b4:	6a3b      	ldr	r3, [r7, #32]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	431a      	orrs	r2, r3
 80042c2:	6a3b      	ldr	r3, [r7, #32]
 80042c4:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	3301      	adds	r3, #1
 80042ca:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80042cc:	6a3b      	ldr	r3, [r7, #32]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80042d4:	6a3b      	ldr	r3, [r7, #32]
 80042d6:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80042d8:	6a3b      	ldr	r3, [r7, #32]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80042e0:	6a3b      	ldr	r3, [r7, #32]
 80042e2:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f47f af3a 	bne.w	8004162 <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00f      	beq.n	8004314 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80042f4:	6a3b      	ldr	r3, [r7, #32]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	609a      	str	r2, [r3, #8]
 8004300:	e00e      	b.n	8004320 <ETH_Prepare_Tx_Descriptors+0x4b4>
 8004302:	bf00      	nop
 8004304:	ffff8000 	.word	0xffff8000
 8004308:	ffffc000 	.word	0xffffc000
 800430c:	c000ffff 	.word	0xc000ffff
 8004310:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004328:	6a3b      	ldr	r3, [r7, #32]
 800432a:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004330:	6979      	ldr	r1, [r7, #20]
 8004332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004334:	3304      	adds	r3, #4
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	440b      	add	r3, r1
 800433a:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004340:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004342:	b672      	cpsid	i
}
 8004344:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	4413      	add	r3, r2
 800434e:	1c5a      	adds	r2, r3, #1
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8004354:	b662      	cpsie	i
}
 8004356:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3734      	adds	r7, #52	; 0x34
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop

08004368 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b098      	sub	sp, #96	; 0x60
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004370:	4a84      	ldr	r2, [pc, #528]	; (8004584 <HAL_FDCAN_Init+0x21c>)
 8004372:	f107 030c 	add.w	r3, r7, #12
 8004376:	4611      	mov	r1, r2
 8004378:	224c      	movs	r2, #76	; 0x4c
 800437a:	4618      	mov	r0, r3
 800437c:	f010 fc86 	bl	8014c8c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e1ca      	b.n	8004720 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a7e      	ldr	r2, [pc, #504]	; (8004588 <HAL_FDCAN_Init+0x220>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d106      	bne.n	80043a2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800439c:	461a      	mov	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d106      	bne.n	80043bc <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7fd f986 	bl	80016c8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699a      	ldr	r2, [r3, #24]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0210 	bic.w	r2, r2, #16
 80043ca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043cc:	f7fe f8f8 	bl	80025c0 <HAL_GetTick>
 80043d0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80043d2:	e014      	b.n	80043fe <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80043d4:	f7fe f8f4 	bl	80025c0 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b0a      	cmp	r3, #10
 80043e0:	d90d      	bls.n	80043fe <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043e8:	f043 0201 	orr.w	r2, r3, #1
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2203      	movs	r2, #3
 80043f6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e190      	b.n	8004720 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	f003 0308 	and.w	r3, r3, #8
 8004408:	2b08      	cmp	r3, #8
 800440a:	d0e3      	beq.n	80043d4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699a      	ldr	r2, [r3, #24]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0201 	orr.w	r2, r2, #1
 800441a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800441c:	f7fe f8d0 	bl	80025c0 <HAL_GetTick>
 8004420:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004422:	e014      	b.n	800444e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004424:	f7fe f8cc 	bl	80025c0 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b0a      	cmp	r3, #10
 8004430:	d90d      	bls.n	800444e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004438:	f043 0201 	orr.w	r2, r3, #1
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2203      	movs	r2, #3
 8004446:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e168      	b.n	8004720 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0e3      	beq.n	8004424 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	699a      	ldr	r2, [r3, #24]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f042 0202 	orr.w	r2, r2, #2
 800446a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	7c1b      	ldrb	r3, [r3, #16]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d108      	bne.n	8004486 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699a      	ldr	r2, [r3, #24]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004482:	619a      	str	r2, [r3, #24]
 8004484:	e007      	b.n	8004496 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	699a      	ldr	r2, [r3, #24]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004494:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	7c5b      	ldrb	r3, [r3, #17]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d108      	bne.n	80044b0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	699a      	ldr	r2, [r3, #24]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044ac:	619a      	str	r2, [r3, #24]
 80044ae:	e007      	b.n	80044c0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	699a      	ldr	r2, [r3, #24]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80044be:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	7c9b      	ldrb	r3, [r3, #18]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d108      	bne.n	80044da <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699a      	ldr	r2, [r3, #24]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044d6:	619a      	str	r2, [r3, #24]
 80044d8:	e007      	b.n	80044ea <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	699a      	ldr	r2, [r3, #24]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044e8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699a      	ldr	r2, [r3, #24]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800450e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	691a      	ldr	r2, [r3, #16]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 0210 	bic.w	r2, r2, #16
 800451e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d108      	bne.n	800453a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699a      	ldr	r2, [r3, #24]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0204 	orr.w	r2, r2, #4
 8004536:	619a      	str	r2, [r3, #24]
 8004538:	e030      	b.n	800459c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d02c      	beq.n	800459c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	2b02      	cmp	r3, #2
 8004548:	d020      	beq.n	800458c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	699a      	ldr	r2, [r3, #24]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004558:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	691a      	ldr	r2, [r3, #16]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f042 0210 	orr.w	r2, r2, #16
 8004568:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	2b03      	cmp	r3, #3
 8004570:	d114      	bne.n	800459c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	699a      	ldr	r2, [r3, #24]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f042 0220 	orr.w	r2, r2, #32
 8004580:	619a      	str	r2, [r3, #24]
 8004582:	e00b      	b.n	800459c <HAL_FDCAN_Init+0x234>
 8004584:	08015de4 	.word	0x08015de4
 8004588:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	699a      	ldr	r2, [r3, #24]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0220 	orr.w	r2, r2, #32
 800459a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	3b01      	subs	r3, #1
 80045a2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	69db      	ldr	r3, [r3, #28]
 80045a8:	3b01      	subs	r3, #1
 80045aa:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80045ac:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80045b4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	3b01      	subs	r3, #1
 80045be:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80045c4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80045c6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045d0:	d115      	bne.n	80045fe <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045dc:	3b01      	subs	r3, #1
 80045de:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80045e0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e6:	3b01      	subs	r3, #1
 80045e8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80045ea:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	3b01      	subs	r3, #1
 80045f4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80045fa:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80045fc:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00a      	beq.n	800461c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004624:	4413      	add	r3, r2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d012      	beq.n	8004650 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004632:	f023 0107 	bic.w	r1, r3, #7
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004640:	4413      	add	r3, r2
 8004642:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004654:	2b00      	cmp	r3, #0
 8004656:	d012      	beq.n	800467e <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004660:	f023 0107 	bic.w	r1, r3, #7
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800466e:	4413      	add	r3, r2
 8004670:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	430a      	orrs	r2, r1
 800467a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004682:	2b00      	cmp	r3, #0
 8004684:	d013      	beq.n	80046ae <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800468e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800469c:	4413      	add	r3, r2
 800469e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80046a2:	011a      	lsls	r2, r3, #4
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d013      	beq.n	80046de <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80046be:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80046cc:	4413      	add	r3, r2
 80046ce:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80046d2:	021a      	lsls	r2, r3, #8
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a11      	ldr	r2, [pc, #68]	; (8004728 <HAL_FDCAN_Init+0x3c0>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d107      	bne.n	80046f8 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	689a      	ldr	r2, [r3, #8]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f022 0203 	bic.w	r2, r2, #3
 80046f6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f9af 	bl	8004a74 <FDCAN_CalcultateRamBlockAddresses>
 8004716:	4603      	mov	r3, r0
 8004718:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800471c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004720:	4618      	mov	r0, r3
 8004722:	3760      	adds	r7, #96	; 0x60
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	4000a000 	.word	0x4000a000

0800472c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800473c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800473e:	7bfb      	ldrb	r3, [r7, #15]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d002      	beq.n	800474a <HAL_FDCAN_ConfigFilter+0x1e>
 8004744:	7bfb      	ldrb	r3, [r7, #15]
 8004746:	2b02      	cmp	r3, #2
 8004748:	d157      	bne.n	80047fa <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d12b      	bne.n	80047aa <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	2b07      	cmp	r3, #7
 8004758:	d10d      	bne.n	8004776 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8004766:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800476c:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800476e:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8004772:	617b      	str	r3, [r7, #20]
 8004774:	e00e      	b.n	8004794 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004782:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800478a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004790:	4313      	orrs	r3, r2
 8004792:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4413      	add	r3, r2
 80047a0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	e025      	b.n	80047f6 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	075a      	lsls	r2, r3, #29
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	2b07      	cmp	r3, #7
 80047be:	d103      	bne.n	80047c8 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	613b      	str	r3, [r7, #16]
 80047c6:	e006      	b.n	80047d6 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	079a      	lsls	r2, r3, #30
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	4413      	add	r3, r2
 80047e2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	3304      	adds	r3, #4
 80047ee:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80047f6:	2300      	movs	r3, #0
 80047f8:	e008      	b.n	800480c <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004800:	f043 0202 	orr.w	r2, r3, #2
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
  }
}
 800480c:	4618      	mov	r0, r3
 800480e:	371c      	adds	r7, #28
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
 8004824:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b01      	cmp	r3, #1
 8004830:	d110      	bne.n	8004854 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800483a:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8004840:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800484c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8004850:	2300      	movs	r3, #0
 8004852:	e008      	b.n	8004866 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800485a:	f043 0204 	orr.w	r2, r3, #4
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
  }
}
 8004866:	4618      	mov	r0, r3
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b01      	cmp	r3, #1
 8004884:	d111      	bne.n	80048aa <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2202      	movs	r2, #2
 800488a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	699a      	ldr	r2, [r3, #24]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0201 	bic.w	r2, r2, #1
 800489c:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80048a6:	2300      	movs	r3, #0
 80048a8:	e008      	b.n	80048bc <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048b0:	f043 0204 	orr.w	r2, r3, #4
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
  }
}
 80048bc:	4618      	mov	r0, r3
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d141      	bne.n	8004964 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80048e8:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d109      	bne.n	8004904 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048f6:	f043 0220 	orr.w	r2, r3, #32
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e038      	b.n	8004976 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800490c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d009      	beq.n	8004928 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800491a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e026      	b.n	8004976 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004930:	0c1b      	lsrs	r3, r3, #16
 8004932:	f003 031f 	and.w	r3, r3, #31
 8004936:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	68b9      	ldr	r1, [r7, #8]
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 fa1e 	bl	8004d80 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2101      	movs	r1, #1
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	fa01 f202 	lsl.w	r2, r1, r2
 8004950:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004954:	2201      	movs	r2, #1
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	409a      	lsls	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8004960:	2300      	movs	r3, #0
 8004962:	e008      	b.n	8004976 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800496a:	f043 0208 	orr.w	r2, r3, #8
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
  }
}
 8004976:	4618      	mov	r0, r3
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
	...

08004980 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8004980:	b480      	push	{r7}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004992:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004994:	7dfb      	ldrb	r3, [r7, #23]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d002      	beq.n	80049a0 <HAL_FDCAN_ActivateNotification+0x20>
 800499a:	7dfb      	ldrb	r3, [r7, #23]
 800499c:	2b02      	cmp	r3, #2
 800499e:	d155      	bne.n	8004a4c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	4013      	ands	r3, r2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d108      	bne.n	80049c0 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f042 0201 	orr.w	r2, r2, #1
 80049bc:	65da      	str	r2, [r3, #92]	; 0x5c
 80049be:	e014      	b.n	80049ea <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	4013      	ands	r3, r2
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d108      	bne.n	80049e2 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0202 	orr.w	r2, r2, #2
 80049de:	65da      	str	r2, [r3, #92]	; 0x5c
 80049e0:	e003      	b.n	80049ea <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2203      	movs	r2, #3
 80049e8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d009      	beq.n	8004a08 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d009      	beq.n	8004a26 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	4b0f      	ldr	r3, [pc, #60]	; (8004a6c <HAL_FDCAN_ActivateNotification+0xec>)
 8004a30:	4013      	ands	r3, r2
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	6812      	ldr	r2, [r2, #0]
 8004a36:	430b      	orrs	r3, r1
 8004a38:	6553      	str	r3, [r2, #84]	; 0x54
 8004a3a:	4b0d      	ldr	r3, [pc, #52]	; (8004a70 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004a3c:	695a      	ldr	r2, [r3, #20]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	0f9b      	lsrs	r3, r3, #30
 8004a42:	490b      	ldr	r1, [pc, #44]	; (8004a70 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	e008      	b.n	8004a5e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a52:	f043 0202 	orr.w	r2, r3, #2
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
  }
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	371c      	adds	r7, #28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	3fcfffff 	.word	0x3fcfffff
 8004a70:	4000a800 	.word	0x4000a800

08004a74 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a80:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004a8a:	4ba7      	ldr	r3, [pc, #668]	; (8004d28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	0091      	lsls	r1, r2, #2
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	6812      	ldr	r2, [r2, #0]
 8004a96:	430b      	orrs	r3, r1
 8004a98:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aa4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aac:	041a      	lsls	r2, r3, #16
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	4413      	add	r3, r2
 8004ac0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004aca:	4b97      	ldr	r3, [pc, #604]	; (8004d28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004acc:	4013      	ands	r3, r2
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	0091      	lsls	r1, r2, #2
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	6812      	ldr	r2, [r2, #0]
 8004ad6:	430b      	orrs	r3, r1
 8004ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aec:	041a      	lsls	r2, r3, #16
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	4413      	add	r3, r2
 8004b02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004b0c:	4b86      	ldr	r3, [pc, #536]	; (8004d28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b0e:	4013      	ands	r3, r2
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	0091      	lsls	r1, r2, #2
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6812      	ldr	r2, [r2, #0]
 8004b18:	430b      	orrs	r3, r1
 8004b1a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004b26:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	041a      	lsls	r2, r3, #16
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004b42:	fb02 f303 	mul.w	r3, r2, r3
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	4413      	add	r3, r2
 8004b4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004b54:	4b74      	ldr	r3, [pc, #464]	; (8004d28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b56:	4013      	ands	r3, r2
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	0091      	lsls	r1, r2, #2
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6812      	ldr	r2, [r2, #0]
 8004b60:	430b      	orrs	r3, r1
 8004b62:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b6e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b76:	041a      	lsls	r2, r3, #16
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004b8a:	fb02 f303 	mul.w	r3, r2, r3
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	4413      	add	r3, r2
 8004b92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004b9c:	4b62      	ldr	r3, [pc, #392]	; (8004d28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	0091      	lsls	r1, r2, #2
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6812      	ldr	r2, [r2, #0]
 8004ba8:	430b      	orrs	r3, r1
 8004baa:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004bb6:	fb02 f303 	mul.w	r3, r2, r3
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004bc8:	4b57      	ldr	r3, [pc, #348]	; (8004d28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004bca:	4013      	ands	r3, r2
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	0091      	lsls	r1, r2, #2
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	6812      	ldr	r2, [r2, #0]
 8004bd4:	430b      	orrs	r3, r1
 8004bd6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004be2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bea:	041a      	lsls	r2, r3, #16
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	4413      	add	r3, r2
 8004c00:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004c0a:	4b47      	ldr	r3, [pc, #284]	; (8004d28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	0091      	lsls	r1, r2, #2
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	6812      	ldr	r2, [r2, #0]
 8004c16:	430b      	orrs	r3, r1
 8004c18:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004c24:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2c:	041a      	lsls	r2, r3, #16
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004c40:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c48:	061a      	lsls	r2, r3, #24
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c58:	4b34      	ldr	r3, [pc, #208]	; (8004d2c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004c5a:	4413      	add	r3, r2
 8004c5c:	009a      	lsls	r2, r3, #2
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	441a      	add	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	441a      	add	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004c8e:	fb01 f303 	mul.w	r3, r1, r3
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	441a      	add	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004ca6:	fb01 f303 	mul.w	r3, r1, r3
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	441a      	add	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cba:	6879      	ldr	r1, [r7, #4]
 8004cbc:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004cbe:	fb01 f303 	mul.w	r3, r1, r3
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	441a      	add	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	441a      	add	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cea:	6879      	ldr	r1, [r7, #4]
 8004cec:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004cee:	fb01 f303 	mul.w	r3, r1, r3
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	441a      	add	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d06:	6879      	ldr	r1, [r7, #4]
 8004d08:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004d0a:	fb01 f303 	mul.w	r3, r1, r3
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	441a      	add	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1e:	4a04      	ldr	r2, [pc, #16]	; (8004d30 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d915      	bls.n	8004d50 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004d24:	e006      	b.n	8004d34 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004d26:	bf00      	nop
 8004d28:	ffff0003 	.word	0xffff0003
 8004d2c:	10002b00 	.word	0x10002b00
 8004d30:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d3a:	f043 0220 	orr.w	r2, r3, #32
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2203      	movs	r2, #3
 8004d48:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e010      	b.n	8004d72 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d54:	60fb      	str	r3, [r7, #12]
 8004d56:	e005      	b.n	8004d64 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	3304      	adds	r3, #4
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d3f3      	bcc.n	8004d58 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop

08004d80 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b089      	sub	sp, #36	; 0x24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
 8004d8c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10a      	bne.n	8004dac <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004d9e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004da6:	4313      	orrs	r3, r2
 8004da8:	61fb      	str	r3, [r7, #28]
 8004daa:	e00a      	b.n	8004dc2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004db4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004dba:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004dbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dc0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8004dcc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004dd2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004dd8:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8004dde:	4313      	orrs	r3, r2
 8004de0:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dec:	6839      	ldr	r1, [r7, #0]
 8004dee:	fb01 f303 	mul.w	r3, r1, r3
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	69fa      	ldr	r2, [r7, #28]
 8004dfc:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	3304      	adds	r3, #4
 8004e02:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	3304      	adds	r3, #4
 8004e0e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8004e10:	2300      	movs	r3, #0
 8004e12:	617b      	str	r3, [r7, #20]
 8004e14:	e020      	b.n	8004e58 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	3303      	adds	r3, #3
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	3302      	adds	r3, #2
 8004e26:	6879      	ldr	r1, [r7, #4]
 8004e28:	440b      	add	r3, r1
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8004e2e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	3301      	adds	r3, #1
 8004e34:	6879      	ldr	r1, [r7, #4]
 8004e36:	440b      	add	r3, r1
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8004e3c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004e3e:	6879      	ldr	r1, [r7, #4]
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	440a      	add	r2, r1
 8004e44:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8004e46:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	3304      	adds	r3, #4
 8004e50:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	3304      	adds	r3, #4
 8004e56:	617b      	str	r3, [r7, #20]
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	0c1b      	lsrs	r3, r3, #16
 8004e5e:	4a06      	ldr	r2, [pc, #24]	; (8004e78 <FDCAN_CopyMessageToRAM+0xf8>)
 8004e60:	5cd3      	ldrb	r3, [r2, r3]
 8004e62:	461a      	mov	r2, r3
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d3d5      	bcc.n	8004e16 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8004e6a:	bf00      	nop
 8004e6c:	bf00      	nop
 8004e6e:	3724      	adds	r7, #36	; 0x24
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr
 8004e78:	08019000 	.word	0x08019000

08004e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b089      	sub	sp, #36	; 0x24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004e86:	2300      	movs	r3, #0
 8004e88:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004e8a:	4b86      	ldr	r3, [pc, #536]	; (80050a4 <HAL_GPIO_Init+0x228>)
 8004e8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e8e:	e18c      	b.n	80051aa <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	2101      	movs	r1, #1
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	fa01 f303 	lsl.w	r3, r1, r3
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 817e 	beq.w	80051a4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f003 0303 	and.w	r3, r3, #3
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d005      	beq.n	8004ec0 <HAL_GPIO_Init+0x44>
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f003 0303 	and.w	r3, r3, #3
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d130      	bne.n	8004f22 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	2203      	movs	r2, #3
 8004ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed0:	43db      	mvns	r3, r3
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	68da      	ldr	r2, [r3, #12]
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	005b      	lsls	r3, r3, #1
 8004ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	fa02 f303 	lsl.w	r3, r2, r3
 8004efe:	43db      	mvns	r3, r3
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	4013      	ands	r3, r2
 8004f04:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	091b      	lsrs	r3, r3, #4
 8004f0c:	f003 0201 	and.w	r2, r3, #1
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	fa02 f303 	lsl.w	r3, r2, r3
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f003 0303 	and.w	r3, r3, #3
 8004f2a:	2b03      	cmp	r3, #3
 8004f2c:	d017      	beq.n	8004f5e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	005b      	lsls	r3, r3, #1
 8004f38:	2203      	movs	r2, #3
 8004f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3e:	43db      	mvns	r3, r3
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	4013      	ands	r3, r2
 8004f44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	689a      	ldr	r2, [r3, #8]
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	005b      	lsls	r3, r3, #1
 8004f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f003 0303 	and.w	r3, r3, #3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d123      	bne.n	8004fb2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	08da      	lsrs	r2, r3, #3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	3208      	adds	r2, #8
 8004f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	f003 0307 	and.w	r3, r3, #7
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	220f      	movs	r2, #15
 8004f82:	fa02 f303 	lsl.w	r3, r2, r3
 8004f86:	43db      	mvns	r3, r3
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	691a      	ldr	r2, [r3, #16]
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	f003 0307 	and.w	r3, r3, #7
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9e:	69ba      	ldr	r2, [r7, #24]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	08da      	lsrs	r2, r3, #3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3208      	adds	r2, #8
 8004fac:	69b9      	ldr	r1, [r7, #24]
 8004fae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	005b      	lsls	r3, r3, #1
 8004fbc:	2203      	movs	r2, #3
 8004fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc2:	43db      	mvns	r3, r3
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f003 0203 	and.w	r2, r3, #3
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	005b      	lsls	r3, r3, #1
 8004fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fda:	69ba      	ldr	r2, [r7, #24]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 80d8 	beq.w	80051a4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ff4:	4b2c      	ldr	r3, [pc, #176]	; (80050a8 <HAL_GPIO_Init+0x22c>)
 8004ff6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ffa:	4a2b      	ldr	r2, [pc, #172]	; (80050a8 <HAL_GPIO_Init+0x22c>)
 8004ffc:	f043 0302 	orr.w	r3, r3, #2
 8005000:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005004:	4b28      	ldr	r3, [pc, #160]	; (80050a8 <HAL_GPIO_Init+0x22c>)
 8005006:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005012:	4a26      	ldr	r2, [pc, #152]	; (80050ac <HAL_GPIO_Init+0x230>)
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	089b      	lsrs	r3, r3, #2
 8005018:	3302      	adds	r3, #2
 800501a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800501e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	f003 0303 	and.w	r3, r3, #3
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	220f      	movs	r2, #15
 800502a:	fa02 f303 	lsl.w	r3, r2, r3
 800502e:	43db      	mvns	r3, r3
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	4013      	ands	r3, r2
 8005034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a1d      	ldr	r2, [pc, #116]	; (80050b0 <HAL_GPIO_Init+0x234>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d04a      	beq.n	80050d4 <HAL_GPIO_Init+0x258>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a1c      	ldr	r2, [pc, #112]	; (80050b4 <HAL_GPIO_Init+0x238>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d02b      	beq.n	800509e <HAL_GPIO_Init+0x222>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a1b      	ldr	r2, [pc, #108]	; (80050b8 <HAL_GPIO_Init+0x23c>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d025      	beq.n	800509a <HAL_GPIO_Init+0x21e>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a1a      	ldr	r2, [pc, #104]	; (80050bc <HAL_GPIO_Init+0x240>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d01f      	beq.n	8005096 <HAL_GPIO_Init+0x21a>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a19      	ldr	r2, [pc, #100]	; (80050c0 <HAL_GPIO_Init+0x244>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d019      	beq.n	8005092 <HAL_GPIO_Init+0x216>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a18      	ldr	r2, [pc, #96]	; (80050c4 <HAL_GPIO_Init+0x248>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d013      	beq.n	800508e <HAL_GPIO_Init+0x212>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a17      	ldr	r2, [pc, #92]	; (80050c8 <HAL_GPIO_Init+0x24c>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d00d      	beq.n	800508a <HAL_GPIO_Init+0x20e>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a16      	ldr	r2, [pc, #88]	; (80050cc <HAL_GPIO_Init+0x250>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d007      	beq.n	8005086 <HAL_GPIO_Init+0x20a>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a15      	ldr	r2, [pc, #84]	; (80050d0 <HAL_GPIO_Init+0x254>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d101      	bne.n	8005082 <HAL_GPIO_Init+0x206>
 800507e:	2309      	movs	r3, #9
 8005080:	e029      	b.n	80050d6 <HAL_GPIO_Init+0x25a>
 8005082:	230a      	movs	r3, #10
 8005084:	e027      	b.n	80050d6 <HAL_GPIO_Init+0x25a>
 8005086:	2307      	movs	r3, #7
 8005088:	e025      	b.n	80050d6 <HAL_GPIO_Init+0x25a>
 800508a:	2306      	movs	r3, #6
 800508c:	e023      	b.n	80050d6 <HAL_GPIO_Init+0x25a>
 800508e:	2305      	movs	r3, #5
 8005090:	e021      	b.n	80050d6 <HAL_GPIO_Init+0x25a>
 8005092:	2304      	movs	r3, #4
 8005094:	e01f      	b.n	80050d6 <HAL_GPIO_Init+0x25a>
 8005096:	2303      	movs	r3, #3
 8005098:	e01d      	b.n	80050d6 <HAL_GPIO_Init+0x25a>
 800509a:	2302      	movs	r3, #2
 800509c:	e01b      	b.n	80050d6 <HAL_GPIO_Init+0x25a>
 800509e:	2301      	movs	r3, #1
 80050a0:	e019      	b.n	80050d6 <HAL_GPIO_Init+0x25a>
 80050a2:	bf00      	nop
 80050a4:	58000080 	.word	0x58000080
 80050a8:	58024400 	.word	0x58024400
 80050ac:	58000400 	.word	0x58000400
 80050b0:	58020000 	.word	0x58020000
 80050b4:	58020400 	.word	0x58020400
 80050b8:	58020800 	.word	0x58020800
 80050bc:	58020c00 	.word	0x58020c00
 80050c0:	58021000 	.word	0x58021000
 80050c4:	58021400 	.word	0x58021400
 80050c8:	58021800 	.word	0x58021800
 80050cc:	58021c00 	.word	0x58021c00
 80050d0:	58022400 	.word	0x58022400
 80050d4:	2300      	movs	r3, #0
 80050d6:	69fa      	ldr	r2, [r7, #28]
 80050d8:	f002 0203 	and.w	r2, r2, #3
 80050dc:	0092      	lsls	r2, r2, #2
 80050de:	4093      	lsls	r3, r2
 80050e0:	69ba      	ldr	r2, [r7, #24]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050e6:	4938      	ldr	r1, [pc, #224]	; (80051c8 <HAL_GPIO_Init+0x34c>)
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	089b      	lsrs	r3, r3, #2
 80050ec:	3302      	adds	r3, #2
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80050f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	43db      	mvns	r3, r3
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	4013      	ands	r3, r2
 8005104:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	4313      	orrs	r3, r2
 8005118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800511a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	43db      	mvns	r3, r3
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	4013      	ands	r3, r2
 8005132:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d003      	beq.n	8005148 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	4313      	orrs	r3, r2
 8005146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005148:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	43db      	mvns	r3, r3
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	4013      	ands	r3, r2
 800515e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d003      	beq.n	8005174 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	4313      	orrs	r3, r2
 8005172:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	43db      	mvns	r3, r3
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	4013      	ands	r3, r2
 8005188:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005196:	69ba      	ldr	r2, [r7, #24]
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	4313      	orrs	r3, r2
 800519c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	3301      	adds	r3, #1
 80051a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	fa22 f303 	lsr.w	r3, r2, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f47f ae6b 	bne.w	8004e90 <HAL_GPIO_Init+0x14>
  }
}
 80051ba:	bf00      	nop
 80051bc:	bf00      	nop
 80051be:	3724      	adds	r7, #36	; 0x24
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr
 80051c8:	58000400 	.word	0x58000400

080051cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	460b      	mov	r3, r1
 80051d6:	807b      	strh	r3, [r7, #2]
 80051d8:	4613      	mov	r3, r2
 80051da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051dc:	787b      	ldrb	r3, [r7, #1]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051e2:	887a      	ldrh	r2, [r7, #2]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80051e8:	e003      	b.n	80051f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80051ea:	887b      	ldrh	r3, [r7, #2]
 80051ec:	041a      	lsls	r2, r3, #16
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	619a      	str	r2, [r3, #24]
}
 80051f2:	bf00      	nop
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80051fe:	b480      	push	{r7}
 8005200:	b085      	sub	sp, #20
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
 8005206:	460b      	mov	r3, r1
 8005208:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005210:	887a      	ldrh	r2, [r7, #2]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	4013      	ands	r3, r2
 8005216:	041a      	lsls	r2, r3, #16
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	43d9      	mvns	r1, r3
 800521c:	887b      	ldrh	r3, [r7, #2]
 800521e:	400b      	ands	r3, r1
 8005220:	431a      	orrs	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	619a      	str	r2, [r3, #24]
}
 8005226:	bf00      	nop
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
	...

08005234 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800523c:	4b19      	ldr	r3, [pc, #100]	; (80052a4 <HAL_PWREx_ConfigSupply+0x70>)
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b04      	cmp	r3, #4
 8005246:	d00a      	beq.n	800525e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005248:	4b16      	ldr	r3, [pc, #88]	; (80052a4 <HAL_PWREx_ConfigSupply+0x70>)
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f003 0307 	and.w	r3, r3, #7
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	429a      	cmp	r2, r3
 8005254:	d001      	beq.n	800525a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e01f      	b.n	800529a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800525a:	2300      	movs	r3, #0
 800525c:	e01d      	b.n	800529a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800525e:	4b11      	ldr	r3, [pc, #68]	; (80052a4 <HAL_PWREx_ConfigSupply+0x70>)
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	f023 0207 	bic.w	r2, r3, #7
 8005266:	490f      	ldr	r1, [pc, #60]	; (80052a4 <HAL_PWREx_ConfigSupply+0x70>)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4313      	orrs	r3, r2
 800526c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800526e:	f7fd f9a7 	bl	80025c0 <HAL_GetTick>
 8005272:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005274:	e009      	b.n	800528a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005276:	f7fd f9a3 	bl	80025c0 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005284:	d901      	bls.n	800528a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e007      	b.n	800529a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800528a:	4b06      	ldr	r3, [pc, #24]	; (80052a4 <HAL_PWREx_ConfigSupply+0x70>)
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005292:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005296:	d1ee      	bne.n	8005276 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	58024800 	.word	0x58024800

080052a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b08c      	sub	sp, #48	; 0x30
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e397      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f000 8087 	beq.w	80053d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052c8:	4b9e      	ldr	r3, [pc, #632]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052d2:	4b9c      	ldr	r3, [pc, #624]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 80052d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80052d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052da:	2b10      	cmp	r3, #16
 80052dc:	d007      	beq.n	80052ee <HAL_RCC_OscConfig+0x46>
 80052de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e0:	2b18      	cmp	r3, #24
 80052e2:	d110      	bne.n	8005306 <HAL_RCC_OscConfig+0x5e>
 80052e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e6:	f003 0303 	and.w	r3, r3, #3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d10b      	bne.n	8005306 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052ee:	4b95      	ldr	r3, [pc, #596]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d06c      	beq.n	80053d4 <HAL_RCC_OscConfig+0x12c>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d168      	bne.n	80053d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e371      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800530e:	d106      	bne.n	800531e <HAL_RCC_OscConfig+0x76>
 8005310:	4b8c      	ldr	r3, [pc, #560]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a8b      	ldr	r2, [pc, #556]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 8005316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800531a:	6013      	str	r3, [r2, #0]
 800531c:	e02e      	b.n	800537c <HAL_RCC_OscConfig+0xd4>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10c      	bne.n	8005340 <HAL_RCC_OscConfig+0x98>
 8005326:	4b87      	ldr	r3, [pc, #540]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a86      	ldr	r2, [pc, #536]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 800532c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005330:	6013      	str	r3, [r2, #0]
 8005332:	4b84      	ldr	r3, [pc, #528]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a83      	ldr	r2, [pc, #524]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 8005338:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800533c:	6013      	str	r3, [r2, #0]
 800533e:	e01d      	b.n	800537c <HAL_RCC_OscConfig+0xd4>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005348:	d10c      	bne.n	8005364 <HAL_RCC_OscConfig+0xbc>
 800534a:	4b7e      	ldr	r3, [pc, #504]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a7d      	ldr	r2, [pc, #500]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 8005350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005354:	6013      	str	r3, [r2, #0]
 8005356:	4b7b      	ldr	r3, [pc, #492]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a7a      	ldr	r2, [pc, #488]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 800535c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	e00b      	b.n	800537c <HAL_RCC_OscConfig+0xd4>
 8005364:	4b77      	ldr	r3, [pc, #476]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a76      	ldr	r2, [pc, #472]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 800536a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800536e:	6013      	str	r3, [r2, #0]
 8005370:	4b74      	ldr	r3, [pc, #464]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a73      	ldr	r2, [pc, #460]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 8005376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800537a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d013      	beq.n	80053ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005384:	f7fd f91c 	bl	80025c0 <HAL_GetTick>
 8005388:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800538a:	e008      	b.n	800539e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800538c:	f7fd f918 	bl	80025c0 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	2b64      	cmp	r3, #100	; 0x64
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e325      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800539e:	4b69      	ldr	r3, [pc, #420]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0f0      	beq.n	800538c <HAL_RCC_OscConfig+0xe4>
 80053aa:	e014      	b.n	80053d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ac:	f7fd f908 	bl	80025c0 <HAL_GetTick>
 80053b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053b4:	f7fd f904 	bl	80025c0 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b64      	cmp	r3, #100	; 0x64
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e311      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053c6:	4b5f      	ldr	r3, [pc, #380]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1f0      	bne.n	80053b4 <HAL_RCC_OscConfig+0x10c>
 80053d2:	e000      	b.n	80053d6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f000 808a 	beq.w	80054f8 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053e4:	4b57      	ldr	r3, [pc, #348]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053ec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053ee:	4b55      	ldr	r3, [pc, #340]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 80053f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d007      	beq.n	800540a <HAL_RCC_OscConfig+0x162>
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	2b18      	cmp	r3, #24
 80053fe:	d137      	bne.n	8005470 <HAL_RCC_OscConfig+0x1c8>
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	f003 0303 	and.w	r3, r3, #3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d132      	bne.n	8005470 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800540a:	4b4e      	ldr	r3, [pc, #312]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0304 	and.w	r3, r3, #4
 8005412:	2b00      	cmp	r3, #0
 8005414:	d005      	beq.n	8005422 <HAL_RCC_OscConfig+0x17a>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e2e3      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005422:	4b48      	ldr	r3, [pc, #288]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f023 0219 	bic.w	r2, r3, #25
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	4945      	ldr	r1, [pc, #276]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 8005430:	4313      	orrs	r3, r2
 8005432:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005434:	f7fd f8c4 	bl	80025c0 <HAL_GetTick>
 8005438:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800543a:	e008      	b.n	800544e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800543c:	f7fd f8c0 	bl	80025c0 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b02      	cmp	r3, #2
 8005448:	d901      	bls.n	800544e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e2cd      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800544e:	4b3d      	ldr	r3, [pc, #244]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0304 	and.w	r3, r3, #4
 8005456:	2b00      	cmp	r3, #0
 8005458:	d0f0      	beq.n	800543c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800545a:	4b3a      	ldr	r3, [pc, #232]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	061b      	lsls	r3, r3, #24
 8005468:	4936      	ldr	r1, [pc, #216]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 800546a:	4313      	orrs	r3, r2
 800546c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800546e:	e043      	b.n	80054f8 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d026      	beq.n	80054c6 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005478:	4b32      	ldr	r3, [pc, #200]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f023 0219 	bic.w	r2, r3, #25
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	492f      	ldr	r1, [pc, #188]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 8005486:	4313      	orrs	r3, r2
 8005488:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800548a:	f7fd f899 	bl	80025c0 <HAL_GetTick>
 800548e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005490:	e008      	b.n	80054a4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005492:	f7fd f895 	bl	80025c0 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d901      	bls.n	80054a4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e2a2      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054a4:	4b27      	ldr	r3, [pc, #156]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0304 	and.w	r3, r3, #4
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d0f0      	beq.n	8005492 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054b0:	4b24      	ldr	r3, [pc, #144]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	061b      	lsls	r3, r3, #24
 80054be:	4921      	ldr	r1, [pc, #132]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	604b      	str	r3, [r1, #4]
 80054c4:	e018      	b.n	80054f8 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054c6:	4b1f      	ldr	r3, [pc, #124]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a1e      	ldr	r2, [pc, #120]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 80054cc:	f023 0301 	bic.w	r3, r3, #1
 80054d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d2:	f7fd f875 	bl	80025c0 <HAL_GetTick>
 80054d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054d8:	e008      	b.n	80054ec <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054da:	f7fd f871 	bl	80025c0 <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d901      	bls.n	80054ec <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e27e      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054ec:	4b15      	ldr	r3, [pc, #84]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0304 	and.w	r3, r3, #4
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1f0      	bne.n	80054da <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0310 	and.w	r3, r3, #16
 8005500:	2b00      	cmp	r3, #0
 8005502:	d06d      	beq.n	80055e0 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005504:	4b0f      	ldr	r3, [pc, #60]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800550c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800550e:	4b0d      	ldr	r3, [pc, #52]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 8005510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005512:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	2b08      	cmp	r3, #8
 8005518:	d007      	beq.n	800552a <HAL_RCC_OscConfig+0x282>
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	2b18      	cmp	r3, #24
 800551e:	d11e      	bne.n	800555e <HAL_RCC_OscConfig+0x2b6>
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f003 0303 	and.w	r3, r3, #3
 8005526:	2b01      	cmp	r3, #1
 8005528:	d119      	bne.n	800555e <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800552a:	4b06      	ldr	r3, [pc, #24]	; (8005544 <HAL_RCC_OscConfig+0x29c>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005532:	2b00      	cmp	r3, #0
 8005534:	d008      	beq.n	8005548 <HAL_RCC_OscConfig+0x2a0>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	2b80      	cmp	r3, #128	; 0x80
 800553c:	d004      	beq.n	8005548 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e253      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
 8005542:	bf00      	nop
 8005544:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005548:	4ba3      	ldr	r3, [pc, #652]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	061b      	lsls	r3, r3, #24
 8005556:	49a0      	ldr	r1, [pc, #640]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 8005558:	4313      	orrs	r3, r2
 800555a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800555c:	e040      	b.n	80055e0 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d023      	beq.n	80055ae <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005566:	4b9c      	ldr	r3, [pc, #624]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a9b      	ldr	r2, [pc, #620]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 800556c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005570:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005572:	f7fd f825 	bl	80025c0 <HAL_GetTick>
 8005576:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005578:	e008      	b.n	800558c <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800557a:	f7fd f821 	bl	80025c0 <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	2b02      	cmp	r3, #2
 8005586:	d901      	bls.n	800558c <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e22e      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800558c:	4b92      	ldr	r3, [pc, #584]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005594:	2b00      	cmp	r3, #0
 8005596:	d0f0      	beq.n	800557a <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005598:	4b8f      	ldr	r3, [pc, #572]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	061b      	lsls	r3, r3, #24
 80055a6:	498c      	ldr	r1, [pc, #560]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	60cb      	str	r3, [r1, #12]
 80055ac:	e018      	b.n	80055e0 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80055ae:	4b8a      	ldr	r3, [pc, #552]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a89      	ldr	r2, [pc, #548]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 80055b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ba:	f7fd f801 	bl	80025c0 <HAL_GetTick>
 80055be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80055c0:	e008      	b.n	80055d4 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80055c2:	f7fc fffd 	bl	80025c0 <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d901      	bls.n	80055d4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e20a      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80055d4:	4b80      	ldr	r3, [pc, #512]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1f0      	bne.n	80055c2 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0308 	and.w	r3, r3, #8
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d036      	beq.n	800565a <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d019      	beq.n	8005628 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055f4:	4b78      	ldr	r3, [pc, #480]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 80055f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055f8:	4a77      	ldr	r2, [pc, #476]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 80055fa:	f043 0301 	orr.w	r3, r3, #1
 80055fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005600:	f7fc ffde 	bl	80025c0 <HAL_GetTick>
 8005604:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005606:	e008      	b.n	800561a <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005608:	f7fc ffda 	bl	80025c0 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b02      	cmp	r3, #2
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e1e7      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800561a:	4b6f      	ldr	r3, [pc, #444]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 800561c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	2b00      	cmp	r3, #0
 8005624:	d0f0      	beq.n	8005608 <HAL_RCC_OscConfig+0x360>
 8005626:	e018      	b.n	800565a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005628:	4b6b      	ldr	r3, [pc, #428]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 800562a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800562c:	4a6a      	ldr	r2, [pc, #424]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 800562e:	f023 0301 	bic.w	r3, r3, #1
 8005632:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005634:	f7fc ffc4 	bl	80025c0 <HAL_GetTick>
 8005638:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800563c:	f7fc ffc0 	bl	80025c0 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b02      	cmp	r3, #2
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e1cd      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800564e:	4b62      	ldr	r3, [pc, #392]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 8005650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1f0      	bne.n	800563c <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0320 	and.w	r3, r3, #32
 8005662:	2b00      	cmp	r3, #0
 8005664:	d036      	beq.n	80056d4 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d019      	beq.n	80056a2 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800566e:	4b5a      	ldr	r3, [pc, #360]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a59      	ldr	r2, [pc, #356]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 8005674:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005678:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800567a:	f7fc ffa1 	bl	80025c0 <HAL_GetTick>
 800567e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005680:	e008      	b.n	8005694 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005682:	f7fc ff9d 	bl	80025c0 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	2b02      	cmp	r3, #2
 800568e:	d901      	bls.n	8005694 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e1aa      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005694:	4b50      	ldr	r3, [pc, #320]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0f0      	beq.n	8005682 <HAL_RCC_OscConfig+0x3da>
 80056a0:	e018      	b.n	80056d4 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80056a2:	4b4d      	ldr	r3, [pc, #308]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a4c      	ldr	r2, [pc, #304]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 80056a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80056ae:	f7fc ff87 	bl	80025c0 <HAL_GetTick>
 80056b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80056b4:	e008      	b.n	80056c8 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80056b6:	f7fc ff83 	bl	80025c0 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d901      	bls.n	80056c8 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e190      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80056c8:	4b43      	ldr	r3, [pc, #268]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1f0      	bne.n	80056b6 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0304 	and.w	r3, r3, #4
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f000 8085 	beq.w	80057ec <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80056e2:	4b3e      	ldr	r3, [pc, #248]	; (80057dc <HAL_RCC_OscConfig+0x534>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a3d      	ldr	r2, [pc, #244]	; (80057dc <HAL_RCC_OscConfig+0x534>)
 80056e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056ee:	f7fc ff67 	bl	80025c0 <HAL_GetTick>
 80056f2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056f4:	e008      	b.n	8005708 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80056f6:	f7fc ff63 	bl	80025c0 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	2b64      	cmp	r3, #100	; 0x64
 8005702:	d901      	bls.n	8005708 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e170      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005708:	4b34      	ldr	r3, [pc, #208]	; (80057dc <HAL_RCC_OscConfig+0x534>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005710:	2b00      	cmp	r3, #0
 8005712:	d0f0      	beq.n	80056f6 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d106      	bne.n	800572a <HAL_RCC_OscConfig+0x482>
 800571c:	4b2e      	ldr	r3, [pc, #184]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 800571e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005720:	4a2d      	ldr	r2, [pc, #180]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 8005722:	f043 0301 	orr.w	r3, r3, #1
 8005726:	6713      	str	r3, [r2, #112]	; 0x70
 8005728:	e02d      	b.n	8005786 <HAL_RCC_OscConfig+0x4de>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10c      	bne.n	800574c <HAL_RCC_OscConfig+0x4a4>
 8005732:	4b29      	ldr	r3, [pc, #164]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 8005734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005736:	4a28      	ldr	r2, [pc, #160]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 8005738:	f023 0301 	bic.w	r3, r3, #1
 800573c:	6713      	str	r3, [r2, #112]	; 0x70
 800573e:	4b26      	ldr	r3, [pc, #152]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 8005740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005742:	4a25      	ldr	r2, [pc, #148]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 8005744:	f023 0304 	bic.w	r3, r3, #4
 8005748:	6713      	str	r3, [r2, #112]	; 0x70
 800574a:	e01c      	b.n	8005786 <HAL_RCC_OscConfig+0x4de>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	2b05      	cmp	r3, #5
 8005752:	d10c      	bne.n	800576e <HAL_RCC_OscConfig+0x4c6>
 8005754:	4b20      	ldr	r3, [pc, #128]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 8005756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005758:	4a1f      	ldr	r2, [pc, #124]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 800575a:	f043 0304 	orr.w	r3, r3, #4
 800575e:	6713      	str	r3, [r2, #112]	; 0x70
 8005760:	4b1d      	ldr	r3, [pc, #116]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 8005762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005764:	4a1c      	ldr	r2, [pc, #112]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 8005766:	f043 0301 	orr.w	r3, r3, #1
 800576a:	6713      	str	r3, [r2, #112]	; 0x70
 800576c:	e00b      	b.n	8005786 <HAL_RCC_OscConfig+0x4de>
 800576e:	4b1a      	ldr	r3, [pc, #104]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 8005770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005772:	4a19      	ldr	r2, [pc, #100]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 8005774:	f023 0301 	bic.w	r3, r3, #1
 8005778:	6713      	str	r3, [r2, #112]	; 0x70
 800577a:	4b17      	ldr	r3, [pc, #92]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 800577c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800577e:	4a16      	ldr	r2, [pc, #88]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 8005780:	f023 0304 	bic.w	r3, r3, #4
 8005784:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d015      	beq.n	80057ba <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800578e:	f7fc ff17 	bl	80025c0 <HAL_GetTick>
 8005792:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005794:	e00a      	b.n	80057ac <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005796:	f7fc ff13 	bl	80025c0 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d901      	bls.n	80057ac <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e11e      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057ac:	4b0a      	ldr	r3, [pc, #40]	; (80057d8 <HAL_RCC_OscConfig+0x530>)
 80057ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d0ee      	beq.n	8005796 <HAL_RCC_OscConfig+0x4ee>
 80057b8:	e018      	b.n	80057ec <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ba:	f7fc ff01 	bl	80025c0 <HAL_GetTick>
 80057be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80057c0:	e00e      	b.n	80057e0 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057c2:	f7fc fefd 	bl	80025c0 <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d905      	bls.n	80057e0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e108      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
 80057d8:	58024400 	.word	0x58024400
 80057dc:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80057e0:	4b84      	ldr	r3, [pc, #528]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 80057e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1ea      	bne.n	80057c2 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 80f9 	beq.w	80059e8 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80057f6:	4b7f      	ldr	r3, [pc, #508]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057fe:	2b18      	cmp	r3, #24
 8005800:	f000 80b4 	beq.w	800596c <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005808:	2b02      	cmp	r3, #2
 800580a:	f040 8095 	bne.w	8005938 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800580e:	4b79      	ldr	r3, [pc, #484]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a78      	ldr	r2, [pc, #480]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 8005814:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800581a:	f7fc fed1 	bl	80025c0 <HAL_GetTick>
 800581e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005820:	e008      	b.n	8005834 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005822:	f7fc fecd 	bl	80025c0 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d901      	bls.n	8005834 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e0da      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005834:	4b6f      	ldr	r3, [pc, #444]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1f0      	bne.n	8005822 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005840:	4b6c      	ldr	r3, [pc, #432]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 8005842:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005844:	4b6c      	ldr	r3, [pc, #432]	; (80059f8 <HAL_RCC_OscConfig+0x750>)
 8005846:	4013      	ands	r3, r2
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005850:	0112      	lsls	r2, r2, #4
 8005852:	430a      	orrs	r2, r1
 8005854:	4967      	ldr	r1, [pc, #412]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 8005856:	4313      	orrs	r3, r2
 8005858:	628b      	str	r3, [r1, #40]	; 0x28
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585e:	3b01      	subs	r3, #1
 8005860:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005868:	3b01      	subs	r3, #1
 800586a:	025b      	lsls	r3, r3, #9
 800586c:	b29b      	uxth	r3, r3
 800586e:	431a      	orrs	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005874:	3b01      	subs	r3, #1
 8005876:	041b      	lsls	r3, r3, #16
 8005878:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800587c:	431a      	orrs	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005882:	3b01      	subs	r3, #1
 8005884:	061b      	lsls	r3, r3, #24
 8005886:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800588a:	495a      	ldr	r1, [pc, #360]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 800588c:	4313      	orrs	r3, r2
 800588e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005890:	4b58      	ldr	r3, [pc, #352]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 8005892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005894:	4a57      	ldr	r2, [pc, #348]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 8005896:	f023 0301 	bic.w	r3, r3, #1
 800589a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800589c:	4b55      	ldr	r3, [pc, #340]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 800589e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058a0:	4b56      	ldr	r3, [pc, #344]	; (80059fc <HAL_RCC_OscConfig+0x754>)
 80058a2:	4013      	ands	r3, r2
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80058a8:	00d2      	lsls	r2, r2, #3
 80058aa:	4952      	ldr	r1, [pc, #328]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80058b0:	4b50      	ldr	r3, [pc, #320]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 80058b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b4:	f023 020c 	bic.w	r2, r3, #12
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058bc:	494d      	ldr	r1, [pc, #308]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80058c2:	4b4c      	ldr	r3, [pc, #304]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 80058c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c6:	f023 0202 	bic.w	r2, r3, #2
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ce:	4949      	ldr	r1, [pc, #292]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80058d4:	4b47      	ldr	r3, [pc, #284]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 80058d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d8:	4a46      	ldr	r2, [pc, #280]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 80058da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058e0:	4b44      	ldr	r3, [pc, #272]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 80058e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e4:	4a43      	ldr	r2, [pc, #268]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 80058e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80058ec:	4b41      	ldr	r3, [pc, #260]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 80058ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f0:	4a40      	ldr	r2, [pc, #256]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 80058f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80058f8:	4b3e      	ldr	r3, [pc, #248]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 80058fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fc:	4a3d      	ldr	r2, [pc, #244]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 80058fe:	f043 0301 	orr.w	r3, r3, #1
 8005902:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005904:	4b3b      	ldr	r3, [pc, #236]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a3a      	ldr	r2, [pc, #232]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 800590a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800590e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005910:	f7fc fe56 	bl	80025c0 <HAL_GetTick>
 8005914:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005916:	e008      	b.n	800592a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005918:	f7fc fe52 	bl	80025c0 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	2b02      	cmp	r3, #2
 8005924:	d901      	bls.n	800592a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e05f      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800592a:	4b32      	ldr	r3, [pc, #200]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d0f0      	beq.n	8005918 <HAL_RCC_OscConfig+0x670>
 8005936:	e057      	b.n	80059e8 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005938:	4b2e      	ldr	r3, [pc, #184]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a2d      	ldr	r2, [pc, #180]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 800593e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005944:	f7fc fe3c 	bl	80025c0 <HAL_GetTick>
 8005948:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800594a:	e008      	b.n	800595e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800594c:	f7fc fe38 	bl	80025c0 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	2b02      	cmp	r3, #2
 8005958:	d901      	bls.n	800595e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e045      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800595e:	4b25      	ldr	r3, [pc, #148]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1f0      	bne.n	800594c <HAL_RCC_OscConfig+0x6a4>
 800596a:	e03d      	b.n	80059e8 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800596c:	4b21      	ldr	r3, [pc, #132]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 800596e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005970:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005972:	4b20      	ldr	r3, [pc, #128]	; (80059f4 <HAL_RCC_OscConfig+0x74c>)
 8005974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005976:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597c:	2b01      	cmp	r3, #1
 800597e:	d031      	beq.n	80059e4 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	f003 0203 	and.w	r2, r3, #3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800598a:	429a      	cmp	r2, r3
 800598c:	d12a      	bne.n	80059e4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	091b      	lsrs	r3, r3, #4
 8005992:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800599a:	429a      	cmp	r2, r3
 800599c:	d122      	bne.n	80059e4 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d11a      	bne.n	80059e4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	0a5b      	lsrs	r3, r3, #9
 80059b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ba:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80059bc:	429a      	cmp	r2, r3
 80059be:	d111      	bne.n	80059e4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	0c1b      	lsrs	r3, r3, #16
 80059c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059cc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d108      	bne.n	80059e4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	0e1b      	lsrs	r3, r3, #24
 80059d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059de:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d001      	beq.n	80059e8 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e000      	b.n	80059ea <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3730      	adds	r7, #48	; 0x30
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	58024400 	.word	0x58024400
 80059f8:	fffffc0c 	.word	0xfffffc0c
 80059fc:	ffff0007 	.word	0xffff0007

08005a00 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d101      	bne.n	8005a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e19c      	b.n	8005d4e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a14:	4b8a      	ldr	r3, [pc, #552]	; (8005c40 <HAL_RCC_ClockConfig+0x240>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 030f 	and.w	r3, r3, #15
 8005a1c:	683a      	ldr	r2, [r7, #0]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d910      	bls.n	8005a44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a22:	4b87      	ldr	r3, [pc, #540]	; (8005c40 <HAL_RCC_ClockConfig+0x240>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f023 020f 	bic.w	r2, r3, #15
 8005a2a:	4985      	ldr	r1, [pc, #532]	; (8005c40 <HAL_RCC_ClockConfig+0x240>)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a32:	4b83      	ldr	r3, [pc, #524]	; (8005c40 <HAL_RCC_ClockConfig+0x240>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 030f 	and.w	r3, r3, #15
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d001      	beq.n	8005a44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e184      	b.n	8005d4e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0304 	and.w	r3, r3, #4
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d010      	beq.n	8005a72 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	691a      	ldr	r2, [r3, #16]
 8005a54:	4b7b      	ldr	r3, [pc, #492]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d908      	bls.n	8005a72 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005a60:	4b78      	ldr	r3, [pc, #480]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	4975      	ldr	r1, [pc, #468]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0308 	and.w	r3, r3, #8
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d010      	beq.n	8005aa0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	695a      	ldr	r2, [r3, #20]
 8005a82:	4b70      	ldr	r3, [pc, #448]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005a84:	69db      	ldr	r3, [r3, #28]
 8005a86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d908      	bls.n	8005aa0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a8e:	4b6d      	ldr	r3, [pc, #436]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	496a      	ldr	r1, [pc, #424]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0310 	and.w	r3, r3, #16
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d010      	beq.n	8005ace <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	699a      	ldr	r2, [r3, #24]
 8005ab0:	4b64      	ldr	r3, [pc, #400]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005ab2:	69db      	ldr	r3, [r3, #28]
 8005ab4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d908      	bls.n	8005ace <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005abc:	4b61      	ldr	r3, [pc, #388]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005abe:	69db      	ldr	r3, [r3, #28]
 8005ac0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	495e      	ldr	r1, [pc, #376]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0320 	and.w	r3, r3, #32
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d010      	beq.n	8005afc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	69da      	ldr	r2, [r3, #28]
 8005ade:	4b59      	ldr	r3, [pc, #356]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d908      	bls.n	8005afc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005aea:	4b56      	ldr	r3, [pc, #344]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	4953      	ldr	r1, [pc, #332]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d010      	beq.n	8005b2a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68da      	ldr	r2, [r3, #12]
 8005b0c:	4b4d      	ldr	r3, [pc, #308]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	f003 030f 	and.w	r3, r3, #15
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d908      	bls.n	8005b2a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b18:	4b4a      	ldr	r3, [pc, #296]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	f023 020f 	bic.w	r2, r3, #15
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	4947      	ldr	r1, [pc, #284]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d055      	beq.n	8005be2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005b36:	4b43      	ldr	r3, [pc, #268]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	4940      	ldr	r1, [pc, #256]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d107      	bne.n	8005b60 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b50:	4b3c      	ldr	r3, [pc, #240]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d121      	bne.n	8005ba0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e0f6      	b.n	8005d4e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	2b03      	cmp	r3, #3
 8005b66:	d107      	bne.n	8005b78 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b68:	4b36      	ldr	r3, [pc, #216]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d115      	bne.n	8005ba0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e0ea      	b.n	8005d4e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d107      	bne.n	8005b90 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b80:	4b30      	ldr	r3, [pc, #192]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d109      	bne.n	8005ba0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e0de      	b.n	8005d4e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b90:	4b2c      	ldr	r3, [pc, #176]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0304 	and.w	r3, r3, #4
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e0d6      	b.n	8005d4e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ba0:	4b28      	ldr	r3, [pc, #160]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	f023 0207 	bic.w	r2, r3, #7
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	4925      	ldr	r1, [pc, #148]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bb2:	f7fc fd05 	bl	80025c0 <HAL_GetTick>
 8005bb6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bb8:	e00a      	b.n	8005bd0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bba:	f7fc fd01 	bl	80025c0 <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d901      	bls.n	8005bd0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e0be      	b.n	8005d4e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bd0:	4b1c      	ldr	r3, [pc, #112]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	00db      	lsls	r3, r3, #3
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d1eb      	bne.n	8005bba <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d010      	beq.n	8005c10 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68da      	ldr	r2, [r3, #12]
 8005bf2:	4b14      	ldr	r3, [pc, #80]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	f003 030f 	and.w	r3, r3, #15
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d208      	bcs.n	8005c10 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bfe:	4b11      	ldr	r3, [pc, #68]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	f023 020f 	bic.w	r2, r3, #15
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	490e      	ldr	r1, [pc, #56]	; (8005c44 <HAL_RCC_ClockConfig+0x244>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c10:	4b0b      	ldr	r3, [pc, #44]	; (8005c40 <HAL_RCC_ClockConfig+0x240>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 030f 	and.w	r3, r3, #15
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d214      	bcs.n	8005c48 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c1e:	4b08      	ldr	r3, [pc, #32]	; (8005c40 <HAL_RCC_ClockConfig+0x240>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f023 020f 	bic.w	r2, r3, #15
 8005c26:	4906      	ldr	r1, [pc, #24]	; (8005c40 <HAL_RCC_ClockConfig+0x240>)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c2e:	4b04      	ldr	r3, [pc, #16]	; (8005c40 <HAL_RCC_ClockConfig+0x240>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 030f 	and.w	r3, r3, #15
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d005      	beq.n	8005c48 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e086      	b.n	8005d4e <HAL_RCC_ClockConfig+0x34e>
 8005c40:	52002000 	.word	0x52002000
 8005c44:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d010      	beq.n	8005c76 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	691a      	ldr	r2, [r3, #16]
 8005c58:	4b3f      	ldr	r3, [pc, #252]	; (8005d58 <HAL_RCC_ClockConfig+0x358>)
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d208      	bcs.n	8005c76 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c64:	4b3c      	ldr	r3, [pc, #240]	; (8005d58 <HAL_RCC_ClockConfig+0x358>)
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	4939      	ldr	r1, [pc, #228]	; (8005d58 <HAL_RCC_ClockConfig+0x358>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0308 	and.w	r3, r3, #8
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d010      	beq.n	8005ca4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	695a      	ldr	r2, [r3, #20]
 8005c86:	4b34      	ldr	r3, [pc, #208]	; (8005d58 <HAL_RCC_ClockConfig+0x358>)
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d208      	bcs.n	8005ca4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c92:	4b31      	ldr	r3, [pc, #196]	; (8005d58 <HAL_RCC_ClockConfig+0x358>)
 8005c94:	69db      	ldr	r3, [r3, #28]
 8005c96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	492e      	ldr	r1, [pc, #184]	; (8005d58 <HAL_RCC_ClockConfig+0x358>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0310 	and.w	r3, r3, #16
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d010      	beq.n	8005cd2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	699a      	ldr	r2, [r3, #24]
 8005cb4:	4b28      	ldr	r3, [pc, #160]	; (8005d58 <HAL_RCC_ClockConfig+0x358>)
 8005cb6:	69db      	ldr	r3, [r3, #28]
 8005cb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d208      	bcs.n	8005cd2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005cc0:	4b25      	ldr	r3, [pc, #148]	; (8005d58 <HAL_RCC_ClockConfig+0x358>)
 8005cc2:	69db      	ldr	r3, [r3, #28]
 8005cc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	4922      	ldr	r1, [pc, #136]	; (8005d58 <HAL_RCC_ClockConfig+0x358>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0320 	and.w	r3, r3, #32
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d010      	beq.n	8005d00 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	69da      	ldr	r2, [r3, #28]
 8005ce2:	4b1d      	ldr	r3, [pc, #116]	; (8005d58 <HAL_RCC_ClockConfig+0x358>)
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d208      	bcs.n	8005d00 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005cee:	4b1a      	ldr	r3, [pc, #104]	; (8005d58 <HAL_RCC_ClockConfig+0x358>)
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	69db      	ldr	r3, [r3, #28]
 8005cfa:	4917      	ldr	r1, [pc, #92]	; (8005d58 <HAL_RCC_ClockConfig+0x358>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005d00:	f000 f834 	bl	8005d6c <HAL_RCC_GetSysClockFreq>
 8005d04:	4602      	mov	r2, r0
 8005d06:	4b14      	ldr	r3, [pc, #80]	; (8005d58 <HAL_RCC_ClockConfig+0x358>)
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	0a1b      	lsrs	r3, r3, #8
 8005d0c:	f003 030f 	and.w	r3, r3, #15
 8005d10:	4912      	ldr	r1, [pc, #72]	; (8005d5c <HAL_RCC_ClockConfig+0x35c>)
 8005d12:	5ccb      	ldrb	r3, [r1, r3]
 8005d14:	f003 031f 	and.w	r3, r3, #31
 8005d18:	fa22 f303 	lsr.w	r3, r2, r3
 8005d1c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d1e:	4b0e      	ldr	r3, [pc, #56]	; (8005d58 <HAL_RCC_ClockConfig+0x358>)
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	f003 030f 	and.w	r3, r3, #15
 8005d26:	4a0d      	ldr	r2, [pc, #52]	; (8005d5c <HAL_RCC_ClockConfig+0x35c>)
 8005d28:	5cd3      	ldrb	r3, [r2, r3]
 8005d2a:	f003 031f 	and.w	r3, r3, #31
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	fa22 f303 	lsr.w	r3, r2, r3
 8005d34:	4a0a      	ldr	r2, [pc, #40]	; (8005d60 <HAL_RCC_ClockConfig+0x360>)
 8005d36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d38:	4a0a      	ldr	r2, [pc, #40]	; (8005d64 <HAL_RCC_ClockConfig+0x364>)
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005d3e:	4b0a      	ldr	r3, [pc, #40]	; (8005d68 <HAL_RCC_ClockConfig+0x368>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7fc fbf2 	bl	800252c <HAL_InitTick>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3718      	adds	r7, #24
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	58024400 	.word	0x58024400
 8005d5c:	08018ff0 	.word	0x08018ff0
 8005d60:	2400000c 	.word	0x2400000c
 8005d64:	24000008 	.word	0x24000008
 8005d68:	24000010 	.word	0x24000010

08005d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b089      	sub	sp, #36	; 0x24
 8005d70:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d72:	4bb3      	ldr	r3, [pc, #716]	; (8006040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d7a:	2b18      	cmp	r3, #24
 8005d7c:	f200 8155 	bhi.w	800602a <HAL_RCC_GetSysClockFreq+0x2be>
 8005d80:	a201      	add	r2, pc, #4	; (adr r2, 8005d88 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d86:	bf00      	nop
 8005d88:	08005ded 	.word	0x08005ded
 8005d8c:	0800602b 	.word	0x0800602b
 8005d90:	0800602b 	.word	0x0800602b
 8005d94:	0800602b 	.word	0x0800602b
 8005d98:	0800602b 	.word	0x0800602b
 8005d9c:	0800602b 	.word	0x0800602b
 8005da0:	0800602b 	.word	0x0800602b
 8005da4:	0800602b 	.word	0x0800602b
 8005da8:	08005e13 	.word	0x08005e13
 8005dac:	0800602b 	.word	0x0800602b
 8005db0:	0800602b 	.word	0x0800602b
 8005db4:	0800602b 	.word	0x0800602b
 8005db8:	0800602b 	.word	0x0800602b
 8005dbc:	0800602b 	.word	0x0800602b
 8005dc0:	0800602b 	.word	0x0800602b
 8005dc4:	0800602b 	.word	0x0800602b
 8005dc8:	08005e19 	.word	0x08005e19
 8005dcc:	0800602b 	.word	0x0800602b
 8005dd0:	0800602b 	.word	0x0800602b
 8005dd4:	0800602b 	.word	0x0800602b
 8005dd8:	0800602b 	.word	0x0800602b
 8005ddc:	0800602b 	.word	0x0800602b
 8005de0:	0800602b 	.word	0x0800602b
 8005de4:	0800602b 	.word	0x0800602b
 8005de8:	08005e1f 	.word	0x08005e1f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dec:	4b94      	ldr	r3, [pc, #592]	; (8006040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0320 	and.w	r3, r3, #32
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d009      	beq.n	8005e0c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005df8:	4b91      	ldr	r3, [pc, #580]	; (8006040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	08db      	lsrs	r3, r3, #3
 8005dfe:	f003 0303 	and.w	r3, r3, #3
 8005e02:	4a90      	ldr	r2, [pc, #576]	; (8006044 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e04:	fa22 f303 	lsr.w	r3, r2, r3
 8005e08:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005e0a:	e111      	b.n	8006030 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005e0c:	4b8d      	ldr	r3, [pc, #564]	; (8006044 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e0e:	61bb      	str	r3, [r7, #24]
    break;
 8005e10:	e10e      	b.n	8006030 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005e12:	4b8d      	ldr	r3, [pc, #564]	; (8006048 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e14:	61bb      	str	r3, [r7, #24]
    break;
 8005e16:	e10b      	b.n	8006030 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005e18:	4b8c      	ldr	r3, [pc, #560]	; (800604c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005e1a:	61bb      	str	r3, [r7, #24]
    break;
 8005e1c:	e108      	b.n	8006030 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e1e:	4b88      	ldr	r3, [pc, #544]	; (8006040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e22:	f003 0303 	and.w	r3, r3, #3
 8005e26:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005e28:	4b85      	ldr	r3, [pc, #532]	; (8006040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2c:	091b      	lsrs	r3, r3, #4
 8005e2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e32:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005e34:	4b82      	ldr	r3, [pc, #520]	; (8006040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005e3e:	4b80      	ldr	r3, [pc, #512]	; (8006040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e42:	08db      	lsrs	r3, r3, #3
 8005e44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	fb02 f303 	mul.w	r3, r2, r3
 8005e4e:	ee07 3a90 	vmov	s15, r3
 8005e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e56:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 80e1 	beq.w	8006024 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	f000 8083 	beq.w	8005f70 <HAL_RCC_GetSysClockFreq+0x204>
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	f200 80a1 	bhi.w	8005fb4 <HAL_RCC_GetSysClockFreq+0x248>
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d003      	beq.n	8005e80 <HAL_RCC_GetSysClockFreq+0x114>
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d056      	beq.n	8005f2c <HAL_RCC_GetSysClockFreq+0x1c0>
 8005e7e:	e099      	b.n	8005fb4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e80:	4b6f      	ldr	r3, [pc, #444]	; (8006040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0320 	and.w	r3, r3, #32
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d02d      	beq.n	8005ee8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e8c:	4b6c      	ldr	r3, [pc, #432]	; (8006040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	08db      	lsrs	r3, r3, #3
 8005e92:	f003 0303 	and.w	r3, r3, #3
 8005e96:	4a6b      	ldr	r2, [pc, #428]	; (8006044 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e98:	fa22 f303 	lsr.w	r3, r2, r3
 8005e9c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	ee07 3a90 	vmov	s15, r3
 8005ea4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	ee07 3a90 	vmov	s15, r3
 8005eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eb6:	4b62      	ldr	r3, [pc, #392]	; (8006040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ebe:	ee07 3a90 	vmov	s15, r3
 8005ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ec6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005eca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006050 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ee2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005ee6:	e087      	b.n	8005ff8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	ee07 3a90 	vmov	s15, r3
 8005eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ef2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006054 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005efa:	4b51      	ldr	r3, [pc, #324]	; (8006040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f02:	ee07 3a90 	vmov	s15, r3
 8005f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f0e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006050 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f2a:	e065      	b.n	8005ff8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	ee07 3a90 	vmov	s15, r3
 8005f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f36:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006058 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f3e:	4b40      	ldr	r3, [pc, #256]	; (8006040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f46:	ee07 3a90 	vmov	s15, r3
 8005f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f52:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006050 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f6e:	e043      	b.n	8005ff8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	ee07 3a90 	vmov	s15, r3
 8005f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f7a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800605c <HAL_RCC_GetSysClockFreq+0x2f0>
 8005f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f82:	4b2f      	ldr	r3, [pc, #188]	; (8006040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f8a:	ee07 3a90 	vmov	s15, r3
 8005f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f92:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f96:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006050 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fb2:	e021      	b.n	8005ff8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	ee07 3a90 	vmov	s15, r3
 8005fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fbe:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006058 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fc6:	4b1e      	ldr	r3, [pc, #120]	; (8006040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fce:	ee07 3a90 	vmov	s15, r3
 8005fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fda:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006050 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ff2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ff6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005ff8:	4b11      	ldr	r3, [pc, #68]	; (8006040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffc:	0a5b      	lsrs	r3, r3, #9
 8005ffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006002:	3301      	adds	r3, #1
 8006004:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	ee07 3a90 	vmov	s15, r3
 800600c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006010:	edd7 6a07 	vldr	s13, [r7, #28]
 8006014:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006018:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800601c:	ee17 3a90 	vmov	r3, s15
 8006020:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006022:	e005      	b.n	8006030 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006024:	2300      	movs	r3, #0
 8006026:	61bb      	str	r3, [r7, #24]
    break;
 8006028:	e002      	b.n	8006030 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800602a:	4b07      	ldr	r3, [pc, #28]	; (8006048 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800602c:	61bb      	str	r3, [r7, #24]
    break;
 800602e:	bf00      	nop
  }

  return sysclockfreq;
 8006030:	69bb      	ldr	r3, [r7, #24]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3724      	adds	r7, #36	; 0x24
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	58024400 	.word	0x58024400
 8006044:	03d09000 	.word	0x03d09000
 8006048:	003d0900 	.word	0x003d0900
 800604c:	007a1200 	.word	0x007a1200
 8006050:	46000000 	.word	0x46000000
 8006054:	4c742400 	.word	0x4c742400
 8006058:	4a742400 	.word	0x4a742400
 800605c:	4af42400 	.word	0x4af42400

08006060 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006066:	f7ff fe81 	bl	8005d6c <HAL_RCC_GetSysClockFreq>
 800606a:	4602      	mov	r2, r0
 800606c:	4b10      	ldr	r3, [pc, #64]	; (80060b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	0a1b      	lsrs	r3, r3, #8
 8006072:	f003 030f 	and.w	r3, r3, #15
 8006076:	490f      	ldr	r1, [pc, #60]	; (80060b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006078:	5ccb      	ldrb	r3, [r1, r3]
 800607a:	f003 031f 	and.w	r3, r3, #31
 800607e:	fa22 f303 	lsr.w	r3, r2, r3
 8006082:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006084:	4b0a      	ldr	r3, [pc, #40]	; (80060b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	f003 030f 	and.w	r3, r3, #15
 800608c:	4a09      	ldr	r2, [pc, #36]	; (80060b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800608e:	5cd3      	ldrb	r3, [r2, r3]
 8006090:	f003 031f 	and.w	r3, r3, #31
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	fa22 f303 	lsr.w	r3, r2, r3
 800609a:	4a07      	ldr	r2, [pc, #28]	; (80060b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800609c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800609e:	4a07      	ldr	r2, [pc, #28]	; (80060bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80060a4:	4b04      	ldr	r3, [pc, #16]	; (80060b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80060a6:	681b      	ldr	r3, [r3, #0]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3708      	adds	r7, #8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	58024400 	.word	0x58024400
 80060b4:	08018ff0 	.word	0x08018ff0
 80060b8:	2400000c 	.word	0x2400000c
 80060bc:	24000008 	.word	0x24000008

080060c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80060c4:	f7ff ffcc 	bl	8006060 <HAL_RCC_GetHCLKFreq>
 80060c8:	4602      	mov	r2, r0
 80060ca:	4b06      	ldr	r3, [pc, #24]	; (80060e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060cc:	69db      	ldr	r3, [r3, #28]
 80060ce:	091b      	lsrs	r3, r3, #4
 80060d0:	f003 0307 	and.w	r3, r3, #7
 80060d4:	4904      	ldr	r1, [pc, #16]	; (80060e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80060d6:	5ccb      	ldrb	r3, [r1, r3]
 80060d8:	f003 031f 	and.w	r3, r3, #31
 80060dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	58024400 	.word	0x58024400
 80060e8:	08018ff0 	.word	0x08018ff0

080060ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80060f0:	f7ff ffb6 	bl	8006060 <HAL_RCC_GetHCLKFreq>
 80060f4:	4602      	mov	r2, r0
 80060f6:	4b06      	ldr	r3, [pc, #24]	; (8006110 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060f8:	69db      	ldr	r3, [r3, #28]
 80060fa:	0a1b      	lsrs	r3, r3, #8
 80060fc:	f003 0307 	and.w	r3, r3, #7
 8006100:	4904      	ldr	r1, [pc, #16]	; (8006114 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006102:	5ccb      	ldrb	r3, [r1, r3]
 8006104:	f003 031f 	and.w	r3, r3, #31
 8006108:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800610c:	4618      	mov	r0, r3
 800610e:	bd80      	pop	{r7, pc}
 8006110:	58024400 	.word	0x58024400
 8006114:	08018ff0 	.word	0x08018ff0

08006118 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006120:	2300      	movs	r3, #0
 8006122:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006124:	2300      	movs	r3, #0
 8006126:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d03f      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006138:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800613c:	d02a      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800613e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006142:	d824      	bhi.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006144:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006148:	d018      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800614a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800614e:	d81e      	bhi.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006150:	2b00      	cmp	r3, #0
 8006152:	d003      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006154:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006158:	d007      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800615a:	e018      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800615c:	4bab      	ldr	r3, [pc, #684]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800615e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006160:	4aaa      	ldr	r2, [pc, #680]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006166:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006168:	e015      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	3304      	adds	r3, #4
 800616e:	2102      	movs	r1, #2
 8006170:	4618      	mov	r0, r3
 8006172:	f001 f989 	bl	8007488 <RCCEx_PLL2_Config>
 8006176:	4603      	mov	r3, r0
 8006178:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800617a:	e00c      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	3324      	adds	r3, #36	; 0x24
 8006180:	2102      	movs	r1, #2
 8006182:	4618      	mov	r0, r3
 8006184:	f001 fa32 	bl	80075ec <RCCEx_PLL3_Config>
 8006188:	4603      	mov	r3, r0
 800618a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800618c:	e003      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	75fb      	strb	r3, [r7, #23]
      break;
 8006192:	e000      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006194:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006196:	7dfb      	ldrb	r3, [r7, #23]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d109      	bne.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800619c:	4b9b      	ldr	r3, [pc, #620]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800619e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061a8:	4998      	ldr	r1, [pc, #608]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	650b      	str	r3, [r1, #80]	; 0x50
 80061ae:	e001      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061b0:	7dfb      	ldrb	r3, [r7, #23]
 80061b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d03d      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c4:	2b04      	cmp	r3, #4
 80061c6:	d826      	bhi.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80061c8:	a201      	add	r2, pc, #4	; (adr r2, 80061d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80061ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ce:	bf00      	nop
 80061d0:	080061e5 	.word	0x080061e5
 80061d4:	080061f3 	.word	0x080061f3
 80061d8:	08006205 	.word	0x08006205
 80061dc:	0800621d 	.word	0x0800621d
 80061e0:	0800621d 	.word	0x0800621d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061e4:	4b89      	ldr	r3, [pc, #548]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e8:	4a88      	ldr	r2, [pc, #544]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80061f0:	e015      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	3304      	adds	r3, #4
 80061f6:	2100      	movs	r1, #0
 80061f8:	4618      	mov	r0, r3
 80061fa:	f001 f945 	bl	8007488 <RCCEx_PLL2_Config>
 80061fe:	4603      	mov	r3, r0
 8006200:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006202:	e00c      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	3324      	adds	r3, #36	; 0x24
 8006208:	2100      	movs	r1, #0
 800620a:	4618      	mov	r0, r3
 800620c:	f001 f9ee 	bl	80075ec <RCCEx_PLL3_Config>
 8006210:	4603      	mov	r3, r0
 8006212:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006214:	e003      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	75fb      	strb	r3, [r7, #23]
      break;
 800621a:	e000      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800621c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800621e:	7dfb      	ldrb	r3, [r7, #23]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d109      	bne.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006224:	4b79      	ldr	r3, [pc, #484]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006228:	f023 0207 	bic.w	r2, r3, #7
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006230:	4976      	ldr	r1, [pc, #472]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006232:	4313      	orrs	r3, r2
 8006234:	650b      	str	r3, [r1, #80]	; 0x50
 8006236:	e001      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006238:	7dfb      	ldrb	r3, [r7, #23]
 800623a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006244:	2b00      	cmp	r3, #0
 8006246:	d051      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800624e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006252:	d036      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006254:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006258:	d830      	bhi.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800625a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800625e:	d032      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8006260:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006264:	d82a      	bhi.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006266:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800626a:	d02e      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800626c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006270:	d824      	bhi.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006272:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006276:	d018      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006278:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800627c:	d81e      	bhi.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800627e:	2b00      	cmp	r3, #0
 8006280:	d003      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8006282:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006286:	d007      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006288:	e018      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800628a:	4b60      	ldr	r3, [pc, #384]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800628c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628e:	4a5f      	ldr	r2, [pc, #380]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006294:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006296:	e019      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	3304      	adds	r3, #4
 800629c:	2100      	movs	r1, #0
 800629e:	4618      	mov	r0, r3
 80062a0:	f001 f8f2 	bl	8007488 <RCCEx_PLL2_Config>
 80062a4:	4603      	mov	r3, r0
 80062a6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80062a8:	e010      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	3324      	adds	r3, #36	; 0x24
 80062ae:	2100      	movs	r1, #0
 80062b0:	4618      	mov	r0, r3
 80062b2:	f001 f99b 	bl	80075ec <RCCEx_PLL3_Config>
 80062b6:	4603      	mov	r3, r0
 80062b8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062ba:	e007      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	75fb      	strb	r3, [r7, #23]
      break;
 80062c0:	e004      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80062c2:	bf00      	nop
 80062c4:	e002      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80062c6:	bf00      	nop
 80062c8:	e000      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80062ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062cc:	7dfb      	ldrb	r3, [r7, #23]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10a      	bne.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80062d2:	4b4e      	ldr	r3, [pc, #312]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062d6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80062e0:	494a      	ldr	r1, [pc, #296]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	658b      	str	r3, [r1, #88]	; 0x58
 80062e6:	e001      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e8:	7dfb      	ldrb	r3, [r7, #23]
 80062ea:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d051      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80062fe:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006302:	d036      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8006304:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006308:	d830      	bhi.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800630a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800630e:	d032      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8006310:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006314:	d82a      	bhi.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006316:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800631a:	d02e      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x262>
 800631c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006320:	d824      	bhi.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006322:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006326:	d018      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8006328:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800632c:	d81e      	bhi.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006332:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006336:	d007      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006338:	e018      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800633a:	4b34      	ldr	r3, [pc, #208]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800633c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633e:	4a33      	ldr	r2, [pc, #204]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006344:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006346:	e019      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	3304      	adds	r3, #4
 800634c:	2100      	movs	r1, #0
 800634e:	4618      	mov	r0, r3
 8006350:	f001 f89a 	bl	8007488 <RCCEx_PLL2_Config>
 8006354:	4603      	mov	r3, r0
 8006356:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006358:	e010      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	3324      	adds	r3, #36	; 0x24
 800635e:	2100      	movs	r1, #0
 8006360:	4618      	mov	r0, r3
 8006362:	f001 f943 	bl	80075ec <RCCEx_PLL3_Config>
 8006366:	4603      	mov	r3, r0
 8006368:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800636a:	e007      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	75fb      	strb	r3, [r7, #23]
      break;
 8006370:	e004      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006372:	bf00      	nop
 8006374:	e002      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006376:	bf00      	nop
 8006378:	e000      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800637a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800637c:	7dfb      	ldrb	r3, [r7, #23]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10a      	bne.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006382:	4b22      	ldr	r3, [pc, #136]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006386:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006390:	491e      	ldr	r1, [pc, #120]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006392:	4313      	orrs	r3, r2
 8006394:	658b      	str	r3, [r1, #88]	; 0x58
 8006396:	e001      	b.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006398:	7dfb      	ldrb	r3, [r7, #23]
 800639a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d035      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063ac:	2b30      	cmp	r3, #48	; 0x30
 80063ae:	d01c      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80063b0:	2b30      	cmp	r3, #48	; 0x30
 80063b2:	d817      	bhi.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80063b4:	2b20      	cmp	r3, #32
 80063b6:	d00c      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80063b8:	2b20      	cmp	r3, #32
 80063ba:	d813      	bhi.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d016      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80063c0:	2b10      	cmp	r3, #16
 80063c2:	d10f      	bne.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063c4:	4b11      	ldr	r3, [pc, #68]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c8:	4a10      	ldr	r2, [pc, #64]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80063d0:	e00e      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	3304      	adds	r3, #4
 80063d6:	2102      	movs	r1, #2
 80063d8:	4618      	mov	r0, r3
 80063da:	f001 f855 	bl	8007488 <RCCEx_PLL2_Config>
 80063de:	4603      	mov	r3, r0
 80063e0:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80063e2:	e005      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	75fb      	strb	r3, [r7, #23]
      break;
 80063e8:	e002      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80063ea:	bf00      	nop
 80063ec:	e000      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80063ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063f0:	7dfb      	ldrb	r3, [r7, #23]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10c      	bne.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80063f6:	4b05      	ldr	r3, [pc, #20]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006402:	4902      	ldr	r1, [pc, #8]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006404:	4313      	orrs	r3, r2
 8006406:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006408:	e004      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800640a:	bf00      	nop
 800640c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006410:	7dfb      	ldrb	r3, [r7, #23]
 8006412:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d047      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006424:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006428:	d030      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x374>
 800642a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800642e:	d82a      	bhi.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006430:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006434:	d02c      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8006436:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800643a:	d824      	bhi.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800643c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006440:	d018      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006446:	d81e      	bhi.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006448:	2b00      	cmp	r3, #0
 800644a:	d003      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800644c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006450:	d007      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006452:	e018      	b.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006454:	4bac      	ldr	r3, [pc, #688]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006458:	4aab      	ldr	r2, [pc, #684]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800645a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800645e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006460:	e017      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	3304      	adds	r3, #4
 8006466:	2100      	movs	r1, #0
 8006468:	4618      	mov	r0, r3
 800646a:	f001 f80d 	bl	8007488 <RCCEx_PLL2_Config>
 800646e:	4603      	mov	r3, r0
 8006470:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006472:	e00e      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	3324      	adds	r3, #36	; 0x24
 8006478:	2100      	movs	r1, #0
 800647a:	4618      	mov	r0, r3
 800647c:	f001 f8b6 	bl	80075ec <RCCEx_PLL3_Config>
 8006480:	4603      	mov	r3, r0
 8006482:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006484:	e005      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	75fb      	strb	r3, [r7, #23]
      break;
 800648a:	e002      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800648c:	bf00      	nop
 800648e:	e000      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8006490:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006492:	7dfb      	ldrb	r3, [r7, #23]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d109      	bne.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006498:	4b9b      	ldr	r3, [pc, #620]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800649a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800649c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a4:	4998      	ldr	r1, [pc, #608]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	650b      	str	r3, [r1, #80]	; 0x50
 80064aa:	e001      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ac:	7dfb      	ldrb	r3, [r7, #23]
 80064ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d049      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064c4:	d02e      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80064c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064ca:	d828      	bhi.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80064cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064d0:	d02a      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80064d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064d6:	d822      	bhi.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80064d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80064dc:	d026      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x414>
 80064de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80064e2:	d81c      	bhi.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80064e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064e8:	d010      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80064ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064ee:	d816      	bhi.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d01d      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80064f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064f8:	d111      	bne.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	3304      	adds	r3, #4
 80064fe:	2101      	movs	r1, #1
 8006500:	4618      	mov	r0, r3
 8006502:	f000 ffc1 	bl	8007488 <RCCEx_PLL2_Config>
 8006506:	4603      	mov	r3, r0
 8006508:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800650a:	e012      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	3324      	adds	r3, #36	; 0x24
 8006510:	2101      	movs	r1, #1
 8006512:	4618      	mov	r0, r3
 8006514:	f001 f86a 	bl	80075ec <RCCEx_PLL3_Config>
 8006518:	4603      	mov	r3, r0
 800651a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800651c:	e009      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	75fb      	strb	r3, [r7, #23]
      break;
 8006522:	e006      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006524:	bf00      	nop
 8006526:	e004      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006528:	bf00      	nop
 800652a:	e002      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800652c:	bf00      	nop
 800652e:	e000      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006530:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006532:	7dfb      	ldrb	r3, [r7, #23]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d109      	bne.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006538:	4b73      	ldr	r3, [pc, #460]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800653a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800653c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006544:	4970      	ldr	r1, [pc, #448]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006546:	4313      	orrs	r3, r2
 8006548:	650b      	str	r3, [r1, #80]	; 0x50
 800654a:	e001      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800654c:	7dfb      	ldrb	r3, [r7, #23]
 800654e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d04b      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006562:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006566:	d02e      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8006568:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800656c:	d828      	bhi.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800656e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006572:	d02a      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8006574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006578:	d822      	bhi.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800657a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800657e:	d026      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8006580:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006584:	d81c      	bhi.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006586:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800658a:	d010      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x496>
 800658c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006590:	d816      	bhi.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006592:	2b00      	cmp	r3, #0
 8006594:	d01d      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006596:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800659a:	d111      	bne.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	3304      	adds	r3, #4
 80065a0:	2101      	movs	r1, #1
 80065a2:	4618      	mov	r0, r3
 80065a4:	f000 ff70 	bl	8007488 <RCCEx_PLL2_Config>
 80065a8:	4603      	mov	r3, r0
 80065aa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80065ac:	e012      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	3324      	adds	r3, #36	; 0x24
 80065b2:	2101      	movs	r1, #1
 80065b4:	4618      	mov	r0, r3
 80065b6:	f001 f819 	bl	80075ec <RCCEx_PLL3_Config>
 80065ba:	4603      	mov	r3, r0
 80065bc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80065be:	e009      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	75fb      	strb	r3, [r7, #23]
      break;
 80065c4:	e006      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80065c6:	bf00      	nop
 80065c8:	e004      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80065ca:	bf00      	nop
 80065cc:	e002      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80065ce:	bf00      	nop
 80065d0:	e000      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80065d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065d4:	7dfb      	ldrb	r3, [r7, #23]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10a      	bne.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80065da:	4b4b      	ldr	r3, [pc, #300]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80065dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065de:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80065e8:	4947      	ldr	r1, [pc, #284]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	658b      	str	r3, [r1, #88]	; 0x58
 80065ee:	e001      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f0:	7dfb      	ldrb	r3, [r7, #23]
 80065f2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d02f      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006604:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006608:	d00e      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800660a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800660e:	d814      	bhi.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006610:	2b00      	cmp	r3, #0
 8006612:	d015      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8006614:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006618:	d10f      	bne.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800661a:	4b3b      	ldr	r3, [pc, #236]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800661c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661e:	4a3a      	ldr	r2, [pc, #232]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006624:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006626:	e00c      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	3304      	adds	r3, #4
 800662c:	2101      	movs	r1, #1
 800662e:	4618      	mov	r0, r3
 8006630:	f000 ff2a 	bl	8007488 <RCCEx_PLL2_Config>
 8006634:	4603      	mov	r3, r0
 8006636:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006638:	e003      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	75fb      	strb	r3, [r7, #23]
      break;
 800663e:	e000      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8006640:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006642:	7dfb      	ldrb	r3, [r7, #23]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d109      	bne.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006648:	4b2f      	ldr	r3, [pc, #188]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800664a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800664c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006654:	492c      	ldr	r1, [pc, #176]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006656:	4313      	orrs	r3, r2
 8006658:	650b      	str	r3, [r1, #80]	; 0x50
 800665a:	e001      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800665c:	7dfb      	ldrb	r3, [r7, #23]
 800665e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006668:	2b00      	cmp	r3, #0
 800666a:	d032      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006670:	2b03      	cmp	r3, #3
 8006672:	d81b      	bhi.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x594>
 8006674:	a201      	add	r2, pc, #4	; (adr r2, 800667c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8006676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800667a:	bf00      	nop
 800667c:	080066b3 	.word	0x080066b3
 8006680:	0800668d 	.word	0x0800668d
 8006684:	0800669b 	.word	0x0800669b
 8006688:	080066b3 	.word	0x080066b3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800668c:	4b1e      	ldr	r3, [pc, #120]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800668e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006690:	4a1d      	ldr	r2, [pc, #116]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006696:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006698:	e00c      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	3304      	adds	r3, #4
 800669e:	2102      	movs	r1, #2
 80066a0:	4618      	mov	r0, r3
 80066a2:	f000 fef1 	bl	8007488 <RCCEx_PLL2_Config>
 80066a6:	4603      	mov	r3, r0
 80066a8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80066aa:	e003      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	75fb      	strb	r3, [r7, #23]
      break;
 80066b0:	e000      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80066b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066b4:	7dfb      	ldrb	r3, [r7, #23]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d109      	bne.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80066ba:	4b13      	ldr	r3, [pc, #76]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80066bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066be:	f023 0203 	bic.w	r2, r3, #3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c6:	4910      	ldr	r1, [pc, #64]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	64cb      	str	r3, [r1, #76]	; 0x4c
 80066cc:	e001      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ce:	7dfb      	ldrb	r3, [r7, #23]
 80066d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f000 808a 	beq.w	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066e0:	4b0a      	ldr	r3, [pc, #40]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a09      	ldr	r2, [pc, #36]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80066e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066ec:	f7fb ff68 	bl	80025c0 <HAL_GetTick>
 80066f0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066f2:	e00d      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066f4:	f7fb ff64 	bl	80025c0 <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	2b64      	cmp	r3, #100	; 0x64
 8006700:	d906      	bls.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	75fb      	strb	r3, [r7, #23]
        break;
 8006706:	e009      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006708:	58024400 	.word	0x58024400
 800670c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006710:	4bb9      	ldr	r3, [pc, #740]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006718:	2b00      	cmp	r3, #0
 800671a:	d0eb      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800671c:	7dfb      	ldrb	r3, [r7, #23]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d166      	bne.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006722:	4bb6      	ldr	r3, [pc, #728]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006724:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800672c:	4053      	eors	r3, r2
 800672e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006732:	2b00      	cmp	r3, #0
 8006734:	d013      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006736:	4bb1      	ldr	r3, [pc, #708]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800673e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006740:	4bae      	ldr	r3, [pc, #696]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006744:	4aad      	ldr	r2, [pc, #692]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800674a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800674c:	4bab      	ldr	r3, [pc, #684]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800674e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006750:	4aaa      	ldr	r2, [pc, #680]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006756:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006758:	4aa8      	ldr	r2, [pc, #672]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006768:	d115      	bne.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800676a:	f7fb ff29 	bl	80025c0 <HAL_GetTick>
 800676e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006770:	e00b      	b.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006772:	f7fb ff25 	bl	80025c0 <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006780:	4293      	cmp	r3, r2
 8006782:	d902      	bls.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	75fb      	strb	r3, [r7, #23]
            break;
 8006788:	e005      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800678a:	4b9c      	ldr	r3, [pc, #624]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800678c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b00      	cmp	r3, #0
 8006794:	d0ed      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8006796:	7dfb      	ldrb	r3, [r7, #23]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d126      	bne.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80067a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067aa:	d10d      	bne.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80067ac:	4b93      	ldr	r3, [pc, #588]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80067ba:	0919      	lsrs	r1, r3, #4
 80067bc:	4b90      	ldr	r3, [pc, #576]	; (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80067be:	400b      	ands	r3, r1
 80067c0:	498e      	ldr	r1, [pc, #568]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	610b      	str	r3, [r1, #16]
 80067c6:	e005      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 80067c8:	4b8c      	ldr	r3, [pc, #560]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	4a8b      	ldr	r2, [pc, #556]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80067ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80067d2:	6113      	str	r3, [r2, #16]
 80067d4:	4b89      	ldr	r3, [pc, #548]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80067d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80067de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067e2:	4986      	ldr	r1, [pc, #536]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80067e4:	4313      	orrs	r3, r2
 80067e6:	670b      	str	r3, [r1, #112]	; 0x70
 80067e8:	e004      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067ea:	7dfb      	ldrb	r3, [r7, #23]
 80067ec:	75bb      	strb	r3, [r7, #22]
 80067ee:	e001      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067f0:	7dfb      	ldrb	r3, [r7, #23]
 80067f2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0301 	and.w	r3, r3, #1
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d07e      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006804:	2b28      	cmp	r3, #40	; 0x28
 8006806:	d867      	bhi.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8006808:	a201      	add	r2, pc, #4	; (adr r2, 8006810 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800680a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680e:	bf00      	nop
 8006810:	080068df 	.word	0x080068df
 8006814:	080068d9 	.word	0x080068d9
 8006818:	080068d9 	.word	0x080068d9
 800681c:	080068d9 	.word	0x080068d9
 8006820:	080068d9 	.word	0x080068d9
 8006824:	080068d9 	.word	0x080068d9
 8006828:	080068d9 	.word	0x080068d9
 800682c:	080068d9 	.word	0x080068d9
 8006830:	080068b5 	.word	0x080068b5
 8006834:	080068d9 	.word	0x080068d9
 8006838:	080068d9 	.word	0x080068d9
 800683c:	080068d9 	.word	0x080068d9
 8006840:	080068d9 	.word	0x080068d9
 8006844:	080068d9 	.word	0x080068d9
 8006848:	080068d9 	.word	0x080068d9
 800684c:	080068d9 	.word	0x080068d9
 8006850:	080068c7 	.word	0x080068c7
 8006854:	080068d9 	.word	0x080068d9
 8006858:	080068d9 	.word	0x080068d9
 800685c:	080068d9 	.word	0x080068d9
 8006860:	080068d9 	.word	0x080068d9
 8006864:	080068d9 	.word	0x080068d9
 8006868:	080068d9 	.word	0x080068d9
 800686c:	080068d9 	.word	0x080068d9
 8006870:	080068df 	.word	0x080068df
 8006874:	080068d9 	.word	0x080068d9
 8006878:	080068d9 	.word	0x080068d9
 800687c:	080068d9 	.word	0x080068d9
 8006880:	080068d9 	.word	0x080068d9
 8006884:	080068d9 	.word	0x080068d9
 8006888:	080068d9 	.word	0x080068d9
 800688c:	080068d9 	.word	0x080068d9
 8006890:	080068df 	.word	0x080068df
 8006894:	080068d9 	.word	0x080068d9
 8006898:	080068d9 	.word	0x080068d9
 800689c:	080068d9 	.word	0x080068d9
 80068a0:	080068d9 	.word	0x080068d9
 80068a4:	080068d9 	.word	0x080068d9
 80068a8:	080068d9 	.word	0x080068d9
 80068ac:	080068d9 	.word	0x080068d9
 80068b0:	080068df 	.word	0x080068df
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	3304      	adds	r3, #4
 80068b8:	2101      	movs	r1, #1
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 fde4 	bl	8007488 <RCCEx_PLL2_Config>
 80068c0:	4603      	mov	r3, r0
 80068c2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80068c4:	e00c      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	3324      	adds	r3, #36	; 0x24
 80068ca:	2101      	movs	r1, #1
 80068cc:	4618      	mov	r0, r3
 80068ce:	f000 fe8d 	bl	80075ec <RCCEx_PLL3_Config>
 80068d2:	4603      	mov	r3, r0
 80068d4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80068d6:	e003      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	75fb      	strb	r3, [r7, #23]
      break;
 80068dc:	e000      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 80068de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068e0:	7dfb      	ldrb	r3, [r7, #23]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d109      	bne.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80068e6:	4b45      	ldr	r3, [pc, #276]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80068e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ea:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068f2:	4942      	ldr	r1, [pc, #264]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80068f4:	4313      	orrs	r3, r2
 80068f6:	654b      	str	r3, [r1, #84]	; 0x54
 80068f8:	e001      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068fa:	7dfb      	ldrb	r3, [r7, #23]
 80068fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0302 	and.w	r3, r3, #2
 8006906:	2b00      	cmp	r3, #0
 8006908:	d037      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800690e:	2b05      	cmp	r3, #5
 8006910:	d820      	bhi.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006912:	a201      	add	r2, pc, #4	; (adr r2, 8006918 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8006914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006918:	0800695b 	.word	0x0800695b
 800691c:	08006931 	.word	0x08006931
 8006920:	08006943 	.word	0x08006943
 8006924:	0800695b 	.word	0x0800695b
 8006928:	0800695b 	.word	0x0800695b
 800692c:	0800695b 	.word	0x0800695b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	3304      	adds	r3, #4
 8006934:	2101      	movs	r1, #1
 8006936:	4618      	mov	r0, r3
 8006938:	f000 fda6 	bl	8007488 <RCCEx_PLL2_Config>
 800693c:	4603      	mov	r3, r0
 800693e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006940:	e00c      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	3324      	adds	r3, #36	; 0x24
 8006946:	2101      	movs	r1, #1
 8006948:	4618      	mov	r0, r3
 800694a:	f000 fe4f 	bl	80075ec <RCCEx_PLL3_Config>
 800694e:	4603      	mov	r3, r0
 8006950:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006952:	e003      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	75fb      	strb	r3, [r7, #23]
      break;
 8006958:	e000      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800695a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800695c:	7dfb      	ldrb	r3, [r7, #23]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d109      	bne.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006962:	4b26      	ldr	r3, [pc, #152]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006966:	f023 0207 	bic.w	r2, r3, #7
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800696e:	4923      	ldr	r1, [pc, #140]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006970:	4313      	orrs	r3, r2
 8006972:	654b      	str	r3, [r1, #84]	; 0x54
 8006974:	e001      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006976:	7dfb      	ldrb	r3, [r7, #23]
 8006978:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0304 	and.w	r3, r3, #4
 8006982:	2b00      	cmp	r3, #0
 8006984:	d040      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800698c:	2b05      	cmp	r3, #5
 800698e:	d821      	bhi.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006990:	a201      	add	r2, pc, #4	; (adr r2, 8006998 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8006992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006996:	bf00      	nop
 8006998:	080069db 	.word	0x080069db
 800699c:	080069b1 	.word	0x080069b1
 80069a0:	080069c3 	.word	0x080069c3
 80069a4:	080069db 	.word	0x080069db
 80069a8:	080069db 	.word	0x080069db
 80069ac:	080069db 	.word	0x080069db
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	3304      	adds	r3, #4
 80069b4:	2101      	movs	r1, #1
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 fd66 	bl	8007488 <RCCEx_PLL2_Config>
 80069bc:	4603      	mov	r3, r0
 80069be:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80069c0:	e00c      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	3324      	adds	r3, #36	; 0x24
 80069c6:	2101      	movs	r1, #1
 80069c8:	4618      	mov	r0, r3
 80069ca:	f000 fe0f 	bl	80075ec <RCCEx_PLL3_Config>
 80069ce:	4603      	mov	r3, r0
 80069d0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80069d2:	e003      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	75fb      	strb	r3, [r7, #23]
      break;
 80069d8:	e000      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80069da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069dc:	7dfb      	ldrb	r3, [r7, #23]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d110      	bne.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80069e2:	4b06      	ldr	r3, [pc, #24]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80069e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069e6:	f023 0207 	bic.w	r2, r3, #7
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069f0:	4902      	ldr	r1, [pc, #8]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	658b      	str	r3, [r1, #88]	; 0x58
 80069f6:	e007      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80069f8:	58024800 	.word	0x58024800
 80069fc:	58024400 	.word	0x58024400
 8006a00:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a04:	7dfb      	ldrb	r3, [r7, #23]
 8006a06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0320 	and.w	r3, r3, #32
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d04b      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a1e:	d02e      	beq.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x966>
 8006a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a24:	d828      	bhi.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a2a:	d02a      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8006a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a30:	d822      	bhi.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006a32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a36:	d026      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006a38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a3c:	d81c      	bhi.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006a3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a42:	d010      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8006a44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a48:	d816      	bhi.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d01d      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x972>
 8006a4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a52:	d111      	bne.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	3304      	adds	r3, #4
 8006a58:	2100      	movs	r1, #0
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f000 fd14 	bl	8007488 <RCCEx_PLL2_Config>
 8006a60:	4603      	mov	r3, r0
 8006a62:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006a64:	e012      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	3324      	adds	r3, #36	; 0x24
 8006a6a:	2102      	movs	r1, #2
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f000 fdbd 	bl	80075ec <RCCEx_PLL3_Config>
 8006a72:	4603      	mov	r3, r0
 8006a74:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006a76:	e009      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a7c:	e006      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006a7e:	bf00      	nop
 8006a80:	e004      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006a82:	bf00      	nop
 8006a84:	e002      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006a86:	bf00      	nop
 8006a88:	e000      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006a8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a8c:	7dfb      	ldrb	r3, [r7, #23]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10a      	bne.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a92:	4bb2      	ldr	r3, [pc, #712]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a96:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa0:	49ae      	ldr	r1, [pc, #696]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	654b      	str	r3, [r1, #84]	; 0x54
 8006aa6:	e001      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aa8:	7dfb      	ldrb	r3, [r7, #23]
 8006aaa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d04b      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006abe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006ac2:	d02e      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8006ac4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006ac8:	d828      	bhi.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ace:	d02a      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8006ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ad4:	d822      	bhi.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006ad6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ada:	d026      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006adc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ae0:	d81c      	bhi.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ae6:	d010      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8006ae8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006aec:	d816      	bhi.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d01d      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006af6:	d111      	bne.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	3304      	adds	r3, #4
 8006afc:	2100      	movs	r1, #0
 8006afe:	4618      	mov	r0, r3
 8006b00:	f000 fcc2 	bl	8007488 <RCCEx_PLL2_Config>
 8006b04:	4603      	mov	r3, r0
 8006b06:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006b08:	e012      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	3324      	adds	r3, #36	; 0x24
 8006b0e:	2102      	movs	r1, #2
 8006b10:	4618      	mov	r0, r3
 8006b12:	f000 fd6b 	bl	80075ec <RCCEx_PLL3_Config>
 8006b16:	4603      	mov	r3, r0
 8006b18:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006b1a:	e009      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b20:	e006      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006b22:	bf00      	nop
 8006b24:	e004      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006b26:	bf00      	nop
 8006b28:	e002      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006b2a:	bf00      	nop
 8006b2c:	e000      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006b2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b30:	7dfb      	ldrb	r3, [r7, #23]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10a      	bne.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b36:	4b89      	ldr	r3, [pc, #548]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b3a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b44:	4985      	ldr	r1, [pc, #532]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	658b      	str	r3, [r1, #88]	; 0x58
 8006b4a:	e001      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b4c:	7dfb      	ldrb	r3, [r7, #23]
 8006b4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d04b      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b62:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006b66:	d02e      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8006b68:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006b6c:	d828      	bhi.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006b6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b72:	d02a      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8006b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b78:	d822      	bhi.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006b7a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006b7e:	d026      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8006b80:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006b84:	d81c      	bhi.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006b86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b8a:	d010      	beq.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8006b8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b90:	d816      	bhi.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d01d      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8006b96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b9a:	d111      	bne.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	3304      	adds	r3, #4
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 fc70 	bl	8007488 <RCCEx_PLL2_Config>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006bac:	e012      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	3324      	adds	r3, #36	; 0x24
 8006bb2:	2102      	movs	r1, #2
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f000 fd19 	bl	80075ec <RCCEx_PLL3_Config>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006bbe:	e009      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8006bc4:	e006      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006bc6:	bf00      	nop
 8006bc8:	e004      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006bca:	bf00      	nop
 8006bcc:	e002      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006bce:	bf00      	nop
 8006bd0:	e000      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006bd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bd4:	7dfb      	ldrb	r3, [r7, #23]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10a      	bne.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006bda:	4b60      	ldr	r3, [pc, #384]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006be8:	495c      	ldr	r1, [pc, #368]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006bea:	4313      	orrs	r3, r2
 8006bec:	658b      	str	r3, [r1, #88]	; 0x58
 8006bee:	e001      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bf0:	7dfb      	ldrb	r3, [r7, #23]
 8006bf2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0308 	and.w	r3, r3, #8
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d018      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c08:	d10a      	bne.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	3324      	adds	r3, #36	; 0x24
 8006c0e:	2102      	movs	r1, #2
 8006c10:	4618      	mov	r0, r3
 8006c12:	f000 fceb 	bl	80075ec <RCCEx_PLL3_Config>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d001      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006c20:	4b4e      	ldr	r3, [pc, #312]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c24:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c2c:	494b      	ldr	r1, [pc, #300]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0310 	and.w	r3, r3, #16
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d01a      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c48:	d10a      	bne.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	3324      	adds	r3, #36	; 0x24
 8006c4e:	2102      	movs	r1, #2
 8006c50:	4618      	mov	r0, r3
 8006c52:	f000 fccb 	bl	80075ec <RCCEx_PLL3_Config>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d001      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006c60:	4b3e      	ldr	r3, [pc, #248]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c6e:	493b      	ldr	r1, [pc, #236]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006c70:	4313      	orrs	r3, r2
 8006c72:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d034      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c8a:	d01d      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006c8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c90:	d817      	bhi.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d003      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8006c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c9a:	d009      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006c9c:	e011      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	3304      	adds	r3, #4
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f000 fbef 	bl	8007488 <RCCEx_PLL2_Config>
 8006caa:	4603      	mov	r3, r0
 8006cac:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006cae:	e00c      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	3324      	adds	r3, #36	; 0x24
 8006cb4:	2102      	movs	r1, #2
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f000 fc98 	bl	80075ec <RCCEx_PLL3_Config>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006cc0:	e003      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	75fb      	strb	r3, [r7, #23]
      break;
 8006cc6:	e000      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8006cc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cca:	7dfb      	ldrb	r3, [r7, #23]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10a      	bne.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006cd0:	4b22      	ldr	r3, [pc, #136]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006cde:	491f      	ldr	r1, [pc, #124]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	658b      	str	r3, [r1, #88]	; 0x58
 8006ce4:	e001      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce6:	7dfb      	ldrb	r3, [r7, #23]
 8006ce8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d036      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cfc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d00:	d01c      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006d02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d06:	d816      	bhi.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006d08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d0c:	d003      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006d0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d12:	d007      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8006d14:	e00f      	b.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d16:	4b11      	ldr	r3, [pc, #68]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d1a:	4a10      	ldr	r2, [pc, #64]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006d22:	e00c      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	3324      	adds	r3, #36	; 0x24
 8006d28:	2101      	movs	r1, #1
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 fc5e 	bl	80075ec <RCCEx_PLL3_Config>
 8006d30:	4603      	mov	r3, r0
 8006d32:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006d34:	e003      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	75fb      	strb	r3, [r7, #23]
      break;
 8006d3a:	e000      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8006d3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d3e:	7dfb      	ldrb	r3, [r7, #23]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10d      	bne.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d44:	4b05      	ldr	r3, [pc, #20]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d52:	4902      	ldr	r1, [pc, #8]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006d54:	4313      	orrs	r3, r2
 8006d56:	654b      	str	r3, [r1, #84]	; 0x54
 8006d58:	e004      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8006d5a:	bf00      	nop
 8006d5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d60:	7dfb      	ldrb	r3, [r7, #23]
 8006d62:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d029      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d003      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d7c:	d007      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006d7e:	e00f      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d80:	4b61      	ldr	r3, [pc, #388]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d84:	4a60      	ldr	r2, [pc, #384]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006d86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006d8c:	e00b      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	3304      	adds	r3, #4
 8006d92:	2102      	movs	r1, #2
 8006d94:	4618      	mov	r0, r3
 8006d96:	f000 fb77 	bl	8007488 <RCCEx_PLL2_Config>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006d9e:	e002      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	75fb      	strb	r3, [r7, #23]
      break;
 8006da4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006da6:	7dfb      	ldrb	r3, [r7, #23]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d109      	bne.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006dac:	4b56      	ldr	r3, [pc, #344]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006db0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006db8:	4953      	ldr	r1, [pc, #332]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006dbe:	e001      	b.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc0:	7dfb      	ldrb	r3, [r7, #23]
 8006dc2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00a      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	3324      	adds	r3, #36	; 0x24
 8006dd4:	2102      	movs	r1, #2
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f000 fc08 	bl	80075ec <RCCEx_PLL3_Config>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d001      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d030      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006df6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dfa:	d017      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006dfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e00:	d811      	bhi.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006e02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e06:	d013      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8006e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e0c:	d80b      	bhi.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d010      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8006e12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e16:	d106      	bne.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e18:	4b3b      	ldr	r3, [pc, #236]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1c:	4a3a      	ldr	r2, [pc, #232]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006e24:	e007      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	75fb      	strb	r3, [r7, #23]
      break;
 8006e2a:	e004      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006e2c:	bf00      	nop
 8006e2e:	e002      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006e30:	bf00      	nop
 8006e32:	e000      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006e34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e36:	7dfb      	ldrb	r3, [r7, #23]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d109      	bne.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e3c:	4b32      	ldr	r3, [pc, #200]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e48:	492f      	ldr	r1, [pc, #188]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	654b      	str	r3, [r1, #84]	; 0x54
 8006e4e:	e001      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e50:	7dfb      	ldrb	r3, [r7, #23]
 8006e52:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d008      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006e60:	4b29      	ldr	r3, [pc, #164]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e6c:	4926      	ldr	r1, [pc, #152]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d008      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e7e:	4b22      	ldr	r3, [pc, #136]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e82:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e8a:	491f      	ldr	r1, [pc, #124]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00d      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e9c:	4b1a      	ldr	r3, [pc, #104]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	4a19      	ldr	r2, [pc, #100]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006ea2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ea6:	6113      	str	r3, [r2, #16]
 8006ea8:	4b17      	ldr	r3, [pc, #92]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006eaa:	691a      	ldr	r2, [r3, #16]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006eb2:	4915      	ldr	r1, [pc, #84]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	da08      	bge.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006ec0:	4b11      	ldr	r3, [pc, #68]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ec4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ecc:	490e      	ldr	r1, [pc, #56]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d009      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006ede:	4b0a      	ldr	r3, [pc, #40]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eec:	4906      	ldr	r1, [pc, #24]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006ef2:	7dbb      	ldrb	r3, [r7, #22]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d101      	bne.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	e000      	b.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3718      	adds	r7, #24
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	58024400 	.word	0x58024400

08006f0c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006f10:	f7ff f8a6 	bl	8006060 <HAL_RCC_GetHCLKFreq>
 8006f14:	4602      	mov	r2, r0
 8006f16:	4b06      	ldr	r3, [pc, #24]	; (8006f30 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	091b      	lsrs	r3, r3, #4
 8006f1c:	f003 0307 	and.w	r3, r3, #7
 8006f20:	4904      	ldr	r1, [pc, #16]	; (8006f34 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006f22:	5ccb      	ldrb	r3, [r1, r3]
 8006f24:	f003 031f 	and.w	r3, r3, #31
 8006f28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	58024400 	.word	0x58024400
 8006f34:	08018ff0 	.word	0x08018ff0

08006f38 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b089      	sub	sp, #36	; 0x24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f40:	4ba1      	ldr	r3, [pc, #644]	; (80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f44:	f003 0303 	and.w	r3, r3, #3
 8006f48:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006f4a:	4b9f      	ldr	r3, [pc, #636]	; (80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f4e:	0b1b      	lsrs	r3, r3, #12
 8006f50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f54:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006f56:	4b9c      	ldr	r3, [pc, #624]	; (80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5a:	091b      	lsrs	r3, r3, #4
 8006f5c:	f003 0301 	and.w	r3, r3, #1
 8006f60:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006f62:	4b99      	ldr	r3, [pc, #612]	; (80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f66:	08db      	lsrs	r3, r3, #3
 8006f68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f6c:	693a      	ldr	r2, [r7, #16]
 8006f6e:	fb02 f303 	mul.w	r3, r2, r3
 8006f72:	ee07 3a90 	vmov	s15, r3
 8006f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f000 8111 	beq.w	80071a8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	f000 8083 	beq.w	8007094 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	f200 80a1 	bhi.w	80070d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d003      	beq.n	8006fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d056      	beq.n	8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006fa2:	e099      	b.n	80070d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fa4:	4b88      	ldr	r3, [pc, #544]	; (80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0320 	and.w	r3, r3, #32
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d02d      	beq.n	800700c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006fb0:	4b85      	ldr	r3, [pc, #532]	; (80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	08db      	lsrs	r3, r3, #3
 8006fb6:	f003 0303 	and.w	r3, r3, #3
 8006fba:	4a84      	ldr	r2, [pc, #528]	; (80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8006fc0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	ee07 3a90 	vmov	s15, r3
 8006fc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	ee07 3a90 	vmov	s15, r3
 8006fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fda:	4b7b      	ldr	r3, [pc, #492]	; (80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fe2:	ee07 3a90 	vmov	s15, r3
 8006fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fea:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80071d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ffa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007006:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800700a:	e087      	b.n	800711c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	ee07 3a90 	vmov	s15, r3
 8007012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007016:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80071d4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800701a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800701e:	4b6a      	ldr	r3, [pc, #424]	; (80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007026:	ee07 3a90 	vmov	s15, r3
 800702a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800702e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007032:	eddf 5a67 	vldr	s11, [pc, #412]	; 80071d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800703a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800703e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800704a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800704e:	e065      	b.n	800711c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	ee07 3a90 	vmov	s15, r3
 8007056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800705a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80071d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800705e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007062:	4b59      	ldr	r3, [pc, #356]	; (80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800706a:	ee07 3a90 	vmov	s15, r3
 800706e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007072:	ed97 6a03 	vldr	s12, [r7, #12]
 8007076:	eddf 5a56 	vldr	s11, [pc, #344]	; 80071d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800707a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800707e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007082:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800708a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800708e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007092:	e043      	b.n	800711c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	ee07 3a90 	vmov	s15, r3
 800709a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800709e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80071dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80070a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070a6:	4b48      	ldr	r3, [pc, #288]	; (80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ae:	ee07 3a90 	vmov	s15, r3
 80070b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80070ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80071d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070d6:	e021      	b.n	800711c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	ee07 3a90 	vmov	s15, r3
 80070de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80071d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80070e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ea:	4b37      	ldr	r3, [pc, #220]	; (80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070f2:	ee07 3a90 	vmov	s15, r3
 80070f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80070fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80071d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800710a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800710e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007116:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800711a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800711c:	4b2a      	ldr	r3, [pc, #168]	; (80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800711e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007120:	0a5b      	lsrs	r3, r3, #9
 8007122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007126:	ee07 3a90 	vmov	s15, r3
 800712a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800712e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007132:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007136:	edd7 6a07 	vldr	s13, [r7, #28]
 800713a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800713e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007142:	ee17 2a90 	vmov	r2, s15
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800714a:	4b1f      	ldr	r3, [pc, #124]	; (80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800714c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714e:	0c1b      	lsrs	r3, r3, #16
 8007150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007154:	ee07 3a90 	vmov	s15, r3
 8007158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007160:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007164:	edd7 6a07 	vldr	s13, [r7, #28]
 8007168:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800716c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007170:	ee17 2a90 	vmov	r2, s15
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007178:	4b13      	ldr	r3, [pc, #76]	; (80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800717a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717c:	0e1b      	lsrs	r3, r3, #24
 800717e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007182:	ee07 3a90 	vmov	s15, r3
 8007186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800718a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800718e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007192:	edd7 6a07 	vldr	s13, [r7, #28]
 8007196:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800719a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800719e:	ee17 2a90 	vmov	r2, s15
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80071a6:	e008      	b.n	80071ba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	609a      	str	r2, [r3, #8]
}
 80071ba:	bf00      	nop
 80071bc:	3724      	adds	r7, #36	; 0x24
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	58024400 	.word	0x58024400
 80071cc:	03d09000 	.word	0x03d09000
 80071d0:	46000000 	.word	0x46000000
 80071d4:	4c742400 	.word	0x4c742400
 80071d8:	4a742400 	.word	0x4a742400
 80071dc:	4af42400 	.word	0x4af42400

080071e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b089      	sub	sp, #36	; 0x24
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071e8:	4ba1      	ldr	r3, [pc, #644]	; (8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ec:	f003 0303 	and.w	r3, r3, #3
 80071f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80071f2:	4b9f      	ldr	r3, [pc, #636]	; (8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f6:	0d1b      	lsrs	r3, r3, #20
 80071f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80071fe:	4b9c      	ldr	r3, [pc, #624]	; (8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007202:	0a1b      	lsrs	r3, r3, #8
 8007204:	f003 0301 	and.w	r3, r3, #1
 8007208:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800720a:	4b99      	ldr	r3, [pc, #612]	; (8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800720c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800720e:	08db      	lsrs	r3, r3, #3
 8007210:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	fb02 f303 	mul.w	r3, r2, r3
 800721a:	ee07 3a90 	vmov	s15, r3
 800721e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007222:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	2b00      	cmp	r3, #0
 800722a:	f000 8111 	beq.w	8007450 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	2b02      	cmp	r3, #2
 8007232:	f000 8083 	beq.w	800733c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	2b02      	cmp	r3, #2
 800723a:	f200 80a1 	bhi.w	8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d003      	beq.n	800724c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	2b01      	cmp	r3, #1
 8007248:	d056      	beq.n	80072f8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800724a:	e099      	b.n	8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800724c:	4b88      	ldr	r3, [pc, #544]	; (8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0320 	and.w	r3, r3, #32
 8007254:	2b00      	cmp	r3, #0
 8007256:	d02d      	beq.n	80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007258:	4b85      	ldr	r3, [pc, #532]	; (8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	08db      	lsrs	r3, r3, #3
 800725e:	f003 0303 	and.w	r3, r3, #3
 8007262:	4a84      	ldr	r2, [pc, #528]	; (8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007264:	fa22 f303 	lsr.w	r3, r2, r3
 8007268:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	ee07 3a90 	vmov	s15, r3
 8007270:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	ee07 3a90 	vmov	s15, r3
 800727a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800727e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007282:	4b7b      	ldr	r3, [pc, #492]	; (8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800728a:	ee07 3a90 	vmov	s15, r3
 800728e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007292:	ed97 6a03 	vldr	s12, [r7, #12]
 8007296:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007478 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800729a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800729e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80072b2:	e087      	b.n	80073c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	ee07 3a90 	vmov	s15, r3
 80072ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800747c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80072c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072c6:	4b6a      	ldr	r3, [pc, #424]	; (8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ce:	ee07 3a90 	vmov	s15, r3
 80072d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80072da:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007478 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072f6:	e065      	b.n	80073c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	ee07 3a90 	vmov	s15, r3
 80072fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007302:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007480 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800730a:	4b59      	ldr	r3, [pc, #356]	; (8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800730c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007312:	ee07 3a90 	vmov	s15, r3
 8007316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800731a:	ed97 6a03 	vldr	s12, [r7, #12]
 800731e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007478 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800732a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800732e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007336:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800733a:	e043      	b.n	80073c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	ee07 3a90 	vmov	s15, r3
 8007342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007346:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007484 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800734a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800734e:	4b48      	ldr	r3, [pc, #288]	; (8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007356:	ee07 3a90 	vmov	s15, r3
 800735a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800735e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007362:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007478 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800736a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800736e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800737a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800737e:	e021      	b.n	80073c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	ee07 3a90 	vmov	s15, r3
 8007386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800738a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007480 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800738e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007392:	4b37      	ldr	r3, [pc, #220]	; (8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800739a:	ee07 3a90 	vmov	s15, r3
 800739e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80073a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007478 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80073c4:	4b2a      	ldr	r3, [pc, #168]	; (8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c8:	0a5b      	lsrs	r3, r3, #9
 80073ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073ce:	ee07 3a90 	vmov	s15, r3
 80073d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073de:	edd7 6a07 	vldr	s13, [r7, #28]
 80073e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073ea:	ee17 2a90 	vmov	r2, s15
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80073f2:	4b1f      	ldr	r3, [pc, #124]	; (8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f6:	0c1b      	lsrs	r3, r3, #16
 80073f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073fc:	ee07 3a90 	vmov	s15, r3
 8007400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007404:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007408:	ee37 7a87 	vadd.f32	s14, s15, s14
 800740c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007410:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007418:	ee17 2a90 	vmov	r2, s15
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007420:	4b13      	ldr	r3, [pc, #76]	; (8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007424:	0e1b      	lsrs	r3, r3, #24
 8007426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800742a:	ee07 3a90 	vmov	s15, r3
 800742e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007432:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007436:	ee37 7a87 	vadd.f32	s14, s15, s14
 800743a:	edd7 6a07 	vldr	s13, [r7, #28]
 800743e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007446:	ee17 2a90 	vmov	r2, s15
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800744e:	e008      	b.n	8007462 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	609a      	str	r2, [r3, #8]
}
 8007462:	bf00      	nop
 8007464:	3724      	adds	r7, #36	; 0x24
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop
 8007470:	58024400 	.word	0x58024400
 8007474:	03d09000 	.word	0x03d09000
 8007478:	46000000 	.word	0x46000000
 800747c:	4c742400 	.word	0x4c742400
 8007480:	4a742400 	.word	0x4a742400
 8007484:	4af42400 	.word	0x4af42400

08007488 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007492:	2300      	movs	r3, #0
 8007494:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007496:	4b53      	ldr	r3, [pc, #332]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 8007498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800749a:	f003 0303 	and.w	r3, r3, #3
 800749e:	2b03      	cmp	r3, #3
 80074a0:	d101      	bne.n	80074a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	e099      	b.n	80075da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80074a6:	4b4f      	ldr	r3, [pc, #316]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a4e      	ldr	r2, [pc, #312]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 80074ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80074b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074b2:	f7fb f885 	bl	80025c0 <HAL_GetTick>
 80074b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074b8:	e008      	b.n	80074cc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80074ba:	f7fb f881 	bl	80025c0 <HAL_GetTick>
 80074be:	4602      	mov	r2, r0
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	1ad3      	subs	r3, r2, r3
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	d901      	bls.n	80074cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80074c8:	2303      	movs	r3, #3
 80074ca:	e086      	b.n	80075da <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074cc:	4b45      	ldr	r3, [pc, #276]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d1f0      	bne.n	80074ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80074d8:	4b42      	ldr	r3, [pc, #264]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 80074da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	031b      	lsls	r3, r3, #12
 80074e6:	493f      	ldr	r1, [pc, #252]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 80074e8:	4313      	orrs	r3, r2
 80074ea:	628b      	str	r3, [r1, #40]	; 0x28
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	3b01      	subs	r3, #1
 80074f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	3b01      	subs	r3, #1
 80074fc:	025b      	lsls	r3, r3, #9
 80074fe:	b29b      	uxth	r3, r3
 8007500:	431a      	orrs	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	3b01      	subs	r3, #1
 8007508:	041b      	lsls	r3, r3, #16
 800750a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800750e:	431a      	orrs	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	3b01      	subs	r3, #1
 8007516:	061b      	lsls	r3, r3, #24
 8007518:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800751c:	4931      	ldr	r1, [pc, #196]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 800751e:	4313      	orrs	r3, r2
 8007520:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007522:	4b30      	ldr	r3, [pc, #192]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 8007524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007526:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	695b      	ldr	r3, [r3, #20]
 800752e:	492d      	ldr	r1, [pc, #180]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 8007530:	4313      	orrs	r3, r2
 8007532:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007534:	4b2b      	ldr	r3, [pc, #172]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 8007536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007538:	f023 0220 	bic.w	r2, r3, #32
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	699b      	ldr	r3, [r3, #24]
 8007540:	4928      	ldr	r1, [pc, #160]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 8007542:	4313      	orrs	r3, r2
 8007544:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007546:	4b27      	ldr	r3, [pc, #156]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 8007548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800754a:	4a26      	ldr	r2, [pc, #152]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 800754c:	f023 0310 	bic.w	r3, r3, #16
 8007550:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007552:	4b24      	ldr	r3, [pc, #144]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 8007554:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007556:	4b24      	ldr	r3, [pc, #144]	; (80075e8 <RCCEx_PLL2_Config+0x160>)
 8007558:	4013      	ands	r3, r2
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	69d2      	ldr	r2, [r2, #28]
 800755e:	00d2      	lsls	r2, r2, #3
 8007560:	4920      	ldr	r1, [pc, #128]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 8007562:	4313      	orrs	r3, r2
 8007564:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007566:	4b1f      	ldr	r3, [pc, #124]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 8007568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756a:	4a1e      	ldr	r2, [pc, #120]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 800756c:	f043 0310 	orr.w	r3, r3, #16
 8007570:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d106      	bne.n	8007586 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007578:	4b1a      	ldr	r3, [pc, #104]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 800757a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757c:	4a19      	ldr	r2, [pc, #100]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 800757e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007582:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007584:	e00f      	b.n	80075a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d106      	bne.n	800759a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800758c:	4b15      	ldr	r3, [pc, #84]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 800758e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007590:	4a14      	ldr	r2, [pc, #80]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 8007592:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007596:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007598:	e005      	b.n	80075a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800759a:	4b12      	ldr	r3, [pc, #72]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 800759c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759e:	4a11      	ldr	r2, [pc, #68]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 80075a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80075a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80075a6:	4b0f      	ldr	r3, [pc, #60]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a0e      	ldr	r2, [pc, #56]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 80075ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80075b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075b2:	f7fb f805 	bl	80025c0 <HAL_GetTick>
 80075b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80075b8:	e008      	b.n	80075cc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80075ba:	f7fb f801 	bl	80025c0 <HAL_GetTick>
 80075be:	4602      	mov	r2, r0
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d901      	bls.n	80075cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80075c8:	2303      	movs	r3, #3
 80075ca:	e006      	b.n	80075da <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80075cc:	4b05      	ldr	r3, [pc, #20]	; (80075e4 <RCCEx_PLL2_Config+0x15c>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d0f0      	beq.n	80075ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80075d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	58024400 	.word	0x58024400
 80075e8:	ffff0007 	.word	0xffff0007

080075ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075f6:	2300      	movs	r3, #0
 80075f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80075fa:	4b53      	ldr	r3, [pc, #332]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 80075fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fe:	f003 0303 	and.w	r3, r3, #3
 8007602:	2b03      	cmp	r3, #3
 8007604:	d101      	bne.n	800760a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e099      	b.n	800773e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800760a:	4b4f      	ldr	r3, [pc, #316]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a4e      	ldr	r2, [pc, #312]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 8007610:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007614:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007616:	f7fa ffd3 	bl	80025c0 <HAL_GetTick>
 800761a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800761c:	e008      	b.n	8007630 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800761e:	f7fa ffcf 	bl	80025c0 <HAL_GetTick>
 8007622:	4602      	mov	r2, r0
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	1ad3      	subs	r3, r2, r3
 8007628:	2b02      	cmp	r3, #2
 800762a:	d901      	bls.n	8007630 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800762c:	2303      	movs	r3, #3
 800762e:	e086      	b.n	800773e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007630:	4b45      	ldr	r3, [pc, #276]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1f0      	bne.n	800761e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800763c:	4b42      	ldr	r3, [pc, #264]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 800763e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007640:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	051b      	lsls	r3, r3, #20
 800764a:	493f      	ldr	r1, [pc, #252]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 800764c:	4313      	orrs	r3, r2
 800764e:	628b      	str	r3, [r1, #40]	; 0x28
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	3b01      	subs	r3, #1
 8007656:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	3b01      	subs	r3, #1
 8007660:	025b      	lsls	r3, r3, #9
 8007662:	b29b      	uxth	r3, r3
 8007664:	431a      	orrs	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	3b01      	subs	r3, #1
 800766c:	041b      	lsls	r3, r3, #16
 800766e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007672:	431a      	orrs	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	3b01      	subs	r3, #1
 800767a:	061b      	lsls	r3, r3, #24
 800767c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007680:	4931      	ldr	r1, [pc, #196]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 8007682:	4313      	orrs	r3, r2
 8007684:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007686:	4b30      	ldr	r3, [pc, #192]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 8007688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	492d      	ldr	r1, [pc, #180]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 8007694:	4313      	orrs	r3, r2
 8007696:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007698:	4b2b      	ldr	r3, [pc, #172]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 800769a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	699b      	ldr	r3, [r3, #24]
 80076a4:	4928      	ldr	r1, [pc, #160]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80076aa:	4b27      	ldr	r3, [pc, #156]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 80076ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ae:	4a26      	ldr	r2, [pc, #152]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 80076b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80076b6:	4b24      	ldr	r3, [pc, #144]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 80076b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076ba:	4b24      	ldr	r3, [pc, #144]	; (800774c <RCCEx_PLL3_Config+0x160>)
 80076bc:	4013      	ands	r3, r2
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	69d2      	ldr	r2, [r2, #28]
 80076c2:	00d2      	lsls	r2, r2, #3
 80076c4:	4920      	ldr	r1, [pc, #128]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 80076c6:	4313      	orrs	r3, r2
 80076c8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80076ca:	4b1f      	ldr	r3, [pc, #124]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 80076cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ce:	4a1e      	ldr	r2, [pc, #120]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 80076d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d106      	bne.n	80076ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80076dc:	4b1a      	ldr	r3, [pc, #104]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 80076de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e0:	4a19      	ldr	r2, [pc, #100]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 80076e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80076e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076e8:	e00f      	b.n	800770a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d106      	bne.n	80076fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80076f0:	4b15      	ldr	r3, [pc, #84]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 80076f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f4:	4a14      	ldr	r2, [pc, #80]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 80076f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80076fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076fc:	e005      	b.n	800770a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80076fe:	4b12      	ldr	r3, [pc, #72]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 8007700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007702:	4a11      	ldr	r2, [pc, #68]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 8007704:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007708:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800770a:	4b0f      	ldr	r3, [pc, #60]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a0e      	ldr	r2, [pc, #56]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 8007710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007714:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007716:	f7fa ff53 	bl	80025c0 <HAL_GetTick>
 800771a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800771c:	e008      	b.n	8007730 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800771e:	f7fa ff4f 	bl	80025c0 <HAL_GetTick>
 8007722:	4602      	mov	r2, r0
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	2b02      	cmp	r3, #2
 800772a:	d901      	bls.n	8007730 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800772c:	2303      	movs	r3, #3
 800772e:	e006      	b.n	800773e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007730:	4b05      	ldr	r3, [pc, #20]	; (8007748 <RCCEx_PLL3_Config+0x15c>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007738:	2b00      	cmp	r3, #0
 800773a:	d0f0      	beq.n	800771e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800773c:	7bfb      	ldrb	r3, [r7, #15]
}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	58024400 	.word	0x58024400
 800774c:	ffff0007 	.word	0xffff0007

08007750 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d101      	bne.n	8007762 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e0f1      	b.n	8007946 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a78      	ldr	r2, [pc, #480]	; (8007950 <HAL_SPI_Init+0x200>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d00f      	beq.n	8007792 <HAL_SPI_Init+0x42>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a77      	ldr	r2, [pc, #476]	; (8007954 <HAL_SPI_Init+0x204>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d00a      	beq.n	8007792 <HAL_SPI_Init+0x42>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a75      	ldr	r2, [pc, #468]	; (8007958 <HAL_SPI_Init+0x208>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d005      	beq.n	8007792 <HAL_SPI_Init+0x42>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	2b0f      	cmp	r3, #15
 800778c:	d901      	bls.n	8007792 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e0d9      	b.n	8007946 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fba2 	bl	8007edc <SPI_GetPacketSize>
 8007798:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a6c      	ldr	r2, [pc, #432]	; (8007950 <HAL_SPI_Init+0x200>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d00c      	beq.n	80077be <HAL_SPI_Init+0x6e>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a6a      	ldr	r2, [pc, #424]	; (8007954 <HAL_SPI_Init+0x204>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d007      	beq.n	80077be <HAL_SPI_Init+0x6e>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a69      	ldr	r2, [pc, #420]	; (8007958 <HAL_SPI_Init+0x208>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d002      	beq.n	80077be <HAL_SPI_Init+0x6e>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2b08      	cmp	r3, #8
 80077bc:	d811      	bhi.n	80077e2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80077c2:	4a63      	ldr	r2, [pc, #396]	; (8007950 <HAL_SPI_Init+0x200>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d009      	beq.n	80077dc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a61      	ldr	r2, [pc, #388]	; (8007954 <HAL_SPI_Init+0x204>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d004      	beq.n	80077dc <HAL_SPI_Init+0x8c>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a60      	ldr	r2, [pc, #384]	; (8007958 <HAL_SPI_Init+0x208>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d104      	bne.n	80077e6 <HAL_SPI_Init+0x96>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2b10      	cmp	r3, #16
 80077e0:	d901      	bls.n	80077e6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e0af      	b.n	8007946 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d106      	bne.n	8007800 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7f9 ffda 	bl	80017b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2202      	movs	r2, #2
 8007804:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f022 0201 	bic.w	r2, r2, #1
 8007816:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007822:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800782c:	d119      	bne.n	8007862 <HAL_SPI_Init+0x112>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007836:	d103      	bne.n	8007840 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800783c:	2b00      	cmp	r3, #0
 800783e:	d008      	beq.n	8007852 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007844:	2b00      	cmp	r3, #0
 8007846:	d10c      	bne.n	8007862 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800784c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007850:	d107      	bne.n	8007862 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007860:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	69da      	ldr	r2, [r3, #28]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786a:	431a      	orrs	r2, r3
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	431a      	orrs	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007874:	ea42 0103 	orr.w	r1, r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	68da      	ldr	r2, [r3, #12]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	430a      	orrs	r2, r1
 8007882:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788c:	431a      	orrs	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007892:	431a      	orrs	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	431a      	orrs	r2, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	431a      	orrs	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	695b      	ldr	r3, [r3, #20]
 80078a4:	431a      	orrs	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	431a      	orrs	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	431a      	orrs	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078b6:	431a      	orrs	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	431a      	orrs	r2, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078c2:	ea42 0103 	orr.w	r1, r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	430a      	orrs	r2, r1
 80078d0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d113      	bne.n	8007902 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078ec:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007900:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f022 0201 	bic.w	r2, r2, #1
 8007910:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00a      	beq.n	8007934 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	430a      	orrs	r2, r1
 8007932:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	40013000 	.word	0x40013000
 8007954:	40003800 	.word	0x40003800
 8007958:	40003c00 	.word	0x40003c00

0800795c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b08a      	sub	sp, #40	; 0x28
 8007960:	af02      	add	r7, sp, #8
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	603b      	str	r3, [r7, #0]
 8007968:	4613      	mov	r3, r2
 800796a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	3320      	adds	r3, #32
 8007972:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007974:	2300      	movs	r3, #0
 8007976:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800797e:	2b01      	cmp	r3, #1
 8007980:	d101      	bne.n	8007986 <HAL_SPI_Transmit+0x2a>
 8007982:	2302      	movs	r3, #2
 8007984:	e1d7      	b.n	8007d36 <HAL_SPI_Transmit+0x3da>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2201      	movs	r2, #1
 800798a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800798e:	f7fa fe17 	bl	80025c0 <HAL_GetTick>
 8007992:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800799a:	b2db      	uxtb	r3, r3
 800799c:	2b01      	cmp	r3, #1
 800799e:	d007      	beq.n	80079b0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80079a0:	2302      	movs	r3, #2
 80079a2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80079ac:	7efb      	ldrb	r3, [r7, #27]
 80079ae:	e1c2      	b.n	8007d36 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d002      	beq.n	80079bc <HAL_SPI_Transmit+0x60>
 80079b6:	88fb      	ldrh	r3, [r7, #6]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d107      	bne.n	80079cc <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80079c8:	7efb      	ldrb	r3, [r7, #27]
 80079ca:	e1b4      	b.n	8007d36 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2203      	movs	r2, #3
 80079d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	88fa      	ldrh	r2, [r7, #6]
 80079e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	88fa      	ldrh	r2, [r7, #6]
 80079ee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2200      	movs	r2, #0
 80079f6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007a1c:	d107      	bne.n	8007a2e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	685a      	ldr	r2, [r3, #4]
 8007a34:	4b96      	ldr	r3, [pc, #600]	; (8007c90 <HAL_SPI_Transmit+0x334>)
 8007a36:	4013      	ands	r3, r2
 8007a38:	88f9      	ldrh	r1, [r7, #6]
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	6812      	ldr	r2, [r2, #0]
 8007a3e:	430b      	orrs	r3, r1
 8007a40:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f042 0201 	orr.w	r2, r2, #1
 8007a50:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a5a:	d107      	bne.n	8007a6c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	2b0f      	cmp	r3, #15
 8007a72:	d947      	bls.n	8007b04 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007a74:	e03f      	b.n	8007af6 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	695b      	ldr	r3, [r3, #20]
 8007a7c:	f003 0302 	and.w	r3, r3, #2
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d114      	bne.n	8007aae <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6812      	ldr	r2, [r2, #0]
 8007a8e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a94:	1d1a      	adds	r2, r3, #4
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007aac:	e023      	b.n	8007af6 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007aae:	f7fa fd87 	bl	80025c0 <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	683a      	ldr	r2, [r7, #0]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d803      	bhi.n	8007ac6 <HAL_SPI_Transmit+0x16a>
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac4:	d102      	bne.n	8007acc <HAL_SPI_Transmit+0x170>
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d114      	bne.n	8007af6 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f000 f937 	bl	8007d40 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ae0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e11f      	b.n	8007d36 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1b9      	bne.n	8007a76 <HAL_SPI_Transmit+0x11a>
 8007b02:	e0f2      	b.n	8007cea <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	2b07      	cmp	r3, #7
 8007b0a:	f240 80e7 	bls.w	8007cdc <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007b0e:	e05d      	b.n	8007bcc <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	695b      	ldr	r3, [r3, #20]
 8007b16:	f003 0302 	and.w	r3, r3, #2
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	d132      	bne.n	8007b84 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d918      	bls.n	8007b5c <HAL_SPI_Transmit+0x200>
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d014      	beq.n	8007b5c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	6812      	ldr	r2, [r2, #0]
 8007b3c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b42:	1d1a      	adds	r2, r3, #4
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	3b02      	subs	r3, #2
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007b5a:	e037      	b.n	8007bcc <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b60:	881a      	ldrh	r2, [r3, #0]
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b6a:	1c9a      	adds	r2, r3, #2
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007b82:	e023      	b.n	8007bcc <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b84:	f7fa fd1c 	bl	80025c0 <HAL_GetTick>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d803      	bhi.n	8007b9c <HAL_SPI_Transmit+0x240>
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b9a:	d102      	bne.n	8007ba2 <HAL_SPI_Transmit+0x246>
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d114      	bne.n	8007bcc <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f000 f8cc 	bl	8007d40 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bb6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	e0b4      	b.n	8007d36 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d19b      	bne.n	8007b10 <HAL_SPI_Transmit+0x1b4>
 8007bd8:	e087      	b.n	8007cea <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	695b      	ldr	r3, [r3, #20]
 8007be0:	f003 0302 	and.w	r3, r3, #2
 8007be4:	2b02      	cmp	r3, #2
 8007be6:	d155      	bne.n	8007c94 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	2b03      	cmp	r3, #3
 8007bf2:	d918      	bls.n	8007c26 <HAL_SPI_Transmit+0x2ca>
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bf8:	2b40      	cmp	r3, #64	; 0x40
 8007bfa:	d914      	bls.n	8007c26 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	6812      	ldr	r2, [r2, #0]
 8007c06:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c0c:	1d1a      	adds	r2, r3, #4
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	3b04      	subs	r3, #4
 8007c1c:	b29a      	uxth	r2, r3
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007c24:	e05a      	b.n	8007cdc <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d917      	bls.n	8007c62 <HAL_SPI_Transmit+0x306>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d013      	beq.n	8007c62 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c3e:	881a      	ldrh	r2, [r3, #0]
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c48:	1c9a      	adds	r2, r3, #2
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	3b02      	subs	r3, #2
 8007c58:	b29a      	uxth	r2, r3
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007c60:	e03c      	b.n	8007cdc <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3320      	adds	r3, #32
 8007c6c:	7812      	ldrb	r2, [r2, #0]
 8007c6e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c74:	1c5a      	adds	r2, r3, #1
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	3b01      	subs	r3, #1
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007c8c:	e026      	b.n	8007cdc <HAL_SPI_Transmit+0x380>
 8007c8e:	bf00      	nop
 8007c90:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c94:	f7fa fc94 	bl	80025c0 <HAL_GetTick>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	1ad3      	subs	r3, r2, r3
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d803      	bhi.n	8007cac <HAL_SPI_Transmit+0x350>
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007caa:	d102      	bne.n	8007cb2 <HAL_SPI_Transmit+0x356>
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d114      	bne.n	8007cdc <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f000 f844 	bl	8007d40 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cc6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e02c      	b.n	8007d36 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f47f af78 	bne.w	8007bda <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	9300      	str	r3, [sp, #0]
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	2108      	movs	r1, #8
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f000 f8c3 	bl	8007e80 <SPI_WaitOnFlagUntilTimeout>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d007      	beq.n	8007d10 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d06:	f043 0220 	orr.w	r2, r3, #32
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f000 f815 	bl	8007d40 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2201      	movs	r2, #1
 8007d22:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d001      	beq.n	8007d34 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	e000      	b.n	8007d36 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8007d34:	7efb      	ldrb	r3, [r7, #27]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3720      	adds	r7, #32
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop

08007d40 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	695b      	ldr	r3, [r3, #20]
 8007d4e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	699a      	ldr	r2, [r3, #24]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f042 0208 	orr.w	r2, r2, #8
 8007d5e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	699a      	ldr	r2, [r3, #24]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f042 0210 	orr.w	r2, r2, #16
 8007d6e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f022 0201 	bic.w	r2, r2, #1
 8007d7e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	6919      	ldr	r1, [r3, #16]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	4b3c      	ldr	r3, [pc, #240]	; (8007e7c <SPI_CloseTransfer+0x13c>)
 8007d8c:	400b      	ands	r3, r1
 8007d8e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	689a      	ldr	r2, [r3, #8]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007d9e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	2b04      	cmp	r3, #4
 8007daa:	d014      	beq.n	8007dd6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f003 0320 	and.w	r3, r3, #32
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d00f      	beq.n	8007dd6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dbc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	699a      	ldr	r2, [r3, #24]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f042 0220 	orr.w	r2, r2, #32
 8007dd4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	2b03      	cmp	r3, #3
 8007de0:	d014      	beq.n	8007e0c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00f      	beq.n	8007e0c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007df2:	f043 0204 	orr.w	r2, r3, #4
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	699a      	ldr	r2, [r3, #24]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e0a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00f      	beq.n	8007e36 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e1c:	f043 0201 	orr.w	r2, r3, #1
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	699a      	ldr	r2, [r3, #24]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e34:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00f      	beq.n	8007e60 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e46:	f043 0208 	orr.w	r2, r3, #8
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	699a      	ldr	r2, [r3, #24]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e5e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8007e70:	bf00      	nop
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr
 8007e7c:	fffffc90 	.word	0xfffffc90

08007e80 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	603b      	str	r3, [r7, #0]
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007e90:	e010      	b.n	8007eb4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e92:	f7fa fb95 	bl	80025c0 <HAL_GetTick>
 8007e96:	4602      	mov	r2, r0
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	1ad3      	subs	r3, r2, r3
 8007e9c:	69ba      	ldr	r2, [r7, #24]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d803      	bhi.n	8007eaa <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea8:	d102      	bne.n	8007eb0 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d101      	bne.n	8007eb4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	e00f      	b.n	8007ed4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	695a      	ldr	r2, [r3, #20]
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	68ba      	ldr	r2, [r7, #8]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	bf0c      	ite	eq
 8007ec4:	2301      	moveq	r3, #1
 8007ec6:	2300      	movne	r3, #0
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	461a      	mov	r2, r3
 8007ecc:	79fb      	ldrb	r3, [r7, #7]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d0df      	beq.n	8007e92 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3710      	adds	r7, #16
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ee8:	095b      	lsrs	r3, r3, #5
 8007eea:	3301      	adds	r3, #1
 8007eec:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	3307      	adds	r3, #7
 8007efa:	08db      	lsrs	r3, r3, #3
 8007efc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	fb02 f303 	mul.w	r3, r2, r3
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3714      	adds	r7, #20
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr

08007f12 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b082      	sub	sp, #8
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d101      	bne.n	8007f24 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	e049      	b.n	8007fb8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d106      	bne.n	8007f3e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f7f9 fcc5 	bl	80018c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2202      	movs	r2, #2
 8007f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	3304      	adds	r3, #4
 8007f4e:	4619      	mov	r1, r3
 8007f50:	4610      	mov	r0, r2
 8007f52:	f000 f8b3 	bl	80080bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2201      	movs	r2, #1
 8007f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2201      	movs	r2, #1
 8007f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2201      	movs	r2, #1
 8007f82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2201      	movs	r2, #1
 8007f92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2201      	movs	r2, #1
 8007faa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fb6:	2300      	movs	r3, #0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3708      	adds	r7, #8
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d001      	beq.n	8007fd8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e056      	b.n	8008086 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2202      	movs	r2, #2
 8007fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a2b      	ldr	r2, [pc, #172]	; (8008094 <HAL_TIM_Base_Start+0xd4>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d02c      	beq.n	8008044 <HAL_TIM_Base_Start+0x84>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ff2:	d027      	beq.n	8008044 <HAL_TIM_Base_Start+0x84>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a27      	ldr	r2, [pc, #156]	; (8008098 <HAL_TIM_Base_Start+0xd8>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d022      	beq.n	8008044 <HAL_TIM_Base_Start+0x84>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a26      	ldr	r2, [pc, #152]	; (800809c <HAL_TIM_Base_Start+0xdc>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d01d      	beq.n	8008044 <HAL_TIM_Base_Start+0x84>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a24      	ldr	r2, [pc, #144]	; (80080a0 <HAL_TIM_Base_Start+0xe0>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d018      	beq.n	8008044 <HAL_TIM_Base_Start+0x84>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a23      	ldr	r2, [pc, #140]	; (80080a4 <HAL_TIM_Base_Start+0xe4>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d013      	beq.n	8008044 <HAL_TIM_Base_Start+0x84>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a21      	ldr	r2, [pc, #132]	; (80080a8 <HAL_TIM_Base_Start+0xe8>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d00e      	beq.n	8008044 <HAL_TIM_Base_Start+0x84>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a20      	ldr	r2, [pc, #128]	; (80080ac <HAL_TIM_Base_Start+0xec>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d009      	beq.n	8008044 <HAL_TIM_Base_Start+0x84>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a1e      	ldr	r2, [pc, #120]	; (80080b0 <HAL_TIM_Base_Start+0xf0>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d004      	beq.n	8008044 <HAL_TIM_Base_Start+0x84>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a1d      	ldr	r2, [pc, #116]	; (80080b4 <HAL_TIM_Base_Start+0xf4>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d115      	bne.n	8008070 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	689a      	ldr	r2, [r3, #8]
 800804a:	4b1b      	ldr	r3, [pc, #108]	; (80080b8 <HAL_TIM_Base_Start+0xf8>)
 800804c:	4013      	ands	r3, r2
 800804e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2b06      	cmp	r3, #6
 8008054:	d015      	beq.n	8008082 <HAL_TIM_Base_Start+0xc2>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800805c:	d011      	beq.n	8008082 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f042 0201 	orr.w	r2, r2, #1
 800806c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800806e:	e008      	b.n	8008082 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f042 0201 	orr.w	r2, r2, #1
 800807e:	601a      	str	r2, [r3, #0]
 8008080:	e000      	b.n	8008084 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008082:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3714      	adds	r7, #20
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	40010000 	.word	0x40010000
 8008098:	40000400 	.word	0x40000400
 800809c:	40000800 	.word	0x40000800
 80080a0:	40000c00 	.word	0x40000c00
 80080a4:	40010400 	.word	0x40010400
 80080a8:	40001800 	.word	0x40001800
 80080ac:	40014000 	.word	0x40014000
 80080b0:	4000e000 	.word	0x4000e000
 80080b4:	4000e400 	.word	0x4000e400
 80080b8:	00010007 	.word	0x00010007

080080bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80080bc:	b480      	push	{r7}
 80080be:	b085      	sub	sp, #20
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4a44      	ldr	r2, [pc, #272]	; (80081e0 <TIM_Base_SetConfig+0x124>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d013      	beq.n	80080fc <TIM_Base_SetConfig+0x40>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080da:	d00f      	beq.n	80080fc <TIM_Base_SetConfig+0x40>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4a41      	ldr	r2, [pc, #260]	; (80081e4 <TIM_Base_SetConfig+0x128>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d00b      	beq.n	80080fc <TIM_Base_SetConfig+0x40>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4a40      	ldr	r2, [pc, #256]	; (80081e8 <TIM_Base_SetConfig+0x12c>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d007      	beq.n	80080fc <TIM_Base_SetConfig+0x40>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4a3f      	ldr	r2, [pc, #252]	; (80081ec <TIM_Base_SetConfig+0x130>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d003      	beq.n	80080fc <TIM_Base_SetConfig+0x40>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4a3e      	ldr	r2, [pc, #248]	; (80081f0 <TIM_Base_SetConfig+0x134>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d108      	bne.n	800810e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	4313      	orrs	r3, r2
 800810c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a33      	ldr	r2, [pc, #204]	; (80081e0 <TIM_Base_SetConfig+0x124>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d027      	beq.n	8008166 <TIM_Base_SetConfig+0xaa>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800811c:	d023      	beq.n	8008166 <TIM_Base_SetConfig+0xaa>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a30      	ldr	r2, [pc, #192]	; (80081e4 <TIM_Base_SetConfig+0x128>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d01f      	beq.n	8008166 <TIM_Base_SetConfig+0xaa>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a2f      	ldr	r2, [pc, #188]	; (80081e8 <TIM_Base_SetConfig+0x12c>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d01b      	beq.n	8008166 <TIM_Base_SetConfig+0xaa>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a2e      	ldr	r2, [pc, #184]	; (80081ec <TIM_Base_SetConfig+0x130>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d017      	beq.n	8008166 <TIM_Base_SetConfig+0xaa>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4a2d      	ldr	r2, [pc, #180]	; (80081f0 <TIM_Base_SetConfig+0x134>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d013      	beq.n	8008166 <TIM_Base_SetConfig+0xaa>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a2c      	ldr	r2, [pc, #176]	; (80081f4 <TIM_Base_SetConfig+0x138>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d00f      	beq.n	8008166 <TIM_Base_SetConfig+0xaa>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a2b      	ldr	r2, [pc, #172]	; (80081f8 <TIM_Base_SetConfig+0x13c>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d00b      	beq.n	8008166 <TIM_Base_SetConfig+0xaa>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4a2a      	ldr	r2, [pc, #168]	; (80081fc <TIM_Base_SetConfig+0x140>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d007      	beq.n	8008166 <TIM_Base_SetConfig+0xaa>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4a29      	ldr	r2, [pc, #164]	; (8008200 <TIM_Base_SetConfig+0x144>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d003      	beq.n	8008166 <TIM_Base_SetConfig+0xaa>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a28      	ldr	r2, [pc, #160]	; (8008204 <TIM_Base_SetConfig+0x148>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d108      	bne.n	8008178 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800816c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	4313      	orrs	r3, r2
 8008176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	695b      	ldr	r3, [r3, #20]
 8008182:	4313      	orrs	r3, r2
 8008184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	68fa      	ldr	r2, [r7, #12]
 800818a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	689a      	ldr	r2, [r3, #8]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4a10      	ldr	r2, [pc, #64]	; (80081e0 <TIM_Base_SetConfig+0x124>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d00f      	beq.n	80081c4 <TIM_Base_SetConfig+0x108>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a12      	ldr	r2, [pc, #72]	; (80081f0 <TIM_Base_SetConfig+0x134>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d00b      	beq.n	80081c4 <TIM_Base_SetConfig+0x108>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4a11      	ldr	r2, [pc, #68]	; (80081f4 <TIM_Base_SetConfig+0x138>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d007      	beq.n	80081c4 <TIM_Base_SetConfig+0x108>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	4a10      	ldr	r2, [pc, #64]	; (80081f8 <TIM_Base_SetConfig+0x13c>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d003      	beq.n	80081c4 <TIM_Base_SetConfig+0x108>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4a0f      	ldr	r2, [pc, #60]	; (80081fc <TIM_Base_SetConfig+0x140>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d103      	bne.n	80081cc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	691a      	ldr	r2, [r3, #16]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	615a      	str	r2, [r3, #20]
}
 80081d2:	bf00      	nop
 80081d4:	3714      	adds	r7, #20
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	40010000 	.word	0x40010000
 80081e4:	40000400 	.word	0x40000400
 80081e8:	40000800 	.word	0x40000800
 80081ec:	40000c00 	.word	0x40000c00
 80081f0:	40010400 	.word	0x40010400
 80081f4:	40014000 	.word	0x40014000
 80081f8:	40014400 	.word	0x40014400
 80081fc:	40014800 	.word	0x40014800
 8008200:	4000e000 	.word	0x4000e000
 8008204:	4000e400 	.word	0x4000e400

08008208 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008218:	2b01      	cmp	r3, #1
 800821a:	d101      	bne.n	8008220 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800821c:	2302      	movs	r3, #2
 800821e:	e077      	b.n	8008310 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2202      	movs	r2, #2
 800822c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a35      	ldr	r2, [pc, #212]	; (800831c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d004      	beq.n	8008254 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a34      	ldr	r2, [pc, #208]	; (8008320 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d108      	bne.n	8008266 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800825a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	68fa      	ldr	r2, [r7, #12]
 8008262:	4313      	orrs	r3, r2
 8008264:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800826c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	4313      	orrs	r3, r2
 8008276:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68fa      	ldr	r2, [r7, #12]
 800827e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a25      	ldr	r2, [pc, #148]	; (800831c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d02c      	beq.n	80082e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008292:	d027      	beq.n	80082e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a22      	ldr	r2, [pc, #136]	; (8008324 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d022      	beq.n	80082e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a21      	ldr	r2, [pc, #132]	; (8008328 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d01d      	beq.n	80082e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a1f      	ldr	r2, [pc, #124]	; (800832c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d018      	beq.n	80082e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a1a      	ldr	r2, [pc, #104]	; (8008320 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d013      	beq.n	80082e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a1b      	ldr	r2, [pc, #108]	; (8008330 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d00e      	beq.n	80082e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a1a      	ldr	r2, [pc, #104]	; (8008334 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d009      	beq.n	80082e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a18      	ldr	r2, [pc, #96]	; (8008338 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d004      	beq.n	80082e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a17      	ldr	r2, [pc, #92]	; (800833c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d10c      	bne.n	80082fe <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	68ba      	ldr	r2, [r7, #8]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2201      	movs	r2, #1
 8008302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3714      	adds	r7, #20
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr
 800831c:	40010000 	.word	0x40010000
 8008320:	40010400 	.word	0x40010400
 8008324:	40000400 	.word	0x40000400
 8008328:	40000800 	.word	0x40000800
 800832c:	40000c00 	.word	0x40000c00
 8008330:	40001800 	.word	0x40001800
 8008334:	40014000 	.word	0x40014000
 8008338:	4000e000 	.word	0x4000e000
 800833c:	4000e400 	.word	0x4000e400

08008340 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d101      	bne.n	8008352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	e042      	b.n	80083d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008358:	2b00      	cmp	r3, #0
 800835a:	d106      	bne.n	800836a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f7f9 fad1 	bl	800190c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2224      	movs	r2, #36	; 0x24
 800836e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f022 0201 	bic.w	r2, r2, #1
 8008380:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 f8c2 	bl	800850c <UART_SetConfig>
 8008388:	4603      	mov	r3, r0
 800838a:	2b01      	cmp	r3, #1
 800838c:	d101      	bne.n	8008392 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	e022      	b.n	80083d8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008396:	2b00      	cmp	r3, #0
 8008398:	d002      	beq.n	80083a0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 ff14 	bl	80091c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	685a      	ldr	r2, [r3, #4]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80083ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	689a      	ldr	r2, [r3, #8]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80083be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f042 0201 	orr.w	r2, r2, #1
 80083ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 ff9b 	bl	800930c <UART_CheckIdleState>
 80083d6:	4603      	mov	r3, r0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3708      	adds	r7, #8
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b08a      	sub	sp, #40	; 0x28
 80083e4:	af02      	add	r7, sp, #8
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	603b      	str	r3, [r7, #0]
 80083ec:	4613      	mov	r3, r2
 80083ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083f6:	2b20      	cmp	r3, #32
 80083f8:	f040 8083 	bne.w	8008502 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d002      	beq.n	8008408 <HAL_UART_Transmit+0x28>
 8008402:	88fb      	ldrh	r3, [r7, #6]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d101      	bne.n	800840c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	e07b      	b.n	8008504 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008412:	2b01      	cmp	r3, #1
 8008414:	d101      	bne.n	800841a <HAL_UART_Transmit+0x3a>
 8008416:	2302      	movs	r3, #2
 8008418:	e074      	b.n	8008504 <HAL_UART_Transmit+0x124>
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2201      	movs	r2, #1
 800841e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2200      	movs	r2, #0
 8008426:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2221      	movs	r2, #33	; 0x21
 800842e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008432:	f7fa f8c5 	bl	80025c0 <HAL_GetTick>
 8008436:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	88fa      	ldrh	r2, [r7, #6]
 800843c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	88fa      	ldrh	r2, [r7, #6]
 8008444:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008450:	d108      	bne.n	8008464 <HAL_UART_Transmit+0x84>
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	691b      	ldr	r3, [r3, #16]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d104      	bne.n	8008464 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800845a:	2300      	movs	r3, #0
 800845c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	61bb      	str	r3, [r7, #24]
 8008462:	e003      	b.n	800846c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008468:	2300      	movs	r3, #0
 800846a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2200      	movs	r2, #0
 8008470:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008474:	e02c      	b.n	80084d0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	9300      	str	r3, [sp, #0]
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	2200      	movs	r2, #0
 800847e:	2180      	movs	r1, #128	; 0x80
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f000 ff8e 	bl	80093a2 <UART_WaitOnFlagUntilTimeout>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d001      	beq.n	8008490 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800848c:	2303      	movs	r3, #3
 800848e:	e039      	b.n	8008504 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d10b      	bne.n	80084ae <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	881b      	ldrh	r3, [r3, #0]
 800849a:	461a      	mov	r2, r3
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	3302      	adds	r3, #2
 80084aa:	61bb      	str	r3, [r7, #24]
 80084ac:	e007      	b.n	80084be <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	781a      	ldrb	r2, [r3, #0]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	3301      	adds	r3, #1
 80084bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	3b01      	subs	r3, #1
 80084c8:	b29a      	uxth	r2, r3
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d1cc      	bne.n	8008476 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	9300      	str	r3, [sp, #0]
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	2200      	movs	r2, #0
 80084e4:	2140      	movs	r1, #64	; 0x40
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f000 ff5b 	bl	80093a2 <UART_WaitOnFlagUntilTimeout>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d001      	beq.n	80084f6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80084f2:	2303      	movs	r3, #3
 80084f4:	e006      	b.n	8008504 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2220      	movs	r2, #32
 80084fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80084fe:	2300      	movs	r3, #0
 8008500:	e000      	b.n	8008504 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008502:	2302      	movs	r3, #2
  }
}
 8008504:	4618      	mov	r0, r3
 8008506:	3720      	adds	r7, #32
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800850c:	b5b0      	push	{r4, r5, r7, lr}
 800850e:	b08e      	sub	sp, #56	; 0x38
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008514:	2300      	movs	r3, #0
 8008516:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	689a      	ldr	r2, [r3, #8]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	431a      	orrs	r2, r3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	695b      	ldr	r3, [r3, #20]
 8008528:	431a      	orrs	r2, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	69db      	ldr	r3, [r3, #28]
 800852e:	4313      	orrs	r3, r2
 8008530:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	4bbf      	ldr	r3, [pc, #764]	; (8008838 <UART_SetConfig+0x32c>)
 800853a:	4013      	ands	r3, r2
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	6812      	ldr	r2, [r2, #0]
 8008540:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008542:	430b      	orrs	r3, r1
 8008544:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	68da      	ldr	r2, [r3, #12]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	430a      	orrs	r2, r1
 800855a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	699b      	ldr	r3, [r3, #24]
 8008560:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4ab5      	ldr	r2, [pc, #724]	; (800883c <UART_SetConfig+0x330>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d004      	beq.n	8008576 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6a1b      	ldr	r3, [r3, #32]
 8008570:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008572:	4313      	orrs	r3, r2
 8008574:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	689a      	ldr	r2, [r3, #8]
 800857c:	4bb0      	ldr	r3, [pc, #704]	; (8008840 <UART_SetConfig+0x334>)
 800857e:	4013      	ands	r3, r2
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	6812      	ldr	r2, [r2, #0]
 8008584:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008586:	430b      	orrs	r3, r1
 8008588:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008590:	f023 010f 	bic.w	r1, r3, #15
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	430a      	orrs	r2, r1
 800859e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4aa7      	ldr	r2, [pc, #668]	; (8008844 <UART_SetConfig+0x338>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d176      	bne.n	8008698 <UART_SetConfig+0x18c>
 80085aa:	4ba7      	ldr	r3, [pc, #668]	; (8008848 <UART_SetConfig+0x33c>)
 80085ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085b2:	2b28      	cmp	r3, #40	; 0x28
 80085b4:	d86c      	bhi.n	8008690 <UART_SetConfig+0x184>
 80085b6:	a201      	add	r2, pc, #4	; (adr r2, 80085bc <UART_SetConfig+0xb0>)
 80085b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085bc:	08008661 	.word	0x08008661
 80085c0:	08008691 	.word	0x08008691
 80085c4:	08008691 	.word	0x08008691
 80085c8:	08008691 	.word	0x08008691
 80085cc:	08008691 	.word	0x08008691
 80085d0:	08008691 	.word	0x08008691
 80085d4:	08008691 	.word	0x08008691
 80085d8:	08008691 	.word	0x08008691
 80085dc:	08008669 	.word	0x08008669
 80085e0:	08008691 	.word	0x08008691
 80085e4:	08008691 	.word	0x08008691
 80085e8:	08008691 	.word	0x08008691
 80085ec:	08008691 	.word	0x08008691
 80085f0:	08008691 	.word	0x08008691
 80085f4:	08008691 	.word	0x08008691
 80085f8:	08008691 	.word	0x08008691
 80085fc:	08008671 	.word	0x08008671
 8008600:	08008691 	.word	0x08008691
 8008604:	08008691 	.word	0x08008691
 8008608:	08008691 	.word	0x08008691
 800860c:	08008691 	.word	0x08008691
 8008610:	08008691 	.word	0x08008691
 8008614:	08008691 	.word	0x08008691
 8008618:	08008691 	.word	0x08008691
 800861c:	08008679 	.word	0x08008679
 8008620:	08008691 	.word	0x08008691
 8008624:	08008691 	.word	0x08008691
 8008628:	08008691 	.word	0x08008691
 800862c:	08008691 	.word	0x08008691
 8008630:	08008691 	.word	0x08008691
 8008634:	08008691 	.word	0x08008691
 8008638:	08008691 	.word	0x08008691
 800863c:	08008681 	.word	0x08008681
 8008640:	08008691 	.word	0x08008691
 8008644:	08008691 	.word	0x08008691
 8008648:	08008691 	.word	0x08008691
 800864c:	08008691 	.word	0x08008691
 8008650:	08008691 	.word	0x08008691
 8008654:	08008691 	.word	0x08008691
 8008658:	08008691 	.word	0x08008691
 800865c:	08008689 	.word	0x08008689
 8008660:	2301      	movs	r3, #1
 8008662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008666:	e326      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008668:	2304      	movs	r3, #4
 800866a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800866e:	e322      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008670:	2308      	movs	r3, #8
 8008672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008676:	e31e      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008678:	2310      	movs	r3, #16
 800867a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800867e:	e31a      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008680:	2320      	movs	r3, #32
 8008682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008686:	e316      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008688:	2340      	movs	r3, #64	; 0x40
 800868a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800868e:	e312      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008690:	2380      	movs	r3, #128	; 0x80
 8008692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008696:	e30e      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a6b      	ldr	r2, [pc, #428]	; (800884c <UART_SetConfig+0x340>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d130      	bne.n	8008704 <UART_SetConfig+0x1f8>
 80086a2:	4b69      	ldr	r3, [pc, #420]	; (8008848 <UART_SetConfig+0x33c>)
 80086a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086a6:	f003 0307 	and.w	r3, r3, #7
 80086aa:	2b05      	cmp	r3, #5
 80086ac:	d826      	bhi.n	80086fc <UART_SetConfig+0x1f0>
 80086ae:	a201      	add	r2, pc, #4	; (adr r2, 80086b4 <UART_SetConfig+0x1a8>)
 80086b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b4:	080086cd 	.word	0x080086cd
 80086b8:	080086d5 	.word	0x080086d5
 80086bc:	080086dd 	.word	0x080086dd
 80086c0:	080086e5 	.word	0x080086e5
 80086c4:	080086ed 	.word	0x080086ed
 80086c8:	080086f5 	.word	0x080086f5
 80086cc:	2300      	movs	r3, #0
 80086ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086d2:	e2f0      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 80086d4:	2304      	movs	r3, #4
 80086d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086da:	e2ec      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 80086dc:	2308      	movs	r3, #8
 80086de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086e2:	e2e8      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 80086e4:	2310      	movs	r3, #16
 80086e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086ea:	e2e4      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 80086ec:	2320      	movs	r3, #32
 80086ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086f2:	e2e0      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 80086f4:	2340      	movs	r3, #64	; 0x40
 80086f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086fa:	e2dc      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 80086fc:	2380      	movs	r3, #128	; 0x80
 80086fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008702:	e2d8      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a51      	ldr	r2, [pc, #324]	; (8008850 <UART_SetConfig+0x344>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d130      	bne.n	8008770 <UART_SetConfig+0x264>
 800870e:	4b4e      	ldr	r3, [pc, #312]	; (8008848 <UART_SetConfig+0x33c>)
 8008710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008712:	f003 0307 	and.w	r3, r3, #7
 8008716:	2b05      	cmp	r3, #5
 8008718:	d826      	bhi.n	8008768 <UART_SetConfig+0x25c>
 800871a:	a201      	add	r2, pc, #4	; (adr r2, 8008720 <UART_SetConfig+0x214>)
 800871c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008720:	08008739 	.word	0x08008739
 8008724:	08008741 	.word	0x08008741
 8008728:	08008749 	.word	0x08008749
 800872c:	08008751 	.word	0x08008751
 8008730:	08008759 	.word	0x08008759
 8008734:	08008761 	.word	0x08008761
 8008738:	2300      	movs	r3, #0
 800873a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800873e:	e2ba      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008740:	2304      	movs	r3, #4
 8008742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008746:	e2b6      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008748:	2308      	movs	r3, #8
 800874a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800874e:	e2b2      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008750:	2310      	movs	r3, #16
 8008752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008756:	e2ae      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008758:	2320      	movs	r3, #32
 800875a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800875e:	e2aa      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008760:	2340      	movs	r3, #64	; 0x40
 8008762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008766:	e2a6      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008768:	2380      	movs	r3, #128	; 0x80
 800876a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800876e:	e2a2      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a37      	ldr	r2, [pc, #220]	; (8008854 <UART_SetConfig+0x348>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d130      	bne.n	80087dc <UART_SetConfig+0x2d0>
 800877a:	4b33      	ldr	r3, [pc, #204]	; (8008848 <UART_SetConfig+0x33c>)
 800877c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800877e:	f003 0307 	and.w	r3, r3, #7
 8008782:	2b05      	cmp	r3, #5
 8008784:	d826      	bhi.n	80087d4 <UART_SetConfig+0x2c8>
 8008786:	a201      	add	r2, pc, #4	; (adr r2, 800878c <UART_SetConfig+0x280>)
 8008788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878c:	080087a5 	.word	0x080087a5
 8008790:	080087ad 	.word	0x080087ad
 8008794:	080087b5 	.word	0x080087b5
 8008798:	080087bd 	.word	0x080087bd
 800879c:	080087c5 	.word	0x080087c5
 80087a0:	080087cd 	.word	0x080087cd
 80087a4:	2300      	movs	r3, #0
 80087a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087aa:	e284      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 80087ac:	2304      	movs	r3, #4
 80087ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087b2:	e280      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 80087b4:	2308      	movs	r3, #8
 80087b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087ba:	e27c      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 80087bc:	2310      	movs	r3, #16
 80087be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087c2:	e278      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 80087c4:	2320      	movs	r3, #32
 80087c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087ca:	e274      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 80087cc:	2340      	movs	r3, #64	; 0x40
 80087ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087d2:	e270      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 80087d4:	2380      	movs	r3, #128	; 0x80
 80087d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087da:	e26c      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a1d      	ldr	r2, [pc, #116]	; (8008858 <UART_SetConfig+0x34c>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d142      	bne.n	800886c <UART_SetConfig+0x360>
 80087e6:	4b18      	ldr	r3, [pc, #96]	; (8008848 <UART_SetConfig+0x33c>)
 80087e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ea:	f003 0307 	and.w	r3, r3, #7
 80087ee:	2b05      	cmp	r3, #5
 80087f0:	d838      	bhi.n	8008864 <UART_SetConfig+0x358>
 80087f2:	a201      	add	r2, pc, #4	; (adr r2, 80087f8 <UART_SetConfig+0x2ec>)
 80087f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f8:	08008811 	.word	0x08008811
 80087fc:	08008819 	.word	0x08008819
 8008800:	08008821 	.word	0x08008821
 8008804:	08008829 	.word	0x08008829
 8008808:	08008831 	.word	0x08008831
 800880c:	0800885d 	.word	0x0800885d
 8008810:	2300      	movs	r3, #0
 8008812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008816:	e24e      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008818:	2304      	movs	r3, #4
 800881a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800881e:	e24a      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008820:	2308      	movs	r3, #8
 8008822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008826:	e246      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008828:	2310      	movs	r3, #16
 800882a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800882e:	e242      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008830:	2320      	movs	r3, #32
 8008832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008836:	e23e      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008838:	cfff69f3 	.word	0xcfff69f3
 800883c:	58000c00 	.word	0x58000c00
 8008840:	11fff4ff 	.word	0x11fff4ff
 8008844:	40011000 	.word	0x40011000
 8008848:	58024400 	.word	0x58024400
 800884c:	40004400 	.word	0x40004400
 8008850:	40004800 	.word	0x40004800
 8008854:	40004c00 	.word	0x40004c00
 8008858:	40005000 	.word	0x40005000
 800885c:	2340      	movs	r3, #64	; 0x40
 800885e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008862:	e228      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008864:	2380      	movs	r3, #128	; 0x80
 8008866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800886a:	e224      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4ab1      	ldr	r2, [pc, #708]	; (8008b38 <UART_SetConfig+0x62c>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d176      	bne.n	8008964 <UART_SetConfig+0x458>
 8008876:	4bb1      	ldr	r3, [pc, #708]	; (8008b3c <UART_SetConfig+0x630>)
 8008878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800887a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800887e:	2b28      	cmp	r3, #40	; 0x28
 8008880:	d86c      	bhi.n	800895c <UART_SetConfig+0x450>
 8008882:	a201      	add	r2, pc, #4	; (adr r2, 8008888 <UART_SetConfig+0x37c>)
 8008884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008888:	0800892d 	.word	0x0800892d
 800888c:	0800895d 	.word	0x0800895d
 8008890:	0800895d 	.word	0x0800895d
 8008894:	0800895d 	.word	0x0800895d
 8008898:	0800895d 	.word	0x0800895d
 800889c:	0800895d 	.word	0x0800895d
 80088a0:	0800895d 	.word	0x0800895d
 80088a4:	0800895d 	.word	0x0800895d
 80088a8:	08008935 	.word	0x08008935
 80088ac:	0800895d 	.word	0x0800895d
 80088b0:	0800895d 	.word	0x0800895d
 80088b4:	0800895d 	.word	0x0800895d
 80088b8:	0800895d 	.word	0x0800895d
 80088bc:	0800895d 	.word	0x0800895d
 80088c0:	0800895d 	.word	0x0800895d
 80088c4:	0800895d 	.word	0x0800895d
 80088c8:	0800893d 	.word	0x0800893d
 80088cc:	0800895d 	.word	0x0800895d
 80088d0:	0800895d 	.word	0x0800895d
 80088d4:	0800895d 	.word	0x0800895d
 80088d8:	0800895d 	.word	0x0800895d
 80088dc:	0800895d 	.word	0x0800895d
 80088e0:	0800895d 	.word	0x0800895d
 80088e4:	0800895d 	.word	0x0800895d
 80088e8:	08008945 	.word	0x08008945
 80088ec:	0800895d 	.word	0x0800895d
 80088f0:	0800895d 	.word	0x0800895d
 80088f4:	0800895d 	.word	0x0800895d
 80088f8:	0800895d 	.word	0x0800895d
 80088fc:	0800895d 	.word	0x0800895d
 8008900:	0800895d 	.word	0x0800895d
 8008904:	0800895d 	.word	0x0800895d
 8008908:	0800894d 	.word	0x0800894d
 800890c:	0800895d 	.word	0x0800895d
 8008910:	0800895d 	.word	0x0800895d
 8008914:	0800895d 	.word	0x0800895d
 8008918:	0800895d 	.word	0x0800895d
 800891c:	0800895d 	.word	0x0800895d
 8008920:	0800895d 	.word	0x0800895d
 8008924:	0800895d 	.word	0x0800895d
 8008928:	08008955 	.word	0x08008955
 800892c:	2301      	movs	r3, #1
 800892e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008932:	e1c0      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008934:	2304      	movs	r3, #4
 8008936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800893a:	e1bc      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 800893c:	2308      	movs	r3, #8
 800893e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008942:	e1b8      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008944:	2310      	movs	r3, #16
 8008946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800894a:	e1b4      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 800894c:	2320      	movs	r3, #32
 800894e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008952:	e1b0      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008954:	2340      	movs	r3, #64	; 0x40
 8008956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800895a:	e1ac      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 800895c:	2380      	movs	r3, #128	; 0x80
 800895e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008962:	e1a8      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a75      	ldr	r2, [pc, #468]	; (8008b40 <UART_SetConfig+0x634>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d130      	bne.n	80089d0 <UART_SetConfig+0x4c4>
 800896e:	4b73      	ldr	r3, [pc, #460]	; (8008b3c <UART_SetConfig+0x630>)
 8008970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008972:	f003 0307 	and.w	r3, r3, #7
 8008976:	2b05      	cmp	r3, #5
 8008978:	d826      	bhi.n	80089c8 <UART_SetConfig+0x4bc>
 800897a:	a201      	add	r2, pc, #4	; (adr r2, 8008980 <UART_SetConfig+0x474>)
 800897c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008980:	08008999 	.word	0x08008999
 8008984:	080089a1 	.word	0x080089a1
 8008988:	080089a9 	.word	0x080089a9
 800898c:	080089b1 	.word	0x080089b1
 8008990:	080089b9 	.word	0x080089b9
 8008994:	080089c1 	.word	0x080089c1
 8008998:	2300      	movs	r3, #0
 800899a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800899e:	e18a      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 80089a0:	2304      	movs	r3, #4
 80089a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089a6:	e186      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 80089a8:	2308      	movs	r3, #8
 80089aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089ae:	e182      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 80089b0:	2310      	movs	r3, #16
 80089b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089b6:	e17e      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 80089b8:	2320      	movs	r3, #32
 80089ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089be:	e17a      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 80089c0:	2340      	movs	r3, #64	; 0x40
 80089c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089c6:	e176      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 80089c8:	2380      	movs	r3, #128	; 0x80
 80089ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089ce:	e172      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a5b      	ldr	r2, [pc, #364]	; (8008b44 <UART_SetConfig+0x638>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d130      	bne.n	8008a3c <UART_SetConfig+0x530>
 80089da:	4b58      	ldr	r3, [pc, #352]	; (8008b3c <UART_SetConfig+0x630>)
 80089dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089de:	f003 0307 	and.w	r3, r3, #7
 80089e2:	2b05      	cmp	r3, #5
 80089e4:	d826      	bhi.n	8008a34 <UART_SetConfig+0x528>
 80089e6:	a201      	add	r2, pc, #4	; (adr r2, 80089ec <UART_SetConfig+0x4e0>)
 80089e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ec:	08008a05 	.word	0x08008a05
 80089f0:	08008a0d 	.word	0x08008a0d
 80089f4:	08008a15 	.word	0x08008a15
 80089f8:	08008a1d 	.word	0x08008a1d
 80089fc:	08008a25 	.word	0x08008a25
 8008a00:	08008a2d 	.word	0x08008a2d
 8008a04:	2300      	movs	r3, #0
 8008a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a0a:	e154      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008a0c:	2304      	movs	r3, #4
 8008a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a12:	e150      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008a14:	2308      	movs	r3, #8
 8008a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a1a:	e14c      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008a1c:	2310      	movs	r3, #16
 8008a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a22:	e148      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008a24:	2320      	movs	r3, #32
 8008a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a2a:	e144      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008a2c:	2340      	movs	r3, #64	; 0x40
 8008a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a32:	e140      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008a34:	2380      	movs	r3, #128	; 0x80
 8008a36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a3a:	e13c      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a41      	ldr	r2, [pc, #260]	; (8008b48 <UART_SetConfig+0x63c>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	f040 8082 	bne.w	8008b4c <UART_SetConfig+0x640>
 8008a48:	4b3c      	ldr	r3, [pc, #240]	; (8008b3c <UART_SetConfig+0x630>)
 8008a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a50:	2b28      	cmp	r3, #40	; 0x28
 8008a52:	d86d      	bhi.n	8008b30 <UART_SetConfig+0x624>
 8008a54:	a201      	add	r2, pc, #4	; (adr r2, 8008a5c <UART_SetConfig+0x550>)
 8008a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a5a:	bf00      	nop
 8008a5c:	08008b01 	.word	0x08008b01
 8008a60:	08008b31 	.word	0x08008b31
 8008a64:	08008b31 	.word	0x08008b31
 8008a68:	08008b31 	.word	0x08008b31
 8008a6c:	08008b31 	.word	0x08008b31
 8008a70:	08008b31 	.word	0x08008b31
 8008a74:	08008b31 	.word	0x08008b31
 8008a78:	08008b31 	.word	0x08008b31
 8008a7c:	08008b09 	.word	0x08008b09
 8008a80:	08008b31 	.word	0x08008b31
 8008a84:	08008b31 	.word	0x08008b31
 8008a88:	08008b31 	.word	0x08008b31
 8008a8c:	08008b31 	.word	0x08008b31
 8008a90:	08008b31 	.word	0x08008b31
 8008a94:	08008b31 	.word	0x08008b31
 8008a98:	08008b31 	.word	0x08008b31
 8008a9c:	08008b11 	.word	0x08008b11
 8008aa0:	08008b31 	.word	0x08008b31
 8008aa4:	08008b31 	.word	0x08008b31
 8008aa8:	08008b31 	.word	0x08008b31
 8008aac:	08008b31 	.word	0x08008b31
 8008ab0:	08008b31 	.word	0x08008b31
 8008ab4:	08008b31 	.word	0x08008b31
 8008ab8:	08008b31 	.word	0x08008b31
 8008abc:	08008b19 	.word	0x08008b19
 8008ac0:	08008b31 	.word	0x08008b31
 8008ac4:	08008b31 	.word	0x08008b31
 8008ac8:	08008b31 	.word	0x08008b31
 8008acc:	08008b31 	.word	0x08008b31
 8008ad0:	08008b31 	.word	0x08008b31
 8008ad4:	08008b31 	.word	0x08008b31
 8008ad8:	08008b31 	.word	0x08008b31
 8008adc:	08008b21 	.word	0x08008b21
 8008ae0:	08008b31 	.word	0x08008b31
 8008ae4:	08008b31 	.word	0x08008b31
 8008ae8:	08008b31 	.word	0x08008b31
 8008aec:	08008b31 	.word	0x08008b31
 8008af0:	08008b31 	.word	0x08008b31
 8008af4:	08008b31 	.word	0x08008b31
 8008af8:	08008b31 	.word	0x08008b31
 8008afc:	08008b29 	.word	0x08008b29
 8008b00:	2301      	movs	r3, #1
 8008b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b06:	e0d6      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008b08:	2304      	movs	r3, #4
 8008b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b0e:	e0d2      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008b10:	2308      	movs	r3, #8
 8008b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b16:	e0ce      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008b18:	2310      	movs	r3, #16
 8008b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b1e:	e0ca      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008b20:	2320      	movs	r3, #32
 8008b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b26:	e0c6      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008b28:	2340      	movs	r3, #64	; 0x40
 8008b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b2e:	e0c2      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008b30:	2380      	movs	r3, #128	; 0x80
 8008b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b36:	e0be      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008b38:	40011400 	.word	0x40011400
 8008b3c:	58024400 	.word	0x58024400
 8008b40:	40007800 	.word	0x40007800
 8008b44:	40007c00 	.word	0x40007c00
 8008b48:	40011800 	.word	0x40011800
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4aad      	ldr	r2, [pc, #692]	; (8008e08 <UART_SetConfig+0x8fc>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d176      	bne.n	8008c44 <UART_SetConfig+0x738>
 8008b56:	4bad      	ldr	r3, [pc, #692]	; (8008e0c <UART_SetConfig+0x900>)
 8008b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b5e:	2b28      	cmp	r3, #40	; 0x28
 8008b60:	d86c      	bhi.n	8008c3c <UART_SetConfig+0x730>
 8008b62:	a201      	add	r2, pc, #4	; (adr r2, 8008b68 <UART_SetConfig+0x65c>)
 8008b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b68:	08008c0d 	.word	0x08008c0d
 8008b6c:	08008c3d 	.word	0x08008c3d
 8008b70:	08008c3d 	.word	0x08008c3d
 8008b74:	08008c3d 	.word	0x08008c3d
 8008b78:	08008c3d 	.word	0x08008c3d
 8008b7c:	08008c3d 	.word	0x08008c3d
 8008b80:	08008c3d 	.word	0x08008c3d
 8008b84:	08008c3d 	.word	0x08008c3d
 8008b88:	08008c15 	.word	0x08008c15
 8008b8c:	08008c3d 	.word	0x08008c3d
 8008b90:	08008c3d 	.word	0x08008c3d
 8008b94:	08008c3d 	.word	0x08008c3d
 8008b98:	08008c3d 	.word	0x08008c3d
 8008b9c:	08008c3d 	.word	0x08008c3d
 8008ba0:	08008c3d 	.word	0x08008c3d
 8008ba4:	08008c3d 	.word	0x08008c3d
 8008ba8:	08008c1d 	.word	0x08008c1d
 8008bac:	08008c3d 	.word	0x08008c3d
 8008bb0:	08008c3d 	.word	0x08008c3d
 8008bb4:	08008c3d 	.word	0x08008c3d
 8008bb8:	08008c3d 	.word	0x08008c3d
 8008bbc:	08008c3d 	.word	0x08008c3d
 8008bc0:	08008c3d 	.word	0x08008c3d
 8008bc4:	08008c3d 	.word	0x08008c3d
 8008bc8:	08008c25 	.word	0x08008c25
 8008bcc:	08008c3d 	.word	0x08008c3d
 8008bd0:	08008c3d 	.word	0x08008c3d
 8008bd4:	08008c3d 	.word	0x08008c3d
 8008bd8:	08008c3d 	.word	0x08008c3d
 8008bdc:	08008c3d 	.word	0x08008c3d
 8008be0:	08008c3d 	.word	0x08008c3d
 8008be4:	08008c3d 	.word	0x08008c3d
 8008be8:	08008c2d 	.word	0x08008c2d
 8008bec:	08008c3d 	.word	0x08008c3d
 8008bf0:	08008c3d 	.word	0x08008c3d
 8008bf4:	08008c3d 	.word	0x08008c3d
 8008bf8:	08008c3d 	.word	0x08008c3d
 8008bfc:	08008c3d 	.word	0x08008c3d
 8008c00:	08008c3d 	.word	0x08008c3d
 8008c04:	08008c3d 	.word	0x08008c3d
 8008c08:	08008c35 	.word	0x08008c35
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c12:	e050      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008c14:	2304      	movs	r3, #4
 8008c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c1a:	e04c      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008c1c:	2308      	movs	r3, #8
 8008c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c22:	e048      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008c24:	2310      	movs	r3, #16
 8008c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c2a:	e044      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008c2c:	2320      	movs	r3, #32
 8008c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c32:	e040      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008c34:	2340      	movs	r3, #64	; 0x40
 8008c36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c3a:	e03c      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008c3c:	2380      	movs	r3, #128	; 0x80
 8008c3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c42:	e038      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a71      	ldr	r2, [pc, #452]	; (8008e10 <UART_SetConfig+0x904>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d130      	bne.n	8008cb0 <UART_SetConfig+0x7a4>
 8008c4e:	4b6f      	ldr	r3, [pc, #444]	; (8008e0c <UART_SetConfig+0x900>)
 8008c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c52:	f003 0307 	and.w	r3, r3, #7
 8008c56:	2b05      	cmp	r3, #5
 8008c58:	d826      	bhi.n	8008ca8 <UART_SetConfig+0x79c>
 8008c5a:	a201      	add	r2, pc, #4	; (adr r2, 8008c60 <UART_SetConfig+0x754>)
 8008c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c60:	08008c79 	.word	0x08008c79
 8008c64:	08008c81 	.word	0x08008c81
 8008c68:	08008c89 	.word	0x08008c89
 8008c6c:	08008c91 	.word	0x08008c91
 8008c70:	08008c99 	.word	0x08008c99
 8008c74:	08008ca1 	.word	0x08008ca1
 8008c78:	2302      	movs	r3, #2
 8008c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c7e:	e01a      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008c80:	2304      	movs	r3, #4
 8008c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c86:	e016      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008c88:	2308      	movs	r3, #8
 8008c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c8e:	e012      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008c90:	2310      	movs	r3, #16
 8008c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c96:	e00e      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008c98:	2320      	movs	r3, #32
 8008c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c9e:	e00a      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008ca0:	2340      	movs	r3, #64	; 0x40
 8008ca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ca6:	e006      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008ca8:	2380      	movs	r3, #128	; 0x80
 8008caa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cae:	e002      	b.n	8008cb6 <UART_SetConfig+0x7aa>
 8008cb0:	2380      	movs	r3, #128	; 0x80
 8008cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a55      	ldr	r2, [pc, #340]	; (8008e10 <UART_SetConfig+0x904>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	f040 80f0 	bne.w	8008ea2 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008cc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008cc6:	2b20      	cmp	r3, #32
 8008cc8:	dc46      	bgt.n	8008d58 <UART_SetConfig+0x84c>
 8008cca:	2b02      	cmp	r3, #2
 8008ccc:	db75      	blt.n	8008dba <UART_SetConfig+0x8ae>
 8008cce:	3b02      	subs	r3, #2
 8008cd0:	2b1e      	cmp	r3, #30
 8008cd2:	d872      	bhi.n	8008dba <UART_SetConfig+0x8ae>
 8008cd4:	a201      	add	r2, pc, #4	; (adr r2, 8008cdc <UART_SetConfig+0x7d0>)
 8008cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cda:	bf00      	nop
 8008cdc:	08008d5f 	.word	0x08008d5f
 8008ce0:	08008dbb 	.word	0x08008dbb
 8008ce4:	08008d67 	.word	0x08008d67
 8008ce8:	08008dbb 	.word	0x08008dbb
 8008cec:	08008dbb 	.word	0x08008dbb
 8008cf0:	08008dbb 	.word	0x08008dbb
 8008cf4:	08008d77 	.word	0x08008d77
 8008cf8:	08008dbb 	.word	0x08008dbb
 8008cfc:	08008dbb 	.word	0x08008dbb
 8008d00:	08008dbb 	.word	0x08008dbb
 8008d04:	08008dbb 	.word	0x08008dbb
 8008d08:	08008dbb 	.word	0x08008dbb
 8008d0c:	08008dbb 	.word	0x08008dbb
 8008d10:	08008dbb 	.word	0x08008dbb
 8008d14:	08008d87 	.word	0x08008d87
 8008d18:	08008dbb 	.word	0x08008dbb
 8008d1c:	08008dbb 	.word	0x08008dbb
 8008d20:	08008dbb 	.word	0x08008dbb
 8008d24:	08008dbb 	.word	0x08008dbb
 8008d28:	08008dbb 	.word	0x08008dbb
 8008d2c:	08008dbb 	.word	0x08008dbb
 8008d30:	08008dbb 	.word	0x08008dbb
 8008d34:	08008dbb 	.word	0x08008dbb
 8008d38:	08008dbb 	.word	0x08008dbb
 8008d3c:	08008dbb 	.word	0x08008dbb
 8008d40:	08008dbb 	.word	0x08008dbb
 8008d44:	08008dbb 	.word	0x08008dbb
 8008d48:	08008dbb 	.word	0x08008dbb
 8008d4c:	08008dbb 	.word	0x08008dbb
 8008d50:	08008dbb 	.word	0x08008dbb
 8008d54:	08008dad 	.word	0x08008dad
 8008d58:	2b40      	cmp	r3, #64	; 0x40
 8008d5a:	d02a      	beq.n	8008db2 <UART_SetConfig+0x8a6>
 8008d5c:	e02d      	b.n	8008dba <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008d5e:	f7fe f8d5 	bl	8006f0c <HAL_RCCEx_GetD3PCLK1Freq>
 8008d62:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008d64:	e02f      	b.n	8008dc6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d66:	f107 0314 	add.w	r3, r7, #20
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7fe f8e4 	bl	8006f38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008d70:	69bb      	ldr	r3, [r7, #24]
 8008d72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d74:	e027      	b.n	8008dc6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d76:	f107 0308 	add.w	r3, r7, #8
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7fe fa30 	bl	80071e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d84:	e01f      	b.n	8008dc6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d86:	4b21      	ldr	r3, [pc, #132]	; (8008e0c <UART_SetConfig+0x900>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f003 0320 	and.w	r3, r3, #32
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d009      	beq.n	8008da6 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008d92:	4b1e      	ldr	r3, [pc, #120]	; (8008e0c <UART_SetConfig+0x900>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	08db      	lsrs	r3, r3, #3
 8008d98:	f003 0303 	and.w	r3, r3, #3
 8008d9c:	4a1d      	ldr	r2, [pc, #116]	; (8008e14 <UART_SetConfig+0x908>)
 8008d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8008da2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008da4:	e00f      	b.n	8008dc6 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8008da6:	4b1b      	ldr	r3, [pc, #108]	; (8008e14 <UART_SetConfig+0x908>)
 8008da8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008daa:	e00c      	b.n	8008dc6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008dac:	4b1a      	ldr	r3, [pc, #104]	; (8008e18 <UART_SetConfig+0x90c>)
 8008dae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008db0:	e009      	b.n	8008dc6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008db6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008db8:	e005      	b.n	8008dc6 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008dc4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f000 81e6 	beq.w	800919a <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd2:	4a12      	ldr	r2, [pc, #72]	; (8008e1c <UART_SetConfig+0x910>)
 8008dd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dd8:	461a      	mov	r2, r3
 8008dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ddc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008de0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	685a      	ldr	r2, [r3, #4]
 8008de6:	4613      	mov	r3, r2
 8008de8:	005b      	lsls	r3, r3, #1
 8008dea:	4413      	add	r3, r2
 8008dec:	6a3a      	ldr	r2, [r7, #32]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d305      	bcc.n	8008dfe <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008df8:	6a3a      	ldr	r2, [r7, #32]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d910      	bls.n	8008e20 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008e04:	e1c9      	b.n	800919a <UART_SetConfig+0xc8e>
 8008e06:	bf00      	nop
 8008e08:	40011c00 	.word	0x40011c00
 8008e0c:	58024400 	.word	0x58024400
 8008e10:	58000c00 	.word	0x58000c00
 8008e14:	03d09000 	.word	0x03d09000
 8008e18:	003d0900 	.word	0x003d0900
 8008e1c:	08019010 	.word	0x08019010
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e22:	4618      	mov	r0, r3
 8008e24:	f04f 0100 	mov.w	r1, #0
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2c:	4ac1      	ldr	r2, [pc, #772]	; (8009134 <UART_SetConfig+0xc28>)
 8008e2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e32:	b29a      	uxth	r2, r3
 8008e34:	f04f 0300 	mov.w	r3, #0
 8008e38:	f7f7 fac2 	bl	80003c0 <__aeabi_uldivmod>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	460b      	mov	r3, r1
 8008e40:	4610      	mov	r0, r2
 8008e42:	4619      	mov	r1, r3
 8008e44:	f04f 0200 	mov.w	r2, #0
 8008e48:	f04f 0300 	mov.w	r3, #0
 8008e4c:	020b      	lsls	r3, r1, #8
 8008e4e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008e52:	0202      	lsls	r2, r0, #8
 8008e54:	6879      	ldr	r1, [r7, #4]
 8008e56:	6849      	ldr	r1, [r1, #4]
 8008e58:	0849      	lsrs	r1, r1, #1
 8008e5a:	4608      	mov	r0, r1
 8008e5c:	f04f 0100 	mov.w	r1, #0
 8008e60:	1814      	adds	r4, r2, r0
 8008e62:	eb43 0501 	adc.w	r5, r3, r1
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	f04f 0300 	mov.w	r3, #0
 8008e70:	4620      	mov	r0, r4
 8008e72:	4629      	mov	r1, r5
 8008e74:	f7f7 faa4 	bl	80003c0 <__aeabi_uldivmod>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e86:	d308      	bcc.n	8008e9a <UART_SetConfig+0x98e>
 8008e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e8e:	d204      	bcs.n	8008e9a <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e96:	60da      	str	r2, [r3, #12]
 8008e98:	e17f      	b.n	800919a <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008ea0:	e17b      	b.n	800919a <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	69db      	ldr	r3, [r3, #28]
 8008ea6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008eaa:	f040 80bd 	bne.w	8009028 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8008eae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008eb2:	2b20      	cmp	r3, #32
 8008eb4:	dc48      	bgt.n	8008f48 <UART_SetConfig+0xa3c>
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	db7b      	blt.n	8008fb2 <UART_SetConfig+0xaa6>
 8008eba:	2b20      	cmp	r3, #32
 8008ebc:	d879      	bhi.n	8008fb2 <UART_SetConfig+0xaa6>
 8008ebe:	a201      	add	r2, pc, #4	; (adr r2, 8008ec4 <UART_SetConfig+0x9b8>)
 8008ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec4:	08008f4f 	.word	0x08008f4f
 8008ec8:	08008f57 	.word	0x08008f57
 8008ecc:	08008fb3 	.word	0x08008fb3
 8008ed0:	08008fb3 	.word	0x08008fb3
 8008ed4:	08008f5f 	.word	0x08008f5f
 8008ed8:	08008fb3 	.word	0x08008fb3
 8008edc:	08008fb3 	.word	0x08008fb3
 8008ee0:	08008fb3 	.word	0x08008fb3
 8008ee4:	08008f6f 	.word	0x08008f6f
 8008ee8:	08008fb3 	.word	0x08008fb3
 8008eec:	08008fb3 	.word	0x08008fb3
 8008ef0:	08008fb3 	.word	0x08008fb3
 8008ef4:	08008fb3 	.word	0x08008fb3
 8008ef8:	08008fb3 	.word	0x08008fb3
 8008efc:	08008fb3 	.word	0x08008fb3
 8008f00:	08008fb3 	.word	0x08008fb3
 8008f04:	08008f7f 	.word	0x08008f7f
 8008f08:	08008fb3 	.word	0x08008fb3
 8008f0c:	08008fb3 	.word	0x08008fb3
 8008f10:	08008fb3 	.word	0x08008fb3
 8008f14:	08008fb3 	.word	0x08008fb3
 8008f18:	08008fb3 	.word	0x08008fb3
 8008f1c:	08008fb3 	.word	0x08008fb3
 8008f20:	08008fb3 	.word	0x08008fb3
 8008f24:	08008fb3 	.word	0x08008fb3
 8008f28:	08008fb3 	.word	0x08008fb3
 8008f2c:	08008fb3 	.word	0x08008fb3
 8008f30:	08008fb3 	.word	0x08008fb3
 8008f34:	08008fb3 	.word	0x08008fb3
 8008f38:	08008fb3 	.word	0x08008fb3
 8008f3c:	08008fb3 	.word	0x08008fb3
 8008f40:	08008fb3 	.word	0x08008fb3
 8008f44:	08008fa5 	.word	0x08008fa5
 8008f48:	2b40      	cmp	r3, #64	; 0x40
 8008f4a:	d02e      	beq.n	8008faa <UART_SetConfig+0xa9e>
 8008f4c:	e031      	b.n	8008fb2 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f4e:	f7fd f8b7 	bl	80060c0 <HAL_RCC_GetPCLK1Freq>
 8008f52:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008f54:	e033      	b.n	8008fbe <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f56:	f7fd f8c9 	bl	80060ec <HAL_RCC_GetPCLK2Freq>
 8008f5a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008f5c:	e02f      	b.n	8008fbe <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f5e:	f107 0314 	add.w	r3, r7, #20
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7fd ffe8 	bl	8006f38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008f68:	69bb      	ldr	r3, [r7, #24]
 8008f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f6c:	e027      	b.n	8008fbe <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f6e:	f107 0308 	add.w	r3, r7, #8
 8008f72:	4618      	mov	r0, r3
 8008f74:	f7fe f934 	bl	80071e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f7c:	e01f      	b.n	8008fbe <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f7e:	4b6e      	ldr	r3, [pc, #440]	; (8009138 <UART_SetConfig+0xc2c>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f003 0320 	and.w	r3, r3, #32
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d009      	beq.n	8008f9e <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008f8a:	4b6b      	ldr	r3, [pc, #428]	; (8009138 <UART_SetConfig+0xc2c>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	08db      	lsrs	r3, r3, #3
 8008f90:	f003 0303 	and.w	r3, r3, #3
 8008f94:	4a69      	ldr	r2, [pc, #420]	; (800913c <UART_SetConfig+0xc30>)
 8008f96:	fa22 f303 	lsr.w	r3, r2, r3
 8008f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008f9c:	e00f      	b.n	8008fbe <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8008f9e:	4b67      	ldr	r3, [pc, #412]	; (800913c <UART_SetConfig+0xc30>)
 8008fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008fa2:	e00c      	b.n	8008fbe <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008fa4:	4b66      	ldr	r3, [pc, #408]	; (8009140 <UART_SetConfig+0xc34>)
 8008fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008fa8:	e009      	b.n	8008fbe <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008fb0:	e005      	b.n	8008fbe <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008fbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	f000 80ea 	beq.w	800919a <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fca:	4a5a      	ldr	r2, [pc, #360]	; (8009134 <UART_SetConfig+0xc28>)
 8008fcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fd8:	005a      	lsls	r2, r3, #1
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	085b      	lsrs	r3, r3, #1
 8008fe0:	441a      	add	r2, r3
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fea:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fee:	2b0f      	cmp	r3, #15
 8008ff0:	d916      	bls.n	8009020 <UART_SetConfig+0xb14>
 8008ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ff8:	d212      	bcs.n	8009020 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	f023 030f 	bic.w	r3, r3, #15
 8009002:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009006:	085b      	lsrs	r3, r3, #1
 8009008:	b29b      	uxth	r3, r3
 800900a:	f003 0307 	and.w	r3, r3, #7
 800900e:	b29a      	uxth	r2, r3
 8009010:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009012:	4313      	orrs	r3, r2
 8009014:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800901c:	60da      	str	r2, [r3, #12]
 800901e:	e0bc      	b.n	800919a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009026:	e0b8      	b.n	800919a <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009028:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800902c:	2b20      	cmp	r3, #32
 800902e:	dc4b      	bgt.n	80090c8 <UART_SetConfig+0xbbc>
 8009030:	2b00      	cmp	r3, #0
 8009032:	f2c0 8087 	blt.w	8009144 <UART_SetConfig+0xc38>
 8009036:	2b20      	cmp	r3, #32
 8009038:	f200 8084 	bhi.w	8009144 <UART_SetConfig+0xc38>
 800903c:	a201      	add	r2, pc, #4	; (adr r2, 8009044 <UART_SetConfig+0xb38>)
 800903e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009042:	bf00      	nop
 8009044:	080090cf 	.word	0x080090cf
 8009048:	080090d7 	.word	0x080090d7
 800904c:	08009145 	.word	0x08009145
 8009050:	08009145 	.word	0x08009145
 8009054:	080090df 	.word	0x080090df
 8009058:	08009145 	.word	0x08009145
 800905c:	08009145 	.word	0x08009145
 8009060:	08009145 	.word	0x08009145
 8009064:	080090ef 	.word	0x080090ef
 8009068:	08009145 	.word	0x08009145
 800906c:	08009145 	.word	0x08009145
 8009070:	08009145 	.word	0x08009145
 8009074:	08009145 	.word	0x08009145
 8009078:	08009145 	.word	0x08009145
 800907c:	08009145 	.word	0x08009145
 8009080:	08009145 	.word	0x08009145
 8009084:	080090ff 	.word	0x080090ff
 8009088:	08009145 	.word	0x08009145
 800908c:	08009145 	.word	0x08009145
 8009090:	08009145 	.word	0x08009145
 8009094:	08009145 	.word	0x08009145
 8009098:	08009145 	.word	0x08009145
 800909c:	08009145 	.word	0x08009145
 80090a0:	08009145 	.word	0x08009145
 80090a4:	08009145 	.word	0x08009145
 80090a8:	08009145 	.word	0x08009145
 80090ac:	08009145 	.word	0x08009145
 80090b0:	08009145 	.word	0x08009145
 80090b4:	08009145 	.word	0x08009145
 80090b8:	08009145 	.word	0x08009145
 80090bc:	08009145 	.word	0x08009145
 80090c0:	08009145 	.word	0x08009145
 80090c4:	08009125 	.word	0x08009125
 80090c8:	2b40      	cmp	r3, #64	; 0x40
 80090ca:	d02e      	beq.n	800912a <UART_SetConfig+0xc1e>
 80090cc:	e03a      	b.n	8009144 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090ce:	f7fc fff7 	bl	80060c0 <HAL_RCC_GetPCLK1Freq>
 80090d2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80090d4:	e03c      	b.n	8009150 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090d6:	f7fd f809 	bl	80060ec <HAL_RCC_GetPCLK2Freq>
 80090da:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80090dc:	e038      	b.n	8009150 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090de:	f107 0314 	add.w	r3, r7, #20
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7fd ff28 	bl	8006f38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80090e8:	69bb      	ldr	r3, [r7, #24]
 80090ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80090ec:	e030      	b.n	8009150 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090ee:	f107 0308 	add.w	r3, r7, #8
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7fe f874 	bl	80071e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80090fc:	e028      	b.n	8009150 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090fe:	4b0e      	ldr	r3, [pc, #56]	; (8009138 <UART_SetConfig+0xc2c>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f003 0320 	and.w	r3, r3, #32
 8009106:	2b00      	cmp	r3, #0
 8009108:	d009      	beq.n	800911e <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800910a:	4b0b      	ldr	r3, [pc, #44]	; (8009138 <UART_SetConfig+0xc2c>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	08db      	lsrs	r3, r3, #3
 8009110:	f003 0303 	and.w	r3, r3, #3
 8009114:	4a09      	ldr	r2, [pc, #36]	; (800913c <UART_SetConfig+0xc30>)
 8009116:	fa22 f303 	lsr.w	r3, r2, r3
 800911a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800911c:	e018      	b.n	8009150 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800911e:	4b07      	ldr	r3, [pc, #28]	; (800913c <UART_SetConfig+0xc30>)
 8009120:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009122:	e015      	b.n	8009150 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009124:	4b06      	ldr	r3, [pc, #24]	; (8009140 <UART_SetConfig+0xc34>)
 8009126:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009128:	e012      	b.n	8009150 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800912a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800912e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009130:	e00e      	b.n	8009150 <UART_SetConfig+0xc44>
 8009132:	bf00      	nop
 8009134:	08019010 	.word	0x08019010
 8009138:	58024400 	.word	0x58024400
 800913c:	03d09000 	.word	0x03d09000
 8009140:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8009144:	2300      	movs	r3, #0
 8009146:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800914e:	bf00      	nop
    }

    if (pclk != 0U)
 8009150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009152:	2b00      	cmp	r3, #0
 8009154:	d021      	beq.n	800919a <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915a:	4a1a      	ldr	r2, [pc, #104]	; (80091c4 <UART_SetConfig+0xcb8>)
 800915c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009160:	461a      	mov	r2, r3
 8009162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009164:	fbb3 f2f2 	udiv	r2, r3, r2
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	085b      	lsrs	r3, r3, #1
 800916e:	441a      	add	r2, r3
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	fbb2 f3f3 	udiv	r3, r2, r3
 8009178:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800917a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917c:	2b0f      	cmp	r3, #15
 800917e:	d909      	bls.n	8009194 <UART_SetConfig+0xc88>
 8009180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009186:	d205      	bcs.n	8009194 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918a:	b29a      	uxth	r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	60da      	str	r2, [r3, #12]
 8009192:	e002      	b.n	800919a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2201      	movs	r2, #1
 800919e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2201      	movs	r2, #1
 80091a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80091b6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3738      	adds	r7, #56	; 0x38
 80091be:	46bd      	mov	sp, r7
 80091c0:	bdb0      	pop	{r4, r5, r7, pc}
 80091c2:	bf00      	nop
 80091c4:	08019010 	.word	0x08019010

080091c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091d4:	f003 0301 	and.w	r3, r3, #1
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d00a      	beq.n	80091f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	430a      	orrs	r2, r1
 80091f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f6:	f003 0302 	and.w	r3, r3, #2
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d00a      	beq.n	8009214 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	430a      	orrs	r2, r1
 8009212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009218:	f003 0304 	and.w	r3, r3, #4
 800921c:	2b00      	cmp	r3, #0
 800921e:	d00a      	beq.n	8009236 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	430a      	orrs	r2, r1
 8009234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800923a:	f003 0308 	and.w	r3, r3, #8
 800923e:	2b00      	cmp	r3, #0
 8009240:	d00a      	beq.n	8009258 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	430a      	orrs	r2, r1
 8009256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800925c:	f003 0310 	and.w	r3, r3, #16
 8009260:	2b00      	cmp	r3, #0
 8009262:	d00a      	beq.n	800927a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	430a      	orrs	r2, r1
 8009278:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800927e:	f003 0320 	and.w	r3, r3, #32
 8009282:	2b00      	cmp	r3, #0
 8009284:	d00a      	beq.n	800929c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	430a      	orrs	r2, r1
 800929a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d01a      	beq.n	80092de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	430a      	orrs	r2, r1
 80092bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092c6:	d10a      	bne.n	80092de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	430a      	orrs	r2, r1
 80092dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d00a      	beq.n	8009300 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	430a      	orrs	r2, r1
 80092fe:	605a      	str	r2, [r3, #4]
  }
}
 8009300:	bf00      	nop
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b086      	sub	sp, #24
 8009310:	af02      	add	r7, sp, #8
 8009312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800931c:	f7f9 f950 	bl	80025c0 <HAL_GetTick>
 8009320:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f003 0308 	and.w	r3, r3, #8
 800932c:	2b08      	cmp	r3, #8
 800932e:	d10e      	bne.n	800934e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009330:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009334:	9300      	str	r3, [sp, #0]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2200      	movs	r2, #0
 800933a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 f82f 	bl	80093a2 <UART_WaitOnFlagUntilTimeout>
 8009344:	4603      	mov	r3, r0
 8009346:	2b00      	cmp	r3, #0
 8009348:	d001      	beq.n	800934e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800934a:	2303      	movs	r3, #3
 800934c:	e025      	b.n	800939a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f003 0304 	and.w	r3, r3, #4
 8009358:	2b04      	cmp	r3, #4
 800935a:	d10e      	bne.n	800937a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800935c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009360:	9300      	str	r3, [sp, #0]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2200      	movs	r2, #0
 8009366:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 f819 	bl	80093a2 <UART_WaitOnFlagUntilTimeout>
 8009370:	4603      	mov	r3, r0
 8009372:	2b00      	cmp	r3, #0
 8009374:	d001      	beq.n	800937a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009376:	2303      	movs	r3, #3
 8009378:	e00f      	b.n	800939a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2220      	movs	r2, #32
 800937e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2220      	movs	r2, #32
 8009386:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b09c      	sub	sp, #112	; 0x70
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	60f8      	str	r0, [r7, #12]
 80093aa:	60b9      	str	r1, [r7, #8]
 80093ac:	603b      	str	r3, [r7, #0]
 80093ae:	4613      	mov	r3, r2
 80093b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093b2:	e0a9      	b.n	8009508 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ba:	f000 80a5 	beq.w	8009508 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093be:	f7f9 f8ff 	bl	80025c0 <HAL_GetTick>
 80093c2:	4602      	mov	r2, r0
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	1ad3      	subs	r3, r2, r3
 80093c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d302      	bcc.n	80093d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80093ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d140      	bne.n	8009456 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093dc:	e853 3f00 	ldrex	r3, [r3]
 80093e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80093e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80093e8:	667b      	str	r3, [r7, #100]	; 0x64
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	461a      	mov	r2, r3
 80093f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093f4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80093f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80093fa:	e841 2300 	strex	r3, r2, [r1]
 80093fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009400:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009402:	2b00      	cmp	r3, #0
 8009404:	d1e6      	bne.n	80093d4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	3308      	adds	r3, #8
 800940c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800940e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009410:	e853 3f00 	ldrex	r3, [r3]
 8009414:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009418:	f023 0301 	bic.w	r3, r3, #1
 800941c:	663b      	str	r3, [r7, #96]	; 0x60
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	3308      	adds	r3, #8
 8009424:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009426:	64ba      	str	r2, [r7, #72]	; 0x48
 8009428:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800942c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800942e:	e841 2300 	strex	r3, r2, [r1]
 8009432:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009436:	2b00      	cmp	r3, #0
 8009438:	d1e5      	bne.n	8009406 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2220      	movs	r2, #32
 800943e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2220      	movs	r2, #32
 8009446:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2200      	movs	r2, #0
 800944e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009452:	2303      	movs	r3, #3
 8009454:	e069      	b.n	800952a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 0304 	and.w	r3, r3, #4
 8009460:	2b00      	cmp	r3, #0
 8009462:	d051      	beq.n	8009508 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	69db      	ldr	r3, [r3, #28]
 800946a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800946e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009472:	d149      	bne.n	8009508 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800947c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009486:	e853 3f00 	ldrex	r3, [r3]
 800948a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800948c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009492:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	461a      	mov	r2, r3
 800949a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800949c:	637b      	str	r3, [r7, #52]	; 0x34
 800949e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80094a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094a4:	e841 2300 	strex	r3, r2, [r1]
 80094a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80094aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d1e6      	bne.n	800947e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	3308      	adds	r3, #8
 80094b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	e853 3f00 	ldrex	r3, [r3]
 80094be:	613b      	str	r3, [r7, #16]
   return(result);
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	f023 0301 	bic.w	r3, r3, #1
 80094c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	3308      	adds	r3, #8
 80094ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80094d0:	623a      	str	r2, [r7, #32]
 80094d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d4:	69f9      	ldr	r1, [r7, #28]
 80094d6:	6a3a      	ldr	r2, [r7, #32]
 80094d8:	e841 2300 	strex	r3, r2, [r1]
 80094dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80094de:	69bb      	ldr	r3, [r7, #24]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d1e5      	bne.n	80094b0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2220      	movs	r2, #32
 80094e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2220      	movs	r2, #32
 80094f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2220      	movs	r2, #32
 80094f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2200      	movs	r2, #0
 8009500:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009504:	2303      	movs	r3, #3
 8009506:	e010      	b.n	800952a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	69da      	ldr	r2, [r3, #28]
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	4013      	ands	r3, r2
 8009512:	68ba      	ldr	r2, [r7, #8]
 8009514:	429a      	cmp	r2, r3
 8009516:	bf0c      	ite	eq
 8009518:	2301      	moveq	r3, #1
 800951a:	2300      	movne	r3, #0
 800951c:	b2db      	uxtb	r3, r3
 800951e:	461a      	mov	r2, r3
 8009520:	79fb      	ldrb	r3, [r7, #7]
 8009522:	429a      	cmp	r2, r3
 8009524:	f43f af46 	beq.w	80093b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3770      	adds	r7, #112	; 0x70
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009532:	b480      	push	{r7}
 8009534:	b085      	sub	sp, #20
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009540:	2b01      	cmp	r3, #1
 8009542:	d101      	bne.n	8009548 <HAL_UARTEx_DisableFifoMode+0x16>
 8009544:	2302      	movs	r3, #2
 8009546:	e027      	b.n	8009598 <HAL_UARTEx_DisableFifoMode+0x66>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2224      	movs	r2, #36	; 0x24
 8009554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f022 0201 	bic.w	r2, r2, #1
 800956e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009576:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	68fa      	ldr	r2, [r7, #12]
 8009584:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2220      	movs	r2, #32
 800958a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2200      	movs	r2, #0
 8009592:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009596:	2300      	movs	r3, #0
}
 8009598:	4618      	mov	r0, r3
 800959a:	3714      	adds	r7, #20
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr

080095a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d101      	bne.n	80095bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80095b8:	2302      	movs	r3, #2
 80095ba:	e02d      	b.n	8009618 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2201      	movs	r2, #1
 80095c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2224      	movs	r2, #36	; 0x24
 80095c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f022 0201 	bic.w	r2, r2, #1
 80095e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	683a      	ldr	r2, [r7, #0]
 80095f4:	430a      	orrs	r2, r1
 80095f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 f84f 	bl	800969c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	68fa      	ldr	r2, [r7, #12]
 8009604:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2220      	movs	r2, #32
 800960a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2200      	movs	r2, #0
 8009612:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009616:	2300      	movs	r3, #0
}
 8009618:	4618      	mov	r0, r3
 800961a:	3710      	adds	r7, #16
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009630:	2b01      	cmp	r3, #1
 8009632:	d101      	bne.n	8009638 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009634:	2302      	movs	r3, #2
 8009636:	e02d      	b.n	8009694 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2201      	movs	r2, #1
 800963c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2224      	movs	r2, #36	; 0x24
 8009644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f022 0201 	bic.w	r2, r2, #1
 800965e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	683a      	ldr	r2, [r7, #0]
 8009670:	430a      	orrs	r2, r1
 8009672:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 f811 	bl	800969c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2220      	movs	r2, #32
 8009686:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2200      	movs	r2, #0
 800968e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	3710      	adds	r7, #16
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800969c:	b480      	push	{r7}
 800969e:	b085      	sub	sp, #20
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d108      	bne.n	80096be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80096bc:	e031      	b.n	8009722 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80096be:	2310      	movs	r3, #16
 80096c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80096c2:	2310      	movs	r3, #16
 80096c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	689b      	ldr	r3, [r3, #8]
 80096cc:	0e5b      	lsrs	r3, r3, #25
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	f003 0307 	and.w	r3, r3, #7
 80096d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	0f5b      	lsrs	r3, r3, #29
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	f003 0307 	and.w	r3, r3, #7
 80096e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096e6:	7bbb      	ldrb	r3, [r7, #14]
 80096e8:	7b3a      	ldrb	r2, [r7, #12]
 80096ea:	4911      	ldr	r1, [pc, #68]	; (8009730 <UARTEx_SetNbDataToProcess+0x94>)
 80096ec:	5c8a      	ldrb	r2, [r1, r2]
 80096ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80096f2:	7b3a      	ldrb	r2, [r7, #12]
 80096f4:	490f      	ldr	r1, [pc, #60]	; (8009734 <UARTEx_SetNbDataToProcess+0x98>)
 80096f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80096fc:	b29a      	uxth	r2, r3
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009704:	7bfb      	ldrb	r3, [r7, #15]
 8009706:	7b7a      	ldrb	r2, [r7, #13]
 8009708:	4909      	ldr	r1, [pc, #36]	; (8009730 <UARTEx_SetNbDataToProcess+0x94>)
 800970a:	5c8a      	ldrb	r2, [r1, r2]
 800970c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009710:	7b7a      	ldrb	r2, [r7, #13]
 8009712:	4908      	ldr	r1, [pc, #32]	; (8009734 <UARTEx_SetNbDataToProcess+0x98>)
 8009714:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009716:	fb93 f3f2 	sdiv	r3, r3, r2
 800971a:	b29a      	uxth	r2, r3
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009722:	bf00      	nop
 8009724:	3714      	adds	r7, #20
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr
 800972e:	bf00      	nop
 8009730:	08019028 	.word	0x08019028
 8009734:	08019030 	.word	0x08019030

08009738 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b084      	sub	sp, #16
 800973c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800973e:	4b8d      	ldr	r3, [pc, #564]	; (8009974 <MX_LWIP_Init+0x23c>)
 8009740:	22c0      	movs	r2, #192	; 0xc0
 8009742:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8009744:	4b8b      	ldr	r3, [pc, #556]	; (8009974 <MX_LWIP_Init+0x23c>)
 8009746:	22a8      	movs	r2, #168	; 0xa8
 8009748:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800974a:	4b8a      	ldr	r3, [pc, #552]	; (8009974 <MX_LWIP_Init+0x23c>)
 800974c:	2201      	movs	r2, #1
 800974e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 200;
 8009750:	4b88      	ldr	r3, [pc, #544]	; (8009974 <MX_LWIP_Init+0x23c>)
 8009752:	22c8      	movs	r2, #200	; 0xc8
 8009754:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8009756:	4b88      	ldr	r3, [pc, #544]	; (8009978 <MX_LWIP_Init+0x240>)
 8009758:	22ff      	movs	r2, #255	; 0xff
 800975a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800975c:	4b86      	ldr	r3, [pc, #536]	; (8009978 <MX_LWIP_Init+0x240>)
 800975e:	22ff      	movs	r2, #255	; 0xff
 8009760:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8009762:	4b85      	ldr	r3, [pc, #532]	; (8009978 <MX_LWIP_Init+0x240>)
 8009764:	22ff      	movs	r2, #255	; 0xff
 8009766:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8009768:	4b83      	ldr	r3, [pc, #524]	; (8009978 <MX_LWIP_Init+0x240>)
 800976a:	2200      	movs	r2, #0
 800976c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800976e:	4b83      	ldr	r3, [pc, #524]	; (800997c <MX_LWIP_Init+0x244>)
 8009770:	22c0      	movs	r2, #192	; 0xc0
 8009772:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8009774:	4b81      	ldr	r3, [pc, #516]	; (800997c <MX_LWIP_Init+0x244>)
 8009776:	22a8      	movs	r2, #168	; 0xa8
 8009778:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800977a:	4b80      	ldr	r3, [pc, #512]	; (800997c <MX_LWIP_Init+0x244>)
 800977c:	2201      	movs	r2, #1
 800977e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8009780:	4b7e      	ldr	r3, [pc, #504]	; (800997c <MX_LWIP_Init+0x244>)
 8009782:	2201      	movs	r2, #1
 8009784:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8009786:	f000 fdb9 	bl	800a2fc <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800978a:	4b7a      	ldr	r3, [pc, #488]	; (8009974 <MX_LWIP_Init+0x23c>)
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	061a      	lsls	r2, r3, #24
 8009790:	4b78      	ldr	r3, [pc, #480]	; (8009974 <MX_LWIP_Init+0x23c>)
 8009792:	785b      	ldrb	r3, [r3, #1]
 8009794:	041b      	lsls	r3, r3, #16
 8009796:	431a      	orrs	r2, r3
 8009798:	4b76      	ldr	r3, [pc, #472]	; (8009974 <MX_LWIP_Init+0x23c>)
 800979a:	789b      	ldrb	r3, [r3, #2]
 800979c:	021b      	lsls	r3, r3, #8
 800979e:	4313      	orrs	r3, r2
 80097a0:	4a74      	ldr	r2, [pc, #464]	; (8009974 <MX_LWIP_Init+0x23c>)
 80097a2:	78d2      	ldrb	r2, [r2, #3]
 80097a4:	4313      	orrs	r3, r2
 80097a6:	061a      	lsls	r2, r3, #24
 80097a8:	4b72      	ldr	r3, [pc, #456]	; (8009974 <MX_LWIP_Init+0x23c>)
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	0619      	lsls	r1, r3, #24
 80097ae:	4b71      	ldr	r3, [pc, #452]	; (8009974 <MX_LWIP_Init+0x23c>)
 80097b0:	785b      	ldrb	r3, [r3, #1]
 80097b2:	041b      	lsls	r3, r3, #16
 80097b4:	4319      	orrs	r1, r3
 80097b6:	4b6f      	ldr	r3, [pc, #444]	; (8009974 <MX_LWIP_Init+0x23c>)
 80097b8:	789b      	ldrb	r3, [r3, #2]
 80097ba:	021b      	lsls	r3, r3, #8
 80097bc:	430b      	orrs	r3, r1
 80097be:	496d      	ldr	r1, [pc, #436]	; (8009974 <MX_LWIP_Init+0x23c>)
 80097c0:	78c9      	ldrb	r1, [r1, #3]
 80097c2:	430b      	orrs	r3, r1
 80097c4:	021b      	lsls	r3, r3, #8
 80097c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80097ca:	431a      	orrs	r2, r3
 80097cc:	4b69      	ldr	r3, [pc, #420]	; (8009974 <MX_LWIP_Init+0x23c>)
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	0619      	lsls	r1, r3, #24
 80097d2:	4b68      	ldr	r3, [pc, #416]	; (8009974 <MX_LWIP_Init+0x23c>)
 80097d4:	785b      	ldrb	r3, [r3, #1]
 80097d6:	041b      	lsls	r3, r3, #16
 80097d8:	4319      	orrs	r1, r3
 80097da:	4b66      	ldr	r3, [pc, #408]	; (8009974 <MX_LWIP_Init+0x23c>)
 80097dc:	789b      	ldrb	r3, [r3, #2]
 80097de:	021b      	lsls	r3, r3, #8
 80097e0:	430b      	orrs	r3, r1
 80097e2:	4964      	ldr	r1, [pc, #400]	; (8009974 <MX_LWIP_Init+0x23c>)
 80097e4:	78c9      	ldrb	r1, [r1, #3]
 80097e6:	430b      	orrs	r3, r1
 80097e8:	0a1b      	lsrs	r3, r3, #8
 80097ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80097ee:	431a      	orrs	r2, r3
 80097f0:	4b60      	ldr	r3, [pc, #384]	; (8009974 <MX_LWIP_Init+0x23c>)
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	0619      	lsls	r1, r3, #24
 80097f6:	4b5f      	ldr	r3, [pc, #380]	; (8009974 <MX_LWIP_Init+0x23c>)
 80097f8:	785b      	ldrb	r3, [r3, #1]
 80097fa:	041b      	lsls	r3, r3, #16
 80097fc:	4319      	orrs	r1, r3
 80097fe:	4b5d      	ldr	r3, [pc, #372]	; (8009974 <MX_LWIP_Init+0x23c>)
 8009800:	789b      	ldrb	r3, [r3, #2]
 8009802:	021b      	lsls	r3, r3, #8
 8009804:	430b      	orrs	r3, r1
 8009806:	495b      	ldr	r1, [pc, #364]	; (8009974 <MX_LWIP_Init+0x23c>)
 8009808:	78c9      	ldrb	r1, [r1, #3]
 800980a:	430b      	orrs	r3, r1
 800980c:	0e1b      	lsrs	r3, r3, #24
 800980e:	4313      	orrs	r3, r2
 8009810:	4a5b      	ldr	r2, [pc, #364]	; (8009980 <MX_LWIP_Init+0x248>)
 8009812:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009814:	4b58      	ldr	r3, [pc, #352]	; (8009978 <MX_LWIP_Init+0x240>)
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	061a      	lsls	r2, r3, #24
 800981a:	4b57      	ldr	r3, [pc, #348]	; (8009978 <MX_LWIP_Init+0x240>)
 800981c:	785b      	ldrb	r3, [r3, #1]
 800981e:	041b      	lsls	r3, r3, #16
 8009820:	431a      	orrs	r2, r3
 8009822:	4b55      	ldr	r3, [pc, #340]	; (8009978 <MX_LWIP_Init+0x240>)
 8009824:	789b      	ldrb	r3, [r3, #2]
 8009826:	021b      	lsls	r3, r3, #8
 8009828:	4313      	orrs	r3, r2
 800982a:	4a53      	ldr	r2, [pc, #332]	; (8009978 <MX_LWIP_Init+0x240>)
 800982c:	78d2      	ldrb	r2, [r2, #3]
 800982e:	4313      	orrs	r3, r2
 8009830:	061a      	lsls	r2, r3, #24
 8009832:	4b51      	ldr	r3, [pc, #324]	; (8009978 <MX_LWIP_Init+0x240>)
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	0619      	lsls	r1, r3, #24
 8009838:	4b4f      	ldr	r3, [pc, #316]	; (8009978 <MX_LWIP_Init+0x240>)
 800983a:	785b      	ldrb	r3, [r3, #1]
 800983c:	041b      	lsls	r3, r3, #16
 800983e:	4319      	orrs	r1, r3
 8009840:	4b4d      	ldr	r3, [pc, #308]	; (8009978 <MX_LWIP_Init+0x240>)
 8009842:	789b      	ldrb	r3, [r3, #2]
 8009844:	021b      	lsls	r3, r3, #8
 8009846:	430b      	orrs	r3, r1
 8009848:	494b      	ldr	r1, [pc, #300]	; (8009978 <MX_LWIP_Init+0x240>)
 800984a:	78c9      	ldrb	r1, [r1, #3]
 800984c:	430b      	orrs	r3, r1
 800984e:	021b      	lsls	r3, r3, #8
 8009850:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009854:	431a      	orrs	r2, r3
 8009856:	4b48      	ldr	r3, [pc, #288]	; (8009978 <MX_LWIP_Init+0x240>)
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	0619      	lsls	r1, r3, #24
 800985c:	4b46      	ldr	r3, [pc, #280]	; (8009978 <MX_LWIP_Init+0x240>)
 800985e:	785b      	ldrb	r3, [r3, #1]
 8009860:	041b      	lsls	r3, r3, #16
 8009862:	4319      	orrs	r1, r3
 8009864:	4b44      	ldr	r3, [pc, #272]	; (8009978 <MX_LWIP_Init+0x240>)
 8009866:	789b      	ldrb	r3, [r3, #2]
 8009868:	021b      	lsls	r3, r3, #8
 800986a:	430b      	orrs	r3, r1
 800986c:	4942      	ldr	r1, [pc, #264]	; (8009978 <MX_LWIP_Init+0x240>)
 800986e:	78c9      	ldrb	r1, [r1, #3]
 8009870:	430b      	orrs	r3, r1
 8009872:	0a1b      	lsrs	r3, r3, #8
 8009874:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009878:	431a      	orrs	r2, r3
 800987a:	4b3f      	ldr	r3, [pc, #252]	; (8009978 <MX_LWIP_Init+0x240>)
 800987c:	781b      	ldrb	r3, [r3, #0]
 800987e:	0619      	lsls	r1, r3, #24
 8009880:	4b3d      	ldr	r3, [pc, #244]	; (8009978 <MX_LWIP_Init+0x240>)
 8009882:	785b      	ldrb	r3, [r3, #1]
 8009884:	041b      	lsls	r3, r3, #16
 8009886:	4319      	orrs	r1, r3
 8009888:	4b3b      	ldr	r3, [pc, #236]	; (8009978 <MX_LWIP_Init+0x240>)
 800988a:	789b      	ldrb	r3, [r3, #2]
 800988c:	021b      	lsls	r3, r3, #8
 800988e:	430b      	orrs	r3, r1
 8009890:	4939      	ldr	r1, [pc, #228]	; (8009978 <MX_LWIP_Init+0x240>)
 8009892:	78c9      	ldrb	r1, [r1, #3]
 8009894:	430b      	orrs	r3, r1
 8009896:	0e1b      	lsrs	r3, r3, #24
 8009898:	4313      	orrs	r3, r2
 800989a:	4a3a      	ldr	r2, [pc, #232]	; (8009984 <MX_LWIP_Init+0x24c>)
 800989c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800989e:	4b37      	ldr	r3, [pc, #220]	; (800997c <MX_LWIP_Init+0x244>)
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	061a      	lsls	r2, r3, #24
 80098a4:	4b35      	ldr	r3, [pc, #212]	; (800997c <MX_LWIP_Init+0x244>)
 80098a6:	785b      	ldrb	r3, [r3, #1]
 80098a8:	041b      	lsls	r3, r3, #16
 80098aa:	431a      	orrs	r2, r3
 80098ac:	4b33      	ldr	r3, [pc, #204]	; (800997c <MX_LWIP_Init+0x244>)
 80098ae:	789b      	ldrb	r3, [r3, #2]
 80098b0:	021b      	lsls	r3, r3, #8
 80098b2:	4313      	orrs	r3, r2
 80098b4:	4a31      	ldr	r2, [pc, #196]	; (800997c <MX_LWIP_Init+0x244>)
 80098b6:	78d2      	ldrb	r2, [r2, #3]
 80098b8:	4313      	orrs	r3, r2
 80098ba:	061a      	lsls	r2, r3, #24
 80098bc:	4b2f      	ldr	r3, [pc, #188]	; (800997c <MX_LWIP_Init+0x244>)
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	0619      	lsls	r1, r3, #24
 80098c2:	4b2e      	ldr	r3, [pc, #184]	; (800997c <MX_LWIP_Init+0x244>)
 80098c4:	785b      	ldrb	r3, [r3, #1]
 80098c6:	041b      	lsls	r3, r3, #16
 80098c8:	4319      	orrs	r1, r3
 80098ca:	4b2c      	ldr	r3, [pc, #176]	; (800997c <MX_LWIP_Init+0x244>)
 80098cc:	789b      	ldrb	r3, [r3, #2]
 80098ce:	021b      	lsls	r3, r3, #8
 80098d0:	430b      	orrs	r3, r1
 80098d2:	492a      	ldr	r1, [pc, #168]	; (800997c <MX_LWIP_Init+0x244>)
 80098d4:	78c9      	ldrb	r1, [r1, #3]
 80098d6:	430b      	orrs	r3, r1
 80098d8:	021b      	lsls	r3, r3, #8
 80098da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80098de:	431a      	orrs	r2, r3
 80098e0:	4b26      	ldr	r3, [pc, #152]	; (800997c <MX_LWIP_Init+0x244>)
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	0619      	lsls	r1, r3, #24
 80098e6:	4b25      	ldr	r3, [pc, #148]	; (800997c <MX_LWIP_Init+0x244>)
 80098e8:	785b      	ldrb	r3, [r3, #1]
 80098ea:	041b      	lsls	r3, r3, #16
 80098ec:	4319      	orrs	r1, r3
 80098ee:	4b23      	ldr	r3, [pc, #140]	; (800997c <MX_LWIP_Init+0x244>)
 80098f0:	789b      	ldrb	r3, [r3, #2]
 80098f2:	021b      	lsls	r3, r3, #8
 80098f4:	430b      	orrs	r3, r1
 80098f6:	4921      	ldr	r1, [pc, #132]	; (800997c <MX_LWIP_Init+0x244>)
 80098f8:	78c9      	ldrb	r1, [r1, #3]
 80098fa:	430b      	orrs	r3, r1
 80098fc:	0a1b      	lsrs	r3, r3, #8
 80098fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009902:	431a      	orrs	r2, r3
 8009904:	4b1d      	ldr	r3, [pc, #116]	; (800997c <MX_LWIP_Init+0x244>)
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	0619      	lsls	r1, r3, #24
 800990a:	4b1c      	ldr	r3, [pc, #112]	; (800997c <MX_LWIP_Init+0x244>)
 800990c:	785b      	ldrb	r3, [r3, #1]
 800990e:	041b      	lsls	r3, r3, #16
 8009910:	4319      	orrs	r1, r3
 8009912:	4b1a      	ldr	r3, [pc, #104]	; (800997c <MX_LWIP_Init+0x244>)
 8009914:	789b      	ldrb	r3, [r3, #2]
 8009916:	021b      	lsls	r3, r3, #8
 8009918:	430b      	orrs	r3, r1
 800991a:	4918      	ldr	r1, [pc, #96]	; (800997c <MX_LWIP_Init+0x244>)
 800991c:	78c9      	ldrb	r1, [r1, #3]
 800991e:	430b      	orrs	r3, r1
 8009920:	0e1b      	lsrs	r3, r3, #24
 8009922:	4313      	orrs	r3, r2
 8009924:	4a18      	ldr	r2, [pc, #96]	; (8009988 <MX_LWIP_Init+0x250>)
 8009926:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8009928:	4b18      	ldr	r3, [pc, #96]	; (800998c <MX_LWIP_Init+0x254>)
 800992a:	9302      	str	r3, [sp, #8]
 800992c:	4b18      	ldr	r3, [pc, #96]	; (8009990 <MX_LWIP_Init+0x258>)
 800992e:	9301      	str	r3, [sp, #4]
 8009930:	2300      	movs	r3, #0
 8009932:	9300      	str	r3, [sp, #0]
 8009934:	4b14      	ldr	r3, [pc, #80]	; (8009988 <MX_LWIP_Init+0x250>)
 8009936:	4a13      	ldr	r2, [pc, #76]	; (8009984 <MX_LWIP_Init+0x24c>)
 8009938:	4911      	ldr	r1, [pc, #68]	; (8009980 <MX_LWIP_Init+0x248>)
 800993a:	4816      	ldr	r0, [pc, #88]	; (8009994 <MX_LWIP_Init+0x25c>)
 800993c:	f001 f9c6 	bl	800accc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009940:	4814      	ldr	r0, [pc, #80]	; (8009994 <MX_LWIP_Init+0x25c>)
 8009942:	f001 fb75 	bl	800b030 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8009946:	4b13      	ldr	r3, [pc, #76]	; (8009994 <MX_LWIP_Init+0x25c>)
 8009948:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800994c:	089b      	lsrs	r3, r3, #2
 800994e:	f003 0301 	and.w	r3, r3, #1
 8009952:	b2db      	uxtb	r3, r3
 8009954:	2b00      	cmp	r3, #0
 8009956:	d003      	beq.n	8009960 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8009958:	480e      	ldr	r0, [pc, #56]	; (8009994 <MX_LWIP_Init+0x25c>)
 800995a:	f001 fb79 	bl	800b050 <netif_set_up>
 800995e:	e002      	b.n	8009966 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8009960:	480c      	ldr	r0, [pc, #48]	; (8009994 <MX_LWIP_Init+0x25c>)
 8009962:	f001 fbe1 	bl	800b128 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8009966:	490c      	ldr	r1, [pc, #48]	; (8009998 <MX_LWIP_Init+0x260>)
 8009968:	480a      	ldr	r0, [pc, #40]	; (8009994 <MX_LWIP_Init+0x25c>)
 800996a:	f001 fc73 	bl	800b254 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800996e:	bf00      	nop
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	24000570 	.word	0x24000570
 8009978:	2400056c 	.word	0x2400056c
 800997c:	2400052c 	.word	0x2400052c
 8009980:	24000564 	.word	0x24000564
 8009984:	24000574 	.word	0x24000574
 8009988:	24000578 	.word	0x24000578
 800998c:	08014a7d 	.word	0x08014a7d
 8009990:	08009ef9 	.word	0x08009ef9
 8009994:	24000530 	.word	0x24000530
 8009998:	0800999d 	.word	0x0800999d

0800999c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80099a4:	bf00      	nop
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr

080099b0 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b08e      	sub	sp, #56	; 0x38
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80099b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099bc:	2200      	movs	r2, #0
 80099be:	601a      	str	r2, [r3, #0]
 80099c0:	605a      	str	r2, [r3, #4]
 80099c2:	609a      	str	r2, [r3, #8]
 80099c4:	60da      	str	r2, [r3, #12]
 80099c6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a59      	ldr	r2, [pc, #356]	; (8009b34 <HAL_ETH_MspInit+0x184>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	f040 80ab 	bne.w	8009b2a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80099d4:	4b58      	ldr	r3, [pc, #352]	; (8009b38 <HAL_ETH_MspInit+0x188>)
 80099d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80099da:	4a57      	ldr	r2, [pc, #348]	; (8009b38 <HAL_ETH_MspInit+0x188>)
 80099dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099e0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80099e4:	4b54      	ldr	r3, [pc, #336]	; (8009b38 <HAL_ETH_MspInit+0x188>)
 80099e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80099ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80099ee:	623b      	str	r3, [r7, #32]
 80099f0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80099f2:	4b51      	ldr	r3, [pc, #324]	; (8009b38 <HAL_ETH_MspInit+0x188>)
 80099f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80099f8:	4a4f      	ldr	r2, [pc, #316]	; (8009b38 <HAL_ETH_MspInit+0x188>)
 80099fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099fe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009a02:	4b4d      	ldr	r3, [pc, #308]	; (8009b38 <HAL_ETH_MspInit+0x188>)
 8009a04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a0c:	61fb      	str	r3, [r7, #28]
 8009a0e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8009a10:	4b49      	ldr	r3, [pc, #292]	; (8009b38 <HAL_ETH_MspInit+0x188>)
 8009a12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009a16:	4a48      	ldr	r2, [pc, #288]	; (8009b38 <HAL_ETH_MspInit+0x188>)
 8009a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a1c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009a20:	4b45      	ldr	r3, [pc, #276]	; (8009b38 <HAL_ETH_MspInit+0x188>)
 8009a22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a2a:	61bb      	str	r3, [r7, #24]
 8009a2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009a2e:	4b42      	ldr	r3, [pc, #264]	; (8009b38 <HAL_ETH_MspInit+0x188>)
 8009a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a34:	4a40      	ldr	r2, [pc, #256]	; (8009b38 <HAL_ETH_MspInit+0x188>)
 8009a36:	f043 0304 	orr.w	r3, r3, #4
 8009a3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009a3e:	4b3e      	ldr	r3, [pc, #248]	; (8009b38 <HAL_ETH_MspInit+0x188>)
 8009a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a44:	f003 0304 	and.w	r3, r3, #4
 8009a48:	617b      	str	r3, [r7, #20]
 8009a4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a4c:	4b3a      	ldr	r3, [pc, #232]	; (8009b38 <HAL_ETH_MspInit+0x188>)
 8009a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a52:	4a39      	ldr	r2, [pc, #228]	; (8009b38 <HAL_ETH_MspInit+0x188>)
 8009a54:	f043 0301 	orr.w	r3, r3, #1
 8009a58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009a5c:	4b36      	ldr	r3, [pc, #216]	; (8009b38 <HAL_ETH_MspInit+0x188>)
 8009a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a62:	f003 0301 	and.w	r3, r3, #1
 8009a66:	613b      	str	r3, [r7, #16]
 8009a68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009a6a:	4b33      	ldr	r3, [pc, #204]	; (8009b38 <HAL_ETH_MspInit+0x188>)
 8009a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a70:	4a31      	ldr	r2, [pc, #196]	; (8009b38 <HAL_ETH_MspInit+0x188>)
 8009a72:	f043 0302 	orr.w	r3, r3, #2
 8009a76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009a7a:	4b2f      	ldr	r3, [pc, #188]	; (8009b38 <HAL_ETH_MspInit+0x188>)
 8009a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a80:	f003 0302 	and.w	r3, r3, #2
 8009a84:	60fb      	str	r3, [r7, #12]
 8009a86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009a88:	4b2b      	ldr	r3, [pc, #172]	; (8009b38 <HAL_ETH_MspInit+0x188>)
 8009a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a8e:	4a2a      	ldr	r2, [pc, #168]	; (8009b38 <HAL_ETH_MspInit+0x188>)
 8009a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009a98:	4b27      	ldr	r3, [pc, #156]	; (8009b38 <HAL_ETH_MspInit+0x188>)
 8009a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aa2:	60bb      	str	r3, [r7, #8]
 8009aa4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8009aa6:	2332      	movs	r3, #50	; 0x32
 8009aa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009aaa:	2302      	movs	r3, #2
 8009aac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009ab6:	230b      	movs	r3, #11
 8009ab8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009abe:	4619      	mov	r1, r3
 8009ac0:	481e      	ldr	r0, [pc, #120]	; (8009b3c <HAL_ETH_MspInit+0x18c>)
 8009ac2:	f7fb f9db 	bl	8004e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8009ac6:	2386      	movs	r3, #134	; 0x86
 8009ac8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009aca:	2302      	movs	r3, #2
 8009acc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009ad6:	230b      	movs	r3, #11
 8009ad8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ade:	4619      	mov	r1, r3
 8009ae0:	4817      	ldr	r0, [pc, #92]	; (8009b40 <HAL_ETH_MspInit+0x190>)
 8009ae2:	f7fb f9cb 	bl	8004e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8009ae6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009aea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009aec:	2302      	movs	r3, #2
 8009aee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009af0:	2300      	movs	r3, #0
 8009af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009af4:	2300      	movs	r3, #0
 8009af6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009af8:	230b      	movs	r3, #11
 8009afa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8009afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b00:	4619      	mov	r1, r3
 8009b02:	4810      	ldr	r0, [pc, #64]	; (8009b44 <HAL_ETH_MspInit+0x194>)
 8009b04:	f7fb f9ba 	bl	8004e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8009b08:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009b0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b0e:	2302      	movs	r3, #2
 8009b10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b12:	2300      	movs	r3, #0
 8009b14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b16:	2300      	movs	r3, #0
 8009b18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009b1a:	230b      	movs	r3, #11
 8009b1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b22:	4619      	mov	r1, r3
 8009b24:	4808      	ldr	r0, [pc, #32]	; (8009b48 <HAL_ETH_MspInit+0x198>)
 8009b26:	f7fb f9a9 	bl	8004e7c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009b2a:	bf00      	nop
 8009b2c:	3738      	adds	r7, #56	; 0x38
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	40028000 	.word	0x40028000
 8009b38:	58024400 	.word	0x58024400
 8009b3c:	58020800 	.word	0x58020800
 8009b40:	58020000 	.word	0x58020000
 8009b44:	58020400 	.word	0x58020400
 8009b48:	58021800 	.word	0x58021800

08009b4c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b086      	sub	sp, #24
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8009b54:	2300      	movs	r3, #0
 8009b56:	74fb      	strb	r3, [r7, #19]
  uint32_t idx = 0;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	617b      	str	r3, [r7, #20]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009b5c:	4b4a      	ldr	r3, [pc, #296]	; (8009c88 <low_level_init+0x13c>)
 8009b5e:	4a4b      	ldr	r2, [pc, #300]	; (8009c8c <low_level_init+0x140>)
 8009b60:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8009b62:	2300      	movs	r3, #0
 8009b64:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8009b66:	2380      	movs	r3, #128	; 0x80
 8009b68:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8009b6a:	23e1      	movs	r3, #225	; 0xe1
 8009b6c:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8009b72:	2300      	movs	r3, #0
 8009b74:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8009b76:	2300      	movs	r3, #0
 8009b78:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8009b7a:	4a43      	ldr	r2, [pc, #268]	; (8009c88 <low_level_init+0x13c>)
 8009b7c:	f107 030c 	add.w	r3, r7, #12
 8009b80:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8009b82:	4b41      	ldr	r3, [pc, #260]	; (8009c88 <low_level_init+0x13c>)
 8009b84:	2201      	movs	r2, #1
 8009b86:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8009b88:	4b3f      	ldr	r3, [pc, #252]	; (8009c88 <low_level_init+0x13c>)
 8009b8a:	4a41      	ldr	r2, [pc, #260]	; (8009c90 <low_level_init+0x144>)
 8009b8c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8009b8e:	4b3e      	ldr	r3, [pc, #248]	; (8009c88 <low_level_init+0x13c>)
 8009b90:	4a40      	ldr	r2, [pc, #256]	; (8009c94 <low_level_init+0x148>)
 8009b92:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8009b94:	4b3c      	ldr	r3, [pc, #240]	; (8009c88 <low_level_init+0x13c>)
 8009b96:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009b9a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009b9c:	483a      	ldr	r0, [pc, #232]	; (8009c88 <low_level_init+0x13c>)
 8009b9e:	f7f8 feb3 	bl	8002908 <HAL_ETH_Init>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	74fb      	strb	r3, [r7, #19]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8009ba6:	2234      	movs	r2, #52	; 0x34
 8009ba8:	2100      	movs	r1, #0
 8009baa:	483b      	ldr	r0, [pc, #236]	; (8009c98 <low_level_init+0x14c>)
 8009bac:	f00b f87c 	bl	8014ca8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8009bb0:	4b39      	ldr	r3, [pc, #228]	; (8009c98 <low_level_init+0x14c>)
 8009bb2:	2221      	movs	r2, #33	; 0x21
 8009bb4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8009bb6:	4b38      	ldr	r3, [pc, #224]	; (8009c98 <low_level_init+0x14c>)
 8009bb8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8009bbc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8009bbe:	4b36      	ldr	r3, [pc, #216]	; (8009c98 <low_level_init+0x14c>)
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8009bc4:	4835      	ldr	r0, [pc, #212]	; (8009c9c <low_level_init+0x150>)
 8009bc6:	f000 ff49 	bl	800aa5c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2206      	movs	r2, #6
 8009bce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009bd2:	4b2d      	ldr	r3, [pc, #180]	; (8009c88 <low_level_init+0x13c>)
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	781a      	ldrb	r2, [r3, #0]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009bde:	4b2a      	ldr	r3, [pc, #168]	; (8009c88 <low_level_init+0x13c>)
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	785a      	ldrb	r2, [r3, #1]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009bea:	4b27      	ldr	r3, [pc, #156]	; (8009c88 <low_level_init+0x13c>)
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	789a      	ldrb	r2, [r3, #2]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009bf6:	4b24      	ldr	r3, [pc, #144]	; (8009c88 <low_level_init+0x13c>)
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	78da      	ldrb	r2, [r3, #3]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009c02:	4b21      	ldr	r3, [pc, #132]	; (8009c88 <low_level_init+0x13c>)
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	791a      	ldrb	r2, [r3, #4]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009c0e:	4b1e      	ldr	r3, [pc, #120]	; (8009c88 <low_level_init+0x13c>)
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	795a      	ldrb	r2, [r3, #5]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009c20:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009c28:	f043 030a 	orr.w	r3, r3, #10
 8009c2c:	b2da      	uxtb	r2, r3
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8009c34:	2300      	movs	r3, #0
 8009c36:	617b      	str	r3, [r7, #20]
 8009c38:	e00e      	b.n	8009c58 <low_level_init+0x10c>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 8009c3a:	697a      	ldr	r2, [r7, #20]
 8009c3c:	4613      	mov	r3, r2
 8009c3e:	005b      	lsls	r3, r3, #1
 8009c40:	4413      	add	r3, r2
 8009c42:	025b      	lsls	r3, r3, #9
 8009c44:	4a16      	ldr	r2, [pc, #88]	; (8009ca0 <low_level_init+0x154>)
 8009c46:	441a      	add	r2, r3
 8009c48:	2300      	movs	r3, #0
 8009c4a:	6979      	ldr	r1, [r7, #20]
 8009c4c:	480e      	ldr	r0, [pc, #56]	; (8009c88 <low_level_init+0x13c>)
 8009c4e:	f7f8 ff35 	bl	8002abc <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	3301      	adds	r3, #1
 8009c56:	617b      	str	r3, [r7, #20]
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	2b03      	cmp	r3, #3
 8009c5c:	d9ed      	bls.n	8009c3a <low_level_init+0xee>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8009c5e:	4911      	ldr	r1, [pc, #68]	; (8009ca4 <low_level_init+0x158>)
 8009c60:	4811      	ldr	r0, [pc, #68]	; (8009ca8 <low_level_init+0x15c>)
 8009c62:	f7f8 fac6 	bl	80021f2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8009c66:	4810      	ldr	r0, [pc, #64]	; (8009ca8 <low_level_init+0x15c>)
 8009c68:	f7f8 faf5 	bl	8002256 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8009c6c:	7cfb      	ldrb	r3, [r7, #19]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d103      	bne.n	8009c7a <low_level_init+0x12e>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 f9d4 	bl	800a020 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8009c78:	e001      	b.n	8009c7e <low_level_init+0x132>
    Error_Handler();
 8009c7a:	f7f7 fd06 	bl	800168a <Error_Handler>
}
 8009c7e:	bf00      	nop
 8009c80:	3718      	adds	r7, #24
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	24000668 	.word	0x24000668
 8009c8c:	40028000 	.word	0x40028000
 8009c90:	30000080 	.word	0x30000080
 8009c94:	30000000 	.word	0x30000000
 8009c98:	240006f0 	.word	0x240006f0
 8009c9c:	08019038 	.word	0x08019038
 8009ca0:	30000100 	.word	0x30000100
 8009ca4:	24000018 	.word	0x24000018
 8009ca8:	24000648 	.word	0x24000648

08009cac <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b092      	sub	sp, #72	; 0x48
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8009cc0:	f107 030c 	add.w	r3, r7, #12
 8009cc4:	2230      	movs	r2, #48	; 0x30
 8009cc6:	2100      	movs	r1, #0
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f00a ffed 	bl	8014ca8 <memset>

  for(q = p; q != NULL; q = q->next)
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	643b      	str	r3, [r7, #64]	; 0x40
 8009cd2:	e049      	b.n	8009d68 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 8009cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cd6:	2b03      	cmp	r3, #3
 8009cd8:	d902      	bls.n	8009ce0 <low_level_output+0x34>
      return ERR_IF;
 8009cda:	f06f 030b 	mvn.w	r3, #11
 8009cde:	e056      	b.n	8009d8e <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 8009ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ce2:	6859      	ldr	r1, [r3, #4]
 8009ce4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ce6:	4613      	mov	r3, r2
 8009ce8:	005b      	lsls	r3, r3, #1
 8009cea:	4413      	add	r3, r2
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009cf2:	4413      	add	r3, r2
 8009cf4:	3b3c      	subs	r3, #60	; 0x3c
 8009cf6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8009cf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cfa:	895b      	ldrh	r3, [r3, #10]
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d00:	4613      	mov	r3, r2
 8009d02:	005b      	lsls	r3, r3, #1
 8009d04:	4413      	add	r3, r2
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009d0c:	4413      	add	r3, r2
 8009d0e:	3b38      	subs	r3, #56	; 0x38
 8009d10:	6019      	str	r1, [r3, #0]

    if(i>0)
 8009d12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d012      	beq.n	8009d3e <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8009d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d1a:	1e5a      	subs	r2, r3, #1
 8009d1c:	f107 000c 	add.w	r0, r7, #12
 8009d20:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009d22:	460b      	mov	r3, r1
 8009d24:	005b      	lsls	r3, r3, #1
 8009d26:	440b      	add	r3, r1
 8009d28:	009b      	lsls	r3, r3, #2
 8009d2a:	18c1      	adds	r1, r0, r3
 8009d2c:	4613      	mov	r3, r2
 8009d2e:	005b      	lsls	r3, r3, #1
 8009d30:	4413      	add	r3, r2
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009d38:	4413      	add	r3, r2
 8009d3a:	3b34      	subs	r3, #52	; 0x34
 8009d3c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8009d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d10a      	bne.n	8009d5c <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 8009d46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d48:	4613      	mov	r3, r2
 8009d4a:	005b      	lsls	r3, r3, #1
 8009d4c:	4413      	add	r3, r2
 8009d4e:	009b      	lsls	r3, r3, #2
 8009d50:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009d54:	4413      	add	r3, r2
 8009d56:	3b34      	subs	r3, #52	; 0x34
 8009d58:	2200      	movs	r2, #0
 8009d5a:	601a      	str	r2, [r3, #0]
    }

    i++;
 8009d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d5e:	3301      	adds	r3, #1
 8009d60:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8009d62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	643b      	str	r3, [r7, #64]	; 0x40
 8009d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d1b2      	bne.n	8009cd4 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	891b      	ldrh	r3, [r3, #8]
 8009d72:	461a      	mov	r2, r3
 8009d74:	4b08      	ldr	r3, [pc, #32]	; (8009d98 <low_level_output+0xec>)
 8009d76:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8009d78:	4a07      	ldr	r2, [pc, #28]	; (8009d98 <low_level_output+0xec>)
 8009d7a:	f107 030c 	add.w	r3, r7, #12
 8009d7e:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8009d80:	2214      	movs	r2, #20
 8009d82:	4905      	ldr	r1, [pc, #20]	; (8009d98 <low_level_output+0xec>)
 8009d84:	4805      	ldr	r0, [pc, #20]	; (8009d9c <low_level_output+0xf0>)
 8009d86:	f7f8 ff86 	bl	8002c96 <HAL_ETH_Transmit>

  return errval;
 8009d8a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3748      	adds	r7, #72	; 0x48
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	240006f0 	.word	0x240006f0
 8009d9c:	24000668 	.word	0x24000668

08009da0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b098      	sub	sp, #96	; 0x60
 8009da4:	af02      	add	r7, sp, #8
 8009da6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009da8:	2300      	movs	r3, #0
 8009daa:	653b      	str	r3, [r7, #80]	; 0x50
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 8009dac:	2300      	movs	r3, #0
 8009dae:	60bb      	str	r3, [r7, #8]
 8009db0:	2300      	movs	r3, #0
 8009db2:	657b      	str	r3, [r7, #84]	; 0x54
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8009db4:	f107 030c 	add.w	r3, r7, #12
 8009db8:	2230      	movs	r2, #48	; 0x30
 8009dba:	2100      	movs	r1, #0
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f00a ff73 	bl	8014ca8 <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	657b      	str	r3, [r7, #84]	; 0x54
 8009dc6:	e015      	b.n	8009df4 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 8009dc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009dca:	1c5a      	adds	r2, r3, #1
 8009dcc:	f107 010c 	add.w	r1, r7, #12
 8009dd0:	4613      	mov	r3, r2
 8009dd2:	005b      	lsls	r3, r3, #1
 8009dd4:	4413      	add	r3, r2
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	4419      	add	r1, r3
 8009dda:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009ddc:	4613      	mov	r3, r2
 8009dde:	005b      	lsls	r3, r3, #1
 8009de0:	4413      	add	r3, r2
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009de8:	4413      	add	r3, r2
 8009dea:	3b44      	subs	r3, #68	; 0x44
 8009dec:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8009dee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009df0:	3301      	adds	r3, #1
 8009df2:	657b      	str	r3, [r7, #84]	; 0x54
 8009df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009df6:	2b02      	cmp	r3, #2
 8009df8:	d9e6      	bls.n	8009dc8 <low_level_input+0x28>
  }

  if (HAL_ETH_IsRxDataAvailable(&heth))
 8009dfa:	482b      	ldr	r0, [pc, #172]	; (8009ea8 <low_level_input+0x108>)
 8009dfc:	f7f8 ffd4 	bl	8002da8 <HAL_ETH_IsRxDataAvailable>
 8009e00:	4603      	mov	r3, r0
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d04a      	beq.n	8009e9c <low_level_input+0xfc>
  {
    HAL_ETH_GetRxDataBuffer(&heth, RxBuff);
 8009e06:	f107 030c 	add.w	r3, r7, #12
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	4826      	ldr	r0, [pc, #152]	; (8009ea8 <low_level_input+0x108>)
 8009e0e:	f7f9 f8bb 	bl	8002f88 <HAL_ETH_GetRxDataBuffer>
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 8009e12:	f107 0308 	add.w	r3, r7, #8
 8009e16:	4619      	mov	r1, r3
 8009e18:	4823      	ldr	r0, [pc, #140]	; (8009ea8 <low_level_input+0x108>)
 8009e1a:	f7f9 f953 	bl	80030c4 <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 8009e1e:	4822      	ldr	r0, [pc, #136]	; (8009ea8 <low_level_input+0x108>)
 8009e20:	f7f9 f983 	bl	800312a <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	68ba      	ldr	r2, [r7, #8]
 8009e28:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e2a:	647a      	str	r2, [r7, #68]	; 0x44
    if ( dsize > 0 ) { 
 8009e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	dd1d      	ble.n	8009e6e <low_level_input+0xce>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8009e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e34:	f003 021f 	and.w	r2, r3, #31
 8009e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e3a:	4413      	add	r3, r2
 8009e3c:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8009e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e40:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 8009e42:	f3bf 8f4f 	dsb	sy
}
 8009e46:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8009e48:	4a18      	ldr	r2, [pc, #96]	; (8009eac <low_level_input+0x10c>)
 8009e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e4c:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8009e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e52:	3320      	adds	r3, #32
 8009e54:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8009e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e58:	3b20      	subs	r3, #32
 8009e5a:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 8009e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	dcf2      	bgt.n	8009e48 <low_level_input+0xa8>
  __ASM volatile ("dsb 0xF":::"memory");
 8009e62:	f3bf 8f4f 	dsb	sy
}
 8009e66:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009e68:	f3bf 8f6f 	isb	sy
}
 8009e6c:	bf00      	nop
}
 8009e6e:	bf00      	nop
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 8009e70:	480f      	ldr	r0, [pc, #60]	; (8009eb0 <low_level_input+0x110>)
 8009e72:	f000 fe67 	bl	800ab44 <memp_malloc_pool>
 8009e76:	64f8      	str	r0, [r7, #76]	; 0x4c
    custom_pbuf->custom_free_function = pbuf_free_custom;
 8009e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e7a:	4a0e      	ldr	r2, [pc, #56]	; (8009eb4 <low_level_input+0x114>)
 8009e7c:	611a      	str	r2, [r3, #16]

    p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	b299      	uxth	r1, r3
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	68ba      	ldr	r2, [r7, #8]
 8009e86:	b292      	uxth	r2, r2
 8009e88:	9201      	str	r2, [sp, #4]
 8009e8a:	9300      	str	r3, [sp, #0]
 8009e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e8e:	2241      	movs	r2, #65	; 0x41
 8009e90:	2000      	movs	r0, #0
 8009e92:	f001 fba5 	bl	800b5e0 <pbuf_alloced_custom>
 8009e96:	6538      	str	r0, [r7, #80]	; 0x50

    return p;
 8009e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e9a:	e000      	b.n	8009e9e <low_level_input+0xfe>
  }
  else
  {
    return NULL;
 8009e9c:	2300      	movs	r3, #0
  }
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3758      	adds	r7, #88	; 0x58
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	24000668 	.word	0x24000668
 8009eac:	e000ed00 	.word	0xe000ed00
 8009eb0:	08019038 	.word	0x08019038
 8009eb4:	08009f55 	.word	0x08009f55

08009eb8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b084      	sub	sp, #16
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f7ff ff6d 	bl	8009da0 <low_level_input>
 8009ec6:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d010      	beq.n	8009ef0 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	6879      	ldr	r1, [r7, #4]
 8009ed4:	68f8      	ldr	r0, [r7, #12]
 8009ed6:	4798      	blx	r3
 8009ed8:	4603      	mov	r3, r0
 8009eda:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8009edc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d006      	beq.n	8009ef2 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8009ee4:	68f8      	ldr	r0, [r7, #12]
 8009ee6:	f001 fd35 	bl	800b954 <pbuf_free>
    p = NULL;
 8009eea:	2300      	movs	r3, #0
 8009eec:	60fb      	str	r3, [r7, #12]
 8009eee:	e000      	b.n	8009ef2 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8009ef0:	bf00      	nop
  }

}
 8009ef2:	3710      	adds	r7, #16
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d106      	bne.n	8009f14 <ethernetif_init+0x1c>
 8009f06:	4b0e      	ldr	r3, [pc, #56]	; (8009f40 <ethernetif_init+0x48>)
 8009f08:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8009f0c:	490d      	ldr	r1, [pc, #52]	; (8009f44 <ethernetif_init+0x4c>)
 8009f0e:	480e      	ldr	r0, [pc, #56]	; (8009f48 <ethernetif_init+0x50>)
 8009f10:	f00a fed2 	bl	8014cb8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2273      	movs	r2, #115	; 0x73
 8009f18:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2274      	movs	r2, #116	; 0x74
 8009f20:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	4a09      	ldr	r2, [pc, #36]	; (8009f4c <ethernetif_init+0x54>)
 8009f28:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	4a08      	ldr	r2, [pc, #32]	; (8009f50 <ethernetif_init+0x58>)
 8009f2e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f7ff fe0b 	bl	8009b4c <low_level_init>

  return ERR_OK;
 8009f36:	2300      	movs	r3, #0
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3708      	adds	r7, #8
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}
 8009f40:	08015e30 	.word	0x08015e30
 8009f44:	08015e4c 	.word	0x08015e4c
 8009f48:	08015e5c 	.word	0x08015e5c
 8009f4c:	08012dd1 	.word	0x08012dd1
 8009f50:	08009cad 	.word	0x08009cad

08009f54 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b084      	sub	sp, #16
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8009f60:	68f9      	ldr	r1, [r7, #12]
 8009f62:	4803      	ldr	r0, [pc, #12]	; (8009f70 <pbuf_free_custom+0x1c>)
 8009f64:	f000 fe5c 	bl	800ac20 <memp_free_pool>
}
 8009f68:	bf00      	nop
 8009f6a:	3710      	adds	r7, #16
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	08019038 	.word	0x08019038

08009f74 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009f78:	f7f8 fb22 	bl	80025c0 <HAL_GetTick>
 8009f7c:	4603      	mov	r3, r0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	bd80      	pop	{r7, pc}
	...

08009f84 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8009f88:	4802      	ldr	r0, [pc, #8]	; (8009f94 <ETH_PHY_IO_Init+0x10>)
 8009f8a:	f7f9 fbdb 	bl	8003744 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8009f8e:	2300      	movs	r3, #0
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	24000668 	.word	0x24000668

08009f98 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	af00      	add	r7, sp, #0
  return 0;
 8009f9c:	2300      	movs	r3, #0
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b084      	sub	sp, #16
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	68ba      	ldr	r2, [r7, #8]
 8009fb8:	68f9      	ldr	r1, [r7, #12]
 8009fba:	4807      	ldr	r0, [pc, #28]	; (8009fd8 <ETH_PHY_IO_ReadReg+0x30>)
 8009fbc:	f7f9 f92b 	bl	8003216 <HAL_ETH_ReadPHYRegister>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d002      	beq.n	8009fcc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8009fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8009fca:	e000      	b.n	8009fce <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8009fcc:	2300      	movs	r3, #0
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3710      	adds	r7, #16
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	24000668 	.word	0x24000668

08009fdc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	68ba      	ldr	r2, [r7, #8]
 8009fec:	68f9      	ldr	r1, [r7, #12]
 8009fee:	4807      	ldr	r0, [pc, #28]	; (800a00c <ETH_PHY_IO_WriteReg+0x30>)
 8009ff0:	f7f9 f966 	bl	80032c0 <HAL_ETH_WritePHYRegister>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d002      	beq.n	800a000 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8009ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8009ffe:	e000      	b.n	800a002 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800a000:	2300      	movs	r3, #0
}
 800a002:	4618      	mov	r0, r3
 800a004:	3710      	adds	r7, #16
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop
 800a00c:	24000668 	.word	0x24000668

0800a010 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a014:	f7f8 fad4 	bl	80025c0 <HAL_GetTick>
 800a018:	4603      	mov	r3, r0
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	bd80      	pop	{r7, pc}
	...

0800a020 <ethernet_link_check_state>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b0a0      	sub	sp, #128	; 0x80
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 800a028:	2300      	movs	r3, #0
 800a02a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a02c:	2300      	movs	r3, #0
 800a02e:	67bb      	str	r3, [r7, #120]	; 0x78
 800a030:	2300      	movs	r3, #0
 800a032:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a034:	483a      	ldr	r0, [pc, #232]	; (800a120 <ethernet_link_check_state+0x100>)
 800a036:	f7f8 f9b6 	bl	80023a6 <LAN8742_GetLinkState>
 800a03a:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a042:	089b      	lsrs	r3, r3, #2
 800a044:	f003 0301 	and.w	r3, r3, #1
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d00c      	beq.n	800a068 <ethernet_link_check_state+0x48>
 800a04e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a050:	2b01      	cmp	r3, #1
 800a052:	dc09      	bgt.n	800a068 <ethernet_link_check_state+0x48>
  {
    HAL_ETH_Stop(&heth);
 800a054:	4833      	ldr	r0, [pc, #204]	; (800a124 <ethernet_link_check_state+0x104>)
 800a056:	f7f8 fdce 	bl	8002bf6 <HAL_ETH_Stop>
    netif_set_down(netif);
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f001 f864 	bl	800b128 <netif_set_down>
    netif_set_link_down(netif);
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f001 f8c7 	bl	800b1f4 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800a066:	e056      	b.n	800a116 <ethernet_link_check_state+0xf6>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a06e:	f003 0304 	and.w	r3, r3, #4
 800a072:	2b00      	cmp	r3, #0
 800a074:	d14f      	bne.n	800a116 <ethernet_link_check_state+0xf6>
 800a076:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a078:	2b01      	cmp	r3, #1
 800a07a:	dd4c      	ble.n	800a116 <ethernet_link_check_state+0xf6>
 800a07c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a07e:	3b02      	subs	r3, #2
 800a080:	2b03      	cmp	r3, #3
 800a082:	d82b      	bhi.n	800a0dc <ethernet_link_check_state+0xbc>
 800a084:	a201      	add	r2, pc, #4	; (adr r2, 800a08c <ethernet_link_check_state+0x6c>)
 800a086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a08a:	bf00      	nop
 800a08c:	0800a09d 	.word	0x0800a09d
 800a090:	0800a0af 	.word	0x0800a0af
 800a094:	0800a0bf 	.word	0x0800a0bf
 800a098:	0800a0cf 	.word	0x0800a0cf
      duplex = ETH_FULLDUPLEX_MODE;
 800a09c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a0a0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a0a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a0a6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a0ac:	e017      	b.n	800a0de <ethernet_link_check_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a0b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a0b6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a0bc:	e00f      	b.n	800a0de <ethernet_link_check_state+0xbe>
      duplex = ETH_FULLDUPLEX_MODE;
 800a0be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a0c2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a0cc:	e007      	b.n	800a0de <ethernet_link_check_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a0da:	e000      	b.n	800a0de <ethernet_link_check_state+0xbe>
      break;
 800a0dc:	bf00      	nop
    if(linkchanged)
 800a0de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d018      	beq.n	800a116 <ethernet_link_check_state+0xf6>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a0e4:	f107 030c 	add.w	r3, r7, #12
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	480e      	ldr	r0, [pc, #56]	; (800a124 <ethernet_link_check_state+0x104>)
 800a0ec:	f7f9 f93c 	bl	8003368 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800a0f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0f2:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800a0f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0f6:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a0f8:	f107 030c 	add.w	r3, r7, #12
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	4809      	ldr	r0, [pc, #36]	; (800a124 <ethernet_link_check_state+0x104>)
 800a100:	f7f9 fb06 	bl	8003710 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800a104:	4807      	ldr	r0, [pc, #28]	; (800a124 <ethernet_link_check_state+0x104>)
 800a106:	f7f8 fd1a 	bl	8002b3e <HAL_ETH_Start>
      netif_set_up(netif);
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 ffa0 	bl	800b050 <netif_set_up>
      netif_set_link_up(netif);
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f001 f83b 	bl	800b18c <netif_set_link_up>
}
 800a116:	bf00      	nop
 800a118:	3780      	adds	r7, #128	; 0x80
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	24000648 	.word	0x24000648
 800a124:	24000668 	.word	0x24000668

0800a128 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	4603      	mov	r3, r0
 800a130:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a132:	88fb      	ldrh	r3, [r7, #6]
 800a134:	021b      	lsls	r3, r3, #8
 800a136:	b21a      	sxth	r2, r3
 800a138:	88fb      	ldrh	r3, [r7, #6]
 800a13a:	0a1b      	lsrs	r3, r3, #8
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	b21b      	sxth	r3, r3
 800a140:	4313      	orrs	r3, r2
 800a142:	b21b      	sxth	r3, r3
 800a144:	b29b      	uxth	r3, r3
}
 800a146:	4618      	mov	r0, r3
 800a148:	370c      	adds	r7, #12
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr

0800a152 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a152:	b480      	push	{r7}
 800a154:	b083      	sub	sp, #12
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	061a      	lsls	r2, r3, #24
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	021b      	lsls	r3, r3, #8
 800a162:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a166:	431a      	orrs	r2, r3
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	0a1b      	lsrs	r3, r3, #8
 800a16c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a170:	431a      	orrs	r2, r3
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	0e1b      	lsrs	r3, r3, #24
 800a176:	4313      	orrs	r3, r2
}
 800a178:	4618      	mov	r0, r3
 800a17a:	370c      	adds	r7, #12
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr

0800a184 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800a184:	b480      	push	{r7}
 800a186:	b089      	sub	sp, #36	; 0x24
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800a192:	2300      	movs	r3, #0
 800a194:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800a196:	2300      	movs	r3, #0
 800a198:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800a19a:	69fb      	ldr	r3, [r7, #28]
 800a19c:	f003 0301 	and.w	r3, r3, #1
 800a1a0:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d00d      	beq.n	800a1c4 <lwip_standard_chksum+0x40>
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	dd0a      	ble.n	800a1c4 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800a1ae:	69fa      	ldr	r2, [r7, #28]
 800a1b0:	1c53      	adds	r3, r2, #1
 800a1b2:	61fb      	str	r3, [r7, #28]
 800a1b4:	f107 030e 	add.w	r3, r7, #14
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	7812      	ldrb	r2, [r2, #0]
 800a1bc:	701a      	strb	r2, [r3, #0]
    len--;
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800a1c4:	69fb      	ldr	r3, [r7, #28]
 800a1c6:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800a1c8:	e00a      	b.n	800a1e0 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800a1ca:	69bb      	ldr	r3, [r7, #24]
 800a1cc:	1c9a      	adds	r2, r3, #2
 800a1ce:	61ba      	str	r2, [r7, #24]
 800a1d0:	881b      	ldrh	r3, [r3, #0]
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	4413      	add	r3, r2
 800a1d8:	617b      	str	r3, [r7, #20]
    len -= 2;
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	3b02      	subs	r3, #2
 800a1de:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	dcf1      	bgt.n	800a1ca <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	dd04      	ble.n	800a1f6 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800a1ec:	f107 030e 	add.w	r3, r7, #14
 800a1f0:	69ba      	ldr	r2, [r7, #24]
 800a1f2:	7812      	ldrb	r2, [r2, #0]
 800a1f4:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800a1f6:	89fb      	ldrh	r3, [r7, #14]
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	4413      	add	r3, r2
 800a1fe:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	0c1a      	lsrs	r2, r3, #16
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	b29b      	uxth	r3, r3
 800a208:	4413      	add	r3, r2
 800a20a:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	0c1a      	lsrs	r2, r3, #16
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	b29b      	uxth	r3, r3
 800a214:	4413      	add	r3, r2
 800a216:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d007      	beq.n	800a22e <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	021b      	lsls	r3, r3, #8
 800a222:	b29a      	uxth	r2, r3
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	0a1b      	lsrs	r3, r3, #8
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	4313      	orrs	r3, r2
 800a22c:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	b29b      	uxth	r3, r3
}
 800a232:	4618      	mov	r0, r3
 800a234:	3724      	adds	r7, #36	; 0x24
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr

0800a23e <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800a23e:	b580      	push	{r7, lr}
 800a240:	b082      	sub	sp, #8
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
 800a246:	460b      	mov	r3, r1
 800a248:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800a24a:	887b      	ldrh	r3, [r7, #2]
 800a24c:	4619      	mov	r1, r3
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f7ff ff98 	bl	800a184 <lwip_standard_chksum>
 800a254:	4603      	mov	r3, r0
 800a256:	43db      	mvns	r3, r3
 800a258:	b29b      	uxth	r3, r3
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3708      	adds	r7, #8
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}

0800a262 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800a262:	b580      	push	{r7, lr}
 800a264:	b086      	sub	sp, #24
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800a26a:	2300      	movs	r3, #0
 800a26c:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800a26e:	2300      	movs	r3, #0
 800a270:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	613b      	str	r3, [r7, #16]
 800a276:	e02b      	b.n	800a2d0 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	685a      	ldr	r2, [r3, #4]
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	895b      	ldrh	r3, [r3, #10]
 800a280:	4619      	mov	r1, r3
 800a282:	4610      	mov	r0, r2
 800a284:	f7ff ff7e 	bl	800a184 <lwip_standard_chksum>
 800a288:	4603      	mov	r3, r0
 800a28a:	461a      	mov	r2, r3
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	4413      	add	r3, r2
 800a290:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	0c1a      	lsrs	r2, r3, #16
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	b29b      	uxth	r3, r3
 800a29a:	4413      	add	r3, r2
 800a29c:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	895b      	ldrh	r3, [r3, #10]
 800a2a2:	f003 0301 	and.w	r3, r3, #1
 800a2a6:	b29b      	uxth	r3, r3
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d00e      	beq.n	800a2ca <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	bf0c      	ite	eq
 800a2b2:	2301      	moveq	r3, #1
 800a2b4:	2300      	movne	r3, #0
 800a2b6:	b2db      	uxtb	r3, r3
 800a2b8:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	021b      	lsls	r3, r3, #8
 800a2be:	b29a      	uxth	r2, r3
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	0a1b      	lsrs	r3, r3, #8
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	613b      	str	r3, [r7, #16]
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d1d0      	bne.n	800a278 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d007      	beq.n	800a2ec <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	021b      	lsls	r3, r3, #8
 800a2e0:	b29a      	uxth	r2, r3
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	0a1b      	lsrs	r3, r3, #8
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	43db      	mvns	r3, r3
 800a2f2:	b29b      	uxth	r3, r3
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3718      	adds	r7, #24
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b082      	sub	sp, #8
 800a300:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a302:	2300      	movs	r3, #0
 800a304:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800a306:	f000 f8d5 	bl	800a4b4 <mem_init>
  memp_init();
 800a30a:	f000 fbd7 	bl	800aabc <memp_init>
  pbuf_init();
  netif_init();
 800a30e:	f000 fcd5 	bl	800acbc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a312:	f007 ff57 	bl	80121c4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a316:	f001 fdbb 	bl	800be90 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a31a:	f007 fec9 	bl	80120b0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a31e:	bf00      	nop
 800a320:	3708      	adds	r7, #8
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
	...

0800a328 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	4603      	mov	r3, r0
 800a330:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a332:	4b05      	ldr	r3, [pc, #20]	; (800a348 <ptr_to_mem+0x20>)
 800a334:	681a      	ldr	r2, [r3, #0]
 800a336:	88fb      	ldrh	r3, [r7, #6]
 800a338:	4413      	add	r3, r2
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	370c      	adds	r7, #12
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr
 800a346:	bf00      	nop
 800a348:	240000c0 	.word	0x240000c0

0800a34c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b083      	sub	sp, #12
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a354:	4b05      	ldr	r3, [pc, #20]	; (800a36c <mem_to_ptr+0x20>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	1ad3      	subs	r3, r2, r3
 800a35c:	b29b      	uxth	r3, r3
}
 800a35e:	4618      	mov	r0, r3
 800a360:	370c      	adds	r7, #12
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr
 800a36a:	bf00      	nop
 800a36c:	240000c0 	.word	0x240000c0

0800a370 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a370:	b590      	push	{r4, r7, lr}
 800a372:	b085      	sub	sp, #20
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a378:	4b45      	ldr	r3, [pc, #276]	; (800a490 <plug_holes+0x120>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	429a      	cmp	r2, r3
 800a380:	d206      	bcs.n	800a390 <plug_holes+0x20>
 800a382:	4b44      	ldr	r3, [pc, #272]	; (800a494 <plug_holes+0x124>)
 800a384:	f240 12df 	movw	r2, #479	; 0x1df
 800a388:	4943      	ldr	r1, [pc, #268]	; (800a498 <plug_holes+0x128>)
 800a38a:	4844      	ldr	r0, [pc, #272]	; (800a49c <plug_holes+0x12c>)
 800a38c:	f00a fc94 	bl	8014cb8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a390:	4b43      	ldr	r3, [pc, #268]	; (800a4a0 <plug_holes+0x130>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	429a      	cmp	r2, r3
 800a398:	d306      	bcc.n	800a3a8 <plug_holes+0x38>
 800a39a:	4b3e      	ldr	r3, [pc, #248]	; (800a494 <plug_holes+0x124>)
 800a39c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a3a0:	4940      	ldr	r1, [pc, #256]	; (800a4a4 <plug_holes+0x134>)
 800a3a2:	483e      	ldr	r0, [pc, #248]	; (800a49c <plug_holes+0x12c>)
 800a3a4:	f00a fc88 	bl	8014cb8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	791b      	ldrb	r3, [r3, #4]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d006      	beq.n	800a3be <plug_holes+0x4e>
 800a3b0:	4b38      	ldr	r3, [pc, #224]	; (800a494 <plug_holes+0x124>)
 800a3b2:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a3b6:	493c      	ldr	r1, [pc, #240]	; (800a4a8 <plug_holes+0x138>)
 800a3b8:	4838      	ldr	r0, [pc, #224]	; (800a49c <plug_holes+0x12c>)
 800a3ba:	f00a fc7d 	bl	8014cb8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	881b      	ldrh	r3, [r3, #0]
 800a3c2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a3c6:	d906      	bls.n	800a3d6 <plug_holes+0x66>
 800a3c8:	4b32      	ldr	r3, [pc, #200]	; (800a494 <plug_holes+0x124>)
 800a3ca:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a3ce:	4937      	ldr	r1, [pc, #220]	; (800a4ac <plug_holes+0x13c>)
 800a3d0:	4832      	ldr	r0, [pc, #200]	; (800a49c <plug_holes+0x12c>)
 800a3d2:	f00a fc71 	bl	8014cb8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	881b      	ldrh	r3, [r3, #0]
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7ff ffa4 	bl	800a328 <ptr_to_mem>
 800a3e0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d024      	beq.n	800a434 <plug_holes+0xc4>
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	791b      	ldrb	r3, [r3, #4]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d120      	bne.n	800a434 <plug_holes+0xc4>
 800a3f2:	4b2b      	ldr	r3, [pc, #172]	; (800a4a0 <plug_holes+0x130>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	68fa      	ldr	r2, [r7, #12]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d01b      	beq.n	800a434 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a3fc:	4b2c      	ldr	r3, [pc, #176]	; (800a4b0 <plug_holes+0x140>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	68fa      	ldr	r2, [r7, #12]
 800a402:	429a      	cmp	r2, r3
 800a404:	d102      	bne.n	800a40c <plug_holes+0x9c>
      lfree = mem;
 800a406:	4a2a      	ldr	r2, [pc, #168]	; (800a4b0 <plug_holes+0x140>)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	881a      	ldrh	r2, [r3, #0]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	881b      	ldrh	r3, [r3, #0]
 800a418:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a41c:	d00a      	beq.n	800a434 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	881b      	ldrh	r3, [r3, #0]
 800a422:	4618      	mov	r0, r3
 800a424:	f7ff ff80 	bl	800a328 <ptr_to_mem>
 800a428:	4604      	mov	r4, r0
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f7ff ff8e 	bl	800a34c <mem_to_ptr>
 800a430:	4603      	mov	r3, r0
 800a432:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	885b      	ldrh	r3, [r3, #2]
 800a438:	4618      	mov	r0, r3
 800a43a:	f7ff ff75 	bl	800a328 <ptr_to_mem>
 800a43e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a440:	68ba      	ldr	r2, [r7, #8]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	429a      	cmp	r2, r3
 800a446:	d01f      	beq.n	800a488 <plug_holes+0x118>
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	791b      	ldrb	r3, [r3, #4]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d11b      	bne.n	800a488 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a450:	4b17      	ldr	r3, [pc, #92]	; (800a4b0 <plug_holes+0x140>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	429a      	cmp	r2, r3
 800a458:	d102      	bne.n	800a460 <plug_holes+0xf0>
      lfree = pmem;
 800a45a:	4a15      	ldr	r2, [pc, #84]	; (800a4b0 <plug_holes+0x140>)
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	881a      	ldrh	r2, [r3, #0]
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	881b      	ldrh	r3, [r3, #0]
 800a46c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a470:	d00a      	beq.n	800a488 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	881b      	ldrh	r3, [r3, #0]
 800a476:	4618      	mov	r0, r3
 800a478:	f7ff ff56 	bl	800a328 <ptr_to_mem>
 800a47c:	4604      	mov	r4, r0
 800a47e:	68b8      	ldr	r0, [r7, #8]
 800a480:	f7ff ff64 	bl	800a34c <mem_to_ptr>
 800a484:	4603      	mov	r3, r0
 800a486:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a488:	bf00      	nop
 800a48a:	3714      	adds	r7, #20
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd90      	pop	{r4, r7, pc}
 800a490:	240000c0 	.word	0x240000c0
 800a494:	08015e84 	.word	0x08015e84
 800a498:	08015eb4 	.word	0x08015eb4
 800a49c:	08015ecc 	.word	0x08015ecc
 800a4a0:	240000c4 	.word	0x240000c4
 800a4a4:	08015ef4 	.word	0x08015ef4
 800a4a8:	08015f10 	.word	0x08015f10
 800a4ac:	08015f2c 	.word	0x08015f2c
 800a4b0:	240000c8 	.word	0x240000c8

0800a4b4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a4ba:	4b16      	ldr	r3, [pc, #88]	; (800a514 <mem_init+0x60>)
 800a4bc:	4a16      	ldr	r2, [pc, #88]	; (800a518 <mem_init+0x64>)
 800a4be:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a4c0:	4b14      	ldr	r3, [pc, #80]	; (800a514 <mem_init+0x60>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a4cc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a4da:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800a4de:	f7ff ff23 	bl	800a328 <ptr_to_mem>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	4a0d      	ldr	r2, [pc, #52]	; (800a51c <mem_init+0x68>)
 800a4e6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a4e8:	4b0c      	ldr	r3, [pc, #48]	; (800a51c <mem_init+0x68>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a4f0:	4b0a      	ldr	r3, [pc, #40]	; (800a51c <mem_init+0x68>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a4f8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a4fa:	4b08      	ldr	r3, [pc, #32]	; (800a51c <mem_init+0x68>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a502:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a504:	4b03      	ldr	r3, [pc, #12]	; (800a514 <mem_init+0x60>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4a05      	ldr	r2, [pc, #20]	; (800a520 <mem_init+0x6c>)
 800a50a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800a50c:	bf00      	nop
 800a50e:	3708      	adds	r7, #8
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}
 800a514:	240000c0 	.word	0x240000c0
 800a518:	30002000 	.word	0x30002000
 800a51c:	240000c4 	.word	0x240000c4
 800a520:	240000c8 	.word	0x240000c8

0800a524 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b086      	sub	sp, #24
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f7ff ff0d 	bl	800a34c <mem_to_ptr>
 800a532:	4603      	mov	r3, r0
 800a534:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	881b      	ldrh	r3, [r3, #0]
 800a53a:	4618      	mov	r0, r3
 800a53c:	f7ff fef4 	bl	800a328 <ptr_to_mem>
 800a540:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	885b      	ldrh	r3, [r3, #2]
 800a546:	4618      	mov	r0, r3
 800a548:	f7ff feee 	bl	800a328 <ptr_to_mem>
 800a54c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	881b      	ldrh	r3, [r3, #0]
 800a552:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a556:	d818      	bhi.n	800a58a <mem_link_valid+0x66>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	885b      	ldrh	r3, [r3, #2]
 800a55c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a560:	d813      	bhi.n	800a58a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a566:	8afa      	ldrh	r2, [r7, #22]
 800a568:	429a      	cmp	r2, r3
 800a56a:	d004      	beq.n	800a576 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	881b      	ldrh	r3, [r3, #0]
 800a570:	8afa      	ldrh	r2, [r7, #22]
 800a572:	429a      	cmp	r2, r3
 800a574:	d109      	bne.n	800a58a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a576:	4b08      	ldr	r3, [pc, #32]	; (800a598 <mem_link_valid+0x74>)
 800a578:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a57a:	693a      	ldr	r2, [r7, #16]
 800a57c:	429a      	cmp	r2, r3
 800a57e:	d006      	beq.n	800a58e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	885b      	ldrh	r3, [r3, #2]
 800a584:	8afa      	ldrh	r2, [r7, #22]
 800a586:	429a      	cmp	r2, r3
 800a588:	d001      	beq.n	800a58e <mem_link_valid+0x6a>
    return 0;
 800a58a:	2300      	movs	r3, #0
 800a58c:	e000      	b.n	800a590 <mem_link_valid+0x6c>
  }
  return 1;
 800a58e:	2301      	movs	r3, #1
}
 800a590:	4618      	mov	r0, r3
 800a592:	3718      	adds	r7, #24
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}
 800a598:	240000c4 	.word	0x240000c4

0800a59c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d04c      	beq.n	800a644 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f003 0303 	and.w	r3, r3, #3
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d007      	beq.n	800a5c4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a5b4:	4b25      	ldr	r3, [pc, #148]	; (800a64c <mem_free+0xb0>)
 800a5b6:	f240 2273 	movw	r2, #627	; 0x273
 800a5ba:	4925      	ldr	r1, [pc, #148]	; (800a650 <mem_free+0xb4>)
 800a5bc:	4825      	ldr	r0, [pc, #148]	; (800a654 <mem_free+0xb8>)
 800a5be:	f00a fb7b 	bl	8014cb8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a5c2:	e040      	b.n	800a646 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	3b08      	subs	r3, #8
 800a5c8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a5ca:	4b23      	ldr	r3, [pc, #140]	; (800a658 <mem_free+0xbc>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	68fa      	ldr	r2, [r7, #12]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d306      	bcc.n	800a5e2 <mem_free+0x46>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f103 020c 	add.w	r2, r3, #12
 800a5da:	4b20      	ldr	r3, [pc, #128]	; (800a65c <mem_free+0xc0>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d907      	bls.n	800a5f2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a5e2:	4b1a      	ldr	r3, [pc, #104]	; (800a64c <mem_free+0xb0>)
 800a5e4:	f240 227f 	movw	r2, #639	; 0x27f
 800a5e8:	491d      	ldr	r1, [pc, #116]	; (800a660 <mem_free+0xc4>)
 800a5ea:	481a      	ldr	r0, [pc, #104]	; (800a654 <mem_free+0xb8>)
 800a5ec:	f00a fb64 	bl	8014cb8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a5f0:	e029      	b.n	800a646 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	791b      	ldrb	r3, [r3, #4]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d107      	bne.n	800a60a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a5fa:	4b14      	ldr	r3, [pc, #80]	; (800a64c <mem_free+0xb0>)
 800a5fc:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a600:	4918      	ldr	r1, [pc, #96]	; (800a664 <mem_free+0xc8>)
 800a602:	4814      	ldr	r0, [pc, #80]	; (800a654 <mem_free+0xb8>)
 800a604:	f00a fb58 	bl	8014cb8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a608:	e01d      	b.n	800a646 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800a60a:	68f8      	ldr	r0, [r7, #12]
 800a60c:	f7ff ff8a 	bl	800a524 <mem_link_valid>
 800a610:	4603      	mov	r3, r0
 800a612:	2b00      	cmp	r3, #0
 800a614:	d107      	bne.n	800a626 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a616:	4b0d      	ldr	r3, [pc, #52]	; (800a64c <mem_free+0xb0>)
 800a618:	f240 2295 	movw	r2, #661	; 0x295
 800a61c:	4912      	ldr	r1, [pc, #72]	; (800a668 <mem_free+0xcc>)
 800a61e:	480d      	ldr	r0, [pc, #52]	; (800a654 <mem_free+0xb8>)
 800a620:	f00a fb4a 	bl	8014cb8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a624:	e00f      	b.n	800a646 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2200      	movs	r2, #0
 800a62a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a62c:	4b0f      	ldr	r3, [pc, #60]	; (800a66c <mem_free+0xd0>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	68fa      	ldr	r2, [r7, #12]
 800a632:	429a      	cmp	r2, r3
 800a634:	d202      	bcs.n	800a63c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a636:	4a0d      	ldr	r2, [pc, #52]	; (800a66c <mem_free+0xd0>)
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a63c:	68f8      	ldr	r0, [r7, #12]
 800a63e:	f7ff fe97 	bl	800a370 <plug_holes>
 800a642:	e000      	b.n	800a646 <mem_free+0xaa>
    return;
 800a644:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800a646:	3710      	adds	r7, #16
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	08015e84 	.word	0x08015e84
 800a650:	08015f58 	.word	0x08015f58
 800a654:	08015ecc 	.word	0x08015ecc
 800a658:	240000c0 	.word	0x240000c0
 800a65c:	240000c4 	.word	0x240000c4
 800a660:	08015f7c 	.word	0x08015f7c
 800a664:	08015f98 	.word	0x08015f98
 800a668:	08015fc0 	.word	0x08015fc0
 800a66c:	240000c8 	.word	0x240000c8

0800a670 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b088      	sub	sp, #32
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	460b      	mov	r3, r1
 800a67a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a67c:	887b      	ldrh	r3, [r7, #2]
 800a67e:	3303      	adds	r3, #3
 800a680:	b29b      	uxth	r3, r3
 800a682:	f023 0303 	bic.w	r3, r3, #3
 800a686:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a688:	8bfb      	ldrh	r3, [r7, #30]
 800a68a:	2b0b      	cmp	r3, #11
 800a68c:	d801      	bhi.n	800a692 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a68e:	230c      	movs	r3, #12
 800a690:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a692:	8bfb      	ldrh	r3, [r7, #30]
 800a694:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a698:	d803      	bhi.n	800a6a2 <mem_trim+0x32>
 800a69a:	8bfa      	ldrh	r2, [r7, #30]
 800a69c:	887b      	ldrh	r3, [r7, #2]
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	d201      	bcs.n	800a6a6 <mem_trim+0x36>
    return NULL;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	e0cc      	b.n	800a840 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a6a6:	4b68      	ldr	r3, [pc, #416]	; (800a848 <mem_trim+0x1d8>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d304      	bcc.n	800a6ba <mem_trim+0x4a>
 800a6b0:	4b66      	ldr	r3, [pc, #408]	; (800a84c <mem_trim+0x1dc>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d306      	bcc.n	800a6c8 <mem_trim+0x58>
 800a6ba:	4b65      	ldr	r3, [pc, #404]	; (800a850 <mem_trim+0x1e0>)
 800a6bc:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a6c0:	4964      	ldr	r1, [pc, #400]	; (800a854 <mem_trim+0x1e4>)
 800a6c2:	4865      	ldr	r0, [pc, #404]	; (800a858 <mem_trim+0x1e8>)
 800a6c4:	f00a faf8 	bl	8014cb8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a6c8:	4b5f      	ldr	r3, [pc, #380]	; (800a848 <mem_trim+0x1d8>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	687a      	ldr	r2, [r7, #4]
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d304      	bcc.n	800a6dc <mem_trim+0x6c>
 800a6d2:	4b5e      	ldr	r3, [pc, #376]	; (800a84c <mem_trim+0x1dc>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d301      	bcc.n	800a6e0 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	e0af      	b.n	800a840 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	3b08      	subs	r3, #8
 800a6e4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a6e6:	69b8      	ldr	r0, [r7, #24]
 800a6e8:	f7ff fe30 	bl	800a34c <mem_to_ptr>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a6f0:	69bb      	ldr	r3, [r7, #24]
 800a6f2:	881a      	ldrh	r2, [r3, #0]
 800a6f4:	8afb      	ldrh	r3, [r7, #22]
 800a6f6:	1ad3      	subs	r3, r2, r3
 800a6f8:	b29b      	uxth	r3, r3
 800a6fa:	3b08      	subs	r3, #8
 800a6fc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a6fe:	8bfa      	ldrh	r2, [r7, #30]
 800a700:	8abb      	ldrh	r3, [r7, #20]
 800a702:	429a      	cmp	r2, r3
 800a704:	d906      	bls.n	800a714 <mem_trim+0xa4>
 800a706:	4b52      	ldr	r3, [pc, #328]	; (800a850 <mem_trim+0x1e0>)
 800a708:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a70c:	4953      	ldr	r1, [pc, #332]	; (800a85c <mem_trim+0x1ec>)
 800a70e:	4852      	ldr	r0, [pc, #328]	; (800a858 <mem_trim+0x1e8>)
 800a710:	f00a fad2 	bl	8014cb8 <iprintf>
  if (newsize > size) {
 800a714:	8bfa      	ldrh	r2, [r7, #30]
 800a716:	8abb      	ldrh	r3, [r7, #20]
 800a718:	429a      	cmp	r2, r3
 800a71a:	d901      	bls.n	800a720 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800a71c:	2300      	movs	r3, #0
 800a71e:	e08f      	b.n	800a840 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800a720:	8bfa      	ldrh	r2, [r7, #30]
 800a722:	8abb      	ldrh	r3, [r7, #20]
 800a724:	429a      	cmp	r2, r3
 800a726:	d101      	bne.n	800a72c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	e089      	b.n	800a840 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800a72c:	69bb      	ldr	r3, [r7, #24]
 800a72e:	881b      	ldrh	r3, [r3, #0]
 800a730:	4618      	mov	r0, r3
 800a732:	f7ff fdf9 	bl	800a328 <ptr_to_mem>
 800a736:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	791b      	ldrb	r3, [r3, #4]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d13f      	bne.n	800a7c0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a740:	69bb      	ldr	r3, [r7, #24]
 800a742:	881b      	ldrh	r3, [r3, #0]
 800a744:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a748:	d106      	bne.n	800a758 <mem_trim+0xe8>
 800a74a:	4b41      	ldr	r3, [pc, #260]	; (800a850 <mem_trim+0x1e0>)
 800a74c:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a750:	4943      	ldr	r1, [pc, #268]	; (800a860 <mem_trim+0x1f0>)
 800a752:	4841      	ldr	r0, [pc, #260]	; (800a858 <mem_trim+0x1e8>)
 800a754:	f00a fab0 	bl	8014cb8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	881b      	ldrh	r3, [r3, #0]
 800a75c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a75e:	8afa      	ldrh	r2, [r7, #22]
 800a760:	8bfb      	ldrh	r3, [r7, #30]
 800a762:	4413      	add	r3, r2
 800a764:	b29b      	uxth	r3, r3
 800a766:	3308      	adds	r3, #8
 800a768:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a76a:	4b3e      	ldr	r3, [pc, #248]	; (800a864 <mem_trim+0x1f4>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	693a      	ldr	r2, [r7, #16]
 800a770:	429a      	cmp	r2, r3
 800a772:	d106      	bne.n	800a782 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800a774:	89fb      	ldrh	r3, [r7, #14]
 800a776:	4618      	mov	r0, r3
 800a778:	f7ff fdd6 	bl	800a328 <ptr_to_mem>
 800a77c:	4603      	mov	r3, r0
 800a77e:	4a39      	ldr	r2, [pc, #228]	; (800a864 <mem_trim+0x1f4>)
 800a780:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a782:	89fb      	ldrh	r3, [r7, #14]
 800a784:	4618      	mov	r0, r3
 800a786:	f7ff fdcf 	bl	800a328 <ptr_to_mem>
 800a78a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	2200      	movs	r2, #0
 800a790:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	89ba      	ldrh	r2, [r7, #12]
 800a796:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	8afa      	ldrh	r2, [r7, #22]
 800a79c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	89fa      	ldrh	r2, [r7, #14]
 800a7a2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	881b      	ldrh	r3, [r3, #0]
 800a7a8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a7ac:	d047      	beq.n	800a83e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	881b      	ldrh	r3, [r3, #0]
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7ff fdb8 	bl	800a328 <ptr_to_mem>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	89fb      	ldrh	r3, [r7, #14]
 800a7bc:	8053      	strh	r3, [r2, #2]
 800a7be:	e03e      	b.n	800a83e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a7c0:	8bfb      	ldrh	r3, [r7, #30]
 800a7c2:	f103 0214 	add.w	r2, r3, #20
 800a7c6:	8abb      	ldrh	r3, [r7, #20]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d838      	bhi.n	800a83e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a7cc:	8afa      	ldrh	r2, [r7, #22]
 800a7ce:	8bfb      	ldrh	r3, [r7, #30]
 800a7d0:	4413      	add	r3, r2
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	3308      	adds	r3, #8
 800a7d6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a7d8:	69bb      	ldr	r3, [r7, #24]
 800a7da:	881b      	ldrh	r3, [r3, #0]
 800a7dc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a7e0:	d106      	bne.n	800a7f0 <mem_trim+0x180>
 800a7e2:	4b1b      	ldr	r3, [pc, #108]	; (800a850 <mem_trim+0x1e0>)
 800a7e4:	f240 3216 	movw	r2, #790	; 0x316
 800a7e8:	491d      	ldr	r1, [pc, #116]	; (800a860 <mem_trim+0x1f0>)
 800a7ea:	481b      	ldr	r0, [pc, #108]	; (800a858 <mem_trim+0x1e8>)
 800a7ec:	f00a fa64 	bl	8014cb8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a7f0:	89fb      	ldrh	r3, [r7, #14]
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7ff fd98 	bl	800a328 <ptr_to_mem>
 800a7f8:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a7fa:	4b1a      	ldr	r3, [pc, #104]	; (800a864 <mem_trim+0x1f4>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	693a      	ldr	r2, [r7, #16]
 800a800:	429a      	cmp	r2, r3
 800a802:	d202      	bcs.n	800a80a <mem_trim+0x19a>
      lfree = mem2;
 800a804:	4a17      	ldr	r2, [pc, #92]	; (800a864 <mem_trim+0x1f4>)
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	2200      	movs	r2, #0
 800a80e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a810:	69bb      	ldr	r3, [r7, #24]
 800a812:	881a      	ldrh	r2, [r3, #0]
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	8afa      	ldrh	r2, [r7, #22]
 800a81c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a81e:	69bb      	ldr	r3, [r7, #24]
 800a820:	89fa      	ldrh	r2, [r7, #14]
 800a822:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	881b      	ldrh	r3, [r3, #0]
 800a828:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a82c:	d007      	beq.n	800a83e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	881b      	ldrh	r3, [r3, #0]
 800a832:	4618      	mov	r0, r3
 800a834:	f7ff fd78 	bl	800a328 <ptr_to_mem>
 800a838:	4602      	mov	r2, r0
 800a83a:	89fb      	ldrh	r3, [r7, #14]
 800a83c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800a83e:	687b      	ldr	r3, [r7, #4]
}
 800a840:	4618      	mov	r0, r3
 800a842:	3720      	adds	r7, #32
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	240000c0 	.word	0x240000c0
 800a84c:	240000c4 	.word	0x240000c4
 800a850:	08015e84 	.word	0x08015e84
 800a854:	08015ff4 	.word	0x08015ff4
 800a858:	08015ecc 	.word	0x08015ecc
 800a85c:	0801600c 	.word	0x0801600c
 800a860:	0801602c 	.word	0x0801602c
 800a864:	240000c8 	.word	0x240000c8

0800a868 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b088      	sub	sp, #32
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	4603      	mov	r3, r0
 800a870:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a872:	88fb      	ldrh	r3, [r7, #6]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d101      	bne.n	800a87c <mem_malloc+0x14>
    return NULL;
 800a878:	2300      	movs	r3, #0
 800a87a:	e0d9      	b.n	800aa30 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a87c:	88fb      	ldrh	r3, [r7, #6]
 800a87e:	3303      	adds	r3, #3
 800a880:	b29b      	uxth	r3, r3
 800a882:	f023 0303 	bic.w	r3, r3, #3
 800a886:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a888:	8bbb      	ldrh	r3, [r7, #28]
 800a88a:	2b0b      	cmp	r3, #11
 800a88c:	d801      	bhi.n	800a892 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a88e:	230c      	movs	r3, #12
 800a890:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a892:	8bbb      	ldrh	r3, [r7, #28]
 800a894:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a898:	d803      	bhi.n	800a8a2 <mem_malloc+0x3a>
 800a89a:	8bba      	ldrh	r2, [r7, #28]
 800a89c:	88fb      	ldrh	r3, [r7, #6]
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d201      	bcs.n	800a8a6 <mem_malloc+0x3e>
    return NULL;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	e0c4      	b.n	800aa30 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a8a6:	4b64      	ldr	r3, [pc, #400]	; (800aa38 <mem_malloc+0x1d0>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7ff fd4e 	bl	800a34c <mem_to_ptr>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	83fb      	strh	r3, [r7, #30]
 800a8b4:	e0b4      	b.n	800aa20 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a8b6:	8bfb      	ldrh	r3, [r7, #30]
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f7ff fd35 	bl	800a328 <ptr_to_mem>
 800a8be:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	791b      	ldrb	r3, [r3, #4]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	f040 80a4 	bne.w	800aa12 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	881b      	ldrh	r3, [r3, #0]
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	8bfb      	ldrh	r3, [r7, #30]
 800a8d2:	1ad3      	subs	r3, r2, r3
 800a8d4:	f1a3 0208 	sub.w	r2, r3, #8
 800a8d8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	f0c0 8099 	bcc.w	800aa12 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	881b      	ldrh	r3, [r3, #0]
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	8bfb      	ldrh	r3, [r7, #30]
 800a8e8:	1ad3      	subs	r3, r2, r3
 800a8ea:	f1a3 0208 	sub.w	r2, r3, #8
 800a8ee:	8bbb      	ldrh	r3, [r7, #28]
 800a8f0:	3314      	adds	r3, #20
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d333      	bcc.n	800a95e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a8f6:	8bfa      	ldrh	r2, [r7, #30]
 800a8f8:	8bbb      	ldrh	r3, [r7, #28]
 800a8fa:	4413      	add	r3, r2
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	3308      	adds	r3, #8
 800a900:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a902:	8a7b      	ldrh	r3, [r7, #18]
 800a904:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a908:	d106      	bne.n	800a918 <mem_malloc+0xb0>
 800a90a:	4b4c      	ldr	r3, [pc, #304]	; (800aa3c <mem_malloc+0x1d4>)
 800a90c:	f240 3287 	movw	r2, #903	; 0x387
 800a910:	494b      	ldr	r1, [pc, #300]	; (800aa40 <mem_malloc+0x1d8>)
 800a912:	484c      	ldr	r0, [pc, #304]	; (800aa44 <mem_malloc+0x1dc>)
 800a914:	f00a f9d0 	bl	8014cb8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a918:	8a7b      	ldrh	r3, [r7, #18]
 800a91a:	4618      	mov	r0, r3
 800a91c:	f7ff fd04 	bl	800a328 <ptr_to_mem>
 800a920:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2200      	movs	r2, #0
 800a926:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	881a      	ldrh	r2, [r3, #0]
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	8bfa      	ldrh	r2, [r7, #30]
 800a934:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	8a7a      	ldrh	r2, [r7, #18]
 800a93a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	2201      	movs	r2, #1
 800a940:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	881b      	ldrh	r3, [r3, #0]
 800a946:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a94a:	d00b      	beq.n	800a964 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	881b      	ldrh	r3, [r3, #0]
 800a950:	4618      	mov	r0, r3
 800a952:	f7ff fce9 	bl	800a328 <ptr_to_mem>
 800a956:	4602      	mov	r2, r0
 800a958:	8a7b      	ldrh	r3, [r7, #18]
 800a95a:	8053      	strh	r3, [r2, #2]
 800a95c:	e002      	b.n	800a964 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	2201      	movs	r2, #1
 800a962:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a964:	4b34      	ldr	r3, [pc, #208]	; (800aa38 <mem_malloc+0x1d0>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	697a      	ldr	r2, [r7, #20]
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d127      	bne.n	800a9be <mem_malloc+0x156>
          struct mem *cur = lfree;
 800a96e:	4b32      	ldr	r3, [pc, #200]	; (800aa38 <mem_malloc+0x1d0>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a974:	e005      	b.n	800a982 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a976:	69bb      	ldr	r3, [r7, #24]
 800a978:	881b      	ldrh	r3, [r3, #0]
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7ff fcd4 	bl	800a328 <ptr_to_mem>
 800a980:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a982:	69bb      	ldr	r3, [r7, #24]
 800a984:	791b      	ldrb	r3, [r3, #4]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d004      	beq.n	800a994 <mem_malloc+0x12c>
 800a98a:	4b2f      	ldr	r3, [pc, #188]	; (800aa48 <mem_malloc+0x1e0>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	69ba      	ldr	r2, [r7, #24]
 800a990:	429a      	cmp	r2, r3
 800a992:	d1f0      	bne.n	800a976 <mem_malloc+0x10e>
          }
          lfree = cur;
 800a994:	4a28      	ldr	r2, [pc, #160]	; (800aa38 <mem_malloc+0x1d0>)
 800a996:	69bb      	ldr	r3, [r7, #24]
 800a998:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a99a:	4b27      	ldr	r3, [pc, #156]	; (800aa38 <mem_malloc+0x1d0>)
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	4b2a      	ldr	r3, [pc, #168]	; (800aa48 <mem_malloc+0x1e0>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d00b      	beq.n	800a9be <mem_malloc+0x156>
 800a9a6:	4b24      	ldr	r3, [pc, #144]	; (800aa38 <mem_malloc+0x1d0>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	791b      	ldrb	r3, [r3, #4]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d006      	beq.n	800a9be <mem_malloc+0x156>
 800a9b0:	4b22      	ldr	r3, [pc, #136]	; (800aa3c <mem_malloc+0x1d4>)
 800a9b2:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a9b6:	4925      	ldr	r1, [pc, #148]	; (800aa4c <mem_malloc+0x1e4>)
 800a9b8:	4822      	ldr	r0, [pc, #136]	; (800aa44 <mem_malloc+0x1dc>)
 800a9ba:	f00a f97d 	bl	8014cb8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a9be:	8bba      	ldrh	r2, [r7, #28]
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	4413      	add	r3, r2
 800a9c4:	3308      	adds	r3, #8
 800a9c6:	4a20      	ldr	r2, [pc, #128]	; (800aa48 <mem_malloc+0x1e0>)
 800a9c8:	6812      	ldr	r2, [r2, #0]
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d906      	bls.n	800a9dc <mem_malloc+0x174>
 800a9ce:	4b1b      	ldr	r3, [pc, #108]	; (800aa3c <mem_malloc+0x1d4>)
 800a9d0:	f240 32b9 	movw	r2, #953	; 0x3b9
 800a9d4:	491e      	ldr	r1, [pc, #120]	; (800aa50 <mem_malloc+0x1e8>)
 800a9d6:	481b      	ldr	r0, [pc, #108]	; (800aa44 <mem_malloc+0x1dc>)
 800a9d8:	f00a f96e 	bl	8014cb8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	f003 0303 	and.w	r3, r3, #3
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d006      	beq.n	800a9f4 <mem_malloc+0x18c>
 800a9e6:	4b15      	ldr	r3, [pc, #84]	; (800aa3c <mem_malloc+0x1d4>)
 800a9e8:	f240 32bb 	movw	r2, #955	; 0x3bb
 800a9ec:	4919      	ldr	r1, [pc, #100]	; (800aa54 <mem_malloc+0x1ec>)
 800a9ee:	4815      	ldr	r0, [pc, #84]	; (800aa44 <mem_malloc+0x1dc>)
 800a9f0:	f00a f962 	bl	8014cb8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	f003 0303 	and.w	r3, r3, #3
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d006      	beq.n	800aa0c <mem_malloc+0x1a4>
 800a9fe:	4b0f      	ldr	r3, [pc, #60]	; (800aa3c <mem_malloc+0x1d4>)
 800aa00:	f240 32bd 	movw	r2, #957	; 0x3bd
 800aa04:	4914      	ldr	r1, [pc, #80]	; (800aa58 <mem_malloc+0x1f0>)
 800aa06:	480f      	ldr	r0, [pc, #60]	; (800aa44 <mem_malloc+0x1dc>)
 800aa08:	f00a f956 	bl	8014cb8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	3308      	adds	r3, #8
 800aa10:	e00e      	b.n	800aa30 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800aa12:	8bfb      	ldrh	r3, [r7, #30]
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7ff fc87 	bl	800a328 <ptr_to_mem>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	881b      	ldrh	r3, [r3, #0]
 800aa1e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800aa20:	8bfa      	ldrh	r2, [r7, #30]
 800aa22:	8bbb      	ldrh	r3, [r7, #28]
 800aa24:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	f4ff af44 	bcc.w	800a8b6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800aa2e:	2300      	movs	r3, #0
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3720      	adds	r7, #32
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}
 800aa38:	240000c8 	.word	0x240000c8
 800aa3c:	08015e84 	.word	0x08015e84
 800aa40:	0801602c 	.word	0x0801602c
 800aa44:	08015ecc 	.word	0x08015ecc
 800aa48:	240000c4 	.word	0x240000c4
 800aa4c:	08016040 	.word	0x08016040
 800aa50:	0801605c 	.word	0x0801605c
 800aa54:	0801608c 	.word	0x0801608c
 800aa58:	080160bc 	.word	0x080160bc

0800aa5c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b085      	sub	sp, #20
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	689b      	ldr	r3, [r3, #8]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	685b      	ldr	r3, [r3, #4]
 800aa70:	3303      	adds	r3, #3
 800aa72:	f023 0303 	bic.w	r3, r3, #3
 800aa76:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800aa78:	2300      	movs	r3, #0
 800aa7a:	60fb      	str	r3, [r7, #12]
 800aa7c:	e011      	b.n	800aaa2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	689b      	ldr	r3, [r3, #8]
 800aa82:	681a      	ldr	r2, [r3, #0]
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	68ba      	ldr	r2, [r7, #8]
 800aa8e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	881b      	ldrh	r3, [r3, #0]
 800aa94:	461a      	mov	r2, r3
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	4413      	add	r3, r2
 800aa9a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	60fb      	str	r3, [r7, #12]
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	885b      	ldrh	r3, [r3, #2]
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	dbe7      	blt.n	800aa7e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800aaae:	bf00      	nop
 800aab0:	bf00      	nop
 800aab2:	3714      	adds	r7, #20
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b082      	sub	sp, #8
 800aac0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800aac2:	2300      	movs	r3, #0
 800aac4:	80fb      	strh	r3, [r7, #6]
 800aac6:	e009      	b.n	800aadc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800aac8:	88fb      	ldrh	r3, [r7, #6]
 800aaca:	4a08      	ldr	r2, [pc, #32]	; (800aaec <memp_init+0x30>)
 800aacc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aad0:	4618      	mov	r0, r3
 800aad2:	f7ff ffc3 	bl	800aa5c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800aad6:	88fb      	ldrh	r3, [r7, #6]
 800aad8:	3301      	adds	r3, #1
 800aada:	80fb      	strh	r3, [r7, #6]
 800aadc:	88fb      	ldrh	r3, [r7, #6]
 800aade:	2b08      	cmp	r3, #8
 800aae0:	d9f2      	bls.n	800aac8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800aae2:	bf00      	nop
 800aae4:	bf00      	nop
 800aae6:	3708      	adds	r7, #8
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}
 800aaec:	080190b0 	.word	0x080190b0

0800aaf0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	689b      	ldr	r3, [r3, #8]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d012      	beq.n	800ab2c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	689b      	ldr	r3, [r3, #8]
 800ab0a:	68fa      	ldr	r2, [r7, #12]
 800ab0c:	6812      	ldr	r2, [r2, #0]
 800ab0e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f003 0303 	and.w	r3, r3, #3
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d006      	beq.n	800ab28 <do_memp_malloc_pool+0x38>
 800ab1a:	4b07      	ldr	r3, [pc, #28]	; (800ab38 <do_memp_malloc_pool+0x48>)
 800ab1c:	f44f 728c 	mov.w	r2, #280	; 0x118
 800ab20:	4906      	ldr	r1, [pc, #24]	; (800ab3c <do_memp_malloc_pool+0x4c>)
 800ab22:	4807      	ldr	r0, [pc, #28]	; (800ab40 <do_memp_malloc_pool+0x50>)
 800ab24:	f00a f8c8 	bl	8014cb8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	e000      	b.n	800ab2e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800ab2c:	2300      	movs	r3, #0
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3710      	adds	r7, #16
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
 800ab36:	bf00      	nop
 800ab38:	080160e0 	.word	0x080160e0
 800ab3c:	08016110 	.word	0x08016110
 800ab40:	08016134 	.word	0x08016134

0800ab44 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b082      	sub	sp, #8
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d106      	bne.n	800ab60 <memp_malloc_pool+0x1c>
 800ab52:	4b0a      	ldr	r3, [pc, #40]	; (800ab7c <memp_malloc_pool+0x38>)
 800ab54:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800ab58:	4909      	ldr	r1, [pc, #36]	; (800ab80 <memp_malloc_pool+0x3c>)
 800ab5a:	480a      	ldr	r0, [pc, #40]	; (800ab84 <memp_malloc_pool+0x40>)
 800ab5c:	f00a f8ac 	bl	8014cb8 <iprintf>
  if (desc == NULL) {
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d101      	bne.n	800ab6a <memp_malloc_pool+0x26>
    return NULL;
 800ab66:	2300      	movs	r3, #0
 800ab68:	e003      	b.n	800ab72 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f7ff ffc0 	bl	800aaf0 <do_memp_malloc_pool>
 800ab70:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3708      	adds	r7, #8
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	080160e0 	.word	0x080160e0
 800ab80:	0801615c 	.word	0x0801615c
 800ab84:	08016134 	.word	0x08016134

0800ab88 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b084      	sub	sp, #16
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	4603      	mov	r3, r0
 800ab90:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ab92:	79fb      	ldrb	r3, [r7, #7]
 800ab94:	2b08      	cmp	r3, #8
 800ab96:	d908      	bls.n	800abaa <memp_malloc+0x22>
 800ab98:	4b0a      	ldr	r3, [pc, #40]	; (800abc4 <memp_malloc+0x3c>)
 800ab9a:	f240 1257 	movw	r2, #343	; 0x157
 800ab9e:	490a      	ldr	r1, [pc, #40]	; (800abc8 <memp_malloc+0x40>)
 800aba0:	480a      	ldr	r0, [pc, #40]	; (800abcc <memp_malloc+0x44>)
 800aba2:	f00a f889 	bl	8014cb8 <iprintf>
 800aba6:	2300      	movs	r3, #0
 800aba8:	e008      	b.n	800abbc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800abaa:	79fb      	ldrb	r3, [r7, #7]
 800abac:	4a08      	ldr	r2, [pc, #32]	; (800abd0 <memp_malloc+0x48>)
 800abae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abb2:	4618      	mov	r0, r3
 800abb4:	f7ff ff9c 	bl	800aaf0 <do_memp_malloc_pool>
 800abb8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800abba:	68fb      	ldr	r3, [r7, #12]
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3710      	adds	r7, #16
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}
 800abc4:	080160e0 	.word	0x080160e0
 800abc8:	08016170 	.word	0x08016170
 800abcc:	08016134 	.word	0x08016134
 800abd0:	080190b0 	.word	0x080190b0

0800abd4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	f003 0303 	and.w	r3, r3, #3
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d006      	beq.n	800abf6 <do_memp_free_pool+0x22>
 800abe8:	4b0a      	ldr	r3, [pc, #40]	; (800ac14 <do_memp_free_pool+0x40>)
 800abea:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800abee:	490a      	ldr	r1, [pc, #40]	; (800ac18 <do_memp_free_pool+0x44>)
 800abf0:	480a      	ldr	r0, [pc, #40]	; (800ac1c <do_memp_free_pool+0x48>)
 800abf2:	f00a f861 	bl	8014cb8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	681a      	ldr	r2, [r3, #0]
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	689b      	ldr	r3, [r3, #8]
 800ac08:	68fa      	ldr	r2, [r7, #12]
 800ac0a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800ac0c:	bf00      	nop
 800ac0e:	3710      	adds	r7, #16
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	080160e0 	.word	0x080160e0
 800ac18:	08016190 	.word	0x08016190
 800ac1c:	08016134 	.word	0x08016134

0800ac20 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d106      	bne.n	800ac3e <memp_free_pool+0x1e>
 800ac30:	4b0a      	ldr	r3, [pc, #40]	; (800ac5c <memp_free_pool+0x3c>)
 800ac32:	f240 1295 	movw	r2, #405	; 0x195
 800ac36:	490a      	ldr	r1, [pc, #40]	; (800ac60 <memp_free_pool+0x40>)
 800ac38:	480a      	ldr	r0, [pc, #40]	; (800ac64 <memp_free_pool+0x44>)
 800ac3a:	f00a f83d 	bl	8014cb8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d007      	beq.n	800ac54 <memp_free_pool+0x34>
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d004      	beq.n	800ac54 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800ac4a:	6839      	ldr	r1, [r7, #0]
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f7ff ffc1 	bl	800abd4 <do_memp_free_pool>
 800ac52:	e000      	b.n	800ac56 <memp_free_pool+0x36>
    return;
 800ac54:	bf00      	nop
}
 800ac56:	3708      	adds	r7, #8
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}
 800ac5c:	080160e0 	.word	0x080160e0
 800ac60:	0801615c 	.word	0x0801615c
 800ac64:	08016134 	.word	0x08016134

0800ac68 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b082      	sub	sp, #8
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	4603      	mov	r3, r0
 800ac70:	6039      	str	r1, [r7, #0]
 800ac72:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ac74:	79fb      	ldrb	r3, [r7, #7]
 800ac76:	2b08      	cmp	r3, #8
 800ac78:	d907      	bls.n	800ac8a <memp_free+0x22>
 800ac7a:	4b0c      	ldr	r3, [pc, #48]	; (800acac <memp_free+0x44>)
 800ac7c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800ac80:	490b      	ldr	r1, [pc, #44]	; (800acb0 <memp_free+0x48>)
 800ac82:	480c      	ldr	r0, [pc, #48]	; (800acb4 <memp_free+0x4c>)
 800ac84:	f00a f818 	bl	8014cb8 <iprintf>
 800ac88:	e00c      	b.n	800aca4 <memp_free+0x3c>

  if (mem == NULL) {
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d008      	beq.n	800aca2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ac90:	79fb      	ldrb	r3, [r7, #7]
 800ac92:	4a09      	ldr	r2, [pc, #36]	; (800acb8 <memp_free+0x50>)
 800ac94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac98:	6839      	ldr	r1, [r7, #0]
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f7ff ff9a 	bl	800abd4 <do_memp_free_pool>
 800aca0:	e000      	b.n	800aca4 <memp_free+0x3c>
    return;
 800aca2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800aca4:	3708      	adds	r7, #8
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	bf00      	nop
 800acac:	080160e0 	.word	0x080160e0
 800acb0:	080161b0 	.word	0x080161b0
 800acb4:	08016134 	.word	0x08016134
 800acb8:	080190b0 	.word	0x080190b0

0800acbc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800acbc:	b480      	push	{r7}
 800acbe:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800acc0:	bf00      	nop
 800acc2:	46bd      	mov	sp, r7
 800acc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc8:	4770      	bx	lr
	...

0800accc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b086      	sub	sp, #24
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	60b9      	str	r1, [r7, #8]
 800acd6:	607a      	str	r2, [r7, #4]
 800acd8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d108      	bne.n	800acf2 <netif_add+0x26>
 800ace0:	4b57      	ldr	r3, [pc, #348]	; (800ae40 <netif_add+0x174>)
 800ace2:	f240 1227 	movw	r2, #295	; 0x127
 800ace6:	4957      	ldr	r1, [pc, #348]	; (800ae44 <netif_add+0x178>)
 800ace8:	4857      	ldr	r0, [pc, #348]	; (800ae48 <netif_add+0x17c>)
 800acea:	f009 ffe5 	bl	8014cb8 <iprintf>
 800acee:	2300      	movs	r3, #0
 800acf0:	e0a2      	b.n	800ae38 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800acf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d108      	bne.n	800ad0a <netif_add+0x3e>
 800acf8:	4b51      	ldr	r3, [pc, #324]	; (800ae40 <netif_add+0x174>)
 800acfa:	f44f 7294 	mov.w	r2, #296	; 0x128
 800acfe:	4953      	ldr	r1, [pc, #332]	; (800ae4c <netif_add+0x180>)
 800ad00:	4851      	ldr	r0, [pc, #324]	; (800ae48 <netif_add+0x17c>)
 800ad02:	f009 ffd9 	bl	8014cb8 <iprintf>
 800ad06:	2300      	movs	r3, #0
 800ad08:	e096      	b.n	800ae38 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d101      	bne.n	800ad14 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ad10:	4b4f      	ldr	r3, [pc, #316]	; (800ae50 <netif_add+0x184>)
 800ad12:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d101      	bne.n	800ad1e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ad1a:	4b4d      	ldr	r3, [pc, #308]	; (800ae50 <netif_add+0x184>)
 800ad1c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d101      	bne.n	800ad28 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ad24:	4b4a      	ldr	r3, [pc, #296]	; (800ae50 <netif_add+0x184>)
 800ad26:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2200      	movs	r2, #0
 800ad32:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2200      	movs	r2, #0
 800ad38:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	4a45      	ldr	r2, [pc, #276]	; (800ae54 <netif_add+0x188>)
 800ad3e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2200      	movs	r2, #0
 800ad44:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2200      	movs	r2, #0
 800ad52:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6a3a      	ldr	r2, [r7, #32]
 800ad58:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ad5a:	4b3f      	ldr	r3, [pc, #252]	; (800ae58 <netif_add+0x18c>)
 800ad5c:	781a      	ldrb	r2, [r3, #0]
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad68:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	687a      	ldr	r2, [r7, #4]
 800ad6e:	68b9      	ldr	r1, [r7, #8]
 800ad70:	68f8      	ldr	r0, [r7, #12]
 800ad72:	f000 f913 	bl	800af9c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ad76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad78:	68f8      	ldr	r0, [r7, #12]
 800ad7a:	4798      	blx	r3
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d001      	beq.n	800ad86 <netif_add+0xba>
    return NULL;
 800ad82:	2300      	movs	r3, #0
 800ad84:	e058      	b.n	800ae38 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ad8c:	2bff      	cmp	r3, #255	; 0xff
 800ad8e:	d103      	bne.n	800ad98 <netif_add+0xcc>
        netif->num = 0;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2200      	movs	r2, #0
 800ad94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ad9c:	4b2f      	ldr	r3, [pc, #188]	; (800ae5c <netif_add+0x190>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	617b      	str	r3, [r7, #20]
 800ada2:	e02b      	b.n	800adfc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ada4:	697a      	ldr	r2, [r7, #20]
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d106      	bne.n	800adba <netif_add+0xee>
 800adac:	4b24      	ldr	r3, [pc, #144]	; (800ae40 <netif_add+0x174>)
 800adae:	f240 128b 	movw	r2, #395	; 0x18b
 800adb2:	492b      	ldr	r1, [pc, #172]	; (800ae60 <netif_add+0x194>)
 800adb4:	4824      	ldr	r0, [pc, #144]	; (800ae48 <netif_add+0x17c>)
 800adb6:	f009 ff7f 	bl	8014cb8 <iprintf>
        num_netifs++;
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	3301      	adds	r3, #1
 800adbe:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	2bff      	cmp	r3, #255	; 0xff
 800adc4:	dd06      	ble.n	800add4 <netif_add+0x108>
 800adc6:	4b1e      	ldr	r3, [pc, #120]	; (800ae40 <netif_add+0x174>)
 800adc8:	f240 128d 	movw	r2, #397	; 0x18d
 800adcc:	4925      	ldr	r1, [pc, #148]	; (800ae64 <netif_add+0x198>)
 800adce:	481e      	ldr	r0, [pc, #120]	; (800ae48 <netif_add+0x17c>)
 800add0:	f009 ff72 	bl	8014cb8 <iprintf>
        if (netif2->num == netif->num) {
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d108      	bne.n	800adf6 <netif_add+0x12a>
          netif->num++;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800adea:	3301      	adds	r3, #1
 800adec:	b2da      	uxtb	r2, r3
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800adf4:	e005      	b.n	800ae02 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	617b      	str	r3, [r7, #20]
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d1d0      	bne.n	800ada4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d1be      	bne.n	800ad86 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ae0e:	2bfe      	cmp	r3, #254	; 0xfe
 800ae10:	d103      	bne.n	800ae1a <netif_add+0x14e>
    netif_num = 0;
 800ae12:	4b11      	ldr	r3, [pc, #68]	; (800ae58 <netif_add+0x18c>)
 800ae14:	2200      	movs	r2, #0
 800ae16:	701a      	strb	r2, [r3, #0]
 800ae18:	e006      	b.n	800ae28 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ae20:	3301      	adds	r3, #1
 800ae22:	b2da      	uxtb	r2, r3
 800ae24:	4b0c      	ldr	r3, [pc, #48]	; (800ae58 <netif_add+0x18c>)
 800ae26:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ae28:	4b0c      	ldr	r3, [pc, #48]	; (800ae5c <netif_add+0x190>)
 800ae2a:	681a      	ldr	r2, [r3, #0]
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ae30:	4a0a      	ldr	r2, [pc, #40]	; (800ae5c <netif_add+0x190>)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800ae36:	68fb      	ldr	r3, [r7, #12]
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3718      	adds	r7, #24
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}
 800ae40:	080161cc 	.word	0x080161cc
 800ae44:	08016260 	.word	0x08016260
 800ae48:	0801621c 	.word	0x0801621c
 800ae4c:	0801627c 	.word	0x0801627c
 800ae50:	08019114 	.word	0x08019114
 800ae54:	0800b277 	.word	0x0800b277
 800ae58:	240000f0 	.word	0x240000f0
 800ae5c:	24003604 	.word	0x24003604
 800ae60:	080162a0 	.word	0x080162a0
 800ae64:	080162b4 	.word	0x080162b4

0800ae68 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ae72:	6839      	ldr	r1, [r7, #0]
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f002 fdf3 	bl	800da60 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ae7a:	6839      	ldr	r1, [r7, #0]
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f007 fb2b 	bl	80124d8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800ae82:	bf00      	nop
 800ae84:	3708      	adds	r7, #8
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
	...

0800ae8c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b086      	sub	sp, #24
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	60b9      	str	r1, [r7, #8]
 800ae96:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d106      	bne.n	800aeac <netif_do_set_ipaddr+0x20>
 800ae9e:	4b1d      	ldr	r3, [pc, #116]	; (800af14 <netif_do_set_ipaddr+0x88>)
 800aea0:	f240 12cb 	movw	r2, #459	; 0x1cb
 800aea4:	491c      	ldr	r1, [pc, #112]	; (800af18 <netif_do_set_ipaddr+0x8c>)
 800aea6:	481d      	ldr	r0, [pc, #116]	; (800af1c <netif_do_set_ipaddr+0x90>)
 800aea8:	f009 ff06 	bl	8014cb8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d106      	bne.n	800aec0 <netif_do_set_ipaddr+0x34>
 800aeb2:	4b18      	ldr	r3, [pc, #96]	; (800af14 <netif_do_set_ipaddr+0x88>)
 800aeb4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800aeb8:	4917      	ldr	r1, [pc, #92]	; (800af18 <netif_do_set_ipaddr+0x8c>)
 800aeba:	4818      	ldr	r0, [pc, #96]	; (800af1c <netif_do_set_ipaddr+0x90>)
 800aebc:	f009 fefc 	bl	8014cb8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	3304      	adds	r3, #4
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d01c      	beq.n	800af08 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	3304      	adds	r3, #4
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800aede:	f107 0314 	add.w	r3, r7, #20
 800aee2:	4619      	mov	r1, r3
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f7ff ffbf 	bl	800ae68 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d002      	beq.n	800aef6 <netif_do_set_ipaddr+0x6a>
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	e000      	b.n	800aef8 <netif_do_set_ipaddr+0x6c>
 800aef6:	2300      	movs	r3, #0
 800aef8:	68fa      	ldr	r2, [r7, #12]
 800aefa:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800aefc:	2101      	movs	r1, #1
 800aefe:	68f8      	ldr	r0, [r7, #12]
 800af00:	f000 f8d2 	bl	800b0a8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800af04:	2301      	movs	r3, #1
 800af06:	e000      	b.n	800af0a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800af08:	2300      	movs	r3, #0
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3718      	adds	r7, #24
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop
 800af14:	080161cc 	.word	0x080161cc
 800af18:	080162e4 	.word	0x080162e4
 800af1c:	0801621c 	.word	0x0801621c

0800af20 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800af20:	b480      	push	{r7}
 800af22:	b085      	sub	sp, #20
 800af24:	af00      	add	r7, sp, #0
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	60b9      	str	r1, [r7, #8]
 800af2a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	681a      	ldr	r2, [r3, #0]
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	3308      	adds	r3, #8
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	429a      	cmp	r2, r3
 800af38:	d00a      	beq.n	800af50 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d002      	beq.n	800af46 <netif_do_set_netmask+0x26>
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	e000      	b.n	800af48 <netif_do_set_netmask+0x28>
 800af46:	2300      	movs	r3, #0
 800af48:	68fa      	ldr	r2, [r7, #12]
 800af4a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800af4c:	2301      	movs	r3, #1
 800af4e:	e000      	b.n	800af52 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800af50:	2300      	movs	r3, #0
}
 800af52:	4618      	mov	r0, r3
 800af54:	3714      	adds	r7, #20
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr

0800af5e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800af5e:	b480      	push	{r7}
 800af60:	b085      	sub	sp, #20
 800af62:	af00      	add	r7, sp, #0
 800af64:	60f8      	str	r0, [r7, #12]
 800af66:	60b9      	str	r1, [r7, #8]
 800af68:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	681a      	ldr	r2, [r3, #0]
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	330c      	adds	r3, #12
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	429a      	cmp	r2, r3
 800af76:	d00a      	beq.n	800af8e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d002      	beq.n	800af84 <netif_do_set_gw+0x26>
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	e000      	b.n	800af86 <netif_do_set_gw+0x28>
 800af84:	2300      	movs	r3, #0
 800af86:	68fa      	ldr	r2, [r7, #12]
 800af88:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800af8a:	2301      	movs	r3, #1
 800af8c:	e000      	b.n	800af90 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800af8e:	2300      	movs	r3, #0
}
 800af90:	4618      	mov	r0, r3
 800af92:	3714      	adds	r7, #20
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b088      	sub	sp, #32
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	607a      	str	r2, [r7, #4]
 800afa8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800afaa:	2300      	movs	r3, #0
 800afac:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800afae:	2300      	movs	r3, #0
 800afb0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d101      	bne.n	800afbc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800afb8:	4b1c      	ldr	r3, [pc, #112]	; (800b02c <netif_set_addr+0x90>)
 800afba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d101      	bne.n	800afc6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800afc2:	4b1a      	ldr	r3, [pc, #104]	; (800b02c <netif_set_addr+0x90>)
 800afc4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d101      	bne.n	800afd0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800afcc:	4b17      	ldr	r3, [pc, #92]	; (800b02c <netif_set_addr+0x90>)
 800afce:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d003      	beq.n	800afde <netif_set_addr+0x42>
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d101      	bne.n	800afe2 <netif_set_addr+0x46>
 800afde:	2301      	movs	r3, #1
 800afe0:	e000      	b.n	800afe4 <netif_set_addr+0x48>
 800afe2:	2300      	movs	r3, #0
 800afe4:	617b      	str	r3, [r7, #20]
  if (remove) {
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d006      	beq.n	800affa <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800afec:	f107 0310 	add.w	r3, r7, #16
 800aff0:	461a      	mov	r2, r3
 800aff2:	68b9      	ldr	r1, [r7, #8]
 800aff4:	68f8      	ldr	r0, [r7, #12]
 800aff6:	f7ff ff49 	bl	800ae8c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800affa:	69fa      	ldr	r2, [r7, #28]
 800affc:	6879      	ldr	r1, [r7, #4]
 800affe:	68f8      	ldr	r0, [r7, #12]
 800b000:	f7ff ff8e 	bl	800af20 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b004:	69ba      	ldr	r2, [r7, #24]
 800b006:	6839      	ldr	r1, [r7, #0]
 800b008:	68f8      	ldr	r0, [r7, #12]
 800b00a:	f7ff ffa8 	bl	800af5e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d106      	bne.n	800b022 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b014:	f107 0310 	add.w	r3, r7, #16
 800b018:	461a      	mov	r2, r3
 800b01a:	68b9      	ldr	r1, [r7, #8]
 800b01c:	68f8      	ldr	r0, [r7, #12]
 800b01e:	f7ff ff35 	bl	800ae8c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b022:	bf00      	nop
 800b024:	3720      	adds	r7, #32
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	08019114 	.word	0x08019114

0800b030 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b030:	b480      	push	{r7}
 800b032:	b083      	sub	sp, #12
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b038:	4a04      	ldr	r2, [pc, #16]	; (800b04c <netif_set_default+0x1c>)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b03e:	bf00      	nop
 800b040:	370c      	adds	r7, #12
 800b042:	46bd      	mov	sp, r7
 800b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b048:	4770      	bx	lr
 800b04a:	bf00      	nop
 800b04c:	24003608 	.word	0x24003608

0800b050 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b082      	sub	sp, #8
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d107      	bne.n	800b06e <netif_set_up+0x1e>
 800b05e:	4b0f      	ldr	r3, [pc, #60]	; (800b09c <netif_set_up+0x4c>)
 800b060:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b064:	490e      	ldr	r1, [pc, #56]	; (800b0a0 <netif_set_up+0x50>)
 800b066:	480f      	ldr	r0, [pc, #60]	; (800b0a4 <netif_set_up+0x54>)
 800b068:	f009 fe26 	bl	8014cb8 <iprintf>
 800b06c:	e013      	b.n	800b096 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b074:	f003 0301 	and.w	r3, r3, #1
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d10c      	bne.n	800b096 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b082:	f043 0301 	orr.w	r3, r3, #1
 800b086:	b2da      	uxtb	r2, r3
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b08e:	2103      	movs	r1, #3
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f000 f809 	bl	800b0a8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b096:	3708      	adds	r7, #8
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}
 800b09c:	080161cc 	.word	0x080161cc
 800b0a0:	08016354 	.word	0x08016354
 800b0a4:	0801621c 	.word	0x0801621c

0800b0a8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b082      	sub	sp, #8
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d106      	bne.n	800b0c8 <netif_issue_reports+0x20>
 800b0ba:	4b18      	ldr	r3, [pc, #96]	; (800b11c <netif_issue_reports+0x74>)
 800b0bc:	f240 326d 	movw	r2, #877	; 0x36d
 800b0c0:	4917      	ldr	r1, [pc, #92]	; (800b120 <netif_issue_reports+0x78>)
 800b0c2:	4818      	ldr	r0, [pc, #96]	; (800b124 <netif_issue_reports+0x7c>)
 800b0c4:	f009 fdf8 	bl	8014cb8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b0ce:	f003 0304 	and.w	r3, r3, #4
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d01e      	beq.n	800b114 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b0dc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d017      	beq.n	800b114 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b0e4:	78fb      	ldrb	r3, [r7, #3]
 800b0e6:	f003 0301 	and.w	r3, r3, #1
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d013      	beq.n	800b116 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	3304      	adds	r3, #4
 800b0f2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d00e      	beq.n	800b116 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b0fe:	f003 0308 	and.w	r3, r3, #8
 800b102:	2b00      	cmp	r3, #0
 800b104:	d007      	beq.n	800b116 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	3304      	adds	r3, #4
 800b10a:	4619      	mov	r1, r3
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f008 f94d 	bl	80133ac <etharp_request>
 800b112:	e000      	b.n	800b116 <netif_issue_reports+0x6e>
    return;
 800b114:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b116:	3708      	adds	r7, #8
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}
 800b11c:	080161cc 	.word	0x080161cc
 800b120:	08016370 	.word	0x08016370
 800b124:	0801621c 	.word	0x0801621c

0800b128 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b082      	sub	sp, #8
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d107      	bne.n	800b146 <netif_set_down+0x1e>
 800b136:	4b12      	ldr	r3, [pc, #72]	; (800b180 <netif_set_down+0x58>)
 800b138:	f240 329b 	movw	r2, #923	; 0x39b
 800b13c:	4911      	ldr	r1, [pc, #68]	; (800b184 <netif_set_down+0x5c>)
 800b13e:	4812      	ldr	r0, [pc, #72]	; (800b188 <netif_set_down+0x60>)
 800b140:	f009 fdba 	bl	8014cb8 <iprintf>
 800b144:	e019      	b.n	800b17a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b14c:	f003 0301 	and.w	r3, r3, #1
 800b150:	2b00      	cmp	r3, #0
 800b152:	d012      	beq.n	800b17a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b15a:	f023 0301 	bic.w	r3, r3, #1
 800b15e:	b2da      	uxtb	r2, r3
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b16c:	f003 0308 	and.w	r3, r3, #8
 800b170:	2b00      	cmp	r3, #0
 800b172:	d002      	beq.n	800b17a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f007 fcd7 	bl	8012b28 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b17a:	3708      	adds	r7, #8
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}
 800b180:	080161cc 	.word	0x080161cc
 800b184:	08016394 	.word	0x08016394
 800b188:	0801621c 	.word	0x0801621c

0800b18c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b082      	sub	sp, #8
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d107      	bne.n	800b1aa <netif_set_link_up+0x1e>
 800b19a:	4b13      	ldr	r3, [pc, #76]	; (800b1e8 <netif_set_link_up+0x5c>)
 800b19c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800b1a0:	4912      	ldr	r1, [pc, #72]	; (800b1ec <netif_set_link_up+0x60>)
 800b1a2:	4813      	ldr	r0, [pc, #76]	; (800b1f0 <netif_set_link_up+0x64>)
 800b1a4:	f009 fd88 	bl	8014cb8 <iprintf>
 800b1a8:	e01b      	b.n	800b1e2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b1b0:	f003 0304 	and.w	r3, r3, #4
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d114      	bne.n	800b1e2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b1be:	f043 0304 	orr.w	r3, r3, #4
 800b1c2:	b2da      	uxtb	r2, r3
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b1ca:	2103      	movs	r1, #3
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f7ff ff6b 	bl	800b0a8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	69db      	ldr	r3, [r3, #28]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d003      	beq.n	800b1e2 <netif_set_link_up+0x56>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	69db      	ldr	r3, [r3, #28]
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b1e2:	3708      	adds	r7, #8
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}
 800b1e8:	080161cc 	.word	0x080161cc
 800b1ec:	080163b4 	.word	0x080163b4
 800b1f0:	0801621c 	.word	0x0801621c

0800b1f4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d107      	bne.n	800b212 <netif_set_link_down+0x1e>
 800b202:	4b11      	ldr	r3, [pc, #68]	; (800b248 <netif_set_link_down+0x54>)
 800b204:	f240 4206 	movw	r2, #1030	; 0x406
 800b208:	4910      	ldr	r1, [pc, #64]	; (800b24c <netif_set_link_down+0x58>)
 800b20a:	4811      	ldr	r0, [pc, #68]	; (800b250 <netif_set_link_down+0x5c>)
 800b20c:	f009 fd54 	bl	8014cb8 <iprintf>
 800b210:	e017      	b.n	800b242 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b218:	f003 0304 	and.w	r3, r3, #4
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d010      	beq.n	800b242 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b226:	f023 0304 	bic.w	r3, r3, #4
 800b22a:	b2da      	uxtb	r2, r3
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	69db      	ldr	r3, [r3, #28]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d003      	beq.n	800b242 <netif_set_link_down+0x4e>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	69db      	ldr	r3, [r3, #28]
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b242:	3708      	adds	r7, #8
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}
 800b248:	080161cc 	.word	0x080161cc
 800b24c:	080163d8 	.word	0x080163d8
 800b250:	0801621c 	.word	0x0801621c

0800b254 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b254:	b480      	push	{r7}
 800b256:	b083      	sub	sp, #12
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
 800b25c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d002      	beq.n	800b26a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	683a      	ldr	r2, [r7, #0]
 800b268:	61da      	str	r2, [r3, #28]
  }
}
 800b26a:	bf00      	nop
 800b26c:	370c      	adds	r7, #12
 800b26e:	46bd      	mov	sp, r7
 800b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b274:	4770      	bx	lr

0800b276 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b276:	b480      	push	{r7}
 800b278:	b085      	sub	sp, #20
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	60f8      	str	r0, [r7, #12]
 800b27e:	60b9      	str	r1, [r7, #8]
 800b280:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b282:	f06f 030b 	mvn.w	r3, #11
}
 800b286:	4618      	mov	r0, r3
 800b288:	3714      	adds	r7, #20
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr
	...

0800b294 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b294:	b480      	push	{r7}
 800b296:	b085      	sub	sp, #20
 800b298:	af00      	add	r7, sp, #0
 800b29a:	4603      	mov	r3, r0
 800b29c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b29e:	79fb      	ldrb	r3, [r7, #7]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d013      	beq.n	800b2cc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b2a4:	4b0d      	ldr	r3, [pc, #52]	; (800b2dc <netif_get_by_index+0x48>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	60fb      	str	r3, [r7, #12]
 800b2aa:	e00c      	b.n	800b2c6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	79fa      	ldrb	r2, [r7, #7]
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d101      	bne.n	800b2c0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	e006      	b.n	800b2ce <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	60fb      	str	r3, [r7, #12]
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d1ef      	bne.n	800b2ac <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b2cc:	2300      	movs	r3, #0
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3714      	adds	r7, #20
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d8:	4770      	bx	lr
 800b2da:	bf00      	nop
 800b2dc:	24003604 	.word	0x24003604

0800b2e0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b082      	sub	sp, #8
 800b2e4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b2e6:	4b0c      	ldr	r3, [pc, #48]	; (800b318 <pbuf_free_ooseq+0x38>)
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b2ec:	4b0b      	ldr	r3, [pc, #44]	; (800b31c <pbuf_free_ooseq+0x3c>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	607b      	str	r3, [r7, #4]
 800b2f2:	e00a      	b.n	800b30a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d003      	beq.n	800b304 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f002 fbed 	bl	800dadc <tcp_free_ooseq>
      return;
 800b302:	e005      	b.n	800b310 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	68db      	ldr	r3, [r3, #12]
 800b308:	607b      	str	r3, [r7, #4]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d1f1      	bne.n	800b2f4 <pbuf_free_ooseq+0x14>
    }
  }
}
 800b310:	3708      	adds	r7, #8
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
 800b316:	bf00      	nop
 800b318:	2400360c 	.word	0x2400360c
 800b31c:	24003614 	.word	0x24003614

0800b320 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b320:	b480      	push	{r7}
 800b322:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800b324:	4b03      	ldr	r3, [pc, #12]	; (800b334 <pbuf_pool_is_empty+0x14>)
 800b326:	2201      	movs	r2, #1
 800b328:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b32a:	bf00      	nop
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr
 800b334:	2400360c 	.word	0x2400360c

0800b338 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b338:	b480      	push	{r7}
 800b33a:	b085      	sub	sp, #20
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	60f8      	str	r0, [r7, #12]
 800b340:	60b9      	str	r1, [r7, #8]
 800b342:	4611      	mov	r1, r2
 800b344:	461a      	mov	r2, r3
 800b346:	460b      	mov	r3, r1
 800b348:	80fb      	strh	r3, [r7, #6]
 800b34a:	4613      	mov	r3, r2
 800b34c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	2200      	movs	r2, #0
 800b352:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	68ba      	ldr	r2, [r7, #8]
 800b358:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	88fa      	ldrh	r2, [r7, #6]
 800b35e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	88ba      	ldrh	r2, [r7, #4]
 800b364:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b366:	8b3b      	ldrh	r3, [r7, #24]
 800b368:	b2da      	uxtb	r2, r3
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	7f3a      	ldrb	r2, [r7, #28]
 800b372:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2201      	movs	r2, #1
 800b378:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2200      	movs	r2, #0
 800b37e:	73da      	strb	r2, [r3, #15]
}
 800b380:	bf00      	nop
 800b382:	3714      	adds	r7, #20
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b08c      	sub	sp, #48	; 0x30
 800b390:	af02      	add	r7, sp, #8
 800b392:	4603      	mov	r3, r0
 800b394:	71fb      	strb	r3, [r7, #7]
 800b396:	460b      	mov	r3, r1
 800b398:	80bb      	strh	r3, [r7, #4]
 800b39a:	4613      	mov	r3, r2
 800b39c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b39e:	79fb      	ldrb	r3, [r7, #7]
 800b3a0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b3a2:	887b      	ldrh	r3, [r7, #2]
 800b3a4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b3a8:	d07f      	beq.n	800b4aa <pbuf_alloc+0x11e>
 800b3aa:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b3ae:	f300 80c8 	bgt.w	800b542 <pbuf_alloc+0x1b6>
 800b3b2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b3b6:	d010      	beq.n	800b3da <pbuf_alloc+0x4e>
 800b3b8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b3bc:	f300 80c1 	bgt.w	800b542 <pbuf_alloc+0x1b6>
 800b3c0:	2b01      	cmp	r3, #1
 800b3c2:	d002      	beq.n	800b3ca <pbuf_alloc+0x3e>
 800b3c4:	2b41      	cmp	r3, #65	; 0x41
 800b3c6:	f040 80bc 	bne.w	800b542 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b3ca:	887a      	ldrh	r2, [r7, #2]
 800b3cc:	88bb      	ldrh	r3, [r7, #4]
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	2000      	movs	r0, #0
 800b3d2:	f000 f8d1 	bl	800b578 <pbuf_alloc_reference>
 800b3d6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b3d8:	e0bd      	b.n	800b556 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b3e2:	88bb      	ldrh	r3, [r7, #4]
 800b3e4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b3e6:	2008      	movs	r0, #8
 800b3e8:	f7ff fbce 	bl	800ab88 <memp_malloc>
 800b3ec:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d109      	bne.n	800b408 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b3f4:	f7ff ff94 	bl	800b320 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d002      	beq.n	800b404 <pbuf_alloc+0x78>
            pbuf_free(p);
 800b3fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b400:	f000 faa8 	bl	800b954 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b404:	2300      	movs	r3, #0
 800b406:	e0a7      	b.n	800b558 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b408:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b40a:	3303      	adds	r3, #3
 800b40c:	b29b      	uxth	r3, r3
 800b40e:	f023 0303 	bic.w	r3, r3, #3
 800b412:	b29b      	uxth	r3, r3
 800b414:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b418:	b29b      	uxth	r3, r3
 800b41a:	8b7a      	ldrh	r2, [r7, #26]
 800b41c:	4293      	cmp	r3, r2
 800b41e:	bf28      	it	cs
 800b420:	4613      	movcs	r3, r2
 800b422:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b424:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b426:	3310      	adds	r3, #16
 800b428:	693a      	ldr	r2, [r7, #16]
 800b42a:	4413      	add	r3, r2
 800b42c:	3303      	adds	r3, #3
 800b42e:	f023 0303 	bic.w	r3, r3, #3
 800b432:	4618      	mov	r0, r3
 800b434:	89f9      	ldrh	r1, [r7, #14]
 800b436:	8b7a      	ldrh	r2, [r7, #26]
 800b438:	2300      	movs	r3, #0
 800b43a:	9301      	str	r3, [sp, #4]
 800b43c:	887b      	ldrh	r3, [r7, #2]
 800b43e:	9300      	str	r3, [sp, #0]
 800b440:	460b      	mov	r3, r1
 800b442:	4601      	mov	r1, r0
 800b444:	6938      	ldr	r0, [r7, #16]
 800b446:	f7ff ff77 	bl	800b338 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	f003 0303 	and.w	r3, r3, #3
 800b452:	2b00      	cmp	r3, #0
 800b454:	d006      	beq.n	800b464 <pbuf_alloc+0xd8>
 800b456:	4b42      	ldr	r3, [pc, #264]	; (800b560 <pbuf_alloc+0x1d4>)
 800b458:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b45c:	4941      	ldr	r1, [pc, #260]	; (800b564 <pbuf_alloc+0x1d8>)
 800b45e:	4842      	ldr	r0, [pc, #264]	; (800b568 <pbuf_alloc+0x1dc>)
 800b460:	f009 fc2a 	bl	8014cb8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b464:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b466:	3303      	adds	r3, #3
 800b468:	f023 0303 	bic.w	r3, r3, #3
 800b46c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b470:	d106      	bne.n	800b480 <pbuf_alloc+0xf4>
 800b472:	4b3b      	ldr	r3, [pc, #236]	; (800b560 <pbuf_alloc+0x1d4>)
 800b474:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b478:	493c      	ldr	r1, [pc, #240]	; (800b56c <pbuf_alloc+0x1e0>)
 800b47a:	483b      	ldr	r0, [pc, #236]	; (800b568 <pbuf_alloc+0x1dc>)
 800b47c:	f009 fc1c 	bl	8014cb8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b482:	2b00      	cmp	r3, #0
 800b484:	d102      	bne.n	800b48c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	627b      	str	r3, [r7, #36]	; 0x24
 800b48a:	e002      	b.n	800b492 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b48c:	69fb      	ldr	r3, [r7, #28]
 800b48e:	693a      	ldr	r2, [r7, #16]
 800b490:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b496:	8b7a      	ldrh	r2, [r7, #26]
 800b498:	89fb      	ldrh	r3, [r7, #14]
 800b49a:	1ad3      	subs	r3, r2, r3
 800b49c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b4a2:	8b7b      	ldrh	r3, [r7, #26]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d19e      	bne.n	800b3e6 <pbuf_alloc+0x5a>
      break;
 800b4a8:	e055      	b.n	800b556 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b4aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b4ac:	3303      	adds	r3, #3
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	f023 0303 	bic.w	r3, r3, #3
 800b4b4:	b29a      	uxth	r2, r3
 800b4b6:	88bb      	ldrh	r3, [r7, #4]
 800b4b8:	3303      	adds	r3, #3
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	f023 0303 	bic.w	r3, r3, #3
 800b4c0:	b29b      	uxth	r3, r3
 800b4c2:	4413      	add	r3, r2
 800b4c4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b4c6:	8b3b      	ldrh	r3, [r7, #24]
 800b4c8:	3310      	adds	r3, #16
 800b4ca:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b4cc:	8b3a      	ldrh	r2, [r7, #24]
 800b4ce:	88bb      	ldrh	r3, [r7, #4]
 800b4d0:	3303      	adds	r3, #3
 800b4d2:	f023 0303 	bic.w	r3, r3, #3
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d306      	bcc.n	800b4e8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b4da:	8afa      	ldrh	r2, [r7, #22]
 800b4dc:	88bb      	ldrh	r3, [r7, #4]
 800b4de:	3303      	adds	r3, #3
 800b4e0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d201      	bcs.n	800b4ec <pbuf_alloc+0x160>
        return NULL;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	e035      	b.n	800b558 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b4ec:	8afb      	ldrh	r3, [r7, #22]
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f7ff f9ba 	bl	800a868 <mem_malloc>
 800b4f4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d101      	bne.n	800b500 <pbuf_alloc+0x174>
        return NULL;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	e02b      	b.n	800b558 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b500:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b502:	3310      	adds	r3, #16
 800b504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b506:	4413      	add	r3, r2
 800b508:	3303      	adds	r3, #3
 800b50a:	f023 0303 	bic.w	r3, r3, #3
 800b50e:	4618      	mov	r0, r3
 800b510:	88b9      	ldrh	r1, [r7, #4]
 800b512:	88ba      	ldrh	r2, [r7, #4]
 800b514:	2300      	movs	r3, #0
 800b516:	9301      	str	r3, [sp, #4]
 800b518:	887b      	ldrh	r3, [r7, #2]
 800b51a:	9300      	str	r3, [sp, #0]
 800b51c:	460b      	mov	r3, r1
 800b51e:	4601      	mov	r1, r0
 800b520:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b522:	f7ff ff09 	bl	800b338 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	f003 0303 	and.w	r3, r3, #3
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d010      	beq.n	800b554 <pbuf_alloc+0x1c8>
 800b532:	4b0b      	ldr	r3, [pc, #44]	; (800b560 <pbuf_alloc+0x1d4>)
 800b534:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b538:	490d      	ldr	r1, [pc, #52]	; (800b570 <pbuf_alloc+0x1e4>)
 800b53a:	480b      	ldr	r0, [pc, #44]	; (800b568 <pbuf_alloc+0x1dc>)
 800b53c:	f009 fbbc 	bl	8014cb8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b540:	e008      	b.n	800b554 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b542:	4b07      	ldr	r3, [pc, #28]	; (800b560 <pbuf_alloc+0x1d4>)
 800b544:	f240 1227 	movw	r2, #295	; 0x127
 800b548:	490a      	ldr	r1, [pc, #40]	; (800b574 <pbuf_alloc+0x1e8>)
 800b54a:	4807      	ldr	r0, [pc, #28]	; (800b568 <pbuf_alloc+0x1dc>)
 800b54c:	f009 fbb4 	bl	8014cb8 <iprintf>
      return NULL;
 800b550:	2300      	movs	r3, #0
 800b552:	e001      	b.n	800b558 <pbuf_alloc+0x1cc>
      break;
 800b554:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3728      	adds	r7, #40	; 0x28
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	080163fc 	.word	0x080163fc
 800b564:	0801642c 	.word	0x0801642c
 800b568:	0801645c 	.word	0x0801645c
 800b56c:	08016484 	.word	0x08016484
 800b570:	080164b8 	.word	0x080164b8
 800b574:	080164e4 	.word	0x080164e4

0800b578 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b086      	sub	sp, #24
 800b57c:	af02      	add	r7, sp, #8
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	460b      	mov	r3, r1
 800b582:	807b      	strh	r3, [r7, #2]
 800b584:	4613      	mov	r3, r2
 800b586:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b588:	883b      	ldrh	r3, [r7, #0]
 800b58a:	2b41      	cmp	r3, #65	; 0x41
 800b58c:	d009      	beq.n	800b5a2 <pbuf_alloc_reference+0x2a>
 800b58e:	883b      	ldrh	r3, [r7, #0]
 800b590:	2b01      	cmp	r3, #1
 800b592:	d006      	beq.n	800b5a2 <pbuf_alloc_reference+0x2a>
 800b594:	4b0f      	ldr	r3, [pc, #60]	; (800b5d4 <pbuf_alloc_reference+0x5c>)
 800b596:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b59a:	490f      	ldr	r1, [pc, #60]	; (800b5d8 <pbuf_alloc_reference+0x60>)
 800b59c:	480f      	ldr	r0, [pc, #60]	; (800b5dc <pbuf_alloc_reference+0x64>)
 800b59e:	f009 fb8b 	bl	8014cb8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b5a2:	2007      	movs	r0, #7
 800b5a4:	f7ff faf0 	bl	800ab88 <memp_malloc>
 800b5a8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d101      	bne.n	800b5b4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	e00b      	b.n	800b5cc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b5b4:	8879      	ldrh	r1, [r7, #2]
 800b5b6:	887a      	ldrh	r2, [r7, #2]
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	9301      	str	r3, [sp, #4]
 800b5bc:	883b      	ldrh	r3, [r7, #0]
 800b5be:	9300      	str	r3, [sp, #0]
 800b5c0:	460b      	mov	r3, r1
 800b5c2:	6879      	ldr	r1, [r7, #4]
 800b5c4:	68f8      	ldr	r0, [r7, #12]
 800b5c6:	f7ff feb7 	bl	800b338 <pbuf_init_alloced_pbuf>
  return p;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3710      	adds	r7, #16
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}
 800b5d4:	080163fc 	.word	0x080163fc
 800b5d8:	08016500 	.word	0x08016500
 800b5dc:	0801645c 	.word	0x0801645c

0800b5e0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b088      	sub	sp, #32
 800b5e4:	af02      	add	r7, sp, #8
 800b5e6:	607b      	str	r3, [r7, #4]
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	73fb      	strb	r3, [r7, #15]
 800b5ec:	460b      	mov	r3, r1
 800b5ee:	81bb      	strh	r3, [r7, #12]
 800b5f0:	4613      	mov	r3, r2
 800b5f2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b5f4:	7bfb      	ldrb	r3, [r7, #15]
 800b5f6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b5f8:	8a7b      	ldrh	r3, [r7, #18]
 800b5fa:	3303      	adds	r3, #3
 800b5fc:	f023 0203 	bic.w	r2, r3, #3
 800b600:	89bb      	ldrh	r3, [r7, #12]
 800b602:	441a      	add	r2, r3
 800b604:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b606:	429a      	cmp	r2, r3
 800b608:	d901      	bls.n	800b60e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b60a:	2300      	movs	r3, #0
 800b60c:	e018      	b.n	800b640 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b60e:	6a3b      	ldr	r3, [r7, #32]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d007      	beq.n	800b624 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b614:	8a7b      	ldrh	r3, [r7, #18]
 800b616:	3303      	adds	r3, #3
 800b618:	f023 0303 	bic.w	r3, r3, #3
 800b61c:	6a3a      	ldr	r2, [r7, #32]
 800b61e:	4413      	add	r3, r2
 800b620:	617b      	str	r3, [r7, #20]
 800b622:	e001      	b.n	800b628 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b624:	2300      	movs	r3, #0
 800b626:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	89b9      	ldrh	r1, [r7, #12]
 800b62c:	89ba      	ldrh	r2, [r7, #12]
 800b62e:	2302      	movs	r3, #2
 800b630:	9301      	str	r3, [sp, #4]
 800b632:	897b      	ldrh	r3, [r7, #10]
 800b634:	9300      	str	r3, [sp, #0]
 800b636:	460b      	mov	r3, r1
 800b638:	6979      	ldr	r1, [r7, #20]
 800b63a:	f7ff fe7d 	bl	800b338 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b63e:	687b      	ldr	r3, [r7, #4]
}
 800b640:	4618      	mov	r0, r3
 800b642:	3718      	adds	r7, #24
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}

0800b648 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	460b      	mov	r3, r1
 800b652:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d106      	bne.n	800b668 <pbuf_realloc+0x20>
 800b65a:	4b3a      	ldr	r3, [pc, #232]	; (800b744 <pbuf_realloc+0xfc>)
 800b65c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b660:	4939      	ldr	r1, [pc, #228]	; (800b748 <pbuf_realloc+0x100>)
 800b662:	483a      	ldr	r0, [pc, #232]	; (800b74c <pbuf_realloc+0x104>)
 800b664:	f009 fb28 	bl	8014cb8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	891b      	ldrh	r3, [r3, #8]
 800b66c:	887a      	ldrh	r2, [r7, #2]
 800b66e:	429a      	cmp	r2, r3
 800b670:	d263      	bcs.n	800b73a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	891a      	ldrh	r2, [r3, #8]
 800b676:	887b      	ldrh	r3, [r7, #2]
 800b678:	1ad3      	subs	r3, r2, r3
 800b67a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b67c:	887b      	ldrh	r3, [r7, #2]
 800b67e:	817b      	strh	r3, [r7, #10]
  q = p;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b684:	e018      	b.n	800b6b8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	895b      	ldrh	r3, [r3, #10]
 800b68a:	897a      	ldrh	r2, [r7, #10]
 800b68c:	1ad3      	subs	r3, r2, r3
 800b68e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	891a      	ldrh	r2, [r3, #8]
 800b694:	893b      	ldrh	r3, [r7, #8]
 800b696:	1ad3      	subs	r3, r2, r3
 800b698:	b29a      	uxth	r2, r3
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d106      	bne.n	800b6b8 <pbuf_realloc+0x70>
 800b6aa:	4b26      	ldr	r3, [pc, #152]	; (800b744 <pbuf_realloc+0xfc>)
 800b6ac:	f240 12af 	movw	r2, #431	; 0x1af
 800b6b0:	4927      	ldr	r1, [pc, #156]	; (800b750 <pbuf_realloc+0x108>)
 800b6b2:	4826      	ldr	r0, [pc, #152]	; (800b74c <pbuf_realloc+0x104>)
 800b6b4:	f009 fb00 	bl	8014cb8 <iprintf>
  while (rem_len > q->len) {
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	895b      	ldrh	r3, [r3, #10]
 800b6bc:	897a      	ldrh	r2, [r7, #10]
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d8e1      	bhi.n	800b686 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	7b1b      	ldrb	r3, [r3, #12]
 800b6c6:	f003 030f 	and.w	r3, r3, #15
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d121      	bne.n	800b712 <pbuf_realloc+0xca>
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	895b      	ldrh	r3, [r3, #10]
 800b6d2:	897a      	ldrh	r2, [r7, #10]
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d01c      	beq.n	800b712 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	7b5b      	ldrb	r3, [r3, #13]
 800b6dc:	f003 0302 	and.w	r3, r3, #2
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d116      	bne.n	800b712 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	685a      	ldr	r2, [r3, #4]
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	1ad3      	subs	r3, r2, r3
 800b6ec:	b29a      	uxth	r2, r3
 800b6ee:	897b      	ldrh	r3, [r7, #10]
 800b6f0:	4413      	add	r3, r2
 800b6f2:	b29b      	uxth	r3, r3
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	68f8      	ldr	r0, [r7, #12]
 800b6f8:	f7fe ffba 	bl	800a670 <mem_trim>
 800b6fc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d106      	bne.n	800b712 <pbuf_realloc+0xca>
 800b704:	4b0f      	ldr	r3, [pc, #60]	; (800b744 <pbuf_realloc+0xfc>)
 800b706:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b70a:	4912      	ldr	r1, [pc, #72]	; (800b754 <pbuf_realloc+0x10c>)
 800b70c:	480f      	ldr	r0, [pc, #60]	; (800b74c <pbuf_realloc+0x104>)
 800b70e:	f009 fad3 	bl	8014cb8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	897a      	ldrh	r2, [r7, #10]
 800b716:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	895a      	ldrh	r2, [r3, #10]
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d004      	beq.n	800b732 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	4618      	mov	r0, r3
 800b72e:	f000 f911 	bl	800b954 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	2200      	movs	r2, #0
 800b736:	601a      	str	r2, [r3, #0]
 800b738:	e000      	b.n	800b73c <pbuf_realloc+0xf4>
    return;
 800b73a:	bf00      	nop

}
 800b73c:	3710      	adds	r7, #16
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
 800b742:	bf00      	nop
 800b744:	080163fc 	.word	0x080163fc
 800b748:	08016514 	.word	0x08016514
 800b74c:	0801645c 	.word	0x0801645c
 800b750:	0801652c 	.word	0x0801652c
 800b754:	08016544 	.word	0x08016544

0800b758 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b086      	sub	sp, #24
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	60f8      	str	r0, [r7, #12]
 800b760:	60b9      	str	r1, [r7, #8]
 800b762:	4613      	mov	r3, r2
 800b764:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d106      	bne.n	800b77a <pbuf_add_header_impl+0x22>
 800b76c:	4b2b      	ldr	r3, [pc, #172]	; (800b81c <pbuf_add_header_impl+0xc4>)
 800b76e:	f240 12df 	movw	r2, #479	; 0x1df
 800b772:	492b      	ldr	r1, [pc, #172]	; (800b820 <pbuf_add_header_impl+0xc8>)
 800b774:	482b      	ldr	r0, [pc, #172]	; (800b824 <pbuf_add_header_impl+0xcc>)
 800b776:	f009 fa9f 	bl	8014cb8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d003      	beq.n	800b788 <pbuf_add_header_impl+0x30>
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b786:	d301      	bcc.n	800b78c <pbuf_add_header_impl+0x34>
    return 1;
 800b788:	2301      	movs	r3, #1
 800b78a:	e043      	b.n	800b814 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d101      	bne.n	800b796 <pbuf_add_header_impl+0x3e>
    return 0;
 800b792:	2300      	movs	r3, #0
 800b794:	e03e      	b.n	800b814 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	891a      	ldrh	r2, [r3, #8]
 800b79e:	8a7b      	ldrh	r3, [r7, #18]
 800b7a0:	4413      	add	r3, r2
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	8a7a      	ldrh	r2, [r7, #18]
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d901      	bls.n	800b7ae <pbuf_add_header_impl+0x56>
    return 1;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	e032      	b.n	800b814 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	7b1b      	ldrb	r3, [r3, #12]
 800b7b2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b7b4:	8a3b      	ldrh	r3, [r7, #16]
 800b7b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d00c      	beq.n	800b7d8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	685a      	ldr	r2, [r3, #4]
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	425b      	negs	r3, r3
 800b7c6:	4413      	add	r3, r2
 800b7c8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	3310      	adds	r3, #16
 800b7ce:	697a      	ldr	r2, [r7, #20]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d20d      	bcs.n	800b7f0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	e01d      	b.n	800b814 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b7d8:	79fb      	ldrb	r3, [r7, #7]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d006      	beq.n	800b7ec <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	685a      	ldr	r2, [r3, #4]
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	425b      	negs	r3, r3
 800b7e6:	4413      	add	r3, r2
 800b7e8:	617b      	str	r3, [r7, #20]
 800b7ea:	e001      	b.n	800b7f0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	e011      	b.n	800b814 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	697a      	ldr	r2, [r7, #20]
 800b7f4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	895a      	ldrh	r2, [r3, #10]
 800b7fa:	8a7b      	ldrh	r3, [r7, #18]
 800b7fc:	4413      	add	r3, r2
 800b7fe:	b29a      	uxth	r2, r3
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	891a      	ldrh	r2, [r3, #8]
 800b808:	8a7b      	ldrh	r3, [r7, #18]
 800b80a:	4413      	add	r3, r2
 800b80c:	b29a      	uxth	r2, r3
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	811a      	strh	r2, [r3, #8]


  return 0;
 800b812:	2300      	movs	r3, #0
}
 800b814:	4618      	mov	r0, r3
 800b816:	3718      	adds	r7, #24
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	080163fc 	.word	0x080163fc
 800b820:	08016560 	.word	0x08016560
 800b824:	0801645c 	.word	0x0801645c

0800b828 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b832:	2200      	movs	r2, #0
 800b834:	6839      	ldr	r1, [r7, #0]
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f7ff ff8e 	bl	800b758 <pbuf_add_header_impl>
 800b83c:	4603      	mov	r3, r0
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3708      	adds	r7, #8
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
	...

0800b848 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d106      	bne.n	800b866 <pbuf_remove_header+0x1e>
 800b858:	4b20      	ldr	r3, [pc, #128]	; (800b8dc <pbuf_remove_header+0x94>)
 800b85a:	f240 224b 	movw	r2, #587	; 0x24b
 800b85e:	4920      	ldr	r1, [pc, #128]	; (800b8e0 <pbuf_remove_header+0x98>)
 800b860:	4820      	ldr	r0, [pc, #128]	; (800b8e4 <pbuf_remove_header+0x9c>)
 800b862:	f009 fa29 	bl	8014cb8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d003      	beq.n	800b874 <pbuf_remove_header+0x2c>
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b872:	d301      	bcc.n	800b878 <pbuf_remove_header+0x30>
    return 1;
 800b874:	2301      	movs	r3, #1
 800b876:	e02c      	b.n	800b8d2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d101      	bne.n	800b882 <pbuf_remove_header+0x3a>
    return 0;
 800b87e:	2300      	movs	r3, #0
 800b880:	e027      	b.n	800b8d2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	895b      	ldrh	r3, [r3, #10]
 800b88a:	89fa      	ldrh	r2, [r7, #14]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d908      	bls.n	800b8a2 <pbuf_remove_header+0x5a>
 800b890:	4b12      	ldr	r3, [pc, #72]	; (800b8dc <pbuf_remove_header+0x94>)
 800b892:	f240 2255 	movw	r2, #597	; 0x255
 800b896:	4914      	ldr	r1, [pc, #80]	; (800b8e8 <pbuf_remove_header+0xa0>)
 800b898:	4812      	ldr	r0, [pc, #72]	; (800b8e4 <pbuf_remove_header+0x9c>)
 800b89a:	f009 fa0d 	bl	8014cb8 <iprintf>
 800b89e:	2301      	movs	r3, #1
 800b8a0:	e017      	b.n	800b8d2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	685a      	ldr	r2, [r3, #4]
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	441a      	add	r2, r3
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	895a      	ldrh	r2, [r3, #10]
 800b8b8:	89fb      	ldrh	r3, [r7, #14]
 800b8ba:	1ad3      	subs	r3, r2, r3
 800b8bc:	b29a      	uxth	r2, r3
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	891a      	ldrh	r2, [r3, #8]
 800b8c6:	89fb      	ldrh	r3, [r7, #14]
 800b8c8:	1ad3      	subs	r3, r2, r3
 800b8ca:	b29a      	uxth	r2, r3
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b8d0:	2300      	movs	r3, #0
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3710      	adds	r7, #16
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
 800b8da:	bf00      	nop
 800b8dc:	080163fc 	.word	0x080163fc
 800b8e0:	08016560 	.word	0x08016560
 800b8e4:	0801645c 	.word	0x0801645c
 800b8e8:	0801656c 	.word	0x0801656c

0800b8ec <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b082      	sub	sp, #8
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	460b      	mov	r3, r1
 800b8f6:	807b      	strh	r3, [r7, #2]
 800b8f8:	4613      	mov	r3, r2
 800b8fa:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b8fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b900:	2b00      	cmp	r3, #0
 800b902:	da08      	bge.n	800b916 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b904:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b908:	425b      	negs	r3, r3
 800b90a:	4619      	mov	r1, r3
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f7ff ff9b 	bl	800b848 <pbuf_remove_header>
 800b912:	4603      	mov	r3, r0
 800b914:	e007      	b.n	800b926 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b916:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b91a:	787a      	ldrb	r2, [r7, #1]
 800b91c:	4619      	mov	r1, r3
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f7ff ff1a 	bl	800b758 <pbuf_add_header_impl>
 800b924:	4603      	mov	r3, r0
  }
}
 800b926:	4618      	mov	r0, r3
 800b928:	3708      	adds	r7, #8
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}

0800b92e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b92e:	b580      	push	{r7, lr}
 800b930:	b082      	sub	sp, #8
 800b932:	af00      	add	r7, sp, #0
 800b934:	6078      	str	r0, [r7, #4]
 800b936:	460b      	mov	r3, r1
 800b938:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b93a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b93e:	2201      	movs	r2, #1
 800b940:	4619      	mov	r1, r3
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f7ff ffd2 	bl	800b8ec <pbuf_header_impl>
 800b948:	4603      	mov	r3, r0
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3708      	adds	r7, #8
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}
	...

0800b954 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b086      	sub	sp, #24
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d10b      	bne.n	800b97a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d106      	bne.n	800b976 <pbuf_free+0x22>
 800b968:	4b38      	ldr	r3, [pc, #224]	; (800ba4c <pbuf_free+0xf8>)
 800b96a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b96e:	4938      	ldr	r1, [pc, #224]	; (800ba50 <pbuf_free+0xfc>)
 800b970:	4838      	ldr	r0, [pc, #224]	; (800ba54 <pbuf_free+0x100>)
 800b972:	f009 f9a1 	bl	8014cb8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b976:	2300      	movs	r3, #0
 800b978:	e063      	b.n	800ba42 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b97a:	2300      	movs	r3, #0
 800b97c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b97e:	e05c      	b.n	800ba3a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	7b9b      	ldrb	r3, [r3, #14]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d106      	bne.n	800b996 <pbuf_free+0x42>
 800b988:	4b30      	ldr	r3, [pc, #192]	; (800ba4c <pbuf_free+0xf8>)
 800b98a:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b98e:	4932      	ldr	r1, [pc, #200]	; (800ba58 <pbuf_free+0x104>)
 800b990:	4830      	ldr	r0, [pc, #192]	; (800ba54 <pbuf_free+0x100>)
 800b992:	f009 f991 	bl	8014cb8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	7b9b      	ldrb	r3, [r3, #14]
 800b99a:	3b01      	subs	r3, #1
 800b99c:	b2da      	uxtb	r2, r3
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	739a      	strb	r2, [r3, #14]
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	7b9b      	ldrb	r3, [r3, #14]
 800b9a6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b9a8:	7dbb      	ldrb	r3, [r7, #22]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d143      	bne.n	800ba36 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	7b1b      	ldrb	r3, [r3, #12]
 800b9b8:	f003 030f 	and.w	r3, r3, #15
 800b9bc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	7b5b      	ldrb	r3, [r3, #13]
 800b9c2:	f003 0302 	and.w	r3, r3, #2
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d011      	beq.n	800b9ee <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	691b      	ldr	r3, [r3, #16]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d106      	bne.n	800b9e4 <pbuf_free+0x90>
 800b9d6:	4b1d      	ldr	r3, [pc, #116]	; (800ba4c <pbuf_free+0xf8>)
 800b9d8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b9dc:	491f      	ldr	r1, [pc, #124]	; (800ba5c <pbuf_free+0x108>)
 800b9de:	481d      	ldr	r0, [pc, #116]	; (800ba54 <pbuf_free+0x100>)
 800b9e0:	f009 f96a 	bl	8014cb8 <iprintf>
        pc->custom_free_function(p);
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	691b      	ldr	r3, [r3, #16]
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	4798      	blx	r3
 800b9ec:	e01d      	b.n	800ba2a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b9ee:	7bfb      	ldrb	r3, [r7, #15]
 800b9f0:	2b02      	cmp	r3, #2
 800b9f2:	d104      	bne.n	800b9fe <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800b9f4:	6879      	ldr	r1, [r7, #4]
 800b9f6:	2008      	movs	r0, #8
 800b9f8:	f7ff f936 	bl	800ac68 <memp_free>
 800b9fc:	e015      	b.n	800ba2a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b9fe:	7bfb      	ldrb	r3, [r7, #15]
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	d104      	bne.n	800ba0e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800ba04:	6879      	ldr	r1, [r7, #4]
 800ba06:	2007      	movs	r0, #7
 800ba08:	f7ff f92e 	bl	800ac68 <memp_free>
 800ba0c:	e00d      	b.n	800ba2a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ba0e:	7bfb      	ldrb	r3, [r7, #15]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d103      	bne.n	800ba1c <pbuf_free+0xc8>
          mem_free(p);
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f7fe fdc1 	bl	800a59c <mem_free>
 800ba1a:	e006      	b.n	800ba2a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ba1c:	4b0b      	ldr	r3, [pc, #44]	; (800ba4c <pbuf_free+0xf8>)
 800ba1e:	f240 320f 	movw	r2, #783	; 0x30f
 800ba22:	490f      	ldr	r1, [pc, #60]	; (800ba60 <pbuf_free+0x10c>)
 800ba24:	480b      	ldr	r0, [pc, #44]	; (800ba54 <pbuf_free+0x100>)
 800ba26:	f009 f947 	bl	8014cb8 <iprintf>
        }
      }
      count++;
 800ba2a:	7dfb      	ldrb	r3, [r7, #23]
 800ba2c:	3301      	adds	r3, #1
 800ba2e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	607b      	str	r3, [r7, #4]
 800ba34:	e001      	b.n	800ba3a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800ba36:	2300      	movs	r3, #0
 800ba38:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d19f      	bne.n	800b980 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ba40:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3718      	adds	r7, #24
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	080163fc 	.word	0x080163fc
 800ba50:	08016560 	.word	0x08016560
 800ba54:	0801645c 	.word	0x0801645c
 800ba58:	0801658c 	.word	0x0801658c
 800ba5c:	080165a4 	.word	0x080165a4
 800ba60:	080165c8 	.word	0x080165c8

0800ba64 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ba64:	b480      	push	{r7}
 800ba66:	b085      	sub	sp, #20
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800ba70:	e005      	b.n	800ba7e <pbuf_clen+0x1a>
    ++len;
 800ba72:	89fb      	ldrh	r3, [r7, #14]
 800ba74:	3301      	adds	r3, #1
 800ba76:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d1f6      	bne.n	800ba72 <pbuf_clen+0xe>
  }
  return len;
 800ba84:	89fb      	ldrh	r3, [r7, #14]
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3714      	adds	r7, #20
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr
	...

0800ba94 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d010      	beq.n	800bac4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	7b9b      	ldrb	r3, [r3, #14]
 800baa6:	3301      	adds	r3, #1
 800baa8:	b2da      	uxtb	r2, r3
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	7b9b      	ldrb	r3, [r3, #14]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d106      	bne.n	800bac4 <pbuf_ref+0x30>
 800bab6:	4b05      	ldr	r3, [pc, #20]	; (800bacc <pbuf_ref+0x38>)
 800bab8:	f240 3242 	movw	r2, #834	; 0x342
 800babc:	4904      	ldr	r1, [pc, #16]	; (800bad0 <pbuf_ref+0x3c>)
 800babe:	4805      	ldr	r0, [pc, #20]	; (800bad4 <pbuf_ref+0x40>)
 800bac0:	f009 f8fa 	bl	8014cb8 <iprintf>
  }
}
 800bac4:	bf00      	nop
 800bac6:	3708      	adds	r7, #8
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	080163fc 	.word	0x080163fc
 800bad0:	080165dc 	.word	0x080165dc
 800bad4:	0801645c 	.word	0x0801645c

0800bad8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b084      	sub	sp, #16
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d002      	beq.n	800baee <pbuf_cat+0x16>
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d107      	bne.n	800bafe <pbuf_cat+0x26>
 800baee:	4b20      	ldr	r3, [pc, #128]	; (800bb70 <pbuf_cat+0x98>)
 800baf0:	f240 3259 	movw	r2, #857	; 0x359
 800baf4:	491f      	ldr	r1, [pc, #124]	; (800bb74 <pbuf_cat+0x9c>)
 800baf6:	4820      	ldr	r0, [pc, #128]	; (800bb78 <pbuf_cat+0xa0>)
 800baf8:	f009 f8de 	bl	8014cb8 <iprintf>
 800bafc:	e034      	b.n	800bb68 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	60fb      	str	r3, [r7, #12]
 800bb02:	e00a      	b.n	800bb1a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	891a      	ldrh	r2, [r3, #8]
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	891b      	ldrh	r3, [r3, #8]
 800bb0c:	4413      	add	r3, r2
 800bb0e:	b29a      	uxth	r2, r3
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	60fb      	str	r3, [r7, #12]
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d1f0      	bne.n	800bb04 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	891a      	ldrh	r2, [r3, #8]
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	895b      	ldrh	r3, [r3, #10]
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	d006      	beq.n	800bb3c <pbuf_cat+0x64>
 800bb2e:	4b10      	ldr	r3, [pc, #64]	; (800bb70 <pbuf_cat+0x98>)
 800bb30:	f240 3262 	movw	r2, #866	; 0x362
 800bb34:	4911      	ldr	r1, [pc, #68]	; (800bb7c <pbuf_cat+0xa4>)
 800bb36:	4810      	ldr	r0, [pc, #64]	; (800bb78 <pbuf_cat+0xa0>)
 800bb38:	f009 f8be 	bl	8014cb8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d006      	beq.n	800bb52 <pbuf_cat+0x7a>
 800bb44:	4b0a      	ldr	r3, [pc, #40]	; (800bb70 <pbuf_cat+0x98>)
 800bb46:	f240 3263 	movw	r2, #867	; 0x363
 800bb4a:	490d      	ldr	r1, [pc, #52]	; (800bb80 <pbuf_cat+0xa8>)
 800bb4c:	480a      	ldr	r0, [pc, #40]	; (800bb78 <pbuf_cat+0xa0>)
 800bb4e:	f009 f8b3 	bl	8014cb8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	891a      	ldrh	r2, [r3, #8]
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	891b      	ldrh	r3, [r3, #8]
 800bb5a:	4413      	add	r3, r2
 800bb5c:	b29a      	uxth	r2, r3
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	683a      	ldr	r2, [r7, #0]
 800bb66:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800bb68:	3710      	adds	r7, #16
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	080163fc 	.word	0x080163fc
 800bb74:	080165f0 	.word	0x080165f0
 800bb78:	0801645c 	.word	0x0801645c
 800bb7c:	08016628 	.word	0x08016628
 800bb80:	08016658 	.word	0x08016658

0800bb84 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b082      	sub	sp, #8
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800bb8e:	6839      	ldr	r1, [r7, #0]
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f7ff ffa1 	bl	800bad8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800bb96:	6838      	ldr	r0, [r7, #0]
 800bb98:	f7ff ff7c 	bl	800ba94 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800bb9c:	bf00      	nop
 800bb9e:	3708      	adds	r7, #8
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}

0800bba4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b086      	sub	sp, #24
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	617b      	str	r3, [r7, #20]
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d008      	beq.n	800bbce <pbuf_copy+0x2a>
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d005      	beq.n	800bbce <pbuf_copy+0x2a>
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	891a      	ldrh	r2, [r3, #8]
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	891b      	ldrh	r3, [r3, #8]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d209      	bcs.n	800bbe2 <pbuf_copy+0x3e>
 800bbce:	4b57      	ldr	r3, [pc, #348]	; (800bd2c <pbuf_copy+0x188>)
 800bbd0:	f240 32c9 	movw	r2, #969	; 0x3c9
 800bbd4:	4956      	ldr	r1, [pc, #344]	; (800bd30 <pbuf_copy+0x18c>)
 800bbd6:	4857      	ldr	r0, [pc, #348]	; (800bd34 <pbuf_copy+0x190>)
 800bbd8:	f009 f86e 	bl	8014cb8 <iprintf>
 800bbdc:	f06f 030f 	mvn.w	r3, #15
 800bbe0:	e09f      	b.n	800bd22 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	895b      	ldrh	r3, [r3, #10]
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	1ad2      	subs	r2, r2, r3
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	895b      	ldrh	r3, [r3, #10]
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	1acb      	subs	r3, r1, r3
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	d306      	bcc.n	800bc08 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	895b      	ldrh	r3, [r3, #10]
 800bbfe:	461a      	mov	r2, r3
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	1ad3      	subs	r3, r2, r3
 800bc04:	60fb      	str	r3, [r7, #12]
 800bc06:	e005      	b.n	800bc14 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	895b      	ldrh	r3, [r3, #10]
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	1ad3      	subs	r3, r2, r3
 800bc12:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	685a      	ldr	r2, [r3, #4]
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	18d0      	adds	r0, r2, r3
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	685a      	ldr	r2, [r3, #4]
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	4413      	add	r3, r2
 800bc24:	68fa      	ldr	r2, [r7, #12]
 800bc26:	4619      	mov	r1, r3
 800bc28:	f009 f830 	bl	8014c8c <memcpy>
    offset_to += len;
 800bc2c:	697a      	ldr	r2, [r7, #20]
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	4413      	add	r3, r2
 800bc32:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800bc34:	693a      	ldr	r2, [r7, #16]
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	4413      	add	r3, r2
 800bc3a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	895b      	ldrh	r3, [r3, #10]
 800bc40:	461a      	mov	r2, r3
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d906      	bls.n	800bc56 <pbuf_copy+0xb2>
 800bc48:	4b38      	ldr	r3, [pc, #224]	; (800bd2c <pbuf_copy+0x188>)
 800bc4a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800bc4e:	493a      	ldr	r1, [pc, #232]	; (800bd38 <pbuf_copy+0x194>)
 800bc50:	4838      	ldr	r0, [pc, #224]	; (800bd34 <pbuf_copy+0x190>)
 800bc52:	f009 f831 	bl	8014cb8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	895b      	ldrh	r3, [r3, #10]
 800bc5a:	461a      	mov	r2, r3
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d906      	bls.n	800bc70 <pbuf_copy+0xcc>
 800bc62:	4b32      	ldr	r3, [pc, #200]	; (800bd2c <pbuf_copy+0x188>)
 800bc64:	f240 32da 	movw	r2, #986	; 0x3da
 800bc68:	4934      	ldr	r1, [pc, #208]	; (800bd3c <pbuf_copy+0x198>)
 800bc6a:	4832      	ldr	r0, [pc, #200]	; (800bd34 <pbuf_copy+0x190>)
 800bc6c:	f009 f824 	bl	8014cb8 <iprintf>
    if (offset_from >= p_from->len) {
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	895b      	ldrh	r3, [r3, #10]
 800bc74:	461a      	mov	r2, r3
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	d304      	bcc.n	800bc86 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	895b      	ldrh	r3, [r3, #10]
 800bc8a:	461a      	mov	r2, r3
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d114      	bne.n	800bcbc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800bc92:	2300      	movs	r3, #0
 800bc94:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d10c      	bne.n	800bcbc <pbuf_copy+0x118>
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d009      	beq.n	800bcbc <pbuf_copy+0x118>
 800bca8:	4b20      	ldr	r3, [pc, #128]	; (800bd2c <pbuf_copy+0x188>)
 800bcaa:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800bcae:	4924      	ldr	r1, [pc, #144]	; (800bd40 <pbuf_copy+0x19c>)
 800bcb0:	4820      	ldr	r0, [pc, #128]	; (800bd34 <pbuf_copy+0x190>)
 800bcb2:	f009 f801 	bl	8014cb8 <iprintf>
 800bcb6:	f06f 030f 	mvn.w	r3, #15
 800bcba:	e032      	b.n	800bd22 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d013      	beq.n	800bcea <pbuf_copy+0x146>
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	895a      	ldrh	r2, [r3, #10]
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	891b      	ldrh	r3, [r3, #8]
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d10d      	bne.n	800bcea <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d009      	beq.n	800bcea <pbuf_copy+0x146>
 800bcd6:	4b15      	ldr	r3, [pc, #84]	; (800bd2c <pbuf_copy+0x188>)
 800bcd8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800bcdc:	4919      	ldr	r1, [pc, #100]	; (800bd44 <pbuf_copy+0x1a0>)
 800bcde:	4815      	ldr	r0, [pc, #84]	; (800bd34 <pbuf_copy+0x190>)
 800bce0:	f008 ffea 	bl	8014cb8 <iprintf>
 800bce4:	f06f 0305 	mvn.w	r3, #5
 800bce8:	e01b      	b.n	800bd22 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d013      	beq.n	800bd18 <pbuf_copy+0x174>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	895a      	ldrh	r2, [r3, #10]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	891b      	ldrh	r3, [r3, #8]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d10d      	bne.n	800bd18 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d009      	beq.n	800bd18 <pbuf_copy+0x174>
 800bd04:	4b09      	ldr	r3, [pc, #36]	; (800bd2c <pbuf_copy+0x188>)
 800bd06:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800bd0a:	490e      	ldr	r1, [pc, #56]	; (800bd44 <pbuf_copy+0x1a0>)
 800bd0c:	4809      	ldr	r0, [pc, #36]	; (800bd34 <pbuf_copy+0x190>)
 800bd0e:	f008 ffd3 	bl	8014cb8 <iprintf>
 800bd12:	f06f 0305 	mvn.w	r3, #5
 800bd16:	e004      	b.n	800bd22 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	f47f af61 	bne.w	800bbe2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800bd20:	2300      	movs	r3, #0
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3718      	adds	r7, #24
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}
 800bd2a:	bf00      	nop
 800bd2c:	080163fc 	.word	0x080163fc
 800bd30:	080166a4 	.word	0x080166a4
 800bd34:	0801645c 	.word	0x0801645c
 800bd38:	080166d4 	.word	0x080166d4
 800bd3c:	080166ec 	.word	0x080166ec
 800bd40:	08016708 	.word	0x08016708
 800bd44:	08016718 	.word	0x08016718

0800bd48 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b088      	sub	sp, #32
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	60f8      	str	r0, [r7, #12]
 800bd50:	60b9      	str	r1, [r7, #8]
 800bd52:	4611      	mov	r1, r2
 800bd54:	461a      	mov	r2, r3
 800bd56:	460b      	mov	r3, r1
 800bd58:	80fb      	strh	r3, [r7, #6]
 800bd5a:	4613      	mov	r3, r2
 800bd5c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800bd62:	2300      	movs	r3, #0
 800bd64:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d108      	bne.n	800bd7e <pbuf_copy_partial+0x36>
 800bd6c:	4b2b      	ldr	r3, [pc, #172]	; (800be1c <pbuf_copy_partial+0xd4>)
 800bd6e:	f240 420a 	movw	r2, #1034	; 0x40a
 800bd72:	492b      	ldr	r1, [pc, #172]	; (800be20 <pbuf_copy_partial+0xd8>)
 800bd74:	482b      	ldr	r0, [pc, #172]	; (800be24 <pbuf_copy_partial+0xdc>)
 800bd76:	f008 ff9f 	bl	8014cb8 <iprintf>
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	e04a      	b.n	800be14 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d108      	bne.n	800bd96 <pbuf_copy_partial+0x4e>
 800bd84:	4b25      	ldr	r3, [pc, #148]	; (800be1c <pbuf_copy_partial+0xd4>)
 800bd86:	f240 420b 	movw	r2, #1035	; 0x40b
 800bd8a:	4927      	ldr	r1, [pc, #156]	; (800be28 <pbuf_copy_partial+0xe0>)
 800bd8c:	4825      	ldr	r0, [pc, #148]	; (800be24 <pbuf_copy_partial+0xdc>)
 800bd8e:	f008 ff93 	bl	8014cb8 <iprintf>
 800bd92:	2300      	movs	r3, #0
 800bd94:	e03e      	b.n	800be14 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	61fb      	str	r3, [r7, #28]
 800bd9a:	e034      	b.n	800be06 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800bd9c:	88bb      	ldrh	r3, [r7, #4]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d00a      	beq.n	800bdb8 <pbuf_copy_partial+0x70>
 800bda2:	69fb      	ldr	r3, [r7, #28]
 800bda4:	895b      	ldrh	r3, [r3, #10]
 800bda6:	88ba      	ldrh	r2, [r7, #4]
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	d305      	bcc.n	800bdb8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800bdac:	69fb      	ldr	r3, [r7, #28]
 800bdae:	895b      	ldrh	r3, [r3, #10]
 800bdb0:	88ba      	ldrh	r2, [r7, #4]
 800bdb2:	1ad3      	subs	r3, r2, r3
 800bdb4:	80bb      	strh	r3, [r7, #4]
 800bdb6:	e023      	b.n	800be00 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800bdb8:	69fb      	ldr	r3, [r7, #28]
 800bdba:	895a      	ldrh	r2, [r3, #10]
 800bdbc:	88bb      	ldrh	r3, [r7, #4]
 800bdbe:	1ad3      	subs	r3, r2, r3
 800bdc0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800bdc2:	8b3a      	ldrh	r2, [r7, #24]
 800bdc4:	88fb      	ldrh	r3, [r7, #6]
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d901      	bls.n	800bdce <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800bdca:	88fb      	ldrh	r3, [r7, #6]
 800bdcc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800bdce:	8b7b      	ldrh	r3, [r7, #26]
 800bdd0:	68ba      	ldr	r2, [r7, #8]
 800bdd2:	18d0      	adds	r0, r2, r3
 800bdd4:	69fb      	ldr	r3, [r7, #28]
 800bdd6:	685a      	ldr	r2, [r3, #4]
 800bdd8:	88bb      	ldrh	r3, [r7, #4]
 800bdda:	4413      	add	r3, r2
 800bddc:	8b3a      	ldrh	r2, [r7, #24]
 800bdde:	4619      	mov	r1, r3
 800bde0:	f008 ff54 	bl	8014c8c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800bde4:	8afa      	ldrh	r2, [r7, #22]
 800bde6:	8b3b      	ldrh	r3, [r7, #24]
 800bde8:	4413      	add	r3, r2
 800bdea:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800bdec:	8b7a      	ldrh	r2, [r7, #26]
 800bdee:	8b3b      	ldrh	r3, [r7, #24]
 800bdf0:	4413      	add	r3, r2
 800bdf2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800bdf4:	88fa      	ldrh	r2, [r7, #6]
 800bdf6:	8b3b      	ldrh	r3, [r7, #24]
 800bdf8:	1ad3      	subs	r3, r2, r3
 800bdfa:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800be00:	69fb      	ldr	r3, [r7, #28]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	61fb      	str	r3, [r7, #28]
 800be06:	88fb      	ldrh	r3, [r7, #6]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d002      	beq.n	800be12 <pbuf_copy_partial+0xca>
 800be0c:	69fb      	ldr	r3, [r7, #28]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d1c4      	bne.n	800bd9c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800be12:	8afb      	ldrh	r3, [r7, #22]
}
 800be14:	4618      	mov	r0, r3
 800be16:	3720      	adds	r7, #32
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}
 800be1c:	080163fc 	.word	0x080163fc
 800be20:	08016744 	.word	0x08016744
 800be24:	0801645c 	.word	0x0801645c
 800be28:	08016764 	.word	0x08016764

0800be2c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b084      	sub	sp, #16
 800be30:	af00      	add	r7, sp, #0
 800be32:	4603      	mov	r3, r0
 800be34:	603a      	str	r2, [r7, #0]
 800be36:	71fb      	strb	r3, [r7, #7]
 800be38:	460b      	mov	r3, r1
 800be3a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	8919      	ldrh	r1, [r3, #8]
 800be40:	88ba      	ldrh	r2, [r7, #4]
 800be42:	79fb      	ldrb	r3, [r7, #7]
 800be44:	4618      	mov	r0, r3
 800be46:	f7ff faa1 	bl	800b38c <pbuf_alloc>
 800be4a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d101      	bne.n	800be56 <pbuf_clone+0x2a>
    return NULL;
 800be52:	2300      	movs	r3, #0
 800be54:	e011      	b.n	800be7a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800be56:	6839      	ldr	r1, [r7, #0]
 800be58:	68f8      	ldr	r0, [r7, #12]
 800be5a:	f7ff fea3 	bl	800bba4 <pbuf_copy>
 800be5e:	4603      	mov	r3, r0
 800be60:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800be62:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d006      	beq.n	800be78 <pbuf_clone+0x4c>
 800be6a:	4b06      	ldr	r3, [pc, #24]	; (800be84 <pbuf_clone+0x58>)
 800be6c:	f240 5224 	movw	r2, #1316	; 0x524
 800be70:	4905      	ldr	r1, [pc, #20]	; (800be88 <pbuf_clone+0x5c>)
 800be72:	4806      	ldr	r0, [pc, #24]	; (800be8c <pbuf_clone+0x60>)
 800be74:	f008 ff20 	bl	8014cb8 <iprintf>
  return q;
 800be78:	68fb      	ldr	r3, [r7, #12]
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3710      	adds	r7, #16
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	080163fc 	.word	0x080163fc
 800be88:	08016870 	.word	0x08016870
 800be8c:	0801645c 	.word	0x0801645c

0800be90 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800be94:	f008 ff28 	bl	8014ce8 <rand>
 800be98:	4603      	mov	r3, r0
 800be9a:	b29b      	uxth	r3, r3
 800be9c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bea0:	b29b      	uxth	r3, r3
 800bea2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bea6:	b29a      	uxth	r2, r3
 800bea8:	4b01      	ldr	r3, [pc, #4]	; (800beb0 <tcp_init+0x20>)
 800beaa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800beac:	bf00      	nop
 800beae:	bd80      	pop	{r7, pc}
 800beb0:	2400002c 	.word	0x2400002c

0800beb4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b082      	sub	sp, #8
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	7d1b      	ldrb	r3, [r3, #20]
 800bec0:	2b01      	cmp	r3, #1
 800bec2:	d105      	bne.n	800bed0 <tcp_free+0x1c>
 800bec4:	4b06      	ldr	r3, [pc, #24]	; (800bee0 <tcp_free+0x2c>)
 800bec6:	22d4      	movs	r2, #212	; 0xd4
 800bec8:	4906      	ldr	r1, [pc, #24]	; (800bee4 <tcp_free+0x30>)
 800beca:	4807      	ldr	r0, [pc, #28]	; (800bee8 <tcp_free+0x34>)
 800becc:	f008 fef4 	bl	8014cb8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800bed0:	6879      	ldr	r1, [r7, #4]
 800bed2:	2001      	movs	r0, #1
 800bed4:	f7fe fec8 	bl	800ac68 <memp_free>
}
 800bed8:	bf00      	nop
 800beda:	3708      	adds	r7, #8
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}
 800bee0:	080168fc 	.word	0x080168fc
 800bee4:	0801692c 	.word	0x0801692c
 800bee8:	08016940 	.word	0x08016940

0800beec <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b082      	sub	sp, #8
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	7d1b      	ldrb	r3, [r3, #20]
 800bef8:	2b01      	cmp	r3, #1
 800befa:	d105      	bne.n	800bf08 <tcp_free_listen+0x1c>
 800befc:	4b06      	ldr	r3, [pc, #24]	; (800bf18 <tcp_free_listen+0x2c>)
 800befe:	22df      	movs	r2, #223	; 0xdf
 800bf00:	4906      	ldr	r1, [pc, #24]	; (800bf1c <tcp_free_listen+0x30>)
 800bf02:	4807      	ldr	r0, [pc, #28]	; (800bf20 <tcp_free_listen+0x34>)
 800bf04:	f008 fed8 	bl	8014cb8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800bf08:	6879      	ldr	r1, [r7, #4]
 800bf0a:	2002      	movs	r0, #2
 800bf0c:	f7fe feac 	bl	800ac68 <memp_free>
}
 800bf10:	bf00      	nop
 800bf12:	3708      	adds	r7, #8
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}
 800bf18:	080168fc 	.word	0x080168fc
 800bf1c:	08016968 	.word	0x08016968
 800bf20:	08016940 	.word	0x08016940

0800bf24 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800bf28:	f001 f85c 	bl	800cfe4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800bf2c:	4b07      	ldr	r3, [pc, #28]	; (800bf4c <tcp_tmr+0x28>)
 800bf2e:	781b      	ldrb	r3, [r3, #0]
 800bf30:	3301      	adds	r3, #1
 800bf32:	b2da      	uxtb	r2, r3
 800bf34:	4b05      	ldr	r3, [pc, #20]	; (800bf4c <tcp_tmr+0x28>)
 800bf36:	701a      	strb	r2, [r3, #0]
 800bf38:	4b04      	ldr	r3, [pc, #16]	; (800bf4c <tcp_tmr+0x28>)
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	f003 0301 	and.w	r3, r3, #1
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d001      	beq.n	800bf48 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800bf44:	f000 fd0e 	bl	800c964 <tcp_slowtmr>
  }
}
 800bf48:	bf00      	nop
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	240000f1 	.word	0x240000f1

0800bf50 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b084      	sub	sp, #16
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d105      	bne.n	800bf6c <tcp_remove_listener+0x1c>
 800bf60:	4b0d      	ldr	r3, [pc, #52]	; (800bf98 <tcp_remove_listener+0x48>)
 800bf62:	22ff      	movs	r2, #255	; 0xff
 800bf64:	490d      	ldr	r1, [pc, #52]	; (800bf9c <tcp_remove_listener+0x4c>)
 800bf66:	480e      	ldr	r0, [pc, #56]	; (800bfa0 <tcp_remove_listener+0x50>)
 800bf68:	f008 fea6 	bl	8014cb8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	60fb      	str	r3, [r7, #12]
 800bf70:	e00a      	b.n	800bf88 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf76:	683a      	ldr	r2, [r7, #0]
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d102      	bne.n	800bf82 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	68db      	ldr	r3, [r3, #12]
 800bf86:	60fb      	str	r3, [r7, #12]
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d1f1      	bne.n	800bf72 <tcp_remove_listener+0x22>
    }
  }
}
 800bf8e:	bf00      	nop
 800bf90:	bf00      	nop
 800bf92:	3710      	adds	r7, #16
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}
 800bf98:	080168fc 	.word	0x080168fc
 800bf9c:	08016984 	.word	0x08016984
 800bfa0:	08016940 	.word	0x08016940

0800bfa4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b084      	sub	sp, #16
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d106      	bne.n	800bfc0 <tcp_listen_closed+0x1c>
 800bfb2:	4b14      	ldr	r3, [pc, #80]	; (800c004 <tcp_listen_closed+0x60>)
 800bfb4:	f240 1211 	movw	r2, #273	; 0x111
 800bfb8:	4913      	ldr	r1, [pc, #76]	; (800c008 <tcp_listen_closed+0x64>)
 800bfba:	4814      	ldr	r0, [pc, #80]	; (800c00c <tcp_listen_closed+0x68>)
 800bfbc:	f008 fe7c 	bl	8014cb8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	7d1b      	ldrb	r3, [r3, #20]
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d006      	beq.n	800bfd6 <tcp_listen_closed+0x32>
 800bfc8:	4b0e      	ldr	r3, [pc, #56]	; (800c004 <tcp_listen_closed+0x60>)
 800bfca:	f44f 7289 	mov.w	r2, #274	; 0x112
 800bfce:	4910      	ldr	r1, [pc, #64]	; (800c010 <tcp_listen_closed+0x6c>)
 800bfd0:	480e      	ldr	r0, [pc, #56]	; (800c00c <tcp_listen_closed+0x68>)
 800bfd2:	f008 fe71 	bl	8014cb8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	60fb      	str	r3, [r7, #12]
 800bfda:	e00b      	b.n	800bff4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800bfdc:	4a0d      	ldr	r2, [pc, #52]	; (800c014 <tcp_listen_closed+0x70>)
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	6879      	ldr	r1, [r7, #4]
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f7ff ffb1 	bl	800bf50 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	3301      	adds	r3, #1
 800bff2:	60fb      	str	r3, [r7, #12]
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2b03      	cmp	r3, #3
 800bff8:	d9f0      	bls.n	800bfdc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800bffa:	bf00      	nop
 800bffc:	bf00      	nop
 800bffe:	3710      	adds	r7, #16
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}
 800c004:	080168fc 	.word	0x080168fc
 800c008:	080169ac 	.word	0x080169ac
 800c00c:	08016940 	.word	0x08016940
 800c010:	080169b8 	.word	0x080169b8
 800c014:	080190ec 	.word	0x080190ec

0800c018 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c018:	b5b0      	push	{r4, r5, r7, lr}
 800c01a:	b088      	sub	sp, #32
 800c01c:	af04      	add	r7, sp, #16
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	460b      	mov	r3, r1
 800c022:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d106      	bne.n	800c038 <tcp_close_shutdown+0x20>
 800c02a:	4b63      	ldr	r3, [pc, #396]	; (800c1b8 <tcp_close_shutdown+0x1a0>)
 800c02c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c030:	4962      	ldr	r1, [pc, #392]	; (800c1bc <tcp_close_shutdown+0x1a4>)
 800c032:	4863      	ldr	r0, [pc, #396]	; (800c1c0 <tcp_close_shutdown+0x1a8>)
 800c034:	f008 fe40 	bl	8014cb8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c038:	78fb      	ldrb	r3, [r7, #3]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d066      	beq.n	800c10c <tcp_close_shutdown+0xf4>
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	7d1b      	ldrb	r3, [r3, #20]
 800c042:	2b04      	cmp	r3, #4
 800c044:	d003      	beq.n	800c04e <tcp_close_shutdown+0x36>
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	7d1b      	ldrb	r3, [r3, #20]
 800c04a:	2b07      	cmp	r3, #7
 800c04c:	d15e      	bne.n	800c10c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c052:	2b00      	cmp	r3, #0
 800c054:	d104      	bne.n	800c060 <tcp_close_shutdown+0x48>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c05a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c05e:	d055      	beq.n	800c10c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	8b5b      	ldrh	r3, [r3, #26]
 800c064:	f003 0310 	and.w	r3, r3, #16
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d106      	bne.n	800c07a <tcp_close_shutdown+0x62>
 800c06c:	4b52      	ldr	r3, [pc, #328]	; (800c1b8 <tcp_close_shutdown+0x1a0>)
 800c06e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c072:	4954      	ldr	r1, [pc, #336]	; (800c1c4 <tcp_close_shutdown+0x1ac>)
 800c074:	4852      	ldr	r0, [pc, #328]	; (800c1c0 <tcp_close_shutdown+0x1a8>)
 800c076:	f008 fe1f 	bl	8014cb8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c082:	687d      	ldr	r5, [r7, #4]
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	3304      	adds	r3, #4
 800c088:	687a      	ldr	r2, [r7, #4]
 800c08a:	8ad2      	ldrh	r2, [r2, #22]
 800c08c:	6879      	ldr	r1, [r7, #4]
 800c08e:	8b09      	ldrh	r1, [r1, #24]
 800c090:	9102      	str	r1, [sp, #8]
 800c092:	9201      	str	r2, [sp, #4]
 800c094:	9300      	str	r3, [sp, #0]
 800c096:	462b      	mov	r3, r5
 800c098:	4622      	mov	r2, r4
 800c09a:	4601      	mov	r1, r0
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f005 fd85 	bl	8011bac <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f001 fb66 	bl	800d774 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c0a8:	4b47      	ldr	r3, [pc, #284]	; (800c1c8 <tcp_close_shutdown+0x1b0>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	687a      	ldr	r2, [r7, #4]
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	d105      	bne.n	800c0be <tcp_close_shutdown+0xa6>
 800c0b2:	4b45      	ldr	r3, [pc, #276]	; (800c1c8 <tcp_close_shutdown+0x1b0>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	68db      	ldr	r3, [r3, #12]
 800c0b8:	4a43      	ldr	r2, [pc, #268]	; (800c1c8 <tcp_close_shutdown+0x1b0>)
 800c0ba:	6013      	str	r3, [r2, #0]
 800c0bc:	e013      	b.n	800c0e6 <tcp_close_shutdown+0xce>
 800c0be:	4b42      	ldr	r3, [pc, #264]	; (800c1c8 <tcp_close_shutdown+0x1b0>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	60fb      	str	r3, [r7, #12]
 800c0c4:	e00c      	b.n	800c0e0 <tcp_close_shutdown+0xc8>
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	68db      	ldr	r3, [r3, #12]
 800c0ca:	687a      	ldr	r2, [r7, #4]
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d104      	bne.n	800c0da <tcp_close_shutdown+0xc2>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	68da      	ldr	r2, [r3, #12]
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	60da      	str	r2, [r3, #12]
 800c0d8:	e005      	b.n	800c0e6 <tcp_close_shutdown+0xce>
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	68db      	ldr	r3, [r3, #12]
 800c0de:	60fb      	str	r3, [r7, #12]
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d1ef      	bne.n	800c0c6 <tcp_close_shutdown+0xae>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	60da      	str	r2, [r3, #12]
 800c0ec:	4b37      	ldr	r3, [pc, #220]	; (800c1cc <tcp_close_shutdown+0x1b4>)
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c0f2:	4b37      	ldr	r3, [pc, #220]	; (800c1d0 <tcp_close_shutdown+0x1b8>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	687a      	ldr	r2, [r7, #4]
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	d102      	bne.n	800c102 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c0fc:	f003 fffa 	bl	80100f4 <tcp_trigger_input_pcb_close>
 800c100:	e002      	b.n	800c108 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f7ff fed6 	bl	800beb4 <tcp_free>
      }
      return ERR_OK;
 800c108:	2300      	movs	r3, #0
 800c10a:	e050      	b.n	800c1ae <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	7d1b      	ldrb	r3, [r3, #20]
 800c110:	2b02      	cmp	r3, #2
 800c112:	d03b      	beq.n	800c18c <tcp_close_shutdown+0x174>
 800c114:	2b02      	cmp	r3, #2
 800c116:	dc44      	bgt.n	800c1a2 <tcp_close_shutdown+0x18a>
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d002      	beq.n	800c122 <tcp_close_shutdown+0x10a>
 800c11c:	2b01      	cmp	r3, #1
 800c11e:	d02a      	beq.n	800c176 <tcp_close_shutdown+0x15e>
 800c120:	e03f      	b.n	800c1a2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	8adb      	ldrh	r3, [r3, #22]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d021      	beq.n	800c16e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c12a:	4b2a      	ldr	r3, [pc, #168]	; (800c1d4 <tcp_close_shutdown+0x1bc>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	687a      	ldr	r2, [r7, #4]
 800c130:	429a      	cmp	r2, r3
 800c132:	d105      	bne.n	800c140 <tcp_close_shutdown+0x128>
 800c134:	4b27      	ldr	r3, [pc, #156]	; (800c1d4 <tcp_close_shutdown+0x1bc>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	68db      	ldr	r3, [r3, #12]
 800c13a:	4a26      	ldr	r2, [pc, #152]	; (800c1d4 <tcp_close_shutdown+0x1bc>)
 800c13c:	6013      	str	r3, [r2, #0]
 800c13e:	e013      	b.n	800c168 <tcp_close_shutdown+0x150>
 800c140:	4b24      	ldr	r3, [pc, #144]	; (800c1d4 <tcp_close_shutdown+0x1bc>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	60bb      	str	r3, [r7, #8]
 800c146:	e00c      	b.n	800c162 <tcp_close_shutdown+0x14a>
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	68db      	ldr	r3, [r3, #12]
 800c14c:	687a      	ldr	r2, [r7, #4]
 800c14e:	429a      	cmp	r2, r3
 800c150:	d104      	bne.n	800c15c <tcp_close_shutdown+0x144>
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	68da      	ldr	r2, [r3, #12]
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	60da      	str	r2, [r3, #12]
 800c15a:	e005      	b.n	800c168 <tcp_close_shutdown+0x150>
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	68db      	ldr	r3, [r3, #12]
 800c160:	60bb      	str	r3, [r7, #8]
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d1ef      	bne.n	800c148 <tcp_close_shutdown+0x130>
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2200      	movs	r2, #0
 800c16c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f7ff fea0 	bl	800beb4 <tcp_free>
      break;
 800c174:	e01a      	b.n	800c1ac <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f7ff ff14 	bl	800bfa4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c17c:	6879      	ldr	r1, [r7, #4]
 800c17e:	4816      	ldr	r0, [pc, #88]	; (800c1d8 <tcp_close_shutdown+0x1c0>)
 800c180:	f001 fb48 	bl	800d814 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f7ff feb1 	bl	800beec <tcp_free_listen>
      break;
 800c18a:	e00f      	b.n	800c1ac <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c18c:	6879      	ldr	r1, [r7, #4]
 800c18e:	480e      	ldr	r0, [pc, #56]	; (800c1c8 <tcp_close_shutdown+0x1b0>)
 800c190:	f001 fb40 	bl	800d814 <tcp_pcb_remove>
 800c194:	4b0d      	ldr	r3, [pc, #52]	; (800c1cc <tcp_close_shutdown+0x1b4>)
 800c196:	2201      	movs	r2, #1
 800c198:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f7ff fe8a 	bl	800beb4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c1a0:	e004      	b.n	800c1ac <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f000 f81a 	bl	800c1dc <tcp_close_shutdown_fin>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	e000      	b.n	800c1ae <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c1ac:	2300      	movs	r3, #0
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3710      	adds	r7, #16
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bdb0      	pop	{r4, r5, r7, pc}
 800c1b6:	bf00      	nop
 800c1b8:	080168fc 	.word	0x080168fc
 800c1bc:	080169d0 	.word	0x080169d0
 800c1c0:	08016940 	.word	0x08016940
 800c1c4:	080169f0 	.word	0x080169f0
 800c1c8:	24003614 	.word	0x24003614
 800c1cc:	24003610 	.word	0x24003610
 800c1d0:	24003628 	.word	0x24003628
 800c1d4:	24003620 	.word	0x24003620
 800c1d8:	2400361c 	.word	0x2400361c

0800c1dc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b084      	sub	sp, #16
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d106      	bne.n	800c1f8 <tcp_close_shutdown_fin+0x1c>
 800c1ea:	4b2e      	ldr	r3, [pc, #184]	; (800c2a4 <tcp_close_shutdown_fin+0xc8>)
 800c1ec:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c1f0:	492d      	ldr	r1, [pc, #180]	; (800c2a8 <tcp_close_shutdown_fin+0xcc>)
 800c1f2:	482e      	ldr	r0, [pc, #184]	; (800c2ac <tcp_close_shutdown_fin+0xd0>)
 800c1f4:	f008 fd60 	bl	8014cb8 <iprintf>

  switch (pcb->state) {
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	7d1b      	ldrb	r3, [r3, #20]
 800c1fc:	2b07      	cmp	r3, #7
 800c1fe:	d020      	beq.n	800c242 <tcp_close_shutdown_fin+0x66>
 800c200:	2b07      	cmp	r3, #7
 800c202:	dc2b      	bgt.n	800c25c <tcp_close_shutdown_fin+0x80>
 800c204:	2b03      	cmp	r3, #3
 800c206:	d002      	beq.n	800c20e <tcp_close_shutdown_fin+0x32>
 800c208:	2b04      	cmp	r3, #4
 800c20a:	d00d      	beq.n	800c228 <tcp_close_shutdown_fin+0x4c>
 800c20c:	e026      	b.n	800c25c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f004 fdda 	bl	8010dc8 <tcp_send_fin>
 800c214:	4603      	mov	r3, r0
 800c216:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d11f      	bne.n	800c260 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2205      	movs	r2, #5
 800c224:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c226:	e01b      	b.n	800c260 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f004 fdcd 	bl	8010dc8 <tcp_send_fin>
 800c22e:	4603      	mov	r3, r0
 800c230:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d114      	bne.n	800c264 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2205      	movs	r2, #5
 800c23e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c240:	e010      	b.n	800c264 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f004 fdc0 	bl	8010dc8 <tcp_send_fin>
 800c248:	4603      	mov	r3, r0
 800c24a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c24c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d109      	bne.n	800c268 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2209      	movs	r2, #9
 800c258:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c25a:	e005      	b.n	800c268 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c25c:	2300      	movs	r3, #0
 800c25e:	e01c      	b.n	800c29a <tcp_close_shutdown_fin+0xbe>
      break;
 800c260:	bf00      	nop
 800c262:	e002      	b.n	800c26a <tcp_close_shutdown_fin+0x8e>
      break;
 800c264:	bf00      	nop
 800c266:	e000      	b.n	800c26a <tcp_close_shutdown_fin+0x8e>
      break;
 800c268:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c26a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d103      	bne.n	800c27a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f004 fee6 	bl	8011044 <tcp_output>
 800c278:	e00d      	b.n	800c296 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c27a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c27e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c282:	d108      	bne.n	800c296 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	8b5b      	ldrh	r3, [r3, #26]
 800c288:	f043 0308 	orr.w	r3, r3, #8
 800c28c:	b29a      	uxth	r2, r3
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c292:	2300      	movs	r3, #0
 800c294:	e001      	b.n	800c29a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c296:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	3710      	adds	r7, #16
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}
 800c2a2:	bf00      	nop
 800c2a4:	080168fc 	.word	0x080168fc
 800c2a8:	080169ac 	.word	0x080169ac
 800c2ac:	08016940 	.word	0x08016940

0800c2b0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b082      	sub	sp, #8
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d109      	bne.n	800c2d2 <tcp_close+0x22>
 800c2be:	4b0f      	ldr	r3, [pc, #60]	; (800c2fc <tcp_close+0x4c>)
 800c2c0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c2c4:	490e      	ldr	r1, [pc, #56]	; (800c300 <tcp_close+0x50>)
 800c2c6:	480f      	ldr	r0, [pc, #60]	; (800c304 <tcp_close+0x54>)
 800c2c8:	f008 fcf6 	bl	8014cb8 <iprintf>
 800c2cc:	f06f 030f 	mvn.w	r3, #15
 800c2d0:	e00f      	b.n	800c2f2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	7d1b      	ldrb	r3, [r3, #20]
 800c2d6:	2b01      	cmp	r3, #1
 800c2d8:	d006      	beq.n	800c2e8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	8b5b      	ldrh	r3, [r3, #26]
 800c2de:	f043 0310 	orr.w	r3, r3, #16
 800c2e2:	b29a      	uxth	r2, r3
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c2e8:	2101      	movs	r1, #1
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f7ff fe94 	bl	800c018 <tcp_close_shutdown>
 800c2f0:	4603      	mov	r3, r0
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3708      	adds	r7, #8
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}
 800c2fa:	bf00      	nop
 800c2fc:	080168fc 	.word	0x080168fc
 800c300:	08016a0c 	.word	0x08016a0c
 800c304:	08016940 	.word	0x08016940

0800c308 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b08e      	sub	sp, #56	; 0x38
 800c30c:	af04      	add	r7, sp, #16
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d107      	bne.n	800c328 <tcp_abandon+0x20>
 800c318:	4b52      	ldr	r3, [pc, #328]	; (800c464 <tcp_abandon+0x15c>)
 800c31a:	f240 223d 	movw	r2, #573	; 0x23d
 800c31e:	4952      	ldr	r1, [pc, #328]	; (800c468 <tcp_abandon+0x160>)
 800c320:	4852      	ldr	r0, [pc, #328]	; (800c46c <tcp_abandon+0x164>)
 800c322:	f008 fcc9 	bl	8014cb8 <iprintf>
 800c326:	e099      	b.n	800c45c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	7d1b      	ldrb	r3, [r3, #20]
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	d106      	bne.n	800c33e <tcp_abandon+0x36>
 800c330:	4b4c      	ldr	r3, [pc, #304]	; (800c464 <tcp_abandon+0x15c>)
 800c332:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c336:	494e      	ldr	r1, [pc, #312]	; (800c470 <tcp_abandon+0x168>)
 800c338:	484c      	ldr	r0, [pc, #304]	; (800c46c <tcp_abandon+0x164>)
 800c33a:	f008 fcbd 	bl	8014cb8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	7d1b      	ldrb	r3, [r3, #20]
 800c342:	2b0a      	cmp	r3, #10
 800c344:	d107      	bne.n	800c356 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c346:	6879      	ldr	r1, [r7, #4]
 800c348:	484a      	ldr	r0, [pc, #296]	; (800c474 <tcp_abandon+0x16c>)
 800c34a:	f001 fa63 	bl	800d814 <tcp_pcb_remove>
    tcp_free(pcb);
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f7ff fdb0 	bl	800beb4 <tcp_free>
 800c354:	e082      	b.n	800c45c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c356:	2300      	movs	r3, #0
 800c358:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c35a:	2300      	movs	r3, #0
 800c35c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c362:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c368:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c370:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	691b      	ldr	r3, [r3, #16]
 800c376:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	7d1b      	ldrb	r3, [r3, #20]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d126      	bne.n	800c3ce <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	8adb      	ldrh	r3, [r3, #22]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d02e      	beq.n	800c3e6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c388:	4b3b      	ldr	r3, [pc, #236]	; (800c478 <tcp_abandon+0x170>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	687a      	ldr	r2, [r7, #4]
 800c38e:	429a      	cmp	r2, r3
 800c390:	d105      	bne.n	800c39e <tcp_abandon+0x96>
 800c392:	4b39      	ldr	r3, [pc, #228]	; (800c478 <tcp_abandon+0x170>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	68db      	ldr	r3, [r3, #12]
 800c398:	4a37      	ldr	r2, [pc, #220]	; (800c478 <tcp_abandon+0x170>)
 800c39a:	6013      	str	r3, [r2, #0]
 800c39c:	e013      	b.n	800c3c6 <tcp_abandon+0xbe>
 800c39e:	4b36      	ldr	r3, [pc, #216]	; (800c478 <tcp_abandon+0x170>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	61fb      	str	r3, [r7, #28]
 800c3a4:	e00c      	b.n	800c3c0 <tcp_abandon+0xb8>
 800c3a6:	69fb      	ldr	r3, [r7, #28]
 800c3a8:	68db      	ldr	r3, [r3, #12]
 800c3aa:	687a      	ldr	r2, [r7, #4]
 800c3ac:	429a      	cmp	r2, r3
 800c3ae:	d104      	bne.n	800c3ba <tcp_abandon+0xb2>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	68da      	ldr	r2, [r3, #12]
 800c3b4:	69fb      	ldr	r3, [r7, #28]
 800c3b6:	60da      	str	r2, [r3, #12]
 800c3b8:	e005      	b.n	800c3c6 <tcp_abandon+0xbe>
 800c3ba:	69fb      	ldr	r3, [r7, #28]
 800c3bc:	68db      	ldr	r3, [r3, #12]
 800c3be:	61fb      	str	r3, [r7, #28]
 800c3c0:	69fb      	ldr	r3, [r7, #28]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d1ef      	bne.n	800c3a6 <tcp_abandon+0x9e>
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	60da      	str	r2, [r3, #12]
 800c3cc:	e00b      	b.n	800c3e6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	8adb      	ldrh	r3, [r3, #22]
 800c3d6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c3d8:	6879      	ldr	r1, [r7, #4]
 800c3da:	4828      	ldr	r0, [pc, #160]	; (800c47c <tcp_abandon+0x174>)
 800c3dc:	f001 fa1a 	bl	800d814 <tcp_pcb_remove>
 800c3e0:	4b27      	ldr	r3, [pc, #156]	; (800c480 <tcp_abandon+0x178>)
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d004      	beq.n	800c3f8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f000 fed6 	bl	800d1a4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d004      	beq.n	800c40a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c404:	4618      	mov	r0, r3
 800c406:	f000 fecd 	bl	800d1a4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d004      	beq.n	800c41c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c416:	4618      	mov	r0, r3
 800c418:	f000 fec4 	bl	800d1a4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d00e      	beq.n	800c440 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c422:	6879      	ldr	r1, [r7, #4]
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	3304      	adds	r3, #4
 800c428:	687a      	ldr	r2, [r7, #4]
 800c42a:	8b12      	ldrh	r2, [r2, #24]
 800c42c:	9202      	str	r2, [sp, #8]
 800c42e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c430:	9201      	str	r2, [sp, #4]
 800c432:	9300      	str	r3, [sp, #0]
 800c434:	460b      	mov	r3, r1
 800c436:	697a      	ldr	r2, [r7, #20]
 800c438:	69b9      	ldr	r1, [r7, #24]
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f005 fbb6 	bl	8011bac <tcp_rst>
    }
    last_state = pcb->state;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	7d1b      	ldrb	r3, [r3, #20]
 800c444:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f7ff fd34 	bl	800beb4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d004      	beq.n	800c45c <tcp_abandon+0x154>
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	f06f 010c 	mvn.w	r1, #12
 800c458:	68f8      	ldr	r0, [r7, #12]
 800c45a:	4798      	blx	r3
  }
}
 800c45c:	3728      	adds	r7, #40	; 0x28
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
 800c462:	bf00      	nop
 800c464:	080168fc 	.word	0x080168fc
 800c468:	08016a40 	.word	0x08016a40
 800c46c:	08016940 	.word	0x08016940
 800c470:	08016a5c 	.word	0x08016a5c
 800c474:	24003624 	.word	0x24003624
 800c478:	24003620 	.word	0x24003620
 800c47c:	24003614 	.word	0x24003614
 800c480:	24003610 	.word	0x24003610

0800c484 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b082      	sub	sp, #8
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c48c:	2101      	movs	r1, #1
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f7ff ff3a 	bl	800c308 <tcp_abandon>
}
 800c494:	bf00      	nop
 800c496:	3708      	adds	r7, #8
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b088      	sub	sp, #32
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	60f8      	str	r0, [r7, #12]
 800c4a4:	60b9      	str	r1, [r7, #8]
 800c4a6:	4613      	mov	r3, r2
 800c4a8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800c4aa:	2304      	movs	r3, #4
 800c4ac:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d101      	bne.n	800c4b8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800c4b4:	4b3e      	ldr	r3, [pc, #248]	; (800c5b0 <tcp_bind+0x114>)
 800c4b6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d109      	bne.n	800c4d2 <tcp_bind+0x36>
 800c4be:	4b3d      	ldr	r3, [pc, #244]	; (800c5b4 <tcp_bind+0x118>)
 800c4c0:	f240 22a9 	movw	r2, #681	; 0x2a9
 800c4c4:	493c      	ldr	r1, [pc, #240]	; (800c5b8 <tcp_bind+0x11c>)
 800c4c6:	483d      	ldr	r0, [pc, #244]	; (800c5bc <tcp_bind+0x120>)
 800c4c8:	f008 fbf6 	bl	8014cb8 <iprintf>
 800c4cc:	f06f 030f 	mvn.w	r3, #15
 800c4d0:	e06a      	b.n	800c5a8 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	7d1b      	ldrb	r3, [r3, #20]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d009      	beq.n	800c4ee <tcp_bind+0x52>
 800c4da:	4b36      	ldr	r3, [pc, #216]	; (800c5b4 <tcp_bind+0x118>)
 800c4dc:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c4e0:	4937      	ldr	r1, [pc, #220]	; (800c5c0 <tcp_bind+0x124>)
 800c4e2:	4836      	ldr	r0, [pc, #216]	; (800c5bc <tcp_bind+0x120>)
 800c4e4:	f008 fbe8 	bl	8014cb8 <iprintf>
 800c4e8:	f06f 0305 	mvn.w	r3, #5
 800c4ec:	e05c      	b.n	800c5a8 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800c4ee:	88fb      	ldrh	r3, [r7, #6]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d109      	bne.n	800c508 <tcp_bind+0x6c>
    port = tcp_new_port();
 800c4f4:	f000 f9f0 	bl	800c8d8 <tcp_new_port>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c4fc:	88fb      	ldrh	r3, [r7, #6]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d135      	bne.n	800c56e <tcp_bind+0xd2>
      return ERR_BUF;
 800c502:	f06f 0301 	mvn.w	r3, #1
 800c506:	e04f      	b.n	800c5a8 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800c508:	2300      	movs	r3, #0
 800c50a:	61fb      	str	r3, [r7, #28]
 800c50c:	e02b      	b.n	800c566 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c50e:	4a2d      	ldr	r2, [pc, #180]	; (800c5c4 <tcp_bind+0x128>)
 800c510:	69fb      	ldr	r3, [r7, #28]
 800c512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	61bb      	str	r3, [r7, #24]
 800c51a:	e01e      	b.n	800c55a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800c51c:	69bb      	ldr	r3, [r7, #24]
 800c51e:	8adb      	ldrh	r3, [r3, #22]
 800c520:	88fa      	ldrh	r2, [r7, #6]
 800c522:	429a      	cmp	r2, r3
 800c524:	d116      	bne.n	800c554 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800c526:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d010      	beq.n	800c54e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800c52c:	69bb      	ldr	r3, [r7, #24]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d00c      	beq.n	800c54e <tcp_bind+0xb2>
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d009      	beq.n	800c54e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d005      	beq.n	800c54e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800c542:	69bb      	ldr	r3, [r7, #24]
 800c544:	681a      	ldr	r2, [r3, #0]
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d102      	bne.n	800c554 <tcp_bind+0xb8>
              return ERR_USE;
 800c54e:	f06f 0307 	mvn.w	r3, #7
 800c552:	e029      	b.n	800c5a8 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c554:	69bb      	ldr	r3, [r7, #24]
 800c556:	68db      	ldr	r3, [r3, #12]
 800c558:	61bb      	str	r3, [r7, #24]
 800c55a:	69bb      	ldr	r3, [r7, #24]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d1dd      	bne.n	800c51c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800c560:	69fb      	ldr	r3, [r7, #28]
 800c562:	3301      	adds	r3, #1
 800c564:	61fb      	str	r3, [r7, #28]
 800c566:	69fa      	ldr	r2, [r7, #28]
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	429a      	cmp	r2, r3
 800c56c:	dbcf      	blt.n	800c50e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d00c      	beq.n	800c58e <tcp_bind+0xf2>
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d008      	beq.n	800c58e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d002      	beq.n	800c588 <tcp_bind+0xec>
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	e000      	b.n	800c58a <tcp_bind+0xee>
 800c588:	2300      	movs	r3, #0
 800c58a:	68fa      	ldr	r2, [r7, #12]
 800c58c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	88fa      	ldrh	r2, [r7, #6]
 800c592:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800c594:	4b0c      	ldr	r3, [pc, #48]	; (800c5c8 <tcp_bind+0x12c>)
 800c596:	681a      	ldr	r2, [r3, #0]
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	60da      	str	r2, [r3, #12]
 800c59c:	4a0a      	ldr	r2, [pc, #40]	; (800c5c8 <tcp_bind+0x12c>)
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	6013      	str	r3, [r2, #0]
 800c5a2:	f005 fcc5 	bl	8011f30 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800c5a6:	2300      	movs	r3, #0
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3720      	adds	r7, #32
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}
 800c5b0:	08019114 	.word	0x08019114
 800c5b4:	080168fc 	.word	0x080168fc
 800c5b8:	08016a90 	.word	0x08016a90
 800c5bc:	08016940 	.word	0x08016940
 800c5c0:	08016aa8 	.word	0x08016aa8
 800c5c4:	080190ec 	.word	0x080190ec
 800c5c8:	24003620 	.word	0x24003620

0800c5cc <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b084      	sub	sp, #16
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	60f8      	str	r0, [r7, #12]
 800c5d4:	60b9      	str	r1, [r7, #8]
 800c5d6:	4613      	mov	r3, r2
 800c5d8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d106      	bne.n	800c5ee <tcp_accept_null+0x22>
 800c5e0:	4b07      	ldr	r3, [pc, #28]	; (800c600 <tcp_accept_null+0x34>)
 800c5e2:	f240 320f 	movw	r2, #783	; 0x30f
 800c5e6:	4907      	ldr	r1, [pc, #28]	; (800c604 <tcp_accept_null+0x38>)
 800c5e8:	4807      	ldr	r0, [pc, #28]	; (800c608 <tcp_accept_null+0x3c>)
 800c5ea:	f008 fb65 	bl	8014cb8 <iprintf>

  tcp_abort(pcb);
 800c5ee:	68b8      	ldr	r0, [r7, #8]
 800c5f0:	f7ff ff48 	bl	800c484 <tcp_abort>

  return ERR_ABRT;
 800c5f4:	f06f 030c 	mvn.w	r3, #12
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3710      	adds	r7, #16
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}
 800c600:	080168fc 	.word	0x080168fc
 800c604:	08016ad0 	.word	0x08016ad0
 800c608:	08016940 	.word	0x08016940

0800c60c <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b082      	sub	sp, #8
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	460b      	mov	r3, r1
 800c616:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800c618:	78fb      	ldrb	r3, [r7, #3]
 800c61a:	2200      	movs	r2, #0
 800c61c:	4619      	mov	r1, r3
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f000 f806 	bl	800c630 <tcp_listen_with_backlog_and_err>
 800c624:	4603      	mov	r3, r0
}
 800c626:	4618      	mov	r0, r3
 800c628:	3708      	adds	r7, #8
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}
	...

0800c630 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b088      	sub	sp, #32
 800c634:	af00      	add	r7, sp, #0
 800c636:	60f8      	str	r0, [r7, #12]
 800c638:	460b      	mov	r3, r1
 800c63a:	607a      	str	r2, [r7, #4]
 800c63c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800c63e:	2300      	movs	r3, #0
 800c640:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d109      	bne.n	800c65c <tcp_listen_with_backlog_and_err+0x2c>
 800c648:	4b47      	ldr	r3, [pc, #284]	; (800c768 <tcp_listen_with_backlog_and_err+0x138>)
 800c64a:	f240 3259 	movw	r2, #857	; 0x359
 800c64e:	4947      	ldr	r1, [pc, #284]	; (800c76c <tcp_listen_with_backlog_and_err+0x13c>)
 800c650:	4847      	ldr	r0, [pc, #284]	; (800c770 <tcp_listen_with_backlog_and_err+0x140>)
 800c652:	f008 fb31 	bl	8014cb8 <iprintf>
 800c656:	23f0      	movs	r3, #240	; 0xf0
 800c658:	76fb      	strb	r3, [r7, #27]
 800c65a:	e079      	b.n	800c750 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	7d1b      	ldrb	r3, [r3, #20]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d009      	beq.n	800c678 <tcp_listen_with_backlog_and_err+0x48>
 800c664:	4b40      	ldr	r3, [pc, #256]	; (800c768 <tcp_listen_with_backlog_and_err+0x138>)
 800c666:	f240 325a 	movw	r2, #858	; 0x35a
 800c66a:	4942      	ldr	r1, [pc, #264]	; (800c774 <tcp_listen_with_backlog_and_err+0x144>)
 800c66c:	4840      	ldr	r0, [pc, #256]	; (800c770 <tcp_listen_with_backlog_and_err+0x140>)
 800c66e:	f008 fb23 	bl	8014cb8 <iprintf>
 800c672:	23f1      	movs	r3, #241	; 0xf1
 800c674:	76fb      	strb	r3, [r7, #27]
 800c676:	e06b      	b.n	800c750 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	7d1b      	ldrb	r3, [r3, #20]
 800c67c:	2b01      	cmp	r3, #1
 800c67e:	d104      	bne.n	800c68a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800c684:	23f7      	movs	r3, #247	; 0xf7
 800c686:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c688:	e062      	b.n	800c750 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800c68a:	2002      	movs	r0, #2
 800c68c:	f7fe fa7c 	bl	800ab88 <memp_malloc>
 800c690:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800c692:	69fb      	ldr	r3, [r7, #28]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d102      	bne.n	800c69e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800c698:	23ff      	movs	r3, #255	; 0xff
 800c69a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c69c:	e058      	b.n	800c750 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	691a      	ldr	r2, [r3, #16]
 800c6a2:	69fb      	ldr	r3, [r7, #28]
 800c6a4:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	8ada      	ldrh	r2, [r3, #22]
 800c6aa:	69fb      	ldr	r3, [r7, #28]
 800c6ac:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800c6ae:	69fb      	ldr	r3, [r7, #28]
 800c6b0:	2201      	movs	r2, #1
 800c6b2:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	7d5a      	ldrb	r2, [r3, #21]
 800c6b8:	69fb      	ldr	r3, [r7, #28]
 800c6ba:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	7a5a      	ldrb	r2, [r3, #9]
 800c6c0:	69fb      	ldr	r3, [r7, #28]
 800c6c2:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800c6c4:	69fb      	ldr	r3, [r7, #28]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	7ada      	ldrb	r2, [r3, #11]
 800c6ce:	69fb      	ldr	r3, [r7, #28]
 800c6d0:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	7a9a      	ldrb	r2, [r3, #10]
 800c6d6:	69fb      	ldr	r3, [r7, #28]
 800c6d8:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	681a      	ldr	r2, [r3, #0]
 800c6de:	69fb      	ldr	r3, [r7, #28]
 800c6e0:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	8adb      	ldrh	r3, [r3, #22]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d021      	beq.n	800c72e <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800c6ea:	4b23      	ldr	r3, [pc, #140]	; (800c778 <tcp_listen_with_backlog_and_err+0x148>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	68fa      	ldr	r2, [r7, #12]
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d105      	bne.n	800c700 <tcp_listen_with_backlog_and_err+0xd0>
 800c6f4:	4b20      	ldr	r3, [pc, #128]	; (800c778 <tcp_listen_with_backlog_and_err+0x148>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	68db      	ldr	r3, [r3, #12]
 800c6fa:	4a1f      	ldr	r2, [pc, #124]	; (800c778 <tcp_listen_with_backlog_and_err+0x148>)
 800c6fc:	6013      	str	r3, [r2, #0]
 800c6fe:	e013      	b.n	800c728 <tcp_listen_with_backlog_and_err+0xf8>
 800c700:	4b1d      	ldr	r3, [pc, #116]	; (800c778 <tcp_listen_with_backlog_and_err+0x148>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	617b      	str	r3, [r7, #20]
 800c706:	e00c      	b.n	800c722 <tcp_listen_with_backlog_and_err+0xf2>
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	68db      	ldr	r3, [r3, #12]
 800c70c:	68fa      	ldr	r2, [r7, #12]
 800c70e:	429a      	cmp	r2, r3
 800c710:	d104      	bne.n	800c71c <tcp_listen_with_backlog_and_err+0xec>
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	68da      	ldr	r2, [r3, #12]
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	60da      	str	r2, [r3, #12]
 800c71a:	e005      	b.n	800c728 <tcp_listen_with_backlog_and_err+0xf8>
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	68db      	ldr	r3, [r3, #12]
 800c720:	617b      	str	r3, [r7, #20]
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d1ef      	bne.n	800c708 <tcp_listen_with_backlog_and_err+0xd8>
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	2200      	movs	r2, #0
 800c72c:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800c72e:	68f8      	ldr	r0, [r7, #12]
 800c730:	f7ff fbc0 	bl	800beb4 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800c734:	69fb      	ldr	r3, [r7, #28]
 800c736:	4a11      	ldr	r2, [pc, #68]	; (800c77c <tcp_listen_with_backlog_and_err+0x14c>)
 800c738:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800c73a:	4b11      	ldr	r3, [pc, #68]	; (800c780 <tcp_listen_with_backlog_and_err+0x150>)
 800c73c:	681a      	ldr	r2, [r3, #0]
 800c73e:	69fb      	ldr	r3, [r7, #28]
 800c740:	60da      	str	r2, [r3, #12]
 800c742:	4a0f      	ldr	r2, [pc, #60]	; (800c780 <tcp_listen_with_backlog_and_err+0x150>)
 800c744:	69fb      	ldr	r3, [r7, #28]
 800c746:	6013      	str	r3, [r2, #0]
 800c748:	f005 fbf2 	bl	8011f30 <tcp_timer_needed>
  res = ERR_OK;
 800c74c:	2300      	movs	r3, #0
 800c74e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d002      	beq.n	800c75c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	7efa      	ldrb	r2, [r7, #27]
 800c75a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800c75c:	69fb      	ldr	r3, [r7, #28]
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3720      	adds	r7, #32
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}
 800c766:	bf00      	nop
 800c768:	080168fc 	.word	0x080168fc
 800c76c:	08016af0 	.word	0x08016af0
 800c770:	08016940 	.word	0x08016940
 800c774:	08016b20 	.word	0x08016b20
 800c778:	24003620 	.word	0x24003620
 800c77c:	0800c5cd 	.word	0x0800c5cd
 800c780:	2400361c 	.word	0x2400361c

0800c784 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b084      	sub	sp, #16
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d106      	bne.n	800c7a0 <tcp_update_rcv_ann_wnd+0x1c>
 800c792:	4b25      	ldr	r3, [pc, #148]	; (800c828 <tcp_update_rcv_ann_wnd+0xa4>)
 800c794:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c798:	4924      	ldr	r1, [pc, #144]	; (800c82c <tcp_update_rcv_ann_wnd+0xa8>)
 800c79a:	4825      	ldr	r0, [pc, #148]	; (800c830 <tcp_update_rcv_ann_wnd+0xac>)
 800c79c:	f008 fa8c 	bl	8014cb8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c7a8:	4413      	add	r3, r2
 800c7aa:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7b0:	687a      	ldr	r2, [r7, #4]
 800c7b2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c7b4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c7b8:	bf28      	it	cs
 800c7ba:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c7be:	b292      	uxth	r2, r2
 800c7c0:	4413      	add	r3, r2
 800c7c2:	68fa      	ldr	r2, [r7, #12]
 800c7c4:	1ad3      	subs	r3, r2, r3
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	db08      	blt.n	800c7dc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7d6:	68fa      	ldr	r2, [r7, #12]
 800c7d8:	1ad3      	subs	r3, r2, r3
 800c7da:	e020      	b.n	800c81e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7e4:	1ad3      	subs	r3, r2, r3
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	dd03      	ble.n	800c7f2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c7f0:	e014      	b.n	800c81c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7fa:	1ad3      	subs	r3, r2, r3
 800c7fc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c804:	d306      	bcc.n	800c814 <tcp_update_rcv_ann_wnd+0x90>
 800c806:	4b08      	ldr	r3, [pc, #32]	; (800c828 <tcp_update_rcv_ann_wnd+0xa4>)
 800c808:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c80c:	4909      	ldr	r1, [pc, #36]	; (800c834 <tcp_update_rcv_ann_wnd+0xb0>)
 800c80e:	4808      	ldr	r0, [pc, #32]	; (800c830 <tcp_update_rcv_ann_wnd+0xac>)
 800c810:	f008 fa52 	bl	8014cb8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	b29a      	uxth	r2, r3
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c81c:	2300      	movs	r3, #0
  }
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3710      	adds	r7, #16
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}
 800c826:	bf00      	nop
 800c828:	080168fc 	.word	0x080168fc
 800c82c:	08016b58 	.word	0x08016b58
 800c830:	08016940 	.word	0x08016940
 800c834:	08016b7c 	.word	0x08016b7c

0800c838 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b084      	sub	sp, #16
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
 800c840:	460b      	mov	r3, r1
 800c842:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d107      	bne.n	800c85a <tcp_recved+0x22>
 800c84a:	4b1f      	ldr	r3, [pc, #124]	; (800c8c8 <tcp_recved+0x90>)
 800c84c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c850:	491e      	ldr	r1, [pc, #120]	; (800c8cc <tcp_recved+0x94>)
 800c852:	481f      	ldr	r0, [pc, #124]	; (800c8d0 <tcp_recved+0x98>)
 800c854:	f008 fa30 	bl	8014cb8 <iprintf>
 800c858:	e032      	b.n	800c8c0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	7d1b      	ldrb	r3, [r3, #20]
 800c85e:	2b01      	cmp	r3, #1
 800c860:	d106      	bne.n	800c870 <tcp_recved+0x38>
 800c862:	4b19      	ldr	r3, [pc, #100]	; (800c8c8 <tcp_recved+0x90>)
 800c864:	f240 32d2 	movw	r2, #978	; 0x3d2
 800c868:	491a      	ldr	r1, [pc, #104]	; (800c8d4 <tcp_recved+0x9c>)
 800c86a:	4819      	ldr	r0, [pc, #100]	; (800c8d0 <tcp_recved+0x98>)
 800c86c:	f008 fa24 	bl	8014cb8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c874:	887b      	ldrh	r3, [r7, #2]
 800c876:	4413      	add	r3, r2
 800c878:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c87a:	89fb      	ldrh	r3, [r7, #14]
 800c87c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c880:	d804      	bhi.n	800c88c <tcp_recved+0x54>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c886:	89fa      	ldrh	r2, [r7, #14]
 800c888:	429a      	cmp	r2, r3
 800c88a:	d204      	bcs.n	800c896 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c892:	851a      	strh	r2, [r3, #40]	; 0x28
 800c894:	e002      	b.n	800c89c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	89fa      	ldrh	r2, [r7, #14]
 800c89a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f7ff ff71 	bl	800c784 <tcp_update_rcv_ann_wnd>
 800c8a2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c8aa:	d309      	bcc.n	800c8c0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	8b5b      	ldrh	r3, [r3, #26]
 800c8b0:	f043 0302 	orr.w	r3, r3, #2
 800c8b4:	b29a      	uxth	r2, r3
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f004 fbc2 	bl	8011044 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c8c0:	3710      	adds	r7, #16
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
 800c8c6:	bf00      	nop
 800c8c8:	080168fc 	.word	0x080168fc
 800c8cc:	08016b98 	.word	0x08016b98
 800c8d0:	08016940 	.word	0x08016940
 800c8d4:	08016bb0 	.word	0x08016bb0

0800c8d8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b083      	sub	sp, #12
 800c8dc:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800c8e2:	4b1e      	ldr	r3, [pc, #120]	; (800c95c <tcp_new_port+0x84>)
 800c8e4:	881b      	ldrh	r3, [r3, #0]
 800c8e6:	3301      	adds	r3, #1
 800c8e8:	b29a      	uxth	r2, r3
 800c8ea:	4b1c      	ldr	r3, [pc, #112]	; (800c95c <tcp_new_port+0x84>)
 800c8ec:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800c8ee:	4b1b      	ldr	r3, [pc, #108]	; (800c95c <tcp_new_port+0x84>)
 800c8f0:	881b      	ldrh	r3, [r3, #0]
 800c8f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d103      	bne.n	800c902 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800c8fa:	4b18      	ldr	r3, [pc, #96]	; (800c95c <tcp_new_port+0x84>)
 800c8fc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800c900:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c902:	2300      	movs	r3, #0
 800c904:	71fb      	strb	r3, [r7, #7]
 800c906:	e01e      	b.n	800c946 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c908:	79fb      	ldrb	r3, [r7, #7]
 800c90a:	4a15      	ldr	r2, [pc, #84]	; (800c960 <tcp_new_port+0x88>)
 800c90c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	603b      	str	r3, [r7, #0]
 800c914:	e011      	b.n	800c93a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	8ada      	ldrh	r2, [r3, #22]
 800c91a:	4b10      	ldr	r3, [pc, #64]	; (800c95c <tcp_new_port+0x84>)
 800c91c:	881b      	ldrh	r3, [r3, #0]
 800c91e:	429a      	cmp	r2, r3
 800c920:	d108      	bne.n	800c934 <tcp_new_port+0x5c>
        n++;
 800c922:	88bb      	ldrh	r3, [r7, #4]
 800c924:	3301      	adds	r3, #1
 800c926:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800c928:	88bb      	ldrh	r3, [r7, #4]
 800c92a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c92e:	d3d8      	bcc.n	800c8e2 <tcp_new_port+0xa>
          return 0;
 800c930:	2300      	movs	r3, #0
 800c932:	e00d      	b.n	800c950 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	68db      	ldr	r3, [r3, #12]
 800c938:	603b      	str	r3, [r7, #0]
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d1ea      	bne.n	800c916 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c940:	79fb      	ldrb	r3, [r7, #7]
 800c942:	3301      	adds	r3, #1
 800c944:	71fb      	strb	r3, [r7, #7]
 800c946:	79fb      	ldrb	r3, [r7, #7]
 800c948:	2b03      	cmp	r3, #3
 800c94a:	d9dd      	bls.n	800c908 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800c94c:	4b03      	ldr	r3, [pc, #12]	; (800c95c <tcp_new_port+0x84>)
 800c94e:	881b      	ldrh	r3, [r3, #0]
}
 800c950:	4618      	mov	r0, r3
 800c952:	370c      	adds	r7, #12
 800c954:	46bd      	mov	sp, r7
 800c956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95a:	4770      	bx	lr
 800c95c:	2400002c 	.word	0x2400002c
 800c960:	080190ec 	.word	0x080190ec

0800c964 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c964:	b5b0      	push	{r4, r5, r7, lr}
 800c966:	b090      	sub	sp, #64	; 0x40
 800c968:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c96a:	2300      	movs	r3, #0
 800c96c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800c970:	4b94      	ldr	r3, [pc, #592]	; (800cbc4 <tcp_slowtmr+0x260>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	3301      	adds	r3, #1
 800c976:	4a93      	ldr	r2, [pc, #588]	; (800cbc4 <tcp_slowtmr+0x260>)
 800c978:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c97a:	4b93      	ldr	r3, [pc, #588]	; (800cbc8 <tcp_slowtmr+0x264>)
 800c97c:	781b      	ldrb	r3, [r3, #0]
 800c97e:	3301      	adds	r3, #1
 800c980:	b2da      	uxtb	r2, r3
 800c982:	4b91      	ldr	r3, [pc, #580]	; (800cbc8 <tcp_slowtmr+0x264>)
 800c984:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c986:	2300      	movs	r3, #0
 800c988:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800c98a:	4b90      	ldr	r3, [pc, #576]	; (800cbcc <tcp_slowtmr+0x268>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c990:	e29d      	b.n	800cece <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c994:	7d1b      	ldrb	r3, [r3, #20]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d106      	bne.n	800c9a8 <tcp_slowtmr+0x44>
 800c99a:	4b8d      	ldr	r3, [pc, #564]	; (800cbd0 <tcp_slowtmr+0x26c>)
 800c99c:	f240 42be 	movw	r2, #1214	; 0x4be
 800c9a0:	498c      	ldr	r1, [pc, #560]	; (800cbd4 <tcp_slowtmr+0x270>)
 800c9a2:	488d      	ldr	r0, [pc, #564]	; (800cbd8 <tcp_slowtmr+0x274>)
 800c9a4:	f008 f988 	bl	8014cb8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9aa:	7d1b      	ldrb	r3, [r3, #20]
 800c9ac:	2b01      	cmp	r3, #1
 800c9ae:	d106      	bne.n	800c9be <tcp_slowtmr+0x5a>
 800c9b0:	4b87      	ldr	r3, [pc, #540]	; (800cbd0 <tcp_slowtmr+0x26c>)
 800c9b2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800c9b6:	4989      	ldr	r1, [pc, #548]	; (800cbdc <tcp_slowtmr+0x278>)
 800c9b8:	4887      	ldr	r0, [pc, #540]	; (800cbd8 <tcp_slowtmr+0x274>)
 800c9ba:	f008 f97d 	bl	8014cb8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c0:	7d1b      	ldrb	r3, [r3, #20]
 800c9c2:	2b0a      	cmp	r3, #10
 800c9c4:	d106      	bne.n	800c9d4 <tcp_slowtmr+0x70>
 800c9c6:	4b82      	ldr	r3, [pc, #520]	; (800cbd0 <tcp_slowtmr+0x26c>)
 800c9c8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800c9cc:	4984      	ldr	r1, [pc, #528]	; (800cbe0 <tcp_slowtmr+0x27c>)
 800c9ce:	4882      	ldr	r0, [pc, #520]	; (800cbd8 <tcp_slowtmr+0x274>)
 800c9d0:	f008 f972 	bl	8014cb8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d6:	7f9a      	ldrb	r2, [r3, #30]
 800c9d8:	4b7b      	ldr	r3, [pc, #492]	; (800cbc8 <tcp_slowtmr+0x264>)
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	429a      	cmp	r2, r3
 800c9de:	d105      	bne.n	800c9ec <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800c9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e6:	68db      	ldr	r3, [r3, #12]
 800c9e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800c9ea:	e270      	b.n	800cece <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c9ec:	4b76      	ldr	r3, [pc, #472]	; (800cbc8 <tcp_slowtmr+0x264>)
 800c9ee:	781a      	ldrb	r2, [r3, #0]
 800c9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ca00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca02:	7d1b      	ldrb	r3, [r3, #20]
 800ca04:	2b02      	cmp	r3, #2
 800ca06:	d10a      	bne.n	800ca1e <tcp_slowtmr+0xba>
 800ca08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ca0e:	2b05      	cmp	r3, #5
 800ca10:	d905      	bls.n	800ca1e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800ca12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca16:	3301      	adds	r3, #1
 800ca18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ca1c:	e11e      	b.n	800cc5c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ca1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ca24:	2b0b      	cmp	r3, #11
 800ca26:	d905      	bls.n	800ca34 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800ca28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca2c:	3301      	adds	r3, #1
 800ca2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ca32:	e113      	b.n	800cc5c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800ca34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca36:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d075      	beq.n	800cb2a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ca3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d006      	beq.n	800ca54 <tcp_slowtmr+0xf0>
 800ca46:	4b62      	ldr	r3, [pc, #392]	; (800cbd0 <tcp_slowtmr+0x26c>)
 800ca48:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800ca4c:	4965      	ldr	r1, [pc, #404]	; (800cbe4 <tcp_slowtmr+0x280>)
 800ca4e:	4862      	ldr	r0, [pc, #392]	; (800cbd8 <tcp_slowtmr+0x274>)
 800ca50:	f008 f932 	bl	8014cb8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ca54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d106      	bne.n	800ca6a <tcp_slowtmr+0x106>
 800ca5c:	4b5c      	ldr	r3, [pc, #368]	; (800cbd0 <tcp_slowtmr+0x26c>)
 800ca5e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800ca62:	4961      	ldr	r1, [pc, #388]	; (800cbe8 <tcp_slowtmr+0x284>)
 800ca64:	485c      	ldr	r0, [pc, #368]	; (800cbd8 <tcp_slowtmr+0x274>)
 800ca66:	f008 f927 	bl	8014cb8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ca6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca6c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ca70:	2b0b      	cmp	r3, #11
 800ca72:	d905      	bls.n	800ca80 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800ca74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca78:	3301      	adds	r3, #1
 800ca7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ca7e:	e0ed      	b.n	800cc5c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800ca80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca82:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ca86:	3b01      	subs	r3, #1
 800ca88:	4a58      	ldr	r2, [pc, #352]	; (800cbec <tcp_slowtmr+0x288>)
 800ca8a:	5cd3      	ldrb	r3, [r2, r3]
 800ca8c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800ca8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca90:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ca94:	7c7a      	ldrb	r2, [r7, #17]
 800ca96:	429a      	cmp	r2, r3
 800ca98:	d907      	bls.n	800caaa <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800ca9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca9c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800caa0:	3301      	adds	r3, #1
 800caa2:	b2da      	uxtb	r2, r3
 800caa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800caaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cab0:	7c7a      	ldrb	r2, [r7, #17]
 800cab2:	429a      	cmp	r2, r3
 800cab4:	f200 80d2 	bhi.w	800cc5c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800cab8:	2301      	movs	r3, #1
 800caba:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800cabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cabe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d108      	bne.n	800cad8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800cac6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cac8:	f005 f964 	bl	8011d94 <tcp_zero_window_probe>
 800cacc:	4603      	mov	r3, r0
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d014      	beq.n	800cafc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800cad2:	2300      	movs	r3, #0
 800cad4:	623b      	str	r3, [r7, #32]
 800cad6:	e011      	b.n	800cafc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800cad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cada:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cade:	4619      	mov	r1, r3
 800cae0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cae2:	f004 f829 	bl	8010b38 <tcp_split_unsent_seg>
 800cae6:	4603      	mov	r3, r0
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d107      	bne.n	800cafc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800caec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800caee:	f004 faa9 	bl	8011044 <tcp_output>
 800caf2:	4603      	mov	r3, r0
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d101      	bne.n	800cafc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800caf8:	2300      	movs	r3, #0
 800cafa:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800cafc:	6a3b      	ldr	r3, [r7, #32]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	f000 80ac 	beq.w	800cc5c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800cb04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb06:	2200      	movs	r2, #0
 800cb08:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800cb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb0e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cb12:	2b06      	cmp	r3, #6
 800cb14:	f200 80a2 	bhi.w	800cc5c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800cb18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb1a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cb1e:	3301      	adds	r3, #1
 800cb20:	b2da      	uxtb	r2, r3
 800cb22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb24:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800cb28:	e098      	b.n	800cc5c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800cb2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb2c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	db0f      	blt.n	800cb54 <tcp_slowtmr+0x1f0>
 800cb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb36:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cb3a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d008      	beq.n	800cb54 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800cb42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb44:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cb48:	b29b      	uxth	r3, r3
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	b29b      	uxth	r3, r3
 800cb4e:	b21a      	sxth	r2, r3
 800cb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb52:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800cb54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb56:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800cb5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb5c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cb60:	429a      	cmp	r2, r3
 800cb62:	db7b      	blt.n	800cc5c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800cb64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb66:	f004 fd5f 	bl	8011628 <tcp_rexmit_rto_prepare>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d007      	beq.n	800cb80 <tcp_slowtmr+0x21c>
 800cb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d171      	bne.n	800cc5c <tcp_slowtmr+0x2f8>
 800cb78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d06d      	beq.n	800cc5c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800cb80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb82:	7d1b      	ldrb	r3, [r3, #20]
 800cb84:	2b02      	cmp	r3, #2
 800cb86:	d03a      	beq.n	800cbfe <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800cb88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cb8e:	2b0c      	cmp	r3, #12
 800cb90:	bf28      	it	cs
 800cb92:	230c      	movcs	r3, #12
 800cb94:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800cb96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb98:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cb9c:	10db      	asrs	r3, r3, #3
 800cb9e:	b21b      	sxth	r3, r3
 800cba0:	461a      	mov	r2, r3
 800cba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cba8:	4413      	add	r3, r2
 800cbaa:	7efa      	ldrb	r2, [r7, #27]
 800cbac:	4910      	ldr	r1, [pc, #64]	; (800cbf0 <tcp_slowtmr+0x28c>)
 800cbae:	5c8a      	ldrb	r2, [r1, r2]
 800cbb0:	4093      	lsls	r3, r2
 800cbb2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800cbb4:	697b      	ldr	r3, [r7, #20]
 800cbb6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	dc1a      	bgt.n	800cbf4 <tcp_slowtmr+0x290>
 800cbbe:	697b      	ldr	r3, [r7, #20]
 800cbc0:	b21a      	sxth	r2, r3
 800cbc2:	e019      	b.n	800cbf8 <tcp_slowtmr+0x294>
 800cbc4:	24003618 	.word	0x24003618
 800cbc8:	240000f2 	.word	0x240000f2
 800cbcc:	24003614 	.word	0x24003614
 800cbd0:	080168fc 	.word	0x080168fc
 800cbd4:	08016c40 	.word	0x08016c40
 800cbd8:	08016940 	.word	0x08016940
 800cbdc:	08016c6c 	.word	0x08016c6c
 800cbe0:	08016c98 	.word	0x08016c98
 800cbe4:	08016cc8 	.word	0x08016cc8
 800cbe8:	08016cfc 	.word	0x08016cfc
 800cbec:	080190e4 	.word	0x080190e4
 800cbf0:	080190d4 	.word	0x080190d4
 800cbf4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbfa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800cbfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc00:	2200      	movs	r2, #0
 800cc02:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800cc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc06:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cc0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc0c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cc10:	4293      	cmp	r3, r2
 800cc12:	bf28      	it	cs
 800cc14:	4613      	movcs	r3, r2
 800cc16:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800cc18:	8a7b      	ldrh	r3, [r7, #18]
 800cc1a:	085b      	lsrs	r3, r3, #1
 800cc1c:	b29a      	uxth	r2, r3
 800cc1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc20:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800cc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc26:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800cc2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cc2e:	005b      	lsls	r3, r3, #1
 800cc30:	b29b      	uxth	r3, r3
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d206      	bcs.n	800cc44 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800cc36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cc3a:	005b      	lsls	r3, r3, #1
 800cc3c:	b29a      	uxth	r2, r3
 800cc3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc40:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800cc44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc46:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800cc48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc4a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800cc4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc50:	2200      	movs	r2, #0
 800cc52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800cc56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc58:	f004 fd56 	bl	8011708 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800cc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc5e:	7d1b      	ldrb	r3, [r3, #20]
 800cc60:	2b06      	cmp	r3, #6
 800cc62:	d111      	bne.n	800cc88 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800cc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc66:	8b5b      	ldrh	r3, [r3, #26]
 800cc68:	f003 0310 	and.w	r3, r3, #16
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d00b      	beq.n	800cc88 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cc70:	4b9c      	ldr	r3, [pc, #624]	; (800cee4 <tcp_slowtmr+0x580>)
 800cc72:	681a      	ldr	r2, [r3, #0]
 800cc74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc76:	6a1b      	ldr	r3, [r3, #32]
 800cc78:	1ad3      	subs	r3, r2, r3
 800cc7a:	2b28      	cmp	r3, #40	; 0x28
 800cc7c:	d904      	bls.n	800cc88 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800cc7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc82:	3301      	adds	r3, #1
 800cc84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cc88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc8a:	7a5b      	ldrb	r3, [r3, #9]
 800cc8c:	f003 0308 	and.w	r3, r3, #8
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d04a      	beq.n	800cd2a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800cc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc96:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cc98:	2b04      	cmp	r3, #4
 800cc9a:	d003      	beq.n	800cca4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800cc9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800cca0:	2b07      	cmp	r3, #7
 800cca2:	d142      	bne.n	800cd2a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cca4:	4b8f      	ldr	r3, [pc, #572]	; (800cee4 <tcp_slowtmr+0x580>)
 800cca6:	681a      	ldr	r2, [r3, #0]
 800cca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccaa:	6a1b      	ldr	r3, [r3, #32]
 800ccac:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ccae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb0:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ccb4:	4b8c      	ldr	r3, [pc, #560]	; (800cee8 <tcp_slowtmr+0x584>)
 800ccb6:	440b      	add	r3, r1
 800ccb8:	498c      	ldr	r1, [pc, #560]	; (800ceec <tcp_slowtmr+0x588>)
 800ccba:	fba1 1303 	umull	r1, r3, r1, r3
 800ccbe:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	d90a      	bls.n	800ccda <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800ccc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccc8:	3301      	adds	r3, #1
 800ccca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800ccce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ccd2:	3301      	adds	r3, #1
 800ccd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ccd8:	e027      	b.n	800cd2a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ccda:	4b82      	ldr	r3, [pc, #520]	; (800cee4 <tcp_slowtmr+0x580>)
 800ccdc:	681a      	ldr	r2, [r3, #0]
 800ccde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce0:	6a1b      	ldr	r3, [r3, #32]
 800cce2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800cce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ccea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccec:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	4b7f      	ldr	r3, [pc, #508]	; (800cef0 <tcp_slowtmr+0x58c>)
 800ccf4:	fb03 f300 	mul.w	r3, r3, r0
 800ccf8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ccfa:	497c      	ldr	r1, [pc, #496]	; (800ceec <tcp_slowtmr+0x588>)
 800ccfc:	fba1 1303 	umull	r1, r3, r1, r3
 800cd00:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d911      	bls.n	800cd2a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800cd06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd08:	f005 f804 	bl	8011d14 <tcp_keepalive>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800cd12:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d107      	bne.n	800cd2a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800cd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd1c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800cd20:	3301      	adds	r3, #1
 800cd22:	b2da      	uxtb	r2, r3
 800cd24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd26:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800cd2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d011      	beq.n	800cd56 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800cd32:	4b6c      	ldr	r3, [pc, #432]	; (800cee4 <tcp_slowtmr+0x580>)
 800cd34:	681a      	ldr	r2, [r3, #0]
 800cd36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd38:	6a1b      	ldr	r3, [r3, #32]
 800cd3a:	1ad2      	subs	r2, r2, r3
 800cd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd3e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cd42:	4619      	mov	r1, r3
 800cd44:	460b      	mov	r3, r1
 800cd46:	005b      	lsls	r3, r3, #1
 800cd48:	440b      	add	r3, r1
 800cd4a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800cd4c:	429a      	cmp	r2, r3
 800cd4e:	d302      	bcc.n	800cd56 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800cd50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd52:	f000 fec3 	bl	800dadc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800cd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd58:	7d1b      	ldrb	r3, [r3, #20]
 800cd5a:	2b03      	cmp	r3, #3
 800cd5c:	d10b      	bne.n	800cd76 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cd5e:	4b61      	ldr	r3, [pc, #388]	; (800cee4 <tcp_slowtmr+0x580>)
 800cd60:	681a      	ldr	r2, [r3, #0]
 800cd62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd64:	6a1b      	ldr	r3, [r3, #32]
 800cd66:	1ad3      	subs	r3, r2, r3
 800cd68:	2b28      	cmp	r3, #40	; 0x28
 800cd6a:	d904      	bls.n	800cd76 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800cd6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd70:	3301      	adds	r3, #1
 800cd72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800cd76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd78:	7d1b      	ldrb	r3, [r3, #20]
 800cd7a:	2b09      	cmp	r3, #9
 800cd7c:	d10b      	bne.n	800cd96 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cd7e:	4b59      	ldr	r3, [pc, #356]	; (800cee4 <tcp_slowtmr+0x580>)
 800cd80:	681a      	ldr	r2, [r3, #0]
 800cd82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd84:	6a1b      	ldr	r3, [r3, #32]
 800cd86:	1ad3      	subs	r3, r2, r3
 800cd88:	2bf0      	cmp	r3, #240	; 0xf0
 800cd8a:	d904      	bls.n	800cd96 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800cd8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd90:	3301      	adds	r3, #1
 800cd92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cd96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d060      	beq.n	800ce60 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800cd9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cda0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cda4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800cda6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cda8:	f000 fce4 	bl	800d774 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800cdac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d010      	beq.n	800cdd4 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800cdb2:	4b50      	ldr	r3, [pc, #320]	; (800cef4 <tcp_slowtmr+0x590>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	d106      	bne.n	800cdca <tcp_slowtmr+0x466>
 800cdbc:	4b4e      	ldr	r3, [pc, #312]	; (800cef8 <tcp_slowtmr+0x594>)
 800cdbe:	f240 526d 	movw	r2, #1389	; 0x56d
 800cdc2:	494e      	ldr	r1, [pc, #312]	; (800cefc <tcp_slowtmr+0x598>)
 800cdc4:	484e      	ldr	r0, [pc, #312]	; (800cf00 <tcp_slowtmr+0x59c>)
 800cdc6:	f007 ff77 	bl	8014cb8 <iprintf>
        prev->next = pcb->next;
 800cdca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdcc:	68da      	ldr	r2, [r3, #12]
 800cdce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd0:	60da      	str	r2, [r3, #12]
 800cdd2:	e00f      	b.n	800cdf4 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800cdd4:	4b47      	ldr	r3, [pc, #284]	; (800cef4 <tcp_slowtmr+0x590>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d006      	beq.n	800cdec <tcp_slowtmr+0x488>
 800cdde:	4b46      	ldr	r3, [pc, #280]	; (800cef8 <tcp_slowtmr+0x594>)
 800cde0:	f240 5271 	movw	r2, #1393	; 0x571
 800cde4:	4947      	ldr	r1, [pc, #284]	; (800cf04 <tcp_slowtmr+0x5a0>)
 800cde6:	4846      	ldr	r0, [pc, #280]	; (800cf00 <tcp_slowtmr+0x59c>)
 800cde8:	f007 ff66 	bl	8014cb8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800cdec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdee:	68db      	ldr	r3, [r3, #12]
 800cdf0:	4a40      	ldr	r2, [pc, #256]	; (800cef4 <tcp_slowtmr+0x590>)
 800cdf2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800cdf4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d013      	beq.n	800ce24 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cdfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdfe:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ce00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce02:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ce04:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800ce06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce08:	3304      	adds	r3, #4
 800ce0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce0c:	8ad2      	ldrh	r2, [r2, #22]
 800ce0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce10:	8b09      	ldrh	r1, [r1, #24]
 800ce12:	9102      	str	r1, [sp, #8]
 800ce14:	9201      	str	r2, [sp, #4]
 800ce16:	9300      	str	r3, [sp, #0]
 800ce18:	462b      	mov	r3, r5
 800ce1a:	4622      	mov	r2, r4
 800ce1c:	4601      	mov	r1, r0
 800ce1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce20:	f004 fec4 	bl	8011bac <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800ce24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce26:	691b      	ldr	r3, [r3, #16]
 800ce28:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ce2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce2c:	7d1b      	ldrb	r3, [r3, #20]
 800ce2e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ce30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce32:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ce34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce36:	68db      	ldr	r3, [r3, #12]
 800ce38:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ce3a:	6838      	ldr	r0, [r7, #0]
 800ce3c:	f7ff f83a 	bl	800beb4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800ce40:	4b31      	ldr	r3, [pc, #196]	; (800cf08 <tcp_slowtmr+0x5a4>)
 800ce42:	2200      	movs	r2, #0
 800ce44:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d004      	beq.n	800ce56 <tcp_slowtmr+0x4f2>
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	f06f 010c 	mvn.w	r1, #12
 800ce52:	68b8      	ldr	r0, [r7, #8]
 800ce54:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ce56:	4b2c      	ldr	r3, [pc, #176]	; (800cf08 <tcp_slowtmr+0x5a4>)
 800ce58:	781b      	ldrb	r3, [r3, #0]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d037      	beq.n	800cece <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800ce5e:	e592      	b.n	800c986 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ce60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce62:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ce64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce66:	68db      	ldr	r3, [r3, #12]
 800ce68:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ce6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce6c:	7f1b      	ldrb	r3, [r3, #28]
 800ce6e:	3301      	adds	r3, #1
 800ce70:	b2da      	uxtb	r2, r3
 800ce72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce74:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ce76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce78:	7f1a      	ldrb	r2, [r3, #28]
 800ce7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce7c:	7f5b      	ldrb	r3, [r3, #29]
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	d325      	bcc.n	800cece <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800ce82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce84:	2200      	movs	r2, #0
 800ce86:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ce88:	4b1f      	ldr	r3, [pc, #124]	; (800cf08 <tcp_slowtmr+0x5a4>)
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ce8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d00b      	beq.n	800ceb0 <tcp_slowtmr+0x54c>
 800ce98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cea0:	6912      	ldr	r2, [r2, #16]
 800cea2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cea4:	4610      	mov	r0, r2
 800cea6:	4798      	blx	r3
 800cea8:	4603      	mov	r3, r0
 800ceaa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ceae:	e002      	b.n	800ceb6 <tcp_slowtmr+0x552>
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ceb6:	4b14      	ldr	r3, [pc, #80]	; (800cf08 <tcp_slowtmr+0x5a4>)
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d000      	beq.n	800cec0 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800cebe:	e562      	b.n	800c986 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800cec0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d102      	bne.n	800cece <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800cec8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ceca:	f004 f8bb 	bl	8011044 <tcp_output>
  while (pcb != NULL) {
 800cece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	f47f ad5e 	bne.w	800c992 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ced6:	2300      	movs	r3, #0
 800ced8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ceda:	4b0c      	ldr	r3, [pc, #48]	; (800cf0c <tcp_slowtmr+0x5a8>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800cee0:	e069      	b.n	800cfb6 <tcp_slowtmr+0x652>
 800cee2:	bf00      	nop
 800cee4:	24003618 	.word	0x24003618
 800cee8:	000a4cb8 	.word	0x000a4cb8
 800ceec:	10624dd3 	.word	0x10624dd3
 800cef0:	000124f8 	.word	0x000124f8
 800cef4:	24003614 	.word	0x24003614
 800cef8:	080168fc 	.word	0x080168fc
 800cefc:	08016d34 	.word	0x08016d34
 800cf00:	08016940 	.word	0x08016940
 800cf04:	08016d60 	.word	0x08016d60
 800cf08:	24003610 	.word	0x24003610
 800cf0c:	24003624 	.word	0x24003624
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cf10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf12:	7d1b      	ldrb	r3, [r3, #20]
 800cf14:	2b0a      	cmp	r3, #10
 800cf16:	d006      	beq.n	800cf26 <tcp_slowtmr+0x5c2>
 800cf18:	4b2b      	ldr	r3, [pc, #172]	; (800cfc8 <tcp_slowtmr+0x664>)
 800cf1a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800cf1e:	492b      	ldr	r1, [pc, #172]	; (800cfcc <tcp_slowtmr+0x668>)
 800cf20:	482b      	ldr	r0, [pc, #172]	; (800cfd0 <tcp_slowtmr+0x66c>)
 800cf22:	f007 fec9 	bl	8014cb8 <iprintf>
    pcb_remove = 0;
 800cf26:	2300      	movs	r3, #0
 800cf28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cf2c:	4b29      	ldr	r3, [pc, #164]	; (800cfd4 <tcp_slowtmr+0x670>)
 800cf2e:	681a      	ldr	r2, [r3, #0]
 800cf30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf32:	6a1b      	ldr	r3, [r3, #32]
 800cf34:	1ad3      	subs	r3, r2, r3
 800cf36:	2bf0      	cmp	r3, #240	; 0xf0
 800cf38:	d904      	bls.n	800cf44 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800cf3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf3e:	3301      	adds	r3, #1
 800cf40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cf44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d02f      	beq.n	800cfac <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800cf4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf4e:	f000 fc11 	bl	800d774 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800cf52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d010      	beq.n	800cf7a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800cf58:	4b1f      	ldr	r3, [pc, #124]	; (800cfd8 <tcp_slowtmr+0x674>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	d106      	bne.n	800cf70 <tcp_slowtmr+0x60c>
 800cf62:	4b19      	ldr	r3, [pc, #100]	; (800cfc8 <tcp_slowtmr+0x664>)
 800cf64:	f240 52af 	movw	r2, #1455	; 0x5af
 800cf68:	491c      	ldr	r1, [pc, #112]	; (800cfdc <tcp_slowtmr+0x678>)
 800cf6a:	4819      	ldr	r0, [pc, #100]	; (800cfd0 <tcp_slowtmr+0x66c>)
 800cf6c:	f007 fea4 	bl	8014cb8 <iprintf>
        prev->next = pcb->next;
 800cf70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf72:	68da      	ldr	r2, [r3, #12]
 800cf74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf76:	60da      	str	r2, [r3, #12]
 800cf78:	e00f      	b.n	800cf9a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800cf7a:	4b17      	ldr	r3, [pc, #92]	; (800cfd8 <tcp_slowtmr+0x674>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d006      	beq.n	800cf92 <tcp_slowtmr+0x62e>
 800cf84:	4b10      	ldr	r3, [pc, #64]	; (800cfc8 <tcp_slowtmr+0x664>)
 800cf86:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800cf8a:	4915      	ldr	r1, [pc, #84]	; (800cfe0 <tcp_slowtmr+0x67c>)
 800cf8c:	4810      	ldr	r0, [pc, #64]	; (800cfd0 <tcp_slowtmr+0x66c>)
 800cf8e:	f007 fe93 	bl	8014cb8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800cf92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf94:	68db      	ldr	r3, [r3, #12]
 800cf96:	4a10      	ldr	r2, [pc, #64]	; (800cfd8 <tcp_slowtmr+0x674>)
 800cf98:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800cf9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf9c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800cf9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa0:	68db      	ldr	r3, [r3, #12]
 800cfa2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cfa4:	69f8      	ldr	r0, [r7, #28]
 800cfa6:	f7fe ff85 	bl	800beb4 <tcp_free>
 800cfaa:	e004      	b.n	800cfb6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800cfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfae:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb2:	68db      	ldr	r3, [r3, #12]
 800cfb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800cfb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d1a9      	bne.n	800cf10 <tcp_slowtmr+0x5ac>
    }
  }
}
 800cfbc:	bf00      	nop
 800cfbe:	bf00      	nop
 800cfc0:	3730      	adds	r7, #48	; 0x30
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bdb0      	pop	{r4, r5, r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	080168fc 	.word	0x080168fc
 800cfcc:	08016d8c 	.word	0x08016d8c
 800cfd0:	08016940 	.word	0x08016940
 800cfd4:	24003618 	.word	0x24003618
 800cfd8:	24003624 	.word	0x24003624
 800cfdc:	08016dbc 	.word	0x08016dbc
 800cfe0:	08016de4 	.word	0x08016de4

0800cfe4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b082      	sub	sp, #8
 800cfe8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800cfea:	4b2d      	ldr	r3, [pc, #180]	; (800d0a0 <tcp_fasttmr+0xbc>)
 800cfec:	781b      	ldrb	r3, [r3, #0]
 800cfee:	3301      	adds	r3, #1
 800cff0:	b2da      	uxtb	r2, r3
 800cff2:	4b2b      	ldr	r3, [pc, #172]	; (800d0a0 <tcp_fasttmr+0xbc>)
 800cff4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800cff6:	4b2b      	ldr	r3, [pc, #172]	; (800d0a4 <tcp_fasttmr+0xc0>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cffc:	e048      	b.n	800d090 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	7f9a      	ldrb	r2, [r3, #30]
 800d002:	4b27      	ldr	r3, [pc, #156]	; (800d0a0 <tcp_fasttmr+0xbc>)
 800d004:	781b      	ldrb	r3, [r3, #0]
 800d006:	429a      	cmp	r2, r3
 800d008:	d03f      	beq.n	800d08a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d00a:	4b25      	ldr	r3, [pc, #148]	; (800d0a0 <tcp_fasttmr+0xbc>)
 800d00c:	781a      	ldrb	r2, [r3, #0]
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	8b5b      	ldrh	r3, [r3, #26]
 800d016:	f003 0301 	and.w	r3, r3, #1
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d010      	beq.n	800d040 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	8b5b      	ldrh	r3, [r3, #26]
 800d022:	f043 0302 	orr.w	r3, r3, #2
 800d026:	b29a      	uxth	r2, r3
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f004 f809 	bl	8011044 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	8b5b      	ldrh	r3, [r3, #26]
 800d036:	f023 0303 	bic.w	r3, r3, #3
 800d03a:	b29a      	uxth	r2, r3
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	8b5b      	ldrh	r3, [r3, #26]
 800d044:	f003 0308 	and.w	r3, r3, #8
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d009      	beq.n	800d060 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	8b5b      	ldrh	r3, [r3, #26]
 800d050:	f023 0308 	bic.w	r3, r3, #8
 800d054:	b29a      	uxth	r2, r3
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f7ff f8be 	bl	800c1dc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	68db      	ldr	r3, [r3, #12]
 800d064:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d00a      	beq.n	800d084 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d06e:	4b0e      	ldr	r3, [pc, #56]	; (800d0a8 <tcp_fasttmr+0xc4>)
 800d070:	2200      	movs	r2, #0
 800d072:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f000 f819 	bl	800d0ac <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d07a:	4b0b      	ldr	r3, [pc, #44]	; (800d0a8 <tcp_fasttmr+0xc4>)
 800d07c:	781b      	ldrb	r3, [r3, #0]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d000      	beq.n	800d084 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d082:	e7b8      	b.n	800cff6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	607b      	str	r3, [r7, #4]
 800d088:	e002      	b.n	800d090 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	68db      	ldr	r3, [r3, #12]
 800d08e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d1b3      	bne.n	800cffe <tcp_fasttmr+0x1a>
    }
  }
}
 800d096:	bf00      	nop
 800d098:	bf00      	nop
 800d09a:	3708      	adds	r7, #8
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}
 800d0a0:	240000f2 	.word	0x240000f2
 800d0a4:	24003614 	.word	0x24003614
 800d0a8:	24003610 	.word	0x24003610

0800d0ac <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d0ac:	b590      	push	{r4, r7, lr}
 800d0ae:	b085      	sub	sp, #20
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d109      	bne.n	800d0ce <tcp_process_refused_data+0x22>
 800d0ba:	4b37      	ldr	r3, [pc, #220]	; (800d198 <tcp_process_refused_data+0xec>)
 800d0bc:	f240 6209 	movw	r2, #1545	; 0x609
 800d0c0:	4936      	ldr	r1, [pc, #216]	; (800d19c <tcp_process_refused_data+0xf0>)
 800d0c2:	4837      	ldr	r0, [pc, #220]	; (800d1a0 <tcp_process_refused_data+0xf4>)
 800d0c4:	f007 fdf8 	bl	8014cb8 <iprintf>
 800d0c8:	f06f 030f 	mvn.w	r3, #15
 800d0cc:	e060      	b.n	800d190 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d0d2:	7b5b      	ldrb	r3, [r3, #13]
 800d0d4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d0da:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d00b      	beq.n	800d104 <tcp_process_refused_data+0x58>
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	6918      	ldr	r0, [r3, #16]
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	68ba      	ldr	r2, [r7, #8]
 800d0fa:	6879      	ldr	r1, [r7, #4]
 800d0fc:	47a0      	blx	r4
 800d0fe:	4603      	mov	r3, r0
 800d100:	73fb      	strb	r3, [r7, #15]
 800d102:	e007      	b.n	800d114 <tcp_process_refused_data+0x68>
 800d104:	2300      	movs	r3, #0
 800d106:	68ba      	ldr	r2, [r7, #8]
 800d108:	6879      	ldr	r1, [r7, #4]
 800d10a:	2000      	movs	r0, #0
 800d10c:	f000 f8c2 	bl	800d294 <tcp_recv_null>
 800d110:	4603      	mov	r3, r0
 800d112:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d114:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d12a      	bne.n	800d172 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d11c:	7bbb      	ldrb	r3, [r7, #14]
 800d11e:	f003 0320 	and.w	r3, r3, #32
 800d122:	2b00      	cmp	r3, #0
 800d124:	d033      	beq.n	800d18e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d12a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d12e:	d005      	beq.n	800d13c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d134:	3301      	adds	r3, #1
 800d136:	b29a      	uxth	r2, r3
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d142:	2b00      	cmp	r3, #0
 800d144:	d00b      	beq.n	800d15e <tcp_process_refused_data+0xb2>
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6918      	ldr	r0, [r3, #16]
 800d150:	2300      	movs	r3, #0
 800d152:	2200      	movs	r2, #0
 800d154:	6879      	ldr	r1, [r7, #4]
 800d156:	47a0      	blx	r4
 800d158:	4603      	mov	r3, r0
 800d15a:	73fb      	strb	r3, [r7, #15]
 800d15c:	e001      	b.n	800d162 <tcp_process_refused_data+0xb6>
 800d15e:	2300      	movs	r3, #0
 800d160:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d166:	f113 0f0d 	cmn.w	r3, #13
 800d16a:	d110      	bne.n	800d18e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d16c:	f06f 030c 	mvn.w	r3, #12
 800d170:	e00e      	b.n	800d190 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d176:	f113 0f0d 	cmn.w	r3, #13
 800d17a:	d102      	bne.n	800d182 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d17c:	f06f 030c 	mvn.w	r3, #12
 800d180:	e006      	b.n	800d190 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	68ba      	ldr	r2, [r7, #8]
 800d186:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d188:	f06f 0304 	mvn.w	r3, #4
 800d18c:	e000      	b.n	800d190 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d18e:	2300      	movs	r3, #0
}
 800d190:	4618      	mov	r0, r3
 800d192:	3714      	adds	r7, #20
 800d194:	46bd      	mov	sp, r7
 800d196:	bd90      	pop	{r4, r7, pc}
 800d198:	080168fc 	.word	0x080168fc
 800d19c:	08016e0c 	.word	0x08016e0c
 800d1a0:	08016940 	.word	0x08016940

0800d1a4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b084      	sub	sp, #16
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d1ac:	e007      	b.n	800d1be <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f000 f80a 	bl	800d1ce <tcp_seg_free>
    seg = next;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d1f4      	bne.n	800d1ae <tcp_segs_free+0xa>
  }
}
 800d1c4:	bf00      	nop
 800d1c6:	bf00      	nop
 800d1c8:	3710      	adds	r7, #16
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}

0800d1ce <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d1ce:	b580      	push	{r7, lr}
 800d1d0:	b082      	sub	sp, #8
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d00c      	beq.n	800d1f6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	685b      	ldr	r3, [r3, #4]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d004      	beq.n	800d1ee <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	685b      	ldr	r3, [r3, #4]
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f7fe fbb3 	bl	800b954 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d1ee:	6879      	ldr	r1, [r7, #4]
 800d1f0:	2003      	movs	r0, #3
 800d1f2:	f7fd fd39 	bl	800ac68 <memp_free>
  }
}
 800d1f6:	bf00      	nop
 800d1f8:	3708      	adds	r7, #8
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}
	...

0800d200 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b082      	sub	sp, #8
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	460b      	mov	r3, r1
 800d20a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d107      	bne.n	800d222 <tcp_setprio+0x22>
 800d212:	4b07      	ldr	r3, [pc, #28]	; (800d230 <tcp_setprio+0x30>)
 800d214:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800d218:	4906      	ldr	r1, [pc, #24]	; (800d234 <tcp_setprio+0x34>)
 800d21a:	4807      	ldr	r0, [pc, #28]	; (800d238 <tcp_setprio+0x38>)
 800d21c:	f007 fd4c 	bl	8014cb8 <iprintf>
 800d220:	e002      	b.n	800d228 <tcp_setprio+0x28>

  pcb->prio = prio;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	78fa      	ldrb	r2, [r7, #3]
 800d226:	755a      	strb	r2, [r3, #21]
}
 800d228:	3708      	adds	r7, #8
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd80      	pop	{r7, pc}
 800d22e:	bf00      	nop
 800d230:	080168fc 	.word	0x080168fc
 800d234:	08016e34 	.word	0x08016e34
 800d238:	08016940 	.word	0x08016940

0800d23c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b084      	sub	sp, #16
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d106      	bne.n	800d258 <tcp_seg_copy+0x1c>
 800d24a:	4b0f      	ldr	r3, [pc, #60]	; (800d288 <tcp_seg_copy+0x4c>)
 800d24c:	f240 6282 	movw	r2, #1666	; 0x682
 800d250:	490e      	ldr	r1, [pc, #56]	; (800d28c <tcp_seg_copy+0x50>)
 800d252:	480f      	ldr	r0, [pc, #60]	; (800d290 <tcp_seg_copy+0x54>)
 800d254:	f007 fd30 	bl	8014cb8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d258:	2003      	movs	r0, #3
 800d25a:	f7fd fc95 	bl	800ab88 <memp_malloc>
 800d25e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d101      	bne.n	800d26a <tcp_seg_copy+0x2e>
    return NULL;
 800d266:	2300      	movs	r3, #0
 800d268:	e00a      	b.n	800d280 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d26a:	2210      	movs	r2, #16
 800d26c:	6879      	ldr	r1, [r7, #4]
 800d26e:	68f8      	ldr	r0, [r7, #12]
 800d270:	f007 fd0c 	bl	8014c8c <memcpy>
  pbuf_ref(cseg->p);
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	685b      	ldr	r3, [r3, #4]
 800d278:	4618      	mov	r0, r3
 800d27a:	f7fe fc0b 	bl	800ba94 <pbuf_ref>
  return cseg;
 800d27e:	68fb      	ldr	r3, [r7, #12]
}
 800d280:	4618      	mov	r0, r3
 800d282:	3710      	adds	r7, #16
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}
 800d288:	080168fc 	.word	0x080168fc
 800d28c:	08016e50 	.word	0x08016e50
 800d290:	08016940 	.word	0x08016940

0800d294 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b084      	sub	sp, #16
 800d298:	af00      	add	r7, sp, #0
 800d29a:	60f8      	str	r0, [r7, #12]
 800d29c:	60b9      	str	r1, [r7, #8]
 800d29e:	607a      	str	r2, [r7, #4]
 800d2a0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d109      	bne.n	800d2bc <tcp_recv_null+0x28>
 800d2a8:	4b12      	ldr	r3, [pc, #72]	; (800d2f4 <tcp_recv_null+0x60>)
 800d2aa:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d2ae:	4912      	ldr	r1, [pc, #72]	; (800d2f8 <tcp_recv_null+0x64>)
 800d2b0:	4812      	ldr	r0, [pc, #72]	; (800d2fc <tcp_recv_null+0x68>)
 800d2b2:	f007 fd01 	bl	8014cb8 <iprintf>
 800d2b6:	f06f 030f 	mvn.w	r3, #15
 800d2ba:	e016      	b.n	800d2ea <tcp_recv_null+0x56>

  if (p != NULL) {
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d009      	beq.n	800d2d6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	891b      	ldrh	r3, [r3, #8]
 800d2c6:	4619      	mov	r1, r3
 800d2c8:	68b8      	ldr	r0, [r7, #8]
 800d2ca:	f7ff fab5 	bl	800c838 <tcp_recved>
    pbuf_free(p);
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f7fe fb40 	bl	800b954 <pbuf_free>
 800d2d4:	e008      	b.n	800d2e8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d2d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d104      	bne.n	800d2e8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d2de:	68b8      	ldr	r0, [r7, #8]
 800d2e0:	f7fe ffe6 	bl	800c2b0 <tcp_close>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	e000      	b.n	800d2ea <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d2e8:	2300      	movs	r3, #0
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3710      	adds	r7, #16
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}
 800d2f2:	bf00      	nop
 800d2f4:	080168fc 	.word	0x080168fc
 800d2f8:	08016e6c 	.word	0x08016e6c
 800d2fc:	08016940 	.word	0x08016940

0800d300 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b086      	sub	sp, #24
 800d304:	af00      	add	r7, sp, #0
 800d306:	4603      	mov	r3, r0
 800d308:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d30a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	db01      	blt.n	800d316 <tcp_kill_prio+0x16>
 800d312:	79fb      	ldrb	r3, [r7, #7]
 800d314:	e000      	b.n	800d318 <tcp_kill_prio+0x18>
 800d316:	237f      	movs	r3, #127	; 0x7f
 800d318:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d31a:	7afb      	ldrb	r3, [r7, #11]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d034      	beq.n	800d38a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d320:	7afb      	ldrb	r3, [r7, #11]
 800d322:	3b01      	subs	r3, #1
 800d324:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d326:	2300      	movs	r3, #0
 800d328:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d32a:	2300      	movs	r3, #0
 800d32c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d32e:	4b19      	ldr	r3, [pc, #100]	; (800d394 <tcp_kill_prio+0x94>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	617b      	str	r3, [r7, #20]
 800d334:	e01f      	b.n	800d376 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	7d5b      	ldrb	r3, [r3, #21]
 800d33a:	7afa      	ldrb	r2, [r7, #11]
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d80c      	bhi.n	800d35a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d340:	697b      	ldr	r3, [r7, #20]
 800d342:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d344:	7afa      	ldrb	r2, [r7, #11]
 800d346:	429a      	cmp	r2, r3
 800d348:	d112      	bne.n	800d370 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d34a:	4b13      	ldr	r3, [pc, #76]	; (800d398 <tcp_kill_prio+0x98>)
 800d34c:	681a      	ldr	r2, [r3, #0]
 800d34e:	697b      	ldr	r3, [r7, #20]
 800d350:	6a1b      	ldr	r3, [r3, #32]
 800d352:	1ad3      	subs	r3, r2, r3
 800d354:	68fa      	ldr	r2, [r7, #12]
 800d356:	429a      	cmp	r2, r3
 800d358:	d80a      	bhi.n	800d370 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d35a:	4b0f      	ldr	r3, [pc, #60]	; (800d398 <tcp_kill_prio+0x98>)
 800d35c:	681a      	ldr	r2, [r3, #0]
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	6a1b      	ldr	r3, [r3, #32]
 800d362:	1ad3      	subs	r3, r2, r3
 800d364:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d36a:	697b      	ldr	r3, [r7, #20]
 800d36c:	7d5b      	ldrb	r3, [r3, #21]
 800d36e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d370:	697b      	ldr	r3, [r7, #20]
 800d372:	68db      	ldr	r3, [r3, #12]
 800d374:	617b      	str	r3, [r7, #20]
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d1dc      	bne.n	800d336 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d37c:	693b      	ldr	r3, [r7, #16]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d004      	beq.n	800d38c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d382:	6938      	ldr	r0, [r7, #16]
 800d384:	f7ff f87e 	bl	800c484 <tcp_abort>
 800d388:	e000      	b.n	800d38c <tcp_kill_prio+0x8c>
    return;
 800d38a:	bf00      	nop
  }
}
 800d38c:	3718      	adds	r7, #24
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd80      	pop	{r7, pc}
 800d392:	bf00      	nop
 800d394:	24003614 	.word	0x24003614
 800d398:	24003618 	.word	0x24003618

0800d39c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b086      	sub	sp, #24
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d3a6:	79fb      	ldrb	r3, [r7, #7]
 800d3a8:	2b08      	cmp	r3, #8
 800d3aa:	d009      	beq.n	800d3c0 <tcp_kill_state+0x24>
 800d3ac:	79fb      	ldrb	r3, [r7, #7]
 800d3ae:	2b09      	cmp	r3, #9
 800d3b0:	d006      	beq.n	800d3c0 <tcp_kill_state+0x24>
 800d3b2:	4b1a      	ldr	r3, [pc, #104]	; (800d41c <tcp_kill_state+0x80>)
 800d3b4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d3b8:	4919      	ldr	r1, [pc, #100]	; (800d420 <tcp_kill_state+0x84>)
 800d3ba:	481a      	ldr	r0, [pc, #104]	; (800d424 <tcp_kill_state+0x88>)
 800d3bc:	f007 fc7c 	bl	8014cb8 <iprintf>

  inactivity = 0;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d3c8:	4b17      	ldr	r3, [pc, #92]	; (800d428 <tcp_kill_state+0x8c>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	617b      	str	r3, [r7, #20]
 800d3ce:	e017      	b.n	800d400 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d3d0:	697b      	ldr	r3, [r7, #20]
 800d3d2:	7d1b      	ldrb	r3, [r3, #20]
 800d3d4:	79fa      	ldrb	r2, [r7, #7]
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	d10f      	bne.n	800d3fa <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d3da:	4b14      	ldr	r3, [pc, #80]	; (800d42c <tcp_kill_state+0x90>)
 800d3dc:	681a      	ldr	r2, [r3, #0]
 800d3de:	697b      	ldr	r3, [r7, #20]
 800d3e0:	6a1b      	ldr	r3, [r3, #32]
 800d3e2:	1ad3      	subs	r3, r2, r3
 800d3e4:	68fa      	ldr	r2, [r7, #12]
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	d807      	bhi.n	800d3fa <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d3ea:	4b10      	ldr	r3, [pc, #64]	; (800d42c <tcp_kill_state+0x90>)
 800d3ec:	681a      	ldr	r2, [r3, #0]
 800d3ee:	697b      	ldr	r3, [r7, #20]
 800d3f0:	6a1b      	ldr	r3, [r3, #32]
 800d3f2:	1ad3      	subs	r3, r2, r3
 800d3f4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	68db      	ldr	r3, [r3, #12]
 800d3fe:	617b      	str	r3, [r7, #20]
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d1e4      	bne.n	800d3d0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d406:	693b      	ldr	r3, [r7, #16]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d003      	beq.n	800d414 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d40c:	2100      	movs	r1, #0
 800d40e:	6938      	ldr	r0, [r7, #16]
 800d410:	f7fe ff7a 	bl	800c308 <tcp_abandon>
  }
}
 800d414:	bf00      	nop
 800d416:	3718      	adds	r7, #24
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}
 800d41c:	080168fc 	.word	0x080168fc
 800d420:	08016e88 	.word	0x08016e88
 800d424:	08016940 	.word	0x08016940
 800d428:	24003614 	.word	0x24003614
 800d42c:	24003618 	.word	0x24003618

0800d430 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b084      	sub	sp, #16
 800d434:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d436:	2300      	movs	r3, #0
 800d438:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d43a:	2300      	movs	r3, #0
 800d43c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d43e:	4b12      	ldr	r3, [pc, #72]	; (800d488 <tcp_kill_timewait+0x58>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	60fb      	str	r3, [r7, #12]
 800d444:	e012      	b.n	800d46c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d446:	4b11      	ldr	r3, [pc, #68]	; (800d48c <tcp_kill_timewait+0x5c>)
 800d448:	681a      	ldr	r2, [r3, #0]
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	6a1b      	ldr	r3, [r3, #32]
 800d44e:	1ad3      	subs	r3, r2, r3
 800d450:	687a      	ldr	r2, [r7, #4]
 800d452:	429a      	cmp	r2, r3
 800d454:	d807      	bhi.n	800d466 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d456:	4b0d      	ldr	r3, [pc, #52]	; (800d48c <tcp_kill_timewait+0x5c>)
 800d458:	681a      	ldr	r2, [r3, #0]
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	6a1b      	ldr	r3, [r3, #32]
 800d45e:	1ad3      	subs	r3, r2, r3
 800d460:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	68db      	ldr	r3, [r3, #12]
 800d46a:	60fb      	str	r3, [r7, #12]
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d1e9      	bne.n	800d446 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d002      	beq.n	800d47e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d478:	68b8      	ldr	r0, [r7, #8]
 800d47a:	f7ff f803 	bl	800c484 <tcp_abort>
  }
}
 800d47e:	bf00      	nop
 800d480:	3710      	adds	r7, #16
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}
 800d486:	bf00      	nop
 800d488:	24003624 	.word	0x24003624
 800d48c:	24003618 	.word	0x24003618

0800d490 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b082      	sub	sp, #8
 800d494:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d496:	4b10      	ldr	r3, [pc, #64]	; (800d4d8 <tcp_handle_closepend+0x48>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d49c:	e014      	b.n	800d4c8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	68db      	ldr	r3, [r3, #12]
 800d4a2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	8b5b      	ldrh	r3, [r3, #26]
 800d4a8:	f003 0308 	and.w	r3, r3, #8
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d009      	beq.n	800d4c4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	8b5b      	ldrh	r3, [r3, #26]
 800d4b4:	f023 0308 	bic.w	r3, r3, #8
 800d4b8:	b29a      	uxth	r2, r3
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d4be:	6878      	ldr	r0, [r7, #4]
 800d4c0:	f7fe fe8c 	bl	800c1dc <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d1e7      	bne.n	800d49e <tcp_handle_closepend+0xe>
  }
}
 800d4ce:	bf00      	nop
 800d4d0:	bf00      	nop
 800d4d2:	3708      	adds	r7, #8
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}
 800d4d8:	24003614 	.word	0x24003614

0800d4dc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b084      	sub	sp, #16
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d4e6:	2001      	movs	r0, #1
 800d4e8:	f7fd fb4e 	bl	800ab88 <memp_malloc>
 800d4ec:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d126      	bne.n	800d542 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d4f4:	f7ff ffcc 	bl	800d490 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d4f8:	f7ff ff9a 	bl	800d430 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d4fc:	2001      	movs	r0, #1
 800d4fe:	f7fd fb43 	bl	800ab88 <memp_malloc>
 800d502:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d11b      	bne.n	800d542 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d50a:	2009      	movs	r0, #9
 800d50c:	f7ff ff46 	bl	800d39c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d510:	2001      	movs	r0, #1
 800d512:	f7fd fb39 	bl	800ab88 <memp_malloc>
 800d516:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d111      	bne.n	800d542 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d51e:	2008      	movs	r0, #8
 800d520:	f7ff ff3c 	bl	800d39c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d524:	2001      	movs	r0, #1
 800d526:	f7fd fb2f 	bl	800ab88 <memp_malloc>
 800d52a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d107      	bne.n	800d542 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d532:	79fb      	ldrb	r3, [r7, #7]
 800d534:	4618      	mov	r0, r3
 800d536:	f7ff fee3 	bl	800d300 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d53a:	2001      	movs	r0, #1
 800d53c:	f7fd fb24 	bl	800ab88 <memp_malloc>
 800d540:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d03f      	beq.n	800d5c8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d548:	229c      	movs	r2, #156	; 0x9c
 800d54a:	2100      	movs	r1, #0
 800d54c:	68f8      	ldr	r0, [r7, #12]
 800d54e:	f007 fbab 	bl	8014ca8 <memset>
    pcb->prio = prio;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	79fa      	ldrb	r2, [r7, #7]
 800d556:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d55e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d568:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	22ff      	movs	r2, #255	; 0xff
 800d576:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d57e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	2206      	movs	r2, #6
 800d584:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	2206      	movs	r2, #6
 800d58c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d594:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	2201      	movs	r2, #1
 800d59a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d59e:	4b0d      	ldr	r3, [pc, #52]	; (800d5d4 <tcp_alloc+0xf8>)
 800d5a0:	681a      	ldr	r2, [r3, #0]
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d5a6:	4b0c      	ldr	r3, [pc, #48]	; (800d5d8 <tcp_alloc+0xfc>)
 800d5a8:	781a      	ldrb	r2, [r3, #0]
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d5b4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	4a08      	ldr	r2, [pc, #32]	; (800d5dc <tcp_alloc+0x100>)
 800d5bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	4a07      	ldr	r2, [pc, #28]	; (800d5e0 <tcp_alloc+0x104>)
 800d5c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3710      	adds	r7, #16
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}
 800d5d2:	bf00      	nop
 800d5d4:	24003618 	.word	0x24003618
 800d5d8:	240000f2 	.word	0x240000f2
 800d5dc:	0800d295 	.word	0x0800d295
 800d5e0:	006ddd00 	.word	0x006ddd00

0800d5e4 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800d5e8:	2040      	movs	r0, #64	; 0x40
 800d5ea:	f7ff ff77 	bl	800d4dc <tcp_alloc>
 800d5ee:	4603      	mov	r3, r0
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	bd80      	pop	{r7, pc}

0800d5f4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800d5f4:	b480      	push	{r7}
 800d5f6:	b083      	sub	sp, #12
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
 800d5fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d002      	beq.n	800d60a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	683a      	ldr	r2, [r7, #0]
 800d608:	611a      	str	r2, [r3, #16]
  }
}
 800d60a:	bf00      	nop
 800d60c:	370c      	adds	r7, #12
 800d60e:	46bd      	mov	sp, r7
 800d610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d614:	4770      	bx	lr
	...

0800d618 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b082      	sub	sp, #8
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
 800d620:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d00e      	beq.n	800d646 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	7d1b      	ldrb	r3, [r3, #20]
 800d62c:	2b01      	cmp	r3, #1
 800d62e:	d106      	bne.n	800d63e <tcp_recv+0x26>
 800d630:	4b07      	ldr	r3, [pc, #28]	; (800d650 <tcp_recv+0x38>)
 800d632:	f240 72df 	movw	r2, #2015	; 0x7df
 800d636:	4907      	ldr	r1, [pc, #28]	; (800d654 <tcp_recv+0x3c>)
 800d638:	4807      	ldr	r0, [pc, #28]	; (800d658 <tcp_recv+0x40>)
 800d63a:	f007 fb3d 	bl	8014cb8 <iprintf>
    pcb->recv = recv;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	683a      	ldr	r2, [r7, #0]
 800d642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800d646:	bf00      	nop
 800d648:	3708      	adds	r7, #8
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}
 800d64e:	bf00      	nop
 800d650:	080168fc 	.word	0x080168fc
 800d654:	08016e98 	.word	0x08016e98
 800d658:	08016940 	.word	0x08016940

0800d65c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b082      	sub	sp, #8
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
 800d664:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d00e      	beq.n	800d68a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	7d1b      	ldrb	r3, [r3, #20]
 800d670:	2b01      	cmp	r3, #1
 800d672:	d106      	bne.n	800d682 <tcp_sent+0x26>
 800d674:	4b07      	ldr	r3, [pc, #28]	; (800d694 <tcp_sent+0x38>)
 800d676:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800d67a:	4907      	ldr	r1, [pc, #28]	; (800d698 <tcp_sent+0x3c>)
 800d67c:	4807      	ldr	r0, [pc, #28]	; (800d69c <tcp_sent+0x40>)
 800d67e:	f007 fb1b 	bl	8014cb8 <iprintf>
    pcb->sent = sent;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	683a      	ldr	r2, [r7, #0]
 800d686:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800d68a:	bf00      	nop
 800d68c:	3708      	adds	r7, #8
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}
 800d692:	bf00      	nop
 800d694:	080168fc 	.word	0x080168fc
 800d698:	08016ec0 	.word	0x08016ec0
 800d69c:	08016940 	.word	0x08016940

0800d6a0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b082      	sub	sp, #8
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d00e      	beq.n	800d6ce <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	7d1b      	ldrb	r3, [r3, #20]
 800d6b4:	2b01      	cmp	r3, #1
 800d6b6:	d106      	bne.n	800d6c6 <tcp_err+0x26>
 800d6b8:	4b07      	ldr	r3, [pc, #28]	; (800d6d8 <tcp_err+0x38>)
 800d6ba:	f640 020d 	movw	r2, #2061	; 0x80d
 800d6be:	4907      	ldr	r1, [pc, #28]	; (800d6dc <tcp_err+0x3c>)
 800d6c0:	4807      	ldr	r0, [pc, #28]	; (800d6e0 <tcp_err+0x40>)
 800d6c2:	f007 faf9 	bl	8014cb8 <iprintf>
    pcb->errf = err;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	683a      	ldr	r2, [r7, #0]
 800d6ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800d6ce:	bf00      	nop
 800d6d0:	3708      	adds	r7, #8
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}
 800d6d6:	bf00      	nop
 800d6d8:	080168fc 	.word	0x080168fc
 800d6dc:	08016ee8 	.word	0x08016ee8
 800d6e0:	08016940 	.word	0x08016940

0800d6e4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800d6e4:	b480      	push	{r7}
 800d6e6:	b085      	sub	sp, #20
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
 800d6ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d008      	beq.n	800d706 <tcp_accept+0x22>
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	7d1b      	ldrb	r3, [r3, #20]
 800d6f8:	2b01      	cmp	r3, #1
 800d6fa:	d104      	bne.n	800d706 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	683a      	ldr	r2, [r7, #0]
 800d704:	619a      	str	r2, [r3, #24]
  }
}
 800d706:	bf00      	nop
 800d708:	3714      	adds	r7, #20
 800d70a:	46bd      	mov	sp, r7
 800d70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d710:	4770      	bx	lr
	...

0800d714 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b084      	sub	sp, #16
 800d718:	af00      	add	r7, sp, #0
 800d71a:	60f8      	str	r0, [r7, #12]
 800d71c:	60b9      	str	r1, [r7, #8]
 800d71e:	4613      	mov	r3, r2
 800d720:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d107      	bne.n	800d738 <tcp_poll+0x24>
 800d728:	4b0e      	ldr	r3, [pc, #56]	; (800d764 <tcp_poll+0x50>)
 800d72a:	f640 023d 	movw	r2, #2109	; 0x83d
 800d72e:	490e      	ldr	r1, [pc, #56]	; (800d768 <tcp_poll+0x54>)
 800d730:	480e      	ldr	r0, [pc, #56]	; (800d76c <tcp_poll+0x58>)
 800d732:	f007 fac1 	bl	8014cb8 <iprintf>
 800d736:	e011      	b.n	800d75c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	7d1b      	ldrb	r3, [r3, #20]
 800d73c:	2b01      	cmp	r3, #1
 800d73e:	d106      	bne.n	800d74e <tcp_poll+0x3a>
 800d740:	4b08      	ldr	r3, [pc, #32]	; (800d764 <tcp_poll+0x50>)
 800d742:	f640 023e 	movw	r2, #2110	; 0x83e
 800d746:	490a      	ldr	r1, [pc, #40]	; (800d770 <tcp_poll+0x5c>)
 800d748:	4808      	ldr	r0, [pc, #32]	; (800d76c <tcp_poll+0x58>)
 800d74a:	f007 fab5 	bl	8014cb8 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	68ba      	ldr	r2, [r7, #8]
 800d752:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	79fa      	ldrb	r2, [r7, #7]
 800d75a:	775a      	strb	r2, [r3, #29]
}
 800d75c:	3710      	adds	r7, #16
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}
 800d762:	bf00      	nop
 800d764:	080168fc 	.word	0x080168fc
 800d768:	08016f10 	.word	0x08016f10
 800d76c:	08016940 	.word	0x08016940
 800d770:	08016f28 	.word	0x08016f28

0800d774 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b082      	sub	sp, #8
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d107      	bne.n	800d792 <tcp_pcb_purge+0x1e>
 800d782:	4b21      	ldr	r3, [pc, #132]	; (800d808 <tcp_pcb_purge+0x94>)
 800d784:	f640 0251 	movw	r2, #2129	; 0x851
 800d788:	4920      	ldr	r1, [pc, #128]	; (800d80c <tcp_pcb_purge+0x98>)
 800d78a:	4821      	ldr	r0, [pc, #132]	; (800d810 <tcp_pcb_purge+0x9c>)
 800d78c:	f007 fa94 	bl	8014cb8 <iprintf>
 800d790:	e037      	b.n	800d802 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	7d1b      	ldrb	r3, [r3, #20]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d033      	beq.n	800d802 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d79e:	2b0a      	cmp	r3, #10
 800d7a0:	d02f      	beq.n	800d802 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d7a6:	2b01      	cmp	r3, #1
 800d7a8:	d02b      	beq.n	800d802 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d007      	beq.n	800d7c2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f7fe f8cc 	bl	800b954 <pbuf_free>
      pcb->refused_data = NULL;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2200      	movs	r2, #0
 800d7c0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d002      	beq.n	800d7d0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f000 f986 	bl	800dadc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d7d6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f7ff fce1 	bl	800d1a4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	f7ff fcdc 	bl	800d1a4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	66da      	str	r2, [r3, #108]	; 0x6c
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d802:	3708      	adds	r7, #8
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}
 800d808:	080168fc 	.word	0x080168fc
 800d80c:	08016f48 	.word	0x08016f48
 800d810:	08016940 	.word	0x08016940

0800d814 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b084      	sub	sp, #16
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
 800d81c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d106      	bne.n	800d832 <tcp_pcb_remove+0x1e>
 800d824:	4b3e      	ldr	r3, [pc, #248]	; (800d920 <tcp_pcb_remove+0x10c>)
 800d826:	f640 0283 	movw	r2, #2179	; 0x883
 800d82a:	493e      	ldr	r1, [pc, #248]	; (800d924 <tcp_pcb_remove+0x110>)
 800d82c:	483e      	ldr	r0, [pc, #248]	; (800d928 <tcp_pcb_remove+0x114>)
 800d82e:	f007 fa43 	bl	8014cb8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d106      	bne.n	800d846 <tcp_pcb_remove+0x32>
 800d838:	4b39      	ldr	r3, [pc, #228]	; (800d920 <tcp_pcb_remove+0x10c>)
 800d83a:	f640 0284 	movw	r2, #2180	; 0x884
 800d83e:	493b      	ldr	r1, [pc, #236]	; (800d92c <tcp_pcb_remove+0x118>)
 800d840:	4839      	ldr	r0, [pc, #228]	; (800d928 <tcp_pcb_remove+0x114>)
 800d842:	f007 fa39 	bl	8014cb8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	683a      	ldr	r2, [r7, #0]
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d105      	bne.n	800d85c <tcp_pcb_remove+0x48>
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	68da      	ldr	r2, [r3, #12]
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	601a      	str	r2, [r3, #0]
 800d85a:	e013      	b.n	800d884 <tcp_pcb_remove+0x70>
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	60fb      	str	r3, [r7, #12]
 800d862:	e00c      	b.n	800d87e <tcp_pcb_remove+0x6a>
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	68db      	ldr	r3, [r3, #12]
 800d868:	683a      	ldr	r2, [r7, #0]
 800d86a:	429a      	cmp	r2, r3
 800d86c:	d104      	bne.n	800d878 <tcp_pcb_remove+0x64>
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	68da      	ldr	r2, [r3, #12]
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	60da      	str	r2, [r3, #12]
 800d876:	e005      	b.n	800d884 <tcp_pcb_remove+0x70>
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	68db      	ldr	r3, [r3, #12]
 800d87c:	60fb      	str	r3, [r7, #12]
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d1ef      	bne.n	800d864 <tcp_pcb_remove+0x50>
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	2200      	movs	r2, #0
 800d888:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d88a:	6838      	ldr	r0, [r7, #0]
 800d88c:	f7ff ff72 	bl	800d774 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	7d1b      	ldrb	r3, [r3, #20]
 800d894:	2b0a      	cmp	r3, #10
 800d896:	d013      	beq.n	800d8c0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d89c:	2b01      	cmp	r3, #1
 800d89e:	d00f      	beq.n	800d8c0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	8b5b      	ldrh	r3, [r3, #26]
 800d8a4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d009      	beq.n	800d8c0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	8b5b      	ldrh	r3, [r3, #26]
 800d8b0:	f043 0302 	orr.w	r3, r3, #2
 800d8b4:	b29a      	uxth	r2, r3
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d8ba:	6838      	ldr	r0, [r7, #0]
 800d8bc:	f003 fbc2 	bl	8011044 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	7d1b      	ldrb	r3, [r3, #20]
 800d8c4:	2b01      	cmp	r3, #1
 800d8c6:	d020      	beq.n	800d90a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d006      	beq.n	800d8de <tcp_pcb_remove+0xca>
 800d8d0:	4b13      	ldr	r3, [pc, #76]	; (800d920 <tcp_pcb_remove+0x10c>)
 800d8d2:	f640 0293 	movw	r2, #2195	; 0x893
 800d8d6:	4916      	ldr	r1, [pc, #88]	; (800d930 <tcp_pcb_remove+0x11c>)
 800d8d8:	4813      	ldr	r0, [pc, #76]	; (800d928 <tcp_pcb_remove+0x114>)
 800d8da:	f007 f9ed 	bl	8014cb8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d006      	beq.n	800d8f4 <tcp_pcb_remove+0xe0>
 800d8e6:	4b0e      	ldr	r3, [pc, #56]	; (800d920 <tcp_pcb_remove+0x10c>)
 800d8e8:	f640 0294 	movw	r2, #2196	; 0x894
 800d8ec:	4911      	ldr	r1, [pc, #68]	; (800d934 <tcp_pcb_remove+0x120>)
 800d8ee:	480e      	ldr	r0, [pc, #56]	; (800d928 <tcp_pcb_remove+0x114>)
 800d8f0:	f007 f9e2 	bl	8014cb8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d006      	beq.n	800d90a <tcp_pcb_remove+0xf6>
 800d8fc:	4b08      	ldr	r3, [pc, #32]	; (800d920 <tcp_pcb_remove+0x10c>)
 800d8fe:	f640 0296 	movw	r2, #2198	; 0x896
 800d902:	490d      	ldr	r1, [pc, #52]	; (800d938 <tcp_pcb_remove+0x124>)
 800d904:	4808      	ldr	r0, [pc, #32]	; (800d928 <tcp_pcb_remove+0x114>)
 800d906:	f007 f9d7 	bl	8014cb8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	2200      	movs	r2, #0
 800d90e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	2200      	movs	r2, #0
 800d914:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d916:	bf00      	nop
 800d918:	3710      	adds	r7, #16
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}
 800d91e:	bf00      	nop
 800d920:	080168fc 	.word	0x080168fc
 800d924:	08016f64 	.word	0x08016f64
 800d928:	08016940 	.word	0x08016940
 800d92c:	08016f80 	.word	0x08016f80
 800d930:	08016fa0 	.word	0x08016fa0
 800d934:	08016fb8 	.word	0x08016fb8
 800d938:	08016fd4 	.word	0x08016fd4

0800d93c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b082      	sub	sp, #8
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d106      	bne.n	800d958 <tcp_next_iss+0x1c>
 800d94a:	4b0a      	ldr	r3, [pc, #40]	; (800d974 <tcp_next_iss+0x38>)
 800d94c:	f640 02af 	movw	r2, #2223	; 0x8af
 800d950:	4909      	ldr	r1, [pc, #36]	; (800d978 <tcp_next_iss+0x3c>)
 800d952:	480a      	ldr	r0, [pc, #40]	; (800d97c <tcp_next_iss+0x40>)
 800d954:	f007 f9b0 	bl	8014cb8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d958:	4b09      	ldr	r3, [pc, #36]	; (800d980 <tcp_next_iss+0x44>)
 800d95a:	681a      	ldr	r2, [r3, #0]
 800d95c:	4b09      	ldr	r3, [pc, #36]	; (800d984 <tcp_next_iss+0x48>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	4413      	add	r3, r2
 800d962:	4a07      	ldr	r2, [pc, #28]	; (800d980 <tcp_next_iss+0x44>)
 800d964:	6013      	str	r3, [r2, #0]
  return iss;
 800d966:	4b06      	ldr	r3, [pc, #24]	; (800d980 <tcp_next_iss+0x44>)
 800d968:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	3708      	adds	r7, #8
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}
 800d972:	bf00      	nop
 800d974:	080168fc 	.word	0x080168fc
 800d978:	08016fec 	.word	0x08016fec
 800d97c:	08016940 	.word	0x08016940
 800d980:	24000030 	.word	0x24000030
 800d984:	24003618 	.word	0x24003618

0800d988 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b086      	sub	sp, #24
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	4603      	mov	r3, r0
 800d990:	60b9      	str	r1, [r7, #8]
 800d992:	607a      	str	r2, [r7, #4]
 800d994:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d106      	bne.n	800d9aa <tcp_eff_send_mss_netif+0x22>
 800d99c:	4b14      	ldr	r3, [pc, #80]	; (800d9f0 <tcp_eff_send_mss_netif+0x68>)
 800d99e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800d9a2:	4914      	ldr	r1, [pc, #80]	; (800d9f4 <tcp_eff_send_mss_netif+0x6c>)
 800d9a4:	4814      	ldr	r0, [pc, #80]	; (800d9f8 <tcp_eff_send_mss_netif+0x70>)
 800d9a6:	f007 f987 	bl	8014cb8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d101      	bne.n	800d9b4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d9b0:	89fb      	ldrh	r3, [r7, #14]
 800d9b2:	e019      	b.n	800d9e8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d9b8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d9ba:	8afb      	ldrh	r3, [r7, #22]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d012      	beq.n	800d9e6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d9c0:	2328      	movs	r3, #40	; 0x28
 800d9c2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d9c4:	8afa      	ldrh	r2, [r7, #22]
 800d9c6:	8abb      	ldrh	r3, [r7, #20]
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d904      	bls.n	800d9d6 <tcp_eff_send_mss_netif+0x4e>
 800d9cc:	8afa      	ldrh	r2, [r7, #22]
 800d9ce:	8abb      	ldrh	r3, [r7, #20]
 800d9d0:	1ad3      	subs	r3, r2, r3
 800d9d2:	b29b      	uxth	r3, r3
 800d9d4:	e000      	b.n	800d9d8 <tcp_eff_send_mss_netif+0x50>
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d9da:	8a7a      	ldrh	r2, [r7, #18]
 800d9dc:	89fb      	ldrh	r3, [r7, #14]
 800d9de:	4293      	cmp	r3, r2
 800d9e0:	bf28      	it	cs
 800d9e2:	4613      	movcs	r3, r2
 800d9e4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d9e6:	89fb      	ldrh	r3, [r7, #14]
}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3718      	adds	r7, #24
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}
 800d9f0:	080168fc 	.word	0x080168fc
 800d9f4:	08017008 	.word	0x08017008
 800d9f8:	08016940 	.word	0x08016940

0800d9fc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b084      	sub	sp, #16
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d119      	bne.n	800da44 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800da10:	4b10      	ldr	r3, [pc, #64]	; (800da54 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800da12:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800da16:	4910      	ldr	r1, [pc, #64]	; (800da58 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800da18:	4810      	ldr	r0, [pc, #64]	; (800da5c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800da1a:	f007 f94d 	bl	8014cb8 <iprintf>

  while (pcb != NULL) {
 800da1e:	e011      	b.n	800da44 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	681a      	ldr	r2, [r3, #0]
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	429a      	cmp	r2, r3
 800da2a:	d108      	bne.n	800da3e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	68db      	ldr	r3, [r3, #12]
 800da30:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800da32:	68f8      	ldr	r0, [r7, #12]
 800da34:	f7fe fd26 	bl	800c484 <tcp_abort>
      pcb = next;
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	60fb      	str	r3, [r7, #12]
 800da3c:	e002      	b.n	800da44 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	68db      	ldr	r3, [r3, #12]
 800da42:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d1ea      	bne.n	800da20 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800da4a:	bf00      	nop
 800da4c:	bf00      	nop
 800da4e:	3710      	adds	r7, #16
 800da50:	46bd      	mov	sp, r7
 800da52:	bd80      	pop	{r7, pc}
 800da54:	080168fc 	.word	0x080168fc
 800da58:	08017030 	.word	0x08017030
 800da5c:	08016940 	.word	0x08016940

0800da60 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b084      	sub	sp, #16
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
 800da68:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d02a      	beq.n	800dac6 <tcp_netif_ip_addr_changed+0x66>
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d026      	beq.n	800dac6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800da78:	4b15      	ldr	r3, [pc, #84]	; (800dad0 <tcp_netif_ip_addr_changed+0x70>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	4619      	mov	r1, r3
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f7ff ffbc 	bl	800d9fc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800da84:	4b13      	ldr	r3, [pc, #76]	; (800dad4 <tcp_netif_ip_addr_changed+0x74>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	4619      	mov	r1, r3
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f7ff ffb6 	bl	800d9fc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d017      	beq.n	800dac6 <tcp_netif_ip_addr_changed+0x66>
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d013      	beq.n	800dac6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800da9e:	4b0e      	ldr	r3, [pc, #56]	; (800dad8 <tcp_netif_ip_addr_changed+0x78>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	60fb      	str	r3, [r7, #12]
 800daa4:	e00c      	b.n	800dac0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	681a      	ldr	r2, [r3, #0]
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	429a      	cmp	r2, r3
 800dab0:	d103      	bne.n	800daba <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	681a      	ldr	r2, [r3, #0]
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	68db      	ldr	r3, [r3, #12]
 800dabe:	60fb      	str	r3, [r7, #12]
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d1ef      	bne.n	800daa6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800dac6:	bf00      	nop
 800dac8:	3710      	adds	r7, #16
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}
 800dace:	bf00      	nop
 800dad0:	24003614 	.word	0x24003614
 800dad4:	24003620 	.word	0x24003620
 800dad8:	2400361c 	.word	0x2400361c

0800dadc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b082      	sub	sp, #8
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d007      	beq.n	800dafc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800daf0:	4618      	mov	r0, r3
 800daf2:	f7ff fb57 	bl	800d1a4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	2200      	movs	r2, #0
 800dafa:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800dafc:	bf00      	nop
 800dafe:	3708      	adds	r7, #8
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}

0800db04 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800db04:	b590      	push	{r4, r7, lr}
 800db06:	b08d      	sub	sp, #52	; 0x34
 800db08:	af04      	add	r7, sp, #16
 800db0a:	6078      	str	r0, [r7, #4]
 800db0c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d105      	bne.n	800db20 <tcp_input+0x1c>
 800db14:	4b9b      	ldr	r3, [pc, #620]	; (800dd84 <tcp_input+0x280>)
 800db16:	2283      	movs	r2, #131	; 0x83
 800db18:	499b      	ldr	r1, [pc, #620]	; (800dd88 <tcp_input+0x284>)
 800db1a:	489c      	ldr	r0, [pc, #624]	; (800dd8c <tcp_input+0x288>)
 800db1c:	f007 f8cc 	bl	8014cb8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	685b      	ldr	r3, [r3, #4]
 800db24:	4a9a      	ldr	r2, [pc, #616]	; (800dd90 <tcp_input+0x28c>)
 800db26:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	895b      	ldrh	r3, [r3, #10]
 800db2c:	2b13      	cmp	r3, #19
 800db2e:	f240 83c4 	bls.w	800e2ba <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800db32:	4b98      	ldr	r3, [pc, #608]	; (800dd94 <tcp_input+0x290>)
 800db34:	695b      	ldr	r3, [r3, #20]
 800db36:	4a97      	ldr	r2, [pc, #604]	; (800dd94 <tcp_input+0x290>)
 800db38:	6812      	ldr	r2, [r2, #0]
 800db3a:	4611      	mov	r1, r2
 800db3c:	4618      	mov	r0, r3
 800db3e:	f006 f891 	bl	8013c64 <ip4_addr_isbroadcast_u32>
 800db42:	4603      	mov	r3, r0
 800db44:	2b00      	cmp	r3, #0
 800db46:	f040 83ba 	bne.w	800e2be <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800db4a:	4b92      	ldr	r3, [pc, #584]	; (800dd94 <tcp_input+0x290>)
 800db4c:	695b      	ldr	r3, [r3, #20]
 800db4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800db52:	2be0      	cmp	r3, #224	; 0xe0
 800db54:	f000 83b3 	beq.w	800e2be <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800db58:	4b8d      	ldr	r3, [pc, #564]	; (800dd90 <tcp_input+0x28c>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	899b      	ldrh	r3, [r3, #12]
 800db5e:	b29b      	uxth	r3, r3
 800db60:	4618      	mov	r0, r3
 800db62:	f7fc fae1 	bl	800a128 <lwip_htons>
 800db66:	4603      	mov	r3, r0
 800db68:	0b1b      	lsrs	r3, r3, #12
 800db6a:	b29b      	uxth	r3, r3
 800db6c:	b2db      	uxtb	r3, r3
 800db6e:	009b      	lsls	r3, r3, #2
 800db70:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800db72:	7cbb      	ldrb	r3, [r7, #18]
 800db74:	2b13      	cmp	r3, #19
 800db76:	f240 83a4 	bls.w	800e2c2 <tcp_input+0x7be>
 800db7a:	7cbb      	ldrb	r3, [r7, #18]
 800db7c:	b29a      	uxth	r2, r3
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	891b      	ldrh	r3, [r3, #8]
 800db82:	429a      	cmp	r2, r3
 800db84:	f200 839d 	bhi.w	800e2c2 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800db88:	7cbb      	ldrb	r3, [r7, #18]
 800db8a:	b29b      	uxth	r3, r3
 800db8c:	3b14      	subs	r3, #20
 800db8e:	b29a      	uxth	r2, r3
 800db90:	4b81      	ldr	r3, [pc, #516]	; (800dd98 <tcp_input+0x294>)
 800db92:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800db94:	4b81      	ldr	r3, [pc, #516]	; (800dd9c <tcp_input+0x298>)
 800db96:	2200      	movs	r2, #0
 800db98:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	895a      	ldrh	r2, [r3, #10]
 800db9e:	7cbb      	ldrb	r3, [r7, #18]
 800dba0:	b29b      	uxth	r3, r3
 800dba2:	429a      	cmp	r2, r3
 800dba4:	d309      	bcc.n	800dbba <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800dba6:	4b7c      	ldr	r3, [pc, #496]	; (800dd98 <tcp_input+0x294>)
 800dba8:	881a      	ldrh	r2, [r3, #0]
 800dbaa:	4b7d      	ldr	r3, [pc, #500]	; (800dda0 <tcp_input+0x29c>)
 800dbac:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800dbae:	7cbb      	ldrb	r3, [r7, #18]
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f7fd fe48 	bl	800b848 <pbuf_remove_header>
 800dbb8:	e04e      	b.n	800dc58 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d105      	bne.n	800dbce <tcp_input+0xca>
 800dbc2:	4b70      	ldr	r3, [pc, #448]	; (800dd84 <tcp_input+0x280>)
 800dbc4:	22c2      	movs	r2, #194	; 0xc2
 800dbc6:	4977      	ldr	r1, [pc, #476]	; (800dda4 <tcp_input+0x2a0>)
 800dbc8:	4870      	ldr	r0, [pc, #448]	; (800dd8c <tcp_input+0x288>)
 800dbca:	f007 f875 	bl	8014cb8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800dbce:	2114      	movs	r1, #20
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f7fd fe39 	bl	800b848 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	895a      	ldrh	r2, [r3, #10]
 800dbda:	4b71      	ldr	r3, [pc, #452]	; (800dda0 <tcp_input+0x29c>)
 800dbdc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800dbde:	4b6e      	ldr	r3, [pc, #440]	; (800dd98 <tcp_input+0x294>)
 800dbe0:	881a      	ldrh	r2, [r3, #0]
 800dbe2:	4b6f      	ldr	r3, [pc, #444]	; (800dda0 <tcp_input+0x29c>)
 800dbe4:	881b      	ldrh	r3, [r3, #0]
 800dbe6:	1ad3      	subs	r3, r2, r3
 800dbe8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800dbea:	4b6d      	ldr	r3, [pc, #436]	; (800dda0 <tcp_input+0x29c>)
 800dbec:	881b      	ldrh	r3, [r3, #0]
 800dbee:	4619      	mov	r1, r3
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f7fd fe29 	bl	800b848 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	895b      	ldrh	r3, [r3, #10]
 800dbfc:	8a3a      	ldrh	r2, [r7, #16]
 800dbfe:	429a      	cmp	r2, r3
 800dc00:	f200 8361 	bhi.w	800e2c6 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	685b      	ldr	r3, [r3, #4]
 800dc0a:	4a64      	ldr	r2, [pc, #400]	; (800dd9c <tcp_input+0x298>)
 800dc0c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	8a3a      	ldrh	r2, [r7, #16]
 800dc14:	4611      	mov	r1, r2
 800dc16:	4618      	mov	r0, r3
 800dc18:	f7fd fe16 	bl	800b848 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	891a      	ldrh	r2, [r3, #8]
 800dc20:	8a3b      	ldrh	r3, [r7, #16]
 800dc22:	1ad3      	subs	r3, r2, r3
 800dc24:	b29a      	uxth	r2, r3
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	895b      	ldrh	r3, [r3, #10]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d005      	beq.n	800dc3e <tcp_input+0x13a>
 800dc32:	4b54      	ldr	r3, [pc, #336]	; (800dd84 <tcp_input+0x280>)
 800dc34:	22df      	movs	r2, #223	; 0xdf
 800dc36:	495c      	ldr	r1, [pc, #368]	; (800dda8 <tcp_input+0x2a4>)
 800dc38:	4854      	ldr	r0, [pc, #336]	; (800dd8c <tcp_input+0x288>)
 800dc3a:	f007 f83d 	bl	8014cb8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	891a      	ldrh	r2, [r3, #8]
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	891b      	ldrh	r3, [r3, #8]
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d005      	beq.n	800dc58 <tcp_input+0x154>
 800dc4c:	4b4d      	ldr	r3, [pc, #308]	; (800dd84 <tcp_input+0x280>)
 800dc4e:	22e0      	movs	r2, #224	; 0xe0
 800dc50:	4956      	ldr	r1, [pc, #344]	; (800ddac <tcp_input+0x2a8>)
 800dc52:	484e      	ldr	r0, [pc, #312]	; (800dd8c <tcp_input+0x288>)
 800dc54:	f007 f830 	bl	8014cb8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800dc58:	4b4d      	ldr	r3, [pc, #308]	; (800dd90 <tcp_input+0x28c>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	881b      	ldrh	r3, [r3, #0]
 800dc5e:	b29b      	uxth	r3, r3
 800dc60:	4a4b      	ldr	r2, [pc, #300]	; (800dd90 <tcp_input+0x28c>)
 800dc62:	6814      	ldr	r4, [r2, #0]
 800dc64:	4618      	mov	r0, r3
 800dc66:	f7fc fa5f 	bl	800a128 <lwip_htons>
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800dc6e:	4b48      	ldr	r3, [pc, #288]	; (800dd90 <tcp_input+0x28c>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	885b      	ldrh	r3, [r3, #2]
 800dc74:	b29b      	uxth	r3, r3
 800dc76:	4a46      	ldr	r2, [pc, #280]	; (800dd90 <tcp_input+0x28c>)
 800dc78:	6814      	ldr	r4, [r2, #0]
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f7fc fa54 	bl	800a128 <lwip_htons>
 800dc80:	4603      	mov	r3, r0
 800dc82:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800dc84:	4b42      	ldr	r3, [pc, #264]	; (800dd90 <tcp_input+0x28c>)
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	685b      	ldr	r3, [r3, #4]
 800dc8a:	4a41      	ldr	r2, [pc, #260]	; (800dd90 <tcp_input+0x28c>)
 800dc8c:	6814      	ldr	r4, [r2, #0]
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f7fc fa5f 	bl	800a152 <lwip_htonl>
 800dc94:	4603      	mov	r3, r0
 800dc96:	6063      	str	r3, [r4, #4]
 800dc98:	6863      	ldr	r3, [r4, #4]
 800dc9a:	4a45      	ldr	r2, [pc, #276]	; (800ddb0 <tcp_input+0x2ac>)
 800dc9c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800dc9e:	4b3c      	ldr	r3, [pc, #240]	; (800dd90 <tcp_input+0x28c>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	689b      	ldr	r3, [r3, #8]
 800dca4:	4a3a      	ldr	r2, [pc, #232]	; (800dd90 <tcp_input+0x28c>)
 800dca6:	6814      	ldr	r4, [r2, #0]
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f7fc fa52 	bl	800a152 <lwip_htonl>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	60a3      	str	r3, [r4, #8]
 800dcb2:	68a3      	ldr	r3, [r4, #8]
 800dcb4:	4a3f      	ldr	r2, [pc, #252]	; (800ddb4 <tcp_input+0x2b0>)
 800dcb6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800dcb8:	4b35      	ldr	r3, [pc, #212]	; (800dd90 <tcp_input+0x28c>)
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	89db      	ldrh	r3, [r3, #14]
 800dcbe:	b29b      	uxth	r3, r3
 800dcc0:	4a33      	ldr	r2, [pc, #204]	; (800dd90 <tcp_input+0x28c>)
 800dcc2:	6814      	ldr	r4, [r2, #0]
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f7fc fa2f 	bl	800a128 <lwip_htons>
 800dcca:	4603      	mov	r3, r0
 800dccc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800dcce:	4b30      	ldr	r3, [pc, #192]	; (800dd90 <tcp_input+0x28c>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	899b      	ldrh	r3, [r3, #12]
 800dcd4:	b29b      	uxth	r3, r3
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f7fc fa26 	bl	800a128 <lwip_htons>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	b2db      	uxtb	r3, r3
 800dce0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dce4:	b2da      	uxtb	r2, r3
 800dce6:	4b34      	ldr	r3, [pc, #208]	; (800ddb8 <tcp_input+0x2b4>)
 800dce8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	891a      	ldrh	r2, [r3, #8]
 800dcee:	4b33      	ldr	r3, [pc, #204]	; (800ddbc <tcp_input+0x2b8>)
 800dcf0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800dcf2:	4b31      	ldr	r3, [pc, #196]	; (800ddb8 <tcp_input+0x2b4>)
 800dcf4:	781b      	ldrb	r3, [r3, #0]
 800dcf6:	f003 0303 	and.w	r3, r3, #3
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d00c      	beq.n	800dd18 <tcp_input+0x214>
    tcplen++;
 800dcfe:	4b2f      	ldr	r3, [pc, #188]	; (800ddbc <tcp_input+0x2b8>)
 800dd00:	881b      	ldrh	r3, [r3, #0]
 800dd02:	3301      	adds	r3, #1
 800dd04:	b29a      	uxth	r2, r3
 800dd06:	4b2d      	ldr	r3, [pc, #180]	; (800ddbc <tcp_input+0x2b8>)
 800dd08:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	891a      	ldrh	r2, [r3, #8]
 800dd0e:	4b2b      	ldr	r3, [pc, #172]	; (800ddbc <tcp_input+0x2b8>)
 800dd10:	881b      	ldrh	r3, [r3, #0]
 800dd12:	429a      	cmp	r2, r3
 800dd14:	f200 82d9 	bhi.w	800e2ca <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800dd18:	2300      	movs	r3, #0
 800dd1a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd1c:	4b28      	ldr	r3, [pc, #160]	; (800ddc0 <tcp_input+0x2bc>)
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	61fb      	str	r3, [r7, #28]
 800dd22:	e09d      	b.n	800de60 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800dd24:	69fb      	ldr	r3, [r7, #28]
 800dd26:	7d1b      	ldrb	r3, [r3, #20]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d105      	bne.n	800dd38 <tcp_input+0x234>
 800dd2c:	4b15      	ldr	r3, [pc, #84]	; (800dd84 <tcp_input+0x280>)
 800dd2e:	22fb      	movs	r2, #251	; 0xfb
 800dd30:	4924      	ldr	r1, [pc, #144]	; (800ddc4 <tcp_input+0x2c0>)
 800dd32:	4816      	ldr	r0, [pc, #88]	; (800dd8c <tcp_input+0x288>)
 800dd34:	f006 ffc0 	bl	8014cb8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800dd38:	69fb      	ldr	r3, [r7, #28]
 800dd3a:	7d1b      	ldrb	r3, [r3, #20]
 800dd3c:	2b0a      	cmp	r3, #10
 800dd3e:	d105      	bne.n	800dd4c <tcp_input+0x248>
 800dd40:	4b10      	ldr	r3, [pc, #64]	; (800dd84 <tcp_input+0x280>)
 800dd42:	22fc      	movs	r2, #252	; 0xfc
 800dd44:	4920      	ldr	r1, [pc, #128]	; (800ddc8 <tcp_input+0x2c4>)
 800dd46:	4811      	ldr	r0, [pc, #68]	; (800dd8c <tcp_input+0x288>)
 800dd48:	f006 ffb6 	bl	8014cb8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800dd4c:	69fb      	ldr	r3, [r7, #28]
 800dd4e:	7d1b      	ldrb	r3, [r3, #20]
 800dd50:	2b01      	cmp	r3, #1
 800dd52:	d105      	bne.n	800dd60 <tcp_input+0x25c>
 800dd54:	4b0b      	ldr	r3, [pc, #44]	; (800dd84 <tcp_input+0x280>)
 800dd56:	22fd      	movs	r2, #253	; 0xfd
 800dd58:	491c      	ldr	r1, [pc, #112]	; (800ddcc <tcp_input+0x2c8>)
 800dd5a:	480c      	ldr	r0, [pc, #48]	; (800dd8c <tcp_input+0x288>)
 800dd5c:	f006 ffac 	bl	8014cb8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dd60:	69fb      	ldr	r3, [r7, #28]
 800dd62:	7a1b      	ldrb	r3, [r3, #8]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d033      	beq.n	800ddd0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dd68:	69fb      	ldr	r3, [r7, #28]
 800dd6a:	7a1a      	ldrb	r2, [r3, #8]
 800dd6c:	4b09      	ldr	r3, [pc, #36]	; (800dd94 <tcp_input+0x290>)
 800dd6e:	685b      	ldr	r3, [r3, #4]
 800dd70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dd74:	3301      	adds	r3, #1
 800dd76:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dd78:	429a      	cmp	r2, r3
 800dd7a:	d029      	beq.n	800ddd0 <tcp_input+0x2cc>
      prev = pcb;
 800dd7c:	69fb      	ldr	r3, [r7, #28]
 800dd7e:	61bb      	str	r3, [r7, #24]
      continue;
 800dd80:	e06b      	b.n	800de5a <tcp_input+0x356>
 800dd82:	bf00      	nop
 800dd84:	08017064 	.word	0x08017064
 800dd88:	08017098 	.word	0x08017098
 800dd8c:	080170b0 	.word	0x080170b0
 800dd90:	24000104 	.word	0x24000104
 800dd94:	24000724 	.word	0x24000724
 800dd98:	24000108 	.word	0x24000108
 800dd9c:	2400010c 	.word	0x2400010c
 800dda0:	2400010a 	.word	0x2400010a
 800dda4:	080170d8 	.word	0x080170d8
 800dda8:	080170e8 	.word	0x080170e8
 800ddac:	080170f4 	.word	0x080170f4
 800ddb0:	24000114 	.word	0x24000114
 800ddb4:	24000118 	.word	0x24000118
 800ddb8:	24000120 	.word	0x24000120
 800ddbc:	2400011e 	.word	0x2400011e
 800ddc0:	24003614 	.word	0x24003614
 800ddc4:	08017114 	.word	0x08017114
 800ddc8:	0801713c 	.word	0x0801713c
 800ddcc:	08017168 	.word	0x08017168
    }

    if (pcb->remote_port == tcphdr->src &&
 800ddd0:	69fb      	ldr	r3, [r7, #28]
 800ddd2:	8b1a      	ldrh	r2, [r3, #24]
 800ddd4:	4b94      	ldr	r3, [pc, #592]	; (800e028 <tcp_input+0x524>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	881b      	ldrh	r3, [r3, #0]
 800ddda:	b29b      	uxth	r3, r3
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d13a      	bne.n	800de56 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800dde0:	69fb      	ldr	r3, [r7, #28]
 800dde2:	8ada      	ldrh	r2, [r3, #22]
 800dde4:	4b90      	ldr	r3, [pc, #576]	; (800e028 <tcp_input+0x524>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	885b      	ldrh	r3, [r3, #2]
 800ddea:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ddec:	429a      	cmp	r2, r3
 800ddee:	d132      	bne.n	800de56 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ddf0:	69fb      	ldr	r3, [r7, #28]
 800ddf2:	685a      	ldr	r2, [r3, #4]
 800ddf4:	4b8d      	ldr	r3, [pc, #564]	; (800e02c <tcp_input+0x528>)
 800ddf6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d12c      	bne.n	800de56 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ddfc:	69fb      	ldr	r3, [r7, #28]
 800ddfe:	681a      	ldr	r2, [r3, #0]
 800de00:	4b8a      	ldr	r3, [pc, #552]	; (800e02c <tcp_input+0x528>)
 800de02:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800de04:	429a      	cmp	r2, r3
 800de06:	d126      	bne.n	800de56 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800de08:	69fb      	ldr	r3, [r7, #28]
 800de0a:	68db      	ldr	r3, [r3, #12]
 800de0c:	69fa      	ldr	r2, [r7, #28]
 800de0e:	429a      	cmp	r2, r3
 800de10:	d106      	bne.n	800de20 <tcp_input+0x31c>
 800de12:	4b87      	ldr	r3, [pc, #540]	; (800e030 <tcp_input+0x52c>)
 800de14:	f240 120d 	movw	r2, #269	; 0x10d
 800de18:	4986      	ldr	r1, [pc, #536]	; (800e034 <tcp_input+0x530>)
 800de1a:	4887      	ldr	r0, [pc, #540]	; (800e038 <tcp_input+0x534>)
 800de1c:	f006 ff4c 	bl	8014cb8 <iprintf>
      if (prev != NULL) {
 800de20:	69bb      	ldr	r3, [r7, #24]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d00a      	beq.n	800de3c <tcp_input+0x338>
        prev->next = pcb->next;
 800de26:	69fb      	ldr	r3, [r7, #28]
 800de28:	68da      	ldr	r2, [r3, #12]
 800de2a:	69bb      	ldr	r3, [r7, #24]
 800de2c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800de2e:	4b83      	ldr	r3, [pc, #524]	; (800e03c <tcp_input+0x538>)
 800de30:	681a      	ldr	r2, [r3, #0]
 800de32:	69fb      	ldr	r3, [r7, #28]
 800de34:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800de36:	4a81      	ldr	r2, [pc, #516]	; (800e03c <tcp_input+0x538>)
 800de38:	69fb      	ldr	r3, [r7, #28]
 800de3a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800de3c:	69fb      	ldr	r3, [r7, #28]
 800de3e:	68db      	ldr	r3, [r3, #12]
 800de40:	69fa      	ldr	r2, [r7, #28]
 800de42:	429a      	cmp	r2, r3
 800de44:	d111      	bne.n	800de6a <tcp_input+0x366>
 800de46:	4b7a      	ldr	r3, [pc, #488]	; (800e030 <tcp_input+0x52c>)
 800de48:	f240 1215 	movw	r2, #277	; 0x115
 800de4c:	497c      	ldr	r1, [pc, #496]	; (800e040 <tcp_input+0x53c>)
 800de4e:	487a      	ldr	r0, [pc, #488]	; (800e038 <tcp_input+0x534>)
 800de50:	f006 ff32 	bl	8014cb8 <iprintf>
      break;
 800de54:	e009      	b.n	800de6a <tcp_input+0x366>
    }
    prev = pcb;
 800de56:	69fb      	ldr	r3, [r7, #28]
 800de58:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800de5a:	69fb      	ldr	r3, [r7, #28]
 800de5c:	68db      	ldr	r3, [r3, #12]
 800de5e:	61fb      	str	r3, [r7, #28]
 800de60:	69fb      	ldr	r3, [r7, #28]
 800de62:	2b00      	cmp	r3, #0
 800de64:	f47f af5e 	bne.w	800dd24 <tcp_input+0x220>
 800de68:	e000      	b.n	800de6c <tcp_input+0x368>
      break;
 800de6a:	bf00      	nop
  }

  if (pcb == NULL) {
 800de6c:	69fb      	ldr	r3, [r7, #28]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	f040 8095 	bne.w	800df9e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800de74:	4b73      	ldr	r3, [pc, #460]	; (800e044 <tcp_input+0x540>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	61fb      	str	r3, [r7, #28]
 800de7a:	e03f      	b.n	800defc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800de7c:	69fb      	ldr	r3, [r7, #28]
 800de7e:	7d1b      	ldrb	r3, [r3, #20]
 800de80:	2b0a      	cmp	r3, #10
 800de82:	d006      	beq.n	800de92 <tcp_input+0x38e>
 800de84:	4b6a      	ldr	r3, [pc, #424]	; (800e030 <tcp_input+0x52c>)
 800de86:	f240 121f 	movw	r2, #287	; 0x11f
 800de8a:	496f      	ldr	r1, [pc, #444]	; (800e048 <tcp_input+0x544>)
 800de8c:	486a      	ldr	r0, [pc, #424]	; (800e038 <tcp_input+0x534>)
 800de8e:	f006 ff13 	bl	8014cb8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800de92:	69fb      	ldr	r3, [r7, #28]
 800de94:	7a1b      	ldrb	r3, [r3, #8]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d009      	beq.n	800deae <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800de9a:	69fb      	ldr	r3, [r7, #28]
 800de9c:	7a1a      	ldrb	r2, [r3, #8]
 800de9e:	4b63      	ldr	r3, [pc, #396]	; (800e02c <tcp_input+0x528>)
 800dea0:	685b      	ldr	r3, [r3, #4]
 800dea2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dea6:	3301      	adds	r3, #1
 800dea8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800deaa:	429a      	cmp	r2, r3
 800deac:	d122      	bne.n	800def4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800deae:	69fb      	ldr	r3, [r7, #28]
 800deb0:	8b1a      	ldrh	r2, [r3, #24]
 800deb2:	4b5d      	ldr	r3, [pc, #372]	; (800e028 <tcp_input+0x524>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	881b      	ldrh	r3, [r3, #0]
 800deb8:	b29b      	uxth	r3, r3
 800deba:	429a      	cmp	r2, r3
 800debc:	d11b      	bne.n	800def6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800debe:	69fb      	ldr	r3, [r7, #28]
 800dec0:	8ada      	ldrh	r2, [r3, #22]
 800dec2:	4b59      	ldr	r3, [pc, #356]	; (800e028 <tcp_input+0x524>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	885b      	ldrh	r3, [r3, #2]
 800dec8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800deca:	429a      	cmp	r2, r3
 800decc:	d113      	bne.n	800def6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dece:	69fb      	ldr	r3, [r7, #28]
 800ded0:	685a      	ldr	r2, [r3, #4]
 800ded2:	4b56      	ldr	r3, [pc, #344]	; (800e02c <tcp_input+0x528>)
 800ded4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800ded6:	429a      	cmp	r2, r3
 800ded8:	d10d      	bne.n	800def6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800deda:	69fb      	ldr	r3, [r7, #28]
 800dedc:	681a      	ldr	r2, [r3, #0]
 800dede:	4b53      	ldr	r3, [pc, #332]	; (800e02c <tcp_input+0x528>)
 800dee0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dee2:	429a      	cmp	r2, r3
 800dee4:	d107      	bne.n	800def6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800dee6:	69f8      	ldr	r0, [r7, #28]
 800dee8:	f000 fb54 	bl	800e594 <tcp_timewait_input>
        }
        pbuf_free(p);
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f7fd fd31 	bl	800b954 <pbuf_free>
        return;
 800def2:	e1f0      	b.n	800e2d6 <tcp_input+0x7d2>
        continue;
 800def4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800def6:	69fb      	ldr	r3, [r7, #28]
 800def8:	68db      	ldr	r3, [r3, #12]
 800defa:	61fb      	str	r3, [r7, #28]
 800defc:	69fb      	ldr	r3, [r7, #28]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d1bc      	bne.n	800de7c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800df02:	2300      	movs	r3, #0
 800df04:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800df06:	4b51      	ldr	r3, [pc, #324]	; (800e04c <tcp_input+0x548>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	617b      	str	r3, [r7, #20]
 800df0c:	e02a      	b.n	800df64 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	7a1b      	ldrb	r3, [r3, #8]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d00c      	beq.n	800df30 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	7a1a      	ldrb	r2, [r3, #8]
 800df1a:	4b44      	ldr	r3, [pc, #272]	; (800e02c <tcp_input+0x528>)
 800df1c:	685b      	ldr	r3, [r3, #4]
 800df1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800df22:	3301      	adds	r3, #1
 800df24:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800df26:	429a      	cmp	r2, r3
 800df28:	d002      	beq.n	800df30 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800df2a:	697b      	ldr	r3, [r7, #20]
 800df2c:	61bb      	str	r3, [r7, #24]
        continue;
 800df2e:	e016      	b.n	800df5e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800df30:	697b      	ldr	r3, [r7, #20]
 800df32:	8ada      	ldrh	r2, [r3, #22]
 800df34:	4b3c      	ldr	r3, [pc, #240]	; (800e028 <tcp_input+0x524>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	885b      	ldrh	r3, [r3, #2]
 800df3a:	b29b      	uxth	r3, r3
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d10c      	bne.n	800df5a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800df40:	697b      	ldr	r3, [r7, #20]
 800df42:	681a      	ldr	r2, [r3, #0]
 800df44:	4b39      	ldr	r3, [pc, #228]	; (800e02c <tcp_input+0x528>)
 800df46:	695b      	ldr	r3, [r3, #20]
 800df48:	429a      	cmp	r2, r3
 800df4a:	d00f      	beq.n	800df6c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800df4c:	697b      	ldr	r3, [r7, #20]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d00d      	beq.n	800df6e <tcp_input+0x46a>
 800df52:	697b      	ldr	r3, [r7, #20]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d009      	beq.n	800df6e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800df5a:	697b      	ldr	r3, [r7, #20]
 800df5c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800df5e:	697b      	ldr	r3, [r7, #20]
 800df60:	68db      	ldr	r3, [r3, #12]
 800df62:	617b      	str	r3, [r7, #20]
 800df64:	697b      	ldr	r3, [r7, #20]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d1d1      	bne.n	800df0e <tcp_input+0x40a>
 800df6a:	e000      	b.n	800df6e <tcp_input+0x46a>
            break;
 800df6c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800df6e:	697b      	ldr	r3, [r7, #20]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d014      	beq.n	800df9e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800df74:	69bb      	ldr	r3, [r7, #24]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d00a      	beq.n	800df90 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800df7a:	697b      	ldr	r3, [r7, #20]
 800df7c:	68da      	ldr	r2, [r3, #12]
 800df7e:	69bb      	ldr	r3, [r7, #24]
 800df80:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800df82:	4b32      	ldr	r3, [pc, #200]	; (800e04c <tcp_input+0x548>)
 800df84:	681a      	ldr	r2, [r3, #0]
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800df8a:	4a30      	ldr	r2, [pc, #192]	; (800e04c <tcp_input+0x548>)
 800df8c:	697b      	ldr	r3, [r7, #20]
 800df8e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800df90:	6978      	ldr	r0, [r7, #20]
 800df92:	f000 fa01 	bl	800e398 <tcp_listen_input>
      }
      pbuf_free(p);
 800df96:	6878      	ldr	r0, [r7, #4]
 800df98:	f7fd fcdc 	bl	800b954 <pbuf_free>
      return;
 800df9c:	e19b      	b.n	800e2d6 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800df9e:	69fb      	ldr	r3, [r7, #28]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	f000 8160 	beq.w	800e266 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800dfa6:	4b2a      	ldr	r3, [pc, #168]	; (800e050 <tcp_input+0x54c>)
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	891a      	ldrh	r2, [r3, #8]
 800dfb0:	4b27      	ldr	r3, [pc, #156]	; (800e050 <tcp_input+0x54c>)
 800dfb2:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800dfb4:	4a26      	ldr	r2, [pc, #152]	; (800e050 <tcp_input+0x54c>)
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800dfba:	4b1b      	ldr	r3, [pc, #108]	; (800e028 <tcp_input+0x524>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	4a24      	ldr	r2, [pc, #144]	; (800e050 <tcp_input+0x54c>)
 800dfc0:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800dfc2:	4b24      	ldr	r3, [pc, #144]	; (800e054 <tcp_input+0x550>)
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800dfc8:	4b23      	ldr	r3, [pc, #140]	; (800e058 <tcp_input+0x554>)
 800dfca:	2200      	movs	r2, #0
 800dfcc:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800dfce:	4b23      	ldr	r3, [pc, #140]	; (800e05c <tcp_input+0x558>)
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800dfd4:	4b22      	ldr	r3, [pc, #136]	; (800e060 <tcp_input+0x55c>)
 800dfd6:	781b      	ldrb	r3, [r3, #0]
 800dfd8:	f003 0308 	and.w	r3, r3, #8
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d006      	beq.n	800dfee <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	7b5b      	ldrb	r3, [r3, #13]
 800dfe4:	f043 0301 	orr.w	r3, r3, #1
 800dfe8:	b2da      	uxtb	r2, r3
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800dfee:	69fb      	ldr	r3, [r7, #28]
 800dff0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d038      	beq.n	800e068 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800dff6:	69f8      	ldr	r0, [r7, #28]
 800dff8:	f7ff f858 	bl	800d0ac <tcp_process_refused_data>
 800dffc:	4603      	mov	r3, r0
 800dffe:	f113 0f0d 	cmn.w	r3, #13
 800e002:	d007      	beq.n	800e014 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e004:	69fb      	ldr	r3, [r7, #28]
 800e006:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d02d      	beq.n	800e068 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e00c:	4b15      	ldr	r3, [pc, #84]	; (800e064 <tcp_input+0x560>)
 800e00e:	881b      	ldrh	r3, [r3, #0]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d029      	beq.n	800e068 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e014:	69fb      	ldr	r3, [r7, #28]
 800e016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e018:	2b00      	cmp	r3, #0
 800e01a:	f040 8104 	bne.w	800e226 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e01e:	69f8      	ldr	r0, [r7, #28]
 800e020:	f003 fe16 	bl	8011c50 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e024:	e0ff      	b.n	800e226 <tcp_input+0x722>
 800e026:	bf00      	nop
 800e028:	24000104 	.word	0x24000104
 800e02c:	24000724 	.word	0x24000724
 800e030:	08017064 	.word	0x08017064
 800e034:	08017190 	.word	0x08017190
 800e038:	080170b0 	.word	0x080170b0
 800e03c:	24003614 	.word	0x24003614
 800e040:	080171bc 	.word	0x080171bc
 800e044:	24003624 	.word	0x24003624
 800e048:	080171e8 	.word	0x080171e8
 800e04c:	2400361c 	.word	0x2400361c
 800e050:	240000f4 	.word	0x240000f4
 800e054:	24000124 	.word	0x24000124
 800e058:	24000121 	.word	0x24000121
 800e05c:	2400011c 	.word	0x2400011c
 800e060:	24000120 	.word	0x24000120
 800e064:	2400011e 	.word	0x2400011e
      }
    }
    tcp_input_pcb = pcb;
 800e068:	4a9c      	ldr	r2, [pc, #624]	; (800e2dc <tcp_input+0x7d8>)
 800e06a:	69fb      	ldr	r3, [r7, #28]
 800e06c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e06e:	69f8      	ldr	r0, [r7, #28]
 800e070:	f000 fb0a 	bl	800e688 <tcp_process>
 800e074:	4603      	mov	r3, r0
 800e076:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e078:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e07c:	f113 0f0d 	cmn.w	r3, #13
 800e080:	f000 80d3 	beq.w	800e22a <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800e084:	4b96      	ldr	r3, [pc, #600]	; (800e2e0 <tcp_input+0x7dc>)
 800e086:	781b      	ldrb	r3, [r3, #0]
 800e088:	f003 0308 	and.w	r3, r3, #8
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d015      	beq.n	800e0bc <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e090:	69fb      	ldr	r3, [r7, #28]
 800e092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e096:	2b00      	cmp	r3, #0
 800e098:	d008      	beq.n	800e0ac <tcp_input+0x5a8>
 800e09a:	69fb      	ldr	r3, [r7, #28]
 800e09c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0a0:	69fa      	ldr	r2, [r7, #28]
 800e0a2:	6912      	ldr	r2, [r2, #16]
 800e0a4:	f06f 010d 	mvn.w	r1, #13
 800e0a8:	4610      	mov	r0, r2
 800e0aa:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e0ac:	69f9      	ldr	r1, [r7, #28]
 800e0ae:	488d      	ldr	r0, [pc, #564]	; (800e2e4 <tcp_input+0x7e0>)
 800e0b0:	f7ff fbb0 	bl	800d814 <tcp_pcb_remove>
        tcp_free(pcb);
 800e0b4:	69f8      	ldr	r0, [r7, #28]
 800e0b6:	f7fd fefd 	bl	800beb4 <tcp_free>
 800e0ba:	e0c1      	b.n	800e240 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e0c0:	4b89      	ldr	r3, [pc, #548]	; (800e2e8 <tcp_input+0x7e4>)
 800e0c2:	881b      	ldrh	r3, [r3, #0]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d01d      	beq.n	800e104 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e0c8:	4b87      	ldr	r3, [pc, #540]	; (800e2e8 <tcp_input+0x7e4>)
 800e0ca:	881b      	ldrh	r3, [r3, #0]
 800e0cc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e0ce:	69fb      	ldr	r3, [r7, #28]
 800e0d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d00a      	beq.n	800e0ee <tcp_input+0x5ea>
 800e0d8:	69fb      	ldr	r3, [r7, #28]
 800e0da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0de:	69fa      	ldr	r2, [r7, #28]
 800e0e0:	6910      	ldr	r0, [r2, #16]
 800e0e2:	89fa      	ldrh	r2, [r7, #14]
 800e0e4:	69f9      	ldr	r1, [r7, #28]
 800e0e6:	4798      	blx	r3
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	74fb      	strb	r3, [r7, #19]
 800e0ec:	e001      	b.n	800e0f2 <tcp_input+0x5ee>
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e0f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e0f6:	f113 0f0d 	cmn.w	r3, #13
 800e0fa:	f000 8098 	beq.w	800e22e <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e0fe:	4b7a      	ldr	r3, [pc, #488]	; (800e2e8 <tcp_input+0x7e4>)
 800e100:	2200      	movs	r2, #0
 800e102:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e104:	69f8      	ldr	r0, [r7, #28]
 800e106:	f000 f907 	bl	800e318 <tcp_input_delayed_close>
 800e10a:	4603      	mov	r3, r0
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	f040 8090 	bne.w	800e232 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e112:	4b76      	ldr	r3, [pc, #472]	; (800e2ec <tcp_input+0x7e8>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d041      	beq.n	800e19e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e11a:	69fb      	ldr	r3, [r7, #28]
 800e11c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d006      	beq.n	800e130 <tcp_input+0x62c>
 800e122:	4b73      	ldr	r3, [pc, #460]	; (800e2f0 <tcp_input+0x7ec>)
 800e124:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e128:	4972      	ldr	r1, [pc, #456]	; (800e2f4 <tcp_input+0x7f0>)
 800e12a:	4873      	ldr	r0, [pc, #460]	; (800e2f8 <tcp_input+0x7f4>)
 800e12c:	f006 fdc4 	bl	8014cb8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e130:	69fb      	ldr	r3, [r7, #28]
 800e132:	8b5b      	ldrh	r3, [r3, #26]
 800e134:	f003 0310 	and.w	r3, r3, #16
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d008      	beq.n	800e14e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e13c:	4b6b      	ldr	r3, [pc, #428]	; (800e2ec <tcp_input+0x7e8>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	4618      	mov	r0, r3
 800e142:	f7fd fc07 	bl	800b954 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e146:	69f8      	ldr	r0, [r7, #28]
 800e148:	f7fe f99c 	bl	800c484 <tcp_abort>
            goto aborted;
 800e14c:	e078      	b.n	800e240 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e14e:	69fb      	ldr	r3, [r7, #28]
 800e150:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e154:	2b00      	cmp	r3, #0
 800e156:	d00c      	beq.n	800e172 <tcp_input+0x66e>
 800e158:	69fb      	ldr	r3, [r7, #28]
 800e15a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e15e:	69fb      	ldr	r3, [r7, #28]
 800e160:	6918      	ldr	r0, [r3, #16]
 800e162:	4b62      	ldr	r3, [pc, #392]	; (800e2ec <tcp_input+0x7e8>)
 800e164:	681a      	ldr	r2, [r3, #0]
 800e166:	2300      	movs	r3, #0
 800e168:	69f9      	ldr	r1, [r7, #28]
 800e16a:	47a0      	blx	r4
 800e16c:	4603      	mov	r3, r0
 800e16e:	74fb      	strb	r3, [r7, #19]
 800e170:	e008      	b.n	800e184 <tcp_input+0x680>
 800e172:	4b5e      	ldr	r3, [pc, #376]	; (800e2ec <tcp_input+0x7e8>)
 800e174:	681a      	ldr	r2, [r3, #0]
 800e176:	2300      	movs	r3, #0
 800e178:	69f9      	ldr	r1, [r7, #28]
 800e17a:	2000      	movs	r0, #0
 800e17c:	f7ff f88a 	bl	800d294 <tcp_recv_null>
 800e180:	4603      	mov	r3, r0
 800e182:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e184:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e188:	f113 0f0d 	cmn.w	r3, #13
 800e18c:	d053      	beq.n	800e236 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e18e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d003      	beq.n	800e19e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e196:	4b55      	ldr	r3, [pc, #340]	; (800e2ec <tcp_input+0x7e8>)
 800e198:	681a      	ldr	r2, [r3, #0]
 800e19a:	69fb      	ldr	r3, [r7, #28]
 800e19c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e19e:	4b50      	ldr	r3, [pc, #320]	; (800e2e0 <tcp_input+0x7dc>)
 800e1a0:	781b      	ldrb	r3, [r3, #0]
 800e1a2:	f003 0320 	and.w	r3, r3, #32
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d030      	beq.n	800e20c <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800e1aa:	69fb      	ldr	r3, [r7, #28]
 800e1ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d009      	beq.n	800e1c6 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e1b2:	69fb      	ldr	r3, [r7, #28]
 800e1b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e1b6:	7b5a      	ldrb	r2, [r3, #13]
 800e1b8:	69fb      	ldr	r3, [r7, #28]
 800e1ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e1bc:	f042 0220 	orr.w	r2, r2, #32
 800e1c0:	b2d2      	uxtb	r2, r2
 800e1c2:	735a      	strb	r2, [r3, #13]
 800e1c4:	e022      	b.n	800e20c <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e1c6:	69fb      	ldr	r3, [r7, #28]
 800e1c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e1ca:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e1ce:	d005      	beq.n	800e1dc <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800e1d0:	69fb      	ldr	r3, [r7, #28]
 800e1d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e1d4:	3301      	adds	r3, #1
 800e1d6:	b29a      	uxth	r2, r3
 800e1d8:	69fb      	ldr	r3, [r7, #28]
 800e1da:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e1dc:	69fb      	ldr	r3, [r7, #28]
 800e1de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d00b      	beq.n	800e1fe <tcp_input+0x6fa>
 800e1e6:	69fb      	ldr	r3, [r7, #28]
 800e1e8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e1ec:	69fb      	ldr	r3, [r7, #28]
 800e1ee:	6918      	ldr	r0, [r3, #16]
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	69f9      	ldr	r1, [r7, #28]
 800e1f6:	47a0      	blx	r4
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	74fb      	strb	r3, [r7, #19]
 800e1fc:	e001      	b.n	800e202 <tcp_input+0x6fe>
 800e1fe:	2300      	movs	r3, #0
 800e200:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e202:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e206:	f113 0f0d 	cmn.w	r3, #13
 800e20a:	d016      	beq.n	800e23a <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e20c:	4b33      	ldr	r3, [pc, #204]	; (800e2dc <tcp_input+0x7d8>)
 800e20e:	2200      	movs	r2, #0
 800e210:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e212:	69f8      	ldr	r0, [r7, #28]
 800e214:	f000 f880 	bl	800e318 <tcp_input_delayed_close>
 800e218:	4603      	mov	r3, r0
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d10f      	bne.n	800e23e <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e21e:	69f8      	ldr	r0, [r7, #28]
 800e220:	f002 ff10 	bl	8011044 <tcp_output>
 800e224:	e00c      	b.n	800e240 <tcp_input+0x73c>
        goto aborted;
 800e226:	bf00      	nop
 800e228:	e00a      	b.n	800e240 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e22a:	bf00      	nop
 800e22c:	e008      	b.n	800e240 <tcp_input+0x73c>
              goto aborted;
 800e22e:	bf00      	nop
 800e230:	e006      	b.n	800e240 <tcp_input+0x73c>
          goto aborted;
 800e232:	bf00      	nop
 800e234:	e004      	b.n	800e240 <tcp_input+0x73c>
            goto aborted;
 800e236:	bf00      	nop
 800e238:	e002      	b.n	800e240 <tcp_input+0x73c>
              goto aborted;
 800e23a:	bf00      	nop
 800e23c:	e000      	b.n	800e240 <tcp_input+0x73c>
          goto aborted;
 800e23e:	bf00      	nop
    tcp_input_pcb = NULL;
 800e240:	4b26      	ldr	r3, [pc, #152]	; (800e2dc <tcp_input+0x7d8>)
 800e242:	2200      	movs	r2, #0
 800e244:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e246:	4b29      	ldr	r3, [pc, #164]	; (800e2ec <tcp_input+0x7e8>)
 800e248:	2200      	movs	r2, #0
 800e24a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e24c:	4b2b      	ldr	r3, [pc, #172]	; (800e2fc <tcp_input+0x7f8>)
 800e24e:	685b      	ldr	r3, [r3, #4]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d03f      	beq.n	800e2d4 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800e254:	4b29      	ldr	r3, [pc, #164]	; (800e2fc <tcp_input+0x7f8>)
 800e256:	685b      	ldr	r3, [r3, #4]
 800e258:	4618      	mov	r0, r3
 800e25a:	f7fd fb7b 	bl	800b954 <pbuf_free>
      inseg.p = NULL;
 800e25e:	4b27      	ldr	r3, [pc, #156]	; (800e2fc <tcp_input+0x7f8>)
 800e260:	2200      	movs	r2, #0
 800e262:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e264:	e036      	b.n	800e2d4 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e266:	4b26      	ldr	r3, [pc, #152]	; (800e300 <tcp_input+0x7fc>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	899b      	ldrh	r3, [r3, #12]
 800e26c:	b29b      	uxth	r3, r3
 800e26e:	4618      	mov	r0, r3
 800e270:	f7fb ff5a 	bl	800a128 <lwip_htons>
 800e274:	4603      	mov	r3, r0
 800e276:	b2db      	uxtb	r3, r3
 800e278:	f003 0304 	and.w	r3, r3, #4
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d118      	bne.n	800e2b2 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e280:	4b20      	ldr	r3, [pc, #128]	; (800e304 <tcp_input+0x800>)
 800e282:	6819      	ldr	r1, [r3, #0]
 800e284:	4b20      	ldr	r3, [pc, #128]	; (800e308 <tcp_input+0x804>)
 800e286:	881b      	ldrh	r3, [r3, #0]
 800e288:	461a      	mov	r2, r3
 800e28a:	4b20      	ldr	r3, [pc, #128]	; (800e30c <tcp_input+0x808>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e290:	4b1b      	ldr	r3, [pc, #108]	; (800e300 <tcp_input+0x7fc>)
 800e292:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e294:	885b      	ldrh	r3, [r3, #2]
 800e296:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e298:	4a19      	ldr	r2, [pc, #100]	; (800e300 <tcp_input+0x7fc>)
 800e29a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e29c:	8812      	ldrh	r2, [r2, #0]
 800e29e:	b292      	uxth	r2, r2
 800e2a0:	9202      	str	r2, [sp, #8]
 800e2a2:	9301      	str	r3, [sp, #4]
 800e2a4:	4b1a      	ldr	r3, [pc, #104]	; (800e310 <tcp_input+0x80c>)
 800e2a6:	9300      	str	r3, [sp, #0]
 800e2a8:	4b1a      	ldr	r3, [pc, #104]	; (800e314 <tcp_input+0x810>)
 800e2aa:	4602      	mov	r2, r0
 800e2ac:	2000      	movs	r0, #0
 800e2ae:	f003 fc7d 	bl	8011bac <tcp_rst>
    pbuf_free(p);
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	f7fd fb4e 	bl	800b954 <pbuf_free>
  return;
 800e2b8:	e00c      	b.n	800e2d4 <tcp_input+0x7d0>
    goto dropped;
 800e2ba:	bf00      	nop
 800e2bc:	e006      	b.n	800e2cc <tcp_input+0x7c8>
    goto dropped;
 800e2be:	bf00      	nop
 800e2c0:	e004      	b.n	800e2cc <tcp_input+0x7c8>
    goto dropped;
 800e2c2:	bf00      	nop
 800e2c4:	e002      	b.n	800e2cc <tcp_input+0x7c8>
      goto dropped;
 800e2c6:	bf00      	nop
 800e2c8:	e000      	b.n	800e2cc <tcp_input+0x7c8>
      goto dropped;
 800e2ca:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f7fd fb41 	bl	800b954 <pbuf_free>
 800e2d2:	e000      	b.n	800e2d6 <tcp_input+0x7d2>
  return;
 800e2d4:	bf00      	nop
}
 800e2d6:	3724      	adds	r7, #36	; 0x24
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd90      	pop	{r4, r7, pc}
 800e2dc:	24003628 	.word	0x24003628
 800e2e0:	24000121 	.word	0x24000121
 800e2e4:	24003614 	.word	0x24003614
 800e2e8:	2400011c 	.word	0x2400011c
 800e2ec:	24000124 	.word	0x24000124
 800e2f0:	08017064 	.word	0x08017064
 800e2f4:	08017218 	.word	0x08017218
 800e2f8:	080170b0 	.word	0x080170b0
 800e2fc:	240000f4 	.word	0x240000f4
 800e300:	24000104 	.word	0x24000104
 800e304:	24000118 	.word	0x24000118
 800e308:	2400011e 	.word	0x2400011e
 800e30c:	24000114 	.word	0x24000114
 800e310:	24000734 	.word	0x24000734
 800e314:	24000738 	.word	0x24000738

0800e318 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b082      	sub	sp, #8
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d106      	bne.n	800e334 <tcp_input_delayed_close+0x1c>
 800e326:	4b17      	ldr	r3, [pc, #92]	; (800e384 <tcp_input_delayed_close+0x6c>)
 800e328:	f240 225a 	movw	r2, #602	; 0x25a
 800e32c:	4916      	ldr	r1, [pc, #88]	; (800e388 <tcp_input_delayed_close+0x70>)
 800e32e:	4817      	ldr	r0, [pc, #92]	; (800e38c <tcp_input_delayed_close+0x74>)
 800e330:	f006 fcc2 	bl	8014cb8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e334:	4b16      	ldr	r3, [pc, #88]	; (800e390 <tcp_input_delayed_close+0x78>)
 800e336:	781b      	ldrb	r3, [r3, #0]
 800e338:	f003 0310 	and.w	r3, r3, #16
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d01c      	beq.n	800e37a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	8b5b      	ldrh	r3, [r3, #26]
 800e344:	f003 0310 	and.w	r3, r3, #16
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d10d      	bne.n	800e368 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e352:	2b00      	cmp	r3, #0
 800e354:	d008      	beq.n	800e368 <tcp_input_delayed_close+0x50>
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e35c:	687a      	ldr	r2, [r7, #4]
 800e35e:	6912      	ldr	r2, [r2, #16]
 800e360:	f06f 010e 	mvn.w	r1, #14
 800e364:	4610      	mov	r0, r2
 800e366:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e368:	6879      	ldr	r1, [r7, #4]
 800e36a:	480a      	ldr	r0, [pc, #40]	; (800e394 <tcp_input_delayed_close+0x7c>)
 800e36c:	f7ff fa52 	bl	800d814 <tcp_pcb_remove>
    tcp_free(pcb);
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f7fd fd9f 	bl	800beb4 <tcp_free>
    return 1;
 800e376:	2301      	movs	r3, #1
 800e378:	e000      	b.n	800e37c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e37a:	2300      	movs	r3, #0
}
 800e37c:	4618      	mov	r0, r3
 800e37e:	3708      	adds	r7, #8
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}
 800e384:	08017064 	.word	0x08017064
 800e388:	08017234 	.word	0x08017234
 800e38c:	080170b0 	.word	0x080170b0
 800e390:	24000121 	.word	0x24000121
 800e394:	24003614 	.word	0x24003614

0800e398 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e398:	b590      	push	{r4, r7, lr}
 800e39a:	b08b      	sub	sp, #44	; 0x2c
 800e39c:	af04      	add	r7, sp, #16
 800e39e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e3a0:	4b6f      	ldr	r3, [pc, #444]	; (800e560 <tcp_listen_input+0x1c8>)
 800e3a2:	781b      	ldrb	r3, [r3, #0]
 800e3a4:	f003 0304 	and.w	r3, r3, #4
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	f040 80d2 	bne.w	800e552 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d106      	bne.n	800e3c2 <tcp_listen_input+0x2a>
 800e3b4:	4b6b      	ldr	r3, [pc, #428]	; (800e564 <tcp_listen_input+0x1cc>)
 800e3b6:	f240 2281 	movw	r2, #641	; 0x281
 800e3ba:	496b      	ldr	r1, [pc, #428]	; (800e568 <tcp_listen_input+0x1d0>)
 800e3bc:	486b      	ldr	r0, [pc, #428]	; (800e56c <tcp_listen_input+0x1d4>)
 800e3be:	f006 fc7b 	bl	8014cb8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e3c2:	4b67      	ldr	r3, [pc, #412]	; (800e560 <tcp_listen_input+0x1c8>)
 800e3c4:	781b      	ldrb	r3, [r3, #0]
 800e3c6:	f003 0310 	and.w	r3, r3, #16
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d019      	beq.n	800e402 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e3ce:	4b68      	ldr	r3, [pc, #416]	; (800e570 <tcp_listen_input+0x1d8>)
 800e3d0:	6819      	ldr	r1, [r3, #0]
 800e3d2:	4b68      	ldr	r3, [pc, #416]	; (800e574 <tcp_listen_input+0x1dc>)
 800e3d4:	881b      	ldrh	r3, [r3, #0]
 800e3d6:	461a      	mov	r2, r3
 800e3d8:	4b67      	ldr	r3, [pc, #412]	; (800e578 <tcp_listen_input+0x1e0>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e3de:	4b67      	ldr	r3, [pc, #412]	; (800e57c <tcp_listen_input+0x1e4>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e3e2:	885b      	ldrh	r3, [r3, #2]
 800e3e4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e3e6:	4a65      	ldr	r2, [pc, #404]	; (800e57c <tcp_listen_input+0x1e4>)
 800e3e8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e3ea:	8812      	ldrh	r2, [r2, #0]
 800e3ec:	b292      	uxth	r2, r2
 800e3ee:	9202      	str	r2, [sp, #8]
 800e3f0:	9301      	str	r3, [sp, #4]
 800e3f2:	4b63      	ldr	r3, [pc, #396]	; (800e580 <tcp_listen_input+0x1e8>)
 800e3f4:	9300      	str	r3, [sp, #0]
 800e3f6:	4b63      	ldr	r3, [pc, #396]	; (800e584 <tcp_listen_input+0x1ec>)
 800e3f8:	4602      	mov	r2, r0
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f003 fbd6 	bl	8011bac <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e400:	e0a9      	b.n	800e556 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e402:	4b57      	ldr	r3, [pc, #348]	; (800e560 <tcp_listen_input+0x1c8>)
 800e404:	781b      	ldrb	r3, [r3, #0]
 800e406:	f003 0302 	and.w	r3, r3, #2
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	f000 80a3 	beq.w	800e556 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	7d5b      	ldrb	r3, [r3, #21]
 800e414:	4618      	mov	r0, r3
 800e416:	f7ff f861 	bl	800d4dc <tcp_alloc>
 800e41a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e41c:	697b      	ldr	r3, [r7, #20]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d111      	bne.n	800e446 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	699b      	ldr	r3, [r3, #24]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d00a      	beq.n	800e440 <tcp_listen_input+0xa8>
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	699b      	ldr	r3, [r3, #24]
 800e42e:	687a      	ldr	r2, [r7, #4]
 800e430:	6910      	ldr	r0, [r2, #16]
 800e432:	f04f 32ff 	mov.w	r2, #4294967295
 800e436:	2100      	movs	r1, #0
 800e438:	4798      	blx	r3
 800e43a:	4603      	mov	r3, r0
 800e43c:	73bb      	strb	r3, [r7, #14]
      return;
 800e43e:	e08b      	b.n	800e558 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e440:	23f0      	movs	r3, #240	; 0xf0
 800e442:	73bb      	strb	r3, [r7, #14]
      return;
 800e444:	e088      	b.n	800e558 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e446:	4b50      	ldr	r3, [pc, #320]	; (800e588 <tcp_listen_input+0x1f0>)
 800e448:	695a      	ldr	r2, [r3, #20]
 800e44a:	697b      	ldr	r3, [r7, #20]
 800e44c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e44e:	4b4e      	ldr	r3, [pc, #312]	; (800e588 <tcp_listen_input+0x1f0>)
 800e450:	691a      	ldr	r2, [r3, #16]
 800e452:	697b      	ldr	r3, [r7, #20]
 800e454:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	8ada      	ldrh	r2, [r3, #22]
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e45e:	4b47      	ldr	r3, [pc, #284]	; (800e57c <tcp_listen_input+0x1e4>)
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	881b      	ldrh	r3, [r3, #0]
 800e464:	b29a      	uxth	r2, r3
 800e466:	697b      	ldr	r3, [r7, #20]
 800e468:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e46a:	697b      	ldr	r3, [r7, #20]
 800e46c:	2203      	movs	r2, #3
 800e46e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e470:	4b41      	ldr	r3, [pc, #260]	; (800e578 <tcp_listen_input+0x1e0>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	1c5a      	adds	r2, r3, #1
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e47a:	697b      	ldr	r3, [r7, #20]
 800e47c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e47e:	697b      	ldr	r3, [r7, #20]
 800e480:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e482:	6978      	ldr	r0, [r7, #20]
 800e484:	f7ff fa5a 	bl	800d93c <tcp_next_iss>
 800e488:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e48a:	697b      	ldr	r3, [r7, #20]
 800e48c:	693a      	ldr	r2, [r7, #16]
 800e48e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e490:	697b      	ldr	r3, [r7, #20]
 800e492:	693a      	ldr	r2, [r7, #16]
 800e494:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e496:	697b      	ldr	r3, [r7, #20]
 800e498:	693a      	ldr	r2, [r7, #16]
 800e49a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e49c:	697b      	ldr	r3, [r7, #20]
 800e49e:	693a      	ldr	r2, [r7, #16]
 800e4a0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e4a2:	4b35      	ldr	r3, [pc, #212]	; (800e578 <tcp_listen_input+0x1e0>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	1e5a      	subs	r2, r3, #1
 800e4a8:	697b      	ldr	r3, [r7, #20]
 800e4aa:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	691a      	ldr	r2, [r3, #16]
 800e4b0:	697b      	ldr	r3, [r7, #20]
 800e4b2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e4b4:	697b      	ldr	r3, [r7, #20]
 800e4b6:	687a      	ldr	r2, [r7, #4]
 800e4b8:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	7a5b      	ldrb	r3, [r3, #9]
 800e4be:	f003 030c 	and.w	r3, r3, #12
 800e4c2:	b2da      	uxtb	r2, r3
 800e4c4:	697b      	ldr	r3, [r7, #20]
 800e4c6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	7a1a      	ldrb	r2, [r3, #8]
 800e4cc:	697b      	ldr	r3, [r7, #20]
 800e4ce:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e4d0:	4b2e      	ldr	r3, [pc, #184]	; (800e58c <tcp_listen_input+0x1f4>)
 800e4d2:	681a      	ldr	r2, [r3, #0]
 800e4d4:	697b      	ldr	r3, [r7, #20]
 800e4d6:	60da      	str	r2, [r3, #12]
 800e4d8:	4a2c      	ldr	r2, [pc, #176]	; (800e58c <tcp_listen_input+0x1f4>)
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	6013      	str	r3, [r2, #0]
 800e4de:	f003 fd27 	bl	8011f30 <tcp_timer_needed>
 800e4e2:	4b2b      	ldr	r3, [pc, #172]	; (800e590 <tcp_listen_input+0x1f8>)
 800e4e4:	2201      	movs	r2, #1
 800e4e6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e4e8:	6978      	ldr	r0, [r7, #20]
 800e4ea:	f001 fd8d 	bl	8010008 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e4ee:	4b23      	ldr	r3, [pc, #140]	; (800e57c <tcp_listen_input+0x1e4>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	89db      	ldrh	r3, [r3, #14]
 800e4f4:	b29a      	uxth	r2, r3
 800e4f6:	697b      	ldr	r3, [r7, #20]
 800e4f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e4fc:	697b      	ldr	r3, [r7, #20]
 800e4fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e502:	697b      	ldr	r3, [r7, #20]
 800e504:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e508:	697b      	ldr	r3, [r7, #20]
 800e50a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e50c:	697b      	ldr	r3, [r7, #20]
 800e50e:	3304      	adds	r3, #4
 800e510:	4618      	mov	r0, r3
 800e512:	f005 f911 	bl	8013738 <ip4_route>
 800e516:	4601      	mov	r1, r0
 800e518:	697b      	ldr	r3, [r7, #20]
 800e51a:	3304      	adds	r3, #4
 800e51c:	461a      	mov	r2, r3
 800e51e:	4620      	mov	r0, r4
 800e520:	f7ff fa32 	bl	800d988 <tcp_eff_send_mss_netif>
 800e524:	4603      	mov	r3, r0
 800e526:	461a      	mov	r2, r3
 800e528:	697b      	ldr	r3, [r7, #20]
 800e52a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e52c:	2112      	movs	r1, #18
 800e52e:	6978      	ldr	r0, [r7, #20]
 800e530:	f002 fc9a 	bl	8010e68 <tcp_enqueue_flags>
 800e534:	4603      	mov	r3, r0
 800e536:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e538:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d004      	beq.n	800e54a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e540:	2100      	movs	r1, #0
 800e542:	6978      	ldr	r0, [r7, #20]
 800e544:	f7fd fee0 	bl	800c308 <tcp_abandon>
      return;
 800e548:	e006      	b.n	800e558 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e54a:	6978      	ldr	r0, [r7, #20]
 800e54c:	f002 fd7a 	bl	8011044 <tcp_output>
  return;
 800e550:	e001      	b.n	800e556 <tcp_listen_input+0x1be>
    return;
 800e552:	bf00      	nop
 800e554:	e000      	b.n	800e558 <tcp_listen_input+0x1c0>
  return;
 800e556:	bf00      	nop
}
 800e558:	371c      	adds	r7, #28
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd90      	pop	{r4, r7, pc}
 800e55e:	bf00      	nop
 800e560:	24000120 	.word	0x24000120
 800e564:	08017064 	.word	0x08017064
 800e568:	0801725c 	.word	0x0801725c
 800e56c:	080170b0 	.word	0x080170b0
 800e570:	24000118 	.word	0x24000118
 800e574:	2400011e 	.word	0x2400011e
 800e578:	24000114 	.word	0x24000114
 800e57c:	24000104 	.word	0x24000104
 800e580:	24000734 	.word	0x24000734
 800e584:	24000738 	.word	0x24000738
 800e588:	24000724 	.word	0x24000724
 800e58c:	24003614 	.word	0x24003614
 800e590:	24003610 	.word	0x24003610

0800e594 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b086      	sub	sp, #24
 800e598:	af04      	add	r7, sp, #16
 800e59a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e59c:	4b2f      	ldr	r3, [pc, #188]	; (800e65c <tcp_timewait_input+0xc8>)
 800e59e:	781b      	ldrb	r3, [r3, #0]
 800e5a0:	f003 0304 	and.w	r3, r3, #4
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d153      	bne.n	800e650 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d106      	bne.n	800e5bc <tcp_timewait_input+0x28>
 800e5ae:	4b2c      	ldr	r3, [pc, #176]	; (800e660 <tcp_timewait_input+0xcc>)
 800e5b0:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e5b4:	492b      	ldr	r1, [pc, #172]	; (800e664 <tcp_timewait_input+0xd0>)
 800e5b6:	482c      	ldr	r0, [pc, #176]	; (800e668 <tcp_timewait_input+0xd4>)
 800e5b8:	f006 fb7e 	bl	8014cb8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e5bc:	4b27      	ldr	r3, [pc, #156]	; (800e65c <tcp_timewait_input+0xc8>)
 800e5be:	781b      	ldrb	r3, [r3, #0]
 800e5c0:	f003 0302 	and.w	r3, r3, #2
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d02a      	beq.n	800e61e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e5c8:	4b28      	ldr	r3, [pc, #160]	; (800e66c <tcp_timewait_input+0xd8>)
 800e5ca:	681a      	ldr	r2, [r3, #0]
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5d0:	1ad3      	subs	r3, r2, r3
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	db2d      	blt.n	800e632 <tcp_timewait_input+0x9e>
 800e5d6:	4b25      	ldr	r3, [pc, #148]	; (800e66c <tcp_timewait_input+0xd8>)
 800e5d8:	681a      	ldr	r2, [r3, #0]
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5de:	6879      	ldr	r1, [r7, #4]
 800e5e0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e5e2:	440b      	add	r3, r1
 800e5e4:	1ad3      	subs	r3, r2, r3
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	dc23      	bgt.n	800e632 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e5ea:	4b21      	ldr	r3, [pc, #132]	; (800e670 <tcp_timewait_input+0xdc>)
 800e5ec:	6819      	ldr	r1, [r3, #0]
 800e5ee:	4b21      	ldr	r3, [pc, #132]	; (800e674 <tcp_timewait_input+0xe0>)
 800e5f0:	881b      	ldrh	r3, [r3, #0]
 800e5f2:	461a      	mov	r2, r3
 800e5f4:	4b1d      	ldr	r3, [pc, #116]	; (800e66c <tcp_timewait_input+0xd8>)
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e5fa:	4b1f      	ldr	r3, [pc, #124]	; (800e678 <tcp_timewait_input+0xe4>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e5fe:	885b      	ldrh	r3, [r3, #2]
 800e600:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e602:	4a1d      	ldr	r2, [pc, #116]	; (800e678 <tcp_timewait_input+0xe4>)
 800e604:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e606:	8812      	ldrh	r2, [r2, #0]
 800e608:	b292      	uxth	r2, r2
 800e60a:	9202      	str	r2, [sp, #8]
 800e60c:	9301      	str	r3, [sp, #4]
 800e60e:	4b1b      	ldr	r3, [pc, #108]	; (800e67c <tcp_timewait_input+0xe8>)
 800e610:	9300      	str	r3, [sp, #0]
 800e612:	4b1b      	ldr	r3, [pc, #108]	; (800e680 <tcp_timewait_input+0xec>)
 800e614:	4602      	mov	r2, r0
 800e616:	6878      	ldr	r0, [r7, #4]
 800e618:	f003 fac8 	bl	8011bac <tcp_rst>
      return;
 800e61c:	e01b      	b.n	800e656 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e61e:	4b0f      	ldr	r3, [pc, #60]	; (800e65c <tcp_timewait_input+0xc8>)
 800e620:	781b      	ldrb	r3, [r3, #0]
 800e622:	f003 0301 	and.w	r3, r3, #1
 800e626:	2b00      	cmp	r3, #0
 800e628:	d003      	beq.n	800e632 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e62a:	4b16      	ldr	r3, [pc, #88]	; (800e684 <tcp_timewait_input+0xf0>)
 800e62c:	681a      	ldr	r2, [r3, #0]
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e632:	4b10      	ldr	r3, [pc, #64]	; (800e674 <tcp_timewait_input+0xe0>)
 800e634:	881b      	ldrh	r3, [r3, #0]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d00c      	beq.n	800e654 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	8b5b      	ldrh	r3, [r3, #26]
 800e63e:	f043 0302 	orr.w	r3, r3, #2
 800e642:	b29a      	uxth	r2, r3
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f002 fcfb 	bl	8011044 <tcp_output>
  }
  return;
 800e64e:	e001      	b.n	800e654 <tcp_timewait_input+0xc0>
    return;
 800e650:	bf00      	nop
 800e652:	e000      	b.n	800e656 <tcp_timewait_input+0xc2>
  return;
 800e654:	bf00      	nop
}
 800e656:	3708      	adds	r7, #8
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}
 800e65c:	24000120 	.word	0x24000120
 800e660:	08017064 	.word	0x08017064
 800e664:	0801727c 	.word	0x0801727c
 800e668:	080170b0 	.word	0x080170b0
 800e66c:	24000114 	.word	0x24000114
 800e670:	24000118 	.word	0x24000118
 800e674:	2400011e 	.word	0x2400011e
 800e678:	24000104 	.word	0x24000104
 800e67c:	24000734 	.word	0x24000734
 800e680:	24000738 	.word	0x24000738
 800e684:	24003618 	.word	0x24003618

0800e688 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e688:	b590      	push	{r4, r7, lr}
 800e68a:	b08d      	sub	sp, #52	; 0x34
 800e68c:	af04      	add	r7, sp, #16
 800e68e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e690:	2300      	movs	r3, #0
 800e692:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e694:	2300      	movs	r3, #0
 800e696:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d106      	bne.n	800e6ac <tcp_process+0x24>
 800e69e:	4ba5      	ldr	r3, [pc, #660]	; (800e934 <tcp_process+0x2ac>)
 800e6a0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e6a4:	49a4      	ldr	r1, [pc, #656]	; (800e938 <tcp_process+0x2b0>)
 800e6a6:	48a5      	ldr	r0, [pc, #660]	; (800e93c <tcp_process+0x2b4>)
 800e6a8:	f006 fb06 	bl	8014cb8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e6ac:	4ba4      	ldr	r3, [pc, #656]	; (800e940 <tcp_process+0x2b8>)
 800e6ae:	781b      	ldrb	r3, [r3, #0]
 800e6b0:	f003 0304 	and.w	r3, r3, #4
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d04e      	beq.n	800e756 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	7d1b      	ldrb	r3, [r3, #20]
 800e6bc:	2b02      	cmp	r3, #2
 800e6be:	d108      	bne.n	800e6d2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e6c4:	4b9f      	ldr	r3, [pc, #636]	; (800e944 <tcp_process+0x2bc>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	429a      	cmp	r2, r3
 800e6ca:	d123      	bne.n	800e714 <tcp_process+0x8c>
        acceptable = 1;
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	76fb      	strb	r3, [r7, #27]
 800e6d0:	e020      	b.n	800e714 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e6d6:	4b9c      	ldr	r3, [pc, #624]	; (800e948 <tcp_process+0x2c0>)
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	429a      	cmp	r2, r3
 800e6dc:	d102      	bne.n	800e6e4 <tcp_process+0x5c>
        acceptable = 1;
 800e6de:	2301      	movs	r3, #1
 800e6e0:	76fb      	strb	r3, [r7, #27]
 800e6e2:	e017      	b.n	800e714 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e6e4:	4b98      	ldr	r3, [pc, #608]	; (800e948 <tcp_process+0x2c0>)
 800e6e6:	681a      	ldr	r2, [r3, #0]
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6ec:	1ad3      	subs	r3, r2, r3
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	db10      	blt.n	800e714 <tcp_process+0x8c>
 800e6f2:	4b95      	ldr	r3, [pc, #596]	; (800e948 <tcp_process+0x2c0>)
 800e6f4:	681a      	ldr	r2, [r3, #0]
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6fa:	6879      	ldr	r1, [r7, #4]
 800e6fc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e6fe:	440b      	add	r3, r1
 800e700:	1ad3      	subs	r3, r2, r3
 800e702:	2b00      	cmp	r3, #0
 800e704:	dc06      	bgt.n	800e714 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	8b5b      	ldrh	r3, [r3, #26]
 800e70a:	f043 0302 	orr.w	r3, r3, #2
 800e70e:	b29a      	uxth	r2, r3
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e714:	7efb      	ldrb	r3, [r7, #27]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d01b      	beq.n	800e752 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	7d1b      	ldrb	r3, [r3, #20]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d106      	bne.n	800e730 <tcp_process+0xa8>
 800e722:	4b84      	ldr	r3, [pc, #528]	; (800e934 <tcp_process+0x2ac>)
 800e724:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e728:	4988      	ldr	r1, [pc, #544]	; (800e94c <tcp_process+0x2c4>)
 800e72a:	4884      	ldr	r0, [pc, #528]	; (800e93c <tcp_process+0x2b4>)
 800e72c:	f006 fac4 	bl	8014cb8 <iprintf>
      recv_flags |= TF_RESET;
 800e730:	4b87      	ldr	r3, [pc, #540]	; (800e950 <tcp_process+0x2c8>)
 800e732:	781b      	ldrb	r3, [r3, #0]
 800e734:	f043 0308 	orr.w	r3, r3, #8
 800e738:	b2da      	uxtb	r2, r3
 800e73a:	4b85      	ldr	r3, [pc, #532]	; (800e950 <tcp_process+0x2c8>)
 800e73c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	8b5b      	ldrh	r3, [r3, #26]
 800e742:	f023 0301 	bic.w	r3, r3, #1
 800e746:	b29a      	uxth	r2, r3
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e74c:	f06f 030d 	mvn.w	r3, #13
 800e750:	e37a      	b.n	800ee48 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e752:	2300      	movs	r3, #0
 800e754:	e378      	b.n	800ee48 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e756:	4b7a      	ldr	r3, [pc, #488]	; (800e940 <tcp_process+0x2b8>)
 800e758:	781b      	ldrb	r3, [r3, #0]
 800e75a:	f003 0302 	and.w	r3, r3, #2
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d010      	beq.n	800e784 <tcp_process+0xfc>
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	7d1b      	ldrb	r3, [r3, #20]
 800e766:	2b02      	cmp	r3, #2
 800e768:	d00c      	beq.n	800e784 <tcp_process+0xfc>
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	7d1b      	ldrb	r3, [r3, #20]
 800e76e:	2b03      	cmp	r3, #3
 800e770:	d008      	beq.n	800e784 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	8b5b      	ldrh	r3, [r3, #26]
 800e776:	f043 0302 	orr.w	r3, r3, #2
 800e77a:	b29a      	uxth	r2, r3
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e780:	2300      	movs	r3, #0
 800e782:	e361      	b.n	800ee48 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	8b5b      	ldrh	r3, [r3, #26]
 800e788:	f003 0310 	and.w	r3, r3, #16
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d103      	bne.n	800e798 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e790:	4b70      	ldr	r3, [pc, #448]	; (800e954 <tcp_process+0x2cc>)
 800e792:	681a      	ldr	r2, [r3, #0]
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	2200      	movs	r2, #0
 800e79c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f001 fc2d 	bl	8010008 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	7d1b      	ldrb	r3, [r3, #20]
 800e7b2:	3b02      	subs	r3, #2
 800e7b4:	2b07      	cmp	r3, #7
 800e7b6:	f200 8337 	bhi.w	800ee28 <tcp_process+0x7a0>
 800e7ba:	a201      	add	r2, pc, #4	; (adr r2, 800e7c0 <tcp_process+0x138>)
 800e7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7c0:	0800e7e1 	.word	0x0800e7e1
 800e7c4:	0800ea11 	.word	0x0800ea11
 800e7c8:	0800eb89 	.word	0x0800eb89
 800e7cc:	0800ebb3 	.word	0x0800ebb3
 800e7d0:	0800ecd7 	.word	0x0800ecd7
 800e7d4:	0800eb89 	.word	0x0800eb89
 800e7d8:	0800ed63 	.word	0x0800ed63
 800e7dc:	0800edf3 	.word	0x0800edf3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e7e0:	4b57      	ldr	r3, [pc, #348]	; (800e940 <tcp_process+0x2b8>)
 800e7e2:	781b      	ldrb	r3, [r3, #0]
 800e7e4:	f003 0310 	and.w	r3, r3, #16
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	f000 80e4 	beq.w	800e9b6 <tcp_process+0x32e>
 800e7ee:	4b54      	ldr	r3, [pc, #336]	; (800e940 <tcp_process+0x2b8>)
 800e7f0:	781b      	ldrb	r3, [r3, #0]
 800e7f2:	f003 0302 	and.w	r3, r3, #2
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	f000 80dd 	beq.w	800e9b6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e800:	1c5a      	adds	r2, r3, #1
 800e802:	4b50      	ldr	r3, [pc, #320]	; (800e944 <tcp_process+0x2bc>)
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	429a      	cmp	r2, r3
 800e808:	f040 80d5 	bne.w	800e9b6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e80c:	4b4e      	ldr	r3, [pc, #312]	; (800e948 <tcp_process+0x2c0>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	1c5a      	adds	r2, r3, #1
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800e81e:	4b49      	ldr	r3, [pc, #292]	; (800e944 <tcp_process+0x2bc>)
 800e820:	681a      	ldr	r2, [r3, #0]
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e826:	4b4c      	ldr	r3, [pc, #304]	; (800e958 <tcp_process+0x2d0>)
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	89db      	ldrh	r3, [r3, #14]
 800e82c:	b29a      	uxth	r2, r3
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e840:	4b41      	ldr	r3, [pc, #260]	; (800e948 <tcp_process+0x2c0>)
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	1e5a      	subs	r2, r3, #1
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	2204      	movs	r2, #4
 800e84e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	3304      	adds	r3, #4
 800e858:	4618      	mov	r0, r3
 800e85a:	f004 ff6d 	bl	8013738 <ip4_route>
 800e85e:	4601      	mov	r1, r0
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	3304      	adds	r3, #4
 800e864:	461a      	mov	r2, r3
 800e866:	4620      	mov	r0, r4
 800e868:	f7ff f88e 	bl	800d988 <tcp_eff_send_mss_netif>
 800e86c:	4603      	mov	r3, r0
 800e86e:	461a      	mov	r2, r3
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e878:	009a      	lsls	r2, r3, #2
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e87e:	005b      	lsls	r3, r3, #1
 800e880:	f241 111c 	movw	r1, #4380	; 0x111c
 800e884:	428b      	cmp	r3, r1
 800e886:	bf38      	it	cc
 800e888:	460b      	movcc	r3, r1
 800e88a:	429a      	cmp	r2, r3
 800e88c:	d204      	bcs.n	800e898 <tcp_process+0x210>
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e892:	009b      	lsls	r3, r3, #2
 800e894:	b29b      	uxth	r3, r3
 800e896:	e00d      	b.n	800e8b4 <tcp_process+0x22c>
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e89c:	005b      	lsls	r3, r3, #1
 800e89e:	f241 121c 	movw	r2, #4380	; 0x111c
 800e8a2:	4293      	cmp	r3, r2
 800e8a4:	d904      	bls.n	800e8b0 <tcp_process+0x228>
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8aa:	005b      	lsls	r3, r3, #1
 800e8ac:	b29b      	uxth	r3, r3
 800e8ae:	e001      	b.n	800e8b4 <tcp_process+0x22c>
 800e8b0:	f241 131c 	movw	r3, #4380	; 0x111c
 800e8b4:	687a      	ldr	r2, [r7, #4]
 800e8b6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d106      	bne.n	800e8d2 <tcp_process+0x24a>
 800e8c4:	4b1b      	ldr	r3, [pc, #108]	; (800e934 <tcp_process+0x2ac>)
 800e8c6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e8ca:	4924      	ldr	r1, [pc, #144]	; (800e95c <tcp_process+0x2d4>)
 800e8cc:	481b      	ldr	r0, [pc, #108]	; (800e93c <tcp_process+0x2b4>)
 800e8ce:	f006 f9f3 	bl	8014cb8 <iprintf>
        --pcb->snd_queuelen;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e8d8:	3b01      	subs	r3, #1
 800e8da:	b29a      	uxth	r2, r3
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8e6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e8e8:	69fb      	ldr	r3, [r7, #28]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d111      	bne.n	800e912 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8f2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e8f4:	69fb      	ldr	r3, [r7, #28]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d106      	bne.n	800e908 <tcp_process+0x280>
 800e8fa:	4b0e      	ldr	r3, [pc, #56]	; (800e934 <tcp_process+0x2ac>)
 800e8fc:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e900:	4917      	ldr	r1, [pc, #92]	; (800e960 <tcp_process+0x2d8>)
 800e902:	480e      	ldr	r0, [pc, #56]	; (800e93c <tcp_process+0x2b4>)
 800e904:	f006 f9d8 	bl	8014cb8 <iprintf>
          pcb->unsent = rseg->next;
 800e908:	69fb      	ldr	r3, [r7, #28]
 800e90a:	681a      	ldr	r2, [r3, #0]
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	66da      	str	r2, [r3, #108]	; 0x6c
 800e910:	e003      	b.n	800e91a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800e912:	69fb      	ldr	r3, [r7, #28]
 800e914:	681a      	ldr	r2, [r3, #0]
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800e91a:	69f8      	ldr	r0, [r7, #28]
 800e91c:	f7fe fc57 	bl	800d1ce <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e924:	2b00      	cmp	r3, #0
 800e926:	d11d      	bne.n	800e964 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e92e:	861a      	strh	r2, [r3, #48]	; 0x30
 800e930:	e01f      	b.n	800e972 <tcp_process+0x2ea>
 800e932:	bf00      	nop
 800e934:	08017064 	.word	0x08017064
 800e938:	0801729c 	.word	0x0801729c
 800e93c:	080170b0 	.word	0x080170b0
 800e940:	24000120 	.word	0x24000120
 800e944:	24000118 	.word	0x24000118
 800e948:	24000114 	.word	0x24000114
 800e94c:	080172b8 	.word	0x080172b8
 800e950:	24000121 	.word	0x24000121
 800e954:	24003618 	.word	0x24003618
 800e958:	24000104 	.word	0x24000104
 800e95c:	080172d8 	.word	0x080172d8
 800e960:	080172f0 	.word	0x080172f0
        } else {
          pcb->rtime = 0;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2200      	movs	r2, #0
 800e968:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	2200      	movs	r2, #0
 800e96e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d00a      	beq.n	800e992 <tcp_process+0x30a>
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e982:	687a      	ldr	r2, [r7, #4]
 800e984:	6910      	ldr	r0, [r2, #16]
 800e986:	2200      	movs	r2, #0
 800e988:	6879      	ldr	r1, [r7, #4]
 800e98a:	4798      	blx	r3
 800e98c:	4603      	mov	r3, r0
 800e98e:	76bb      	strb	r3, [r7, #26]
 800e990:	e001      	b.n	800e996 <tcp_process+0x30e>
 800e992:	2300      	movs	r3, #0
 800e994:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e996:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e99a:	f113 0f0d 	cmn.w	r3, #13
 800e99e:	d102      	bne.n	800e9a6 <tcp_process+0x31e>
          return ERR_ABRT;
 800e9a0:	f06f 030c 	mvn.w	r3, #12
 800e9a4:	e250      	b.n	800ee48 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	8b5b      	ldrh	r3, [r3, #26]
 800e9aa:	f043 0302 	orr.w	r3, r3, #2
 800e9ae:	b29a      	uxth	r2, r3
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e9b4:	e23a      	b.n	800ee2c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e9b6:	4b9d      	ldr	r3, [pc, #628]	; (800ec2c <tcp_process+0x5a4>)
 800e9b8:	781b      	ldrb	r3, [r3, #0]
 800e9ba:	f003 0310 	and.w	r3, r3, #16
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	f000 8234 	beq.w	800ee2c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e9c4:	4b9a      	ldr	r3, [pc, #616]	; (800ec30 <tcp_process+0x5a8>)
 800e9c6:	6819      	ldr	r1, [r3, #0]
 800e9c8:	4b9a      	ldr	r3, [pc, #616]	; (800ec34 <tcp_process+0x5ac>)
 800e9ca:	881b      	ldrh	r3, [r3, #0]
 800e9cc:	461a      	mov	r2, r3
 800e9ce:	4b9a      	ldr	r3, [pc, #616]	; (800ec38 <tcp_process+0x5b0>)
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e9d4:	4b99      	ldr	r3, [pc, #612]	; (800ec3c <tcp_process+0x5b4>)
 800e9d6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e9d8:	885b      	ldrh	r3, [r3, #2]
 800e9da:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e9dc:	4a97      	ldr	r2, [pc, #604]	; (800ec3c <tcp_process+0x5b4>)
 800e9de:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e9e0:	8812      	ldrh	r2, [r2, #0]
 800e9e2:	b292      	uxth	r2, r2
 800e9e4:	9202      	str	r2, [sp, #8]
 800e9e6:	9301      	str	r3, [sp, #4]
 800e9e8:	4b95      	ldr	r3, [pc, #596]	; (800ec40 <tcp_process+0x5b8>)
 800e9ea:	9300      	str	r3, [sp, #0]
 800e9ec:	4b95      	ldr	r3, [pc, #596]	; (800ec44 <tcp_process+0x5bc>)
 800e9ee:	4602      	mov	r2, r0
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	f003 f8db 	bl	8011bac <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e9fc:	2b05      	cmp	r3, #5
 800e9fe:	f200 8215 	bhi.w	800ee2c <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2200      	movs	r2, #0
 800ea06:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f002 fea5 	bl	8011758 <tcp_rexmit_rto>
      break;
 800ea0e:	e20d      	b.n	800ee2c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ea10:	4b86      	ldr	r3, [pc, #536]	; (800ec2c <tcp_process+0x5a4>)
 800ea12:	781b      	ldrb	r3, [r3, #0]
 800ea14:	f003 0310 	and.w	r3, r3, #16
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	f000 80a1 	beq.w	800eb60 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ea1e:	4b84      	ldr	r3, [pc, #528]	; (800ec30 <tcp_process+0x5a8>)
 800ea20:	681a      	ldr	r2, [r3, #0]
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea26:	1ad3      	subs	r3, r2, r3
 800ea28:	3b01      	subs	r3, #1
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	db7e      	blt.n	800eb2c <tcp_process+0x4a4>
 800ea2e:	4b80      	ldr	r3, [pc, #512]	; (800ec30 <tcp_process+0x5a8>)
 800ea30:	681a      	ldr	r2, [r3, #0]
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea36:	1ad3      	subs	r3, r2, r3
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	dc77      	bgt.n	800eb2c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2204      	movs	r2, #4
 800ea40:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d102      	bne.n	800ea50 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ea4a:	23fa      	movs	r3, #250	; 0xfa
 800ea4c:	76bb      	strb	r3, [r7, #26]
 800ea4e:	e01d      	b.n	800ea8c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea54:	699b      	ldr	r3, [r3, #24]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d106      	bne.n	800ea68 <tcp_process+0x3e0>
 800ea5a:	4b7b      	ldr	r3, [pc, #492]	; (800ec48 <tcp_process+0x5c0>)
 800ea5c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ea60:	497a      	ldr	r1, [pc, #488]	; (800ec4c <tcp_process+0x5c4>)
 800ea62:	487b      	ldr	r0, [pc, #492]	; (800ec50 <tcp_process+0x5c8>)
 800ea64:	f006 f928 	bl	8014cb8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea6c:	699b      	ldr	r3, [r3, #24]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d00a      	beq.n	800ea88 <tcp_process+0x400>
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea76:	699b      	ldr	r3, [r3, #24]
 800ea78:	687a      	ldr	r2, [r7, #4]
 800ea7a:	6910      	ldr	r0, [r2, #16]
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	6879      	ldr	r1, [r7, #4]
 800ea80:	4798      	blx	r3
 800ea82:	4603      	mov	r3, r0
 800ea84:	76bb      	strb	r3, [r7, #26]
 800ea86:	e001      	b.n	800ea8c <tcp_process+0x404>
 800ea88:	23f0      	movs	r3, #240	; 0xf0
 800ea8a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ea8c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d00a      	beq.n	800eaaa <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ea94:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ea98:	f113 0f0d 	cmn.w	r3, #13
 800ea9c:	d002      	beq.n	800eaa4 <tcp_process+0x41c>
              tcp_abort(pcb);
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f7fd fcf0 	bl	800c484 <tcp_abort>
            }
            return ERR_ABRT;
 800eaa4:	f06f 030c 	mvn.w	r3, #12
 800eaa8:	e1ce      	b.n	800ee48 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f000 fae0 	bl	800f070 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800eab0:	4b68      	ldr	r3, [pc, #416]	; (800ec54 <tcp_process+0x5cc>)
 800eab2:	881b      	ldrh	r3, [r3, #0]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d005      	beq.n	800eac4 <tcp_process+0x43c>
            recv_acked--;
 800eab8:	4b66      	ldr	r3, [pc, #408]	; (800ec54 <tcp_process+0x5cc>)
 800eaba:	881b      	ldrh	r3, [r3, #0]
 800eabc:	3b01      	subs	r3, #1
 800eabe:	b29a      	uxth	r2, r3
 800eac0:	4b64      	ldr	r3, [pc, #400]	; (800ec54 <tcp_process+0x5cc>)
 800eac2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eac8:	009a      	lsls	r2, r3, #2
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eace:	005b      	lsls	r3, r3, #1
 800ead0:	f241 111c 	movw	r1, #4380	; 0x111c
 800ead4:	428b      	cmp	r3, r1
 800ead6:	bf38      	it	cc
 800ead8:	460b      	movcc	r3, r1
 800eada:	429a      	cmp	r2, r3
 800eadc:	d204      	bcs.n	800eae8 <tcp_process+0x460>
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eae2:	009b      	lsls	r3, r3, #2
 800eae4:	b29b      	uxth	r3, r3
 800eae6:	e00d      	b.n	800eb04 <tcp_process+0x47c>
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eaec:	005b      	lsls	r3, r3, #1
 800eaee:	f241 121c 	movw	r2, #4380	; 0x111c
 800eaf2:	4293      	cmp	r3, r2
 800eaf4:	d904      	bls.n	800eb00 <tcp_process+0x478>
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eafa:	005b      	lsls	r3, r3, #1
 800eafc:	b29b      	uxth	r3, r3
 800eafe:	e001      	b.n	800eb04 <tcp_process+0x47c>
 800eb00:	f241 131c 	movw	r3, #4380	; 0x111c
 800eb04:	687a      	ldr	r2, [r7, #4]
 800eb06:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800eb0a:	4b53      	ldr	r3, [pc, #332]	; (800ec58 <tcp_process+0x5d0>)
 800eb0c:	781b      	ldrb	r3, [r3, #0]
 800eb0e:	f003 0320 	and.w	r3, r3, #32
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d037      	beq.n	800eb86 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	8b5b      	ldrh	r3, [r3, #26]
 800eb1a:	f043 0302 	orr.w	r3, r3, #2
 800eb1e:	b29a      	uxth	r2, r3
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2207      	movs	r2, #7
 800eb28:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800eb2a:	e02c      	b.n	800eb86 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb2c:	4b40      	ldr	r3, [pc, #256]	; (800ec30 <tcp_process+0x5a8>)
 800eb2e:	6819      	ldr	r1, [r3, #0]
 800eb30:	4b40      	ldr	r3, [pc, #256]	; (800ec34 <tcp_process+0x5ac>)
 800eb32:	881b      	ldrh	r3, [r3, #0]
 800eb34:	461a      	mov	r2, r3
 800eb36:	4b40      	ldr	r3, [pc, #256]	; (800ec38 <tcp_process+0x5b0>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb3c:	4b3f      	ldr	r3, [pc, #252]	; (800ec3c <tcp_process+0x5b4>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb40:	885b      	ldrh	r3, [r3, #2]
 800eb42:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb44:	4a3d      	ldr	r2, [pc, #244]	; (800ec3c <tcp_process+0x5b4>)
 800eb46:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb48:	8812      	ldrh	r2, [r2, #0]
 800eb4a:	b292      	uxth	r2, r2
 800eb4c:	9202      	str	r2, [sp, #8]
 800eb4e:	9301      	str	r3, [sp, #4]
 800eb50:	4b3b      	ldr	r3, [pc, #236]	; (800ec40 <tcp_process+0x5b8>)
 800eb52:	9300      	str	r3, [sp, #0]
 800eb54:	4b3b      	ldr	r3, [pc, #236]	; (800ec44 <tcp_process+0x5bc>)
 800eb56:	4602      	mov	r2, r0
 800eb58:	6878      	ldr	r0, [r7, #4]
 800eb5a:	f003 f827 	bl	8011bac <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800eb5e:	e167      	b.n	800ee30 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800eb60:	4b32      	ldr	r3, [pc, #200]	; (800ec2c <tcp_process+0x5a4>)
 800eb62:	781b      	ldrb	r3, [r3, #0]
 800eb64:	f003 0302 	and.w	r3, r3, #2
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	f000 8161 	beq.w	800ee30 <tcp_process+0x7a8>
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb72:	1e5a      	subs	r2, r3, #1
 800eb74:	4b30      	ldr	r3, [pc, #192]	; (800ec38 <tcp_process+0x5b0>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	429a      	cmp	r2, r3
 800eb7a:	f040 8159 	bne.w	800ee30 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800eb7e:	6878      	ldr	r0, [r7, #4]
 800eb80:	f002 fe0c 	bl	801179c <tcp_rexmit>
      break;
 800eb84:	e154      	b.n	800ee30 <tcp_process+0x7a8>
 800eb86:	e153      	b.n	800ee30 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800eb88:	6878      	ldr	r0, [r7, #4]
 800eb8a:	f000 fa71 	bl	800f070 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800eb8e:	4b32      	ldr	r3, [pc, #200]	; (800ec58 <tcp_process+0x5d0>)
 800eb90:	781b      	ldrb	r3, [r3, #0]
 800eb92:	f003 0320 	and.w	r3, r3, #32
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	f000 814c 	beq.w	800ee34 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	8b5b      	ldrh	r3, [r3, #26]
 800eba0:	f043 0302 	orr.w	r3, r3, #2
 800eba4:	b29a      	uxth	r2, r3
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2207      	movs	r2, #7
 800ebae:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ebb0:	e140      	b.n	800ee34 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ebb2:	6878      	ldr	r0, [r7, #4]
 800ebb4:	f000 fa5c 	bl	800f070 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ebb8:	4b27      	ldr	r3, [pc, #156]	; (800ec58 <tcp_process+0x5d0>)
 800ebba:	781b      	ldrb	r3, [r3, #0]
 800ebbc:	f003 0320 	and.w	r3, r3, #32
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d071      	beq.n	800eca8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ebc4:	4b19      	ldr	r3, [pc, #100]	; (800ec2c <tcp_process+0x5a4>)
 800ebc6:	781b      	ldrb	r3, [r3, #0]
 800ebc8:	f003 0310 	and.w	r3, r3, #16
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d060      	beq.n	800ec92 <tcp_process+0x60a>
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ebd4:	4b16      	ldr	r3, [pc, #88]	; (800ec30 <tcp_process+0x5a8>)
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	429a      	cmp	r2, r3
 800ebda:	d15a      	bne.n	800ec92 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d156      	bne.n	800ec92 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	8b5b      	ldrh	r3, [r3, #26]
 800ebe8:	f043 0302 	orr.w	r3, r3, #2
 800ebec:	b29a      	uxth	r2, r3
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	f7fe fdbe 	bl	800d774 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ebf8:	4b18      	ldr	r3, [pc, #96]	; (800ec5c <tcp_process+0x5d4>)
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	687a      	ldr	r2, [r7, #4]
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	d105      	bne.n	800ec0e <tcp_process+0x586>
 800ec02:	4b16      	ldr	r3, [pc, #88]	; (800ec5c <tcp_process+0x5d4>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	68db      	ldr	r3, [r3, #12]
 800ec08:	4a14      	ldr	r2, [pc, #80]	; (800ec5c <tcp_process+0x5d4>)
 800ec0a:	6013      	str	r3, [r2, #0]
 800ec0c:	e02e      	b.n	800ec6c <tcp_process+0x5e4>
 800ec0e:	4b13      	ldr	r3, [pc, #76]	; (800ec5c <tcp_process+0x5d4>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	617b      	str	r3, [r7, #20]
 800ec14:	e027      	b.n	800ec66 <tcp_process+0x5de>
 800ec16:	697b      	ldr	r3, [r7, #20]
 800ec18:	68db      	ldr	r3, [r3, #12]
 800ec1a:	687a      	ldr	r2, [r7, #4]
 800ec1c:	429a      	cmp	r2, r3
 800ec1e:	d11f      	bne.n	800ec60 <tcp_process+0x5d8>
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	68da      	ldr	r2, [r3, #12]
 800ec24:	697b      	ldr	r3, [r7, #20]
 800ec26:	60da      	str	r2, [r3, #12]
 800ec28:	e020      	b.n	800ec6c <tcp_process+0x5e4>
 800ec2a:	bf00      	nop
 800ec2c:	24000120 	.word	0x24000120
 800ec30:	24000118 	.word	0x24000118
 800ec34:	2400011e 	.word	0x2400011e
 800ec38:	24000114 	.word	0x24000114
 800ec3c:	24000104 	.word	0x24000104
 800ec40:	24000734 	.word	0x24000734
 800ec44:	24000738 	.word	0x24000738
 800ec48:	08017064 	.word	0x08017064
 800ec4c:	08017304 	.word	0x08017304
 800ec50:	080170b0 	.word	0x080170b0
 800ec54:	2400011c 	.word	0x2400011c
 800ec58:	24000121 	.word	0x24000121
 800ec5c:	24003614 	.word	0x24003614
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	68db      	ldr	r3, [r3, #12]
 800ec64:	617b      	str	r3, [r7, #20]
 800ec66:	697b      	ldr	r3, [r7, #20]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d1d4      	bne.n	800ec16 <tcp_process+0x58e>
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2200      	movs	r2, #0
 800ec70:	60da      	str	r2, [r3, #12]
 800ec72:	4b77      	ldr	r3, [pc, #476]	; (800ee50 <tcp_process+0x7c8>)
 800ec74:	2201      	movs	r2, #1
 800ec76:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	220a      	movs	r2, #10
 800ec7c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ec7e:	4b75      	ldr	r3, [pc, #468]	; (800ee54 <tcp_process+0x7cc>)
 800ec80:	681a      	ldr	r2, [r3, #0]
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	60da      	str	r2, [r3, #12]
 800ec86:	4a73      	ldr	r2, [pc, #460]	; (800ee54 <tcp_process+0x7cc>)
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	6013      	str	r3, [r2, #0]
 800ec8c:	f003 f950 	bl	8011f30 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ec90:	e0d2      	b.n	800ee38 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	8b5b      	ldrh	r3, [r3, #26]
 800ec96:	f043 0302 	orr.w	r3, r3, #2
 800ec9a:	b29a      	uxth	r2, r3
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2208      	movs	r2, #8
 800eca4:	751a      	strb	r2, [r3, #20]
      break;
 800eca6:	e0c7      	b.n	800ee38 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eca8:	4b6b      	ldr	r3, [pc, #428]	; (800ee58 <tcp_process+0x7d0>)
 800ecaa:	781b      	ldrb	r3, [r3, #0]
 800ecac:	f003 0310 	and.w	r3, r3, #16
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	f000 80c1 	beq.w	800ee38 <tcp_process+0x7b0>
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ecba:	4b68      	ldr	r3, [pc, #416]	; (800ee5c <tcp_process+0x7d4>)
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	429a      	cmp	r2, r3
 800ecc0:	f040 80ba 	bne.w	800ee38 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	f040 80b5 	bne.w	800ee38 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	2206      	movs	r2, #6
 800ecd2:	751a      	strb	r2, [r3, #20]
      break;
 800ecd4:	e0b0      	b.n	800ee38 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ecd6:	6878      	ldr	r0, [r7, #4]
 800ecd8:	f000 f9ca 	bl	800f070 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ecdc:	4b60      	ldr	r3, [pc, #384]	; (800ee60 <tcp_process+0x7d8>)
 800ecde:	781b      	ldrb	r3, [r3, #0]
 800ece0:	f003 0320 	and.w	r3, r3, #32
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	f000 80a9 	beq.w	800ee3c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	8b5b      	ldrh	r3, [r3, #26]
 800ecee:	f043 0302 	orr.w	r3, r3, #2
 800ecf2:	b29a      	uxth	r2, r3
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f7fe fd3b 	bl	800d774 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ecfe:	4b59      	ldr	r3, [pc, #356]	; (800ee64 <tcp_process+0x7dc>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	687a      	ldr	r2, [r7, #4]
 800ed04:	429a      	cmp	r2, r3
 800ed06:	d105      	bne.n	800ed14 <tcp_process+0x68c>
 800ed08:	4b56      	ldr	r3, [pc, #344]	; (800ee64 <tcp_process+0x7dc>)
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	68db      	ldr	r3, [r3, #12]
 800ed0e:	4a55      	ldr	r2, [pc, #340]	; (800ee64 <tcp_process+0x7dc>)
 800ed10:	6013      	str	r3, [r2, #0]
 800ed12:	e013      	b.n	800ed3c <tcp_process+0x6b4>
 800ed14:	4b53      	ldr	r3, [pc, #332]	; (800ee64 <tcp_process+0x7dc>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	613b      	str	r3, [r7, #16]
 800ed1a:	e00c      	b.n	800ed36 <tcp_process+0x6ae>
 800ed1c:	693b      	ldr	r3, [r7, #16]
 800ed1e:	68db      	ldr	r3, [r3, #12]
 800ed20:	687a      	ldr	r2, [r7, #4]
 800ed22:	429a      	cmp	r2, r3
 800ed24:	d104      	bne.n	800ed30 <tcp_process+0x6a8>
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	68da      	ldr	r2, [r3, #12]
 800ed2a:	693b      	ldr	r3, [r7, #16]
 800ed2c:	60da      	str	r2, [r3, #12]
 800ed2e:	e005      	b.n	800ed3c <tcp_process+0x6b4>
 800ed30:	693b      	ldr	r3, [r7, #16]
 800ed32:	68db      	ldr	r3, [r3, #12]
 800ed34:	613b      	str	r3, [r7, #16]
 800ed36:	693b      	ldr	r3, [r7, #16]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d1ef      	bne.n	800ed1c <tcp_process+0x694>
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2200      	movs	r2, #0
 800ed40:	60da      	str	r2, [r3, #12]
 800ed42:	4b43      	ldr	r3, [pc, #268]	; (800ee50 <tcp_process+0x7c8>)
 800ed44:	2201      	movs	r2, #1
 800ed46:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	220a      	movs	r2, #10
 800ed4c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ed4e:	4b41      	ldr	r3, [pc, #260]	; (800ee54 <tcp_process+0x7cc>)
 800ed50:	681a      	ldr	r2, [r3, #0]
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	60da      	str	r2, [r3, #12]
 800ed56:	4a3f      	ldr	r2, [pc, #252]	; (800ee54 <tcp_process+0x7cc>)
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	6013      	str	r3, [r2, #0]
 800ed5c:	f003 f8e8 	bl	8011f30 <tcp_timer_needed>
      }
      break;
 800ed60:	e06c      	b.n	800ee3c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ed62:	6878      	ldr	r0, [r7, #4]
 800ed64:	f000 f984 	bl	800f070 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ed68:	4b3b      	ldr	r3, [pc, #236]	; (800ee58 <tcp_process+0x7d0>)
 800ed6a:	781b      	ldrb	r3, [r3, #0]
 800ed6c:	f003 0310 	and.w	r3, r3, #16
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d065      	beq.n	800ee40 <tcp_process+0x7b8>
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ed78:	4b38      	ldr	r3, [pc, #224]	; (800ee5c <tcp_process+0x7d4>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	d15f      	bne.n	800ee40 <tcp_process+0x7b8>
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d15b      	bne.n	800ee40 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ed88:	6878      	ldr	r0, [r7, #4]
 800ed8a:	f7fe fcf3 	bl	800d774 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ed8e:	4b35      	ldr	r3, [pc, #212]	; (800ee64 <tcp_process+0x7dc>)
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	687a      	ldr	r2, [r7, #4]
 800ed94:	429a      	cmp	r2, r3
 800ed96:	d105      	bne.n	800eda4 <tcp_process+0x71c>
 800ed98:	4b32      	ldr	r3, [pc, #200]	; (800ee64 <tcp_process+0x7dc>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	68db      	ldr	r3, [r3, #12]
 800ed9e:	4a31      	ldr	r2, [pc, #196]	; (800ee64 <tcp_process+0x7dc>)
 800eda0:	6013      	str	r3, [r2, #0]
 800eda2:	e013      	b.n	800edcc <tcp_process+0x744>
 800eda4:	4b2f      	ldr	r3, [pc, #188]	; (800ee64 <tcp_process+0x7dc>)
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	60fb      	str	r3, [r7, #12]
 800edaa:	e00c      	b.n	800edc6 <tcp_process+0x73e>
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	68db      	ldr	r3, [r3, #12]
 800edb0:	687a      	ldr	r2, [r7, #4]
 800edb2:	429a      	cmp	r2, r3
 800edb4:	d104      	bne.n	800edc0 <tcp_process+0x738>
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	68da      	ldr	r2, [r3, #12]
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	60da      	str	r2, [r3, #12]
 800edbe:	e005      	b.n	800edcc <tcp_process+0x744>
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	68db      	ldr	r3, [r3, #12]
 800edc4:	60fb      	str	r3, [r7, #12]
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d1ef      	bne.n	800edac <tcp_process+0x724>
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2200      	movs	r2, #0
 800edd0:	60da      	str	r2, [r3, #12]
 800edd2:	4b1f      	ldr	r3, [pc, #124]	; (800ee50 <tcp_process+0x7c8>)
 800edd4:	2201      	movs	r2, #1
 800edd6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	220a      	movs	r2, #10
 800eddc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800edde:	4b1d      	ldr	r3, [pc, #116]	; (800ee54 <tcp_process+0x7cc>)
 800ede0:	681a      	ldr	r2, [r3, #0]
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	60da      	str	r2, [r3, #12]
 800ede6:	4a1b      	ldr	r2, [pc, #108]	; (800ee54 <tcp_process+0x7cc>)
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	6013      	str	r3, [r2, #0]
 800edec:	f003 f8a0 	bl	8011f30 <tcp_timer_needed>
      }
      break;
 800edf0:	e026      	b.n	800ee40 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800edf2:	6878      	ldr	r0, [r7, #4]
 800edf4:	f000 f93c 	bl	800f070 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800edf8:	4b17      	ldr	r3, [pc, #92]	; (800ee58 <tcp_process+0x7d0>)
 800edfa:	781b      	ldrb	r3, [r3, #0]
 800edfc:	f003 0310 	and.w	r3, r3, #16
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d01f      	beq.n	800ee44 <tcp_process+0x7bc>
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ee08:	4b14      	ldr	r3, [pc, #80]	; (800ee5c <tcp_process+0x7d4>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	429a      	cmp	r2, r3
 800ee0e:	d119      	bne.n	800ee44 <tcp_process+0x7bc>
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d115      	bne.n	800ee44 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ee18:	4b11      	ldr	r3, [pc, #68]	; (800ee60 <tcp_process+0x7d8>)
 800ee1a:	781b      	ldrb	r3, [r3, #0]
 800ee1c:	f043 0310 	orr.w	r3, r3, #16
 800ee20:	b2da      	uxtb	r2, r3
 800ee22:	4b0f      	ldr	r3, [pc, #60]	; (800ee60 <tcp_process+0x7d8>)
 800ee24:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ee26:	e00d      	b.n	800ee44 <tcp_process+0x7bc>
    default:
      break;
 800ee28:	bf00      	nop
 800ee2a:	e00c      	b.n	800ee46 <tcp_process+0x7be>
      break;
 800ee2c:	bf00      	nop
 800ee2e:	e00a      	b.n	800ee46 <tcp_process+0x7be>
      break;
 800ee30:	bf00      	nop
 800ee32:	e008      	b.n	800ee46 <tcp_process+0x7be>
      break;
 800ee34:	bf00      	nop
 800ee36:	e006      	b.n	800ee46 <tcp_process+0x7be>
      break;
 800ee38:	bf00      	nop
 800ee3a:	e004      	b.n	800ee46 <tcp_process+0x7be>
      break;
 800ee3c:	bf00      	nop
 800ee3e:	e002      	b.n	800ee46 <tcp_process+0x7be>
      break;
 800ee40:	bf00      	nop
 800ee42:	e000      	b.n	800ee46 <tcp_process+0x7be>
      break;
 800ee44:	bf00      	nop
  }
  return ERR_OK;
 800ee46:	2300      	movs	r3, #0
}
 800ee48:	4618      	mov	r0, r3
 800ee4a:	3724      	adds	r7, #36	; 0x24
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	bd90      	pop	{r4, r7, pc}
 800ee50:	24003610 	.word	0x24003610
 800ee54:	24003624 	.word	0x24003624
 800ee58:	24000120 	.word	0x24000120
 800ee5c:	24000118 	.word	0x24000118
 800ee60:	24000121 	.word	0x24000121
 800ee64:	24003614 	.word	0x24003614

0800ee68 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ee68:	b590      	push	{r4, r7, lr}
 800ee6a:	b085      	sub	sp, #20
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
 800ee70:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d106      	bne.n	800ee86 <tcp_oos_insert_segment+0x1e>
 800ee78:	4b3b      	ldr	r3, [pc, #236]	; (800ef68 <tcp_oos_insert_segment+0x100>)
 800ee7a:	f240 421f 	movw	r2, #1055	; 0x41f
 800ee7e:	493b      	ldr	r1, [pc, #236]	; (800ef6c <tcp_oos_insert_segment+0x104>)
 800ee80:	483b      	ldr	r0, [pc, #236]	; (800ef70 <tcp_oos_insert_segment+0x108>)
 800ee82:	f005 ff19 	bl	8014cb8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	68db      	ldr	r3, [r3, #12]
 800ee8a:	899b      	ldrh	r3, [r3, #12]
 800ee8c:	b29b      	uxth	r3, r3
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f7fb f94a 	bl	800a128 <lwip_htons>
 800ee94:	4603      	mov	r3, r0
 800ee96:	b2db      	uxtb	r3, r3
 800ee98:	f003 0301 	and.w	r3, r3, #1
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d028      	beq.n	800eef2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800eea0:	6838      	ldr	r0, [r7, #0]
 800eea2:	f7fe f97f 	bl	800d1a4 <tcp_segs_free>
    next = NULL;
 800eea6:	2300      	movs	r3, #0
 800eea8:	603b      	str	r3, [r7, #0]
 800eeaa:	e056      	b.n	800ef5a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	68db      	ldr	r3, [r3, #12]
 800eeb0:	899b      	ldrh	r3, [r3, #12]
 800eeb2:	b29b      	uxth	r3, r3
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	f7fb f937 	bl	800a128 <lwip_htons>
 800eeba:	4603      	mov	r3, r0
 800eebc:	b2db      	uxtb	r3, r3
 800eebe:	f003 0301 	and.w	r3, r3, #1
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d00d      	beq.n	800eee2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	68db      	ldr	r3, [r3, #12]
 800eeca:	899b      	ldrh	r3, [r3, #12]
 800eecc:	b29c      	uxth	r4, r3
 800eece:	2001      	movs	r0, #1
 800eed0:	f7fb f92a 	bl	800a128 <lwip_htons>
 800eed4:	4603      	mov	r3, r0
 800eed6:	461a      	mov	r2, r3
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	68db      	ldr	r3, [r3, #12]
 800eedc:	4322      	orrs	r2, r4
 800eede:	b292      	uxth	r2, r2
 800eee0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800eeec:	68f8      	ldr	r0, [r7, #12]
 800eeee:	f7fe f96e 	bl	800d1ce <tcp_seg_free>
    while (next &&
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d00e      	beq.n	800ef16 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	891b      	ldrh	r3, [r3, #8]
 800eefc:	461a      	mov	r2, r3
 800eefe:	4b1d      	ldr	r3, [pc, #116]	; (800ef74 <tcp_oos_insert_segment+0x10c>)
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	441a      	add	r2, r3
 800ef04:	683b      	ldr	r3, [r7, #0]
 800ef06:	68db      	ldr	r3, [r3, #12]
 800ef08:	685b      	ldr	r3, [r3, #4]
 800ef0a:	6839      	ldr	r1, [r7, #0]
 800ef0c:	8909      	ldrh	r1, [r1, #8]
 800ef0e:	440b      	add	r3, r1
 800ef10:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	daca      	bge.n	800eeac <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d01e      	beq.n	800ef5a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	891b      	ldrh	r3, [r3, #8]
 800ef20:	461a      	mov	r2, r3
 800ef22:	4b14      	ldr	r3, [pc, #80]	; (800ef74 <tcp_oos_insert_segment+0x10c>)
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	441a      	add	r2, r3
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	68db      	ldr	r3, [r3, #12]
 800ef2c:	685b      	ldr	r3, [r3, #4]
 800ef2e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	dd12      	ble.n	800ef5a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	68db      	ldr	r3, [r3, #12]
 800ef38:	685b      	ldr	r3, [r3, #4]
 800ef3a:	b29a      	uxth	r2, r3
 800ef3c:	4b0d      	ldr	r3, [pc, #52]	; (800ef74 <tcp_oos_insert_segment+0x10c>)
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	b29b      	uxth	r3, r3
 800ef42:	1ad3      	subs	r3, r2, r3
 800ef44:	b29a      	uxth	r2, r3
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	685a      	ldr	r2, [r3, #4]
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	891b      	ldrh	r3, [r3, #8]
 800ef52:	4619      	mov	r1, r3
 800ef54:	4610      	mov	r0, r2
 800ef56:	f7fc fb77 	bl	800b648 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	683a      	ldr	r2, [r7, #0]
 800ef5e:	601a      	str	r2, [r3, #0]
}
 800ef60:	bf00      	nop
 800ef62:	3714      	adds	r7, #20
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd90      	pop	{r4, r7, pc}
 800ef68:	08017064 	.word	0x08017064
 800ef6c:	08017324 	.word	0x08017324
 800ef70:	080170b0 	.word	0x080170b0
 800ef74:	24000114 	.word	0x24000114

0800ef78 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ef78:	b5b0      	push	{r4, r5, r7, lr}
 800ef7a:	b086      	sub	sp, #24
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	60f8      	str	r0, [r7, #12]
 800ef80:	60b9      	str	r1, [r7, #8]
 800ef82:	607a      	str	r2, [r7, #4]
 800ef84:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ef86:	e03e      	b.n	800f006 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ef92:	697b      	ldr	r3, [r7, #20]
 800ef94:	685b      	ldr	r3, [r3, #4]
 800ef96:	4618      	mov	r0, r3
 800ef98:	f7fc fd64 	bl	800ba64 <pbuf_clen>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800efa6:	8a7a      	ldrh	r2, [r7, #18]
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d906      	bls.n	800efba <tcp_free_acked_segments+0x42>
 800efac:	4b2a      	ldr	r3, [pc, #168]	; (800f058 <tcp_free_acked_segments+0xe0>)
 800efae:	f240 4257 	movw	r2, #1111	; 0x457
 800efb2:	492a      	ldr	r1, [pc, #168]	; (800f05c <tcp_free_acked_segments+0xe4>)
 800efb4:	482a      	ldr	r0, [pc, #168]	; (800f060 <tcp_free_acked_segments+0xe8>)
 800efb6:	f005 fe7f 	bl	8014cb8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800efc0:	8a7b      	ldrh	r3, [r7, #18]
 800efc2:	1ad3      	subs	r3, r2, r3
 800efc4:	b29a      	uxth	r2, r3
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800efcc:	697b      	ldr	r3, [r7, #20]
 800efce:	891a      	ldrh	r2, [r3, #8]
 800efd0:	4b24      	ldr	r3, [pc, #144]	; (800f064 <tcp_free_acked_segments+0xec>)
 800efd2:	881b      	ldrh	r3, [r3, #0]
 800efd4:	4413      	add	r3, r2
 800efd6:	b29a      	uxth	r2, r3
 800efd8:	4b22      	ldr	r3, [pc, #136]	; (800f064 <tcp_free_acked_segments+0xec>)
 800efda:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800efdc:	6978      	ldr	r0, [r7, #20]
 800efde:	f7fe f8f6 	bl	800d1ce <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d00c      	beq.n	800f006 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800efec:	68bb      	ldr	r3, [r7, #8]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d109      	bne.n	800f006 <tcp_free_acked_segments+0x8e>
 800eff2:	683b      	ldr	r3, [r7, #0]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d106      	bne.n	800f006 <tcp_free_acked_segments+0x8e>
 800eff8:	4b17      	ldr	r3, [pc, #92]	; (800f058 <tcp_free_acked_segments+0xe0>)
 800effa:	f240 4261 	movw	r2, #1121	; 0x461
 800effe:	491a      	ldr	r1, [pc, #104]	; (800f068 <tcp_free_acked_segments+0xf0>)
 800f000:	4817      	ldr	r0, [pc, #92]	; (800f060 <tcp_free_acked_segments+0xe8>)
 800f002:	f005 fe59 	bl	8014cb8 <iprintf>
  while (seg_list != NULL &&
 800f006:	68bb      	ldr	r3, [r7, #8]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d020      	beq.n	800f04e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f00c:	68bb      	ldr	r3, [r7, #8]
 800f00e:	68db      	ldr	r3, [r3, #12]
 800f010:	685b      	ldr	r3, [r3, #4]
 800f012:	4618      	mov	r0, r3
 800f014:	f7fb f89d 	bl	800a152 <lwip_htonl>
 800f018:	4604      	mov	r4, r0
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	891b      	ldrh	r3, [r3, #8]
 800f01e:	461d      	mov	r5, r3
 800f020:	68bb      	ldr	r3, [r7, #8]
 800f022:	68db      	ldr	r3, [r3, #12]
 800f024:	899b      	ldrh	r3, [r3, #12]
 800f026:	b29b      	uxth	r3, r3
 800f028:	4618      	mov	r0, r3
 800f02a:	f7fb f87d 	bl	800a128 <lwip_htons>
 800f02e:	4603      	mov	r3, r0
 800f030:	b2db      	uxtb	r3, r3
 800f032:	f003 0303 	and.w	r3, r3, #3
 800f036:	2b00      	cmp	r3, #0
 800f038:	d001      	beq.n	800f03e <tcp_free_acked_segments+0xc6>
 800f03a:	2301      	movs	r3, #1
 800f03c:	e000      	b.n	800f040 <tcp_free_acked_segments+0xc8>
 800f03e:	2300      	movs	r3, #0
 800f040:	442b      	add	r3, r5
 800f042:	18e2      	adds	r2, r4, r3
 800f044:	4b09      	ldr	r3, [pc, #36]	; (800f06c <tcp_free_acked_segments+0xf4>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	dd9c      	ble.n	800ef88 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f04e:	68bb      	ldr	r3, [r7, #8]
}
 800f050:	4618      	mov	r0, r3
 800f052:	3718      	adds	r7, #24
 800f054:	46bd      	mov	sp, r7
 800f056:	bdb0      	pop	{r4, r5, r7, pc}
 800f058:	08017064 	.word	0x08017064
 800f05c:	0801734c 	.word	0x0801734c
 800f060:	080170b0 	.word	0x080170b0
 800f064:	2400011c 	.word	0x2400011c
 800f068:	08017374 	.word	0x08017374
 800f06c:	24000118 	.word	0x24000118

0800f070 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f070:	b5b0      	push	{r4, r5, r7, lr}
 800f072:	b094      	sub	sp, #80	; 0x50
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f078:	2300      	movs	r3, #0
 800f07a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d106      	bne.n	800f090 <tcp_receive+0x20>
 800f082:	4ba6      	ldr	r3, [pc, #664]	; (800f31c <tcp_receive+0x2ac>)
 800f084:	f240 427b 	movw	r2, #1147	; 0x47b
 800f088:	49a5      	ldr	r1, [pc, #660]	; (800f320 <tcp_receive+0x2b0>)
 800f08a:	48a6      	ldr	r0, [pc, #664]	; (800f324 <tcp_receive+0x2b4>)
 800f08c:	f005 fe14 	bl	8014cb8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	7d1b      	ldrb	r3, [r3, #20]
 800f094:	2b03      	cmp	r3, #3
 800f096:	d806      	bhi.n	800f0a6 <tcp_receive+0x36>
 800f098:	4ba0      	ldr	r3, [pc, #640]	; (800f31c <tcp_receive+0x2ac>)
 800f09a:	f240 427c 	movw	r2, #1148	; 0x47c
 800f09e:	49a2      	ldr	r1, [pc, #648]	; (800f328 <tcp_receive+0x2b8>)
 800f0a0:	48a0      	ldr	r0, [pc, #640]	; (800f324 <tcp_receive+0x2b4>)
 800f0a2:	f005 fe09 	bl	8014cb8 <iprintf>

  if (flags & TCP_ACK) {
 800f0a6:	4ba1      	ldr	r3, [pc, #644]	; (800f32c <tcp_receive+0x2bc>)
 800f0a8:	781b      	ldrb	r3, [r3, #0]
 800f0aa:	f003 0310 	and.w	r3, r3, #16
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	f000 8263 	beq.w	800f57a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f0ba:	461a      	mov	r2, r3
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f0c0:	4413      	add	r3, r2
 800f0c2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f0c8:	4b99      	ldr	r3, [pc, #612]	; (800f330 <tcp_receive+0x2c0>)
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	1ad3      	subs	r3, r2, r3
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	db1b      	blt.n	800f10a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f0d6:	4b96      	ldr	r3, [pc, #600]	; (800f330 <tcp_receive+0x2c0>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f0da:	429a      	cmp	r2, r3
 800f0dc:	d106      	bne.n	800f0ec <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f0e2:	4b94      	ldr	r3, [pc, #592]	; (800f334 <tcp_receive+0x2c4>)
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	1ad3      	subs	r3, r2, r3
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	db0e      	blt.n	800f10a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f0f0:	4b90      	ldr	r3, [pc, #576]	; (800f334 <tcp_receive+0x2c4>)
 800f0f2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f0f4:	429a      	cmp	r2, r3
 800f0f6:	d125      	bne.n	800f144 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f0f8:	4b8f      	ldr	r3, [pc, #572]	; (800f338 <tcp_receive+0x2c8>)
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	89db      	ldrh	r3, [r3, #14]
 800f0fe:	b29a      	uxth	r2, r3
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f106:	429a      	cmp	r2, r3
 800f108:	d91c      	bls.n	800f144 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f10a:	4b8b      	ldr	r3, [pc, #556]	; (800f338 <tcp_receive+0x2c8>)
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	89db      	ldrh	r3, [r3, #14]
 800f110:	b29a      	uxth	r2, r3
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f124:	429a      	cmp	r2, r3
 800f126:	d205      	bcs.n	800f134 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800f134:	4b7e      	ldr	r3, [pc, #504]	; (800f330 <tcp_receive+0x2c0>)
 800f136:	681a      	ldr	r2, [r3, #0]
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800f13c:	4b7d      	ldr	r3, [pc, #500]	; (800f334 <tcp_receive+0x2c4>)
 800f13e:	681a      	ldr	r2, [r3, #0]
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f144:	4b7b      	ldr	r3, [pc, #492]	; (800f334 <tcp_receive+0x2c4>)
 800f146:	681a      	ldr	r2, [r3, #0]
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f14c:	1ad3      	subs	r3, r2, r3
 800f14e:	2b00      	cmp	r3, #0
 800f150:	dc58      	bgt.n	800f204 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f152:	4b7a      	ldr	r3, [pc, #488]	; (800f33c <tcp_receive+0x2cc>)
 800f154:	881b      	ldrh	r3, [r3, #0]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d14b      	bne.n	800f1f2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f15e:	687a      	ldr	r2, [r7, #4]
 800f160:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f164:	4413      	add	r3, r2
 800f166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f168:	429a      	cmp	r2, r3
 800f16a:	d142      	bne.n	800f1f2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f172:	2b00      	cmp	r3, #0
 800f174:	db3d      	blt.n	800f1f2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f17a:	4b6e      	ldr	r3, [pc, #440]	; (800f334 <tcp_receive+0x2c4>)
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	429a      	cmp	r2, r3
 800f180:	d137      	bne.n	800f1f2 <tcp_receive+0x182>
              found_dupack = 1;
 800f182:	2301      	movs	r3, #1
 800f184:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f18c:	2bff      	cmp	r3, #255	; 0xff
 800f18e:	d007      	beq.n	800f1a0 <tcp_receive+0x130>
                ++pcb->dupacks;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f196:	3301      	adds	r3, #1
 800f198:	b2da      	uxtb	r2, r3
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f1a6:	2b03      	cmp	r3, #3
 800f1a8:	d91b      	bls.n	800f1e2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f1b4:	4413      	add	r3, r2
 800f1b6:	b29a      	uxth	r2, r3
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f1be:	429a      	cmp	r2, r3
 800f1c0:	d30a      	bcc.n	800f1d8 <tcp_receive+0x168>
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f1cc:	4413      	add	r3, r2
 800f1ce:	b29a      	uxth	r2, r3
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f1d6:	e004      	b.n	800f1e2 <tcp_receive+0x172>
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f1de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f1e8:	2b02      	cmp	r3, #2
 800f1ea:	d902      	bls.n	800f1f2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f1ec:	6878      	ldr	r0, [r7, #4]
 800f1ee:	f002 fb41 	bl	8011874 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f1f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	f040 8160 	bne.w	800f4ba <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f202:	e15a      	b.n	800f4ba <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f204:	4b4b      	ldr	r3, [pc, #300]	; (800f334 <tcp_receive+0x2c4>)
 800f206:	681a      	ldr	r2, [r3, #0]
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f20c:	1ad3      	subs	r3, r2, r3
 800f20e:	3b01      	subs	r3, #1
 800f210:	2b00      	cmp	r3, #0
 800f212:	f2c0 814d 	blt.w	800f4b0 <tcp_receive+0x440>
 800f216:	4b47      	ldr	r3, [pc, #284]	; (800f334 <tcp_receive+0x2c4>)
 800f218:	681a      	ldr	r2, [r3, #0]
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f21e:	1ad3      	subs	r3, r2, r3
 800f220:	2b00      	cmp	r3, #0
 800f222:	f300 8145 	bgt.w	800f4b0 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	8b5b      	ldrh	r3, [r3, #26]
 800f22a:	f003 0304 	and.w	r3, r3, #4
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d010      	beq.n	800f254 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	8b5b      	ldrh	r3, [r3, #26]
 800f236:	f023 0304 	bic.w	r3, r3, #4
 800f23a:	b29a      	uxth	r2, r3
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2200      	movs	r2, #0
 800f250:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	2200      	movs	r2, #0
 800f258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f262:	10db      	asrs	r3, r3, #3
 800f264:	b21b      	sxth	r3, r3
 800f266:	b29a      	uxth	r2, r3
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f26e:	b29b      	uxth	r3, r3
 800f270:	4413      	add	r3, r2
 800f272:	b29b      	uxth	r3, r3
 800f274:	b21a      	sxth	r2, r3
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f27c:	4b2d      	ldr	r3, [pc, #180]	; (800f334 <tcp_receive+0x2c4>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	b29a      	uxth	r2, r3
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f286:	b29b      	uxth	r3, r3
 800f288:	1ad3      	subs	r3, r2, r3
 800f28a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2200      	movs	r2, #0
 800f290:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f294:	4b27      	ldr	r3, [pc, #156]	; (800f334 <tcp_receive+0x2c4>)
 800f296:	681a      	ldr	r2, [r3, #0]
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	7d1b      	ldrb	r3, [r3, #20]
 800f2a0:	2b03      	cmp	r3, #3
 800f2a2:	f240 8096 	bls.w	800f3d2 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f2b2:	429a      	cmp	r2, r3
 800f2b4:	d244      	bcs.n	800f340 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	8b5b      	ldrh	r3, [r3, #26]
 800f2ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d001      	beq.n	800f2c6 <tcp_receive+0x256>
 800f2c2:	2301      	movs	r3, #1
 800f2c4:	e000      	b.n	800f2c8 <tcp_receive+0x258>
 800f2c6:	2302      	movs	r3, #2
 800f2c8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f2cc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f2d0:	b29a      	uxth	r2, r3
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f2d6:	fb12 f303 	smulbb	r3, r2, r3
 800f2da:	b29b      	uxth	r3, r3
 800f2dc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f2de:	4293      	cmp	r3, r2
 800f2e0:	bf28      	it	cs
 800f2e2:	4613      	movcs	r3, r2
 800f2e4:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f2ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f2ee:	4413      	add	r3, r2
 800f2f0:	b29a      	uxth	r2, r3
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f2f8:	429a      	cmp	r2, r3
 800f2fa:	d309      	bcc.n	800f310 <tcp_receive+0x2a0>
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f302:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f304:	4413      	add	r3, r2
 800f306:	b29a      	uxth	r2, r3
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f30e:	e060      	b.n	800f3d2 <tcp_receive+0x362>
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f316:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f31a:	e05a      	b.n	800f3d2 <tcp_receive+0x362>
 800f31c:	08017064 	.word	0x08017064
 800f320:	08017394 	.word	0x08017394
 800f324:	080170b0 	.word	0x080170b0
 800f328:	080173b0 	.word	0x080173b0
 800f32c:	24000120 	.word	0x24000120
 800f330:	24000114 	.word	0x24000114
 800f334:	24000118 	.word	0x24000118
 800f338:	24000104 	.word	0x24000104
 800f33c:	2400011e 	.word	0x2400011e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f346:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f348:	4413      	add	r3, r2
 800f34a:	b29a      	uxth	r2, r3
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f352:	429a      	cmp	r2, r3
 800f354:	d309      	bcc.n	800f36a <tcp_receive+0x2fa>
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f35c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f35e:	4413      	add	r3, r2
 800f360:	b29a      	uxth	r2, r3
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f368:	e004      	b.n	800f374 <tcp_receive+0x304>
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f370:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f380:	429a      	cmp	r2, r3
 800f382:	d326      	bcc.n	800f3d2 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f390:	1ad3      	subs	r3, r2, r3
 800f392:	b29a      	uxth	r2, r3
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3a4:	4413      	add	r3, r2
 800f3a6:	b29a      	uxth	r2, r3
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f3ae:	429a      	cmp	r2, r3
 800f3b0:	d30a      	bcc.n	800f3c8 <tcp_receive+0x358>
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3bc:	4413      	add	r3, r2
 800f3be:	b29a      	uxth	r2, r3
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f3c6:	e004      	b.n	800f3d2 <tcp_receive+0x362>
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f3ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3da:	4a98      	ldr	r2, [pc, #608]	; (800f63c <tcp_receive+0x5cc>)
 800f3dc:	6878      	ldr	r0, [r7, #4]
 800f3de:	f7ff fdcb 	bl	800ef78 <tcp_free_acked_segments>
 800f3e2:	4602      	mov	r2, r0
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3f0:	4a93      	ldr	r2, [pc, #588]	; (800f640 <tcp_receive+0x5d0>)
 800f3f2:	6878      	ldr	r0, [r7, #4]
 800f3f4:	f7ff fdc0 	bl	800ef78 <tcp_free_acked_segments>
 800f3f8:	4602      	mov	r2, r0
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f402:	2b00      	cmp	r3, #0
 800f404:	d104      	bne.n	800f410 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f40c:	861a      	strh	r2, [r3, #48]	; 0x30
 800f40e:	e002      	b.n	800f416 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2200      	movs	r2, #0
 800f414:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2200      	movs	r2, #0
 800f41a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f420:	2b00      	cmp	r3, #0
 800f422:	d103      	bne.n	800f42c <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2200      	movs	r2, #0
 800f428:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f432:	4b84      	ldr	r3, [pc, #528]	; (800f644 <tcp_receive+0x5d4>)
 800f434:	881b      	ldrh	r3, [r3, #0]
 800f436:	4413      	add	r3, r2
 800f438:	b29a      	uxth	r2, r3
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	8b5b      	ldrh	r3, [r3, #26]
 800f444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d035      	beq.n	800f4b8 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f450:	2b00      	cmp	r3, #0
 800f452:	d118      	bne.n	800f486 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d00c      	beq.n	800f476 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f464:	68db      	ldr	r3, [r3, #12]
 800f466:	685b      	ldr	r3, [r3, #4]
 800f468:	4618      	mov	r0, r3
 800f46a:	f7fa fe72 	bl	800a152 <lwip_htonl>
 800f46e:	4603      	mov	r3, r0
 800f470:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f472:	2b00      	cmp	r3, #0
 800f474:	dc20      	bgt.n	800f4b8 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	8b5b      	ldrh	r3, [r3, #26]
 800f47a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f47e:	b29a      	uxth	r2, r3
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f484:	e018      	b.n	800f4b8 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f48e:	68db      	ldr	r3, [r3, #12]
 800f490:	685b      	ldr	r3, [r3, #4]
 800f492:	4618      	mov	r0, r3
 800f494:	f7fa fe5d 	bl	800a152 <lwip_htonl>
 800f498:	4603      	mov	r3, r0
 800f49a:	1ae3      	subs	r3, r4, r3
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	dc0b      	bgt.n	800f4b8 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	8b5b      	ldrh	r3, [r3, #26]
 800f4a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f4a8:	b29a      	uxth	r2, r3
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f4ae:	e003      	b.n	800f4b8 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f4b0:	6878      	ldr	r0, [r7, #4]
 800f4b2:	f002 fbcd 	bl	8011c50 <tcp_send_empty_ack>
 800f4b6:	e000      	b.n	800f4ba <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f4b8:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d05b      	beq.n	800f57a <tcp_receive+0x50a>
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f4c6:	4b60      	ldr	r3, [pc, #384]	; (800f648 <tcp_receive+0x5d8>)
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	1ad3      	subs	r3, r2, r3
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	da54      	bge.n	800f57a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f4d0:	4b5e      	ldr	r3, [pc, #376]	; (800f64c <tcp_receive+0x5dc>)
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	b29a      	uxth	r2, r3
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4da:	b29b      	uxth	r3, r3
 800f4dc:	1ad3      	subs	r3, r2, r3
 800f4de:	b29b      	uxth	r3, r3
 800f4e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f4e4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f4ee:	10db      	asrs	r3, r3, #3
 800f4f0:	b21b      	sxth	r3, r3
 800f4f2:	b29b      	uxth	r3, r3
 800f4f4:	1ad3      	subs	r3, r2, r3
 800f4f6:	b29b      	uxth	r3, r3
 800f4f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f502:	b29a      	uxth	r2, r3
 800f504:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f508:	4413      	add	r3, r2
 800f50a:	b29b      	uxth	r3, r3
 800f50c:	b21a      	sxth	r2, r3
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f512:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f516:	2b00      	cmp	r3, #0
 800f518:	da05      	bge.n	800f526 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800f51a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f51e:	425b      	negs	r3, r3
 800f520:	b29b      	uxth	r3, r3
 800f522:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f526:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f530:	109b      	asrs	r3, r3, #2
 800f532:	b21b      	sxth	r3, r3
 800f534:	b29b      	uxth	r3, r3
 800f536:	1ad3      	subs	r3, r2, r3
 800f538:	b29b      	uxth	r3, r3
 800f53a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f544:	b29a      	uxth	r2, r3
 800f546:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f54a:	4413      	add	r3, r2
 800f54c:	b29b      	uxth	r3, r3
 800f54e:	b21a      	sxth	r2, r3
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f55a:	10db      	asrs	r3, r3, #3
 800f55c:	b21b      	sxth	r3, r3
 800f55e:	b29a      	uxth	r2, r3
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f566:	b29b      	uxth	r3, r3
 800f568:	4413      	add	r3, r2
 800f56a:	b29b      	uxth	r3, r3
 800f56c:	b21a      	sxth	r2, r3
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2200      	movs	r2, #0
 800f578:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f57a:	4b35      	ldr	r3, [pc, #212]	; (800f650 <tcp_receive+0x5e0>)
 800f57c:	881b      	ldrh	r3, [r3, #0]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	f000 84e1 	beq.w	800ff46 <tcp_receive+0xed6>
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	7d1b      	ldrb	r3, [r3, #20]
 800f588:	2b06      	cmp	r3, #6
 800f58a:	f200 84dc 	bhi.w	800ff46 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f592:	4b30      	ldr	r3, [pc, #192]	; (800f654 <tcp_receive+0x5e4>)
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	1ad3      	subs	r3, r2, r3
 800f598:	3b01      	subs	r3, #1
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	f2c0 808e 	blt.w	800f6bc <tcp_receive+0x64c>
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f5a4:	4b2a      	ldr	r3, [pc, #168]	; (800f650 <tcp_receive+0x5e0>)
 800f5a6:	881b      	ldrh	r3, [r3, #0]
 800f5a8:	4619      	mov	r1, r3
 800f5aa:	4b2a      	ldr	r3, [pc, #168]	; (800f654 <tcp_receive+0x5e4>)
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	440b      	add	r3, r1
 800f5b0:	1ad3      	subs	r3, r2, r3
 800f5b2:	3301      	adds	r3, #1
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	f300 8081 	bgt.w	800f6bc <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f5ba:	4b27      	ldr	r3, [pc, #156]	; (800f658 <tcp_receive+0x5e8>)
 800f5bc:	685b      	ldr	r3, [r3, #4]
 800f5be:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f5c4:	4b23      	ldr	r3, [pc, #140]	; (800f654 <tcp_receive+0x5e4>)
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	1ad3      	subs	r3, r2, r3
 800f5ca:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f5cc:	4b22      	ldr	r3, [pc, #136]	; (800f658 <tcp_receive+0x5e8>)
 800f5ce:	685b      	ldr	r3, [r3, #4]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d106      	bne.n	800f5e2 <tcp_receive+0x572>
 800f5d4:	4b21      	ldr	r3, [pc, #132]	; (800f65c <tcp_receive+0x5ec>)
 800f5d6:	f240 5294 	movw	r2, #1428	; 0x594
 800f5da:	4921      	ldr	r1, [pc, #132]	; (800f660 <tcp_receive+0x5f0>)
 800f5dc:	4821      	ldr	r0, [pc, #132]	; (800f664 <tcp_receive+0x5f4>)
 800f5de:	f005 fb6b 	bl	8014cb8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f5e8:	4293      	cmp	r3, r2
 800f5ea:	d906      	bls.n	800f5fa <tcp_receive+0x58a>
 800f5ec:	4b1b      	ldr	r3, [pc, #108]	; (800f65c <tcp_receive+0x5ec>)
 800f5ee:	f240 5295 	movw	r2, #1429	; 0x595
 800f5f2:	491d      	ldr	r1, [pc, #116]	; (800f668 <tcp_receive+0x5f8>)
 800f5f4:	481b      	ldr	r0, [pc, #108]	; (800f664 <tcp_receive+0x5f4>)
 800f5f6:	f005 fb5f 	bl	8014cb8 <iprintf>
      off = (u16_t)off32;
 800f5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5fc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f600:	4b15      	ldr	r3, [pc, #84]	; (800f658 <tcp_receive+0x5e8>)
 800f602:	685b      	ldr	r3, [r3, #4]
 800f604:	891b      	ldrh	r3, [r3, #8]
 800f606:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f60a:	429a      	cmp	r2, r3
 800f60c:	d906      	bls.n	800f61c <tcp_receive+0x5ac>
 800f60e:	4b13      	ldr	r3, [pc, #76]	; (800f65c <tcp_receive+0x5ec>)
 800f610:	f240 5297 	movw	r2, #1431	; 0x597
 800f614:	4915      	ldr	r1, [pc, #84]	; (800f66c <tcp_receive+0x5fc>)
 800f616:	4813      	ldr	r0, [pc, #76]	; (800f664 <tcp_receive+0x5f4>)
 800f618:	f005 fb4e 	bl	8014cb8 <iprintf>
      inseg.len -= off;
 800f61c:	4b0e      	ldr	r3, [pc, #56]	; (800f658 <tcp_receive+0x5e8>)
 800f61e:	891a      	ldrh	r2, [r3, #8]
 800f620:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f624:	1ad3      	subs	r3, r2, r3
 800f626:	b29a      	uxth	r2, r3
 800f628:	4b0b      	ldr	r3, [pc, #44]	; (800f658 <tcp_receive+0x5e8>)
 800f62a:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f62c:	4b0a      	ldr	r3, [pc, #40]	; (800f658 <tcp_receive+0x5e8>)
 800f62e:	685b      	ldr	r3, [r3, #4]
 800f630:	891a      	ldrh	r2, [r3, #8]
 800f632:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f636:	1ad3      	subs	r3, r2, r3
 800f638:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f63a:	e029      	b.n	800f690 <tcp_receive+0x620>
 800f63c:	080173cc 	.word	0x080173cc
 800f640:	080173d4 	.word	0x080173d4
 800f644:	2400011c 	.word	0x2400011c
 800f648:	24000118 	.word	0x24000118
 800f64c:	24003618 	.word	0x24003618
 800f650:	2400011e 	.word	0x2400011e
 800f654:	24000114 	.word	0x24000114
 800f658:	240000f4 	.word	0x240000f4
 800f65c:	08017064 	.word	0x08017064
 800f660:	080173dc 	.word	0x080173dc
 800f664:	080170b0 	.word	0x080170b0
 800f668:	080173ec 	.word	0x080173ec
 800f66c:	080173fc 	.word	0x080173fc
        off -= p->len;
 800f670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f672:	895b      	ldrh	r3, [r3, #10]
 800f674:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f678:	1ad3      	subs	r3, r2, r3
 800f67a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f67e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f680:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f682:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f686:	2200      	movs	r2, #0
 800f688:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f68a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f692:	895b      	ldrh	r3, [r3, #10]
 800f694:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f698:	429a      	cmp	r2, r3
 800f69a:	d8e9      	bhi.n	800f670 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f69c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f6a0:	4619      	mov	r1, r3
 800f6a2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f6a4:	f7fc f8d0 	bl	800b848 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6ac:	4a91      	ldr	r2, [pc, #580]	; (800f8f4 <tcp_receive+0x884>)
 800f6ae:	6013      	str	r3, [r2, #0]
 800f6b0:	4b91      	ldr	r3, [pc, #580]	; (800f8f8 <tcp_receive+0x888>)
 800f6b2:	68db      	ldr	r3, [r3, #12]
 800f6b4:	4a8f      	ldr	r2, [pc, #572]	; (800f8f4 <tcp_receive+0x884>)
 800f6b6:	6812      	ldr	r2, [r2, #0]
 800f6b8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f6ba:	e00d      	b.n	800f6d8 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f6bc:	4b8d      	ldr	r3, [pc, #564]	; (800f8f4 <tcp_receive+0x884>)
 800f6be:	681a      	ldr	r2, [r3, #0]
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6c4:	1ad3      	subs	r3, r2, r3
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	da06      	bge.n	800f6d8 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	8b5b      	ldrh	r3, [r3, #26]
 800f6ce:	f043 0302 	orr.w	r3, r3, #2
 800f6d2:	b29a      	uxth	r2, r3
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f6d8:	4b86      	ldr	r3, [pc, #536]	; (800f8f4 <tcp_receive+0x884>)
 800f6da:	681a      	ldr	r2, [r3, #0]
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6e0:	1ad3      	subs	r3, r2, r3
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	f2c0 842a 	blt.w	800ff3c <tcp_receive+0xecc>
 800f6e8:	4b82      	ldr	r3, [pc, #520]	; (800f8f4 <tcp_receive+0x884>)
 800f6ea:	681a      	ldr	r2, [r3, #0]
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6f0:	6879      	ldr	r1, [r7, #4]
 800f6f2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f6f4:	440b      	add	r3, r1
 800f6f6:	1ad3      	subs	r3, r2, r3
 800f6f8:	3301      	adds	r3, #1
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	f300 841e 	bgt.w	800ff3c <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f704:	4b7b      	ldr	r3, [pc, #492]	; (800f8f4 <tcp_receive+0x884>)
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	429a      	cmp	r2, r3
 800f70a:	f040 829a 	bne.w	800fc42 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f70e:	4b7a      	ldr	r3, [pc, #488]	; (800f8f8 <tcp_receive+0x888>)
 800f710:	891c      	ldrh	r4, [r3, #8]
 800f712:	4b79      	ldr	r3, [pc, #484]	; (800f8f8 <tcp_receive+0x888>)
 800f714:	68db      	ldr	r3, [r3, #12]
 800f716:	899b      	ldrh	r3, [r3, #12]
 800f718:	b29b      	uxth	r3, r3
 800f71a:	4618      	mov	r0, r3
 800f71c:	f7fa fd04 	bl	800a128 <lwip_htons>
 800f720:	4603      	mov	r3, r0
 800f722:	b2db      	uxtb	r3, r3
 800f724:	f003 0303 	and.w	r3, r3, #3
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d001      	beq.n	800f730 <tcp_receive+0x6c0>
 800f72c:	2301      	movs	r3, #1
 800f72e:	e000      	b.n	800f732 <tcp_receive+0x6c2>
 800f730:	2300      	movs	r3, #0
 800f732:	4423      	add	r3, r4
 800f734:	b29a      	uxth	r2, r3
 800f736:	4b71      	ldr	r3, [pc, #452]	; (800f8fc <tcp_receive+0x88c>)
 800f738:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f73e:	4b6f      	ldr	r3, [pc, #444]	; (800f8fc <tcp_receive+0x88c>)
 800f740:	881b      	ldrh	r3, [r3, #0]
 800f742:	429a      	cmp	r2, r3
 800f744:	d275      	bcs.n	800f832 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f746:	4b6c      	ldr	r3, [pc, #432]	; (800f8f8 <tcp_receive+0x888>)
 800f748:	68db      	ldr	r3, [r3, #12]
 800f74a:	899b      	ldrh	r3, [r3, #12]
 800f74c:	b29b      	uxth	r3, r3
 800f74e:	4618      	mov	r0, r3
 800f750:	f7fa fcea 	bl	800a128 <lwip_htons>
 800f754:	4603      	mov	r3, r0
 800f756:	b2db      	uxtb	r3, r3
 800f758:	f003 0301 	and.w	r3, r3, #1
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d01f      	beq.n	800f7a0 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f760:	4b65      	ldr	r3, [pc, #404]	; (800f8f8 <tcp_receive+0x888>)
 800f762:	68db      	ldr	r3, [r3, #12]
 800f764:	899b      	ldrh	r3, [r3, #12]
 800f766:	b29b      	uxth	r3, r3
 800f768:	b21b      	sxth	r3, r3
 800f76a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f76e:	b21c      	sxth	r4, r3
 800f770:	4b61      	ldr	r3, [pc, #388]	; (800f8f8 <tcp_receive+0x888>)
 800f772:	68db      	ldr	r3, [r3, #12]
 800f774:	899b      	ldrh	r3, [r3, #12]
 800f776:	b29b      	uxth	r3, r3
 800f778:	4618      	mov	r0, r3
 800f77a:	f7fa fcd5 	bl	800a128 <lwip_htons>
 800f77e:	4603      	mov	r3, r0
 800f780:	b2db      	uxtb	r3, r3
 800f782:	b29b      	uxth	r3, r3
 800f784:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f788:	b29b      	uxth	r3, r3
 800f78a:	4618      	mov	r0, r3
 800f78c:	f7fa fccc 	bl	800a128 <lwip_htons>
 800f790:	4603      	mov	r3, r0
 800f792:	b21b      	sxth	r3, r3
 800f794:	4323      	orrs	r3, r4
 800f796:	b21a      	sxth	r2, r3
 800f798:	4b57      	ldr	r3, [pc, #348]	; (800f8f8 <tcp_receive+0x888>)
 800f79a:	68db      	ldr	r3, [r3, #12]
 800f79c:	b292      	uxth	r2, r2
 800f79e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f7a4:	4b54      	ldr	r3, [pc, #336]	; (800f8f8 <tcp_receive+0x888>)
 800f7a6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f7a8:	4b53      	ldr	r3, [pc, #332]	; (800f8f8 <tcp_receive+0x888>)
 800f7aa:	68db      	ldr	r3, [r3, #12]
 800f7ac:	899b      	ldrh	r3, [r3, #12]
 800f7ae:	b29b      	uxth	r3, r3
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	f7fa fcb9 	bl	800a128 <lwip_htons>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	b2db      	uxtb	r3, r3
 800f7ba:	f003 0302 	and.w	r3, r3, #2
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d005      	beq.n	800f7ce <tcp_receive+0x75e>
            inseg.len -= 1;
 800f7c2:	4b4d      	ldr	r3, [pc, #308]	; (800f8f8 <tcp_receive+0x888>)
 800f7c4:	891b      	ldrh	r3, [r3, #8]
 800f7c6:	3b01      	subs	r3, #1
 800f7c8:	b29a      	uxth	r2, r3
 800f7ca:	4b4b      	ldr	r3, [pc, #300]	; (800f8f8 <tcp_receive+0x888>)
 800f7cc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f7ce:	4b4a      	ldr	r3, [pc, #296]	; (800f8f8 <tcp_receive+0x888>)
 800f7d0:	685b      	ldr	r3, [r3, #4]
 800f7d2:	4a49      	ldr	r2, [pc, #292]	; (800f8f8 <tcp_receive+0x888>)
 800f7d4:	8912      	ldrh	r2, [r2, #8]
 800f7d6:	4611      	mov	r1, r2
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f7fb ff35 	bl	800b648 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f7de:	4b46      	ldr	r3, [pc, #280]	; (800f8f8 <tcp_receive+0x888>)
 800f7e0:	891c      	ldrh	r4, [r3, #8]
 800f7e2:	4b45      	ldr	r3, [pc, #276]	; (800f8f8 <tcp_receive+0x888>)
 800f7e4:	68db      	ldr	r3, [r3, #12]
 800f7e6:	899b      	ldrh	r3, [r3, #12]
 800f7e8:	b29b      	uxth	r3, r3
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	f7fa fc9c 	bl	800a128 <lwip_htons>
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	b2db      	uxtb	r3, r3
 800f7f4:	f003 0303 	and.w	r3, r3, #3
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d001      	beq.n	800f800 <tcp_receive+0x790>
 800f7fc:	2301      	movs	r3, #1
 800f7fe:	e000      	b.n	800f802 <tcp_receive+0x792>
 800f800:	2300      	movs	r3, #0
 800f802:	4423      	add	r3, r4
 800f804:	b29a      	uxth	r2, r3
 800f806:	4b3d      	ldr	r3, [pc, #244]	; (800f8fc <tcp_receive+0x88c>)
 800f808:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f80a:	4b3c      	ldr	r3, [pc, #240]	; (800f8fc <tcp_receive+0x88c>)
 800f80c:	881b      	ldrh	r3, [r3, #0]
 800f80e:	461a      	mov	r2, r3
 800f810:	4b38      	ldr	r3, [pc, #224]	; (800f8f4 <tcp_receive+0x884>)
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	441a      	add	r2, r3
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f81a:	6879      	ldr	r1, [r7, #4]
 800f81c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f81e:	440b      	add	r3, r1
 800f820:	429a      	cmp	r2, r3
 800f822:	d006      	beq.n	800f832 <tcp_receive+0x7c2>
 800f824:	4b36      	ldr	r3, [pc, #216]	; (800f900 <tcp_receive+0x890>)
 800f826:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800f82a:	4936      	ldr	r1, [pc, #216]	; (800f904 <tcp_receive+0x894>)
 800f82c:	4836      	ldr	r0, [pc, #216]	; (800f908 <tcp_receive+0x898>)
 800f82e:	f005 fa43 	bl	8014cb8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f836:	2b00      	cmp	r3, #0
 800f838:	f000 80e7 	beq.w	800fa0a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f83c:	4b2e      	ldr	r3, [pc, #184]	; (800f8f8 <tcp_receive+0x888>)
 800f83e:	68db      	ldr	r3, [r3, #12]
 800f840:	899b      	ldrh	r3, [r3, #12]
 800f842:	b29b      	uxth	r3, r3
 800f844:	4618      	mov	r0, r3
 800f846:	f7fa fc6f 	bl	800a128 <lwip_htons>
 800f84a:	4603      	mov	r3, r0
 800f84c:	b2db      	uxtb	r3, r3
 800f84e:	f003 0301 	and.w	r3, r3, #1
 800f852:	2b00      	cmp	r3, #0
 800f854:	d010      	beq.n	800f878 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f856:	e00a      	b.n	800f86e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f85c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f862:	681a      	ldr	r2, [r3, #0]
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800f868:	68f8      	ldr	r0, [r7, #12]
 800f86a:	f7fd fcb0 	bl	800d1ce <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f872:	2b00      	cmp	r3, #0
 800f874:	d1f0      	bne.n	800f858 <tcp_receive+0x7e8>
 800f876:	e0c8      	b.n	800fa0a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f87c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f87e:	e052      	b.n	800f926 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f882:	68db      	ldr	r3, [r3, #12]
 800f884:	899b      	ldrh	r3, [r3, #12]
 800f886:	b29b      	uxth	r3, r3
 800f888:	4618      	mov	r0, r3
 800f88a:	f7fa fc4d 	bl	800a128 <lwip_htons>
 800f88e:	4603      	mov	r3, r0
 800f890:	b2db      	uxtb	r3, r3
 800f892:	f003 0301 	and.w	r3, r3, #1
 800f896:	2b00      	cmp	r3, #0
 800f898:	d03d      	beq.n	800f916 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f89a:	4b17      	ldr	r3, [pc, #92]	; (800f8f8 <tcp_receive+0x888>)
 800f89c:	68db      	ldr	r3, [r3, #12]
 800f89e:	899b      	ldrh	r3, [r3, #12]
 800f8a0:	b29b      	uxth	r3, r3
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f7fa fc40 	bl	800a128 <lwip_htons>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	b2db      	uxtb	r3, r3
 800f8ac:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d130      	bne.n	800f916 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f8b4:	4b10      	ldr	r3, [pc, #64]	; (800f8f8 <tcp_receive+0x888>)
 800f8b6:	68db      	ldr	r3, [r3, #12]
 800f8b8:	899b      	ldrh	r3, [r3, #12]
 800f8ba:	b29c      	uxth	r4, r3
 800f8bc:	2001      	movs	r0, #1
 800f8be:	f7fa fc33 	bl	800a128 <lwip_htons>
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	461a      	mov	r2, r3
 800f8c6:	4b0c      	ldr	r3, [pc, #48]	; (800f8f8 <tcp_receive+0x888>)
 800f8c8:	68db      	ldr	r3, [r3, #12]
 800f8ca:	4322      	orrs	r2, r4
 800f8cc:	b292      	uxth	r2, r2
 800f8ce:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f8d0:	4b09      	ldr	r3, [pc, #36]	; (800f8f8 <tcp_receive+0x888>)
 800f8d2:	891c      	ldrh	r4, [r3, #8]
 800f8d4:	4b08      	ldr	r3, [pc, #32]	; (800f8f8 <tcp_receive+0x888>)
 800f8d6:	68db      	ldr	r3, [r3, #12]
 800f8d8:	899b      	ldrh	r3, [r3, #12]
 800f8da:	b29b      	uxth	r3, r3
 800f8dc:	4618      	mov	r0, r3
 800f8de:	f7fa fc23 	bl	800a128 <lwip_htons>
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	b2db      	uxtb	r3, r3
 800f8e6:	f003 0303 	and.w	r3, r3, #3
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d00e      	beq.n	800f90c <tcp_receive+0x89c>
 800f8ee:	2301      	movs	r3, #1
 800f8f0:	e00d      	b.n	800f90e <tcp_receive+0x89e>
 800f8f2:	bf00      	nop
 800f8f4:	24000114 	.word	0x24000114
 800f8f8:	240000f4 	.word	0x240000f4
 800f8fc:	2400011e 	.word	0x2400011e
 800f900:	08017064 	.word	0x08017064
 800f904:	0801740c 	.word	0x0801740c
 800f908:	080170b0 	.word	0x080170b0
 800f90c:	2300      	movs	r3, #0
 800f90e:	4423      	add	r3, r4
 800f910:	b29a      	uxth	r2, r3
 800f912:	4b98      	ldr	r3, [pc, #608]	; (800fb74 <tcp_receive+0xb04>)
 800f914:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f918:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f91a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800f920:	6938      	ldr	r0, [r7, #16]
 800f922:	f7fd fc54 	bl	800d1ce <tcp_seg_free>
            while (next &&
 800f926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d00e      	beq.n	800f94a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f92c:	4b91      	ldr	r3, [pc, #580]	; (800fb74 <tcp_receive+0xb04>)
 800f92e:	881b      	ldrh	r3, [r3, #0]
 800f930:	461a      	mov	r2, r3
 800f932:	4b91      	ldr	r3, [pc, #580]	; (800fb78 <tcp_receive+0xb08>)
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	441a      	add	r2, r3
 800f938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f93a:	68db      	ldr	r3, [r3, #12]
 800f93c:	685b      	ldr	r3, [r3, #4]
 800f93e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f940:	8909      	ldrh	r1, [r1, #8]
 800f942:	440b      	add	r3, r1
 800f944:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f946:	2b00      	cmp	r3, #0
 800f948:	da9a      	bge.n	800f880 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f94a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d059      	beq.n	800fa04 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800f950:	4b88      	ldr	r3, [pc, #544]	; (800fb74 <tcp_receive+0xb04>)
 800f952:	881b      	ldrh	r3, [r3, #0]
 800f954:	461a      	mov	r2, r3
 800f956:	4b88      	ldr	r3, [pc, #544]	; (800fb78 <tcp_receive+0xb08>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	441a      	add	r2, r3
 800f95c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f95e:	68db      	ldr	r3, [r3, #12]
 800f960:	685b      	ldr	r3, [r3, #4]
 800f962:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f964:	2b00      	cmp	r3, #0
 800f966:	dd4d      	ble.n	800fa04 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f96a:	68db      	ldr	r3, [r3, #12]
 800f96c:	685b      	ldr	r3, [r3, #4]
 800f96e:	b29a      	uxth	r2, r3
 800f970:	4b81      	ldr	r3, [pc, #516]	; (800fb78 <tcp_receive+0xb08>)
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	b29b      	uxth	r3, r3
 800f976:	1ad3      	subs	r3, r2, r3
 800f978:	b29a      	uxth	r2, r3
 800f97a:	4b80      	ldr	r3, [pc, #512]	; (800fb7c <tcp_receive+0xb0c>)
 800f97c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f97e:	4b7f      	ldr	r3, [pc, #508]	; (800fb7c <tcp_receive+0xb0c>)
 800f980:	68db      	ldr	r3, [r3, #12]
 800f982:	899b      	ldrh	r3, [r3, #12]
 800f984:	b29b      	uxth	r3, r3
 800f986:	4618      	mov	r0, r3
 800f988:	f7fa fbce 	bl	800a128 <lwip_htons>
 800f98c:	4603      	mov	r3, r0
 800f98e:	b2db      	uxtb	r3, r3
 800f990:	f003 0302 	and.w	r3, r3, #2
 800f994:	2b00      	cmp	r3, #0
 800f996:	d005      	beq.n	800f9a4 <tcp_receive+0x934>
                inseg.len -= 1;
 800f998:	4b78      	ldr	r3, [pc, #480]	; (800fb7c <tcp_receive+0xb0c>)
 800f99a:	891b      	ldrh	r3, [r3, #8]
 800f99c:	3b01      	subs	r3, #1
 800f99e:	b29a      	uxth	r2, r3
 800f9a0:	4b76      	ldr	r3, [pc, #472]	; (800fb7c <tcp_receive+0xb0c>)
 800f9a2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f9a4:	4b75      	ldr	r3, [pc, #468]	; (800fb7c <tcp_receive+0xb0c>)
 800f9a6:	685b      	ldr	r3, [r3, #4]
 800f9a8:	4a74      	ldr	r2, [pc, #464]	; (800fb7c <tcp_receive+0xb0c>)
 800f9aa:	8912      	ldrh	r2, [r2, #8]
 800f9ac:	4611      	mov	r1, r2
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f7fb fe4a 	bl	800b648 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f9b4:	4b71      	ldr	r3, [pc, #452]	; (800fb7c <tcp_receive+0xb0c>)
 800f9b6:	891c      	ldrh	r4, [r3, #8]
 800f9b8:	4b70      	ldr	r3, [pc, #448]	; (800fb7c <tcp_receive+0xb0c>)
 800f9ba:	68db      	ldr	r3, [r3, #12]
 800f9bc:	899b      	ldrh	r3, [r3, #12]
 800f9be:	b29b      	uxth	r3, r3
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	f7fa fbb1 	bl	800a128 <lwip_htons>
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	b2db      	uxtb	r3, r3
 800f9ca:	f003 0303 	and.w	r3, r3, #3
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d001      	beq.n	800f9d6 <tcp_receive+0x966>
 800f9d2:	2301      	movs	r3, #1
 800f9d4:	e000      	b.n	800f9d8 <tcp_receive+0x968>
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	4423      	add	r3, r4
 800f9da:	b29a      	uxth	r2, r3
 800f9dc:	4b65      	ldr	r3, [pc, #404]	; (800fb74 <tcp_receive+0xb04>)
 800f9de:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f9e0:	4b64      	ldr	r3, [pc, #400]	; (800fb74 <tcp_receive+0xb04>)
 800f9e2:	881b      	ldrh	r3, [r3, #0]
 800f9e4:	461a      	mov	r2, r3
 800f9e6:	4b64      	ldr	r3, [pc, #400]	; (800fb78 <tcp_receive+0xb08>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	441a      	add	r2, r3
 800f9ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9ee:	68db      	ldr	r3, [r3, #12]
 800f9f0:	685b      	ldr	r3, [r3, #4]
 800f9f2:	429a      	cmp	r2, r3
 800f9f4:	d006      	beq.n	800fa04 <tcp_receive+0x994>
 800f9f6:	4b62      	ldr	r3, [pc, #392]	; (800fb80 <tcp_receive+0xb10>)
 800f9f8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800f9fc:	4961      	ldr	r1, [pc, #388]	; (800fb84 <tcp_receive+0xb14>)
 800f9fe:	4862      	ldr	r0, [pc, #392]	; (800fb88 <tcp_receive+0xb18>)
 800fa00:	f005 f95a 	bl	8014cb8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fa08:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800fa0a:	4b5a      	ldr	r3, [pc, #360]	; (800fb74 <tcp_receive+0xb04>)
 800fa0c:	881b      	ldrh	r3, [r3, #0]
 800fa0e:	461a      	mov	r2, r3
 800fa10:	4b59      	ldr	r3, [pc, #356]	; (800fb78 <tcp_receive+0xb08>)
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	441a      	add	r2, r3
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fa1e:	4b55      	ldr	r3, [pc, #340]	; (800fb74 <tcp_receive+0xb04>)
 800fa20:	881b      	ldrh	r3, [r3, #0]
 800fa22:	429a      	cmp	r2, r3
 800fa24:	d206      	bcs.n	800fa34 <tcp_receive+0x9c4>
 800fa26:	4b56      	ldr	r3, [pc, #344]	; (800fb80 <tcp_receive+0xb10>)
 800fa28:	f240 6207 	movw	r2, #1543	; 0x607
 800fa2c:	4957      	ldr	r1, [pc, #348]	; (800fb8c <tcp_receive+0xb1c>)
 800fa2e:	4856      	ldr	r0, [pc, #344]	; (800fb88 <tcp_receive+0xb18>)
 800fa30:	f005 f942 	bl	8014cb8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fa38:	4b4e      	ldr	r3, [pc, #312]	; (800fb74 <tcp_receive+0xb04>)
 800fa3a:	881b      	ldrh	r3, [r3, #0]
 800fa3c:	1ad3      	subs	r3, r2, r3
 800fa3e:	b29a      	uxth	r2, r3
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800fa44:	6878      	ldr	r0, [r7, #4]
 800fa46:	f7fc fe9d 	bl	800c784 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800fa4a:	4b4c      	ldr	r3, [pc, #304]	; (800fb7c <tcp_receive+0xb0c>)
 800fa4c:	685b      	ldr	r3, [r3, #4]
 800fa4e:	891b      	ldrh	r3, [r3, #8]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d006      	beq.n	800fa62 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800fa54:	4b49      	ldr	r3, [pc, #292]	; (800fb7c <tcp_receive+0xb0c>)
 800fa56:	685b      	ldr	r3, [r3, #4]
 800fa58:	4a4d      	ldr	r2, [pc, #308]	; (800fb90 <tcp_receive+0xb20>)
 800fa5a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800fa5c:	4b47      	ldr	r3, [pc, #284]	; (800fb7c <tcp_receive+0xb0c>)
 800fa5e:	2200      	movs	r2, #0
 800fa60:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fa62:	4b46      	ldr	r3, [pc, #280]	; (800fb7c <tcp_receive+0xb0c>)
 800fa64:	68db      	ldr	r3, [r3, #12]
 800fa66:	899b      	ldrh	r3, [r3, #12]
 800fa68:	b29b      	uxth	r3, r3
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	f7fa fb5c 	bl	800a128 <lwip_htons>
 800fa70:	4603      	mov	r3, r0
 800fa72:	b2db      	uxtb	r3, r3
 800fa74:	f003 0301 	and.w	r3, r3, #1
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	f000 80b8 	beq.w	800fbee <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800fa7e:	4b45      	ldr	r3, [pc, #276]	; (800fb94 <tcp_receive+0xb24>)
 800fa80:	781b      	ldrb	r3, [r3, #0]
 800fa82:	f043 0320 	orr.w	r3, r3, #32
 800fa86:	b2da      	uxtb	r2, r3
 800fa88:	4b42      	ldr	r3, [pc, #264]	; (800fb94 <tcp_receive+0xb24>)
 800fa8a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800fa8c:	e0af      	b.n	800fbee <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa92:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa98:	68db      	ldr	r3, [r3, #12]
 800fa9a:	685b      	ldr	r3, [r3, #4]
 800fa9c:	4a36      	ldr	r2, [pc, #216]	; (800fb78 <tcp_receive+0xb08>)
 800fa9e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	891b      	ldrh	r3, [r3, #8]
 800faa4:	461c      	mov	r4, r3
 800faa6:	68bb      	ldr	r3, [r7, #8]
 800faa8:	68db      	ldr	r3, [r3, #12]
 800faaa:	899b      	ldrh	r3, [r3, #12]
 800faac:	b29b      	uxth	r3, r3
 800faae:	4618      	mov	r0, r3
 800fab0:	f7fa fb3a 	bl	800a128 <lwip_htons>
 800fab4:	4603      	mov	r3, r0
 800fab6:	b2db      	uxtb	r3, r3
 800fab8:	f003 0303 	and.w	r3, r3, #3
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d001      	beq.n	800fac4 <tcp_receive+0xa54>
 800fac0:	2301      	movs	r3, #1
 800fac2:	e000      	b.n	800fac6 <tcp_receive+0xa56>
 800fac4:	2300      	movs	r3, #0
 800fac6:	191a      	adds	r2, r3, r4
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800facc:	441a      	add	r2, r3
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fad6:	461c      	mov	r4, r3
 800fad8:	68bb      	ldr	r3, [r7, #8]
 800fada:	891b      	ldrh	r3, [r3, #8]
 800fadc:	461d      	mov	r5, r3
 800fade:	68bb      	ldr	r3, [r7, #8]
 800fae0:	68db      	ldr	r3, [r3, #12]
 800fae2:	899b      	ldrh	r3, [r3, #12]
 800fae4:	b29b      	uxth	r3, r3
 800fae6:	4618      	mov	r0, r3
 800fae8:	f7fa fb1e 	bl	800a128 <lwip_htons>
 800faec:	4603      	mov	r3, r0
 800faee:	b2db      	uxtb	r3, r3
 800faf0:	f003 0303 	and.w	r3, r3, #3
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d001      	beq.n	800fafc <tcp_receive+0xa8c>
 800faf8:	2301      	movs	r3, #1
 800fafa:	e000      	b.n	800fafe <tcp_receive+0xa8e>
 800fafc:	2300      	movs	r3, #0
 800fafe:	442b      	add	r3, r5
 800fb00:	429c      	cmp	r4, r3
 800fb02:	d206      	bcs.n	800fb12 <tcp_receive+0xaa2>
 800fb04:	4b1e      	ldr	r3, [pc, #120]	; (800fb80 <tcp_receive+0xb10>)
 800fb06:	f240 622b 	movw	r2, #1579	; 0x62b
 800fb0a:	4923      	ldr	r1, [pc, #140]	; (800fb98 <tcp_receive+0xb28>)
 800fb0c:	481e      	ldr	r0, [pc, #120]	; (800fb88 <tcp_receive+0xb18>)
 800fb0e:	f005 f8d3 	bl	8014cb8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800fb12:	68bb      	ldr	r3, [r7, #8]
 800fb14:	891b      	ldrh	r3, [r3, #8]
 800fb16:	461c      	mov	r4, r3
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	68db      	ldr	r3, [r3, #12]
 800fb1c:	899b      	ldrh	r3, [r3, #12]
 800fb1e:	b29b      	uxth	r3, r3
 800fb20:	4618      	mov	r0, r3
 800fb22:	f7fa fb01 	bl	800a128 <lwip_htons>
 800fb26:	4603      	mov	r3, r0
 800fb28:	b2db      	uxtb	r3, r3
 800fb2a:	f003 0303 	and.w	r3, r3, #3
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d001      	beq.n	800fb36 <tcp_receive+0xac6>
 800fb32:	2301      	movs	r3, #1
 800fb34:	e000      	b.n	800fb38 <tcp_receive+0xac8>
 800fb36:	2300      	movs	r3, #0
 800fb38:	1919      	adds	r1, r3, r4
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fb3e:	b28b      	uxth	r3, r1
 800fb40:	1ad3      	subs	r3, r2, r3
 800fb42:	b29a      	uxth	r2, r3
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800fb48:	6878      	ldr	r0, [r7, #4]
 800fb4a:	f7fc fe1b 	bl	800c784 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800fb4e:	68bb      	ldr	r3, [r7, #8]
 800fb50:	685b      	ldr	r3, [r3, #4]
 800fb52:	891b      	ldrh	r3, [r3, #8]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d028      	beq.n	800fbaa <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800fb58:	4b0d      	ldr	r3, [pc, #52]	; (800fb90 <tcp_receive+0xb20>)
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d01d      	beq.n	800fb9c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800fb60:	4b0b      	ldr	r3, [pc, #44]	; (800fb90 <tcp_receive+0xb20>)
 800fb62:	681a      	ldr	r2, [r3, #0]
 800fb64:	68bb      	ldr	r3, [r7, #8]
 800fb66:	685b      	ldr	r3, [r3, #4]
 800fb68:	4619      	mov	r1, r3
 800fb6a:	4610      	mov	r0, r2
 800fb6c:	f7fb ffb4 	bl	800bad8 <pbuf_cat>
 800fb70:	e018      	b.n	800fba4 <tcp_receive+0xb34>
 800fb72:	bf00      	nop
 800fb74:	2400011e 	.word	0x2400011e
 800fb78:	24000114 	.word	0x24000114
 800fb7c:	240000f4 	.word	0x240000f4
 800fb80:	08017064 	.word	0x08017064
 800fb84:	08017444 	.word	0x08017444
 800fb88:	080170b0 	.word	0x080170b0
 800fb8c:	08017480 	.word	0x08017480
 800fb90:	24000124 	.word	0x24000124
 800fb94:	24000121 	.word	0x24000121
 800fb98:	080174a0 	.word	0x080174a0
            } else {
              recv_data = cseg->p;
 800fb9c:	68bb      	ldr	r3, [r7, #8]
 800fb9e:	685b      	ldr	r3, [r3, #4]
 800fba0:	4a70      	ldr	r2, [pc, #448]	; (800fd64 <tcp_receive+0xcf4>)
 800fba2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800fba4:	68bb      	ldr	r3, [r7, #8]
 800fba6:	2200      	movs	r2, #0
 800fba8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fbaa:	68bb      	ldr	r3, [r7, #8]
 800fbac:	68db      	ldr	r3, [r3, #12]
 800fbae:	899b      	ldrh	r3, [r3, #12]
 800fbb0:	b29b      	uxth	r3, r3
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f7fa fab8 	bl	800a128 <lwip_htons>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	b2db      	uxtb	r3, r3
 800fbbc:	f003 0301 	and.w	r3, r3, #1
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d00d      	beq.n	800fbe0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800fbc4:	4b68      	ldr	r3, [pc, #416]	; (800fd68 <tcp_receive+0xcf8>)
 800fbc6:	781b      	ldrb	r3, [r3, #0]
 800fbc8:	f043 0320 	orr.w	r3, r3, #32
 800fbcc:	b2da      	uxtb	r2, r3
 800fbce:	4b66      	ldr	r3, [pc, #408]	; (800fd68 <tcp_receive+0xcf8>)
 800fbd0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	7d1b      	ldrb	r3, [r3, #20]
 800fbd6:	2b04      	cmp	r3, #4
 800fbd8:	d102      	bne.n	800fbe0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	2207      	movs	r2, #7
 800fbde:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800fbe0:	68bb      	ldr	r3, [r7, #8]
 800fbe2:	681a      	ldr	r2, [r3, #0]
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800fbe8:	68b8      	ldr	r0, [r7, #8]
 800fbea:	f7fd faf0 	bl	800d1ce <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d008      	beq.n	800fc08 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fbfa:	68db      	ldr	r3, [r3, #12]
 800fbfc:	685a      	ldr	r2, [r3, #4]
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800fc02:	429a      	cmp	r2, r3
 800fc04:	f43f af43 	beq.w	800fa8e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	8b5b      	ldrh	r3, [r3, #26]
 800fc0c:	f003 0301 	and.w	r3, r3, #1
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d00e      	beq.n	800fc32 <tcp_receive+0xbc2>
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	8b5b      	ldrh	r3, [r3, #26]
 800fc18:	f023 0301 	bic.w	r3, r3, #1
 800fc1c:	b29a      	uxth	r2, r3
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	835a      	strh	r2, [r3, #26]
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	8b5b      	ldrh	r3, [r3, #26]
 800fc26:	f043 0302 	orr.w	r3, r3, #2
 800fc2a:	b29a      	uxth	r2, r3
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fc30:	e188      	b.n	800ff44 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	8b5b      	ldrh	r3, [r3, #26]
 800fc36:	f043 0301 	orr.w	r3, r3, #1
 800fc3a:	b29a      	uxth	r2, r3
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fc40:	e180      	b.n	800ff44 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d106      	bne.n	800fc58 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800fc4a:	4848      	ldr	r0, [pc, #288]	; (800fd6c <tcp_receive+0xcfc>)
 800fc4c:	f7fd faf6 	bl	800d23c <tcp_seg_copy>
 800fc50:	4602      	mov	r2, r0
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	675a      	str	r2, [r3, #116]	; 0x74
 800fc56:	e16d      	b.n	800ff34 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800fc58:	2300      	movs	r3, #0
 800fc5a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc60:	63bb      	str	r3, [r7, #56]	; 0x38
 800fc62:	e157      	b.n	800ff14 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800fc64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc66:	68db      	ldr	r3, [r3, #12]
 800fc68:	685a      	ldr	r2, [r3, #4]
 800fc6a:	4b41      	ldr	r3, [pc, #260]	; (800fd70 <tcp_receive+0xd00>)
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	429a      	cmp	r2, r3
 800fc70:	d11d      	bne.n	800fcae <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800fc72:	4b3e      	ldr	r3, [pc, #248]	; (800fd6c <tcp_receive+0xcfc>)
 800fc74:	891a      	ldrh	r2, [r3, #8]
 800fc76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc78:	891b      	ldrh	r3, [r3, #8]
 800fc7a:	429a      	cmp	r2, r3
 800fc7c:	f240 814f 	bls.w	800ff1e <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fc80:	483a      	ldr	r0, [pc, #232]	; (800fd6c <tcp_receive+0xcfc>)
 800fc82:	f7fd fadb 	bl	800d23c <tcp_seg_copy>
 800fc86:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800fc88:	697b      	ldr	r3, [r7, #20]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	f000 8149 	beq.w	800ff22 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800fc90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d003      	beq.n	800fc9e <tcp_receive+0xc2e>
                    prev->next = cseg;
 800fc96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc98:	697a      	ldr	r2, [r7, #20]
 800fc9a:	601a      	str	r2, [r3, #0]
 800fc9c:	e002      	b.n	800fca4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	697a      	ldr	r2, [r7, #20]
 800fca2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800fca4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fca6:	6978      	ldr	r0, [r7, #20]
 800fca8:	f7ff f8de 	bl	800ee68 <tcp_oos_insert_segment>
                }
                break;
 800fcac:	e139      	b.n	800ff22 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800fcae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d117      	bne.n	800fce4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800fcb4:	4b2e      	ldr	r3, [pc, #184]	; (800fd70 <tcp_receive+0xd00>)
 800fcb6:	681a      	ldr	r2, [r3, #0]
 800fcb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcba:	68db      	ldr	r3, [r3, #12]
 800fcbc:	685b      	ldr	r3, [r3, #4]
 800fcbe:	1ad3      	subs	r3, r2, r3
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	da57      	bge.n	800fd74 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fcc4:	4829      	ldr	r0, [pc, #164]	; (800fd6c <tcp_receive+0xcfc>)
 800fcc6:	f7fd fab9 	bl	800d23c <tcp_seg_copy>
 800fcca:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800fccc:	69bb      	ldr	r3, [r7, #24]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	f000 8129 	beq.w	800ff26 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	69ba      	ldr	r2, [r7, #24]
 800fcd8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800fcda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fcdc:	69b8      	ldr	r0, [r7, #24]
 800fcde:	f7ff f8c3 	bl	800ee68 <tcp_oos_insert_segment>
                  }
                  break;
 800fce2:	e120      	b.n	800ff26 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800fce4:	4b22      	ldr	r3, [pc, #136]	; (800fd70 <tcp_receive+0xd00>)
 800fce6:	681a      	ldr	r2, [r3, #0]
 800fce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcea:	68db      	ldr	r3, [r3, #12]
 800fcec:	685b      	ldr	r3, [r3, #4]
 800fcee:	1ad3      	subs	r3, r2, r3
 800fcf0:	3b01      	subs	r3, #1
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	db3e      	blt.n	800fd74 <tcp_receive+0xd04>
 800fcf6:	4b1e      	ldr	r3, [pc, #120]	; (800fd70 <tcp_receive+0xd00>)
 800fcf8:	681a      	ldr	r2, [r3, #0]
 800fcfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcfc:	68db      	ldr	r3, [r3, #12]
 800fcfe:	685b      	ldr	r3, [r3, #4]
 800fd00:	1ad3      	subs	r3, r2, r3
 800fd02:	3301      	adds	r3, #1
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	dc35      	bgt.n	800fd74 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fd08:	4818      	ldr	r0, [pc, #96]	; (800fd6c <tcp_receive+0xcfc>)
 800fd0a:	f7fd fa97 	bl	800d23c <tcp_seg_copy>
 800fd0e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800fd10:	69fb      	ldr	r3, [r7, #28]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	f000 8109 	beq.w	800ff2a <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800fd18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd1a:	68db      	ldr	r3, [r3, #12]
 800fd1c:	685b      	ldr	r3, [r3, #4]
 800fd1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fd20:	8912      	ldrh	r2, [r2, #8]
 800fd22:	441a      	add	r2, r3
 800fd24:	4b12      	ldr	r3, [pc, #72]	; (800fd70 <tcp_receive+0xd00>)
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	1ad3      	subs	r3, r2, r3
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	dd12      	ble.n	800fd54 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800fd2e:	4b10      	ldr	r3, [pc, #64]	; (800fd70 <tcp_receive+0xd00>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	b29a      	uxth	r2, r3
 800fd34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd36:	68db      	ldr	r3, [r3, #12]
 800fd38:	685b      	ldr	r3, [r3, #4]
 800fd3a:	b29b      	uxth	r3, r3
 800fd3c:	1ad3      	subs	r3, r2, r3
 800fd3e:	b29a      	uxth	r2, r3
 800fd40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd42:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800fd44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd46:	685a      	ldr	r2, [r3, #4]
 800fd48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd4a:	891b      	ldrh	r3, [r3, #8]
 800fd4c:	4619      	mov	r1, r3
 800fd4e:	4610      	mov	r0, r2
 800fd50:	f7fb fc7a 	bl	800b648 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800fd54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd56:	69fa      	ldr	r2, [r7, #28]
 800fd58:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800fd5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fd5c:	69f8      	ldr	r0, [r7, #28]
 800fd5e:	f7ff f883 	bl	800ee68 <tcp_oos_insert_segment>
                  }
                  break;
 800fd62:	e0e2      	b.n	800ff2a <tcp_receive+0xeba>
 800fd64:	24000124 	.word	0x24000124
 800fd68:	24000121 	.word	0x24000121
 800fd6c:	240000f4 	.word	0x240000f4
 800fd70:	24000114 	.word	0x24000114
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800fd74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd76:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800fd78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	f040 80c6 	bne.w	800ff0e <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800fd82:	4b80      	ldr	r3, [pc, #512]	; (800ff84 <tcp_receive+0xf14>)
 800fd84:	681a      	ldr	r2, [r3, #0]
 800fd86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd88:	68db      	ldr	r3, [r3, #12]
 800fd8a:	685b      	ldr	r3, [r3, #4]
 800fd8c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	f340 80bd 	ble.w	800ff0e <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fd94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd96:	68db      	ldr	r3, [r3, #12]
 800fd98:	899b      	ldrh	r3, [r3, #12]
 800fd9a:	b29b      	uxth	r3, r3
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	f7fa f9c3 	bl	800a128 <lwip_htons>
 800fda2:	4603      	mov	r3, r0
 800fda4:	b2db      	uxtb	r3, r3
 800fda6:	f003 0301 	and.w	r3, r3, #1
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	f040 80bf 	bne.w	800ff2e <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800fdb0:	4875      	ldr	r0, [pc, #468]	; (800ff88 <tcp_receive+0xf18>)
 800fdb2:	f7fd fa43 	bl	800d23c <tcp_seg_copy>
 800fdb6:	4602      	mov	r2, r0
 800fdb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdba:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800fdbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	f000 80b6 	beq.w	800ff32 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800fdc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdc8:	68db      	ldr	r3, [r3, #12]
 800fdca:	685b      	ldr	r3, [r3, #4]
 800fdcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fdce:	8912      	ldrh	r2, [r2, #8]
 800fdd0:	441a      	add	r2, r3
 800fdd2:	4b6c      	ldr	r3, [pc, #432]	; (800ff84 <tcp_receive+0xf14>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	1ad3      	subs	r3, r2, r3
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	dd12      	ble.n	800fe02 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800fddc:	4b69      	ldr	r3, [pc, #420]	; (800ff84 <tcp_receive+0xf14>)
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	b29a      	uxth	r2, r3
 800fde2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fde4:	68db      	ldr	r3, [r3, #12]
 800fde6:	685b      	ldr	r3, [r3, #4]
 800fde8:	b29b      	uxth	r3, r3
 800fdea:	1ad3      	subs	r3, r2, r3
 800fdec:	b29a      	uxth	r2, r3
 800fdee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdf0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800fdf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdf4:	685a      	ldr	r2, [r3, #4]
 800fdf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdf8:	891b      	ldrh	r3, [r3, #8]
 800fdfa:	4619      	mov	r1, r3
 800fdfc:	4610      	mov	r0, r2
 800fdfe:	f7fb fc23 	bl	800b648 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800fe02:	4b62      	ldr	r3, [pc, #392]	; (800ff8c <tcp_receive+0xf1c>)
 800fe04:	881b      	ldrh	r3, [r3, #0]
 800fe06:	461a      	mov	r2, r3
 800fe08:	4b5e      	ldr	r3, [pc, #376]	; (800ff84 <tcp_receive+0xf14>)
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	441a      	add	r2, r3
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe12:	6879      	ldr	r1, [r7, #4]
 800fe14:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fe16:	440b      	add	r3, r1
 800fe18:	1ad3      	subs	r3, r2, r3
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	f340 8089 	ble.w	800ff32 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800fe20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	68db      	ldr	r3, [r3, #12]
 800fe26:	899b      	ldrh	r3, [r3, #12]
 800fe28:	b29b      	uxth	r3, r3
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	f7fa f97c 	bl	800a128 <lwip_htons>
 800fe30:	4603      	mov	r3, r0
 800fe32:	b2db      	uxtb	r3, r3
 800fe34:	f003 0301 	and.w	r3, r3, #1
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d022      	beq.n	800fe82 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800fe3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	68db      	ldr	r3, [r3, #12]
 800fe42:	899b      	ldrh	r3, [r3, #12]
 800fe44:	b29b      	uxth	r3, r3
 800fe46:	b21b      	sxth	r3, r3
 800fe48:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fe4c:	b21c      	sxth	r4, r3
 800fe4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	68db      	ldr	r3, [r3, #12]
 800fe54:	899b      	ldrh	r3, [r3, #12]
 800fe56:	b29b      	uxth	r3, r3
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f7fa f965 	bl	800a128 <lwip_htons>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	b2db      	uxtb	r3, r3
 800fe62:	b29b      	uxth	r3, r3
 800fe64:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fe68:	b29b      	uxth	r3, r3
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f7fa f95c 	bl	800a128 <lwip_htons>
 800fe70:	4603      	mov	r3, r0
 800fe72:	b21b      	sxth	r3, r3
 800fe74:	4323      	orrs	r3, r4
 800fe76:	b21a      	sxth	r2, r3
 800fe78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	68db      	ldr	r3, [r3, #12]
 800fe7e:	b292      	uxth	r2, r2
 800fe80:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe86:	b29a      	uxth	r2, r3
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fe8c:	4413      	add	r3, r2
 800fe8e:	b299      	uxth	r1, r3
 800fe90:	4b3c      	ldr	r3, [pc, #240]	; (800ff84 <tcp_receive+0xf14>)
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	b29a      	uxth	r2, r3
 800fe96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	1a8a      	subs	r2, r1, r2
 800fe9c:	b292      	uxth	r2, r2
 800fe9e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800fea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	685a      	ldr	r2, [r3, #4]
 800fea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	891b      	ldrh	r3, [r3, #8]
 800feac:	4619      	mov	r1, r3
 800feae:	4610      	mov	r0, r2
 800feb0:	f7fb fbca 	bl	800b648 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800feb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	891c      	ldrh	r4, [r3, #8]
 800feba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	68db      	ldr	r3, [r3, #12]
 800fec0:	899b      	ldrh	r3, [r3, #12]
 800fec2:	b29b      	uxth	r3, r3
 800fec4:	4618      	mov	r0, r3
 800fec6:	f7fa f92f 	bl	800a128 <lwip_htons>
 800feca:	4603      	mov	r3, r0
 800fecc:	b2db      	uxtb	r3, r3
 800fece:	f003 0303 	and.w	r3, r3, #3
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d001      	beq.n	800feda <tcp_receive+0xe6a>
 800fed6:	2301      	movs	r3, #1
 800fed8:	e000      	b.n	800fedc <tcp_receive+0xe6c>
 800feda:	2300      	movs	r3, #0
 800fedc:	4423      	add	r3, r4
 800fede:	b29a      	uxth	r2, r3
 800fee0:	4b2a      	ldr	r3, [pc, #168]	; (800ff8c <tcp_receive+0xf1c>)
 800fee2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fee4:	4b29      	ldr	r3, [pc, #164]	; (800ff8c <tcp_receive+0xf1c>)
 800fee6:	881b      	ldrh	r3, [r3, #0]
 800fee8:	461a      	mov	r2, r3
 800feea:	4b26      	ldr	r3, [pc, #152]	; (800ff84 <tcp_receive+0xf14>)
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	441a      	add	r2, r3
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fef4:	6879      	ldr	r1, [r7, #4]
 800fef6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fef8:	440b      	add	r3, r1
 800fefa:	429a      	cmp	r2, r3
 800fefc:	d019      	beq.n	800ff32 <tcp_receive+0xec2>
 800fefe:	4b24      	ldr	r3, [pc, #144]	; (800ff90 <tcp_receive+0xf20>)
 800ff00:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800ff04:	4923      	ldr	r1, [pc, #140]	; (800ff94 <tcp_receive+0xf24>)
 800ff06:	4824      	ldr	r0, [pc, #144]	; (800ff98 <tcp_receive+0xf28>)
 800ff08:	f004 fed6 	bl	8014cb8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ff0c:	e011      	b.n	800ff32 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ff0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	63bb      	str	r3, [r7, #56]	; 0x38
 800ff14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	f47f aea4 	bne.w	800fc64 <tcp_receive+0xbf4>
 800ff1c:	e00a      	b.n	800ff34 <tcp_receive+0xec4>
                break;
 800ff1e:	bf00      	nop
 800ff20:	e008      	b.n	800ff34 <tcp_receive+0xec4>
                break;
 800ff22:	bf00      	nop
 800ff24:	e006      	b.n	800ff34 <tcp_receive+0xec4>
                  break;
 800ff26:	bf00      	nop
 800ff28:	e004      	b.n	800ff34 <tcp_receive+0xec4>
                  break;
 800ff2a:	bf00      	nop
 800ff2c:	e002      	b.n	800ff34 <tcp_receive+0xec4>
                  break;
 800ff2e:	bf00      	nop
 800ff30:	e000      	b.n	800ff34 <tcp_receive+0xec4>
                break;
 800ff32:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	f001 fe8b 	bl	8011c50 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800ff3a:	e003      	b.n	800ff44 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800ff3c:	6878      	ldr	r0, [r7, #4]
 800ff3e:	f001 fe87 	bl	8011c50 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ff42:	e01a      	b.n	800ff7a <tcp_receive+0xf0a>
 800ff44:	e019      	b.n	800ff7a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800ff46:	4b0f      	ldr	r3, [pc, #60]	; (800ff84 <tcp_receive+0xf14>)
 800ff48:	681a      	ldr	r2, [r3, #0]
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff4e:	1ad3      	subs	r3, r2, r3
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	db0a      	blt.n	800ff6a <tcp_receive+0xefa>
 800ff54:	4b0b      	ldr	r3, [pc, #44]	; (800ff84 <tcp_receive+0xf14>)
 800ff56:	681a      	ldr	r2, [r3, #0]
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff5c:	6879      	ldr	r1, [r7, #4]
 800ff5e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ff60:	440b      	add	r3, r1
 800ff62:	1ad3      	subs	r3, r2, r3
 800ff64:	3301      	adds	r3, #1
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	dd07      	ble.n	800ff7a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	8b5b      	ldrh	r3, [r3, #26]
 800ff6e:	f043 0302 	orr.w	r3, r3, #2
 800ff72:	b29a      	uxth	r2, r3
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ff78:	e7ff      	b.n	800ff7a <tcp_receive+0xf0a>
 800ff7a:	bf00      	nop
 800ff7c:	3750      	adds	r7, #80	; 0x50
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	bdb0      	pop	{r4, r5, r7, pc}
 800ff82:	bf00      	nop
 800ff84:	24000114 	.word	0x24000114
 800ff88:	240000f4 	.word	0x240000f4
 800ff8c:	2400011e 	.word	0x2400011e
 800ff90:	08017064 	.word	0x08017064
 800ff94:	0801740c 	.word	0x0801740c
 800ff98:	080170b0 	.word	0x080170b0

0800ff9c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ff9c:	b480      	push	{r7}
 800ff9e:	b083      	sub	sp, #12
 800ffa0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ffa2:	4b15      	ldr	r3, [pc, #84]	; (800fff8 <tcp_get_next_optbyte+0x5c>)
 800ffa4:	881b      	ldrh	r3, [r3, #0]
 800ffa6:	1c5a      	adds	r2, r3, #1
 800ffa8:	b291      	uxth	r1, r2
 800ffaa:	4a13      	ldr	r2, [pc, #76]	; (800fff8 <tcp_get_next_optbyte+0x5c>)
 800ffac:	8011      	strh	r1, [r2, #0]
 800ffae:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ffb0:	4b12      	ldr	r3, [pc, #72]	; (800fffc <tcp_get_next_optbyte+0x60>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d004      	beq.n	800ffc2 <tcp_get_next_optbyte+0x26>
 800ffb8:	4b11      	ldr	r3, [pc, #68]	; (8010000 <tcp_get_next_optbyte+0x64>)
 800ffba:	881b      	ldrh	r3, [r3, #0]
 800ffbc:	88fa      	ldrh	r2, [r7, #6]
 800ffbe:	429a      	cmp	r2, r3
 800ffc0:	d208      	bcs.n	800ffd4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ffc2:	4b10      	ldr	r3, [pc, #64]	; (8010004 <tcp_get_next_optbyte+0x68>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	3314      	adds	r3, #20
 800ffc8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800ffca:	88fb      	ldrh	r3, [r7, #6]
 800ffcc:	683a      	ldr	r2, [r7, #0]
 800ffce:	4413      	add	r3, r2
 800ffd0:	781b      	ldrb	r3, [r3, #0]
 800ffd2:	e00b      	b.n	800ffec <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ffd4:	88fb      	ldrh	r3, [r7, #6]
 800ffd6:	b2da      	uxtb	r2, r3
 800ffd8:	4b09      	ldr	r3, [pc, #36]	; (8010000 <tcp_get_next_optbyte+0x64>)
 800ffda:	881b      	ldrh	r3, [r3, #0]
 800ffdc:	b2db      	uxtb	r3, r3
 800ffde:	1ad3      	subs	r3, r2, r3
 800ffe0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800ffe2:	4b06      	ldr	r3, [pc, #24]	; (800fffc <tcp_get_next_optbyte+0x60>)
 800ffe4:	681a      	ldr	r2, [r3, #0]
 800ffe6:	797b      	ldrb	r3, [r7, #5]
 800ffe8:	4413      	add	r3, r2
 800ffea:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ffec:	4618      	mov	r0, r3
 800ffee:	370c      	adds	r7, #12
 800fff0:	46bd      	mov	sp, r7
 800fff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff6:	4770      	bx	lr
 800fff8:	24000110 	.word	0x24000110
 800fffc:	2400010c 	.word	0x2400010c
 8010000:	2400010a 	.word	0x2400010a
 8010004:	24000104 	.word	0x24000104

08010008 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b084      	sub	sp, #16
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d106      	bne.n	8010024 <tcp_parseopt+0x1c>
 8010016:	4b32      	ldr	r3, [pc, #200]	; (80100e0 <tcp_parseopt+0xd8>)
 8010018:	f240 727d 	movw	r2, #1917	; 0x77d
 801001c:	4931      	ldr	r1, [pc, #196]	; (80100e4 <tcp_parseopt+0xdc>)
 801001e:	4832      	ldr	r0, [pc, #200]	; (80100e8 <tcp_parseopt+0xe0>)
 8010020:	f004 fe4a 	bl	8014cb8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010024:	4b31      	ldr	r3, [pc, #196]	; (80100ec <tcp_parseopt+0xe4>)
 8010026:	881b      	ldrh	r3, [r3, #0]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d055      	beq.n	80100d8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801002c:	4b30      	ldr	r3, [pc, #192]	; (80100f0 <tcp_parseopt+0xe8>)
 801002e:	2200      	movs	r2, #0
 8010030:	801a      	strh	r2, [r3, #0]
 8010032:	e045      	b.n	80100c0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8010034:	f7ff ffb2 	bl	800ff9c <tcp_get_next_optbyte>
 8010038:	4603      	mov	r3, r0
 801003a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801003c:	7bfb      	ldrb	r3, [r7, #15]
 801003e:	2b02      	cmp	r3, #2
 8010040:	d006      	beq.n	8010050 <tcp_parseopt+0x48>
 8010042:	2b02      	cmp	r3, #2
 8010044:	dc2b      	bgt.n	801009e <tcp_parseopt+0x96>
 8010046:	2b00      	cmp	r3, #0
 8010048:	d041      	beq.n	80100ce <tcp_parseopt+0xc6>
 801004a:	2b01      	cmp	r3, #1
 801004c:	d127      	bne.n	801009e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801004e:	e037      	b.n	80100c0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010050:	f7ff ffa4 	bl	800ff9c <tcp_get_next_optbyte>
 8010054:	4603      	mov	r3, r0
 8010056:	2b04      	cmp	r3, #4
 8010058:	d13b      	bne.n	80100d2 <tcp_parseopt+0xca>
 801005a:	4b25      	ldr	r3, [pc, #148]	; (80100f0 <tcp_parseopt+0xe8>)
 801005c:	881b      	ldrh	r3, [r3, #0]
 801005e:	3301      	adds	r3, #1
 8010060:	4a22      	ldr	r2, [pc, #136]	; (80100ec <tcp_parseopt+0xe4>)
 8010062:	8812      	ldrh	r2, [r2, #0]
 8010064:	4293      	cmp	r3, r2
 8010066:	da34      	bge.n	80100d2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010068:	f7ff ff98 	bl	800ff9c <tcp_get_next_optbyte>
 801006c:	4603      	mov	r3, r0
 801006e:	b29b      	uxth	r3, r3
 8010070:	021b      	lsls	r3, r3, #8
 8010072:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010074:	f7ff ff92 	bl	800ff9c <tcp_get_next_optbyte>
 8010078:	4603      	mov	r3, r0
 801007a:	b29a      	uxth	r2, r3
 801007c:	89bb      	ldrh	r3, [r7, #12]
 801007e:	4313      	orrs	r3, r2
 8010080:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010082:	89bb      	ldrh	r3, [r7, #12]
 8010084:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010088:	d804      	bhi.n	8010094 <tcp_parseopt+0x8c>
 801008a:	89bb      	ldrh	r3, [r7, #12]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d001      	beq.n	8010094 <tcp_parseopt+0x8c>
 8010090:	89ba      	ldrh	r2, [r7, #12]
 8010092:	e001      	b.n	8010098 <tcp_parseopt+0x90>
 8010094:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801009c:	e010      	b.n	80100c0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801009e:	f7ff ff7d 	bl	800ff9c <tcp_get_next_optbyte>
 80100a2:	4603      	mov	r3, r0
 80100a4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80100a6:	7afb      	ldrb	r3, [r7, #11]
 80100a8:	2b01      	cmp	r3, #1
 80100aa:	d914      	bls.n	80100d6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80100ac:	7afb      	ldrb	r3, [r7, #11]
 80100ae:	b29a      	uxth	r2, r3
 80100b0:	4b0f      	ldr	r3, [pc, #60]	; (80100f0 <tcp_parseopt+0xe8>)
 80100b2:	881b      	ldrh	r3, [r3, #0]
 80100b4:	4413      	add	r3, r2
 80100b6:	b29b      	uxth	r3, r3
 80100b8:	3b02      	subs	r3, #2
 80100ba:	b29a      	uxth	r2, r3
 80100bc:	4b0c      	ldr	r3, [pc, #48]	; (80100f0 <tcp_parseopt+0xe8>)
 80100be:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80100c0:	4b0b      	ldr	r3, [pc, #44]	; (80100f0 <tcp_parseopt+0xe8>)
 80100c2:	881a      	ldrh	r2, [r3, #0]
 80100c4:	4b09      	ldr	r3, [pc, #36]	; (80100ec <tcp_parseopt+0xe4>)
 80100c6:	881b      	ldrh	r3, [r3, #0]
 80100c8:	429a      	cmp	r2, r3
 80100ca:	d3b3      	bcc.n	8010034 <tcp_parseopt+0x2c>
 80100cc:	e004      	b.n	80100d8 <tcp_parseopt+0xd0>
          return;
 80100ce:	bf00      	nop
 80100d0:	e002      	b.n	80100d8 <tcp_parseopt+0xd0>
            return;
 80100d2:	bf00      	nop
 80100d4:	e000      	b.n	80100d8 <tcp_parseopt+0xd0>
            return;
 80100d6:	bf00      	nop
      }
    }
  }
}
 80100d8:	3710      	adds	r7, #16
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}
 80100de:	bf00      	nop
 80100e0:	08017064 	.word	0x08017064
 80100e4:	080174c8 	.word	0x080174c8
 80100e8:	080170b0 	.word	0x080170b0
 80100ec:	24000108 	.word	0x24000108
 80100f0:	24000110 	.word	0x24000110

080100f4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80100f4:	b480      	push	{r7}
 80100f6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80100f8:	4b05      	ldr	r3, [pc, #20]	; (8010110 <tcp_trigger_input_pcb_close+0x1c>)
 80100fa:	781b      	ldrb	r3, [r3, #0]
 80100fc:	f043 0310 	orr.w	r3, r3, #16
 8010100:	b2da      	uxtb	r2, r3
 8010102:	4b03      	ldr	r3, [pc, #12]	; (8010110 <tcp_trigger_input_pcb_close+0x1c>)
 8010104:	701a      	strb	r2, [r3, #0]
}
 8010106:	bf00      	nop
 8010108:	46bd      	mov	sp, r7
 801010a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010e:	4770      	bx	lr
 8010110:	24000121 	.word	0x24000121

08010114 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010114:	b580      	push	{r7, lr}
 8010116:	b084      	sub	sp, #16
 8010118:	af00      	add	r7, sp, #0
 801011a:	60f8      	str	r0, [r7, #12]
 801011c:	60b9      	str	r1, [r7, #8]
 801011e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d00a      	beq.n	801013c <tcp_route+0x28>
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	7a1b      	ldrb	r3, [r3, #8]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d006      	beq.n	801013c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	7a1b      	ldrb	r3, [r3, #8]
 8010132:	4618      	mov	r0, r3
 8010134:	f7fb f8ae 	bl	800b294 <netif_get_by_index>
 8010138:	4603      	mov	r3, r0
 801013a:	e003      	b.n	8010144 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801013c:	6878      	ldr	r0, [r7, #4]
 801013e:	f003 fafb 	bl	8013738 <ip4_route>
 8010142:	4603      	mov	r3, r0
  }
}
 8010144:	4618      	mov	r0, r3
 8010146:	3710      	adds	r7, #16
 8010148:	46bd      	mov	sp, r7
 801014a:	bd80      	pop	{r7, pc}

0801014c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801014c:	b590      	push	{r4, r7, lr}
 801014e:	b087      	sub	sp, #28
 8010150:	af00      	add	r7, sp, #0
 8010152:	60f8      	str	r0, [r7, #12]
 8010154:	60b9      	str	r1, [r7, #8]
 8010156:	603b      	str	r3, [r7, #0]
 8010158:	4613      	mov	r3, r2
 801015a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d105      	bne.n	801016e <tcp_create_segment+0x22>
 8010162:	4b44      	ldr	r3, [pc, #272]	; (8010274 <tcp_create_segment+0x128>)
 8010164:	22a3      	movs	r2, #163	; 0xa3
 8010166:	4944      	ldr	r1, [pc, #272]	; (8010278 <tcp_create_segment+0x12c>)
 8010168:	4844      	ldr	r0, [pc, #272]	; (801027c <tcp_create_segment+0x130>)
 801016a:	f004 fda5 	bl	8014cb8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801016e:	68bb      	ldr	r3, [r7, #8]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d105      	bne.n	8010180 <tcp_create_segment+0x34>
 8010174:	4b3f      	ldr	r3, [pc, #252]	; (8010274 <tcp_create_segment+0x128>)
 8010176:	22a4      	movs	r2, #164	; 0xa4
 8010178:	4941      	ldr	r1, [pc, #260]	; (8010280 <tcp_create_segment+0x134>)
 801017a:	4840      	ldr	r0, [pc, #256]	; (801027c <tcp_create_segment+0x130>)
 801017c:	f004 fd9c 	bl	8014cb8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010180:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010184:	009b      	lsls	r3, r3, #2
 8010186:	b2db      	uxtb	r3, r3
 8010188:	f003 0304 	and.w	r3, r3, #4
 801018c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801018e:	2003      	movs	r0, #3
 8010190:	f7fa fcfa 	bl	800ab88 <memp_malloc>
 8010194:	6138      	str	r0, [r7, #16]
 8010196:	693b      	ldr	r3, [r7, #16]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d104      	bne.n	80101a6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801019c:	68b8      	ldr	r0, [r7, #8]
 801019e:	f7fb fbd9 	bl	800b954 <pbuf_free>
    return NULL;
 80101a2:	2300      	movs	r3, #0
 80101a4:	e061      	b.n	801026a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80101a6:	693b      	ldr	r3, [r7, #16]
 80101a8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80101ac:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80101ae:	693b      	ldr	r3, [r7, #16]
 80101b0:	2200      	movs	r2, #0
 80101b2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80101b4:	693b      	ldr	r3, [r7, #16]
 80101b6:	68ba      	ldr	r2, [r7, #8]
 80101b8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80101ba:	68bb      	ldr	r3, [r7, #8]
 80101bc:	891a      	ldrh	r2, [r3, #8]
 80101be:	7dfb      	ldrb	r3, [r7, #23]
 80101c0:	b29b      	uxth	r3, r3
 80101c2:	429a      	cmp	r2, r3
 80101c4:	d205      	bcs.n	80101d2 <tcp_create_segment+0x86>
 80101c6:	4b2b      	ldr	r3, [pc, #172]	; (8010274 <tcp_create_segment+0x128>)
 80101c8:	22b0      	movs	r2, #176	; 0xb0
 80101ca:	492e      	ldr	r1, [pc, #184]	; (8010284 <tcp_create_segment+0x138>)
 80101cc:	482b      	ldr	r0, [pc, #172]	; (801027c <tcp_create_segment+0x130>)
 80101ce:	f004 fd73 	bl	8014cb8 <iprintf>
  seg->len = p->tot_len - optlen;
 80101d2:	68bb      	ldr	r3, [r7, #8]
 80101d4:	891a      	ldrh	r2, [r3, #8]
 80101d6:	7dfb      	ldrb	r3, [r7, #23]
 80101d8:	b29b      	uxth	r3, r3
 80101da:	1ad3      	subs	r3, r2, r3
 80101dc:	b29a      	uxth	r2, r3
 80101de:	693b      	ldr	r3, [r7, #16]
 80101e0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80101e2:	2114      	movs	r1, #20
 80101e4:	68b8      	ldr	r0, [r7, #8]
 80101e6:	f7fb fb1f 	bl	800b828 <pbuf_add_header>
 80101ea:	4603      	mov	r3, r0
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d004      	beq.n	80101fa <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80101f0:	6938      	ldr	r0, [r7, #16]
 80101f2:	f7fc ffec 	bl	800d1ce <tcp_seg_free>
    return NULL;
 80101f6:	2300      	movs	r3, #0
 80101f8:	e037      	b.n	801026a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80101fa:	693b      	ldr	r3, [r7, #16]
 80101fc:	685b      	ldr	r3, [r3, #4]
 80101fe:	685a      	ldr	r2, [r3, #4]
 8010200:	693b      	ldr	r3, [r7, #16]
 8010202:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	8ada      	ldrh	r2, [r3, #22]
 8010208:	693b      	ldr	r3, [r7, #16]
 801020a:	68dc      	ldr	r4, [r3, #12]
 801020c:	4610      	mov	r0, r2
 801020e:	f7f9 ff8b 	bl	800a128 <lwip_htons>
 8010212:	4603      	mov	r3, r0
 8010214:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	8b1a      	ldrh	r2, [r3, #24]
 801021a:	693b      	ldr	r3, [r7, #16]
 801021c:	68dc      	ldr	r4, [r3, #12]
 801021e:	4610      	mov	r0, r2
 8010220:	f7f9 ff82 	bl	800a128 <lwip_htons>
 8010224:	4603      	mov	r3, r0
 8010226:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010228:	693b      	ldr	r3, [r7, #16]
 801022a:	68dc      	ldr	r4, [r3, #12]
 801022c:	6838      	ldr	r0, [r7, #0]
 801022e:	f7f9 ff90 	bl	800a152 <lwip_htonl>
 8010232:	4603      	mov	r3, r0
 8010234:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010236:	7dfb      	ldrb	r3, [r7, #23]
 8010238:	089b      	lsrs	r3, r3, #2
 801023a:	b2db      	uxtb	r3, r3
 801023c:	b29b      	uxth	r3, r3
 801023e:	3305      	adds	r3, #5
 8010240:	b29b      	uxth	r3, r3
 8010242:	031b      	lsls	r3, r3, #12
 8010244:	b29a      	uxth	r2, r3
 8010246:	79fb      	ldrb	r3, [r7, #7]
 8010248:	b29b      	uxth	r3, r3
 801024a:	4313      	orrs	r3, r2
 801024c:	b29a      	uxth	r2, r3
 801024e:	693b      	ldr	r3, [r7, #16]
 8010250:	68dc      	ldr	r4, [r3, #12]
 8010252:	4610      	mov	r0, r2
 8010254:	f7f9 ff68 	bl	800a128 <lwip_htons>
 8010258:	4603      	mov	r3, r0
 801025a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801025c:	693b      	ldr	r3, [r7, #16]
 801025e:	68db      	ldr	r3, [r3, #12]
 8010260:	2200      	movs	r2, #0
 8010262:	749a      	strb	r2, [r3, #18]
 8010264:	2200      	movs	r2, #0
 8010266:	74da      	strb	r2, [r3, #19]
  return seg;
 8010268:	693b      	ldr	r3, [r7, #16]
}
 801026a:	4618      	mov	r0, r3
 801026c:	371c      	adds	r7, #28
 801026e:	46bd      	mov	sp, r7
 8010270:	bd90      	pop	{r4, r7, pc}
 8010272:	bf00      	nop
 8010274:	080174e4 	.word	0x080174e4
 8010278:	08017518 	.word	0x08017518
 801027c:	08017538 	.word	0x08017538
 8010280:	08017560 	.word	0x08017560
 8010284:	08017584 	.word	0x08017584

08010288 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010288:	b580      	push	{r7, lr}
 801028a:	b086      	sub	sp, #24
 801028c:	af00      	add	r7, sp, #0
 801028e:	607b      	str	r3, [r7, #4]
 8010290:	4603      	mov	r3, r0
 8010292:	73fb      	strb	r3, [r7, #15]
 8010294:	460b      	mov	r3, r1
 8010296:	81bb      	strh	r3, [r7, #12]
 8010298:	4613      	mov	r3, r2
 801029a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801029c:	89bb      	ldrh	r3, [r7, #12]
 801029e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d105      	bne.n	80102b2 <tcp_pbuf_prealloc+0x2a>
 80102a6:	4b30      	ldr	r3, [pc, #192]	; (8010368 <tcp_pbuf_prealloc+0xe0>)
 80102a8:	22e8      	movs	r2, #232	; 0xe8
 80102aa:	4930      	ldr	r1, [pc, #192]	; (801036c <tcp_pbuf_prealloc+0xe4>)
 80102ac:	4830      	ldr	r0, [pc, #192]	; (8010370 <tcp_pbuf_prealloc+0xe8>)
 80102ae:	f004 fd03 	bl	8014cb8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80102b2:	6a3b      	ldr	r3, [r7, #32]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d105      	bne.n	80102c4 <tcp_pbuf_prealloc+0x3c>
 80102b8:	4b2b      	ldr	r3, [pc, #172]	; (8010368 <tcp_pbuf_prealloc+0xe0>)
 80102ba:	22e9      	movs	r2, #233	; 0xe9
 80102bc:	492d      	ldr	r1, [pc, #180]	; (8010374 <tcp_pbuf_prealloc+0xec>)
 80102be:	482c      	ldr	r0, [pc, #176]	; (8010370 <tcp_pbuf_prealloc+0xe8>)
 80102c0:	f004 fcfa 	bl	8014cb8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80102c4:	89ba      	ldrh	r2, [r7, #12]
 80102c6:	897b      	ldrh	r3, [r7, #10]
 80102c8:	429a      	cmp	r2, r3
 80102ca:	d221      	bcs.n	8010310 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80102cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80102d0:	f003 0302 	and.w	r3, r3, #2
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d111      	bne.n	80102fc <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80102d8:	6a3b      	ldr	r3, [r7, #32]
 80102da:	8b5b      	ldrh	r3, [r3, #26]
 80102dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d115      	bne.n	8010310 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80102e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d007      	beq.n	80102fc <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80102ec:	6a3b      	ldr	r3, [r7, #32]
 80102ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d103      	bne.n	80102fc <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80102f4:	6a3b      	ldr	r3, [r7, #32]
 80102f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d009      	beq.n	8010310 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80102fc:	89bb      	ldrh	r3, [r7, #12]
 80102fe:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8010302:	f023 0203 	bic.w	r2, r3, #3
 8010306:	897b      	ldrh	r3, [r7, #10]
 8010308:	4293      	cmp	r3, r2
 801030a:	bf28      	it	cs
 801030c:	4613      	movcs	r3, r2
 801030e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010310:	8af9      	ldrh	r1, [r7, #22]
 8010312:	7bfb      	ldrb	r3, [r7, #15]
 8010314:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010318:	4618      	mov	r0, r3
 801031a:	f7fb f837 	bl	800b38c <pbuf_alloc>
 801031e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010320:	693b      	ldr	r3, [r7, #16]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d101      	bne.n	801032a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8010326:	2300      	movs	r3, #0
 8010328:	e019      	b.n	801035e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801032a:	693b      	ldr	r3, [r7, #16]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d006      	beq.n	8010340 <tcp_pbuf_prealloc+0xb8>
 8010332:	4b0d      	ldr	r3, [pc, #52]	; (8010368 <tcp_pbuf_prealloc+0xe0>)
 8010334:	f240 120b 	movw	r2, #267	; 0x10b
 8010338:	490f      	ldr	r1, [pc, #60]	; (8010378 <tcp_pbuf_prealloc+0xf0>)
 801033a:	480d      	ldr	r0, [pc, #52]	; (8010370 <tcp_pbuf_prealloc+0xe8>)
 801033c:	f004 fcbc 	bl	8014cb8 <iprintf>
  *oversize = p->len - length;
 8010340:	693b      	ldr	r3, [r7, #16]
 8010342:	895a      	ldrh	r2, [r3, #10]
 8010344:	89bb      	ldrh	r3, [r7, #12]
 8010346:	1ad3      	subs	r3, r2, r3
 8010348:	b29a      	uxth	r2, r3
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801034e:	693b      	ldr	r3, [r7, #16]
 8010350:	89ba      	ldrh	r2, [r7, #12]
 8010352:	811a      	strh	r2, [r3, #8]
 8010354:	693b      	ldr	r3, [r7, #16]
 8010356:	891a      	ldrh	r2, [r3, #8]
 8010358:	693b      	ldr	r3, [r7, #16]
 801035a:	815a      	strh	r2, [r3, #10]
  return p;
 801035c:	693b      	ldr	r3, [r7, #16]
}
 801035e:	4618      	mov	r0, r3
 8010360:	3718      	adds	r7, #24
 8010362:	46bd      	mov	sp, r7
 8010364:	bd80      	pop	{r7, pc}
 8010366:	bf00      	nop
 8010368:	080174e4 	.word	0x080174e4
 801036c:	0801759c 	.word	0x0801759c
 8010370:	08017538 	.word	0x08017538
 8010374:	080175c0 	.word	0x080175c0
 8010378:	080175e0 	.word	0x080175e0

0801037c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b082      	sub	sp, #8
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
 8010384:	460b      	mov	r3, r1
 8010386:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d106      	bne.n	801039c <tcp_write_checks+0x20>
 801038e:	4b33      	ldr	r3, [pc, #204]	; (801045c <tcp_write_checks+0xe0>)
 8010390:	f240 1233 	movw	r2, #307	; 0x133
 8010394:	4932      	ldr	r1, [pc, #200]	; (8010460 <tcp_write_checks+0xe4>)
 8010396:	4833      	ldr	r0, [pc, #204]	; (8010464 <tcp_write_checks+0xe8>)
 8010398:	f004 fc8e 	bl	8014cb8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	7d1b      	ldrb	r3, [r3, #20]
 80103a0:	2b04      	cmp	r3, #4
 80103a2:	d00e      	beq.n	80103c2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80103a8:	2b07      	cmp	r3, #7
 80103aa:	d00a      	beq.n	80103c2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80103b0:	2b02      	cmp	r3, #2
 80103b2:	d006      	beq.n	80103c2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80103b8:	2b03      	cmp	r3, #3
 80103ba:	d002      	beq.n	80103c2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80103bc:	f06f 030a 	mvn.w	r3, #10
 80103c0:	e048      	b.n	8010454 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80103c2:	887b      	ldrh	r3, [r7, #2]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d101      	bne.n	80103cc <tcp_write_checks+0x50>
    return ERR_OK;
 80103c8:	2300      	movs	r3, #0
 80103ca:	e043      	b.n	8010454 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80103d2:	887a      	ldrh	r2, [r7, #2]
 80103d4:	429a      	cmp	r2, r3
 80103d6:	d909      	bls.n	80103ec <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	8b5b      	ldrh	r3, [r3, #26]
 80103dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103e0:	b29a      	uxth	r2, r3
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80103e6:	f04f 33ff 	mov.w	r3, #4294967295
 80103ea:	e033      	b.n	8010454 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80103f2:	2b08      	cmp	r3, #8
 80103f4:	d909      	bls.n	801040a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	8b5b      	ldrh	r3, [r3, #26]
 80103fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103fe:	b29a      	uxth	r2, r3
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010404:	f04f 33ff 	mov.w	r3, #4294967295
 8010408:	e024      	b.n	8010454 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010410:	2b00      	cmp	r3, #0
 8010412:	d00f      	beq.n	8010434 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010418:	2b00      	cmp	r3, #0
 801041a:	d11a      	bne.n	8010452 <tcp_write_checks+0xd6>
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010420:	2b00      	cmp	r3, #0
 8010422:	d116      	bne.n	8010452 <tcp_write_checks+0xd6>
 8010424:	4b0d      	ldr	r3, [pc, #52]	; (801045c <tcp_write_checks+0xe0>)
 8010426:	f240 1255 	movw	r2, #341	; 0x155
 801042a:	490f      	ldr	r1, [pc, #60]	; (8010468 <tcp_write_checks+0xec>)
 801042c:	480d      	ldr	r0, [pc, #52]	; (8010464 <tcp_write_checks+0xe8>)
 801042e:	f004 fc43 	bl	8014cb8 <iprintf>
 8010432:	e00e      	b.n	8010452 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010438:	2b00      	cmp	r3, #0
 801043a:	d103      	bne.n	8010444 <tcp_write_checks+0xc8>
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010440:	2b00      	cmp	r3, #0
 8010442:	d006      	beq.n	8010452 <tcp_write_checks+0xd6>
 8010444:	4b05      	ldr	r3, [pc, #20]	; (801045c <tcp_write_checks+0xe0>)
 8010446:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801044a:	4908      	ldr	r1, [pc, #32]	; (801046c <tcp_write_checks+0xf0>)
 801044c:	4805      	ldr	r0, [pc, #20]	; (8010464 <tcp_write_checks+0xe8>)
 801044e:	f004 fc33 	bl	8014cb8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8010452:	2300      	movs	r3, #0
}
 8010454:	4618      	mov	r0, r3
 8010456:	3708      	adds	r7, #8
 8010458:	46bd      	mov	sp, r7
 801045a:	bd80      	pop	{r7, pc}
 801045c:	080174e4 	.word	0x080174e4
 8010460:	080175f4 	.word	0x080175f4
 8010464:	08017538 	.word	0x08017538
 8010468:	08017614 	.word	0x08017614
 801046c:	08017650 	.word	0x08017650

08010470 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010470:	b590      	push	{r4, r7, lr}
 8010472:	b09b      	sub	sp, #108	; 0x6c
 8010474:	af04      	add	r7, sp, #16
 8010476:	60f8      	str	r0, [r7, #12]
 8010478:	60b9      	str	r1, [r7, #8]
 801047a:	4611      	mov	r1, r2
 801047c:	461a      	mov	r2, r3
 801047e:	460b      	mov	r3, r1
 8010480:	80fb      	strh	r3, [r7, #6]
 8010482:	4613      	mov	r3, r2
 8010484:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8010486:	2300      	movs	r3, #0
 8010488:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801048a:	2300      	movs	r3, #0
 801048c:	653b      	str	r3, [r7, #80]	; 0x50
 801048e:	2300      	movs	r3, #0
 8010490:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010492:	2300      	movs	r3, #0
 8010494:	64bb      	str	r3, [r7, #72]	; 0x48
 8010496:	2300      	movs	r3, #0
 8010498:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801049a:	2300      	movs	r3, #0
 801049c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80104a0:	2300      	movs	r3, #0
 80104a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80104a6:	2300      	movs	r3, #0
 80104a8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80104aa:	2300      	movs	r3, #0
 80104ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80104ae:	2300      	movs	r3, #0
 80104b0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d109      	bne.n	80104cc <tcp_write+0x5c>
 80104b8:	4ba4      	ldr	r3, [pc, #656]	; (801074c <tcp_write+0x2dc>)
 80104ba:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80104be:	49a4      	ldr	r1, [pc, #656]	; (8010750 <tcp_write+0x2e0>)
 80104c0:	48a4      	ldr	r0, [pc, #656]	; (8010754 <tcp_write+0x2e4>)
 80104c2:	f004 fbf9 	bl	8014cb8 <iprintf>
 80104c6:	f06f 030f 	mvn.w	r3, #15
 80104ca:	e32a      	b.n	8010b22 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80104d2:	085b      	lsrs	r3, r3, #1
 80104d4:	b29a      	uxth	r2, r3
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104da:	4293      	cmp	r3, r2
 80104dc:	bf28      	it	cs
 80104de:	4613      	movcs	r3, r2
 80104e0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80104e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d102      	bne.n	80104ee <tcp_write+0x7e>
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104ec:	e000      	b.n	80104f0 <tcp_write+0x80>
 80104ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80104f0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80104f2:	68bb      	ldr	r3, [r7, #8]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d109      	bne.n	801050c <tcp_write+0x9c>
 80104f8:	4b94      	ldr	r3, [pc, #592]	; (801074c <tcp_write+0x2dc>)
 80104fa:	f240 12ad 	movw	r2, #429	; 0x1ad
 80104fe:	4996      	ldr	r1, [pc, #600]	; (8010758 <tcp_write+0x2e8>)
 8010500:	4894      	ldr	r0, [pc, #592]	; (8010754 <tcp_write+0x2e4>)
 8010502:	f004 fbd9 	bl	8014cb8 <iprintf>
 8010506:	f06f 030f 	mvn.w	r3, #15
 801050a:	e30a      	b.n	8010b22 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801050c:	88fb      	ldrh	r3, [r7, #6]
 801050e:	4619      	mov	r1, r3
 8010510:	68f8      	ldr	r0, [r7, #12]
 8010512:	f7ff ff33 	bl	801037c <tcp_write_checks>
 8010516:	4603      	mov	r3, r0
 8010518:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801051c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010520:	2b00      	cmp	r3, #0
 8010522:	d002      	beq.n	801052a <tcp_write+0xba>
    return err;
 8010524:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010528:	e2fb      	b.n	8010b22 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010530:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010534:	2300      	movs	r3, #0
 8010536:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801053e:	2b00      	cmp	r3, #0
 8010540:	f000 80f6 	beq.w	8010730 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010548:	653b      	str	r3, [r7, #80]	; 0x50
 801054a:	e002      	b.n	8010552 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801054c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d1f8      	bne.n	801054c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801055a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801055c:	7a9b      	ldrb	r3, [r3, #10]
 801055e:	009b      	lsls	r3, r3, #2
 8010560:	b29b      	uxth	r3, r3
 8010562:	f003 0304 	and.w	r3, r3, #4
 8010566:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010568:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801056a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801056c:	891b      	ldrh	r3, [r3, #8]
 801056e:	4619      	mov	r1, r3
 8010570:	8c3b      	ldrh	r3, [r7, #32]
 8010572:	440b      	add	r3, r1
 8010574:	429a      	cmp	r2, r3
 8010576:	da06      	bge.n	8010586 <tcp_write+0x116>
 8010578:	4b74      	ldr	r3, [pc, #464]	; (801074c <tcp_write+0x2dc>)
 801057a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801057e:	4977      	ldr	r1, [pc, #476]	; (801075c <tcp_write+0x2ec>)
 8010580:	4874      	ldr	r0, [pc, #464]	; (8010754 <tcp_write+0x2e4>)
 8010582:	f004 fb99 	bl	8014cb8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010588:	891a      	ldrh	r2, [r3, #8]
 801058a:	8c3b      	ldrh	r3, [r7, #32]
 801058c:	4413      	add	r3, r2
 801058e:	b29b      	uxth	r3, r3
 8010590:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010592:	1ad3      	subs	r3, r2, r3
 8010594:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801059c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801059e:	8a7b      	ldrh	r3, [r7, #18]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d026      	beq.n	80105f2 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80105a4:	8a7b      	ldrh	r3, [r7, #18]
 80105a6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80105a8:	429a      	cmp	r2, r3
 80105aa:	d206      	bcs.n	80105ba <tcp_write+0x14a>
 80105ac:	4b67      	ldr	r3, [pc, #412]	; (801074c <tcp_write+0x2dc>)
 80105ae:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80105b2:	496b      	ldr	r1, [pc, #428]	; (8010760 <tcp_write+0x2f0>)
 80105b4:	4867      	ldr	r0, [pc, #412]	; (8010754 <tcp_write+0x2e4>)
 80105b6:	f004 fb7f 	bl	8014cb8 <iprintf>
      seg = last_unsent;
 80105ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105bc:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80105be:	8a7b      	ldrh	r3, [r7, #18]
 80105c0:	88fa      	ldrh	r2, [r7, #6]
 80105c2:	4293      	cmp	r3, r2
 80105c4:	bf28      	it	cs
 80105c6:	4613      	movcs	r3, r2
 80105c8:	b29b      	uxth	r3, r3
 80105ca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80105cc:	4293      	cmp	r3, r2
 80105ce:	bf28      	it	cs
 80105d0:	4613      	movcs	r3, r2
 80105d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80105d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80105d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80105da:	4413      	add	r3, r2
 80105dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80105e0:	8a7a      	ldrh	r2, [r7, #18]
 80105e2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80105e4:	1ad3      	subs	r3, r2, r3
 80105e6:	b29b      	uxth	r3, r3
 80105e8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80105ea:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80105ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80105ee:	1ad3      	subs	r3, r2, r3
 80105f0:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80105f2:	8a7b      	ldrh	r3, [r7, #18]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d00b      	beq.n	8010610 <tcp_write+0x1a0>
 80105f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80105fc:	88fb      	ldrh	r3, [r7, #6]
 80105fe:	429a      	cmp	r2, r3
 8010600:	d006      	beq.n	8010610 <tcp_write+0x1a0>
 8010602:	4b52      	ldr	r3, [pc, #328]	; (801074c <tcp_write+0x2dc>)
 8010604:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010608:	4956      	ldr	r1, [pc, #344]	; (8010764 <tcp_write+0x2f4>)
 801060a:	4852      	ldr	r0, [pc, #328]	; (8010754 <tcp_write+0x2e4>)
 801060c:	f004 fb54 	bl	8014cb8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010610:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010614:	88fb      	ldrh	r3, [r7, #6]
 8010616:	429a      	cmp	r2, r3
 8010618:	f080 8167 	bcs.w	80108ea <tcp_write+0x47a>
 801061c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801061e:	2b00      	cmp	r3, #0
 8010620:	f000 8163 	beq.w	80108ea <tcp_write+0x47a>
 8010624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010626:	891b      	ldrh	r3, [r3, #8]
 8010628:	2b00      	cmp	r3, #0
 801062a:	f000 815e 	beq.w	80108ea <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801062e:	88fa      	ldrh	r2, [r7, #6]
 8010630:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010634:	1ad2      	subs	r2, r2, r3
 8010636:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010638:	4293      	cmp	r3, r2
 801063a:	bfa8      	it	ge
 801063c:	4613      	movge	r3, r2
 801063e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8010640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010642:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010644:	797b      	ldrb	r3, [r7, #5]
 8010646:	f003 0301 	and.w	r3, r3, #1
 801064a:	2b00      	cmp	r3, #0
 801064c:	d027      	beq.n	801069e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801064e:	f107 0012 	add.w	r0, r7, #18
 8010652:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010654:	8bf9      	ldrh	r1, [r7, #30]
 8010656:	2301      	movs	r3, #1
 8010658:	9302      	str	r3, [sp, #8]
 801065a:	797b      	ldrb	r3, [r7, #5]
 801065c:	9301      	str	r3, [sp, #4]
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	9300      	str	r3, [sp, #0]
 8010662:	4603      	mov	r3, r0
 8010664:	2000      	movs	r0, #0
 8010666:	f7ff fe0f 	bl	8010288 <tcp_pbuf_prealloc>
 801066a:	6578      	str	r0, [r7, #84]	; 0x54
 801066c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801066e:	2b00      	cmp	r3, #0
 8010670:	f000 8225 	beq.w	8010abe <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8010674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010676:	6858      	ldr	r0, [r3, #4]
 8010678:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801067c:	68ba      	ldr	r2, [r7, #8]
 801067e:	4413      	add	r3, r2
 8010680:	8bfa      	ldrh	r2, [r7, #30]
 8010682:	4619      	mov	r1, r3
 8010684:	f004 fb02 	bl	8014c8c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8010688:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801068a:	f7fb f9eb 	bl	800ba64 <pbuf_clen>
 801068e:	4603      	mov	r3, r0
 8010690:	461a      	mov	r2, r3
 8010692:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010696:	4413      	add	r3, r2
 8010698:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801069c:	e041      	b.n	8010722 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801069e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106a0:	685b      	ldr	r3, [r3, #4]
 80106a2:	637b      	str	r3, [r7, #52]	; 0x34
 80106a4:	e002      	b.n	80106ac <tcp_write+0x23c>
 80106a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	637b      	str	r3, [r7, #52]	; 0x34
 80106ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d1f8      	bne.n	80106a6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80106b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106b6:	7b1b      	ldrb	r3, [r3, #12]
 80106b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d115      	bne.n	80106ec <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80106c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106c2:	685b      	ldr	r3, [r3, #4]
 80106c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80106c6:	8952      	ldrh	r2, [r2, #10]
 80106c8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80106ca:	68ba      	ldr	r2, [r7, #8]
 80106cc:	429a      	cmp	r2, r3
 80106ce:	d10d      	bne.n	80106ec <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80106d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d006      	beq.n	80106e6 <tcp_write+0x276>
 80106d8:	4b1c      	ldr	r3, [pc, #112]	; (801074c <tcp_write+0x2dc>)
 80106da:	f240 2231 	movw	r2, #561	; 0x231
 80106de:	4922      	ldr	r1, [pc, #136]	; (8010768 <tcp_write+0x2f8>)
 80106e0:	481c      	ldr	r0, [pc, #112]	; (8010754 <tcp_write+0x2e4>)
 80106e2:	f004 fae9 	bl	8014cb8 <iprintf>
          extendlen = seglen;
 80106e6:	8bfb      	ldrh	r3, [r7, #30]
 80106e8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80106ea:	e01a      	b.n	8010722 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80106ec:	8bfb      	ldrh	r3, [r7, #30]
 80106ee:	2201      	movs	r2, #1
 80106f0:	4619      	mov	r1, r3
 80106f2:	2000      	movs	r0, #0
 80106f4:	f7fa fe4a 	bl	800b38c <pbuf_alloc>
 80106f8:	6578      	str	r0, [r7, #84]	; 0x54
 80106fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	f000 81e0 	beq.w	8010ac2 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8010702:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010706:	68ba      	ldr	r2, [r7, #8]
 8010708:	441a      	add	r2, r3
 801070a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801070c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801070e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010710:	f7fb f9a8 	bl	800ba64 <pbuf_clen>
 8010714:	4603      	mov	r3, r0
 8010716:	461a      	mov	r2, r3
 8010718:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801071c:	4413      	add	r3, r2
 801071e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8010722:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010726:	8bfb      	ldrh	r3, [r7, #30]
 8010728:	4413      	add	r3, r2
 801072a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801072e:	e0dc      	b.n	80108ea <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010736:	2b00      	cmp	r3, #0
 8010738:	f000 80d7 	beq.w	80108ea <tcp_write+0x47a>
 801073c:	4b03      	ldr	r3, [pc, #12]	; (801074c <tcp_write+0x2dc>)
 801073e:	f240 224a 	movw	r2, #586	; 0x24a
 8010742:	490a      	ldr	r1, [pc, #40]	; (801076c <tcp_write+0x2fc>)
 8010744:	4803      	ldr	r0, [pc, #12]	; (8010754 <tcp_write+0x2e4>)
 8010746:	f004 fab7 	bl	8014cb8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801074a:	e0ce      	b.n	80108ea <tcp_write+0x47a>
 801074c:	080174e4 	.word	0x080174e4
 8010750:	08017684 	.word	0x08017684
 8010754:	08017538 	.word	0x08017538
 8010758:	0801769c 	.word	0x0801769c
 801075c:	080176d0 	.word	0x080176d0
 8010760:	080176e8 	.word	0x080176e8
 8010764:	08017708 	.word	0x08017708
 8010768:	08017728 	.word	0x08017728
 801076c:	08017754 	.word	0x08017754
    struct pbuf *p;
    u16_t left = len - pos;
 8010770:	88fa      	ldrh	r2, [r7, #6]
 8010772:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010776:	1ad3      	subs	r3, r2, r3
 8010778:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801077a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801077e:	b29b      	uxth	r3, r3
 8010780:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010782:	1ad3      	subs	r3, r2, r3
 8010784:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8010786:	8b7a      	ldrh	r2, [r7, #26]
 8010788:	8bbb      	ldrh	r3, [r7, #28]
 801078a:	4293      	cmp	r3, r2
 801078c:	bf28      	it	cs
 801078e:	4613      	movcs	r3, r2
 8010790:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010792:	797b      	ldrb	r3, [r7, #5]
 8010794:	f003 0301 	and.w	r3, r3, #1
 8010798:	2b00      	cmp	r3, #0
 801079a:	d036      	beq.n	801080a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801079c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80107a0:	b29a      	uxth	r2, r3
 80107a2:	8b3b      	ldrh	r3, [r7, #24]
 80107a4:	4413      	add	r3, r2
 80107a6:	b299      	uxth	r1, r3
 80107a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	bf0c      	ite	eq
 80107ae:	2301      	moveq	r3, #1
 80107b0:	2300      	movne	r3, #0
 80107b2:	b2db      	uxtb	r3, r3
 80107b4:	f107 0012 	add.w	r0, r7, #18
 80107b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80107ba:	9302      	str	r3, [sp, #8]
 80107bc:	797b      	ldrb	r3, [r7, #5]
 80107be:	9301      	str	r3, [sp, #4]
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	9300      	str	r3, [sp, #0]
 80107c4:	4603      	mov	r3, r0
 80107c6:	2036      	movs	r0, #54	; 0x36
 80107c8:	f7ff fd5e 	bl	8010288 <tcp_pbuf_prealloc>
 80107cc:	6338      	str	r0, [r7, #48]	; 0x30
 80107ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	f000 8178 	beq.w	8010ac6 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80107d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107d8:	895b      	ldrh	r3, [r3, #10]
 80107da:	8b3a      	ldrh	r2, [r7, #24]
 80107dc:	429a      	cmp	r2, r3
 80107de:	d906      	bls.n	80107ee <tcp_write+0x37e>
 80107e0:	4b8c      	ldr	r3, [pc, #560]	; (8010a14 <tcp_write+0x5a4>)
 80107e2:	f240 2266 	movw	r2, #614	; 0x266
 80107e6:	498c      	ldr	r1, [pc, #560]	; (8010a18 <tcp_write+0x5a8>)
 80107e8:	488c      	ldr	r0, [pc, #560]	; (8010a1c <tcp_write+0x5ac>)
 80107ea:	f004 fa65 	bl	8014cb8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80107ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107f0:	685a      	ldr	r2, [r3, #4]
 80107f2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80107f6:	18d0      	adds	r0, r2, r3
 80107f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80107fc:	68ba      	ldr	r2, [r7, #8]
 80107fe:	4413      	add	r3, r2
 8010800:	8b3a      	ldrh	r2, [r7, #24]
 8010802:	4619      	mov	r1, r3
 8010804:	f004 fa42 	bl	8014c8c <memcpy>
 8010808:	e02f      	b.n	801086a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801080a:	8a7b      	ldrh	r3, [r7, #18]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d006      	beq.n	801081e <tcp_write+0x3ae>
 8010810:	4b80      	ldr	r3, [pc, #512]	; (8010a14 <tcp_write+0x5a4>)
 8010812:	f240 2271 	movw	r2, #625	; 0x271
 8010816:	4982      	ldr	r1, [pc, #520]	; (8010a20 <tcp_write+0x5b0>)
 8010818:	4880      	ldr	r0, [pc, #512]	; (8010a1c <tcp_write+0x5ac>)
 801081a:	f004 fa4d 	bl	8014cb8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801081e:	8b3b      	ldrh	r3, [r7, #24]
 8010820:	2201      	movs	r2, #1
 8010822:	4619      	mov	r1, r3
 8010824:	2036      	movs	r0, #54	; 0x36
 8010826:	f7fa fdb1 	bl	800b38c <pbuf_alloc>
 801082a:	6178      	str	r0, [r7, #20]
 801082c:	697b      	ldr	r3, [r7, #20]
 801082e:	2b00      	cmp	r3, #0
 8010830:	f000 814b 	beq.w	8010aca <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8010834:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010838:	68ba      	ldr	r2, [r7, #8]
 801083a:	441a      	add	r2, r3
 801083c:	697b      	ldr	r3, [r7, #20]
 801083e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010840:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010844:	b29b      	uxth	r3, r3
 8010846:	f44f 7220 	mov.w	r2, #640	; 0x280
 801084a:	4619      	mov	r1, r3
 801084c:	2036      	movs	r0, #54	; 0x36
 801084e:	f7fa fd9d 	bl	800b38c <pbuf_alloc>
 8010852:	6338      	str	r0, [r7, #48]	; 0x30
 8010854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010856:	2b00      	cmp	r3, #0
 8010858:	d103      	bne.n	8010862 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801085a:	6978      	ldr	r0, [r7, #20]
 801085c:	f7fb f87a 	bl	800b954 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8010860:	e136      	b.n	8010ad0 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8010862:	6979      	ldr	r1, [r7, #20]
 8010864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010866:	f7fb f937 	bl	800bad8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801086a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801086c:	f7fb f8fa 	bl	800ba64 <pbuf_clen>
 8010870:	4603      	mov	r3, r0
 8010872:	461a      	mov	r2, r3
 8010874:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010878:	4413      	add	r3, r2
 801087a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801087e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010882:	2b09      	cmp	r3, #9
 8010884:	d903      	bls.n	801088e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8010886:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010888:	f7fb f864 	bl	800b954 <pbuf_free>
      goto memerr;
 801088c:	e120      	b.n	8010ad0 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010892:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010896:	441a      	add	r2, r3
 8010898:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801089c:	9300      	str	r3, [sp, #0]
 801089e:	4613      	mov	r3, r2
 80108a0:	2200      	movs	r2, #0
 80108a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80108a4:	68f8      	ldr	r0, [r7, #12]
 80108a6:	f7ff fc51 	bl	801014c <tcp_create_segment>
 80108aa:	64f8      	str	r0, [r7, #76]	; 0x4c
 80108ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	f000 810d 	beq.w	8010ace <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80108b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d102      	bne.n	80108c0 <tcp_write+0x450>
      queue = seg;
 80108ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108bc:	647b      	str	r3, [r7, #68]	; 0x44
 80108be:	e00c      	b.n	80108da <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80108c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d106      	bne.n	80108d4 <tcp_write+0x464>
 80108c6:	4b53      	ldr	r3, [pc, #332]	; (8010a14 <tcp_write+0x5a4>)
 80108c8:	f240 22ab 	movw	r2, #683	; 0x2ab
 80108cc:	4955      	ldr	r1, [pc, #340]	; (8010a24 <tcp_write+0x5b4>)
 80108ce:	4853      	ldr	r0, [pc, #332]	; (8010a1c <tcp_write+0x5ac>)
 80108d0:	f004 f9f2 	bl	8014cb8 <iprintf>
      prev_seg->next = seg;
 80108d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80108d8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80108da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108dc:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80108de:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80108e2:	8b3b      	ldrh	r3, [r7, #24]
 80108e4:	4413      	add	r3, r2
 80108e6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80108ea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80108ee:	88fb      	ldrh	r3, [r7, #6]
 80108f0:	429a      	cmp	r2, r3
 80108f2:	f4ff af3d 	bcc.w	8010770 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80108f6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d02c      	beq.n	8010956 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80108fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108fe:	685b      	ldr	r3, [r3, #4]
 8010900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010902:	e01e      	b.n	8010942 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8010904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010906:	891a      	ldrh	r2, [r3, #8]
 8010908:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801090a:	4413      	add	r3, r2
 801090c:	b29a      	uxth	r2, r3
 801090e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010910:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8010912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d110      	bne.n	801093c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801091a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801091c:	685b      	ldr	r3, [r3, #4]
 801091e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010920:	8952      	ldrh	r2, [r2, #10]
 8010922:	4413      	add	r3, r2
 8010924:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010926:	68b9      	ldr	r1, [r7, #8]
 8010928:	4618      	mov	r0, r3
 801092a:	f004 f9af 	bl	8014c8c <memcpy>
        p->len += oversize_used;
 801092e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010930:	895a      	ldrh	r2, [r3, #10]
 8010932:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010934:	4413      	add	r3, r2
 8010936:	b29a      	uxth	r2, r3
 8010938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801093a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801093c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010944:	2b00      	cmp	r3, #0
 8010946:	d1dd      	bne.n	8010904 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8010948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801094a:	891a      	ldrh	r2, [r3, #8]
 801094c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801094e:	4413      	add	r3, r2
 8010950:	b29a      	uxth	r2, r3
 8010952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010954:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8010956:	8a7a      	ldrh	r2, [r7, #18]
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801095e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010960:	2b00      	cmp	r3, #0
 8010962:	d018      	beq.n	8010996 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8010964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010966:	2b00      	cmp	r3, #0
 8010968:	d106      	bne.n	8010978 <tcp_write+0x508>
 801096a:	4b2a      	ldr	r3, [pc, #168]	; (8010a14 <tcp_write+0x5a4>)
 801096c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8010970:	492d      	ldr	r1, [pc, #180]	; (8010a28 <tcp_write+0x5b8>)
 8010972:	482a      	ldr	r0, [pc, #168]	; (8010a1c <tcp_write+0x5ac>)
 8010974:	f004 f9a0 	bl	8014cb8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8010978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801097a:	685b      	ldr	r3, [r3, #4]
 801097c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801097e:	4618      	mov	r0, r3
 8010980:	f7fb f8aa 	bl	800bad8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8010984:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010986:	891a      	ldrh	r2, [r3, #8]
 8010988:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801098a:	891b      	ldrh	r3, [r3, #8]
 801098c:	4413      	add	r3, r2
 801098e:	b29a      	uxth	r2, r3
 8010990:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010992:	811a      	strh	r2, [r3, #8]
 8010994:	e037      	b.n	8010a06 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8010996:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010998:	2b00      	cmp	r3, #0
 801099a:	d034      	beq.n	8010a06 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801099c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d003      	beq.n	80109aa <tcp_write+0x53a>
 80109a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109a4:	685b      	ldr	r3, [r3, #4]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d106      	bne.n	80109b8 <tcp_write+0x548>
 80109aa:	4b1a      	ldr	r3, [pc, #104]	; (8010a14 <tcp_write+0x5a4>)
 80109ac:	f240 22e6 	movw	r2, #742	; 0x2e6
 80109b0:	491e      	ldr	r1, [pc, #120]	; (8010a2c <tcp_write+0x5bc>)
 80109b2:	481a      	ldr	r0, [pc, #104]	; (8010a1c <tcp_write+0x5ac>)
 80109b4:	f004 f980 	bl	8014cb8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80109b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109ba:	685b      	ldr	r3, [r3, #4]
 80109bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80109be:	e009      	b.n	80109d4 <tcp_write+0x564>
      p->tot_len += extendlen;
 80109c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109c2:	891a      	ldrh	r2, [r3, #8]
 80109c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80109c6:	4413      	add	r3, r2
 80109c8:	b29a      	uxth	r2, r3
 80109ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109cc:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80109ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80109d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d1f1      	bne.n	80109c0 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80109dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109de:	891a      	ldrh	r2, [r3, #8]
 80109e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80109e2:	4413      	add	r3, r2
 80109e4:	b29a      	uxth	r2, r3
 80109e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109e8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80109ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109ec:	895a      	ldrh	r2, [r3, #10]
 80109ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80109f0:	4413      	add	r3, r2
 80109f2:	b29a      	uxth	r2, r3
 80109f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109f6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80109f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109fa:	891a      	ldrh	r2, [r3, #8]
 80109fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80109fe:	4413      	add	r3, r2
 8010a00:	b29a      	uxth	r2, r3
 8010a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a04:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8010a06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d111      	bne.n	8010a30 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010a10:	66da      	str	r2, [r3, #108]	; 0x6c
 8010a12:	e010      	b.n	8010a36 <tcp_write+0x5c6>
 8010a14:	080174e4 	.word	0x080174e4
 8010a18:	08017784 	.word	0x08017784
 8010a1c:	08017538 	.word	0x08017538
 8010a20:	080177c4 	.word	0x080177c4
 8010a24:	080177d4 	.word	0x080177d4
 8010a28:	080177e8 	.word	0x080177e8
 8010a2c:	08017820 	.word	0x08017820
  } else {
    last_unsent->next = queue;
 8010a30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010a34:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010a3a:	88fb      	ldrh	r3, [r7, #6]
 8010a3c:	441a      	add	r2, r3
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010a48:	88fb      	ldrh	r3, [r7, #6]
 8010a4a:	1ad3      	subs	r3, r2, r3
 8010a4c:	b29a      	uxth	r2, r3
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010a5a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d00e      	beq.n	8010a86 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d10a      	bne.n	8010a86 <tcp_write+0x616>
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d106      	bne.n	8010a86 <tcp_write+0x616>
 8010a78:	4b2c      	ldr	r3, [pc, #176]	; (8010b2c <tcp_write+0x6bc>)
 8010a7a:	f240 3212 	movw	r2, #786	; 0x312
 8010a7e:	492c      	ldr	r1, [pc, #176]	; (8010b30 <tcp_write+0x6c0>)
 8010a80:	482c      	ldr	r0, [pc, #176]	; (8010b34 <tcp_write+0x6c4>)
 8010a82:	f004 f919 	bl	8014cb8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8010a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d016      	beq.n	8010aba <tcp_write+0x64a>
 8010a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a8e:	68db      	ldr	r3, [r3, #12]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d012      	beq.n	8010aba <tcp_write+0x64a>
 8010a94:	797b      	ldrb	r3, [r7, #5]
 8010a96:	f003 0302 	and.w	r3, r3, #2
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d10d      	bne.n	8010aba <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8010a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010aa0:	68db      	ldr	r3, [r3, #12]
 8010aa2:	899b      	ldrh	r3, [r3, #12]
 8010aa4:	b29c      	uxth	r4, r3
 8010aa6:	2008      	movs	r0, #8
 8010aa8:	f7f9 fb3e 	bl	800a128 <lwip_htons>
 8010aac:	4603      	mov	r3, r0
 8010aae:	461a      	mov	r2, r3
 8010ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ab2:	68db      	ldr	r3, [r3, #12]
 8010ab4:	4322      	orrs	r2, r4
 8010ab6:	b292      	uxth	r2, r2
 8010ab8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8010aba:	2300      	movs	r3, #0
 8010abc:	e031      	b.n	8010b22 <tcp_write+0x6b2>
          goto memerr;
 8010abe:	bf00      	nop
 8010ac0:	e006      	b.n	8010ad0 <tcp_write+0x660>
            goto memerr;
 8010ac2:	bf00      	nop
 8010ac4:	e004      	b.n	8010ad0 <tcp_write+0x660>
        goto memerr;
 8010ac6:	bf00      	nop
 8010ac8:	e002      	b.n	8010ad0 <tcp_write+0x660>
        goto memerr;
 8010aca:	bf00      	nop
 8010acc:	e000      	b.n	8010ad0 <tcp_write+0x660>
      goto memerr;
 8010ace:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	8b5b      	ldrh	r3, [r3, #26]
 8010ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ad8:	b29a      	uxth	r2, r3
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8010ade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d002      	beq.n	8010aea <tcp_write+0x67a>
    pbuf_free(concat_p);
 8010ae4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010ae6:	f7fa ff35 	bl	800b954 <pbuf_free>
  }
  if (queue != NULL) {
 8010aea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d002      	beq.n	8010af6 <tcp_write+0x686>
    tcp_segs_free(queue);
 8010af0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010af2:	f7fc fb57 	bl	800d1a4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d00e      	beq.n	8010b1e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d10a      	bne.n	8010b1e <tcp_write+0x6ae>
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d106      	bne.n	8010b1e <tcp_write+0x6ae>
 8010b10:	4b06      	ldr	r3, [pc, #24]	; (8010b2c <tcp_write+0x6bc>)
 8010b12:	f240 3227 	movw	r2, #807	; 0x327
 8010b16:	4906      	ldr	r1, [pc, #24]	; (8010b30 <tcp_write+0x6c0>)
 8010b18:	4806      	ldr	r0, [pc, #24]	; (8010b34 <tcp_write+0x6c4>)
 8010b1a:	f004 f8cd 	bl	8014cb8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8010b1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010b22:	4618      	mov	r0, r3
 8010b24:	375c      	adds	r7, #92	; 0x5c
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bd90      	pop	{r4, r7, pc}
 8010b2a:	bf00      	nop
 8010b2c:	080174e4 	.word	0x080174e4
 8010b30:	08017858 	.word	0x08017858
 8010b34:	08017538 	.word	0x08017538

08010b38 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010b38:	b590      	push	{r4, r7, lr}
 8010b3a:	b08b      	sub	sp, #44	; 0x2c
 8010b3c:	af02      	add	r7, sp, #8
 8010b3e:	6078      	str	r0, [r7, #4]
 8010b40:	460b      	mov	r3, r1
 8010b42:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010b44:	2300      	movs	r3, #0
 8010b46:	61fb      	str	r3, [r7, #28]
 8010b48:	2300      	movs	r3, #0
 8010b4a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d106      	bne.n	8010b64 <tcp_split_unsent_seg+0x2c>
 8010b56:	4b95      	ldr	r3, [pc, #596]	; (8010dac <tcp_split_unsent_seg+0x274>)
 8010b58:	f240 324b 	movw	r2, #843	; 0x34b
 8010b5c:	4994      	ldr	r1, [pc, #592]	; (8010db0 <tcp_split_unsent_seg+0x278>)
 8010b5e:	4895      	ldr	r0, [pc, #596]	; (8010db4 <tcp_split_unsent_seg+0x27c>)
 8010b60:	f004 f8aa 	bl	8014cb8 <iprintf>

  useg = pcb->unsent;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b68:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010b6a:	697b      	ldr	r3, [r7, #20]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d102      	bne.n	8010b76 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010b70:	f04f 33ff 	mov.w	r3, #4294967295
 8010b74:	e116      	b.n	8010da4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010b76:	887b      	ldrh	r3, [r7, #2]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d109      	bne.n	8010b90 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010b7c:	4b8b      	ldr	r3, [pc, #556]	; (8010dac <tcp_split_unsent_seg+0x274>)
 8010b7e:	f240 3253 	movw	r2, #851	; 0x353
 8010b82:	498d      	ldr	r1, [pc, #564]	; (8010db8 <tcp_split_unsent_seg+0x280>)
 8010b84:	488b      	ldr	r0, [pc, #556]	; (8010db4 <tcp_split_unsent_seg+0x27c>)
 8010b86:	f004 f897 	bl	8014cb8 <iprintf>
    return ERR_VAL;
 8010b8a:	f06f 0305 	mvn.w	r3, #5
 8010b8e:	e109      	b.n	8010da4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010b90:	697b      	ldr	r3, [r7, #20]
 8010b92:	891b      	ldrh	r3, [r3, #8]
 8010b94:	887a      	ldrh	r2, [r7, #2]
 8010b96:	429a      	cmp	r2, r3
 8010b98:	d301      	bcc.n	8010b9e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	e102      	b.n	8010da4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ba2:	887a      	ldrh	r2, [r7, #2]
 8010ba4:	429a      	cmp	r2, r3
 8010ba6:	d906      	bls.n	8010bb6 <tcp_split_unsent_seg+0x7e>
 8010ba8:	4b80      	ldr	r3, [pc, #512]	; (8010dac <tcp_split_unsent_seg+0x274>)
 8010baa:	f240 325b 	movw	r2, #859	; 0x35b
 8010bae:	4983      	ldr	r1, [pc, #524]	; (8010dbc <tcp_split_unsent_seg+0x284>)
 8010bb0:	4880      	ldr	r0, [pc, #512]	; (8010db4 <tcp_split_unsent_seg+0x27c>)
 8010bb2:	f004 f881 	bl	8014cb8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010bb6:	697b      	ldr	r3, [r7, #20]
 8010bb8:	891b      	ldrh	r3, [r3, #8]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d106      	bne.n	8010bcc <tcp_split_unsent_seg+0x94>
 8010bbe:	4b7b      	ldr	r3, [pc, #492]	; (8010dac <tcp_split_unsent_seg+0x274>)
 8010bc0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8010bc4:	497e      	ldr	r1, [pc, #504]	; (8010dc0 <tcp_split_unsent_seg+0x288>)
 8010bc6:	487b      	ldr	r0, [pc, #492]	; (8010db4 <tcp_split_unsent_seg+0x27c>)
 8010bc8:	f004 f876 	bl	8014cb8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010bcc:	697b      	ldr	r3, [r7, #20]
 8010bce:	7a9b      	ldrb	r3, [r3, #10]
 8010bd0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010bd2:	7bfb      	ldrb	r3, [r7, #15]
 8010bd4:	009b      	lsls	r3, r3, #2
 8010bd6:	b2db      	uxtb	r3, r3
 8010bd8:	f003 0304 	and.w	r3, r3, #4
 8010bdc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8010bde:	697b      	ldr	r3, [r7, #20]
 8010be0:	891a      	ldrh	r2, [r3, #8]
 8010be2:	887b      	ldrh	r3, [r7, #2]
 8010be4:	1ad3      	subs	r3, r2, r3
 8010be6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010be8:	7bbb      	ldrb	r3, [r7, #14]
 8010bea:	b29a      	uxth	r2, r3
 8010bec:	89bb      	ldrh	r3, [r7, #12]
 8010bee:	4413      	add	r3, r2
 8010bf0:	b29b      	uxth	r3, r3
 8010bf2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010bf6:	4619      	mov	r1, r3
 8010bf8:	2036      	movs	r0, #54	; 0x36
 8010bfa:	f7fa fbc7 	bl	800b38c <pbuf_alloc>
 8010bfe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010c00:	693b      	ldr	r3, [r7, #16]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	f000 80b7 	beq.w	8010d76 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010c08:	697b      	ldr	r3, [r7, #20]
 8010c0a:	685b      	ldr	r3, [r3, #4]
 8010c0c:	891a      	ldrh	r2, [r3, #8]
 8010c0e:	697b      	ldr	r3, [r7, #20]
 8010c10:	891b      	ldrh	r3, [r3, #8]
 8010c12:	1ad3      	subs	r3, r2, r3
 8010c14:	b29a      	uxth	r2, r3
 8010c16:	887b      	ldrh	r3, [r7, #2]
 8010c18:	4413      	add	r3, r2
 8010c1a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010c1c:	697b      	ldr	r3, [r7, #20]
 8010c1e:	6858      	ldr	r0, [r3, #4]
 8010c20:	693b      	ldr	r3, [r7, #16]
 8010c22:	685a      	ldr	r2, [r3, #4]
 8010c24:	7bbb      	ldrb	r3, [r7, #14]
 8010c26:	18d1      	adds	r1, r2, r3
 8010c28:	897b      	ldrh	r3, [r7, #10]
 8010c2a:	89ba      	ldrh	r2, [r7, #12]
 8010c2c:	f7fb f88c 	bl	800bd48 <pbuf_copy_partial>
 8010c30:	4603      	mov	r3, r0
 8010c32:	461a      	mov	r2, r3
 8010c34:	89bb      	ldrh	r3, [r7, #12]
 8010c36:	4293      	cmp	r3, r2
 8010c38:	f040 809f 	bne.w	8010d7a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010c3c:	697b      	ldr	r3, [r7, #20]
 8010c3e:	68db      	ldr	r3, [r3, #12]
 8010c40:	899b      	ldrh	r3, [r3, #12]
 8010c42:	b29b      	uxth	r3, r3
 8010c44:	4618      	mov	r0, r3
 8010c46:	f7f9 fa6f 	bl	800a128 <lwip_htons>
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	b2db      	uxtb	r3, r3
 8010c4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010c52:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010c54:	2300      	movs	r3, #0
 8010c56:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010c58:	7efb      	ldrb	r3, [r7, #27]
 8010c5a:	f003 0308 	and.w	r3, r3, #8
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d007      	beq.n	8010c72 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010c62:	7efb      	ldrb	r3, [r7, #27]
 8010c64:	f023 0308 	bic.w	r3, r3, #8
 8010c68:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010c6a:	7ebb      	ldrb	r3, [r7, #26]
 8010c6c:	f043 0308 	orr.w	r3, r3, #8
 8010c70:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010c72:	7efb      	ldrb	r3, [r7, #27]
 8010c74:	f003 0301 	and.w	r3, r3, #1
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d007      	beq.n	8010c8c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010c7c:	7efb      	ldrb	r3, [r7, #27]
 8010c7e:	f023 0301 	bic.w	r3, r3, #1
 8010c82:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010c84:	7ebb      	ldrb	r3, [r7, #26]
 8010c86:	f043 0301 	orr.w	r3, r3, #1
 8010c8a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010c8c:	697b      	ldr	r3, [r7, #20]
 8010c8e:	68db      	ldr	r3, [r3, #12]
 8010c90:	685b      	ldr	r3, [r3, #4]
 8010c92:	4618      	mov	r0, r3
 8010c94:	f7f9 fa5d 	bl	800a152 <lwip_htonl>
 8010c98:	4602      	mov	r2, r0
 8010c9a:	887b      	ldrh	r3, [r7, #2]
 8010c9c:	18d1      	adds	r1, r2, r3
 8010c9e:	7eba      	ldrb	r2, [r7, #26]
 8010ca0:	7bfb      	ldrb	r3, [r7, #15]
 8010ca2:	9300      	str	r3, [sp, #0]
 8010ca4:	460b      	mov	r3, r1
 8010ca6:	6939      	ldr	r1, [r7, #16]
 8010ca8:	6878      	ldr	r0, [r7, #4]
 8010caa:	f7ff fa4f 	bl	801014c <tcp_create_segment>
 8010cae:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010cb0:	69fb      	ldr	r3, [r7, #28]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d063      	beq.n	8010d7e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010cb6:	697b      	ldr	r3, [r7, #20]
 8010cb8:	685b      	ldr	r3, [r3, #4]
 8010cba:	4618      	mov	r0, r3
 8010cbc:	f7fa fed2 	bl	800ba64 <pbuf_clen>
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	461a      	mov	r2, r3
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010cca:	1a9b      	subs	r3, r3, r2
 8010ccc:	b29a      	uxth	r2, r3
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010cd4:	697b      	ldr	r3, [r7, #20]
 8010cd6:	6858      	ldr	r0, [r3, #4]
 8010cd8:	697b      	ldr	r3, [r7, #20]
 8010cda:	685b      	ldr	r3, [r3, #4]
 8010cdc:	891a      	ldrh	r2, [r3, #8]
 8010cde:	89bb      	ldrh	r3, [r7, #12]
 8010ce0:	1ad3      	subs	r3, r2, r3
 8010ce2:	b29b      	uxth	r3, r3
 8010ce4:	4619      	mov	r1, r3
 8010ce6:	f7fa fcaf 	bl	800b648 <pbuf_realloc>
  useg->len -= remainder;
 8010cea:	697b      	ldr	r3, [r7, #20]
 8010cec:	891a      	ldrh	r2, [r3, #8]
 8010cee:	89bb      	ldrh	r3, [r7, #12]
 8010cf0:	1ad3      	subs	r3, r2, r3
 8010cf2:	b29a      	uxth	r2, r3
 8010cf4:	697b      	ldr	r3, [r7, #20]
 8010cf6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010cf8:	697b      	ldr	r3, [r7, #20]
 8010cfa:	68db      	ldr	r3, [r3, #12]
 8010cfc:	899b      	ldrh	r3, [r3, #12]
 8010cfe:	b29c      	uxth	r4, r3
 8010d00:	7efb      	ldrb	r3, [r7, #27]
 8010d02:	b29b      	uxth	r3, r3
 8010d04:	4618      	mov	r0, r3
 8010d06:	f7f9 fa0f 	bl	800a128 <lwip_htons>
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	461a      	mov	r2, r3
 8010d0e:	697b      	ldr	r3, [r7, #20]
 8010d10:	68db      	ldr	r3, [r3, #12]
 8010d12:	4322      	orrs	r2, r4
 8010d14:	b292      	uxth	r2, r2
 8010d16:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010d18:	697b      	ldr	r3, [r7, #20]
 8010d1a:	685b      	ldr	r3, [r3, #4]
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	f7fa fea1 	bl	800ba64 <pbuf_clen>
 8010d22:	4603      	mov	r3, r0
 8010d24:	461a      	mov	r2, r3
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010d2c:	4413      	add	r3, r2
 8010d2e:	b29a      	uxth	r2, r3
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010d36:	69fb      	ldr	r3, [r7, #28]
 8010d38:	685b      	ldr	r3, [r3, #4]
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	f7fa fe92 	bl	800ba64 <pbuf_clen>
 8010d40:	4603      	mov	r3, r0
 8010d42:	461a      	mov	r2, r3
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010d4a:	4413      	add	r3, r2
 8010d4c:	b29a      	uxth	r2, r3
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010d54:	697b      	ldr	r3, [r7, #20]
 8010d56:	681a      	ldr	r2, [r3, #0]
 8010d58:	69fb      	ldr	r3, [r7, #28]
 8010d5a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010d5c:	697b      	ldr	r3, [r7, #20]
 8010d5e:	69fa      	ldr	r2, [r7, #28]
 8010d60:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010d62:	69fb      	ldr	r3, [r7, #28]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d103      	bne.n	8010d72 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	2200      	movs	r2, #0
 8010d6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010d72:	2300      	movs	r3, #0
 8010d74:	e016      	b.n	8010da4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010d76:	bf00      	nop
 8010d78:	e002      	b.n	8010d80 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010d7a:	bf00      	nop
 8010d7c:	e000      	b.n	8010d80 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010d7e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010d80:	69fb      	ldr	r3, [r7, #28]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d006      	beq.n	8010d94 <tcp_split_unsent_seg+0x25c>
 8010d86:	4b09      	ldr	r3, [pc, #36]	; (8010dac <tcp_split_unsent_seg+0x274>)
 8010d88:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010d8c:	490d      	ldr	r1, [pc, #52]	; (8010dc4 <tcp_split_unsent_seg+0x28c>)
 8010d8e:	4809      	ldr	r0, [pc, #36]	; (8010db4 <tcp_split_unsent_seg+0x27c>)
 8010d90:	f003 ff92 	bl	8014cb8 <iprintf>
  if (p != NULL) {
 8010d94:	693b      	ldr	r3, [r7, #16]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d002      	beq.n	8010da0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010d9a:	6938      	ldr	r0, [r7, #16]
 8010d9c:	f7fa fdda 	bl	800b954 <pbuf_free>
  }

  return ERR_MEM;
 8010da0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010da4:	4618      	mov	r0, r3
 8010da6:	3724      	adds	r7, #36	; 0x24
 8010da8:	46bd      	mov	sp, r7
 8010daa:	bd90      	pop	{r4, r7, pc}
 8010dac:	080174e4 	.word	0x080174e4
 8010db0:	08017878 	.word	0x08017878
 8010db4:	08017538 	.word	0x08017538
 8010db8:	0801789c 	.word	0x0801789c
 8010dbc:	080178c0 	.word	0x080178c0
 8010dc0:	080178d0 	.word	0x080178d0
 8010dc4:	080178e0 	.word	0x080178e0

08010dc8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010dc8:	b590      	push	{r4, r7, lr}
 8010dca:	b085      	sub	sp, #20
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d106      	bne.n	8010de4 <tcp_send_fin+0x1c>
 8010dd6:	4b21      	ldr	r3, [pc, #132]	; (8010e5c <tcp_send_fin+0x94>)
 8010dd8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8010ddc:	4920      	ldr	r1, [pc, #128]	; (8010e60 <tcp_send_fin+0x98>)
 8010dde:	4821      	ldr	r0, [pc, #132]	; (8010e64 <tcp_send_fin+0x9c>)
 8010de0:	f003 ff6a 	bl	8014cb8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d02e      	beq.n	8010e4a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010df0:	60fb      	str	r3, [r7, #12]
 8010df2:	e002      	b.n	8010dfa <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d1f8      	bne.n	8010df4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	68db      	ldr	r3, [r3, #12]
 8010e06:	899b      	ldrh	r3, [r3, #12]
 8010e08:	b29b      	uxth	r3, r3
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	f7f9 f98c 	bl	800a128 <lwip_htons>
 8010e10:	4603      	mov	r3, r0
 8010e12:	b2db      	uxtb	r3, r3
 8010e14:	f003 0307 	and.w	r3, r3, #7
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d116      	bne.n	8010e4a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	68db      	ldr	r3, [r3, #12]
 8010e20:	899b      	ldrh	r3, [r3, #12]
 8010e22:	b29c      	uxth	r4, r3
 8010e24:	2001      	movs	r0, #1
 8010e26:	f7f9 f97f 	bl	800a128 <lwip_htons>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	461a      	mov	r2, r3
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	68db      	ldr	r3, [r3, #12]
 8010e32:	4322      	orrs	r2, r4
 8010e34:	b292      	uxth	r2, r2
 8010e36:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	8b5b      	ldrh	r3, [r3, #26]
 8010e3c:	f043 0320 	orr.w	r3, r3, #32
 8010e40:	b29a      	uxth	r2, r3
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010e46:	2300      	movs	r3, #0
 8010e48:	e004      	b.n	8010e54 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010e4a:	2101      	movs	r1, #1
 8010e4c:	6878      	ldr	r0, [r7, #4]
 8010e4e:	f000 f80b 	bl	8010e68 <tcp_enqueue_flags>
 8010e52:	4603      	mov	r3, r0
}
 8010e54:	4618      	mov	r0, r3
 8010e56:	3714      	adds	r7, #20
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	bd90      	pop	{r4, r7, pc}
 8010e5c:	080174e4 	.word	0x080174e4
 8010e60:	080178ec 	.word	0x080178ec
 8010e64:	08017538 	.word	0x08017538

08010e68 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b08a      	sub	sp, #40	; 0x28
 8010e6c:	af02      	add	r7, sp, #8
 8010e6e:	6078      	str	r0, [r7, #4]
 8010e70:	460b      	mov	r3, r1
 8010e72:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010e74:	2300      	movs	r3, #0
 8010e76:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010e78:	2300      	movs	r3, #0
 8010e7a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010e7c:	78fb      	ldrb	r3, [r7, #3]
 8010e7e:	f003 0303 	and.w	r3, r3, #3
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d106      	bne.n	8010e94 <tcp_enqueue_flags+0x2c>
 8010e86:	4b67      	ldr	r3, [pc, #412]	; (8011024 <tcp_enqueue_flags+0x1bc>)
 8010e88:	f240 4211 	movw	r2, #1041	; 0x411
 8010e8c:	4966      	ldr	r1, [pc, #408]	; (8011028 <tcp_enqueue_flags+0x1c0>)
 8010e8e:	4867      	ldr	r0, [pc, #412]	; (801102c <tcp_enqueue_flags+0x1c4>)
 8010e90:	f003 ff12 	bl	8014cb8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d106      	bne.n	8010ea8 <tcp_enqueue_flags+0x40>
 8010e9a:	4b62      	ldr	r3, [pc, #392]	; (8011024 <tcp_enqueue_flags+0x1bc>)
 8010e9c:	f240 4213 	movw	r2, #1043	; 0x413
 8010ea0:	4963      	ldr	r1, [pc, #396]	; (8011030 <tcp_enqueue_flags+0x1c8>)
 8010ea2:	4862      	ldr	r0, [pc, #392]	; (801102c <tcp_enqueue_flags+0x1c4>)
 8010ea4:	f003 ff08 	bl	8014cb8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010ea8:	78fb      	ldrb	r3, [r7, #3]
 8010eaa:	f003 0302 	and.w	r3, r3, #2
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d001      	beq.n	8010eb6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010eb2:	2301      	movs	r3, #1
 8010eb4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010eb6:	7ffb      	ldrb	r3, [r7, #31]
 8010eb8:	009b      	lsls	r3, r3, #2
 8010eba:	b2db      	uxtb	r3, r3
 8010ebc:	f003 0304 	and.w	r3, r3, #4
 8010ec0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010ec2:	7dfb      	ldrb	r3, [r7, #23]
 8010ec4:	b29b      	uxth	r3, r3
 8010ec6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010eca:	4619      	mov	r1, r3
 8010ecc:	2036      	movs	r0, #54	; 0x36
 8010ece:	f7fa fa5d 	bl	800b38c <pbuf_alloc>
 8010ed2:	6138      	str	r0, [r7, #16]
 8010ed4:	693b      	ldr	r3, [r7, #16]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d109      	bne.n	8010eee <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	8b5b      	ldrh	r3, [r3, #26]
 8010ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ee2:	b29a      	uxth	r2, r3
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8010eec:	e095      	b.n	801101a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010eee:	693b      	ldr	r3, [r7, #16]
 8010ef0:	895a      	ldrh	r2, [r3, #10]
 8010ef2:	7dfb      	ldrb	r3, [r7, #23]
 8010ef4:	b29b      	uxth	r3, r3
 8010ef6:	429a      	cmp	r2, r3
 8010ef8:	d206      	bcs.n	8010f08 <tcp_enqueue_flags+0xa0>
 8010efa:	4b4a      	ldr	r3, [pc, #296]	; (8011024 <tcp_enqueue_flags+0x1bc>)
 8010efc:	f240 4239 	movw	r2, #1081	; 0x439
 8010f00:	494c      	ldr	r1, [pc, #304]	; (8011034 <tcp_enqueue_flags+0x1cc>)
 8010f02:	484a      	ldr	r0, [pc, #296]	; (801102c <tcp_enqueue_flags+0x1c4>)
 8010f04:	f003 fed8 	bl	8014cb8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8010f0c:	78fa      	ldrb	r2, [r7, #3]
 8010f0e:	7ffb      	ldrb	r3, [r7, #31]
 8010f10:	9300      	str	r3, [sp, #0]
 8010f12:	460b      	mov	r3, r1
 8010f14:	6939      	ldr	r1, [r7, #16]
 8010f16:	6878      	ldr	r0, [r7, #4]
 8010f18:	f7ff f918 	bl	801014c <tcp_create_segment>
 8010f1c:	60f8      	str	r0, [r7, #12]
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d109      	bne.n	8010f38 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	8b5b      	ldrh	r3, [r3, #26]
 8010f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f2c:	b29a      	uxth	r2, r3
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010f32:	f04f 33ff 	mov.w	r3, #4294967295
 8010f36:	e070      	b.n	801101a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	68db      	ldr	r3, [r3, #12]
 8010f3c:	f003 0303 	and.w	r3, r3, #3
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d006      	beq.n	8010f52 <tcp_enqueue_flags+0xea>
 8010f44:	4b37      	ldr	r3, [pc, #220]	; (8011024 <tcp_enqueue_flags+0x1bc>)
 8010f46:	f240 4242 	movw	r2, #1090	; 0x442
 8010f4a:	493b      	ldr	r1, [pc, #236]	; (8011038 <tcp_enqueue_flags+0x1d0>)
 8010f4c:	4837      	ldr	r0, [pc, #220]	; (801102c <tcp_enqueue_flags+0x1c4>)
 8010f4e:	f003 feb3 	bl	8014cb8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	891b      	ldrh	r3, [r3, #8]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d006      	beq.n	8010f68 <tcp_enqueue_flags+0x100>
 8010f5a:	4b32      	ldr	r3, [pc, #200]	; (8011024 <tcp_enqueue_flags+0x1bc>)
 8010f5c:	f240 4243 	movw	r2, #1091	; 0x443
 8010f60:	4936      	ldr	r1, [pc, #216]	; (801103c <tcp_enqueue_flags+0x1d4>)
 8010f62:	4832      	ldr	r0, [pc, #200]	; (801102c <tcp_enqueue_flags+0x1c4>)
 8010f64:	f003 fea8 	bl	8014cb8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d103      	bne.n	8010f78 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	68fa      	ldr	r2, [r7, #12]
 8010f74:	66da      	str	r2, [r3, #108]	; 0x6c
 8010f76:	e00d      	b.n	8010f94 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f7c:	61bb      	str	r3, [r7, #24]
 8010f7e:	e002      	b.n	8010f86 <tcp_enqueue_flags+0x11e>
 8010f80:	69bb      	ldr	r3, [r7, #24]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	61bb      	str	r3, [r7, #24]
 8010f86:	69bb      	ldr	r3, [r7, #24]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d1f8      	bne.n	8010f80 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010f8e:	69bb      	ldr	r3, [r7, #24]
 8010f90:	68fa      	ldr	r2, [r7, #12]
 8010f92:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	2200      	movs	r2, #0
 8010f98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010f9c:	78fb      	ldrb	r3, [r7, #3]
 8010f9e:	f003 0302 	and.w	r3, r3, #2
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d104      	bne.n	8010fb0 <tcp_enqueue_flags+0x148>
 8010fa6:	78fb      	ldrb	r3, [r7, #3]
 8010fa8:	f003 0301 	and.w	r3, r3, #1
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d004      	beq.n	8010fba <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010fb4:	1c5a      	adds	r2, r3, #1
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010fba:	78fb      	ldrb	r3, [r7, #3]
 8010fbc:	f003 0301 	and.w	r3, r3, #1
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d006      	beq.n	8010fd2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	8b5b      	ldrh	r3, [r3, #26]
 8010fc8:	f043 0320 	orr.w	r3, r3, #32
 8010fcc:	b29a      	uxth	r2, r3
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	685b      	ldr	r3, [r3, #4]
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	f7fa fd44 	bl	800ba64 <pbuf_clen>
 8010fdc:	4603      	mov	r3, r0
 8010fde:	461a      	mov	r2, r3
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010fe6:	4413      	add	r3, r2
 8010fe8:	b29a      	uxth	r2, r3
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d00e      	beq.n	8011018 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d10a      	bne.n	8011018 <tcp_enqueue_flags+0x1b0>
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011006:	2b00      	cmp	r3, #0
 8011008:	d106      	bne.n	8011018 <tcp_enqueue_flags+0x1b0>
 801100a:	4b06      	ldr	r3, [pc, #24]	; (8011024 <tcp_enqueue_flags+0x1bc>)
 801100c:	f240 4265 	movw	r2, #1125	; 0x465
 8011010:	490b      	ldr	r1, [pc, #44]	; (8011040 <tcp_enqueue_flags+0x1d8>)
 8011012:	4806      	ldr	r0, [pc, #24]	; (801102c <tcp_enqueue_flags+0x1c4>)
 8011014:	f003 fe50 	bl	8014cb8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011018:	2300      	movs	r3, #0
}
 801101a:	4618      	mov	r0, r3
 801101c:	3720      	adds	r7, #32
 801101e:	46bd      	mov	sp, r7
 8011020:	bd80      	pop	{r7, pc}
 8011022:	bf00      	nop
 8011024:	080174e4 	.word	0x080174e4
 8011028:	08017908 	.word	0x08017908
 801102c:	08017538 	.word	0x08017538
 8011030:	08017960 	.word	0x08017960
 8011034:	08017980 	.word	0x08017980
 8011038:	080179bc 	.word	0x080179bc
 801103c:	080179d4 	.word	0x080179d4
 8011040:	08017a00 	.word	0x08017a00

08011044 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011044:	b5b0      	push	{r4, r5, r7, lr}
 8011046:	b08a      	sub	sp, #40	; 0x28
 8011048:	af00      	add	r7, sp, #0
 801104a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d106      	bne.n	8011060 <tcp_output+0x1c>
 8011052:	4b9e      	ldr	r3, [pc, #632]	; (80112cc <tcp_output+0x288>)
 8011054:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8011058:	499d      	ldr	r1, [pc, #628]	; (80112d0 <tcp_output+0x28c>)
 801105a:	489e      	ldr	r0, [pc, #632]	; (80112d4 <tcp_output+0x290>)
 801105c:	f003 fe2c 	bl	8014cb8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	7d1b      	ldrb	r3, [r3, #20]
 8011064:	2b01      	cmp	r3, #1
 8011066:	d106      	bne.n	8011076 <tcp_output+0x32>
 8011068:	4b98      	ldr	r3, [pc, #608]	; (80112cc <tcp_output+0x288>)
 801106a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801106e:	499a      	ldr	r1, [pc, #616]	; (80112d8 <tcp_output+0x294>)
 8011070:	4898      	ldr	r0, [pc, #608]	; (80112d4 <tcp_output+0x290>)
 8011072:	f003 fe21 	bl	8014cb8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011076:	4b99      	ldr	r3, [pc, #612]	; (80112dc <tcp_output+0x298>)
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	687a      	ldr	r2, [r7, #4]
 801107c:	429a      	cmp	r2, r3
 801107e:	d101      	bne.n	8011084 <tcp_output+0x40>
    return ERR_OK;
 8011080:	2300      	movs	r3, #0
 8011082:	e1ce      	b.n	8011422 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011090:	4293      	cmp	r3, r2
 8011092:	bf28      	it	cs
 8011094:	4613      	movcs	r3, r2
 8011096:	b29b      	uxth	r3, r3
 8011098:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801109e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80110a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d10b      	bne.n	80110be <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	8b5b      	ldrh	r3, [r3, #26]
 80110aa:	f003 0302 	and.w	r3, r3, #2
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	f000 81aa 	beq.w	8011408 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80110b4:	6878      	ldr	r0, [r7, #4]
 80110b6:	f000 fdcb 	bl	8011c50 <tcp_send_empty_ack>
 80110ba:	4603      	mov	r3, r0
 80110bc:	e1b1      	b.n	8011422 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80110be:	6879      	ldr	r1, [r7, #4]
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	3304      	adds	r3, #4
 80110c4:	461a      	mov	r2, r3
 80110c6:	6878      	ldr	r0, [r7, #4]
 80110c8:	f7ff f824 	bl	8010114 <tcp_route>
 80110cc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80110ce:	697b      	ldr	r3, [r7, #20]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d102      	bne.n	80110da <tcp_output+0x96>
    return ERR_RTE;
 80110d4:	f06f 0303 	mvn.w	r3, #3
 80110d8:	e1a3      	b.n	8011422 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d003      	beq.n	80110e8 <tcp_output+0xa4>
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d111      	bne.n	801110c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80110e8:	697b      	ldr	r3, [r7, #20]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d002      	beq.n	80110f4 <tcp_output+0xb0>
 80110ee:	697b      	ldr	r3, [r7, #20]
 80110f0:	3304      	adds	r3, #4
 80110f2:	e000      	b.n	80110f6 <tcp_output+0xb2>
 80110f4:	2300      	movs	r3, #0
 80110f6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80110f8:	693b      	ldr	r3, [r7, #16]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d102      	bne.n	8011104 <tcp_output+0xc0>
      return ERR_RTE;
 80110fe:	f06f 0303 	mvn.w	r3, #3
 8011102:	e18e      	b.n	8011422 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011104:	693b      	ldr	r3, [r7, #16]
 8011106:	681a      	ldr	r2, [r3, #0]
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801110e:	68db      	ldr	r3, [r3, #12]
 8011110:	685b      	ldr	r3, [r3, #4]
 8011112:	4618      	mov	r0, r3
 8011114:	f7f9 f81d 	bl	800a152 <lwip_htonl>
 8011118:	4602      	mov	r2, r0
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801111e:	1ad3      	subs	r3, r2, r3
 8011120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011122:	8912      	ldrh	r2, [r2, #8]
 8011124:	4413      	add	r3, r2
 8011126:	69ba      	ldr	r2, [r7, #24]
 8011128:	429a      	cmp	r2, r3
 801112a:	d227      	bcs.n	801117c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011132:	461a      	mov	r2, r3
 8011134:	69bb      	ldr	r3, [r7, #24]
 8011136:	4293      	cmp	r3, r2
 8011138:	d114      	bne.n	8011164 <tcp_output+0x120>
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801113e:	2b00      	cmp	r3, #0
 8011140:	d110      	bne.n	8011164 <tcp_output+0x120>
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011148:	2b00      	cmp	r3, #0
 801114a:	d10b      	bne.n	8011164 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	2200      	movs	r2, #0
 8011150:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2201      	movs	r2, #1
 8011158:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	2200      	movs	r2, #0
 8011160:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	8b5b      	ldrh	r3, [r3, #26]
 8011168:	f003 0302 	and.w	r3, r3, #2
 801116c:	2b00      	cmp	r3, #0
 801116e:	f000 814d 	beq.w	801140c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8011172:	6878      	ldr	r0, [r7, #4]
 8011174:	f000 fd6c 	bl	8011c50 <tcp_send_empty_ack>
 8011178:	4603      	mov	r3, r0
 801117a:	e152      	b.n	8011422 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	2200      	movs	r2, #0
 8011180:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011188:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801118a:	6a3b      	ldr	r3, [r7, #32]
 801118c:	2b00      	cmp	r3, #0
 801118e:	f000 811c 	beq.w	80113ca <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8011192:	e002      	b.n	801119a <tcp_output+0x156>
 8011194:	6a3b      	ldr	r3, [r7, #32]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	623b      	str	r3, [r7, #32]
 801119a:	6a3b      	ldr	r3, [r7, #32]
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d1f8      	bne.n	8011194 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80111a2:	e112      	b.n	80113ca <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80111a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111a6:	68db      	ldr	r3, [r3, #12]
 80111a8:	899b      	ldrh	r3, [r3, #12]
 80111aa:	b29b      	uxth	r3, r3
 80111ac:	4618      	mov	r0, r3
 80111ae:	f7f8 ffbb 	bl	800a128 <lwip_htons>
 80111b2:	4603      	mov	r3, r0
 80111b4:	b2db      	uxtb	r3, r3
 80111b6:	f003 0304 	and.w	r3, r3, #4
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d006      	beq.n	80111cc <tcp_output+0x188>
 80111be:	4b43      	ldr	r3, [pc, #268]	; (80112cc <tcp_output+0x288>)
 80111c0:	f240 5236 	movw	r2, #1334	; 0x536
 80111c4:	4946      	ldr	r1, [pc, #280]	; (80112e0 <tcp_output+0x29c>)
 80111c6:	4843      	ldr	r0, [pc, #268]	; (80112d4 <tcp_output+0x290>)
 80111c8:	f003 fd76 	bl	8014cb8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d01f      	beq.n	8011214 <tcp_output+0x1d0>
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	8b5b      	ldrh	r3, [r3, #26]
 80111d8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d119      	bne.n	8011214 <tcp_output+0x1d0>
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d00b      	beq.n	8011200 <tcp_output+0x1bc>
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d110      	bne.n	8011214 <tcp_output+0x1d0>
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111f6:	891a      	ldrh	r2, [r3, #8]
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80111fc:	429a      	cmp	r2, r3
 80111fe:	d209      	bcs.n	8011214 <tcp_output+0x1d0>
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011206:	2b00      	cmp	r3, #0
 8011208:	d004      	beq.n	8011214 <tcp_output+0x1d0>
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011210:	2b08      	cmp	r3, #8
 8011212:	d901      	bls.n	8011218 <tcp_output+0x1d4>
 8011214:	2301      	movs	r3, #1
 8011216:	e000      	b.n	801121a <tcp_output+0x1d6>
 8011218:	2300      	movs	r3, #0
 801121a:	2b00      	cmp	r3, #0
 801121c:	d106      	bne.n	801122c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	8b5b      	ldrh	r3, [r3, #26]
 8011222:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011226:	2b00      	cmp	r3, #0
 8011228:	f000 80e4 	beq.w	80113f4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	7d1b      	ldrb	r3, [r3, #20]
 8011230:	2b02      	cmp	r3, #2
 8011232:	d00d      	beq.n	8011250 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011236:	68db      	ldr	r3, [r3, #12]
 8011238:	899b      	ldrh	r3, [r3, #12]
 801123a:	b29c      	uxth	r4, r3
 801123c:	2010      	movs	r0, #16
 801123e:	f7f8 ff73 	bl	800a128 <lwip_htons>
 8011242:	4603      	mov	r3, r0
 8011244:	461a      	mov	r2, r3
 8011246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011248:	68db      	ldr	r3, [r3, #12]
 801124a:	4322      	orrs	r2, r4
 801124c:	b292      	uxth	r2, r2
 801124e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011250:	697a      	ldr	r2, [r7, #20]
 8011252:	6879      	ldr	r1, [r7, #4]
 8011254:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011256:	f000 f909 	bl	801146c <tcp_output_segment>
 801125a:	4603      	mov	r3, r0
 801125c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801125e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d009      	beq.n	801127a <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	8b5b      	ldrh	r3, [r3, #26]
 801126a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801126e:	b29a      	uxth	r2, r3
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	835a      	strh	r2, [r3, #26]
      return err;
 8011274:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011278:	e0d3      	b.n	8011422 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801127c:	681a      	ldr	r2, [r3, #0]
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	7d1b      	ldrb	r3, [r3, #20]
 8011286:	2b02      	cmp	r3, #2
 8011288:	d006      	beq.n	8011298 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	8b5b      	ldrh	r3, [r3, #26]
 801128e:	f023 0303 	bic.w	r3, r3, #3
 8011292:	b29a      	uxth	r2, r3
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801129a:	68db      	ldr	r3, [r3, #12]
 801129c:	685b      	ldr	r3, [r3, #4]
 801129e:	4618      	mov	r0, r3
 80112a0:	f7f8 ff57 	bl	800a152 <lwip_htonl>
 80112a4:	4604      	mov	r4, r0
 80112a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112a8:	891b      	ldrh	r3, [r3, #8]
 80112aa:	461d      	mov	r5, r3
 80112ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ae:	68db      	ldr	r3, [r3, #12]
 80112b0:	899b      	ldrh	r3, [r3, #12]
 80112b2:	b29b      	uxth	r3, r3
 80112b4:	4618      	mov	r0, r3
 80112b6:	f7f8 ff37 	bl	800a128 <lwip_htons>
 80112ba:	4603      	mov	r3, r0
 80112bc:	b2db      	uxtb	r3, r3
 80112be:	f003 0303 	and.w	r3, r3, #3
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d00e      	beq.n	80112e4 <tcp_output+0x2a0>
 80112c6:	2301      	movs	r3, #1
 80112c8:	e00d      	b.n	80112e6 <tcp_output+0x2a2>
 80112ca:	bf00      	nop
 80112cc:	080174e4 	.word	0x080174e4
 80112d0:	08017a28 	.word	0x08017a28
 80112d4:	08017538 	.word	0x08017538
 80112d8:	08017a40 	.word	0x08017a40
 80112dc:	24003628 	.word	0x24003628
 80112e0:	08017a68 	.word	0x08017a68
 80112e4:	2300      	movs	r3, #0
 80112e6:	442b      	add	r3, r5
 80112e8:	4423      	add	r3, r4
 80112ea:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80112f0:	68bb      	ldr	r3, [r7, #8]
 80112f2:	1ad3      	subs	r3, r2, r3
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	da02      	bge.n	80112fe <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	68ba      	ldr	r2, [r7, #8]
 80112fc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80112fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011300:	891b      	ldrh	r3, [r3, #8]
 8011302:	461c      	mov	r4, r3
 8011304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011306:	68db      	ldr	r3, [r3, #12]
 8011308:	899b      	ldrh	r3, [r3, #12]
 801130a:	b29b      	uxth	r3, r3
 801130c:	4618      	mov	r0, r3
 801130e:	f7f8 ff0b 	bl	800a128 <lwip_htons>
 8011312:	4603      	mov	r3, r0
 8011314:	b2db      	uxtb	r3, r3
 8011316:	f003 0303 	and.w	r3, r3, #3
 801131a:	2b00      	cmp	r3, #0
 801131c:	d001      	beq.n	8011322 <tcp_output+0x2de>
 801131e:	2301      	movs	r3, #1
 8011320:	e000      	b.n	8011324 <tcp_output+0x2e0>
 8011322:	2300      	movs	r3, #0
 8011324:	4423      	add	r3, r4
 8011326:	2b00      	cmp	r3, #0
 8011328:	d049      	beq.n	80113be <tcp_output+0x37a>
      seg->next = NULL;
 801132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801132c:	2200      	movs	r2, #0
 801132e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011334:	2b00      	cmp	r3, #0
 8011336:	d105      	bne.n	8011344 <tcp_output+0x300>
        pcb->unacked = seg;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801133c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011340:	623b      	str	r3, [r7, #32]
 8011342:	e03f      	b.n	80113c4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011346:	68db      	ldr	r3, [r3, #12]
 8011348:	685b      	ldr	r3, [r3, #4]
 801134a:	4618      	mov	r0, r3
 801134c:	f7f8 ff01 	bl	800a152 <lwip_htonl>
 8011350:	4604      	mov	r4, r0
 8011352:	6a3b      	ldr	r3, [r7, #32]
 8011354:	68db      	ldr	r3, [r3, #12]
 8011356:	685b      	ldr	r3, [r3, #4]
 8011358:	4618      	mov	r0, r3
 801135a:	f7f8 fefa 	bl	800a152 <lwip_htonl>
 801135e:	4603      	mov	r3, r0
 8011360:	1ae3      	subs	r3, r4, r3
 8011362:	2b00      	cmp	r3, #0
 8011364:	da24      	bge.n	80113b0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	3370      	adds	r3, #112	; 0x70
 801136a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801136c:	e002      	b.n	8011374 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801136e:	69fb      	ldr	r3, [r7, #28]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011374:	69fb      	ldr	r3, [r7, #28]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d011      	beq.n	80113a0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801137c:	69fb      	ldr	r3, [r7, #28]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	68db      	ldr	r3, [r3, #12]
 8011382:	685b      	ldr	r3, [r3, #4]
 8011384:	4618      	mov	r0, r3
 8011386:	f7f8 fee4 	bl	800a152 <lwip_htonl>
 801138a:	4604      	mov	r4, r0
 801138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801138e:	68db      	ldr	r3, [r3, #12]
 8011390:	685b      	ldr	r3, [r3, #4]
 8011392:	4618      	mov	r0, r3
 8011394:	f7f8 fedd 	bl	800a152 <lwip_htonl>
 8011398:	4603      	mov	r3, r0
 801139a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801139c:	2b00      	cmp	r3, #0
 801139e:	dbe6      	blt.n	801136e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80113a0:	69fb      	ldr	r3, [r7, #28]
 80113a2:	681a      	ldr	r2, [r3, #0]
 80113a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113a6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80113a8:	69fb      	ldr	r3, [r7, #28]
 80113aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113ac:	601a      	str	r2, [r3, #0]
 80113ae:	e009      	b.n	80113c4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80113b0:	6a3b      	ldr	r3, [r7, #32]
 80113b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113b4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80113b6:	6a3b      	ldr	r3, [r7, #32]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	623b      	str	r3, [r7, #32]
 80113bc:	e002      	b.n	80113c4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80113be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80113c0:	f7fb ff05 	bl	800d1ce <tcp_seg_free>
    }
    seg = pcb->unsent;
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113c8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80113ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d012      	beq.n	80113f6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80113d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113d2:	68db      	ldr	r3, [r3, #12]
 80113d4:	685b      	ldr	r3, [r3, #4]
 80113d6:	4618      	mov	r0, r3
 80113d8:	f7f8 febb 	bl	800a152 <lwip_htonl>
 80113dc:	4602      	mov	r2, r0
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80113e2:	1ad3      	subs	r3, r2, r3
 80113e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113e6:	8912      	ldrh	r2, [r2, #8]
 80113e8:	4413      	add	r3, r2
  while (seg != NULL &&
 80113ea:	69ba      	ldr	r2, [r7, #24]
 80113ec:	429a      	cmp	r2, r3
 80113ee:	f4bf aed9 	bcs.w	80111a4 <tcp_output+0x160>
 80113f2:	e000      	b.n	80113f6 <tcp_output+0x3b2>
      break;
 80113f4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d108      	bne.n	8011410 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	2200      	movs	r2, #0
 8011402:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8011406:	e004      	b.n	8011412 <tcp_output+0x3ce>
    goto output_done;
 8011408:	bf00      	nop
 801140a:	e002      	b.n	8011412 <tcp_output+0x3ce>
    goto output_done;
 801140c:	bf00      	nop
 801140e:	e000      	b.n	8011412 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011410:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	8b5b      	ldrh	r3, [r3, #26]
 8011416:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801141a:	b29a      	uxth	r2, r3
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011420:	2300      	movs	r3, #0
}
 8011422:	4618      	mov	r0, r3
 8011424:	3728      	adds	r7, #40	; 0x28
 8011426:	46bd      	mov	sp, r7
 8011428:	bdb0      	pop	{r4, r5, r7, pc}
 801142a:	bf00      	nop

0801142c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801142c:	b580      	push	{r7, lr}
 801142e:	b082      	sub	sp, #8
 8011430:	af00      	add	r7, sp, #0
 8011432:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d106      	bne.n	8011448 <tcp_output_segment_busy+0x1c>
 801143a:	4b09      	ldr	r3, [pc, #36]	; (8011460 <tcp_output_segment_busy+0x34>)
 801143c:	f240 529a 	movw	r2, #1434	; 0x59a
 8011440:	4908      	ldr	r1, [pc, #32]	; (8011464 <tcp_output_segment_busy+0x38>)
 8011442:	4809      	ldr	r0, [pc, #36]	; (8011468 <tcp_output_segment_busy+0x3c>)
 8011444:	f003 fc38 	bl	8014cb8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	685b      	ldr	r3, [r3, #4]
 801144c:	7b9b      	ldrb	r3, [r3, #14]
 801144e:	2b01      	cmp	r3, #1
 8011450:	d001      	beq.n	8011456 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011452:	2301      	movs	r3, #1
 8011454:	e000      	b.n	8011458 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011456:	2300      	movs	r3, #0
}
 8011458:	4618      	mov	r0, r3
 801145a:	3708      	adds	r7, #8
 801145c:	46bd      	mov	sp, r7
 801145e:	bd80      	pop	{r7, pc}
 8011460:	080174e4 	.word	0x080174e4
 8011464:	08017a80 	.word	0x08017a80
 8011468:	08017538 	.word	0x08017538

0801146c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801146c:	b5b0      	push	{r4, r5, r7, lr}
 801146e:	b08c      	sub	sp, #48	; 0x30
 8011470:	af04      	add	r7, sp, #16
 8011472:	60f8      	str	r0, [r7, #12]
 8011474:	60b9      	str	r1, [r7, #8]
 8011476:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d106      	bne.n	801148c <tcp_output_segment+0x20>
 801147e:	4b63      	ldr	r3, [pc, #396]	; (801160c <tcp_output_segment+0x1a0>)
 8011480:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011484:	4962      	ldr	r1, [pc, #392]	; (8011610 <tcp_output_segment+0x1a4>)
 8011486:	4863      	ldr	r0, [pc, #396]	; (8011614 <tcp_output_segment+0x1a8>)
 8011488:	f003 fc16 	bl	8014cb8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801148c:	68bb      	ldr	r3, [r7, #8]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d106      	bne.n	80114a0 <tcp_output_segment+0x34>
 8011492:	4b5e      	ldr	r3, [pc, #376]	; (801160c <tcp_output_segment+0x1a0>)
 8011494:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011498:	495f      	ldr	r1, [pc, #380]	; (8011618 <tcp_output_segment+0x1ac>)
 801149a:	485e      	ldr	r0, [pc, #376]	; (8011614 <tcp_output_segment+0x1a8>)
 801149c:	f003 fc0c 	bl	8014cb8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d106      	bne.n	80114b4 <tcp_output_segment+0x48>
 80114a6:	4b59      	ldr	r3, [pc, #356]	; (801160c <tcp_output_segment+0x1a0>)
 80114a8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80114ac:	495b      	ldr	r1, [pc, #364]	; (801161c <tcp_output_segment+0x1b0>)
 80114ae:	4859      	ldr	r0, [pc, #356]	; (8011614 <tcp_output_segment+0x1a8>)
 80114b0:	f003 fc02 	bl	8014cb8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80114b4:	68f8      	ldr	r0, [r7, #12]
 80114b6:	f7ff ffb9 	bl	801142c <tcp_output_segment_busy>
 80114ba:	4603      	mov	r3, r0
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d001      	beq.n	80114c4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80114c0:	2300      	movs	r3, #0
 80114c2:	e09f      	b.n	8011604 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80114c4:	68bb      	ldr	r3, [r7, #8]
 80114c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	68dc      	ldr	r4, [r3, #12]
 80114cc:	4610      	mov	r0, r2
 80114ce:	f7f8 fe40 	bl	800a152 <lwip_htonl>
 80114d2:	4603      	mov	r3, r0
 80114d4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80114d6:	68bb      	ldr	r3, [r7, #8]
 80114d8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	68dc      	ldr	r4, [r3, #12]
 80114de:	4610      	mov	r0, r2
 80114e0:	f7f8 fe22 	bl	800a128 <lwip_htons>
 80114e4:	4603      	mov	r3, r0
 80114e6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80114e8:	68bb      	ldr	r3, [r7, #8]
 80114ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114ec:	68ba      	ldr	r2, [r7, #8]
 80114ee:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80114f0:	441a      	add	r2, r3
 80114f2:	68bb      	ldr	r3, [r7, #8]
 80114f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	68db      	ldr	r3, [r3, #12]
 80114fa:	3314      	adds	r3, #20
 80114fc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	7a9b      	ldrb	r3, [r3, #10]
 8011502:	f003 0301 	and.w	r3, r3, #1
 8011506:	2b00      	cmp	r3, #0
 8011508:	d015      	beq.n	8011536 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801150a:	68bb      	ldr	r3, [r7, #8]
 801150c:	3304      	adds	r3, #4
 801150e:	461a      	mov	r2, r3
 8011510:	6879      	ldr	r1, [r7, #4]
 8011512:	f44f 7006 	mov.w	r0, #536	; 0x218
 8011516:	f7fc fa37 	bl	800d988 <tcp_eff_send_mss_netif>
 801151a:	4603      	mov	r3, r0
 801151c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801151e:	8b7b      	ldrh	r3, [r7, #26]
 8011520:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011524:	4618      	mov	r0, r3
 8011526:	f7f8 fe14 	bl	800a152 <lwip_htonl>
 801152a:	4602      	mov	r2, r0
 801152c:	69fb      	ldr	r3, [r7, #28]
 801152e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011530:	69fb      	ldr	r3, [r7, #28]
 8011532:	3304      	adds	r3, #4
 8011534:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011536:	68bb      	ldr	r3, [r7, #8]
 8011538:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801153c:	2b00      	cmp	r3, #0
 801153e:	da02      	bge.n	8011546 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011540:	68bb      	ldr	r3, [r7, #8]
 8011542:	2200      	movs	r2, #0
 8011544:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011546:	68bb      	ldr	r3, [r7, #8]
 8011548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801154a:	2b00      	cmp	r3, #0
 801154c:	d10c      	bne.n	8011568 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801154e:	4b34      	ldr	r3, [pc, #208]	; (8011620 <tcp_output_segment+0x1b4>)
 8011550:	681a      	ldr	r2, [r3, #0]
 8011552:	68bb      	ldr	r3, [r7, #8]
 8011554:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	68db      	ldr	r3, [r3, #12]
 801155a:	685b      	ldr	r3, [r3, #4]
 801155c:	4618      	mov	r0, r3
 801155e:	f7f8 fdf8 	bl	800a152 <lwip_htonl>
 8011562:	4602      	mov	r2, r0
 8011564:	68bb      	ldr	r3, [r7, #8]
 8011566:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	68da      	ldr	r2, [r3, #12]
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	685b      	ldr	r3, [r3, #4]
 8011570:	685b      	ldr	r3, [r3, #4]
 8011572:	1ad3      	subs	r3, r2, r3
 8011574:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	685b      	ldr	r3, [r3, #4]
 801157a:	8959      	ldrh	r1, [r3, #10]
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	685b      	ldr	r3, [r3, #4]
 8011580:	8b3a      	ldrh	r2, [r7, #24]
 8011582:	1a8a      	subs	r2, r1, r2
 8011584:	b292      	uxth	r2, r2
 8011586:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	685b      	ldr	r3, [r3, #4]
 801158c:	8919      	ldrh	r1, [r3, #8]
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	685b      	ldr	r3, [r3, #4]
 8011592:	8b3a      	ldrh	r2, [r7, #24]
 8011594:	1a8a      	subs	r2, r1, r2
 8011596:	b292      	uxth	r2, r2
 8011598:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	685b      	ldr	r3, [r3, #4]
 801159e:	68fa      	ldr	r2, [r7, #12]
 80115a0:	68d2      	ldr	r2, [r2, #12]
 80115a2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	68db      	ldr	r3, [r3, #12]
 80115a8:	2200      	movs	r2, #0
 80115aa:	741a      	strb	r2, [r3, #16]
 80115ac:	2200      	movs	r2, #0
 80115ae:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	68db      	ldr	r3, [r3, #12]
 80115b4:	f103 0214 	add.w	r2, r3, #20
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	7a9b      	ldrb	r3, [r3, #10]
 80115bc:	009b      	lsls	r3, r3, #2
 80115be:	f003 0304 	and.w	r3, r3, #4
 80115c2:	4413      	add	r3, r2
 80115c4:	69fa      	ldr	r2, [r7, #28]
 80115c6:	429a      	cmp	r2, r3
 80115c8:	d006      	beq.n	80115d8 <tcp_output_segment+0x16c>
 80115ca:	4b10      	ldr	r3, [pc, #64]	; (801160c <tcp_output_segment+0x1a0>)
 80115cc:	f240 621c 	movw	r2, #1564	; 0x61c
 80115d0:	4914      	ldr	r1, [pc, #80]	; (8011624 <tcp_output_segment+0x1b8>)
 80115d2:	4810      	ldr	r0, [pc, #64]	; (8011614 <tcp_output_segment+0x1a8>)
 80115d4:	f003 fb70 	bl	8014cb8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	6858      	ldr	r0, [r3, #4]
 80115dc:	68b9      	ldr	r1, [r7, #8]
 80115de:	68bb      	ldr	r3, [r7, #8]
 80115e0:	1d1c      	adds	r4, r3, #4
 80115e2:	68bb      	ldr	r3, [r7, #8]
 80115e4:	7add      	ldrb	r5, [r3, #11]
 80115e6:	68bb      	ldr	r3, [r7, #8]
 80115e8:	7a9b      	ldrb	r3, [r3, #10]
 80115ea:	687a      	ldr	r2, [r7, #4]
 80115ec:	9202      	str	r2, [sp, #8]
 80115ee:	2206      	movs	r2, #6
 80115f0:	9201      	str	r2, [sp, #4]
 80115f2:	9300      	str	r3, [sp, #0]
 80115f4:	462b      	mov	r3, r5
 80115f6:	4622      	mov	r2, r4
 80115f8:	f002 fa5c 	bl	8013ab4 <ip4_output_if>
 80115fc:	4603      	mov	r3, r0
 80115fe:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011600:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011604:	4618      	mov	r0, r3
 8011606:	3720      	adds	r7, #32
 8011608:	46bd      	mov	sp, r7
 801160a:	bdb0      	pop	{r4, r5, r7, pc}
 801160c:	080174e4 	.word	0x080174e4
 8011610:	08017aa8 	.word	0x08017aa8
 8011614:	08017538 	.word	0x08017538
 8011618:	08017ac8 	.word	0x08017ac8
 801161c:	08017ae8 	.word	0x08017ae8
 8011620:	24003618 	.word	0x24003618
 8011624:	08017b0c 	.word	0x08017b0c

08011628 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011628:	b5b0      	push	{r4, r5, r7, lr}
 801162a:	b084      	sub	sp, #16
 801162c:	af00      	add	r7, sp, #0
 801162e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d106      	bne.n	8011644 <tcp_rexmit_rto_prepare+0x1c>
 8011636:	4b31      	ldr	r3, [pc, #196]	; (80116fc <tcp_rexmit_rto_prepare+0xd4>)
 8011638:	f240 6263 	movw	r2, #1635	; 0x663
 801163c:	4930      	ldr	r1, [pc, #192]	; (8011700 <tcp_rexmit_rto_prepare+0xd8>)
 801163e:	4831      	ldr	r0, [pc, #196]	; (8011704 <tcp_rexmit_rto_prepare+0xdc>)
 8011640:	f003 fb3a 	bl	8014cb8 <iprintf>

  if (pcb->unacked == NULL) {
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011648:	2b00      	cmp	r3, #0
 801164a:	d102      	bne.n	8011652 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801164c:	f06f 0305 	mvn.w	r3, #5
 8011650:	e050      	b.n	80116f4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011656:	60fb      	str	r3, [r7, #12]
 8011658:	e00b      	b.n	8011672 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801165a:	68f8      	ldr	r0, [r7, #12]
 801165c:	f7ff fee6 	bl	801142c <tcp_output_segment_busy>
 8011660:	4603      	mov	r3, r0
 8011662:	2b00      	cmp	r3, #0
 8011664:	d002      	beq.n	801166c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011666:	f06f 0305 	mvn.w	r3, #5
 801166a:	e043      	b.n	80116f4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	60fb      	str	r3, [r7, #12]
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d1ef      	bne.n	801165a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801167a:	68f8      	ldr	r0, [r7, #12]
 801167c:	f7ff fed6 	bl	801142c <tcp_output_segment_busy>
 8011680:	4603      	mov	r3, r0
 8011682:	2b00      	cmp	r3, #0
 8011684:	d002      	beq.n	801168c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8011686:	f06f 0305 	mvn.w	r3, #5
 801168a:	e033      	b.n	80116f4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	2200      	movs	r2, #0
 80116a0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	8b5b      	ldrh	r3, [r3, #26]
 80116a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80116aa:	b29a      	uxth	r2, r3
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	68db      	ldr	r3, [r3, #12]
 80116b4:	685b      	ldr	r3, [r3, #4]
 80116b6:	4618      	mov	r0, r3
 80116b8:	f7f8 fd4b 	bl	800a152 <lwip_htonl>
 80116bc:	4604      	mov	r4, r0
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	891b      	ldrh	r3, [r3, #8]
 80116c2:	461d      	mov	r5, r3
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	68db      	ldr	r3, [r3, #12]
 80116c8:	899b      	ldrh	r3, [r3, #12]
 80116ca:	b29b      	uxth	r3, r3
 80116cc:	4618      	mov	r0, r3
 80116ce:	f7f8 fd2b 	bl	800a128 <lwip_htons>
 80116d2:	4603      	mov	r3, r0
 80116d4:	b2db      	uxtb	r3, r3
 80116d6:	f003 0303 	and.w	r3, r3, #3
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d001      	beq.n	80116e2 <tcp_rexmit_rto_prepare+0xba>
 80116de:	2301      	movs	r3, #1
 80116e0:	e000      	b.n	80116e4 <tcp_rexmit_rto_prepare+0xbc>
 80116e2:	2300      	movs	r3, #0
 80116e4:	442b      	add	r3, r5
 80116e6:	18e2      	adds	r2, r4, r3
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	2200      	movs	r2, #0
 80116f0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80116f2:	2300      	movs	r3, #0
}
 80116f4:	4618      	mov	r0, r3
 80116f6:	3710      	adds	r7, #16
 80116f8:	46bd      	mov	sp, r7
 80116fa:	bdb0      	pop	{r4, r5, r7, pc}
 80116fc:	080174e4 	.word	0x080174e4
 8011700:	08017b20 	.word	0x08017b20
 8011704:	08017538 	.word	0x08017538

08011708 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b082      	sub	sp, #8
 801170c:	af00      	add	r7, sp, #0
 801170e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	2b00      	cmp	r3, #0
 8011714:	d106      	bne.n	8011724 <tcp_rexmit_rto_commit+0x1c>
 8011716:	4b0d      	ldr	r3, [pc, #52]	; (801174c <tcp_rexmit_rto_commit+0x44>)
 8011718:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801171c:	490c      	ldr	r1, [pc, #48]	; (8011750 <tcp_rexmit_rto_commit+0x48>)
 801171e:	480d      	ldr	r0, [pc, #52]	; (8011754 <tcp_rexmit_rto_commit+0x4c>)
 8011720:	f003 faca 	bl	8014cb8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801172a:	2bff      	cmp	r3, #255	; 0xff
 801172c:	d007      	beq.n	801173e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011734:	3301      	adds	r3, #1
 8011736:	b2da      	uxtb	r2, r3
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801173e:	6878      	ldr	r0, [r7, #4]
 8011740:	f7ff fc80 	bl	8011044 <tcp_output>
}
 8011744:	bf00      	nop
 8011746:	3708      	adds	r7, #8
 8011748:	46bd      	mov	sp, r7
 801174a:	bd80      	pop	{r7, pc}
 801174c:	080174e4 	.word	0x080174e4
 8011750:	08017b44 	.word	0x08017b44
 8011754:	08017538 	.word	0x08017538

08011758 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b082      	sub	sp, #8
 801175c:	af00      	add	r7, sp, #0
 801175e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d106      	bne.n	8011774 <tcp_rexmit_rto+0x1c>
 8011766:	4b0a      	ldr	r3, [pc, #40]	; (8011790 <tcp_rexmit_rto+0x38>)
 8011768:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801176c:	4909      	ldr	r1, [pc, #36]	; (8011794 <tcp_rexmit_rto+0x3c>)
 801176e:	480a      	ldr	r0, [pc, #40]	; (8011798 <tcp_rexmit_rto+0x40>)
 8011770:	f003 faa2 	bl	8014cb8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011774:	6878      	ldr	r0, [r7, #4]
 8011776:	f7ff ff57 	bl	8011628 <tcp_rexmit_rto_prepare>
 801177a:	4603      	mov	r3, r0
 801177c:	2b00      	cmp	r3, #0
 801177e:	d102      	bne.n	8011786 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011780:	6878      	ldr	r0, [r7, #4]
 8011782:	f7ff ffc1 	bl	8011708 <tcp_rexmit_rto_commit>
  }
}
 8011786:	bf00      	nop
 8011788:	3708      	adds	r7, #8
 801178a:	46bd      	mov	sp, r7
 801178c:	bd80      	pop	{r7, pc}
 801178e:	bf00      	nop
 8011790:	080174e4 	.word	0x080174e4
 8011794:	08017b68 	.word	0x08017b68
 8011798:	08017538 	.word	0x08017538

0801179c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801179c:	b590      	push	{r4, r7, lr}
 801179e:	b085      	sub	sp, #20
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d106      	bne.n	80117b8 <tcp_rexmit+0x1c>
 80117aa:	4b2f      	ldr	r3, [pc, #188]	; (8011868 <tcp_rexmit+0xcc>)
 80117ac:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80117b0:	492e      	ldr	r1, [pc, #184]	; (801186c <tcp_rexmit+0xd0>)
 80117b2:	482f      	ldr	r0, [pc, #188]	; (8011870 <tcp_rexmit+0xd4>)
 80117b4:	f003 fa80 	bl	8014cb8 <iprintf>

  if (pcb->unacked == NULL) {
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d102      	bne.n	80117c6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80117c0:	f06f 0305 	mvn.w	r3, #5
 80117c4:	e04c      	b.n	8011860 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117ca:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80117cc:	68b8      	ldr	r0, [r7, #8]
 80117ce:	f7ff fe2d 	bl	801142c <tcp_output_segment_busy>
 80117d2:	4603      	mov	r3, r0
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d002      	beq.n	80117de <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80117d8:	f06f 0305 	mvn.w	r3, #5
 80117dc:	e040      	b.n	8011860 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80117de:	68bb      	ldr	r3, [r7, #8]
 80117e0:	681a      	ldr	r2, [r3, #0]
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	336c      	adds	r3, #108	; 0x6c
 80117ea:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80117ec:	e002      	b.n	80117f4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d011      	beq.n	8011820 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	68db      	ldr	r3, [r3, #12]
 8011802:	685b      	ldr	r3, [r3, #4]
 8011804:	4618      	mov	r0, r3
 8011806:	f7f8 fca4 	bl	800a152 <lwip_htonl>
 801180a:	4604      	mov	r4, r0
 801180c:	68bb      	ldr	r3, [r7, #8]
 801180e:	68db      	ldr	r3, [r3, #12]
 8011810:	685b      	ldr	r3, [r3, #4]
 8011812:	4618      	mov	r0, r3
 8011814:	f7f8 fc9d 	bl	800a152 <lwip_htonl>
 8011818:	4603      	mov	r3, r0
 801181a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801181c:	2b00      	cmp	r3, #0
 801181e:	dbe6      	blt.n	80117ee <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	681a      	ldr	r2, [r3, #0]
 8011824:	68bb      	ldr	r3, [r7, #8]
 8011826:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	68ba      	ldr	r2, [r7, #8]
 801182c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801182e:	68bb      	ldr	r3, [r7, #8]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d103      	bne.n	801183e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	2200      	movs	r2, #0
 801183a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011844:	2bff      	cmp	r3, #255	; 0xff
 8011846:	d007      	beq.n	8011858 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801184e:	3301      	adds	r3, #1
 8011850:	b2da      	uxtb	r2, r3
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	2200      	movs	r2, #0
 801185c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801185e:	2300      	movs	r3, #0
}
 8011860:	4618      	mov	r0, r3
 8011862:	3714      	adds	r7, #20
 8011864:	46bd      	mov	sp, r7
 8011866:	bd90      	pop	{r4, r7, pc}
 8011868:	080174e4 	.word	0x080174e4
 801186c:	08017b84 	.word	0x08017b84
 8011870:	08017538 	.word	0x08017538

08011874 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011874:	b580      	push	{r7, lr}
 8011876:	b082      	sub	sp, #8
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d106      	bne.n	8011890 <tcp_rexmit_fast+0x1c>
 8011882:	4b2a      	ldr	r3, [pc, #168]	; (801192c <tcp_rexmit_fast+0xb8>)
 8011884:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8011888:	4929      	ldr	r1, [pc, #164]	; (8011930 <tcp_rexmit_fast+0xbc>)
 801188a:	482a      	ldr	r0, [pc, #168]	; (8011934 <tcp_rexmit_fast+0xc0>)
 801188c:	f003 fa14 	bl	8014cb8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011894:	2b00      	cmp	r3, #0
 8011896:	d045      	beq.n	8011924 <tcp_rexmit_fast+0xb0>
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	8b5b      	ldrh	r3, [r3, #26]
 801189c:	f003 0304 	and.w	r3, r3, #4
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d13f      	bne.n	8011924 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80118a4:	6878      	ldr	r0, [r7, #4]
 80118a6:	f7ff ff79 	bl	801179c <tcp_rexmit>
 80118aa:	4603      	mov	r3, r0
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d139      	bne.n	8011924 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80118bc:	4293      	cmp	r3, r2
 80118be:	bf28      	it	cs
 80118c0:	4613      	movcs	r3, r2
 80118c2:	b29b      	uxth	r3, r3
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	da00      	bge.n	80118ca <tcp_rexmit_fast+0x56>
 80118c8:	3301      	adds	r3, #1
 80118ca:	105b      	asrs	r3, r3, #1
 80118cc:	b29a      	uxth	r2, r3
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80118da:	461a      	mov	r2, r3
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118e0:	005b      	lsls	r3, r3, #1
 80118e2:	429a      	cmp	r2, r3
 80118e4:	d206      	bcs.n	80118f4 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118ea:	005b      	lsls	r3, r3, #1
 80118ec:	b29a      	uxth	r2, r3
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118fe:	4619      	mov	r1, r3
 8011900:	0049      	lsls	r1, r1, #1
 8011902:	440b      	add	r3, r1
 8011904:	b29b      	uxth	r3, r3
 8011906:	4413      	add	r3, r2
 8011908:	b29a      	uxth	r2, r3
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	8b5b      	ldrh	r3, [r3, #26]
 8011914:	f043 0304 	orr.w	r3, r3, #4
 8011918:	b29a      	uxth	r2, r3
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	2200      	movs	r2, #0
 8011922:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8011924:	bf00      	nop
 8011926:	3708      	adds	r7, #8
 8011928:	46bd      	mov	sp, r7
 801192a:	bd80      	pop	{r7, pc}
 801192c:	080174e4 	.word	0x080174e4
 8011930:	08017b9c 	.word	0x08017b9c
 8011934:	08017538 	.word	0x08017538

08011938 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b086      	sub	sp, #24
 801193c:	af00      	add	r7, sp, #0
 801193e:	60f8      	str	r0, [r7, #12]
 8011940:	607b      	str	r3, [r7, #4]
 8011942:	460b      	mov	r3, r1
 8011944:	817b      	strh	r3, [r7, #10]
 8011946:	4613      	mov	r3, r2
 8011948:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801194a:	897a      	ldrh	r2, [r7, #10]
 801194c:	893b      	ldrh	r3, [r7, #8]
 801194e:	4413      	add	r3, r2
 8011950:	b29b      	uxth	r3, r3
 8011952:	3314      	adds	r3, #20
 8011954:	b29b      	uxth	r3, r3
 8011956:	f44f 7220 	mov.w	r2, #640	; 0x280
 801195a:	4619      	mov	r1, r3
 801195c:	2022      	movs	r0, #34	; 0x22
 801195e:	f7f9 fd15 	bl	800b38c <pbuf_alloc>
 8011962:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011964:	697b      	ldr	r3, [r7, #20]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d04d      	beq.n	8011a06 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801196a:	897b      	ldrh	r3, [r7, #10]
 801196c:	3313      	adds	r3, #19
 801196e:	697a      	ldr	r2, [r7, #20]
 8011970:	8952      	ldrh	r2, [r2, #10]
 8011972:	4293      	cmp	r3, r2
 8011974:	db06      	blt.n	8011984 <tcp_output_alloc_header_common+0x4c>
 8011976:	4b26      	ldr	r3, [pc, #152]	; (8011a10 <tcp_output_alloc_header_common+0xd8>)
 8011978:	f240 7223 	movw	r2, #1827	; 0x723
 801197c:	4925      	ldr	r1, [pc, #148]	; (8011a14 <tcp_output_alloc_header_common+0xdc>)
 801197e:	4826      	ldr	r0, [pc, #152]	; (8011a18 <tcp_output_alloc_header_common+0xe0>)
 8011980:	f003 f99a 	bl	8014cb8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011984:	697b      	ldr	r3, [r7, #20]
 8011986:	685b      	ldr	r3, [r3, #4]
 8011988:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801198a:	8c3b      	ldrh	r3, [r7, #32]
 801198c:	4618      	mov	r0, r3
 801198e:	f7f8 fbcb 	bl	800a128 <lwip_htons>
 8011992:	4603      	mov	r3, r0
 8011994:	461a      	mov	r2, r3
 8011996:	693b      	ldr	r3, [r7, #16]
 8011998:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801199a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801199c:	4618      	mov	r0, r3
 801199e:	f7f8 fbc3 	bl	800a128 <lwip_htons>
 80119a2:	4603      	mov	r3, r0
 80119a4:	461a      	mov	r2, r3
 80119a6:	693b      	ldr	r3, [r7, #16]
 80119a8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80119aa:	693b      	ldr	r3, [r7, #16]
 80119ac:	687a      	ldr	r2, [r7, #4]
 80119ae:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80119b0:	68f8      	ldr	r0, [r7, #12]
 80119b2:	f7f8 fbce 	bl	800a152 <lwip_htonl>
 80119b6:	4602      	mov	r2, r0
 80119b8:	693b      	ldr	r3, [r7, #16]
 80119ba:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80119bc:	897b      	ldrh	r3, [r7, #10]
 80119be:	089b      	lsrs	r3, r3, #2
 80119c0:	b29b      	uxth	r3, r3
 80119c2:	3305      	adds	r3, #5
 80119c4:	b29b      	uxth	r3, r3
 80119c6:	031b      	lsls	r3, r3, #12
 80119c8:	b29a      	uxth	r2, r3
 80119ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80119ce:	b29b      	uxth	r3, r3
 80119d0:	4313      	orrs	r3, r2
 80119d2:	b29b      	uxth	r3, r3
 80119d4:	4618      	mov	r0, r3
 80119d6:	f7f8 fba7 	bl	800a128 <lwip_htons>
 80119da:	4603      	mov	r3, r0
 80119dc:	461a      	mov	r2, r3
 80119de:	693b      	ldr	r3, [r7, #16]
 80119e0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80119e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80119e4:	4618      	mov	r0, r3
 80119e6:	f7f8 fb9f 	bl	800a128 <lwip_htons>
 80119ea:	4603      	mov	r3, r0
 80119ec:	461a      	mov	r2, r3
 80119ee:	693b      	ldr	r3, [r7, #16]
 80119f0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80119f2:	693b      	ldr	r3, [r7, #16]
 80119f4:	2200      	movs	r2, #0
 80119f6:	741a      	strb	r2, [r3, #16]
 80119f8:	2200      	movs	r2, #0
 80119fa:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80119fc:	693b      	ldr	r3, [r7, #16]
 80119fe:	2200      	movs	r2, #0
 8011a00:	749a      	strb	r2, [r3, #18]
 8011a02:	2200      	movs	r2, #0
 8011a04:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8011a06:	697b      	ldr	r3, [r7, #20]
}
 8011a08:	4618      	mov	r0, r3
 8011a0a:	3718      	adds	r7, #24
 8011a0c:	46bd      	mov	sp, r7
 8011a0e:	bd80      	pop	{r7, pc}
 8011a10:	080174e4 	.word	0x080174e4
 8011a14:	08017bbc 	.word	0x08017bbc
 8011a18:	08017538 	.word	0x08017538

08011a1c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011a1c:	b5b0      	push	{r4, r5, r7, lr}
 8011a1e:	b08a      	sub	sp, #40	; 0x28
 8011a20:	af04      	add	r7, sp, #16
 8011a22:	60f8      	str	r0, [r7, #12]
 8011a24:	607b      	str	r3, [r7, #4]
 8011a26:	460b      	mov	r3, r1
 8011a28:	817b      	strh	r3, [r7, #10]
 8011a2a:	4613      	mov	r3, r2
 8011a2c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d106      	bne.n	8011a42 <tcp_output_alloc_header+0x26>
 8011a34:	4b15      	ldr	r3, [pc, #84]	; (8011a8c <tcp_output_alloc_header+0x70>)
 8011a36:	f240 7242 	movw	r2, #1858	; 0x742
 8011a3a:	4915      	ldr	r1, [pc, #84]	; (8011a90 <tcp_output_alloc_header+0x74>)
 8011a3c:	4815      	ldr	r0, [pc, #84]	; (8011a94 <tcp_output_alloc_header+0x78>)
 8011a3e:	f003 f93b 	bl	8014cb8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	8adb      	ldrh	r3, [r3, #22]
 8011a4a:	68fa      	ldr	r2, [r7, #12]
 8011a4c:	8b12      	ldrh	r2, [r2, #24]
 8011a4e:	68f9      	ldr	r1, [r7, #12]
 8011a50:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8011a52:	893d      	ldrh	r5, [r7, #8]
 8011a54:	897c      	ldrh	r4, [r7, #10]
 8011a56:	9103      	str	r1, [sp, #12]
 8011a58:	2110      	movs	r1, #16
 8011a5a:	9102      	str	r1, [sp, #8]
 8011a5c:	9201      	str	r2, [sp, #4]
 8011a5e:	9300      	str	r3, [sp, #0]
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	462a      	mov	r2, r5
 8011a64:	4621      	mov	r1, r4
 8011a66:	f7ff ff67 	bl	8011938 <tcp_output_alloc_header_common>
 8011a6a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011a6c:	697b      	ldr	r3, [r7, #20]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d006      	beq.n	8011a80 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a76:	68fa      	ldr	r2, [r7, #12]
 8011a78:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011a7a:	441a      	add	r2, r3
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8011a80:	697b      	ldr	r3, [r7, #20]
}
 8011a82:	4618      	mov	r0, r3
 8011a84:	3718      	adds	r7, #24
 8011a86:	46bd      	mov	sp, r7
 8011a88:	bdb0      	pop	{r4, r5, r7, pc}
 8011a8a:	bf00      	nop
 8011a8c:	080174e4 	.word	0x080174e4
 8011a90:	08017bec 	.word	0x08017bec
 8011a94:	08017538 	.word	0x08017538

08011a98 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b088      	sub	sp, #32
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	60f8      	str	r0, [r7, #12]
 8011aa0:	60b9      	str	r1, [r7, #8]
 8011aa2:	4611      	mov	r1, r2
 8011aa4:	461a      	mov	r2, r3
 8011aa6:	460b      	mov	r3, r1
 8011aa8:	71fb      	strb	r3, [r7, #7]
 8011aaa:	4613      	mov	r3, r2
 8011aac:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8011aae:	2300      	movs	r3, #0
 8011ab0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8011ab2:	68bb      	ldr	r3, [r7, #8]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d106      	bne.n	8011ac6 <tcp_output_fill_options+0x2e>
 8011ab8:	4b13      	ldr	r3, [pc, #76]	; (8011b08 <tcp_output_fill_options+0x70>)
 8011aba:	f240 7256 	movw	r2, #1878	; 0x756
 8011abe:	4913      	ldr	r1, [pc, #76]	; (8011b0c <tcp_output_fill_options+0x74>)
 8011ac0:	4813      	ldr	r0, [pc, #76]	; (8011b10 <tcp_output_fill_options+0x78>)
 8011ac2:	f003 f8f9 	bl	8014cb8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8011ac6:	68bb      	ldr	r3, [r7, #8]
 8011ac8:	685b      	ldr	r3, [r3, #4]
 8011aca:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011acc:	69bb      	ldr	r3, [r7, #24]
 8011ace:	3314      	adds	r3, #20
 8011ad0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8011ad2:	69bb      	ldr	r3, [r7, #24]
 8011ad4:	f103 0214 	add.w	r2, r3, #20
 8011ad8:	8bfb      	ldrh	r3, [r7, #30]
 8011ada:	009b      	lsls	r3, r3, #2
 8011adc:	4619      	mov	r1, r3
 8011ade:	79fb      	ldrb	r3, [r7, #7]
 8011ae0:	009b      	lsls	r3, r3, #2
 8011ae2:	f003 0304 	and.w	r3, r3, #4
 8011ae6:	440b      	add	r3, r1
 8011ae8:	4413      	add	r3, r2
 8011aea:	697a      	ldr	r2, [r7, #20]
 8011aec:	429a      	cmp	r2, r3
 8011aee:	d006      	beq.n	8011afe <tcp_output_fill_options+0x66>
 8011af0:	4b05      	ldr	r3, [pc, #20]	; (8011b08 <tcp_output_fill_options+0x70>)
 8011af2:	f240 7275 	movw	r2, #1909	; 0x775
 8011af6:	4907      	ldr	r1, [pc, #28]	; (8011b14 <tcp_output_fill_options+0x7c>)
 8011af8:	4805      	ldr	r0, [pc, #20]	; (8011b10 <tcp_output_fill_options+0x78>)
 8011afa:	f003 f8dd 	bl	8014cb8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011afe:	bf00      	nop
 8011b00:	3720      	adds	r7, #32
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bd80      	pop	{r7, pc}
 8011b06:	bf00      	nop
 8011b08:	080174e4 	.word	0x080174e4
 8011b0c:	08017c14 	.word	0x08017c14
 8011b10:	08017538 	.word	0x08017538
 8011b14:	08017b0c 	.word	0x08017b0c

08011b18 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b08a      	sub	sp, #40	; 0x28
 8011b1c:	af04      	add	r7, sp, #16
 8011b1e:	60f8      	str	r0, [r7, #12]
 8011b20:	60b9      	str	r1, [r7, #8]
 8011b22:	607a      	str	r2, [r7, #4]
 8011b24:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011b26:	68bb      	ldr	r3, [r7, #8]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d106      	bne.n	8011b3a <tcp_output_control_segment+0x22>
 8011b2c:	4b1c      	ldr	r3, [pc, #112]	; (8011ba0 <tcp_output_control_segment+0x88>)
 8011b2e:	f240 7287 	movw	r2, #1927	; 0x787
 8011b32:	491c      	ldr	r1, [pc, #112]	; (8011ba4 <tcp_output_control_segment+0x8c>)
 8011b34:	481c      	ldr	r0, [pc, #112]	; (8011ba8 <tcp_output_control_segment+0x90>)
 8011b36:	f003 f8bf 	bl	8014cb8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011b3a:	683a      	ldr	r2, [r7, #0]
 8011b3c:	6879      	ldr	r1, [r7, #4]
 8011b3e:	68f8      	ldr	r0, [r7, #12]
 8011b40:	f7fe fae8 	bl	8010114 <tcp_route>
 8011b44:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011b46:	693b      	ldr	r3, [r7, #16]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d102      	bne.n	8011b52 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011b4c:	23fc      	movs	r3, #252	; 0xfc
 8011b4e:	75fb      	strb	r3, [r7, #23]
 8011b50:	e01c      	b.n	8011b8c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d006      	beq.n	8011b66 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	7adb      	ldrb	r3, [r3, #11]
 8011b5c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	7a9b      	ldrb	r3, [r3, #10]
 8011b62:	757b      	strb	r3, [r7, #21]
 8011b64:	e003      	b.n	8011b6e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011b66:	23ff      	movs	r3, #255	; 0xff
 8011b68:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011b6e:	7dba      	ldrb	r2, [r7, #22]
 8011b70:	693b      	ldr	r3, [r7, #16]
 8011b72:	9302      	str	r3, [sp, #8]
 8011b74:	2306      	movs	r3, #6
 8011b76:	9301      	str	r3, [sp, #4]
 8011b78:	7d7b      	ldrb	r3, [r7, #21]
 8011b7a:	9300      	str	r3, [sp, #0]
 8011b7c:	4613      	mov	r3, r2
 8011b7e:	683a      	ldr	r2, [r7, #0]
 8011b80:	6879      	ldr	r1, [r7, #4]
 8011b82:	68b8      	ldr	r0, [r7, #8]
 8011b84:	f001 ff96 	bl	8013ab4 <ip4_output_if>
 8011b88:	4603      	mov	r3, r0
 8011b8a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011b8c:	68b8      	ldr	r0, [r7, #8]
 8011b8e:	f7f9 fee1 	bl	800b954 <pbuf_free>
  return err;
 8011b92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011b96:	4618      	mov	r0, r3
 8011b98:	3718      	adds	r7, #24
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	bd80      	pop	{r7, pc}
 8011b9e:	bf00      	nop
 8011ba0:	080174e4 	.word	0x080174e4
 8011ba4:	08017c3c 	.word	0x08017c3c
 8011ba8:	08017538 	.word	0x08017538

08011bac <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011bac:	b590      	push	{r4, r7, lr}
 8011bae:	b08b      	sub	sp, #44	; 0x2c
 8011bb0:	af04      	add	r7, sp, #16
 8011bb2:	60f8      	str	r0, [r7, #12]
 8011bb4:	60b9      	str	r1, [r7, #8]
 8011bb6:	607a      	str	r2, [r7, #4]
 8011bb8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011bba:	683b      	ldr	r3, [r7, #0]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d106      	bne.n	8011bce <tcp_rst+0x22>
 8011bc0:	4b1f      	ldr	r3, [pc, #124]	; (8011c40 <tcp_rst+0x94>)
 8011bc2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8011bc6:	491f      	ldr	r1, [pc, #124]	; (8011c44 <tcp_rst+0x98>)
 8011bc8:	481f      	ldr	r0, [pc, #124]	; (8011c48 <tcp_rst+0x9c>)
 8011bca:	f003 f875 	bl	8014cb8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d106      	bne.n	8011be2 <tcp_rst+0x36>
 8011bd4:	4b1a      	ldr	r3, [pc, #104]	; (8011c40 <tcp_rst+0x94>)
 8011bd6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8011bda:	491c      	ldr	r1, [pc, #112]	; (8011c4c <tcp_rst+0xa0>)
 8011bdc:	481a      	ldr	r0, [pc, #104]	; (8011c48 <tcp_rst+0x9c>)
 8011bde:	f003 f86b 	bl	8014cb8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011be2:	2300      	movs	r3, #0
 8011be4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011be6:	f246 0308 	movw	r3, #24584	; 0x6008
 8011bea:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011bec:	7dfb      	ldrb	r3, [r7, #23]
 8011bee:	b29c      	uxth	r4, r3
 8011bf0:	68b8      	ldr	r0, [r7, #8]
 8011bf2:	f7f8 faae 	bl	800a152 <lwip_htonl>
 8011bf6:	4602      	mov	r2, r0
 8011bf8:	8abb      	ldrh	r3, [r7, #20]
 8011bfa:	9303      	str	r3, [sp, #12]
 8011bfc:	2314      	movs	r3, #20
 8011bfe:	9302      	str	r3, [sp, #8]
 8011c00:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011c02:	9301      	str	r3, [sp, #4]
 8011c04:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011c06:	9300      	str	r3, [sp, #0]
 8011c08:	4613      	mov	r3, r2
 8011c0a:	2200      	movs	r2, #0
 8011c0c:	4621      	mov	r1, r4
 8011c0e:	6878      	ldr	r0, [r7, #4]
 8011c10:	f7ff fe92 	bl	8011938 <tcp_output_alloc_header_common>
 8011c14:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d00c      	beq.n	8011c36 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011c1c:	7dfb      	ldrb	r3, [r7, #23]
 8011c1e:	2200      	movs	r2, #0
 8011c20:	6939      	ldr	r1, [r7, #16]
 8011c22:	68f8      	ldr	r0, [r7, #12]
 8011c24:	f7ff ff38 	bl	8011a98 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c2a:	683a      	ldr	r2, [r7, #0]
 8011c2c:	6939      	ldr	r1, [r7, #16]
 8011c2e:	68f8      	ldr	r0, [r7, #12]
 8011c30:	f7ff ff72 	bl	8011b18 <tcp_output_control_segment>
 8011c34:	e000      	b.n	8011c38 <tcp_rst+0x8c>
    return;
 8011c36:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011c38:	371c      	adds	r7, #28
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	bd90      	pop	{r4, r7, pc}
 8011c3e:	bf00      	nop
 8011c40:	080174e4 	.word	0x080174e4
 8011c44:	08017c68 	.word	0x08017c68
 8011c48:	08017538 	.word	0x08017538
 8011c4c:	08017c84 	.word	0x08017c84

08011c50 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011c50:	b590      	push	{r4, r7, lr}
 8011c52:	b087      	sub	sp, #28
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011c58:	2300      	movs	r3, #0
 8011c5a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d106      	bne.n	8011c74 <tcp_send_empty_ack+0x24>
 8011c66:	4b28      	ldr	r3, [pc, #160]	; (8011d08 <tcp_send_empty_ack+0xb8>)
 8011c68:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8011c6c:	4927      	ldr	r1, [pc, #156]	; (8011d0c <tcp_send_empty_ack+0xbc>)
 8011c6e:	4828      	ldr	r0, [pc, #160]	; (8011d10 <tcp_send_empty_ack+0xc0>)
 8011c70:	f003 f822 	bl	8014cb8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011c74:	7dfb      	ldrb	r3, [r7, #23]
 8011c76:	009b      	lsls	r3, r3, #2
 8011c78:	b2db      	uxtb	r3, r3
 8011c7a:	f003 0304 	and.w	r3, r3, #4
 8011c7e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011c80:	7d7b      	ldrb	r3, [r7, #21]
 8011c82:	b29c      	uxth	r4, r3
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c88:	4618      	mov	r0, r3
 8011c8a:	f7f8 fa62 	bl	800a152 <lwip_htonl>
 8011c8e:	4603      	mov	r3, r0
 8011c90:	2200      	movs	r2, #0
 8011c92:	4621      	mov	r1, r4
 8011c94:	6878      	ldr	r0, [r7, #4]
 8011c96:	f7ff fec1 	bl	8011a1c <tcp_output_alloc_header>
 8011c9a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011c9c:	693b      	ldr	r3, [r7, #16]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d109      	bne.n	8011cb6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	8b5b      	ldrh	r3, [r3, #26]
 8011ca6:	f043 0303 	orr.w	r3, r3, #3
 8011caa:	b29a      	uxth	r2, r3
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011cb0:	f06f 0301 	mvn.w	r3, #1
 8011cb4:	e023      	b.n	8011cfe <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011cb6:	7dbb      	ldrb	r3, [r7, #22]
 8011cb8:	7dfa      	ldrb	r2, [r7, #23]
 8011cba:	6939      	ldr	r1, [r7, #16]
 8011cbc:	6878      	ldr	r0, [r7, #4]
 8011cbe:	f7ff feeb 	bl	8011a98 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011cc2:	687a      	ldr	r2, [r7, #4]
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	3304      	adds	r3, #4
 8011cc8:	6939      	ldr	r1, [r7, #16]
 8011cca:	6878      	ldr	r0, [r7, #4]
 8011ccc:	f7ff ff24 	bl	8011b18 <tcp_output_control_segment>
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d007      	beq.n	8011cec <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	8b5b      	ldrh	r3, [r3, #26]
 8011ce0:	f043 0303 	orr.w	r3, r3, #3
 8011ce4:	b29a      	uxth	r2, r3
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	835a      	strh	r2, [r3, #26]
 8011cea:	e006      	b.n	8011cfa <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	8b5b      	ldrh	r3, [r3, #26]
 8011cf0:	f023 0303 	bic.w	r3, r3, #3
 8011cf4:	b29a      	uxth	r2, r3
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011cfe:	4618      	mov	r0, r3
 8011d00:	371c      	adds	r7, #28
 8011d02:	46bd      	mov	sp, r7
 8011d04:	bd90      	pop	{r4, r7, pc}
 8011d06:	bf00      	nop
 8011d08:	080174e4 	.word	0x080174e4
 8011d0c:	08017ca0 	.word	0x08017ca0
 8011d10:	08017538 	.word	0x08017538

08011d14 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011d14:	b590      	push	{r4, r7, lr}
 8011d16:	b087      	sub	sp, #28
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d106      	bne.n	8011d34 <tcp_keepalive+0x20>
 8011d26:	4b18      	ldr	r3, [pc, #96]	; (8011d88 <tcp_keepalive+0x74>)
 8011d28:	f640 0224 	movw	r2, #2084	; 0x824
 8011d2c:	4917      	ldr	r1, [pc, #92]	; (8011d8c <tcp_keepalive+0x78>)
 8011d2e:	4818      	ldr	r0, [pc, #96]	; (8011d90 <tcp_keepalive+0x7c>)
 8011d30:	f002 ffc2 	bl	8014cb8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011d34:	7dfb      	ldrb	r3, [r7, #23]
 8011d36:	b29c      	uxth	r4, r3
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011d3c:	3b01      	subs	r3, #1
 8011d3e:	4618      	mov	r0, r3
 8011d40:	f7f8 fa07 	bl	800a152 <lwip_htonl>
 8011d44:	4603      	mov	r3, r0
 8011d46:	2200      	movs	r2, #0
 8011d48:	4621      	mov	r1, r4
 8011d4a:	6878      	ldr	r0, [r7, #4]
 8011d4c:	f7ff fe66 	bl	8011a1c <tcp_output_alloc_header>
 8011d50:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011d52:	693b      	ldr	r3, [r7, #16]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d102      	bne.n	8011d5e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011d58:	f04f 33ff 	mov.w	r3, #4294967295
 8011d5c:	e010      	b.n	8011d80 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011d5e:	7dfb      	ldrb	r3, [r7, #23]
 8011d60:	2200      	movs	r2, #0
 8011d62:	6939      	ldr	r1, [r7, #16]
 8011d64:	6878      	ldr	r0, [r7, #4]
 8011d66:	f7ff fe97 	bl	8011a98 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011d6a:	687a      	ldr	r2, [r7, #4]
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	3304      	adds	r3, #4
 8011d70:	6939      	ldr	r1, [r7, #16]
 8011d72:	6878      	ldr	r0, [r7, #4]
 8011d74:	f7ff fed0 	bl	8011b18 <tcp_output_control_segment>
 8011d78:	4603      	mov	r3, r0
 8011d7a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011d80:	4618      	mov	r0, r3
 8011d82:	371c      	adds	r7, #28
 8011d84:	46bd      	mov	sp, r7
 8011d86:	bd90      	pop	{r4, r7, pc}
 8011d88:	080174e4 	.word	0x080174e4
 8011d8c:	08017cc0 	.word	0x08017cc0
 8011d90:	08017538 	.word	0x08017538

08011d94 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011d94:	b590      	push	{r4, r7, lr}
 8011d96:	b08b      	sub	sp, #44	; 0x2c
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d106      	bne.n	8011db6 <tcp_zero_window_probe+0x22>
 8011da8:	4b4c      	ldr	r3, [pc, #304]	; (8011edc <tcp_zero_window_probe+0x148>)
 8011daa:	f640 024f 	movw	r2, #2127	; 0x84f
 8011dae:	494c      	ldr	r1, [pc, #304]	; (8011ee0 <tcp_zero_window_probe+0x14c>)
 8011db0:	484c      	ldr	r0, [pc, #304]	; (8011ee4 <tcp_zero_window_probe+0x150>)
 8011db2:	f002 ff81 	bl	8014cb8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011dba:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011dbc:	6a3b      	ldr	r3, [r7, #32]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d101      	bne.n	8011dc6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011dc2:	2300      	movs	r3, #0
 8011dc4:	e086      	b.n	8011ed4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011dcc:	2bff      	cmp	r3, #255	; 0xff
 8011dce:	d007      	beq.n	8011de0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011dd6:	3301      	adds	r3, #1
 8011dd8:	b2da      	uxtb	r2, r3
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011de0:	6a3b      	ldr	r3, [r7, #32]
 8011de2:	68db      	ldr	r3, [r3, #12]
 8011de4:	899b      	ldrh	r3, [r3, #12]
 8011de6:	b29b      	uxth	r3, r3
 8011de8:	4618      	mov	r0, r3
 8011dea:	f7f8 f99d 	bl	800a128 <lwip_htons>
 8011dee:	4603      	mov	r3, r0
 8011df0:	b2db      	uxtb	r3, r3
 8011df2:	f003 0301 	and.w	r3, r3, #1
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d005      	beq.n	8011e06 <tcp_zero_window_probe+0x72>
 8011dfa:	6a3b      	ldr	r3, [r7, #32]
 8011dfc:	891b      	ldrh	r3, [r3, #8]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d101      	bne.n	8011e06 <tcp_zero_window_probe+0x72>
 8011e02:	2301      	movs	r3, #1
 8011e04:	e000      	b.n	8011e08 <tcp_zero_window_probe+0x74>
 8011e06:	2300      	movs	r3, #0
 8011e08:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011e0a:	7ffb      	ldrb	r3, [r7, #31]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	bf0c      	ite	eq
 8011e10:	2301      	moveq	r3, #1
 8011e12:	2300      	movne	r3, #0
 8011e14:	b2db      	uxtb	r3, r3
 8011e16:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011e18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e1c:	b299      	uxth	r1, r3
 8011e1e:	6a3b      	ldr	r3, [r7, #32]
 8011e20:	68db      	ldr	r3, [r3, #12]
 8011e22:	685b      	ldr	r3, [r3, #4]
 8011e24:	8bba      	ldrh	r2, [r7, #28]
 8011e26:	6878      	ldr	r0, [r7, #4]
 8011e28:	f7ff fdf8 	bl	8011a1c <tcp_output_alloc_header>
 8011e2c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011e2e:	69bb      	ldr	r3, [r7, #24]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d102      	bne.n	8011e3a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011e34:	f04f 33ff 	mov.w	r3, #4294967295
 8011e38:	e04c      	b.n	8011ed4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011e3a:	69bb      	ldr	r3, [r7, #24]
 8011e3c:	685b      	ldr	r3, [r3, #4]
 8011e3e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011e40:	7ffb      	ldrb	r3, [r7, #31]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d011      	beq.n	8011e6a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011e46:	697b      	ldr	r3, [r7, #20]
 8011e48:	899b      	ldrh	r3, [r3, #12]
 8011e4a:	b29b      	uxth	r3, r3
 8011e4c:	b21b      	sxth	r3, r3
 8011e4e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011e52:	b21c      	sxth	r4, r3
 8011e54:	2011      	movs	r0, #17
 8011e56:	f7f8 f967 	bl	800a128 <lwip_htons>
 8011e5a:	4603      	mov	r3, r0
 8011e5c:	b21b      	sxth	r3, r3
 8011e5e:	4323      	orrs	r3, r4
 8011e60:	b21b      	sxth	r3, r3
 8011e62:	b29a      	uxth	r2, r3
 8011e64:	697b      	ldr	r3, [r7, #20]
 8011e66:	819a      	strh	r2, [r3, #12]
 8011e68:	e010      	b.n	8011e8c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011e6a:	69bb      	ldr	r3, [r7, #24]
 8011e6c:	685b      	ldr	r3, [r3, #4]
 8011e6e:	3314      	adds	r3, #20
 8011e70:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011e72:	6a3b      	ldr	r3, [r7, #32]
 8011e74:	6858      	ldr	r0, [r3, #4]
 8011e76:	6a3b      	ldr	r3, [r7, #32]
 8011e78:	685b      	ldr	r3, [r3, #4]
 8011e7a:	891a      	ldrh	r2, [r3, #8]
 8011e7c:	6a3b      	ldr	r3, [r7, #32]
 8011e7e:	891b      	ldrh	r3, [r3, #8]
 8011e80:	1ad3      	subs	r3, r2, r3
 8011e82:	b29b      	uxth	r3, r3
 8011e84:	2201      	movs	r2, #1
 8011e86:	6939      	ldr	r1, [r7, #16]
 8011e88:	f7f9 ff5e 	bl	800bd48 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011e8c:	6a3b      	ldr	r3, [r7, #32]
 8011e8e:	68db      	ldr	r3, [r3, #12]
 8011e90:	685b      	ldr	r3, [r3, #4]
 8011e92:	4618      	mov	r0, r3
 8011e94:	f7f8 f95d 	bl	800a152 <lwip_htonl>
 8011e98:	4603      	mov	r3, r0
 8011e9a:	3301      	adds	r3, #1
 8011e9c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	1ad3      	subs	r3, r2, r3
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	da02      	bge.n	8011eb0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	68fa      	ldr	r2, [r7, #12]
 8011eae:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011eb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011eb4:	2200      	movs	r2, #0
 8011eb6:	69b9      	ldr	r1, [r7, #24]
 8011eb8:	6878      	ldr	r0, [r7, #4]
 8011eba:	f7ff fded 	bl	8011a98 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011ebe:	687a      	ldr	r2, [r7, #4]
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	3304      	adds	r3, #4
 8011ec4:	69b9      	ldr	r1, [r7, #24]
 8011ec6:	6878      	ldr	r0, [r7, #4]
 8011ec8:	f7ff fe26 	bl	8011b18 <tcp_output_control_segment>
 8011ecc:	4603      	mov	r3, r0
 8011ece:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011ed0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	372c      	adds	r7, #44	; 0x2c
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	bd90      	pop	{r4, r7, pc}
 8011edc:	080174e4 	.word	0x080174e4
 8011ee0:	08017cdc 	.word	0x08017cdc
 8011ee4:	08017538 	.word	0x08017538

08011ee8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011ee8:	b580      	push	{r7, lr}
 8011eea:	b082      	sub	sp, #8
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011ef0:	f7fa f818 	bl	800bf24 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011ef4:	4b0a      	ldr	r3, [pc, #40]	; (8011f20 <tcpip_tcp_timer+0x38>)
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d103      	bne.n	8011f04 <tcpip_tcp_timer+0x1c>
 8011efc:	4b09      	ldr	r3, [pc, #36]	; (8011f24 <tcpip_tcp_timer+0x3c>)
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d005      	beq.n	8011f10 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011f04:	2200      	movs	r2, #0
 8011f06:	4908      	ldr	r1, [pc, #32]	; (8011f28 <tcpip_tcp_timer+0x40>)
 8011f08:	20fa      	movs	r0, #250	; 0xfa
 8011f0a:	f000 f8f3 	bl	80120f4 <sys_timeout>
 8011f0e:	e003      	b.n	8011f18 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011f10:	4b06      	ldr	r3, [pc, #24]	; (8011f2c <tcpip_tcp_timer+0x44>)
 8011f12:	2200      	movs	r2, #0
 8011f14:	601a      	str	r2, [r3, #0]
  }
}
 8011f16:	bf00      	nop
 8011f18:	bf00      	nop
 8011f1a:	3708      	adds	r7, #8
 8011f1c:	46bd      	mov	sp, r7
 8011f1e:	bd80      	pop	{r7, pc}
 8011f20:	24003614 	.word	0x24003614
 8011f24:	24003624 	.word	0x24003624
 8011f28:	08011ee9 	.word	0x08011ee9
 8011f2c:	24000130 	.word	0x24000130

08011f30 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011f30:	b580      	push	{r7, lr}
 8011f32:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011f34:	4b0a      	ldr	r3, [pc, #40]	; (8011f60 <tcp_timer_needed+0x30>)
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d10f      	bne.n	8011f5c <tcp_timer_needed+0x2c>
 8011f3c:	4b09      	ldr	r3, [pc, #36]	; (8011f64 <tcp_timer_needed+0x34>)
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d103      	bne.n	8011f4c <tcp_timer_needed+0x1c>
 8011f44:	4b08      	ldr	r3, [pc, #32]	; (8011f68 <tcp_timer_needed+0x38>)
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d007      	beq.n	8011f5c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011f4c:	4b04      	ldr	r3, [pc, #16]	; (8011f60 <tcp_timer_needed+0x30>)
 8011f4e:	2201      	movs	r2, #1
 8011f50:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011f52:	2200      	movs	r2, #0
 8011f54:	4905      	ldr	r1, [pc, #20]	; (8011f6c <tcp_timer_needed+0x3c>)
 8011f56:	20fa      	movs	r0, #250	; 0xfa
 8011f58:	f000 f8cc 	bl	80120f4 <sys_timeout>
  }
}
 8011f5c:	bf00      	nop
 8011f5e:	bd80      	pop	{r7, pc}
 8011f60:	24000130 	.word	0x24000130
 8011f64:	24003614 	.word	0x24003614
 8011f68:	24003624 	.word	0x24003624
 8011f6c:	08011ee9 	.word	0x08011ee9

08011f70 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011f70:	b580      	push	{r7, lr}
 8011f72:	b086      	sub	sp, #24
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	60f8      	str	r0, [r7, #12]
 8011f78:	60b9      	str	r1, [r7, #8]
 8011f7a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011f7c:	2006      	movs	r0, #6
 8011f7e:	f7f8 fe03 	bl	800ab88 <memp_malloc>
 8011f82:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011f84:	693b      	ldr	r3, [r7, #16]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d109      	bne.n	8011f9e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011f8a:	693b      	ldr	r3, [r7, #16]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d151      	bne.n	8012034 <sys_timeout_abs+0xc4>
 8011f90:	4b2a      	ldr	r3, [pc, #168]	; (801203c <sys_timeout_abs+0xcc>)
 8011f92:	22be      	movs	r2, #190	; 0xbe
 8011f94:	492a      	ldr	r1, [pc, #168]	; (8012040 <sys_timeout_abs+0xd0>)
 8011f96:	482b      	ldr	r0, [pc, #172]	; (8012044 <sys_timeout_abs+0xd4>)
 8011f98:	f002 fe8e 	bl	8014cb8 <iprintf>
    return;
 8011f9c:	e04a      	b.n	8012034 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011f9e:	693b      	ldr	r3, [r7, #16]
 8011fa0:	2200      	movs	r2, #0
 8011fa2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011fa4:	693b      	ldr	r3, [r7, #16]
 8011fa6:	68ba      	ldr	r2, [r7, #8]
 8011fa8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011faa:	693b      	ldr	r3, [r7, #16]
 8011fac:	687a      	ldr	r2, [r7, #4]
 8011fae:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011fb0:	693b      	ldr	r3, [r7, #16]
 8011fb2:	68fa      	ldr	r2, [r7, #12]
 8011fb4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011fb6:	4b24      	ldr	r3, [pc, #144]	; (8012048 <sys_timeout_abs+0xd8>)
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d103      	bne.n	8011fc6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011fbe:	4a22      	ldr	r2, [pc, #136]	; (8012048 <sys_timeout_abs+0xd8>)
 8011fc0:	693b      	ldr	r3, [r7, #16]
 8011fc2:	6013      	str	r3, [r2, #0]
    return;
 8011fc4:	e037      	b.n	8012036 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011fc6:	693b      	ldr	r3, [r7, #16]
 8011fc8:	685a      	ldr	r2, [r3, #4]
 8011fca:	4b1f      	ldr	r3, [pc, #124]	; (8012048 <sys_timeout_abs+0xd8>)
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	685b      	ldr	r3, [r3, #4]
 8011fd0:	1ad3      	subs	r3, r2, r3
 8011fd2:	0fdb      	lsrs	r3, r3, #31
 8011fd4:	f003 0301 	and.w	r3, r3, #1
 8011fd8:	b2db      	uxtb	r3, r3
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d007      	beq.n	8011fee <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011fde:	4b1a      	ldr	r3, [pc, #104]	; (8012048 <sys_timeout_abs+0xd8>)
 8011fe0:	681a      	ldr	r2, [r3, #0]
 8011fe2:	693b      	ldr	r3, [r7, #16]
 8011fe4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011fe6:	4a18      	ldr	r2, [pc, #96]	; (8012048 <sys_timeout_abs+0xd8>)
 8011fe8:	693b      	ldr	r3, [r7, #16]
 8011fea:	6013      	str	r3, [r2, #0]
 8011fec:	e023      	b.n	8012036 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011fee:	4b16      	ldr	r3, [pc, #88]	; (8012048 <sys_timeout_abs+0xd8>)
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	617b      	str	r3, [r7, #20]
 8011ff4:	e01a      	b.n	801202c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011ff6:	697b      	ldr	r3, [r7, #20]
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d00b      	beq.n	8012016 <sys_timeout_abs+0xa6>
 8011ffe:	693b      	ldr	r3, [r7, #16]
 8012000:	685a      	ldr	r2, [r3, #4]
 8012002:	697b      	ldr	r3, [r7, #20]
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	685b      	ldr	r3, [r3, #4]
 8012008:	1ad3      	subs	r3, r2, r3
 801200a:	0fdb      	lsrs	r3, r3, #31
 801200c:	f003 0301 	and.w	r3, r3, #1
 8012010:	b2db      	uxtb	r3, r3
 8012012:	2b00      	cmp	r3, #0
 8012014:	d007      	beq.n	8012026 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012016:	697b      	ldr	r3, [r7, #20]
 8012018:	681a      	ldr	r2, [r3, #0]
 801201a:	693b      	ldr	r3, [r7, #16]
 801201c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801201e:	697b      	ldr	r3, [r7, #20]
 8012020:	693a      	ldr	r2, [r7, #16]
 8012022:	601a      	str	r2, [r3, #0]
        break;
 8012024:	e007      	b.n	8012036 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012026:	697b      	ldr	r3, [r7, #20]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	617b      	str	r3, [r7, #20]
 801202c:	697b      	ldr	r3, [r7, #20]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d1e1      	bne.n	8011ff6 <sys_timeout_abs+0x86>
 8012032:	e000      	b.n	8012036 <sys_timeout_abs+0xc6>
    return;
 8012034:	bf00      	nop
      }
    }
  }
}
 8012036:	3718      	adds	r7, #24
 8012038:	46bd      	mov	sp, r7
 801203a:	bd80      	pop	{r7, pc}
 801203c:	08017d00 	.word	0x08017d00
 8012040:	08017d34 	.word	0x08017d34
 8012044:	08017d74 	.word	0x08017d74
 8012048:	24000128 	.word	0x24000128

0801204c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b086      	sub	sp, #24
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012058:	697b      	ldr	r3, [r7, #20]
 801205a:	685b      	ldr	r3, [r3, #4]
 801205c:	4798      	blx	r3

  now = sys_now();
 801205e:	f7f7 ff89 	bl	8009f74 <sys_now>
 8012062:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012064:	697b      	ldr	r3, [r7, #20]
 8012066:	681a      	ldr	r2, [r3, #0]
 8012068:	4b0f      	ldr	r3, [pc, #60]	; (80120a8 <lwip_cyclic_timer+0x5c>)
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	4413      	add	r3, r2
 801206e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012070:	68fa      	ldr	r2, [r7, #12]
 8012072:	693b      	ldr	r3, [r7, #16]
 8012074:	1ad3      	subs	r3, r2, r3
 8012076:	0fdb      	lsrs	r3, r3, #31
 8012078:	f003 0301 	and.w	r3, r3, #1
 801207c:	b2db      	uxtb	r3, r3
 801207e:	2b00      	cmp	r3, #0
 8012080:	d009      	beq.n	8012096 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012082:	697b      	ldr	r3, [r7, #20]
 8012084:	681a      	ldr	r2, [r3, #0]
 8012086:	693b      	ldr	r3, [r7, #16]
 8012088:	4413      	add	r3, r2
 801208a:	687a      	ldr	r2, [r7, #4]
 801208c:	4907      	ldr	r1, [pc, #28]	; (80120ac <lwip_cyclic_timer+0x60>)
 801208e:	4618      	mov	r0, r3
 8012090:	f7ff ff6e 	bl	8011f70 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012094:	e004      	b.n	80120a0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012096:	687a      	ldr	r2, [r7, #4]
 8012098:	4904      	ldr	r1, [pc, #16]	; (80120ac <lwip_cyclic_timer+0x60>)
 801209a:	68f8      	ldr	r0, [r7, #12]
 801209c:	f7ff ff68 	bl	8011f70 <sys_timeout_abs>
}
 80120a0:	bf00      	nop
 80120a2:	3718      	adds	r7, #24
 80120a4:	46bd      	mov	sp, r7
 80120a6:	bd80      	pop	{r7, pc}
 80120a8:	2400012c 	.word	0x2400012c
 80120ac:	0801204d 	.word	0x0801204d

080120b0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b082      	sub	sp, #8
 80120b4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80120b6:	2301      	movs	r3, #1
 80120b8:	607b      	str	r3, [r7, #4]
 80120ba:	e00e      	b.n	80120da <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80120bc:	4a0b      	ldr	r2, [pc, #44]	; (80120ec <sys_timeouts_init+0x3c>)
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	00db      	lsls	r3, r3, #3
 80120c8:	4a08      	ldr	r2, [pc, #32]	; (80120ec <sys_timeouts_init+0x3c>)
 80120ca:	4413      	add	r3, r2
 80120cc:	461a      	mov	r2, r3
 80120ce:	4908      	ldr	r1, [pc, #32]	; (80120f0 <sys_timeouts_init+0x40>)
 80120d0:	f000 f810 	bl	80120f4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	3301      	adds	r3, #1
 80120d8:	607b      	str	r3, [r7, #4]
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	2b02      	cmp	r3, #2
 80120de:	d9ed      	bls.n	80120bc <sys_timeouts_init+0xc>
  }
}
 80120e0:	bf00      	nop
 80120e2:	bf00      	nop
 80120e4:	3708      	adds	r7, #8
 80120e6:	46bd      	mov	sp, r7
 80120e8:	bd80      	pop	{r7, pc}
 80120ea:	bf00      	nop
 80120ec:	080190fc 	.word	0x080190fc
 80120f0:	0801204d 	.word	0x0801204d

080120f4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80120f4:	b580      	push	{r7, lr}
 80120f6:	b086      	sub	sp, #24
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	60f8      	str	r0, [r7, #12]
 80120fc:	60b9      	str	r1, [r7, #8]
 80120fe:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012106:	d306      	bcc.n	8012116 <sys_timeout+0x22>
 8012108:	4b0a      	ldr	r3, [pc, #40]	; (8012134 <sys_timeout+0x40>)
 801210a:	f240 1229 	movw	r2, #297	; 0x129
 801210e:	490a      	ldr	r1, [pc, #40]	; (8012138 <sys_timeout+0x44>)
 8012110:	480a      	ldr	r0, [pc, #40]	; (801213c <sys_timeout+0x48>)
 8012112:	f002 fdd1 	bl	8014cb8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012116:	f7f7 ff2d 	bl	8009f74 <sys_now>
 801211a:	4602      	mov	r2, r0
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	4413      	add	r3, r2
 8012120:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012122:	687a      	ldr	r2, [r7, #4]
 8012124:	68b9      	ldr	r1, [r7, #8]
 8012126:	6978      	ldr	r0, [r7, #20]
 8012128:	f7ff ff22 	bl	8011f70 <sys_timeout_abs>
#endif
}
 801212c:	bf00      	nop
 801212e:	3718      	adds	r7, #24
 8012130:	46bd      	mov	sp, r7
 8012132:	bd80      	pop	{r7, pc}
 8012134:	08017d00 	.word	0x08017d00
 8012138:	08017d9c 	.word	0x08017d9c
 801213c:	08017d74 	.word	0x08017d74

08012140 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012140:	b580      	push	{r7, lr}
 8012142:	b084      	sub	sp, #16
 8012144:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012146:	f7f7 ff15 	bl	8009f74 <sys_now>
 801214a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 801214c:	4b1a      	ldr	r3, [pc, #104]	; (80121b8 <sys_check_timeouts+0x78>)
 801214e:	781b      	ldrb	r3, [r3, #0]
 8012150:	b2db      	uxtb	r3, r3
 8012152:	2b00      	cmp	r3, #0
 8012154:	d001      	beq.n	801215a <sys_check_timeouts+0x1a>
 8012156:	f7f9 f8c3 	bl	800b2e0 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 801215a:	4b18      	ldr	r3, [pc, #96]	; (80121bc <sys_check_timeouts+0x7c>)
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012160:	68bb      	ldr	r3, [r7, #8]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d022      	beq.n	80121ac <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012166:	68bb      	ldr	r3, [r7, #8]
 8012168:	685b      	ldr	r3, [r3, #4]
 801216a:	68fa      	ldr	r2, [r7, #12]
 801216c:	1ad3      	subs	r3, r2, r3
 801216e:	0fdb      	lsrs	r3, r3, #31
 8012170:	f003 0301 	and.w	r3, r3, #1
 8012174:	b2db      	uxtb	r3, r3
 8012176:	2b00      	cmp	r3, #0
 8012178:	d11a      	bne.n	80121b0 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801217a:	68bb      	ldr	r3, [r7, #8]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	4a0f      	ldr	r2, [pc, #60]	; (80121bc <sys_check_timeouts+0x7c>)
 8012180:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012182:	68bb      	ldr	r3, [r7, #8]
 8012184:	689b      	ldr	r3, [r3, #8]
 8012186:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012188:	68bb      	ldr	r3, [r7, #8]
 801218a:	68db      	ldr	r3, [r3, #12]
 801218c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801218e:	68bb      	ldr	r3, [r7, #8]
 8012190:	685b      	ldr	r3, [r3, #4]
 8012192:	4a0b      	ldr	r2, [pc, #44]	; (80121c0 <sys_check_timeouts+0x80>)
 8012194:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012196:	68b9      	ldr	r1, [r7, #8]
 8012198:	2006      	movs	r0, #6
 801219a:	f7f8 fd65 	bl	800ac68 <memp_free>
    if (handler != NULL) {
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d0d3      	beq.n	801214c <sys_check_timeouts+0xc>
      handler(arg);
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	6838      	ldr	r0, [r7, #0]
 80121a8:	4798      	blx	r3
  do {
 80121aa:	e7cf      	b.n	801214c <sys_check_timeouts+0xc>
      return;
 80121ac:	bf00      	nop
 80121ae:	e000      	b.n	80121b2 <sys_check_timeouts+0x72>
      return;
 80121b0:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80121b2:	3710      	adds	r7, #16
 80121b4:	46bd      	mov	sp, r7
 80121b6:	bd80      	pop	{r7, pc}
 80121b8:	2400360c 	.word	0x2400360c
 80121bc:	24000128 	.word	0x24000128
 80121c0:	2400012c 	.word	0x2400012c

080121c4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80121c4:	b580      	push	{r7, lr}
 80121c6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80121c8:	f002 fd8e 	bl	8014ce8 <rand>
 80121cc:	4603      	mov	r3, r0
 80121ce:	b29b      	uxth	r3, r3
 80121d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80121d4:	b29b      	uxth	r3, r3
 80121d6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80121da:	b29a      	uxth	r2, r3
 80121dc:	4b01      	ldr	r3, [pc, #4]	; (80121e4 <udp_init+0x20>)
 80121de:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80121e0:	bf00      	nop
 80121e2:	bd80      	pop	{r7, pc}
 80121e4:	24000034 	.word	0x24000034

080121e8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b084      	sub	sp, #16
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	60f8      	str	r0, [r7, #12]
 80121f0:	60b9      	str	r1, [r7, #8]
 80121f2:	4613      	mov	r3, r2
 80121f4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d105      	bne.n	8012208 <udp_input_local_match+0x20>
 80121fc:	4b27      	ldr	r3, [pc, #156]	; (801229c <udp_input_local_match+0xb4>)
 80121fe:	2287      	movs	r2, #135	; 0x87
 8012200:	4927      	ldr	r1, [pc, #156]	; (80122a0 <udp_input_local_match+0xb8>)
 8012202:	4828      	ldr	r0, [pc, #160]	; (80122a4 <udp_input_local_match+0xbc>)
 8012204:	f002 fd58 	bl	8014cb8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012208:	68bb      	ldr	r3, [r7, #8]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d105      	bne.n	801221a <udp_input_local_match+0x32>
 801220e:	4b23      	ldr	r3, [pc, #140]	; (801229c <udp_input_local_match+0xb4>)
 8012210:	2288      	movs	r2, #136	; 0x88
 8012212:	4925      	ldr	r1, [pc, #148]	; (80122a8 <udp_input_local_match+0xc0>)
 8012214:	4823      	ldr	r0, [pc, #140]	; (80122a4 <udp_input_local_match+0xbc>)
 8012216:	f002 fd4f 	bl	8014cb8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	7a1b      	ldrb	r3, [r3, #8]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d00b      	beq.n	801223a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	7a1a      	ldrb	r2, [r3, #8]
 8012226:	4b21      	ldr	r3, [pc, #132]	; (80122ac <udp_input_local_match+0xc4>)
 8012228:	685b      	ldr	r3, [r3, #4]
 801222a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801222e:	3301      	adds	r3, #1
 8012230:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012232:	429a      	cmp	r2, r3
 8012234:	d001      	beq.n	801223a <udp_input_local_match+0x52>
    return 0;
 8012236:	2300      	movs	r3, #0
 8012238:	e02b      	b.n	8012292 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801223a:	79fb      	ldrb	r3, [r7, #7]
 801223c:	2b00      	cmp	r3, #0
 801223e:	d018      	beq.n	8012272 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d013      	beq.n	801226e <udp_input_local_match+0x86>
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d00f      	beq.n	801226e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801224e:	4b17      	ldr	r3, [pc, #92]	; (80122ac <udp_input_local_match+0xc4>)
 8012250:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012256:	d00a      	beq.n	801226e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	681a      	ldr	r2, [r3, #0]
 801225c:	4b13      	ldr	r3, [pc, #76]	; (80122ac <udp_input_local_match+0xc4>)
 801225e:	695b      	ldr	r3, [r3, #20]
 8012260:	405a      	eors	r2, r3
 8012262:	68bb      	ldr	r3, [r7, #8]
 8012264:	3308      	adds	r3, #8
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801226a:	2b00      	cmp	r3, #0
 801226c:	d110      	bne.n	8012290 <udp_input_local_match+0xa8>
          return 1;
 801226e:	2301      	movs	r3, #1
 8012270:	e00f      	b.n	8012292 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d009      	beq.n	801228c <udp_input_local_match+0xa4>
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d005      	beq.n	801228c <udp_input_local_match+0xa4>
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	681a      	ldr	r2, [r3, #0]
 8012284:	4b09      	ldr	r3, [pc, #36]	; (80122ac <udp_input_local_match+0xc4>)
 8012286:	695b      	ldr	r3, [r3, #20]
 8012288:	429a      	cmp	r2, r3
 801228a:	d101      	bne.n	8012290 <udp_input_local_match+0xa8>
        return 1;
 801228c:	2301      	movs	r3, #1
 801228e:	e000      	b.n	8012292 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012290:	2300      	movs	r3, #0
}
 8012292:	4618      	mov	r0, r3
 8012294:	3710      	adds	r7, #16
 8012296:	46bd      	mov	sp, r7
 8012298:	bd80      	pop	{r7, pc}
 801229a:	bf00      	nop
 801229c:	08017de8 	.word	0x08017de8
 80122a0:	08017e18 	.word	0x08017e18
 80122a4:	08017e3c 	.word	0x08017e3c
 80122a8:	08017e64 	.word	0x08017e64
 80122ac:	24000724 	.word	0x24000724

080122b0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80122b0:	b590      	push	{r4, r7, lr}
 80122b2:	b08d      	sub	sp, #52	; 0x34
 80122b4:	af02      	add	r7, sp, #8
 80122b6:	6078      	str	r0, [r7, #4]
 80122b8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80122ba:	2300      	movs	r3, #0
 80122bc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d105      	bne.n	80122d0 <udp_input+0x20>
 80122c4:	4b7c      	ldr	r3, [pc, #496]	; (80124b8 <udp_input+0x208>)
 80122c6:	22cf      	movs	r2, #207	; 0xcf
 80122c8:	497c      	ldr	r1, [pc, #496]	; (80124bc <udp_input+0x20c>)
 80122ca:	487d      	ldr	r0, [pc, #500]	; (80124c0 <udp_input+0x210>)
 80122cc:	f002 fcf4 	bl	8014cb8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80122d0:	683b      	ldr	r3, [r7, #0]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d105      	bne.n	80122e2 <udp_input+0x32>
 80122d6:	4b78      	ldr	r3, [pc, #480]	; (80124b8 <udp_input+0x208>)
 80122d8:	22d0      	movs	r2, #208	; 0xd0
 80122da:	497a      	ldr	r1, [pc, #488]	; (80124c4 <udp_input+0x214>)
 80122dc:	4878      	ldr	r0, [pc, #480]	; (80124c0 <udp_input+0x210>)
 80122de:	f002 fceb 	bl	8014cb8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	895b      	ldrh	r3, [r3, #10]
 80122e6:	2b07      	cmp	r3, #7
 80122e8:	d803      	bhi.n	80122f2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80122ea:	6878      	ldr	r0, [r7, #4]
 80122ec:	f7f9 fb32 	bl	800b954 <pbuf_free>
    goto end;
 80122f0:	e0de      	b.n	80124b0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	685b      	ldr	r3, [r3, #4]
 80122f6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80122f8:	4b73      	ldr	r3, [pc, #460]	; (80124c8 <udp_input+0x218>)
 80122fa:	695b      	ldr	r3, [r3, #20]
 80122fc:	4a72      	ldr	r2, [pc, #456]	; (80124c8 <udp_input+0x218>)
 80122fe:	6812      	ldr	r2, [r2, #0]
 8012300:	4611      	mov	r1, r2
 8012302:	4618      	mov	r0, r3
 8012304:	f001 fcae 	bl	8013c64 <ip4_addr_isbroadcast_u32>
 8012308:	4603      	mov	r3, r0
 801230a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801230c:	697b      	ldr	r3, [r7, #20]
 801230e:	881b      	ldrh	r3, [r3, #0]
 8012310:	b29b      	uxth	r3, r3
 8012312:	4618      	mov	r0, r3
 8012314:	f7f7 ff08 	bl	800a128 <lwip_htons>
 8012318:	4603      	mov	r3, r0
 801231a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801231c:	697b      	ldr	r3, [r7, #20]
 801231e:	885b      	ldrh	r3, [r3, #2]
 8012320:	b29b      	uxth	r3, r3
 8012322:	4618      	mov	r0, r3
 8012324:	f7f7 ff00 	bl	800a128 <lwip_htons>
 8012328:	4603      	mov	r3, r0
 801232a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801232c:	2300      	movs	r3, #0
 801232e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012330:	2300      	movs	r3, #0
 8012332:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012334:	2300      	movs	r3, #0
 8012336:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012338:	4b64      	ldr	r3, [pc, #400]	; (80124cc <udp_input+0x21c>)
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	627b      	str	r3, [r7, #36]	; 0x24
 801233e:	e054      	b.n	80123ea <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012342:	8a5b      	ldrh	r3, [r3, #18]
 8012344:	89fa      	ldrh	r2, [r7, #14]
 8012346:	429a      	cmp	r2, r3
 8012348:	d14a      	bne.n	80123e0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801234a:	7cfb      	ldrb	r3, [r7, #19]
 801234c:	461a      	mov	r2, r3
 801234e:	6839      	ldr	r1, [r7, #0]
 8012350:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012352:	f7ff ff49 	bl	80121e8 <udp_input_local_match>
 8012356:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012358:	2b00      	cmp	r3, #0
 801235a:	d041      	beq.n	80123e0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801235e:	7c1b      	ldrb	r3, [r3, #16]
 8012360:	f003 0304 	and.w	r3, r3, #4
 8012364:	2b00      	cmp	r3, #0
 8012366:	d11d      	bne.n	80123a4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8012368:	69fb      	ldr	r3, [r7, #28]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d102      	bne.n	8012374 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012370:	61fb      	str	r3, [r7, #28]
 8012372:	e017      	b.n	80123a4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012374:	7cfb      	ldrb	r3, [r7, #19]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d014      	beq.n	80123a4 <udp_input+0xf4>
 801237a:	4b53      	ldr	r3, [pc, #332]	; (80124c8 <udp_input+0x218>)
 801237c:	695b      	ldr	r3, [r3, #20]
 801237e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012382:	d10f      	bne.n	80123a4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012384:	69fb      	ldr	r3, [r7, #28]
 8012386:	681a      	ldr	r2, [r3, #0]
 8012388:	683b      	ldr	r3, [r7, #0]
 801238a:	3304      	adds	r3, #4
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	429a      	cmp	r2, r3
 8012390:	d008      	beq.n	80123a4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012394:	681a      	ldr	r2, [r3, #0]
 8012396:	683b      	ldr	r3, [r7, #0]
 8012398:	3304      	adds	r3, #4
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	429a      	cmp	r2, r3
 801239e:	d101      	bne.n	80123a4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80123a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123a2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80123a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123a6:	8a9b      	ldrh	r3, [r3, #20]
 80123a8:	8a3a      	ldrh	r2, [r7, #16]
 80123aa:	429a      	cmp	r2, r3
 80123ac:	d118      	bne.n	80123e0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80123ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123b0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d005      	beq.n	80123c2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80123b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123b8:	685a      	ldr	r2, [r3, #4]
 80123ba:	4b43      	ldr	r3, [pc, #268]	; (80124c8 <udp_input+0x218>)
 80123bc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80123be:	429a      	cmp	r2, r3
 80123c0:	d10e      	bne.n	80123e0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80123c2:	6a3b      	ldr	r3, [r7, #32]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d014      	beq.n	80123f2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80123c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ca:	68da      	ldr	r2, [r3, #12]
 80123cc:	6a3b      	ldr	r3, [r7, #32]
 80123ce:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80123d0:	4b3e      	ldr	r3, [pc, #248]	; (80124cc <udp_input+0x21c>)
 80123d2:	681a      	ldr	r2, [r3, #0]
 80123d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123d6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80123d8:	4a3c      	ldr	r2, [pc, #240]	; (80124cc <udp_input+0x21c>)
 80123da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123dc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80123de:	e008      	b.n	80123f2 <udp_input+0x142>
      }
    }

    prev = pcb;
 80123e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123e2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80123e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123e6:	68db      	ldr	r3, [r3, #12]
 80123e8:	627b      	str	r3, [r7, #36]	; 0x24
 80123ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d1a7      	bne.n	8012340 <udp_input+0x90>
 80123f0:	e000      	b.n	80123f4 <udp_input+0x144>
        break;
 80123f2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80123f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d101      	bne.n	80123fe <udp_input+0x14e>
    pcb = uncon_pcb;
 80123fa:	69fb      	ldr	r3, [r7, #28]
 80123fc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80123fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012400:	2b00      	cmp	r3, #0
 8012402:	d002      	beq.n	801240a <udp_input+0x15a>
    for_us = 1;
 8012404:	2301      	movs	r3, #1
 8012406:	76fb      	strb	r3, [r7, #27]
 8012408:	e00a      	b.n	8012420 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801240a:	683b      	ldr	r3, [r7, #0]
 801240c:	3304      	adds	r3, #4
 801240e:	681a      	ldr	r2, [r3, #0]
 8012410:	4b2d      	ldr	r3, [pc, #180]	; (80124c8 <udp_input+0x218>)
 8012412:	695b      	ldr	r3, [r3, #20]
 8012414:	429a      	cmp	r2, r3
 8012416:	bf0c      	ite	eq
 8012418:	2301      	moveq	r3, #1
 801241a:	2300      	movne	r3, #0
 801241c:	b2db      	uxtb	r3, r3
 801241e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012420:	7efb      	ldrb	r3, [r7, #27]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d041      	beq.n	80124aa <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012426:	2108      	movs	r1, #8
 8012428:	6878      	ldr	r0, [r7, #4]
 801242a:	f7f9 fa0d 	bl	800b848 <pbuf_remove_header>
 801242e:	4603      	mov	r3, r0
 8012430:	2b00      	cmp	r3, #0
 8012432:	d00a      	beq.n	801244a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012434:	4b20      	ldr	r3, [pc, #128]	; (80124b8 <udp_input+0x208>)
 8012436:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801243a:	4925      	ldr	r1, [pc, #148]	; (80124d0 <udp_input+0x220>)
 801243c:	4820      	ldr	r0, [pc, #128]	; (80124c0 <udp_input+0x210>)
 801243e:	f002 fc3b 	bl	8014cb8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012442:	6878      	ldr	r0, [r7, #4]
 8012444:	f7f9 fa86 	bl	800b954 <pbuf_free>
      goto end;
 8012448:	e032      	b.n	80124b0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801244c:	2b00      	cmp	r3, #0
 801244e:	d012      	beq.n	8012476 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012452:	699b      	ldr	r3, [r3, #24]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d00a      	beq.n	801246e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801245a:	699c      	ldr	r4, [r3, #24]
 801245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801245e:	69d8      	ldr	r0, [r3, #28]
 8012460:	8a3b      	ldrh	r3, [r7, #16]
 8012462:	9300      	str	r3, [sp, #0]
 8012464:	4b1b      	ldr	r3, [pc, #108]	; (80124d4 <udp_input+0x224>)
 8012466:	687a      	ldr	r2, [r7, #4]
 8012468:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801246a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801246c:	e021      	b.n	80124b2 <udp_input+0x202>
        pbuf_free(p);
 801246e:	6878      	ldr	r0, [r7, #4]
 8012470:	f7f9 fa70 	bl	800b954 <pbuf_free>
        goto end;
 8012474:	e01c      	b.n	80124b0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012476:	7cfb      	ldrb	r3, [r7, #19]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d112      	bne.n	80124a2 <udp_input+0x1f2>
 801247c:	4b12      	ldr	r3, [pc, #72]	; (80124c8 <udp_input+0x218>)
 801247e:	695b      	ldr	r3, [r3, #20]
 8012480:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012484:	2be0      	cmp	r3, #224	; 0xe0
 8012486:	d00c      	beq.n	80124a2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012488:	4b0f      	ldr	r3, [pc, #60]	; (80124c8 <udp_input+0x218>)
 801248a:	899b      	ldrh	r3, [r3, #12]
 801248c:	3308      	adds	r3, #8
 801248e:	b29b      	uxth	r3, r3
 8012490:	b21b      	sxth	r3, r3
 8012492:	4619      	mov	r1, r3
 8012494:	6878      	ldr	r0, [r7, #4]
 8012496:	f7f9 fa4a 	bl	800b92e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801249a:	2103      	movs	r1, #3
 801249c:	6878      	ldr	r0, [r7, #4]
 801249e:	f001 f8b7 	bl	8013610 <icmp_dest_unreach>
      pbuf_free(p);
 80124a2:	6878      	ldr	r0, [r7, #4]
 80124a4:	f7f9 fa56 	bl	800b954 <pbuf_free>
  return;
 80124a8:	e003      	b.n	80124b2 <udp_input+0x202>
    pbuf_free(p);
 80124aa:	6878      	ldr	r0, [r7, #4]
 80124ac:	f7f9 fa52 	bl	800b954 <pbuf_free>
  return;
 80124b0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80124b2:	372c      	adds	r7, #44	; 0x2c
 80124b4:	46bd      	mov	sp, r7
 80124b6:	bd90      	pop	{r4, r7, pc}
 80124b8:	08017de8 	.word	0x08017de8
 80124bc:	08017e8c 	.word	0x08017e8c
 80124c0:	08017e3c 	.word	0x08017e3c
 80124c4:	08017ea4 	.word	0x08017ea4
 80124c8:	24000724 	.word	0x24000724
 80124cc:	2400362c 	.word	0x2400362c
 80124d0:	08017ec0 	.word	0x08017ec0
 80124d4:	24000734 	.word	0x24000734

080124d8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80124d8:	b480      	push	{r7}
 80124da:	b085      	sub	sp, #20
 80124dc:	af00      	add	r7, sp, #0
 80124de:	6078      	str	r0, [r7, #4]
 80124e0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d01e      	beq.n	8012526 <udp_netif_ip_addr_changed+0x4e>
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d01a      	beq.n	8012526 <udp_netif_ip_addr_changed+0x4e>
 80124f0:	683b      	ldr	r3, [r7, #0]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d017      	beq.n	8012526 <udp_netif_ip_addr_changed+0x4e>
 80124f6:	683b      	ldr	r3, [r7, #0]
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d013      	beq.n	8012526 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80124fe:	4b0d      	ldr	r3, [pc, #52]	; (8012534 <udp_netif_ip_addr_changed+0x5c>)
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	60fb      	str	r3, [r7, #12]
 8012504:	e00c      	b.n	8012520 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	681a      	ldr	r2, [r3, #0]
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	429a      	cmp	r2, r3
 8012510:	d103      	bne.n	801251a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012512:	683b      	ldr	r3, [r7, #0]
 8012514:	681a      	ldr	r2, [r3, #0]
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	68db      	ldr	r3, [r3, #12]
 801251e:	60fb      	str	r3, [r7, #12]
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	2b00      	cmp	r3, #0
 8012524:	d1ef      	bne.n	8012506 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012526:	bf00      	nop
 8012528:	3714      	adds	r7, #20
 801252a:	46bd      	mov	sp, r7
 801252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012530:	4770      	bx	lr
 8012532:	bf00      	nop
 8012534:	2400362c 	.word	0x2400362c

08012538 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8012538:	b580      	push	{r7, lr}
 801253a:	b082      	sub	sp, #8
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8012540:	4915      	ldr	r1, [pc, #84]	; (8012598 <etharp_free_entry+0x60>)
 8012542:	687a      	ldr	r2, [r7, #4]
 8012544:	4613      	mov	r3, r2
 8012546:	005b      	lsls	r3, r3, #1
 8012548:	4413      	add	r3, r2
 801254a:	00db      	lsls	r3, r3, #3
 801254c:	440b      	add	r3, r1
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d013      	beq.n	801257c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012554:	4910      	ldr	r1, [pc, #64]	; (8012598 <etharp_free_entry+0x60>)
 8012556:	687a      	ldr	r2, [r7, #4]
 8012558:	4613      	mov	r3, r2
 801255a:	005b      	lsls	r3, r3, #1
 801255c:	4413      	add	r3, r2
 801255e:	00db      	lsls	r3, r3, #3
 8012560:	440b      	add	r3, r1
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	4618      	mov	r0, r3
 8012566:	f7f9 f9f5 	bl	800b954 <pbuf_free>
    arp_table[i].q = NULL;
 801256a:	490b      	ldr	r1, [pc, #44]	; (8012598 <etharp_free_entry+0x60>)
 801256c:	687a      	ldr	r2, [r7, #4]
 801256e:	4613      	mov	r3, r2
 8012570:	005b      	lsls	r3, r3, #1
 8012572:	4413      	add	r3, r2
 8012574:	00db      	lsls	r3, r3, #3
 8012576:	440b      	add	r3, r1
 8012578:	2200      	movs	r2, #0
 801257a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801257c:	4906      	ldr	r1, [pc, #24]	; (8012598 <etharp_free_entry+0x60>)
 801257e:	687a      	ldr	r2, [r7, #4]
 8012580:	4613      	mov	r3, r2
 8012582:	005b      	lsls	r3, r3, #1
 8012584:	4413      	add	r3, r2
 8012586:	00db      	lsls	r3, r3, #3
 8012588:	440b      	add	r3, r1
 801258a:	3314      	adds	r3, #20
 801258c:	2200      	movs	r2, #0
 801258e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8012590:	bf00      	nop
 8012592:	3708      	adds	r7, #8
 8012594:	46bd      	mov	sp, r7
 8012596:	bd80      	pop	{r7, pc}
 8012598:	24000134 	.word	0x24000134

0801259c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801259c:	b580      	push	{r7, lr}
 801259e:	b082      	sub	sp, #8
 80125a0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80125a2:	2300      	movs	r3, #0
 80125a4:	607b      	str	r3, [r7, #4]
 80125a6:	e096      	b.n	80126d6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80125a8:	494f      	ldr	r1, [pc, #316]	; (80126e8 <etharp_tmr+0x14c>)
 80125aa:	687a      	ldr	r2, [r7, #4]
 80125ac:	4613      	mov	r3, r2
 80125ae:	005b      	lsls	r3, r3, #1
 80125b0:	4413      	add	r3, r2
 80125b2:	00db      	lsls	r3, r3, #3
 80125b4:	440b      	add	r3, r1
 80125b6:	3314      	adds	r3, #20
 80125b8:	781b      	ldrb	r3, [r3, #0]
 80125ba:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80125bc:	78fb      	ldrb	r3, [r7, #3]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	f000 8086 	beq.w	80126d0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80125c4:	4948      	ldr	r1, [pc, #288]	; (80126e8 <etharp_tmr+0x14c>)
 80125c6:	687a      	ldr	r2, [r7, #4]
 80125c8:	4613      	mov	r3, r2
 80125ca:	005b      	lsls	r3, r3, #1
 80125cc:	4413      	add	r3, r2
 80125ce:	00db      	lsls	r3, r3, #3
 80125d0:	440b      	add	r3, r1
 80125d2:	3312      	adds	r3, #18
 80125d4:	881b      	ldrh	r3, [r3, #0]
 80125d6:	3301      	adds	r3, #1
 80125d8:	b298      	uxth	r0, r3
 80125da:	4943      	ldr	r1, [pc, #268]	; (80126e8 <etharp_tmr+0x14c>)
 80125dc:	687a      	ldr	r2, [r7, #4]
 80125de:	4613      	mov	r3, r2
 80125e0:	005b      	lsls	r3, r3, #1
 80125e2:	4413      	add	r3, r2
 80125e4:	00db      	lsls	r3, r3, #3
 80125e6:	440b      	add	r3, r1
 80125e8:	3312      	adds	r3, #18
 80125ea:	4602      	mov	r2, r0
 80125ec:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80125ee:	493e      	ldr	r1, [pc, #248]	; (80126e8 <etharp_tmr+0x14c>)
 80125f0:	687a      	ldr	r2, [r7, #4]
 80125f2:	4613      	mov	r3, r2
 80125f4:	005b      	lsls	r3, r3, #1
 80125f6:	4413      	add	r3, r2
 80125f8:	00db      	lsls	r3, r3, #3
 80125fa:	440b      	add	r3, r1
 80125fc:	3312      	adds	r3, #18
 80125fe:	881b      	ldrh	r3, [r3, #0]
 8012600:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8012604:	d215      	bcs.n	8012632 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012606:	4938      	ldr	r1, [pc, #224]	; (80126e8 <etharp_tmr+0x14c>)
 8012608:	687a      	ldr	r2, [r7, #4]
 801260a:	4613      	mov	r3, r2
 801260c:	005b      	lsls	r3, r3, #1
 801260e:	4413      	add	r3, r2
 8012610:	00db      	lsls	r3, r3, #3
 8012612:	440b      	add	r3, r1
 8012614:	3314      	adds	r3, #20
 8012616:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012618:	2b01      	cmp	r3, #1
 801261a:	d10e      	bne.n	801263a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801261c:	4932      	ldr	r1, [pc, #200]	; (80126e8 <etharp_tmr+0x14c>)
 801261e:	687a      	ldr	r2, [r7, #4]
 8012620:	4613      	mov	r3, r2
 8012622:	005b      	lsls	r3, r3, #1
 8012624:	4413      	add	r3, r2
 8012626:	00db      	lsls	r3, r3, #3
 8012628:	440b      	add	r3, r1
 801262a:	3312      	adds	r3, #18
 801262c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801262e:	2b04      	cmp	r3, #4
 8012630:	d903      	bls.n	801263a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012632:	6878      	ldr	r0, [r7, #4]
 8012634:	f7ff ff80 	bl	8012538 <etharp_free_entry>
 8012638:	e04a      	b.n	80126d0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801263a:	492b      	ldr	r1, [pc, #172]	; (80126e8 <etharp_tmr+0x14c>)
 801263c:	687a      	ldr	r2, [r7, #4]
 801263e:	4613      	mov	r3, r2
 8012640:	005b      	lsls	r3, r3, #1
 8012642:	4413      	add	r3, r2
 8012644:	00db      	lsls	r3, r3, #3
 8012646:	440b      	add	r3, r1
 8012648:	3314      	adds	r3, #20
 801264a:	781b      	ldrb	r3, [r3, #0]
 801264c:	2b03      	cmp	r3, #3
 801264e:	d10a      	bne.n	8012666 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012650:	4925      	ldr	r1, [pc, #148]	; (80126e8 <etharp_tmr+0x14c>)
 8012652:	687a      	ldr	r2, [r7, #4]
 8012654:	4613      	mov	r3, r2
 8012656:	005b      	lsls	r3, r3, #1
 8012658:	4413      	add	r3, r2
 801265a:	00db      	lsls	r3, r3, #3
 801265c:	440b      	add	r3, r1
 801265e:	3314      	adds	r3, #20
 8012660:	2204      	movs	r2, #4
 8012662:	701a      	strb	r2, [r3, #0]
 8012664:	e034      	b.n	80126d0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8012666:	4920      	ldr	r1, [pc, #128]	; (80126e8 <etharp_tmr+0x14c>)
 8012668:	687a      	ldr	r2, [r7, #4]
 801266a:	4613      	mov	r3, r2
 801266c:	005b      	lsls	r3, r3, #1
 801266e:	4413      	add	r3, r2
 8012670:	00db      	lsls	r3, r3, #3
 8012672:	440b      	add	r3, r1
 8012674:	3314      	adds	r3, #20
 8012676:	781b      	ldrb	r3, [r3, #0]
 8012678:	2b04      	cmp	r3, #4
 801267a:	d10a      	bne.n	8012692 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801267c:	491a      	ldr	r1, [pc, #104]	; (80126e8 <etharp_tmr+0x14c>)
 801267e:	687a      	ldr	r2, [r7, #4]
 8012680:	4613      	mov	r3, r2
 8012682:	005b      	lsls	r3, r3, #1
 8012684:	4413      	add	r3, r2
 8012686:	00db      	lsls	r3, r3, #3
 8012688:	440b      	add	r3, r1
 801268a:	3314      	adds	r3, #20
 801268c:	2202      	movs	r2, #2
 801268e:	701a      	strb	r2, [r3, #0]
 8012690:	e01e      	b.n	80126d0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012692:	4915      	ldr	r1, [pc, #84]	; (80126e8 <etharp_tmr+0x14c>)
 8012694:	687a      	ldr	r2, [r7, #4]
 8012696:	4613      	mov	r3, r2
 8012698:	005b      	lsls	r3, r3, #1
 801269a:	4413      	add	r3, r2
 801269c:	00db      	lsls	r3, r3, #3
 801269e:	440b      	add	r3, r1
 80126a0:	3314      	adds	r3, #20
 80126a2:	781b      	ldrb	r3, [r3, #0]
 80126a4:	2b01      	cmp	r3, #1
 80126a6:	d113      	bne.n	80126d0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80126a8:	490f      	ldr	r1, [pc, #60]	; (80126e8 <etharp_tmr+0x14c>)
 80126aa:	687a      	ldr	r2, [r7, #4]
 80126ac:	4613      	mov	r3, r2
 80126ae:	005b      	lsls	r3, r3, #1
 80126b0:	4413      	add	r3, r2
 80126b2:	00db      	lsls	r3, r3, #3
 80126b4:	440b      	add	r3, r1
 80126b6:	3308      	adds	r3, #8
 80126b8:	6818      	ldr	r0, [r3, #0]
 80126ba:	687a      	ldr	r2, [r7, #4]
 80126bc:	4613      	mov	r3, r2
 80126be:	005b      	lsls	r3, r3, #1
 80126c0:	4413      	add	r3, r2
 80126c2:	00db      	lsls	r3, r3, #3
 80126c4:	4a08      	ldr	r2, [pc, #32]	; (80126e8 <etharp_tmr+0x14c>)
 80126c6:	4413      	add	r3, r2
 80126c8:	3304      	adds	r3, #4
 80126ca:	4619      	mov	r1, r3
 80126cc:	f000 fe6e 	bl	80133ac <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	3301      	adds	r3, #1
 80126d4:	607b      	str	r3, [r7, #4]
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	2b09      	cmp	r3, #9
 80126da:	f77f af65 	ble.w	80125a8 <etharp_tmr+0xc>
      }
    }
  }
}
 80126de:	bf00      	nop
 80126e0:	bf00      	nop
 80126e2:	3708      	adds	r7, #8
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}
 80126e8:	24000134 	.word	0x24000134

080126ec <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b08a      	sub	sp, #40	; 0x28
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	60f8      	str	r0, [r7, #12]
 80126f4:	460b      	mov	r3, r1
 80126f6:	607a      	str	r2, [r7, #4]
 80126f8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80126fa:	230a      	movs	r3, #10
 80126fc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80126fe:	230a      	movs	r3, #10
 8012700:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8012702:	230a      	movs	r3, #10
 8012704:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8012706:	2300      	movs	r3, #0
 8012708:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801270a:	230a      	movs	r3, #10
 801270c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801270e:	2300      	movs	r3, #0
 8012710:	83bb      	strh	r3, [r7, #28]
 8012712:	2300      	movs	r3, #0
 8012714:	837b      	strh	r3, [r7, #26]
 8012716:	2300      	movs	r3, #0
 8012718:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801271a:	2300      	movs	r3, #0
 801271c:	843b      	strh	r3, [r7, #32]
 801271e:	e0ae      	b.n	801287e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012720:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012724:	49a6      	ldr	r1, [pc, #664]	; (80129c0 <etharp_find_entry+0x2d4>)
 8012726:	4613      	mov	r3, r2
 8012728:	005b      	lsls	r3, r3, #1
 801272a:	4413      	add	r3, r2
 801272c:	00db      	lsls	r3, r3, #3
 801272e:	440b      	add	r3, r1
 8012730:	3314      	adds	r3, #20
 8012732:	781b      	ldrb	r3, [r3, #0]
 8012734:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012736:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801273a:	2b0a      	cmp	r3, #10
 801273c:	d105      	bne.n	801274a <etharp_find_entry+0x5e>
 801273e:	7dfb      	ldrb	r3, [r7, #23]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d102      	bne.n	801274a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012744:	8c3b      	ldrh	r3, [r7, #32]
 8012746:	847b      	strh	r3, [r7, #34]	; 0x22
 8012748:	e095      	b.n	8012876 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801274a:	7dfb      	ldrb	r3, [r7, #23]
 801274c:	2b00      	cmp	r3, #0
 801274e:	f000 8092 	beq.w	8012876 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8012752:	7dfb      	ldrb	r3, [r7, #23]
 8012754:	2b01      	cmp	r3, #1
 8012756:	d009      	beq.n	801276c <etharp_find_entry+0x80>
 8012758:	7dfb      	ldrb	r3, [r7, #23]
 801275a:	2b01      	cmp	r3, #1
 801275c:	d806      	bhi.n	801276c <etharp_find_entry+0x80>
 801275e:	4b99      	ldr	r3, [pc, #612]	; (80129c4 <etharp_find_entry+0x2d8>)
 8012760:	f240 1223 	movw	r2, #291	; 0x123
 8012764:	4998      	ldr	r1, [pc, #608]	; (80129c8 <etharp_find_entry+0x2dc>)
 8012766:	4899      	ldr	r0, [pc, #612]	; (80129cc <etharp_find_entry+0x2e0>)
 8012768:	f002 faa6 	bl	8014cb8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d020      	beq.n	80127b4 <etharp_find_entry+0xc8>
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	6819      	ldr	r1, [r3, #0]
 8012776:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801277a:	4891      	ldr	r0, [pc, #580]	; (80129c0 <etharp_find_entry+0x2d4>)
 801277c:	4613      	mov	r3, r2
 801277e:	005b      	lsls	r3, r3, #1
 8012780:	4413      	add	r3, r2
 8012782:	00db      	lsls	r3, r3, #3
 8012784:	4403      	add	r3, r0
 8012786:	3304      	adds	r3, #4
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	4299      	cmp	r1, r3
 801278c:	d112      	bne.n	80127b4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d00c      	beq.n	80127ae <etharp_find_entry+0xc2>
 8012794:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012798:	4989      	ldr	r1, [pc, #548]	; (80129c0 <etharp_find_entry+0x2d4>)
 801279a:	4613      	mov	r3, r2
 801279c:	005b      	lsls	r3, r3, #1
 801279e:	4413      	add	r3, r2
 80127a0:	00db      	lsls	r3, r3, #3
 80127a2:	440b      	add	r3, r1
 80127a4:	3308      	adds	r3, #8
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	687a      	ldr	r2, [r7, #4]
 80127aa:	429a      	cmp	r2, r3
 80127ac:	d102      	bne.n	80127b4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80127ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80127b2:	e100      	b.n	80129b6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80127b4:	7dfb      	ldrb	r3, [r7, #23]
 80127b6:	2b01      	cmp	r3, #1
 80127b8:	d140      	bne.n	801283c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80127ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80127be:	4980      	ldr	r1, [pc, #512]	; (80129c0 <etharp_find_entry+0x2d4>)
 80127c0:	4613      	mov	r3, r2
 80127c2:	005b      	lsls	r3, r3, #1
 80127c4:	4413      	add	r3, r2
 80127c6:	00db      	lsls	r3, r3, #3
 80127c8:	440b      	add	r3, r1
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d01a      	beq.n	8012806 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80127d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80127d4:	497a      	ldr	r1, [pc, #488]	; (80129c0 <etharp_find_entry+0x2d4>)
 80127d6:	4613      	mov	r3, r2
 80127d8:	005b      	lsls	r3, r3, #1
 80127da:	4413      	add	r3, r2
 80127dc:	00db      	lsls	r3, r3, #3
 80127de:	440b      	add	r3, r1
 80127e0:	3312      	adds	r3, #18
 80127e2:	881b      	ldrh	r3, [r3, #0]
 80127e4:	8bba      	ldrh	r2, [r7, #28]
 80127e6:	429a      	cmp	r2, r3
 80127e8:	d845      	bhi.n	8012876 <etharp_find_entry+0x18a>
            old_queue = i;
 80127ea:	8c3b      	ldrh	r3, [r7, #32]
 80127ec:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80127ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80127f2:	4973      	ldr	r1, [pc, #460]	; (80129c0 <etharp_find_entry+0x2d4>)
 80127f4:	4613      	mov	r3, r2
 80127f6:	005b      	lsls	r3, r3, #1
 80127f8:	4413      	add	r3, r2
 80127fa:	00db      	lsls	r3, r3, #3
 80127fc:	440b      	add	r3, r1
 80127fe:	3312      	adds	r3, #18
 8012800:	881b      	ldrh	r3, [r3, #0]
 8012802:	83bb      	strh	r3, [r7, #28]
 8012804:	e037      	b.n	8012876 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8012806:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801280a:	496d      	ldr	r1, [pc, #436]	; (80129c0 <etharp_find_entry+0x2d4>)
 801280c:	4613      	mov	r3, r2
 801280e:	005b      	lsls	r3, r3, #1
 8012810:	4413      	add	r3, r2
 8012812:	00db      	lsls	r3, r3, #3
 8012814:	440b      	add	r3, r1
 8012816:	3312      	adds	r3, #18
 8012818:	881b      	ldrh	r3, [r3, #0]
 801281a:	8b7a      	ldrh	r2, [r7, #26]
 801281c:	429a      	cmp	r2, r3
 801281e:	d82a      	bhi.n	8012876 <etharp_find_entry+0x18a>
            old_pending = i;
 8012820:	8c3b      	ldrh	r3, [r7, #32]
 8012822:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8012824:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012828:	4965      	ldr	r1, [pc, #404]	; (80129c0 <etharp_find_entry+0x2d4>)
 801282a:	4613      	mov	r3, r2
 801282c:	005b      	lsls	r3, r3, #1
 801282e:	4413      	add	r3, r2
 8012830:	00db      	lsls	r3, r3, #3
 8012832:	440b      	add	r3, r1
 8012834:	3312      	adds	r3, #18
 8012836:	881b      	ldrh	r3, [r3, #0]
 8012838:	837b      	strh	r3, [r7, #26]
 801283a:	e01c      	b.n	8012876 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801283c:	7dfb      	ldrb	r3, [r7, #23]
 801283e:	2b01      	cmp	r3, #1
 8012840:	d919      	bls.n	8012876 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012842:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012846:	495e      	ldr	r1, [pc, #376]	; (80129c0 <etharp_find_entry+0x2d4>)
 8012848:	4613      	mov	r3, r2
 801284a:	005b      	lsls	r3, r3, #1
 801284c:	4413      	add	r3, r2
 801284e:	00db      	lsls	r3, r3, #3
 8012850:	440b      	add	r3, r1
 8012852:	3312      	adds	r3, #18
 8012854:	881b      	ldrh	r3, [r3, #0]
 8012856:	8b3a      	ldrh	r2, [r7, #24]
 8012858:	429a      	cmp	r2, r3
 801285a:	d80c      	bhi.n	8012876 <etharp_find_entry+0x18a>
            old_stable = i;
 801285c:	8c3b      	ldrh	r3, [r7, #32]
 801285e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8012860:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012864:	4956      	ldr	r1, [pc, #344]	; (80129c0 <etharp_find_entry+0x2d4>)
 8012866:	4613      	mov	r3, r2
 8012868:	005b      	lsls	r3, r3, #1
 801286a:	4413      	add	r3, r2
 801286c:	00db      	lsls	r3, r3, #3
 801286e:	440b      	add	r3, r1
 8012870:	3312      	adds	r3, #18
 8012872:	881b      	ldrh	r3, [r3, #0]
 8012874:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012876:	8c3b      	ldrh	r3, [r7, #32]
 8012878:	3301      	adds	r3, #1
 801287a:	b29b      	uxth	r3, r3
 801287c:	843b      	strh	r3, [r7, #32]
 801287e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012882:	2b09      	cmp	r3, #9
 8012884:	f77f af4c 	ble.w	8012720 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012888:	7afb      	ldrb	r3, [r7, #11]
 801288a:	f003 0302 	and.w	r3, r3, #2
 801288e:	2b00      	cmp	r3, #0
 8012890:	d108      	bne.n	80128a4 <etharp_find_entry+0x1b8>
 8012892:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012896:	2b0a      	cmp	r3, #10
 8012898:	d107      	bne.n	80128aa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801289a:	7afb      	ldrb	r3, [r7, #11]
 801289c:	f003 0301 	and.w	r3, r3, #1
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d102      	bne.n	80128aa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80128a4:	f04f 33ff 	mov.w	r3, #4294967295
 80128a8:	e085      	b.n	80129b6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80128aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80128ae:	2b09      	cmp	r3, #9
 80128b0:	dc02      	bgt.n	80128b8 <etharp_find_entry+0x1cc>
    i = empty;
 80128b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80128b4:	843b      	strh	r3, [r7, #32]
 80128b6:	e039      	b.n	801292c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80128b8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80128bc:	2b09      	cmp	r3, #9
 80128be:	dc14      	bgt.n	80128ea <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80128c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80128c2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80128c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80128c8:	493d      	ldr	r1, [pc, #244]	; (80129c0 <etharp_find_entry+0x2d4>)
 80128ca:	4613      	mov	r3, r2
 80128cc:	005b      	lsls	r3, r3, #1
 80128ce:	4413      	add	r3, r2
 80128d0:	00db      	lsls	r3, r3, #3
 80128d2:	440b      	add	r3, r1
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d018      	beq.n	801290c <etharp_find_entry+0x220>
 80128da:	4b3a      	ldr	r3, [pc, #232]	; (80129c4 <etharp_find_entry+0x2d8>)
 80128dc:	f240 126d 	movw	r2, #365	; 0x16d
 80128e0:	493b      	ldr	r1, [pc, #236]	; (80129d0 <etharp_find_entry+0x2e4>)
 80128e2:	483a      	ldr	r0, [pc, #232]	; (80129cc <etharp_find_entry+0x2e0>)
 80128e4:	f002 f9e8 	bl	8014cb8 <iprintf>
 80128e8:	e010      	b.n	801290c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80128ea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80128ee:	2b09      	cmp	r3, #9
 80128f0:	dc02      	bgt.n	80128f8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80128f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80128f4:	843b      	strh	r3, [r7, #32]
 80128f6:	e009      	b.n	801290c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80128f8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80128fc:	2b09      	cmp	r3, #9
 80128fe:	dc02      	bgt.n	8012906 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012900:	8bfb      	ldrh	r3, [r7, #30]
 8012902:	843b      	strh	r3, [r7, #32]
 8012904:	e002      	b.n	801290c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8012906:	f04f 33ff 	mov.w	r3, #4294967295
 801290a:	e054      	b.n	80129b6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801290c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012910:	2b09      	cmp	r3, #9
 8012912:	dd06      	ble.n	8012922 <etharp_find_entry+0x236>
 8012914:	4b2b      	ldr	r3, [pc, #172]	; (80129c4 <etharp_find_entry+0x2d8>)
 8012916:	f240 127f 	movw	r2, #383	; 0x17f
 801291a:	492e      	ldr	r1, [pc, #184]	; (80129d4 <etharp_find_entry+0x2e8>)
 801291c:	482b      	ldr	r0, [pc, #172]	; (80129cc <etharp_find_entry+0x2e0>)
 801291e:	f002 f9cb 	bl	8014cb8 <iprintf>
    etharp_free_entry(i);
 8012922:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012926:	4618      	mov	r0, r3
 8012928:	f7ff fe06 	bl	8012538 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801292c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012930:	2b09      	cmp	r3, #9
 8012932:	dd06      	ble.n	8012942 <etharp_find_entry+0x256>
 8012934:	4b23      	ldr	r3, [pc, #140]	; (80129c4 <etharp_find_entry+0x2d8>)
 8012936:	f240 1283 	movw	r2, #387	; 0x183
 801293a:	4926      	ldr	r1, [pc, #152]	; (80129d4 <etharp_find_entry+0x2e8>)
 801293c:	4823      	ldr	r0, [pc, #140]	; (80129cc <etharp_find_entry+0x2e0>)
 801293e:	f002 f9bb 	bl	8014cb8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012942:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012946:	491e      	ldr	r1, [pc, #120]	; (80129c0 <etharp_find_entry+0x2d4>)
 8012948:	4613      	mov	r3, r2
 801294a:	005b      	lsls	r3, r3, #1
 801294c:	4413      	add	r3, r2
 801294e:	00db      	lsls	r3, r3, #3
 8012950:	440b      	add	r3, r1
 8012952:	3314      	adds	r3, #20
 8012954:	781b      	ldrb	r3, [r3, #0]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d006      	beq.n	8012968 <etharp_find_entry+0x27c>
 801295a:	4b1a      	ldr	r3, [pc, #104]	; (80129c4 <etharp_find_entry+0x2d8>)
 801295c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8012960:	491d      	ldr	r1, [pc, #116]	; (80129d8 <etharp_find_entry+0x2ec>)
 8012962:	481a      	ldr	r0, [pc, #104]	; (80129cc <etharp_find_entry+0x2e0>)
 8012964:	f002 f9a8 	bl	8014cb8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	2b00      	cmp	r3, #0
 801296c:	d00b      	beq.n	8012986 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801296e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	6819      	ldr	r1, [r3, #0]
 8012976:	4812      	ldr	r0, [pc, #72]	; (80129c0 <etharp_find_entry+0x2d4>)
 8012978:	4613      	mov	r3, r2
 801297a:	005b      	lsls	r3, r3, #1
 801297c:	4413      	add	r3, r2
 801297e:	00db      	lsls	r3, r3, #3
 8012980:	4403      	add	r3, r0
 8012982:	3304      	adds	r3, #4
 8012984:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8012986:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801298a:	490d      	ldr	r1, [pc, #52]	; (80129c0 <etharp_find_entry+0x2d4>)
 801298c:	4613      	mov	r3, r2
 801298e:	005b      	lsls	r3, r3, #1
 8012990:	4413      	add	r3, r2
 8012992:	00db      	lsls	r3, r3, #3
 8012994:	440b      	add	r3, r1
 8012996:	3312      	adds	r3, #18
 8012998:	2200      	movs	r2, #0
 801299a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801299c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80129a0:	4907      	ldr	r1, [pc, #28]	; (80129c0 <etharp_find_entry+0x2d4>)
 80129a2:	4613      	mov	r3, r2
 80129a4:	005b      	lsls	r3, r3, #1
 80129a6:	4413      	add	r3, r2
 80129a8:	00db      	lsls	r3, r3, #3
 80129aa:	440b      	add	r3, r1
 80129ac:	3308      	adds	r3, #8
 80129ae:	687a      	ldr	r2, [r7, #4]
 80129b0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80129b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80129b6:	4618      	mov	r0, r3
 80129b8:	3728      	adds	r7, #40	; 0x28
 80129ba:	46bd      	mov	sp, r7
 80129bc:	bd80      	pop	{r7, pc}
 80129be:	bf00      	nop
 80129c0:	24000134 	.word	0x24000134
 80129c4:	0801814c 	.word	0x0801814c
 80129c8:	08018184 	.word	0x08018184
 80129cc:	080181c4 	.word	0x080181c4
 80129d0:	080181ec 	.word	0x080181ec
 80129d4:	08018204 	.word	0x08018204
 80129d8:	08018218 	.word	0x08018218

080129dc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80129dc:	b580      	push	{r7, lr}
 80129de:	b088      	sub	sp, #32
 80129e0:	af02      	add	r7, sp, #8
 80129e2:	60f8      	str	r0, [r7, #12]
 80129e4:	60b9      	str	r1, [r7, #8]
 80129e6:	607a      	str	r2, [r7, #4]
 80129e8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80129f0:	2b06      	cmp	r3, #6
 80129f2:	d006      	beq.n	8012a02 <etharp_update_arp_entry+0x26>
 80129f4:	4b48      	ldr	r3, [pc, #288]	; (8012b18 <etharp_update_arp_entry+0x13c>)
 80129f6:	f240 12a9 	movw	r2, #425	; 0x1a9
 80129fa:	4948      	ldr	r1, [pc, #288]	; (8012b1c <etharp_update_arp_entry+0x140>)
 80129fc:	4848      	ldr	r0, [pc, #288]	; (8012b20 <etharp_update_arp_entry+0x144>)
 80129fe:	f002 f95b 	bl	8014cb8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012a02:	68bb      	ldr	r3, [r7, #8]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d012      	beq.n	8012a2e <etharp_update_arp_entry+0x52>
 8012a08:	68bb      	ldr	r3, [r7, #8]
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d00e      	beq.n	8012a2e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012a10:	68bb      	ldr	r3, [r7, #8]
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	68f9      	ldr	r1, [r7, #12]
 8012a16:	4618      	mov	r0, r3
 8012a18:	f001 f924 	bl	8013c64 <ip4_addr_isbroadcast_u32>
 8012a1c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d105      	bne.n	8012a2e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012a22:	68bb      	ldr	r3, [r7, #8]
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012a2a:	2be0      	cmp	r3, #224	; 0xe0
 8012a2c:	d102      	bne.n	8012a34 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012a2e:	f06f 030f 	mvn.w	r3, #15
 8012a32:	e06c      	b.n	8012b0e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012a34:	78fb      	ldrb	r3, [r7, #3]
 8012a36:	68fa      	ldr	r2, [r7, #12]
 8012a38:	4619      	mov	r1, r3
 8012a3a:	68b8      	ldr	r0, [r7, #8]
 8012a3c:	f7ff fe56 	bl	80126ec <etharp_find_entry>
 8012a40:	4603      	mov	r3, r0
 8012a42:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012a44:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	da02      	bge.n	8012a52 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012a4c:	8afb      	ldrh	r3, [r7, #22]
 8012a4e:	b25b      	sxtb	r3, r3
 8012a50:	e05d      	b.n	8012b0e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012a52:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012a56:	4933      	ldr	r1, [pc, #204]	; (8012b24 <etharp_update_arp_entry+0x148>)
 8012a58:	4613      	mov	r3, r2
 8012a5a:	005b      	lsls	r3, r3, #1
 8012a5c:	4413      	add	r3, r2
 8012a5e:	00db      	lsls	r3, r3, #3
 8012a60:	440b      	add	r3, r1
 8012a62:	3314      	adds	r3, #20
 8012a64:	2202      	movs	r2, #2
 8012a66:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012a68:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012a6c:	492d      	ldr	r1, [pc, #180]	; (8012b24 <etharp_update_arp_entry+0x148>)
 8012a6e:	4613      	mov	r3, r2
 8012a70:	005b      	lsls	r3, r3, #1
 8012a72:	4413      	add	r3, r2
 8012a74:	00db      	lsls	r3, r3, #3
 8012a76:	440b      	add	r3, r1
 8012a78:	3308      	adds	r3, #8
 8012a7a:	68fa      	ldr	r2, [r7, #12]
 8012a7c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012a7e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012a82:	4613      	mov	r3, r2
 8012a84:	005b      	lsls	r3, r3, #1
 8012a86:	4413      	add	r3, r2
 8012a88:	00db      	lsls	r3, r3, #3
 8012a8a:	3308      	adds	r3, #8
 8012a8c:	4a25      	ldr	r2, [pc, #148]	; (8012b24 <etharp_update_arp_entry+0x148>)
 8012a8e:	4413      	add	r3, r2
 8012a90:	3304      	adds	r3, #4
 8012a92:	2206      	movs	r2, #6
 8012a94:	6879      	ldr	r1, [r7, #4]
 8012a96:	4618      	mov	r0, r3
 8012a98:	f002 f8f8 	bl	8014c8c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012a9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012aa0:	4920      	ldr	r1, [pc, #128]	; (8012b24 <etharp_update_arp_entry+0x148>)
 8012aa2:	4613      	mov	r3, r2
 8012aa4:	005b      	lsls	r3, r3, #1
 8012aa6:	4413      	add	r3, r2
 8012aa8:	00db      	lsls	r3, r3, #3
 8012aaa:	440b      	add	r3, r1
 8012aac:	3312      	adds	r3, #18
 8012aae:	2200      	movs	r2, #0
 8012ab0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012ab2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012ab6:	491b      	ldr	r1, [pc, #108]	; (8012b24 <etharp_update_arp_entry+0x148>)
 8012ab8:	4613      	mov	r3, r2
 8012aba:	005b      	lsls	r3, r3, #1
 8012abc:	4413      	add	r3, r2
 8012abe:	00db      	lsls	r3, r3, #3
 8012ac0:	440b      	add	r3, r1
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d021      	beq.n	8012b0c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012ac8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012acc:	4915      	ldr	r1, [pc, #84]	; (8012b24 <etharp_update_arp_entry+0x148>)
 8012ace:	4613      	mov	r3, r2
 8012ad0:	005b      	lsls	r3, r3, #1
 8012ad2:	4413      	add	r3, r2
 8012ad4:	00db      	lsls	r3, r3, #3
 8012ad6:	440b      	add	r3, r1
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012adc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012ae0:	4910      	ldr	r1, [pc, #64]	; (8012b24 <etharp_update_arp_entry+0x148>)
 8012ae2:	4613      	mov	r3, r2
 8012ae4:	005b      	lsls	r3, r3, #1
 8012ae6:	4413      	add	r3, r2
 8012ae8:	00db      	lsls	r3, r3, #3
 8012aea:	440b      	add	r3, r1
 8012aec:	2200      	movs	r2, #0
 8012aee:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8012af6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012afa:	9300      	str	r3, [sp, #0]
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	6939      	ldr	r1, [r7, #16]
 8012b00:	68f8      	ldr	r0, [r7, #12]
 8012b02:	f002 f849 	bl	8014b98 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012b06:	6938      	ldr	r0, [r7, #16]
 8012b08:	f7f8 ff24 	bl	800b954 <pbuf_free>
  }
  return ERR_OK;
 8012b0c:	2300      	movs	r3, #0
}
 8012b0e:	4618      	mov	r0, r3
 8012b10:	3718      	adds	r7, #24
 8012b12:	46bd      	mov	sp, r7
 8012b14:	bd80      	pop	{r7, pc}
 8012b16:	bf00      	nop
 8012b18:	0801814c 	.word	0x0801814c
 8012b1c:	08018244 	.word	0x08018244
 8012b20:	080181c4 	.word	0x080181c4
 8012b24:	24000134 	.word	0x24000134

08012b28 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b084      	sub	sp, #16
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012b30:	2300      	movs	r3, #0
 8012b32:	60fb      	str	r3, [r7, #12]
 8012b34:	e01e      	b.n	8012b74 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8012b36:	4913      	ldr	r1, [pc, #76]	; (8012b84 <etharp_cleanup_netif+0x5c>)
 8012b38:	68fa      	ldr	r2, [r7, #12]
 8012b3a:	4613      	mov	r3, r2
 8012b3c:	005b      	lsls	r3, r3, #1
 8012b3e:	4413      	add	r3, r2
 8012b40:	00db      	lsls	r3, r3, #3
 8012b42:	440b      	add	r3, r1
 8012b44:	3314      	adds	r3, #20
 8012b46:	781b      	ldrb	r3, [r3, #0]
 8012b48:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012b4a:	7afb      	ldrb	r3, [r7, #11]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d00e      	beq.n	8012b6e <etharp_cleanup_netif+0x46>
 8012b50:	490c      	ldr	r1, [pc, #48]	; (8012b84 <etharp_cleanup_netif+0x5c>)
 8012b52:	68fa      	ldr	r2, [r7, #12]
 8012b54:	4613      	mov	r3, r2
 8012b56:	005b      	lsls	r3, r3, #1
 8012b58:	4413      	add	r3, r2
 8012b5a:	00db      	lsls	r3, r3, #3
 8012b5c:	440b      	add	r3, r1
 8012b5e:	3308      	adds	r3, #8
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	687a      	ldr	r2, [r7, #4]
 8012b64:	429a      	cmp	r2, r3
 8012b66:	d102      	bne.n	8012b6e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012b68:	68f8      	ldr	r0, [r7, #12]
 8012b6a:	f7ff fce5 	bl	8012538 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	3301      	adds	r3, #1
 8012b72:	60fb      	str	r3, [r7, #12]
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	2b09      	cmp	r3, #9
 8012b78:	dddd      	ble.n	8012b36 <etharp_cleanup_netif+0xe>
    }
  }
}
 8012b7a:	bf00      	nop
 8012b7c:	bf00      	nop
 8012b7e:	3710      	adds	r7, #16
 8012b80:	46bd      	mov	sp, r7
 8012b82:	bd80      	pop	{r7, pc}
 8012b84:	24000134 	.word	0x24000134

08012b88 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012b88:	b5b0      	push	{r4, r5, r7, lr}
 8012b8a:	b08a      	sub	sp, #40	; 0x28
 8012b8c:	af04      	add	r7, sp, #16
 8012b8e:	6078      	str	r0, [r7, #4]
 8012b90:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012b92:	683b      	ldr	r3, [r7, #0]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d107      	bne.n	8012ba8 <etharp_input+0x20>
 8012b98:	4b3d      	ldr	r3, [pc, #244]	; (8012c90 <etharp_input+0x108>)
 8012b9a:	f240 228a 	movw	r2, #650	; 0x28a
 8012b9e:	493d      	ldr	r1, [pc, #244]	; (8012c94 <etharp_input+0x10c>)
 8012ba0:	483d      	ldr	r0, [pc, #244]	; (8012c98 <etharp_input+0x110>)
 8012ba2:	f002 f889 	bl	8014cb8 <iprintf>
 8012ba6:	e06f      	b.n	8012c88 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	685b      	ldr	r3, [r3, #4]
 8012bac:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012bae:	693b      	ldr	r3, [r7, #16]
 8012bb0:	881b      	ldrh	r3, [r3, #0]
 8012bb2:	b29b      	uxth	r3, r3
 8012bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012bb8:	d10c      	bne.n	8012bd4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012bba:	693b      	ldr	r3, [r7, #16]
 8012bbc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012bbe:	2b06      	cmp	r3, #6
 8012bc0:	d108      	bne.n	8012bd4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012bc2:	693b      	ldr	r3, [r7, #16]
 8012bc4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012bc6:	2b04      	cmp	r3, #4
 8012bc8:	d104      	bne.n	8012bd4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012bca:	693b      	ldr	r3, [r7, #16]
 8012bcc:	885b      	ldrh	r3, [r3, #2]
 8012bce:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012bd0:	2b08      	cmp	r3, #8
 8012bd2:	d003      	beq.n	8012bdc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012bd4:	6878      	ldr	r0, [r7, #4]
 8012bd6:	f7f8 febd 	bl	800b954 <pbuf_free>
    return;
 8012bda:	e055      	b.n	8012c88 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8012bdc:	693b      	ldr	r3, [r7, #16]
 8012bde:	330e      	adds	r3, #14
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012be4:	693b      	ldr	r3, [r7, #16]
 8012be6:	3318      	adds	r3, #24
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012bec:	683b      	ldr	r3, [r7, #0]
 8012bee:	3304      	adds	r3, #4
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d102      	bne.n	8012bfc <etharp_input+0x74>
    for_us = 0;
 8012bf6:	2300      	movs	r3, #0
 8012bf8:	75fb      	strb	r3, [r7, #23]
 8012bfa:	e009      	b.n	8012c10 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012bfc:	68ba      	ldr	r2, [r7, #8]
 8012bfe:	683b      	ldr	r3, [r7, #0]
 8012c00:	3304      	adds	r3, #4
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	429a      	cmp	r2, r3
 8012c06:	bf0c      	ite	eq
 8012c08:	2301      	moveq	r3, #1
 8012c0a:	2300      	movne	r3, #0
 8012c0c:	b2db      	uxtb	r3, r3
 8012c0e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012c10:	693b      	ldr	r3, [r7, #16]
 8012c12:	f103 0208 	add.w	r2, r3, #8
 8012c16:	7dfb      	ldrb	r3, [r7, #23]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d001      	beq.n	8012c20 <etharp_input+0x98>
 8012c1c:	2301      	movs	r3, #1
 8012c1e:	e000      	b.n	8012c22 <etharp_input+0x9a>
 8012c20:	2302      	movs	r3, #2
 8012c22:	f107 010c 	add.w	r1, r7, #12
 8012c26:	6838      	ldr	r0, [r7, #0]
 8012c28:	f7ff fed8 	bl	80129dc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012c2c:	693b      	ldr	r3, [r7, #16]
 8012c2e:	88db      	ldrh	r3, [r3, #6]
 8012c30:	b29b      	uxth	r3, r3
 8012c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012c36:	d003      	beq.n	8012c40 <etharp_input+0xb8>
 8012c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012c3c:	d01e      	beq.n	8012c7c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8012c3e:	e020      	b.n	8012c82 <etharp_input+0xfa>
      if (for_us) {
 8012c40:	7dfb      	ldrb	r3, [r7, #23]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d01c      	beq.n	8012c80 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012c46:	683b      	ldr	r3, [r7, #0]
 8012c48:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012c4c:	693b      	ldr	r3, [r7, #16]
 8012c4e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012c52:	683b      	ldr	r3, [r7, #0]
 8012c54:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8012c58:	683b      	ldr	r3, [r7, #0]
 8012c5a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012c5c:	693a      	ldr	r2, [r7, #16]
 8012c5e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012c60:	2102      	movs	r1, #2
 8012c62:	9103      	str	r1, [sp, #12]
 8012c64:	f107 010c 	add.w	r1, r7, #12
 8012c68:	9102      	str	r1, [sp, #8]
 8012c6a:	9201      	str	r2, [sp, #4]
 8012c6c:	9300      	str	r3, [sp, #0]
 8012c6e:	462b      	mov	r3, r5
 8012c70:	4622      	mov	r2, r4
 8012c72:	4601      	mov	r1, r0
 8012c74:	6838      	ldr	r0, [r7, #0]
 8012c76:	f000 faeb 	bl	8013250 <etharp_raw>
      break;
 8012c7a:	e001      	b.n	8012c80 <etharp_input+0xf8>
      break;
 8012c7c:	bf00      	nop
 8012c7e:	e000      	b.n	8012c82 <etharp_input+0xfa>
      break;
 8012c80:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012c82:	6878      	ldr	r0, [r7, #4]
 8012c84:	f7f8 fe66 	bl	800b954 <pbuf_free>
}
 8012c88:	3718      	adds	r7, #24
 8012c8a:	46bd      	mov	sp, r7
 8012c8c:	bdb0      	pop	{r4, r5, r7, pc}
 8012c8e:	bf00      	nop
 8012c90:	0801814c 	.word	0x0801814c
 8012c94:	0801829c 	.word	0x0801829c
 8012c98:	080181c4 	.word	0x080181c4

08012c9c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	b086      	sub	sp, #24
 8012ca0:	af02      	add	r7, sp, #8
 8012ca2:	60f8      	str	r0, [r7, #12]
 8012ca4:	60b9      	str	r1, [r7, #8]
 8012ca6:	4613      	mov	r3, r2
 8012ca8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012caa:	79fa      	ldrb	r2, [r7, #7]
 8012cac:	4944      	ldr	r1, [pc, #272]	; (8012dc0 <etharp_output_to_arp_index+0x124>)
 8012cae:	4613      	mov	r3, r2
 8012cb0:	005b      	lsls	r3, r3, #1
 8012cb2:	4413      	add	r3, r2
 8012cb4:	00db      	lsls	r3, r3, #3
 8012cb6:	440b      	add	r3, r1
 8012cb8:	3314      	adds	r3, #20
 8012cba:	781b      	ldrb	r3, [r3, #0]
 8012cbc:	2b01      	cmp	r3, #1
 8012cbe:	d806      	bhi.n	8012cce <etharp_output_to_arp_index+0x32>
 8012cc0:	4b40      	ldr	r3, [pc, #256]	; (8012dc4 <etharp_output_to_arp_index+0x128>)
 8012cc2:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012cc6:	4940      	ldr	r1, [pc, #256]	; (8012dc8 <etharp_output_to_arp_index+0x12c>)
 8012cc8:	4840      	ldr	r0, [pc, #256]	; (8012dcc <etharp_output_to_arp_index+0x130>)
 8012cca:	f001 fff5 	bl	8014cb8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012cce:	79fa      	ldrb	r2, [r7, #7]
 8012cd0:	493b      	ldr	r1, [pc, #236]	; (8012dc0 <etharp_output_to_arp_index+0x124>)
 8012cd2:	4613      	mov	r3, r2
 8012cd4:	005b      	lsls	r3, r3, #1
 8012cd6:	4413      	add	r3, r2
 8012cd8:	00db      	lsls	r3, r3, #3
 8012cda:	440b      	add	r3, r1
 8012cdc:	3314      	adds	r3, #20
 8012cde:	781b      	ldrb	r3, [r3, #0]
 8012ce0:	2b02      	cmp	r3, #2
 8012ce2:	d153      	bne.n	8012d8c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012ce4:	79fa      	ldrb	r2, [r7, #7]
 8012ce6:	4936      	ldr	r1, [pc, #216]	; (8012dc0 <etharp_output_to_arp_index+0x124>)
 8012ce8:	4613      	mov	r3, r2
 8012cea:	005b      	lsls	r3, r3, #1
 8012cec:	4413      	add	r3, r2
 8012cee:	00db      	lsls	r3, r3, #3
 8012cf0:	440b      	add	r3, r1
 8012cf2:	3312      	adds	r3, #18
 8012cf4:	881b      	ldrh	r3, [r3, #0]
 8012cf6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8012cfa:	d919      	bls.n	8012d30 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012cfc:	79fa      	ldrb	r2, [r7, #7]
 8012cfe:	4613      	mov	r3, r2
 8012d00:	005b      	lsls	r3, r3, #1
 8012d02:	4413      	add	r3, r2
 8012d04:	00db      	lsls	r3, r3, #3
 8012d06:	4a2e      	ldr	r2, [pc, #184]	; (8012dc0 <etharp_output_to_arp_index+0x124>)
 8012d08:	4413      	add	r3, r2
 8012d0a:	3304      	adds	r3, #4
 8012d0c:	4619      	mov	r1, r3
 8012d0e:	68f8      	ldr	r0, [r7, #12]
 8012d10:	f000 fb4c 	bl	80133ac <etharp_request>
 8012d14:	4603      	mov	r3, r0
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d138      	bne.n	8012d8c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012d1a:	79fa      	ldrb	r2, [r7, #7]
 8012d1c:	4928      	ldr	r1, [pc, #160]	; (8012dc0 <etharp_output_to_arp_index+0x124>)
 8012d1e:	4613      	mov	r3, r2
 8012d20:	005b      	lsls	r3, r3, #1
 8012d22:	4413      	add	r3, r2
 8012d24:	00db      	lsls	r3, r3, #3
 8012d26:	440b      	add	r3, r1
 8012d28:	3314      	adds	r3, #20
 8012d2a:	2203      	movs	r2, #3
 8012d2c:	701a      	strb	r2, [r3, #0]
 8012d2e:	e02d      	b.n	8012d8c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012d30:	79fa      	ldrb	r2, [r7, #7]
 8012d32:	4923      	ldr	r1, [pc, #140]	; (8012dc0 <etharp_output_to_arp_index+0x124>)
 8012d34:	4613      	mov	r3, r2
 8012d36:	005b      	lsls	r3, r3, #1
 8012d38:	4413      	add	r3, r2
 8012d3a:	00db      	lsls	r3, r3, #3
 8012d3c:	440b      	add	r3, r1
 8012d3e:	3312      	adds	r3, #18
 8012d40:	881b      	ldrh	r3, [r3, #0]
 8012d42:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012d46:	d321      	bcc.n	8012d8c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012d48:	79fa      	ldrb	r2, [r7, #7]
 8012d4a:	4613      	mov	r3, r2
 8012d4c:	005b      	lsls	r3, r3, #1
 8012d4e:	4413      	add	r3, r2
 8012d50:	00db      	lsls	r3, r3, #3
 8012d52:	4a1b      	ldr	r2, [pc, #108]	; (8012dc0 <etharp_output_to_arp_index+0x124>)
 8012d54:	4413      	add	r3, r2
 8012d56:	1d19      	adds	r1, r3, #4
 8012d58:	79fa      	ldrb	r2, [r7, #7]
 8012d5a:	4613      	mov	r3, r2
 8012d5c:	005b      	lsls	r3, r3, #1
 8012d5e:	4413      	add	r3, r2
 8012d60:	00db      	lsls	r3, r3, #3
 8012d62:	3308      	adds	r3, #8
 8012d64:	4a16      	ldr	r2, [pc, #88]	; (8012dc0 <etharp_output_to_arp_index+0x124>)
 8012d66:	4413      	add	r3, r2
 8012d68:	3304      	adds	r3, #4
 8012d6a:	461a      	mov	r2, r3
 8012d6c:	68f8      	ldr	r0, [r7, #12]
 8012d6e:	f000 fafb 	bl	8013368 <etharp_request_dst>
 8012d72:	4603      	mov	r3, r0
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d109      	bne.n	8012d8c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012d78:	79fa      	ldrb	r2, [r7, #7]
 8012d7a:	4911      	ldr	r1, [pc, #68]	; (8012dc0 <etharp_output_to_arp_index+0x124>)
 8012d7c:	4613      	mov	r3, r2
 8012d7e:	005b      	lsls	r3, r3, #1
 8012d80:	4413      	add	r3, r2
 8012d82:	00db      	lsls	r3, r3, #3
 8012d84:	440b      	add	r3, r1
 8012d86:	3314      	adds	r3, #20
 8012d88:	2203      	movs	r2, #3
 8012d8a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8012d92:	79fa      	ldrb	r2, [r7, #7]
 8012d94:	4613      	mov	r3, r2
 8012d96:	005b      	lsls	r3, r3, #1
 8012d98:	4413      	add	r3, r2
 8012d9a:	00db      	lsls	r3, r3, #3
 8012d9c:	3308      	adds	r3, #8
 8012d9e:	4a08      	ldr	r2, [pc, #32]	; (8012dc0 <etharp_output_to_arp_index+0x124>)
 8012da0:	4413      	add	r3, r2
 8012da2:	3304      	adds	r3, #4
 8012da4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012da8:	9200      	str	r2, [sp, #0]
 8012daa:	460a      	mov	r2, r1
 8012dac:	68b9      	ldr	r1, [r7, #8]
 8012dae:	68f8      	ldr	r0, [r7, #12]
 8012db0:	f001 fef2 	bl	8014b98 <ethernet_output>
 8012db4:	4603      	mov	r3, r0
}
 8012db6:	4618      	mov	r0, r3
 8012db8:	3710      	adds	r7, #16
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	bd80      	pop	{r7, pc}
 8012dbe:	bf00      	nop
 8012dc0:	24000134 	.word	0x24000134
 8012dc4:	0801814c 	.word	0x0801814c
 8012dc8:	080182bc 	.word	0x080182bc
 8012dcc:	080181c4 	.word	0x080181c4

08012dd0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	b08a      	sub	sp, #40	; 0x28
 8012dd4:	af02      	add	r7, sp, #8
 8012dd6:	60f8      	str	r0, [r7, #12]
 8012dd8:	60b9      	str	r1, [r7, #8]
 8012dda:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d106      	bne.n	8012df4 <etharp_output+0x24>
 8012de6:	4b73      	ldr	r3, [pc, #460]	; (8012fb4 <etharp_output+0x1e4>)
 8012de8:	f240 321e 	movw	r2, #798	; 0x31e
 8012dec:	4972      	ldr	r1, [pc, #456]	; (8012fb8 <etharp_output+0x1e8>)
 8012dee:	4873      	ldr	r0, [pc, #460]	; (8012fbc <etharp_output+0x1ec>)
 8012df0:	f001 ff62 	bl	8014cb8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012df4:	68bb      	ldr	r3, [r7, #8]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d106      	bne.n	8012e08 <etharp_output+0x38>
 8012dfa:	4b6e      	ldr	r3, [pc, #440]	; (8012fb4 <etharp_output+0x1e4>)
 8012dfc:	f240 321f 	movw	r2, #799	; 0x31f
 8012e00:	496f      	ldr	r1, [pc, #444]	; (8012fc0 <etharp_output+0x1f0>)
 8012e02:	486e      	ldr	r0, [pc, #440]	; (8012fbc <etharp_output+0x1ec>)
 8012e04:	f001 ff58 	bl	8014cb8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d106      	bne.n	8012e1c <etharp_output+0x4c>
 8012e0e:	4b69      	ldr	r3, [pc, #420]	; (8012fb4 <etharp_output+0x1e4>)
 8012e10:	f44f 7248 	mov.w	r2, #800	; 0x320
 8012e14:	496b      	ldr	r1, [pc, #428]	; (8012fc4 <etharp_output+0x1f4>)
 8012e16:	4869      	ldr	r0, [pc, #420]	; (8012fbc <etharp_output+0x1ec>)
 8012e18:	f001 ff4e 	bl	8014cb8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	68f9      	ldr	r1, [r7, #12]
 8012e22:	4618      	mov	r0, r3
 8012e24:	f000 ff1e 	bl	8013c64 <ip4_addr_isbroadcast_u32>
 8012e28:	4603      	mov	r3, r0
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d002      	beq.n	8012e34 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8012e2e:	4b66      	ldr	r3, [pc, #408]	; (8012fc8 <etharp_output+0x1f8>)
 8012e30:	61fb      	str	r3, [r7, #28]
 8012e32:	e0af      	b.n	8012f94 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012e3c:	2be0      	cmp	r3, #224	; 0xe0
 8012e3e:	d118      	bne.n	8012e72 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012e40:	2301      	movs	r3, #1
 8012e42:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012e44:	2300      	movs	r3, #0
 8012e46:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012e48:	235e      	movs	r3, #94	; 0x5e
 8012e4a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	3301      	adds	r3, #1
 8012e50:	781b      	ldrb	r3, [r3, #0]
 8012e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012e56:	b2db      	uxtb	r3, r3
 8012e58:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	3302      	adds	r3, #2
 8012e5e:	781b      	ldrb	r3, [r3, #0]
 8012e60:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	3303      	adds	r3, #3
 8012e66:	781b      	ldrb	r3, [r3, #0]
 8012e68:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8012e6a:	f107 0310 	add.w	r3, r7, #16
 8012e6e:	61fb      	str	r3, [r7, #28]
 8012e70:	e090      	b.n	8012f94 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	681a      	ldr	r2, [r3, #0]
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	3304      	adds	r3, #4
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	405a      	eors	r2, r3
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	3308      	adds	r3, #8
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	4013      	ands	r3, r2
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d012      	beq.n	8012eb0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012e90:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8012e94:	4293      	cmp	r3, r2
 8012e96:	d00b      	beq.n	8012eb0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	330c      	adds	r3, #12
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d003      	beq.n	8012eaa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	330c      	adds	r3, #12
 8012ea6:	61bb      	str	r3, [r7, #24]
 8012ea8:	e002      	b.n	8012eb0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8012eaa:	f06f 0303 	mvn.w	r3, #3
 8012eae:	e07d      	b.n	8012fac <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012eb0:	4b46      	ldr	r3, [pc, #280]	; (8012fcc <etharp_output+0x1fc>)
 8012eb2:	781b      	ldrb	r3, [r3, #0]
 8012eb4:	4619      	mov	r1, r3
 8012eb6:	4a46      	ldr	r2, [pc, #280]	; (8012fd0 <etharp_output+0x200>)
 8012eb8:	460b      	mov	r3, r1
 8012eba:	005b      	lsls	r3, r3, #1
 8012ebc:	440b      	add	r3, r1
 8012ebe:	00db      	lsls	r3, r3, #3
 8012ec0:	4413      	add	r3, r2
 8012ec2:	3314      	adds	r3, #20
 8012ec4:	781b      	ldrb	r3, [r3, #0]
 8012ec6:	2b01      	cmp	r3, #1
 8012ec8:	d925      	bls.n	8012f16 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012eca:	4b40      	ldr	r3, [pc, #256]	; (8012fcc <etharp_output+0x1fc>)
 8012ecc:	781b      	ldrb	r3, [r3, #0]
 8012ece:	4619      	mov	r1, r3
 8012ed0:	4a3f      	ldr	r2, [pc, #252]	; (8012fd0 <etharp_output+0x200>)
 8012ed2:	460b      	mov	r3, r1
 8012ed4:	005b      	lsls	r3, r3, #1
 8012ed6:	440b      	add	r3, r1
 8012ed8:	00db      	lsls	r3, r3, #3
 8012eda:	4413      	add	r3, r2
 8012edc:	3308      	adds	r3, #8
 8012ede:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012ee0:	68fa      	ldr	r2, [r7, #12]
 8012ee2:	429a      	cmp	r2, r3
 8012ee4:	d117      	bne.n	8012f16 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012ee6:	69bb      	ldr	r3, [r7, #24]
 8012ee8:	681a      	ldr	r2, [r3, #0]
 8012eea:	4b38      	ldr	r3, [pc, #224]	; (8012fcc <etharp_output+0x1fc>)
 8012eec:	781b      	ldrb	r3, [r3, #0]
 8012eee:	4618      	mov	r0, r3
 8012ef0:	4937      	ldr	r1, [pc, #220]	; (8012fd0 <etharp_output+0x200>)
 8012ef2:	4603      	mov	r3, r0
 8012ef4:	005b      	lsls	r3, r3, #1
 8012ef6:	4403      	add	r3, r0
 8012ef8:	00db      	lsls	r3, r3, #3
 8012efa:	440b      	add	r3, r1
 8012efc:	3304      	adds	r3, #4
 8012efe:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012f00:	429a      	cmp	r2, r3
 8012f02:	d108      	bne.n	8012f16 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012f04:	4b31      	ldr	r3, [pc, #196]	; (8012fcc <etharp_output+0x1fc>)
 8012f06:	781b      	ldrb	r3, [r3, #0]
 8012f08:	461a      	mov	r2, r3
 8012f0a:	68b9      	ldr	r1, [r7, #8]
 8012f0c:	68f8      	ldr	r0, [r7, #12]
 8012f0e:	f7ff fec5 	bl	8012c9c <etharp_output_to_arp_index>
 8012f12:	4603      	mov	r3, r0
 8012f14:	e04a      	b.n	8012fac <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012f16:	2300      	movs	r3, #0
 8012f18:	75fb      	strb	r3, [r7, #23]
 8012f1a:	e031      	b.n	8012f80 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012f1c:	7dfa      	ldrb	r2, [r7, #23]
 8012f1e:	492c      	ldr	r1, [pc, #176]	; (8012fd0 <etharp_output+0x200>)
 8012f20:	4613      	mov	r3, r2
 8012f22:	005b      	lsls	r3, r3, #1
 8012f24:	4413      	add	r3, r2
 8012f26:	00db      	lsls	r3, r3, #3
 8012f28:	440b      	add	r3, r1
 8012f2a:	3314      	adds	r3, #20
 8012f2c:	781b      	ldrb	r3, [r3, #0]
 8012f2e:	2b01      	cmp	r3, #1
 8012f30:	d923      	bls.n	8012f7a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8012f32:	7dfa      	ldrb	r2, [r7, #23]
 8012f34:	4926      	ldr	r1, [pc, #152]	; (8012fd0 <etharp_output+0x200>)
 8012f36:	4613      	mov	r3, r2
 8012f38:	005b      	lsls	r3, r3, #1
 8012f3a:	4413      	add	r3, r2
 8012f3c:	00db      	lsls	r3, r3, #3
 8012f3e:	440b      	add	r3, r1
 8012f40:	3308      	adds	r3, #8
 8012f42:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012f44:	68fa      	ldr	r2, [r7, #12]
 8012f46:	429a      	cmp	r2, r3
 8012f48:	d117      	bne.n	8012f7a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8012f4a:	69bb      	ldr	r3, [r7, #24]
 8012f4c:	6819      	ldr	r1, [r3, #0]
 8012f4e:	7dfa      	ldrb	r2, [r7, #23]
 8012f50:	481f      	ldr	r0, [pc, #124]	; (8012fd0 <etharp_output+0x200>)
 8012f52:	4613      	mov	r3, r2
 8012f54:	005b      	lsls	r3, r3, #1
 8012f56:	4413      	add	r3, r2
 8012f58:	00db      	lsls	r3, r3, #3
 8012f5a:	4403      	add	r3, r0
 8012f5c:	3304      	adds	r3, #4
 8012f5e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012f60:	4299      	cmp	r1, r3
 8012f62:	d10a      	bne.n	8012f7a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012f64:	4a19      	ldr	r2, [pc, #100]	; (8012fcc <etharp_output+0x1fc>)
 8012f66:	7dfb      	ldrb	r3, [r7, #23]
 8012f68:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8012f6a:	7dfb      	ldrb	r3, [r7, #23]
 8012f6c:	461a      	mov	r2, r3
 8012f6e:	68b9      	ldr	r1, [r7, #8]
 8012f70:	68f8      	ldr	r0, [r7, #12]
 8012f72:	f7ff fe93 	bl	8012c9c <etharp_output_to_arp_index>
 8012f76:	4603      	mov	r3, r0
 8012f78:	e018      	b.n	8012fac <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012f7a:	7dfb      	ldrb	r3, [r7, #23]
 8012f7c:	3301      	adds	r3, #1
 8012f7e:	75fb      	strb	r3, [r7, #23]
 8012f80:	7dfb      	ldrb	r3, [r7, #23]
 8012f82:	2b09      	cmp	r3, #9
 8012f84:	d9ca      	bls.n	8012f1c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8012f86:	68ba      	ldr	r2, [r7, #8]
 8012f88:	69b9      	ldr	r1, [r7, #24]
 8012f8a:	68f8      	ldr	r0, [r7, #12]
 8012f8c:	f000 f822 	bl	8012fd4 <etharp_query>
 8012f90:	4603      	mov	r3, r0
 8012f92:	e00b      	b.n	8012fac <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8012f9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012f9e:	9300      	str	r3, [sp, #0]
 8012fa0:	69fb      	ldr	r3, [r7, #28]
 8012fa2:	68b9      	ldr	r1, [r7, #8]
 8012fa4:	68f8      	ldr	r0, [r7, #12]
 8012fa6:	f001 fdf7 	bl	8014b98 <ethernet_output>
 8012faa:	4603      	mov	r3, r0
}
 8012fac:	4618      	mov	r0, r3
 8012fae:	3720      	adds	r7, #32
 8012fb0:	46bd      	mov	sp, r7
 8012fb2:	bd80      	pop	{r7, pc}
 8012fb4:	0801814c 	.word	0x0801814c
 8012fb8:	0801829c 	.word	0x0801829c
 8012fbc:	080181c4 	.word	0x080181c4
 8012fc0:	080182ec 	.word	0x080182ec
 8012fc4:	0801828c 	.word	0x0801828c
 8012fc8:	08019118 	.word	0x08019118
 8012fcc:	24000224 	.word	0x24000224
 8012fd0:	24000134 	.word	0x24000134

08012fd4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b08c      	sub	sp, #48	; 0x30
 8012fd8:	af02      	add	r7, sp, #8
 8012fda:	60f8      	str	r0, [r7, #12]
 8012fdc:	60b9      	str	r1, [r7, #8]
 8012fde:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	3326      	adds	r3, #38	; 0x26
 8012fe4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8012fe6:	23ff      	movs	r3, #255	; 0xff
 8012fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8012fec:	2300      	movs	r3, #0
 8012fee:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012ff0:	68bb      	ldr	r3, [r7, #8]
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	68f9      	ldr	r1, [r7, #12]
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	f000 fe34 	bl	8013c64 <ip4_addr_isbroadcast_u32>
 8012ffc:	4603      	mov	r3, r0
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d10c      	bne.n	801301c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013002:	68bb      	ldr	r3, [r7, #8]
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801300a:	2be0      	cmp	r3, #224	; 0xe0
 801300c:	d006      	beq.n	801301c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801300e:	68bb      	ldr	r3, [r7, #8]
 8013010:	2b00      	cmp	r3, #0
 8013012:	d003      	beq.n	801301c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013014:	68bb      	ldr	r3, [r7, #8]
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d102      	bne.n	8013022 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801301c:	f06f 030f 	mvn.w	r3, #15
 8013020:	e101      	b.n	8013226 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8013022:	68fa      	ldr	r2, [r7, #12]
 8013024:	2101      	movs	r1, #1
 8013026:	68b8      	ldr	r0, [r7, #8]
 8013028:	f7ff fb60 	bl	80126ec <etharp_find_entry>
 801302c:	4603      	mov	r3, r0
 801302e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8013030:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013034:	2b00      	cmp	r3, #0
 8013036:	da02      	bge.n	801303e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013038:	8a7b      	ldrh	r3, [r7, #18]
 801303a:	b25b      	sxtb	r3, r3
 801303c:	e0f3      	b.n	8013226 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801303e:	8a7b      	ldrh	r3, [r7, #18]
 8013040:	2b7e      	cmp	r3, #126	; 0x7e
 8013042:	d906      	bls.n	8013052 <etharp_query+0x7e>
 8013044:	4b7a      	ldr	r3, [pc, #488]	; (8013230 <etharp_query+0x25c>)
 8013046:	f240 32c1 	movw	r2, #961	; 0x3c1
 801304a:	497a      	ldr	r1, [pc, #488]	; (8013234 <etharp_query+0x260>)
 801304c:	487a      	ldr	r0, [pc, #488]	; (8013238 <etharp_query+0x264>)
 801304e:	f001 fe33 	bl	8014cb8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8013052:	8a7b      	ldrh	r3, [r7, #18]
 8013054:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8013056:	7c7a      	ldrb	r2, [r7, #17]
 8013058:	4978      	ldr	r1, [pc, #480]	; (801323c <etharp_query+0x268>)
 801305a:	4613      	mov	r3, r2
 801305c:	005b      	lsls	r3, r3, #1
 801305e:	4413      	add	r3, r2
 8013060:	00db      	lsls	r3, r3, #3
 8013062:	440b      	add	r3, r1
 8013064:	3314      	adds	r3, #20
 8013066:	781b      	ldrb	r3, [r3, #0]
 8013068:	2b00      	cmp	r3, #0
 801306a:	d115      	bne.n	8013098 <etharp_query+0xc4>
    is_new_entry = 1;
 801306c:	2301      	movs	r3, #1
 801306e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013070:	7c7a      	ldrb	r2, [r7, #17]
 8013072:	4972      	ldr	r1, [pc, #456]	; (801323c <etharp_query+0x268>)
 8013074:	4613      	mov	r3, r2
 8013076:	005b      	lsls	r3, r3, #1
 8013078:	4413      	add	r3, r2
 801307a:	00db      	lsls	r3, r3, #3
 801307c:	440b      	add	r3, r1
 801307e:	3314      	adds	r3, #20
 8013080:	2201      	movs	r2, #1
 8013082:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013084:	7c7a      	ldrb	r2, [r7, #17]
 8013086:	496d      	ldr	r1, [pc, #436]	; (801323c <etharp_query+0x268>)
 8013088:	4613      	mov	r3, r2
 801308a:	005b      	lsls	r3, r3, #1
 801308c:	4413      	add	r3, r2
 801308e:	00db      	lsls	r3, r3, #3
 8013090:	440b      	add	r3, r1
 8013092:	3308      	adds	r3, #8
 8013094:	68fa      	ldr	r2, [r7, #12]
 8013096:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8013098:	7c7a      	ldrb	r2, [r7, #17]
 801309a:	4968      	ldr	r1, [pc, #416]	; (801323c <etharp_query+0x268>)
 801309c:	4613      	mov	r3, r2
 801309e:	005b      	lsls	r3, r3, #1
 80130a0:	4413      	add	r3, r2
 80130a2:	00db      	lsls	r3, r3, #3
 80130a4:	440b      	add	r3, r1
 80130a6:	3314      	adds	r3, #20
 80130a8:	781b      	ldrb	r3, [r3, #0]
 80130aa:	2b01      	cmp	r3, #1
 80130ac:	d011      	beq.n	80130d2 <etharp_query+0xfe>
 80130ae:	7c7a      	ldrb	r2, [r7, #17]
 80130b0:	4962      	ldr	r1, [pc, #392]	; (801323c <etharp_query+0x268>)
 80130b2:	4613      	mov	r3, r2
 80130b4:	005b      	lsls	r3, r3, #1
 80130b6:	4413      	add	r3, r2
 80130b8:	00db      	lsls	r3, r3, #3
 80130ba:	440b      	add	r3, r1
 80130bc:	3314      	adds	r3, #20
 80130be:	781b      	ldrb	r3, [r3, #0]
 80130c0:	2b01      	cmp	r3, #1
 80130c2:	d806      	bhi.n	80130d2 <etharp_query+0xfe>
 80130c4:	4b5a      	ldr	r3, [pc, #360]	; (8013230 <etharp_query+0x25c>)
 80130c6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80130ca:	495d      	ldr	r1, [pc, #372]	; (8013240 <etharp_query+0x26c>)
 80130cc:	485a      	ldr	r0, [pc, #360]	; (8013238 <etharp_query+0x264>)
 80130ce:	f001 fdf3 	bl	8014cb8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80130d2:	6a3b      	ldr	r3, [r7, #32]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d102      	bne.n	80130de <etharp_query+0x10a>
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d10c      	bne.n	80130f8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80130de:	68b9      	ldr	r1, [r7, #8]
 80130e0:	68f8      	ldr	r0, [r7, #12]
 80130e2:	f000 f963 	bl	80133ac <etharp_request>
 80130e6:	4603      	mov	r3, r0
 80130e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d102      	bne.n	80130f8 <etharp_query+0x124>
      return result;
 80130f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80130f6:	e096      	b.n	8013226 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d106      	bne.n	801310c <etharp_query+0x138>
 80130fe:	4b4c      	ldr	r3, [pc, #304]	; (8013230 <etharp_query+0x25c>)
 8013100:	f240 32e1 	movw	r2, #993	; 0x3e1
 8013104:	494f      	ldr	r1, [pc, #316]	; (8013244 <etharp_query+0x270>)
 8013106:	484c      	ldr	r0, [pc, #304]	; (8013238 <etharp_query+0x264>)
 8013108:	f001 fdd6 	bl	8014cb8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801310c:	7c7a      	ldrb	r2, [r7, #17]
 801310e:	494b      	ldr	r1, [pc, #300]	; (801323c <etharp_query+0x268>)
 8013110:	4613      	mov	r3, r2
 8013112:	005b      	lsls	r3, r3, #1
 8013114:	4413      	add	r3, r2
 8013116:	00db      	lsls	r3, r3, #3
 8013118:	440b      	add	r3, r1
 801311a:	3314      	adds	r3, #20
 801311c:	781b      	ldrb	r3, [r3, #0]
 801311e:	2b01      	cmp	r3, #1
 8013120:	d917      	bls.n	8013152 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8013122:	4a49      	ldr	r2, [pc, #292]	; (8013248 <etharp_query+0x274>)
 8013124:	7c7b      	ldrb	r3, [r7, #17]
 8013126:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013128:	7c7a      	ldrb	r2, [r7, #17]
 801312a:	4613      	mov	r3, r2
 801312c:	005b      	lsls	r3, r3, #1
 801312e:	4413      	add	r3, r2
 8013130:	00db      	lsls	r3, r3, #3
 8013132:	3308      	adds	r3, #8
 8013134:	4a41      	ldr	r2, [pc, #260]	; (801323c <etharp_query+0x268>)
 8013136:	4413      	add	r3, r2
 8013138:	3304      	adds	r3, #4
 801313a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801313e:	9200      	str	r2, [sp, #0]
 8013140:	697a      	ldr	r2, [r7, #20]
 8013142:	6879      	ldr	r1, [r7, #4]
 8013144:	68f8      	ldr	r0, [r7, #12]
 8013146:	f001 fd27 	bl	8014b98 <ethernet_output>
 801314a:	4603      	mov	r3, r0
 801314c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013150:	e067      	b.n	8013222 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013152:	7c7a      	ldrb	r2, [r7, #17]
 8013154:	4939      	ldr	r1, [pc, #228]	; (801323c <etharp_query+0x268>)
 8013156:	4613      	mov	r3, r2
 8013158:	005b      	lsls	r3, r3, #1
 801315a:	4413      	add	r3, r2
 801315c:	00db      	lsls	r3, r3, #3
 801315e:	440b      	add	r3, r1
 8013160:	3314      	adds	r3, #20
 8013162:	781b      	ldrb	r3, [r3, #0]
 8013164:	2b01      	cmp	r3, #1
 8013166:	d15c      	bne.n	8013222 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8013168:	2300      	movs	r3, #0
 801316a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013170:	e01c      	b.n	80131ac <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8013172:	69fb      	ldr	r3, [r7, #28]
 8013174:	895a      	ldrh	r2, [r3, #10]
 8013176:	69fb      	ldr	r3, [r7, #28]
 8013178:	891b      	ldrh	r3, [r3, #8]
 801317a:	429a      	cmp	r2, r3
 801317c:	d10a      	bne.n	8013194 <etharp_query+0x1c0>
 801317e:	69fb      	ldr	r3, [r7, #28]
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	2b00      	cmp	r3, #0
 8013184:	d006      	beq.n	8013194 <etharp_query+0x1c0>
 8013186:	4b2a      	ldr	r3, [pc, #168]	; (8013230 <etharp_query+0x25c>)
 8013188:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801318c:	492f      	ldr	r1, [pc, #188]	; (801324c <etharp_query+0x278>)
 801318e:	482a      	ldr	r0, [pc, #168]	; (8013238 <etharp_query+0x264>)
 8013190:	f001 fd92 	bl	8014cb8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8013194:	69fb      	ldr	r3, [r7, #28]
 8013196:	7b1b      	ldrb	r3, [r3, #12]
 8013198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801319c:	2b00      	cmp	r3, #0
 801319e:	d002      	beq.n	80131a6 <etharp_query+0x1d2>
        copy_needed = 1;
 80131a0:	2301      	movs	r3, #1
 80131a2:	61bb      	str	r3, [r7, #24]
        break;
 80131a4:	e005      	b.n	80131b2 <etharp_query+0x1de>
      }
      p = p->next;
 80131a6:	69fb      	ldr	r3, [r7, #28]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	61fb      	str	r3, [r7, #28]
    while (p) {
 80131ac:	69fb      	ldr	r3, [r7, #28]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d1df      	bne.n	8013172 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80131b2:	69bb      	ldr	r3, [r7, #24]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d007      	beq.n	80131c8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80131b8:	687a      	ldr	r2, [r7, #4]
 80131ba:	f44f 7120 	mov.w	r1, #640	; 0x280
 80131be:	200e      	movs	r0, #14
 80131c0:	f7f8 fe34 	bl	800be2c <pbuf_clone>
 80131c4:	61f8      	str	r0, [r7, #28]
 80131c6:	e004      	b.n	80131d2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80131cc:	69f8      	ldr	r0, [r7, #28]
 80131ce:	f7f8 fc61 	bl	800ba94 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80131d2:	69fb      	ldr	r3, [r7, #28]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d021      	beq.n	801321c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80131d8:	7c7a      	ldrb	r2, [r7, #17]
 80131da:	4918      	ldr	r1, [pc, #96]	; (801323c <etharp_query+0x268>)
 80131dc:	4613      	mov	r3, r2
 80131de:	005b      	lsls	r3, r3, #1
 80131e0:	4413      	add	r3, r2
 80131e2:	00db      	lsls	r3, r3, #3
 80131e4:	440b      	add	r3, r1
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d00a      	beq.n	8013202 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80131ec:	7c7a      	ldrb	r2, [r7, #17]
 80131ee:	4913      	ldr	r1, [pc, #76]	; (801323c <etharp_query+0x268>)
 80131f0:	4613      	mov	r3, r2
 80131f2:	005b      	lsls	r3, r3, #1
 80131f4:	4413      	add	r3, r2
 80131f6:	00db      	lsls	r3, r3, #3
 80131f8:	440b      	add	r3, r1
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	4618      	mov	r0, r3
 80131fe:	f7f8 fba9 	bl	800b954 <pbuf_free>
      }
      arp_table[i].q = p;
 8013202:	7c7a      	ldrb	r2, [r7, #17]
 8013204:	490d      	ldr	r1, [pc, #52]	; (801323c <etharp_query+0x268>)
 8013206:	4613      	mov	r3, r2
 8013208:	005b      	lsls	r3, r3, #1
 801320a:	4413      	add	r3, r2
 801320c:	00db      	lsls	r3, r3, #3
 801320e:	440b      	add	r3, r1
 8013210:	69fa      	ldr	r2, [r7, #28]
 8013212:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8013214:	2300      	movs	r3, #0
 8013216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801321a:	e002      	b.n	8013222 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801321c:	23ff      	movs	r3, #255	; 0xff
 801321e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8013222:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8013226:	4618      	mov	r0, r3
 8013228:	3728      	adds	r7, #40	; 0x28
 801322a:	46bd      	mov	sp, r7
 801322c:	bd80      	pop	{r7, pc}
 801322e:	bf00      	nop
 8013230:	0801814c 	.word	0x0801814c
 8013234:	080182f8 	.word	0x080182f8
 8013238:	080181c4 	.word	0x080181c4
 801323c:	24000134 	.word	0x24000134
 8013240:	08018308 	.word	0x08018308
 8013244:	080182ec 	.word	0x080182ec
 8013248:	24000224 	.word	0x24000224
 801324c:	08018330 	.word	0x08018330

08013250 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8013250:	b580      	push	{r7, lr}
 8013252:	b08a      	sub	sp, #40	; 0x28
 8013254:	af02      	add	r7, sp, #8
 8013256:	60f8      	str	r0, [r7, #12]
 8013258:	60b9      	str	r1, [r7, #8]
 801325a:	607a      	str	r2, [r7, #4]
 801325c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801325e:	2300      	movs	r3, #0
 8013260:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d106      	bne.n	8013276 <etharp_raw+0x26>
 8013268:	4b3a      	ldr	r3, [pc, #232]	; (8013354 <etharp_raw+0x104>)
 801326a:	f240 4257 	movw	r2, #1111	; 0x457
 801326e:	493a      	ldr	r1, [pc, #232]	; (8013358 <etharp_raw+0x108>)
 8013270:	483a      	ldr	r0, [pc, #232]	; (801335c <etharp_raw+0x10c>)
 8013272:	f001 fd21 	bl	8014cb8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8013276:	f44f 7220 	mov.w	r2, #640	; 0x280
 801327a:	211c      	movs	r1, #28
 801327c:	200e      	movs	r0, #14
 801327e:	f7f8 f885 	bl	800b38c <pbuf_alloc>
 8013282:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8013284:	69bb      	ldr	r3, [r7, #24]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d102      	bne.n	8013290 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801328a:	f04f 33ff 	mov.w	r3, #4294967295
 801328e:	e05d      	b.n	801334c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8013290:	69bb      	ldr	r3, [r7, #24]
 8013292:	895b      	ldrh	r3, [r3, #10]
 8013294:	2b1b      	cmp	r3, #27
 8013296:	d806      	bhi.n	80132a6 <etharp_raw+0x56>
 8013298:	4b2e      	ldr	r3, [pc, #184]	; (8013354 <etharp_raw+0x104>)
 801329a:	f240 4262 	movw	r2, #1122	; 0x462
 801329e:	4930      	ldr	r1, [pc, #192]	; (8013360 <etharp_raw+0x110>)
 80132a0:	482e      	ldr	r0, [pc, #184]	; (801335c <etharp_raw+0x10c>)
 80132a2:	f001 fd09 	bl	8014cb8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80132a6:	69bb      	ldr	r3, [r7, #24]
 80132a8:	685b      	ldr	r3, [r3, #4]
 80132aa:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80132ac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80132ae:	4618      	mov	r0, r3
 80132b0:	f7f6 ff3a 	bl	800a128 <lwip_htons>
 80132b4:	4603      	mov	r3, r0
 80132b6:	461a      	mov	r2, r3
 80132b8:	697b      	ldr	r3, [r7, #20]
 80132ba:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80132c2:	2b06      	cmp	r3, #6
 80132c4:	d006      	beq.n	80132d4 <etharp_raw+0x84>
 80132c6:	4b23      	ldr	r3, [pc, #140]	; (8013354 <etharp_raw+0x104>)
 80132c8:	f240 4269 	movw	r2, #1129	; 0x469
 80132cc:	4925      	ldr	r1, [pc, #148]	; (8013364 <etharp_raw+0x114>)
 80132ce:	4823      	ldr	r0, [pc, #140]	; (801335c <etharp_raw+0x10c>)
 80132d0:	f001 fcf2 	bl	8014cb8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80132d4:	697b      	ldr	r3, [r7, #20]
 80132d6:	3308      	adds	r3, #8
 80132d8:	2206      	movs	r2, #6
 80132da:	6839      	ldr	r1, [r7, #0]
 80132dc:	4618      	mov	r0, r3
 80132de:	f001 fcd5 	bl	8014c8c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80132e2:	697b      	ldr	r3, [r7, #20]
 80132e4:	3312      	adds	r3, #18
 80132e6:	2206      	movs	r2, #6
 80132e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80132ea:	4618      	mov	r0, r3
 80132ec:	f001 fcce 	bl	8014c8c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80132f0:	697b      	ldr	r3, [r7, #20]
 80132f2:	330e      	adds	r3, #14
 80132f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80132f6:	6812      	ldr	r2, [r2, #0]
 80132f8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80132fa:	697b      	ldr	r3, [r7, #20]
 80132fc:	3318      	adds	r3, #24
 80132fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013300:	6812      	ldr	r2, [r2, #0]
 8013302:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8013304:	697b      	ldr	r3, [r7, #20]
 8013306:	2200      	movs	r2, #0
 8013308:	701a      	strb	r2, [r3, #0]
 801330a:	2200      	movs	r2, #0
 801330c:	f042 0201 	orr.w	r2, r2, #1
 8013310:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8013312:	697b      	ldr	r3, [r7, #20]
 8013314:	2200      	movs	r2, #0
 8013316:	f042 0208 	orr.w	r2, r2, #8
 801331a:	709a      	strb	r2, [r3, #2]
 801331c:	2200      	movs	r2, #0
 801331e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8013320:	697b      	ldr	r3, [r7, #20]
 8013322:	2206      	movs	r2, #6
 8013324:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8013326:	697b      	ldr	r3, [r7, #20]
 8013328:	2204      	movs	r2, #4
 801332a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801332c:	f640 0306 	movw	r3, #2054	; 0x806
 8013330:	9300      	str	r3, [sp, #0]
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	68ba      	ldr	r2, [r7, #8]
 8013336:	69b9      	ldr	r1, [r7, #24]
 8013338:	68f8      	ldr	r0, [r7, #12]
 801333a:	f001 fc2d 	bl	8014b98 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801333e:	69b8      	ldr	r0, [r7, #24]
 8013340:	f7f8 fb08 	bl	800b954 <pbuf_free>
  p = NULL;
 8013344:	2300      	movs	r3, #0
 8013346:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8013348:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801334c:	4618      	mov	r0, r3
 801334e:	3720      	adds	r7, #32
 8013350:	46bd      	mov	sp, r7
 8013352:	bd80      	pop	{r7, pc}
 8013354:	0801814c 	.word	0x0801814c
 8013358:	0801829c 	.word	0x0801829c
 801335c:	080181c4 	.word	0x080181c4
 8013360:	0801834c 	.word	0x0801834c
 8013364:	08018380 	.word	0x08018380

08013368 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8013368:	b580      	push	{r7, lr}
 801336a:	b088      	sub	sp, #32
 801336c:	af04      	add	r7, sp, #16
 801336e:	60f8      	str	r0, [r7, #12]
 8013370:	60b9      	str	r1, [r7, #8]
 8013372:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013384:	2201      	movs	r2, #1
 8013386:	9203      	str	r2, [sp, #12]
 8013388:	68ba      	ldr	r2, [r7, #8]
 801338a:	9202      	str	r2, [sp, #8]
 801338c:	4a06      	ldr	r2, [pc, #24]	; (80133a8 <etharp_request_dst+0x40>)
 801338e:	9201      	str	r2, [sp, #4]
 8013390:	9300      	str	r3, [sp, #0]
 8013392:	4603      	mov	r3, r0
 8013394:	687a      	ldr	r2, [r7, #4]
 8013396:	68f8      	ldr	r0, [r7, #12]
 8013398:	f7ff ff5a 	bl	8013250 <etharp_raw>
 801339c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801339e:	4618      	mov	r0, r3
 80133a0:	3710      	adds	r7, #16
 80133a2:	46bd      	mov	sp, r7
 80133a4:	bd80      	pop	{r7, pc}
 80133a6:	bf00      	nop
 80133a8:	08019120 	.word	0x08019120

080133ac <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80133ac:	b580      	push	{r7, lr}
 80133ae:	b082      	sub	sp, #8
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	6078      	str	r0, [r7, #4]
 80133b4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80133b6:	4a05      	ldr	r2, [pc, #20]	; (80133cc <etharp_request+0x20>)
 80133b8:	6839      	ldr	r1, [r7, #0]
 80133ba:	6878      	ldr	r0, [r7, #4]
 80133bc:	f7ff ffd4 	bl	8013368 <etharp_request_dst>
 80133c0:	4603      	mov	r3, r0
}
 80133c2:	4618      	mov	r0, r3
 80133c4:	3708      	adds	r7, #8
 80133c6:	46bd      	mov	sp, r7
 80133c8:	bd80      	pop	{r7, pc}
 80133ca:	bf00      	nop
 80133cc:	08019118 	.word	0x08019118

080133d0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80133d0:	b580      	push	{r7, lr}
 80133d2:	b08e      	sub	sp, #56	; 0x38
 80133d4:	af04      	add	r7, sp, #16
 80133d6:	6078      	str	r0, [r7, #4]
 80133d8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80133da:	4b87      	ldr	r3, [pc, #540]	; (80135f8 <icmp_input+0x228>)
 80133dc:	689b      	ldr	r3, [r3, #8]
 80133de:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80133e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133e2:	781b      	ldrb	r3, [r3, #0]
 80133e4:	f003 030f 	and.w	r3, r3, #15
 80133e8:	b2db      	uxtb	r3, r3
 80133ea:	009b      	lsls	r3, r3, #2
 80133ec:	b2db      	uxtb	r3, r3
 80133ee:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80133f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80133f2:	2b13      	cmp	r3, #19
 80133f4:	f240 80e8 	bls.w	80135c8 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	895b      	ldrh	r3, [r3, #10]
 80133fc:	2b03      	cmp	r3, #3
 80133fe:	f240 80e5 	bls.w	80135cc <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	685b      	ldr	r3, [r3, #4]
 8013406:	781b      	ldrb	r3, [r3, #0]
 8013408:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801340c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8013410:	2b00      	cmp	r3, #0
 8013412:	f000 80d2 	beq.w	80135ba <icmp_input+0x1ea>
 8013416:	2b08      	cmp	r3, #8
 8013418:	f040 80d2 	bne.w	80135c0 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801341c:	4b77      	ldr	r3, [pc, #476]	; (80135fc <icmp_input+0x22c>)
 801341e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013420:	4b75      	ldr	r3, [pc, #468]	; (80135f8 <icmp_input+0x228>)
 8013422:	695b      	ldr	r3, [r3, #20]
 8013424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013428:	2be0      	cmp	r3, #224	; 0xe0
 801342a:	f000 80d6 	beq.w	80135da <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801342e:	4b72      	ldr	r3, [pc, #456]	; (80135f8 <icmp_input+0x228>)
 8013430:	695b      	ldr	r3, [r3, #20]
 8013432:	4a71      	ldr	r2, [pc, #452]	; (80135f8 <icmp_input+0x228>)
 8013434:	6812      	ldr	r2, [r2, #0]
 8013436:	4611      	mov	r1, r2
 8013438:	4618      	mov	r0, r3
 801343a:	f000 fc13 	bl	8013c64 <ip4_addr_isbroadcast_u32>
 801343e:	4603      	mov	r3, r0
 8013440:	2b00      	cmp	r3, #0
 8013442:	f040 80cc 	bne.w	80135de <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	891b      	ldrh	r3, [r3, #8]
 801344a:	2b07      	cmp	r3, #7
 801344c:	f240 80c0 	bls.w	80135d0 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8013450:	6878      	ldr	r0, [r7, #4]
 8013452:	f7f6 ff06 	bl	800a262 <inet_chksum_pbuf>
 8013456:	4603      	mov	r3, r0
 8013458:	2b00      	cmp	r3, #0
 801345a:	d003      	beq.n	8013464 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 801345c:	6878      	ldr	r0, [r7, #4]
 801345e:	f7f8 fa79 	bl	800b954 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8013462:	e0c5      	b.n	80135f0 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013464:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013466:	330e      	adds	r3, #14
 8013468:	4619      	mov	r1, r3
 801346a:	6878      	ldr	r0, [r7, #4]
 801346c:	f7f8 f9dc 	bl	800b828 <pbuf_add_header>
 8013470:	4603      	mov	r3, r0
 8013472:	2b00      	cmp	r3, #0
 8013474:	d04b      	beq.n	801350e <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	891a      	ldrh	r2, [r3, #8]
 801347a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801347c:	4413      	add	r3, r2
 801347e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	891b      	ldrh	r3, [r3, #8]
 8013484:	8b7a      	ldrh	r2, [r7, #26]
 8013486:	429a      	cmp	r2, r3
 8013488:	f0c0 80ab 	bcc.w	80135e2 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801348c:	8b7b      	ldrh	r3, [r7, #26]
 801348e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013492:	4619      	mov	r1, r3
 8013494:	200e      	movs	r0, #14
 8013496:	f7f7 ff79 	bl	800b38c <pbuf_alloc>
 801349a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801349c:	697b      	ldr	r3, [r7, #20]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	f000 80a1 	beq.w	80135e6 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80134a4:	697b      	ldr	r3, [r7, #20]
 80134a6:	895b      	ldrh	r3, [r3, #10]
 80134a8:	461a      	mov	r2, r3
 80134aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80134ac:	3308      	adds	r3, #8
 80134ae:	429a      	cmp	r2, r3
 80134b0:	d203      	bcs.n	80134ba <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80134b2:	6978      	ldr	r0, [r7, #20]
 80134b4:	f7f8 fa4e 	bl	800b954 <pbuf_free>
          goto icmperr;
 80134b8:	e096      	b.n	80135e8 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80134ba:	697b      	ldr	r3, [r7, #20]
 80134bc:	685b      	ldr	r3, [r3, #4]
 80134be:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80134c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80134c2:	4618      	mov	r0, r3
 80134c4:	f001 fbe2 	bl	8014c8c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80134c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80134ca:	4619      	mov	r1, r3
 80134cc:	6978      	ldr	r0, [r7, #20]
 80134ce:	f7f8 f9bb 	bl	800b848 <pbuf_remove_header>
 80134d2:	4603      	mov	r3, r0
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d009      	beq.n	80134ec <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80134d8:	4b49      	ldr	r3, [pc, #292]	; (8013600 <icmp_input+0x230>)
 80134da:	22b6      	movs	r2, #182	; 0xb6
 80134dc:	4949      	ldr	r1, [pc, #292]	; (8013604 <icmp_input+0x234>)
 80134de:	484a      	ldr	r0, [pc, #296]	; (8013608 <icmp_input+0x238>)
 80134e0:	f001 fbea 	bl	8014cb8 <iprintf>
          pbuf_free(r);
 80134e4:	6978      	ldr	r0, [r7, #20]
 80134e6:	f7f8 fa35 	bl	800b954 <pbuf_free>
          goto icmperr;
 80134ea:	e07d      	b.n	80135e8 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80134ec:	6879      	ldr	r1, [r7, #4]
 80134ee:	6978      	ldr	r0, [r7, #20]
 80134f0:	f7f8 fb58 	bl	800bba4 <pbuf_copy>
 80134f4:	4603      	mov	r3, r0
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d003      	beq.n	8013502 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80134fa:	6978      	ldr	r0, [r7, #20]
 80134fc:	f7f8 fa2a 	bl	800b954 <pbuf_free>
          goto icmperr;
 8013500:	e072      	b.n	80135e8 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8013502:	6878      	ldr	r0, [r7, #4]
 8013504:	f7f8 fa26 	bl	800b954 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8013508:	697b      	ldr	r3, [r7, #20]
 801350a:	607b      	str	r3, [r7, #4]
 801350c:	e00f      	b.n	801352e <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801350e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013510:	330e      	adds	r3, #14
 8013512:	4619      	mov	r1, r3
 8013514:	6878      	ldr	r0, [r7, #4]
 8013516:	f7f8 f997 	bl	800b848 <pbuf_remove_header>
 801351a:	4603      	mov	r3, r0
 801351c:	2b00      	cmp	r3, #0
 801351e:	d006      	beq.n	801352e <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013520:	4b37      	ldr	r3, [pc, #220]	; (8013600 <icmp_input+0x230>)
 8013522:	22c7      	movs	r2, #199	; 0xc7
 8013524:	4939      	ldr	r1, [pc, #228]	; (801360c <icmp_input+0x23c>)
 8013526:	4838      	ldr	r0, [pc, #224]	; (8013608 <icmp_input+0x238>)
 8013528:	f001 fbc6 	bl	8014cb8 <iprintf>
          goto icmperr;
 801352c:	e05c      	b.n	80135e8 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	685b      	ldr	r3, [r3, #4]
 8013532:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8013534:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013536:	4619      	mov	r1, r3
 8013538:	6878      	ldr	r0, [r7, #4]
 801353a:	f7f8 f975 	bl	800b828 <pbuf_add_header>
 801353e:	4603      	mov	r3, r0
 8013540:	2b00      	cmp	r3, #0
 8013542:	d13c      	bne.n	80135be <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	685b      	ldr	r3, [r3, #4]
 8013548:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801354a:	69fb      	ldr	r3, [r7, #28]
 801354c:	681a      	ldr	r2, [r3, #0]
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8013552:	4b29      	ldr	r3, [pc, #164]	; (80135f8 <icmp_input+0x228>)
 8013554:	691a      	ldr	r2, [r3, #16]
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801355a:	693b      	ldr	r3, [r7, #16]
 801355c:	2200      	movs	r2, #0
 801355e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8013560:	693b      	ldr	r3, [r7, #16]
 8013562:	885b      	ldrh	r3, [r3, #2]
 8013564:	b29b      	uxth	r3, r3
 8013566:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801356a:	4293      	cmp	r3, r2
 801356c:	d907      	bls.n	801357e <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801356e:	693b      	ldr	r3, [r7, #16]
 8013570:	885b      	ldrh	r3, [r3, #2]
 8013572:	b29b      	uxth	r3, r3
 8013574:	3309      	adds	r3, #9
 8013576:	b29a      	uxth	r2, r3
 8013578:	693b      	ldr	r3, [r7, #16]
 801357a:	805a      	strh	r2, [r3, #2]
 801357c:	e006      	b.n	801358c <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801357e:	693b      	ldr	r3, [r7, #16]
 8013580:	885b      	ldrh	r3, [r3, #2]
 8013582:	b29b      	uxth	r3, r3
 8013584:	3308      	adds	r3, #8
 8013586:	b29a      	uxth	r2, r3
 8013588:	693b      	ldr	r3, [r7, #16]
 801358a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	22ff      	movs	r2, #255	; 0xff
 8013590:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	2200      	movs	r2, #0
 8013596:	729a      	strb	r2, [r3, #10]
 8013598:	2200      	movs	r2, #0
 801359a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801359c:	683b      	ldr	r3, [r7, #0]
 801359e:	9302      	str	r3, [sp, #8]
 80135a0:	2301      	movs	r3, #1
 80135a2:	9301      	str	r3, [sp, #4]
 80135a4:	2300      	movs	r3, #0
 80135a6:	9300      	str	r3, [sp, #0]
 80135a8:	23ff      	movs	r3, #255	; 0xff
 80135aa:	2200      	movs	r2, #0
 80135ac:	69f9      	ldr	r1, [r7, #28]
 80135ae:	6878      	ldr	r0, [r7, #4]
 80135b0:	f000 fa80 	bl	8013ab4 <ip4_output_if>
 80135b4:	4603      	mov	r3, r0
 80135b6:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80135b8:	e001      	b.n	80135be <icmp_input+0x1ee>
      break;
 80135ba:	bf00      	nop
 80135bc:	e000      	b.n	80135c0 <icmp_input+0x1f0>
      break;
 80135be:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80135c0:	6878      	ldr	r0, [r7, #4]
 80135c2:	f7f8 f9c7 	bl	800b954 <pbuf_free>
  return;
 80135c6:	e013      	b.n	80135f0 <icmp_input+0x220>
    goto lenerr;
 80135c8:	bf00      	nop
 80135ca:	e002      	b.n	80135d2 <icmp_input+0x202>
    goto lenerr;
 80135cc:	bf00      	nop
 80135ce:	e000      	b.n	80135d2 <icmp_input+0x202>
        goto lenerr;
 80135d0:	bf00      	nop
lenerr:
  pbuf_free(p);
 80135d2:	6878      	ldr	r0, [r7, #4]
 80135d4:	f7f8 f9be 	bl	800b954 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80135d8:	e00a      	b.n	80135f0 <icmp_input+0x220>
        goto icmperr;
 80135da:	bf00      	nop
 80135dc:	e004      	b.n	80135e8 <icmp_input+0x218>
        goto icmperr;
 80135de:	bf00      	nop
 80135e0:	e002      	b.n	80135e8 <icmp_input+0x218>
          goto icmperr;
 80135e2:	bf00      	nop
 80135e4:	e000      	b.n	80135e8 <icmp_input+0x218>
          goto icmperr;
 80135e6:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80135e8:	6878      	ldr	r0, [r7, #4]
 80135ea:	f7f8 f9b3 	bl	800b954 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80135ee:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80135f0:	3728      	adds	r7, #40	; 0x28
 80135f2:	46bd      	mov	sp, r7
 80135f4:	bd80      	pop	{r7, pc}
 80135f6:	bf00      	nop
 80135f8:	24000724 	.word	0x24000724
 80135fc:	24000738 	.word	0x24000738
 8013600:	080183c4 	.word	0x080183c4
 8013604:	080183fc 	.word	0x080183fc
 8013608:	08018434 	.word	0x08018434
 801360c:	0801845c 	.word	0x0801845c

08013610 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013610:	b580      	push	{r7, lr}
 8013612:	b082      	sub	sp, #8
 8013614:	af00      	add	r7, sp, #0
 8013616:	6078      	str	r0, [r7, #4]
 8013618:	460b      	mov	r3, r1
 801361a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801361c:	78fb      	ldrb	r3, [r7, #3]
 801361e:	461a      	mov	r2, r3
 8013620:	2103      	movs	r1, #3
 8013622:	6878      	ldr	r0, [r7, #4]
 8013624:	f000 f814 	bl	8013650 <icmp_send_response>
}
 8013628:	bf00      	nop
 801362a:	3708      	adds	r7, #8
 801362c:	46bd      	mov	sp, r7
 801362e:	bd80      	pop	{r7, pc}

08013630 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013630:	b580      	push	{r7, lr}
 8013632:	b082      	sub	sp, #8
 8013634:	af00      	add	r7, sp, #0
 8013636:	6078      	str	r0, [r7, #4]
 8013638:	460b      	mov	r3, r1
 801363a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801363c:	78fb      	ldrb	r3, [r7, #3]
 801363e:	461a      	mov	r2, r3
 8013640:	210b      	movs	r1, #11
 8013642:	6878      	ldr	r0, [r7, #4]
 8013644:	f000 f804 	bl	8013650 <icmp_send_response>
}
 8013648:	bf00      	nop
 801364a:	3708      	adds	r7, #8
 801364c:	46bd      	mov	sp, r7
 801364e:	bd80      	pop	{r7, pc}

08013650 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013650:	b580      	push	{r7, lr}
 8013652:	b08c      	sub	sp, #48	; 0x30
 8013654:	af04      	add	r7, sp, #16
 8013656:	6078      	str	r0, [r7, #4]
 8013658:	460b      	mov	r3, r1
 801365a:	70fb      	strb	r3, [r7, #3]
 801365c:	4613      	mov	r3, r2
 801365e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013660:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013664:	2124      	movs	r1, #36	; 0x24
 8013666:	2022      	movs	r0, #34	; 0x22
 8013668:	f7f7 fe90 	bl	800b38c <pbuf_alloc>
 801366c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801366e:	69fb      	ldr	r3, [r7, #28]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d056      	beq.n	8013722 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013674:	69fb      	ldr	r3, [r7, #28]
 8013676:	895b      	ldrh	r3, [r3, #10]
 8013678:	2b23      	cmp	r3, #35	; 0x23
 801367a:	d806      	bhi.n	801368a <icmp_send_response+0x3a>
 801367c:	4b2b      	ldr	r3, [pc, #172]	; (801372c <icmp_send_response+0xdc>)
 801367e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8013682:	492b      	ldr	r1, [pc, #172]	; (8013730 <icmp_send_response+0xe0>)
 8013684:	482b      	ldr	r0, [pc, #172]	; (8013734 <icmp_send_response+0xe4>)
 8013686:	f001 fb17 	bl	8014cb8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	685b      	ldr	r3, [r3, #4]
 801368e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013690:	69fb      	ldr	r3, [r7, #28]
 8013692:	685b      	ldr	r3, [r3, #4]
 8013694:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8013696:	697b      	ldr	r3, [r7, #20]
 8013698:	78fa      	ldrb	r2, [r7, #3]
 801369a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801369c:	697b      	ldr	r3, [r7, #20]
 801369e:	78ba      	ldrb	r2, [r7, #2]
 80136a0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80136a2:	697b      	ldr	r3, [r7, #20]
 80136a4:	2200      	movs	r2, #0
 80136a6:	711a      	strb	r2, [r3, #4]
 80136a8:	2200      	movs	r2, #0
 80136aa:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80136ac:	697b      	ldr	r3, [r7, #20]
 80136ae:	2200      	movs	r2, #0
 80136b0:	719a      	strb	r2, [r3, #6]
 80136b2:	2200      	movs	r2, #0
 80136b4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80136b6:	69fb      	ldr	r3, [r7, #28]
 80136b8:	685b      	ldr	r3, [r3, #4]
 80136ba:	f103 0008 	add.w	r0, r3, #8
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	685b      	ldr	r3, [r3, #4]
 80136c2:	221c      	movs	r2, #28
 80136c4:	4619      	mov	r1, r3
 80136c6:	f001 fae1 	bl	8014c8c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80136ca:	69bb      	ldr	r3, [r7, #24]
 80136cc:	68db      	ldr	r3, [r3, #12]
 80136ce:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80136d0:	f107 030c 	add.w	r3, r7, #12
 80136d4:	4618      	mov	r0, r3
 80136d6:	f000 f82f 	bl	8013738 <ip4_route>
 80136da:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80136dc:	693b      	ldr	r3, [r7, #16]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d01b      	beq.n	801371a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80136e2:	697b      	ldr	r3, [r7, #20]
 80136e4:	2200      	movs	r2, #0
 80136e6:	709a      	strb	r2, [r3, #2]
 80136e8:	2200      	movs	r2, #0
 80136ea:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80136ec:	69fb      	ldr	r3, [r7, #28]
 80136ee:	895b      	ldrh	r3, [r3, #10]
 80136f0:	4619      	mov	r1, r3
 80136f2:	6978      	ldr	r0, [r7, #20]
 80136f4:	f7f6 fda3 	bl	800a23e <inet_chksum>
 80136f8:	4603      	mov	r3, r0
 80136fa:	461a      	mov	r2, r3
 80136fc:	697b      	ldr	r3, [r7, #20]
 80136fe:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013700:	f107 020c 	add.w	r2, r7, #12
 8013704:	693b      	ldr	r3, [r7, #16]
 8013706:	9302      	str	r3, [sp, #8]
 8013708:	2301      	movs	r3, #1
 801370a:	9301      	str	r3, [sp, #4]
 801370c:	2300      	movs	r3, #0
 801370e:	9300      	str	r3, [sp, #0]
 8013710:	23ff      	movs	r3, #255	; 0xff
 8013712:	2100      	movs	r1, #0
 8013714:	69f8      	ldr	r0, [r7, #28]
 8013716:	f000 f9cd 	bl	8013ab4 <ip4_output_if>
  }
  pbuf_free(q);
 801371a:	69f8      	ldr	r0, [r7, #28]
 801371c:	f7f8 f91a 	bl	800b954 <pbuf_free>
 8013720:	e000      	b.n	8013724 <icmp_send_response+0xd4>
    return;
 8013722:	bf00      	nop
}
 8013724:	3720      	adds	r7, #32
 8013726:	46bd      	mov	sp, r7
 8013728:	bd80      	pop	{r7, pc}
 801372a:	bf00      	nop
 801372c:	080183c4 	.word	0x080183c4
 8013730:	08018490 	.word	0x08018490
 8013734:	08018434 	.word	0x08018434

08013738 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013738:	b480      	push	{r7}
 801373a:	b085      	sub	sp, #20
 801373c:	af00      	add	r7, sp, #0
 801373e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013740:	4b33      	ldr	r3, [pc, #204]	; (8013810 <ip4_route+0xd8>)
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	60fb      	str	r3, [r7, #12]
 8013746:	e036      	b.n	80137b6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013748:	68fb      	ldr	r3, [r7, #12]
 801374a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801374e:	f003 0301 	and.w	r3, r3, #1
 8013752:	b2db      	uxtb	r3, r3
 8013754:	2b00      	cmp	r3, #0
 8013756:	d02b      	beq.n	80137b0 <ip4_route+0x78>
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801375e:	089b      	lsrs	r3, r3, #2
 8013760:	f003 0301 	and.w	r3, r3, #1
 8013764:	b2db      	uxtb	r3, r3
 8013766:	2b00      	cmp	r3, #0
 8013768:	d022      	beq.n	80137b0 <ip4_route+0x78>
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	3304      	adds	r3, #4
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	2b00      	cmp	r3, #0
 8013772:	d01d      	beq.n	80137b0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	681a      	ldr	r2, [r3, #0]
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	3304      	adds	r3, #4
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	405a      	eors	r2, r3
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	3308      	adds	r3, #8
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	4013      	ands	r3, r2
 8013788:	2b00      	cmp	r3, #0
 801378a:	d101      	bne.n	8013790 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	e038      	b.n	8013802 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013796:	f003 0302 	and.w	r3, r3, #2
 801379a:	2b00      	cmp	r3, #0
 801379c:	d108      	bne.n	80137b0 <ip4_route+0x78>
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	681a      	ldr	r2, [r3, #0]
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	330c      	adds	r3, #12
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	429a      	cmp	r2, r3
 80137aa:	d101      	bne.n	80137b0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	e028      	b.n	8013802 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	60fb      	str	r3, [r7, #12]
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d1c5      	bne.n	8013748 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80137bc:	4b15      	ldr	r3, [pc, #84]	; (8013814 <ip4_route+0xdc>)
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d01a      	beq.n	80137fa <ip4_route+0xc2>
 80137c4:	4b13      	ldr	r3, [pc, #76]	; (8013814 <ip4_route+0xdc>)
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80137cc:	f003 0301 	and.w	r3, r3, #1
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d012      	beq.n	80137fa <ip4_route+0xc2>
 80137d4:	4b0f      	ldr	r3, [pc, #60]	; (8013814 <ip4_route+0xdc>)
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80137dc:	f003 0304 	and.w	r3, r3, #4
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d00a      	beq.n	80137fa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80137e4:	4b0b      	ldr	r3, [pc, #44]	; (8013814 <ip4_route+0xdc>)
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	3304      	adds	r3, #4
 80137ea:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d004      	beq.n	80137fa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	b2db      	uxtb	r3, r3
 80137f6:	2b7f      	cmp	r3, #127	; 0x7f
 80137f8:	d101      	bne.n	80137fe <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80137fa:	2300      	movs	r3, #0
 80137fc:	e001      	b.n	8013802 <ip4_route+0xca>
  }

  return netif_default;
 80137fe:	4b05      	ldr	r3, [pc, #20]	; (8013814 <ip4_route+0xdc>)
 8013800:	681b      	ldr	r3, [r3, #0]
}
 8013802:	4618      	mov	r0, r3
 8013804:	3714      	adds	r7, #20
 8013806:	46bd      	mov	sp, r7
 8013808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801380c:	4770      	bx	lr
 801380e:	bf00      	nop
 8013810:	24003604 	.word	0x24003604
 8013814:	24003608 	.word	0x24003608

08013818 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8013818:	b580      	push	{r7, lr}
 801381a:	b082      	sub	sp, #8
 801381c:	af00      	add	r7, sp, #0
 801381e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013826:	f003 0301 	and.w	r3, r3, #1
 801382a:	b2db      	uxtb	r3, r3
 801382c:	2b00      	cmp	r3, #0
 801382e:	d016      	beq.n	801385e <ip4_input_accept+0x46>
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	3304      	adds	r3, #4
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d011      	beq.n	801385e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801383a:	4b0b      	ldr	r3, [pc, #44]	; (8013868 <ip4_input_accept+0x50>)
 801383c:	695a      	ldr	r2, [r3, #20]
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	3304      	adds	r3, #4
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	429a      	cmp	r2, r3
 8013846:	d008      	beq.n	801385a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8013848:	4b07      	ldr	r3, [pc, #28]	; (8013868 <ip4_input_accept+0x50>)
 801384a:	695b      	ldr	r3, [r3, #20]
 801384c:	6879      	ldr	r1, [r7, #4]
 801384e:	4618      	mov	r0, r3
 8013850:	f000 fa08 	bl	8013c64 <ip4_addr_isbroadcast_u32>
 8013854:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013856:	2b00      	cmp	r3, #0
 8013858:	d001      	beq.n	801385e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801385a:	2301      	movs	r3, #1
 801385c:	e000      	b.n	8013860 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801385e:	2300      	movs	r3, #0
}
 8013860:	4618      	mov	r0, r3
 8013862:	3708      	adds	r7, #8
 8013864:	46bd      	mov	sp, r7
 8013866:	bd80      	pop	{r7, pc}
 8013868:	24000724 	.word	0x24000724

0801386c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801386c:	b580      	push	{r7, lr}
 801386e:	b086      	sub	sp, #24
 8013870:	af00      	add	r7, sp, #0
 8013872:	6078      	str	r0, [r7, #4]
 8013874:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	685b      	ldr	r3, [r3, #4]
 801387a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801387c:	697b      	ldr	r3, [r7, #20]
 801387e:	781b      	ldrb	r3, [r3, #0]
 8013880:	091b      	lsrs	r3, r3, #4
 8013882:	b2db      	uxtb	r3, r3
 8013884:	2b04      	cmp	r3, #4
 8013886:	d004      	beq.n	8013892 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8013888:	6878      	ldr	r0, [r7, #4]
 801388a:	f7f8 f863 	bl	800b954 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801388e:	2300      	movs	r3, #0
 8013890:	e107      	b.n	8013aa2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8013892:	697b      	ldr	r3, [r7, #20]
 8013894:	781b      	ldrb	r3, [r3, #0]
 8013896:	f003 030f 	and.w	r3, r3, #15
 801389a:	b2db      	uxtb	r3, r3
 801389c:	009b      	lsls	r3, r3, #2
 801389e:	b2db      	uxtb	r3, r3
 80138a0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80138a2:	697b      	ldr	r3, [r7, #20]
 80138a4:	885b      	ldrh	r3, [r3, #2]
 80138a6:	b29b      	uxth	r3, r3
 80138a8:	4618      	mov	r0, r3
 80138aa:	f7f6 fc3d 	bl	800a128 <lwip_htons>
 80138ae:	4603      	mov	r3, r0
 80138b0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	891b      	ldrh	r3, [r3, #8]
 80138b6:	89ba      	ldrh	r2, [r7, #12]
 80138b8:	429a      	cmp	r2, r3
 80138ba:	d204      	bcs.n	80138c6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80138bc:	89bb      	ldrh	r3, [r7, #12]
 80138be:	4619      	mov	r1, r3
 80138c0:	6878      	ldr	r0, [r7, #4]
 80138c2:	f7f7 fec1 	bl	800b648 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	895b      	ldrh	r3, [r3, #10]
 80138ca:	89fa      	ldrh	r2, [r7, #14]
 80138cc:	429a      	cmp	r2, r3
 80138ce:	d807      	bhi.n	80138e0 <ip4_input+0x74>
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	891b      	ldrh	r3, [r3, #8]
 80138d4:	89ba      	ldrh	r2, [r7, #12]
 80138d6:	429a      	cmp	r2, r3
 80138d8:	d802      	bhi.n	80138e0 <ip4_input+0x74>
 80138da:	89fb      	ldrh	r3, [r7, #14]
 80138dc:	2b13      	cmp	r3, #19
 80138de:	d804      	bhi.n	80138ea <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80138e0:	6878      	ldr	r0, [r7, #4]
 80138e2:	f7f8 f837 	bl	800b954 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80138e6:	2300      	movs	r3, #0
 80138e8:	e0db      	b.n	8013aa2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80138ea:	697b      	ldr	r3, [r7, #20]
 80138ec:	691b      	ldr	r3, [r3, #16]
 80138ee:	4a6f      	ldr	r2, [pc, #444]	; (8013aac <ip4_input+0x240>)
 80138f0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80138f2:	697b      	ldr	r3, [r7, #20]
 80138f4:	68db      	ldr	r3, [r3, #12]
 80138f6:	4a6d      	ldr	r2, [pc, #436]	; (8013aac <ip4_input+0x240>)
 80138f8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80138fa:	4b6c      	ldr	r3, [pc, #432]	; (8013aac <ip4_input+0x240>)
 80138fc:	695b      	ldr	r3, [r3, #20]
 80138fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013902:	2be0      	cmp	r3, #224	; 0xe0
 8013904:	d112      	bne.n	801392c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013906:	683b      	ldr	r3, [r7, #0]
 8013908:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801390c:	f003 0301 	and.w	r3, r3, #1
 8013910:	b2db      	uxtb	r3, r3
 8013912:	2b00      	cmp	r3, #0
 8013914:	d007      	beq.n	8013926 <ip4_input+0xba>
 8013916:	683b      	ldr	r3, [r7, #0]
 8013918:	3304      	adds	r3, #4
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d002      	beq.n	8013926 <ip4_input+0xba>
      netif = inp;
 8013920:	683b      	ldr	r3, [r7, #0]
 8013922:	613b      	str	r3, [r7, #16]
 8013924:	e02a      	b.n	801397c <ip4_input+0x110>
    } else {
      netif = NULL;
 8013926:	2300      	movs	r3, #0
 8013928:	613b      	str	r3, [r7, #16]
 801392a:	e027      	b.n	801397c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801392c:	6838      	ldr	r0, [r7, #0]
 801392e:	f7ff ff73 	bl	8013818 <ip4_input_accept>
 8013932:	4603      	mov	r3, r0
 8013934:	2b00      	cmp	r3, #0
 8013936:	d002      	beq.n	801393e <ip4_input+0xd2>
      netif = inp;
 8013938:	683b      	ldr	r3, [r7, #0]
 801393a:	613b      	str	r3, [r7, #16]
 801393c:	e01e      	b.n	801397c <ip4_input+0x110>
    } else {
      netif = NULL;
 801393e:	2300      	movs	r3, #0
 8013940:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8013942:	4b5a      	ldr	r3, [pc, #360]	; (8013aac <ip4_input+0x240>)
 8013944:	695b      	ldr	r3, [r3, #20]
 8013946:	b2db      	uxtb	r3, r3
 8013948:	2b7f      	cmp	r3, #127	; 0x7f
 801394a:	d017      	beq.n	801397c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801394c:	4b58      	ldr	r3, [pc, #352]	; (8013ab0 <ip4_input+0x244>)
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	613b      	str	r3, [r7, #16]
 8013952:	e00e      	b.n	8013972 <ip4_input+0x106>
          if (netif == inp) {
 8013954:	693a      	ldr	r2, [r7, #16]
 8013956:	683b      	ldr	r3, [r7, #0]
 8013958:	429a      	cmp	r2, r3
 801395a:	d006      	beq.n	801396a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801395c:	6938      	ldr	r0, [r7, #16]
 801395e:	f7ff ff5b 	bl	8013818 <ip4_input_accept>
 8013962:	4603      	mov	r3, r0
 8013964:	2b00      	cmp	r3, #0
 8013966:	d108      	bne.n	801397a <ip4_input+0x10e>
 8013968:	e000      	b.n	801396c <ip4_input+0x100>
            continue;
 801396a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801396c:	693b      	ldr	r3, [r7, #16]
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	613b      	str	r3, [r7, #16]
 8013972:	693b      	ldr	r3, [r7, #16]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d1ed      	bne.n	8013954 <ip4_input+0xe8>
 8013978:	e000      	b.n	801397c <ip4_input+0x110>
            break;
 801397a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801397c:	4b4b      	ldr	r3, [pc, #300]	; (8013aac <ip4_input+0x240>)
 801397e:	691b      	ldr	r3, [r3, #16]
 8013980:	6839      	ldr	r1, [r7, #0]
 8013982:	4618      	mov	r0, r3
 8013984:	f000 f96e 	bl	8013c64 <ip4_addr_isbroadcast_u32>
 8013988:	4603      	mov	r3, r0
 801398a:	2b00      	cmp	r3, #0
 801398c:	d105      	bne.n	801399a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801398e:	4b47      	ldr	r3, [pc, #284]	; (8013aac <ip4_input+0x240>)
 8013990:	691b      	ldr	r3, [r3, #16]
 8013992:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013996:	2be0      	cmp	r3, #224	; 0xe0
 8013998:	d104      	bne.n	80139a4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801399a:	6878      	ldr	r0, [r7, #4]
 801399c:	f7f7 ffda 	bl	800b954 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80139a0:	2300      	movs	r3, #0
 80139a2:	e07e      	b.n	8013aa2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80139a4:	693b      	ldr	r3, [r7, #16]
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d104      	bne.n	80139b4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80139aa:	6878      	ldr	r0, [r7, #4]
 80139ac:	f7f7 ffd2 	bl	800b954 <pbuf_free>
    return ERR_OK;
 80139b0:	2300      	movs	r3, #0
 80139b2:	e076      	b.n	8013aa2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80139b4:	697b      	ldr	r3, [r7, #20]
 80139b6:	88db      	ldrh	r3, [r3, #6]
 80139b8:	b29b      	uxth	r3, r3
 80139ba:	461a      	mov	r2, r3
 80139bc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80139c0:	4013      	ands	r3, r2
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d00b      	beq.n	80139de <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80139c6:	6878      	ldr	r0, [r7, #4]
 80139c8:	f000 fd24 	bl	8014414 <ip4_reass>
 80139cc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d101      	bne.n	80139d8 <ip4_input+0x16c>
      return ERR_OK;
 80139d4:	2300      	movs	r3, #0
 80139d6:	e064      	b.n	8013aa2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	685b      	ldr	r3, [r3, #4]
 80139dc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80139de:	4a33      	ldr	r2, [pc, #204]	; (8013aac <ip4_input+0x240>)
 80139e0:	693b      	ldr	r3, [r7, #16]
 80139e2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80139e4:	4a31      	ldr	r2, [pc, #196]	; (8013aac <ip4_input+0x240>)
 80139e6:	683b      	ldr	r3, [r7, #0]
 80139e8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80139ea:	4a30      	ldr	r2, [pc, #192]	; (8013aac <ip4_input+0x240>)
 80139ec:	697b      	ldr	r3, [r7, #20]
 80139ee:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80139f0:	697b      	ldr	r3, [r7, #20]
 80139f2:	781b      	ldrb	r3, [r3, #0]
 80139f4:	f003 030f 	and.w	r3, r3, #15
 80139f8:	b2db      	uxtb	r3, r3
 80139fa:	009b      	lsls	r3, r3, #2
 80139fc:	b2db      	uxtb	r3, r3
 80139fe:	b29a      	uxth	r2, r3
 8013a00:	4b2a      	ldr	r3, [pc, #168]	; (8013aac <ip4_input+0x240>)
 8013a02:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013a04:	89fb      	ldrh	r3, [r7, #14]
 8013a06:	4619      	mov	r1, r3
 8013a08:	6878      	ldr	r0, [r7, #4]
 8013a0a:	f7f7 ff1d 	bl	800b848 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8013a0e:	697b      	ldr	r3, [r7, #20]
 8013a10:	7a5b      	ldrb	r3, [r3, #9]
 8013a12:	2b11      	cmp	r3, #17
 8013a14:	d006      	beq.n	8013a24 <ip4_input+0x1b8>
 8013a16:	2b11      	cmp	r3, #17
 8013a18:	dc13      	bgt.n	8013a42 <ip4_input+0x1d6>
 8013a1a:	2b01      	cmp	r3, #1
 8013a1c:	d00c      	beq.n	8013a38 <ip4_input+0x1cc>
 8013a1e:	2b06      	cmp	r3, #6
 8013a20:	d005      	beq.n	8013a2e <ip4_input+0x1c2>
 8013a22:	e00e      	b.n	8013a42 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013a24:	6839      	ldr	r1, [r7, #0]
 8013a26:	6878      	ldr	r0, [r7, #4]
 8013a28:	f7fe fc42 	bl	80122b0 <udp_input>
        break;
 8013a2c:	e026      	b.n	8013a7c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013a2e:	6839      	ldr	r1, [r7, #0]
 8013a30:	6878      	ldr	r0, [r7, #4]
 8013a32:	f7fa f867 	bl	800db04 <tcp_input>
        break;
 8013a36:	e021      	b.n	8013a7c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8013a38:	6839      	ldr	r1, [r7, #0]
 8013a3a:	6878      	ldr	r0, [r7, #4]
 8013a3c:	f7ff fcc8 	bl	80133d0 <icmp_input>
        break;
 8013a40:	e01c      	b.n	8013a7c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013a42:	4b1a      	ldr	r3, [pc, #104]	; (8013aac <ip4_input+0x240>)
 8013a44:	695b      	ldr	r3, [r3, #20]
 8013a46:	6939      	ldr	r1, [r7, #16]
 8013a48:	4618      	mov	r0, r3
 8013a4a:	f000 f90b 	bl	8013c64 <ip4_addr_isbroadcast_u32>
 8013a4e:	4603      	mov	r3, r0
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d10f      	bne.n	8013a74 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013a54:	4b15      	ldr	r3, [pc, #84]	; (8013aac <ip4_input+0x240>)
 8013a56:	695b      	ldr	r3, [r3, #20]
 8013a58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013a5c:	2be0      	cmp	r3, #224	; 0xe0
 8013a5e:	d009      	beq.n	8013a74 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013a60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013a64:	4619      	mov	r1, r3
 8013a66:	6878      	ldr	r0, [r7, #4]
 8013a68:	f7f7 ff61 	bl	800b92e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013a6c:	2102      	movs	r1, #2
 8013a6e:	6878      	ldr	r0, [r7, #4]
 8013a70:	f7ff fdce 	bl	8013610 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013a74:	6878      	ldr	r0, [r7, #4]
 8013a76:	f7f7 ff6d 	bl	800b954 <pbuf_free>
        break;
 8013a7a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013a7c:	4b0b      	ldr	r3, [pc, #44]	; (8013aac <ip4_input+0x240>)
 8013a7e:	2200      	movs	r2, #0
 8013a80:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013a82:	4b0a      	ldr	r3, [pc, #40]	; (8013aac <ip4_input+0x240>)
 8013a84:	2200      	movs	r2, #0
 8013a86:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8013a88:	4b08      	ldr	r3, [pc, #32]	; (8013aac <ip4_input+0x240>)
 8013a8a:	2200      	movs	r2, #0
 8013a8c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013a8e:	4b07      	ldr	r3, [pc, #28]	; (8013aac <ip4_input+0x240>)
 8013a90:	2200      	movs	r2, #0
 8013a92:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013a94:	4b05      	ldr	r3, [pc, #20]	; (8013aac <ip4_input+0x240>)
 8013a96:	2200      	movs	r2, #0
 8013a98:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8013a9a:	4b04      	ldr	r3, [pc, #16]	; (8013aac <ip4_input+0x240>)
 8013a9c:	2200      	movs	r2, #0
 8013a9e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013aa0:	2300      	movs	r3, #0
}
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	3718      	adds	r7, #24
 8013aa6:	46bd      	mov	sp, r7
 8013aa8:	bd80      	pop	{r7, pc}
 8013aaa:	bf00      	nop
 8013aac:	24000724 	.word	0x24000724
 8013ab0:	24003604 	.word	0x24003604

08013ab4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013ab4:	b580      	push	{r7, lr}
 8013ab6:	b08a      	sub	sp, #40	; 0x28
 8013ab8:	af04      	add	r7, sp, #16
 8013aba:	60f8      	str	r0, [r7, #12]
 8013abc:	60b9      	str	r1, [r7, #8]
 8013abe:	607a      	str	r2, [r7, #4]
 8013ac0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013ac2:	68bb      	ldr	r3, [r7, #8]
 8013ac4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d009      	beq.n	8013ae0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013acc:	68bb      	ldr	r3, [r7, #8]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d003      	beq.n	8013ada <ip4_output_if+0x26>
 8013ad2:	68bb      	ldr	r3, [r7, #8]
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d102      	bne.n	8013ae0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013adc:	3304      	adds	r3, #4
 8013ade:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013ae0:	78fa      	ldrb	r2, [r7, #3]
 8013ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ae4:	9302      	str	r3, [sp, #8]
 8013ae6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013aea:	9301      	str	r3, [sp, #4]
 8013aec:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013af0:	9300      	str	r3, [sp, #0]
 8013af2:	4613      	mov	r3, r2
 8013af4:	687a      	ldr	r2, [r7, #4]
 8013af6:	6979      	ldr	r1, [r7, #20]
 8013af8:	68f8      	ldr	r0, [r7, #12]
 8013afa:	f000 f805 	bl	8013b08 <ip4_output_if_src>
 8013afe:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013b00:	4618      	mov	r0, r3
 8013b02:	3718      	adds	r7, #24
 8013b04:	46bd      	mov	sp, r7
 8013b06:	bd80      	pop	{r7, pc}

08013b08 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013b08:	b580      	push	{r7, lr}
 8013b0a:	b088      	sub	sp, #32
 8013b0c:	af00      	add	r7, sp, #0
 8013b0e:	60f8      	str	r0, [r7, #12]
 8013b10:	60b9      	str	r1, [r7, #8]
 8013b12:	607a      	str	r2, [r7, #4]
 8013b14:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	7b9b      	ldrb	r3, [r3, #14]
 8013b1a:	2b01      	cmp	r3, #1
 8013b1c:	d006      	beq.n	8013b2c <ip4_output_if_src+0x24>
 8013b1e:	4b4b      	ldr	r3, [pc, #300]	; (8013c4c <ip4_output_if_src+0x144>)
 8013b20:	f44f 7255 	mov.w	r2, #852	; 0x354
 8013b24:	494a      	ldr	r1, [pc, #296]	; (8013c50 <ip4_output_if_src+0x148>)
 8013b26:	484b      	ldr	r0, [pc, #300]	; (8013c54 <ip4_output_if_src+0x14c>)
 8013b28:	f001 f8c6 	bl	8014cb8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d060      	beq.n	8013bf4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013b32:	2314      	movs	r3, #20
 8013b34:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8013b36:	2114      	movs	r1, #20
 8013b38:	68f8      	ldr	r0, [r7, #12]
 8013b3a:	f7f7 fe75 	bl	800b828 <pbuf_add_header>
 8013b3e:	4603      	mov	r3, r0
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d002      	beq.n	8013b4a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013b44:	f06f 0301 	mvn.w	r3, #1
 8013b48:	e07c      	b.n	8013c44 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	685b      	ldr	r3, [r3, #4]
 8013b4e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	895b      	ldrh	r3, [r3, #10]
 8013b54:	2b13      	cmp	r3, #19
 8013b56:	d806      	bhi.n	8013b66 <ip4_output_if_src+0x5e>
 8013b58:	4b3c      	ldr	r3, [pc, #240]	; (8013c4c <ip4_output_if_src+0x144>)
 8013b5a:	f44f 7262 	mov.w	r2, #904	; 0x388
 8013b5e:	493e      	ldr	r1, [pc, #248]	; (8013c58 <ip4_output_if_src+0x150>)
 8013b60:	483c      	ldr	r0, [pc, #240]	; (8013c54 <ip4_output_if_src+0x14c>)
 8013b62:	f001 f8a9 	bl	8014cb8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013b66:	69fb      	ldr	r3, [r7, #28]
 8013b68:	78fa      	ldrb	r2, [r7, #3]
 8013b6a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013b6c:	69fb      	ldr	r3, [r7, #28]
 8013b6e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013b72:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	681a      	ldr	r2, [r3, #0]
 8013b78:	69fb      	ldr	r3, [r7, #28]
 8013b7a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013b7c:	8b7b      	ldrh	r3, [r7, #26]
 8013b7e:	089b      	lsrs	r3, r3, #2
 8013b80:	b29b      	uxth	r3, r3
 8013b82:	b2db      	uxtb	r3, r3
 8013b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b88:	b2da      	uxtb	r2, r3
 8013b8a:	69fb      	ldr	r3, [r7, #28]
 8013b8c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013b8e:	69fb      	ldr	r3, [r7, #28]
 8013b90:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013b94:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	891b      	ldrh	r3, [r3, #8]
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	f7f6 fac4 	bl	800a128 <lwip_htons>
 8013ba0:	4603      	mov	r3, r0
 8013ba2:	461a      	mov	r2, r3
 8013ba4:	69fb      	ldr	r3, [r7, #28]
 8013ba6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013ba8:	69fb      	ldr	r3, [r7, #28]
 8013baa:	2200      	movs	r2, #0
 8013bac:	719a      	strb	r2, [r3, #6]
 8013bae:	2200      	movs	r2, #0
 8013bb0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013bb2:	4b2a      	ldr	r3, [pc, #168]	; (8013c5c <ip4_output_if_src+0x154>)
 8013bb4:	881b      	ldrh	r3, [r3, #0]
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	f7f6 fab6 	bl	800a128 <lwip_htons>
 8013bbc:	4603      	mov	r3, r0
 8013bbe:	461a      	mov	r2, r3
 8013bc0:	69fb      	ldr	r3, [r7, #28]
 8013bc2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013bc4:	4b25      	ldr	r3, [pc, #148]	; (8013c5c <ip4_output_if_src+0x154>)
 8013bc6:	881b      	ldrh	r3, [r3, #0]
 8013bc8:	3301      	adds	r3, #1
 8013bca:	b29a      	uxth	r2, r3
 8013bcc:	4b23      	ldr	r3, [pc, #140]	; (8013c5c <ip4_output_if_src+0x154>)
 8013bce:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013bd0:	68bb      	ldr	r3, [r7, #8]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d104      	bne.n	8013be0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013bd6:	4b22      	ldr	r3, [pc, #136]	; (8013c60 <ip4_output_if_src+0x158>)
 8013bd8:	681a      	ldr	r2, [r3, #0]
 8013bda:	69fb      	ldr	r3, [r7, #28]
 8013bdc:	60da      	str	r2, [r3, #12]
 8013bde:	e003      	b.n	8013be8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013be0:	68bb      	ldr	r3, [r7, #8]
 8013be2:	681a      	ldr	r2, [r3, #0]
 8013be4:	69fb      	ldr	r3, [r7, #28]
 8013be6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013be8:	69fb      	ldr	r3, [r7, #28]
 8013bea:	2200      	movs	r2, #0
 8013bec:	729a      	strb	r2, [r3, #10]
 8013bee:	2200      	movs	r2, #0
 8013bf0:	72da      	strb	r2, [r3, #11]
 8013bf2:	e00f      	b.n	8013c14 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	895b      	ldrh	r3, [r3, #10]
 8013bf8:	2b13      	cmp	r3, #19
 8013bfa:	d802      	bhi.n	8013c02 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013bfc:	f06f 0301 	mvn.w	r3, #1
 8013c00:	e020      	b.n	8013c44 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	685b      	ldr	r3, [r3, #4]
 8013c06:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013c08:	69fb      	ldr	r3, [r7, #28]
 8013c0a:	691b      	ldr	r3, [r3, #16]
 8013c0c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013c0e:	f107 0314 	add.w	r3, r7, #20
 8013c12:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c16:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d00c      	beq.n	8013c36 <ip4_output_if_src+0x12e>
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	891a      	ldrh	r2, [r3, #8]
 8013c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013c24:	429a      	cmp	r2, r3
 8013c26:	d906      	bls.n	8013c36 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8013c28:	687a      	ldr	r2, [r7, #4]
 8013c2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013c2c:	68f8      	ldr	r0, [r7, #12]
 8013c2e:	f000 fddf 	bl	80147f0 <ip4_frag>
 8013c32:	4603      	mov	r3, r0
 8013c34:	e006      	b.n	8013c44 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c38:	695b      	ldr	r3, [r3, #20]
 8013c3a:	687a      	ldr	r2, [r7, #4]
 8013c3c:	68f9      	ldr	r1, [r7, #12]
 8013c3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013c40:	4798      	blx	r3
 8013c42:	4603      	mov	r3, r0
}
 8013c44:	4618      	mov	r0, r3
 8013c46:	3720      	adds	r7, #32
 8013c48:	46bd      	mov	sp, r7
 8013c4a:	bd80      	pop	{r7, pc}
 8013c4c:	080184bc 	.word	0x080184bc
 8013c50:	080184f0 	.word	0x080184f0
 8013c54:	080184fc 	.word	0x080184fc
 8013c58:	08018524 	.word	0x08018524
 8013c5c:	24000226 	.word	0x24000226
 8013c60:	08019114 	.word	0x08019114

08013c64 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013c64:	b480      	push	{r7}
 8013c66:	b085      	sub	sp, #20
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
 8013c6c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c78:	d002      	beq.n	8013c80 <ip4_addr_isbroadcast_u32+0x1c>
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d101      	bne.n	8013c84 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013c80:	2301      	movs	r3, #1
 8013c82:	e02a      	b.n	8013cda <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013c84:	683b      	ldr	r3, [r7, #0]
 8013c86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013c8a:	f003 0302 	and.w	r3, r3, #2
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d101      	bne.n	8013c96 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013c92:	2300      	movs	r3, #0
 8013c94:	e021      	b.n	8013cda <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013c96:	683b      	ldr	r3, [r7, #0]
 8013c98:	3304      	adds	r3, #4
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	687a      	ldr	r2, [r7, #4]
 8013c9e:	429a      	cmp	r2, r3
 8013ca0:	d101      	bne.n	8013ca6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	e019      	b.n	8013cda <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013ca6:	68fa      	ldr	r2, [r7, #12]
 8013ca8:	683b      	ldr	r3, [r7, #0]
 8013caa:	3304      	adds	r3, #4
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	405a      	eors	r2, r3
 8013cb0:	683b      	ldr	r3, [r7, #0]
 8013cb2:	3308      	adds	r3, #8
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	4013      	ands	r3, r2
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d10d      	bne.n	8013cd8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013cbc:	683b      	ldr	r3, [r7, #0]
 8013cbe:	3308      	adds	r3, #8
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	43da      	mvns	r2, r3
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013cc8:	683b      	ldr	r3, [r7, #0]
 8013cca:	3308      	adds	r3, #8
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013cd0:	429a      	cmp	r2, r3
 8013cd2:	d101      	bne.n	8013cd8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013cd4:	2301      	movs	r3, #1
 8013cd6:	e000      	b.n	8013cda <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013cd8:	2300      	movs	r3, #0
  }
}
 8013cda:	4618      	mov	r0, r3
 8013cdc:	3714      	adds	r7, #20
 8013cde:	46bd      	mov	sp, r7
 8013ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ce4:	4770      	bx	lr
	...

08013ce8 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b082      	sub	sp, #8
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8013cf0:	2210      	movs	r2, #16
 8013cf2:	4904      	ldr	r1, [pc, #16]	; (8013d04 <ip4addr_ntoa+0x1c>)
 8013cf4:	6878      	ldr	r0, [r7, #4]
 8013cf6:	f000 f807 	bl	8013d08 <ip4addr_ntoa_r>
 8013cfa:	4603      	mov	r3, r0
}
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	3708      	adds	r7, #8
 8013d00:	46bd      	mov	sp, r7
 8013d02:	bd80      	pop	{r7, pc}
 8013d04:	24000228 	.word	0x24000228

08013d08 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8013d08:	b480      	push	{r7}
 8013d0a:	b08d      	sub	sp, #52	; 0x34
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	60f8      	str	r0, [r7, #12]
 8013d10:	60b9      	str	r1, [r7, #8]
 8013d12:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8013d14:	2300      	movs	r3, #0
 8013d16:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8013d1e:	68bb      	ldr	r3, [r7, #8]
 8013d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 8013d22:	f107 0318 	add.w	r3, r7, #24
 8013d26:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8013d28:	2300      	movs	r3, #0
 8013d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013d2e:	e059      	b.n	8013de4 <ip4addr_ntoa_r+0xdc>
    i = 0;
 8013d30:	2300      	movs	r3, #0
 8013d32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 8013d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d38:	781a      	ldrb	r2, [r3, #0]
 8013d3a:	4b33      	ldr	r3, [pc, #204]	; (8013e08 <ip4addr_ntoa_r+0x100>)
 8013d3c:	fba3 1302 	umull	r1, r3, r3, r2
 8013d40:	08d9      	lsrs	r1, r3, #3
 8013d42:	460b      	mov	r3, r1
 8013d44:	009b      	lsls	r3, r3, #2
 8013d46:	440b      	add	r3, r1
 8013d48:	005b      	lsls	r3, r3, #1
 8013d4a:	1ad3      	subs	r3, r2, r3
 8013d4c:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8013d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d50:	781b      	ldrb	r3, [r3, #0]
 8013d52:	4a2d      	ldr	r2, [pc, #180]	; (8013e08 <ip4addr_ntoa_r+0x100>)
 8013d54:	fba2 2303 	umull	r2, r3, r2, r3
 8013d58:	08db      	lsrs	r3, r3, #3
 8013d5a:	b2da      	uxtb	r2, r3
 8013d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d5e:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8013d60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013d64:	1c5a      	adds	r2, r3, #1
 8013d66:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8013d6a:	4619      	mov	r1, r3
 8013d6c:	7ffb      	ldrb	r3, [r7, #31]
 8013d6e:	3330      	adds	r3, #48	; 0x30
 8013d70:	b2da      	uxtb	r2, r3
 8013d72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013d76:	440b      	add	r3, r1
 8013d78:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8013d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d7e:	781b      	ldrb	r3, [r3, #0]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d1d8      	bne.n	8013d36 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8013d84:	e012      	b.n	8013dac <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 8013d86:	6a3b      	ldr	r3, [r7, #32]
 8013d88:	1c5a      	adds	r2, r3, #1
 8013d8a:	623a      	str	r2, [r7, #32]
 8013d8c:	687a      	ldr	r2, [r7, #4]
 8013d8e:	429a      	cmp	r2, r3
 8013d90:	dc01      	bgt.n	8013d96 <ip4addr_ntoa_r+0x8e>
        return NULL;
 8013d92:	2300      	movs	r3, #0
 8013d94:	e031      	b.n	8013dfa <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 8013d96:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8013d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d9c:	1c59      	adds	r1, r3, #1
 8013d9e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8013da0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8013da4:	440a      	add	r2, r1
 8013da6:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8013daa:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8013dac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013db0:	1e5a      	subs	r2, r3, #1
 8013db2:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d1e5      	bne.n	8013d86 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8013dba:	6a3b      	ldr	r3, [r7, #32]
 8013dbc:	1c5a      	adds	r2, r3, #1
 8013dbe:	623a      	str	r2, [r7, #32]
 8013dc0:	687a      	ldr	r2, [r7, #4]
 8013dc2:	429a      	cmp	r2, r3
 8013dc4:	dc01      	bgt.n	8013dca <ip4addr_ntoa_r+0xc2>
      return NULL;
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	e017      	b.n	8013dfa <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 8013dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dcc:	1c5a      	adds	r2, r3, #1
 8013dce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013dd0:	222e      	movs	r2, #46	; 0x2e
 8013dd2:	701a      	strb	r2, [r3, #0]
    ap++;
 8013dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dd6:	3301      	adds	r3, #1
 8013dd8:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8013dda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013dde:	3301      	adds	r3, #1
 8013de0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013de4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013de8:	2b03      	cmp	r3, #3
 8013dea:	d9a1      	bls.n	8013d30 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8013dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dee:	3b01      	subs	r3, #1
 8013df0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013df4:	2200      	movs	r2, #0
 8013df6:	701a      	strb	r2, [r3, #0]
  return buf;
 8013df8:	68bb      	ldr	r3, [r7, #8]
}
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	3734      	adds	r7, #52	; 0x34
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e04:	4770      	bx	lr
 8013e06:	bf00      	nop
 8013e08:	cccccccd 	.word	0xcccccccd

08013e0c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013e0c:	b580      	push	{r7, lr}
 8013e0e:	b084      	sub	sp, #16
 8013e10:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013e12:	2300      	movs	r3, #0
 8013e14:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013e16:	4b12      	ldr	r3, [pc, #72]	; (8013e60 <ip_reass_tmr+0x54>)
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013e1c:	e018      	b.n	8013e50 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	7fdb      	ldrb	r3, [r3, #31]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d00b      	beq.n	8013e3e <ip_reass_tmr+0x32>
      r->timer--;
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	7fdb      	ldrb	r3, [r3, #31]
 8013e2a:	3b01      	subs	r3, #1
 8013e2c:	b2da      	uxtb	r2, r3
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	60fb      	str	r3, [r7, #12]
 8013e3c:	e008      	b.n	8013e50 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013e48:	68b9      	ldr	r1, [r7, #8]
 8013e4a:	6878      	ldr	r0, [r7, #4]
 8013e4c:	f000 f80a 	bl	8013e64 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d1e3      	bne.n	8013e1e <ip_reass_tmr+0x12>
    }
  }
}
 8013e56:	bf00      	nop
 8013e58:	bf00      	nop
 8013e5a:	3710      	adds	r7, #16
 8013e5c:	46bd      	mov	sp, r7
 8013e5e:	bd80      	pop	{r7, pc}
 8013e60:	24000238 	.word	0x24000238

08013e64 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013e64:	b580      	push	{r7, lr}
 8013e66:	b088      	sub	sp, #32
 8013e68:	af00      	add	r7, sp, #0
 8013e6a:	6078      	str	r0, [r7, #4]
 8013e6c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8013e6e:	2300      	movs	r3, #0
 8013e70:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013e72:	683a      	ldr	r2, [r7, #0]
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	429a      	cmp	r2, r3
 8013e78:	d105      	bne.n	8013e86 <ip_reass_free_complete_datagram+0x22>
 8013e7a:	4b45      	ldr	r3, [pc, #276]	; (8013f90 <ip_reass_free_complete_datagram+0x12c>)
 8013e7c:	22ab      	movs	r2, #171	; 0xab
 8013e7e:	4945      	ldr	r1, [pc, #276]	; (8013f94 <ip_reass_free_complete_datagram+0x130>)
 8013e80:	4845      	ldr	r0, [pc, #276]	; (8013f98 <ip_reass_free_complete_datagram+0x134>)
 8013e82:	f000 ff19 	bl	8014cb8 <iprintf>
  if (prev != NULL) {
 8013e86:	683b      	ldr	r3, [r7, #0]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d00a      	beq.n	8013ea2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013e8c:	683b      	ldr	r3, [r7, #0]
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	687a      	ldr	r2, [r7, #4]
 8013e92:	429a      	cmp	r2, r3
 8013e94:	d005      	beq.n	8013ea2 <ip_reass_free_complete_datagram+0x3e>
 8013e96:	4b3e      	ldr	r3, [pc, #248]	; (8013f90 <ip_reass_free_complete_datagram+0x12c>)
 8013e98:	22ad      	movs	r2, #173	; 0xad
 8013e9a:	4940      	ldr	r1, [pc, #256]	; (8013f9c <ip_reass_free_complete_datagram+0x138>)
 8013e9c:	483e      	ldr	r0, [pc, #248]	; (8013f98 <ip_reass_free_complete_datagram+0x134>)
 8013e9e:	f000 ff0b 	bl	8014cb8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	685b      	ldr	r3, [r3, #4]
 8013ea6:	685b      	ldr	r3, [r3, #4]
 8013ea8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8013eaa:	697b      	ldr	r3, [r7, #20]
 8013eac:	889b      	ldrh	r3, [r3, #4]
 8013eae:	b29b      	uxth	r3, r3
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d12a      	bne.n	8013f0a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	685b      	ldr	r3, [r3, #4]
 8013eb8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013eba:	697b      	ldr	r3, [r7, #20]
 8013ebc:	681a      	ldr	r2, [r3, #0]
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013ec2:	69bb      	ldr	r3, [r7, #24]
 8013ec4:	6858      	ldr	r0, [r3, #4]
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	3308      	adds	r3, #8
 8013eca:	2214      	movs	r2, #20
 8013ecc:	4619      	mov	r1, r3
 8013ece:	f000 fedd 	bl	8014c8c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013ed2:	2101      	movs	r1, #1
 8013ed4:	69b8      	ldr	r0, [r7, #24]
 8013ed6:	f7ff fbab 	bl	8013630 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013eda:	69b8      	ldr	r0, [r7, #24]
 8013edc:	f7f7 fdc2 	bl	800ba64 <pbuf_clen>
 8013ee0:	4603      	mov	r3, r0
 8013ee2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013ee4:	8bfa      	ldrh	r2, [r7, #30]
 8013ee6:	8a7b      	ldrh	r3, [r7, #18]
 8013ee8:	4413      	add	r3, r2
 8013eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013eee:	db05      	blt.n	8013efc <ip_reass_free_complete_datagram+0x98>
 8013ef0:	4b27      	ldr	r3, [pc, #156]	; (8013f90 <ip_reass_free_complete_datagram+0x12c>)
 8013ef2:	22bc      	movs	r2, #188	; 0xbc
 8013ef4:	492a      	ldr	r1, [pc, #168]	; (8013fa0 <ip_reass_free_complete_datagram+0x13c>)
 8013ef6:	4828      	ldr	r0, [pc, #160]	; (8013f98 <ip_reass_free_complete_datagram+0x134>)
 8013ef8:	f000 fede 	bl	8014cb8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013efc:	8bfa      	ldrh	r2, [r7, #30]
 8013efe:	8a7b      	ldrh	r3, [r7, #18]
 8013f00:	4413      	add	r3, r2
 8013f02:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013f04:	69b8      	ldr	r0, [r7, #24]
 8013f06:	f7f7 fd25 	bl	800b954 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	685b      	ldr	r3, [r3, #4]
 8013f0e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013f10:	e01f      	b.n	8013f52 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013f12:	69bb      	ldr	r3, [r7, #24]
 8013f14:	685b      	ldr	r3, [r3, #4]
 8013f16:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013f18:	69bb      	ldr	r3, [r7, #24]
 8013f1a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013f1c:	697b      	ldr	r3, [r7, #20]
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013f22:	68f8      	ldr	r0, [r7, #12]
 8013f24:	f7f7 fd9e 	bl	800ba64 <pbuf_clen>
 8013f28:	4603      	mov	r3, r0
 8013f2a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013f2c:	8bfa      	ldrh	r2, [r7, #30]
 8013f2e:	8a7b      	ldrh	r3, [r7, #18]
 8013f30:	4413      	add	r3, r2
 8013f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013f36:	db05      	blt.n	8013f44 <ip_reass_free_complete_datagram+0xe0>
 8013f38:	4b15      	ldr	r3, [pc, #84]	; (8013f90 <ip_reass_free_complete_datagram+0x12c>)
 8013f3a:	22cc      	movs	r2, #204	; 0xcc
 8013f3c:	4918      	ldr	r1, [pc, #96]	; (8013fa0 <ip_reass_free_complete_datagram+0x13c>)
 8013f3e:	4816      	ldr	r0, [pc, #88]	; (8013f98 <ip_reass_free_complete_datagram+0x134>)
 8013f40:	f000 feba 	bl	8014cb8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013f44:	8bfa      	ldrh	r2, [r7, #30]
 8013f46:	8a7b      	ldrh	r3, [r7, #18]
 8013f48:	4413      	add	r3, r2
 8013f4a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8013f4c:	68f8      	ldr	r0, [r7, #12]
 8013f4e:	f7f7 fd01 	bl	800b954 <pbuf_free>
  while (p != NULL) {
 8013f52:	69bb      	ldr	r3, [r7, #24]
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d1dc      	bne.n	8013f12 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013f58:	6839      	ldr	r1, [r7, #0]
 8013f5a:	6878      	ldr	r0, [r7, #4]
 8013f5c:	f000 f8c2 	bl	80140e4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8013f60:	4b10      	ldr	r3, [pc, #64]	; (8013fa4 <ip_reass_free_complete_datagram+0x140>)
 8013f62:	881b      	ldrh	r3, [r3, #0]
 8013f64:	8bfa      	ldrh	r2, [r7, #30]
 8013f66:	429a      	cmp	r2, r3
 8013f68:	d905      	bls.n	8013f76 <ip_reass_free_complete_datagram+0x112>
 8013f6a:	4b09      	ldr	r3, [pc, #36]	; (8013f90 <ip_reass_free_complete_datagram+0x12c>)
 8013f6c:	22d2      	movs	r2, #210	; 0xd2
 8013f6e:	490e      	ldr	r1, [pc, #56]	; (8013fa8 <ip_reass_free_complete_datagram+0x144>)
 8013f70:	4809      	ldr	r0, [pc, #36]	; (8013f98 <ip_reass_free_complete_datagram+0x134>)
 8013f72:	f000 fea1 	bl	8014cb8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013f76:	4b0b      	ldr	r3, [pc, #44]	; (8013fa4 <ip_reass_free_complete_datagram+0x140>)
 8013f78:	881a      	ldrh	r2, [r3, #0]
 8013f7a:	8bfb      	ldrh	r3, [r7, #30]
 8013f7c:	1ad3      	subs	r3, r2, r3
 8013f7e:	b29a      	uxth	r2, r3
 8013f80:	4b08      	ldr	r3, [pc, #32]	; (8013fa4 <ip_reass_free_complete_datagram+0x140>)
 8013f82:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013f84:	8bfb      	ldrh	r3, [r7, #30]
}
 8013f86:	4618      	mov	r0, r3
 8013f88:	3720      	adds	r7, #32
 8013f8a:	46bd      	mov	sp, r7
 8013f8c:	bd80      	pop	{r7, pc}
 8013f8e:	bf00      	nop
 8013f90:	08018554 	.word	0x08018554
 8013f94:	08018590 	.word	0x08018590
 8013f98:	0801859c 	.word	0x0801859c
 8013f9c:	080185c4 	.word	0x080185c4
 8013fa0:	080185d8 	.word	0x080185d8
 8013fa4:	2400023c 	.word	0x2400023c
 8013fa8:	080185f8 	.word	0x080185f8

08013fac <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013fac:	b580      	push	{r7, lr}
 8013fae:	b08a      	sub	sp, #40	; 0x28
 8013fb0:	af00      	add	r7, sp, #0
 8013fb2:	6078      	str	r0, [r7, #4]
 8013fb4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013fb6:	2300      	movs	r3, #0
 8013fb8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8013fba:	2300      	movs	r3, #0
 8013fbc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013fc6:	2300      	movs	r3, #0
 8013fc8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8013fca:	4b28      	ldr	r3, [pc, #160]	; (801406c <ip_reass_remove_oldest_datagram+0xc0>)
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013fd0:	e030      	b.n	8014034 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fd4:	695a      	ldr	r2, [r3, #20]
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	68db      	ldr	r3, [r3, #12]
 8013fda:	429a      	cmp	r2, r3
 8013fdc:	d10c      	bne.n	8013ff8 <ip_reass_remove_oldest_datagram+0x4c>
 8013fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fe0:	699a      	ldr	r2, [r3, #24]
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	691b      	ldr	r3, [r3, #16]
 8013fe6:	429a      	cmp	r2, r3
 8013fe8:	d106      	bne.n	8013ff8 <ip_reass_remove_oldest_datagram+0x4c>
 8013fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fec:	899a      	ldrh	r2, [r3, #12]
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	889b      	ldrh	r3, [r3, #4]
 8013ff2:	b29b      	uxth	r3, r3
 8013ff4:	429a      	cmp	r2, r3
 8013ff6:	d014      	beq.n	8014022 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013ff8:	693b      	ldr	r3, [r7, #16]
 8013ffa:	3301      	adds	r3, #1
 8013ffc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013ffe:	6a3b      	ldr	r3, [r7, #32]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d104      	bne.n	801400e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014006:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014008:	69fb      	ldr	r3, [r7, #28]
 801400a:	61bb      	str	r3, [r7, #24]
 801400c:	e009      	b.n	8014022 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014010:	7fda      	ldrb	r2, [r3, #31]
 8014012:	6a3b      	ldr	r3, [r7, #32]
 8014014:	7fdb      	ldrb	r3, [r3, #31]
 8014016:	429a      	cmp	r2, r3
 8014018:	d803      	bhi.n	8014022 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801401c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801401e:	69fb      	ldr	r3, [r7, #28]
 8014020:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8014022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d001      	beq.n	801402e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801402c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014036:	2b00      	cmp	r3, #0
 8014038:	d1cb      	bne.n	8013fd2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801403a:	6a3b      	ldr	r3, [r7, #32]
 801403c:	2b00      	cmp	r3, #0
 801403e:	d008      	beq.n	8014052 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8014040:	69b9      	ldr	r1, [r7, #24]
 8014042:	6a38      	ldr	r0, [r7, #32]
 8014044:	f7ff ff0e 	bl	8013e64 <ip_reass_free_complete_datagram>
 8014048:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801404a:	697a      	ldr	r2, [r7, #20]
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	4413      	add	r3, r2
 8014050:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8014052:	697a      	ldr	r2, [r7, #20]
 8014054:	683b      	ldr	r3, [r7, #0]
 8014056:	429a      	cmp	r2, r3
 8014058:	da02      	bge.n	8014060 <ip_reass_remove_oldest_datagram+0xb4>
 801405a:	693b      	ldr	r3, [r7, #16]
 801405c:	2b01      	cmp	r3, #1
 801405e:	dcac      	bgt.n	8013fba <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8014060:	697b      	ldr	r3, [r7, #20]
}
 8014062:	4618      	mov	r0, r3
 8014064:	3728      	adds	r7, #40	; 0x28
 8014066:	46bd      	mov	sp, r7
 8014068:	bd80      	pop	{r7, pc}
 801406a:	bf00      	nop
 801406c:	24000238 	.word	0x24000238

08014070 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014070:	b580      	push	{r7, lr}
 8014072:	b084      	sub	sp, #16
 8014074:	af00      	add	r7, sp, #0
 8014076:	6078      	str	r0, [r7, #4]
 8014078:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801407a:	2004      	movs	r0, #4
 801407c:	f7f6 fd84 	bl	800ab88 <memp_malloc>
 8014080:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d110      	bne.n	80140aa <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014088:	6839      	ldr	r1, [r7, #0]
 801408a:	6878      	ldr	r0, [r7, #4]
 801408c:	f7ff ff8e 	bl	8013fac <ip_reass_remove_oldest_datagram>
 8014090:	4602      	mov	r2, r0
 8014092:	683b      	ldr	r3, [r7, #0]
 8014094:	4293      	cmp	r3, r2
 8014096:	dc03      	bgt.n	80140a0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014098:	2004      	movs	r0, #4
 801409a:	f7f6 fd75 	bl	800ab88 <memp_malloc>
 801409e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d101      	bne.n	80140aa <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80140a6:	2300      	movs	r3, #0
 80140a8:	e016      	b.n	80140d8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80140aa:	2220      	movs	r2, #32
 80140ac:	2100      	movs	r1, #0
 80140ae:	68f8      	ldr	r0, [r7, #12]
 80140b0:	f000 fdfa 	bl	8014ca8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	220f      	movs	r2, #15
 80140b8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80140ba:	4b09      	ldr	r3, [pc, #36]	; (80140e0 <ip_reass_enqueue_new_datagram+0x70>)
 80140bc:	681a      	ldr	r2, [r3, #0]
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80140c2:	4a07      	ldr	r2, [pc, #28]	; (80140e0 <ip_reass_enqueue_new_datagram+0x70>)
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	3308      	adds	r3, #8
 80140cc:	2214      	movs	r2, #20
 80140ce:	6879      	ldr	r1, [r7, #4]
 80140d0:	4618      	mov	r0, r3
 80140d2:	f000 fddb 	bl	8014c8c <memcpy>
  return ipr;
 80140d6:	68fb      	ldr	r3, [r7, #12]
}
 80140d8:	4618      	mov	r0, r3
 80140da:	3710      	adds	r7, #16
 80140dc:	46bd      	mov	sp, r7
 80140de:	bd80      	pop	{r7, pc}
 80140e0:	24000238 	.word	0x24000238

080140e4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80140e4:	b580      	push	{r7, lr}
 80140e6:	b082      	sub	sp, #8
 80140e8:	af00      	add	r7, sp, #0
 80140ea:	6078      	str	r0, [r7, #4]
 80140ec:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80140ee:	4b10      	ldr	r3, [pc, #64]	; (8014130 <ip_reass_dequeue_datagram+0x4c>)
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	687a      	ldr	r2, [r7, #4]
 80140f4:	429a      	cmp	r2, r3
 80140f6:	d104      	bne.n	8014102 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	4a0c      	ldr	r2, [pc, #48]	; (8014130 <ip_reass_dequeue_datagram+0x4c>)
 80140fe:	6013      	str	r3, [r2, #0]
 8014100:	e00d      	b.n	801411e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8014102:	683b      	ldr	r3, [r7, #0]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d106      	bne.n	8014116 <ip_reass_dequeue_datagram+0x32>
 8014108:	4b0a      	ldr	r3, [pc, #40]	; (8014134 <ip_reass_dequeue_datagram+0x50>)
 801410a:	f240 1245 	movw	r2, #325	; 0x145
 801410e:	490a      	ldr	r1, [pc, #40]	; (8014138 <ip_reass_dequeue_datagram+0x54>)
 8014110:	480a      	ldr	r0, [pc, #40]	; (801413c <ip_reass_dequeue_datagram+0x58>)
 8014112:	f000 fdd1 	bl	8014cb8 <iprintf>
    prev->next = ipr->next;
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	681a      	ldr	r2, [r3, #0]
 801411a:	683b      	ldr	r3, [r7, #0]
 801411c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801411e:	6879      	ldr	r1, [r7, #4]
 8014120:	2004      	movs	r0, #4
 8014122:	f7f6 fda1 	bl	800ac68 <memp_free>
}
 8014126:	bf00      	nop
 8014128:	3708      	adds	r7, #8
 801412a:	46bd      	mov	sp, r7
 801412c:	bd80      	pop	{r7, pc}
 801412e:	bf00      	nop
 8014130:	24000238 	.word	0x24000238
 8014134:	08018554 	.word	0x08018554
 8014138:	0801861c 	.word	0x0801861c
 801413c:	0801859c 	.word	0x0801859c

08014140 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8014140:	b580      	push	{r7, lr}
 8014142:	b08c      	sub	sp, #48	; 0x30
 8014144:	af00      	add	r7, sp, #0
 8014146:	60f8      	str	r0, [r7, #12]
 8014148:	60b9      	str	r1, [r7, #8]
 801414a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801414c:	2300      	movs	r3, #0
 801414e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8014150:	2301      	movs	r3, #1
 8014152:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8014154:	68bb      	ldr	r3, [r7, #8]
 8014156:	685b      	ldr	r3, [r3, #4]
 8014158:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801415a:	69fb      	ldr	r3, [r7, #28]
 801415c:	885b      	ldrh	r3, [r3, #2]
 801415e:	b29b      	uxth	r3, r3
 8014160:	4618      	mov	r0, r3
 8014162:	f7f5 ffe1 	bl	800a128 <lwip_htons>
 8014166:	4603      	mov	r3, r0
 8014168:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801416a:	69fb      	ldr	r3, [r7, #28]
 801416c:	781b      	ldrb	r3, [r3, #0]
 801416e:	f003 030f 	and.w	r3, r3, #15
 8014172:	b2db      	uxtb	r3, r3
 8014174:	009b      	lsls	r3, r3, #2
 8014176:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8014178:	7e7b      	ldrb	r3, [r7, #25]
 801417a:	b29b      	uxth	r3, r3
 801417c:	8b7a      	ldrh	r2, [r7, #26]
 801417e:	429a      	cmp	r2, r3
 8014180:	d202      	bcs.n	8014188 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014182:	f04f 33ff 	mov.w	r3, #4294967295
 8014186:	e135      	b.n	80143f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8014188:	7e7b      	ldrb	r3, [r7, #25]
 801418a:	b29b      	uxth	r3, r3
 801418c:	8b7a      	ldrh	r2, [r7, #26]
 801418e:	1ad3      	subs	r3, r2, r3
 8014190:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8014192:	69fb      	ldr	r3, [r7, #28]
 8014194:	88db      	ldrh	r3, [r3, #6]
 8014196:	b29b      	uxth	r3, r3
 8014198:	4618      	mov	r0, r3
 801419a:	f7f5 ffc5 	bl	800a128 <lwip_htons>
 801419e:	4603      	mov	r3, r0
 80141a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80141a4:	b29b      	uxth	r3, r3
 80141a6:	00db      	lsls	r3, r3, #3
 80141a8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80141aa:	68bb      	ldr	r3, [r7, #8]
 80141ac:	685b      	ldr	r3, [r3, #4]
 80141ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80141b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141b2:	2200      	movs	r2, #0
 80141b4:	701a      	strb	r2, [r3, #0]
 80141b6:	2200      	movs	r2, #0
 80141b8:	705a      	strb	r2, [r3, #1]
 80141ba:	2200      	movs	r2, #0
 80141bc:	709a      	strb	r2, [r3, #2]
 80141be:	2200      	movs	r2, #0
 80141c0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80141c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141c4:	8afa      	ldrh	r2, [r7, #22]
 80141c6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80141c8:	8afa      	ldrh	r2, [r7, #22]
 80141ca:	8b7b      	ldrh	r3, [r7, #26]
 80141cc:	4413      	add	r3, r2
 80141ce:	b29a      	uxth	r2, r3
 80141d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141d2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80141d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141d6:	88db      	ldrh	r3, [r3, #6]
 80141d8:	b29b      	uxth	r3, r3
 80141da:	8afa      	ldrh	r2, [r7, #22]
 80141dc:	429a      	cmp	r2, r3
 80141de:	d902      	bls.n	80141e6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80141e0:	f04f 33ff 	mov.w	r3, #4294967295
 80141e4:	e106      	b.n	80143f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	685b      	ldr	r3, [r3, #4]
 80141ea:	627b      	str	r3, [r7, #36]	; 0x24
 80141ec:	e068      	b.n	80142c0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80141ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141f0:	685b      	ldr	r3, [r3, #4]
 80141f2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80141f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141f6:	889b      	ldrh	r3, [r3, #4]
 80141f8:	b29a      	uxth	r2, r3
 80141fa:	693b      	ldr	r3, [r7, #16]
 80141fc:	889b      	ldrh	r3, [r3, #4]
 80141fe:	b29b      	uxth	r3, r3
 8014200:	429a      	cmp	r2, r3
 8014202:	d235      	bcs.n	8014270 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8014204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014208:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801420a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801420c:	2b00      	cmp	r3, #0
 801420e:	d020      	beq.n	8014252 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8014210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014212:	889b      	ldrh	r3, [r3, #4]
 8014214:	b29a      	uxth	r2, r3
 8014216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014218:	88db      	ldrh	r3, [r3, #6]
 801421a:	b29b      	uxth	r3, r3
 801421c:	429a      	cmp	r2, r3
 801421e:	d307      	bcc.n	8014230 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8014220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014222:	88db      	ldrh	r3, [r3, #6]
 8014224:	b29a      	uxth	r2, r3
 8014226:	693b      	ldr	r3, [r7, #16]
 8014228:	889b      	ldrh	r3, [r3, #4]
 801422a:	b29b      	uxth	r3, r3
 801422c:	429a      	cmp	r2, r3
 801422e:	d902      	bls.n	8014236 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014230:	f04f 33ff 	mov.w	r3, #4294967295
 8014234:	e0de      	b.n	80143f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8014236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014238:	68ba      	ldr	r2, [r7, #8]
 801423a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801423c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801423e:	88db      	ldrh	r3, [r3, #6]
 8014240:	b29a      	uxth	r2, r3
 8014242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014244:	889b      	ldrh	r3, [r3, #4]
 8014246:	b29b      	uxth	r3, r3
 8014248:	429a      	cmp	r2, r3
 801424a:	d03d      	beq.n	80142c8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801424c:	2300      	movs	r3, #0
 801424e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8014250:	e03a      	b.n	80142c8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8014252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014254:	88db      	ldrh	r3, [r3, #6]
 8014256:	b29a      	uxth	r2, r3
 8014258:	693b      	ldr	r3, [r7, #16]
 801425a:	889b      	ldrh	r3, [r3, #4]
 801425c:	b29b      	uxth	r3, r3
 801425e:	429a      	cmp	r2, r3
 8014260:	d902      	bls.n	8014268 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014262:	f04f 33ff 	mov.w	r3, #4294967295
 8014266:	e0c5      	b.n	80143f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	68ba      	ldr	r2, [r7, #8]
 801426c:	605a      	str	r2, [r3, #4]
      break;
 801426e:	e02b      	b.n	80142c8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8014270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014272:	889b      	ldrh	r3, [r3, #4]
 8014274:	b29a      	uxth	r2, r3
 8014276:	693b      	ldr	r3, [r7, #16]
 8014278:	889b      	ldrh	r3, [r3, #4]
 801427a:	b29b      	uxth	r3, r3
 801427c:	429a      	cmp	r2, r3
 801427e:	d102      	bne.n	8014286 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014280:	f04f 33ff 	mov.w	r3, #4294967295
 8014284:	e0b6      	b.n	80143f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8014286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014288:	889b      	ldrh	r3, [r3, #4]
 801428a:	b29a      	uxth	r2, r3
 801428c:	693b      	ldr	r3, [r7, #16]
 801428e:	88db      	ldrh	r3, [r3, #6]
 8014290:	b29b      	uxth	r3, r3
 8014292:	429a      	cmp	r2, r3
 8014294:	d202      	bcs.n	801429c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014296:	f04f 33ff 	mov.w	r3, #4294967295
 801429a:	e0ab      	b.n	80143f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801429c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d009      	beq.n	80142b6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80142a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142a4:	88db      	ldrh	r3, [r3, #6]
 80142a6:	b29a      	uxth	r2, r3
 80142a8:	693b      	ldr	r3, [r7, #16]
 80142aa:	889b      	ldrh	r3, [r3, #4]
 80142ac:	b29b      	uxth	r3, r3
 80142ae:	429a      	cmp	r2, r3
 80142b0:	d001      	beq.n	80142b6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80142b2:	2300      	movs	r3, #0
 80142b4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80142b6:	693b      	ldr	r3, [r7, #16]
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80142bc:	693b      	ldr	r3, [r7, #16]
 80142be:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80142c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d193      	bne.n	80141ee <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80142c6:	e000      	b.n	80142ca <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80142c8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80142ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d12d      	bne.n	801432c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80142d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d01c      	beq.n	8014310 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80142d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142d8:	88db      	ldrh	r3, [r3, #6]
 80142da:	b29a      	uxth	r2, r3
 80142dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142de:	889b      	ldrh	r3, [r3, #4]
 80142e0:	b29b      	uxth	r3, r3
 80142e2:	429a      	cmp	r2, r3
 80142e4:	d906      	bls.n	80142f4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80142e6:	4b45      	ldr	r3, [pc, #276]	; (80143fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80142e8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80142ec:	4944      	ldr	r1, [pc, #272]	; (8014400 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80142ee:	4845      	ldr	r0, [pc, #276]	; (8014404 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80142f0:	f000 fce2 	bl	8014cb8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80142f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142f6:	68ba      	ldr	r2, [r7, #8]
 80142f8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80142fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142fc:	88db      	ldrh	r3, [r3, #6]
 80142fe:	b29a      	uxth	r2, r3
 8014300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014302:	889b      	ldrh	r3, [r3, #4]
 8014304:	b29b      	uxth	r3, r3
 8014306:	429a      	cmp	r2, r3
 8014308:	d010      	beq.n	801432c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801430a:	2300      	movs	r3, #0
 801430c:	623b      	str	r3, [r7, #32]
 801430e:	e00d      	b.n	801432c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	685b      	ldr	r3, [r3, #4]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d006      	beq.n	8014326 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8014318:	4b38      	ldr	r3, [pc, #224]	; (80143fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801431a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801431e:	493a      	ldr	r1, [pc, #232]	; (8014408 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8014320:	4838      	ldr	r0, [pc, #224]	; (8014404 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014322:	f000 fcc9 	bl	8014cb8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	68ba      	ldr	r2, [r7, #8]
 801432a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	2b00      	cmp	r3, #0
 8014330:	d105      	bne.n	801433e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	7f9b      	ldrb	r3, [r3, #30]
 8014336:	f003 0301 	and.w	r3, r3, #1
 801433a:	2b00      	cmp	r3, #0
 801433c:	d059      	beq.n	80143f2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801433e:	6a3b      	ldr	r3, [r7, #32]
 8014340:	2b00      	cmp	r3, #0
 8014342:	d04f      	beq.n	80143e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8014344:	68fb      	ldr	r3, [r7, #12]
 8014346:	685b      	ldr	r3, [r3, #4]
 8014348:	2b00      	cmp	r3, #0
 801434a:	d006      	beq.n	801435a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	685b      	ldr	r3, [r3, #4]
 8014350:	685b      	ldr	r3, [r3, #4]
 8014352:	889b      	ldrh	r3, [r3, #4]
 8014354:	b29b      	uxth	r3, r3
 8014356:	2b00      	cmp	r3, #0
 8014358:	d002      	beq.n	8014360 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801435a:	2300      	movs	r3, #0
 801435c:	623b      	str	r3, [r7, #32]
 801435e:	e041      	b.n	80143e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8014360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014362:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8014364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801436a:	e012      	b.n	8014392 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801436e:	685b      	ldr	r3, [r3, #4]
 8014370:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8014372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014374:	88db      	ldrh	r3, [r3, #6]
 8014376:	b29a      	uxth	r2, r3
 8014378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801437a:	889b      	ldrh	r3, [r3, #4]
 801437c:	b29b      	uxth	r3, r3
 801437e:	429a      	cmp	r2, r3
 8014380:	d002      	beq.n	8014388 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8014382:	2300      	movs	r3, #0
 8014384:	623b      	str	r3, [r7, #32]
            break;
 8014386:	e007      	b.n	8014398 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8014388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801438a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801438c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014394:	2b00      	cmp	r3, #0
 8014396:	d1e9      	bne.n	801436c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8014398:	6a3b      	ldr	r3, [r7, #32]
 801439a:	2b00      	cmp	r3, #0
 801439c:	d022      	beq.n	80143e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	685b      	ldr	r3, [r3, #4]
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d106      	bne.n	80143b4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80143a6:	4b15      	ldr	r3, [pc, #84]	; (80143fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80143a8:	f240 12df 	movw	r2, #479	; 0x1df
 80143ac:	4917      	ldr	r1, [pc, #92]	; (801440c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80143ae:	4815      	ldr	r0, [pc, #84]	; (8014404 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80143b0:	f000 fc82 	bl	8014cb8 <iprintf>
          LWIP_ASSERT("sanity check",
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	685b      	ldr	r3, [r3, #4]
 80143b8:	685b      	ldr	r3, [r3, #4]
 80143ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80143bc:	429a      	cmp	r2, r3
 80143be:	d106      	bne.n	80143ce <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80143c0:	4b0e      	ldr	r3, [pc, #56]	; (80143fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80143c2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80143c6:	4911      	ldr	r1, [pc, #68]	; (801440c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80143c8:	480e      	ldr	r0, [pc, #56]	; (8014404 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80143ca:	f000 fc75 	bl	8014cb8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80143ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d006      	beq.n	80143e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80143d6:	4b09      	ldr	r3, [pc, #36]	; (80143fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80143d8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80143dc:	490c      	ldr	r1, [pc, #48]	; (8014410 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80143de:	4809      	ldr	r0, [pc, #36]	; (8014404 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80143e0:	f000 fc6a 	bl	8014cb8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80143e4:	6a3b      	ldr	r3, [r7, #32]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	bf14      	ite	ne
 80143ea:	2301      	movne	r3, #1
 80143ec:	2300      	moveq	r3, #0
 80143ee:	b2db      	uxtb	r3, r3
 80143f0:	e000      	b.n	80143f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80143f2:	2300      	movs	r3, #0
}
 80143f4:	4618      	mov	r0, r3
 80143f6:	3730      	adds	r7, #48	; 0x30
 80143f8:	46bd      	mov	sp, r7
 80143fa:	bd80      	pop	{r7, pc}
 80143fc:	08018554 	.word	0x08018554
 8014400:	08018638 	.word	0x08018638
 8014404:	0801859c 	.word	0x0801859c
 8014408:	08018658 	.word	0x08018658
 801440c:	08018690 	.word	0x08018690
 8014410:	080186a0 	.word	0x080186a0

08014414 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014414:	b580      	push	{r7, lr}
 8014416:	b08e      	sub	sp, #56	; 0x38
 8014418:	af00      	add	r7, sp, #0
 801441a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	685b      	ldr	r3, [r3, #4]
 8014420:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8014422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014424:	781b      	ldrb	r3, [r3, #0]
 8014426:	f003 030f 	and.w	r3, r3, #15
 801442a:	b2db      	uxtb	r3, r3
 801442c:	009b      	lsls	r3, r3, #2
 801442e:	b2db      	uxtb	r3, r3
 8014430:	2b14      	cmp	r3, #20
 8014432:	f040 8167 	bne.w	8014704 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8014436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014438:	88db      	ldrh	r3, [r3, #6]
 801443a:	b29b      	uxth	r3, r3
 801443c:	4618      	mov	r0, r3
 801443e:	f7f5 fe73 	bl	800a128 <lwip_htons>
 8014442:	4603      	mov	r3, r0
 8014444:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014448:	b29b      	uxth	r3, r3
 801444a:	00db      	lsls	r3, r3, #3
 801444c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801444e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014450:	885b      	ldrh	r3, [r3, #2]
 8014452:	b29b      	uxth	r3, r3
 8014454:	4618      	mov	r0, r3
 8014456:	f7f5 fe67 	bl	800a128 <lwip_htons>
 801445a:	4603      	mov	r3, r0
 801445c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801445e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014460:	781b      	ldrb	r3, [r3, #0]
 8014462:	f003 030f 	and.w	r3, r3, #15
 8014466:	b2db      	uxtb	r3, r3
 8014468:	009b      	lsls	r3, r3, #2
 801446a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801446e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014472:	b29b      	uxth	r3, r3
 8014474:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014476:	429a      	cmp	r2, r3
 8014478:	f0c0 8146 	bcc.w	8014708 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801447c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014480:	b29b      	uxth	r3, r3
 8014482:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014484:	1ad3      	subs	r3, r2, r3
 8014486:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8014488:	6878      	ldr	r0, [r7, #4]
 801448a:	f7f7 faeb 	bl	800ba64 <pbuf_clen>
 801448e:	4603      	mov	r3, r0
 8014490:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8014492:	4b9f      	ldr	r3, [pc, #636]	; (8014710 <ip4_reass+0x2fc>)
 8014494:	881b      	ldrh	r3, [r3, #0]
 8014496:	461a      	mov	r2, r3
 8014498:	8c3b      	ldrh	r3, [r7, #32]
 801449a:	4413      	add	r3, r2
 801449c:	2b0a      	cmp	r3, #10
 801449e:	dd10      	ble.n	80144c2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80144a0:	8c3b      	ldrh	r3, [r7, #32]
 80144a2:	4619      	mov	r1, r3
 80144a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80144a6:	f7ff fd81 	bl	8013fac <ip_reass_remove_oldest_datagram>
 80144aa:	4603      	mov	r3, r0
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	f000 812d 	beq.w	801470c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80144b2:	4b97      	ldr	r3, [pc, #604]	; (8014710 <ip4_reass+0x2fc>)
 80144b4:	881b      	ldrh	r3, [r3, #0]
 80144b6:	461a      	mov	r2, r3
 80144b8:	8c3b      	ldrh	r3, [r7, #32]
 80144ba:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80144bc:	2b0a      	cmp	r3, #10
 80144be:	f300 8125 	bgt.w	801470c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80144c2:	4b94      	ldr	r3, [pc, #592]	; (8014714 <ip4_reass+0x300>)
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	633b      	str	r3, [r7, #48]	; 0x30
 80144c8:	e015      	b.n	80144f6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80144ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144cc:	695a      	ldr	r2, [r3, #20]
 80144ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144d0:	68db      	ldr	r3, [r3, #12]
 80144d2:	429a      	cmp	r2, r3
 80144d4:	d10c      	bne.n	80144f0 <ip4_reass+0xdc>
 80144d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144d8:	699a      	ldr	r2, [r3, #24]
 80144da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144dc:	691b      	ldr	r3, [r3, #16]
 80144de:	429a      	cmp	r2, r3
 80144e0:	d106      	bne.n	80144f0 <ip4_reass+0xdc>
 80144e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144e4:	899a      	ldrh	r2, [r3, #12]
 80144e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144e8:	889b      	ldrh	r3, [r3, #4]
 80144ea:	b29b      	uxth	r3, r3
 80144ec:	429a      	cmp	r2, r3
 80144ee:	d006      	beq.n	80144fe <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80144f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	633b      	str	r3, [r7, #48]	; 0x30
 80144f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d1e6      	bne.n	80144ca <ip4_reass+0xb6>
 80144fc:	e000      	b.n	8014500 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80144fe:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8014500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014502:	2b00      	cmp	r3, #0
 8014504:	d109      	bne.n	801451a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8014506:	8c3b      	ldrh	r3, [r7, #32]
 8014508:	4619      	mov	r1, r3
 801450a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801450c:	f7ff fdb0 	bl	8014070 <ip_reass_enqueue_new_datagram>
 8014510:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8014512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014514:	2b00      	cmp	r3, #0
 8014516:	d11c      	bne.n	8014552 <ip4_reass+0x13e>
      goto nullreturn;
 8014518:	e109      	b.n	801472e <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801451a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801451c:	88db      	ldrh	r3, [r3, #6]
 801451e:	b29b      	uxth	r3, r3
 8014520:	4618      	mov	r0, r3
 8014522:	f7f5 fe01 	bl	800a128 <lwip_htons>
 8014526:	4603      	mov	r3, r0
 8014528:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801452c:	2b00      	cmp	r3, #0
 801452e:	d110      	bne.n	8014552 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8014530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014532:	89db      	ldrh	r3, [r3, #14]
 8014534:	4618      	mov	r0, r3
 8014536:	f7f5 fdf7 	bl	800a128 <lwip_htons>
 801453a:	4603      	mov	r3, r0
 801453c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014540:	2b00      	cmp	r3, #0
 8014542:	d006      	beq.n	8014552 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014546:	3308      	adds	r3, #8
 8014548:	2214      	movs	r2, #20
 801454a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801454c:	4618      	mov	r0, r3
 801454e:	f000 fb9d 	bl	8014c8c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8014552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014554:	88db      	ldrh	r3, [r3, #6]
 8014556:	b29b      	uxth	r3, r3
 8014558:	f003 0320 	and.w	r3, r3, #32
 801455c:	2b00      	cmp	r3, #0
 801455e:	bf0c      	ite	eq
 8014560:	2301      	moveq	r3, #1
 8014562:	2300      	movne	r3, #0
 8014564:	b2db      	uxtb	r3, r3
 8014566:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8014568:	69fb      	ldr	r3, [r7, #28]
 801456a:	2b00      	cmp	r3, #0
 801456c:	d00e      	beq.n	801458c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801456e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014570:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014572:	4413      	add	r3, r2
 8014574:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8014576:	8b7a      	ldrh	r2, [r7, #26]
 8014578:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801457a:	429a      	cmp	r2, r3
 801457c:	f0c0 80a0 	bcc.w	80146c0 <ip4_reass+0x2ac>
 8014580:	8b7b      	ldrh	r3, [r7, #26]
 8014582:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8014586:	4293      	cmp	r3, r2
 8014588:	f200 809a 	bhi.w	80146c0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801458c:	69fa      	ldr	r2, [r7, #28]
 801458e:	6879      	ldr	r1, [r7, #4]
 8014590:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014592:	f7ff fdd5 	bl	8014140 <ip_reass_chain_frag_into_datagram_and_validate>
 8014596:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8014598:	697b      	ldr	r3, [r7, #20]
 801459a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801459e:	f000 8091 	beq.w	80146c4 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80145a2:	4b5b      	ldr	r3, [pc, #364]	; (8014710 <ip4_reass+0x2fc>)
 80145a4:	881a      	ldrh	r2, [r3, #0]
 80145a6:	8c3b      	ldrh	r3, [r7, #32]
 80145a8:	4413      	add	r3, r2
 80145aa:	b29a      	uxth	r2, r3
 80145ac:	4b58      	ldr	r3, [pc, #352]	; (8014710 <ip4_reass+0x2fc>)
 80145ae:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80145b0:	69fb      	ldr	r3, [r7, #28]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d00d      	beq.n	80145d2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80145b6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80145b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80145ba:	4413      	add	r3, r2
 80145bc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80145be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145c0:	8a7a      	ldrh	r2, [r7, #18]
 80145c2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80145c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145c6:	7f9b      	ldrb	r3, [r3, #30]
 80145c8:	f043 0301 	orr.w	r3, r3, #1
 80145cc:	b2da      	uxtb	r2, r3
 80145ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145d0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80145d2:	697b      	ldr	r3, [r7, #20]
 80145d4:	2b01      	cmp	r3, #1
 80145d6:	d171      	bne.n	80146bc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80145d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145da:	8b9b      	ldrh	r3, [r3, #28]
 80145dc:	3314      	adds	r3, #20
 80145de:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80145e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145e2:	685b      	ldr	r3, [r3, #4]
 80145e4:	685b      	ldr	r3, [r3, #4]
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80145ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145ec:	685b      	ldr	r3, [r3, #4]
 80145ee:	685b      	ldr	r3, [r3, #4]
 80145f0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80145f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145f4:	3308      	adds	r3, #8
 80145f6:	2214      	movs	r2, #20
 80145f8:	4619      	mov	r1, r3
 80145fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80145fc:	f000 fb46 	bl	8014c8c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8014600:	8a3b      	ldrh	r3, [r7, #16]
 8014602:	4618      	mov	r0, r3
 8014604:	f7f5 fd90 	bl	800a128 <lwip_htons>
 8014608:	4603      	mov	r3, r0
 801460a:	461a      	mov	r2, r3
 801460c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801460e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8014610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014612:	2200      	movs	r2, #0
 8014614:	719a      	strb	r2, [r3, #6]
 8014616:	2200      	movs	r2, #0
 8014618:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801461a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801461c:	2200      	movs	r2, #0
 801461e:	729a      	strb	r2, [r3, #10]
 8014620:	2200      	movs	r2, #0
 8014622:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014626:	685b      	ldr	r3, [r3, #4]
 8014628:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801462a:	e00d      	b.n	8014648 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801462c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801462e:	685b      	ldr	r3, [r3, #4]
 8014630:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8014632:	2114      	movs	r1, #20
 8014634:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014636:	f7f7 f907 	bl	800b848 <pbuf_remove_header>
      pbuf_cat(p, r);
 801463a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801463c:	6878      	ldr	r0, [r7, #4]
 801463e:	f7f7 fa4b 	bl	800bad8 <pbuf_cat>
      r = iprh->next_pbuf;
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8014648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801464a:	2b00      	cmp	r3, #0
 801464c:	d1ee      	bne.n	801462c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801464e:	4b31      	ldr	r3, [pc, #196]	; (8014714 <ip4_reass+0x300>)
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014654:	429a      	cmp	r2, r3
 8014656:	d102      	bne.n	801465e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014658:	2300      	movs	r3, #0
 801465a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801465c:	e010      	b.n	8014680 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801465e:	4b2d      	ldr	r3, [pc, #180]	; (8014714 <ip4_reass+0x300>)
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014664:	e007      	b.n	8014676 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8014666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801466c:	429a      	cmp	r2, r3
 801466e:	d006      	beq.n	801467e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014678:	2b00      	cmp	r3, #0
 801467a:	d1f4      	bne.n	8014666 <ip4_reass+0x252>
 801467c:	e000      	b.n	8014680 <ip4_reass+0x26c>
          break;
 801467e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8014680:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014682:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014684:	f7ff fd2e 	bl	80140e4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8014688:	6878      	ldr	r0, [r7, #4]
 801468a:	f7f7 f9eb 	bl	800ba64 <pbuf_clen>
 801468e:	4603      	mov	r3, r0
 8014690:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8014692:	4b1f      	ldr	r3, [pc, #124]	; (8014710 <ip4_reass+0x2fc>)
 8014694:	881b      	ldrh	r3, [r3, #0]
 8014696:	8c3a      	ldrh	r2, [r7, #32]
 8014698:	429a      	cmp	r2, r3
 801469a:	d906      	bls.n	80146aa <ip4_reass+0x296>
 801469c:	4b1e      	ldr	r3, [pc, #120]	; (8014718 <ip4_reass+0x304>)
 801469e:	f240 229b 	movw	r2, #667	; 0x29b
 80146a2:	491e      	ldr	r1, [pc, #120]	; (801471c <ip4_reass+0x308>)
 80146a4:	481e      	ldr	r0, [pc, #120]	; (8014720 <ip4_reass+0x30c>)
 80146a6:	f000 fb07 	bl	8014cb8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80146aa:	4b19      	ldr	r3, [pc, #100]	; (8014710 <ip4_reass+0x2fc>)
 80146ac:	881a      	ldrh	r2, [r3, #0]
 80146ae:	8c3b      	ldrh	r3, [r7, #32]
 80146b0:	1ad3      	subs	r3, r2, r3
 80146b2:	b29a      	uxth	r2, r3
 80146b4:	4b16      	ldr	r3, [pc, #88]	; (8014710 <ip4_reass+0x2fc>)
 80146b6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	e03c      	b.n	8014736 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80146bc:	2300      	movs	r3, #0
 80146be:	e03a      	b.n	8014736 <ip4_reass+0x322>
      goto nullreturn_ipr;
 80146c0:	bf00      	nop
 80146c2:	e000      	b.n	80146c6 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80146c4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80146c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d106      	bne.n	80146da <ip4_reass+0x2c6>
 80146cc:	4b12      	ldr	r3, [pc, #72]	; (8014718 <ip4_reass+0x304>)
 80146ce:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80146d2:	4914      	ldr	r1, [pc, #80]	; (8014724 <ip4_reass+0x310>)
 80146d4:	4812      	ldr	r0, [pc, #72]	; (8014720 <ip4_reass+0x30c>)
 80146d6:	f000 faef 	bl	8014cb8 <iprintf>
  if (ipr->p == NULL) {
 80146da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146dc:	685b      	ldr	r3, [r3, #4]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d124      	bne.n	801472c <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80146e2:	4b0c      	ldr	r3, [pc, #48]	; (8014714 <ip4_reass+0x300>)
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80146e8:	429a      	cmp	r2, r3
 80146ea:	d006      	beq.n	80146fa <ip4_reass+0x2e6>
 80146ec:	4b0a      	ldr	r3, [pc, #40]	; (8014718 <ip4_reass+0x304>)
 80146ee:	f240 22ab 	movw	r2, #683	; 0x2ab
 80146f2:	490d      	ldr	r1, [pc, #52]	; (8014728 <ip4_reass+0x314>)
 80146f4:	480a      	ldr	r0, [pc, #40]	; (8014720 <ip4_reass+0x30c>)
 80146f6:	f000 fadf 	bl	8014cb8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80146fa:	2100      	movs	r1, #0
 80146fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80146fe:	f7ff fcf1 	bl	80140e4 <ip_reass_dequeue_datagram>
 8014702:	e014      	b.n	801472e <ip4_reass+0x31a>
    goto nullreturn;
 8014704:	bf00      	nop
 8014706:	e012      	b.n	801472e <ip4_reass+0x31a>
    goto nullreturn;
 8014708:	bf00      	nop
 801470a:	e010      	b.n	801472e <ip4_reass+0x31a>
      goto nullreturn;
 801470c:	bf00      	nop
 801470e:	e00e      	b.n	801472e <ip4_reass+0x31a>
 8014710:	2400023c 	.word	0x2400023c
 8014714:	24000238 	.word	0x24000238
 8014718:	08018554 	.word	0x08018554
 801471c:	080186c4 	.word	0x080186c4
 8014720:	0801859c 	.word	0x0801859c
 8014724:	080186e0 	.word	0x080186e0
 8014728:	080186ec 	.word	0x080186ec
  }

nullreturn:
 801472c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801472e:	6878      	ldr	r0, [r7, #4]
 8014730:	f7f7 f910 	bl	800b954 <pbuf_free>
  return NULL;
 8014734:	2300      	movs	r3, #0
}
 8014736:	4618      	mov	r0, r3
 8014738:	3738      	adds	r7, #56	; 0x38
 801473a:	46bd      	mov	sp, r7
 801473c:	bd80      	pop	{r7, pc}
 801473e:	bf00      	nop

08014740 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014740:	b580      	push	{r7, lr}
 8014742:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014744:	2005      	movs	r0, #5
 8014746:	f7f6 fa1f 	bl	800ab88 <memp_malloc>
 801474a:	4603      	mov	r3, r0
}
 801474c:	4618      	mov	r0, r3
 801474e:	bd80      	pop	{r7, pc}

08014750 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014750:	b580      	push	{r7, lr}
 8014752:	b082      	sub	sp, #8
 8014754:	af00      	add	r7, sp, #0
 8014756:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	2b00      	cmp	r3, #0
 801475c:	d106      	bne.n	801476c <ip_frag_free_pbuf_custom_ref+0x1c>
 801475e:	4b07      	ldr	r3, [pc, #28]	; (801477c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014760:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8014764:	4906      	ldr	r1, [pc, #24]	; (8014780 <ip_frag_free_pbuf_custom_ref+0x30>)
 8014766:	4807      	ldr	r0, [pc, #28]	; (8014784 <ip_frag_free_pbuf_custom_ref+0x34>)
 8014768:	f000 faa6 	bl	8014cb8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801476c:	6879      	ldr	r1, [r7, #4]
 801476e:	2005      	movs	r0, #5
 8014770:	f7f6 fa7a 	bl	800ac68 <memp_free>
}
 8014774:	bf00      	nop
 8014776:	3708      	adds	r7, #8
 8014778:	46bd      	mov	sp, r7
 801477a:	bd80      	pop	{r7, pc}
 801477c:	08018554 	.word	0x08018554
 8014780:	0801870c 	.word	0x0801870c
 8014784:	0801859c 	.word	0x0801859c

08014788 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014788:	b580      	push	{r7, lr}
 801478a:	b084      	sub	sp, #16
 801478c:	af00      	add	r7, sp, #0
 801478e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d106      	bne.n	80147a8 <ipfrag_free_pbuf_custom+0x20>
 801479a:	4b11      	ldr	r3, [pc, #68]	; (80147e0 <ipfrag_free_pbuf_custom+0x58>)
 801479c:	f240 22ce 	movw	r2, #718	; 0x2ce
 80147a0:	4910      	ldr	r1, [pc, #64]	; (80147e4 <ipfrag_free_pbuf_custom+0x5c>)
 80147a2:	4811      	ldr	r0, [pc, #68]	; (80147e8 <ipfrag_free_pbuf_custom+0x60>)
 80147a4:	f000 fa88 	bl	8014cb8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80147a8:	68fa      	ldr	r2, [r7, #12]
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	429a      	cmp	r2, r3
 80147ae:	d006      	beq.n	80147be <ipfrag_free_pbuf_custom+0x36>
 80147b0:	4b0b      	ldr	r3, [pc, #44]	; (80147e0 <ipfrag_free_pbuf_custom+0x58>)
 80147b2:	f240 22cf 	movw	r2, #719	; 0x2cf
 80147b6:	490d      	ldr	r1, [pc, #52]	; (80147ec <ipfrag_free_pbuf_custom+0x64>)
 80147b8:	480b      	ldr	r0, [pc, #44]	; (80147e8 <ipfrag_free_pbuf_custom+0x60>)
 80147ba:	f000 fa7d 	bl	8014cb8 <iprintf>
  if (pcr->original != NULL) {
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	695b      	ldr	r3, [r3, #20]
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d004      	beq.n	80147d0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	695b      	ldr	r3, [r3, #20]
 80147ca:	4618      	mov	r0, r3
 80147cc:	f7f7 f8c2 	bl	800b954 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80147d0:	68f8      	ldr	r0, [r7, #12]
 80147d2:	f7ff ffbd 	bl	8014750 <ip_frag_free_pbuf_custom_ref>
}
 80147d6:	bf00      	nop
 80147d8:	3710      	adds	r7, #16
 80147da:	46bd      	mov	sp, r7
 80147dc:	bd80      	pop	{r7, pc}
 80147de:	bf00      	nop
 80147e0:	08018554 	.word	0x08018554
 80147e4:	08018718 	.word	0x08018718
 80147e8:	0801859c 	.word	0x0801859c
 80147ec:	08018724 	.word	0x08018724

080147f0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80147f0:	b580      	push	{r7, lr}
 80147f2:	b094      	sub	sp, #80	; 0x50
 80147f4:	af02      	add	r7, sp, #8
 80147f6:	60f8      	str	r0, [r7, #12]
 80147f8:	60b9      	str	r1, [r7, #8]
 80147fa:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80147fc:	2300      	movs	r3, #0
 80147fe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8014802:	68bb      	ldr	r3, [r7, #8]
 8014804:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014806:	3b14      	subs	r3, #20
 8014808:	2b00      	cmp	r3, #0
 801480a:	da00      	bge.n	801480e <ip4_frag+0x1e>
 801480c:	3307      	adds	r3, #7
 801480e:	10db      	asrs	r3, r3, #3
 8014810:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8014812:	2314      	movs	r3, #20
 8014814:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	685b      	ldr	r3, [r3, #4]
 801481a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801481c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801481e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014822:	781b      	ldrb	r3, [r3, #0]
 8014824:	f003 030f 	and.w	r3, r3, #15
 8014828:	b2db      	uxtb	r3, r3
 801482a:	009b      	lsls	r3, r3, #2
 801482c:	b2db      	uxtb	r3, r3
 801482e:	2b14      	cmp	r3, #20
 8014830:	d002      	beq.n	8014838 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8014832:	f06f 0305 	mvn.w	r3, #5
 8014836:	e110      	b.n	8014a5a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	895b      	ldrh	r3, [r3, #10]
 801483c:	2b13      	cmp	r3, #19
 801483e:	d809      	bhi.n	8014854 <ip4_frag+0x64>
 8014840:	4b88      	ldr	r3, [pc, #544]	; (8014a64 <ip4_frag+0x274>)
 8014842:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8014846:	4988      	ldr	r1, [pc, #544]	; (8014a68 <ip4_frag+0x278>)
 8014848:	4888      	ldr	r0, [pc, #544]	; (8014a6c <ip4_frag+0x27c>)
 801484a:	f000 fa35 	bl	8014cb8 <iprintf>
 801484e:	f06f 0305 	mvn.w	r3, #5
 8014852:	e102      	b.n	8014a5a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014856:	88db      	ldrh	r3, [r3, #6]
 8014858:	b29b      	uxth	r3, r3
 801485a:	4618      	mov	r0, r3
 801485c:	f7f5 fc64 	bl	800a128 <lwip_htons>
 8014860:	4603      	mov	r3, r0
 8014862:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8014864:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014866:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801486a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801486e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014870:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014874:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	891b      	ldrh	r3, [r3, #8]
 801487a:	3b14      	subs	r3, #20
 801487c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8014880:	e0e1      	b.n	8014a46 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8014882:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014884:	00db      	lsls	r3, r3, #3
 8014886:	b29b      	uxth	r3, r3
 8014888:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801488c:	4293      	cmp	r3, r2
 801488e:	bf28      	it	cs
 8014890:	4613      	movcs	r3, r2
 8014892:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014894:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014898:	2114      	movs	r1, #20
 801489a:	200e      	movs	r0, #14
 801489c:	f7f6 fd76 	bl	800b38c <pbuf_alloc>
 80148a0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80148a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	f000 80d5 	beq.w	8014a54 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80148aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ac:	895b      	ldrh	r3, [r3, #10]
 80148ae:	2b13      	cmp	r3, #19
 80148b0:	d806      	bhi.n	80148c0 <ip4_frag+0xd0>
 80148b2:	4b6c      	ldr	r3, [pc, #432]	; (8014a64 <ip4_frag+0x274>)
 80148b4:	f44f 7249 	mov.w	r2, #804	; 0x324
 80148b8:	496d      	ldr	r1, [pc, #436]	; (8014a70 <ip4_frag+0x280>)
 80148ba:	486c      	ldr	r0, [pc, #432]	; (8014a6c <ip4_frag+0x27c>)
 80148bc:	f000 f9fc 	bl	8014cb8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80148c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148c2:	685b      	ldr	r3, [r3, #4]
 80148c4:	2214      	movs	r2, #20
 80148c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80148c8:	4618      	mov	r0, r3
 80148ca:	f000 f9df 	bl	8014c8c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80148ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148d0:	685b      	ldr	r3, [r3, #4]
 80148d2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80148d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80148d6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80148da:	e064      	b.n	80149a6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	895a      	ldrh	r2, [r3, #10]
 80148e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80148e2:	1ad3      	subs	r3, r2, r3
 80148e4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	895b      	ldrh	r3, [r3, #10]
 80148ea:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80148ec:	429a      	cmp	r2, r3
 80148ee:	d906      	bls.n	80148fe <ip4_frag+0x10e>
 80148f0:	4b5c      	ldr	r3, [pc, #368]	; (8014a64 <ip4_frag+0x274>)
 80148f2:	f240 322d 	movw	r2, #813	; 0x32d
 80148f6:	495f      	ldr	r1, [pc, #380]	; (8014a74 <ip4_frag+0x284>)
 80148f8:	485c      	ldr	r0, [pc, #368]	; (8014a6c <ip4_frag+0x27c>)
 80148fa:	f000 f9dd 	bl	8014cb8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80148fe:	8bfa      	ldrh	r2, [r7, #30]
 8014900:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014904:	4293      	cmp	r3, r2
 8014906:	bf28      	it	cs
 8014908:	4613      	movcs	r3, r2
 801490a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801490e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014912:	2b00      	cmp	r3, #0
 8014914:	d105      	bne.n	8014922 <ip4_frag+0x132>
        poff = 0;
 8014916:	2300      	movs	r3, #0
 8014918:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	60fb      	str	r3, [r7, #12]
        continue;
 8014920:	e041      	b.n	80149a6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8014922:	f7ff ff0d 	bl	8014740 <ip_frag_alloc_pbuf_custom_ref>
 8014926:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014928:	69bb      	ldr	r3, [r7, #24]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d103      	bne.n	8014936 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801492e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014930:	f7f7 f810 	bl	800b954 <pbuf_free>
        goto memerr;
 8014934:	e08f      	b.n	8014a56 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014936:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801493c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801493e:	4413      	add	r3, r2
 8014940:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8014944:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8014948:	9201      	str	r2, [sp, #4]
 801494a:	9300      	str	r3, [sp, #0]
 801494c:	4603      	mov	r3, r0
 801494e:	2241      	movs	r2, #65	; 0x41
 8014950:	2000      	movs	r0, #0
 8014952:	f7f6 fe45 	bl	800b5e0 <pbuf_alloced_custom>
 8014956:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014958:	697b      	ldr	r3, [r7, #20]
 801495a:	2b00      	cmp	r3, #0
 801495c:	d106      	bne.n	801496c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801495e:	69b8      	ldr	r0, [r7, #24]
 8014960:	f7ff fef6 	bl	8014750 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014964:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014966:	f7f6 fff5 	bl	800b954 <pbuf_free>
        goto memerr;
 801496a:	e074      	b.n	8014a56 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801496c:	68f8      	ldr	r0, [r7, #12]
 801496e:	f7f7 f891 	bl	800ba94 <pbuf_ref>
      pcr->original = p;
 8014972:	69bb      	ldr	r3, [r7, #24]
 8014974:	68fa      	ldr	r2, [r7, #12]
 8014976:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014978:	69bb      	ldr	r3, [r7, #24]
 801497a:	4a3f      	ldr	r2, [pc, #252]	; (8014a78 <ip4_frag+0x288>)
 801497c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801497e:	6979      	ldr	r1, [r7, #20]
 8014980:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014982:	f7f7 f8a9 	bl	800bad8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014986:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801498a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801498e:	1ad3      	subs	r3, r2, r3
 8014990:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8014994:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014998:	2b00      	cmp	r3, #0
 801499a:	d004      	beq.n	80149a6 <ip4_frag+0x1b6>
        poff = 0;
 801499c:	2300      	movs	r3, #0
 801499e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80149a6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d196      	bne.n	80148dc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80149ae:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80149b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80149b4:	4413      	add	r3, r2
 80149b6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80149b8:	68bb      	ldr	r3, [r7, #8]
 80149ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80149bc:	f1a3 0213 	sub.w	r2, r3, #19
 80149c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80149c4:	429a      	cmp	r2, r3
 80149c6:	bfcc      	ite	gt
 80149c8:	2301      	movgt	r3, #1
 80149ca:	2300      	movle	r3, #0
 80149cc:	b2db      	uxtb	r3, r3
 80149ce:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80149d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80149d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80149d8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80149da:	6a3b      	ldr	r3, [r7, #32]
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d002      	beq.n	80149e6 <ip4_frag+0x1f6>
 80149e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d003      	beq.n	80149ee <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80149e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80149e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80149ec:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80149ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80149f0:	4618      	mov	r0, r3
 80149f2:	f7f5 fb99 	bl	800a128 <lwip_htons>
 80149f6:	4603      	mov	r3, r0
 80149f8:	461a      	mov	r2, r3
 80149fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149fc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80149fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014a00:	3314      	adds	r3, #20
 8014a02:	b29b      	uxth	r3, r3
 8014a04:	4618      	mov	r0, r3
 8014a06:	f7f5 fb8f 	bl	800a128 <lwip_htons>
 8014a0a:	4603      	mov	r3, r0
 8014a0c:	461a      	mov	r2, r3
 8014a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a10:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8014a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a14:	2200      	movs	r2, #0
 8014a16:	729a      	strb	r2, [r3, #10]
 8014a18:	2200      	movs	r2, #0
 8014a1a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014a1c:	68bb      	ldr	r3, [r7, #8]
 8014a1e:	695b      	ldr	r3, [r3, #20]
 8014a20:	687a      	ldr	r2, [r7, #4]
 8014a22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014a24:	68b8      	ldr	r0, [r7, #8]
 8014a26:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014a28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a2a:	f7f6 ff93 	bl	800b954 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8014a2e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014a32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014a34:	1ad3      	subs	r3, r2, r3
 8014a36:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8014a3a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8014a3e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014a40:	4413      	add	r3, r2
 8014a42:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8014a46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	f47f af19 	bne.w	8014882 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014a50:	2300      	movs	r3, #0
 8014a52:	e002      	b.n	8014a5a <ip4_frag+0x26a>
      goto memerr;
 8014a54:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8014a56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	3748      	adds	r7, #72	; 0x48
 8014a5e:	46bd      	mov	sp, r7
 8014a60:	bd80      	pop	{r7, pc}
 8014a62:	bf00      	nop
 8014a64:	08018554 	.word	0x08018554
 8014a68:	08018730 	.word	0x08018730
 8014a6c:	0801859c 	.word	0x0801859c
 8014a70:	0801874c 	.word	0x0801874c
 8014a74:	0801876c 	.word	0x0801876c
 8014a78:	08014789 	.word	0x08014789

08014a7c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014a7c:	b580      	push	{r7, lr}
 8014a7e:	b086      	sub	sp, #24
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	6078      	str	r0, [r7, #4]
 8014a84:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014a86:	230e      	movs	r3, #14
 8014a88:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	895b      	ldrh	r3, [r3, #10]
 8014a8e:	2b0e      	cmp	r3, #14
 8014a90:	d96e      	bls.n	8014b70 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	7bdb      	ldrb	r3, [r3, #15]
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d106      	bne.n	8014aa8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8014a9a:	683b      	ldr	r3, [r7, #0]
 8014a9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014aa0:	3301      	adds	r3, #1
 8014aa2:	b2da      	uxtb	r2, r3
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	685b      	ldr	r3, [r3, #4]
 8014aac:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8014aae:	693b      	ldr	r3, [r7, #16]
 8014ab0:	7b1a      	ldrb	r2, [r3, #12]
 8014ab2:	7b5b      	ldrb	r3, [r3, #13]
 8014ab4:	021b      	lsls	r3, r3, #8
 8014ab6:	4313      	orrs	r3, r2
 8014ab8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014aba:	693b      	ldr	r3, [r7, #16]
 8014abc:	781b      	ldrb	r3, [r3, #0]
 8014abe:	f003 0301 	and.w	r3, r3, #1
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d023      	beq.n	8014b0e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014ac6:	693b      	ldr	r3, [r7, #16]
 8014ac8:	781b      	ldrb	r3, [r3, #0]
 8014aca:	2b01      	cmp	r3, #1
 8014acc:	d10f      	bne.n	8014aee <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014ace:	693b      	ldr	r3, [r7, #16]
 8014ad0:	785b      	ldrb	r3, [r3, #1]
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d11b      	bne.n	8014b0e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014ad6:	693b      	ldr	r3, [r7, #16]
 8014ad8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014ada:	2b5e      	cmp	r3, #94	; 0x5e
 8014adc:	d117      	bne.n	8014b0e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	7b5b      	ldrb	r3, [r3, #13]
 8014ae2:	f043 0310 	orr.w	r3, r3, #16
 8014ae6:	b2da      	uxtb	r2, r3
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	735a      	strb	r2, [r3, #13]
 8014aec:	e00f      	b.n	8014b0e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014aee:	693b      	ldr	r3, [r7, #16]
 8014af0:	2206      	movs	r2, #6
 8014af2:	4928      	ldr	r1, [pc, #160]	; (8014b94 <ethernet_input+0x118>)
 8014af4:	4618      	mov	r0, r3
 8014af6:	f000 f8bb 	bl	8014c70 <memcmp>
 8014afa:	4603      	mov	r3, r0
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d106      	bne.n	8014b0e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	7b5b      	ldrb	r3, [r3, #13]
 8014b04:	f043 0308 	orr.w	r3, r3, #8
 8014b08:	b2da      	uxtb	r2, r3
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014b0e:	89fb      	ldrh	r3, [r7, #14]
 8014b10:	2b08      	cmp	r3, #8
 8014b12:	d003      	beq.n	8014b1c <ethernet_input+0xa0>
 8014b14:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8014b18:	d014      	beq.n	8014b44 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014b1a:	e032      	b.n	8014b82 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014b1c:	683b      	ldr	r3, [r7, #0]
 8014b1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014b22:	f003 0308 	and.w	r3, r3, #8
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d024      	beq.n	8014b74 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014b2a:	8afb      	ldrh	r3, [r7, #22]
 8014b2c:	4619      	mov	r1, r3
 8014b2e:	6878      	ldr	r0, [r7, #4]
 8014b30:	f7f6 fe8a 	bl	800b848 <pbuf_remove_header>
 8014b34:	4603      	mov	r3, r0
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d11e      	bne.n	8014b78 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8014b3a:	6839      	ldr	r1, [r7, #0]
 8014b3c:	6878      	ldr	r0, [r7, #4]
 8014b3e:	f7fe fe95 	bl	801386c <ip4_input>
      break;
 8014b42:	e013      	b.n	8014b6c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014b44:	683b      	ldr	r3, [r7, #0]
 8014b46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014b4a:	f003 0308 	and.w	r3, r3, #8
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d014      	beq.n	8014b7c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014b52:	8afb      	ldrh	r3, [r7, #22]
 8014b54:	4619      	mov	r1, r3
 8014b56:	6878      	ldr	r0, [r7, #4]
 8014b58:	f7f6 fe76 	bl	800b848 <pbuf_remove_header>
 8014b5c:	4603      	mov	r3, r0
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d10e      	bne.n	8014b80 <ethernet_input+0x104>
        etharp_input(p, netif);
 8014b62:	6839      	ldr	r1, [r7, #0]
 8014b64:	6878      	ldr	r0, [r7, #4]
 8014b66:	f7fe f80f 	bl	8012b88 <etharp_input>
      break;
 8014b6a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014b6c:	2300      	movs	r3, #0
 8014b6e:	e00c      	b.n	8014b8a <ethernet_input+0x10e>
    goto free_and_return;
 8014b70:	bf00      	nop
 8014b72:	e006      	b.n	8014b82 <ethernet_input+0x106>
        goto free_and_return;
 8014b74:	bf00      	nop
 8014b76:	e004      	b.n	8014b82 <ethernet_input+0x106>
        goto free_and_return;
 8014b78:	bf00      	nop
 8014b7a:	e002      	b.n	8014b82 <ethernet_input+0x106>
        goto free_and_return;
 8014b7c:	bf00      	nop
 8014b7e:	e000      	b.n	8014b82 <ethernet_input+0x106>
        goto free_and_return;
 8014b80:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014b82:	6878      	ldr	r0, [r7, #4]
 8014b84:	f7f6 fee6 	bl	800b954 <pbuf_free>
  return ERR_OK;
 8014b88:	2300      	movs	r3, #0
}
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	3718      	adds	r7, #24
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	bd80      	pop	{r7, pc}
 8014b92:	bf00      	nop
 8014b94:	08019118 	.word	0x08019118

08014b98 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014b98:	b580      	push	{r7, lr}
 8014b9a:	b086      	sub	sp, #24
 8014b9c:	af00      	add	r7, sp, #0
 8014b9e:	60f8      	str	r0, [r7, #12]
 8014ba0:	60b9      	str	r1, [r7, #8]
 8014ba2:	607a      	str	r2, [r7, #4]
 8014ba4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014ba6:	8c3b      	ldrh	r3, [r7, #32]
 8014ba8:	4618      	mov	r0, r3
 8014baa:	f7f5 fabd 	bl	800a128 <lwip_htons>
 8014bae:	4603      	mov	r3, r0
 8014bb0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014bb2:	210e      	movs	r1, #14
 8014bb4:	68b8      	ldr	r0, [r7, #8]
 8014bb6:	f7f6 fe37 	bl	800b828 <pbuf_add_header>
 8014bba:	4603      	mov	r3, r0
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d125      	bne.n	8014c0c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014bc0:	68bb      	ldr	r3, [r7, #8]
 8014bc2:	685b      	ldr	r3, [r3, #4]
 8014bc4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014bc6:	693b      	ldr	r3, [r7, #16]
 8014bc8:	8afa      	ldrh	r2, [r7, #22]
 8014bca:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014bcc:	693b      	ldr	r3, [r7, #16]
 8014bce:	2206      	movs	r2, #6
 8014bd0:	6839      	ldr	r1, [r7, #0]
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	f000 f85a 	bl	8014c8c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014bd8:	693b      	ldr	r3, [r7, #16]
 8014bda:	3306      	adds	r3, #6
 8014bdc:	2206      	movs	r2, #6
 8014bde:	6879      	ldr	r1, [r7, #4]
 8014be0:	4618      	mov	r0, r3
 8014be2:	f000 f853 	bl	8014c8c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014bec:	2b06      	cmp	r3, #6
 8014bee:	d006      	beq.n	8014bfe <ethernet_output+0x66>
 8014bf0:	4b0a      	ldr	r3, [pc, #40]	; (8014c1c <ethernet_output+0x84>)
 8014bf2:	f44f 7299 	mov.w	r2, #306	; 0x132
 8014bf6:	490a      	ldr	r1, [pc, #40]	; (8014c20 <ethernet_output+0x88>)
 8014bf8:	480a      	ldr	r0, [pc, #40]	; (8014c24 <ethernet_output+0x8c>)
 8014bfa:	f000 f85d 	bl	8014cb8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	699b      	ldr	r3, [r3, #24]
 8014c02:	68b9      	ldr	r1, [r7, #8]
 8014c04:	68f8      	ldr	r0, [r7, #12]
 8014c06:	4798      	blx	r3
 8014c08:	4603      	mov	r3, r0
 8014c0a:	e002      	b.n	8014c12 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014c0c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014c0e:	f06f 0301 	mvn.w	r3, #1
}
 8014c12:	4618      	mov	r0, r3
 8014c14:	3718      	adds	r7, #24
 8014c16:	46bd      	mov	sp, r7
 8014c18:	bd80      	pop	{r7, pc}
 8014c1a:	bf00      	nop
 8014c1c:	0801877c 	.word	0x0801877c
 8014c20:	080187b4 	.word	0x080187b4
 8014c24:	080187e8 	.word	0x080187e8

08014c28 <__libc_init_array>:
 8014c28:	b570      	push	{r4, r5, r6, lr}
 8014c2a:	4d0d      	ldr	r5, [pc, #52]	; (8014c60 <__libc_init_array+0x38>)
 8014c2c:	4c0d      	ldr	r4, [pc, #52]	; (8014c64 <__libc_init_array+0x3c>)
 8014c2e:	1b64      	subs	r4, r4, r5
 8014c30:	10a4      	asrs	r4, r4, #2
 8014c32:	2600      	movs	r6, #0
 8014c34:	42a6      	cmp	r6, r4
 8014c36:	d109      	bne.n	8014c4c <__libc_init_array+0x24>
 8014c38:	4d0b      	ldr	r5, [pc, #44]	; (8014c68 <__libc_init_array+0x40>)
 8014c3a:	4c0c      	ldr	r4, [pc, #48]	; (8014c6c <__libc_init_array+0x44>)
 8014c3c:	f001 f872 	bl	8015d24 <_init>
 8014c40:	1b64      	subs	r4, r4, r5
 8014c42:	10a4      	asrs	r4, r4, #2
 8014c44:	2600      	movs	r6, #0
 8014c46:	42a6      	cmp	r6, r4
 8014c48:	d105      	bne.n	8014c56 <__libc_init_array+0x2e>
 8014c4a:	bd70      	pop	{r4, r5, r6, pc}
 8014c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014c50:	4798      	blx	r3
 8014c52:	3601      	adds	r6, #1
 8014c54:	e7ee      	b.n	8014c34 <__libc_init_array+0xc>
 8014c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8014c5a:	4798      	blx	r3
 8014c5c:	3601      	adds	r6, #1
 8014c5e:	e7f2      	b.n	8014c46 <__libc_init_array+0x1e>
 8014c60:	0801927c 	.word	0x0801927c
 8014c64:	0801927c 	.word	0x0801927c
 8014c68:	0801927c 	.word	0x0801927c
 8014c6c:	08019280 	.word	0x08019280

08014c70 <memcmp>:
 8014c70:	b530      	push	{r4, r5, lr}
 8014c72:	3901      	subs	r1, #1
 8014c74:	2400      	movs	r4, #0
 8014c76:	42a2      	cmp	r2, r4
 8014c78:	d101      	bne.n	8014c7e <memcmp+0xe>
 8014c7a:	2000      	movs	r0, #0
 8014c7c:	e005      	b.n	8014c8a <memcmp+0x1a>
 8014c7e:	5d03      	ldrb	r3, [r0, r4]
 8014c80:	3401      	adds	r4, #1
 8014c82:	5d0d      	ldrb	r5, [r1, r4]
 8014c84:	42ab      	cmp	r3, r5
 8014c86:	d0f6      	beq.n	8014c76 <memcmp+0x6>
 8014c88:	1b58      	subs	r0, r3, r5
 8014c8a:	bd30      	pop	{r4, r5, pc}

08014c8c <memcpy>:
 8014c8c:	440a      	add	r2, r1
 8014c8e:	4291      	cmp	r1, r2
 8014c90:	f100 33ff 	add.w	r3, r0, #4294967295
 8014c94:	d100      	bne.n	8014c98 <memcpy+0xc>
 8014c96:	4770      	bx	lr
 8014c98:	b510      	push	{r4, lr}
 8014c9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014c9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014ca2:	4291      	cmp	r1, r2
 8014ca4:	d1f9      	bne.n	8014c9a <memcpy+0xe>
 8014ca6:	bd10      	pop	{r4, pc}

08014ca8 <memset>:
 8014ca8:	4402      	add	r2, r0
 8014caa:	4603      	mov	r3, r0
 8014cac:	4293      	cmp	r3, r2
 8014cae:	d100      	bne.n	8014cb2 <memset+0xa>
 8014cb0:	4770      	bx	lr
 8014cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8014cb6:	e7f9      	b.n	8014cac <memset+0x4>

08014cb8 <iprintf>:
 8014cb8:	b40f      	push	{r0, r1, r2, r3}
 8014cba:	4b0a      	ldr	r3, [pc, #40]	; (8014ce4 <iprintf+0x2c>)
 8014cbc:	b513      	push	{r0, r1, r4, lr}
 8014cbe:	681c      	ldr	r4, [r3, #0]
 8014cc0:	b124      	cbz	r4, 8014ccc <iprintf+0x14>
 8014cc2:	69a3      	ldr	r3, [r4, #24]
 8014cc4:	b913      	cbnz	r3, 8014ccc <iprintf+0x14>
 8014cc6:	4620      	mov	r0, r4
 8014cc8:	f000 f8e0 	bl	8014e8c <__sinit>
 8014ccc:	ab05      	add	r3, sp, #20
 8014cce:	9a04      	ldr	r2, [sp, #16]
 8014cd0:	68a1      	ldr	r1, [r4, #8]
 8014cd2:	9301      	str	r3, [sp, #4]
 8014cd4:	4620      	mov	r0, r4
 8014cd6:	f000 fa67 	bl	80151a8 <_vfiprintf_r>
 8014cda:	b002      	add	sp, #8
 8014cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ce0:	b004      	add	sp, #16
 8014ce2:	4770      	bx	lr
 8014ce4:	24000038 	.word	0x24000038

08014ce8 <rand>:
 8014ce8:	4b17      	ldr	r3, [pc, #92]	; (8014d48 <rand+0x60>)
 8014cea:	b510      	push	{r4, lr}
 8014cec:	681c      	ldr	r4, [r3, #0]
 8014cee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014cf0:	b9b3      	cbnz	r3, 8014d20 <rand+0x38>
 8014cf2:	2018      	movs	r0, #24
 8014cf4:	f000 f97c 	bl	8014ff0 <malloc>
 8014cf8:	63a0      	str	r0, [r4, #56]	; 0x38
 8014cfa:	b928      	cbnz	r0, 8014d08 <rand+0x20>
 8014cfc:	4602      	mov	r2, r0
 8014cfe:	4b13      	ldr	r3, [pc, #76]	; (8014d4c <rand+0x64>)
 8014d00:	4813      	ldr	r0, [pc, #76]	; (8014d50 <rand+0x68>)
 8014d02:	214e      	movs	r1, #78	; 0x4e
 8014d04:	f000 f84c 	bl	8014da0 <__assert_func>
 8014d08:	4a12      	ldr	r2, [pc, #72]	; (8014d54 <rand+0x6c>)
 8014d0a:	4b13      	ldr	r3, [pc, #76]	; (8014d58 <rand+0x70>)
 8014d0c:	e9c0 2300 	strd	r2, r3, [r0]
 8014d10:	4b12      	ldr	r3, [pc, #72]	; (8014d5c <rand+0x74>)
 8014d12:	6083      	str	r3, [r0, #8]
 8014d14:	230b      	movs	r3, #11
 8014d16:	8183      	strh	r3, [r0, #12]
 8014d18:	2201      	movs	r2, #1
 8014d1a:	2300      	movs	r3, #0
 8014d1c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8014d20:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014d22:	480f      	ldr	r0, [pc, #60]	; (8014d60 <rand+0x78>)
 8014d24:	690a      	ldr	r2, [r1, #16]
 8014d26:	694b      	ldr	r3, [r1, #20]
 8014d28:	4c0e      	ldr	r4, [pc, #56]	; (8014d64 <rand+0x7c>)
 8014d2a:	4350      	muls	r0, r2
 8014d2c:	fb04 0003 	mla	r0, r4, r3, r0
 8014d30:	fba2 3404 	umull	r3, r4, r2, r4
 8014d34:	1c5a      	adds	r2, r3, #1
 8014d36:	4404      	add	r4, r0
 8014d38:	f144 0000 	adc.w	r0, r4, #0
 8014d3c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8014d40:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014d44:	bd10      	pop	{r4, pc}
 8014d46:	bf00      	nop
 8014d48:	24000038 	.word	0x24000038
 8014d4c:	0801912c 	.word	0x0801912c
 8014d50:	08019143 	.word	0x08019143
 8014d54:	abcd330e 	.word	0xabcd330e
 8014d58:	e66d1234 	.word	0xe66d1234
 8014d5c:	0005deec 	.word	0x0005deec
 8014d60:	5851f42d 	.word	0x5851f42d
 8014d64:	4c957f2d 	.word	0x4c957f2d

08014d68 <strcpy>:
 8014d68:	4603      	mov	r3, r0
 8014d6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014d6e:	f803 2b01 	strb.w	r2, [r3], #1
 8014d72:	2a00      	cmp	r2, #0
 8014d74:	d1f9      	bne.n	8014d6a <strcpy+0x2>
 8014d76:	4770      	bx	lr

08014d78 <strncpy>:
 8014d78:	b510      	push	{r4, lr}
 8014d7a:	3901      	subs	r1, #1
 8014d7c:	4603      	mov	r3, r0
 8014d7e:	b132      	cbz	r2, 8014d8e <strncpy+0x16>
 8014d80:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014d84:	f803 4b01 	strb.w	r4, [r3], #1
 8014d88:	3a01      	subs	r2, #1
 8014d8a:	2c00      	cmp	r4, #0
 8014d8c:	d1f7      	bne.n	8014d7e <strncpy+0x6>
 8014d8e:	441a      	add	r2, r3
 8014d90:	2100      	movs	r1, #0
 8014d92:	4293      	cmp	r3, r2
 8014d94:	d100      	bne.n	8014d98 <strncpy+0x20>
 8014d96:	bd10      	pop	{r4, pc}
 8014d98:	f803 1b01 	strb.w	r1, [r3], #1
 8014d9c:	e7f9      	b.n	8014d92 <strncpy+0x1a>
	...

08014da0 <__assert_func>:
 8014da0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014da2:	4614      	mov	r4, r2
 8014da4:	461a      	mov	r2, r3
 8014da6:	4b09      	ldr	r3, [pc, #36]	; (8014dcc <__assert_func+0x2c>)
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	4605      	mov	r5, r0
 8014dac:	68d8      	ldr	r0, [r3, #12]
 8014dae:	b14c      	cbz	r4, 8014dc4 <__assert_func+0x24>
 8014db0:	4b07      	ldr	r3, [pc, #28]	; (8014dd0 <__assert_func+0x30>)
 8014db2:	9100      	str	r1, [sp, #0]
 8014db4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014db8:	4906      	ldr	r1, [pc, #24]	; (8014dd4 <__assert_func+0x34>)
 8014dba:	462b      	mov	r3, r5
 8014dbc:	f000 f8e4 	bl	8014f88 <fiprintf>
 8014dc0:	f000 fddc 	bl	801597c <abort>
 8014dc4:	4b04      	ldr	r3, [pc, #16]	; (8014dd8 <__assert_func+0x38>)
 8014dc6:	461c      	mov	r4, r3
 8014dc8:	e7f3      	b.n	8014db2 <__assert_func+0x12>
 8014dca:	bf00      	nop
 8014dcc:	24000038 	.word	0x24000038
 8014dd0:	080191a2 	.word	0x080191a2
 8014dd4:	080191af 	.word	0x080191af
 8014dd8:	080191dd 	.word	0x080191dd

08014ddc <std>:
 8014ddc:	2300      	movs	r3, #0
 8014dde:	b510      	push	{r4, lr}
 8014de0:	4604      	mov	r4, r0
 8014de2:	e9c0 3300 	strd	r3, r3, [r0]
 8014de6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014dea:	6083      	str	r3, [r0, #8]
 8014dec:	8181      	strh	r1, [r0, #12]
 8014dee:	6643      	str	r3, [r0, #100]	; 0x64
 8014df0:	81c2      	strh	r2, [r0, #14]
 8014df2:	6183      	str	r3, [r0, #24]
 8014df4:	4619      	mov	r1, r3
 8014df6:	2208      	movs	r2, #8
 8014df8:	305c      	adds	r0, #92	; 0x5c
 8014dfa:	f7ff ff55 	bl	8014ca8 <memset>
 8014dfe:	4b05      	ldr	r3, [pc, #20]	; (8014e14 <std+0x38>)
 8014e00:	6263      	str	r3, [r4, #36]	; 0x24
 8014e02:	4b05      	ldr	r3, [pc, #20]	; (8014e18 <std+0x3c>)
 8014e04:	62a3      	str	r3, [r4, #40]	; 0x28
 8014e06:	4b05      	ldr	r3, [pc, #20]	; (8014e1c <std+0x40>)
 8014e08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014e0a:	4b05      	ldr	r3, [pc, #20]	; (8014e20 <std+0x44>)
 8014e0c:	6224      	str	r4, [r4, #32]
 8014e0e:	6323      	str	r3, [r4, #48]	; 0x30
 8014e10:	bd10      	pop	{r4, pc}
 8014e12:	bf00      	nop
 8014e14:	08015751 	.word	0x08015751
 8014e18:	08015773 	.word	0x08015773
 8014e1c:	080157ab 	.word	0x080157ab
 8014e20:	080157cf 	.word	0x080157cf

08014e24 <_cleanup_r>:
 8014e24:	4901      	ldr	r1, [pc, #4]	; (8014e2c <_cleanup_r+0x8>)
 8014e26:	f000 b8c1 	b.w	8014fac <_fwalk_reent>
 8014e2a:	bf00      	nop
 8014e2c:	08015ab9 	.word	0x08015ab9

08014e30 <__sfmoreglue>:
 8014e30:	b570      	push	{r4, r5, r6, lr}
 8014e32:	1e4a      	subs	r2, r1, #1
 8014e34:	2568      	movs	r5, #104	; 0x68
 8014e36:	4355      	muls	r5, r2
 8014e38:	460e      	mov	r6, r1
 8014e3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014e3e:	f000 f92f 	bl	80150a0 <_malloc_r>
 8014e42:	4604      	mov	r4, r0
 8014e44:	b140      	cbz	r0, 8014e58 <__sfmoreglue+0x28>
 8014e46:	2100      	movs	r1, #0
 8014e48:	e9c0 1600 	strd	r1, r6, [r0]
 8014e4c:	300c      	adds	r0, #12
 8014e4e:	60a0      	str	r0, [r4, #8]
 8014e50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014e54:	f7ff ff28 	bl	8014ca8 <memset>
 8014e58:	4620      	mov	r0, r4
 8014e5a:	bd70      	pop	{r4, r5, r6, pc}

08014e5c <__sfp_lock_acquire>:
 8014e5c:	4801      	ldr	r0, [pc, #4]	; (8014e64 <__sfp_lock_acquire+0x8>)
 8014e5e:	f000 b8c5 	b.w	8014fec <__retarget_lock_acquire_recursive>
 8014e62:	bf00      	nop
 8014e64:	2400363c 	.word	0x2400363c

08014e68 <__sfp_lock_release>:
 8014e68:	4801      	ldr	r0, [pc, #4]	; (8014e70 <__sfp_lock_release+0x8>)
 8014e6a:	f000 b8c0 	b.w	8014fee <__retarget_lock_release_recursive>
 8014e6e:	bf00      	nop
 8014e70:	2400363c 	.word	0x2400363c

08014e74 <__sinit_lock_acquire>:
 8014e74:	4801      	ldr	r0, [pc, #4]	; (8014e7c <__sinit_lock_acquire+0x8>)
 8014e76:	f000 b8b9 	b.w	8014fec <__retarget_lock_acquire_recursive>
 8014e7a:	bf00      	nop
 8014e7c:	24003637 	.word	0x24003637

08014e80 <__sinit_lock_release>:
 8014e80:	4801      	ldr	r0, [pc, #4]	; (8014e88 <__sinit_lock_release+0x8>)
 8014e82:	f000 b8b4 	b.w	8014fee <__retarget_lock_release_recursive>
 8014e86:	bf00      	nop
 8014e88:	24003637 	.word	0x24003637

08014e8c <__sinit>:
 8014e8c:	b510      	push	{r4, lr}
 8014e8e:	4604      	mov	r4, r0
 8014e90:	f7ff fff0 	bl	8014e74 <__sinit_lock_acquire>
 8014e94:	69a3      	ldr	r3, [r4, #24]
 8014e96:	b11b      	cbz	r3, 8014ea0 <__sinit+0x14>
 8014e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e9c:	f7ff bff0 	b.w	8014e80 <__sinit_lock_release>
 8014ea0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014ea4:	6523      	str	r3, [r4, #80]	; 0x50
 8014ea6:	4b13      	ldr	r3, [pc, #76]	; (8014ef4 <__sinit+0x68>)
 8014ea8:	4a13      	ldr	r2, [pc, #76]	; (8014ef8 <__sinit+0x6c>)
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	62a2      	str	r2, [r4, #40]	; 0x28
 8014eae:	42a3      	cmp	r3, r4
 8014eb0:	bf04      	itt	eq
 8014eb2:	2301      	moveq	r3, #1
 8014eb4:	61a3      	streq	r3, [r4, #24]
 8014eb6:	4620      	mov	r0, r4
 8014eb8:	f000 f820 	bl	8014efc <__sfp>
 8014ebc:	6060      	str	r0, [r4, #4]
 8014ebe:	4620      	mov	r0, r4
 8014ec0:	f000 f81c 	bl	8014efc <__sfp>
 8014ec4:	60a0      	str	r0, [r4, #8]
 8014ec6:	4620      	mov	r0, r4
 8014ec8:	f000 f818 	bl	8014efc <__sfp>
 8014ecc:	2200      	movs	r2, #0
 8014ece:	60e0      	str	r0, [r4, #12]
 8014ed0:	2104      	movs	r1, #4
 8014ed2:	6860      	ldr	r0, [r4, #4]
 8014ed4:	f7ff ff82 	bl	8014ddc <std>
 8014ed8:	68a0      	ldr	r0, [r4, #8]
 8014eda:	2201      	movs	r2, #1
 8014edc:	2109      	movs	r1, #9
 8014ede:	f7ff ff7d 	bl	8014ddc <std>
 8014ee2:	68e0      	ldr	r0, [r4, #12]
 8014ee4:	2202      	movs	r2, #2
 8014ee6:	2112      	movs	r1, #18
 8014ee8:	f7ff ff78 	bl	8014ddc <std>
 8014eec:	2301      	movs	r3, #1
 8014eee:	61a3      	str	r3, [r4, #24]
 8014ef0:	e7d2      	b.n	8014e98 <__sinit+0xc>
 8014ef2:	bf00      	nop
 8014ef4:	08019128 	.word	0x08019128
 8014ef8:	08014e25 	.word	0x08014e25

08014efc <__sfp>:
 8014efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014efe:	4607      	mov	r7, r0
 8014f00:	f7ff ffac 	bl	8014e5c <__sfp_lock_acquire>
 8014f04:	4b1e      	ldr	r3, [pc, #120]	; (8014f80 <__sfp+0x84>)
 8014f06:	681e      	ldr	r6, [r3, #0]
 8014f08:	69b3      	ldr	r3, [r6, #24]
 8014f0a:	b913      	cbnz	r3, 8014f12 <__sfp+0x16>
 8014f0c:	4630      	mov	r0, r6
 8014f0e:	f7ff ffbd 	bl	8014e8c <__sinit>
 8014f12:	3648      	adds	r6, #72	; 0x48
 8014f14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014f18:	3b01      	subs	r3, #1
 8014f1a:	d503      	bpl.n	8014f24 <__sfp+0x28>
 8014f1c:	6833      	ldr	r3, [r6, #0]
 8014f1e:	b30b      	cbz	r3, 8014f64 <__sfp+0x68>
 8014f20:	6836      	ldr	r6, [r6, #0]
 8014f22:	e7f7      	b.n	8014f14 <__sfp+0x18>
 8014f24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014f28:	b9d5      	cbnz	r5, 8014f60 <__sfp+0x64>
 8014f2a:	4b16      	ldr	r3, [pc, #88]	; (8014f84 <__sfp+0x88>)
 8014f2c:	60e3      	str	r3, [r4, #12]
 8014f2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014f32:	6665      	str	r5, [r4, #100]	; 0x64
 8014f34:	f000 f859 	bl	8014fea <__retarget_lock_init_recursive>
 8014f38:	f7ff ff96 	bl	8014e68 <__sfp_lock_release>
 8014f3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014f40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014f44:	6025      	str	r5, [r4, #0]
 8014f46:	61a5      	str	r5, [r4, #24]
 8014f48:	2208      	movs	r2, #8
 8014f4a:	4629      	mov	r1, r5
 8014f4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014f50:	f7ff feaa 	bl	8014ca8 <memset>
 8014f54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014f58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014f5c:	4620      	mov	r0, r4
 8014f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f60:	3468      	adds	r4, #104	; 0x68
 8014f62:	e7d9      	b.n	8014f18 <__sfp+0x1c>
 8014f64:	2104      	movs	r1, #4
 8014f66:	4638      	mov	r0, r7
 8014f68:	f7ff ff62 	bl	8014e30 <__sfmoreglue>
 8014f6c:	4604      	mov	r4, r0
 8014f6e:	6030      	str	r0, [r6, #0]
 8014f70:	2800      	cmp	r0, #0
 8014f72:	d1d5      	bne.n	8014f20 <__sfp+0x24>
 8014f74:	f7ff ff78 	bl	8014e68 <__sfp_lock_release>
 8014f78:	230c      	movs	r3, #12
 8014f7a:	603b      	str	r3, [r7, #0]
 8014f7c:	e7ee      	b.n	8014f5c <__sfp+0x60>
 8014f7e:	bf00      	nop
 8014f80:	08019128 	.word	0x08019128
 8014f84:	ffff0001 	.word	0xffff0001

08014f88 <fiprintf>:
 8014f88:	b40e      	push	{r1, r2, r3}
 8014f8a:	b503      	push	{r0, r1, lr}
 8014f8c:	4601      	mov	r1, r0
 8014f8e:	ab03      	add	r3, sp, #12
 8014f90:	4805      	ldr	r0, [pc, #20]	; (8014fa8 <fiprintf+0x20>)
 8014f92:	f853 2b04 	ldr.w	r2, [r3], #4
 8014f96:	6800      	ldr	r0, [r0, #0]
 8014f98:	9301      	str	r3, [sp, #4]
 8014f9a:	f000 f905 	bl	80151a8 <_vfiprintf_r>
 8014f9e:	b002      	add	sp, #8
 8014fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8014fa4:	b003      	add	sp, #12
 8014fa6:	4770      	bx	lr
 8014fa8:	24000038 	.word	0x24000038

08014fac <_fwalk_reent>:
 8014fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014fb0:	4606      	mov	r6, r0
 8014fb2:	4688      	mov	r8, r1
 8014fb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014fb8:	2700      	movs	r7, #0
 8014fba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014fbe:	f1b9 0901 	subs.w	r9, r9, #1
 8014fc2:	d505      	bpl.n	8014fd0 <_fwalk_reent+0x24>
 8014fc4:	6824      	ldr	r4, [r4, #0]
 8014fc6:	2c00      	cmp	r4, #0
 8014fc8:	d1f7      	bne.n	8014fba <_fwalk_reent+0xe>
 8014fca:	4638      	mov	r0, r7
 8014fcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014fd0:	89ab      	ldrh	r3, [r5, #12]
 8014fd2:	2b01      	cmp	r3, #1
 8014fd4:	d907      	bls.n	8014fe6 <_fwalk_reent+0x3a>
 8014fd6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014fda:	3301      	adds	r3, #1
 8014fdc:	d003      	beq.n	8014fe6 <_fwalk_reent+0x3a>
 8014fde:	4629      	mov	r1, r5
 8014fe0:	4630      	mov	r0, r6
 8014fe2:	47c0      	blx	r8
 8014fe4:	4307      	orrs	r7, r0
 8014fe6:	3568      	adds	r5, #104	; 0x68
 8014fe8:	e7e9      	b.n	8014fbe <_fwalk_reent+0x12>

08014fea <__retarget_lock_init_recursive>:
 8014fea:	4770      	bx	lr

08014fec <__retarget_lock_acquire_recursive>:
 8014fec:	4770      	bx	lr

08014fee <__retarget_lock_release_recursive>:
 8014fee:	4770      	bx	lr

08014ff0 <malloc>:
 8014ff0:	4b02      	ldr	r3, [pc, #8]	; (8014ffc <malloc+0xc>)
 8014ff2:	4601      	mov	r1, r0
 8014ff4:	6818      	ldr	r0, [r3, #0]
 8014ff6:	f000 b853 	b.w	80150a0 <_malloc_r>
 8014ffa:	bf00      	nop
 8014ffc:	24000038 	.word	0x24000038

08015000 <_free_r>:
 8015000:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015002:	2900      	cmp	r1, #0
 8015004:	d048      	beq.n	8015098 <_free_r+0x98>
 8015006:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801500a:	9001      	str	r0, [sp, #4]
 801500c:	2b00      	cmp	r3, #0
 801500e:	f1a1 0404 	sub.w	r4, r1, #4
 8015012:	bfb8      	it	lt
 8015014:	18e4      	addlt	r4, r4, r3
 8015016:	f000 fe01 	bl	8015c1c <__malloc_lock>
 801501a:	4a20      	ldr	r2, [pc, #128]	; (801509c <_free_r+0x9c>)
 801501c:	9801      	ldr	r0, [sp, #4]
 801501e:	6813      	ldr	r3, [r2, #0]
 8015020:	4615      	mov	r5, r2
 8015022:	b933      	cbnz	r3, 8015032 <_free_r+0x32>
 8015024:	6063      	str	r3, [r4, #4]
 8015026:	6014      	str	r4, [r2, #0]
 8015028:	b003      	add	sp, #12
 801502a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801502e:	f000 bdfb 	b.w	8015c28 <__malloc_unlock>
 8015032:	42a3      	cmp	r3, r4
 8015034:	d90b      	bls.n	801504e <_free_r+0x4e>
 8015036:	6821      	ldr	r1, [r4, #0]
 8015038:	1862      	adds	r2, r4, r1
 801503a:	4293      	cmp	r3, r2
 801503c:	bf04      	itt	eq
 801503e:	681a      	ldreq	r2, [r3, #0]
 8015040:	685b      	ldreq	r3, [r3, #4]
 8015042:	6063      	str	r3, [r4, #4]
 8015044:	bf04      	itt	eq
 8015046:	1852      	addeq	r2, r2, r1
 8015048:	6022      	streq	r2, [r4, #0]
 801504a:	602c      	str	r4, [r5, #0]
 801504c:	e7ec      	b.n	8015028 <_free_r+0x28>
 801504e:	461a      	mov	r2, r3
 8015050:	685b      	ldr	r3, [r3, #4]
 8015052:	b10b      	cbz	r3, 8015058 <_free_r+0x58>
 8015054:	42a3      	cmp	r3, r4
 8015056:	d9fa      	bls.n	801504e <_free_r+0x4e>
 8015058:	6811      	ldr	r1, [r2, #0]
 801505a:	1855      	adds	r5, r2, r1
 801505c:	42a5      	cmp	r5, r4
 801505e:	d10b      	bne.n	8015078 <_free_r+0x78>
 8015060:	6824      	ldr	r4, [r4, #0]
 8015062:	4421      	add	r1, r4
 8015064:	1854      	adds	r4, r2, r1
 8015066:	42a3      	cmp	r3, r4
 8015068:	6011      	str	r1, [r2, #0]
 801506a:	d1dd      	bne.n	8015028 <_free_r+0x28>
 801506c:	681c      	ldr	r4, [r3, #0]
 801506e:	685b      	ldr	r3, [r3, #4]
 8015070:	6053      	str	r3, [r2, #4]
 8015072:	4421      	add	r1, r4
 8015074:	6011      	str	r1, [r2, #0]
 8015076:	e7d7      	b.n	8015028 <_free_r+0x28>
 8015078:	d902      	bls.n	8015080 <_free_r+0x80>
 801507a:	230c      	movs	r3, #12
 801507c:	6003      	str	r3, [r0, #0]
 801507e:	e7d3      	b.n	8015028 <_free_r+0x28>
 8015080:	6825      	ldr	r5, [r4, #0]
 8015082:	1961      	adds	r1, r4, r5
 8015084:	428b      	cmp	r3, r1
 8015086:	bf04      	itt	eq
 8015088:	6819      	ldreq	r1, [r3, #0]
 801508a:	685b      	ldreq	r3, [r3, #4]
 801508c:	6063      	str	r3, [r4, #4]
 801508e:	bf04      	itt	eq
 8015090:	1949      	addeq	r1, r1, r5
 8015092:	6021      	streq	r1, [r4, #0]
 8015094:	6054      	str	r4, [r2, #4]
 8015096:	e7c7      	b.n	8015028 <_free_r+0x28>
 8015098:	b003      	add	sp, #12
 801509a:	bd30      	pop	{r4, r5, pc}
 801509c:	24000240 	.word	0x24000240

080150a0 <_malloc_r>:
 80150a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150a2:	1ccd      	adds	r5, r1, #3
 80150a4:	f025 0503 	bic.w	r5, r5, #3
 80150a8:	3508      	adds	r5, #8
 80150aa:	2d0c      	cmp	r5, #12
 80150ac:	bf38      	it	cc
 80150ae:	250c      	movcc	r5, #12
 80150b0:	2d00      	cmp	r5, #0
 80150b2:	4606      	mov	r6, r0
 80150b4:	db01      	blt.n	80150ba <_malloc_r+0x1a>
 80150b6:	42a9      	cmp	r1, r5
 80150b8:	d903      	bls.n	80150c2 <_malloc_r+0x22>
 80150ba:	230c      	movs	r3, #12
 80150bc:	6033      	str	r3, [r6, #0]
 80150be:	2000      	movs	r0, #0
 80150c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150c2:	f000 fdab 	bl	8015c1c <__malloc_lock>
 80150c6:	4921      	ldr	r1, [pc, #132]	; (801514c <_malloc_r+0xac>)
 80150c8:	680a      	ldr	r2, [r1, #0]
 80150ca:	4614      	mov	r4, r2
 80150cc:	b99c      	cbnz	r4, 80150f6 <_malloc_r+0x56>
 80150ce:	4f20      	ldr	r7, [pc, #128]	; (8015150 <_malloc_r+0xb0>)
 80150d0:	683b      	ldr	r3, [r7, #0]
 80150d2:	b923      	cbnz	r3, 80150de <_malloc_r+0x3e>
 80150d4:	4621      	mov	r1, r4
 80150d6:	4630      	mov	r0, r6
 80150d8:	f000 fb2a 	bl	8015730 <_sbrk_r>
 80150dc:	6038      	str	r0, [r7, #0]
 80150de:	4629      	mov	r1, r5
 80150e0:	4630      	mov	r0, r6
 80150e2:	f000 fb25 	bl	8015730 <_sbrk_r>
 80150e6:	1c43      	adds	r3, r0, #1
 80150e8:	d123      	bne.n	8015132 <_malloc_r+0x92>
 80150ea:	230c      	movs	r3, #12
 80150ec:	6033      	str	r3, [r6, #0]
 80150ee:	4630      	mov	r0, r6
 80150f0:	f000 fd9a 	bl	8015c28 <__malloc_unlock>
 80150f4:	e7e3      	b.n	80150be <_malloc_r+0x1e>
 80150f6:	6823      	ldr	r3, [r4, #0]
 80150f8:	1b5b      	subs	r3, r3, r5
 80150fa:	d417      	bmi.n	801512c <_malloc_r+0x8c>
 80150fc:	2b0b      	cmp	r3, #11
 80150fe:	d903      	bls.n	8015108 <_malloc_r+0x68>
 8015100:	6023      	str	r3, [r4, #0]
 8015102:	441c      	add	r4, r3
 8015104:	6025      	str	r5, [r4, #0]
 8015106:	e004      	b.n	8015112 <_malloc_r+0x72>
 8015108:	6863      	ldr	r3, [r4, #4]
 801510a:	42a2      	cmp	r2, r4
 801510c:	bf0c      	ite	eq
 801510e:	600b      	streq	r3, [r1, #0]
 8015110:	6053      	strne	r3, [r2, #4]
 8015112:	4630      	mov	r0, r6
 8015114:	f000 fd88 	bl	8015c28 <__malloc_unlock>
 8015118:	f104 000b 	add.w	r0, r4, #11
 801511c:	1d23      	adds	r3, r4, #4
 801511e:	f020 0007 	bic.w	r0, r0, #7
 8015122:	1ac2      	subs	r2, r0, r3
 8015124:	d0cc      	beq.n	80150c0 <_malloc_r+0x20>
 8015126:	1a1b      	subs	r3, r3, r0
 8015128:	50a3      	str	r3, [r4, r2]
 801512a:	e7c9      	b.n	80150c0 <_malloc_r+0x20>
 801512c:	4622      	mov	r2, r4
 801512e:	6864      	ldr	r4, [r4, #4]
 8015130:	e7cc      	b.n	80150cc <_malloc_r+0x2c>
 8015132:	1cc4      	adds	r4, r0, #3
 8015134:	f024 0403 	bic.w	r4, r4, #3
 8015138:	42a0      	cmp	r0, r4
 801513a:	d0e3      	beq.n	8015104 <_malloc_r+0x64>
 801513c:	1a21      	subs	r1, r4, r0
 801513e:	4630      	mov	r0, r6
 8015140:	f000 faf6 	bl	8015730 <_sbrk_r>
 8015144:	3001      	adds	r0, #1
 8015146:	d1dd      	bne.n	8015104 <_malloc_r+0x64>
 8015148:	e7cf      	b.n	80150ea <_malloc_r+0x4a>
 801514a:	bf00      	nop
 801514c:	24000240 	.word	0x24000240
 8015150:	24000244 	.word	0x24000244

08015154 <__sfputc_r>:
 8015154:	6893      	ldr	r3, [r2, #8]
 8015156:	3b01      	subs	r3, #1
 8015158:	2b00      	cmp	r3, #0
 801515a:	b410      	push	{r4}
 801515c:	6093      	str	r3, [r2, #8]
 801515e:	da08      	bge.n	8015172 <__sfputc_r+0x1e>
 8015160:	6994      	ldr	r4, [r2, #24]
 8015162:	42a3      	cmp	r3, r4
 8015164:	db01      	blt.n	801516a <__sfputc_r+0x16>
 8015166:	290a      	cmp	r1, #10
 8015168:	d103      	bne.n	8015172 <__sfputc_r+0x1e>
 801516a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801516e:	f000 bb33 	b.w	80157d8 <__swbuf_r>
 8015172:	6813      	ldr	r3, [r2, #0]
 8015174:	1c58      	adds	r0, r3, #1
 8015176:	6010      	str	r0, [r2, #0]
 8015178:	7019      	strb	r1, [r3, #0]
 801517a:	4608      	mov	r0, r1
 801517c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015180:	4770      	bx	lr

08015182 <__sfputs_r>:
 8015182:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015184:	4606      	mov	r6, r0
 8015186:	460f      	mov	r7, r1
 8015188:	4614      	mov	r4, r2
 801518a:	18d5      	adds	r5, r2, r3
 801518c:	42ac      	cmp	r4, r5
 801518e:	d101      	bne.n	8015194 <__sfputs_r+0x12>
 8015190:	2000      	movs	r0, #0
 8015192:	e007      	b.n	80151a4 <__sfputs_r+0x22>
 8015194:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015198:	463a      	mov	r2, r7
 801519a:	4630      	mov	r0, r6
 801519c:	f7ff ffda 	bl	8015154 <__sfputc_r>
 80151a0:	1c43      	adds	r3, r0, #1
 80151a2:	d1f3      	bne.n	801518c <__sfputs_r+0xa>
 80151a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080151a8 <_vfiprintf_r>:
 80151a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151ac:	460d      	mov	r5, r1
 80151ae:	b09d      	sub	sp, #116	; 0x74
 80151b0:	4614      	mov	r4, r2
 80151b2:	4698      	mov	r8, r3
 80151b4:	4606      	mov	r6, r0
 80151b6:	b118      	cbz	r0, 80151c0 <_vfiprintf_r+0x18>
 80151b8:	6983      	ldr	r3, [r0, #24]
 80151ba:	b90b      	cbnz	r3, 80151c0 <_vfiprintf_r+0x18>
 80151bc:	f7ff fe66 	bl	8014e8c <__sinit>
 80151c0:	4b89      	ldr	r3, [pc, #548]	; (80153e8 <_vfiprintf_r+0x240>)
 80151c2:	429d      	cmp	r5, r3
 80151c4:	d11b      	bne.n	80151fe <_vfiprintf_r+0x56>
 80151c6:	6875      	ldr	r5, [r6, #4]
 80151c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80151ca:	07d9      	lsls	r1, r3, #31
 80151cc:	d405      	bmi.n	80151da <_vfiprintf_r+0x32>
 80151ce:	89ab      	ldrh	r3, [r5, #12]
 80151d0:	059a      	lsls	r2, r3, #22
 80151d2:	d402      	bmi.n	80151da <_vfiprintf_r+0x32>
 80151d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80151d6:	f7ff ff09 	bl	8014fec <__retarget_lock_acquire_recursive>
 80151da:	89ab      	ldrh	r3, [r5, #12]
 80151dc:	071b      	lsls	r3, r3, #28
 80151de:	d501      	bpl.n	80151e4 <_vfiprintf_r+0x3c>
 80151e0:	692b      	ldr	r3, [r5, #16]
 80151e2:	b9eb      	cbnz	r3, 8015220 <_vfiprintf_r+0x78>
 80151e4:	4629      	mov	r1, r5
 80151e6:	4630      	mov	r0, r6
 80151e8:	f000 fb5a 	bl	80158a0 <__swsetup_r>
 80151ec:	b1c0      	cbz	r0, 8015220 <_vfiprintf_r+0x78>
 80151ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80151f0:	07dc      	lsls	r4, r3, #31
 80151f2:	d50e      	bpl.n	8015212 <_vfiprintf_r+0x6a>
 80151f4:	f04f 30ff 	mov.w	r0, #4294967295
 80151f8:	b01d      	add	sp, #116	; 0x74
 80151fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151fe:	4b7b      	ldr	r3, [pc, #492]	; (80153ec <_vfiprintf_r+0x244>)
 8015200:	429d      	cmp	r5, r3
 8015202:	d101      	bne.n	8015208 <_vfiprintf_r+0x60>
 8015204:	68b5      	ldr	r5, [r6, #8]
 8015206:	e7df      	b.n	80151c8 <_vfiprintf_r+0x20>
 8015208:	4b79      	ldr	r3, [pc, #484]	; (80153f0 <_vfiprintf_r+0x248>)
 801520a:	429d      	cmp	r5, r3
 801520c:	bf08      	it	eq
 801520e:	68f5      	ldreq	r5, [r6, #12]
 8015210:	e7da      	b.n	80151c8 <_vfiprintf_r+0x20>
 8015212:	89ab      	ldrh	r3, [r5, #12]
 8015214:	0598      	lsls	r0, r3, #22
 8015216:	d4ed      	bmi.n	80151f4 <_vfiprintf_r+0x4c>
 8015218:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801521a:	f7ff fee8 	bl	8014fee <__retarget_lock_release_recursive>
 801521e:	e7e9      	b.n	80151f4 <_vfiprintf_r+0x4c>
 8015220:	2300      	movs	r3, #0
 8015222:	9309      	str	r3, [sp, #36]	; 0x24
 8015224:	2320      	movs	r3, #32
 8015226:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801522a:	f8cd 800c 	str.w	r8, [sp, #12]
 801522e:	2330      	movs	r3, #48	; 0x30
 8015230:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80153f4 <_vfiprintf_r+0x24c>
 8015234:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015238:	f04f 0901 	mov.w	r9, #1
 801523c:	4623      	mov	r3, r4
 801523e:	469a      	mov	sl, r3
 8015240:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015244:	b10a      	cbz	r2, 801524a <_vfiprintf_r+0xa2>
 8015246:	2a25      	cmp	r2, #37	; 0x25
 8015248:	d1f9      	bne.n	801523e <_vfiprintf_r+0x96>
 801524a:	ebba 0b04 	subs.w	fp, sl, r4
 801524e:	d00b      	beq.n	8015268 <_vfiprintf_r+0xc0>
 8015250:	465b      	mov	r3, fp
 8015252:	4622      	mov	r2, r4
 8015254:	4629      	mov	r1, r5
 8015256:	4630      	mov	r0, r6
 8015258:	f7ff ff93 	bl	8015182 <__sfputs_r>
 801525c:	3001      	adds	r0, #1
 801525e:	f000 80aa 	beq.w	80153b6 <_vfiprintf_r+0x20e>
 8015262:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015264:	445a      	add	r2, fp
 8015266:	9209      	str	r2, [sp, #36]	; 0x24
 8015268:	f89a 3000 	ldrb.w	r3, [sl]
 801526c:	2b00      	cmp	r3, #0
 801526e:	f000 80a2 	beq.w	80153b6 <_vfiprintf_r+0x20e>
 8015272:	2300      	movs	r3, #0
 8015274:	f04f 32ff 	mov.w	r2, #4294967295
 8015278:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801527c:	f10a 0a01 	add.w	sl, sl, #1
 8015280:	9304      	str	r3, [sp, #16]
 8015282:	9307      	str	r3, [sp, #28]
 8015284:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015288:	931a      	str	r3, [sp, #104]	; 0x68
 801528a:	4654      	mov	r4, sl
 801528c:	2205      	movs	r2, #5
 801528e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015292:	4858      	ldr	r0, [pc, #352]	; (80153f4 <_vfiprintf_r+0x24c>)
 8015294:	f7eb f844 	bl	8000320 <memchr>
 8015298:	9a04      	ldr	r2, [sp, #16]
 801529a:	b9d8      	cbnz	r0, 80152d4 <_vfiprintf_r+0x12c>
 801529c:	06d1      	lsls	r1, r2, #27
 801529e:	bf44      	itt	mi
 80152a0:	2320      	movmi	r3, #32
 80152a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80152a6:	0713      	lsls	r3, r2, #28
 80152a8:	bf44      	itt	mi
 80152aa:	232b      	movmi	r3, #43	; 0x2b
 80152ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80152b0:	f89a 3000 	ldrb.w	r3, [sl]
 80152b4:	2b2a      	cmp	r3, #42	; 0x2a
 80152b6:	d015      	beq.n	80152e4 <_vfiprintf_r+0x13c>
 80152b8:	9a07      	ldr	r2, [sp, #28]
 80152ba:	4654      	mov	r4, sl
 80152bc:	2000      	movs	r0, #0
 80152be:	f04f 0c0a 	mov.w	ip, #10
 80152c2:	4621      	mov	r1, r4
 80152c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80152c8:	3b30      	subs	r3, #48	; 0x30
 80152ca:	2b09      	cmp	r3, #9
 80152cc:	d94e      	bls.n	801536c <_vfiprintf_r+0x1c4>
 80152ce:	b1b0      	cbz	r0, 80152fe <_vfiprintf_r+0x156>
 80152d0:	9207      	str	r2, [sp, #28]
 80152d2:	e014      	b.n	80152fe <_vfiprintf_r+0x156>
 80152d4:	eba0 0308 	sub.w	r3, r0, r8
 80152d8:	fa09 f303 	lsl.w	r3, r9, r3
 80152dc:	4313      	orrs	r3, r2
 80152de:	9304      	str	r3, [sp, #16]
 80152e0:	46a2      	mov	sl, r4
 80152e2:	e7d2      	b.n	801528a <_vfiprintf_r+0xe2>
 80152e4:	9b03      	ldr	r3, [sp, #12]
 80152e6:	1d19      	adds	r1, r3, #4
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	9103      	str	r1, [sp, #12]
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	bfbb      	ittet	lt
 80152f0:	425b      	neglt	r3, r3
 80152f2:	f042 0202 	orrlt.w	r2, r2, #2
 80152f6:	9307      	strge	r3, [sp, #28]
 80152f8:	9307      	strlt	r3, [sp, #28]
 80152fa:	bfb8      	it	lt
 80152fc:	9204      	strlt	r2, [sp, #16]
 80152fe:	7823      	ldrb	r3, [r4, #0]
 8015300:	2b2e      	cmp	r3, #46	; 0x2e
 8015302:	d10c      	bne.n	801531e <_vfiprintf_r+0x176>
 8015304:	7863      	ldrb	r3, [r4, #1]
 8015306:	2b2a      	cmp	r3, #42	; 0x2a
 8015308:	d135      	bne.n	8015376 <_vfiprintf_r+0x1ce>
 801530a:	9b03      	ldr	r3, [sp, #12]
 801530c:	1d1a      	adds	r2, r3, #4
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	9203      	str	r2, [sp, #12]
 8015312:	2b00      	cmp	r3, #0
 8015314:	bfb8      	it	lt
 8015316:	f04f 33ff 	movlt.w	r3, #4294967295
 801531a:	3402      	adds	r4, #2
 801531c:	9305      	str	r3, [sp, #20]
 801531e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015404 <_vfiprintf_r+0x25c>
 8015322:	7821      	ldrb	r1, [r4, #0]
 8015324:	2203      	movs	r2, #3
 8015326:	4650      	mov	r0, sl
 8015328:	f7ea fffa 	bl	8000320 <memchr>
 801532c:	b140      	cbz	r0, 8015340 <_vfiprintf_r+0x198>
 801532e:	2340      	movs	r3, #64	; 0x40
 8015330:	eba0 000a 	sub.w	r0, r0, sl
 8015334:	fa03 f000 	lsl.w	r0, r3, r0
 8015338:	9b04      	ldr	r3, [sp, #16]
 801533a:	4303      	orrs	r3, r0
 801533c:	3401      	adds	r4, #1
 801533e:	9304      	str	r3, [sp, #16]
 8015340:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015344:	482c      	ldr	r0, [pc, #176]	; (80153f8 <_vfiprintf_r+0x250>)
 8015346:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801534a:	2206      	movs	r2, #6
 801534c:	f7ea ffe8 	bl	8000320 <memchr>
 8015350:	2800      	cmp	r0, #0
 8015352:	d03f      	beq.n	80153d4 <_vfiprintf_r+0x22c>
 8015354:	4b29      	ldr	r3, [pc, #164]	; (80153fc <_vfiprintf_r+0x254>)
 8015356:	bb1b      	cbnz	r3, 80153a0 <_vfiprintf_r+0x1f8>
 8015358:	9b03      	ldr	r3, [sp, #12]
 801535a:	3307      	adds	r3, #7
 801535c:	f023 0307 	bic.w	r3, r3, #7
 8015360:	3308      	adds	r3, #8
 8015362:	9303      	str	r3, [sp, #12]
 8015364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015366:	443b      	add	r3, r7
 8015368:	9309      	str	r3, [sp, #36]	; 0x24
 801536a:	e767      	b.n	801523c <_vfiprintf_r+0x94>
 801536c:	fb0c 3202 	mla	r2, ip, r2, r3
 8015370:	460c      	mov	r4, r1
 8015372:	2001      	movs	r0, #1
 8015374:	e7a5      	b.n	80152c2 <_vfiprintf_r+0x11a>
 8015376:	2300      	movs	r3, #0
 8015378:	3401      	adds	r4, #1
 801537a:	9305      	str	r3, [sp, #20]
 801537c:	4619      	mov	r1, r3
 801537e:	f04f 0c0a 	mov.w	ip, #10
 8015382:	4620      	mov	r0, r4
 8015384:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015388:	3a30      	subs	r2, #48	; 0x30
 801538a:	2a09      	cmp	r2, #9
 801538c:	d903      	bls.n	8015396 <_vfiprintf_r+0x1ee>
 801538e:	2b00      	cmp	r3, #0
 8015390:	d0c5      	beq.n	801531e <_vfiprintf_r+0x176>
 8015392:	9105      	str	r1, [sp, #20]
 8015394:	e7c3      	b.n	801531e <_vfiprintf_r+0x176>
 8015396:	fb0c 2101 	mla	r1, ip, r1, r2
 801539a:	4604      	mov	r4, r0
 801539c:	2301      	movs	r3, #1
 801539e:	e7f0      	b.n	8015382 <_vfiprintf_r+0x1da>
 80153a0:	ab03      	add	r3, sp, #12
 80153a2:	9300      	str	r3, [sp, #0]
 80153a4:	462a      	mov	r2, r5
 80153a6:	4b16      	ldr	r3, [pc, #88]	; (8015400 <_vfiprintf_r+0x258>)
 80153a8:	a904      	add	r1, sp, #16
 80153aa:	4630      	mov	r0, r6
 80153ac:	f3af 8000 	nop.w
 80153b0:	4607      	mov	r7, r0
 80153b2:	1c78      	adds	r0, r7, #1
 80153b4:	d1d6      	bne.n	8015364 <_vfiprintf_r+0x1bc>
 80153b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80153b8:	07d9      	lsls	r1, r3, #31
 80153ba:	d405      	bmi.n	80153c8 <_vfiprintf_r+0x220>
 80153bc:	89ab      	ldrh	r3, [r5, #12]
 80153be:	059a      	lsls	r2, r3, #22
 80153c0:	d402      	bmi.n	80153c8 <_vfiprintf_r+0x220>
 80153c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80153c4:	f7ff fe13 	bl	8014fee <__retarget_lock_release_recursive>
 80153c8:	89ab      	ldrh	r3, [r5, #12]
 80153ca:	065b      	lsls	r3, r3, #25
 80153cc:	f53f af12 	bmi.w	80151f4 <_vfiprintf_r+0x4c>
 80153d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80153d2:	e711      	b.n	80151f8 <_vfiprintf_r+0x50>
 80153d4:	ab03      	add	r3, sp, #12
 80153d6:	9300      	str	r3, [sp, #0]
 80153d8:	462a      	mov	r2, r5
 80153da:	4b09      	ldr	r3, [pc, #36]	; (8015400 <_vfiprintf_r+0x258>)
 80153dc:	a904      	add	r1, sp, #16
 80153de:	4630      	mov	r0, r6
 80153e0:	f000 f880 	bl	80154e4 <_printf_i>
 80153e4:	e7e4      	b.n	80153b0 <_vfiprintf_r+0x208>
 80153e6:	bf00      	nop
 80153e8:	08019200 	.word	0x08019200
 80153ec:	08019220 	.word	0x08019220
 80153f0:	080191e0 	.word	0x080191e0
 80153f4:	08019240 	.word	0x08019240
 80153f8:	0801924a 	.word	0x0801924a
 80153fc:	00000000 	.word	0x00000000
 8015400:	08015183 	.word	0x08015183
 8015404:	08019246 	.word	0x08019246

08015408 <_printf_common>:
 8015408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801540c:	4616      	mov	r6, r2
 801540e:	4699      	mov	r9, r3
 8015410:	688a      	ldr	r2, [r1, #8]
 8015412:	690b      	ldr	r3, [r1, #16]
 8015414:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015418:	4293      	cmp	r3, r2
 801541a:	bfb8      	it	lt
 801541c:	4613      	movlt	r3, r2
 801541e:	6033      	str	r3, [r6, #0]
 8015420:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015424:	4607      	mov	r7, r0
 8015426:	460c      	mov	r4, r1
 8015428:	b10a      	cbz	r2, 801542e <_printf_common+0x26>
 801542a:	3301      	adds	r3, #1
 801542c:	6033      	str	r3, [r6, #0]
 801542e:	6823      	ldr	r3, [r4, #0]
 8015430:	0699      	lsls	r1, r3, #26
 8015432:	bf42      	ittt	mi
 8015434:	6833      	ldrmi	r3, [r6, #0]
 8015436:	3302      	addmi	r3, #2
 8015438:	6033      	strmi	r3, [r6, #0]
 801543a:	6825      	ldr	r5, [r4, #0]
 801543c:	f015 0506 	ands.w	r5, r5, #6
 8015440:	d106      	bne.n	8015450 <_printf_common+0x48>
 8015442:	f104 0a19 	add.w	sl, r4, #25
 8015446:	68e3      	ldr	r3, [r4, #12]
 8015448:	6832      	ldr	r2, [r6, #0]
 801544a:	1a9b      	subs	r3, r3, r2
 801544c:	42ab      	cmp	r3, r5
 801544e:	dc26      	bgt.n	801549e <_printf_common+0x96>
 8015450:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015454:	1e13      	subs	r3, r2, #0
 8015456:	6822      	ldr	r2, [r4, #0]
 8015458:	bf18      	it	ne
 801545a:	2301      	movne	r3, #1
 801545c:	0692      	lsls	r2, r2, #26
 801545e:	d42b      	bmi.n	80154b8 <_printf_common+0xb0>
 8015460:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015464:	4649      	mov	r1, r9
 8015466:	4638      	mov	r0, r7
 8015468:	47c0      	blx	r8
 801546a:	3001      	adds	r0, #1
 801546c:	d01e      	beq.n	80154ac <_printf_common+0xa4>
 801546e:	6823      	ldr	r3, [r4, #0]
 8015470:	68e5      	ldr	r5, [r4, #12]
 8015472:	6832      	ldr	r2, [r6, #0]
 8015474:	f003 0306 	and.w	r3, r3, #6
 8015478:	2b04      	cmp	r3, #4
 801547a:	bf08      	it	eq
 801547c:	1aad      	subeq	r5, r5, r2
 801547e:	68a3      	ldr	r3, [r4, #8]
 8015480:	6922      	ldr	r2, [r4, #16]
 8015482:	bf0c      	ite	eq
 8015484:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015488:	2500      	movne	r5, #0
 801548a:	4293      	cmp	r3, r2
 801548c:	bfc4      	itt	gt
 801548e:	1a9b      	subgt	r3, r3, r2
 8015490:	18ed      	addgt	r5, r5, r3
 8015492:	2600      	movs	r6, #0
 8015494:	341a      	adds	r4, #26
 8015496:	42b5      	cmp	r5, r6
 8015498:	d11a      	bne.n	80154d0 <_printf_common+0xc8>
 801549a:	2000      	movs	r0, #0
 801549c:	e008      	b.n	80154b0 <_printf_common+0xa8>
 801549e:	2301      	movs	r3, #1
 80154a0:	4652      	mov	r2, sl
 80154a2:	4649      	mov	r1, r9
 80154a4:	4638      	mov	r0, r7
 80154a6:	47c0      	blx	r8
 80154a8:	3001      	adds	r0, #1
 80154aa:	d103      	bne.n	80154b4 <_printf_common+0xac>
 80154ac:	f04f 30ff 	mov.w	r0, #4294967295
 80154b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80154b4:	3501      	adds	r5, #1
 80154b6:	e7c6      	b.n	8015446 <_printf_common+0x3e>
 80154b8:	18e1      	adds	r1, r4, r3
 80154ba:	1c5a      	adds	r2, r3, #1
 80154bc:	2030      	movs	r0, #48	; 0x30
 80154be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80154c2:	4422      	add	r2, r4
 80154c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80154c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80154cc:	3302      	adds	r3, #2
 80154ce:	e7c7      	b.n	8015460 <_printf_common+0x58>
 80154d0:	2301      	movs	r3, #1
 80154d2:	4622      	mov	r2, r4
 80154d4:	4649      	mov	r1, r9
 80154d6:	4638      	mov	r0, r7
 80154d8:	47c0      	blx	r8
 80154da:	3001      	adds	r0, #1
 80154dc:	d0e6      	beq.n	80154ac <_printf_common+0xa4>
 80154de:	3601      	adds	r6, #1
 80154e0:	e7d9      	b.n	8015496 <_printf_common+0x8e>
	...

080154e4 <_printf_i>:
 80154e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80154e8:	460c      	mov	r4, r1
 80154ea:	4691      	mov	r9, r2
 80154ec:	7e27      	ldrb	r7, [r4, #24]
 80154ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80154f0:	2f78      	cmp	r7, #120	; 0x78
 80154f2:	4680      	mov	r8, r0
 80154f4:	469a      	mov	sl, r3
 80154f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80154fa:	d807      	bhi.n	801550c <_printf_i+0x28>
 80154fc:	2f62      	cmp	r7, #98	; 0x62
 80154fe:	d80a      	bhi.n	8015516 <_printf_i+0x32>
 8015500:	2f00      	cmp	r7, #0
 8015502:	f000 80d8 	beq.w	80156b6 <_printf_i+0x1d2>
 8015506:	2f58      	cmp	r7, #88	; 0x58
 8015508:	f000 80a3 	beq.w	8015652 <_printf_i+0x16e>
 801550c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015510:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015514:	e03a      	b.n	801558c <_printf_i+0xa8>
 8015516:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801551a:	2b15      	cmp	r3, #21
 801551c:	d8f6      	bhi.n	801550c <_printf_i+0x28>
 801551e:	a001      	add	r0, pc, #4	; (adr r0, 8015524 <_printf_i+0x40>)
 8015520:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8015524:	0801557d 	.word	0x0801557d
 8015528:	08015591 	.word	0x08015591
 801552c:	0801550d 	.word	0x0801550d
 8015530:	0801550d 	.word	0x0801550d
 8015534:	0801550d 	.word	0x0801550d
 8015538:	0801550d 	.word	0x0801550d
 801553c:	08015591 	.word	0x08015591
 8015540:	0801550d 	.word	0x0801550d
 8015544:	0801550d 	.word	0x0801550d
 8015548:	0801550d 	.word	0x0801550d
 801554c:	0801550d 	.word	0x0801550d
 8015550:	0801569d 	.word	0x0801569d
 8015554:	080155c1 	.word	0x080155c1
 8015558:	0801567f 	.word	0x0801567f
 801555c:	0801550d 	.word	0x0801550d
 8015560:	0801550d 	.word	0x0801550d
 8015564:	080156bf 	.word	0x080156bf
 8015568:	0801550d 	.word	0x0801550d
 801556c:	080155c1 	.word	0x080155c1
 8015570:	0801550d 	.word	0x0801550d
 8015574:	0801550d 	.word	0x0801550d
 8015578:	08015687 	.word	0x08015687
 801557c:	680b      	ldr	r3, [r1, #0]
 801557e:	1d1a      	adds	r2, r3, #4
 8015580:	681b      	ldr	r3, [r3, #0]
 8015582:	600a      	str	r2, [r1, #0]
 8015584:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015588:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801558c:	2301      	movs	r3, #1
 801558e:	e0a3      	b.n	80156d8 <_printf_i+0x1f4>
 8015590:	6825      	ldr	r5, [r4, #0]
 8015592:	6808      	ldr	r0, [r1, #0]
 8015594:	062e      	lsls	r6, r5, #24
 8015596:	f100 0304 	add.w	r3, r0, #4
 801559a:	d50a      	bpl.n	80155b2 <_printf_i+0xce>
 801559c:	6805      	ldr	r5, [r0, #0]
 801559e:	600b      	str	r3, [r1, #0]
 80155a0:	2d00      	cmp	r5, #0
 80155a2:	da03      	bge.n	80155ac <_printf_i+0xc8>
 80155a4:	232d      	movs	r3, #45	; 0x2d
 80155a6:	426d      	negs	r5, r5
 80155a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80155ac:	485e      	ldr	r0, [pc, #376]	; (8015728 <_printf_i+0x244>)
 80155ae:	230a      	movs	r3, #10
 80155b0:	e019      	b.n	80155e6 <_printf_i+0x102>
 80155b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80155b6:	6805      	ldr	r5, [r0, #0]
 80155b8:	600b      	str	r3, [r1, #0]
 80155ba:	bf18      	it	ne
 80155bc:	b22d      	sxthne	r5, r5
 80155be:	e7ef      	b.n	80155a0 <_printf_i+0xbc>
 80155c0:	680b      	ldr	r3, [r1, #0]
 80155c2:	6825      	ldr	r5, [r4, #0]
 80155c4:	1d18      	adds	r0, r3, #4
 80155c6:	6008      	str	r0, [r1, #0]
 80155c8:	0628      	lsls	r0, r5, #24
 80155ca:	d501      	bpl.n	80155d0 <_printf_i+0xec>
 80155cc:	681d      	ldr	r5, [r3, #0]
 80155ce:	e002      	b.n	80155d6 <_printf_i+0xf2>
 80155d0:	0669      	lsls	r1, r5, #25
 80155d2:	d5fb      	bpl.n	80155cc <_printf_i+0xe8>
 80155d4:	881d      	ldrh	r5, [r3, #0]
 80155d6:	4854      	ldr	r0, [pc, #336]	; (8015728 <_printf_i+0x244>)
 80155d8:	2f6f      	cmp	r7, #111	; 0x6f
 80155da:	bf0c      	ite	eq
 80155dc:	2308      	moveq	r3, #8
 80155de:	230a      	movne	r3, #10
 80155e0:	2100      	movs	r1, #0
 80155e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80155e6:	6866      	ldr	r6, [r4, #4]
 80155e8:	60a6      	str	r6, [r4, #8]
 80155ea:	2e00      	cmp	r6, #0
 80155ec:	bfa2      	ittt	ge
 80155ee:	6821      	ldrge	r1, [r4, #0]
 80155f0:	f021 0104 	bicge.w	r1, r1, #4
 80155f4:	6021      	strge	r1, [r4, #0]
 80155f6:	b90d      	cbnz	r5, 80155fc <_printf_i+0x118>
 80155f8:	2e00      	cmp	r6, #0
 80155fa:	d04d      	beq.n	8015698 <_printf_i+0x1b4>
 80155fc:	4616      	mov	r6, r2
 80155fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8015602:	fb03 5711 	mls	r7, r3, r1, r5
 8015606:	5dc7      	ldrb	r7, [r0, r7]
 8015608:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801560c:	462f      	mov	r7, r5
 801560e:	42bb      	cmp	r3, r7
 8015610:	460d      	mov	r5, r1
 8015612:	d9f4      	bls.n	80155fe <_printf_i+0x11a>
 8015614:	2b08      	cmp	r3, #8
 8015616:	d10b      	bne.n	8015630 <_printf_i+0x14c>
 8015618:	6823      	ldr	r3, [r4, #0]
 801561a:	07df      	lsls	r7, r3, #31
 801561c:	d508      	bpl.n	8015630 <_printf_i+0x14c>
 801561e:	6923      	ldr	r3, [r4, #16]
 8015620:	6861      	ldr	r1, [r4, #4]
 8015622:	4299      	cmp	r1, r3
 8015624:	bfde      	ittt	le
 8015626:	2330      	movle	r3, #48	; 0x30
 8015628:	f806 3c01 	strble.w	r3, [r6, #-1]
 801562c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015630:	1b92      	subs	r2, r2, r6
 8015632:	6122      	str	r2, [r4, #16]
 8015634:	f8cd a000 	str.w	sl, [sp]
 8015638:	464b      	mov	r3, r9
 801563a:	aa03      	add	r2, sp, #12
 801563c:	4621      	mov	r1, r4
 801563e:	4640      	mov	r0, r8
 8015640:	f7ff fee2 	bl	8015408 <_printf_common>
 8015644:	3001      	adds	r0, #1
 8015646:	d14c      	bne.n	80156e2 <_printf_i+0x1fe>
 8015648:	f04f 30ff 	mov.w	r0, #4294967295
 801564c:	b004      	add	sp, #16
 801564e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015652:	4835      	ldr	r0, [pc, #212]	; (8015728 <_printf_i+0x244>)
 8015654:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015658:	6823      	ldr	r3, [r4, #0]
 801565a:	680e      	ldr	r6, [r1, #0]
 801565c:	061f      	lsls	r7, r3, #24
 801565e:	f856 5b04 	ldr.w	r5, [r6], #4
 8015662:	600e      	str	r6, [r1, #0]
 8015664:	d514      	bpl.n	8015690 <_printf_i+0x1ac>
 8015666:	07d9      	lsls	r1, r3, #31
 8015668:	bf44      	itt	mi
 801566a:	f043 0320 	orrmi.w	r3, r3, #32
 801566e:	6023      	strmi	r3, [r4, #0]
 8015670:	b91d      	cbnz	r5, 801567a <_printf_i+0x196>
 8015672:	6823      	ldr	r3, [r4, #0]
 8015674:	f023 0320 	bic.w	r3, r3, #32
 8015678:	6023      	str	r3, [r4, #0]
 801567a:	2310      	movs	r3, #16
 801567c:	e7b0      	b.n	80155e0 <_printf_i+0xfc>
 801567e:	6823      	ldr	r3, [r4, #0]
 8015680:	f043 0320 	orr.w	r3, r3, #32
 8015684:	6023      	str	r3, [r4, #0]
 8015686:	2378      	movs	r3, #120	; 0x78
 8015688:	4828      	ldr	r0, [pc, #160]	; (801572c <_printf_i+0x248>)
 801568a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801568e:	e7e3      	b.n	8015658 <_printf_i+0x174>
 8015690:	065e      	lsls	r6, r3, #25
 8015692:	bf48      	it	mi
 8015694:	b2ad      	uxthmi	r5, r5
 8015696:	e7e6      	b.n	8015666 <_printf_i+0x182>
 8015698:	4616      	mov	r6, r2
 801569a:	e7bb      	b.n	8015614 <_printf_i+0x130>
 801569c:	680b      	ldr	r3, [r1, #0]
 801569e:	6826      	ldr	r6, [r4, #0]
 80156a0:	6960      	ldr	r0, [r4, #20]
 80156a2:	1d1d      	adds	r5, r3, #4
 80156a4:	600d      	str	r5, [r1, #0]
 80156a6:	0635      	lsls	r5, r6, #24
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	d501      	bpl.n	80156b0 <_printf_i+0x1cc>
 80156ac:	6018      	str	r0, [r3, #0]
 80156ae:	e002      	b.n	80156b6 <_printf_i+0x1d2>
 80156b0:	0671      	lsls	r1, r6, #25
 80156b2:	d5fb      	bpl.n	80156ac <_printf_i+0x1c8>
 80156b4:	8018      	strh	r0, [r3, #0]
 80156b6:	2300      	movs	r3, #0
 80156b8:	6123      	str	r3, [r4, #16]
 80156ba:	4616      	mov	r6, r2
 80156bc:	e7ba      	b.n	8015634 <_printf_i+0x150>
 80156be:	680b      	ldr	r3, [r1, #0]
 80156c0:	1d1a      	adds	r2, r3, #4
 80156c2:	600a      	str	r2, [r1, #0]
 80156c4:	681e      	ldr	r6, [r3, #0]
 80156c6:	6862      	ldr	r2, [r4, #4]
 80156c8:	2100      	movs	r1, #0
 80156ca:	4630      	mov	r0, r6
 80156cc:	f7ea fe28 	bl	8000320 <memchr>
 80156d0:	b108      	cbz	r0, 80156d6 <_printf_i+0x1f2>
 80156d2:	1b80      	subs	r0, r0, r6
 80156d4:	6060      	str	r0, [r4, #4]
 80156d6:	6863      	ldr	r3, [r4, #4]
 80156d8:	6123      	str	r3, [r4, #16]
 80156da:	2300      	movs	r3, #0
 80156dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80156e0:	e7a8      	b.n	8015634 <_printf_i+0x150>
 80156e2:	6923      	ldr	r3, [r4, #16]
 80156e4:	4632      	mov	r2, r6
 80156e6:	4649      	mov	r1, r9
 80156e8:	4640      	mov	r0, r8
 80156ea:	47d0      	blx	sl
 80156ec:	3001      	adds	r0, #1
 80156ee:	d0ab      	beq.n	8015648 <_printf_i+0x164>
 80156f0:	6823      	ldr	r3, [r4, #0]
 80156f2:	079b      	lsls	r3, r3, #30
 80156f4:	d413      	bmi.n	801571e <_printf_i+0x23a>
 80156f6:	68e0      	ldr	r0, [r4, #12]
 80156f8:	9b03      	ldr	r3, [sp, #12]
 80156fa:	4298      	cmp	r0, r3
 80156fc:	bfb8      	it	lt
 80156fe:	4618      	movlt	r0, r3
 8015700:	e7a4      	b.n	801564c <_printf_i+0x168>
 8015702:	2301      	movs	r3, #1
 8015704:	4632      	mov	r2, r6
 8015706:	4649      	mov	r1, r9
 8015708:	4640      	mov	r0, r8
 801570a:	47d0      	blx	sl
 801570c:	3001      	adds	r0, #1
 801570e:	d09b      	beq.n	8015648 <_printf_i+0x164>
 8015710:	3501      	adds	r5, #1
 8015712:	68e3      	ldr	r3, [r4, #12]
 8015714:	9903      	ldr	r1, [sp, #12]
 8015716:	1a5b      	subs	r3, r3, r1
 8015718:	42ab      	cmp	r3, r5
 801571a:	dcf2      	bgt.n	8015702 <_printf_i+0x21e>
 801571c:	e7eb      	b.n	80156f6 <_printf_i+0x212>
 801571e:	2500      	movs	r5, #0
 8015720:	f104 0619 	add.w	r6, r4, #25
 8015724:	e7f5      	b.n	8015712 <_printf_i+0x22e>
 8015726:	bf00      	nop
 8015728:	08019251 	.word	0x08019251
 801572c:	08019262 	.word	0x08019262

08015730 <_sbrk_r>:
 8015730:	b538      	push	{r3, r4, r5, lr}
 8015732:	4d06      	ldr	r5, [pc, #24]	; (801574c <_sbrk_r+0x1c>)
 8015734:	2300      	movs	r3, #0
 8015736:	4604      	mov	r4, r0
 8015738:	4608      	mov	r0, r1
 801573a:	602b      	str	r3, [r5, #0]
 801573c:	f7ec fa08 	bl	8001b50 <_sbrk>
 8015740:	1c43      	adds	r3, r0, #1
 8015742:	d102      	bne.n	801574a <_sbrk_r+0x1a>
 8015744:	682b      	ldr	r3, [r5, #0]
 8015746:	b103      	cbz	r3, 801574a <_sbrk_r+0x1a>
 8015748:	6023      	str	r3, [r4, #0]
 801574a:	bd38      	pop	{r3, r4, r5, pc}
 801574c:	24003630 	.word	0x24003630

08015750 <__sread>:
 8015750:	b510      	push	{r4, lr}
 8015752:	460c      	mov	r4, r1
 8015754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015758:	f000 fa6c 	bl	8015c34 <_read_r>
 801575c:	2800      	cmp	r0, #0
 801575e:	bfab      	itete	ge
 8015760:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015762:	89a3      	ldrhlt	r3, [r4, #12]
 8015764:	181b      	addge	r3, r3, r0
 8015766:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801576a:	bfac      	ite	ge
 801576c:	6563      	strge	r3, [r4, #84]	; 0x54
 801576e:	81a3      	strhlt	r3, [r4, #12]
 8015770:	bd10      	pop	{r4, pc}

08015772 <__swrite>:
 8015772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015776:	461f      	mov	r7, r3
 8015778:	898b      	ldrh	r3, [r1, #12]
 801577a:	05db      	lsls	r3, r3, #23
 801577c:	4605      	mov	r5, r0
 801577e:	460c      	mov	r4, r1
 8015780:	4616      	mov	r6, r2
 8015782:	d505      	bpl.n	8015790 <__swrite+0x1e>
 8015784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015788:	2302      	movs	r3, #2
 801578a:	2200      	movs	r2, #0
 801578c:	f000 f9d0 	bl	8015b30 <_lseek_r>
 8015790:	89a3      	ldrh	r3, [r4, #12]
 8015792:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015796:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801579a:	81a3      	strh	r3, [r4, #12]
 801579c:	4632      	mov	r2, r6
 801579e:	463b      	mov	r3, r7
 80157a0:	4628      	mov	r0, r5
 80157a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80157a6:	f000 b869 	b.w	801587c <_write_r>

080157aa <__sseek>:
 80157aa:	b510      	push	{r4, lr}
 80157ac:	460c      	mov	r4, r1
 80157ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80157b2:	f000 f9bd 	bl	8015b30 <_lseek_r>
 80157b6:	1c43      	adds	r3, r0, #1
 80157b8:	89a3      	ldrh	r3, [r4, #12]
 80157ba:	bf15      	itete	ne
 80157bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80157be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80157c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80157c6:	81a3      	strheq	r3, [r4, #12]
 80157c8:	bf18      	it	ne
 80157ca:	81a3      	strhne	r3, [r4, #12]
 80157cc:	bd10      	pop	{r4, pc}

080157ce <__sclose>:
 80157ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80157d2:	f000 b8db 	b.w	801598c <_close_r>
	...

080157d8 <__swbuf_r>:
 80157d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157da:	460e      	mov	r6, r1
 80157dc:	4614      	mov	r4, r2
 80157de:	4605      	mov	r5, r0
 80157e0:	b118      	cbz	r0, 80157ea <__swbuf_r+0x12>
 80157e2:	6983      	ldr	r3, [r0, #24]
 80157e4:	b90b      	cbnz	r3, 80157ea <__swbuf_r+0x12>
 80157e6:	f7ff fb51 	bl	8014e8c <__sinit>
 80157ea:	4b21      	ldr	r3, [pc, #132]	; (8015870 <__swbuf_r+0x98>)
 80157ec:	429c      	cmp	r4, r3
 80157ee:	d12b      	bne.n	8015848 <__swbuf_r+0x70>
 80157f0:	686c      	ldr	r4, [r5, #4]
 80157f2:	69a3      	ldr	r3, [r4, #24]
 80157f4:	60a3      	str	r3, [r4, #8]
 80157f6:	89a3      	ldrh	r3, [r4, #12]
 80157f8:	071a      	lsls	r2, r3, #28
 80157fa:	d52f      	bpl.n	801585c <__swbuf_r+0x84>
 80157fc:	6923      	ldr	r3, [r4, #16]
 80157fe:	b36b      	cbz	r3, 801585c <__swbuf_r+0x84>
 8015800:	6923      	ldr	r3, [r4, #16]
 8015802:	6820      	ldr	r0, [r4, #0]
 8015804:	1ac0      	subs	r0, r0, r3
 8015806:	6963      	ldr	r3, [r4, #20]
 8015808:	b2f6      	uxtb	r6, r6
 801580a:	4283      	cmp	r3, r0
 801580c:	4637      	mov	r7, r6
 801580e:	dc04      	bgt.n	801581a <__swbuf_r+0x42>
 8015810:	4621      	mov	r1, r4
 8015812:	4628      	mov	r0, r5
 8015814:	f000 f950 	bl	8015ab8 <_fflush_r>
 8015818:	bb30      	cbnz	r0, 8015868 <__swbuf_r+0x90>
 801581a:	68a3      	ldr	r3, [r4, #8]
 801581c:	3b01      	subs	r3, #1
 801581e:	60a3      	str	r3, [r4, #8]
 8015820:	6823      	ldr	r3, [r4, #0]
 8015822:	1c5a      	adds	r2, r3, #1
 8015824:	6022      	str	r2, [r4, #0]
 8015826:	701e      	strb	r6, [r3, #0]
 8015828:	6963      	ldr	r3, [r4, #20]
 801582a:	3001      	adds	r0, #1
 801582c:	4283      	cmp	r3, r0
 801582e:	d004      	beq.n	801583a <__swbuf_r+0x62>
 8015830:	89a3      	ldrh	r3, [r4, #12]
 8015832:	07db      	lsls	r3, r3, #31
 8015834:	d506      	bpl.n	8015844 <__swbuf_r+0x6c>
 8015836:	2e0a      	cmp	r6, #10
 8015838:	d104      	bne.n	8015844 <__swbuf_r+0x6c>
 801583a:	4621      	mov	r1, r4
 801583c:	4628      	mov	r0, r5
 801583e:	f000 f93b 	bl	8015ab8 <_fflush_r>
 8015842:	b988      	cbnz	r0, 8015868 <__swbuf_r+0x90>
 8015844:	4638      	mov	r0, r7
 8015846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015848:	4b0a      	ldr	r3, [pc, #40]	; (8015874 <__swbuf_r+0x9c>)
 801584a:	429c      	cmp	r4, r3
 801584c:	d101      	bne.n	8015852 <__swbuf_r+0x7a>
 801584e:	68ac      	ldr	r4, [r5, #8]
 8015850:	e7cf      	b.n	80157f2 <__swbuf_r+0x1a>
 8015852:	4b09      	ldr	r3, [pc, #36]	; (8015878 <__swbuf_r+0xa0>)
 8015854:	429c      	cmp	r4, r3
 8015856:	bf08      	it	eq
 8015858:	68ec      	ldreq	r4, [r5, #12]
 801585a:	e7ca      	b.n	80157f2 <__swbuf_r+0x1a>
 801585c:	4621      	mov	r1, r4
 801585e:	4628      	mov	r0, r5
 8015860:	f000 f81e 	bl	80158a0 <__swsetup_r>
 8015864:	2800      	cmp	r0, #0
 8015866:	d0cb      	beq.n	8015800 <__swbuf_r+0x28>
 8015868:	f04f 37ff 	mov.w	r7, #4294967295
 801586c:	e7ea      	b.n	8015844 <__swbuf_r+0x6c>
 801586e:	bf00      	nop
 8015870:	08019200 	.word	0x08019200
 8015874:	08019220 	.word	0x08019220
 8015878:	080191e0 	.word	0x080191e0

0801587c <_write_r>:
 801587c:	b538      	push	{r3, r4, r5, lr}
 801587e:	4d07      	ldr	r5, [pc, #28]	; (801589c <_write_r+0x20>)
 8015880:	4604      	mov	r4, r0
 8015882:	4608      	mov	r0, r1
 8015884:	4611      	mov	r1, r2
 8015886:	2200      	movs	r2, #0
 8015888:	602a      	str	r2, [r5, #0]
 801588a:	461a      	mov	r2, r3
 801588c:	f7ec f90f 	bl	8001aae <_write>
 8015890:	1c43      	adds	r3, r0, #1
 8015892:	d102      	bne.n	801589a <_write_r+0x1e>
 8015894:	682b      	ldr	r3, [r5, #0]
 8015896:	b103      	cbz	r3, 801589a <_write_r+0x1e>
 8015898:	6023      	str	r3, [r4, #0]
 801589a:	bd38      	pop	{r3, r4, r5, pc}
 801589c:	24003630 	.word	0x24003630

080158a0 <__swsetup_r>:
 80158a0:	4b32      	ldr	r3, [pc, #200]	; (801596c <__swsetup_r+0xcc>)
 80158a2:	b570      	push	{r4, r5, r6, lr}
 80158a4:	681d      	ldr	r5, [r3, #0]
 80158a6:	4606      	mov	r6, r0
 80158a8:	460c      	mov	r4, r1
 80158aa:	b125      	cbz	r5, 80158b6 <__swsetup_r+0x16>
 80158ac:	69ab      	ldr	r3, [r5, #24]
 80158ae:	b913      	cbnz	r3, 80158b6 <__swsetup_r+0x16>
 80158b0:	4628      	mov	r0, r5
 80158b2:	f7ff faeb 	bl	8014e8c <__sinit>
 80158b6:	4b2e      	ldr	r3, [pc, #184]	; (8015970 <__swsetup_r+0xd0>)
 80158b8:	429c      	cmp	r4, r3
 80158ba:	d10f      	bne.n	80158dc <__swsetup_r+0x3c>
 80158bc:	686c      	ldr	r4, [r5, #4]
 80158be:	89a3      	ldrh	r3, [r4, #12]
 80158c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80158c4:	0719      	lsls	r1, r3, #28
 80158c6:	d42c      	bmi.n	8015922 <__swsetup_r+0x82>
 80158c8:	06dd      	lsls	r5, r3, #27
 80158ca:	d411      	bmi.n	80158f0 <__swsetup_r+0x50>
 80158cc:	2309      	movs	r3, #9
 80158ce:	6033      	str	r3, [r6, #0]
 80158d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80158d4:	81a3      	strh	r3, [r4, #12]
 80158d6:	f04f 30ff 	mov.w	r0, #4294967295
 80158da:	e03e      	b.n	801595a <__swsetup_r+0xba>
 80158dc:	4b25      	ldr	r3, [pc, #148]	; (8015974 <__swsetup_r+0xd4>)
 80158de:	429c      	cmp	r4, r3
 80158e0:	d101      	bne.n	80158e6 <__swsetup_r+0x46>
 80158e2:	68ac      	ldr	r4, [r5, #8]
 80158e4:	e7eb      	b.n	80158be <__swsetup_r+0x1e>
 80158e6:	4b24      	ldr	r3, [pc, #144]	; (8015978 <__swsetup_r+0xd8>)
 80158e8:	429c      	cmp	r4, r3
 80158ea:	bf08      	it	eq
 80158ec:	68ec      	ldreq	r4, [r5, #12]
 80158ee:	e7e6      	b.n	80158be <__swsetup_r+0x1e>
 80158f0:	0758      	lsls	r0, r3, #29
 80158f2:	d512      	bpl.n	801591a <__swsetup_r+0x7a>
 80158f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80158f6:	b141      	cbz	r1, 801590a <__swsetup_r+0x6a>
 80158f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80158fc:	4299      	cmp	r1, r3
 80158fe:	d002      	beq.n	8015906 <__swsetup_r+0x66>
 8015900:	4630      	mov	r0, r6
 8015902:	f7ff fb7d 	bl	8015000 <_free_r>
 8015906:	2300      	movs	r3, #0
 8015908:	6363      	str	r3, [r4, #52]	; 0x34
 801590a:	89a3      	ldrh	r3, [r4, #12]
 801590c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015910:	81a3      	strh	r3, [r4, #12]
 8015912:	2300      	movs	r3, #0
 8015914:	6063      	str	r3, [r4, #4]
 8015916:	6923      	ldr	r3, [r4, #16]
 8015918:	6023      	str	r3, [r4, #0]
 801591a:	89a3      	ldrh	r3, [r4, #12]
 801591c:	f043 0308 	orr.w	r3, r3, #8
 8015920:	81a3      	strh	r3, [r4, #12]
 8015922:	6923      	ldr	r3, [r4, #16]
 8015924:	b94b      	cbnz	r3, 801593a <__swsetup_r+0x9a>
 8015926:	89a3      	ldrh	r3, [r4, #12]
 8015928:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801592c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015930:	d003      	beq.n	801593a <__swsetup_r+0x9a>
 8015932:	4621      	mov	r1, r4
 8015934:	4630      	mov	r0, r6
 8015936:	f000 f931 	bl	8015b9c <__smakebuf_r>
 801593a:	89a0      	ldrh	r0, [r4, #12]
 801593c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015940:	f010 0301 	ands.w	r3, r0, #1
 8015944:	d00a      	beq.n	801595c <__swsetup_r+0xbc>
 8015946:	2300      	movs	r3, #0
 8015948:	60a3      	str	r3, [r4, #8]
 801594a:	6963      	ldr	r3, [r4, #20]
 801594c:	425b      	negs	r3, r3
 801594e:	61a3      	str	r3, [r4, #24]
 8015950:	6923      	ldr	r3, [r4, #16]
 8015952:	b943      	cbnz	r3, 8015966 <__swsetup_r+0xc6>
 8015954:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015958:	d1ba      	bne.n	80158d0 <__swsetup_r+0x30>
 801595a:	bd70      	pop	{r4, r5, r6, pc}
 801595c:	0781      	lsls	r1, r0, #30
 801595e:	bf58      	it	pl
 8015960:	6963      	ldrpl	r3, [r4, #20]
 8015962:	60a3      	str	r3, [r4, #8]
 8015964:	e7f4      	b.n	8015950 <__swsetup_r+0xb0>
 8015966:	2000      	movs	r0, #0
 8015968:	e7f7      	b.n	801595a <__swsetup_r+0xba>
 801596a:	bf00      	nop
 801596c:	24000038 	.word	0x24000038
 8015970:	08019200 	.word	0x08019200
 8015974:	08019220 	.word	0x08019220
 8015978:	080191e0 	.word	0x080191e0

0801597c <abort>:
 801597c:	b508      	push	{r3, lr}
 801597e:	2006      	movs	r0, #6
 8015980:	f000 f992 	bl	8015ca8 <raise>
 8015984:	2001      	movs	r0, #1
 8015986:	f7ec f86b 	bl	8001a60 <_exit>
	...

0801598c <_close_r>:
 801598c:	b538      	push	{r3, r4, r5, lr}
 801598e:	4d06      	ldr	r5, [pc, #24]	; (80159a8 <_close_r+0x1c>)
 8015990:	2300      	movs	r3, #0
 8015992:	4604      	mov	r4, r0
 8015994:	4608      	mov	r0, r1
 8015996:	602b      	str	r3, [r5, #0]
 8015998:	f7ec f8a5 	bl	8001ae6 <_close>
 801599c:	1c43      	adds	r3, r0, #1
 801599e:	d102      	bne.n	80159a6 <_close_r+0x1a>
 80159a0:	682b      	ldr	r3, [r5, #0]
 80159a2:	b103      	cbz	r3, 80159a6 <_close_r+0x1a>
 80159a4:	6023      	str	r3, [r4, #0]
 80159a6:	bd38      	pop	{r3, r4, r5, pc}
 80159a8:	24003630 	.word	0x24003630

080159ac <__sflush_r>:
 80159ac:	898a      	ldrh	r2, [r1, #12]
 80159ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159b2:	4605      	mov	r5, r0
 80159b4:	0710      	lsls	r0, r2, #28
 80159b6:	460c      	mov	r4, r1
 80159b8:	d458      	bmi.n	8015a6c <__sflush_r+0xc0>
 80159ba:	684b      	ldr	r3, [r1, #4]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	dc05      	bgt.n	80159cc <__sflush_r+0x20>
 80159c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	dc02      	bgt.n	80159cc <__sflush_r+0x20>
 80159c6:	2000      	movs	r0, #0
 80159c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80159ce:	2e00      	cmp	r6, #0
 80159d0:	d0f9      	beq.n	80159c6 <__sflush_r+0x1a>
 80159d2:	2300      	movs	r3, #0
 80159d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80159d8:	682f      	ldr	r7, [r5, #0]
 80159da:	602b      	str	r3, [r5, #0]
 80159dc:	d032      	beq.n	8015a44 <__sflush_r+0x98>
 80159de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80159e0:	89a3      	ldrh	r3, [r4, #12]
 80159e2:	075a      	lsls	r2, r3, #29
 80159e4:	d505      	bpl.n	80159f2 <__sflush_r+0x46>
 80159e6:	6863      	ldr	r3, [r4, #4]
 80159e8:	1ac0      	subs	r0, r0, r3
 80159ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80159ec:	b10b      	cbz	r3, 80159f2 <__sflush_r+0x46>
 80159ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80159f0:	1ac0      	subs	r0, r0, r3
 80159f2:	2300      	movs	r3, #0
 80159f4:	4602      	mov	r2, r0
 80159f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80159f8:	6a21      	ldr	r1, [r4, #32]
 80159fa:	4628      	mov	r0, r5
 80159fc:	47b0      	blx	r6
 80159fe:	1c43      	adds	r3, r0, #1
 8015a00:	89a3      	ldrh	r3, [r4, #12]
 8015a02:	d106      	bne.n	8015a12 <__sflush_r+0x66>
 8015a04:	6829      	ldr	r1, [r5, #0]
 8015a06:	291d      	cmp	r1, #29
 8015a08:	d82c      	bhi.n	8015a64 <__sflush_r+0xb8>
 8015a0a:	4a2a      	ldr	r2, [pc, #168]	; (8015ab4 <__sflush_r+0x108>)
 8015a0c:	40ca      	lsrs	r2, r1
 8015a0e:	07d6      	lsls	r6, r2, #31
 8015a10:	d528      	bpl.n	8015a64 <__sflush_r+0xb8>
 8015a12:	2200      	movs	r2, #0
 8015a14:	6062      	str	r2, [r4, #4]
 8015a16:	04d9      	lsls	r1, r3, #19
 8015a18:	6922      	ldr	r2, [r4, #16]
 8015a1a:	6022      	str	r2, [r4, #0]
 8015a1c:	d504      	bpl.n	8015a28 <__sflush_r+0x7c>
 8015a1e:	1c42      	adds	r2, r0, #1
 8015a20:	d101      	bne.n	8015a26 <__sflush_r+0x7a>
 8015a22:	682b      	ldr	r3, [r5, #0]
 8015a24:	b903      	cbnz	r3, 8015a28 <__sflush_r+0x7c>
 8015a26:	6560      	str	r0, [r4, #84]	; 0x54
 8015a28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015a2a:	602f      	str	r7, [r5, #0]
 8015a2c:	2900      	cmp	r1, #0
 8015a2e:	d0ca      	beq.n	80159c6 <__sflush_r+0x1a>
 8015a30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015a34:	4299      	cmp	r1, r3
 8015a36:	d002      	beq.n	8015a3e <__sflush_r+0x92>
 8015a38:	4628      	mov	r0, r5
 8015a3a:	f7ff fae1 	bl	8015000 <_free_r>
 8015a3e:	2000      	movs	r0, #0
 8015a40:	6360      	str	r0, [r4, #52]	; 0x34
 8015a42:	e7c1      	b.n	80159c8 <__sflush_r+0x1c>
 8015a44:	6a21      	ldr	r1, [r4, #32]
 8015a46:	2301      	movs	r3, #1
 8015a48:	4628      	mov	r0, r5
 8015a4a:	47b0      	blx	r6
 8015a4c:	1c41      	adds	r1, r0, #1
 8015a4e:	d1c7      	bne.n	80159e0 <__sflush_r+0x34>
 8015a50:	682b      	ldr	r3, [r5, #0]
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d0c4      	beq.n	80159e0 <__sflush_r+0x34>
 8015a56:	2b1d      	cmp	r3, #29
 8015a58:	d001      	beq.n	8015a5e <__sflush_r+0xb2>
 8015a5a:	2b16      	cmp	r3, #22
 8015a5c:	d101      	bne.n	8015a62 <__sflush_r+0xb6>
 8015a5e:	602f      	str	r7, [r5, #0]
 8015a60:	e7b1      	b.n	80159c6 <__sflush_r+0x1a>
 8015a62:	89a3      	ldrh	r3, [r4, #12]
 8015a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a68:	81a3      	strh	r3, [r4, #12]
 8015a6a:	e7ad      	b.n	80159c8 <__sflush_r+0x1c>
 8015a6c:	690f      	ldr	r7, [r1, #16]
 8015a6e:	2f00      	cmp	r7, #0
 8015a70:	d0a9      	beq.n	80159c6 <__sflush_r+0x1a>
 8015a72:	0793      	lsls	r3, r2, #30
 8015a74:	680e      	ldr	r6, [r1, #0]
 8015a76:	bf08      	it	eq
 8015a78:	694b      	ldreq	r3, [r1, #20]
 8015a7a:	600f      	str	r7, [r1, #0]
 8015a7c:	bf18      	it	ne
 8015a7e:	2300      	movne	r3, #0
 8015a80:	eba6 0807 	sub.w	r8, r6, r7
 8015a84:	608b      	str	r3, [r1, #8]
 8015a86:	f1b8 0f00 	cmp.w	r8, #0
 8015a8a:	dd9c      	ble.n	80159c6 <__sflush_r+0x1a>
 8015a8c:	6a21      	ldr	r1, [r4, #32]
 8015a8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015a90:	4643      	mov	r3, r8
 8015a92:	463a      	mov	r2, r7
 8015a94:	4628      	mov	r0, r5
 8015a96:	47b0      	blx	r6
 8015a98:	2800      	cmp	r0, #0
 8015a9a:	dc06      	bgt.n	8015aaa <__sflush_r+0xfe>
 8015a9c:	89a3      	ldrh	r3, [r4, #12]
 8015a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015aa2:	81a3      	strh	r3, [r4, #12]
 8015aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8015aa8:	e78e      	b.n	80159c8 <__sflush_r+0x1c>
 8015aaa:	4407      	add	r7, r0
 8015aac:	eba8 0800 	sub.w	r8, r8, r0
 8015ab0:	e7e9      	b.n	8015a86 <__sflush_r+0xda>
 8015ab2:	bf00      	nop
 8015ab4:	20400001 	.word	0x20400001

08015ab8 <_fflush_r>:
 8015ab8:	b538      	push	{r3, r4, r5, lr}
 8015aba:	690b      	ldr	r3, [r1, #16]
 8015abc:	4605      	mov	r5, r0
 8015abe:	460c      	mov	r4, r1
 8015ac0:	b913      	cbnz	r3, 8015ac8 <_fflush_r+0x10>
 8015ac2:	2500      	movs	r5, #0
 8015ac4:	4628      	mov	r0, r5
 8015ac6:	bd38      	pop	{r3, r4, r5, pc}
 8015ac8:	b118      	cbz	r0, 8015ad2 <_fflush_r+0x1a>
 8015aca:	6983      	ldr	r3, [r0, #24]
 8015acc:	b90b      	cbnz	r3, 8015ad2 <_fflush_r+0x1a>
 8015ace:	f7ff f9dd 	bl	8014e8c <__sinit>
 8015ad2:	4b14      	ldr	r3, [pc, #80]	; (8015b24 <_fflush_r+0x6c>)
 8015ad4:	429c      	cmp	r4, r3
 8015ad6:	d11b      	bne.n	8015b10 <_fflush_r+0x58>
 8015ad8:	686c      	ldr	r4, [r5, #4]
 8015ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d0ef      	beq.n	8015ac2 <_fflush_r+0xa>
 8015ae2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015ae4:	07d0      	lsls	r0, r2, #31
 8015ae6:	d404      	bmi.n	8015af2 <_fflush_r+0x3a>
 8015ae8:	0599      	lsls	r1, r3, #22
 8015aea:	d402      	bmi.n	8015af2 <_fflush_r+0x3a>
 8015aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015aee:	f7ff fa7d 	bl	8014fec <__retarget_lock_acquire_recursive>
 8015af2:	4628      	mov	r0, r5
 8015af4:	4621      	mov	r1, r4
 8015af6:	f7ff ff59 	bl	80159ac <__sflush_r>
 8015afa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015afc:	07da      	lsls	r2, r3, #31
 8015afe:	4605      	mov	r5, r0
 8015b00:	d4e0      	bmi.n	8015ac4 <_fflush_r+0xc>
 8015b02:	89a3      	ldrh	r3, [r4, #12]
 8015b04:	059b      	lsls	r3, r3, #22
 8015b06:	d4dd      	bmi.n	8015ac4 <_fflush_r+0xc>
 8015b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015b0a:	f7ff fa70 	bl	8014fee <__retarget_lock_release_recursive>
 8015b0e:	e7d9      	b.n	8015ac4 <_fflush_r+0xc>
 8015b10:	4b05      	ldr	r3, [pc, #20]	; (8015b28 <_fflush_r+0x70>)
 8015b12:	429c      	cmp	r4, r3
 8015b14:	d101      	bne.n	8015b1a <_fflush_r+0x62>
 8015b16:	68ac      	ldr	r4, [r5, #8]
 8015b18:	e7df      	b.n	8015ada <_fflush_r+0x22>
 8015b1a:	4b04      	ldr	r3, [pc, #16]	; (8015b2c <_fflush_r+0x74>)
 8015b1c:	429c      	cmp	r4, r3
 8015b1e:	bf08      	it	eq
 8015b20:	68ec      	ldreq	r4, [r5, #12]
 8015b22:	e7da      	b.n	8015ada <_fflush_r+0x22>
 8015b24:	08019200 	.word	0x08019200
 8015b28:	08019220 	.word	0x08019220
 8015b2c:	080191e0 	.word	0x080191e0

08015b30 <_lseek_r>:
 8015b30:	b538      	push	{r3, r4, r5, lr}
 8015b32:	4d07      	ldr	r5, [pc, #28]	; (8015b50 <_lseek_r+0x20>)
 8015b34:	4604      	mov	r4, r0
 8015b36:	4608      	mov	r0, r1
 8015b38:	4611      	mov	r1, r2
 8015b3a:	2200      	movs	r2, #0
 8015b3c:	602a      	str	r2, [r5, #0]
 8015b3e:	461a      	mov	r2, r3
 8015b40:	f7eb fff8 	bl	8001b34 <_lseek>
 8015b44:	1c43      	adds	r3, r0, #1
 8015b46:	d102      	bne.n	8015b4e <_lseek_r+0x1e>
 8015b48:	682b      	ldr	r3, [r5, #0]
 8015b4a:	b103      	cbz	r3, 8015b4e <_lseek_r+0x1e>
 8015b4c:	6023      	str	r3, [r4, #0]
 8015b4e:	bd38      	pop	{r3, r4, r5, pc}
 8015b50:	24003630 	.word	0x24003630

08015b54 <__swhatbuf_r>:
 8015b54:	b570      	push	{r4, r5, r6, lr}
 8015b56:	460e      	mov	r6, r1
 8015b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b5c:	2900      	cmp	r1, #0
 8015b5e:	b096      	sub	sp, #88	; 0x58
 8015b60:	4614      	mov	r4, r2
 8015b62:	461d      	mov	r5, r3
 8015b64:	da07      	bge.n	8015b76 <__swhatbuf_r+0x22>
 8015b66:	2300      	movs	r3, #0
 8015b68:	602b      	str	r3, [r5, #0]
 8015b6a:	89b3      	ldrh	r3, [r6, #12]
 8015b6c:	061a      	lsls	r2, r3, #24
 8015b6e:	d410      	bmi.n	8015b92 <__swhatbuf_r+0x3e>
 8015b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015b74:	e00e      	b.n	8015b94 <__swhatbuf_r+0x40>
 8015b76:	466a      	mov	r2, sp
 8015b78:	f000 f8b2 	bl	8015ce0 <_fstat_r>
 8015b7c:	2800      	cmp	r0, #0
 8015b7e:	dbf2      	blt.n	8015b66 <__swhatbuf_r+0x12>
 8015b80:	9a01      	ldr	r2, [sp, #4]
 8015b82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015b86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015b8a:	425a      	negs	r2, r3
 8015b8c:	415a      	adcs	r2, r3
 8015b8e:	602a      	str	r2, [r5, #0]
 8015b90:	e7ee      	b.n	8015b70 <__swhatbuf_r+0x1c>
 8015b92:	2340      	movs	r3, #64	; 0x40
 8015b94:	2000      	movs	r0, #0
 8015b96:	6023      	str	r3, [r4, #0]
 8015b98:	b016      	add	sp, #88	; 0x58
 8015b9a:	bd70      	pop	{r4, r5, r6, pc}

08015b9c <__smakebuf_r>:
 8015b9c:	898b      	ldrh	r3, [r1, #12]
 8015b9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015ba0:	079d      	lsls	r5, r3, #30
 8015ba2:	4606      	mov	r6, r0
 8015ba4:	460c      	mov	r4, r1
 8015ba6:	d507      	bpl.n	8015bb8 <__smakebuf_r+0x1c>
 8015ba8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015bac:	6023      	str	r3, [r4, #0]
 8015bae:	6123      	str	r3, [r4, #16]
 8015bb0:	2301      	movs	r3, #1
 8015bb2:	6163      	str	r3, [r4, #20]
 8015bb4:	b002      	add	sp, #8
 8015bb6:	bd70      	pop	{r4, r5, r6, pc}
 8015bb8:	ab01      	add	r3, sp, #4
 8015bba:	466a      	mov	r2, sp
 8015bbc:	f7ff ffca 	bl	8015b54 <__swhatbuf_r>
 8015bc0:	9900      	ldr	r1, [sp, #0]
 8015bc2:	4605      	mov	r5, r0
 8015bc4:	4630      	mov	r0, r6
 8015bc6:	f7ff fa6b 	bl	80150a0 <_malloc_r>
 8015bca:	b948      	cbnz	r0, 8015be0 <__smakebuf_r+0x44>
 8015bcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015bd0:	059a      	lsls	r2, r3, #22
 8015bd2:	d4ef      	bmi.n	8015bb4 <__smakebuf_r+0x18>
 8015bd4:	f023 0303 	bic.w	r3, r3, #3
 8015bd8:	f043 0302 	orr.w	r3, r3, #2
 8015bdc:	81a3      	strh	r3, [r4, #12]
 8015bde:	e7e3      	b.n	8015ba8 <__smakebuf_r+0xc>
 8015be0:	4b0d      	ldr	r3, [pc, #52]	; (8015c18 <__smakebuf_r+0x7c>)
 8015be2:	62b3      	str	r3, [r6, #40]	; 0x28
 8015be4:	89a3      	ldrh	r3, [r4, #12]
 8015be6:	6020      	str	r0, [r4, #0]
 8015be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015bec:	81a3      	strh	r3, [r4, #12]
 8015bee:	9b00      	ldr	r3, [sp, #0]
 8015bf0:	6163      	str	r3, [r4, #20]
 8015bf2:	9b01      	ldr	r3, [sp, #4]
 8015bf4:	6120      	str	r0, [r4, #16]
 8015bf6:	b15b      	cbz	r3, 8015c10 <__smakebuf_r+0x74>
 8015bf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015bfc:	4630      	mov	r0, r6
 8015bfe:	f000 f881 	bl	8015d04 <_isatty_r>
 8015c02:	b128      	cbz	r0, 8015c10 <__smakebuf_r+0x74>
 8015c04:	89a3      	ldrh	r3, [r4, #12]
 8015c06:	f023 0303 	bic.w	r3, r3, #3
 8015c0a:	f043 0301 	orr.w	r3, r3, #1
 8015c0e:	81a3      	strh	r3, [r4, #12]
 8015c10:	89a0      	ldrh	r0, [r4, #12]
 8015c12:	4305      	orrs	r5, r0
 8015c14:	81a5      	strh	r5, [r4, #12]
 8015c16:	e7cd      	b.n	8015bb4 <__smakebuf_r+0x18>
 8015c18:	08014e25 	.word	0x08014e25

08015c1c <__malloc_lock>:
 8015c1c:	4801      	ldr	r0, [pc, #4]	; (8015c24 <__malloc_lock+0x8>)
 8015c1e:	f7ff b9e5 	b.w	8014fec <__retarget_lock_acquire_recursive>
 8015c22:	bf00      	nop
 8015c24:	24003638 	.word	0x24003638

08015c28 <__malloc_unlock>:
 8015c28:	4801      	ldr	r0, [pc, #4]	; (8015c30 <__malloc_unlock+0x8>)
 8015c2a:	f7ff b9e0 	b.w	8014fee <__retarget_lock_release_recursive>
 8015c2e:	bf00      	nop
 8015c30:	24003638 	.word	0x24003638

08015c34 <_read_r>:
 8015c34:	b538      	push	{r3, r4, r5, lr}
 8015c36:	4d07      	ldr	r5, [pc, #28]	; (8015c54 <_read_r+0x20>)
 8015c38:	4604      	mov	r4, r0
 8015c3a:	4608      	mov	r0, r1
 8015c3c:	4611      	mov	r1, r2
 8015c3e:	2200      	movs	r2, #0
 8015c40:	602a      	str	r2, [r5, #0]
 8015c42:	461a      	mov	r2, r3
 8015c44:	f7eb ff16 	bl	8001a74 <_read>
 8015c48:	1c43      	adds	r3, r0, #1
 8015c4a:	d102      	bne.n	8015c52 <_read_r+0x1e>
 8015c4c:	682b      	ldr	r3, [r5, #0]
 8015c4e:	b103      	cbz	r3, 8015c52 <_read_r+0x1e>
 8015c50:	6023      	str	r3, [r4, #0]
 8015c52:	bd38      	pop	{r3, r4, r5, pc}
 8015c54:	24003630 	.word	0x24003630

08015c58 <_raise_r>:
 8015c58:	291f      	cmp	r1, #31
 8015c5a:	b538      	push	{r3, r4, r5, lr}
 8015c5c:	4604      	mov	r4, r0
 8015c5e:	460d      	mov	r5, r1
 8015c60:	d904      	bls.n	8015c6c <_raise_r+0x14>
 8015c62:	2316      	movs	r3, #22
 8015c64:	6003      	str	r3, [r0, #0]
 8015c66:	f04f 30ff 	mov.w	r0, #4294967295
 8015c6a:	bd38      	pop	{r3, r4, r5, pc}
 8015c6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015c6e:	b112      	cbz	r2, 8015c76 <_raise_r+0x1e>
 8015c70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015c74:	b94b      	cbnz	r3, 8015c8a <_raise_r+0x32>
 8015c76:	4620      	mov	r0, r4
 8015c78:	f000 f830 	bl	8015cdc <_getpid_r>
 8015c7c:	462a      	mov	r2, r5
 8015c7e:	4601      	mov	r1, r0
 8015c80:	4620      	mov	r0, r4
 8015c82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015c86:	f000 b817 	b.w	8015cb8 <_kill_r>
 8015c8a:	2b01      	cmp	r3, #1
 8015c8c:	d00a      	beq.n	8015ca4 <_raise_r+0x4c>
 8015c8e:	1c59      	adds	r1, r3, #1
 8015c90:	d103      	bne.n	8015c9a <_raise_r+0x42>
 8015c92:	2316      	movs	r3, #22
 8015c94:	6003      	str	r3, [r0, #0]
 8015c96:	2001      	movs	r0, #1
 8015c98:	e7e7      	b.n	8015c6a <_raise_r+0x12>
 8015c9a:	2400      	movs	r4, #0
 8015c9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015ca0:	4628      	mov	r0, r5
 8015ca2:	4798      	blx	r3
 8015ca4:	2000      	movs	r0, #0
 8015ca6:	e7e0      	b.n	8015c6a <_raise_r+0x12>

08015ca8 <raise>:
 8015ca8:	4b02      	ldr	r3, [pc, #8]	; (8015cb4 <raise+0xc>)
 8015caa:	4601      	mov	r1, r0
 8015cac:	6818      	ldr	r0, [r3, #0]
 8015cae:	f7ff bfd3 	b.w	8015c58 <_raise_r>
 8015cb2:	bf00      	nop
 8015cb4:	24000038 	.word	0x24000038

08015cb8 <_kill_r>:
 8015cb8:	b538      	push	{r3, r4, r5, lr}
 8015cba:	4d07      	ldr	r5, [pc, #28]	; (8015cd8 <_kill_r+0x20>)
 8015cbc:	2300      	movs	r3, #0
 8015cbe:	4604      	mov	r4, r0
 8015cc0:	4608      	mov	r0, r1
 8015cc2:	4611      	mov	r1, r2
 8015cc4:	602b      	str	r3, [r5, #0]
 8015cc6:	f7eb feb9 	bl	8001a3c <_kill>
 8015cca:	1c43      	adds	r3, r0, #1
 8015ccc:	d102      	bne.n	8015cd4 <_kill_r+0x1c>
 8015cce:	682b      	ldr	r3, [r5, #0]
 8015cd0:	b103      	cbz	r3, 8015cd4 <_kill_r+0x1c>
 8015cd2:	6023      	str	r3, [r4, #0]
 8015cd4:	bd38      	pop	{r3, r4, r5, pc}
 8015cd6:	bf00      	nop
 8015cd8:	24003630 	.word	0x24003630

08015cdc <_getpid_r>:
 8015cdc:	f7eb bea6 	b.w	8001a2c <_getpid>

08015ce0 <_fstat_r>:
 8015ce0:	b538      	push	{r3, r4, r5, lr}
 8015ce2:	4d07      	ldr	r5, [pc, #28]	; (8015d00 <_fstat_r+0x20>)
 8015ce4:	2300      	movs	r3, #0
 8015ce6:	4604      	mov	r4, r0
 8015ce8:	4608      	mov	r0, r1
 8015cea:	4611      	mov	r1, r2
 8015cec:	602b      	str	r3, [r5, #0]
 8015cee:	f7eb ff06 	bl	8001afe <_fstat>
 8015cf2:	1c43      	adds	r3, r0, #1
 8015cf4:	d102      	bne.n	8015cfc <_fstat_r+0x1c>
 8015cf6:	682b      	ldr	r3, [r5, #0]
 8015cf8:	b103      	cbz	r3, 8015cfc <_fstat_r+0x1c>
 8015cfa:	6023      	str	r3, [r4, #0]
 8015cfc:	bd38      	pop	{r3, r4, r5, pc}
 8015cfe:	bf00      	nop
 8015d00:	24003630 	.word	0x24003630

08015d04 <_isatty_r>:
 8015d04:	b538      	push	{r3, r4, r5, lr}
 8015d06:	4d06      	ldr	r5, [pc, #24]	; (8015d20 <_isatty_r+0x1c>)
 8015d08:	2300      	movs	r3, #0
 8015d0a:	4604      	mov	r4, r0
 8015d0c:	4608      	mov	r0, r1
 8015d0e:	602b      	str	r3, [r5, #0]
 8015d10:	f7eb ff05 	bl	8001b1e <_isatty>
 8015d14:	1c43      	adds	r3, r0, #1
 8015d16:	d102      	bne.n	8015d1e <_isatty_r+0x1a>
 8015d18:	682b      	ldr	r3, [r5, #0]
 8015d1a:	b103      	cbz	r3, 8015d1e <_isatty_r+0x1a>
 8015d1c:	6023      	str	r3, [r4, #0]
 8015d1e:	bd38      	pop	{r3, r4, r5, pc}
 8015d20:	24003630 	.word	0x24003630

08015d24 <_init>:
 8015d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d26:	bf00      	nop
 8015d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015d2a:	bc08      	pop	{r3}
 8015d2c:	469e      	mov	lr, r3
 8015d2e:	4770      	bx	lr

08015d30 <_fini>:
 8015d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d32:	bf00      	nop
 8015d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015d36:	bc08      	pop	{r3}
 8015d38:	469e      	mov	lr, r3
 8015d3a:	4770      	bx	lr
