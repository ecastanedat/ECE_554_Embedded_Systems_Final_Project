
ECE_554_ProjectBaseline.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015b40  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003b28  08015e10  08015e10  00025e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019938  08019938  00029938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08019940  08019940  00029940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08019944  08019944  00029944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  24000000  08019948  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003594  2400009c  080199e4  0003009c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24003630  080199e4  00033630  2**0
                  ALLOC
  9 .lwip_sec     00001900  30000000  30000000  00040000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0005b28c  00000000  00000000  000300ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00008f0f  00000000  00000000  0008b356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000024e0  00000000  00000000  00094268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00002348  00000000  00000000  00096748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000444fb  00000000  00000000  00098a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003c374  00000000  00000000  000dcf8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00174863  00000000  00000000  001192ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0028db62  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000a370  00000000  00000000  0028dbb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400009c 	.word	0x2400009c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08015df8 	.word	0x08015df8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000a0 	.word	0x240000a0
 800030c:	08015df8 	.word	0x08015df8

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96e 	b.w	80006b4 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80006b8:	b590      	push	{r4, r7, lr}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af02      	add	r7, sp, #8
 80006be:	4604      	mov	r4, r0
 80006c0:	4608      	mov	r0, r1
 80006c2:	4611      	mov	r1, r2
 80006c4:	461a      	mov	r2, r3
 80006c6:	4623      	mov	r3, r4
 80006c8:	80fb      	strh	r3, [r7, #6]
 80006ca:	4603      	mov	r3, r0
 80006cc:	80bb      	strh	r3, [r7, #4]
 80006ce:	460b      	mov	r3, r1
 80006d0:	807b      	strh	r3, [r7, #2]
 80006d2:	4613      	mov	r3, r2
 80006d4:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 80006d6:	88f8      	ldrh	r0, [r7, #6]
 80006d8:	88b9      	ldrh	r1, [r7, #4]
 80006da:	887a      	ldrh	r2, [r7, #2]
 80006dc:	883c      	ldrh	r4, [r7, #0]
 80006de:	8b3b      	ldrh	r3, [r7, #24]
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	4623      	mov	r3, r4
 80006e4:	f000 fa88 	bl	8000bf8 <ST7735_FillRectangle>
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd90      	pop	{r4, r7, pc}

080006f0 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af02      	add	r7, sp, #8
 80006f6:	4603      	mov	r3, r0
 80006f8:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <fillScreen+0x2c>)
 80006fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <fillScreen+0x30>)
 8000702:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000706:	88fb      	ldrh	r3, [r7, #6]
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	460b      	mov	r3, r1
 800070c:	2100      	movs	r1, #0
 800070e:	2000      	movs	r0, #0
 8000710:	f7ff ffd2 	bl	80006b8 <fillRect>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	24000250 	.word	0x24000250
 8000720:	24000254 	.word	0x24000254

08000724 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	2101      	movs	r1, #1
 800072c:	4802      	ldr	r0, [pc, #8]	; (8000738 <ST7735_Select+0x14>)
 800072e:	f004 fd93 	bl	8005258 <HAL_GPIO_WritePin>
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	58020800 	.word	0x58020800

0800073c <ST7735_Unselect>:

void ST7735_Unselect()
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000740:	2201      	movs	r2, #1
 8000742:	2101      	movs	r1, #1
 8000744:	4802      	ldr	r0, [pc, #8]	; (8000750 <ST7735_Unselect+0x14>)
 8000746:	f004 fd87 	bl	8005258 <HAL_GPIO_WritePin>
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	58020800 	.word	0x58020800

08000754 <ST7735_Reset>:

void ST7735_Reset()
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	2108      	movs	r1, #8
 800075c:	4806      	ldr	r0, [pc, #24]	; (8000778 <ST7735_Reset+0x24>)
 800075e:	f004 fd7b 	bl	8005258 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000762:	2005      	movs	r0, #5
 8000764:	f001 ff52 	bl	800260c <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000768:	2201      	movs	r2, #1
 800076a:	2108      	movs	r1, #8
 800076c:	4802      	ldr	r0, [pc, #8]	; (8000778 <ST7735_Reset+0x24>)
 800076e:	f004 fd73 	bl	8005258 <HAL_GPIO_WritePin>
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	58020800 	.word	0x58020800

0800077c <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2108      	movs	r1, #8
 800078a:	4807      	ldr	r0, [pc, #28]	; (80007a8 <ST7735_WriteCommand+0x2c>)
 800078c:	f004 fd64 	bl	8005258 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000790:	1df9      	adds	r1, r7, #7
 8000792:	f04f 33ff 	mov.w	r3, #4294967295
 8000796:	2201      	movs	r2, #1
 8000798:	4804      	ldr	r0, [pc, #16]	; (80007ac <ST7735_WriteCommand+0x30>)
 800079a:	f007 f949 	bl	8007a30 <HAL_SPI_Transmit>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	58020000 	.word	0x58020000
 80007ac:	240003b4 	.word	0x240003b4

080007b0 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80007ba:	2201      	movs	r2, #1
 80007bc:	2108      	movs	r1, #8
 80007be:	4807      	ldr	r0, [pc, #28]	; (80007dc <ST7735_WriteData+0x2c>)
 80007c0:	f004 fd4a 	bl	8005258 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	f04f 33ff 	mov.w	r3, #4294967295
 80007cc:	6879      	ldr	r1, [r7, #4]
 80007ce:	4804      	ldr	r0, [pc, #16]	; (80007e0 <ST7735_WriteData+0x30>)
 80007d0:	f007 f92e 	bl	8007a30 <HAL_SPI_Transmit>
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	58020000 	.word	0x58020000
 80007e0:	240003b4 	.word	0x240003b4

080007e4 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	1c5a      	adds	r2, r3, #1
 80007f0:	607a      	str	r2, [r7, #4]
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80007f6:	e034      	b.n	8000862 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	1c5a      	adds	r2, r3, #1
 80007fc:	607a      	str	r2, [r7, #4]
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000802:	7afb      	ldrb	r3, [r7, #11]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ffb9 	bl	800077c <ST7735_WriteCommand>

        numArgs = *addr++;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	1c5a      	adds	r2, r3, #1
 800080e:	607a      	str	r2, [r7, #4]
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000814:	7abb      	ldrb	r3, [r7, #10]
 8000816:	b29b      	uxth	r3, r3
 8000818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081c:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800081e:	7abb      	ldrb	r3, [r7, #10]
 8000820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000824:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000826:	7abb      	ldrb	r3, [r7, #10]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d008      	beq.n	800083e <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800082c:	7abb      	ldrb	r3, [r7, #10]
 800082e:	4619      	mov	r1, r3
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f7ff ffbd 	bl	80007b0 <ST7735_WriteData>
            addr += numArgs;
 8000836:	7abb      	ldrb	r3, [r7, #10]
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	4413      	add	r3, r2
 800083c:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800083e:	89bb      	ldrh	r3, [r7, #12]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d00e      	beq.n	8000862 <DisplayInit+0x7e>
            ms = *addr++;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	1c5a      	adds	r2, r3, #1
 8000848:	607a      	str	r2, [r7, #4]
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800084e:	89bb      	ldrh	r3, [r7, #12]
 8000850:	2bff      	cmp	r3, #255	; 0xff
 8000852:	d102      	bne.n	800085a <DisplayInit+0x76>
 8000854:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000858:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800085a:	89bb      	ldrh	r3, [r7, #12]
 800085c:	4618      	mov	r0, r3
 800085e:	f001 fed5 	bl	800260c <HAL_Delay>
    while(numCommands--) {
 8000862:	7bfb      	ldrb	r3, [r7, #15]
 8000864:	1e5a      	subs	r2, r3, #1
 8000866:	73fa      	strb	r2, [r7, #15]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d1c5      	bne.n	80007f8 <DisplayInit+0x14>
        }
    }
}
 800086c:	bf00      	nop
 800086e:	bf00      	nop
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	4604      	mov	r4, r0
 8000880:	4608      	mov	r0, r1
 8000882:	4611      	mov	r1, r2
 8000884:	461a      	mov	r2, r3
 8000886:	4623      	mov	r3, r4
 8000888:	71fb      	strb	r3, [r7, #7]
 800088a:	4603      	mov	r3, r0
 800088c:	71bb      	strb	r3, [r7, #6]
 800088e:	460b      	mov	r3, r1
 8000890:	717b      	strb	r3, [r7, #5]
 8000892:	4613      	mov	r3, r2
 8000894:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000896:	202a      	movs	r0, #42	; 0x2a
 8000898:	f7ff ff70 	bl	800077c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 800089c:	2300      	movs	r3, #0
 800089e:	733b      	strb	r3, [r7, #12]
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <ST7735_SetAddressWindow+0x88>)
 80008a2:	781a      	ldrb	r2, [r3, #0]
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	4413      	add	r3, r2
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	737b      	strb	r3, [r7, #13]
 80008ac:	2300      	movs	r3, #0
 80008ae:	73bb      	strb	r3, [r7, #14]
 80008b0:	4b13      	ldr	r3, [pc, #76]	; (8000900 <ST7735_SetAddressWindow+0x88>)
 80008b2:	781a      	ldrb	r2, [r3, #0]
 80008b4:	797b      	ldrb	r3, [r7, #5]
 80008b6:	4413      	add	r3, r2
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	2104      	movs	r1, #4
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff ff74 	bl	80007b0 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80008c8:	202b      	movs	r0, #43	; 0x2b
 80008ca:	f7ff ff57 	bl	800077c <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 80008ce:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <ST7735_SetAddressWindow+0x8c>)
 80008d0:	781a      	ldrb	r2, [r3, #0]
 80008d2:	79bb      	ldrb	r3, [r7, #6]
 80008d4:	4413      	add	r3, r2
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 80008da:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <ST7735_SetAddressWindow+0x8c>)
 80008dc:	781a      	ldrb	r2, [r3, #0]
 80008de:	793b      	ldrb	r3, [r7, #4]
 80008e0:	4413      	add	r3, r2
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80008e6:	f107 030c 	add.w	r3, r7, #12
 80008ea:	2104      	movs	r1, #4
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff ff5f 	bl	80007b0 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80008f2:	202c      	movs	r0, #44	; 0x2c
 80008f4:	f7ff ff42 	bl	800077c <ST7735_WriteCommand>
}
 80008f8:	bf00      	nop
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd90      	pop	{r4, r7, pc}
 8000900:	24000248 	.word	0x24000248
 8000904:	2400024c 	.word	0x2400024c

08000908 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8000912:	f7ff ff07 	bl	8000724 <ST7735_Select>
    ST7735_Reset();
 8000916:	f7ff ff1d 	bl	8000754 <ST7735_Reset>
    DisplayInit(init_cmds1);
 800091a:	480c      	ldr	r0, [pc, #48]	; (800094c <ST7735_Init+0x44>)
 800091c:	f7ff ff62 	bl	80007e4 <DisplayInit>
    DisplayInit(init_cmds2);
 8000920:	480b      	ldr	r0, [pc, #44]	; (8000950 <ST7735_Init+0x48>)
 8000922:	f7ff ff5f 	bl	80007e4 <DisplayInit>
    DisplayInit(init_cmds3);
 8000926:	480b      	ldr	r0, [pc, #44]	; (8000954 <ST7735_Init+0x4c>)
 8000928:	f7ff ff5c 	bl	80007e4 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 800092c:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <ST7735_Init+0x50>)
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <ST7735_Init+0x54>)
 8000934:	2200      	movs	r2, #0
 8000936:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	4618      	mov	r0, r3
 800093c:	f000 f810 	bl	8000960 <ST7735_SetRotation>
    ST7735_Unselect();
 8000940:	f7ff fefc 	bl	800073c <ST7735_Unselect>

}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	080188e4 	.word	0x080188e4
 8000950:	0801891c 	.word	0x0801891c
 8000954:	0801892c 	.word	0x0801892c
 8000958:	24000249 	.word	0x24000249
 800095c:	2400024d 	.word	0x2400024d

08000960 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	f003 0303 	and.w	r3, r3, #3
 8000974:	b2da      	uxtb	r2, r3
 8000976:	4b33      	ldr	r3, [pc, #204]	; (8000a44 <ST7735_SetRotation+0xe4>)
 8000978:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 800097a:	4b32      	ldr	r3, [pc, #200]	; (8000a44 <ST7735_SetRotation+0xe4>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b03      	cmp	r3, #3
 8000980:	d84e      	bhi.n	8000a20 <ST7735_SetRotation+0xc0>
 8000982:	a201      	add	r2, pc, #4	; (adr r2, 8000988 <ST7735_SetRotation+0x28>)
 8000984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000988:	08000999 	.word	0x08000999
 800098c:	080009bb 	.word	0x080009bb
 8000990:	080009dd 	.word	0x080009dd
 8000994:	080009ff 	.word	0x080009ff
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8000998:	23c0      	movs	r3, #192	; 0xc0
 800099a:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 800099c:	4b2a      	ldr	r3, [pc, #168]	; (8000a48 <ST7735_SetRotation+0xe8>)
 800099e:	22a0      	movs	r2, #160	; 0xa0
 80009a0:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80009a2:	4b2a      	ldr	r3, [pc, #168]	; (8000a4c <ST7735_SetRotation+0xec>)
 80009a4:	2280      	movs	r2, #128	; 0x80
 80009a6:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 80009a8:	4b29      	ldr	r3, [pc, #164]	; (8000a50 <ST7735_SetRotation+0xf0>)
 80009aa:	781a      	ldrb	r2, [r3, #0]
 80009ac:	4b29      	ldr	r3, [pc, #164]	; (8000a54 <ST7735_SetRotation+0xf4>)
 80009ae:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 80009b0:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <ST7735_SetRotation+0xf8>)
 80009b2:	781a      	ldrb	r2, [r3, #0]
 80009b4:	4b29      	ldr	r3, [pc, #164]	; (8000a5c <ST7735_SetRotation+0xfc>)
 80009b6:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80009b8:	e032      	b.n	8000a20 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80009ba:	23a0      	movs	r3, #160	; 0xa0
 80009bc:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80009be:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <ST7735_SetRotation+0xec>)
 80009c0:	22a0      	movs	r2, #160	; 0xa0
 80009c2:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80009c4:	4b20      	ldr	r3, [pc, #128]	; (8000a48 <ST7735_SetRotation+0xe8>)
 80009c6:	2280      	movs	r2, #128	; 0x80
 80009c8:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80009ca:	4b21      	ldr	r3, [pc, #132]	; (8000a50 <ST7735_SetRotation+0xf0>)
 80009cc:	781a      	ldrb	r2, [r3, #0]
 80009ce:	4b23      	ldr	r3, [pc, #140]	; (8000a5c <ST7735_SetRotation+0xfc>)
 80009d0:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80009d2:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <ST7735_SetRotation+0xf8>)
 80009d4:	781a      	ldrb	r2, [r3, #0]
 80009d6:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <ST7735_SetRotation+0xf4>)
 80009d8:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80009da:	e021      	b.n	8000a20 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 80009dc:	2300      	movs	r3, #0
 80009de:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 80009e0:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <ST7735_SetRotation+0xe8>)
 80009e2:	22a0      	movs	r2, #160	; 0xa0
 80009e4:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80009e6:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <ST7735_SetRotation+0xec>)
 80009e8:	2280      	movs	r2, #128	; 0x80
 80009ea:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 80009ec:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <ST7735_SetRotation+0xf0>)
 80009ee:	781a      	ldrb	r2, [r3, #0]
 80009f0:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <ST7735_SetRotation+0xf4>)
 80009f2:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 80009f4:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <ST7735_SetRotation+0xf8>)
 80009f6:	781a      	ldrb	r2, [r3, #0]
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <ST7735_SetRotation+0xfc>)
 80009fa:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80009fc:	e010      	b.n	8000a20 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80009fe:	2360      	movs	r3, #96	; 0x60
 8000a00:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000a02:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <ST7735_SetRotation+0xec>)
 8000a04:	22a0      	movs	r2, #160	; 0xa0
 8000a06:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <ST7735_SetRotation+0xe8>)
 8000a0a:	2280      	movs	r2, #128	; 0x80
 8000a0c:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <ST7735_SetRotation+0xf0>)
 8000a10:	781a      	ldrb	r2, [r3, #0]
 8000a12:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <ST7735_SetRotation+0xfc>)
 8000a14:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <ST7735_SetRotation+0xf8>)
 8000a18:	781a      	ldrb	r2, [r3, #0]
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <ST7735_SetRotation+0xf4>)
 8000a1c:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000a1e:	bf00      	nop
  }
  ST7735_Select();
 8000a20:	f7ff fe80 	bl	8000724 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8000a24:	2036      	movs	r0, #54	; 0x36
 8000a26:	f7ff fea9 	bl	800077c <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8000a2a:	f107 030f 	add.w	r3, r7, #15
 8000a2e:	2101      	movs	r1, #1
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff febd 	bl	80007b0 <ST7735_WriteData>
  ST7735_Unselect();
 8000a36:	f7ff fe81 	bl	800073c <ST7735_Unselect>
}
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	2400024e 	.word	0x2400024e
 8000a48:	24000254 	.word	0x24000254
 8000a4c:	24000250 	.word	0x24000250
 8000a50:	24000249 	.word	0x24000249
 8000a54:	24000248 	.word	0x24000248
 8000a58:	2400024d 	.word	0x2400024d
 8000a5c:	2400024c 	.word	0x2400024c

08000a60 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000a60:	b082      	sub	sp, #8
 8000a62:	b590      	push	{r4, r7, lr}
 8000a64:	b089      	sub	sp, #36	; 0x24
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	637b      	str	r3, [r7, #52]	; 0x34
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	80fb      	strh	r3, [r7, #6]
 8000a6e:	460b      	mov	r3, r1
 8000a70:	80bb      	strh	r3, [r7, #4]
 8000a72:	4613      	mov	r3, r2
 8000a74:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000a76:	88fb      	ldrh	r3, [r7, #6]
 8000a78:	b2d8      	uxtb	r0, r3
 8000a7a:	88bb      	ldrh	r3, [r7, #4]
 8000a7c:	b2d9      	uxtb	r1, r3
 8000a7e:	88fb      	ldrh	r3, [r7, #6]
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000a86:	4413      	add	r3, r2
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	b2dc      	uxtb	r4, r3
 8000a8e:	88bb      	ldrh	r3, [r7, #4]
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000a96:	4413      	add	r3, r2
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	4622      	mov	r2, r4
 8000aa0:	f7ff feea 	bl	8000878 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
 8000aa8:	e043      	b.n	8000b32 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8000aaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000aac:	78fb      	ldrb	r3, [r7, #3]
 8000aae:	3b20      	subs	r3, #32
 8000ab0:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000ab4:	fb01 f303 	mul.w	r3, r1, r3
 8000ab8:	4619      	mov	r1, r3
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	440b      	add	r3, r1
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	4413      	add	r3, r2
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61bb      	str	r3, [r7, #24]
 8000aca:	e029      	b.n	8000b20 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8000acc:	697a      	ldr	r2, [r7, #20]
 8000ace:	69bb      	ldr	r3, [r7, #24]
 8000ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d00e      	beq.n	8000afa <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000adc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000ade:	0a1b      	lsrs	r3, r3, #8
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	743b      	strb	r3, [r7, #16]
 8000ae6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000aec:	f107 0310 	add.w	r3, r7, #16
 8000af0:	2102      	movs	r1, #2
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff fe5c 	bl	80007b0 <ST7735_WriteData>
 8000af8:	e00f      	b.n	8000b1a <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000afa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000afe:	0a1b      	lsrs	r3, r3, #8
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	733b      	strb	r3, [r7, #12]
 8000b06:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	2102      	movs	r1, #2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fe4b 	bl	80007b0 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	61bb      	str	r3, [r7, #24]
 8000b20:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000b24:	461a      	mov	r2, r3
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d3cf      	bcc.n	8000acc <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	61fb      	str	r3, [r7, #28]
 8000b32:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000b36:	461a      	mov	r2, r3
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d3b5      	bcc.n	8000aaa <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000b3e:	bf00      	nop
 8000b40:	bf00      	nop
 8000b42:	3724      	adds	r7, #36	; 0x24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000b4a:	b002      	add	sp, #8
 8000b4c:	4770      	bx	lr
	...

08000b50 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000b50:	b082      	sub	sp, #8
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b086      	sub	sp, #24
 8000b56:	af04      	add	r7, sp, #16
 8000b58:	603a      	str	r2, [r7, #0]
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	80fb      	strh	r3, [r7, #6]
 8000b60:	460b      	mov	r3, r1
 8000b62:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000b64:	f7ff fdde 	bl	8000724 <ST7735_Select>

    while(*str) {
 8000b68:	e033      	b.n	8000bd2 <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8000b6a:	88fb      	ldrh	r3, [r7, #6]
 8000b6c:	7d3a      	ldrb	r2, [r7, #20]
 8000b6e:	4413      	add	r3, r2
 8000b70:	4a1f      	ldr	r2, [pc, #124]	; (8000bf0 <ST7735_WriteString+0xa0>)
 8000b72:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b76:	4293      	cmp	r3, r2
 8000b78:	db16      	blt.n	8000ba8 <ST7735_WriteString+0x58>
            x = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000b7e:	7d7b      	ldrb	r3, [r7, #21]
 8000b80:	b29a      	uxth	r2, r3
 8000b82:	88bb      	ldrh	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8000b88:	88bb      	ldrh	r3, [r7, #4]
 8000b8a:	7d7a      	ldrb	r2, [r7, #21]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	4a19      	ldr	r2, [pc, #100]	; (8000bf4 <ST7735_WriteString+0xa4>)
 8000b90:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b94:	4293      	cmp	r3, r2
 8000b96:	da21      	bge.n	8000bdc <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b20      	cmp	r3, #32
 8000b9e:	d103      	bne.n	8000ba8 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	603b      	str	r3, [r7, #0]
                continue;
 8000ba6:	e014      	b.n	8000bd2 <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	781a      	ldrb	r2, [r3, #0]
 8000bac:	88b9      	ldrh	r1, [r7, #4]
 8000bae:	88f8      	ldrh	r0, [r7, #6]
 8000bb0:	8c3b      	ldrh	r3, [r7, #32]
 8000bb2:	9302      	str	r3, [sp, #8]
 8000bb4:	8bbb      	ldrh	r3, [r7, #28]
 8000bb6:	9301      	str	r3, [sp, #4]
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	9300      	str	r3, [sp, #0]
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	f7ff ff4f 	bl	8000a60 <ST7735_WriteChar>
        x += font.width;
 8000bc2:	7d3b      	ldrb	r3, [r7, #20]
 8000bc4:	b29a      	uxth	r2, r3
 8000bc6:	88fb      	ldrh	r3, [r7, #6]
 8000bc8:	4413      	add	r3, r2
 8000bca:	80fb      	strh	r3, [r7, #6]
        str++;
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d1c7      	bne.n	8000b6a <ST7735_WriteString+0x1a>
 8000bda:	e000      	b.n	8000bde <ST7735_WriteString+0x8e>
                break;
 8000bdc:	bf00      	nop
    }

    ST7735_Unselect();
 8000bde:	f7ff fdad 	bl	800073c <ST7735_Unselect>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bec:	b002      	add	sp, #8
 8000bee:	4770      	bx	lr
 8000bf0:	24000250 	.word	0x24000250
 8000bf4:	24000254 	.word	0x24000254

08000bf8 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4604      	mov	r4, r0
 8000c00:	4608      	mov	r0, r1
 8000c02:	4611      	mov	r1, r2
 8000c04:	461a      	mov	r2, r3
 8000c06:	4623      	mov	r3, r4
 8000c08:	80fb      	strh	r3, [r7, #6]
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	80bb      	strh	r3, [r7, #4]
 8000c0e:	460b      	mov	r3, r1
 8000c10:	807b      	strh	r3, [r7, #2]
 8000c12:	4613      	mov	r3, r2
 8000c14:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	4a37      	ldr	r2, [pc, #220]	; (8000cf8 <ST7735_FillRectangle+0x100>)
 8000c1a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	da66      	bge.n	8000cf0 <ST7735_FillRectangle+0xf8>
 8000c22:	88bb      	ldrh	r3, [r7, #4]
 8000c24:	4a35      	ldr	r2, [pc, #212]	; (8000cfc <ST7735_FillRectangle+0x104>)
 8000c26:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	da60      	bge.n	8000cf0 <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 8000c2e:	88fa      	ldrh	r2, [r7, #6]
 8000c30:	887b      	ldrh	r3, [r7, #2]
 8000c32:	4413      	add	r3, r2
 8000c34:	4a30      	ldr	r2, [pc, #192]	; (8000cf8 <ST7735_FillRectangle+0x100>)
 8000c36:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	dd06      	ble.n	8000c4c <ST7735_FillRectangle+0x54>
 8000c3e:	4b2e      	ldr	r3, [pc, #184]	; (8000cf8 <ST7735_FillRectangle+0x100>)
 8000c40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	88fb      	ldrh	r3, [r7, #6]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8000c4c:	88ba      	ldrh	r2, [r7, #4]
 8000c4e:	883b      	ldrh	r3, [r7, #0]
 8000c50:	4413      	add	r3, r2
 8000c52:	4a2a      	ldr	r2, [pc, #168]	; (8000cfc <ST7735_FillRectangle+0x104>)
 8000c54:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	dd06      	ble.n	8000c6a <ST7735_FillRectangle+0x72>
 8000c5c:	4b27      	ldr	r3, [pc, #156]	; (8000cfc <ST7735_FillRectangle+0x104>)
 8000c5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	88bb      	ldrh	r3, [r7, #4]
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000c6a:	f7ff fd5b 	bl	8000724 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000c6e:	88fb      	ldrh	r3, [r7, #6]
 8000c70:	b2d8      	uxtb	r0, r3
 8000c72:	88bb      	ldrh	r3, [r7, #4]
 8000c74:	b2d9      	uxtb	r1, r3
 8000c76:	88fb      	ldrh	r3, [r7, #6]
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	887b      	ldrh	r3, [r7, #2]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	4413      	add	r3, r2
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	3b01      	subs	r3, #1
 8000c84:	b2dc      	uxtb	r4, r3
 8000c86:	88bb      	ldrh	r3, [r7, #4]
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	883b      	ldrh	r3, [r7, #0]
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	4413      	add	r3, r2
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	3b01      	subs	r3, #1
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	4622      	mov	r2, r4
 8000c98:	f7ff fdee 	bl	8000878 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000c9c:	8c3b      	ldrh	r3, [r7, #32]
 8000c9e:	0a1b      	lsrs	r3, r3, #8
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	733b      	strb	r3, [r7, #12]
 8000ca6:	8c3b      	ldrh	r3, [r7, #32]
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000cac:	2201      	movs	r2, #1
 8000cae:	2108      	movs	r1, #8
 8000cb0:	4813      	ldr	r0, [pc, #76]	; (8000d00 <ST7735_FillRectangle+0x108>)
 8000cb2:	f004 fad1 	bl	8005258 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000cb6:	883b      	ldrh	r3, [r7, #0]
 8000cb8:	80bb      	strh	r3, [r7, #4]
 8000cba:	e013      	b.n	8000ce4 <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 8000cbc:	887b      	ldrh	r3, [r7, #2]
 8000cbe:	80fb      	strh	r3, [r7, #6]
 8000cc0:	e00a      	b.n	8000cd8 <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000cc2:	f107 010c 	add.w	r1, r7, #12
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cca:	2202      	movs	r2, #2
 8000ccc:	480d      	ldr	r0, [pc, #52]	; (8000d04 <ST7735_FillRectangle+0x10c>)
 8000cce:	f006 feaf 	bl	8007a30 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000cd2:	88fb      	ldrh	r3, [r7, #6]
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	80fb      	strh	r3, [r7, #6]
 8000cd8:	88fb      	ldrh	r3, [r7, #6]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d1f1      	bne.n	8000cc2 <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 8000cde:	88bb      	ldrh	r3, [r7, #4]
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	80bb      	strh	r3, [r7, #4]
 8000ce4:	88bb      	ldrh	r3, [r7, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d1e8      	bne.n	8000cbc <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 8000cea:	f7ff fd27 	bl	800073c <ST7735_Unselect>
 8000cee:	e000      	b.n	8000cf2 <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 8000cf0:	bf00      	nop
}
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd90      	pop	{r4, r7, pc}
 8000cf8:	24000250 	.word	0x24000250
 8000cfc:	24000254 	.word	0x24000254
 8000d00:	58020000 	.word	0x58020000
 8000d04:	240003b4 	.word	0x240003b4

08000d08 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000d0c:	4b2e      	ldr	r3, [pc, #184]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d0e:	4a2f      	ldr	r2, [pc, #188]	; (8000dcc <MX_FDCAN1_Init+0xc4>)
 8000d10:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d12:	4b2d      	ldr	r3, [pc, #180]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000d18:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000d1e:	4b2a      	ldr	r3, [pc, #168]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000d24:	4b28      	ldr	r3, [pc, #160]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8000d2a:	4b27      	ldr	r3, [pc, #156]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8000d30:	4b25      	ldr	r3, [pc, #148]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d32:	2202      	movs	r2, #2
 8000d34:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8000d36:	4b24      	ldr	r3, [pc, #144]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d38:	2208      	movs	r2, #8
 8000d3a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 31;
 8000d3c:	4b22      	ldr	r3, [pc, #136]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d3e:	221f      	movs	r2, #31
 8000d40:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8000d42:	4b21      	ldr	r3, [pc, #132]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d44:	2208      	movs	r2, #8
 8000d46:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000d48:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000d4e:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000d54:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000d5a:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000d60:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000d66:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000d6c:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d7a:	2204      	movs	r2, #4
 8000d7c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000d7e:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000d84:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d86:	2204      	movs	r2, #4
 8000d88:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000d90:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d92:	2204      	movs	r2, #4
 8000d94:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000db0:	2204      	movs	r2, #4
 8000db2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000db4:	4804      	ldr	r0, [pc, #16]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000db6:	f003 fb1d 	bl	80043f4 <HAL_FDCAN_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000dc0:	f000 fc09 	bl	80015d6 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	24000260 	.word	0x24000260
 8000dcc:	4000a000 	.word	0x4000a000

08000dd0 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b0b6      	sub	sp, #216	; 0xd8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000de8:	f107 0310 	add.w	r3, r7, #16
 8000dec:	22b4      	movs	r2, #180	; 0xb4
 8000dee:	2100      	movs	r1, #0
 8000df0:	4618      	mov	r0, r3
 8000df2:	f013 ffc3 	bl	8014d7c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a2d      	ldr	r2, [pc, #180]	; (8000eb0 <HAL_FDCAN_MspInit+0xe0>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d152      	bne.n	8000ea6 <HAL_FDCAN_MspInit+0xd6>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000e00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e04:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000e06:	2301      	movs	r3, #1
 8000e08:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 25;
 8000e0a:	2319      	movs	r3, #25
 8000e0c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 5;
 8000e12:	2305      	movs	r3, #5
 8000e14:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000e16:	2302      	movs	r3, #2
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000e1a:	23c0      	movs	r3, #192	; 0xc0
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8000e26:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000e2a:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e2c:	f107 0310 	add.w	r3, r7, #16
 8000e30:	4618      	mov	r0, r3
 8000e32:	f005 f9db 	bl	80061ec <HAL_RCCEx_PeriphCLKConfig>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <HAL_FDCAN_MspInit+0x70>
    {
      Error_Handler();
 8000e3c:	f000 fbcb 	bl	80015d6 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000e40:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <HAL_FDCAN_MspInit+0xe4>)
 8000e42:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e46:	4a1b      	ldr	r2, [pc, #108]	; (8000eb4 <HAL_FDCAN_MspInit+0xe4>)
 8000e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e4c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000e50:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <HAL_FDCAN_MspInit+0xe4>)
 8000e52:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <HAL_FDCAN_MspInit+0xe4>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e64:	4a13      	ldr	r2, [pc, #76]	; (8000eb4 <HAL_FDCAN_MspInit+0xe4>)
 8000e66:	f043 0308 	orr.w	r3, r3, #8
 8000e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e6e:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <HAL_FDCAN_MspInit+0xe4>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e74:	f003 0308 	and.w	r3, r3, #8
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e94:	2309      	movs	r3, #9
 8000e96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e9a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <HAL_FDCAN_MspInit+0xe8>)
 8000ea2:	f004 f831 	bl	8004f08 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	37d8      	adds	r7, #216	; 0xd8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	4000a000 	.word	0x4000a000
 8000eb4:	58024400 	.word	0x58024400
 8000eb8:	58020c00 	.word	0x58020c00

08000ebc <FDCAN1_MSG_config>:
/**
  * @brief  The application entry point.
  * @retval int
  */
void FDCAN1_MSG_config(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef sFilterConfig;

	//Prepare CAN data
	myTxData[0] = 0xFF;
 8000ec2:	4b28      	ldr	r3, [pc, #160]	; (8000f64 <FDCAN1_MSG_config+0xa8>)
 8000ec4:	22ff      	movs	r2, #255	; 0xff
 8000ec6:	701a      	strb	r2, [r3, #0]
	myTxData[1] = 0x00;
 8000ec8:	4b26      	ldr	r3, [pc, #152]	; (8000f64 <FDCAN1_MSG_config+0xa8>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	705a      	strb	r2, [r3, #1]
	myTxData[2] = 0xFF;
 8000ece:	4b25      	ldr	r3, [pc, #148]	; (8000f64 <FDCAN1_MSG_config+0xa8>)
 8000ed0:	22ff      	movs	r2, #255	; 0xff
 8000ed2:	709a      	strb	r2, [r3, #2]
	myTxData[3] = 0x00;
 8000ed4:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <FDCAN1_MSG_config+0xa8>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	70da      	strb	r2, [r3, #3]

	/* Configure Rx filter */
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000eda:	2300      	movs	r3, #0
 8000edc:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x123;
 8000eea:	f240 1323 	movw	r3, #291	; 0x123
 8000eee:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x7FF;
 8000ef0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ef4:	617b      	str	r3, [r7, #20]
	HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	4619      	mov	r1, r3
 8000efa:	481b      	ldr	r0, [pc, #108]	; (8000f68 <FDCAN1_MSG_config+0xac>)
 8000efc:	f003 fc5c 	bl	80047b8 <HAL_FDCAN_ConfigFilter>


	/* Configure global filter to reject all non-matching frames */
	HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 8000f00:	2301      	movs	r3, #1
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	2301      	movs	r3, #1
 8000f06:	2202      	movs	r2, #2
 8000f08:	2102      	movs	r1, #2
 8000f0a:	4817      	ldr	r0, [pc, #92]	; (8000f68 <FDCAN1_MSG_config+0xac>)
 8000f0c:	f003 fcca 	bl	80048a4 <HAL_FDCAN_ConfigGlobalFilter>

	/* Start the FDCAN module */
	HAL_FDCAN_Start(&hfdcan1);
 8000f10:	4815      	ldr	r0, [pc, #84]	; (8000f68 <FDCAN1_MSG_config+0xac>)
 8000f12:	f003 fcf4 	bl	80048fe <HAL_FDCAN_Start>

	HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2101      	movs	r1, #1
 8000f1a:	4813      	ldr	r0, [pc, #76]	; (8000f68 <FDCAN1_MSG_config+0xac>)
 8000f1c:	f003 fd76 	bl	8004a0c <HAL_FDCAN_ActivateNotification>

	/* Prepare Tx Header */
	TxHeader.Identifier = 0x322;
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <FDCAN1_MSG_config+0xb0>)
 8000f22:	f240 3222 	movw	r2, #802	; 0x322
 8000f26:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8000f28:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <FDCAN1_MSG_config+0xb0>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <FDCAN1_MSG_config+0xb0>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000f34:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <FDCAN1_MSG_config+0xb0>)
 8000f36:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f3a:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <FDCAN1_MSG_config+0xb0>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <FDCAN1_MSG_config+0xb0>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <FDCAN1_MSG_config+0xb0>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000f4e:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <FDCAN1_MSG_config+0xb0>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <FDCAN1_MSG_config+0xb0>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	621a      	str	r2, [r3, #32]
}
 8000f5a:	bf00      	nop
 8000f5c:	3720      	adds	r7, #32
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	24000258 	.word	0x24000258
 8000f68:	24000260 	.word	0x24000260
 8000f6c:	24000364 	.word	0x24000364

08000f70 <Toggle_CAN_Data>:


void Toggle_CAN_Data(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
	if(myTxData[0] == 0x00)
 8000f74:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <Toggle_CAN_Data+0x48>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d10c      	bne.n	8000f96 <Toggle_CAN_Data+0x26>
	{
		myTxData[0] = 0xFF;
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <Toggle_CAN_Data+0x48>)
 8000f7e:	22ff      	movs	r2, #255	; 0xff
 8000f80:	701a      	strb	r2, [r3, #0]
		myTxData[1] = 0x00;
 8000f82:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <Toggle_CAN_Data+0x48>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	705a      	strb	r2, [r3, #1]
		myTxData[2] = 0xFF;
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <Toggle_CAN_Data+0x48>)
 8000f8a:	22ff      	movs	r2, #255	; 0xff
 8000f8c:	709a      	strb	r2, [r3, #2]
		myTxData[3] = 0x00;
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <Toggle_CAN_Data+0x48>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	70da      	strb	r2, [r3, #3]
		myTxData[0] = 0x00;
		myTxData[1] = 0xFF;
		myTxData[2] = 0x00;
		myTxData[3] = 0xFF;
	}
}
 8000f94:	e00b      	b.n	8000fae <Toggle_CAN_Data+0x3e>
		myTxData[0] = 0x00;
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <Toggle_CAN_Data+0x48>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
		myTxData[1] = 0xFF;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <Toggle_CAN_Data+0x48>)
 8000f9e:	22ff      	movs	r2, #255	; 0xff
 8000fa0:	705a      	strb	r2, [r3, #1]
		myTxData[2] = 0x00;
 8000fa2:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <Toggle_CAN_Data+0x48>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	709a      	strb	r2, [r3, #2]
		myTxData[3] = 0xFF;
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <Toggle_CAN_Data+0x48>)
 8000faa:	22ff      	movs	r2, #255	; 0xff
 8000fac:	70da      	strb	r2, [r3, #3]
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	24000258 	.word	0x24000258

08000fbc <MX_GPIO_Init>:
        * EXTI
     PA9   ------> USB_OTG_HS_VBUS
     PA10   ------> USB_OTG_HS_ID
*/
void MX_GPIO_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08c      	sub	sp, #48	; 0x30
 8000fc0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc2:	f107 031c 	add.w	r3, r7, #28
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
 8000fd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	4b8f      	ldr	r3, [pc, #572]	; (8001210 <MX_GPIO_Init+0x254>)
 8000fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd8:	4a8d      	ldr	r2, [pc, #564]	; (8001210 <MX_GPIO_Init+0x254>)
 8000fda:	f043 0304 	orr.w	r3, r3, #4
 8000fde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fe2:	4b8b      	ldr	r3, [pc, #556]	; (8001210 <MX_GPIO_Init+0x254>)
 8000fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe8:	f003 0304 	and.w	r3, r3, #4
 8000fec:	61bb      	str	r3, [r7, #24]
 8000fee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ff0:	4b87      	ldr	r3, [pc, #540]	; (8001210 <MX_GPIO_Init+0x254>)
 8000ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff6:	4a86      	ldr	r2, [pc, #536]	; (8001210 <MX_GPIO_Init+0x254>)
 8000ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ffc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001000:	4b83      	ldr	r3, [pc, #524]	; (8001210 <MX_GPIO_Init+0x254>)
 8001002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800100a:	617b      	str	r3, [r7, #20]
 800100c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	4b80      	ldr	r3, [pc, #512]	; (8001210 <MX_GPIO_Init+0x254>)
 8001010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001014:	4a7e      	ldr	r2, [pc, #504]	; (8001210 <MX_GPIO_Init+0x254>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800101e:	4b7c      	ldr	r3, [pc, #496]	; (8001210 <MX_GPIO_Init+0x254>)
 8001020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102c:	4b78      	ldr	r3, [pc, #480]	; (8001210 <MX_GPIO_Init+0x254>)
 800102e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001032:	4a77      	ldr	r2, [pc, #476]	; (8001210 <MX_GPIO_Init+0x254>)
 8001034:	f043 0302 	orr.w	r3, r3, #2
 8001038:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800103c:	4b74      	ldr	r3, [pc, #464]	; (8001210 <MX_GPIO_Init+0x254>)
 800103e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800104a:	4b71      	ldr	r3, [pc, #452]	; (8001210 <MX_GPIO_Init+0x254>)
 800104c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001050:	4a6f      	ldr	r2, [pc, #444]	; (8001210 <MX_GPIO_Init+0x254>)
 8001052:	f043 0308 	orr.w	r3, r3, #8
 8001056:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800105a:	4b6d      	ldr	r3, [pc, #436]	; (8001210 <MX_GPIO_Init+0x254>)
 800105c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001060:	f003 0308 	and.w	r3, r3, #8
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001068:	4b69      	ldr	r3, [pc, #420]	; (8001210 <MX_GPIO_Init+0x254>)
 800106a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800106e:	4a68      	ldr	r2, [pc, #416]	; (8001210 <MX_GPIO_Init+0x254>)
 8001070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001074:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001078:	4b65      	ldr	r3, [pc, #404]	; (8001210 <MX_GPIO_Init+0x254>)
 800107a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800107e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001086:	4b62      	ldr	r3, [pc, #392]	; (8001210 <MX_GPIO_Init+0x254>)
 8001088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800108c:	4a60      	ldr	r2, [pc, #384]	; (8001210 <MX_GPIO_Init+0x254>)
 800108e:	f043 0310 	orr.w	r3, r3, #16
 8001092:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001096:	4b5e      	ldr	r3, [pc, #376]	; (8001210 <MX_GPIO_Init+0x254>)
 8001098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109c:	f003 0310 	and.w	r3, r3, #16
 80010a0:	603b      	str	r3, [r7, #0]
 80010a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_3, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2109      	movs	r1, #9
 80010a8:	485a      	ldr	r0, [pc, #360]	; (8001214 <MX_GPIO_Init+0x258>)
 80010aa:	f004 f8d5 	bl	8005258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2108      	movs	r1, #8
 80010b2:	4859      	ldr	r0, [pc, #356]	; (8001218 <MX_GPIO_Init+0x25c>)
 80010b4:	f004 f8d0 	bl	8005258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	f244 0101 	movw	r1, #16385	; 0x4001
 80010be:	4857      	ldr	r0, [pc, #348]	; (800121c <MX_GPIO_Init+0x260>)
 80010c0:	f004 f8ca 	bl	8005258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ca:	4855      	ldr	r0, [pc, #340]	; (8001220 <MX_GPIO_Init+0x264>)
 80010cc:	f004 f8c4 	bl	8005258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2102      	movs	r1, #2
 80010d4:	4853      	ldr	r0, [pc, #332]	; (8001224 <MX_GPIO_Init+0x268>)
 80010d6:	f004 f8bf 	bl	8005258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e0:	2300      	movs	r3, #0
 80010e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010e8:	f107 031c 	add.w	r3, r7, #28
 80010ec:	4619      	mov	r1, r3
 80010ee:	4849      	ldr	r0, [pc, #292]	; (8001214 <MX_GPIO_Init+0x258>)
 80010f0:	f003 ff0a 	bl	8004f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80010f4:	2309      	movs	r3, #9
 80010f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f8:	2301      	movs	r3, #1
 80010fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	4619      	mov	r1, r3
 800110a:	4842      	ldr	r0, [pc, #264]	; (8001214 <MX_GPIO_Init+0x258>)
 800110c:	f003 fefc 	bl	8004f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001110:	2308      	movs	r3, #8
 8001112:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001114:	2301      	movs	r3, #1
 8001116:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001120:	f107 031c 	add.w	r3, r7, #28
 8001124:	4619      	mov	r1, r3
 8001126:	483c      	ldr	r0, [pc, #240]	; (8001218 <MX_GPIO_Init+0x25c>)
 8001128:	f003 feee 	bl	8004f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 800112c:	f244 0301 	movw	r3, #16385	; 0x4001
 8001130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001132:	2301      	movs	r3, #1
 8001134:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2300      	movs	r3, #0
 800113c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113e:	f107 031c 	add.w	r3, r7, #28
 8001142:	4619      	mov	r1, r3
 8001144:	4835      	ldr	r0, [pc, #212]	; (800121c <MX_GPIO_Init+0x260>)
 8001146:	f003 fedf 	bl	8004f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800114a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800114e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001150:	2301      	movs	r3, #1
 8001152:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001158:	2300      	movs	r3, #0
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800115c:	f107 031c 	add.w	r3, r7, #28
 8001160:	4619      	mov	r1, r3
 8001162:	482f      	ldr	r0, [pc, #188]	; (8001220 <MX_GPIO_Init+0x264>)
 8001164:	f003 fed0 	bl	8004f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800116c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001170:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	4619      	mov	r1, r3
 800117c:	482a      	ldr	r0, [pc, #168]	; (8001228 <MX_GPIO_Init+0x26c>)
 800117e:	f003 fec3 	bl	8004f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001182:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001186:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001188:	2300      	movs	r3, #0
 800118a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	4619      	mov	r1, r3
 8001196:	4820      	ldr	r0, [pc, #128]	; (8001218 <MX_GPIO_Init+0x25c>)
 8001198:	f003 feb6 	bl	8004f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800119c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80011ae:	230a      	movs	r3, #10
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80011b2:	f107 031c 	add.w	r3, r7, #28
 80011b6:	4619      	mov	r1, r3
 80011b8:	4817      	ldr	r0, [pc, #92]	; (8001218 <MX_GPIO_Init+0x25c>)
 80011ba:	f003 fea5 	bl	8004f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 80011be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011c4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 80011ce:	f107 031c 	add.w	r3, r7, #28
 80011d2:	4619      	mov	r1, r3
 80011d4:	480f      	ldr	r0, [pc, #60]	; (8001214 <MX_GPIO_Init+0x258>)
 80011d6:	f003 fe97 	bl	8004f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 80011da:	2302      	movs	r3, #2
 80011dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011de:	2301      	movs	r3, #1
 80011e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 80011ea:	f107 031c 	add.w	r3, r7, #28
 80011ee:	4619      	mov	r1, r3
 80011f0:	480c      	ldr	r0, [pc, #48]	; (8001224 <MX_GPIO_Init+0x268>)
 80011f2:	f003 fe89 	bl	8004f08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2100      	movs	r1, #0
 80011fa:	2028      	movs	r0, #40	; 0x28
 80011fc:	f001 fb19 	bl	8002832 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001200:	2028      	movs	r0, #40	; 0x28
 8001202:	f001 fb30 	bl	8002866 <HAL_NVIC_EnableIRQ>

}
 8001206:	bf00      	nop
 8001208:	3730      	adds	r7, #48	; 0x30
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	58024400 	.word	0x58024400
 8001214:	58020800 	.word	0x58020800
 8001218:	58020000 	.word	0x58020000
 800121c:	58020400 	.word	0x58020400
 8001220:	58020c00 	.word	0x58020c00
 8001224:	58021000 	.word	0x58021000
 8001228:	58021800 	.word	0x58021800

0800122c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  SM_STATES state = INIT;
 8001232:	2300      	movs	r3, #0
 8001234:	73fb      	strb	r3, [r7, #15]

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001236:	f000 f9a1 	bl	800157c <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800123a:	4b76      	ldr	r3, [pc, #472]	; (8001414 <main+0x1e8>)
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d11b      	bne.n	800127e <main+0x52>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001246:	f3bf 8f4f 	dsb	sy
}
 800124a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800124c:	f3bf 8f6f 	isb	sy
}
 8001250:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001252:	4b70      	ldr	r3, [pc, #448]	; (8001414 <main+0x1e8>)
 8001254:	2200      	movs	r2, #0
 8001256:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800125a:	f3bf 8f4f 	dsb	sy
}
 800125e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001260:	f3bf 8f6f 	isb	sy
}
 8001264:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001266:	4b6b      	ldr	r3, [pc, #428]	; (8001414 <main+0x1e8>)
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	4a6a      	ldr	r2, [pc, #424]	; (8001414 <main+0x1e8>)
 800126c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001270:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001272:	f3bf 8f4f 	dsb	sy
}
 8001276:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001278:	f3bf 8f6f 	isb	sy
}
 800127c:	e000      	b.n	8001280 <main+0x54>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800127e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001280:	4b64      	ldr	r3, [pc, #400]	; (8001414 <main+0x1e8>)
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d138      	bne.n	80012fe <main+0xd2>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800128c:	4b61      	ldr	r3, [pc, #388]	; (8001414 <main+0x1e8>)
 800128e:	2200      	movs	r2, #0
 8001290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001294:	f3bf 8f4f 	dsb	sy
}
 8001298:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800129a:	4b5e      	ldr	r3, [pc, #376]	; (8001414 <main+0x1e8>)
 800129c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012a0:	60bb      	str	r3, [r7, #8]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	0b5b      	lsrs	r3, r3, #13
 80012a6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80012aa:	607b      	str	r3, [r7, #4]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	08db      	lsrs	r3, r3, #3
 80012b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012b4:	603b      	str	r3, [r7, #0]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	015a      	lsls	r2, r3, #5
 80012ba:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80012be:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80012c4:	4953      	ldr	r1, [pc, #332]	; (8001414 <main+0x1e8>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	1e5a      	subs	r2, r3, #1
 80012d0:	603a      	str	r2, [r7, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1ef      	bne.n	80012b6 <main+0x8a>
    } while(sets-- != 0U);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	1e5a      	subs	r2, r3, #1
 80012da:	607a      	str	r2, [r7, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1e5      	bne.n	80012ac <main+0x80>
  __ASM volatile ("dsb 0xF":::"memory");
 80012e0:	f3bf 8f4f 	dsb	sy
}
 80012e4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80012e6:	4b4b      	ldr	r3, [pc, #300]	; (8001414 <main+0x1e8>)
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	4a4a      	ldr	r2, [pc, #296]	; (8001414 <main+0x1e8>)
 80012ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012f2:	f3bf 8f4f 	dsb	sy
}
 80012f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012f8:	f3bf 8f6f 	isb	sy
}
 80012fc:	e000      	b.n	8001300 <main+0xd4>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80012fe:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001300:	f001 f8f2 	bl	80024e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001304:	f000 f8a0 	bl	8001448 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001308:	f7ff fe58 	bl	8000fbc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800130c:	f000 fea8 	bl	8002060 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8001310:	f000 ff58 	bl	80021c4 <MX_USB_OTG_HS_USB_Init>
  MX_LWIP_Init();
 8001314:	f008 fa7a 	bl	800980c <MX_LWIP_Init>
  MX_FDCAN1_Init();
 8001318:	f7ff fcf6 	bl	8000d08 <MX_FDCAN1_Init>
  MX_TIM6_Init();
 800131c:	f000 fe46 	bl	8001fac <MX_TIM6_Init>
  MX_SPI1_Init();
 8001320:	f000 f95e 	bl	80015e0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  FDCAN1_MSG_config();
 8001324:	f7ff fdca 	bl	8000ebc <FDCAN1_MSG_config>
  ST7735_Init(0);
 8001328:	2000      	movs	r0, #0
 800132a:	f7ff faed 	bl	8000908 <ST7735_Init>
  fillScreen(BLACK);
 800132e:	2000      	movs	r0, #0
 8001330:	f7ff f9de 	bl	80006f0 <fillScreen>
  tcp_server_init();
 8001334:	f000 fbc6 	bl	8001ac4 <tcp_server_init>
  //testAll();

  //Start Timer
  HAL_TIM_Base_Start(&htim6);
 8001338:	4837      	ldr	r0, [pc, #220]	; (8001418 <main+0x1ec>)
 800133a:	f006 feab 	bl	8008094 <HAL_TIM_Base_Start>

  //Get current time
  timer_val = __HAL_TIM_GET_COUNTER(&htim6);
 800133e:	4b36      	ldr	r3, [pc, #216]	; (8001418 <main+0x1ec>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001344:	b29a      	uxth	r2, r3
 8001346:	4b35      	ldr	r3, [pc, #212]	; (800141c <main+0x1f0>)
 8001348:	801a      	strh	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch(state)
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	2b02      	cmp	r3, #2
 800134e:	d05c      	beq.n	800140a <main+0x1de>
 8001350:	2b02      	cmp	r3, #2
 8001352:	dc5c      	bgt.n	800140e <main+0x1e2>
 8001354:	2b00      	cmp	r3, #0
 8001356:	d002      	beq.n	800135e <main+0x132>
 8001358:	2b01      	cmp	r3, #1
 800135a:	d033      	beq.n	80013c4 <main+0x198>
					 state = IDLE;
					 break;

		  case STATE_2: break;

		  default: break;
 800135c:	e057      	b.n	800140e <main+0x1e2>
		  case INIT: print_to_serial("Ethernet + CAN!\r\n");
 800135e:	4830      	ldr	r0, [pc, #192]	; (8001420 <main+0x1f4>)
 8001360:	f000 f8ee 	bl	8001540 <print_to_serial>
		  	  	  	 ST7735_SetRotation(2);
 8001364:	2002      	movs	r0, #2
 8001366:	f7ff fafb 	bl	8000960 <ST7735_SetRotation>
		  			 ST7735_WriteString(0, 0, "Hello Ethernet!", Font_11x18, RED,BLACK);
 800136a:	4b2e      	ldr	r3, [pc, #184]	; (8001424 <main+0x1f8>)
 800136c:	2200      	movs	r2, #0
 800136e:	9202      	str	r2, [sp, #8]
 8001370:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001374:	9201      	str	r2, [sp, #4]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	9200      	str	r2, [sp, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a2a      	ldr	r2, [pc, #168]	; (8001428 <main+0x1fc>)
 800137e:	2100      	movs	r1, #0
 8001380:	2000      	movs	r0, #0
 8001382:	f7ff fbe5 	bl	8000b50 <ST7735_WriteString>
		  			 ST7735_WriteString(0, 20, "Hello CAN!", Font_11x18, RED,BLACK);
 8001386:	4b27      	ldr	r3, [pc, #156]	; (8001424 <main+0x1f8>)
 8001388:	2200      	movs	r2, #0
 800138a:	9202      	str	r2, [sp, #8]
 800138c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001390:	9201      	str	r2, [sp, #4]
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	9200      	str	r2, [sp, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a24      	ldr	r2, [pc, #144]	; (800142c <main+0x200>)
 800139a:	2114      	movs	r1, #20
 800139c:	2000      	movs	r0, #0
 800139e:	f7ff fbd7 	bl	8000b50 <ST7735_WriteString>
		  			 ST7735_WriteString(0, 40, "Hello SPI!", Font_11x18, RED,BLACK);
 80013a2:	4b20      	ldr	r3, [pc, #128]	; (8001424 <main+0x1f8>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	9202      	str	r2, [sp, #8]
 80013a8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80013ac:	9201      	str	r2, [sp, #4]
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	9200      	str	r2, [sp, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a1e      	ldr	r2, [pc, #120]	; (8001430 <main+0x204>)
 80013b6:	2128      	movs	r1, #40	; 0x28
 80013b8:	2000      	movs	r0, #0
 80013ba:	f7ff fbc9 	bl	8000b50 <ST7735_WriteString>
					 state = IDLE;
 80013be:	2301      	movs	r3, #1
 80013c0:	73fb      	strb	r3, [r7, #15]
					 break;
 80013c2:	e025      	b.n	8001410 <main+0x1e4>
			  	  	 ethernetif_input(&gnetif);
 80013c4:	481b      	ldr	r0, [pc, #108]	; (8001434 <main+0x208>)
 80013c6:	f008 fde1 	bl	8009f8c <ethernetif_input>
					 sys_check_timeouts();
 80013ca:	f010 ff23 	bl	8012214 <sys_check_timeouts>
					 if(__HAL_TIM_GET_COUNTER(&htim6) - timer_val >= 10000)
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <main+0x1ec>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d4:	4a11      	ldr	r2, [pc, #68]	; (800141c <main+0x1f0>)
 80013d6:	8812      	ldrh	r2, [r2, #0]
 80013d8:	1a9b      	subs	r3, r3, r2
 80013da:	f242 720f 	movw	r2, #9999	; 0x270f
 80013de:	4293      	cmp	r3, r2
 80013e0:	d910      	bls.n	8001404 <main+0x1d8>
					   	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 80013e2:	2102      	movs	r1, #2
 80013e4:	4814      	ldr	r0, [pc, #80]	; (8001438 <main+0x20c>)
 80013e6:	f003 ff50 	bl	800528a <HAL_GPIO_TogglePin>
					   	  timer_val = __HAL_TIM_GET_COUNTER(&htim6);
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <main+0x1ec>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	4b0a      	ldr	r3, [pc, #40]	; (800141c <main+0x1f0>)
 80013f4:	801a      	strh	r2, [r3, #0]
					   	  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, myTxData);
 80013f6:	4a11      	ldr	r2, [pc, #68]	; (800143c <main+0x210>)
 80013f8:	4911      	ldr	r1, [pc, #68]	; (8001440 <main+0x214>)
 80013fa:	4812      	ldr	r0, [pc, #72]	; (8001444 <main+0x218>)
 80013fc:	f003 faaa 	bl	8004954 <HAL_FDCAN_AddMessageToTxFifoQ>
					   	  Toggle_CAN_Data();
 8001400:	f7ff fdb6 	bl	8000f70 <Toggle_CAN_Data>
					 state = IDLE;
 8001404:	2301      	movs	r3, #1
 8001406:	73fb      	strb	r3, [r7, #15]
					 break;
 8001408:	e002      	b.n	8001410 <main+0x1e4>
		  case STATE_2: break;
 800140a:	bf00      	nop
 800140c:	e79d      	b.n	800134a <main+0x11e>
		  default: break;
 800140e:	bf00      	nop
	  switch(state)
 8001410:	e79b      	b.n	800134a <main+0x11e>
 8001412:	bf00      	nop
 8001414:	e000ed00 	.word	0xe000ed00
 8001418:	2400043c 	.word	0x2400043c
 800141c:	240003b0 	.word	0x240003b0
 8001420:	08015e10 	.word	0x08015e10
 8001424:	24000000 	.word	0x24000000
 8001428:	08015e24 	.word	0x08015e24
 800142c:	08015e34 	.word	0x08015e34
 8001430:	08015e40 	.word	0x08015e40
 8001434:	24000520 	.word	0x24000520
 8001438:	58021000 	.word	0x58021000
 800143c:	24000258 	.word	0x24000258
 8001440:	24000364 	.word	0x24000364
 8001444:	24000260 	.word	0x24000260

08001448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b09c      	sub	sp, #112	; 0x70
 800144c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800144e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001452:	224c      	movs	r2, #76	; 0x4c
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f013 fc90 	bl	8014d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	2220      	movs	r2, #32
 8001460:	2100      	movs	r1, #0
 8001462:	4618      	mov	r0, r3
 8001464:	f013 fc8a 	bl	8014d7c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001468:	2002      	movs	r0, #2
 800146a:	f003 ff4d 	bl	8005308 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800146e:	2300      	movs	r3, #0
 8001470:	603b      	str	r3, [r7, #0]
 8001472:	4b31      	ldr	r3, [pc, #196]	; (8001538 <SystemClock_Config+0xf0>)
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800147a:	4a2f      	ldr	r2, [pc, #188]	; (8001538 <SystemClock_Config+0xf0>)
 800147c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001480:	6193      	str	r3, [r2, #24]
 8001482:	4b2d      	ldr	r3, [pc, #180]	; (8001538 <SystemClock_Config+0xf0>)
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800148e:	bf00      	nop
 8001490:	4b29      	ldr	r3, [pc, #164]	; (8001538 <SystemClock_Config+0xf0>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800149c:	d1f8      	bne.n	8001490 <SystemClock_Config+0x48>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800149e:	4b27      	ldr	r3, [pc, #156]	; (800153c <SystemClock_Config+0xf4>)
 80014a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a2:	f023 0303 	bic.w	r3, r3, #3
 80014a6:	4a25      	ldr	r2, [pc, #148]	; (800153c <SystemClock_Config+0xf4>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80014ae:	2321      	movs	r3, #33	; 0x21
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80014b2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80014b8:	2301      	movs	r3, #1
 80014ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014bc:	2302      	movs	r3, #2
 80014be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014c0:	2302      	movs	r3, #2
 80014c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014c4:	2301      	movs	r3, #1
 80014c6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80014c8:	2318      	movs	r3, #24
 80014ca:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80014cc:	2301      	movs	r3, #1
 80014ce:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014d0:	2302      	movs	r3, #2
 80014d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014d4:	2302      	movs	r3, #2
 80014d6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80014d8:	230c      	movs	r3, #12
 80014da:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80014dc:	2300      	movs	r3, #0
 80014de:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e8:	4618      	mov	r0, r3
 80014ea:	f003 ff47 	bl	800537c <HAL_RCC_OscConfig>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80014f4:	f000 f86f 	bl	80015d6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f8:	233f      	movs	r3, #63	; 0x3f
 80014fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014fc:	2303      	movs	r3, #3
 80014fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001504:	2308      	movs	r3, #8
 8001506:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001508:	2340      	movs	r3, #64	; 0x40
 800150a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800150c:	2340      	movs	r3, #64	; 0x40
 800150e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001514:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001516:	2340      	movs	r3, #64	; 0x40
 8001518:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	2101      	movs	r1, #1
 800151e:	4618      	mov	r0, r3
 8001520:	f004 fad8 	bl	8005ad4 <HAL_RCC_ClockConfig>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800152a:	f000 f854 	bl	80015d6 <Error_Handler>
  }
}
 800152e:	bf00      	nop
 8001530:	3770      	adds	r7, #112	; 0x70
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	58024800 	.word	0x58024800
 800153c:	58024400 	.word	0x58024400

08001540 <print_to_serial>:

/* USER CODE BEGIN 4 */
static void print_to_serial(char *myString)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b09c      	sub	sp, #112	; 0x70
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	uint8_t buffer[100];

	strcpy((char*)buffer, myString);
 8001548:	f107 030c 	add.w	r3, r7, #12
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	4618      	mov	r0, r3
 8001550:	f013 fc74 	bl	8014e3c <strcpy>
	HAL_UART_Transmit(&huart3, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	4618      	mov	r0, r3
 800155a:	f7fe fed9 	bl	8000310 <strlen>
 800155e:	4603      	mov	r3, r0
 8001560:	b29a      	uxth	r2, r3
 8001562:	f107 010c 	add.w	r1, r7, #12
 8001566:	f04f 33ff 	mov.w	r3, #4294967295
 800156a:	4803      	ldr	r0, [pc, #12]	; (8001578 <print_to_serial+0x38>)
 800156c:	f006 ffa2 	bl	80084b4 <HAL_UART_Transmit>

}
 8001570:	bf00      	nop
 8001572:	3770      	adds	r7, #112	; 0x70
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	24000488 	.word	0x24000488

0800157c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001582:	463b      	mov	r3, r7
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800158e:	f001 f985 	bl	800289c <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001592:	2301      	movs	r3, #1
 8001594:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001596:	2300      	movs	r3, #0
 8001598:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 800159a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800159e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80015a0:	230e      	movs	r3, #14
 80015a2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80015a8:	2301      	movs	r3, #1
 80015aa:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80015ac:	2303      	movs	r3, #3
 80015ae:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80015b0:	2301      	movs	r3, #1
 80015b2:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80015b4:	2301      	movs	r3, #1
 80015b6:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80015c0:	463b      	mov	r3, r7
 80015c2:	4618      	mov	r0, r3
 80015c4:	f001 f9a2 	bl	800290c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80015c8:	2004      	movs	r0, #4
 80015ca:	f001 f97f 	bl	80028cc <HAL_MPU_Enable>

}
 80015ce:	bf00      	nop
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80015da:	b672      	cpsid	i
}
 80015dc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015de:	e7fe      	b.n	80015de <Error_Handler+0x8>

080015e0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80015e4:	4b27      	ldr	r3, [pc, #156]	; (8001684 <MX_SPI1_Init+0xa4>)
 80015e6:	4a28      	ldr	r2, [pc, #160]	; (8001688 <MX_SPI1_Init+0xa8>)
 80015e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015ea:	4b26      	ldr	r3, [pc, #152]	; (8001684 <MX_SPI1_Init+0xa4>)
 80015ec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80015f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80015f2:	4b24      	ldr	r3, [pc, #144]	; (8001684 <MX_SPI1_Init+0xa4>)
 80015f4:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80015f8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015fa:	4b22      	ldr	r3, [pc, #136]	; (8001684 <MX_SPI1_Init+0xa4>)
 80015fc:	2207      	movs	r2, #7
 80015fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001600:	4b20      	ldr	r3, [pc, #128]	; (8001684 <MX_SPI1_Init+0xa4>)
 8001602:	2200      	movs	r2, #0
 8001604:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001606:	4b1f      	ldr	r3, [pc, #124]	; (8001684 <MX_SPI1_Init+0xa4>)
 8001608:	2200      	movs	r2, #0
 800160a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800160c:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <MX_SPI1_Init+0xa4>)
 800160e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001612:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001614:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <MX_SPI1_Init+0xa4>)
 8001616:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800161a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800161c:	4b19      	ldr	r3, [pc, #100]	; (8001684 <MX_SPI1_Init+0xa4>)
 800161e:	2200      	movs	r2, #0
 8001620:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001622:	4b18      	ldr	r3, [pc, #96]	; (8001684 <MX_SPI1_Init+0xa4>)
 8001624:	2200      	movs	r2, #0
 8001626:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001628:	4b16      	ldr	r3, [pc, #88]	; (8001684 <MX_SPI1_Init+0xa4>)
 800162a:	2200      	movs	r2, #0
 800162c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800162e:	4b15      	ldr	r3, [pc, #84]	; (8001684 <MX_SPI1_Init+0xa4>)
 8001630:	2200      	movs	r2, #0
 8001632:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001634:	4b13      	ldr	r3, [pc, #76]	; (8001684 <MX_SPI1_Init+0xa4>)
 8001636:	2200      	movs	r2, #0
 8001638:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800163a:	4b12      	ldr	r3, [pc, #72]	; (8001684 <MX_SPI1_Init+0xa4>)
 800163c:	2200      	movs	r2, #0
 800163e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001640:	4b10      	ldr	r3, [pc, #64]	; (8001684 <MX_SPI1_Init+0xa4>)
 8001642:	2200      	movs	r2, #0
 8001644:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001646:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <MX_SPI1_Init+0xa4>)
 8001648:	2200      	movs	r2, #0
 800164a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800164c:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <MX_SPI1_Init+0xa4>)
 800164e:	2200      	movs	r2, #0
 8001650:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001652:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <MX_SPI1_Init+0xa4>)
 8001654:	2200      	movs	r2, #0
 8001656:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001658:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <MX_SPI1_Init+0xa4>)
 800165a:	2200      	movs	r2, #0
 800165c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800165e:	4b09      	ldr	r3, [pc, #36]	; (8001684 <MX_SPI1_Init+0xa4>)
 8001660:	2200      	movs	r2, #0
 8001662:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001664:	4b07      	ldr	r3, [pc, #28]	; (8001684 <MX_SPI1_Init+0xa4>)
 8001666:	2200      	movs	r2, #0
 8001668:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <MX_SPI1_Init+0xa4>)
 800166c:	2200      	movs	r2, #0
 800166e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001670:	4804      	ldr	r0, [pc, #16]	; (8001684 <MX_SPI1_Init+0xa4>)
 8001672:	f006 f8d7 	bl	8007824 <HAL_SPI_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800167c:	f7ff ffab 	bl	80015d6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}
 8001684:	240003b4 	.word	0x240003b4
 8001688:	40013000 	.word	0x40013000

0800168c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b0b8      	sub	sp, #224	; 0xe0
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016a4:	f107 0318 	add.w	r3, r7, #24
 80016a8:	22b4      	movs	r2, #180	; 0xb4
 80016aa:	2100      	movs	r1, #0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f013 fb65 	bl	8014d7c <memset>
  if(spiHandle->Instance==SPI1)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a36      	ldr	r2, [pc, #216]	; (8001790 <HAL_SPI_MspInit+0x104>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d165      	bne.n	8001788 <HAL_SPI_MspInit+0xfc>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80016bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016c6:	f107 0318 	add.w	r3, r7, #24
 80016ca:	4618      	mov	r0, r3
 80016cc:	f004 fd8e 	bl	80061ec <HAL_RCCEx_PeriphCLKConfig>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80016d6:	f7ff ff7e 	bl	80015d6 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016da:	4b2e      	ldr	r3, [pc, #184]	; (8001794 <HAL_SPI_MspInit+0x108>)
 80016dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016e0:	4a2c      	ldr	r2, [pc, #176]	; (8001794 <HAL_SPI_MspInit+0x108>)
 80016e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80016ea:	4b2a      	ldr	r3, [pc, #168]	; (8001794 <HAL_SPI_MspInit+0x108>)
 80016ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f8:	4b26      	ldr	r3, [pc, #152]	; (8001794 <HAL_SPI_MspInit+0x108>)
 80016fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016fe:	4a25      	ldr	r2, [pc, #148]	; (8001794 <HAL_SPI_MspInit+0x108>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001708:	4b22      	ldr	r3, [pc, #136]	; (8001794 <HAL_SPI_MspInit+0x108>)
 800170a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001716:	4b1f      	ldr	r3, [pc, #124]	; (8001794 <HAL_SPI_MspInit+0x108>)
 8001718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800171c:	4a1d      	ldr	r2, [pc, #116]	; (8001794 <HAL_SPI_MspInit+0x108>)
 800171e:	f043 0308 	orr.w	r3, r3, #8
 8001722:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001726:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <HAL_SPI_MspInit+0x108>)
 8001728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800172c:	f003 0308 	and.w	r3, r3, #8
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001734:	2320      	movs	r3, #32
 8001736:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173a:	2302      	movs	r3, #2
 800173c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001746:	2300      	movs	r3, #0
 8001748:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800174c:	2305      	movs	r3, #5
 800174e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001752:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001756:	4619      	mov	r1, r3
 8001758:	480f      	ldr	r0, [pc, #60]	; (8001798 <HAL_SPI_MspInit+0x10c>)
 800175a:	f003 fbd5 	bl	8004f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800175e:	2380      	movs	r3, #128	; 0x80
 8001760:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2300      	movs	r3, #0
 8001772:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001776:	2305      	movs	r3, #5
 8001778:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800177c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001780:	4619      	mov	r1, r3
 8001782:	4806      	ldr	r0, [pc, #24]	; (800179c <HAL_SPI_MspInit+0x110>)
 8001784:	f003 fbc0 	bl	8004f08 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001788:	bf00      	nop
 800178a:	37e0      	adds	r7, #224	; 0xe0
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40013000 	.word	0x40013000
 8001794:	58024400 	.word	0x58024400
 8001798:	58020000 	.word	0x58020000
 800179c:	58020c00 	.word	0x58020c00

080017a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <HAL_MspInit+0x30>)
 80017a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017ac:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <HAL_MspInit+0x30>)
 80017ae:	f043 0302 	orr.w	r3, r3, #2
 80017b2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_MspInit+0x30>)
 80017b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	58024400 	.word	0x58024400

080017d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <NMI_Handler+0x4>

080017da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017de:	e7fe      	b.n	80017de <HardFault_Handler+0x4>

080017e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <MemManage_Handler+0x4>

080017e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ea:	e7fe      	b.n	80017ea <BusFault_Handler+0x4>

080017ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <UsageFault_Handler+0x4>

080017f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001820:	f000 fed4 	bl	80025cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}

08001828 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FS_PWR_EN_Pin);
 800182c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001830:	f003 fd45 	bl	80052be <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}

08001838 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
	return 1;
 800183c:	2301      	movs	r3, #1
}
 800183e:	4618      	mov	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <_kill>:

int _kill(int pid, int sig)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001852:	4b05      	ldr	r3, [pc, #20]	; (8001868 <_kill+0x20>)
 8001854:	2216      	movs	r2, #22
 8001856:	601a      	str	r2, [r3, #0]
	return -1;
 8001858:	f04f 33ff 	mov.w	r3, #4294967295
}
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	24003620 	.word	0x24003620

0800186c <_exit>:

void _exit (int status)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001874:	f04f 31ff 	mov.w	r1, #4294967295
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff ffe5 	bl	8001848 <_kill>
	while (1) {}		/* Make sure we hang here */
 800187e:	e7fe      	b.n	800187e <_exit+0x12>

08001880 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	e00a      	b.n	80018a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001892:	f3af 8000 	nop.w
 8001896:	4601      	mov	r1, r0
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	1c5a      	adds	r2, r3, #1
 800189c:	60ba      	str	r2, [r7, #8]
 800189e:	b2ca      	uxtb	r2, r1
 80018a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	3301      	adds	r3, #1
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	dbf0      	blt.n	8001892 <_read+0x12>
	}

return len;
 80018b0:	687b      	ldr	r3, [r7, #4]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b086      	sub	sp, #24
 80018be:	af00      	add	r7, sp, #0
 80018c0:	60f8      	str	r0, [r7, #12]
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	e009      	b.n	80018e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	1c5a      	adds	r2, r3, #1
 80018d0:	60ba      	str	r2, [r7, #8]
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	3301      	adds	r3, #1
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	dbf1      	blt.n	80018cc <_write+0x12>
	}
	return len;
 80018e8:	687b      	ldr	r3, [r7, #4]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <_close>:

int _close(int file)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
	return -1;
 80018fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018fe:	4618      	mov	r0, r3
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
 8001912:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800191a:	605a      	str	r2, [r3, #4]
	return 0;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <_isatty>:

int _isatty(int file)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
	return 1;
 8001932:	2301      	movs	r3, #1
}
 8001934:	4618      	mov	r0, r3
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
	return 0;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
	...

0800195c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800195c:	b480      	push	{r7}
 800195e:	b087      	sub	sp, #28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001964:	4a14      	ldr	r2, [pc, #80]	; (80019b8 <_sbrk+0x5c>)
 8001966:	4b15      	ldr	r3, [pc, #84]	; (80019bc <_sbrk+0x60>)
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001970:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <_sbrk+0x64>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d102      	bne.n	800197e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001978:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <_sbrk+0x64>)
 800197a:	4a12      	ldr	r2, [pc, #72]	; (80019c4 <_sbrk+0x68>)
 800197c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <_sbrk+0x64>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4413      	add	r3, r2
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	429a      	cmp	r2, r3
 800198a:	d205      	bcs.n	8001998 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800198c:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <_sbrk+0x6c>)
 800198e:	220c      	movs	r2, #12
 8001990:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001992:	f04f 33ff 	mov.w	r3, #4294967295
 8001996:	e009      	b.n	80019ac <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001998:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <_sbrk+0x64>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800199e:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <_sbrk+0x64>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	4a06      	ldr	r2, [pc, #24]	; (80019c0 <_sbrk+0x64>)
 80019a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019aa:	68fb      	ldr	r3, [r7, #12]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	371c      	adds	r7, #28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	24050000 	.word	0x24050000
 80019bc:	00000400 	.word	0x00000400
 80019c0:	240000b8 	.word	0x240000b8
 80019c4:	24003630 	.word	0x24003630
 80019c8:	24003620 	.word	0x24003620

080019cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019d0:	4b34      	ldr	r3, [pc, #208]	; (8001aa4 <SystemInit+0xd8>)
 80019d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019d6:	4a33      	ldr	r2, [pc, #204]	; (8001aa4 <SystemInit+0xd8>)
 80019d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019e0:	4b31      	ldr	r3, [pc, #196]	; (8001aa8 <SystemInit+0xdc>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 030f 	and.w	r3, r3, #15
 80019e8:	2b06      	cmp	r3, #6
 80019ea:	d807      	bhi.n	80019fc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019ec:	4b2e      	ldr	r3, [pc, #184]	; (8001aa8 <SystemInit+0xdc>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f023 030f 	bic.w	r3, r3, #15
 80019f4:	4a2c      	ldr	r2, [pc, #176]	; (8001aa8 <SystemInit+0xdc>)
 80019f6:	f043 0307 	orr.w	r3, r3, #7
 80019fa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80019fc:	4b2b      	ldr	r3, [pc, #172]	; (8001aac <SystemInit+0xe0>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a2a      	ldr	r2, [pc, #168]	; (8001aac <SystemInit+0xe0>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a08:	4b28      	ldr	r3, [pc, #160]	; (8001aac <SystemInit+0xe0>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a0e:	4b27      	ldr	r3, [pc, #156]	; (8001aac <SystemInit+0xe0>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	4926      	ldr	r1, [pc, #152]	; (8001aac <SystemInit+0xe0>)
 8001a14:	4b26      	ldr	r3, [pc, #152]	; (8001ab0 <SystemInit+0xe4>)
 8001a16:	4013      	ands	r3, r2
 8001a18:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a1a:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <SystemInit+0xdc>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d007      	beq.n	8001a36 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a26:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <SystemInit+0xdc>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f023 030f 	bic.w	r3, r3, #15
 8001a2e:	4a1e      	ldr	r2, [pc, #120]	; (8001aa8 <SystemInit+0xdc>)
 8001a30:	f043 0307 	orr.w	r3, r3, #7
 8001a34:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001a36:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <SystemInit+0xe0>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <SystemInit+0xe0>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001a42:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <SystemInit+0xe0>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a48:	4b18      	ldr	r3, [pc, #96]	; (8001aac <SystemInit+0xe0>)
 8001a4a:	4a1a      	ldr	r2, [pc, #104]	; (8001ab4 <SystemInit+0xe8>)
 8001a4c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a4e:	4b17      	ldr	r3, [pc, #92]	; (8001aac <SystemInit+0xe0>)
 8001a50:	4a19      	ldr	r2, [pc, #100]	; (8001ab8 <SystemInit+0xec>)
 8001a52:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a54:	4b15      	ldr	r3, [pc, #84]	; (8001aac <SystemInit+0xe0>)
 8001a56:	4a19      	ldr	r2, [pc, #100]	; (8001abc <SystemInit+0xf0>)
 8001a58:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <SystemInit+0xe0>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a60:	4b12      	ldr	r3, [pc, #72]	; (8001aac <SystemInit+0xe0>)
 8001a62:	4a16      	ldr	r2, [pc, #88]	; (8001abc <SystemInit+0xf0>)
 8001a64:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a66:	4b11      	ldr	r3, [pc, #68]	; (8001aac <SystemInit+0xe0>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <SystemInit+0xe0>)
 8001a6e:	4a13      	ldr	r2, [pc, #76]	; (8001abc <SystemInit+0xf0>)
 8001a70:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <SystemInit+0xe0>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <SystemInit+0xe0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a0b      	ldr	r2, [pc, #44]	; (8001aac <SystemInit+0xe0>)
 8001a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a82:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <SystemInit+0xe0>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <SystemInit+0xf4>)
 8001a8c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001a90:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a92:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <SystemInit+0xd8>)
 8001a94:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a98:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000ed00 	.word	0xe000ed00
 8001aa8:	52002000 	.word	0x52002000
 8001aac:	58024400 	.word	0x58024400
 8001ab0:	eaf6ed7f 	.word	0xeaf6ed7f
 8001ab4:	02020200 	.word	0x02020200
 8001ab8:	01ff0000 	.word	0x01ff0000
 8001abc:	01010280 	.word	0x01010280
 8001ac0:	52004000 	.word	0x52004000

08001ac4 <tcp_server_init>:
   3. Listen for the  incoming requests by the client
   4. Accept the Request, and now the server is ready for the data transfer
 */

void tcp_server_init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;

	tpcb = tcp_new();
 8001aca:	f00b fdf5 	bl	800d6b8 <tcp_new>
 8001ace:	60f8      	str	r0, [r7, #12]

	err_t err;

	/* 2. bind _pcb to port 7 ( protocol) */
	ip_addr_t myIPADDR;
	IP_ADDR4(&myIPADDR, 192, 168, 1, 200);
 8001ad0:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <tcp_server_init+0x4c>)
 8001ad2:	607b      	str	r3, [r7, #4]
	err = tcp_bind(tpcb, &myIPADDR, 10);
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	220a      	movs	r2, #10
 8001ad8:	4619      	mov	r1, r3
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f00a fd48 	bl	800c570 <tcp_bind>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	72fb      	strb	r3, [r7, #11]

	if (err == ERR_OK)
 8001ae4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d109      	bne.n	8001b00 <tcp_server_init+0x3c>
	{
		/* 3. start tcp listening for _pcb */
		tpcb = tcp_listen(tpcb);
 8001aec:	21ff      	movs	r1, #255	; 0xff
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f00a fdf6 	bl	800c6e0 <tcp_listen_with_backlog>
 8001af4:	60f8      	str	r0, [r7, #12]

		/* 4. initialize LwIP tcp_accept callback function */
		tcp_accept(tpcb, tcp_server_accept);
 8001af6:	4907      	ldr	r1, [pc, #28]	; (8001b14 <tcp_server_init+0x50>)
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	f00b fe5d 	bl	800d7b8 <tcp_accept>
	else
	{
		/* deallocate the pcb */
		memp_free(MEMP_TCP_PCB, tpcb);
	}
}
 8001afe:	e003      	b.n	8001b08 <tcp_server_init+0x44>
		memp_free(MEMP_TCP_PCB, tpcb);
 8001b00:	68f9      	ldr	r1, [r7, #12]
 8001b02:	2001      	movs	r0, #1
 8001b04:	f009 f91a 	bl	800ad3c <memp_free>
}
 8001b08:	bf00      	nop
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	c801a8c0 	.word	0xc801a8c0
 8001b14:	08001b19 	.word	0x08001b19

08001b18 <tcp_server_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	4613      	mov	r3, r2
 8001b24:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8001b26:	2101      	movs	r1, #1
 8001b28:	68b8      	ldr	r0, [r7, #8]
 8001b2a:	f00b fbd3 	bl	800d2d4 <tcp_setprio>

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_server_struct *)mem_malloc(sizeof(struct tcp_server_struct));
 8001b2e:	200c      	movs	r0, #12
 8001b30:	f008 ff04 	bl	800a93c <mem_malloc>
 8001b34:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d01f      	beq.n	8001b7c <tcp_server_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	68ba      	ldr	r2, [r7, #8]
 8001b46:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8001b54:	6939      	ldr	r1, [r7, #16]
 8001b56:	68b8      	ldr	r0, [r7, #8]
 8001b58:	f00b fdb6 	bl	800d6c8 <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_server_recv);
 8001b5c:	490d      	ldr	r1, [pc, #52]	; (8001b94 <tcp_server_accept+0x7c>)
 8001b5e:	68b8      	ldr	r0, [r7, #8]
 8001b60:	f00b fdc4 	bl	800d6ec <tcp_recv>

    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_server_error);
 8001b64:	490c      	ldr	r1, [pc, #48]	; (8001b98 <tcp_server_accept+0x80>)
 8001b66:	68b8      	ldr	r0, [r7, #8]
 8001b68:	f00b fe04 	bl	800d774 <tcp_err>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_server_poll, 0);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	490b      	ldr	r1, [pc, #44]	; (8001b9c <tcp_server_accept+0x84>)
 8001b70:	68b8      	ldr	r0, [r7, #8]
 8001b72:	f00b fe39 	bl	800d7e8 <tcp_poll>

    ret_err = ERR_OK;
 8001b76:	2300      	movs	r3, #0
 8001b78:	75fb      	strb	r3, [r7, #23]
 8001b7a:	e005      	b.n	8001b88 <tcp_server_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_server_connection_close(newpcb, es);
 8001b7c:	6939      	ldr	r1, [r7, #16]
 8001b7e:	68b8      	ldr	r0, [r7, #8]
 8001b80:	f000 f965 	bl	8001e4e <tcp_server_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8001b84:	23ff      	movs	r3, #255	; 0xff
 8001b86:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8001b88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	08001ba1 	.word	0x08001ba1
 8001b98:	08001cd5 	.word	0x08001cd5
 8001b9c:	08001cf9 	.word	0x08001cf9

08001ba0 <tcp_server_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
 8001bac:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d105      	bne.n	8001bc0 <tcp_server_recv+0x20>
 8001bb4:	4b43      	ldr	r3, [pc, #268]	; (8001cc4 <tcp_server_recv+0x124>)
 8001bb6:	22c3      	movs	r2, #195	; 0xc3
 8001bb8:	4943      	ldr	r1, [pc, #268]	; (8001cc8 <tcp_server_recv+0x128>)
 8001bba:	4844      	ldr	r0, [pc, #272]	; (8001ccc <tcp_server_recv+0x12c>)
 8001bbc:	f013 f8e6 	bl	8014d8c <iprintf>

  es = (struct tcp_server_struct *)arg;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	61bb      	str	r3, [r7, #24]

  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d116      	bne.n	8001bf8 <tcp_server_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	2203      	movs	r2, #3
 8001bce:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d104      	bne.n	8001be2 <tcp_server_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_server_connection_close(tpcb, es);
 8001bd8:	69b9      	ldr	r1, [r7, #24]
 8001bda:	68b8      	ldr	r0, [r7, #8]
 8001bdc:	f000 f937 	bl	8001e4e <tcp_server_connection_close>
 8001be0:	e007      	b.n	8001bf2 <tcp_server_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_server_sent);
 8001be2:	493b      	ldr	r1, [pc, #236]	; (8001cd0 <tcp_server_recv+0x130>)
 8001be4:	68b8      	ldr	r0, [r7, #8]
 8001be6:	f00b fda3 	bl	800d730 <tcp_sent>

      /* send remaining data*/
      tcp_server_send(tpcb, es);
 8001bea:	69b9      	ldr	r1, [r7, #24]
 8001bec:	68b8      	ldr	r0, [r7, #8]
 8001bee:	f000 f8db 	bl	8001da8 <tcp_server_send>
    }
    ret_err = ERR_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	77fb      	strb	r3, [r7, #31]
 8001bf6:	e05f      	b.n	8001cb8 <tcp_server_recv+0x118>
  }
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8001bf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00b      	beq.n	8001c18 <tcp_server_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d005      	beq.n	8001c12 <tcp_server_recv+0x72>
    {
      es->p = NULL;
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f009 ff0b 	bl	800ba28 <pbuf_free>
    }
    ret_err = err;
 8001c12:	78fb      	ldrb	r3, [r7, #3]
 8001c14:	77fb      	strb	r3, [r7, #31]
 8001c16:	e04f      	b.n	8001cb8 <tcp_server_recv+0x118>
  }
  else if(es->state == ES_ACCEPTED)
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d110      	bne.n	8001c42 <tcp_server_recv+0xa2>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	2202      	movs	r2, #2
 8001c24:	701a      	strb	r2, [r3, #0]

    /* store reference to incoming pbuf (chain) */
    es->p = p;
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	609a      	str	r2, [r3, #8]

    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_server_sent);
 8001c2c:	4928      	ldr	r1, [pc, #160]	; (8001cd0 <tcp_server_recv+0x130>)
 8001c2e:	68b8      	ldr	r0, [r7, #8]
 8001c30:	f00b fd7e 	bl	800d730 <tcp_sent>

    /* handle the received data */
    tcp_server_handle(tpcb, es);
 8001c34:	69b9      	ldr	r1, [r7, #24]
 8001c36:	68b8      	ldr	r0, [r7, #8]
 8001c38:	f000 f930 	bl	8001e9c <tcp_server_handle>

    ret_err = ERR_OK;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	77fb      	strb	r3, [r7, #31]
 8001c40:	e03a      	b.n	8001cb8 <tcp_server_recv+0x118>
  }
  else if (es->state == ES_RECEIVED)
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d115      	bne.n	8001c76 <tcp_server_recv+0xd6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d107      	bne.n	8001c62 <tcp_server_recv+0xc2>
    {
      es->p = p;
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	609a      	str	r2, [r3, #8]

      /* handle the received data */
      tcp_server_handle(tpcb, es);
 8001c58:	69b9      	ldr	r1, [r7, #24]
 8001c5a:	68b8      	ldr	r0, [r7, #8]
 8001c5c:	f000 f91e 	bl	8001e9c <tcp_server_handle>
 8001c60:	e006      	b.n	8001c70 <tcp_server_recv+0xd0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	6978      	ldr	r0, [r7, #20]
 8001c6c:	f009 fff4 	bl	800bc58 <pbuf_chain>
    }
    ret_err = ERR_OK;
 8001c70:	2300      	movs	r3, #0
 8001c72:	77fb      	strb	r3, [r7, #31]
 8001c74:	e020      	b.n	8001cb8 <tcp_server_recv+0x118>
  }
  else if(es->state == ES_CLOSING)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b03      	cmp	r3, #3
 8001c7c:	d10e      	bne.n	8001c9c <tcp_server_recv+0xfc>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	891b      	ldrh	r3, [r3, #8]
 8001c82:	4619      	mov	r1, r3
 8001c84:	68b8      	ldr	r0, [r7, #8]
 8001c86:	f00a fe41 	bl	800c90c <tcp_recved>
    es->p = NULL;
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f009 fec9 	bl	800ba28 <pbuf_free>
    ret_err = ERR_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	77fb      	strb	r3, [r7, #31]
 8001c9a:	e00d      	b.n	8001cb8 <tcp_server_recv+0x118>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	891b      	ldrh	r3, [r3, #8]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	68b8      	ldr	r0, [r7, #8]
 8001ca4:	f00a fe32 	bl	800c90c <tcp_recved>
    es->p = NULL;
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f009 feba 	bl	800ba28 <pbuf_free>
    ret_err = ERR_OK;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8001cb8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3720      	adds	r7, #32
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	08015e4c 	.word	0x08015e4c
 8001cc8:	08015e68 	.word	0x08015e68
 8001ccc:	08015e74 	.word	0x08015e74
 8001cd0:	08001d59 	.word	0x08001d59

08001cd4 <tcp_server_error>:
  * @param  arg: pointer on argument parameter
  * @param  err: not used
  * @retval None
  */
static void tcp_server_error(void *arg, err_t err)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_server_struct *)arg;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d002      	beq.n	8001cf0 <tcp_server_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f008 fcc0 	bl	800a670 <mem_free>
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <tcp_server_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_server_struct *es;

  es = (struct tcp_server_struct *)arg;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d017      	beq.n	8001d3c <tcp_server_poll+0x44>
  {
    if (es->p != NULL)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d008      	beq.n	8001d26 <tcp_server_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_server_sent);
 8001d14:	490f      	ldr	r1, [pc, #60]	; (8001d54 <tcp_server_poll+0x5c>)
 8001d16:	6838      	ldr	r0, [r7, #0]
 8001d18:	f00b fd0a 	bl	800d730 <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_server_send(tpcb, es);
 8001d1c:	68b9      	ldr	r1, [r7, #8]
 8001d1e:	6838      	ldr	r0, [r7, #0]
 8001d20:	f000 f842 	bl	8001da8 <tcp_server_send>
 8001d24:	e007      	b.n	8001d36 <tcp_server_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b03      	cmp	r3, #3
 8001d2c:	d103      	bne.n	8001d36 <tcp_server_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_server_connection_close(tpcb, es);
 8001d2e:	68b9      	ldr	r1, [r7, #8]
 8001d30:	6838      	ldr	r0, [r7, #0]
 8001d32:	f000 f88c 	bl	8001e4e <tcp_server_connection_close>
      }
    }
    ret_err = ERR_OK;
 8001d36:	2300      	movs	r3, #0
 8001d38:	73fb      	strb	r3, [r7, #15]
 8001d3a:	e004      	b.n	8001d46 <tcp_server_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8001d3c:	6838      	ldr	r0, [r7, #0]
 8001d3e:	f00a fc0b 	bl	800c558 <tcp_abort>
    ret_err = ERR_ABRT;
 8001d42:	23f3      	movs	r3, #243	; 0xf3
 8001d44:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8001d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	08001d59 	.word	0x08001d59

08001d58 <tcp_server_sent>:
  *         is received from remote host for sent data)
  * @param  None
  * @retval None
  */
static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	4613      	mov	r3, r2
 8001d64:	80fb      	strh	r3, [r7, #6]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_server_struct *)arg;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d008      	beq.n	8001d8a <tcp_server_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_server_sent);
 8001d78:	490a      	ldr	r1, [pc, #40]	; (8001da4 <tcp_server_sent+0x4c>)
 8001d7a:	68b8      	ldr	r0, [r7, #8]
 8001d7c:	f00b fcd8 	bl	800d730 <tcp_sent>
    tcp_server_send(tpcb, es);
 8001d80:	6979      	ldr	r1, [r7, #20]
 8001d82:	68b8      	ldr	r0, [r7, #8]
 8001d84:	f000 f810 	bl	8001da8 <tcp_server_send>
 8001d88:	e007      	b.n	8001d9a <tcp_server_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b03      	cmp	r3, #3
 8001d90:	d103      	bne.n	8001d9a <tcp_server_sent+0x42>
      tcp_server_connection_close(tpcb, es);
 8001d92:	6979      	ldr	r1, [r7, #20]
 8001d94:	68b8      	ldr	r0, [r7, #8]
 8001d96:	f000 f85a 	bl	8001e4e <tcp_server_connection_close>
  }
  return ERR_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	08001d59 	.word	0x08001d59

08001da8 <tcp_server_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 8001db6:	e036      	b.n	8001e26 <tcp_server_send+0x7e>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	6859      	ldr	r1, [r3, #4]
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	895a      	ldrh	r2, [r3, #10]
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f00e fbbb 	bl	8010544 <tcp_write>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 8001dd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d11d      	bne.n	8001e16 <tcp_server_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	895b      	ldrh	r3, [r3, #10]
 8001dde:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d004      	beq.n	8001dfa <tcp_server_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f009 feb7 	bl	800bb68 <pbuf_ref>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8001dfa:	6938      	ldr	r0, [r7, #16]
 8001dfc:	f009 fe14 	bl	800ba28 <pbuf_free>
 8001e00:	4603      	mov	r3, r0
 8001e02:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8001e04:	7b7b      	ldrb	r3, [r7, #13]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f7      	beq.n	8001dfa <tcp_server_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 8001e0a:	89fb      	ldrh	r3, [r7, #14]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f00a fd7c 	bl	800c90c <tcp_recved>
 8001e14:	e007      	b.n	8001e26 <tcp_server_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 8001e16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1e:	d102      	bne.n	8001e26 <tcp_server_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8001e26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10b      	bne.n	8001e46 <tcp_server_send+0x9e>
         (es->p != NULL) &&
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d007      	beq.n	8001e46 <tcp_server_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	895a      	ldrh	r2, [r3, #10]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) &&
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d9b8      	bls.n	8001db8 <tcp_server_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8001e46:	bf00      	nop
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <tcp_server_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8001e58:	2100      	movs	r1, #0
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f00b fc34 	bl	800d6c8 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8001e60:	2100      	movs	r1, #0
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f00b fc64 	bl	800d730 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8001e68:	2100      	movs	r1, #0
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f00b fc3e 	bl	800d6ec <tcp_recv>
  tcp_err(tpcb, NULL);
 8001e70:	2100      	movs	r1, #0
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f00b fc7e 	bl	800d774 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f00b fcb3 	bl	800d7e8 <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d002      	beq.n	8001e8e <tcp_server_connection_close+0x40>
  {
    mem_free(es);
 8001e88:	6838      	ldr	r0, [r7, #0]
 8001e8a:	f008 fbf1 	bl	800a670 <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f00a fa78 	bl	800c384 <tcp_close>
}
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <tcp_server_handle>:

/* Handle the incoming TCP Data */

static void tcp_server_handle(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8001e9c:	b5b0      	push	{r4, r5, r7, lr}
 8001e9e:	b0a0      	sub	sp, #128	; 0x80
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
	struct tcp_server_struct *esTx = 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	67fb      	str	r3, [r7, #124]	; 0x7c

	/* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	673b      	str	r3, [r7, #112]	; 0x70
	uint16_t inPort = tpcb->remote_port;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	8b1b      	ldrh	r3, [r3, #24]
 8001eb4:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
 8001eb8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f011 ff7d 	bl	8013dbc <ip4addr_ntoa>
 8001ec2:	6778      	str	r0, [r7, #116]	; 0x74

	esTx->state = es->state;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	781a      	ldrb	r2, [r3, #0]
 8001ec8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001eca:	701a      	strb	r2, [r3, #0]
	esTx->pcb = es->pcb;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ed2:	605a      	str	r2, [r3, #4]
	esTx->p = es->p;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001eda:	609a      	str	r2, [r3, #8]

	char buf[100];
	memset (buf, '\0', 100);
 8001edc:	f107 030c 	add.w	r3, r7, #12
 8001ee0:	2264      	movs	r2, #100	; 0x64
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f012 ff49 	bl	8014d7c <memset>

	strncpy(buf, (char *)es->p->payload, es->p->tot_len);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	6859      	ldr	r1, [r3, #4]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	891b      	ldrh	r3, [r3, #8]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f107 030c 	add.w	r3, r7, #12
 8001efc:	4618      	mov	r0, r3
 8001efe:	f012 ffa5 	bl	8014e4c <strncpy>
	strncpy(globalCluster.myString, (char *)es->p->payload, es->p->tot_len);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	6859      	ldr	r1, [r3, #4]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	891b      	ldrh	r3, [r3, #8]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	4824      	ldr	r0, [pc, #144]	; (8001fa4 <tcp_server_handle+0x108>)
 8001f12:	f012 ff9b 	bl	8014e4c <strncpy>
	strcat (buf, "+ Hello from TCP SERVER\n");
 8001f16:	f107 030c 	add.w	r3, r7, #12
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe f9f8 	bl	8000310 <strlen>
 8001f20:	4603      	mov	r3, r0
 8001f22:	461a      	mov	r2, r3
 8001f24:	f107 030c 	add.w	r3, r7, #12
 8001f28:	4413      	add	r3, r2
 8001f2a:	4a1f      	ldr	r2, [pc, #124]	; (8001fa8 <tcp_server_handle+0x10c>)
 8001f2c:	461d      	mov	r5, r3
 8001f2e:	4614      	mov	r4, r2
 8001f30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f32:	6028      	str	r0, [r5, #0]
 8001f34:	6069      	str	r1, [r5, #4]
 8001f36:	60aa      	str	r2, [r5, #8]
 8001f38:	60eb      	str	r3, [r5, #12]
 8001f3a:	cc03      	ldmia	r4!, {r0, r1}
 8001f3c:	6128      	str	r0, [r5, #16]
 8001f3e:	6169      	str	r1, [r5, #20]
 8001f40:	7823      	ldrb	r3, [r4, #0]
 8001f42:	762b      	strb	r3, [r5, #24]


	esTx->p->payload = (void *)buf;
 8001f44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f107 020c 	add.w	r2, r7, #12
 8001f4c:	605a      	str	r2, [r3, #4]
	esTx->p->tot_len = (es->p->tot_len - es->p->len) + strlen (buf);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	891a      	ldrh	r2, [r3, #8]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	895b      	ldrh	r3, [r3, #10]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	b29c      	uxth	r4, r3
 8001f5e:	f107 030c 	add.w	r3, r7, #12
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe f9d4 	bl	8000310 <strlen>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	4422      	add	r2, r4
 8001f72:	b292      	uxth	r2, r2
 8001f74:	811a      	strh	r2, [r3, #8]
	esTx->p->len = strlen (buf);
 8001f76:	f107 030c 	add.w	r3, r7, #12
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe f9c8 	bl	8000310 <strlen>
 8001f80:	4602      	mov	r2, r0
 8001f82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	b292      	uxth	r2, r2
 8001f88:	815a      	strh	r2, [r3, #10]

	tcp_server_send(tpcb, esTx);
 8001f8a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7ff ff0b 	bl	8001da8 <tcp_server_send>

	pbuf_free(es->p);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f009 fd46 	bl	800ba28 <pbuf_free>

}
 8001f9c:	bf00      	nop
 8001f9e:	3780      	adds	r7, #128	; 0x80
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bdb0      	pop	{r4, r5, r7, pc}
 8001fa4:	24000300 	.word	0x24000300
 8001fa8:	08015e9c 	.word	0x08015e9c

08001fac <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb2:	1d3b      	adds	r3, r7, #4
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001fbc:	4b15      	ldr	r3, [pc, #84]	; (8002014 <MX_TIM6_Init+0x68>)
 8001fbe:	4a16      	ldr	r2, [pc, #88]	; (8002018 <MX_TIM6_Init+0x6c>)
 8001fc0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000 - 1;
 8001fc2:	4b14      	ldr	r3, [pc, #80]	; (8002014 <MX_TIM6_Init+0x68>)
 8001fc4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001fc8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fca:	4b12      	ldr	r3, [pc, #72]	; (8002014 <MX_TIM6_Init+0x68>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001fd0:	4b10      	ldr	r3, [pc, #64]	; (8002014 <MX_TIM6_Init+0x68>)
 8001fd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fd6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <MX_TIM6_Init+0x68>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001fde:	480d      	ldr	r0, [pc, #52]	; (8002014 <MX_TIM6_Init+0x68>)
 8001fe0:	f006 f801 	bl	8007fe6 <HAL_TIM_Base_Init>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001fea:	f7ff faf4 	bl	80015d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ff6:	1d3b      	adds	r3, r7, #4
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4806      	ldr	r0, [pc, #24]	; (8002014 <MX_TIM6_Init+0x68>)
 8001ffc:	f006 f96e 	bl	80082dc <HAL_TIMEx_MasterConfigSynchronization>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002006:	f7ff fae6 	bl	80015d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800200a:	bf00      	nop
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	2400043c 	.word	0x2400043c
 8002018:	40001000 	.word	0x40001000

0800201c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a0b      	ldr	r2, [pc, #44]	; (8002058 <HAL_TIM_Base_MspInit+0x3c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d10e      	bne.n	800204c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800202e:	4b0b      	ldr	r3, [pc, #44]	; (800205c <HAL_TIM_Base_MspInit+0x40>)
 8002030:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002034:	4a09      	ldr	r2, [pc, #36]	; (800205c <HAL_TIM_Base_MspInit+0x40>)
 8002036:	f043 0310 	orr.w	r3, r3, #16
 800203a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800203e:	4b07      	ldr	r3, [pc, #28]	; (800205c <HAL_TIM_Base_MspInit+0x40>)
 8002040:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002044:	f003 0310 	and.w	r3, r3, #16
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800204c:	bf00      	nop
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	40001000 	.word	0x40001000
 800205c:	58024400 	.word	0x58024400

08002060 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002064:	4b22      	ldr	r3, [pc, #136]	; (80020f0 <MX_USART3_UART_Init+0x90>)
 8002066:	4a23      	ldr	r2, [pc, #140]	; (80020f4 <MX_USART3_UART_Init+0x94>)
 8002068:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800206a:	4b21      	ldr	r3, [pc, #132]	; (80020f0 <MX_USART3_UART_Init+0x90>)
 800206c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002070:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002072:	4b1f      	ldr	r3, [pc, #124]	; (80020f0 <MX_USART3_UART_Init+0x90>)
 8002074:	2200      	movs	r2, #0
 8002076:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002078:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <MX_USART3_UART_Init+0x90>)
 800207a:	2200      	movs	r2, #0
 800207c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800207e:	4b1c      	ldr	r3, [pc, #112]	; (80020f0 <MX_USART3_UART_Init+0x90>)
 8002080:	2200      	movs	r2, #0
 8002082:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002084:	4b1a      	ldr	r3, [pc, #104]	; (80020f0 <MX_USART3_UART_Init+0x90>)
 8002086:	220c      	movs	r2, #12
 8002088:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800208a:	4b19      	ldr	r3, [pc, #100]	; (80020f0 <MX_USART3_UART_Init+0x90>)
 800208c:	2200      	movs	r2, #0
 800208e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002090:	4b17      	ldr	r3, [pc, #92]	; (80020f0 <MX_USART3_UART_Init+0x90>)
 8002092:	2200      	movs	r2, #0
 8002094:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002096:	4b16      	ldr	r3, [pc, #88]	; (80020f0 <MX_USART3_UART_Init+0x90>)
 8002098:	2200      	movs	r2, #0
 800209a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800209c:	4b14      	ldr	r3, [pc, #80]	; (80020f0 <MX_USART3_UART_Init+0x90>)
 800209e:	2200      	movs	r2, #0
 80020a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020a2:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <MX_USART3_UART_Init+0x90>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020a8:	4811      	ldr	r0, [pc, #68]	; (80020f0 <MX_USART3_UART_Init+0x90>)
 80020aa:	f006 f9b3 	bl	8008414 <HAL_UART_Init>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80020b4:	f7ff fa8f 	bl	80015d6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020b8:	2100      	movs	r1, #0
 80020ba:	480d      	ldr	r0, [pc, #52]	; (80020f0 <MX_USART3_UART_Init+0x90>)
 80020bc:	f007 fadc 	bl	8009678 <HAL_UARTEx_SetTxFifoThreshold>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80020c6:	f7ff fa86 	bl	80015d6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020ca:	2100      	movs	r1, #0
 80020cc:	4808      	ldr	r0, [pc, #32]	; (80020f0 <MX_USART3_UART_Init+0x90>)
 80020ce:	f007 fb11 	bl	80096f4 <HAL_UARTEx_SetRxFifoThreshold>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80020d8:	f7ff fa7d 	bl	80015d6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80020dc:	4804      	ldr	r0, [pc, #16]	; (80020f0 <MX_USART3_UART_Init+0x90>)
 80020de:	f007 fa92 	bl	8009606 <HAL_UARTEx_DisableFifoMode>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80020e8:	f7ff fa75 	bl	80015d6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020ec:	bf00      	nop
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	24000488 	.word	0x24000488
 80020f4:	40004800 	.word	0x40004800

080020f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b0b6      	sub	sp, #216	; 0xd8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002100:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002110:	f107 0310 	add.w	r3, r7, #16
 8002114:	22b4      	movs	r2, #180	; 0xb4
 8002116:	2100      	movs	r1, #0
 8002118:	4618      	mov	r0, r3
 800211a:	f012 fe2f 	bl	8014d7c <memset>
  if(uartHandle->Instance==USART3)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a25      	ldr	r2, [pc, #148]	; (80021b8 <HAL_UART_MspInit+0xc0>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d142      	bne.n	80021ae <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002128:	2302      	movs	r3, #2
 800212a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800212c:	2300      	movs	r3, #0
 800212e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002132:	f107 0310 	add.w	r3, r7, #16
 8002136:	4618      	mov	r0, r3
 8002138:	f004 f858 	bl	80061ec <HAL_RCCEx_PeriphCLKConfig>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002142:	f7ff fa48 	bl	80015d6 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002146:	4b1d      	ldr	r3, [pc, #116]	; (80021bc <HAL_UART_MspInit+0xc4>)
 8002148:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800214c:	4a1b      	ldr	r2, [pc, #108]	; (80021bc <HAL_UART_MspInit+0xc4>)
 800214e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002152:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002156:	4b19      	ldr	r3, [pc, #100]	; (80021bc <HAL_UART_MspInit+0xc4>)
 8002158:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800215c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002164:	4b15      	ldr	r3, [pc, #84]	; (80021bc <HAL_UART_MspInit+0xc4>)
 8002166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800216a:	4a14      	ldr	r2, [pc, #80]	; (80021bc <HAL_UART_MspInit+0xc4>)
 800216c:	f043 0308 	orr.w	r3, r3, #8
 8002170:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002174:	4b11      	ldr	r3, [pc, #68]	; (80021bc <HAL_UART_MspInit+0xc4>)
 8002176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8002182:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002186:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218a:	2302      	movs	r3, #2
 800218c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002190:	2300      	movs	r3, #0
 8002192:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002196:	2300      	movs	r3, #0
 8002198:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800219c:	2307      	movs	r3, #7
 800219e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021a2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80021a6:	4619      	mov	r1, r3
 80021a8:	4805      	ldr	r0, [pc, #20]	; (80021c0 <HAL_UART_MspInit+0xc8>)
 80021aa:	f002 fead 	bl	8004f08 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80021ae:	bf00      	nop
 80021b0:	37d8      	adds	r7, #216	; 0xd8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40004800 	.word	0x40004800
 80021bc:	58024400 	.word	0x58024400
 80021c0:	58020c00 	.word	0x58020c00

080021c4 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
	...

080021d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80021d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800220c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80021d8:	f7ff fbf8 	bl	80019cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021dc:	480c      	ldr	r0, [pc, #48]	; (8002210 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021de:	490d      	ldr	r1, [pc, #52]	; (8002214 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021e0:	4a0d      	ldr	r2, [pc, #52]	; (8002218 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021e4:	e002      	b.n	80021ec <LoopCopyDataInit>

080021e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ea:	3304      	adds	r3, #4

080021ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021f0:	d3f9      	bcc.n	80021e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021f2:	4a0a      	ldr	r2, [pc, #40]	; (800221c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021f4:	4c0a      	ldr	r4, [pc, #40]	; (8002220 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021f8:	e001      	b.n	80021fe <LoopFillZerobss>

080021fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021fc:	3204      	adds	r2, #4

080021fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002200:	d3fb      	bcc.n	80021fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002202:	f012 fd7b 	bl	8014cfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002206:	f7ff f811 	bl	800122c <main>
  bx  lr
 800220a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800220c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002210:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002214:	2400009c 	.word	0x2400009c
  ldr r2, =_sidata
 8002218:	08019948 	.word	0x08019948
  ldr r2, =_sbss
 800221c:	2400009c 	.word	0x2400009c
  ldr r4, =_ebss
 8002220:	24003630 	.word	0x24003630

08002224 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002224:	e7fe      	b.n	8002224 <ADC3_IRQHandler>

08002226 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00b      	beq.n	800224e <LAN8742_RegisterBusIO+0x28>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d007      	beq.n	800224e <LAN8742_RegisterBusIO+0x28>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <LAN8742_RegisterBusIO+0x28>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d102      	bne.n	8002254 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800224e:	f04f 33ff 	mov.w	r3, #4294967295
 8002252:	e014      	b.n	800227e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	68da      	ldr	r2, [r3, #12]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	691a      	ldr	r2, [r3, #16]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800228a:	b580      	push	{r7, lr}
 800228c:	b086      	sub	sp, #24
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	2300      	movs	r3, #0
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d17c      	bne.n	80023a4 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d002      	beq.n	80022b8 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2220      	movs	r2, #32
 80022bc:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	e01c      	b.n	80022fe <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	f107 0208 	add.w	r2, r7, #8
 80022cc:	2112      	movs	r1, #18
 80022ce:	6978      	ldr	r0, [r7, #20]
 80022d0:	4798      	blx	r3
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	da03      	bge.n	80022e0 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80022d8:	f06f 0304 	mvn.w	r3, #4
 80022dc:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80022de:	e00b      	b.n	80022f8 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	f003 031f 	and.w	r3, r3, #31
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d105      	bne.n	80022f8 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
         break;
 80022f6:	e005      	b.n	8002304 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	3301      	adds	r3, #1
 80022fc:	617b      	str	r3, [r7, #20]
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	2b1f      	cmp	r3, #31
 8002302:	d9df      	bls.n	80022c4 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b1f      	cmp	r3, #31
 800230a:	d902      	bls.n	8002312 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800230c:	f06f 0302 	mvn.w	r3, #2
 8002310:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d145      	bne.n	80023a4 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6810      	ldr	r0, [r2, #0]
 8002320:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002324:	2100      	movs	r1, #0
 8002326:	4798      	blx	r3
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	db37      	blt.n	800239e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6810      	ldr	r0, [r2, #0]
 8002336:	f107 0208 	add.w	r2, r7, #8
 800233a:	2100      	movs	r1, #0
 800233c:	4798      	blx	r3
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	db28      	blt.n	8002396 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	4798      	blx	r3
 800234a:	4603      	mov	r3, r0
 800234c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800234e:	e01c      	b.n	800238a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	4798      	blx	r3
 8002356:	4603      	mov	r3, r0
 8002358:	461a      	mov	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002362:	d80e      	bhi.n	8002382 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6810      	ldr	r0, [r2, #0]
 800236c:	f107 0208 	add.w	r2, r7, #8
 8002370:	2100      	movs	r1, #0
 8002372:	4798      	blx	r3
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	da07      	bge.n	800238a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800237a:	f06f 0304 	mvn.w	r3, #4
 800237e:	613b      	str	r3, [r7, #16]
                 break;
 8002380:	e010      	b.n	80023a4 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8002382:	f06f 0301 	mvn.w	r3, #1
 8002386:	613b      	str	r3, [r7, #16]
               break;
 8002388:	e00c      	b.n	80023a4 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1dd      	bne.n	8002350 <LAN8742_Init+0xc6>
 8002394:	e006      	b.n	80023a4 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8002396:	f06f 0304 	mvn.w	r3, #4
 800239a:	613b      	str	r3, [r7, #16]
 800239c:	e002      	b.n	80023a4 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800239e:	f06f 0303 	mvn.w	r3, #3
 80023a2:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d112      	bne.n	80023d0 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	4798      	blx	r3
 80023b0:	4603      	mov	r3, r0
 80023b2:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80023b4:	bf00      	nop
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	4798      	blx	r3
 80023bc:	4603      	mov	r3, r0
 80023be:	461a      	mov	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80023c8:	d9f5      	bls.n	80023b6 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80023d0:	693b      	ldr	r3, [r7, #16]
 }
 80023d2:	4618      	mov	r0, r3
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b084      	sub	sp, #16
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6810      	ldr	r0, [r2, #0]
 80023ee:	f107 020c 	add.w	r2, r7, #12
 80023f2:	2101      	movs	r1, #1
 80023f4:	4798      	blx	r3
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	da02      	bge.n	8002402 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80023fc:	f06f 0304 	mvn.w	r3, #4
 8002400:	e06e      	b.n	80024e0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6810      	ldr	r0, [r2, #0]
 800240a:	f107 020c 	add.w	r2, r7, #12
 800240e:	2101      	movs	r1, #1
 8002410:	4798      	blx	r3
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	da02      	bge.n	800241e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002418:	f06f 0304 	mvn.w	r3, #4
 800241c:	e060      	b.n	80024e0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8002428:	2301      	movs	r3, #1
 800242a:	e059      	b.n	80024e0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6810      	ldr	r0, [r2, #0]
 8002434:	f107 020c 	add.w	r2, r7, #12
 8002438:	2100      	movs	r1, #0
 800243a:	4798      	blx	r3
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	da02      	bge.n	8002448 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002442:	f06f 0304 	mvn.w	r3, #4
 8002446:	e04b      	b.n	80024e0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d11b      	bne.n	800248a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d006      	beq.n	800246a <LAN8742_GetLinkState+0x90>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002466:	2302      	movs	r3, #2
 8002468:	e03a      	b.n	80024e0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002474:	2303      	movs	r3, #3
 8002476:	e033      	b.n	80024e0 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002482:	2304      	movs	r3, #4
 8002484:	e02c      	b.n	80024e0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002486:	2305      	movs	r3, #5
 8002488:	e02a      	b.n	80024e0 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6810      	ldr	r0, [r2, #0]
 8002492:	f107 020c 	add.w	r2, r7, #12
 8002496:	211f      	movs	r1, #31
 8002498:	4798      	blx	r3
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	da02      	bge.n	80024a6 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80024a0:	f06f 0304 	mvn.w	r3, #4
 80024a4:	e01c      	b.n	80024e0 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80024b0:	2306      	movs	r3, #6
 80024b2:	e015      	b.n	80024e0 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 031c 	and.w	r3, r3, #28
 80024ba:	2b18      	cmp	r3, #24
 80024bc:	d101      	bne.n	80024c2 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80024be:	2302      	movs	r3, #2
 80024c0:	e00e      	b.n	80024e0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f003 031c 	and.w	r3, r3, #28
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	d101      	bne.n	80024d0 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e007      	b.n	80024e0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f003 031c 	and.w	r3, r3, #28
 80024d6:	2b14      	cmp	r3, #20
 80024d8:	d101      	bne.n	80024de <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80024da:	2304      	movs	r3, #4
 80024dc:	e000      	b.n	80024e0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80024de:	2305      	movs	r3, #5
    }				
  }
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ee:	2003      	movs	r0, #3
 80024f0:	f000 f994 	bl	800281c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80024f4:	f003 fca4 	bl	8005e40 <HAL_RCC_GetSysClockFreq>
 80024f8:	4602      	mov	r2, r0
 80024fa:	4b15      	ldr	r3, [pc, #84]	; (8002550 <HAL_Init+0x68>)
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	0a1b      	lsrs	r3, r3, #8
 8002500:	f003 030f 	and.w	r3, r3, #15
 8002504:	4913      	ldr	r1, [pc, #76]	; (8002554 <HAL_Init+0x6c>)
 8002506:	5ccb      	ldrb	r3, [r1, r3]
 8002508:	f003 031f 	and.w	r3, r3, #31
 800250c:	fa22 f303 	lsr.w	r3, r2, r3
 8002510:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002512:	4b0f      	ldr	r3, [pc, #60]	; (8002550 <HAL_Init+0x68>)
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	4a0e      	ldr	r2, [pc, #56]	; (8002554 <HAL_Init+0x6c>)
 800251c:	5cd3      	ldrb	r3, [r2, r3]
 800251e:	f003 031f 	and.w	r3, r3, #31
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	fa22 f303 	lsr.w	r3, r2, r3
 8002528:	4a0b      	ldr	r2, [pc, #44]	; (8002558 <HAL_Init+0x70>)
 800252a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800252c:	4a0b      	ldr	r2, [pc, #44]	; (800255c <HAL_Init+0x74>)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002532:	2000      	movs	r0, #0
 8002534:	f000 f814 	bl	8002560 <HAL_InitTick>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e002      	b.n	8002548 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002542:	f7ff f92d 	bl	80017a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	58024400 	.word	0x58024400
 8002554:	080196b4 	.word	0x080196b4
 8002558:	2400000c 	.word	0x2400000c
 800255c:	24000008 	.word	0x24000008

08002560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002568:	4b15      	ldr	r3, [pc, #84]	; (80025c0 <HAL_InitTick+0x60>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e021      	b.n	80025b8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002574:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <HAL_InitTick+0x64>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <HAL_InitTick+0x60>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	4619      	mov	r1, r3
 800257e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002582:	fbb3 f3f1 	udiv	r3, r3, r1
 8002586:	fbb2 f3f3 	udiv	r3, r2, r3
 800258a:	4618      	mov	r0, r3
 800258c:	f000 f979 	bl	8002882 <HAL_SYSTICK_Config>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e00e      	b.n	80025b8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b0f      	cmp	r3, #15
 800259e:	d80a      	bhi.n	80025b6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025a0:	2200      	movs	r2, #0
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	f04f 30ff 	mov.w	r0, #4294967295
 80025a8:	f000 f943 	bl	8002832 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025ac:	4a06      	ldr	r2, [pc, #24]	; (80025c8 <HAL_InitTick+0x68>)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	e000      	b.n	80025b8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	24000014 	.word	0x24000014
 80025c4:	24000008 	.word	0x24000008
 80025c8:	24000010 	.word	0x24000010

080025cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025d0:	4b06      	ldr	r3, [pc, #24]	; (80025ec <HAL_IncTick+0x20>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	461a      	mov	r2, r3
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_IncTick+0x24>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4413      	add	r3, r2
 80025dc:	4a04      	ldr	r2, [pc, #16]	; (80025f0 <HAL_IncTick+0x24>)
 80025de:	6013      	str	r3, [r2, #0]
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	24000014 	.word	0x24000014
 80025f0:	24000518 	.word	0x24000518

080025f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return uwTick;
 80025f8:	4b03      	ldr	r3, [pc, #12]	; (8002608 <HAL_GetTick+0x14>)
 80025fa:	681b      	ldr	r3, [r3, #0]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	24000518 	.word	0x24000518

0800260c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002614:	f7ff ffee 	bl	80025f4 <HAL_GetTick>
 8002618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002624:	d005      	beq.n	8002632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002626:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <HAL_Delay+0x44>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4413      	add	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002632:	bf00      	nop
 8002634:	f7ff ffde 	bl	80025f4 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	429a      	cmp	r2, r3
 8002642:	d8f7      	bhi.n	8002634 <HAL_Delay+0x28>
  {
  }
}
 8002644:	bf00      	nop
 8002646:	bf00      	nop
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	24000014 	.word	0x24000014

08002654 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002664:	4904      	ldr	r1, [pc, #16]	; (8002678 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4313      	orrs	r3, r2
 800266a:	604b      	str	r3, [r1, #4]
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	58000400 	.word	0x58000400

0800267c <__NVIC_SetPriorityGrouping>:
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800268c:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <__NVIC_SetPriorityGrouping+0x40>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002698:	4013      	ands	r3, r2
 800269a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80026a4:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <__NVIC_SetPriorityGrouping+0x44>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026aa:	4a04      	ldr	r2, [pc, #16]	; (80026bc <__NVIC_SetPriorityGrouping+0x40>)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	60d3      	str	r3, [r2, #12]
}
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000ed00 	.word	0xe000ed00
 80026c0:	05fa0000 	.word	0x05fa0000

080026c4 <__NVIC_GetPriorityGrouping>:
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026c8:	4b04      	ldr	r3, [pc, #16]	; (80026dc <__NVIC_GetPriorityGrouping+0x18>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	0a1b      	lsrs	r3, r3, #8
 80026ce:	f003 0307 	and.w	r3, r3, #7
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <__NVIC_EnableIRQ>:
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	db0b      	blt.n	800270a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026f2:	88fb      	ldrh	r3, [r7, #6]
 80026f4:	f003 021f 	and.w	r2, r3, #31
 80026f8:	4907      	ldr	r1, [pc, #28]	; (8002718 <__NVIC_EnableIRQ+0x38>)
 80026fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026fe:	095b      	lsrs	r3, r3, #5
 8002700:	2001      	movs	r0, #1
 8002702:	fa00 f202 	lsl.w	r2, r0, r2
 8002706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	e000e100 	.word	0xe000e100

0800271c <__NVIC_SetPriority>:
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	6039      	str	r1, [r7, #0]
 8002726:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002728:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800272c:	2b00      	cmp	r3, #0
 800272e:	db0a      	blt.n	8002746 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	b2da      	uxtb	r2, r3
 8002734:	490c      	ldr	r1, [pc, #48]	; (8002768 <__NVIC_SetPriority+0x4c>)
 8002736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800273a:	0112      	lsls	r2, r2, #4
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	440b      	add	r3, r1
 8002740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002744:	e00a      	b.n	800275c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	b2da      	uxtb	r2, r3
 800274a:	4908      	ldr	r1, [pc, #32]	; (800276c <__NVIC_SetPriority+0x50>)
 800274c:	88fb      	ldrh	r3, [r7, #6]
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	3b04      	subs	r3, #4
 8002754:	0112      	lsls	r2, r2, #4
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	440b      	add	r3, r1
 800275a:	761a      	strb	r2, [r3, #24]
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	e000e100 	.word	0xe000e100
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <NVIC_EncodePriority>:
{
 8002770:	b480      	push	{r7}
 8002772:	b089      	sub	sp, #36	; 0x24
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f1c3 0307 	rsb	r3, r3, #7
 800278a:	2b04      	cmp	r3, #4
 800278c:	bf28      	it	cs
 800278e:	2304      	movcs	r3, #4
 8002790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3304      	adds	r3, #4
 8002796:	2b06      	cmp	r3, #6
 8002798:	d902      	bls.n	80027a0 <NVIC_EncodePriority+0x30>
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	3b03      	subs	r3, #3
 800279e:	e000      	b.n	80027a2 <NVIC_EncodePriority+0x32>
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a4:	f04f 32ff 	mov.w	r2, #4294967295
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43da      	mvns	r2, r3
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	401a      	ands	r2, r3
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027b8:	f04f 31ff 	mov.w	r1, #4294967295
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	fa01 f303 	lsl.w	r3, r1, r3
 80027c2:	43d9      	mvns	r1, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c8:	4313      	orrs	r3, r2
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3724      	adds	r7, #36	; 0x24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
	...

080027d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027e8:	d301      	bcc.n	80027ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ea:	2301      	movs	r3, #1
 80027ec:	e00f      	b.n	800280e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ee:	4a0a      	ldr	r2, [pc, #40]	; (8002818 <SysTick_Config+0x40>)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027f6:	210f      	movs	r1, #15
 80027f8:	f04f 30ff 	mov.w	r0, #4294967295
 80027fc:	f7ff ff8e 	bl	800271c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002800:	4b05      	ldr	r3, [pc, #20]	; (8002818 <SysTick_Config+0x40>)
 8002802:	2200      	movs	r2, #0
 8002804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002806:	4b04      	ldr	r3, [pc, #16]	; (8002818 <SysTick_Config+0x40>)
 8002808:	2207      	movs	r2, #7
 800280a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	e000e010 	.word	0xe000e010

0800281c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f7ff ff29 	bl	800267c <__NVIC_SetPriorityGrouping>
}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b086      	sub	sp, #24
 8002836:	af00      	add	r7, sp, #0
 8002838:	4603      	mov	r3, r0
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	607a      	str	r2, [r7, #4]
 800283e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002840:	f7ff ff40 	bl	80026c4 <__NVIC_GetPriorityGrouping>
 8002844:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	68b9      	ldr	r1, [r7, #8]
 800284a:	6978      	ldr	r0, [r7, #20]
 800284c:	f7ff ff90 	bl	8002770 <NVIC_EncodePriority>
 8002850:	4602      	mov	r2, r0
 8002852:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002856:	4611      	mov	r1, r2
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff ff5f 	bl	800271c <__NVIC_SetPriority>
}
 800285e:	bf00      	nop
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b082      	sub	sp, #8
 800286a:	af00      	add	r7, sp, #0
 800286c:	4603      	mov	r3, r0
 800286e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002870:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff ff33 	bl	80026e0 <__NVIC_EnableIRQ>
}
 800287a:	bf00      	nop
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b082      	sub	sp, #8
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7ff ffa4 	bl	80027d8 <SysTick_Config>
 8002890:	4603      	mov	r3, r0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
	...

0800289c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80028a0:	f3bf 8f5f 	dmb	sy
}
 80028a4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80028a6:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <HAL_MPU_Disable+0x28>)
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	4a06      	ldr	r2, [pc, #24]	; (80028c4 <HAL_MPU_Disable+0x28>)
 80028ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80028b2:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <HAL_MPU_Disable+0x2c>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	605a      	str	r2, [r3, #4]
}
 80028b8:	bf00      	nop
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	e000ed00 	.word	0xe000ed00
 80028c8:	e000ed90 	.word	0xe000ed90

080028cc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80028d4:	4a0b      	ldr	r2, [pc, #44]	; (8002904 <HAL_MPU_Enable+0x38>)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f043 0301 	orr.w	r3, r3, #1
 80028dc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80028de:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <HAL_MPU_Enable+0x3c>)
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	4a09      	ldr	r2, [pc, #36]	; (8002908 <HAL_MPU_Enable+0x3c>)
 80028e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80028ea:	f3bf 8f4f 	dsb	sy
}
 80028ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80028f0:	f3bf 8f6f 	isb	sy
}
 80028f4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	e000ed90 	.word	0xe000ed90
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	785a      	ldrb	r2, [r3, #1]
 8002918:	4b1d      	ldr	r3, [pc, #116]	; (8002990 <HAL_MPU_ConfigRegion+0x84>)
 800291a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d029      	beq.n	8002978 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002924:	4a1a      	ldr	r2, [pc, #104]	; (8002990 <HAL_MPU_ConfigRegion+0x84>)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	7b1b      	ldrb	r3, [r3, #12]
 8002930:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	7adb      	ldrb	r3, [r3, #11]
 8002936:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002938:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	7a9b      	ldrb	r3, [r3, #10]
 800293e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002940:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	7b5b      	ldrb	r3, [r3, #13]
 8002946:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002948:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	7b9b      	ldrb	r3, [r3, #14]
 800294e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002950:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	7bdb      	ldrb	r3, [r3, #15]
 8002956:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002958:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	7a5b      	ldrb	r3, [r3, #9]
 800295e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002960:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	7a1b      	ldrb	r3, [r3, #8]
 8002966:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002968:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	7812      	ldrb	r2, [r2, #0]
 800296e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002970:	4a07      	ldr	r2, [pc, #28]	; (8002990 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002972:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002974:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002976:	e005      	b.n	8002984 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002978:	4b05      	ldr	r3, [pc, #20]	; (8002990 <HAL_MPU_ConfigRegion+0x84>)
 800297a:	2200      	movs	r2, #0
 800297c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800297e:	4b04      	ldr	r3, [pc, #16]	; (8002990 <HAL_MPU_ConfigRegion+0x84>)
 8002980:	2200      	movs	r2, #0
 8002982:	611a      	str	r2, [r3, #16]
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	e000ed90 	.word	0xe000ed90

08002994 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e0c6      	b.n	8002b34 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d102      	bne.n	80029b4 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f007 f868 	bl	8009a84 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2223      	movs	r2, #35	; 0x23
 80029b8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ba:	4b60      	ldr	r3, [pc, #384]	; (8002b3c <HAL_ETH_Init+0x1a8>)
 80029bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80029c0:	4a5e      	ldr	r2, [pc, #376]	; (8002b3c <HAL_ETH_Init+0x1a8>)
 80029c2:	f043 0302 	orr.w	r3, r3, #2
 80029c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80029ca:	4b5c      	ldr	r3, [pc, #368]	; (8002b3c <HAL_ETH_Init+0x1a8>)
 80029cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	7a1b      	ldrb	r3, [r3, #8]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d103      	bne.n	80029e8 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80029e0:	2000      	movs	r0, #0
 80029e2:	f7ff fe37 	bl	8002654 <HAL_SYSCFG_ETHInterfaceSelect>
 80029e6:	e003      	b.n	80029f0 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80029e8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80029ec:	f7ff fe32 	bl	8002654 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a08:	f7ff fdf4 	bl	80025f4 <HAL_GetTick>
 8002a0c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002a0e:	e00f      	b.n	8002a30 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8002a10:	f7ff fdf0 	bl	80025f4 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a1e:	d907      	bls.n	8002a30 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2204      	movs	r2, #4
 8002a24:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	22e0      	movs	r2, #224	; 0xe0
 8002a2a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e081      	b.n	8002b34 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1e6      	bne.n	8002a10 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f001 f95c 	bl	8003d00 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002a48:	f003 fb74 	bl	8006134 <HAL_RCC_GetHCLKFreq>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	4a3c      	ldr	r2, [pc, #240]	; (8002b40 <HAL_ETH_Init+0x1ac>)
 8002a50:	fba2 2303 	umull	r2, r3, r2, r3
 8002a54:	0c9a      	lsrs	r2, r3, #18
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	3a01      	subs	r2, #1
 8002a5c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f001 f8af 	bl	8003bc4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002a7c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002a80:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	f003 0303 	and.w	r3, r3, #3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d007      	beq.n	8002a9e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	22e0      	movs	r2, #224	; 0xe0
 8002a98:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e04a      	b.n	8002b34 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	f241 1308 	movw	r3, #4360	; 0x1108
 8002aa6:	4413      	add	r3, r2
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	4b26      	ldr	r3, [pc, #152]	; (8002b44 <HAL_ETH_Init+0x1b0>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6952      	ldr	r2, [r2, #20]
 8002ab2:	0052      	lsls	r2, r2, #1
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	6809      	ldr	r1, [r1, #0]
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	f241 1308 	movw	r3, #4360	; 0x1108
 8002abe:	440b      	add	r3, r1
 8002ac0:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f001 f974 	bl	8003db0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f001 f9b8 	bl	8003e3e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	3305      	adds	r3, #5
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	021a      	lsls	r2, r3, #8
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	3304      	adds	r3, #4
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	3303      	adds	r3, #3
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	061a      	lsls	r2, r3, #24
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	3302      	adds	r3, #2
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	041b      	lsls	r3, r3, #16
 8002b00:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	3301      	adds	r3, #1
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b0c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002b1a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b1c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2210      	movs	r2, #16
 8002b2a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2210      	movs	r2, #16
 8002b30:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	58024400 	.word	0x58024400
 8002b40:	431bde83 	.word	0x431bde83
 8002b44:	ffff8001 	.word	0xffff8001

08002b48 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
 8002b54:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	3310      	adds	r3, #16
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <HAL_ETH_DescAssignMemory+0x28>
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	d904      	bls.n	8002b7a <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2201      	movs	r2, #1
 8002b74:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e021      	b.n	8002bbe <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00b      	beq.n	8002bb0 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	371c      	adds	r7, #28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  if(heth->gState == HAL_ETH_STATE_READY)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bd6:	2b10      	cmp	r3, #16
 8002bd8:	d14c      	bne.n	8002c74 <HAL_ETH_Start+0xaa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2223      	movs	r2, #35	; 0x23
 8002bde:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0202 	orr.w	r2, r2, #2
 8002bee:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0201 	orr.w	r2, r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f042 0201 	orr.w	r2, r2, #1
 8002c10:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	f241 1304 	movw	r3, #4356	; 0x1104
 8002c1c:	4413      	add	r3, r2
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6811      	ldr	r1, [r2, #0]
 8002c24:	f043 0201 	orr.w	r2, r3, #1
 8002c28:	f241 1304 	movw	r3, #4356	; 0x1104
 8002c2c:	440b      	add	r3, r1
 8002c2e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	f241 1308 	movw	r3, #4360	; 0x1108
 8002c38:	4413      	add	r3, r2
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6811      	ldr	r1, [r2, #0]
 8002c40:	f043 0201 	orr.w	r2, r3, #1
 8002c44:	f241 1308 	movw	r3, #4360	; 0x1108
 8002c48:	440b      	add	r3, r1
 8002c4a:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8002c5e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002c62:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2210      	movs	r2, #16
 8002c68:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2222      	movs	r2, #34	; 0x22
 8002c6e:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002c70:	2300      	movs	r3, #0
 8002c72:	e000      	b.n	8002c76 <HAL_ETH_Start+0xac>
  }
  else
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
  }
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  if(heth->gState != HAL_ETH_STATE_RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d040      	beq.n	8002d14 <HAL_ETH_Stop+0x92>
  {
     /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2223      	movs	r2, #35	; 0x23
 8002c96:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	f241 1304 	movw	r3, #4356	; 0x1104
 8002ca0:	4413      	add	r3, r2
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6811      	ldr	r1, [r2, #0]
 8002ca8:	f023 0201 	bic.w	r2, r3, #1
 8002cac:	f241 1304 	movw	r3, #4356	; 0x1104
 8002cb0:	440b      	add	r3, r1
 8002cb2:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	f241 1308 	movw	r3, #4360	; 0x1108
 8002cbc:	4413      	add	r3, r2
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6811      	ldr	r1, [r2, #0]
 8002cc4:	f023 0201 	bic.w	r2, r3, #1
 8002cc8:	f241 1308 	movw	r3, #4360	; 0x1108
 8002ccc:	440b      	add	r3, r1
 8002cce:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0201 	bic.w	r2, r2, #1
 8002cde:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f042 0201 	orr.w	r2, r2, #1
 8002cf0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0202 	bic.w	r2, r2, #2
 8002d02:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2210      	movs	r2, #16
 8002d08:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2210      	movs	r2, #16
 8002d0e:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	e000      	b.n	8002d16 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
  }
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b086      	sub	sp, #24
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d107      	bne.n	8002d44 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d38:	f043 0201 	orr.w	r2, r3, #1
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e073      	b.n	8002e2c <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d48:	2b10      	cmp	r3, #16
 8002d4a:	d16e      	bne.n	8002e2a <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	68b9      	ldr	r1, [r7, #8]
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f001 f8d1 	bl	8003ef8 <ETH_Prepare_Tx_Descriptors>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d007      	beq.n	8002d6c <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d60:	f043 0202 	orr.w	r2, r3, #2
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e05f      	b.n	8002e2c <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	3206      	adds	r2, #6
 8002d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d78:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	629a      	str	r2, [r3, #40]	; 0x28
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d88:	2b03      	cmp	r3, #3
 8002d8a:	d904      	bls.n	8002d96 <HAL_ETH_Transmit+0x74>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d90:	1f1a      	subs	r2, r3, #4
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	3106      	adds	r1, #6
 8002da2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002da6:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002daa:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8002dac:	f7ff fc22 	bl	80025f4 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8002db2:	e034      	b.n	8002e1e <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d011      	beq.n	8002dea <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dca:	f043 0208 	orr.w	r2, r3, #8
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	22e0      	movs	r2, #224	; 0xe0
 8002de4:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e020      	b.n	8002e2c <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df0:	d015      	beq.n	8002e1e <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8002df2:	f7ff fbff 	bl	80025f4 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d302      	bcc.n	8002e08 <HAL_ETH_Transmit+0xe6>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10a      	bne.n	8002e1e <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e0c:	f043 0204 	orr.w	r2, r3, #4
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	22e0      	movs	r2, #224	; 0xe0
 8002e18:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e006      	b.n	8002e2c <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	dbc6      	blt.n	8002db4 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	e000      	b.n	8002e2c <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
  }
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b089      	sub	sp, #36	; 0x24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3344      	adds	r3, #68	; 0x44
 8002e40:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	69fa      	ldr	r2, [r7, #28]
 8002e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e50:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8002e56:	2300      	movs	r3, #0
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d06b      	beq.n	8002f3e <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	e0ce      	b.n	8003008 <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d036      	beq.n	8002eea <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	61fb      	str	r3, [r7, #28]
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d902      	bls.n	8002e9e <HAL_ETH_IsRxDataAvailable+0x6a>
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	3b04      	subs	r3, #4
 8002e9c:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	69fa      	ldr	r2, [r7, #28]
 8002ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ea6:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	db11      	blt.n	8002ed4 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00b      	beq.n	8002ed4 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	61fb      	str	r3, [r7, #28]
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	d902      	bls.n	8002ed4 <HAL_ETH_IsRxDataAvailable+0xa0>
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	3b04      	subs	r3, #4
 8002ed2:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	69fa      	ldr	r2, [r7, #28]
 8002ed8:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e08e      	b.n	8003008 <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d012      	beq.n	8002f1c <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8002efa:	2301      	movs	r3, #1
 8002efc:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	3301      	adds	r3, #1
 8002f02:	61fb      	str	r3, [r7, #28]
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	2b03      	cmp	r3, #3
 8002f08:	d902      	bls.n	8002f10 <HAL_ETH_IsRxDataAvailable+0xdc>
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	3b04      	subs	r3, #4
 8002f0e:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	69fa      	ldr	r2, [r7, #28]
 8002f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f18:	61bb      	str	r3, [r7, #24]
 8002f1a:	e010      	b.n	8002f3e <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	3301      	adds	r3, #1
 8002f26:	61fb      	str	r3, [r7, #28]
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	2b03      	cmp	r3, #3
 8002f2c:	d902      	bls.n	8002f34 <HAL_ETH_IsRxDataAvailable+0x100>
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3b04      	subs	r3, #4
 8002f32:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	69fa      	ldr	r2, [r7, #28]
 8002f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f3c:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	db02      	blt.n	8002f4c <HAL_ETH_IsRxDataAvailable+0x118>
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2b03      	cmp	r3, #3
 8002f4a:	d98e      	bls.n	8002e6a <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d056      	beq.n	8003000 <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	69fa      	ldr	r2, [r7, #28]
 8002f56:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	69fa      	ldr	r2, [r7, #28]
 8002f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f6a:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	e03b      	b.n	8002fea <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	691a      	ldr	r2, [r3, #16]
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f80:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d009      	beq.n	8002f9e <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	695a      	ldr	r2, [r3, #20]
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d005      	beq.n	8002fbe <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d20d      	bcs.n	8002fe4 <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	61fb      	str	r3, [r7, #28]
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	d902      	bls.n	8002fda <HAL_ETH_IsRxDataAvailable+0x1a6>
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	3b04      	subs	r3, #4
 8002fd8:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	69fa      	ldr	r2, [r7, #28]
 8002fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fe2:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	617b      	str	r3, [r7, #20]
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d3bf      	bcc.n	8002f72 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6819      	ldr	r1, [r3, #0]
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	f241 1328 	movw	r3, #4392	; 0x1128
 8002ffc:	440b      	add	r3, r1
 8002ffe:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2200      	movs	r2, #0
 8003004:	619a      	str	r2, [r3, #24]

  return 0;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3724      	adds	r7, #36	; 0x24
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08a      	sub	sp, #40	; 0x28
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	3344      	adds	r3, #68	; 0x44
 8003022:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 800302a:	2300      	movs	r3, #0
 800302c:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003036:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d104      	bne.n	800304c <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e07d      	b.n	8003148 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10f      	bne.n	8003074 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff feed 	bl	8002e34 <HAL_ETH_IsRxDataAvailable>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e071      	b.n	8003148 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800306e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003072:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8003074:	2300      	movs	r3, #0
 8003076:	623b      	str	r3, [r7, #32]
 8003078:	e031      	b.n	80030de <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	461a      	mov	r2, r3
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	695a      	ldr	r2, [r3, #20]
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00b      	beq.n	80030ac <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	461a      	mov	r2, r3
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	695a      	ldr	r2, [r3, #20]
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80030b4:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	3301      	adds	r3, #1
 80030ba:	627b      	str	r3, [r7, #36]	; 0x24
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	2b03      	cmp	r3, #3
 80030c0:	d902      	bls.n	80030c8 <HAL_ETH_GetRxDataBuffer+0xb4>
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	3b04      	subs	r3, #4
 80030c6:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030d0:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	3301      	adds	r3, #1
 80030dc:	623b      	str	r3, [r7, #32]
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	6a3a      	ldr	r2, [r7, #32]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d3c7      	bcc.n	800307a <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	461a      	mov	r2, r3
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	429a      	cmp	r2, r3
 800310a:	d803      	bhi.n	8003114 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	605a      	str	r2, [r3, #4]
 8003112:	e018      	b.n	8003146 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d012      	beq.n	8003142 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	695a      	ldr	r2, [r3, #20]
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	461a      	mov	r2, r3
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	1ad2      	subs	r2, r2, r3
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	605a      	str	r2, [r3, #4]
 8003140:	e001      	b.n	8003146 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3728      	adds	r7, #40	; 0x28
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	3344      	adds	r3, #68	; 0x44
 800315e:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d107      	bne.n	800317e <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff fe60 	bl	8002e34 <HAL_ETH_IsRxDataAvailable>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e017      	b.n	80031ae <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	699a      	ldr	r2, [r3, #24]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	4413      	add	r3, r2
 8003186:	3b01      	subs	r3, #1
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2b03      	cmp	r3, #3
 800318e:	d902      	bls.n	8003196 <HAL_ETH_GetRxDataLength+0x46>
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	3b04      	subs	r3, #4
 8003194:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800319e:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b089      	sub	sp, #36	; 0x24
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3344      	adds	r3, #68	; 0x44
 80031c2:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	69fa      	ldr	r2, [r7, #28]
 80031ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031d2:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e057      	b.n	8003296 <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	3301      	adds	r3, #1
 80031f2:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80031f4:	2300      	movs	r3, #0
 80031f6:	613b      	str	r3, [r7, #16]
 80031f8:	e03b      	b.n	8003272 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	691a      	ldr	r2, [r3, #16]
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003208:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d009      	beq.n	8003226 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	695a      	ldr	r2, [r3, #20]
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d005      	beq.n	8003246 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	3b01      	subs	r3, #1
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	429a      	cmp	r2, r3
 800324e:	d20d      	bcs.n	800326c <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	3301      	adds	r3, #1
 8003254:	61fb      	str	r3, [r7, #28]
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	2b03      	cmp	r3, #3
 800325a:	d902      	bls.n	8003262 <HAL_ETH_BuildRxDescriptors+0xac>
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	3b04      	subs	r3, #4
 8003260:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	69fa      	ldr	r2, [r7, #28]
 8003266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800326a:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	3301      	adds	r3, #1
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	429a      	cmp	r2, r3
 8003278:	d3bf      	bcc.n	80031fa <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6819      	ldr	r1, [r3, #0]
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	f241 1328 	movw	r3, #4392	; 0x1128
 8003284:	440b      	add	r3, r1
 8003286:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3724      	adds	r7, #36	; 0x24
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b086      	sub	sp, #24
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	60f8      	str	r0, [r7, #12]
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	607a      	str	r2, [r7, #4]
 80032ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e03e      	b.n	8003342 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80032cc:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	055b      	lsls	r3, r3, #21
 80032d8:	4313      	orrs	r3, r2
 80032da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	041b      	lsls	r3, r3, #16
 80032e6:	4313      	orrs	r3, r2
 80032e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f043 030c 	orr.w	r3, r3, #12
 80032f0:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8003304:	f7ff f976 	bl	80025f4 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800330a:	e009      	b.n	8003320 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 800330c:	f7ff f972 	bl	80025f4 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800331a:	d901      	bls.n	8003320 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e010      	b.n	8003342 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1ed      	bne.n	800330c <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003338:	b29b      	uxth	r3, r3
 800333a:	461a      	mov	r2, r3
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
	...

0800334c <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
 8003358:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e03c      	b.n	80033e8 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003376:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	055b      	lsls	r3, r3, #21
 8003382:	4313      	orrs	r3, r2
 8003384:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	041b      	lsls	r3, r3, #16
 8003390:	4313      	orrs	r3, r2
 8003392:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	f023 030c 	bic.w	r3, r3, #12
 800339a:	f043 0304 	orr.w	r3, r3, #4
 800339e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f043 0301 	orr.w	r3, r3, #1
 80033a6:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	4b10      	ldr	r3, [pc, #64]	; (80033f0 <HAL_ETH_WritePHYRegister+0xa4>)
 80033ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80033b2:	4a0f      	ldr	r2, [pc, #60]	; (80033f0 <HAL_ETH_WritePHYRegister+0xa4>)
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 80033ba:	f7ff f91b 	bl	80025f4 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80033c0:	e009      	b.n	80033d6 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80033c2:	f7ff f917 	bl	80025f4 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033d0:	d901      	bls.n	80033d6 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e008      	b.n	80033e8 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1ed      	bne.n	80033c2 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3718      	adds	r7, #24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40028000 	.word	0x40028000

080033f4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e1c3      	b.n	8003790 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 020c 	and.w	r2, r3, #12
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0310 	and.w	r3, r3, #16
 8003420:	2b00      	cmp	r3, #0
 8003422:	bf14      	ite	ne
 8003424:	2301      	movne	r3, #1
 8003426:	2300      	moveq	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	461a      	mov	r2, r3
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344a:	2b00      	cmp	r3, #0
 800344c:	bf0c      	ite	eq
 800344e:	2301      	moveq	r3, #1
 8003450:	2300      	movne	r3, #0
 8003452:	b2db      	uxtb	r3, r3
 8003454:	461a      	mov	r2, r3
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003466:	2b00      	cmp	r3, #0
 8003468:	bf14      	ite	ne
 800346a:	2301      	movne	r3, #1
 800346c:	2300      	moveq	r3, #0
 800346e:	b2db      	uxtb	r3, r3
 8003470:	461a      	mov	r2, r3
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003480:	2b00      	cmp	r3, #0
 8003482:	bf0c      	ite	eq
 8003484:	2301      	moveq	r3, #1
 8003486:	2300      	movne	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	461a      	mov	r2, r3
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800349a:	2b00      	cmp	r3, #0
 800349c:	bf14      	ite	ne
 800349e:	2301      	movne	r3, #1
 80034a0:	2300      	moveq	r3, #0
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	461a      	mov	r2, r3
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	bf14      	ite	ne
 80034b8:	2301      	movne	r3, #1
 80034ba:	2300      	moveq	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	461a      	mov	r2, r3
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	bf14      	ite	ne
 80034ee:	2301      	movne	r3, #1
 80034f0:	2300      	moveq	r3, #0
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	461a      	mov	r2, r3
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003504:	2b00      	cmp	r3, #0
 8003506:	bf0c      	ite	eq
 8003508:	2301      	moveq	r3, #1
 800350a:	2300      	movne	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	461a      	mov	r2, r3
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800351e:	2b00      	cmp	r3, #0
 8003520:	bf0c      	ite	eq
 8003522:	2301      	moveq	r3, #1
 8003524:	2300      	movne	r3, #0
 8003526:	b2db      	uxtb	r3, r3
 8003528:	461a      	mov	r2, r3
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003538:	2b00      	cmp	r3, #0
 800353a:	bf14      	ite	ne
 800353c:	2301      	movne	r3, #1
 800353e:	2300      	moveq	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	461a      	mov	r2, r3
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003552:	2b00      	cmp	r3, #0
 8003554:	bf14      	ite	ne
 8003556:	2301      	movne	r3, #1
 8003558:	2300      	moveq	r3, #0
 800355a:	b2db      	uxtb	r3, r3
 800355c:	461a      	mov	r2, r3
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800356c:	2b00      	cmp	r3, #0
 800356e:	bf14      	ite	ne
 8003570:	2301      	movne	r3, #1
 8003572:	2300      	moveq	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	461a      	mov	r2, r3
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003586:	2b00      	cmp	r3, #0
 8003588:	bf14      	ite	ne
 800358a:	2301      	movne	r3, #1
 800358c:	2300      	moveq	r3, #0
 800358e:	b2db      	uxtb	r3, r3
 8003590:	461a      	mov	r2, r3
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	bf14      	ite	ne
 80035b2:	2301      	movne	r3, #1
 80035b4:	2300      	moveq	r3, #0
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	461a      	mov	r2, r3
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	bf0c      	ite	eq
 80035e8:	2301      	moveq	r3, #1
 80035ea:	2300      	movne	r3, #0
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	461a      	mov	r2, r3
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003600:	2b00      	cmp	r3, #0
 8003602:	bf14      	ite	ne
 8003604:	2301      	movne	r3, #1
 8003606:	2300      	moveq	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	461a      	mov	r2, r3
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800361c:	2b00      	cmp	r3, #0
 800361e:	bf14      	ite	ne
 8003620:	2301      	movne	r3, #1
 8003622:	2300      	moveq	r3, #0
 8003624:	b2db      	uxtb	r3, r3
 8003626:	461a      	mov	r2, r3
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003638:	2b00      	cmp	r3, #0
 800363a:	bf14      	ite	ne
 800363c:	2301      	movne	r3, #1
 800363e:	2300      	moveq	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	461a      	mov	r2, r3
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	0e5b      	lsrs	r3, r3, #25
 8003652:	f003 021f 	and.w	r2, r3, #31
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003664:	2b00      	cmp	r3, #0
 8003666:	bf14      	ite	ne
 8003668:	2301      	movne	r3, #1
 800366a:	2300      	moveq	r3, #0
 800366c:	b2db      	uxtb	r3, r3
 800366e:	461a      	mov	r2, r3
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f003 020f 	and.w	r2, r3, #15
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	bf14      	ite	ne
 8003692:	2301      	movne	r3, #1
 8003694:	2300      	moveq	r3, #0
 8003696:	b2db      	uxtb	r3, r3
 8003698:	461a      	mov	r2, r3
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	bf0c      	ite	eq
 80036ae:	2301      	moveq	r3, #1
 80036b0:	2300      	movne	r3, #0
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	461a      	mov	r2, r3
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d0:	0c1b      	lsrs	r3, r3, #16
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	bf14      	ite	ne
 80036e8:	2301      	movne	r3, #1
 80036ea:	2300      	moveq	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	461a      	mov	r2, r3
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	bf14      	ite	ne
 8003706:	2301      	movne	r3, #1
 8003708:	2300      	moveq	r3, #0
 800370a:	b2db      	uxtb	r3, r3
 800370c:	461a      	mov	r2, r3
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800371c:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800372c:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800373c:	f003 0308 	and.w	r3, r3, #8
 8003740:	2b00      	cmp	r3, #0
 8003742:	bf14      	ite	ne
 8003744:	2301      	movne	r3, #1
 8003746:	2300      	moveq	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	461a      	mov	r2, r3
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800375a:	f003 0310 	and.w	r3, r3, #16
 800375e:	2b00      	cmp	r3, #0
 8003760:	bf14      	ite	ne
 8003762:	2301      	movne	r3, #1
 8003764:	2300      	moveq	r3, #0
 8003766:	b2db      	uxtb	r3, r3
 8003768:	461a      	mov	r2, r3
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377c:	2b00      	cmp	r3, #0
 800377e:	bf0c      	ite	eq
 8003780:	2301      	moveq	r3, #1
 8003782:	2300      	movne	r3, #0
 8003784:	b2db      	uxtb	r3, r3
 8003786:	461a      	mov	r2, r3
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e00a      	b.n	80037c6 <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b4:	2b10      	cmp	r3, #16
 80037b6:	d105      	bne.n	80037c4 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 80037b8:	6839      	ldr	r1, [r7, #0]
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f860 	bl	8003880 <ETH_SetMACConfig>

    return HAL_OK;
 80037c0:	2300      	movs	r3, #0
 80037c2:	e000      	b.n	80037c6 <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
  }
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80037e0:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037e8:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80037ea:	f002 fca3 	bl	8006134 <HAL_RCC_GetHCLKFreq>
 80037ee:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	4a1e      	ldr	r2, [pc, #120]	; (800386c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d908      	bls.n	800380a <HAL_ETH_SetMDIOClockRange+0x3a>
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	4a1d      	ldr	r2, [pc, #116]	; (8003870 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d804      	bhi.n	800380a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	e027      	b.n	800385a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	4a18      	ldr	r2, [pc, #96]	; (8003870 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d908      	bls.n	8003824 <HAL_ETH_SetMDIOClockRange+0x54>
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	4a17      	ldr	r2, [pc, #92]	; (8003874 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d204      	bcs.n	8003824 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	e01a      	b.n	800385a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	4a13      	ldr	r2, [pc, #76]	; (8003874 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d303      	bcc.n	8003834 <HAL_ETH_SetMDIOClockRange+0x64>
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	4a12      	ldr	r2, [pc, #72]	; (8003878 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d911      	bls.n	8003858 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	4a10      	ldr	r2, [pc, #64]	; (8003878 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d908      	bls.n	800384e <HAL_ETH_SetMDIOClockRange+0x7e>
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4a0f      	ldr	r2, [pc, #60]	; (800387c <HAL_ETH_SetMDIOClockRange+0xac>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d804      	bhi.n	800384e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	e005      	b.n	800385a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	e000      	b.n	800385a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003858:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003864:	bf00      	nop
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	01312cff 	.word	0x01312cff
 8003870:	02160ebf 	.word	0x02160ebf
 8003874:	03938700 	.word	0x03938700
 8003878:	05f5e0ff 	.word	0x05f5e0ff
 800387c:	08f0d17f 	.word	0x08f0d17f

08003880 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8003892:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	791b      	ldrb	r3, [r3, #4]
 8003898:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800389a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	7b1b      	ldrb	r3, [r3, #12]
 80038a0:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80038a2:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	7b5b      	ldrb	r3, [r3, #13]
 80038a8:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80038aa:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	7b9b      	ldrb	r3, [r3, #14]
 80038b0:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80038b2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	7bdb      	ldrb	r3, [r3, #15]
 80038b8:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80038ba:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	7c12      	ldrb	r2, [r2, #16]
 80038c0:	2a00      	cmp	r2, #0
 80038c2:	d102      	bne.n	80038ca <ETH_SetMACConfig+0x4a>
 80038c4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80038c8:	e000      	b.n	80038cc <ETH_SetMACConfig+0x4c>
 80038ca:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80038cc:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	7c52      	ldrb	r2, [r2, #17]
 80038d2:	2a00      	cmp	r2, #0
 80038d4:	d102      	bne.n	80038dc <ETH_SetMACConfig+0x5c>
 80038d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038da:	e000      	b.n	80038de <ETH_SetMACConfig+0x5e>
 80038dc:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80038de:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	7c9b      	ldrb	r3, [r3, #18]
 80038e4:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80038e6:	431a      	orrs	r2, r3
                                macconf->Speed |
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80038ec:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80038f2:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	7f1b      	ldrb	r3, [r3, #28]
 80038f8:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80038fa:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	7f5b      	ldrb	r3, [r3, #29]
 8003900:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003902:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	7f92      	ldrb	r2, [r2, #30]
 8003908:	2a00      	cmp	r2, #0
 800390a:	d102      	bne.n	8003912 <ETH_SetMACConfig+0x92>
 800390c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003910:	e000      	b.n	8003914 <ETH_SetMACConfig+0x94>
 8003912:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003914:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	7fdb      	ldrb	r3, [r3, #31]
 800391a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800391c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003924:	2a00      	cmp	r2, #0
 8003926:	d102      	bne.n	800392e <ETH_SetMACConfig+0xae>
 8003928:	f44f 7280 	mov.w	r2, #256	; 0x100
 800392c:	e000      	b.n	8003930 <ETH_SetMACConfig+0xb0>
 800392e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8003930:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8003936:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800393e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8003940:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8003946:	4313      	orrs	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	4b56      	ldr	r3, [pc, #344]	; (8003aac <ETH_SetMACConfig+0x22c>)
 8003952:	4013      	ands	r3, r2
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6812      	ldr	r2, [r2, #0]
 8003958:	68f9      	ldr	r1, [r7, #12]
 800395a:	430b      	orrs	r3, r1
 800395c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003962:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800396a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800396c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003974:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8003976:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800397e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8003980:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003988:	2a00      	cmp	r2, #0
 800398a:	d102      	bne.n	8003992 <ETH_SetMACConfig+0x112>
 800398c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003990:	e000      	b.n	8003994 <ETH_SetMACConfig+0x114>
 8003992:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003994:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800399a:	4313      	orrs	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	4b42      	ldr	r3, [pc, #264]	; (8003ab0 <ETH_SetMACConfig+0x230>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6812      	ldr	r2, [r2, #0]
 80039ac:	68f9      	ldr	r1, [r7, #12]
 80039ae:	430b      	orrs	r3, r1
 80039b0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039b8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80039be:	4313      	orrs	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68da      	ldr	r2, [r3, #12]
 80039c8:	4b3a      	ldr	r3, [pc, #232]	; (8003ab4 <ETH_SetMACConfig+0x234>)
 80039ca:	4013      	ands	r3, r2
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6812      	ldr	r2, [r2, #0]
 80039d0:	68f9      	ldr	r1, [r7, #12]
 80039d2:	430b      	orrs	r3, r1
 80039d4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80039dc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80039e2:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80039ea:	2a00      	cmp	r2, #0
 80039ec:	d101      	bne.n	80039f2 <ETH_SetMACConfig+0x172>
 80039ee:	2280      	movs	r2, #128	; 0x80
 80039f0:	e000      	b.n	80039f4 <ETH_SetMACConfig+0x174>
 80039f2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80039f4:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039fa:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a06:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6812      	ldr	r2, [r2, #0]
 8003a10:	68f9      	ldr	r1, [r7, #12]
 8003a12:	430b      	orrs	r3, r1
 8003a14:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003a1c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003a24:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003a26:	4313      	orrs	r3, r2
 8003a28:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a32:	f023 0103 	bic.w	r1, r3, #3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003a4a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003a66:	2a00      	cmp	r2, #0
 8003a68:	d101      	bne.n	8003a6e <ETH_SetMACConfig+0x1ee>
 8003a6a:	2240      	movs	r2, #64	; 0x40
 8003a6c:	e000      	b.n	8003a70 <ETH_SetMACConfig+0x1f0>
 8003a6e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003a70:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003a78:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003a7a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003a82:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003a84:	4313      	orrs	r3, r2
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003a90:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003aa0:	bf00      	nop
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	00048083 	.word	0x00048083
 8003ab0:	c0f88000 	.word	0xc0f88000
 8003ab4:	fffffef0 	.word	0xfffffef0

08003ab8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	4b38      	ldr	r3, [pc, #224]	; (8003bb0 <ETH_SetDMAConfig+0xf8>)
 8003ace:	4013      	ands	r3, r2
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	6812      	ldr	r2, [r2, #0]
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	6809      	ldr	r1, [r1, #0]
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8003ade:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	791b      	ldrb	r3, [r3, #4]
 8003ae4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003aea:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	7b1b      	ldrb	r3, [r3, #12]
 8003af0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003af2:	4313      	orrs	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	f241 0304 	movw	r3, #4100	; 0x1004
 8003afe:	4413      	add	r3, r2
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	4b2c      	ldr	r3, [pc, #176]	; (8003bb4 <ETH_SetDMAConfig+0xfc>)
 8003b04:	4013      	ands	r3, r2
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6811      	ldr	r1, [r2, #0]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	f241 0304 	movw	r3, #4100	; 0x1004
 8003b12:	440b      	add	r3, r1
 8003b14:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	7b5b      	ldrb	r3, [r3, #13]
 8003b1a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003b20:	4313      	orrs	r3, r2
 8003b22:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	4b22      	ldr	r3, [pc, #136]	; (8003bb8 <ETH_SetDMAConfig+0x100>)
 8003b30:	4013      	ands	r3, r2
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	6811      	ldr	r1, [r2, #0]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8003b3e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	7d1b      	ldrb	r3, [r3, #20]
 8003b48:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003b4a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	7f5b      	ldrb	r3, [r3, #29]
 8003b50:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003b52:	4313      	orrs	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	f241 1304 	movw	r3, #4356	; 0x1104
 8003b5e:	4413      	add	r3, r2
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	4b16      	ldr	r3, [pc, #88]	; (8003bbc <ETH_SetDMAConfig+0x104>)
 8003b64:	4013      	ands	r3, r2
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6811      	ldr	r1, [r2, #0]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	f241 1304 	movw	r3, #4356	; 0x1104
 8003b72:	440b      	add	r3, r1
 8003b74:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	7f1b      	ldrb	r3, [r3, #28]
 8003b7a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003b80:	4313      	orrs	r3, r2
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	f241 1308 	movw	r3, #4360	; 0x1108
 8003b8c:	4413      	add	r3, r2
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <ETH_SetDMAConfig+0x108>)
 8003b92:	4013      	ands	r3, r2
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6811      	ldr	r1, [r2, #0]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	f241 1308 	movw	r3, #4360	; 0x1108
 8003ba0:	440b      	add	r3, r1
 8003ba2:	601a      	str	r2, [r3, #0]
}
 8003ba4:	bf00      	nop
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	ffff87fd 	.word	0xffff87fd
 8003bb4:	ffff2ffe 	.word	0xffff2ffe
 8003bb8:	fffec000 	.word	0xfffec000
 8003bbc:	ffc0efef 	.word	0xffc0efef
 8003bc0:	7fc0ffff 	.word	0x7fc0ffff

08003bc4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b0a4      	sub	sp, #144	; 0x90
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003be2:	2301      	movs	r3, #1
 8003be4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003be8:	2301      	movs	r3, #1
 8003bea:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003c00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c04:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003c06:	2300      	movs	r3, #0
 8003c08:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003c10:	2300      	movs	r3, #0
 8003c12:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003c16:	2300      	movs	r3, #0
 8003c18:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003c1c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003c20:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003c22:	2300      	movs	r3, #0
 8003c24:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003c32:	2300      	movs	r3, #0
 8003c34:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8003c42:	2300      	movs	r3, #0
 8003c44:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003c46:	2300      	movs	r3, #0
 8003c48:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003c50:	2300      	movs	r3, #0
 8003c52:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003c56:	2301      	movs	r3, #1
 8003c58:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003c5c:	2320      	movs	r3, #32
 8003c5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003c62:	2301      	movs	r3, #1
 8003c64:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003c6e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003c74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c78:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003c80:	2302      	movs	r3, #2
 8003c82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003c86:	2300      	movs	r3, #0
 8003c88:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003c92:	2300      	movs	r3, #0
 8003c94:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003ca8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003cac:	4619      	mov	r1, r3
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7ff fde6 	bl	8003880 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003cce:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003cd2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003cd8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003cdc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8003ce4:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003ce8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003cea:	f107 0308 	add.w	r3, r7, #8
 8003cee:	4619      	mov	r1, r3
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7ff fee1 	bl	8003ab8 <ETH_SetDMAConfig>
}
 8003cf6:	bf00      	nop
 8003cf8:	3790      	adds	r7, #144	; 0x90
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
	...

08003d00 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003d10:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d18:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003d1a:	f002 fa0b 	bl	8006134 <HAL_RCC_GetHCLKFreq>
 8003d1e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	4a1e      	ldr	r2, [pc, #120]	; (8003d9c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d908      	bls.n	8003d3a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	4a1d      	ldr	r2, [pc, #116]	; (8003da0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d804      	bhi.n	8003d3a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	e027      	b.n	8003d8a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	4a18      	ldr	r2, [pc, #96]	; (8003da0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d908      	bls.n	8003d54 <ETH_MAC_MDIO_ClkConfig+0x54>
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	4a17      	ldr	r2, [pc, #92]	; (8003da4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d204      	bcs.n	8003d54 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003d50:	60fb      	str	r3, [r7, #12]
 8003d52:	e01a      	b.n	8003d8a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	4a13      	ldr	r2, [pc, #76]	; (8003da4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d303      	bcc.n	8003d64 <ETH_MAC_MDIO_ClkConfig+0x64>
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	4a12      	ldr	r2, [pc, #72]	; (8003da8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d911      	bls.n	8003d88 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	4a10      	ldr	r2, [pc, #64]	; (8003da8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d908      	bls.n	8003d7e <ETH_MAC_MDIO_ClkConfig+0x7e>
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	4a0f      	ldr	r2, [pc, #60]	; (8003dac <ETH_MAC_MDIO_ClkConfig+0xac>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d804      	bhi.n	8003d7e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	e005      	b.n	8003d8a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	e000      	b.n	8003d8a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003d88:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003d94:	bf00      	nop
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	01312cff 	.word	0x01312cff
 8003da0:	02160ebf 	.word	0x02160ebf
 8003da4:	03938700 	.word	0x03938700
 8003da8:	05f5e0ff 	.word	0x05f5e0ff
 8003dac:	08f0d17f 	.word	0x08f0d17f

08003db0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003db8:	2300      	movs	r3, #0
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	e01d      	b.n	8003dfa <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68d9      	ldr	r1, [r3, #12]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	4413      	add	r3, r2
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	440b      	add	r3, r1
 8003dce:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2200      	movs	r2, #0
 8003de0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	2200      	movs	r2, #0
 8003de6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003de8:	68b9      	ldr	r1, [r7, #8]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	3206      	adds	r2, #6
 8003df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	3301      	adds	r3, #1
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2b03      	cmp	r3, #3
 8003dfe:	d9de      	bls.n	8003dbe <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	f241 132c 	movw	r3, #4396	; 0x112c
 8003e0e:	4413      	add	r3, r2
 8003e10:	2203      	movs	r2, #3
 8003e12:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68d9      	ldr	r1, [r3, #12]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	f241 1314 	movw	r3, #4372	; 0x1114
 8003e20:	4413      	add	r3, r2
 8003e22:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68da      	ldr	r2, [r3, #12]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8003e30:	601a      	str	r2, [r3, #0]
}
 8003e32:	bf00      	nop
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b085      	sub	sp, #20
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003e46:	2300      	movs	r3, #0
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	e024      	b.n	8003e96 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6919      	ldr	r1, [r3, #16]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	4613      	mov	r3, r2
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	4413      	add	r3, r2
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	440b      	add	r3, r1
 8003e5c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	2200      	movs	r2, #0
 8003e68:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	2200      	movs	r2, #0
 8003e74:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	6879      	ldr	r1, [r7, #4]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	3310      	adds	r3, #16
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	3301      	adds	r3, #1
 8003e94:	60fb      	str	r3, [r7, #12]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2b03      	cmp	r3, #3
 8003e9a:	d9d7      	bls.n	8003e4c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	f241 1330 	movw	r3, #4400	; 0x1130
 8003ec2:	4413      	add	r3, r2
 8003ec4:	2203      	movs	r2, #3
 8003ec6:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6919      	ldr	r1, [r3, #16]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	f241 131c 	movw	r3, #4380	; 0x111c
 8003ed4:	4413      	add	r3, r2
 8003ed6:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	f241 1328 	movw	r3, #4392	; 0x1128
 8003ee8:	4413      	add	r3, r2
 8003eea:	6019      	str	r1, [r3, #0]
}
 8003eec:	bf00      	nop
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b08d      	sub	sp, #52	; 0x34
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	3318      	adds	r3, #24
 8003f08:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 8003f16:	2300      	movs	r3, #0
 8003f18:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f22:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f3a:	d007      	beq.n	8003f4c <ETH_Prepare_Tx_Descriptors+0x54>
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f40:	3304      	adds	r3, #4
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e24a      	b.n	80043e6 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d044      	beq.n	8003fe6 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	68da      	ldr	r2, [r3, #12]
 8003f60:	4b72      	ldr	r3, [pc, #456]	; (800412c <ETH_Prepare_Tx_Descriptors+0x234>)
 8003f62:	4013      	ands	r3, r2
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8003f6e:	6a3b      	ldr	r3, [r7, #32]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003f88:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0308 	and.w	r3, r3, #8
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d027      	beq.n	8003fe6 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa0:	041b      	lsls	r3, r3, #16
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003fd4:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003fe4:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0310 	and.w	r3, r3, #16
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00e      	beq.n	8004010 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	689a      	ldr	r2, [r3, #8]
 8003ff6:	4b4e      	ldr	r3, [pc, #312]	; (8004130 <ETH_Prepare_Tx_Descriptors+0x238>)
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	6992      	ldr	r2, [r2, #24]
 8003ffe:	431a      	orrs	r2, r3
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b00      	cmp	r3, #0
 800401a:	d105      	bne.n	8004028 <ETH_Prepare_Tx_Descriptors+0x130>
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0310 	and.w	r3, r3, #16
 8004024:	2b00      	cmp	r3, #0
 8004026:	d030      	beq.n	800408a <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8004028:	6a3b      	ldr	r3, [r7, #32]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004042:	3301      	adds	r3, #1
 8004044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004048:	2b03      	cmp	r3, #3
 800404a:	d902      	bls.n	8004052 <ETH_Prepare_Tx_Descriptors+0x15a>
 800404c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404e:	3b04      	subs	r3, #4
 8004050:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800405a:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 800405c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405e:	3301      	adds	r3, #1
 8004060:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800406a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800406e:	d10c      	bne.n	800408a <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004078:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8004086:	2302      	movs	r3, #2
 8004088:	e1ad      	b.n	80043e6 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800408a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408c:	3301      	adds	r3, #1
 800408e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	461a      	mov	r2, r3
 8004096:	6a3b      	ldr	r3, [r7, #32]
 8004098:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	689a      	ldr	r2, [r3, #8]
 800409e:	4b24      	ldr	r3, [pc, #144]	; (8004130 <ETH_Prepare_Tx_Descriptors+0x238>)
 80040a0:	4013      	ands	r3, r2
 80040a2:	69fa      	ldr	r2, [r7, #28]
 80040a4:	6852      	ldr	r2, [r2, #4]
 80040a6:	431a      	orrs	r2, r3
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d012      	beq.n	80040da <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	6a3b      	ldr	r3, [r7, #32]
 80040c2:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	4b1a      	ldr	r3, [pc, #104]	; (8004134 <ETH_Prepare_Tx_Descriptors+0x23c>)
 80040ca:	4013      	ands	r3, r2
 80040cc:	69fa      	ldr	r2, [r7, #28]
 80040ce:	6852      	ldr	r2, [r2, #4]
 80040d0:	0412      	lsls	r2, r2, #16
 80040d2:	431a      	orrs	r2, r3
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	609a      	str	r2, [r3, #8]
 80040d8:	e008      	b.n	80040ec <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80040da:	6a3b      	ldr	r3, [r7, #32]
 80040dc:	2200      	movs	r2, #0
 80040de:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	4b13      	ldr	r3, [pc, #76]	; (8004134 <ETH_Prepare_Tx_Descriptors+0x23c>)
 80040e6:	4013      	ands	r3, r2
 80040e8:	6a3a      	ldr	r2, [r7, #32]
 80040ea:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0310 	and.w	r3, r3, #16
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d021      	beq.n	800413c <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80040f8:	6a3b      	ldr	r3, [r7, #32]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	04db      	lsls	r3, r3, #19
 8004106:	431a      	orrs	r2, r3
 8004108:	6a3b      	ldr	r3, [r7, #32]
 800410a:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	68da      	ldr	r2, [r3, #12]
 8004110:	4b09      	ldr	r3, [pc, #36]	; (8004138 <ETH_Prepare_Tx_Descriptors+0x240>)
 8004112:	4013      	ands	r3, r2
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	69d2      	ldr	r2, [r2, #28]
 8004118:	431a      	orrs	r2, r3
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004126:	6a3b      	ldr	r3, [r7, #32]
 8004128:	60da      	str	r2, [r3, #12]
 800412a:	e02e      	b.n	800418a <ETH_Prepare_Tx_Descriptors+0x292>
 800412c:	ffff0000 	.word	0xffff0000
 8004130:	ffffc000 	.word	0xffffc000
 8004134:	c000ffff 	.word	0xc000ffff
 8004138:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800413c:	6a3b      	ldr	r3, [r7, #32]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	4b93      	ldr	r3, [pc, #588]	; (8004390 <ETH_Prepare_Tx_Descriptors+0x498>)
 8004142:	4013      	ands	r3, r2
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	6852      	ldr	r2, [r2, #4]
 8004148:	431a      	orrs	r2, r3
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d008      	beq.n	800416c <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800415a:	6a3b      	ldr	r3, [r7, #32]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	431a      	orrs	r2, r3
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0320 	and.w	r3, r3, #32
 8004174:	2b00      	cmp	r3, #0
 8004176:	d008      	beq.n	800418a <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	431a      	orrs	r2, r3
 8004186:	6a3b      	ldr	r3, [r7, #32]
 8004188:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2b00      	cmp	r3, #0
 8004194:	d008      	beq.n	80041a8 <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8004196:	6a3b      	ldr	r3, [r7, #32]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a2:	431a      	orrs	r2, r3
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80041b0:	6a3b      	ldr	r3, [r7, #32]
 80041b2:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80041bc:	6a3b      	ldr	r3, [r7, #32]
 80041be:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80041c8:	6a3b      	ldr	r3, [r7, #32]
 80041ca:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 80cb 	beq.w	8004370 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	431a      	orrs	r2, r3
 80041e8:	6a3b      	ldr	r3, [r7, #32]
 80041ea:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80041ec:	e0c0      	b.n	8004370 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80041ee:	6a3b      	ldr	r3, [r7, #32]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80041f6:	6a3b      	ldr	r3, [r7, #32]
 80041f8:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80041fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fc:	3301      	adds	r3, #1
 80041fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004202:	2b03      	cmp	r3, #3
 8004204:	d902      	bls.n	800420c <ETH_Prepare_Tx_Descriptors+0x314>
 8004206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004208:	3b04      	subs	r3, #4
 800420a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004214:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8004216:	6a3b      	ldr	r3, [r7, #32]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800421e:	6a3b      	ldr	r3, [r7, #32]
 8004220:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004222:	6a3b      	ldr	r3, [r7, #32]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800422a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800422e:	d007      	beq.n	8004240 <ETH_Prepare_Tx_Descriptors+0x348>
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004234:	3304      	adds	r3, #4
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d026      	beq.n	800428e <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800424c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 800424e:	2300      	movs	r3, #0
 8004250:	627b      	str	r3, [r7, #36]	; 0x24
 8004252:	e016      	b.n	8004282 <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004254:	6a3b      	ldr	r3, [r7, #32]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800425c:	6a3b      	ldr	r3, [r7, #32]
 800425e:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004262:	3301      	adds	r3, #1
 8004264:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004268:	2b03      	cmp	r3, #3
 800426a:	d902      	bls.n	8004272 <ETH_Prepare_Tx_Descriptors+0x37a>
 800426c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426e:	3b04      	subs	r3, #4
 8004270:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800427a:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 800427c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427e:	3301      	adds	r3, #1
 8004280:	627b      	str	r3, [r7, #36]	; 0x24
 8004282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004286:	429a      	cmp	r2, r3
 8004288:	d3e4      	bcc.n	8004254 <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 800428a:	2302      	movs	r3, #2
 800428c:	e0ab      	b.n	80043e6 <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 800428e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004290:	3301      	adds	r3, #1
 8004292:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	461a      	mov	r2, r3
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	4b3a      	ldr	r3, [pc, #232]	; (8004394 <ETH_Prepare_Tx_Descriptors+0x49c>)
 80042aa:	4013      	ands	r3, r2
 80042ac:	69fa      	ldr	r2, [r7, #28]
 80042ae:	6852      	ldr	r2, [r2, #4]
 80042b0:	431a      	orrs	r2, r3
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d012      	beq.n	80042e4 <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	461a      	mov	r2, r3
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	689a      	ldr	r2, [r3, #8]
 80042d2:	4b31      	ldr	r3, [pc, #196]	; (8004398 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80042d4:	4013      	ands	r3, r2
 80042d6:	69fa      	ldr	r2, [r7, #28]
 80042d8:	6852      	ldr	r2, [r2, #4]
 80042da:	0412      	lsls	r2, r2, #16
 80042dc:	431a      	orrs	r2, r3
 80042de:	6a3b      	ldr	r3, [r7, #32]
 80042e0:	609a      	str	r2, [r3, #8]
 80042e2:	e008      	b.n	80042f6 <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	2200      	movs	r2, #0
 80042e8:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80042ea:	6a3b      	ldr	r3, [r7, #32]
 80042ec:	689a      	ldr	r2, [r3, #8]
 80042ee:	4b2a      	ldr	r3, [pc, #168]	; (8004398 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	6a3a      	ldr	r2, [r7, #32]
 80042f4:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0310 	and.w	r3, r3, #16
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00f      	beq.n	8004322 <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	4b25      	ldr	r3, [pc, #148]	; (800439c <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8004308:	4013      	ands	r3, r2
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	69d2      	ldr	r2, [r2, #28]
 800430e:	431a      	orrs	r2, r3
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	60da      	str	r2, [r3, #12]
 8004320:	e017      	b.n	8004352 <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	4b1a      	ldr	r3, [pc, #104]	; (8004390 <ETH_Prepare_Tx_Descriptors+0x498>)
 8004328:	4013      	ands	r3, r2
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	6852      	ldr	r2, [r2, #4]
 800432e:	431a      	orrs	r2, r3
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b00      	cmp	r3, #0
 800433e:	d008      	beq.n	8004352 <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8004340:	6a3b      	ldr	r3, [r7, #32]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	431a      	orrs	r2, r3
 800434e:	6a3b      	ldr	r3, [r7, #32]
 8004350:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	3301      	adds	r3, #1
 8004356:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004358:	6a3b      	ldr	r3, [r7, #32]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8004364:	6a3b      	ldr	r3, [r7, #32]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	2b00      	cmp	r3, #0
 8004376:	f47f af3a 	bne.w	80041ee <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00f      	beq.n	80043a0 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8004380:	6a3b      	ldr	r3, [r7, #32]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	609a      	str	r2, [r3, #8]
 800438c:	e00e      	b.n	80043ac <ETH_Prepare_Tx_Descriptors+0x4b4>
 800438e:	bf00      	nop
 8004390:	ffff8000 	.word	0xffff8000
 8004394:	ffffc000 	.word	0xffffc000
 8004398:	c000ffff 	.word	0xc000ffff
 800439c:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043bc:	6979      	ldr	r1, [r7, #20]
 80043be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c0:	3304      	adds	r3, #4
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	440b      	add	r3, r1
 80043c6:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043cc:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80043ce:	b672      	cpsid	i
}
 80043d0:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	4413      	add	r3, r2
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80043e0:	b662      	cpsie	i
}
 80043e2:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3734      	adds	r7, #52	; 0x34
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop

080043f4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b098      	sub	sp, #96	; 0x60
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80043fc:	4a84      	ldr	r2, [pc, #528]	; (8004610 <HAL_FDCAN_Init+0x21c>)
 80043fe:	f107 030c 	add.w	r3, r7, #12
 8004402:	4611      	mov	r1, r2
 8004404:	224c      	movs	r2, #76	; 0x4c
 8004406:	4618      	mov	r0, r3
 8004408:	f010 fcaa 	bl	8014d60 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e1ca      	b.n	80047ac <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a7e      	ldr	r2, [pc, #504]	; (8004614 <HAL_FDCAN_Init+0x220>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d106      	bne.n	800442e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004428:	461a      	mov	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d106      	bne.n	8004448 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7fc fcc4 	bl	8000dd0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	699a      	ldr	r2, [r3, #24]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 0210 	bic.w	r2, r2, #16
 8004456:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004458:	f7fe f8cc 	bl	80025f4 <HAL_GetTick>
 800445c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800445e:	e014      	b.n	800448a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004460:	f7fe f8c8 	bl	80025f4 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b0a      	cmp	r3, #10
 800446c:	d90d      	bls.n	800448a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004474:	f043 0201 	orr.w	r2, r3, #1
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2203      	movs	r2, #3
 8004482:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e190      	b.n	80047ac <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	f003 0308 	and.w	r3, r3, #8
 8004494:	2b08      	cmp	r3, #8
 8004496:	d0e3      	beq.n	8004460 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699a      	ldr	r2, [r3, #24]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0201 	orr.w	r2, r2, #1
 80044a6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044a8:	f7fe f8a4 	bl	80025f4 <HAL_GetTick>
 80044ac:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80044ae:	e014      	b.n	80044da <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80044b0:	f7fe f8a0 	bl	80025f4 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b0a      	cmp	r3, #10
 80044bc:	d90d      	bls.n	80044da <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044c4:	f043 0201 	orr.w	r2, r3, #1
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2203      	movs	r2, #3
 80044d2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e168      	b.n	80047ac <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0e3      	beq.n	80044b0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699a      	ldr	r2, [r3, #24]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0202 	orr.w	r2, r2, #2
 80044f6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	7c1b      	ldrb	r3, [r3, #16]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d108      	bne.n	8004512 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699a      	ldr	r2, [r3, #24]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800450e:	619a      	str	r2, [r3, #24]
 8004510:	e007      	b.n	8004522 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	699a      	ldr	r2, [r3, #24]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004520:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	7c5b      	ldrb	r3, [r3, #17]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d108      	bne.n	800453c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	699a      	ldr	r2, [r3, #24]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004538:	619a      	str	r2, [r3, #24]
 800453a:	e007      	b.n	800454c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	699a      	ldr	r2, [r3, #24]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800454a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	7c9b      	ldrb	r3, [r3, #18]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d108      	bne.n	8004566 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699a      	ldr	r2, [r3, #24]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004562:	619a      	str	r2, [r3, #24]
 8004564:	e007      	b.n	8004576 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	699a      	ldr	r2, [r3, #24]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004574:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	699a      	ldr	r2, [r3, #24]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800459a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	691a      	ldr	r2, [r3, #16]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0210 	bic.w	r2, r2, #16
 80045aa:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d108      	bne.n	80045c6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	699a      	ldr	r2, [r3, #24]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0204 	orr.w	r2, r2, #4
 80045c2:	619a      	str	r2, [r3, #24]
 80045c4:	e030      	b.n	8004628 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d02c      	beq.n	8004628 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d020      	beq.n	8004618 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	699a      	ldr	r2, [r3, #24]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80045e4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f042 0210 	orr.w	r2, r2, #16
 80045f4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	2b03      	cmp	r3, #3
 80045fc:	d114      	bne.n	8004628 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	699a      	ldr	r2, [r3, #24]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f042 0220 	orr.w	r2, r2, #32
 800460c:	619a      	str	r2, [r3, #24]
 800460e:	e00b      	b.n	8004628 <HAL_FDCAN_Init+0x234>
 8004610:	08015eb8 	.word	0x08015eb8
 8004614:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	699a      	ldr	r2, [r3, #24]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 0220 	orr.w	r2, r2, #32
 8004626:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	3b01      	subs	r3, #1
 800462e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	3b01      	subs	r3, #1
 8004636:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004638:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004640:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	3b01      	subs	r3, #1
 800464a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004650:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004652:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800465c:	d115      	bne.n	800468a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004662:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004668:	3b01      	subs	r3, #1
 800466a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800466c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004672:	3b01      	subs	r3, #1
 8004674:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004676:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	3b01      	subs	r3, #1
 8004680:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004686:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004688:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00a      	beq.n	80046a8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b0:	4413      	add	r3, r2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d012      	beq.n	80046dc <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80046be:	f023 0107 	bic.w	r1, r3, #7
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80046cc:	4413      	add	r3, r2
 80046ce:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d012      	beq.n	800470a <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80046ec:	f023 0107 	bic.w	r1, r3, #7
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80046fa:	4413      	add	r3, r2
 80046fc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800470e:	2b00      	cmp	r3, #0
 8004710:	d013      	beq.n	800473a <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800471a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004728:	4413      	add	r3, r2
 800472a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800472e:	011a      	lsls	r2, r3, #4
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800473e:	2b00      	cmp	r3, #0
 8004740:	d013      	beq.n	800476a <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800474a:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004758:	4413      	add	r3, r2
 800475a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800475e:	021a      	lsls	r2, r3, #8
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a11      	ldr	r2, [pc, #68]	; (80047b4 <HAL_FDCAN_Init+0x3c0>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d107      	bne.n	8004784 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	689a      	ldr	r2, [r3, #8]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f022 0203 	bic.w	r2, r2, #3
 8004782:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 f9af 	bl	8004b00 <FDCAN_CalcultateRamBlockAddresses>
 80047a2:	4603      	mov	r3, r0
 80047a4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80047a8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3760      	adds	r7, #96	; 0x60
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	4000a000 	.word	0x4000a000

080047b8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b087      	sub	sp, #28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80047c8:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80047ca:	7bfb      	ldrb	r3, [r7, #15]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d002      	beq.n	80047d6 <HAL_FDCAN_ConfigFilter+0x1e>
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d157      	bne.n	8004886 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d12b      	bne.n	8004836 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	2b07      	cmp	r3, #7
 80047e4:	d10d      	bne.n	8004802 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	69db      	ldr	r3, [r3, #28]
 80047f0:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80047f2:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80047f8:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80047fa:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 80047fe:	617b      	str	r3, [r7, #20]
 8004800:	e00e      	b.n	8004820 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800480e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8004816:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800481c:	4313      	orrs	r3, r2
 800481e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	e025      	b.n	8004882 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	075a      	lsls	r2, r3, #29
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	4313      	orrs	r3, r2
 8004842:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	2b07      	cmp	r3, #7
 800484a:	d103      	bne.n	8004854 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	613b      	str	r3, [r7, #16]
 8004852:	e006      	b.n	8004862 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	079a      	lsls	r2, r3, #30
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	4313      	orrs	r3, r2
 8004860:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	4413      	add	r3, r2
 800486e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	3304      	adds	r3, #4
 800487a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8004882:	2300      	movs	r3, #0
 8004884:	e008      	b.n	8004898 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800488c:	f043 0202 	orr.w	r2, r3, #2
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
  }
}
 8004898:	4618      	mov	r0, r3
 800489a:	371c      	adds	r7, #28
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
 80048b0:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d110      	bne.n	80048e0 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80048c6:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 80048cc:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80048d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 80048dc:	2300      	movs	r3, #0
 80048de:	e008      	b.n	80048f2 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048e6:	f043 0204 	orr.w	r2, r3, #4
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
  }
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3714      	adds	r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80048fe:	b480      	push	{r7}
 8004900:	b083      	sub	sp, #12
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b01      	cmp	r3, #1
 8004910:	d111      	bne.n	8004936 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2202      	movs	r2, #2
 8004916:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	699a      	ldr	r2, [r3, #24]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 0201 	bic.w	r2, r2, #1
 8004928:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8004932:	2300      	movs	r3, #0
 8004934:	e008      	b.n	8004948 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800493c:	f043 0204 	orr.w	r2, r3, #4
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
  }
}
 8004948:	4618      	mov	r0, r3
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b02      	cmp	r3, #2
 800496a:	d141      	bne.n	80049f0 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004974:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d109      	bne.n	8004990 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004982:	f043 0220 	orr.w	r2, r3, #32
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e038      	b.n	8004a02 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d009      	beq.n	80049b4 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e026      	b.n	8004a02 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80049bc:	0c1b      	lsrs	r3, r3, #16
 80049be:	f003 031f 	and.w	r3, r3, #31
 80049c2:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	68b9      	ldr	r1, [r7, #8]
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f000 fa1e 	bl	8004e0c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2101      	movs	r1, #1
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	fa01 f202 	lsl.w	r2, r1, r2
 80049dc:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80049e0:	2201      	movs	r2, #1
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	409a      	lsls	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 80049ec:	2300      	movs	r3, #0
 80049ee:	e008      	b.n	8004a02 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049f6:	f043 0208 	orr.w	r2, r3, #8
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
  }
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3718      	adds	r7, #24
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004a1e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004a20:	7dfb      	ldrb	r3, [r7, #23]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d002      	beq.n	8004a2c <HAL_FDCAN_ActivateNotification+0x20>
 8004a26:	7dfb      	ldrb	r3, [r7, #23]
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d155      	bne.n	8004ad8 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	4013      	ands	r3, r2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d108      	bne.n	8004a4c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f042 0201 	orr.w	r2, r2, #1
 8004a48:	65da      	str	r2, [r3, #92]	; 0x5c
 8004a4a:	e014      	b.n	8004a76 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	4013      	ands	r3, r2
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d108      	bne.n	8004a6e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 0202 	orr.w	r2, r2, #2
 8004a6a:	65da      	str	r2, [r3, #92]	; 0x5c
 8004a6c:	e003      	b.n	8004a76 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2203      	movs	r2, #3
 8004a74:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d009      	beq.n	8004a94 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d009      	beq.n	8004ab2 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	4b0f      	ldr	r3, [pc, #60]	; (8004af8 <HAL_FDCAN_ActivateNotification+0xec>)
 8004abc:	4013      	ands	r3, r2
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	6812      	ldr	r2, [r2, #0]
 8004ac2:	430b      	orrs	r3, r1
 8004ac4:	6553      	str	r3, [r2, #84]	; 0x54
 8004ac6:	4b0d      	ldr	r3, [pc, #52]	; (8004afc <HAL_FDCAN_ActivateNotification+0xf0>)
 8004ac8:	695a      	ldr	r2, [r3, #20]
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	0f9b      	lsrs	r3, r3, #30
 8004ace:	490b      	ldr	r1, [pc, #44]	; (8004afc <HAL_FDCAN_ActivateNotification+0xf0>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	e008      	b.n	8004aea <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ade:	f043 0202 	orr.w	r2, r3, #2
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
  }
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	371c      	adds	r7, #28
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	3fcfffff 	.word	0x3fcfffff
 8004afc:	4000a800 	.word	0x4000a800

08004b00 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b0c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004b16:	4ba7      	ldr	r3, [pc, #668]	; (8004db4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b18:	4013      	ands	r3, r2
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	0091      	lsls	r1, r2, #2
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	6812      	ldr	r2, [r2, #0]
 8004b22:	430b      	orrs	r3, r1
 8004b24:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b30:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b38:	041a      	lsls	r2, r3, #16
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b56:	4b97      	ldr	r3, [pc, #604]	; (8004db4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b58:	4013      	ands	r3, r2
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	0091      	lsls	r1, r2, #2
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	6812      	ldr	r2, [r2, #0]
 8004b62:	430b      	orrs	r3, r1
 8004b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b70:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b78:	041a      	lsls	r2, r3, #16
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b88:	005b      	lsls	r3, r3, #1
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004b98:	4b86      	ldr	r3, [pc, #536]	; (8004db4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	0091      	lsls	r1, r2, #2
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6812      	ldr	r2, [r2, #0]
 8004ba4:	430b      	orrs	r3, r1
 8004ba6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004bb2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bba:	041a      	lsls	r2, r3, #16
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004bce:	fb02 f303 	mul.w	r3, r2, r3
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004be0:	4b74      	ldr	r3, [pc, #464]	; (8004db4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004be2:	4013      	ands	r3, r2
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	0091      	lsls	r1, r2, #2
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6812      	ldr	r2, [r2, #0]
 8004bec:	430b      	orrs	r3, r1
 8004bee:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004bfa:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c02:	041a      	lsls	r2, r3, #16
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004c16:	fb02 f303 	mul.w	r3, r2, r3
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004c28:	4b62      	ldr	r3, [pc, #392]	; (8004db4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	0091      	lsls	r1, r2, #2
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6812      	ldr	r2, [r2, #0]
 8004c34:	430b      	orrs	r3, r1
 8004c36:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004c42:	fb02 f303 	mul.w	r3, r2, r3
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	4413      	add	r3, r2
 8004c4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004c54:	4b57      	ldr	r3, [pc, #348]	; (8004db4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c56:	4013      	ands	r3, r2
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	0091      	lsls	r1, r2, #2
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6812      	ldr	r2, [r2, #0]
 8004c60:	430b      	orrs	r3, r1
 8004c62:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004c6e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c76:	041a      	lsls	r2, r3, #16
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004c96:	4b47      	ldr	r3, [pc, #284]	; (8004db4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c98:	4013      	ands	r3, r2
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	0091      	lsls	r1, r2, #2
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	6812      	ldr	r2, [r2, #0]
 8004ca2:	430b      	orrs	r3, r1
 8004ca4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004cb0:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb8:	041a      	lsls	r2, r3, #16
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004ccc:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cd4:	061a      	lsls	r2, r3, #24
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ce4:	4b34      	ldr	r3, [pc, #208]	; (8004db8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004ce6:	4413      	add	r3, r2
 8004ce8:	009a      	lsls	r2, r3, #2
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	441a      	add	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	441a      	add	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	6879      	ldr	r1, [r7, #4]
 8004d18:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004d1a:	fb01 f303 	mul.w	r3, r1, r3
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	441a      	add	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d2e:	6879      	ldr	r1, [r7, #4]
 8004d30:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004d32:	fb01 f303 	mul.w	r3, r1, r3
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	441a      	add	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d46:	6879      	ldr	r1, [r7, #4]
 8004d48:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004d4a:	fb01 f303 	mul.w	r3, r1, r3
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	441a      	add	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	441a      	add	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d76:	6879      	ldr	r1, [r7, #4]
 8004d78:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004d7a:	fb01 f303 	mul.w	r3, r1, r3
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	441a      	add	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d92:	6879      	ldr	r1, [r7, #4]
 8004d94:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004d96:	fb01 f303 	mul.w	r3, r1, r3
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	441a      	add	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004daa:	4a04      	ldr	r2, [pc, #16]	; (8004dbc <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d915      	bls.n	8004ddc <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004db0:	e006      	b.n	8004dc0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004db2:	bf00      	nop
 8004db4:	ffff0003 	.word	0xffff0003
 8004db8:	10002b00 	.word	0x10002b00
 8004dbc:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dc6:	f043 0220 	orr.w	r2, r3, #32
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2203      	movs	r2, #3
 8004dd4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e010      	b.n	8004dfe <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	e005      	b.n	8004df0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	3304      	adds	r3, #4
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d3f3      	bcc.n	8004de4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop

08004e0c <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b089      	sub	sp, #36	; 0x24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
 8004e18:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10a      	bne.n	8004e38 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004e2a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004e32:	4313      	orrs	r3, r2
 8004e34:	61fb      	str	r3, [r7, #28]
 8004e36:	e00a      	b.n	8004e4e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004e40:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004e46:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004e48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e4c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8004e58:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004e5e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004e64:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e78:	6839      	ldr	r1, [r7, #0]
 8004e7a:	fb01 f303 	mul.w	r3, r1, r3
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	69fa      	ldr	r2, [r7, #28]
 8004e88:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	3304      	adds	r3, #4
 8004e8e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	3304      	adds	r3, #4
 8004e9a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	e020      	b.n	8004ee4 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	3303      	adds	r3, #3
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	3302      	adds	r3, #2
 8004eb2:	6879      	ldr	r1, [r7, #4]
 8004eb4:	440b      	add	r3, r1
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8004eba:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	6879      	ldr	r1, [r7, #4]
 8004ec2:	440b      	add	r3, r1
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8004ec8:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004eca:	6879      	ldr	r1, [r7, #4]
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	440a      	add	r2, r1
 8004ed0:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8004ed2:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	3304      	adds	r3, #4
 8004edc:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	3304      	adds	r3, #4
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	0c1b      	lsrs	r3, r3, #16
 8004eea:	4a06      	ldr	r2, [pc, #24]	; (8004f04 <FDCAN_CopyMessageToRAM+0xf8>)
 8004eec:	5cd3      	ldrb	r3, [r2, r3]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d3d5      	bcc.n	8004ea2 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8004ef6:	bf00      	nop
 8004ef8:	bf00      	nop
 8004efa:	3724      	adds	r7, #36	; 0x24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	080196c4 	.word	0x080196c4

08004f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b089      	sub	sp, #36	; 0x24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004f16:	4b86      	ldr	r3, [pc, #536]	; (8005130 <HAL_GPIO_Init+0x228>)
 8004f18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f1a:	e18c      	b.n	8005236 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	2101      	movs	r1, #1
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	fa01 f303 	lsl.w	r3, r1, r3
 8004f28:	4013      	ands	r3, r2
 8004f2a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f000 817e 	beq.w	8005230 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f003 0303 	and.w	r3, r3, #3
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d005      	beq.n	8004f4c <HAL_GPIO_Init+0x44>
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f003 0303 	and.w	r3, r3, #3
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d130      	bne.n	8004fae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	2203      	movs	r2, #3
 8004f58:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5c:	43db      	mvns	r3, r3
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	4013      	ands	r3, r2
 8004f62:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	68da      	ldr	r2, [r3, #12]
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	69ba      	ldr	r2, [r7, #24]
 8004f7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f82:	2201      	movs	r2, #1
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8a:	43db      	mvns	r3, r3
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	4013      	ands	r3, r2
 8004f90:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	091b      	lsrs	r3, r3, #4
 8004f98:	f003 0201 	and.w	r2, r3, #1
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa2:	69ba      	ldr	r2, [r7, #24]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f003 0303 	and.w	r3, r3, #3
 8004fb6:	2b03      	cmp	r3, #3
 8004fb8:	d017      	beq.n	8004fea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	2203      	movs	r2, #3
 8004fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fca:	43db      	mvns	r3, r3
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	4013      	ands	r3, r2
 8004fd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	689a      	ldr	r2, [r3, #8]
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	fa02 f303 	lsl.w	r3, r2, r3
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	69ba      	ldr	r2, [r7, #24]
 8004fe8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f003 0303 	and.w	r3, r3, #3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d123      	bne.n	800503e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	08da      	lsrs	r2, r3, #3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	3208      	adds	r2, #8
 8004ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	f003 0307 	and.w	r3, r3, #7
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	220f      	movs	r2, #15
 800500e:	fa02 f303 	lsl.w	r3, r2, r3
 8005012:	43db      	mvns	r3, r3
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	4013      	ands	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	691a      	ldr	r2, [r3, #16]
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	fa02 f303 	lsl.w	r3, r2, r3
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	4313      	orrs	r3, r2
 800502e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	08da      	lsrs	r2, r3, #3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3208      	adds	r2, #8
 8005038:	69b9      	ldr	r1, [r7, #24]
 800503a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	2203      	movs	r2, #3
 800504a:	fa02 f303 	lsl.w	r3, r2, r3
 800504e:	43db      	mvns	r3, r3
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	4013      	ands	r3, r2
 8005054:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f003 0203 	and.w	r2, r3, #3
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	4313      	orrs	r3, r2
 800506a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 80d8 	beq.w	8005230 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005080:	4b2c      	ldr	r3, [pc, #176]	; (8005134 <HAL_GPIO_Init+0x22c>)
 8005082:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005086:	4a2b      	ldr	r2, [pc, #172]	; (8005134 <HAL_GPIO_Init+0x22c>)
 8005088:	f043 0302 	orr.w	r3, r3, #2
 800508c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005090:	4b28      	ldr	r3, [pc, #160]	; (8005134 <HAL_GPIO_Init+0x22c>)
 8005092:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800509e:	4a26      	ldr	r2, [pc, #152]	; (8005138 <HAL_GPIO_Init+0x230>)
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	089b      	lsrs	r3, r3, #2
 80050a4:	3302      	adds	r3, #2
 80050a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	f003 0303 	and.w	r3, r3, #3
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	220f      	movs	r2, #15
 80050b6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ba:	43db      	mvns	r3, r3
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	4013      	ands	r3, r2
 80050c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a1d      	ldr	r2, [pc, #116]	; (800513c <HAL_GPIO_Init+0x234>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d04a      	beq.n	8005160 <HAL_GPIO_Init+0x258>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a1c      	ldr	r2, [pc, #112]	; (8005140 <HAL_GPIO_Init+0x238>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d02b      	beq.n	800512a <HAL_GPIO_Init+0x222>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a1b      	ldr	r2, [pc, #108]	; (8005144 <HAL_GPIO_Init+0x23c>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d025      	beq.n	8005126 <HAL_GPIO_Init+0x21e>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a1a      	ldr	r2, [pc, #104]	; (8005148 <HAL_GPIO_Init+0x240>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d01f      	beq.n	8005122 <HAL_GPIO_Init+0x21a>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a19      	ldr	r2, [pc, #100]	; (800514c <HAL_GPIO_Init+0x244>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d019      	beq.n	800511e <HAL_GPIO_Init+0x216>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a18      	ldr	r2, [pc, #96]	; (8005150 <HAL_GPIO_Init+0x248>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d013      	beq.n	800511a <HAL_GPIO_Init+0x212>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a17      	ldr	r2, [pc, #92]	; (8005154 <HAL_GPIO_Init+0x24c>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d00d      	beq.n	8005116 <HAL_GPIO_Init+0x20e>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a16      	ldr	r2, [pc, #88]	; (8005158 <HAL_GPIO_Init+0x250>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d007      	beq.n	8005112 <HAL_GPIO_Init+0x20a>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a15      	ldr	r2, [pc, #84]	; (800515c <HAL_GPIO_Init+0x254>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d101      	bne.n	800510e <HAL_GPIO_Init+0x206>
 800510a:	2309      	movs	r3, #9
 800510c:	e029      	b.n	8005162 <HAL_GPIO_Init+0x25a>
 800510e:	230a      	movs	r3, #10
 8005110:	e027      	b.n	8005162 <HAL_GPIO_Init+0x25a>
 8005112:	2307      	movs	r3, #7
 8005114:	e025      	b.n	8005162 <HAL_GPIO_Init+0x25a>
 8005116:	2306      	movs	r3, #6
 8005118:	e023      	b.n	8005162 <HAL_GPIO_Init+0x25a>
 800511a:	2305      	movs	r3, #5
 800511c:	e021      	b.n	8005162 <HAL_GPIO_Init+0x25a>
 800511e:	2304      	movs	r3, #4
 8005120:	e01f      	b.n	8005162 <HAL_GPIO_Init+0x25a>
 8005122:	2303      	movs	r3, #3
 8005124:	e01d      	b.n	8005162 <HAL_GPIO_Init+0x25a>
 8005126:	2302      	movs	r3, #2
 8005128:	e01b      	b.n	8005162 <HAL_GPIO_Init+0x25a>
 800512a:	2301      	movs	r3, #1
 800512c:	e019      	b.n	8005162 <HAL_GPIO_Init+0x25a>
 800512e:	bf00      	nop
 8005130:	58000080 	.word	0x58000080
 8005134:	58024400 	.word	0x58024400
 8005138:	58000400 	.word	0x58000400
 800513c:	58020000 	.word	0x58020000
 8005140:	58020400 	.word	0x58020400
 8005144:	58020800 	.word	0x58020800
 8005148:	58020c00 	.word	0x58020c00
 800514c:	58021000 	.word	0x58021000
 8005150:	58021400 	.word	0x58021400
 8005154:	58021800 	.word	0x58021800
 8005158:	58021c00 	.word	0x58021c00
 800515c:	58022400 	.word	0x58022400
 8005160:	2300      	movs	r3, #0
 8005162:	69fa      	ldr	r2, [r7, #28]
 8005164:	f002 0203 	and.w	r2, r2, #3
 8005168:	0092      	lsls	r2, r2, #2
 800516a:	4093      	lsls	r3, r2
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	4313      	orrs	r3, r2
 8005170:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005172:	4938      	ldr	r1, [pc, #224]	; (8005254 <HAL_GPIO_Init+0x34c>)
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	089b      	lsrs	r3, r3, #2
 8005178:	3302      	adds	r3, #2
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	43db      	mvns	r3, r3
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	4013      	ands	r3, r2
 8005190:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80051a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80051ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	43db      	mvns	r3, r3
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	4013      	ands	r3, r2
 80051be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80051d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	43db      	mvns	r3, r3
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	4013      	ands	r3, r2
 80051ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d003      	beq.n	8005200 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	43db      	mvns	r3, r3
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	4013      	ands	r3, r2
 8005214:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	4313      	orrs	r3, r2
 8005228:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	3301      	adds	r3, #1
 8005234:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	fa22 f303 	lsr.w	r3, r2, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	f47f ae6b 	bne.w	8004f1c <HAL_GPIO_Init+0x14>
  }
}
 8005246:	bf00      	nop
 8005248:	bf00      	nop
 800524a:	3724      	adds	r7, #36	; 0x24
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr
 8005254:	58000400 	.word	0x58000400

08005258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	460b      	mov	r3, r1
 8005262:	807b      	strh	r3, [r7, #2]
 8005264:	4613      	mov	r3, r2
 8005266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005268:	787b      	ldrb	r3, [r7, #1]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800526e:	887a      	ldrh	r2, [r7, #2]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005274:	e003      	b.n	800527e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005276:	887b      	ldrh	r3, [r7, #2]
 8005278:	041a      	lsls	r2, r3, #16
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	619a      	str	r2, [r3, #24]
}
 800527e:	bf00      	nop
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800528a:	b480      	push	{r7}
 800528c:	b085      	sub	sp, #20
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
 8005292:	460b      	mov	r3, r1
 8005294:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800529c:	887a      	ldrh	r2, [r7, #2]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	4013      	ands	r3, r2
 80052a2:	041a      	lsls	r2, r3, #16
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	43d9      	mvns	r1, r3
 80052a8:	887b      	ldrh	r3, [r7, #2]
 80052aa:	400b      	ands	r3, r1
 80052ac:	431a      	orrs	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	619a      	str	r2, [r3, #24]
}
 80052b2:	bf00      	nop
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b082      	sub	sp, #8
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	4603      	mov	r3, r0
 80052c6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80052c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80052d0:	88fb      	ldrh	r3, [r7, #6]
 80052d2:	4013      	ands	r3, r2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d008      	beq.n	80052ea <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80052d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052dc:	88fb      	ldrh	r3, [r7, #6]
 80052de:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80052e2:	88fb      	ldrh	r3, [r7, #6]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f000 f804 	bl	80052f2 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80052ea:	bf00      	nop
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80052f2:	b480      	push	{r7}
 80052f4:	b083      	sub	sp, #12
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	4603      	mov	r3, r0
 80052fa:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005310:	4b19      	ldr	r3, [pc, #100]	; (8005378 <HAL_PWREx_ConfigSupply+0x70>)
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b04      	cmp	r3, #4
 800531a:	d00a      	beq.n	8005332 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800531c:	4b16      	ldr	r3, [pc, #88]	; (8005378 <HAL_PWREx_ConfigSupply+0x70>)
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f003 0307 	and.w	r3, r3, #7
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	429a      	cmp	r2, r3
 8005328:	d001      	beq.n	800532e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e01f      	b.n	800536e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	e01d      	b.n	800536e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005332:	4b11      	ldr	r3, [pc, #68]	; (8005378 <HAL_PWREx_ConfigSupply+0x70>)
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f023 0207 	bic.w	r2, r3, #7
 800533a:	490f      	ldr	r1, [pc, #60]	; (8005378 <HAL_PWREx_ConfigSupply+0x70>)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4313      	orrs	r3, r2
 8005340:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005342:	f7fd f957 	bl	80025f4 <HAL_GetTick>
 8005346:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005348:	e009      	b.n	800535e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800534a:	f7fd f953 	bl	80025f4 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005358:	d901      	bls.n	800535e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e007      	b.n	800536e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800535e:	4b06      	ldr	r3, [pc, #24]	; (8005378 <HAL_PWREx_ConfigSupply+0x70>)
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800536a:	d1ee      	bne.n	800534a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	58024800 	.word	0x58024800

0800537c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b08c      	sub	sp, #48	; 0x30
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d101      	bne.n	800538e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e397      	b.n	8005abe <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	f000 8087 	beq.w	80054aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800539c:	4b9e      	ldr	r3, [pc, #632]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053a6:	4b9c      	ldr	r3, [pc, #624]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 80053a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053aa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80053ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ae:	2b10      	cmp	r3, #16
 80053b0:	d007      	beq.n	80053c2 <HAL_RCC_OscConfig+0x46>
 80053b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b4:	2b18      	cmp	r3, #24
 80053b6:	d110      	bne.n	80053da <HAL_RCC_OscConfig+0x5e>
 80053b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ba:	f003 0303 	and.w	r3, r3, #3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d10b      	bne.n	80053da <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053c2:	4b95      	ldr	r3, [pc, #596]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d06c      	beq.n	80054a8 <HAL_RCC_OscConfig+0x12c>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d168      	bne.n	80054a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e371      	b.n	8005abe <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053e2:	d106      	bne.n	80053f2 <HAL_RCC_OscConfig+0x76>
 80053e4:	4b8c      	ldr	r3, [pc, #560]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a8b      	ldr	r2, [pc, #556]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 80053ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053ee:	6013      	str	r3, [r2, #0]
 80053f0:	e02e      	b.n	8005450 <HAL_RCC_OscConfig+0xd4>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10c      	bne.n	8005414 <HAL_RCC_OscConfig+0x98>
 80053fa:	4b87      	ldr	r3, [pc, #540]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a86      	ldr	r2, [pc, #536]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 8005400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005404:	6013      	str	r3, [r2, #0]
 8005406:	4b84      	ldr	r3, [pc, #528]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a83      	ldr	r2, [pc, #524]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 800540c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005410:	6013      	str	r3, [r2, #0]
 8005412:	e01d      	b.n	8005450 <HAL_RCC_OscConfig+0xd4>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800541c:	d10c      	bne.n	8005438 <HAL_RCC_OscConfig+0xbc>
 800541e:	4b7e      	ldr	r3, [pc, #504]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a7d      	ldr	r2, [pc, #500]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 8005424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005428:	6013      	str	r3, [r2, #0]
 800542a:	4b7b      	ldr	r3, [pc, #492]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a7a      	ldr	r2, [pc, #488]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 8005430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005434:	6013      	str	r3, [r2, #0]
 8005436:	e00b      	b.n	8005450 <HAL_RCC_OscConfig+0xd4>
 8005438:	4b77      	ldr	r3, [pc, #476]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a76      	ldr	r2, [pc, #472]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 800543e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005442:	6013      	str	r3, [r2, #0]
 8005444:	4b74      	ldr	r3, [pc, #464]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a73      	ldr	r2, [pc, #460]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 800544a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800544e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d013      	beq.n	8005480 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005458:	f7fd f8cc 	bl	80025f4 <HAL_GetTick>
 800545c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800545e:	e008      	b.n	8005472 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005460:	f7fd f8c8 	bl	80025f4 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b64      	cmp	r3, #100	; 0x64
 800546c:	d901      	bls.n	8005472 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e325      	b.n	8005abe <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005472:	4b69      	ldr	r3, [pc, #420]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d0f0      	beq.n	8005460 <HAL_RCC_OscConfig+0xe4>
 800547e:	e014      	b.n	80054aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005480:	f7fd f8b8 	bl	80025f4 <HAL_GetTick>
 8005484:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005488:	f7fd f8b4 	bl	80025f4 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b64      	cmp	r3, #100	; 0x64
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e311      	b.n	8005abe <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800549a:	4b5f      	ldr	r3, [pc, #380]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1f0      	bne.n	8005488 <HAL_RCC_OscConfig+0x10c>
 80054a6:	e000      	b.n	80054aa <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 808a 	beq.w	80055cc <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054b8:	4b57      	ldr	r3, [pc, #348]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054c0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80054c2:	4b55      	ldr	r3, [pc, #340]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 80054c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d007      	beq.n	80054de <HAL_RCC_OscConfig+0x162>
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	2b18      	cmp	r3, #24
 80054d2:	d137      	bne.n	8005544 <HAL_RCC_OscConfig+0x1c8>
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	f003 0303 	and.w	r3, r3, #3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d132      	bne.n	8005544 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054de:	4b4e      	ldr	r3, [pc, #312]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0304 	and.w	r3, r3, #4
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d005      	beq.n	80054f6 <HAL_RCC_OscConfig+0x17a>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e2e3      	b.n	8005abe <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80054f6:	4b48      	ldr	r3, [pc, #288]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f023 0219 	bic.w	r2, r3, #25
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	4945      	ldr	r1, [pc, #276]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 8005504:	4313      	orrs	r3, r2
 8005506:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005508:	f7fd f874 	bl	80025f4 <HAL_GetTick>
 800550c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800550e:	e008      	b.n	8005522 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005510:	f7fd f870 	bl	80025f4 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b02      	cmp	r3, #2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e2cd      	b.n	8005abe <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005522:	4b3d      	ldr	r3, [pc, #244]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0304 	and.w	r3, r3, #4
 800552a:	2b00      	cmp	r3, #0
 800552c:	d0f0      	beq.n	8005510 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800552e:	4b3a      	ldr	r3, [pc, #232]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	061b      	lsls	r3, r3, #24
 800553c:	4936      	ldr	r1, [pc, #216]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 800553e:	4313      	orrs	r3, r2
 8005540:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005542:	e043      	b.n	80055cc <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d026      	beq.n	800559a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800554c:	4b32      	ldr	r3, [pc, #200]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f023 0219 	bic.w	r2, r3, #25
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	492f      	ldr	r1, [pc, #188]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 800555a:	4313      	orrs	r3, r2
 800555c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555e:	f7fd f849 	bl	80025f4 <HAL_GetTick>
 8005562:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005564:	e008      	b.n	8005578 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005566:	f7fd f845 	bl	80025f4 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	2b02      	cmp	r3, #2
 8005572:	d901      	bls.n	8005578 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e2a2      	b.n	8005abe <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005578:	4b27      	ldr	r3, [pc, #156]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0f0      	beq.n	8005566 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005584:	4b24      	ldr	r3, [pc, #144]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	061b      	lsls	r3, r3, #24
 8005592:	4921      	ldr	r1, [pc, #132]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 8005594:	4313      	orrs	r3, r2
 8005596:	604b      	str	r3, [r1, #4]
 8005598:	e018      	b.n	80055cc <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800559a:	4b1f      	ldr	r3, [pc, #124]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a1e      	ldr	r2, [pc, #120]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 80055a0:	f023 0301 	bic.w	r3, r3, #1
 80055a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a6:	f7fd f825 	bl	80025f4 <HAL_GetTick>
 80055aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80055ac:	e008      	b.n	80055c0 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055ae:	f7fd f821 	bl	80025f4 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d901      	bls.n	80055c0 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e27e      	b.n	8005abe <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80055c0:	4b15      	ldr	r3, [pc, #84]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0304 	and.w	r3, r3, #4
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1f0      	bne.n	80055ae <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0310 	and.w	r3, r3, #16
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d06d      	beq.n	80056b4 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055d8:	4b0f      	ldr	r3, [pc, #60]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055e0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80055e2:	4b0d      	ldr	r3, [pc, #52]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 80055e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	2b08      	cmp	r3, #8
 80055ec:	d007      	beq.n	80055fe <HAL_RCC_OscConfig+0x282>
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	2b18      	cmp	r3, #24
 80055f2:	d11e      	bne.n	8005632 <HAL_RCC_OscConfig+0x2b6>
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f003 0303 	and.w	r3, r3, #3
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d119      	bne.n	8005632 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055fe:	4b06      	ldr	r3, [pc, #24]	; (8005618 <HAL_RCC_OscConfig+0x29c>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005606:	2b00      	cmp	r3, #0
 8005608:	d008      	beq.n	800561c <HAL_RCC_OscConfig+0x2a0>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	69db      	ldr	r3, [r3, #28]
 800560e:	2b80      	cmp	r3, #128	; 0x80
 8005610:	d004      	beq.n	800561c <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e253      	b.n	8005abe <HAL_RCC_OscConfig+0x742>
 8005616:	bf00      	nop
 8005618:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800561c:	4ba3      	ldr	r3, [pc, #652]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	061b      	lsls	r3, r3, #24
 800562a:	49a0      	ldr	r1, [pc, #640]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 800562c:	4313      	orrs	r3, r2
 800562e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005630:	e040      	b.n	80056b4 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d023      	beq.n	8005682 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800563a:	4b9c      	ldr	r3, [pc, #624]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a9b      	ldr	r2, [pc, #620]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 8005640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005646:	f7fc ffd5 	bl	80025f4 <HAL_GetTick>
 800564a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800564c:	e008      	b.n	8005660 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800564e:	f7fc ffd1 	bl	80025f4 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d901      	bls.n	8005660 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e22e      	b.n	8005abe <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005660:	4b92      	ldr	r3, [pc, #584]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0f0      	beq.n	800564e <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800566c:	4b8f      	ldr	r3, [pc, #572]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	061b      	lsls	r3, r3, #24
 800567a:	498c      	ldr	r1, [pc, #560]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 800567c:	4313      	orrs	r3, r2
 800567e:	60cb      	str	r3, [r1, #12]
 8005680:	e018      	b.n	80056b4 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005682:	4b8a      	ldr	r3, [pc, #552]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a89      	ldr	r2, [pc, #548]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 8005688:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800568c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800568e:	f7fc ffb1 	bl	80025f4 <HAL_GetTick>
 8005692:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005694:	e008      	b.n	80056a8 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005696:	f7fc ffad 	bl	80025f4 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d901      	bls.n	80056a8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e20a      	b.n	8005abe <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80056a8:	4b80      	ldr	r3, [pc, #512]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1f0      	bne.n	8005696 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0308 	and.w	r3, r3, #8
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d036      	beq.n	800572e <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d019      	beq.n	80056fc <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056c8:	4b78      	ldr	r3, [pc, #480]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 80056ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056cc:	4a77      	ldr	r2, [pc, #476]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 80056ce:	f043 0301 	orr.w	r3, r3, #1
 80056d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d4:	f7fc ff8e 	bl	80025f4 <HAL_GetTick>
 80056d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80056da:	e008      	b.n	80056ee <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056dc:	f7fc ff8a 	bl	80025f4 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e1e7      	b.n	8005abe <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80056ee:	4b6f      	ldr	r3, [pc, #444]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 80056f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d0f0      	beq.n	80056dc <HAL_RCC_OscConfig+0x360>
 80056fa:	e018      	b.n	800572e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056fc:	4b6b      	ldr	r3, [pc, #428]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 80056fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005700:	4a6a      	ldr	r2, [pc, #424]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 8005702:	f023 0301 	bic.w	r3, r3, #1
 8005706:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005708:	f7fc ff74 	bl	80025f4 <HAL_GetTick>
 800570c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800570e:	e008      	b.n	8005722 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005710:	f7fc ff70 	bl	80025f4 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	2b02      	cmp	r3, #2
 800571c:	d901      	bls.n	8005722 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e1cd      	b.n	8005abe <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005722:	4b62      	ldr	r3, [pc, #392]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 8005724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005726:	f003 0302 	and.w	r3, r3, #2
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1f0      	bne.n	8005710 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0320 	and.w	r3, r3, #32
 8005736:	2b00      	cmp	r3, #0
 8005738:	d036      	beq.n	80057a8 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d019      	beq.n	8005776 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005742:	4b5a      	ldr	r3, [pc, #360]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a59      	ldr	r2, [pc, #356]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 8005748:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800574c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800574e:	f7fc ff51 	bl	80025f4 <HAL_GetTick>
 8005752:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005754:	e008      	b.n	8005768 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005756:	f7fc ff4d 	bl	80025f4 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	2b02      	cmp	r3, #2
 8005762:	d901      	bls.n	8005768 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e1aa      	b.n	8005abe <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005768:	4b50      	ldr	r3, [pc, #320]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d0f0      	beq.n	8005756 <HAL_RCC_OscConfig+0x3da>
 8005774:	e018      	b.n	80057a8 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005776:	4b4d      	ldr	r3, [pc, #308]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a4c      	ldr	r2, [pc, #304]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 800577c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005780:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005782:	f7fc ff37 	bl	80025f4 <HAL_GetTick>
 8005786:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005788:	e008      	b.n	800579c <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800578a:	f7fc ff33 	bl	80025f4 <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	2b02      	cmp	r3, #2
 8005796:	d901      	bls.n	800579c <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e190      	b.n	8005abe <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800579c:	4b43      	ldr	r3, [pc, #268]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1f0      	bne.n	800578a <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0304 	and.w	r3, r3, #4
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f000 8085 	beq.w	80058c0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80057b6:	4b3e      	ldr	r3, [pc, #248]	; (80058b0 <HAL_RCC_OscConfig+0x534>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a3d      	ldr	r2, [pc, #244]	; (80058b0 <HAL_RCC_OscConfig+0x534>)
 80057bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057c2:	f7fc ff17 	bl	80025f4 <HAL_GetTick>
 80057c6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057c8:	e008      	b.n	80057dc <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80057ca:	f7fc ff13 	bl	80025f4 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	2b64      	cmp	r3, #100	; 0x64
 80057d6:	d901      	bls.n	80057dc <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e170      	b.n	8005abe <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057dc:	4b34      	ldr	r3, [pc, #208]	; (80058b0 <HAL_RCC_OscConfig+0x534>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d0f0      	beq.n	80057ca <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d106      	bne.n	80057fe <HAL_RCC_OscConfig+0x482>
 80057f0:	4b2e      	ldr	r3, [pc, #184]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 80057f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f4:	4a2d      	ldr	r2, [pc, #180]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 80057f6:	f043 0301 	orr.w	r3, r3, #1
 80057fa:	6713      	str	r3, [r2, #112]	; 0x70
 80057fc:	e02d      	b.n	800585a <HAL_RCC_OscConfig+0x4de>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10c      	bne.n	8005820 <HAL_RCC_OscConfig+0x4a4>
 8005806:	4b29      	ldr	r3, [pc, #164]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 8005808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580a:	4a28      	ldr	r2, [pc, #160]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 800580c:	f023 0301 	bic.w	r3, r3, #1
 8005810:	6713      	str	r3, [r2, #112]	; 0x70
 8005812:	4b26      	ldr	r3, [pc, #152]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 8005814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005816:	4a25      	ldr	r2, [pc, #148]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 8005818:	f023 0304 	bic.w	r3, r3, #4
 800581c:	6713      	str	r3, [r2, #112]	; 0x70
 800581e:	e01c      	b.n	800585a <HAL_RCC_OscConfig+0x4de>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	2b05      	cmp	r3, #5
 8005826:	d10c      	bne.n	8005842 <HAL_RCC_OscConfig+0x4c6>
 8005828:	4b20      	ldr	r3, [pc, #128]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 800582a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582c:	4a1f      	ldr	r2, [pc, #124]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 800582e:	f043 0304 	orr.w	r3, r3, #4
 8005832:	6713      	str	r3, [r2, #112]	; 0x70
 8005834:	4b1d      	ldr	r3, [pc, #116]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 8005836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005838:	4a1c      	ldr	r2, [pc, #112]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 800583a:	f043 0301 	orr.w	r3, r3, #1
 800583e:	6713      	str	r3, [r2, #112]	; 0x70
 8005840:	e00b      	b.n	800585a <HAL_RCC_OscConfig+0x4de>
 8005842:	4b1a      	ldr	r3, [pc, #104]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 8005844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005846:	4a19      	ldr	r2, [pc, #100]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 8005848:	f023 0301 	bic.w	r3, r3, #1
 800584c:	6713      	str	r3, [r2, #112]	; 0x70
 800584e:	4b17      	ldr	r3, [pc, #92]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 8005850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005852:	4a16      	ldr	r2, [pc, #88]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 8005854:	f023 0304 	bic.w	r3, r3, #4
 8005858:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d015      	beq.n	800588e <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005862:	f7fc fec7 	bl	80025f4 <HAL_GetTick>
 8005866:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005868:	e00a      	b.n	8005880 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800586a:	f7fc fec3 	bl	80025f4 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	f241 3288 	movw	r2, #5000	; 0x1388
 8005878:	4293      	cmp	r3, r2
 800587a:	d901      	bls.n	8005880 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e11e      	b.n	8005abe <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005880:	4b0a      	ldr	r3, [pc, #40]	; (80058ac <HAL_RCC_OscConfig+0x530>)
 8005882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d0ee      	beq.n	800586a <HAL_RCC_OscConfig+0x4ee>
 800588c:	e018      	b.n	80058c0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800588e:	f7fc feb1 	bl	80025f4 <HAL_GetTick>
 8005892:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005894:	e00e      	b.n	80058b4 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005896:	f7fc fead 	bl	80025f4 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d905      	bls.n	80058b4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e108      	b.n	8005abe <HAL_RCC_OscConfig+0x742>
 80058ac:	58024400 	.word	0x58024400
 80058b0:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058b4:	4b84      	ldr	r3, [pc, #528]	; (8005ac8 <HAL_RCC_OscConfig+0x74c>)
 80058b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1ea      	bne.n	8005896 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f000 80f9 	beq.w	8005abc <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80058ca:	4b7f      	ldr	r3, [pc, #508]	; (8005ac8 <HAL_RCC_OscConfig+0x74c>)
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058d2:	2b18      	cmp	r3, #24
 80058d4:	f000 80b4 	beq.w	8005a40 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058dc:	2b02      	cmp	r3, #2
 80058de:	f040 8095 	bne.w	8005a0c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058e2:	4b79      	ldr	r3, [pc, #484]	; (8005ac8 <HAL_RCC_OscConfig+0x74c>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a78      	ldr	r2, [pc, #480]	; (8005ac8 <HAL_RCC_OscConfig+0x74c>)
 80058e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ee:	f7fc fe81 	bl	80025f4 <HAL_GetTick>
 80058f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058f4:	e008      	b.n	8005908 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058f6:	f7fc fe7d 	bl	80025f4 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b02      	cmp	r3, #2
 8005902:	d901      	bls.n	8005908 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e0da      	b.n	8005abe <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005908:	4b6f      	ldr	r3, [pc, #444]	; (8005ac8 <HAL_RCC_OscConfig+0x74c>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d1f0      	bne.n	80058f6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005914:	4b6c      	ldr	r3, [pc, #432]	; (8005ac8 <HAL_RCC_OscConfig+0x74c>)
 8005916:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005918:	4b6c      	ldr	r3, [pc, #432]	; (8005acc <HAL_RCC_OscConfig+0x750>)
 800591a:	4013      	ands	r3, r2
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005924:	0112      	lsls	r2, r2, #4
 8005926:	430a      	orrs	r2, r1
 8005928:	4967      	ldr	r1, [pc, #412]	; (8005ac8 <HAL_RCC_OscConfig+0x74c>)
 800592a:	4313      	orrs	r3, r2
 800592c:	628b      	str	r3, [r1, #40]	; 0x28
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005932:	3b01      	subs	r3, #1
 8005934:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593c:	3b01      	subs	r3, #1
 800593e:	025b      	lsls	r3, r3, #9
 8005940:	b29b      	uxth	r3, r3
 8005942:	431a      	orrs	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005948:	3b01      	subs	r3, #1
 800594a:	041b      	lsls	r3, r3, #16
 800594c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005950:	431a      	orrs	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005956:	3b01      	subs	r3, #1
 8005958:	061b      	lsls	r3, r3, #24
 800595a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800595e:	495a      	ldr	r1, [pc, #360]	; (8005ac8 <HAL_RCC_OscConfig+0x74c>)
 8005960:	4313      	orrs	r3, r2
 8005962:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005964:	4b58      	ldr	r3, [pc, #352]	; (8005ac8 <HAL_RCC_OscConfig+0x74c>)
 8005966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005968:	4a57      	ldr	r2, [pc, #348]	; (8005ac8 <HAL_RCC_OscConfig+0x74c>)
 800596a:	f023 0301 	bic.w	r3, r3, #1
 800596e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005970:	4b55      	ldr	r3, [pc, #340]	; (8005ac8 <HAL_RCC_OscConfig+0x74c>)
 8005972:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005974:	4b56      	ldr	r3, [pc, #344]	; (8005ad0 <HAL_RCC_OscConfig+0x754>)
 8005976:	4013      	ands	r3, r2
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800597c:	00d2      	lsls	r2, r2, #3
 800597e:	4952      	ldr	r1, [pc, #328]	; (8005ac8 <HAL_RCC_OscConfig+0x74c>)
 8005980:	4313      	orrs	r3, r2
 8005982:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005984:	4b50      	ldr	r3, [pc, #320]	; (8005ac8 <HAL_RCC_OscConfig+0x74c>)
 8005986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005988:	f023 020c 	bic.w	r2, r3, #12
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005990:	494d      	ldr	r1, [pc, #308]	; (8005ac8 <HAL_RCC_OscConfig+0x74c>)
 8005992:	4313      	orrs	r3, r2
 8005994:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005996:	4b4c      	ldr	r3, [pc, #304]	; (8005ac8 <HAL_RCC_OscConfig+0x74c>)
 8005998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599a:	f023 0202 	bic.w	r2, r3, #2
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a2:	4949      	ldr	r1, [pc, #292]	; (8005ac8 <HAL_RCC_OscConfig+0x74c>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80059a8:	4b47      	ldr	r3, [pc, #284]	; (8005ac8 <HAL_RCC_OscConfig+0x74c>)
 80059aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ac:	4a46      	ldr	r2, [pc, #280]	; (8005ac8 <HAL_RCC_OscConfig+0x74c>)
 80059ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059b4:	4b44      	ldr	r3, [pc, #272]	; (8005ac8 <HAL_RCC_OscConfig+0x74c>)
 80059b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b8:	4a43      	ldr	r2, [pc, #268]	; (8005ac8 <HAL_RCC_OscConfig+0x74c>)
 80059ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80059c0:	4b41      	ldr	r3, [pc, #260]	; (8005ac8 <HAL_RCC_OscConfig+0x74c>)
 80059c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c4:	4a40      	ldr	r2, [pc, #256]	; (8005ac8 <HAL_RCC_OscConfig+0x74c>)
 80059c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80059cc:	4b3e      	ldr	r3, [pc, #248]	; (8005ac8 <HAL_RCC_OscConfig+0x74c>)
 80059ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d0:	4a3d      	ldr	r2, [pc, #244]	; (8005ac8 <HAL_RCC_OscConfig+0x74c>)
 80059d2:	f043 0301 	orr.w	r3, r3, #1
 80059d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059d8:	4b3b      	ldr	r3, [pc, #236]	; (8005ac8 <HAL_RCC_OscConfig+0x74c>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a3a      	ldr	r2, [pc, #232]	; (8005ac8 <HAL_RCC_OscConfig+0x74c>)
 80059de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e4:	f7fc fe06 	bl	80025f4 <HAL_GetTick>
 80059e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059ea:	e008      	b.n	80059fe <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059ec:	f7fc fe02 	bl	80025f4 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e05f      	b.n	8005abe <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059fe:	4b32      	ldr	r3, [pc, #200]	; (8005ac8 <HAL_RCC_OscConfig+0x74c>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0f0      	beq.n	80059ec <HAL_RCC_OscConfig+0x670>
 8005a0a:	e057      	b.n	8005abc <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a0c:	4b2e      	ldr	r3, [pc, #184]	; (8005ac8 <HAL_RCC_OscConfig+0x74c>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a2d      	ldr	r2, [pc, #180]	; (8005ac8 <HAL_RCC_OscConfig+0x74c>)
 8005a12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a18:	f7fc fdec 	bl	80025f4 <HAL_GetTick>
 8005a1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a1e:	e008      	b.n	8005a32 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a20:	f7fc fde8 	bl	80025f4 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d901      	bls.n	8005a32 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e045      	b.n	8005abe <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a32:	4b25      	ldr	r3, [pc, #148]	; (8005ac8 <HAL_RCC_OscConfig+0x74c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1f0      	bne.n	8005a20 <HAL_RCC_OscConfig+0x6a4>
 8005a3e:	e03d      	b.n	8005abc <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005a40:	4b21      	ldr	r3, [pc, #132]	; (8005ac8 <HAL_RCC_OscConfig+0x74c>)
 8005a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a44:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005a46:	4b20      	ldr	r3, [pc, #128]	; (8005ac8 <HAL_RCC_OscConfig+0x74c>)
 8005a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d031      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	f003 0203 	and.w	r2, r3, #3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d12a      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	091b      	lsrs	r3, r3, #4
 8005a66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d122      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d11a      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	0a5b      	lsrs	r3, r3, #9
 8005a86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a8e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d111      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	0c1b      	lsrs	r3, r3, #16
 8005a98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d108      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	0e1b      	lsrs	r3, r3, #24
 8005aaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d001      	beq.n	8005abc <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e000      	b.n	8005abe <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3730      	adds	r7, #48	; 0x30
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	58024400 	.word	0x58024400
 8005acc:	fffffc0c 	.word	0xfffffc0c
 8005ad0:	ffff0007 	.word	0xffff0007

08005ad4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b086      	sub	sp, #24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d101      	bne.n	8005ae8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e19c      	b.n	8005e22 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ae8:	4b8a      	ldr	r3, [pc, #552]	; (8005d14 <HAL_RCC_ClockConfig+0x240>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 030f 	and.w	r3, r3, #15
 8005af0:	683a      	ldr	r2, [r7, #0]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d910      	bls.n	8005b18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005af6:	4b87      	ldr	r3, [pc, #540]	; (8005d14 <HAL_RCC_ClockConfig+0x240>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f023 020f 	bic.w	r2, r3, #15
 8005afe:	4985      	ldr	r1, [pc, #532]	; (8005d14 <HAL_RCC_ClockConfig+0x240>)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b06:	4b83      	ldr	r3, [pc, #524]	; (8005d14 <HAL_RCC_ClockConfig+0x240>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 030f 	and.w	r3, r3, #15
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d001      	beq.n	8005b18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e184      	b.n	8005e22 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0304 	and.w	r3, r3, #4
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d010      	beq.n	8005b46 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	691a      	ldr	r2, [r3, #16]
 8005b28:	4b7b      	ldr	r3, [pc, #492]	; (8005d18 <HAL_RCC_ClockConfig+0x244>)
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d908      	bls.n	8005b46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b34:	4b78      	ldr	r3, [pc, #480]	; (8005d18 <HAL_RCC_ClockConfig+0x244>)
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	4975      	ldr	r1, [pc, #468]	; (8005d18 <HAL_RCC_ClockConfig+0x244>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0308 	and.w	r3, r3, #8
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d010      	beq.n	8005b74 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	695a      	ldr	r2, [r3, #20]
 8005b56:	4b70      	ldr	r3, [pc, #448]	; (8005d18 <HAL_RCC_ClockConfig+0x244>)
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d908      	bls.n	8005b74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b62:	4b6d      	ldr	r3, [pc, #436]	; (8005d18 <HAL_RCC_ClockConfig+0x244>)
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	496a      	ldr	r1, [pc, #424]	; (8005d18 <HAL_RCC_ClockConfig+0x244>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0310 	and.w	r3, r3, #16
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d010      	beq.n	8005ba2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	699a      	ldr	r2, [r3, #24]
 8005b84:	4b64      	ldr	r3, [pc, #400]	; (8005d18 <HAL_RCC_ClockConfig+0x244>)
 8005b86:	69db      	ldr	r3, [r3, #28]
 8005b88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d908      	bls.n	8005ba2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b90:	4b61      	ldr	r3, [pc, #388]	; (8005d18 <HAL_RCC_ClockConfig+0x244>)
 8005b92:	69db      	ldr	r3, [r3, #28]
 8005b94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	495e      	ldr	r1, [pc, #376]	; (8005d18 <HAL_RCC_ClockConfig+0x244>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0320 	and.w	r3, r3, #32
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d010      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	69da      	ldr	r2, [r3, #28]
 8005bb2:	4b59      	ldr	r3, [pc, #356]	; (8005d18 <HAL_RCC_ClockConfig+0x244>)
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d908      	bls.n	8005bd0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005bbe:	4b56      	ldr	r3, [pc, #344]	; (8005d18 <HAL_RCC_ClockConfig+0x244>)
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	4953      	ldr	r1, [pc, #332]	; (8005d18 <HAL_RCC_ClockConfig+0x244>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0302 	and.w	r3, r3, #2
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d010      	beq.n	8005bfe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	68da      	ldr	r2, [r3, #12]
 8005be0:	4b4d      	ldr	r3, [pc, #308]	; (8005d18 <HAL_RCC_ClockConfig+0x244>)
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	f003 030f 	and.w	r3, r3, #15
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d908      	bls.n	8005bfe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bec:	4b4a      	ldr	r3, [pc, #296]	; (8005d18 <HAL_RCC_ClockConfig+0x244>)
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	f023 020f 	bic.w	r2, r3, #15
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	4947      	ldr	r1, [pc, #284]	; (8005d18 <HAL_RCC_ClockConfig+0x244>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d055      	beq.n	8005cb6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005c0a:	4b43      	ldr	r3, [pc, #268]	; (8005d18 <HAL_RCC_ClockConfig+0x244>)
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	4940      	ldr	r1, [pc, #256]	; (8005d18 <HAL_RCC_ClockConfig+0x244>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d107      	bne.n	8005c34 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c24:	4b3c      	ldr	r3, [pc, #240]	; (8005d18 <HAL_RCC_ClockConfig+0x244>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d121      	bne.n	8005c74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e0f6      	b.n	8005e22 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	2b03      	cmp	r3, #3
 8005c3a:	d107      	bne.n	8005c4c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c3c:	4b36      	ldr	r3, [pc, #216]	; (8005d18 <HAL_RCC_ClockConfig+0x244>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d115      	bne.n	8005c74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e0ea      	b.n	8005e22 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d107      	bne.n	8005c64 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c54:	4b30      	ldr	r3, [pc, #192]	; (8005d18 <HAL_RCC_ClockConfig+0x244>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d109      	bne.n	8005c74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e0de      	b.n	8005e22 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c64:	4b2c      	ldr	r3, [pc, #176]	; (8005d18 <HAL_RCC_ClockConfig+0x244>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e0d6      	b.n	8005e22 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c74:	4b28      	ldr	r3, [pc, #160]	; (8005d18 <HAL_RCC_ClockConfig+0x244>)
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	f023 0207 	bic.w	r2, r3, #7
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	4925      	ldr	r1, [pc, #148]	; (8005d18 <HAL_RCC_ClockConfig+0x244>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c86:	f7fc fcb5 	bl	80025f4 <HAL_GetTick>
 8005c8a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c8c:	e00a      	b.n	8005ca4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c8e:	f7fc fcb1 	bl	80025f4 <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d901      	bls.n	8005ca4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e0be      	b.n	8005e22 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ca4:	4b1c      	ldr	r3, [pc, #112]	; (8005d18 <HAL_RCC_ClockConfig+0x244>)
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	00db      	lsls	r3, r3, #3
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d1eb      	bne.n	8005c8e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d010      	beq.n	8005ce4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	4b14      	ldr	r3, [pc, #80]	; (8005d18 <HAL_RCC_ClockConfig+0x244>)
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	f003 030f 	and.w	r3, r3, #15
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d208      	bcs.n	8005ce4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cd2:	4b11      	ldr	r3, [pc, #68]	; (8005d18 <HAL_RCC_ClockConfig+0x244>)
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	f023 020f 	bic.w	r2, r3, #15
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	490e      	ldr	r1, [pc, #56]	; (8005d18 <HAL_RCC_ClockConfig+0x244>)
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ce4:	4b0b      	ldr	r3, [pc, #44]	; (8005d14 <HAL_RCC_ClockConfig+0x240>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 030f 	and.w	r3, r3, #15
 8005cec:	683a      	ldr	r2, [r7, #0]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d214      	bcs.n	8005d1c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cf2:	4b08      	ldr	r3, [pc, #32]	; (8005d14 <HAL_RCC_ClockConfig+0x240>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f023 020f 	bic.w	r2, r3, #15
 8005cfa:	4906      	ldr	r1, [pc, #24]	; (8005d14 <HAL_RCC_ClockConfig+0x240>)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d02:	4b04      	ldr	r3, [pc, #16]	; (8005d14 <HAL_RCC_ClockConfig+0x240>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 030f 	and.w	r3, r3, #15
 8005d0a:	683a      	ldr	r2, [r7, #0]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d005      	beq.n	8005d1c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e086      	b.n	8005e22 <HAL_RCC_ClockConfig+0x34e>
 8005d14:	52002000 	.word	0x52002000
 8005d18:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0304 	and.w	r3, r3, #4
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d010      	beq.n	8005d4a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	691a      	ldr	r2, [r3, #16]
 8005d2c:	4b3f      	ldr	r3, [pc, #252]	; (8005e2c <HAL_RCC_ClockConfig+0x358>)
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d208      	bcs.n	8005d4a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d38:	4b3c      	ldr	r3, [pc, #240]	; (8005e2c <HAL_RCC_ClockConfig+0x358>)
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	4939      	ldr	r1, [pc, #228]	; (8005e2c <HAL_RCC_ClockConfig+0x358>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0308 	and.w	r3, r3, #8
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d010      	beq.n	8005d78 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	695a      	ldr	r2, [r3, #20]
 8005d5a:	4b34      	ldr	r3, [pc, #208]	; (8005e2c <HAL_RCC_ClockConfig+0x358>)
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d208      	bcs.n	8005d78 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d66:	4b31      	ldr	r3, [pc, #196]	; (8005e2c <HAL_RCC_ClockConfig+0x358>)
 8005d68:	69db      	ldr	r3, [r3, #28]
 8005d6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	492e      	ldr	r1, [pc, #184]	; (8005e2c <HAL_RCC_ClockConfig+0x358>)
 8005d74:	4313      	orrs	r3, r2
 8005d76:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0310 	and.w	r3, r3, #16
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d010      	beq.n	8005da6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	699a      	ldr	r2, [r3, #24]
 8005d88:	4b28      	ldr	r3, [pc, #160]	; (8005e2c <HAL_RCC_ClockConfig+0x358>)
 8005d8a:	69db      	ldr	r3, [r3, #28]
 8005d8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d208      	bcs.n	8005da6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d94:	4b25      	ldr	r3, [pc, #148]	; (8005e2c <HAL_RCC_ClockConfig+0x358>)
 8005d96:	69db      	ldr	r3, [r3, #28]
 8005d98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	4922      	ldr	r1, [pc, #136]	; (8005e2c <HAL_RCC_ClockConfig+0x358>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0320 	and.w	r3, r3, #32
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d010      	beq.n	8005dd4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	69da      	ldr	r2, [r3, #28]
 8005db6:	4b1d      	ldr	r3, [pc, #116]	; (8005e2c <HAL_RCC_ClockConfig+0x358>)
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d208      	bcs.n	8005dd4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005dc2:	4b1a      	ldr	r3, [pc, #104]	; (8005e2c <HAL_RCC_ClockConfig+0x358>)
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	69db      	ldr	r3, [r3, #28]
 8005dce:	4917      	ldr	r1, [pc, #92]	; (8005e2c <HAL_RCC_ClockConfig+0x358>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005dd4:	f000 f834 	bl	8005e40 <HAL_RCC_GetSysClockFreq>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	4b14      	ldr	r3, [pc, #80]	; (8005e2c <HAL_RCC_ClockConfig+0x358>)
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	0a1b      	lsrs	r3, r3, #8
 8005de0:	f003 030f 	and.w	r3, r3, #15
 8005de4:	4912      	ldr	r1, [pc, #72]	; (8005e30 <HAL_RCC_ClockConfig+0x35c>)
 8005de6:	5ccb      	ldrb	r3, [r1, r3]
 8005de8:	f003 031f 	and.w	r3, r3, #31
 8005dec:	fa22 f303 	lsr.w	r3, r2, r3
 8005df0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005df2:	4b0e      	ldr	r3, [pc, #56]	; (8005e2c <HAL_RCC_ClockConfig+0x358>)
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	f003 030f 	and.w	r3, r3, #15
 8005dfa:	4a0d      	ldr	r2, [pc, #52]	; (8005e30 <HAL_RCC_ClockConfig+0x35c>)
 8005dfc:	5cd3      	ldrb	r3, [r2, r3]
 8005dfe:	f003 031f 	and.w	r3, r3, #31
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	fa22 f303 	lsr.w	r3, r2, r3
 8005e08:	4a0a      	ldr	r2, [pc, #40]	; (8005e34 <HAL_RCC_ClockConfig+0x360>)
 8005e0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e0c:	4a0a      	ldr	r2, [pc, #40]	; (8005e38 <HAL_RCC_ClockConfig+0x364>)
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005e12:	4b0a      	ldr	r3, [pc, #40]	; (8005e3c <HAL_RCC_ClockConfig+0x368>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fc fba2 	bl	8002560 <HAL_InitTick>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3718      	adds	r7, #24
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	58024400 	.word	0x58024400
 8005e30:	080196b4 	.word	0x080196b4
 8005e34:	2400000c 	.word	0x2400000c
 8005e38:	24000008 	.word	0x24000008
 8005e3c:	24000010 	.word	0x24000010

08005e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b089      	sub	sp, #36	; 0x24
 8005e44:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e46:	4bb3      	ldr	r3, [pc, #716]	; (8006114 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e4e:	2b18      	cmp	r3, #24
 8005e50:	f200 8155 	bhi.w	80060fe <HAL_RCC_GetSysClockFreq+0x2be>
 8005e54:	a201      	add	r2, pc, #4	; (adr r2, 8005e5c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5a:	bf00      	nop
 8005e5c:	08005ec1 	.word	0x08005ec1
 8005e60:	080060ff 	.word	0x080060ff
 8005e64:	080060ff 	.word	0x080060ff
 8005e68:	080060ff 	.word	0x080060ff
 8005e6c:	080060ff 	.word	0x080060ff
 8005e70:	080060ff 	.word	0x080060ff
 8005e74:	080060ff 	.word	0x080060ff
 8005e78:	080060ff 	.word	0x080060ff
 8005e7c:	08005ee7 	.word	0x08005ee7
 8005e80:	080060ff 	.word	0x080060ff
 8005e84:	080060ff 	.word	0x080060ff
 8005e88:	080060ff 	.word	0x080060ff
 8005e8c:	080060ff 	.word	0x080060ff
 8005e90:	080060ff 	.word	0x080060ff
 8005e94:	080060ff 	.word	0x080060ff
 8005e98:	080060ff 	.word	0x080060ff
 8005e9c:	08005eed 	.word	0x08005eed
 8005ea0:	080060ff 	.word	0x080060ff
 8005ea4:	080060ff 	.word	0x080060ff
 8005ea8:	080060ff 	.word	0x080060ff
 8005eac:	080060ff 	.word	0x080060ff
 8005eb0:	080060ff 	.word	0x080060ff
 8005eb4:	080060ff 	.word	0x080060ff
 8005eb8:	080060ff 	.word	0x080060ff
 8005ebc:	08005ef3 	.word	0x08005ef3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ec0:	4b94      	ldr	r3, [pc, #592]	; (8006114 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0320 	and.w	r3, r3, #32
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d009      	beq.n	8005ee0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ecc:	4b91      	ldr	r3, [pc, #580]	; (8006114 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	08db      	lsrs	r3, r3, #3
 8005ed2:	f003 0303 	and.w	r3, r3, #3
 8005ed6:	4a90      	ldr	r2, [pc, #576]	; (8006118 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8005edc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005ede:	e111      	b.n	8006104 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005ee0:	4b8d      	ldr	r3, [pc, #564]	; (8006118 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ee2:	61bb      	str	r3, [r7, #24]
    break;
 8005ee4:	e10e      	b.n	8006104 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005ee6:	4b8d      	ldr	r3, [pc, #564]	; (800611c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005ee8:	61bb      	str	r3, [r7, #24]
    break;
 8005eea:	e10b      	b.n	8006104 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005eec:	4b8c      	ldr	r3, [pc, #560]	; (8006120 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005eee:	61bb      	str	r3, [r7, #24]
    break;
 8005ef0:	e108      	b.n	8006104 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ef2:	4b88      	ldr	r3, [pc, #544]	; (8006114 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef6:	f003 0303 	and.w	r3, r3, #3
 8005efa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005efc:	4b85      	ldr	r3, [pc, #532]	; (8006114 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f00:	091b      	lsrs	r3, r3, #4
 8005f02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f06:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005f08:	4b82      	ldr	r3, [pc, #520]	; (8006114 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005f12:	4b80      	ldr	r3, [pc, #512]	; (8006114 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f16:	08db      	lsrs	r3, r3, #3
 8005f18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	fb02 f303 	mul.w	r3, r2, r3
 8005f22:	ee07 3a90 	vmov	s15, r3
 8005f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f2a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 80e1 	beq.w	80060f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	f000 8083 	beq.w	8006044 <HAL_RCC_GetSysClockFreq+0x204>
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	f200 80a1 	bhi.w	8006088 <HAL_RCC_GetSysClockFreq+0x248>
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d003      	beq.n	8005f54 <HAL_RCC_GetSysClockFreq+0x114>
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d056      	beq.n	8006000 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005f52:	e099      	b.n	8006088 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f54:	4b6f      	ldr	r3, [pc, #444]	; (8006114 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0320 	and.w	r3, r3, #32
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d02d      	beq.n	8005fbc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f60:	4b6c      	ldr	r3, [pc, #432]	; (8006114 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	08db      	lsrs	r3, r3, #3
 8005f66:	f003 0303 	and.w	r3, r3, #3
 8005f6a:	4a6b      	ldr	r2, [pc, #428]	; (8006118 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f70:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	ee07 3a90 	vmov	s15, r3
 8005f78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	ee07 3a90 	vmov	s15, r3
 8005f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f8a:	4b62      	ldr	r3, [pc, #392]	; (8006114 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f92:	ee07 3a90 	vmov	s15, r3
 8005f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f9e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006124 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005faa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fb6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005fba:	e087      	b.n	80060cc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	ee07 3a90 	vmov	s15, r3
 8005fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fc6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006128 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fce:	4b51      	ldr	r3, [pc, #324]	; (8006114 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fd6:	ee07 3a90 	vmov	s15, r3
 8005fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fde:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fe2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006124 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ffa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ffe:	e065      	b.n	80060cc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	ee07 3a90 	vmov	s15, r3
 8006006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800600a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800612c <HAL_RCC_GetSysClockFreq+0x2ec>
 800600e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006012:	4b40      	ldr	r3, [pc, #256]	; (8006114 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800601a:	ee07 3a90 	vmov	s15, r3
 800601e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006022:	ed97 6a02 	vldr	s12, [r7, #8]
 8006026:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006124 <HAL_RCC_GetSysClockFreq+0x2e4>
 800602a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800602e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006032:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800603a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800603e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006042:	e043      	b.n	80060cc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	ee07 3a90 	vmov	s15, r3
 800604a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800604e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006130 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006056:	4b2f      	ldr	r3, [pc, #188]	; (8006114 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800605e:	ee07 3a90 	vmov	s15, r3
 8006062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006066:	ed97 6a02 	vldr	s12, [r7, #8]
 800606a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006124 <HAL_RCC_GetSysClockFreq+0x2e4>
 800606e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800607a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800607e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006082:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006086:	e021      	b.n	80060cc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	ee07 3a90 	vmov	s15, r3
 800608e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006092:	eddf 6a26 	vldr	s13, [pc, #152]	; 800612c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800609a:	4b1e      	ldr	r3, [pc, #120]	; (8006114 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800609c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060a2:	ee07 3a90 	vmov	s15, r3
 80060a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80060ae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006124 <HAL_RCC_GetSysClockFreq+0x2e4>
 80060b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060ca:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80060cc:	4b11      	ldr	r3, [pc, #68]	; (8006114 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d0:	0a5b      	lsrs	r3, r3, #9
 80060d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060d6:	3301      	adds	r3, #1
 80060d8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	ee07 3a90 	vmov	s15, r3
 80060e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80060e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060f0:	ee17 3a90 	vmov	r3, s15
 80060f4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80060f6:	e005      	b.n	8006104 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80060f8:	2300      	movs	r3, #0
 80060fa:	61bb      	str	r3, [r7, #24]
    break;
 80060fc:	e002      	b.n	8006104 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80060fe:	4b07      	ldr	r3, [pc, #28]	; (800611c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006100:	61bb      	str	r3, [r7, #24]
    break;
 8006102:	bf00      	nop
  }

  return sysclockfreq;
 8006104:	69bb      	ldr	r3, [r7, #24]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3724      	adds	r7, #36	; 0x24
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	58024400 	.word	0x58024400
 8006118:	03d09000 	.word	0x03d09000
 800611c:	003d0900 	.word	0x003d0900
 8006120:	007a1200 	.word	0x007a1200
 8006124:	46000000 	.word	0x46000000
 8006128:	4c742400 	.word	0x4c742400
 800612c:	4a742400 	.word	0x4a742400
 8006130:	4af42400 	.word	0x4af42400

08006134 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800613a:	f7ff fe81 	bl	8005e40 <HAL_RCC_GetSysClockFreq>
 800613e:	4602      	mov	r2, r0
 8006140:	4b10      	ldr	r3, [pc, #64]	; (8006184 <HAL_RCC_GetHCLKFreq+0x50>)
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	0a1b      	lsrs	r3, r3, #8
 8006146:	f003 030f 	and.w	r3, r3, #15
 800614a:	490f      	ldr	r1, [pc, #60]	; (8006188 <HAL_RCC_GetHCLKFreq+0x54>)
 800614c:	5ccb      	ldrb	r3, [r1, r3]
 800614e:	f003 031f 	and.w	r3, r3, #31
 8006152:	fa22 f303 	lsr.w	r3, r2, r3
 8006156:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006158:	4b0a      	ldr	r3, [pc, #40]	; (8006184 <HAL_RCC_GetHCLKFreq+0x50>)
 800615a:	699b      	ldr	r3, [r3, #24]
 800615c:	f003 030f 	and.w	r3, r3, #15
 8006160:	4a09      	ldr	r2, [pc, #36]	; (8006188 <HAL_RCC_GetHCLKFreq+0x54>)
 8006162:	5cd3      	ldrb	r3, [r2, r3]
 8006164:	f003 031f 	and.w	r3, r3, #31
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	fa22 f303 	lsr.w	r3, r2, r3
 800616e:	4a07      	ldr	r2, [pc, #28]	; (800618c <HAL_RCC_GetHCLKFreq+0x58>)
 8006170:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006172:	4a07      	ldr	r2, [pc, #28]	; (8006190 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006178:	4b04      	ldr	r3, [pc, #16]	; (800618c <HAL_RCC_GetHCLKFreq+0x58>)
 800617a:	681b      	ldr	r3, [r3, #0]
}
 800617c:	4618      	mov	r0, r3
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	58024400 	.word	0x58024400
 8006188:	080196b4 	.word	0x080196b4
 800618c:	2400000c 	.word	0x2400000c
 8006190:	24000008 	.word	0x24000008

08006194 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006198:	f7ff ffcc 	bl	8006134 <HAL_RCC_GetHCLKFreq>
 800619c:	4602      	mov	r2, r0
 800619e:	4b06      	ldr	r3, [pc, #24]	; (80061b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061a0:	69db      	ldr	r3, [r3, #28]
 80061a2:	091b      	lsrs	r3, r3, #4
 80061a4:	f003 0307 	and.w	r3, r3, #7
 80061a8:	4904      	ldr	r1, [pc, #16]	; (80061bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80061aa:	5ccb      	ldrb	r3, [r1, r3]
 80061ac:	f003 031f 	and.w	r3, r3, #31
 80061b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	58024400 	.word	0x58024400
 80061bc:	080196b4 	.word	0x080196b4

080061c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80061c4:	f7ff ffb6 	bl	8006134 <HAL_RCC_GetHCLKFreq>
 80061c8:	4602      	mov	r2, r0
 80061ca:	4b06      	ldr	r3, [pc, #24]	; (80061e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061cc:	69db      	ldr	r3, [r3, #28]
 80061ce:	0a1b      	lsrs	r3, r3, #8
 80061d0:	f003 0307 	and.w	r3, r3, #7
 80061d4:	4904      	ldr	r1, [pc, #16]	; (80061e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80061d6:	5ccb      	ldrb	r3, [r1, r3]
 80061d8:	f003 031f 	and.w	r3, r3, #31
 80061dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	58024400 	.word	0x58024400
 80061e8:	080196b4 	.word	0x080196b4

080061ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061f4:	2300      	movs	r3, #0
 80061f6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061f8:	2300      	movs	r3, #0
 80061fa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d03f      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800620c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006210:	d02a      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006212:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006216:	d824      	bhi.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006218:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800621c:	d018      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800621e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006222:	d81e      	bhi.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006224:	2b00      	cmp	r3, #0
 8006226:	d003      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006228:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800622c:	d007      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800622e:	e018      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006230:	4bab      	ldr	r3, [pc, #684]	; (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006234:	4aaa      	ldr	r2, [pc, #680]	; (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800623a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800623c:	e015      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	3304      	adds	r3, #4
 8006242:	2102      	movs	r1, #2
 8006244:	4618      	mov	r0, r3
 8006246:	f001 f989 	bl	800755c <RCCEx_PLL2_Config>
 800624a:	4603      	mov	r3, r0
 800624c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800624e:	e00c      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	3324      	adds	r3, #36	; 0x24
 8006254:	2102      	movs	r1, #2
 8006256:	4618      	mov	r0, r3
 8006258:	f001 fa32 	bl	80076c0 <RCCEx_PLL3_Config>
 800625c:	4603      	mov	r3, r0
 800625e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006260:	e003      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	75fb      	strb	r3, [r7, #23]
      break;
 8006266:	e000      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006268:	bf00      	nop
    }

    if(ret == HAL_OK)
 800626a:	7dfb      	ldrb	r3, [r7, #23]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d109      	bne.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006270:	4b9b      	ldr	r3, [pc, #620]	; (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006274:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800627c:	4998      	ldr	r1, [pc, #608]	; (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800627e:	4313      	orrs	r3, r2
 8006280:	650b      	str	r3, [r1, #80]	; 0x50
 8006282:	e001      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006284:	7dfb      	ldrb	r3, [r7, #23]
 8006286:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006290:	2b00      	cmp	r3, #0
 8006292:	d03d      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006298:	2b04      	cmp	r3, #4
 800629a:	d826      	bhi.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800629c:	a201      	add	r2, pc, #4	; (adr r2, 80062a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800629e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a2:	bf00      	nop
 80062a4:	080062b9 	.word	0x080062b9
 80062a8:	080062c7 	.word	0x080062c7
 80062ac:	080062d9 	.word	0x080062d9
 80062b0:	080062f1 	.word	0x080062f1
 80062b4:	080062f1 	.word	0x080062f1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062b8:	4b89      	ldr	r3, [pc, #548]	; (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062bc:	4a88      	ldr	r2, [pc, #544]	; (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062c4:	e015      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	3304      	adds	r3, #4
 80062ca:	2100      	movs	r1, #0
 80062cc:	4618      	mov	r0, r3
 80062ce:	f001 f945 	bl	800755c <RCCEx_PLL2_Config>
 80062d2:	4603      	mov	r3, r0
 80062d4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062d6:	e00c      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	3324      	adds	r3, #36	; 0x24
 80062dc:	2100      	movs	r1, #0
 80062de:	4618      	mov	r0, r3
 80062e0:	f001 f9ee 	bl	80076c0 <RCCEx_PLL3_Config>
 80062e4:	4603      	mov	r3, r0
 80062e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062e8:	e003      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	75fb      	strb	r3, [r7, #23]
      break;
 80062ee:	e000      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80062f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062f2:	7dfb      	ldrb	r3, [r7, #23]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d109      	bne.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062f8:	4b79      	ldr	r3, [pc, #484]	; (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062fc:	f023 0207 	bic.w	r2, r3, #7
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006304:	4976      	ldr	r1, [pc, #472]	; (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006306:	4313      	orrs	r3, r2
 8006308:	650b      	str	r3, [r1, #80]	; 0x50
 800630a:	e001      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800630c:	7dfb      	ldrb	r3, [r7, #23]
 800630e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006318:	2b00      	cmp	r3, #0
 800631a:	d051      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006322:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006326:	d036      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006328:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800632c:	d830      	bhi.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800632e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006332:	d032      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8006334:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006338:	d82a      	bhi.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800633a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800633e:	d02e      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8006340:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006344:	d824      	bhi.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800634a:	d018      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x192>
 800634c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006350:	d81e      	bhi.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006352:	2b00      	cmp	r3, #0
 8006354:	d003      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x172>
 8006356:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800635a:	d007      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800635c:	e018      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800635e:	4b60      	ldr	r3, [pc, #384]	; (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006362:	4a5f      	ldr	r2, [pc, #380]	; (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006368:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800636a:	e019      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	3304      	adds	r3, #4
 8006370:	2100      	movs	r1, #0
 8006372:	4618      	mov	r0, r3
 8006374:	f001 f8f2 	bl	800755c <RCCEx_PLL2_Config>
 8006378:	4603      	mov	r3, r0
 800637a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800637c:	e010      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	3324      	adds	r3, #36	; 0x24
 8006382:	2100      	movs	r1, #0
 8006384:	4618      	mov	r0, r3
 8006386:	f001 f99b 	bl	80076c0 <RCCEx_PLL3_Config>
 800638a:	4603      	mov	r3, r0
 800638c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800638e:	e007      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	75fb      	strb	r3, [r7, #23]
      break;
 8006394:	e004      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8006396:	bf00      	nop
 8006398:	e002      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800639a:	bf00      	nop
 800639c:	e000      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800639e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063a0:	7dfb      	ldrb	r3, [r7, #23]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10a      	bne.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80063a6:	4b4e      	ldr	r3, [pc, #312]	; (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063aa:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80063b4:	494a      	ldr	r1, [pc, #296]	; (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	658b      	str	r3, [r1, #88]	; 0x58
 80063ba:	e001      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063bc:	7dfb      	ldrb	r3, [r7, #23]
 80063be:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d051      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80063d2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80063d6:	d036      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80063d8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80063dc:	d830      	bhi.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80063de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063e2:	d032      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80063e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063e8:	d82a      	bhi.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80063ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80063ee:	d02e      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x262>
 80063f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80063f4:	d824      	bhi.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80063f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063fa:	d018      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x242>
 80063fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006400:	d81e      	bhi.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006402:	2b00      	cmp	r3, #0
 8006404:	d003      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006406:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800640a:	d007      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800640c:	e018      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800640e:	4b34      	ldr	r3, [pc, #208]	; (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006412:	4a33      	ldr	r2, [pc, #204]	; (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006418:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800641a:	e019      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	3304      	adds	r3, #4
 8006420:	2100      	movs	r1, #0
 8006422:	4618      	mov	r0, r3
 8006424:	f001 f89a 	bl	800755c <RCCEx_PLL2_Config>
 8006428:	4603      	mov	r3, r0
 800642a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800642c:	e010      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	3324      	adds	r3, #36	; 0x24
 8006432:	2100      	movs	r1, #0
 8006434:	4618      	mov	r0, r3
 8006436:	f001 f943 	bl	80076c0 <RCCEx_PLL3_Config>
 800643a:	4603      	mov	r3, r0
 800643c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800643e:	e007      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	75fb      	strb	r3, [r7, #23]
      break;
 8006444:	e004      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006446:	bf00      	nop
 8006448:	e002      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800644a:	bf00      	nop
 800644c:	e000      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800644e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006450:	7dfb      	ldrb	r3, [r7, #23]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10a      	bne.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006456:	4b22      	ldr	r3, [pc, #136]	; (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800645a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006464:	491e      	ldr	r1, [pc, #120]	; (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006466:	4313      	orrs	r3, r2
 8006468:	658b      	str	r3, [r1, #88]	; 0x58
 800646a:	e001      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800646c:	7dfb      	ldrb	r3, [r7, #23]
 800646e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d035      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006480:	2b30      	cmp	r3, #48	; 0x30
 8006482:	d01c      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006484:	2b30      	cmp	r3, #48	; 0x30
 8006486:	d817      	bhi.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8006488:	2b20      	cmp	r3, #32
 800648a:	d00c      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800648c:	2b20      	cmp	r3, #32
 800648e:	d813      	bhi.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8006490:	2b00      	cmp	r3, #0
 8006492:	d016      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8006494:	2b10      	cmp	r3, #16
 8006496:	d10f      	bne.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006498:	4b11      	ldr	r3, [pc, #68]	; (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800649a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649c:	4a10      	ldr	r2, [pc, #64]	; (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800649e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80064a4:	e00e      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	3304      	adds	r3, #4
 80064aa:	2102      	movs	r1, #2
 80064ac:	4618      	mov	r0, r3
 80064ae:	f001 f855 	bl	800755c <RCCEx_PLL2_Config>
 80064b2:	4603      	mov	r3, r0
 80064b4:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80064b6:	e005      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	75fb      	strb	r3, [r7, #23]
      break;
 80064bc:	e002      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80064be:	bf00      	nop
 80064c0:	e000      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80064c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064c4:	7dfb      	ldrb	r3, [r7, #23]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10c      	bne.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80064ca:	4b05      	ldr	r3, [pc, #20]	; (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064d6:	4902      	ldr	r1, [pc, #8]	; (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	64cb      	str	r3, [r1, #76]	; 0x4c
 80064dc:	e004      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80064de:	bf00      	nop
 80064e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e4:	7dfb      	ldrb	r3, [r7, #23]
 80064e6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d047      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064fc:	d030      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80064fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006502:	d82a      	bhi.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006504:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006508:	d02c      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800650a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800650e:	d824      	bhi.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006514:	d018      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800651a:	d81e      	bhi.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800651c:	2b00      	cmp	r3, #0
 800651e:	d003      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006524:	d007      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006526:	e018      	b.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006528:	4bac      	ldr	r3, [pc, #688]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800652a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652c:	4aab      	ldr	r2, [pc, #684]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800652e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006532:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006534:	e017      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	3304      	adds	r3, #4
 800653a:	2100      	movs	r1, #0
 800653c:	4618      	mov	r0, r3
 800653e:	f001 f80d 	bl	800755c <RCCEx_PLL2_Config>
 8006542:	4603      	mov	r3, r0
 8006544:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006546:	e00e      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	3324      	adds	r3, #36	; 0x24
 800654c:	2100      	movs	r1, #0
 800654e:	4618      	mov	r0, r3
 8006550:	f001 f8b6 	bl	80076c0 <RCCEx_PLL3_Config>
 8006554:	4603      	mov	r3, r0
 8006556:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006558:	e005      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	75fb      	strb	r3, [r7, #23]
      break;
 800655e:	e002      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8006560:	bf00      	nop
 8006562:	e000      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8006564:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006566:	7dfb      	ldrb	r3, [r7, #23]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d109      	bne.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800656c:	4b9b      	ldr	r3, [pc, #620]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800656e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006570:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006578:	4998      	ldr	r1, [pc, #608]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800657a:	4313      	orrs	r3, r2
 800657c:	650b      	str	r3, [r1, #80]	; 0x50
 800657e:	e001      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006580:	7dfb      	ldrb	r3, [r7, #23]
 8006582:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d049      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006594:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006598:	d02e      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800659a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800659e:	d828      	bhi.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80065a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065a4:	d02a      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x410>
 80065a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065aa:	d822      	bhi.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80065ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065b0:	d026      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80065b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065b6:	d81c      	bhi.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80065b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065bc:	d010      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80065be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065c2:	d816      	bhi.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d01d      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80065c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065cc:	d111      	bne.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	3304      	adds	r3, #4
 80065d2:	2101      	movs	r1, #1
 80065d4:	4618      	mov	r0, r3
 80065d6:	f000 ffc1 	bl	800755c <RCCEx_PLL2_Config>
 80065da:	4603      	mov	r3, r0
 80065dc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80065de:	e012      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	3324      	adds	r3, #36	; 0x24
 80065e4:	2101      	movs	r1, #1
 80065e6:	4618      	mov	r0, r3
 80065e8:	f001 f86a 	bl	80076c0 <RCCEx_PLL3_Config>
 80065ec:	4603      	mov	r3, r0
 80065ee:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80065f0:	e009      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	75fb      	strb	r3, [r7, #23]
      break;
 80065f6:	e006      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80065f8:	bf00      	nop
 80065fa:	e004      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80065fc:	bf00      	nop
 80065fe:	e002      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006600:	bf00      	nop
 8006602:	e000      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006604:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006606:	7dfb      	ldrb	r3, [r7, #23]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d109      	bne.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800660c:	4b73      	ldr	r3, [pc, #460]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800660e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006610:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006618:	4970      	ldr	r1, [pc, #448]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800661a:	4313      	orrs	r3, r2
 800661c:	650b      	str	r3, [r1, #80]	; 0x50
 800661e:	e001      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006620:	7dfb      	ldrb	r3, [r7, #23]
 8006622:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d04b      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006636:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800663a:	d02e      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800663c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006640:	d828      	bhi.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006646:	d02a      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8006648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800664c:	d822      	bhi.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800664e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006652:	d026      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8006654:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006658:	d81c      	bhi.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800665a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800665e:	d010      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8006660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006664:	d816      	bhi.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006666:	2b00      	cmp	r3, #0
 8006668:	d01d      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800666a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800666e:	d111      	bne.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	3304      	adds	r3, #4
 8006674:	2101      	movs	r1, #1
 8006676:	4618      	mov	r0, r3
 8006678:	f000 ff70 	bl	800755c <RCCEx_PLL2_Config>
 800667c:	4603      	mov	r3, r0
 800667e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006680:	e012      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	3324      	adds	r3, #36	; 0x24
 8006686:	2101      	movs	r1, #1
 8006688:	4618      	mov	r0, r3
 800668a:	f001 f819 	bl	80076c0 <RCCEx_PLL3_Config>
 800668e:	4603      	mov	r3, r0
 8006690:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006692:	e009      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	75fb      	strb	r3, [r7, #23]
      break;
 8006698:	e006      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800669a:	bf00      	nop
 800669c:	e004      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800669e:	bf00      	nop
 80066a0:	e002      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80066a2:	bf00      	nop
 80066a4:	e000      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80066a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066a8:	7dfb      	ldrb	r3, [r7, #23]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10a      	bne.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80066ae:	4b4b      	ldr	r3, [pc, #300]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80066b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066b2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80066bc:	4947      	ldr	r1, [pc, #284]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80066be:	4313      	orrs	r3, r2
 80066c0:	658b      	str	r3, [r1, #88]	; 0x58
 80066c2:	e001      	b.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c4:	7dfb      	ldrb	r3, [r7, #23]
 80066c6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d02f      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066dc:	d00e      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x510>
 80066de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066e2:	d814      	bhi.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x522>
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d015      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80066e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066ec:	d10f      	bne.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066ee:	4b3b      	ldr	r3, [pc, #236]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80066f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f2:	4a3a      	ldr	r2, [pc, #232]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80066f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80066fa:	e00c      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	3304      	adds	r3, #4
 8006700:	2101      	movs	r1, #1
 8006702:	4618      	mov	r0, r3
 8006704:	f000 ff2a 	bl	800755c <RCCEx_PLL2_Config>
 8006708:	4603      	mov	r3, r0
 800670a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800670c:	e003      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	75fb      	strb	r3, [r7, #23]
      break;
 8006712:	e000      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8006714:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006716:	7dfb      	ldrb	r3, [r7, #23]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d109      	bne.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800671c:	4b2f      	ldr	r3, [pc, #188]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800671e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006720:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006728:	492c      	ldr	r1, [pc, #176]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800672a:	4313      	orrs	r3, r2
 800672c:	650b      	str	r3, [r1, #80]	; 0x50
 800672e:	e001      	b.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006730:	7dfb      	ldrb	r3, [r7, #23]
 8006732:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d032      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006744:	2b03      	cmp	r3, #3
 8006746:	d81b      	bhi.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8006748:	a201      	add	r2, pc, #4	; (adr r2, 8006750 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800674a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800674e:	bf00      	nop
 8006750:	08006787 	.word	0x08006787
 8006754:	08006761 	.word	0x08006761
 8006758:	0800676f 	.word	0x0800676f
 800675c:	08006787 	.word	0x08006787
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006760:	4b1e      	ldr	r3, [pc, #120]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006764:	4a1d      	ldr	r2, [pc, #116]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006766:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800676a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800676c:	e00c      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	3304      	adds	r3, #4
 8006772:	2102      	movs	r1, #2
 8006774:	4618      	mov	r0, r3
 8006776:	f000 fef1 	bl	800755c <RCCEx_PLL2_Config>
 800677a:	4603      	mov	r3, r0
 800677c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800677e:	e003      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	75fb      	strb	r3, [r7, #23]
      break;
 8006784:	e000      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8006786:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006788:	7dfb      	ldrb	r3, [r7, #23]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d109      	bne.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800678e:	4b13      	ldr	r3, [pc, #76]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006792:	f023 0203 	bic.w	r2, r3, #3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800679a:	4910      	ldr	r1, [pc, #64]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800679c:	4313      	orrs	r3, r2
 800679e:	64cb      	str	r3, [r1, #76]	; 0x4c
 80067a0:	e001      	b.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a2:	7dfb      	ldrb	r3, [r7, #23]
 80067a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f000 808a 	beq.w	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067b4:	4b0a      	ldr	r3, [pc, #40]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a09      	ldr	r2, [pc, #36]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80067ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067c0:	f7fb ff18 	bl	80025f4 <HAL_GetTick>
 80067c4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067c6:	e00d      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067c8:	f7fb ff14 	bl	80025f4 <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	2b64      	cmp	r3, #100	; 0x64
 80067d4:	d906      	bls.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	75fb      	strb	r3, [r7, #23]
        break;
 80067da:	e009      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80067dc:	58024400 	.word	0x58024400
 80067e0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067e4:	4bb9      	ldr	r3, [pc, #740]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d0eb      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 80067f0:	7dfb      	ldrb	r3, [r7, #23]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d166      	bne.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80067f6:	4bb6      	ldr	r3, [pc, #728]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80067f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006800:	4053      	eors	r3, r2
 8006802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006806:	2b00      	cmp	r3, #0
 8006808:	d013      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800680a:	4bb1      	ldr	r3, [pc, #708]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800680c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800680e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006812:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006814:	4bae      	ldr	r3, [pc, #696]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006818:	4aad      	ldr	r2, [pc, #692]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800681a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800681e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006820:	4bab      	ldr	r3, [pc, #684]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006824:	4aaa      	ldr	r2, [pc, #680]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800682a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800682c:	4aa8      	ldr	r2, [pc, #672]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800683c:	d115      	bne.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800683e:	f7fb fed9 	bl	80025f4 <HAL_GetTick>
 8006842:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006844:	e00b      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006846:	f7fb fed5 	bl	80025f4 <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	f241 3288 	movw	r2, #5000	; 0x1388
 8006854:	4293      	cmp	r3, r2
 8006856:	d902      	bls.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	75fb      	strb	r3, [r7, #23]
            break;
 800685c:	e005      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800685e:	4b9c      	ldr	r3, [pc, #624]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006862:	f003 0302 	and.w	r3, r3, #2
 8006866:	2b00      	cmp	r3, #0
 8006868:	d0ed      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 800686a:	7dfb      	ldrb	r3, [r7, #23]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d126      	bne.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006876:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800687a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800687e:	d10d      	bne.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8006880:	4b93      	ldr	r3, [pc, #588]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800688e:	0919      	lsrs	r1, r3, #4
 8006890:	4b90      	ldr	r3, [pc, #576]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006892:	400b      	ands	r3, r1
 8006894:	498e      	ldr	r1, [pc, #568]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006896:	4313      	orrs	r3, r2
 8006898:	610b      	str	r3, [r1, #16]
 800689a:	e005      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800689c:	4b8c      	ldr	r3, [pc, #560]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	4a8b      	ldr	r2, [pc, #556]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80068a2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80068a6:	6113      	str	r3, [r2, #16]
 80068a8:	4b89      	ldr	r3, [pc, #548]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80068aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80068b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068b6:	4986      	ldr	r1, [pc, #536]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	670b      	str	r3, [r1, #112]	; 0x70
 80068bc:	e004      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80068be:	7dfb      	ldrb	r3, [r7, #23]
 80068c0:	75bb      	strb	r3, [r7, #22]
 80068c2:	e001      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c4:	7dfb      	ldrb	r3, [r7, #23]
 80068c6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0301 	and.w	r3, r3, #1
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d07e      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068d8:	2b28      	cmp	r3, #40	; 0x28
 80068da:	d867      	bhi.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80068dc:	a201      	add	r2, pc, #4	; (adr r2, 80068e4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 80068de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e2:	bf00      	nop
 80068e4:	080069b3 	.word	0x080069b3
 80068e8:	080069ad 	.word	0x080069ad
 80068ec:	080069ad 	.word	0x080069ad
 80068f0:	080069ad 	.word	0x080069ad
 80068f4:	080069ad 	.word	0x080069ad
 80068f8:	080069ad 	.word	0x080069ad
 80068fc:	080069ad 	.word	0x080069ad
 8006900:	080069ad 	.word	0x080069ad
 8006904:	08006989 	.word	0x08006989
 8006908:	080069ad 	.word	0x080069ad
 800690c:	080069ad 	.word	0x080069ad
 8006910:	080069ad 	.word	0x080069ad
 8006914:	080069ad 	.word	0x080069ad
 8006918:	080069ad 	.word	0x080069ad
 800691c:	080069ad 	.word	0x080069ad
 8006920:	080069ad 	.word	0x080069ad
 8006924:	0800699b 	.word	0x0800699b
 8006928:	080069ad 	.word	0x080069ad
 800692c:	080069ad 	.word	0x080069ad
 8006930:	080069ad 	.word	0x080069ad
 8006934:	080069ad 	.word	0x080069ad
 8006938:	080069ad 	.word	0x080069ad
 800693c:	080069ad 	.word	0x080069ad
 8006940:	080069ad 	.word	0x080069ad
 8006944:	080069b3 	.word	0x080069b3
 8006948:	080069ad 	.word	0x080069ad
 800694c:	080069ad 	.word	0x080069ad
 8006950:	080069ad 	.word	0x080069ad
 8006954:	080069ad 	.word	0x080069ad
 8006958:	080069ad 	.word	0x080069ad
 800695c:	080069ad 	.word	0x080069ad
 8006960:	080069ad 	.word	0x080069ad
 8006964:	080069b3 	.word	0x080069b3
 8006968:	080069ad 	.word	0x080069ad
 800696c:	080069ad 	.word	0x080069ad
 8006970:	080069ad 	.word	0x080069ad
 8006974:	080069ad 	.word	0x080069ad
 8006978:	080069ad 	.word	0x080069ad
 800697c:	080069ad 	.word	0x080069ad
 8006980:	080069ad 	.word	0x080069ad
 8006984:	080069b3 	.word	0x080069b3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	3304      	adds	r3, #4
 800698c:	2101      	movs	r1, #1
 800698e:	4618      	mov	r0, r3
 8006990:	f000 fde4 	bl	800755c <RCCEx_PLL2_Config>
 8006994:	4603      	mov	r3, r0
 8006996:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006998:	e00c      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	3324      	adds	r3, #36	; 0x24
 800699e:	2101      	movs	r1, #1
 80069a0:	4618      	mov	r0, r3
 80069a2:	f000 fe8d 	bl	80076c0 <RCCEx_PLL3_Config>
 80069a6:	4603      	mov	r3, r0
 80069a8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80069aa:	e003      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	75fb      	strb	r3, [r7, #23]
      break;
 80069b0:	e000      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 80069b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069b4:	7dfb      	ldrb	r3, [r7, #23]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d109      	bne.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80069ba:	4b45      	ldr	r3, [pc, #276]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80069bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069be:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069c6:	4942      	ldr	r1, [pc, #264]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80069c8:	4313      	orrs	r3, r2
 80069ca:	654b      	str	r3, [r1, #84]	; 0x54
 80069cc:	e001      	b.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ce:	7dfb      	ldrb	r3, [r7, #23]
 80069d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d037      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e2:	2b05      	cmp	r3, #5
 80069e4:	d820      	bhi.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80069e6:	a201      	add	r2, pc, #4	; (adr r2, 80069ec <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80069e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ec:	08006a2f 	.word	0x08006a2f
 80069f0:	08006a05 	.word	0x08006a05
 80069f4:	08006a17 	.word	0x08006a17
 80069f8:	08006a2f 	.word	0x08006a2f
 80069fc:	08006a2f 	.word	0x08006a2f
 8006a00:	08006a2f 	.word	0x08006a2f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	3304      	adds	r3, #4
 8006a08:	2101      	movs	r1, #1
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f000 fda6 	bl	800755c <RCCEx_PLL2_Config>
 8006a10:	4603      	mov	r3, r0
 8006a12:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006a14:	e00c      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	3324      	adds	r3, #36	; 0x24
 8006a1a:	2101      	movs	r1, #1
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f000 fe4f 	bl	80076c0 <RCCEx_PLL3_Config>
 8006a22:	4603      	mov	r3, r0
 8006a24:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006a26:	e003      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a2c:	e000      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8006a2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a30:	7dfb      	ldrb	r3, [r7, #23]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d109      	bne.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006a36:	4b26      	ldr	r3, [pc, #152]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a3a:	f023 0207 	bic.w	r2, r3, #7
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a42:	4923      	ldr	r1, [pc, #140]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006a44:	4313      	orrs	r3, r2
 8006a46:	654b      	str	r3, [r1, #84]	; 0x54
 8006a48:	e001      	b.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a4a:	7dfb      	ldrb	r3, [r7, #23]
 8006a4c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0304 	and.w	r3, r3, #4
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d040      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a60:	2b05      	cmp	r3, #5
 8006a62:	d821      	bhi.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006a64:	a201      	add	r2, pc, #4	; (adr r2, 8006a6c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8006a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6a:	bf00      	nop
 8006a6c:	08006aaf 	.word	0x08006aaf
 8006a70:	08006a85 	.word	0x08006a85
 8006a74:	08006a97 	.word	0x08006a97
 8006a78:	08006aaf 	.word	0x08006aaf
 8006a7c:	08006aaf 	.word	0x08006aaf
 8006a80:	08006aaf 	.word	0x08006aaf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	3304      	adds	r3, #4
 8006a88:	2101      	movs	r1, #1
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f000 fd66 	bl	800755c <RCCEx_PLL2_Config>
 8006a90:	4603      	mov	r3, r0
 8006a92:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006a94:	e00c      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	3324      	adds	r3, #36	; 0x24
 8006a9a:	2101      	movs	r1, #1
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f000 fe0f 	bl	80076c0 <RCCEx_PLL3_Config>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006aa6:	e003      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	75fb      	strb	r3, [r7, #23]
      break;
 8006aac:	e000      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8006aae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ab0:	7dfb      	ldrb	r3, [r7, #23]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d110      	bne.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ab6:	4b06      	ldr	r3, [pc, #24]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aba:	f023 0207 	bic.w	r2, r3, #7
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ac4:	4902      	ldr	r1, [pc, #8]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	658b      	str	r3, [r1, #88]	; 0x58
 8006aca:	e007      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8006acc:	58024800 	.word	0x58024800
 8006ad0:	58024400 	.word	0x58024400
 8006ad4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad8:	7dfb      	ldrb	r3, [r7, #23]
 8006ada:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0320 	and.w	r3, r3, #32
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d04b      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006af2:	d02e      	beq.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8006af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006af8:	d828      	bhi.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006afe:	d02a      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8006b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b04:	d822      	bhi.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006b06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b0a:	d026      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006b0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b10:	d81c      	bhi.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006b12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b16:	d010      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8006b18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b1c:	d816      	bhi.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d01d      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x972>
 8006b22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b26:	d111      	bne.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	3304      	adds	r3, #4
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f000 fd14 	bl	800755c <RCCEx_PLL2_Config>
 8006b34:	4603      	mov	r3, r0
 8006b36:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006b38:	e012      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	3324      	adds	r3, #36	; 0x24
 8006b3e:	2102      	movs	r1, #2
 8006b40:	4618      	mov	r0, r3
 8006b42:	f000 fdbd 	bl	80076c0 <RCCEx_PLL3_Config>
 8006b46:	4603      	mov	r3, r0
 8006b48:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006b4a:	e009      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b50:	e006      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006b52:	bf00      	nop
 8006b54:	e004      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006b56:	bf00      	nop
 8006b58:	e002      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006b5a:	bf00      	nop
 8006b5c:	e000      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006b5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b60:	7dfb      	ldrb	r3, [r7, #23]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10a      	bne.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b66:	4bb2      	ldr	r3, [pc, #712]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b6a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b74:	49ae      	ldr	r1, [pc, #696]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006b76:	4313      	orrs	r3, r2
 8006b78:	654b      	str	r3, [r1, #84]	; 0x54
 8006b7a:	e001      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b7c:	7dfb      	ldrb	r3, [r7, #23]
 8006b7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d04b      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b92:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006b96:	d02e      	beq.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8006b98:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006b9c:	d828      	bhi.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ba2:	d02a      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8006ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ba8:	d822      	bhi.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006baa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bae:	d026      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006bb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bb4:	d81c      	bhi.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006bb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bba:	d010      	beq.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8006bbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bc0:	d816      	bhi.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d01d      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bca:	d111      	bne.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	3304      	adds	r3, #4
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 fcc2 	bl	800755c <RCCEx_PLL2_Config>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006bdc:	e012      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	3324      	adds	r3, #36	; 0x24
 8006be2:	2102      	movs	r1, #2
 8006be4:	4618      	mov	r0, r3
 8006be6:	f000 fd6b 	bl	80076c0 <RCCEx_PLL3_Config>
 8006bea:	4603      	mov	r3, r0
 8006bec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006bee:	e009      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	75fb      	strb	r3, [r7, #23]
      break;
 8006bf4:	e006      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006bf6:	bf00      	nop
 8006bf8:	e004      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006bfa:	bf00      	nop
 8006bfc:	e002      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006bfe:	bf00      	nop
 8006c00:	e000      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006c02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c04:	7dfb      	ldrb	r3, [r7, #23]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10a      	bne.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006c0a:	4b89      	ldr	r3, [pc, #548]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c0e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c18:	4985      	ldr	r1, [pc, #532]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	658b      	str	r3, [r1, #88]	; 0x58
 8006c1e:	e001      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c20:	7dfb      	ldrb	r3, [r7, #23]
 8006c22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d04b      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c36:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006c3a:	d02e      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8006c3c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006c40:	d828      	bhi.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006c42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c46:	d02a      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8006c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c4c:	d822      	bhi.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006c4e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006c52:	d026      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8006c54:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006c58:	d81c      	bhi.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006c5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c5e:	d010      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8006c60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c64:	d816      	bhi.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d01d      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8006c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c6e:	d111      	bne.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	3304      	adds	r3, #4
 8006c74:	2100      	movs	r1, #0
 8006c76:	4618      	mov	r0, r3
 8006c78:	f000 fc70 	bl	800755c <RCCEx_PLL2_Config>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006c80:	e012      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	3324      	adds	r3, #36	; 0x24
 8006c86:	2102      	movs	r1, #2
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f000 fd19 	bl	80076c0 <RCCEx_PLL3_Config>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006c92:	e009      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	75fb      	strb	r3, [r7, #23]
      break;
 8006c98:	e006      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006c9a:	bf00      	nop
 8006c9c:	e004      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006c9e:	bf00      	nop
 8006ca0:	e002      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006ca2:	bf00      	nop
 8006ca4:	e000      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006ca6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ca8:	7dfb      	ldrb	r3, [r7, #23]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d10a      	bne.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006cae:	4b60      	ldr	r3, [pc, #384]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cbc:	495c      	ldr	r1, [pc, #368]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	658b      	str	r3, [r1, #88]	; 0x58
 8006cc2:	e001      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc4:	7dfb      	ldrb	r3, [r7, #23]
 8006cc6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0308 	and.w	r3, r3, #8
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d018      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cdc:	d10a      	bne.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	3324      	adds	r3, #36	; 0x24
 8006ce2:	2102      	movs	r1, #2
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f000 fceb 	bl	80076c0 <RCCEx_PLL3_Config>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d001      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006cf4:	4b4e      	ldr	r3, [pc, #312]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cf8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d00:	494b      	ldr	r1, [pc, #300]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0310 	and.w	r3, r3, #16
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d01a      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d1c:	d10a      	bne.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	3324      	adds	r3, #36	; 0x24
 8006d22:	2102      	movs	r1, #2
 8006d24:	4618      	mov	r0, r3
 8006d26:	f000 fccb 	bl	80076c0 <RCCEx_PLL3_Config>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d001      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d34:	4b3e      	ldr	r3, [pc, #248]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d42:	493b      	ldr	r1, [pc, #236]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006d44:	4313      	orrs	r3, r2
 8006d46:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d034      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d5e:	d01d      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006d60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d64:	d817      	bhi.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d003      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8006d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d6e:	d009      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006d70:	e011      	b.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	3304      	adds	r3, #4
 8006d76:	2100      	movs	r1, #0
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f000 fbef 	bl	800755c <RCCEx_PLL2_Config>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006d82:	e00c      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	3324      	adds	r3, #36	; 0x24
 8006d88:	2102      	movs	r1, #2
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f000 fc98 	bl	80076c0 <RCCEx_PLL3_Config>
 8006d90:	4603      	mov	r3, r0
 8006d92:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006d94:	e003      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	75fb      	strb	r3, [r7, #23]
      break;
 8006d9a:	e000      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8006d9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d9e:	7dfb      	ldrb	r3, [r7, #23]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10a      	bne.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006da4:	4b22      	ldr	r3, [pc, #136]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006da8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006db2:	491f      	ldr	r1, [pc, #124]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006db4:	4313      	orrs	r3, r2
 8006db6:	658b      	str	r3, [r1, #88]	; 0x58
 8006db8:	e001      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dba:	7dfb      	ldrb	r3, [r7, #23]
 8006dbc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d036      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dd0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006dd4:	d01c      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006dd6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006dda:	d816      	bhi.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006ddc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006de0:	d003      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006de2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006de6:	d007      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8006de8:	e00f      	b.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dea:	4b11      	ldr	r3, [pc, #68]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dee:	4a10      	ldr	r2, [pc, #64]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006df4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006df6:	e00c      	b.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	3324      	adds	r3, #36	; 0x24
 8006dfc:	2101      	movs	r1, #1
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f000 fc5e 	bl	80076c0 <RCCEx_PLL3_Config>
 8006e04:	4603      	mov	r3, r0
 8006e06:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006e08:	e003      	b.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	75fb      	strb	r3, [r7, #23]
      break;
 8006e0e:	e000      	b.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8006e10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e12:	7dfb      	ldrb	r3, [r7, #23]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d10d      	bne.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e18:	4b05      	ldr	r3, [pc, #20]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e26:	4902      	ldr	r1, [pc, #8]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	654b      	str	r3, [r1, #84]	; 0x54
 8006e2c:	e004      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8006e2e:	bf00      	nop
 8006e30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e34:	7dfb      	ldrb	r3, [r7, #23]
 8006e36:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d029      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d003      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e50:	d007      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006e52:	e00f      	b.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e54:	4b61      	ldr	r3, [pc, #388]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e58:	4a60      	ldr	r2, [pc, #384]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006e60:	e00b      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	3304      	adds	r3, #4
 8006e66:	2102      	movs	r1, #2
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f000 fb77 	bl	800755c <RCCEx_PLL2_Config>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006e72:	e002      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	75fb      	strb	r3, [r7, #23]
      break;
 8006e78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e7a:	7dfb      	ldrb	r3, [r7, #23]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d109      	bne.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006e80:	4b56      	ldr	r3, [pc, #344]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e8c:	4953      	ldr	r1, [pc, #332]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006e92:	e001      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e94:	7dfb      	ldrb	r3, [r7, #23]
 8006e96:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00a      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	3324      	adds	r3, #36	; 0x24
 8006ea8:	2102      	movs	r1, #2
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 fc08 	bl	80076c0 <RCCEx_PLL3_Config>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d001      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d030      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006eca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ece:	d017      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006ed0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ed4:	d811      	bhi.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006ed6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eda:	d013      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8006edc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ee0:	d80b      	bhi.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d010      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8006ee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eea:	d106      	bne.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eec:	4b3b      	ldr	r3, [pc, #236]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef0:	4a3a      	ldr	r2, [pc, #232]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006ef2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ef6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006ef8:	e007      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	75fb      	strb	r3, [r7, #23]
      break;
 8006efe:	e004      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006f00:	bf00      	nop
 8006f02:	e002      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006f04:	bf00      	nop
 8006f06:	e000      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006f08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f0a:	7dfb      	ldrb	r3, [r7, #23]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d109      	bne.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f10:	4b32      	ldr	r3, [pc, #200]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f1c:	492f      	ldr	r1, [pc, #188]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	654b      	str	r3, [r1, #84]	; 0x54
 8006f22:	e001      	b.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f24:	7dfb      	ldrb	r3, [r7, #23]
 8006f26:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d008      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006f34:	4b29      	ldr	r3, [pc, #164]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f40:	4926      	ldr	r1, [pc, #152]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006f42:	4313      	orrs	r3, r2
 8006f44:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d008      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006f52:	4b22      	ldr	r3, [pc, #136]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f56:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f5e:	491f      	ldr	r1, [pc, #124]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006f60:	4313      	orrs	r3, r2
 8006f62:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00d      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f70:	4b1a      	ldr	r3, [pc, #104]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	4a19      	ldr	r2, [pc, #100]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006f76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f7a:	6113      	str	r3, [r2, #16]
 8006f7c:	4b17      	ldr	r3, [pc, #92]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006f7e:	691a      	ldr	r2, [r3, #16]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f86:	4915      	ldr	r1, [pc, #84]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	da08      	bge.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006f94:	4b11      	ldr	r3, [pc, #68]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f98:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fa0:	490e      	ldr	r1, [pc, #56]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d009      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006fb2:	4b0a      	ldr	r3, [pc, #40]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fb6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fc0:	4906      	ldr	r1, [pc, #24]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006fc6:	7dbb      	ldrb	r3, [r7, #22]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d101      	bne.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	e000      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3718      	adds	r7, #24
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	58024400 	.word	0x58024400

08006fe0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006fe4:	f7ff f8a6 	bl	8006134 <HAL_RCC_GetHCLKFreq>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	4b06      	ldr	r3, [pc, #24]	; (8007004 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	091b      	lsrs	r3, r3, #4
 8006ff0:	f003 0307 	and.w	r3, r3, #7
 8006ff4:	4904      	ldr	r1, [pc, #16]	; (8007008 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006ff6:	5ccb      	ldrb	r3, [r1, r3]
 8006ff8:	f003 031f 	and.w	r3, r3, #31
 8006ffc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007000:	4618      	mov	r0, r3
 8007002:	bd80      	pop	{r7, pc}
 8007004:	58024400 	.word	0x58024400
 8007008:	080196b4 	.word	0x080196b4

0800700c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800700c:	b480      	push	{r7}
 800700e:	b089      	sub	sp, #36	; 0x24
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007014:	4ba1      	ldr	r3, [pc, #644]	; (800729c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007018:	f003 0303 	and.w	r3, r3, #3
 800701c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800701e:	4b9f      	ldr	r3, [pc, #636]	; (800729c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007022:	0b1b      	lsrs	r3, r3, #12
 8007024:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007028:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800702a:	4b9c      	ldr	r3, [pc, #624]	; (800729c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800702c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702e:	091b      	lsrs	r3, r3, #4
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007036:	4b99      	ldr	r3, [pc, #612]	; (800729c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800703a:	08db      	lsrs	r3, r3, #3
 800703c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007040:	693a      	ldr	r2, [r7, #16]
 8007042:	fb02 f303 	mul.w	r3, r2, r3
 8007046:	ee07 3a90 	vmov	s15, r3
 800704a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800704e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	2b00      	cmp	r3, #0
 8007056:	f000 8111 	beq.w	800727c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	2b02      	cmp	r3, #2
 800705e:	f000 8083 	beq.w	8007168 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	2b02      	cmp	r3, #2
 8007066:	f200 80a1 	bhi.w	80071ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d003      	beq.n	8007078 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	2b01      	cmp	r3, #1
 8007074:	d056      	beq.n	8007124 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007076:	e099      	b.n	80071ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007078:	4b88      	ldr	r3, [pc, #544]	; (800729c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 0320 	and.w	r3, r3, #32
 8007080:	2b00      	cmp	r3, #0
 8007082:	d02d      	beq.n	80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007084:	4b85      	ldr	r3, [pc, #532]	; (800729c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	08db      	lsrs	r3, r3, #3
 800708a:	f003 0303 	and.w	r3, r3, #3
 800708e:	4a84      	ldr	r2, [pc, #528]	; (80072a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007090:	fa22 f303 	lsr.w	r3, r2, r3
 8007094:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	ee07 3a90 	vmov	s15, r3
 800709c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	ee07 3a90 	vmov	s15, r3
 80070a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ae:	4b7b      	ldr	r3, [pc, #492]	; (800729c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070b6:	ee07 3a90 	vmov	s15, r3
 80070ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070be:	ed97 6a03 	vldr	s12, [r7, #12]
 80070c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80072a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070da:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80070de:	e087      	b.n	80071f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	ee07 3a90 	vmov	s15, r3
 80070e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80070ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070f2:	4b6a      	ldr	r3, [pc, #424]	; (800729c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070fa:	ee07 3a90 	vmov	s15, r3
 80070fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007102:	ed97 6a03 	vldr	s12, [r7, #12]
 8007106:	eddf 5a67 	vldr	s11, [pc, #412]	; 80072a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800710a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800710e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800711a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800711e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007122:	e065      	b.n	80071f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	ee07 3a90 	vmov	s15, r3
 800712a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800712e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80072ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007136:	4b59      	ldr	r3, [pc, #356]	; (800729c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800713e:	ee07 3a90 	vmov	s15, r3
 8007142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007146:	ed97 6a03 	vldr	s12, [r7, #12]
 800714a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80072a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800714e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800715a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800715e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007162:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007166:	e043      	b.n	80071f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	ee07 3a90 	vmov	s15, r3
 800716e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007172:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80072b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800717a:	4b48      	ldr	r3, [pc, #288]	; (800729c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800717c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007182:	ee07 3a90 	vmov	s15, r3
 8007186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800718a:	ed97 6a03 	vldr	s12, [r7, #12]
 800718e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80072a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800719a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800719e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071aa:	e021      	b.n	80071f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	ee07 3a90 	vmov	s15, r3
 80071b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80072ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80071ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071be:	4b37      	ldr	r3, [pc, #220]	; (800729c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071c6:	ee07 3a90 	vmov	s15, r3
 80071ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80071d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80072a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071ee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80071f0:	4b2a      	ldr	r3, [pc, #168]	; (800729c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f4:	0a5b      	lsrs	r3, r3, #9
 80071f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071fa:	ee07 3a90 	vmov	s15, r3
 80071fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007202:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007206:	ee37 7a87 	vadd.f32	s14, s15, s14
 800720a:	edd7 6a07 	vldr	s13, [r7, #28]
 800720e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007216:	ee17 2a90 	vmov	r2, s15
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800721e:	4b1f      	ldr	r3, [pc, #124]	; (800729c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007222:	0c1b      	lsrs	r3, r3, #16
 8007224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007228:	ee07 3a90 	vmov	s15, r3
 800722c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007230:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007234:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007238:	edd7 6a07 	vldr	s13, [r7, #28]
 800723c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007240:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007244:	ee17 2a90 	vmov	r2, s15
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800724c:	4b13      	ldr	r3, [pc, #76]	; (800729c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800724e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007250:	0e1b      	lsrs	r3, r3, #24
 8007252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007256:	ee07 3a90 	vmov	s15, r3
 800725a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800725e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007262:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007266:	edd7 6a07 	vldr	s13, [r7, #28]
 800726a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800726e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007272:	ee17 2a90 	vmov	r2, s15
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800727a:	e008      	b.n	800728e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	609a      	str	r2, [r3, #8]
}
 800728e:	bf00      	nop
 8007290:	3724      	adds	r7, #36	; 0x24
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	58024400 	.word	0x58024400
 80072a0:	03d09000 	.word	0x03d09000
 80072a4:	46000000 	.word	0x46000000
 80072a8:	4c742400 	.word	0x4c742400
 80072ac:	4a742400 	.word	0x4a742400
 80072b0:	4af42400 	.word	0x4af42400

080072b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b089      	sub	sp, #36	; 0x24
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80072bc:	4ba1      	ldr	r3, [pc, #644]	; (8007544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c0:	f003 0303 	and.w	r3, r3, #3
 80072c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80072c6:	4b9f      	ldr	r3, [pc, #636]	; (8007544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ca:	0d1b      	lsrs	r3, r3, #20
 80072cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80072d2:	4b9c      	ldr	r3, [pc, #624]	; (8007544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d6:	0a1b      	lsrs	r3, r3, #8
 80072d8:	f003 0301 	and.w	r3, r3, #1
 80072dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80072de:	4b99      	ldr	r3, [pc, #612]	; (8007544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e2:	08db      	lsrs	r3, r3, #3
 80072e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072e8:	693a      	ldr	r2, [r7, #16]
 80072ea:	fb02 f303 	mul.w	r3, r2, r3
 80072ee:	ee07 3a90 	vmov	s15, r3
 80072f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f000 8111 	beq.w	8007524 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	2b02      	cmp	r3, #2
 8007306:	f000 8083 	beq.w	8007410 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	2b02      	cmp	r3, #2
 800730e:	f200 80a1 	bhi.w	8007454 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d003      	beq.n	8007320 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d056      	beq.n	80073cc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800731e:	e099      	b.n	8007454 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007320:	4b88      	ldr	r3, [pc, #544]	; (8007544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 0320 	and.w	r3, r3, #32
 8007328:	2b00      	cmp	r3, #0
 800732a:	d02d      	beq.n	8007388 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800732c:	4b85      	ldr	r3, [pc, #532]	; (8007544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	08db      	lsrs	r3, r3, #3
 8007332:	f003 0303 	and.w	r3, r3, #3
 8007336:	4a84      	ldr	r2, [pc, #528]	; (8007548 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007338:	fa22 f303 	lsr.w	r3, r2, r3
 800733c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	ee07 3a90 	vmov	s15, r3
 8007344:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	ee07 3a90 	vmov	s15, r3
 800734e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007356:	4b7b      	ldr	r3, [pc, #492]	; (8007544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800735e:	ee07 3a90 	vmov	s15, r3
 8007362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007366:	ed97 6a03 	vldr	s12, [r7, #12]
 800736a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800754c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800736e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800737a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800737e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007382:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007386:	e087      	b.n	8007498 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	ee07 3a90 	vmov	s15, r3
 800738e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007392:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007550 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800739a:	4b6a      	ldr	r3, [pc, #424]	; (8007544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800739c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073a2:	ee07 3a90 	vmov	s15, r3
 80073a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80073ae:	eddf 5a67 	vldr	s11, [pc, #412]	; 800754c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073ca:	e065      	b.n	8007498 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	ee07 3a90 	vmov	s15, r3
 80073d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007554 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80073da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073de:	4b59      	ldr	r3, [pc, #356]	; (8007544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073e6:	ee07 3a90 	vmov	s15, r3
 80073ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80073f2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800754c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800740a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800740e:	e043      	b.n	8007498 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	ee07 3a90 	vmov	s15, r3
 8007416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800741a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007558 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800741e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007422:	4b48      	ldr	r3, [pc, #288]	; (8007544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800742a:	ee07 3a90 	vmov	s15, r3
 800742e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007432:	ed97 6a03 	vldr	s12, [r7, #12]
 8007436:	eddf 5a45 	vldr	s11, [pc, #276]	; 800754c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800743a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800743e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007442:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800744a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800744e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007452:	e021      	b.n	8007498 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	ee07 3a90 	vmov	s15, r3
 800745a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800745e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007554 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007466:	4b37      	ldr	r3, [pc, #220]	; (8007544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800746e:	ee07 3a90 	vmov	s15, r3
 8007472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007476:	ed97 6a03 	vldr	s12, [r7, #12]
 800747a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800754c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800747e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800748a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800748e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007492:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007496:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007498:	4b2a      	ldr	r3, [pc, #168]	; (8007544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800749a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749c:	0a5b      	lsrs	r3, r3, #9
 800749e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074a2:	ee07 3a90 	vmov	s15, r3
 80074a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80074b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074be:	ee17 2a90 	vmov	r2, s15
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80074c6:	4b1f      	ldr	r3, [pc, #124]	; (8007544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ca:	0c1b      	lsrs	r3, r3, #16
 80074cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074d0:	ee07 3a90 	vmov	s15, r3
 80074d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80074e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074ec:	ee17 2a90 	vmov	r2, s15
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80074f4:	4b13      	ldr	r3, [pc, #76]	; (8007544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f8:	0e1b      	lsrs	r3, r3, #24
 80074fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074fe:	ee07 3a90 	vmov	s15, r3
 8007502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007506:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800750a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800750e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007512:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007516:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800751a:	ee17 2a90 	vmov	r2, s15
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007522:	e008      	b.n	8007536 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	609a      	str	r2, [r3, #8]
}
 8007536:	bf00      	nop
 8007538:	3724      	adds	r7, #36	; 0x24
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	58024400 	.word	0x58024400
 8007548:	03d09000 	.word	0x03d09000
 800754c:	46000000 	.word	0x46000000
 8007550:	4c742400 	.word	0x4c742400
 8007554:	4a742400 	.word	0x4a742400
 8007558:	4af42400 	.word	0x4af42400

0800755c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007566:	2300      	movs	r3, #0
 8007568:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800756a:	4b53      	ldr	r3, [pc, #332]	; (80076b8 <RCCEx_PLL2_Config+0x15c>)
 800756c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800756e:	f003 0303 	and.w	r3, r3, #3
 8007572:	2b03      	cmp	r3, #3
 8007574:	d101      	bne.n	800757a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e099      	b.n	80076ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800757a:	4b4f      	ldr	r3, [pc, #316]	; (80076b8 <RCCEx_PLL2_Config+0x15c>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a4e      	ldr	r2, [pc, #312]	; (80076b8 <RCCEx_PLL2_Config+0x15c>)
 8007580:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007584:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007586:	f7fb f835 	bl	80025f4 <HAL_GetTick>
 800758a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800758c:	e008      	b.n	80075a0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800758e:	f7fb f831 	bl	80025f4 <HAL_GetTick>
 8007592:	4602      	mov	r2, r0
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	1ad3      	subs	r3, r2, r3
 8007598:	2b02      	cmp	r3, #2
 800759a:	d901      	bls.n	80075a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e086      	b.n	80076ae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80075a0:	4b45      	ldr	r3, [pc, #276]	; (80076b8 <RCCEx_PLL2_Config+0x15c>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1f0      	bne.n	800758e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80075ac:	4b42      	ldr	r3, [pc, #264]	; (80076b8 <RCCEx_PLL2_Config+0x15c>)
 80075ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	031b      	lsls	r3, r3, #12
 80075ba:	493f      	ldr	r1, [pc, #252]	; (80076b8 <RCCEx_PLL2_Config+0x15c>)
 80075bc:	4313      	orrs	r3, r2
 80075be:	628b      	str	r3, [r1, #40]	; 0x28
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	3b01      	subs	r3, #1
 80075c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	3b01      	subs	r3, #1
 80075d0:	025b      	lsls	r3, r3, #9
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	431a      	orrs	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	3b01      	subs	r3, #1
 80075dc:	041b      	lsls	r3, r3, #16
 80075de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80075e2:	431a      	orrs	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	691b      	ldr	r3, [r3, #16]
 80075e8:	3b01      	subs	r3, #1
 80075ea:	061b      	lsls	r3, r3, #24
 80075ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80075f0:	4931      	ldr	r1, [pc, #196]	; (80076b8 <RCCEx_PLL2_Config+0x15c>)
 80075f2:	4313      	orrs	r3, r2
 80075f4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80075f6:	4b30      	ldr	r3, [pc, #192]	; (80076b8 <RCCEx_PLL2_Config+0x15c>)
 80075f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	492d      	ldr	r1, [pc, #180]	; (80076b8 <RCCEx_PLL2_Config+0x15c>)
 8007604:	4313      	orrs	r3, r2
 8007606:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007608:	4b2b      	ldr	r3, [pc, #172]	; (80076b8 <RCCEx_PLL2_Config+0x15c>)
 800760a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800760c:	f023 0220 	bic.w	r2, r3, #32
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	4928      	ldr	r1, [pc, #160]	; (80076b8 <RCCEx_PLL2_Config+0x15c>)
 8007616:	4313      	orrs	r3, r2
 8007618:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800761a:	4b27      	ldr	r3, [pc, #156]	; (80076b8 <RCCEx_PLL2_Config+0x15c>)
 800761c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761e:	4a26      	ldr	r2, [pc, #152]	; (80076b8 <RCCEx_PLL2_Config+0x15c>)
 8007620:	f023 0310 	bic.w	r3, r3, #16
 8007624:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007626:	4b24      	ldr	r3, [pc, #144]	; (80076b8 <RCCEx_PLL2_Config+0x15c>)
 8007628:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800762a:	4b24      	ldr	r3, [pc, #144]	; (80076bc <RCCEx_PLL2_Config+0x160>)
 800762c:	4013      	ands	r3, r2
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	69d2      	ldr	r2, [r2, #28]
 8007632:	00d2      	lsls	r2, r2, #3
 8007634:	4920      	ldr	r1, [pc, #128]	; (80076b8 <RCCEx_PLL2_Config+0x15c>)
 8007636:	4313      	orrs	r3, r2
 8007638:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800763a:	4b1f      	ldr	r3, [pc, #124]	; (80076b8 <RCCEx_PLL2_Config+0x15c>)
 800763c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763e:	4a1e      	ldr	r2, [pc, #120]	; (80076b8 <RCCEx_PLL2_Config+0x15c>)
 8007640:	f043 0310 	orr.w	r3, r3, #16
 8007644:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d106      	bne.n	800765a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800764c:	4b1a      	ldr	r3, [pc, #104]	; (80076b8 <RCCEx_PLL2_Config+0x15c>)
 800764e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007650:	4a19      	ldr	r2, [pc, #100]	; (80076b8 <RCCEx_PLL2_Config+0x15c>)
 8007652:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007656:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007658:	e00f      	b.n	800767a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d106      	bne.n	800766e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007660:	4b15      	ldr	r3, [pc, #84]	; (80076b8 <RCCEx_PLL2_Config+0x15c>)
 8007662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007664:	4a14      	ldr	r2, [pc, #80]	; (80076b8 <RCCEx_PLL2_Config+0x15c>)
 8007666:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800766a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800766c:	e005      	b.n	800767a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800766e:	4b12      	ldr	r3, [pc, #72]	; (80076b8 <RCCEx_PLL2_Config+0x15c>)
 8007670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007672:	4a11      	ldr	r2, [pc, #68]	; (80076b8 <RCCEx_PLL2_Config+0x15c>)
 8007674:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007678:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800767a:	4b0f      	ldr	r3, [pc, #60]	; (80076b8 <RCCEx_PLL2_Config+0x15c>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a0e      	ldr	r2, [pc, #56]	; (80076b8 <RCCEx_PLL2_Config+0x15c>)
 8007680:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007684:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007686:	f7fa ffb5 	bl	80025f4 <HAL_GetTick>
 800768a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800768c:	e008      	b.n	80076a0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800768e:	f7fa ffb1 	bl	80025f4 <HAL_GetTick>
 8007692:	4602      	mov	r2, r0
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	2b02      	cmp	r3, #2
 800769a:	d901      	bls.n	80076a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800769c:	2303      	movs	r3, #3
 800769e:	e006      	b.n	80076ae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80076a0:	4b05      	ldr	r3, [pc, #20]	; (80076b8 <RCCEx_PLL2_Config+0x15c>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d0f0      	beq.n	800768e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	58024400 	.word	0x58024400
 80076bc:	ffff0007 	.word	0xffff0007

080076c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80076ca:	2300      	movs	r3, #0
 80076cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80076ce:	4b53      	ldr	r3, [pc, #332]	; (800781c <RCCEx_PLL3_Config+0x15c>)
 80076d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d2:	f003 0303 	and.w	r3, r3, #3
 80076d6:	2b03      	cmp	r3, #3
 80076d8:	d101      	bne.n	80076de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e099      	b.n	8007812 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80076de:	4b4f      	ldr	r3, [pc, #316]	; (800781c <RCCEx_PLL3_Config+0x15c>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a4e      	ldr	r2, [pc, #312]	; (800781c <RCCEx_PLL3_Config+0x15c>)
 80076e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076ea:	f7fa ff83 	bl	80025f4 <HAL_GetTick>
 80076ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80076f0:	e008      	b.n	8007704 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80076f2:	f7fa ff7f 	bl	80025f4 <HAL_GetTick>
 80076f6:	4602      	mov	r2, r0
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d901      	bls.n	8007704 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007700:	2303      	movs	r3, #3
 8007702:	e086      	b.n	8007812 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007704:	4b45      	ldr	r3, [pc, #276]	; (800781c <RCCEx_PLL3_Config+0x15c>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1f0      	bne.n	80076f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007710:	4b42      	ldr	r3, [pc, #264]	; (800781c <RCCEx_PLL3_Config+0x15c>)
 8007712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007714:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	051b      	lsls	r3, r3, #20
 800771e:	493f      	ldr	r1, [pc, #252]	; (800781c <RCCEx_PLL3_Config+0x15c>)
 8007720:	4313      	orrs	r3, r2
 8007722:	628b      	str	r3, [r1, #40]	; 0x28
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	3b01      	subs	r3, #1
 800772a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	3b01      	subs	r3, #1
 8007734:	025b      	lsls	r3, r3, #9
 8007736:	b29b      	uxth	r3, r3
 8007738:	431a      	orrs	r2, r3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	3b01      	subs	r3, #1
 8007740:	041b      	lsls	r3, r3, #16
 8007742:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007746:	431a      	orrs	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	3b01      	subs	r3, #1
 800774e:	061b      	lsls	r3, r3, #24
 8007750:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007754:	4931      	ldr	r1, [pc, #196]	; (800781c <RCCEx_PLL3_Config+0x15c>)
 8007756:	4313      	orrs	r3, r2
 8007758:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800775a:	4b30      	ldr	r3, [pc, #192]	; (800781c <RCCEx_PLL3_Config+0x15c>)
 800775c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	492d      	ldr	r1, [pc, #180]	; (800781c <RCCEx_PLL3_Config+0x15c>)
 8007768:	4313      	orrs	r3, r2
 800776a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800776c:	4b2b      	ldr	r3, [pc, #172]	; (800781c <RCCEx_PLL3_Config+0x15c>)
 800776e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007770:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	699b      	ldr	r3, [r3, #24]
 8007778:	4928      	ldr	r1, [pc, #160]	; (800781c <RCCEx_PLL3_Config+0x15c>)
 800777a:	4313      	orrs	r3, r2
 800777c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800777e:	4b27      	ldr	r3, [pc, #156]	; (800781c <RCCEx_PLL3_Config+0x15c>)
 8007780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007782:	4a26      	ldr	r2, [pc, #152]	; (800781c <RCCEx_PLL3_Config+0x15c>)
 8007784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007788:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800778a:	4b24      	ldr	r3, [pc, #144]	; (800781c <RCCEx_PLL3_Config+0x15c>)
 800778c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800778e:	4b24      	ldr	r3, [pc, #144]	; (8007820 <RCCEx_PLL3_Config+0x160>)
 8007790:	4013      	ands	r3, r2
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	69d2      	ldr	r2, [r2, #28]
 8007796:	00d2      	lsls	r2, r2, #3
 8007798:	4920      	ldr	r1, [pc, #128]	; (800781c <RCCEx_PLL3_Config+0x15c>)
 800779a:	4313      	orrs	r3, r2
 800779c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800779e:	4b1f      	ldr	r3, [pc, #124]	; (800781c <RCCEx_PLL3_Config+0x15c>)
 80077a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a2:	4a1e      	ldr	r2, [pc, #120]	; (800781c <RCCEx_PLL3_Config+0x15c>)
 80077a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d106      	bne.n	80077be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80077b0:	4b1a      	ldr	r3, [pc, #104]	; (800781c <RCCEx_PLL3_Config+0x15c>)
 80077b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b4:	4a19      	ldr	r2, [pc, #100]	; (800781c <RCCEx_PLL3_Config+0x15c>)
 80077b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80077ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077bc:	e00f      	b.n	80077de <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d106      	bne.n	80077d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80077c4:	4b15      	ldr	r3, [pc, #84]	; (800781c <RCCEx_PLL3_Config+0x15c>)
 80077c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c8:	4a14      	ldr	r2, [pc, #80]	; (800781c <RCCEx_PLL3_Config+0x15c>)
 80077ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80077ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077d0:	e005      	b.n	80077de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80077d2:	4b12      	ldr	r3, [pc, #72]	; (800781c <RCCEx_PLL3_Config+0x15c>)
 80077d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d6:	4a11      	ldr	r2, [pc, #68]	; (800781c <RCCEx_PLL3_Config+0x15c>)
 80077d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80077dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80077de:	4b0f      	ldr	r3, [pc, #60]	; (800781c <RCCEx_PLL3_Config+0x15c>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a0e      	ldr	r2, [pc, #56]	; (800781c <RCCEx_PLL3_Config+0x15c>)
 80077e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077ea:	f7fa ff03 	bl	80025f4 <HAL_GetTick>
 80077ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80077f0:	e008      	b.n	8007804 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80077f2:	f7fa feff 	bl	80025f4 <HAL_GetTick>
 80077f6:	4602      	mov	r2, r0
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d901      	bls.n	8007804 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	e006      	b.n	8007812 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007804:	4b05      	ldr	r3, [pc, #20]	; (800781c <RCCEx_PLL3_Config+0x15c>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800780c:	2b00      	cmp	r3, #0
 800780e:	d0f0      	beq.n	80077f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007810:	7bfb      	ldrb	r3, [r7, #15]
}
 8007812:	4618      	mov	r0, r3
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	58024400 	.word	0x58024400
 8007820:	ffff0007 	.word	0xffff0007

08007824 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d101      	bne.n	8007836 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e0f1      	b.n	8007a1a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a78      	ldr	r2, [pc, #480]	; (8007a24 <HAL_SPI_Init+0x200>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d00f      	beq.n	8007866 <HAL_SPI_Init+0x42>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a77      	ldr	r2, [pc, #476]	; (8007a28 <HAL_SPI_Init+0x204>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d00a      	beq.n	8007866 <HAL_SPI_Init+0x42>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a75      	ldr	r2, [pc, #468]	; (8007a2c <HAL_SPI_Init+0x208>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d005      	beq.n	8007866 <HAL_SPI_Init+0x42>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	2b0f      	cmp	r3, #15
 8007860:	d901      	bls.n	8007866 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e0d9      	b.n	8007a1a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fba2 	bl	8007fb0 <SPI_GetPacketSize>
 800786c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a6c      	ldr	r2, [pc, #432]	; (8007a24 <HAL_SPI_Init+0x200>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d00c      	beq.n	8007892 <HAL_SPI_Init+0x6e>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a6a      	ldr	r2, [pc, #424]	; (8007a28 <HAL_SPI_Init+0x204>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d007      	beq.n	8007892 <HAL_SPI_Init+0x6e>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a69      	ldr	r2, [pc, #420]	; (8007a2c <HAL_SPI_Init+0x208>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d002      	beq.n	8007892 <HAL_SPI_Init+0x6e>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2b08      	cmp	r3, #8
 8007890:	d811      	bhi.n	80078b6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007896:	4a63      	ldr	r2, [pc, #396]	; (8007a24 <HAL_SPI_Init+0x200>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d009      	beq.n	80078b0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a61      	ldr	r2, [pc, #388]	; (8007a28 <HAL_SPI_Init+0x204>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d004      	beq.n	80078b0 <HAL_SPI_Init+0x8c>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a60      	ldr	r2, [pc, #384]	; (8007a2c <HAL_SPI_Init+0x208>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d104      	bne.n	80078ba <HAL_SPI_Init+0x96>
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2b10      	cmp	r3, #16
 80078b4:	d901      	bls.n	80078ba <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e0af      	b.n	8007a1a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d106      	bne.n	80078d4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f7f9 fedc 	bl	800168c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2202      	movs	r2, #2
 80078d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f022 0201 	bic.w	r2, r2, #1
 80078ea:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80078f6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	699b      	ldr	r3, [r3, #24]
 80078fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007900:	d119      	bne.n	8007936 <HAL_SPI_Init+0x112>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800790a:	d103      	bne.n	8007914 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007910:	2b00      	cmp	r3, #0
 8007912:	d008      	beq.n	8007926 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007918:	2b00      	cmp	r3, #0
 800791a:	d10c      	bne.n	8007936 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007920:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007924:	d107      	bne.n	8007936 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007934:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	69da      	ldr	r2, [r3, #28]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793e:	431a      	orrs	r2, r3
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	431a      	orrs	r2, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007948:	ea42 0103 	orr.w	r1, r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	68da      	ldr	r2, [r3, #12]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	430a      	orrs	r2, r1
 8007956:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007960:	431a      	orrs	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007966:	431a      	orrs	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	431a      	orrs	r2, r3
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	431a      	orrs	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	695b      	ldr	r3, [r3, #20]
 8007978:	431a      	orrs	r2, r3
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	431a      	orrs	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	431a      	orrs	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800798a:	431a      	orrs	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	431a      	orrs	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007996:	ea42 0103 	orr.w	r1, r2, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	430a      	orrs	r2, r1
 80079a4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d113      	bne.n	80079d6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079c0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80079d4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f022 0201 	bic.w	r2, r2, #1
 80079e4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00a      	beq.n	8007a08 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	430a      	orrs	r2, r1
 8007a06:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	40013000 	.word	0x40013000
 8007a28:	40003800 	.word	0x40003800
 8007a2c:	40003c00 	.word	0x40003c00

08007a30 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b08a      	sub	sp, #40	; 0x28
 8007a34:	af02      	add	r7, sp, #8
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	603b      	str	r3, [r7, #0]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3320      	adds	r3, #32
 8007a46:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d101      	bne.n	8007a5a <HAL_SPI_Transmit+0x2a>
 8007a56:	2302      	movs	r3, #2
 8007a58:	e1d7      	b.n	8007e0a <HAL_SPI_Transmit+0x3da>
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a62:	f7fa fdc7 	bl	80025f4 <HAL_GetTick>
 8007a66:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d007      	beq.n	8007a84 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8007a74:	2302      	movs	r3, #2
 8007a76:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007a80:	7efb      	ldrb	r3, [r7, #27]
 8007a82:	e1c2      	b.n	8007e0a <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d002      	beq.n	8007a90 <HAL_SPI_Transmit+0x60>
 8007a8a:	88fb      	ldrh	r3, [r7, #6]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d107      	bne.n	8007aa0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007a9c:	7efb      	ldrb	r3, [r7, #27]
 8007a9e:	e1b4      	b.n	8007e0a <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2203      	movs	r2, #3
 8007aa4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	68ba      	ldr	r2, [r7, #8]
 8007ab4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	88fa      	ldrh	r2, [r7, #6]
 8007aba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	88fa      	ldrh	r2, [r7, #6]
 8007ac2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007af0:	d107      	bne.n	8007b02 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b00:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	685a      	ldr	r2, [r3, #4]
 8007b08:	4b96      	ldr	r3, [pc, #600]	; (8007d64 <HAL_SPI_Transmit+0x334>)
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	88f9      	ldrh	r1, [r7, #6]
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	6812      	ldr	r2, [r2, #0]
 8007b12:	430b      	orrs	r3, r1
 8007b14:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f042 0201 	orr.w	r2, r2, #1
 8007b24:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b2e:	d107      	bne.n	8007b40 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	2b0f      	cmp	r3, #15
 8007b46:	d947      	bls.n	8007bd8 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007b48:	e03f      	b.n	8007bca <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	695b      	ldr	r3, [r3, #20]
 8007b50:	f003 0302 	and.w	r3, r3, #2
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d114      	bne.n	8007b82 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	6812      	ldr	r2, [r2, #0]
 8007b62:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b68:	1d1a      	adds	r2, r3, #4
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	3b01      	subs	r3, #1
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007b80:	e023      	b.n	8007bca <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b82:	f7fa fd37 	bl	80025f4 <HAL_GetTick>
 8007b86:	4602      	mov	r2, r0
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	1ad3      	subs	r3, r2, r3
 8007b8c:	683a      	ldr	r2, [r7, #0]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d803      	bhi.n	8007b9a <HAL_SPI_Transmit+0x16a>
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b98:	d102      	bne.n	8007ba0 <HAL_SPI_Transmit+0x170>
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d114      	bne.n	8007bca <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f000 f937 	bl	8007e14 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bb4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e11f      	b.n	8007e0a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1b9      	bne.n	8007b4a <HAL_SPI_Transmit+0x11a>
 8007bd6:	e0f2      	b.n	8007dbe <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	2b07      	cmp	r3, #7
 8007bde:	f240 80e7 	bls.w	8007db0 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007be2:	e05d      	b.n	8007ca0 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	695b      	ldr	r3, [r3, #20]
 8007bea:	f003 0302 	and.w	r3, r3, #2
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d132      	bne.n	8007c58 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d918      	bls.n	8007c30 <HAL_SPI_Transmit+0x200>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d014      	beq.n	8007c30 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	6812      	ldr	r2, [r2, #0]
 8007c10:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c16:	1d1a      	adds	r2, r3, #4
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	3b02      	subs	r3, #2
 8007c26:	b29a      	uxth	r2, r3
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007c2e:	e037      	b.n	8007ca0 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c34:	881a      	ldrh	r2, [r3, #0]
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c3e:	1c9a      	adds	r2, r3, #2
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	b29a      	uxth	r2, r3
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007c56:	e023      	b.n	8007ca0 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c58:	f7fa fccc 	bl	80025f4 <HAL_GetTick>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	683a      	ldr	r2, [r7, #0]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d803      	bhi.n	8007c70 <HAL_SPI_Transmit+0x240>
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c6e:	d102      	bne.n	8007c76 <HAL_SPI_Transmit+0x246>
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d114      	bne.n	8007ca0 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f000 f8cc 	bl	8007e14 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	e0b4      	b.n	8007e0a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d19b      	bne.n	8007be4 <HAL_SPI_Transmit+0x1b4>
 8007cac:	e087      	b.n	8007dbe <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	695b      	ldr	r3, [r3, #20]
 8007cb4:	f003 0302 	and.w	r3, r3, #2
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d155      	bne.n	8007d68 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	2b03      	cmp	r3, #3
 8007cc6:	d918      	bls.n	8007cfa <HAL_SPI_Transmit+0x2ca>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ccc:	2b40      	cmp	r3, #64	; 0x40
 8007cce:	d914      	bls.n	8007cfa <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	6812      	ldr	r2, [r2, #0]
 8007cda:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ce0:	1d1a      	adds	r2, r3, #4
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	3b04      	subs	r3, #4
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007cf8:	e05a      	b.n	8007db0 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d917      	bls.n	8007d36 <HAL_SPI_Transmit+0x306>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d013      	beq.n	8007d36 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d12:	881a      	ldrh	r2, [r3, #0]
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d1c:	1c9a      	adds	r2, r3, #2
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	3b02      	subs	r3, #2
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007d34:	e03c      	b.n	8007db0 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	3320      	adds	r3, #32
 8007d40:	7812      	ldrb	r2, [r2, #0]
 8007d42:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d48:	1c5a      	adds	r2, r3, #1
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	3b01      	subs	r3, #1
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007d60:	e026      	b.n	8007db0 <HAL_SPI_Transmit+0x380>
 8007d62:	bf00      	nop
 8007d64:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d68:	f7fa fc44 	bl	80025f4 <HAL_GetTick>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	683a      	ldr	r2, [r7, #0]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d803      	bhi.n	8007d80 <HAL_SPI_Transmit+0x350>
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d7e:	d102      	bne.n	8007d86 <HAL_SPI_Transmit+0x356>
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d114      	bne.n	8007db0 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f000 f844 	bl	8007e14 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007dac:	2303      	movs	r3, #3
 8007dae:	e02c      	b.n	8007e0a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	f47f af78 	bne.w	8007cae <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	9300      	str	r3, [sp, #0]
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	2108      	movs	r1, #8
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f000 f8c3 	bl	8007f54 <SPI_WaitOnFlagUntilTimeout>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d007      	beq.n	8007de4 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dda:	f043 0220 	orr.w	r2, r3, #32
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	f000 f815 	bl	8007e14 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2201      	movs	r2, #1
 8007df6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d001      	beq.n	8007e08 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	e000      	b.n	8007e0a <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8007e08:	7efb      	ldrb	r3, [r7, #27]
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3720      	adds	r7, #32
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop

08007e14 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	695b      	ldr	r3, [r3, #20]
 8007e22:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	699a      	ldr	r2, [r3, #24]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f042 0208 	orr.w	r2, r2, #8
 8007e32:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	699a      	ldr	r2, [r3, #24]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f042 0210 	orr.w	r2, r2, #16
 8007e42:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f022 0201 	bic.w	r2, r2, #1
 8007e52:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	6919      	ldr	r1, [r3, #16]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	4b3c      	ldr	r3, [pc, #240]	; (8007f50 <SPI_CloseTransfer+0x13c>)
 8007e60:	400b      	ands	r3, r1
 8007e62:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	689a      	ldr	r2, [r3, #8]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007e72:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	2b04      	cmp	r3, #4
 8007e7e:	d014      	beq.n	8007eaa <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f003 0320 	and.w	r3, r3, #32
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00f      	beq.n	8007eaa <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	699a      	ldr	r2, [r3, #24]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f042 0220 	orr.w	r2, r2, #32
 8007ea8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	2b03      	cmp	r3, #3
 8007eb4:	d014      	beq.n	8007ee0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00f      	beq.n	8007ee0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ec6:	f043 0204 	orr.w	r2, r3, #4
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	699a      	ldr	r2, [r3, #24]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ede:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00f      	beq.n	8007f0a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ef0:	f043 0201 	orr.w	r2, r3, #1
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	699a      	ldr	r2, [r3, #24]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f08:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00f      	beq.n	8007f34 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f1a:	f043 0208 	orr.w	r2, r3, #8
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	699a      	ldr	r2, [r3, #24]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f32:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8007f44:	bf00      	nop
 8007f46:	3714      	adds	r7, #20
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr
 8007f50:	fffffc90 	.word	0xfffffc90

08007f54 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	603b      	str	r3, [r7, #0]
 8007f60:	4613      	mov	r3, r2
 8007f62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007f64:	e010      	b.n	8007f88 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f66:	f7fa fb45 	bl	80025f4 <HAL_GetTick>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	69ba      	ldr	r2, [r7, #24]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d803      	bhi.n	8007f7e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f7c:	d102      	bne.n	8007f84 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d101      	bne.n	8007f88 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007f84:	2303      	movs	r3, #3
 8007f86:	e00f      	b.n	8007fa8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	695a      	ldr	r2, [r3, #20]
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	4013      	ands	r3, r2
 8007f92:	68ba      	ldr	r2, [r7, #8]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	bf0c      	ite	eq
 8007f98:	2301      	moveq	r3, #1
 8007f9a:	2300      	movne	r3, #0
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	79fb      	ldrb	r3, [r7, #7]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d0df      	beq.n	8007f66 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fbc:	095b      	lsrs	r3, r3, #5
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	3307      	adds	r3, #7
 8007fce:	08db      	lsrs	r3, r3, #3
 8007fd0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	fb02 f303 	mul.w	r3, r2, r3
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b082      	sub	sp, #8
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d101      	bne.n	8007ff8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e049      	b.n	800808c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	2b00      	cmp	r3, #0
 8008002:	d106      	bne.n	8008012 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f7fa f805 	bl	800201c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2202      	movs	r2, #2
 8008016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	3304      	adds	r3, #4
 8008022:	4619      	mov	r1, r3
 8008024:	4610      	mov	r0, r2
 8008026:	f000 f8b3 	bl	8008190 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2201      	movs	r2, #1
 800802e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2201      	movs	r2, #1
 8008036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2201      	movs	r2, #1
 800803e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2201      	movs	r2, #1
 8008046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2201      	movs	r2, #1
 800804e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2201      	movs	r2, #1
 8008056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2201      	movs	r2, #1
 800805e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2201      	movs	r2, #1
 800806e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2201      	movs	r2, #1
 8008076:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2201      	movs	r2, #1
 800807e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008094:	b480      	push	{r7}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d001      	beq.n	80080ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	e056      	b.n	800815a <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2202      	movs	r2, #2
 80080b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a2b      	ldr	r2, [pc, #172]	; (8008168 <HAL_TIM_Base_Start+0xd4>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d02c      	beq.n	8008118 <HAL_TIM_Base_Start+0x84>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080c6:	d027      	beq.n	8008118 <HAL_TIM_Base_Start+0x84>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a27      	ldr	r2, [pc, #156]	; (800816c <HAL_TIM_Base_Start+0xd8>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d022      	beq.n	8008118 <HAL_TIM_Base_Start+0x84>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a26      	ldr	r2, [pc, #152]	; (8008170 <HAL_TIM_Base_Start+0xdc>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d01d      	beq.n	8008118 <HAL_TIM_Base_Start+0x84>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a24      	ldr	r2, [pc, #144]	; (8008174 <HAL_TIM_Base_Start+0xe0>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d018      	beq.n	8008118 <HAL_TIM_Base_Start+0x84>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a23      	ldr	r2, [pc, #140]	; (8008178 <HAL_TIM_Base_Start+0xe4>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d013      	beq.n	8008118 <HAL_TIM_Base_Start+0x84>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a21      	ldr	r2, [pc, #132]	; (800817c <HAL_TIM_Base_Start+0xe8>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d00e      	beq.n	8008118 <HAL_TIM_Base_Start+0x84>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a20      	ldr	r2, [pc, #128]	; (8008180 <HAL_TIM_Base_Start+0xec>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d009      	beq.n	8008118 <HAL_TIM_Base_Start+0x84>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a1e      	ldr	r2, [pc, #120]	; (8008184 <HAL_TIM_Base_Start+0xf0>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d004      	beq.n	8008118 <HAL_TIM_Base_Start+0x84>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a1d      	ldr	r2, [pc, #116]	; (8008188 <HAL_TIM_Base_Start+0xf4>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d115      	bne.n	8008144 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	689a      	ldr	r2, [r3, #8]
 800811e:	4b1b      	ldr	r3, [pc, #108]	; (800818c <HAL_TIM_Base_Start+0xf8>)
 8008120:	4013      	ands	r3, r2
 8008122:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2b06      	cmp	r3, #6
 8008128:	d015      	beq.n	8008156 <HAL_TIM_Base_Start+0xc2>
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008130:	d011      	beq.n	8008156 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f042 0201 	orr.w	r2, r2, #1
 8008140:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008142:	e008      	b.n	8008156 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f042 0201 	orr.w	r2, r2, #1
 8008152:	601a      	str	r2, [r3, #0]
 8008154:	e000      	b.n	8008158 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008156:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3714      	adds	r7, #20
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr
 8008166:	bf00      	nop
 8008168:	40010000 	.word	0x40010000
 800816c:	40000400 	.word	0x40000400
 8008170:	40000800 	.word	0x40000800
 8008174:	40000c00 	.word	0x40000c00
 8008178:	40010400 	.word	0x40010400
 800817c:	40001800 	.word	0x40001800
 8008180:	40014000 	.word	0x40014000
 8008184:	4000e000 	.word	0x4000e000
 8008188:	4000e400 	.word	0x4000e400
 800818c:	00010007 	.word	0x00010007

08008190 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a44      	ldr	r2, [pc, #272]	; (80082b4 <TIM_Base_SetConfig+0x124>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d013      	beq.n	80081d0 <TIM_Base_SetConfig+0x40>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081ae:	d00f      	beq.n	80081d0 <TIM_Base_SetConfig+0x40>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4a41      	ldr	r2, [pc, #260]	; (80082b8 <TIM_Base_SetConfig+0x128>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d00b      	beq.n	80081d0 <TIM_Base_SetConfig+0x40>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4a40      	ldr	r2, [pc, #256]	; (80082bc <TIM_Base_SetConfig+0x12c>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d007      	beq.n	80081d0 <TIM_Base_SetConfig+0x40>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4a3f      	ldr	r2, [pc, #252]	; (80082c0 <TIM_Base_SetConfig+0x130>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d003      	beq.n	80081d0 <TIM_Base_SetConfig+0x40>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	4a3e      	ldr	r2, [pc, #248]	; (80082c4 <TIM_Base_SetConfig+0x134>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d108      	bne.n	80081e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	4313      	orrs	r3, r2
 80081e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a33      	ldr	r2, [pc, #204]	; (80082b4 <TIM_Base_SetConfig+0x124>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d027      	beq.n	800823a <TIM_Base_SetConfig+0xaa>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081f0:	d023      	beq.n	800823a <TIM_Base_SetConfig+0xaa>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a30      	ldr	r2, [pc, #192]	; (80082b8 <TIM_Base_SetConfig+0x128>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d01f      	beq.n	800823a <TIM_Base_SetConfig+0xaa>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4a2f      	ldr	r2, [pc, #188]	; (80082bc <TIM_Base_SetConfig+0x12c>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d01b      	beq.n	800823a <TIM_Base_SetConfig+0xaa>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4a2e      	ldr	r2, [pc, #184]	; (80082c0 <TIM_Base_SetConfig+0x130>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d017      	beq.n	800823a <TIM_Base_SetConfig+0xaa>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4a2d      	ldr	r2, [pc, #180]	; (80082c4 <TIM_Base_SetConfig+0x134>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d013      	beq.n	800823a <TIM_Base_SetConfig+0xaa>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a2c      	ldr	r2, [pc, #176]	; (80082c8 <TIM_Base_SetConfig+0x138>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d00f      	beq.n	800823a <TIM_Base_SetConfig+0xaa>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a2b      	ldr	r2, [pc, #172]	; (80082cc <TIM_Base_SetConfig+0x13c>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d00b      	beq.n	800823a <TIM_Base_SetConfig+0xaa>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4a2a      	ldr	r2, [pc, #168]	; (80082d0 <TIM_Base_SetConfig+0x140>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d007      	beq.n	800823a <TIM_Base_SetConfig+0xaa>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4a29      	ldr	r2, [pc, #164]	; (80082d4 <TIM_Base_SetConfig+0x144>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d003      	beq.n	800823a <TIM_Base_SetConfig+0xaa>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a28      	ldr	r2, [pc, #160]	; (80082d8 <TIM_Base_SetConfig+0x148>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d108      	bne.n	800824c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	4313      	orrs	r3, r2
 800824a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	695b      	ldr	r3, [r3, #20]
 8008256:	4313      	orrs	r3, r2
 8008258:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	689a      	ldr	r2, [r3, #8]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a10      	ldr	r2, [pc, #64]	; (80082b4 <TIM_Base_SetConfig+0x124>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d00f      	beq.n	8008298 <TIM_Base_SetConfig+0x108>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a12      	ldr	r2, [pc, #72]	; (80082c4 <TIM_Base_SetConfig+0x134>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d00b      	beq.n	8008298 <TIM_Base_SetConfig+0x108>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a11      	ldr	r2, [pc, #68]	; (80082c8 <TIM_Base_SetConfig+0x138>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d007      	beq.n	8008298 <TIM_Base_SetConfig+0x108>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4a10      	ldr	r2, [pc, #64]	; (80082cc <TIM_Base_SetConfig+0x13c>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d003      	beq.n	8008298 <TIM_Base_SetConfig+0x108>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	4a0f      	ldr	r2, [pc, #60]	; (80082d0 <TIM_Base_SetConfig+0x140>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d103      	bne.n	80082a0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	691a      	ldr	r2, [r3, #16]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	615a      	str	r2, [r3, #20]
}
 80082a6:	bf00      	nop
 80082a8:	3714      	adds	r7, #20
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	40010000 	.word	0x40010000
 80082b8:	40000400 	.word	0x40000400
 80082bc:	40000800 	.word	0x40000800
 80082c0:	40000c00 	.word	0x40000c00
 80082c4:	40010400 	.word	0x40010400
 80082c8:	40014000 	.word	0x40014000
 80082cc:	40014400 	.word	0x40014400
 80082d0:	40014800 	.word	0x40014800
 80082d4:	4000e000 	.word	0x4000e000
 80082d8:	4000e400 	.word	0x4000e400

080082dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d101      	bne.n	80082f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082f0:	2302      	movs	r3, #2
 80082f2:	e077      	b.n	80083e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2202      	movs	r2, #2
 8008300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a35      	ldr	r2, [pc, #212]	; (80083f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d004      	beq.n	8008328 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a34      	ldr	r2, [pc, #208]	; (80083f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d108      	bne.n	800833a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800832e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	4313      	orrs	r3, r2
 8008338:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008340:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68fa      	ldr	r2, [r7, #12]
 8008348:	4313      	orrs	r3, r2
 800834a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	68fa      	ldr	r2, [r7, #12]
 8008352:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a25      	ldr	r2, [pc, #148]	; (80083f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d02c      	beq.n	80083b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008366:	d027      	beq.n	80083b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a22      	ldr	r2, [pc, #136]	; (80083f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d022      	beq.n	80083b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a21      	ldr	r2, [pc, #132]	; (80083fc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d01d      	beq.n	80083b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a1f      	ldr	r2, [pc, #124]	; (8008400 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d018      	beq.n	80083b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a1a      	ldr	r2, [pc, #104]	; (80083f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d013      	beq.n	80083b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a1b      	ldr	r2, [pc, #108]	; (8008404 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d00e      	beq.n	80083b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a1a      	ldr	r2, [pc, #104]	; (8008408 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d009      	beq.n	80083b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a18      	ldr	r2, [pc, #96]	; (800840c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d004      	beq.n	80083b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a17      	ldr	r2, [pc, #92]	; (8008410 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d10c      	bne.n	80083d2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	68ba      	ldr	r2, [r7, #8]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	68ba      	ldr	r2, [r7, #8]
 80083d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2201      	movs	r2, #1
 80083d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3714      	adds	r7, #20
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr
 80083f0:	40010000 	.word	0x40010000
 80083f4:	40010400 	.word	0x40010400
 80083f8:	40000400 	.word	0x40000400
 80083fc:	40000800 	.word	0x40000800
 8008400:	40000c00 	.word	0x40000c00
 8008404:	40001800 	.word	0x40001800
 8008408:	40014000 	.word	0x40014000
 800840c:	4000e000 	.word	0x4000e000
 8008410:	4000e400 	.word	0x4000e400

08008414 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d101      	bne.n	8008426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	e042      	b.n	80084ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800842c:	2b00      	cmp	r3, #0
 800842e:	d106      	bne.n	800843e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f7f9 fe5d 	bl	80020f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2224      	movs	r2, #36	; 0x24
 8008442:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f022 0201 	bic.w	r2, r2, #1
 8008454:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f8c2 	bl	80085e0 <UART_SetConfig>
 800845c:	4603      	mov	r3, r0
 800845e:	2b01      	cmp	r3, #1
 8008460:	d101      	bne.n	8008466 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	e022      	b.n	80084ac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800846a:	2b00      	cmp	r3, #0
 800846c:	d002      	beq.n	8008474 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 ff14 	bl	800929c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	685a      	ldr	r2, [r3, #4]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008482:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	689a      	ldr	r2, [r3, #8]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008492:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f042 0201 	orr.w	r2, r2, #1
 80084a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 ff9b 	bl	80093e0 <UART_CheckIdleState>
 80084aa:	4603      	mov	r3, r0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b08a      	sub	sp, #40	; 0x28
 80084b8:	af02      	add	r7, sp, #8
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	603b      	str	r3, [r7, #0]
 80084c0:	4613      	mov	r3, r2
 80084c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084ca:	2b20      	cmp	r3, #32
 80084cc:	f040 8083 	bne.w	80085d6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d002      	beq.n	80084dc <HAL_UART_Transmit+0x28>
 80084d6:	88fb      	ldrh	r3, [r7, #6]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d101      	bne.n	80084e0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	e07b      	b.n	80085d8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d101      	bne.n	80084ee <HAL_UART_Transmit+0x3a>
 80084ea:	2302      	movs	r3, #2
 80084ec:	e074      	b.n	80085d8 <HAL_UART_Transmit+0x124>
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2201      	movs	r2, #1
 80084f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2221      	movs	r2, #33	; 0x21
 8008502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008506:	f7fa f875 	bl	80025f4 <HAL_GetTick>
 800850a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	88fa      	ldrh	r2, [r7, #6]
 8008510:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	88fa      	ldrh	r2, [r7, #6]
 8008518:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008524:	d108      	bne.n	8008538 <HAL_UART_Transmit+0x84>
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	691b      	ldr	r3, [r3, #16]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d104      	bne.n	8008538 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800852e:	2300      	movs	r3, #0
 8008530:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	61bb      	str	r3, [r7, #24]
 8008536:	e003      	b.n	8008540 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800853c:	2300      	movs	r3, #0
 800853e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2200      	movs	r2, #0
 8008544:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008548:	e02c      	b.n	80085a4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	9300      	str	r3, [sp, #0]
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	2200      	movs	r2, #0
 8008552:	2180      	movs	r1, #128	; 0x80
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f000 ff8e 	bl	8009476 <UART_WaitOnFlagUntilTimeout>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d001      	beq.n	8008564 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008560:	2303      	movs	r3, #3
 8008562:	e039      	b.n	80085d8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d10b      	bne.n	8008582 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	881b      	ldrh	r3, [r3, #0]
 800856e:	461a      	mov	r2, r3
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008578:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	3302      	adds	r3, #2
 800857e:	61bb      	str	r3, [r7, #24]
 8008580:	e007      	b.n	8008592 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	781a      	ldrb	r2, [r3, #0]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	3301      	adds	r3, #1
 8008590:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008598:	b29b      	uxth	r3, r3
 800859a:	3b01      	subs	r3, #1
 800859c:	b29a      	uxth	r2, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d1cc      	bne.n	800854a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	9300      	str	r3, [sp, #0]
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	2200      	movs	r2, #0
 80085b8:	2140      	movs	r1, #64	; 0x40
 80085ba:	68f8      	ldr	r0, [r7, #12]
 80085bc:	f000 ff5b 	bl	8009476 <UART_WaitOnFlagUntilTimeout>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d001      	beq.n	80085ca <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80085c6:	2303      	movs	r3, #3
 80085c8:	e006      	b.n	80085d8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2220      	movs	r2, #32
 80085ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80085d2:	2300      	movs	r3, #0
 80085d4:	e000      	b.n	80085d8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80085d6:	2302      	movs	r3, #2
  }
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3720      	adds	r7, #32
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085e0:	b5b0      	push	{r4, r5, r7, lr}
 80085e2:	b08e      	sub	sp, #56	; 0x38
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80085e8:	2300      	movs	r3, #0
 80085ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	689a      	ldr	r2, [r3, #8]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	431a      	orrs	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	695b      	ldr	r3, [r3, #20]
 80085fc:	431a      	orrs	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	69db      	ldr	r3, [r3, #28]
 8008602:	4313      	orrs	r3, r2
 8008604:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	4bbf      	ldr	r3, [pc, #764]	; (800890c <UART_SetConfig+0x32c>)
 800860e:	4013      	ands	r3, r2
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	6812      	ldr	r2, [r2, #0]
 8008614:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008616:	430b      	orrs	r3, r1
 8008618:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	68da      	ldr	r2, [r3, #12]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	430a      	orrs	r2, r1
 800862e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	699b      	ldr	r3, [r3, #24]
 8008634:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4ab5      	ldr	r2, [pc, #724]	; (8008910 <UART_SetConfig+0x330>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d004      	beq.n	800864a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6a1b      	ldr	r3, [r3, #32]
 8008644:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008646:	4313      	orrs	r3, r2
 8008648:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	689a      	ldr	r2, [r3, #8]
 8008650:	4bb0      	ldr	r3, [pc, #704]	; (8008914 <UART_SetConfig+0x334>)
 8008652:	4013      	ands	r3, r2
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	6812      	ldr	r2, [r2, #0]
 8008658:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800865a:	430b      	orrs	r3, r1
 800865c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008664:	f023 010f 	bic.w	r1, r3, #15
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	430a      	orrs	r2, r1
 8008672:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4aa7      	ldr	r2, [pc, #668]	; (8008918 <UART_SetConfig+0x338>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d176      	bne.n	800876c <UART_SetConfig+0x18c>
 800867e:	4ba7      	ldr	r3, [pc, #668]	; (800891c <UART_SetConfig+0x33c>)
 8008680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008682:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008686:	2b28      	cmp	r3, #40	; 0x28
 8008688:	d86c      	bhi.n	8008764 <UART_SetConfig+0x184>
 800868a:	a201      	add	r2, pc, #4	; (adr r2, 8008690 <UART_SetConfig+0xb0>)
 800868c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008690:	08008735 	.word	0x08008735
 8008694:	08008765 	.word	0x08008765
 8008698:	08008765 	.word	0x08008765
 800869c:	08008765 	.word	0x08008765
 80086a0:	08008765 	.word	0x08008765
 80086a4:	08008765 	.word	0x08008765
 80086a8:	08008765 	.word	0x08008765
 80086ac:	08008765 	.word	0x08008765
 80086b0:	0800873d 	.word	0x0800873d
 80086b4:	08008765 	.word	0x08008765
 80086b8:	08008765 	.word	0x08008765
 80086bc:	08008765 	.word	0x08008765
 80086c0:	08008765 	.word	0x08008765
 80086c4:	08008765 	.word	0x08008765
 80086c8:	08008765 	.word	0x08008765
 80086cc:	08008765 	.word	0x08008765
 80086d0:	08008745 	.word	0x08008745
 80086d4:	08008765 	.word	0x08008765
 80086d8:	08008765 	.word	0x08008765
 80086dc:	08008765 	.word	0x08008765
 80086e0:	08008765 	.word	0x08008765
 80086e4:	08008765 	.word	0x08008765
 80086e8:	08008765 	.word	0x08008765
 80086ec:	08008765 	.word	0x08008765
 80086f0:	0800874d 	.word	0x0800874d
 80086f4:	08008765 	.word	0x08008765
 80086f8:	08008765 	.word	0x08008765
 80086fc:	08008765 	.word	0x08008765
 8008700:	08008765 	.word	0x08008765
 8008704:	08008765 	.word	0x08008765
 8008708:	08008765 	.word	0x08008765
 800870c:	08008765 	.word	0x08008765
 8008710:	08008755 	.word	0x08008755
 8008714:	08008765 	.word	0x08008765
 8008718:	08008765 	.word	0x08008765
 800871c:	08008765 	.word	0x08008765
 8008720:	08008765 	.word	0x08008765
 8008724:	08008765 	.word	0x08008765
 8008728:	08008765 	.word	0x08008765
 800872c:	08008765 	.word	0x08008765
 8008730:	0800875d 	.word	0x0800875d
 8008734:	2301      	movs	r3, #1
 8008736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800873a:	e326      	b.n	8008d8a <UART_SetConfig+0x7aa>
 800873c:	2304      	movs	r3, #4
 800873e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008742:	e322      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008744:	2308      	movs	r3, #8
 8008746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800874a:	e31e      	b.n	8008d8a <UART_SetConfig+0x7aa>
 800874c:	2310      	movs	r3, #16
 800874e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008752:	e31a      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008754:	2320      	movs	r3, #32
 8008756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800875a:	e316      	b.n	8008d8a <UART_SetConfig+0x7aa>
 800875c:	2340      	movs	r3, #64	; 0x40
 800875e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008762:	e312      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008764:	2380      	movs	r3, #128	; 0x80
 8008766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800876a:	e30e      	b.n	8008d8a <UART_SetConfig+0x7aa>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a6b      	ldr	r2, [pc, #428]	; (8008920 <UART_SetConfig+0x340>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d130      	bne.n	80087d8 <UART_SetConfig+0x1f8>
 8008776:	4b69      	ldr	r3, [pc, #420]	; (800891c <UART_SetConfig+0x33c>)
 8008778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800877a:	f003 0307 	and.w	r3, r3, #7
 800877e:	2b05      	cmp	r3, #5
 8008780:	d826      	bhi.n	80087d0 <UART_SetConfig+0x1f0>
 8008782:	a201      	add	r2, pc, #4	; (adr r2, 8008788 <UART_SetConfig+0x1a8>)
 8008784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008788:	080087a1 	.word	0x080087a1
 800878c:	080087a9 	.word	0x080087a9
 8008790:	080087b1 	.word	0x080087b1
 8008794:	080087b9 	.word	0x080087b9
 8008798:	080087c1 	.word	0x080087c1
 800879c:	080087c9 	.word	0x080087c9
 80087a0:	2300      	movs	r3, #0
 80087a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087a6:	e2f0      	b.n	8008d8a <UART_SetConfig+0x7aa>
 80087a8:	2304      	movs	r3, #4
 80087aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087ae:	e2ec      	b.n	8008d8a <UART_SetConfig+0x7aa>
 80087b0:	2308      	movs	r3, #8
 80087b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087b6:	e2e8      	b.n	8008d8a <UART_SetConfig+0x7aa>
 80087b8:	2310      	movs	r3, #16
 80087ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087be:	e2e4      	b.n	8008d8a <UART_SetConfig+0x7aa>
 80087c0:	2320      	movs	r3, #32
 80087c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087c6:	e2e0      	b.n	8008d8a <UART_SetConfig+0x7aa>
 80087c8:	2340      	movs	r3, #64	; 0x40
 80087ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087ce:	e2dc      	b.n	8008d8a <UART_SetConfig+0x7aa>
 80087d0:	2380      	movs	r3, #128	; 0x80
 80087d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087d6:	e2d8      	b.n	8008d8a <UART_SetConfig+0x7aa>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a51      	ldr	r2, [pc, #324]	; (8008924 <UART_SetConfig+0x344>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d130      	bne.n	8008844 <UART_SetConfig+0x264>
 80087e2:	4b4e      	ldr	r3, [pc, #312]	; (800891c <UART_SetConfig+0x33c>)
 80087e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087e6:	f003 0307 	and.w	r3, r3, #7
 80087ea:	2b05      	cmp	r3, #5
 80087ec:	d826      	bhi.n	800883c <UART_SetConfig+0x25c>
 80087ee:	a201      	add	r2, pc, #4	; (adr r2, 80087f4 <UART_SetConfig+0x214>)
 80087f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f4:	0800880d 	.word	0x0800880d
 80087f8:	08008815 	.word	0x08008815
 80087fc:	0800881d 	.word	0x0800881d
 8008800:	08008825 	.word	0x08008825
 8008804:	0800882d 	.word	0x0800882d
 8008808:	08008835 	.word	0x08008835
 800880c:	2300      	movs	r3, #0
 800880e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008812:	e2ba      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008814:	2304      	movs	r3, #4
 8008816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800881a:	e2b6      	b.n	8008d8a <UART_SetConfig+0x7aa>
 800881c:	2308      	movs	r3, #8
 800881e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008822:	e2b2      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008824:	2310      	movs	r3, #16
 8008826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800882a:	e2ae      	b.n	8008d8a <UART_SetConfig+0x7aa>
 800882c:	2320      	movs	r3, #32
 800882e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008832:	e2aa      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008834:	2340      	movs	r3, #64	; 0x40
 8008836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800883a:	e2a6      	b.n	8008d8a <UART_SetConfig+0x7aa>
 800883c:	2380      	movs	r3, #128	; 0x80
 800883e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008842:	e2a2      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a37      	ldr	r2, [pc, #220]	; (8008928 <UART_SetConfig+0x348>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d130      	bne.n	80088b0 <UART_SetConfig+0x2d0>
 800884e:	4b33      	ldr	r3, [pc, #204]	; (800891c <UART_SetConfig+0x33c>)
 8008850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008852:	f003 0307 	and.w	r3, r3, #7
 8008856:	2b05      	cmp	r3, #5
 8008858:	d826      	bhi.n	80088a8 <UART_SetConfig+0x2c8>
 800885a:	a201      	add	r2, pc, #4	; (adr r2, 8008860 <UART_SetConfig+0x280>)
 800885c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008860:	08008879 	.word	0x08008879
 8008864:	08008881 	.word	0x08008881
 8008868:	08008889 	.word	0x08008889
 800886c:	08008891 	.word	0x08008891
 8008870:	08008899 	.word	0x08008899
 8008874:	080088a1 	.word	0x080088a1
 8008878:	2300      	movs	r3, #0
 800887a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800887e:	e284      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008880:	2304      	movs	r3, #4
 8008882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008886:	e280      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008888:	2308      	movs	r3, #8
 800888a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800888e:	e27c      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008890:	2310      	movs	r3, #16
 8008892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008896:	e278      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008898:	2320      	movs	r3, #32
 800889a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800889e:	e274      	b.n	8008d8a <UART_SetConfig+0x7aa>
 80088a0:	2340      	movs	r3, #64	; 0x40
 80088a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088a6:	e270      	b.n	8008d8a <UART_SetConfig+0x7aa>
 80088a8:	2380      	movs	r3, #128	; 0x80
 80088aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088ae:	e26c      	b.n	8008d8a <UART_SetConfig+0x7aa>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a1d      	ldr	r2, [pc, #116]	; (800892c <UART_SetConfig+0x34c>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d142      	bne.n	8008940 <UART_SetConfig+0x360>
 80088ba:	4b18      	ldr	r3, [pc, #96]	; (800891c <UART_SetConfig+0x33c>)
 80088bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088be:	f003 0307 	and.w	r3, r3, #7
 80088c2:	2b05      	cmp	r3, #5
 80088c4:	d838      	bhi.n	8008938 <UART_SetConfig+0x358>
 80088c6:	a201      	add	r2, pc, #4	; (adr r2, 80088cc <UART_SetConfig+0x2ec>)
 80088c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088cc:	080088e5 	.word	0x080088e5
 80088d0:	080088ed 	.word	0x080088ed
 80088d4:	080088f5 	.word	0x080088f5
 80088d8:	080088fd 	.word	0x080088fd
 80088dc:	08008905 	.word	0x08008905
 80088e0:	08008931 	.word	0x08008931
 80088e4:	2300      	movs	r3, #0
 80088e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088ea:	e24e      	b.n	8008d8a <UART_SetConfig+0x7aa>
 80088ec:	2304      	movs	r3, #4
 80088ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088f2:	e24a      	b.n	8008d8a <UART_SetConfig+0x7aa>
 80088f4:	2308      	movs	r3, #8
 80088f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088fa:	e246      	b.n	8008d8a <UART_SetConfig+0x7aa>
 80088fc:	2310      	movs	r3, #16
 80088fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008902:	e242      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008904:	2320      	movs	r3, #32
 8008906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800890a:	e23e      	b.n	8008d8a <UART_SetConfig+0x7aa>
 800890c:	cfff69f3 	.word	0xcfff69f3
 8008910:	58000c00 	.word	0x58000c00
 8008914:	11fff4ff 	.word	0x11fff4ff
 8008918:	40011000 	.word	0x40011000
 800891c:	58024400 	.word	0x58024400
 8008920:	40004400 	.word	0x40004400
 8008924:	40004800 	.word	0x40004800
 8008928:	40004c00 	.word	0x40004c00
 800892c:	40005000 	.word	0x40005000
 8008930:	2340      	movs	r3, #64	; 0x40
 8008932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008936:	e228      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008938:	2380      	movs	r3, #128	; 0x80
 800893a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800893e:	e224      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4ab1      	ldr	r2, [pc, #708]	; (8008c0c <UART_SetConfig+0x62c>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d176      	bne.n	8008a38 <UART_SetConfig+0x458>
 800894a:	4bb1      	ldr	r3, [pc, #708]	; (8008c10 <UART_SetConfig+0x630>)
 800894c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800894e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008952:	2b28      	cmp	r3, #40	; 0x28
 8008954:	d86c      	bhi.n	8008a30 <UART_SetConfig+0x450>
 8008956:	a201      	add	r2, pc, #4	; (adr r2, 800895c <UART_SetConfig+0x37c>)
 8008958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800895c:	08008a01 	.word	0x08008a01
 8008960:	08008a31 	.word	0x08008a31
 8008964:	08008a31 	.word	0x08008a31
 8008968:	08008a31 	.word	0x08008a31
 800896c:	08008a31 	.word	0x08008a31
 8008970:	08008a31 	.word	0x08008a31
 8008974:	08008a31 	.word	0x08008a31
 8008978:	08008a31 	.word	0x08008a31
 800897c:	08008a09 	.word	0x08008a09
 8008980:	08008a31 	.word	0x08008a31
 8008984:	08008a31 	.word	0x08008a31
 8008988:	08008a31 	.word	0x08008a31
 800898c:	08008a31 	.word	0x08008a31
 8008990:	08008a31 	.word	0x08008a31
 8008994:	08008a31 	.word	0x08008a31
 8008998:	08008a31 	.word	0x08008a31
 800899c:	08008a11 	.word	0x08008a11
 80089a0:	08008a31 	.word	0x08008a31
 80089a4:	08008a31 	.word	0x08008a31
 80089a8:	08008a31 	.word	0x08008a31
 80089ac:	08008a31 	.word	0x08008a31
 80089b0:	08008a31 	.word	0x08008a31
 80089b4:	08008a31 	.word	0x08008a31
 80089b8:	08008a31 	.word	0x08008a31
 80089bc:	08008a19 	.word	0x08008a19
 80089c0:	08008a31 	.word	0x08008a31
 80089c4:	08008a31 	.word	0x08008a31
 80089c8:	08008a31 	.word	0x08008a31
 80089cc:	08008a31 	.word	0x08008a31
 80089d0:	08008a31 	.word	0x08008a31
 80089d4:	08008a31 	.word	0x08008a31
 80089d8:	08008a31 	.word	0x08008a31
 80089dc:	08008a21 	.word	0x08008a21
 80089e0:	08008a31 	.word	0x08008a31
 80089e4:	08008a31 	.word	0x08008a31
 80089e8:	08008a31 	.word	0x08008a31
 80089ec:	08008a31 	.word	0x08008a31
 80089f0:	08008a31 	.word	0x08008a31
 80089f4:	08008a31 	.word	0x08008a31
 80089f8:	08008a31 	.word	0x08008a31
 80089fc:	08008a29 	.word	0x08008a29
 8008a00:	2301      	movs	r3, #1
 8008a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a06:	e1c0      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008a08:	2304      	movs	r3, #4
 8008a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a0e:	e1bc      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008a10:	2308      	movs	r3, #8
 8008a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a16:	e1b8      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008a18:	2310      	movs	r3, #16
 8008a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a1e:	e1b4      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008a20:	2320      	movs	r3, #32
 8008a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a26:	e1b0      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008a28:	2340      	movs	r3, #64	; 0x40
 8008a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a2e:	e1ac      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008a30:	2380      	movs	r3, #128	; 0x80
 8008a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a36:	e1a8      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a75      	ldr	r2, [pc, #468]	; (8008c14 <UART_SetConfig+0x634>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d130      	bne.n	8008aa4 <UART_SetConfig+0x4c4>
 8008a42:	4b73      	ldr	r3, [pc, #460]	; (8008c10 <UART_SetConfig+0x630>)
 8008a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a46:	f003 0307 	and.w	r3, r3, #7
 8008a4a:	2b05      	cmp	r3, #5
 8008a4c:	d826      	bhi.n	8008a9c <UART_SetConfig+0x4bc>
 8008a4e:	a201      	add	r2, pc, #4	; (adr r2, 8008a54 <UART_SetConfig+0x474>)
 8008a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a54:	08008a6d 	.word	0x08008a6d
 8008a58:	08008a75 	.word	0x08008a75
 8008a5c:	08008a7d 	.word	0x08008a7d
 8008a60:	08008a85 	.word	0x08008a85
 8008a64:	08008a8d 	.word	0x08008a8d
 8008a68:	08008a95 	.word	0x08008a95
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a72:	e18a      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008a74:	2304      	movs	r3, #4
 8008a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a7a:	e186      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008a7c:	2308      	movs	r3, #8
 8008a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a82:	e182      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008a84:	2310      	movs	r3, #16
 8008a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a8a:	e17e      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008a8c:	2320      	movs	r3, #32
 8008a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a92:	e17a      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008a94:	2340      	movs	r3, #64	; 0x40
 8008a96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a9a:	e176      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008a9c:	2380      	movs	r3, #128	; 0x80
 8008a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008aa2:	e172      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a5b      	ldr	r2, [pc, #364]	; (8008c18 <UART_SetConfig+0x638>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d130      	bne.n	8008b10 <UART_SetConfig+0x530>
 8008aae:	4b58      	ldr	r3, [pc, #352]	; (8008c10 <UART_SetConfig+0x630>)
 8008ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ab2:	f003 0307 	and.w	r3, r3, #7
 8008ab6:	2b05      	cmp	r3, #5
 8008ab8:	d826      	bhi.n	8008b08 <UART_SetConfig+0x528>
 8008aba:	a201      	add	r2, pc, #4	; (adr r2, 8008ac0 <UART_SetConfig+0x4e0>)
 8008abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac0:	08008ad9 	.word	0x08008ad9
 8008ac4:	08008ae1 	.word	0x08008ae1
 8008ac8:	08008ae9 	.word	0x08008ae9
 8008acc:	08008af1 	.word	0x08008af1
 8008ad0:	08008af9 	.word	0x08008af9
 8008ad4:	08008b01 	.word	0x08008b01
 8008ad8:	2300      	movs	r3, #0
 8008ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ade:	e154      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008ae0:	2304      	movs	r3, #4
 8008ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ae6:	e150      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008ae8:	2308      	movs	r3, #8
 8008aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008aee:	e14c      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008af0:	2310      	movs	r3, #16
 8008af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008af6:	e148      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008af8:	2320      	movs	r3, #32
 8008afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008afe:	e144      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008b00:	2340      	movs	r3, #64	; 0x40
 8008b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b06:	e140      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008b08:	2380      	movs	r3, #128	; 0x80
 8008b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b0e:	e13c      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a41      	ldr	r2, [pc, #260]	; (8008c1c <UART_SetConfig+0x63c>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	f040 8082 	bne.w	8008c20 <UART_SetConfig+0x640>
 8008b1c:	4b3c      	ldr	r3, [pc, #240]	; (8008c10 <UART_SetConfig+0x630>)
 8008b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b24:	2b28      	cmp	r3, #40	; 0x28
 8008b26:	d86d      	bhi.n	8008c04 <UART_SetConfig+0x624>
 8008b28:	a201      	add	r2, pc, #4	; (adr r2, 8008b30 <UART_SetConfig+0x550>)
 8008b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2e:	bf00      	nop
 8008b30:	08008bd5 	.word	0x08008bd5
 8008b34:	08008c05 	.word	0x08008c05
 8008b38:	08008c05 	.word	0x08008c05
 8008b3c:	08008c05 	.word	0x08008c05
 8008b40:	08008c05 	.word	0x08008c05
 8008b44:	08008c05 	.word	0x08008c05
 8008b48:	08008c05 	.word	0x08008c05
 8008b4c:	08008c05 	.word	0x08008c05
 8008b50:	08008bdd 	.word	0x08008bdd
 8008b54:	08008c05 	.word	0x08008c05
 8008b58:	08008c05 	.word	0x08008c05
 8008b5c:	08008c05 	.word	0x08008c05
 8008b60:	08008c05 	.word	0x08008c05
 8008b64:	08008c05 	.word	0x08008c05
 8008b68:	08008c05 	.word	0x08008c05
 8008b6c:	08008c05 	.word	0x08008c05
 8008b70:	08008be5 	.word	0x08008be5
 8008b74:	08008c05 	.word	0x08008c05
 8008b78:	08008c05 	.word	0x08008c05
 8008b7c:	08008c05 	.word	0x08008c05
 8008b80:	08008c05 	.word	0x08008c05
 8008b84:	08008c05 	.word	0x08008c05
 8008b88:	08008c05 	.word	0x08008c05
 8008b8c:	08008c05 	.word	0x08008c05
 8008b90:	08008bed 	.word	0x08008bed
 8008b94:	08008c05 	.word	0x08008c05
 8008b98:	08008c05 	.word	0x08008c05
 8008b9c:	08008c05 	.word	0x08008c05
 8008ba0:	08008c05 	.word	0x08008c05
 8008ba4:	08008c05 	.word	0x08008c05
 8008ba8:	08008c05 	.word	0x08008c05
 8008bac:	08008c05 	.word	0x08008c05
 8008bb0:	08008bf5 	.word	0x08008bf5
 8008bb4:	08008c05 	.word	0x08008c05
 8008bb8:	08008c05 	.word	0x08008c05
 8008bbc:	08008c05 	.word	0x08008c05
 8008bc0:	08008c05 	.word	0x08008c05
 8008bc4:	08008c05 	.word	0x08008c05
 8008bc8:	08008c05 	.word	0x08008c05
 8008bcc:	08008c05 	.word	0x08008c05
 8008bd0:	08008bfd 	.word	0x08008bfd
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bda:	e0d6      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008bdc:	2304      	movs	r3, #4
 8008bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008be2:	e0d2      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008be4:	2308      	movs	r3, #8
 8008be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bea:	e0ce      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008bec:	2310      	movs	r3, #16
 8008bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bf2:	e0ca      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008bf4:	2320      	movs	r3, #32
 8008bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bfa:	e0c6      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008bfc:	2340      	movs	r3, #64	; 0x40
 8008bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c02:	e0c2      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008c04:	2380      	movs	r3, #128	; 0x80
 8008c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c0a:	e0be      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008c0c:	40011400 	.word	0x40011400
 8008c10:	58024400 	.word	0x58024400
 8008c14:	40007800 	.word	0x40007800
 8008c18:	40007c00 	.word	0x40007c00
 8008c1c:	40011800 	.word	0x40011800
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4aad      	ldr	r2, [pc, #692]	; (8008edc <UART_SetConfig+0x8fc>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d176      	bne.n	8008d18 <UART_SetConfig+0x738>
 8008c2a:	4bad      	ldr	r3, [pc, #692]	; (8008ee0 <UART_SetConfig+0x900>)
 8008c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c32:	2b28      	cmp	r3, #40	; 0x28
 8008c34:	d86c      	bhi.n	8008d10 <UART_SetConfig+0x730>
 8008c36:	a201      	add	r2, pc, #4	; (adr r2, 8008c3c <UART_SetConfig+0x65c>)
 8008c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c3c:	08008ce1 	.word	0x08008ce1
 8008c40:	08008d11 	.word	0x08008d11
 8008c44:	08008d11 	.word	0x08008d11
 8008c48:	08008d11 	.word	0x08008d11
 8008c4c:	08008d11 	.word	0x08008d11
 8008c50:	08008d11 	.word	0x08008d11
 8008c54:	08008d11 	.word	0x08008d11
 8008c58:	08008d11 	.word	0x08008d11
 8008c5c:	08008ce9 	.word	0x08008ce9
 8008c60:	08008d11 	.word	0x08008d11
 8008c64:	08008d11 	.word	0x08008d11
 8008c68:	08008d11 	.word	0x08008d11
 8008c6c:	08008d11 	.word	0x08008d11
 8008c70:	08008d11 	.word	0x08008d11
 8008c74:	08008d11 	.word	0x08008d11
 8008c78:	08008d11 	.word	0x08008d11
 8008c7c:	08008cf1 	.word	0x08008cf1
 8008c80:	08008d11 	.word	0x08008d11
 8008c84:	08008d11 	.word	0x08008d11
 8008c88:	08008d11 	.word	0x08008d11
 8008c8c:	08008d11 	.word	0x08008d11
 8008c90:	08008d11 	.word	0x08008d11
 8008c94:	08008d11 	.word	0x08008d11
 8008c98:	08008d11 	.word	0x08008d11
 8008c9c:	08008cf9 	.word	0x08008cf9
 8008ca0:	08008d11 	.word	0x08008d11
 8008ca4:	08008d11 	.word	0x08008d11
 8008ca8:	08008d11 	.word	0x08008d11
 8008cac:	08008d11 	.word	0x08008d11
 8008cb0:	08008d11 	.word	0x08008d11
 8008cb4:	08008d11 	.word	0x08008d11
 8008cb8:	08008d11 	.word	0x08008d11
 8008cbc:	08008d01 	.word	0x08008d01
 8008cc0:	08008d11 	.word	0x08008d11
 8008cc4:	08008d11 	.word	0x08008d11
 8008cc8:	08008d11 	.word	0x08008d11
 8008ccc:	08008d11 	.word	0x08008d11
 8008cd0:	08008d11 	.word	0x08008d11
 8008cd4:	08008d11 	.word	0x08008d11
 8008cd8:	08008d11 	.word	0x08008d11
 8008cdc:	08008d09 	.word	0x08008d09
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ce6:	e050      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008ce8:	2304      	movs	r3, #4
 8008cea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cee:	e04c      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008cf0:	2308      	movs	r3, #8
 8008cf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cf6:	e048      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008cf8:	2310      	movs	r3, #16
 8008cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cfe:	e044      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008d00:	2320      	movs	r3, #32
 8008d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d06:	e040      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008d08:	2340      	movs	r3, #64	; 0x40
 8008d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d0e:	e03c      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008d10:	2380      	movs	r3, #128	; 0x80
 8008d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d16:	e038      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a71      	ldr	r2, [pc, #452]	; (8008ee4 <UART_SetConfig+0x904>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d130      	bne.n	8008d84 <UART_SetConfig+0x7a4>
 8008d22:	4b6f      	ldr	r3, [pc, #444]	; (8008ee0 <UART_SetConfig+0x900>)
 8008d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d26:	f003 0307 	and.w	r3, r3, #7
 8008d2a:	2b05      	cmp	r3, #5
 8008d2c:	d826      	bhi.n	8008d7c <UART_SetConfig+0x79c>
 8008d2e:	a201      	add	r2, pc, #4	; (adr r2, 8008d34 <UART_SetConfig+0x754>)
 8008d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d34:	08008d4d 	.word	0x08008d4d
 8008d38:	08008d55 	.word	0x08008d55
 8008d3c:	08008d5d 	.word	0x08008d5d
 8008d40:	08008d65 	.word	0x08008d65
 8008d44:	08008d6d 	.word	0x08008d6d
 8008d48:	08008d75 	.word	0x08008d75
 8008d4c:	2302      	movs	r3, #2
 8008d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d52:	e01a      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008d54:	2304      	movs	r3, #4
 8008d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d5a:	e016      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008d5c:	2308      	movs	r3, #8
 8008d5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d62:	e012      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008d64:	2310      	movs	r3, #16
 8008d66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d6a:	e00e      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008d6c:	2320      	movs	r3, #32
 8008d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d72:	e00a      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008d74:	2340      	movs	r3, #64	; 0x40
 8008d76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d7a:	e006      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008d7c:	2380      	movs	r3, #128	; 0x80
 8008d7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d82:	e002      	b.n	8008d8a <UART_SetConfig+0x7aa>
 8008d84:	2380      	movs	r3, #128	; 0x80
 8008d86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a55      	ldr	r2, [pc, #340]	; (8008ee4 <UART_SetConfig+0x904>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	f040 80f0 	bne.w	8008f76 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008d9a:	2b20      	cmp	r3, #32
 8008d9c:	dc46      	bgt.n	8008e2c <UART_SetConfig+0x84c>
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	db75      	blt.n	8008e8e <UART_SetConfig+0x8ae>
 8008da2:	3b02      	subs	r3, #2
 8008da4:	2b1e      	cmp	r3, #30
 8008da6:	d872      	bhi.n	8008e8e <UART_SetConfig+0x8ae>
 8008da8:	a201      	add	r2, pc, #4	; (adr r2, 8008db0 <UART_SetConfig+0x7d0>)
 8008daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dae:	bf00      	nop
 8008db0:	08008e33 	.word	0x08008e33
 8008db4:	08008e8f 	.word	0x08008e8f
 8008db8:	08008e3b 	.word	0x08008e3b
 8008dbc:	08008e8f 	.word	0x08008e8f
 8008dc0:	08008e8f 	.word	0x08008e8f
 8008dc4:	08008e8f 	.word	0x08008e8f
 8008dc8:	08008e4b 	.word	0x08008e4b
 8008dcc:	08008e8f 	.word	0x08008e8f
 8008dd0:	08008e8f 	.word	0x08008e8f
 8008dd4:	08008e8f 	.word	0x08008e8f
 8008dd8:	08008e8f 	.word	0x08008e8f
 8008ddc:	08008e8f 	.word	0x08008e8f
 8008de0:	08008e8f 	.word	0x08008e8f
 8008de4:	08008e8f 	.word	0x08008e8f
 8008de8:	08008e5b 	.word	0x08008e5b
 8008dec:	08008e8f 	.word	0x08008e8f
 8008df0:	08008e8f 	.word	0x08008e8f
 8008df4:	08008e8f 	.word	0x08008e8f
 8008df8:	08008e8f 	.word	0x08008e8f
 8008dfc:	08008e8f 	.word	0x08008e8f
 8008e00:	08008e8f 	.word	0x08008e8f
 8008e04:	08008e8f 	.word	0x08008e8f
 8008e08:	08008e8f 	.word	0x08008e8f
 8008e0c:	08008e8f 	.word	0x08008e8f
 8008e10:	08008e8f 	.word	0x08008e8f
 8008e14:	08008e8f 	.word	0x08008e8f
 8008e18:	08008e8f 	.word	0x08008e8f
 8008e1c:	08008e8f 	.word	0x08008e8f
 8008e20:	08008e8f 	.word	0x08008e8f
 8008e24:	08008e8f 	.word	0x08008e8f
 8008e28:	08008e81 	.word	0x08008e81
 8008e2c:	2b40      	cmp	r3, #64	; 0x40
 8008e2e:	d02a      	beq.n	8008e86 <UART_SetConfig+0x8a6>
 8008e30:	e02d      	b.n	8008e8e <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008e32:	f7fe f8d5 	bl	8006fe0 <HAL_RCCEx_GetD3PCLK1Freq>
 8008e36:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008e38:	e02f      	b.n	8008e9a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e3a:	f107 0314 	add.w	r3, r7, #20
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7fe f8e4 	bl	800700c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e48:	e027      	b.n	8008e9a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e4a:	f107 0308 	add.w	r3, r7, #8
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7fe fa30 	bl	80072b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e58:	e01f      	b.n	8008e9a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e5a:	4b21      	ldr	r3, [pc, #132]	; (8008ee0 <UART_SetConfig+0x900>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f003 0320 	and.w	r3, r3, #32
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d009      	beq.n	8008e7a <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e66:	4b1e      	ldr	r3, [pc, #120]	; (8008ee0 <UART_SetConfig+0x900>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	08db      	lsrs	r3, r3, #3
 8008e6c:	f003 0303 	and.w	r3, r3, #3
 8008e70:	4a1d      	ldr	r2, [pc, #116]	; (8008ee8 <UART_SetConfig+0x908>)
 8008e72:	fa22 f303 	lsr.w	r3, r2, r3
 8008e76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e78:	e00f      	b.n	8008e9a <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8008e7a:	4b1b      	ldr	r3, [pc, #108]	; (8008ee8 <UART_SetConfig+0x908>)
 8008e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e7e:	e00c      	b.n	8008e9a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e80:	4b1a      	ldr	r3, [pc, #104]	; (8008eec <UART_SetConfig+0x90c>)
 8008e82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e84:	e009      	b.n	8008e9a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e8c:	e005      	b.n	8008e9a <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008e98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f000 81e6 	beq.w	800926e <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea6:	4a12      	ldr	r2, [pc, #72]	; (8008ef0 <UART_SetConfig+0x910>)
 8008ea8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008eac:	461a      	mov	r2, r3
 8008eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008eb4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	685a      	ldr	r2, [r3, #4]
 8008eba:	4613      	mov	r3, r2
 8008ebc:	005b      	lsls	r3, r3, #1
 8008ebe:	4413      	add	r3, r2
 8008ec0:	6a3a      	ldr	r2, [r7, #32]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d305      	bcc.n	8008ed2 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ecc:	6a3a      	ldr	r2, [r7, #32]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d910      	bls.n	8008ef4 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008ed8:	e1c9      	b.n	800926e <UART_SetConfig+0xc8e>
 8008eda:	bf00      	nop
 8008edc:	40011c00 	.word	0x40011c00
 8008ee0:	58024400 	.word	0x58024400
 8008ee4:	58000c00 	.word	0x58000c00
 8008ee8:	03d09000 	.word	0x03d09000
 8008eec:	003d0900 	.word	0x003d0900
 8008ef0:	080196d4 	.word	0x080196d4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f04f 0100 	mov.w	r1, #0
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f00:	4ac1      	ldr	r2, [pc, #772]	; (8009208 <UART_SetConfig+0xc28>)
 8008f02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f06:	b29a      	uxth	r2, r3
 8008f08:	f04f 0300 	mov.w	r3, #0
 8008f0c:	f7f7 fa58 	bl	80003c0 <__aeabi_uldivmod>
 8008f10:	4602      	mov	r2, r0
 8008f12:	460b      	mov	r3, r1
 8008f14:	4610      	mov	r0, r2
 8008f16:	4619      	mov	r1, r3
 8008f18:	f04f 0200 	mov.w	r2, #0
 8008f1c:	f04f 0300 	mov.w	r3, #0
 8008f20:	020b      	lsls	r3, r1, #8
 8008f22:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008f26:	0202      	lsls	r2, r0, #8
 8008f28:	6879      	ldr	r1, [r7, #4]
 8008f2a:	6849      	ldr	r1, [r1, #4]
 8008f2c:	0849      	lsrs	r1, r1, #1
 8008f2e:	4608      	mov	r0, r1
 8008f30:	f04f 0100 	mov.w	r1, #0
 8008f34:	1814      	adds	r4, r2, r0
 8008f36:	eb43 0501 	adc.w	r5, r3, r1
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	461a      	mov	r2, r3
 8008f40:	f04f 0300 	mov.w	r3, #0
 8008f44:	4620      	mov	r0, r4
 8008f46:	4629      	mov	r1, r5
 8008f48:	f7f7 fa3a 	bl	80003c0 <__aeabi_uldivmod>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	460b      	mov	r3, r1
 8008f50:	4613      	mov	r3, r2
 8008f52:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f5a:	d308      	bcc.n	8008f6e <UART_SetConfig+0x98e>
 8008f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f62:	d204      	bcs.n	8008f6e <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f6a:	60da      	str	r2, [r3, #12]
 8008f6c:	e17f      	b.n	800926e <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008f74:	e17b      	b.n	800926e <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	69db      	ldr	r3, [r3, #28]
 8008f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f7e:	f040 80bd 	bne.w	80090fc <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8008f82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008f86:	2b20      	cmp	r3, #32
 8008f88:	dc48      	bgt.n	800901c <UART_SetConfig+0xa3c>
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	db7b      	blt.n	8009086 <UART_SetConfig+0xaa6>
 8008f8e:	2b20      	cmp	r3, #32
 8008f90:	d879      	bhi.n	8009086 <UART_SetConfig+0xaa6>
 8008f92:	a201      	add	r2, pc, #4	; (adr r2, 8008f98 <UART_SetConfig+0x9b8>)
 8008f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f98:	08009023 	.word	0x08009023
 8008f9c:	0800902b 	.word	0x0800902b
 8008fa0:	08009087 	.word	0x08009087
 8008fa4:	08009087 	.word	0x08009087
 8008fa8:	08009033 	.word	0x08009033
 8008fac:	08009087 	.word	0x08009087
 8008fb0:	08009087 	.word	0x08009087
 8008fb4:	08009087 	.word	0x08009087
 8008fb8:	08009043 	.word	0x08009043
 8008fbc:	08009087 	.word	0x08009087
 8008fc0:	08009087 	.word	0x08009087
 8008fc4:	08009087 	.word	0x08009087
 8008fc8:	08009087 	.word	0x08009087
 8008fcc:	08009087 	.word	0x08009087
 8008fd0:	08009087 	.word	0x08009087
 8008fd4:	08009087 	.word	0x08009087
 8008fd8:	08009053 	.word	0x08009053
 8008fdc:	08009087 	.word	0x08009087
 8008fe0:	08009087 	.word	0x08009087
 8008fe4:	08009087 	.word	0x08009087
 8008fe8:	08009087 	.word	0x08009087
 8008fec:	08009087 	.word	0x08009087
 8008ff0:	08009087 	.word	0x08009087
 8008ff4:	08009087 	.word	0x08009087
 8008ff8:	08009087 	.word	0x08009087
 8008ffc:	08009087 	.word	0x08009087
 8009000:	08009087 	.word	0x08009087
 8009004:	08009087 	.word	0x08009087
 8009008:	08009087 	.word	0x08009087
 800900c:	08009087 	.word	0x08009087
 8009010:	08009087 	.word	0x08009087
 8009014:	08009087 	.word	0x08009087
 8009018:	08009079 	.word	0x08009079
 800901c:	2b40      	cmp	r3, #64	; 0x40
 800901e:	d02e      	beq.n	800907e <UART_SetConfig+0xa9e>
 8009020:	e031      	b.n	8009086 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009022:	f7fd f8b7 	bl	8006194 <HAL_RCC_GetPCLK1Freq>
 8009026:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009028:	e033      	b.n	8009092 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800902a:	f7fd f8c9 	bl	80061c0 <HAL_RCC_GetPCLK2Freq>
 800902e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009030:	e02f      	b.n	8009092 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009032:	f107 0314 	add.w	r3, r7, #20
 8009036:	4618      	mov	r0, r3
 8009038:	f7fd ffe8 	bl	800700c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009040:	e027      	b.n	8009092 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009042:	f107 0308 	add.w	r3, r7, #8
 8009046:	4618      	mov	r0, r3
 8009048:	f7fe f934 	bl	80072b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009050:	e01f      	b.n	8009092 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009052:	4b6e      	ldr	r3, [pc, #440]	; (800920c <UART_SetConfig+0xc2c>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f003 0320 	and.w	r3, r3, #32
 800905a:	2b00      	cmp	r3, #0
 800905c:	d009      	beq.n	8009072 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800905e:	4b6b      	ldr	r3, [pc, #428]	; (800920c <UART_SetConfig+0xc2c>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	08db      	lsrs	r3, r3, #3
 8009064:	f003 0303 	and.w	r3, r3, #3
 8009068:	4a69      	ldr	r2, [pc, #420]	; (8009210 <UART_SetConfig+0xc30>)
 800906a:	fa22 f303 	lsr.w	r3, r2, r3
 800906e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009070:	e00f      	b.n	8009092 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8009072:	4b67      	ldr	r3, [pc, #412]	; (8009210 <UART_SetConfig+0xc30>)
 8009074:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009076:	e00c      	b.n	8009092 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009078:	4b66      	ldr	r3, [pc, #408]	; (8009214 <UART_SetConfig+0xc34>)
 800907a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800907c:	e009      	b.n	8009092 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800907e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009082:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009084:	e005      	b.n	8009092 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8009086:	2300      	movs	r3, #0
 8009088:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009090:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009094:	2b00      	cmp	r3, #0
 8009096:	f000 80ea 	beq.w	800926e <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909e:	4a5a      	ldr	r2, [pc, #360]	; (8009208 <UART_SetConfig+0xc28>)
 80090a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090a4:	461a      	mov	r2, r3
 80090a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80090ac:	005a      	lsls	r2, r3, #1
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	085b      	lsrs	r3, r3, #1
 80090b4:	441a      	add	r2, r3
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80090be:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c2:	2b0f      	cmp	r3, #15
 80090c4:	d916      	bls.n	80090f4 <UART_SetConfig+0xb14>
 80090c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090cc:	d212      	bcs.n	80090f4 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80090ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	f023 030f 	bic.w	r3, r3, #15
 80090d6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090da:	085b      	lsrs	r3, r3, #1
 80090dc:	b29b      	uxth	r3, r3
 80090de:	f003 0307 	and.w	r3, r3, #7
 80090e2:	b29a      	uxth	r2, r3
 80090e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80090e6:	4313      	orrs	r3, r2
 80090e8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80090f0:	60da      	str	r2, [r3, #12]
 80090f2:	e0bc      	b.n	800926e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80090f4:	2301      	movs	r3, #1
 80090f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80090fa:	e0b8      	b.n	800926e <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80090fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009100:	2b20      	cmp	r3, #32
 8009102:	dc4b      	bgt.n	800919c <UART_SetConfig+0xbbc>
 8009104:	2b00      	cmp	r3, #0
 8009106:	f2c0 8087 	blt.w	8009218 <UART_SetConfig+0xc38>
 800910a:	2b20      	cmp	r3, #32
 800910c:	f200 8084 	bhi.w	8009218 <UART_SetConfig+0xc38>
 8009110:	a201      	add	r2, pc, #4	; (adr r2, 8009118 <UART_SetConfig+0xb38>)
 8009112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009116:	bf00      	nop
 8009118:	080091a3 	.word	0x080091a3
 800911c:	080091ab 	.word	0x080091ab
 8009120:	08009219 	.word	0x08009219
 8009124:	08009219 	.word	0x08009219
 8009128:	080091b3 	.word	0x080091b3
 800912c:	08009219 	.word	0x08009219
 8009130:	08009219 	.word	0x08009219
 8009134:	08009219 	.word	0x08009219
 8009138:	080091c3 	.word	0x080091c3
 800913c:	08009219 	.word	0x08009219
 8009140:	08009219 	.word	0x08009219
 8009144:	08009219 	.word	0x08009219
 8009148:	08009219 	.word	0x08009219
 800914c:	08009219 	.word	0x08009219
 8009150:	08009219 	.word	0x08009219
 8009154:	08009219 	.word	0x08009219
 8009158:	080091d3 	.word	0x080091d3
 800915c:	08009219 	.word	0x08009219
 8009160:	08009219 	.word	0x08009219
 8009164:	08009219 	.word	0x08009219
 8009168:	08009219 	.word	0x08009219
 800916c:	08009219 	.word	0x08009219
 8009170:	08009219 	.word	0x08009219
 8009174:	08009219 	.word	0x08009219
 8009178:	08009219 	.word	0x08009219
 800917c:	08009219 	.word	0x08009219
 8009180:	08009219 	.word	0x08009219
 8009184:	08009219 	.word	0x08009219
 8009188:	08009219 	.word	0x08009219
 800918c:	08009219 	.word	0x08009219
 8009190:	08009219 	.word	0x08009219
 8009194:	08009219 	.word	0x08009219
 8009198:	080091f9 	.word	0x080091f9
 800919c:	2b40      	cmp	r3, #64	; 0x40
 800919e:	d02e      	beq.n	80091fe <UART_SetConfig+0xc1e>
 80091a0:	e03a      	b.n	8009218 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091a2:	f7fc fff7 	bl	8006194 <HAL_RCC_GetPCLK1Freq>
 80091a6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80091a8:	e03c      	b.n	8009224 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091aa:	f7fd f809 	bl	80061c0 <HAL_RCC_GetPCLK2Freq>
 80091ae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80091b0:	e038      	b.n	8009224 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091b2:	f107 0314 	add.w	r3, r7, #20
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7fd ff28 	bl	800700c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80091bc:	69bb      	ldr	r3, [r7, #24]
 80091be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091c0:	e030      	b.n	8009224 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091c2:	f107 0308 	add.w	r3, r7, #8
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7fe f874 	bl	80072b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091d0:	e028      	b.n	8009224 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091d2:	4b0e      	ldr	r3, [pc, #56]	; (800920c <UART_SetConfig+0xc2c>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 0320 	and.w	r3, r3, #32
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d009      	beq.n	80091f2 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80091de:	4b0b      	ldr	r3, [pc, #44]	; (800920c <UART_SetConfig+0xc2c>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	08db      	lsrs	r3, r3, #3
 80091e4:	f003 0303 	and.w	r3, r3, #3
 80091e8:	4a09      	ldr	r2, [pc, #36]	; (8009210 <UART_SetConfig+0xc30>)
 80091ea:	fa22 f303 	lsr.w	r3, r2, r3
 80091ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80091f0:	e018      	b.n	8009224 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 80091f2:	4b07      	ldr	r3, [pc, #28]	; (8009210 <UART_SetConfig+0xc30>)
 80091f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091f6:	e015      	b.n	8009224 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80091f8:	4b06      	ldr	r3, [pc, #24]	; (8009214 <UART_SetConfig+0xc34>)
 80091fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091fc:	e012      	b.n	8009224 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009202:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009204:	e00e      	b.n	8009224 <UART_SetConfig+0xc44>
 8009206:	bf00      	nop
 8009208:	080196d4 	.word	0x080196d4
 800920c:	58024400 	.word	0x58024400
 8009210:	03d09000 	.word	0x03d09000
 8009214:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8009218:	2300      	movs	r3, #0
 800921a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009222:	bf00      	nop
    }

    if (pclk != 0U)
 8009224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009226:	2b00      	cmp	r3, #0
 8009228:	d021      	beq.n	800926e <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922e:	4a1a      	ldr	r2, [pc, #104]	; (8009298 <UART_SetConfig+0xcb8>)
 8009230:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009234:	461a      	mov	r2, r3
 8009236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009238:	fbb3 f2f2 	udiv	r2, r3, r2
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	085b      	lsrs	r3, r3, #1
 8009242:	441a      	add	r2, r3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	fbb2 f3f3 	udiv	r3, r2, r3
 800924c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800924e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009250:	2b0f      	cmp	r3, #15
 8009252:	d909      	bls.n	8009268 <UART_SetConfig+0xc88>
 8009254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800925a:	d205      	bcs.n	8009268 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800925c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925e:	b29a      	uxth	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	60da      	str	r2, [r3, #12]
 8009266:	e002      	b.n	800926e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8009268:	2301      	movs	r3, #1
 800926a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2201      	movs	r2, #1
 8009272:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2201      	movs	r2, #1
 800927a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800928a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800928e:	4618      	mov	r0, r3
 8009290:	3738      	adds	r7, #56	; 0x38
 8009292:	46bd      	mov	sp, r7
 8009294:	bdb0      	pop	{r4, r5, r7, pc}
 8009296:	bf00      	nop
 8009298:	080196d4 	.word	0x080196d4

0800929c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a8:	f003 0301 	and.w	r3, r3, #1
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00a      	beq.n	80092c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	430a      	orrs	r2, r1
 80092c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ca:	f003 0302 	and.w	r3, r3, #2
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d00a      	beq.n	80092e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	430a      	orrs	r2, r1
 80092e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ec:	f003 0304 	and.w	r3, r3, #4
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d00a      	beq.n	800930a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	430a      	orrs	r2, r1
 8009308:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800930e:	f003 0308 	and.w	r3, r3, #8
 8009312:	2b00      	cmp	r3, #0
 8009314:	d00a      	beq.n	800932c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	430a      	orrs	r2, r1
 800932a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009330:	f003 0310 	and.w	r3, r3, #16
 8009334:	2b00      	cmp	r3, #0
 8009336:	d00a      	beq.n	800934e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	430a      	orrs	r2, r1
 800934c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009352:	f003 0320 	and.w	r3, r3, #32
 8009356:	2b00      	cmp	r3, #0
 8009358:	d00a      	beq.n	8009370 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	430a      	orrs	r2, r1
 800936e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009378:	2b00      	cmp	r3, #0
 800937a:	d01a      	beq.n	80093b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	430a      	orrs	r2, r1
 8009390:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009396:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800939a:	d10a      	bne.n	80093b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	430a      	orrs	r2, r1
 80093b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d00a      	beq.n	80093d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	430a      	orrs	r2, r1
 80093d2:	605a      	str	r2, [r3, #4]
  }
}
 80093d4:	bf00      	nop
 80093d6:	370c      	adds	r7, #12
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b086      	sub	sp, #24
 80093e4:	af02      	add	r7, sp, #8
 80093e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80093f0:	f7f9 f900 	bl	80025f4 <HAL_GetTick>
 80093f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f003 0308 	and.w	r3, r3, #8
 8009400:	2b08      	cmp	r3, #8
 8009402:	d10e      	bne.n	8009422 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009404:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009408:	9300      	str	r3, [sp, #0]
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2200      	movs	r2, #0
 800940e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 f82f 	bl	8009476 <UART_WaitOnFlagUntilTimeout>
 8009418:	4603      	mov	r3, r0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d001      	beq.n	8009422 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800941e:	2303      	movs	r3, #3
 8009420:	e025      	b.n	800946e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f003 0304 	and.w	r3, r3, #4
 800942c:	2b04      	cmp	r3, #4
 800942e:	d10e      	bne.n	800944e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009430:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009434:	9300      	str	r3, [sp, #0]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2200      	movs	r2, #0
 800943a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 f819 	bl	8009476 <UART_WaitOnFlagUntilTimeout>
 8009444:	4603      	mov	r3, r0
 8009446:	2b00      	cmp	r3, #0
 8009448:	d001      	beq.n	800944e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800944a:	2303      	movs	r3, #3
 800944c:	e00f      	b.n	800946e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2220      	movs	r2, #32
 8009452:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2220      	movs	r2, #32
 800945a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2200      	movs	r2, #0
 8009462:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800946c:	2300      	movs	r3, #0
}
 800946e:	4618      	mov	r0, r3
 8009470:	3710      	adds	r7, #16
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009476:	b580      	push	{r7, lr}
 8009478:	b09c      	sub	sp, #112	; 0x70
 800947a:	af00      	add	r7, sp, #0
 800947c:	60f8      	str	r0, [r7, #12]
 800947e:	60b9      	str	r1, [r7, #8]
 8009480:	603b      	str	r3, [r7, #0]
 8009482:	4613      	mov	r3, r2
 8009484:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009486:	e0a9      	b.n	80095dc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009488:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800948a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800948e:	f000 80a5 	beq.w	80095dc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009492:	f7f9 f8af 	bl	80025f4 <HAL_GetTick>
 8009496:	4602      	mov	r2, r0
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	1ad3      	subs	r3, r2, r3
 800949c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800949e:	429a      	cmp	r2, r3
 80094a0:	d302      	bcc.n	80094a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80094a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d140      	bne.n	800952a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094b0:	e853 3f00 	ldrex	r3, [r3]
 80094b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80094b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80094bc:	667b      	str	r3, [r7, #100]	; 0x64
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	461a      	mov	r2, r3
 80094c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094c8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80094cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80094ce:	e841 2300 	strex	r3, r2, [r1]
 80094d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80094d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d1e6      	bne.n	80094a8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	3308      	adds	r3, #8
 80094e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094e4:	e853 3f00 	ldrex	r3, [r3]
 80094e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80094ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ec:	f023 0301 	bic.w	r3, r3, #1
 80094f0:	663b      	str	r3, [r7, #96]	; 0x60
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	3308      	adds	r3, #8
 80094f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80094fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80094fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009500:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009502:	e841 2300 	strex	r3, r2, [r1]
 8009506:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800950a:	2b00      	cmp	r3, #0
 800950c:	d1e5      	bne.n	80094da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2220      	movs	r2, #32
 8009512:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2220      	movs	r2, #32
 800951a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2200      	movs	r2, #0
 8009522:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009526:	2303      	movs	r3, #3
 8009528:	e069      	b.n	80095fe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f003 0304 	and.w	r3, r3, #4
 8009534:	2b00      	cmp	r3, #0
 8009536:	d051      	beq.n	80095dc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	69db      	ldr	r3, [r3, #28]
 800953e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009546:	d149      	bne.n	80095dc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009550:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800955a:	e853 3f00 	ldrex	r3, [r3]
 800955e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009562:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009566:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	461a      	mov	r2, r3
 800956e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009570:	637b      	str	r3, [r7, #52]	; 0x34
 8009572:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009574:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009576:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009578:	e841 2300 	strex	r3, r2, [r1]
 800957c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800957e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009580:	2b00      	cmp	r3, #0
 8009582:	d1e6      	bne.n	8009552 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	3308      	adds	r3, #8
 800958a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	e853 3f00 	ldrex	r3, [r3]
 8009592:	613b      	str	r3, [r7, #16]
   return(result);
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	f023 0301 	bic.w	r3, r3, #1
 800959a:	66bb      	str	r3, [r7, #104]	; 0x68
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	3308      	adds	r3, #8
 80095a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80095a4:	623a      	str	r2, [r7, #32]
 80095a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a8:	69f9      	ldr	r1, [r7, #28]
 80095aa:	6a3a      	ldr	r2, [r7, #32]
 80095ac:	e841 2300 	strex	r3, r2, [r1]
 80095b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d1e5      	bne.n	8009584 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2220      	movs	r2, #32
 80095bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2220      	movs	r2, #32
 80095c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2220      	movs	r2, #32
 80095cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2200      	movs	r2, #0
 80095d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80095d8:	2303      	movs	r3, #3
 80095da:	e010      	b.n	80095fe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	69da      	ldr	r2, [r3, #28]
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	4013      	ands	r3, r2
 80095e6:	68ba      	ldr	r2, [r7, #8]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	bf0c      	ite	eq
 80095ec:	2301      	moveq	r3, #1
 80095ee:	2300      	movne	r3, #0
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	461a      	mov	r2, r3
 80095f4:	79fb      	ldrb	r3, [r7, #7]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	f43f af46 	beq.w	8009488 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3770      	adds	r7, #112	; 0x70
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}

08009606 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009606:	b480      	push	{r7}
 8009608:	b085      	sub	sp, #20
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009614:	2b01      	cmp	r3, #1
 8009616:	d101      	bne.n	800961c <HAL_UARTEx_DisableFifoMode+0x16>
 8009618:	2302      	movs	r3, #2
 800961a:	e027      	b.n	800966c <HAL_UARTEx_DisableFifoMode+0x66>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2201      	movs	r2, #1
 8009620:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2224      	movs	r2, #36	; 0x24
 8009628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f022 0201 	bic.w	r2, r2, #1
 8009642:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800964a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2200      	movs	r2, #0
 8009650:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	68fa      	ldr	r2, [r7, #12]
 8009658:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2220      	movs	r2, #32
 800965e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3714      	adds	r7, #20
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009688:	2b01      	cmp	r3, #1
 800968a:	d101      	bne.n	8009690 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800968c:	2302      	movs	r3, #2
 800968e:	e02d      	b.n	80096ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2201      	movs	r2, #1
 8009694:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2224      	movs	r2, #36	; 0x24
 800969c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f022 0201 	bic.w	r2, r2, #1
 80096b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	683a      	ldr	r2, [r7, #0]
 80096c8:	430a      	orrs	r2, r1
 80096ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 f84f 	bl	8009770 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	68fa      	ldr	r2, [r7, #12]
 80096d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2220      	movs	r2, #32
 80096de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80096ea:	2300      	movs	r3, #0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3710      	adds	r7, #16
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009704:	2b01      	cmp	r3, #1
 8009706:	d101      	bne.n	800970c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009708:	2302      	movs	r3, #2
 800970a:	e02d      	b.n	8009768 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2201      	movs	r2, #1
 8009710:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2224      	movs	r2, #36	; 0x24
 8009718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f022 0201 	bic.w	r2, r2, #1
 8009732:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	689b      	ldr	r3, [r3, #8]
 800973a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	683a      	ldr	r2, [r7, #0]
 8009744:	430a      	orrs	r2, r1
 8009746:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 f811 	bl	8009770 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2220      	movs	r2, #32
 800975a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009766:	2300      	movs	r3, #0
}
 8009768:	4618      	mov	r0, r3
 800976a:	3710      	adds	r7, #16
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009770:	b480      	push	{r7}
 8009772:	b085      	sub	sp, #20
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800977c:	2b00      	cmp	r3, #0
 800977e:	d108      	bne.n	8009792 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009790:	e031      	b.n	80097f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009792:	2310      	movs	r3, #16
 8009794:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009796:	2310      	movs	r3, #16
 8009798:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	0e5b      	lsrs	r3, r3, #25
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	f003 0307 	and.w	r3, r3, #7
 80097a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	0f5b      	lsrs	r3, r3, #29
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	f003 0307 	and.w	r3, r3, #7
 80097b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097ba:	7bbb      	ldrb	r3, [r7, #14]
 80097bc:	7b3a      	ldrb	r2, [r7, #12]
 80097be:	4911      	ldr	r1, [pc, #68]	; (8009804 <UARTEx_SetNbDataToProcess+0x94>)
 80097c0:	5c8a      	ldrb	r2, [r1, r2]
 80097c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80097c6:	7b3a      	ldrb	r2, [r7, #12]
 80097c8:	490f      	ldr	r1, [pc, #60]	; (8009808 <UARTEx_SetNbDataToProcess+0x98>)
 80097ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80097d0:	b29a      	uxth	r2, r3
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097d8:	7bfb      	ldrb	r3, [r7, #15]
 80097da:	7b7a      	ldrb	r2, [r7, #13]
 80097dc:	4909      	ldr	r1, [pc, #36]	; (8009804 <UARTEx_SetNbDataToProcess+0x94>)
 80097de:	5c8a      	ldrb	r2, [r1, r2]
 80097e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80097e4:	7b7a      	ldrb	r2, [r7, #13]
 80097e6:	4908      	ldr	r1, [pc, #32]	; (8009808 <UARTEx_SetNbDataToProcess+0x98>)
 80097e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80097ee:	b29a      	uxth	r2, r3
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80097f6:	bf00      	nop
 80097f8:	3714      	adds	r7, #20
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	080196ec 	.word	0x080196ec
 8009808:	080196f4 	.word	0x080196f4

0800980c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8009812:	4b8d      	ldr	r3, [pc, #564]	; (8009a48 <MX_LWIP_Init+0x23c>)
 8009814:	22c0      	movs	r2, #192	; 0xc0
 8009816:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8009818:	4b8b      	ldr	r3, [pc, #556]	; (8009a48 <MX_LWIP_Init+0x23c>)
 800981a:	22a8      	movs	r2, #168	; 0xa8
 800981c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800981e:	4b8a      	ldr	r3, [pc, #552]	; (8009a48 <MX_LWIP_Init+0x23c>)
 8009820:	2201      	movs	r2, #1
 8009822:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 200;
 8009824:	4b88      	ldr	r3, [pc, #544]	; (8009a48 <MX_LWIP_Init+0x23c>)
 8009826:	22c8      	movs	r2, #200	; 0xc8
 8009828:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800982a:	4b88      	ldr	r3, [pc, #544]	; (8009a4c <MX_LWIP_Init+0x240>)
 800982c:	22ff      	movs	r2, #255	; 0xff
 800982e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8009830:	4b86      	ldr	r3, [pc, #536]	; (8009a4c <MX_LWIP_Init+0x240>)
 8009832:	22ff      	movs	r2, #255	; 0xff
 8009834:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8009836:	4b85      	ldr	r3, [pc, #532]	; (8009a4c <MX_LWIP_Init+0x240>)
 8009838:	22ff      	movs	r2, #255	; 0xff
 800983a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800983c:	4b83      	ldr	r3, [pc, #524]	; (8009a4c <MX_LWIP_Init+0x240>)
 800983e:	2200      	movs	r2, #0
 8009840:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8009842:	4b83      	ldr	r3, [pc, #524]	; (8009a50 <MX_LWIP_Init+0x244>)
 8009844:	22c0      	movs	r2, #192	; 0xc0
 8009846:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8009848:	4b81      	ldr	r3, [pc, #516]	; (8009a50 <MX_LWIP_Init+0x244>)
 800984a:	22a8      	movs	r2, #168	; 0xa8
 800984c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800984e:	4b80      	ldr	r3, [pc, #512]	; (8009a50 <MX_LWIP_Init+0x244>)
 8009850:	2201      	movs	r2, #1
 8009852:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8009854:	4b7e      	ldr	r3, [pc, #504]	; (8009a50 <MX_LWIP_Init+0x244>)
 8009856:	2201      	movs	r2, #1
 8009858:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800985a:	f000 fdb9 	bl	800a3d0 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800985e:	4b7a      	ldr	r3, [pc, #488]	; (8009a48 <MX_LWIP_Init+0x23c>)
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	061a      	lsls	r2, r3, #24
 8009864:	4b78      	ldr	r3, [pc, #480]	; (8009a48 <MX_LWIP_Init+0x23c>)
 8009866:	785b      	ldrb	r3, [r3, #1]
 8009868:	041b      	lsls	r3, r3, #16
 800986a:	431a      	orrs	r2, r3
 800986c:	4b76      	ldr	r3, [pc, #472]	; (8009a48 <MX_LWIP_Init+0x23c>)
 800986e:	789b      	ldrb	r3, [r3, #2]
 8009870:	021b      	lsls	r3, r3, #8
 8009872:	4313      	orrs	r3, r2
 8009874:	4a74      	ldr	r2, [pc, #464]	; (8009a48 <MX_LWIP_Init+0x23c>)
 8009876:	78d2      	ldrb	r2, [r2, #3]
 8009878:	4313      	orrs	r3, r2
 800987a:	061a      	lsls	r2, r3, #24
 800987c:	4b72      	ldr	r3, [pc, #456]	; (8009a48 <MX_LWIP_Init+0x23c>)
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	0619      	lsls	r1, r3, #24
 8009882:	4b71      	ldr	r3, [pc, #452]	; (8009a48 <MX_LWIP_Init+0x23c>)
 8009884:	785b      	ldrb	r3, [r3, #1]
 8009886:	041b      	lsls	r3, r3, #16
 8009888:	4319      	orrs	r1, r3
 800988a:	4b6f      	ldr	r3, [pc, #444]	; (8009a48 <MX_LWIP_Init+0x23c>)
 800988c:	789b      	ldrb	r3, [r3, #2]
 800988e:	021b      	lsls	r3, r3, #8
 8009890:	430b      	orrs	r3, r1
 8009892:	496d      	ldr	r1, [pc, #436]	; (8009a48 <MX_LWIP_Init+0x23c>)
 8009894:	78c9      	ldrb	r1, [r1, #3]
 8009896:	430b      	orrs	r3, r1
 8009898:	021b      	lsls	r3, r3, #8
 800989a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800989e:	431a      	orrs	r2, r3
 80098a0:	4b69      	ldr	r3, [pc, #420]	; (8009a48 <MX_LWIP_Init+0x23c>)
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	0619      	lsls	r1, r3, #24
 80098a6:	4b68      	ldr	r3, [pc, #416]	; (8009a48 <MX_LWIP_Init+0x23c>)
 80098a8:	785b      	ldrb	r3, [r3, #1]
 80098aa:	041b      	lsls	r3, r3, #16
 80098ac:	4319      	orrs	r1, r3
 80098ae:	4b66      	ldr	r3, [pc, #408]	; (8009a48 <MX_LWIP_Init+0x23c>)
 80098b0:	789b      	ldrb	r3, [r3, #2]
 80098b2:	021b      	lsls	r3, r3, #8
 80098b4:	430b      	orrs	r3, r1
 80098b6:	4964      	ldr	r1, [pc, #400]	; (8009a48 <MX_LWIP_Init+0x23c>)
 80098b8:	78c9      	ldrb	r1, [r1, #3]
 80098ba:	430b      	orrs	r3, r1
 80098bc:	0a1b      	lsrs	r3, r3, #8
 80098be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80098c2:	431a      	orrs	r2, r3
 80098c4:	4b60      	ldr	r3, [pc, #384]	; (8009a48 <MX_LWIP_Init+0x23c>)
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	0619      	lsls	r1, r3, #24
 80098ca:	4b5f      	ldr	r3, [pc, #380]	; (8009a48 <MX_LWIP_Init+0x23c>)
 80098cc:	785b      	ldrb	r3, [r3, #1]
 80098ce:	041b      	lsls	r3, r3, #16
 80098d0:	4319      	orrs	r1, r3
 80098d2:	4b5d      	ldr	r3, [pc, #372]	; (8009a48 <MX_LWIP_Init+0x23c>)
 80098d4:	789b      	ldrb	r3, [r3, #2]
 80098d6:	021b      	lsls	r3, r3, #8
 80098d8:	430b      	orrs	r3, r1
 80098da:	495b      	ldr	r1, [pc, #364]	; (8009a48 <MX_LWIP_Init+0x23c>)
 80098dc:	78c9      	ldrb	r1, [r1, #3]
 80098de:	430b      	orrs	r3, r1
 80098e0:	0e1b      	lsrs	r3, r3, #24
 80098e2:	4313      	orrs	r3, r2
 80098e4:	4a5b      	ldr	r2, [pc, #364]	; (8009a54 <MX_LWIP_Init+0x248>)
 80098e6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80098e8:	4b58      	ldr	r3, [pc, #352]	; (8009a4c <MX_LWIP_Init+0x240>)
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	061a      	lsls	r2, r3, #24
 80098ee:	4b57      	ldr	r3, [pc, #348]	; (8009a4c <MX_LWIP_Init+0x240>)
 80098f0:	785b      	ldrb	r3, [r3, #1]
 80098f2:	041b      	lsls	r3, r3, #16
 80098f4:	431a      	orrs	r2, r3
 80098f6:	4b55      	ldr	r3, [pc, #340]	; (8009a4c <MX_LWIP_Init+0x240>)
 80098f8:	789b      	ldrb	r3, [r3, #2]
 80098fa:	021b      	lsls	r3, r3, #8
 80098fc:	4313      	orrs	r3, r2
 80098fe:	4a53      	ldr	r2, [pc, #332]	; (8009a4c <MX_LWIP_Init+0x240>)
 8009900:	78d2      	ldrb	r2, [r2, #3]
 8009902:	4313      	orrs	r3, r2
 8009904:	061a      	lsls	r2, r3, #24
 8009906:	4b51      	ldr	r3, [pc, #324]	; (8009a4c <MX_LWIP_Init+0x240>)
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	0619      	lsls	r1, r3, #24
 800990c:	4b4f      	ldr	r3, [pc, #316]	; (8009a4c <MX_LWIP_Init+0x240>)
 800990e:	785b      	ldrb	r3, [r3, #1]
 8009910:	041b      	lsls	r3, r3, #16
 8009912:	4319      	orrs	r1, r3
 8009914:	4b4d      	ldr	r3, [pc, #308]	; (8009a4c <MX_LWIP_Init+0x240>)
 8009916:	789b      	ldrb	r3, [r3, #2]
 8009918:	021b      	lsls	r3, r3, #8
 800991a:	430b      	orrs	r3, r1
 800991c:	494b      	ldr	r1, [pc, #300]	; (8009a4c <MX_LWIP_Init+0x240>)
 800991e:	78c9      	ldrb	r1, [r1, #3]
 8009920:	430b      	orrs	r3, r1
 8009922:	021b      	lsls	r3, r3, #8
 8009924:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009928:	431a      	orrs	r2, r3
 800992a:	4b48      	ldr	r3, [pc, #288]	; (8009a4c <MX_LWIP_Init+0x240>)
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	0619      	lsls	r1, r3, #24
 8009930:	4b46      	ldr	r3, [pc, #280]	; (8009a4c <MX_LWIP_Init+0x240>)
 8009932:	785b      	ldrb	r3, [r3, #1]
 8009934:	041b      	lsls	r3, r3, #16
 8009936:	4319      	orrs	r1, r3
 8009938:	4b44      	ldr	r3, [pc, #272]	; (8009a4c <MX_LWIP_Init+0x240>)
 800993a:	789b      	ldrb	r3, [r3, #2]
 800993c:	021b      	lsls	r3, r3, #8
 800993e:	430b      	orrs	r3, r1
 8009940:	4942      	ldr	r1, [pc, #264]	; (8009a4c <MX_LWIP_Init+0x240>)
 8009942:	78c9      	ldrb	r1, [r1, #3]
 8009944:	430b      	orrs	r3, r1
 8009946:	0a1b      	lsrs	r3, r3, #8
 8009948:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800994c:	431a      	orrs	r2, r3
 800994e:	4b3f      	ldr	r3, [pc, #252]	; (8009a4c <MX_LWIP_Init+0x240>)
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	0619      	lsls	r1, r3, #24
 8009954:	4b3d      	ldr	r3, [pc, #244]	; (8009a4c <MX_LWIP_Init+0x240>)
 8009956:	785b      	ldrb	r3, [r3, #1]
 8009958:	041b      	lsls	r3, r3, #16
 800995a:	4319      	orrs	r1, r3
 800995c:	4b3b      	ldr	r3, [pc, #236]	; (8009a4c <MX_LWIP_Init+0x240>)
 800995e:	789b      	ldrb	r3, [r3, #2]
 8009960:	021b      	lsls	r3, r3, #8
 8009962:	430b      	orrs	r3, r1
 8009964:	4939      	ldr	r1, [pc, #228]	; (8009a4c <MX_LWIP_Init+0x240>)
 8009966:	78c9      	ldrb	r1, [r1, #3]
 8009968:	430b      	orrs	r3, r1
 800996a:	0e1b      	lsrs	r3, r3, #24
 800996c:	4313      	orrs	r3, r2
 800996e:	4a3a      	ldr	r2, [pc, #232]	; (8009a58 <MX_LWIP_Init+0x24c>)
 8009970:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009972:	4b37      	ldr	r3, [pc, #220]	; (8009a50 <MX_LWIP_Init+0x244>)
 8009974:	781b      	ldrb	r3, [r3, #0]
 8009976:	061a      	lsls	r2, r3, #24
 8009978:	4b35      	ldr	r3, [pc, #212]	; (8009a50 <MX_LWIP_Init+0x244>)
 800997a:	785b      	ldrb	r3, [r3, #1]
 800997c:	041b      	lsls	r3, r3, #16
 800997e:	431a      	orrs	r2, r3
 8009980:	4b33      	ldr	r3, [pc, #204]	; (8009a50 <MX_LWIP_Init+0x244>)
 8009982:	789b      	ldrb	r3, [r3, #2]
 8009984:	021b      	lsls	r3, r3, #8
 8009986:	4313      	orrs	r3, r2
 8009988:	4a31      	ldr	r2, [pc, #196]	; (8009a50 <MX_LWIP_Init+0x244>)
 800998a:	78d2      	ldrb	r2, [r2, #3]
 800998c:	4313      	orrs	r3, r2
 800998e:	061a      	lsls	r2, r3, #24
 8009990:	4b2f      	ldr	r3, [pc, #188]	; (8009a50 <MX_LWIP_Init+0x244>)
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	0619      	lsls	r1, r3, #24
 8009996:	4b2e      	ldr	r3, [pc, #184]	; (8009a50 <MX_LWIP_Init+0x244>)
 8009998:	785b      	ldrb	r3, [r3, #1]
 800999a:	041b      	lsls	r3, r3, #16
 800999c:	4319      	orrs	r1, r3
 800999e:	4b2c      	ldr	r3, [pc, #176]	; (8009a50 <MX_LWIP_Init+0x244>)
 80099a0:	789b      	ldrb	r3, [r3, #2]
 80099a2:	021b      	lsls	r3, r3, #8
 80099a4:	430b      	orrs	r3, r1
 80099a6:	492a      	ldr	r1, [pc, #168]	; (8009a50 <MX_LWIP_Init+0x244>)
 80099a8:	78c9      	ldrb	r1, [r1, #3]
 80099aa:	430b      	orrs	r3, r1
 80099ac:	021b      	lsls	r3, r3, #8
 80099ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80099b2:	431a      	orrs	r2, r3
 80099b4:	4b26      	ldr	r3, [pc, #152]	; (8009a50 <MX_LWIP_Init+0x244>)
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	0619      	lsls	r1, r3, #24
 80099ba:	4b25      	ldr	r3, [pc, #148]	; (8009a50 <MX_LWIP_Init+0x244>)
 80099bc:	785b      	ldrb	r3, [r3, #1]
 80099be:	041b      	lsls	r3, r3, #16
 80099c0:	4319      	orrs	r1, r3
 80099c2:	4b23      	ldr	r3, [pc, #140]	; (8009a50 <MX_LWIP_Init+0x244>)
 80099c4:	789b      	ldrb	r3, [r3, #2]
 80099c6:	021b      	lsls	r3, r3, #8
 80099c8:	430b      	orrs	r3, r1
 80099ca:	4921      	ldr	r1, [pc, #132]	; (8009a50 <MX_LWIP_Init+0x244>)
 80099cc:	78c9      	ldrb	r1, [r1, #3]
 80099ce:	430b      	orrs	r3, r1
 80099d0:	0a1b      	lsrs	r3, r3, #8
 80099d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80099d6:	431a      	orrs	r2, r3
 80099d8:	4b1d      	ldr	r3, [pc, #116]	; (8009a50 <MX_LWIP_Init+0x244>)
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	0619      	lsls	r1, r3, #24
 80099de:	4b1c      	ldr	r3, [pc, #112]	; (8009a50 <MX_LWIP_Init+0x244>)
 80099e0:	785b      	ldrb	r3, [r3, #1]
 80099e2:	041b      	lsls	r3, r3, #16
 80099e4:	4319      	orrs	r1, r3
 80099e6:	4b1a      	ldr	r3, [pc, #104]	; (8009a50 <MX_LWIP_Init+0x244>)
 80099e8:	789b      	ldrb	r3, [r3, #2]
 80099ea:	021b      	lsls	r3, r3, #8
 80099ec:	430b      	orrs	r3, r1
 80099ee:	4918      	ldr	r1, [pc, #96]	; (8009a50 <MX_LWIP_Init+0x244>)
 80099f0:	78c9      	ldrb	r1, [r1, #3]
 80099f2:	430b      	orrs	r3, r1
 80099f4:	0e1b      	lsrs	r3, r3, #24
 80099f6:	4313      	orrs	r3, r2
 80099f8:	4a18      	ldr	r2, [pc, #96]	; (8009a5c <MX_LWIP_Init+0x250>)
 80099fa:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80099fc:	4b18      	ldr	r3, [pc, #96]	; (8009a60 <MX_LWIP_Init+0x254>)
 80099fe:	9302      	str	r3, [sp, #8]
 8009a00:	4b18      	ldr	r3, [pc, #96]	; (8009a64 <MX_LWIP_Init+0x258>)
 8009a02:	9301      	str	r3, [sp, #4]
 8009a04:	2300      	movs	r3, #0
 8009a06:	9300      	str	r3, [sp, #0]
 8009a08:	4b14      	ldr	r3, [pc, #80]	; (8009a5c <MX_LWIP_Init+0x250>)
 8009a0a:	4a13      	ldr	r2, [pc, #76]	; (8009a58 <MX_LWIP_Init+0x24c>)
 8009a0c:	4911      	ldr	r1, [pc, #68]	; (8009a54 <MX_LWIP_Init+0x248>)
 8009a0e:	4816      	ldr	r0, [pc, #88]	; (8009a68 <MX_LWIP_Init+0x25c>)
 8009a10:	f001 f9c6 	bl	800ada0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009a14:	4814      	ldr	r0, [pc, #80]	; (8009a68 <MX_LWIP_Init+0x25c>)
 8009a16:	f001 fb75 	bl	800b104 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8009a1a:	4b13      	ldr	r3, [pc, #76]	; (8009a68 <MX_LWIP_Init+0x25c>)
 8009a1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009a20:	089b      	lsrs	r3, r3, #2
 8009a22:	f003 0301 	and.w	r3, r3, #1
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d003      	beq.n	8009a34 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8009a2c:	480e      	ldr	r0, [pc, #56]	; (8009a68 <MX_LWIP_Init+0x25c>)
 8009a2e:	f001 fb79 	bl	800b124 <netif_set_up>
 8009a32:	e002      	b.n	8009a3a <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8009a34:	480c      	ldr	r0, [pc, #48]	; (8009a68 <MX_LWIP_Init+0x25c>)
 8009a36:	f001 fbe1 	bl	800b1fc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8009a3a:	490c      	ldr	r1, [pc, #48]	; (8009a6c <MX_LWIP_Init+0x260>)
 8009a3c:	480a      	ldr	r0, [pc, #40]	; (8009a68 <MX_LWIP_Init+0x25c>)
 8009a3e:	f001 fc73 	bl	800b328 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8009a42:	bf00      	nop
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}
 8009a48:	24000560 	.word	0x24000560
 8009a4c:	2400055c 	.word	0x2400055c
 8009a50:	2400051c 	.word	0x2400051c
 8009a54:	24000554 	.word	0x24000554
 8009a58:	24000564 	.word	0x24000564
 8009a5c:	24000568 	.word	0x24000568
 8009a60:	08014b51 	.word	0x08014b51
 8009a64:	08009fcd 	.word	0x08009fcd
 8009a68:	24000520 	.word	0x24000520
 8009a6c:	08009a71 	.word	0x08009a71

08009a70 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b083      	sub	sp, #12
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8009a78:	bf00      	nop
 8009a7a:	370c      	adds	r7, #12
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr

08009a84 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b08e      	sub	sp, #56	; 0x38
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a90:	2200      	movs	r2, #0
 8009a92:	601a      	str	r2, [r3, #0]
 8009a94:	605a      	str	r2, [r3, #4]
 8009a96:	609a      	str	r2, [r3, #8]
 8009a98:	60da      	str	r2, [r3, #12]
 8009a9a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a59      	ldr	r2, [pc, #356]	; (8009c08 <HAL_ETH_MspInit+0x184>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	f040 80ab 	bne.w	8009bfe <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8009aa8:	4b58      	ldr	r3, [pc, #352]	; (8009c0c <HAL_ETH_MspInit+0x188>)
 8009aaa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009aae:	4a57      	ldr	r2, [pc, #348]	; (8009c0c <HAL_ETH_MspInit+0x188>)
 8009ab0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ab4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009ab8:	4b54      	ldr	r3, [pc, #336]	; (8009c0c <HAL_ETH_MspInit+0x188>)
 8009aba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009abe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ac2:	623b      	str	r3, [r7, #32]
 8009ac4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8009ac6:	4b51      	ldr	r3, [pc, #324]	; (8009c0c <HAL_ETH_MspInit+0x188>)
 8009ac8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009acc:	4a4f      	ldr	r2, [pc, #316]	; (8009c0c <HAL_ETH_MspInit+0x188>)
 8009ace:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ad2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009ad6:	4b4d      	ldr	r3, [pc, #308]	; (8009c0c <HAL_ETH_MspInit+0x188>)
 8009ad8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ae0:	61fb      	str	r3, [r7, #28]
 8009ae2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8009ae4:	4b49      	ldr	r3, [pc, #292]	; (8009c0c <HAL_ETH_MspInit+0x188>)
 8009ae6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009aea:	4a48      	ldr	r2, [pc, #288]	; (8009c0c <HAL_ETH_MspInit+0x188>)
 8009aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009af0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009af4:	4b45      	ldr	r3, [pc, #276]	; (8009c0c <HAL_ETH_MspInit+0x188>)
 8009af6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009afe:	61bb      	str	r3, [r7, #24]
 8009b00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009b02:	4b42      	ldr	r3, [pc, #264]	; (8009c0c <HAL_ETH_MspInit+0x188>)
 8009b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b08:	4a40      	ldr	r2, [pc, #256]	; (8009c0c <HAL_ETH_MspInit+0x188>)
 8009b0a:	f043 0304 	orr.w	r3, r3, #4
 8009b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009b12:	4b3e      	ldr	r3, [pc, #248]	; (8009c0c <HAL_ETH_MspInit+0x188>)
 8009b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b18:	f003 0304 	and.w	r3, r3, #4
 8009b1c:	617b      	str	r3, [r7, #20]
 8009b1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b20:	4b3a      	ldr	r3, [pc, #232]	; (8009c0c <HAL_ETH_MspInit+0x188>)
 8009b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b26:	4a39      	ldr	r2, [pc, #228]	; (8009c0c <HAL_ETH_MspInit+0x188>)
 8009b28:	f043 0301 	orr.w	r3, r3, #1
 8009b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009b30:	4b36      	ldr	r3, [pc, #216]	; (8009c0c <HAL_ETH_MspInit+0x188>)
 8009b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b36:	f003 0301 	and.w	r3, r3, #1
 8009b3a:	613b      	str	r3, [r7, #16]
 8009b3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009b3e:	4b33      	ldr	r3, [pc, #204]	; (8009c0c <HAL_ETH_MspInit+0x188>)
 8009b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b44:	4a31      	ldr	r2, [pc, #196]	; (8009c0c <HAL_ETH_MspInit+0x188>)
 8009b46:	f043 0302 	orr.w	r3, r3, #2
 8009b4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009b4e:	4b2f      	ldr	r3, [pc, #188]	; (8009c0c <HAL_ETH_MspInit+0x188>)
 8009b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b54:	f003 0302 	and.w	r3, r3, #2
 8009b58:	60fb      	str	r3, [r7, #12]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009b5c:	4b2b      	ldr	r3, [pc, #172]	; (8009c0c <HAL_ETH_MspInit+0x188>)
 8009b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b62:	4a2a      	ldr	r2, [pc, #168]	; (8009c0c <HAL_ETH_MspInit+0x188>)
 8009b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009b6c:	4b27      	ldr	r3, [pc, #156]	; (8009c0c <HAL_ETH_MspInit+0x188>)
 8009b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b76:	60bb      	str	r3, [r7, #8]
 8009b78:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8009b7a:	2332      	movs	r3, #50	; 0x32
 8009b7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b7e:	2302      	movs	r3, #2
 8009b80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b82:	2300      	movs	r3, #0
 8009b84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b86:	2300      	movs	r3, #0
 8009b88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009b8a:	230b      	movs	r3, #11
 8009b8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b92:	4619      	mov	r1, r3
 8009b94:	481e      	ldr	r0, [pc, #120]	; (8009c10 <HAL_ETH_MspInit+0x18c>)
 8009b96:	f7fb f9b7 	bl	8004f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8009b9a:	2386      	movs	r3, #134	; 0x86
 8009b9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b9e:	2302      	movs	r3, #2
 8009ba0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009baa:	230b      	movs	r3, #11
 8009bac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	4817      	ldr	r0, [pc, #92]	; (8009c14 <HAL_ETH_MspInit+0x190>)
 8009bb6:	f7fb f9a7 	bl	8004f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8009bba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009bbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bc0:	2302      	movs	r3, #2
 8009bc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009bcc:	230b      	movs	r3, #11
 8009bce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8009bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	4810      	ldr	r0, [pc, #64]	; (8009c18 <HAL_ETH_MspInit+0x194>)
 8009bd8:	f7fb f996 	bl	8004f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8009bdc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009be0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009be2:	2302      	movs	r3, #2
 8009be4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009be6:	2300      	movs	r3, #0
 8009be8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009bea:	2300      	movs	r3, #0
 8009bec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009bee:	230b      	movs	r3, #11
 8009bf0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	4808      	ldr	r0, [pc, #32]	; (8009c1c <HAL_ETH_MspInit+0x198>)
 8009bfa:	f7fb f985 	bl	8004f08 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009bfe:	bf00      	nop
 8009c00:	3738      	adds	r7, #56	; 0x38
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	40028000 	.word	0x40028000
 8009c0c:	58024400 	.word	0x58024400
 8009c10:	58020800 	.word	0x58020800
 8009c14:	58020000 	.word	0x58020000
 8009c18:	58020400 	.word	0x58020400
 8009c1c:	58021800 	.word	0x58021800

08009c20 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b086      	sub	sp, #24
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	74fb      	strb	r3, [r7, #19]
  uint32_t idx = 0;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	617b      	str	r3, [r7, #20]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009c30:	4b4a      	ldr	r3, [pc, #296]	; (8009d5c <low_level_init+0x13c>)
 8009c32:	4a4b      	ldr	r2, [pc, #300]	; (8009d60 <low_level_init+0x140>)
 8009c34:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8009c36:	2300      	movs	r3, #0
 8009c38:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8009c3a:	2380      	movs	r3, #128	; 0x80
 8009c3c:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8009c3e:	23e1      	movs	r3, #225	; 0xe1
 8009c40:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8009c42:	2300      	movs	r3, #0
 8009c44:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8009c46:	2300      	movs	r3, #0
 8009c48:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8009c4e:	4a43      	ldr	r2, [pc, #268]	; (8009d5c <low_level_init+0x13c>)
 8009c50:	f107 030c 	add.w	r3, r7, #12
 8009c54:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8009c56:	4b41      	ldr	r3, [pc, #260]	; (8009d5c <low_level_init+0x13c>)
 8009c58:	2201      	movs	r2, #1
 8009c5a:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8009c5c:	4b3f      	ldr	r3, [pc, #252]	; (8009d5c <low_level_init+0x13c>)
 8009c5e:	4a41      	ldr	r2, [pc, #260]	; (8009d64 <low_level_init+0x144>)
 8009c60:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8009c62:	4b3e      	ldr	r3, [pc, #248]	; (8009d5c <low_level_init+0x13c>)
 8009c64:	4a40      	ldr	r2, [pc, #256]	; (8009d68 <low_level_init+0x148>)
 8009c66:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8009c68:	4b3c      	ldr	r3, [pc, #240]	; (8009d5c <low_level_init+0x13c>)
 8009c6a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009c6e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009c70:	483a      	ldr	r0, [pc, #232]	; (8009d5c <low_level_init+0x13c>)
 8009c72:	f7f8 fe8f 	bl	8002994 <HAL_ETH_Init>
 8009c76:	4603      	mov	r3, r0
 8009c78:	74fb      	strb	r3, [r7, #19]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8009c7a:	2234      	movs	r2, #52	; 0x34
 8009c7c:	2100      	movs	r1, #0
 8009c7e:	483b      	ldr	r0, [pc, #236]	; (8009d6c <low_level_init+0x14c>)
 8009c80:	f00b f87c 	bl	8014d7c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8009c84:	4b39      	ldr	r3, [pc, #228]	; (8009d6c <low_level_init+0x14c>)
 8009c86:	2221      	movs	r2, #33	; 0x21
 8009c88:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8009c8a:	4b38      	ldr	r3, [pc, #224]	; (8009d6c <low_level_init+0x14c>)
 8009c8c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8009c90:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8009c92:	4b36      	ldr	r3, [pc, #216]	; (8009d6c <low_level_init+0x14c>)
 8009c94:	2200      	movs	r2, #0
 8009c96:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8009c98:	4835      	ldr	r0, [pc, #212]	; (8009d70 <low_level_init+0x150>)
 8009c9a:	f000 ff49 	bl	800ab30 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2206      	movs	r2, #6
 8009ca2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009ca6:	4b2d      	ldr	r3, [pc, #180]	; (8009d5c <low_level_init+0x13c>)
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	781a      	ldrb	r2, [r3, #0]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009cb2:	4b2a      	ldr	r3, [pc, #168]	; (8009d5c <low_level_init+0x13c>)
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	785a      	ldrb	r2, [r3, #1]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009cbe:	4b27      	ldr	r3, [pc, #156]	; (8009d5c <low_level_init+0x13c>)
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	789a      	ldrb	r2, [r3, #2]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009cca:	4b24      	ldr	r3, [pc, #144]	; (8009d5c <low_level_init+0x13c>)
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	78da      	ldrb	r2, [r3, #3]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009cd6:	4b21      	ldr	r3, [pc, #132]	; (8009d5c <low_level_init+0x13c>)
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	791a      	ldrb	r2, [r3, #4]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009ce2:	4b1e      	ldr	r3, [pc, #120]	; (8009d5c <low_level_init+0x13c>)
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	795a      	ldrb	r2, [r3, #5]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009cf4:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009cfc:	f043 030a 	orr.w	r3, r3, #10
 8009d00:	b2da      	uxtb	r2, r3
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8009d08:	2300      	movs	r3, #0
 8009d0a:	617b      	str	r3, [r7, #20]
 8009d0c:	e00e      	b.n	8009d2c <low_level_init+0x10c>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 8009d0e:	697a      	ldr	r2, [r7, #20]
 8009d10:	4613      	mov	r3, r2
 8009d12:	005b      	lsls	r3, r3, #1
 8009d14:	4413      	add	r3, r2
 8009d16:	025b      	lsls	r3, r3, #9
 8009d18:	4a16      	ldr	r2, [pc, #88]	; (8009d74 <low_level_init+0x154>)
 8009d1a:	441a      	add	r2, r3
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	6979      	ldr	r1, [r7, #20]
 8009d20:	480e      	ldr	r0, [pc, #56]	; (8009d5c <low_level_init+0x13c>)
 8009d22:	f7f8 ff11 	bl	8002b48 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	3301      	adds	r3, #1
 8009d2a:	617b      	str	r3, [r7, #20]
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	2b03      	cmp	r3, #3
 8009d30:	d9ed      	bls.n	8009d0e <low_level_init+0xee>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8009d32:	4911      	ldr	r1, [pc, #68]	; (8009d78 <low_level_init+0x158>)
 8009d34:	4811      	ldr	r0, [pc, #68]	; (8009d7c <low_level_init+0x15c>)
 8009d36:	f7f8 fa76 	bl	8002226 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8009d3a:	4810      	ldr	r0, [pc, #64]	; (8009d7c <low_level_init+0x15c>)
 8009d3c:	f7f8 faa5 	bl	800228a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8009d40:	7cfb      	ldrb	r3, [r7, #19]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d103      	bne.n	8009d4e <low_level_init+0x12e>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 f9d4 	bl	800a0f4 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8009d4c:	e001      	b.n	8009d52 <low_level_init+0x132>
    Error_Handler();
 8009d4e:	f7f7 fc42 	bl	80015d6 <Error_Handler>
}
 8009d52:	bf00      	nop
 8009d54:	3718      	adds	r7, #24
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	24000658 	.word	0x24000658
 8009d60:	40028000 	.word	0x40028000
 8009d64:	30000080 	.word	0x30000080
 8009d68:	30000000 	.word	0x30000000
 8009d6c:	240006e0 	.word	0x240006e0
 8009d70:	080196fc 	.word	0x080196fc
 8009d74:	30000100 	.word	0x30000100
 8009d78:	24000018 	.word	0x24000018
 8009d7c:	24000638 	.word	0x24000638

08009d80 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b092      	sub	sp, #72	; 0x48
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8009d94:	f107 030c 	add.w	r3, r7, #12
 8009d98:	2230      	movs	r2, #48	; 0x30
 8009d9a:	2100      	movs	r1, #0
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f00a ffed 	bl	8014d7c <memset>

  for(q = p; q != NULL; q = q->next)
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	643b      	str	r3, [r7, #64]	; 0x40
 8009da6:	e049      	b.n	8009e3c <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 8009da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009daa:	2b03      	cmp	r3, #3
 8009dac:	d902      	bls.n	8009db4 <low_level_output+0x34>
      return ERR_IF;
 8009dae:	f06f 030b 	mvn.w	r3, #11
 8009db2:	e056      	b.n	8009e62 <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 8009db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009db6:	6859      	ldr	r1, [r3, #4]
 8009db8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009dba:	4613      	mov	r3, r2
 8009dbc:	005b      	lsls	r3, r3, #1
 8009dbe:	4413      	add	r3, r2
 8009dc0:	009b      	lsls	r3, r3, #2
 8009dc2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009dc6:	4413      	add	r3, r2
 8009dc8:	3b3c      	subs	r3, #60	; 0x3c
 8009dca:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8009dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dce:	895b      	ldrh	r3, [r3, #10]
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009dd4:	4613      	mov	r3, r2
 8009dd6:	005b      	lsls	r3, r3, #1
 8009dd8:	4413      	add	r3, r2
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009de0:	4413      	add	r3, r2
 8009de2:	3b38      	subs	r3, #56	; 0x38
 8009de4:	6019      	str	r1, [r3, #0]

    if(i>0)
 8009de6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d012      	beq.n	8009e12 <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8009dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009dee:	1e5a      	subs	r2, r3, #1
 8009df0:	f107 000c 	add.w	r0, r7, #12
 8009df4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009df6:	460b      	mov	r3, r1
 8009df8:	005b      	lsls	r3, r3, #1
 8009dfa:	440b      	add	r3, r1
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	18c1      	adds	r1, r0, r3
 8009e00:	4613      	mov	r3, r2
 8009e02:	005b      	lsls	r3, r3, #1
 8009e04:	4413      	add	r3, r2
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009e0c:	4413      	add	r3, r2
 8009e0e:	3b34      	subs	r3, #52	; 0x34
 8009e10:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8009e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d10a      	bne.n	8009e30 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 8009e1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e1c:	4613      	mov	r3, r2
 8009e1e:	005b      	lsls	r3, r3, #1
 8009e20:	4413      	add	r3, r2
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009e28:	4413      	add	r3, r2
 8009e2a:	3b34      	subs	r3, #52	; 0x34
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	601a      	str	r2, [r3, #0]
    }

    i++;
 8009e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e32:	3301      	adds	r3, #1
 8009e34:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8009e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	643b      	str	r3, [r7, #64]	; 0x40
 8009e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d1b2      	bne.n	8009da8 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	891b      	ldrh	r3, [r3, #8]
 8009e46:	461a      	mov	r2, r3
 8009e48:	4b08      	ldr	r3, [pc, #32]	; (8009e6c <low_level_output+0xec>)
 8009e4a:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8009e4c:	4a07      	ldr	r2, [pc, #28]	; (8009e6c <low_level_output+0xec>)
 8009e4e:	f107 030c 	add.w	r3, r7, #12
 8009e52:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8009e54:	2214      	movs	r2, #20
 8009e56:	4905      	ldr	r1, [pc, #20]	; (8009e6c <low_level_output+0xec>)
 8009e58:	4805      	ldr	r0, [pc, #20]	; (8009e70 <low_level_output+0xf0>)
 8009e5a:	f7f8 ff62 	bl	8002d22 <HAL_ETH_Transmit>

  return errval;
 8009e5e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3748      	adds	r7, #72	; 0x48
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	240006e0 	.word	0x240006e0
 8009e70:	24000658 	.word	0x24000658

08009e74 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b098      	sub	sp, #96	; 0x60
 8009e78:	af02      	add	r7, sp, #8
 8009e7a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	653b      	str	r3, [r7, #80]	; 0x50
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 8009e80:	2300      	movs	r3, #0
 8009e82:	60bb      	str	r3, [r7, #8]
 8009e84:	2300      	movs	r3, #0
 8009e86:	657b      	str	r3, [r7, #84]	; 0x54
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8009e88:	f107 030c 	add.w	r3, r7, #12
 8009e8c:	2230      	movs	r2, #48	; 0x30
 8009e8e:	2100      	movs	r1, #0
 8009e90:	4618      	mov	r0, r3
 8009e92:	f00a ff73 	bl	8014d7c <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8009e96:	2300      	movs	r3, #0
 8009e98:	657b      	str	r3, [r7, #84]	; 0x54
 8009e9a:	e015      	b.n	8009ec8 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 8009e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e9e:	1c5a      	adds	r2, r3, #1
 8009ea0:	f107 010c 	add.w	r1, r7, #12
 8009ea4:	4613      	mov	r3, r2
 8009ea6:	005b      	lsls	r3, r3, #1
 8009ea8:	4413      	add	r3, r2
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	4419      	add	r1, r3
 8009eae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009eb0:	4613      	mov	r3, r2
 8009eb2:	005b      	lsls	r3, r3, #1
 8009eb4:	4413      	add	r3, r2
 8009eb6:	009b      	lsls	r3, r3, #2
 8009eb8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009ebc:	4413      	add	r3, r2
 8009ebe:	3b44      	subs	r3, #68	; 0x44
 8009ec0:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8009ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	657b      	str	r3, [r7, #84]	; 0x54
 8009ec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009eca:	2b02      	cmp	r3, #2
 8009ecc:	d9e6      	bls.n	8009e9c <low_level_input+0x28>
  }

  if (HAL_ETH_IsRxDataAvailable(&heth))
 8009ece:	482b      	ldr	r0, [pc, #172]	; (8009f7c <low_level_input+0x108>)
 8009ed0:	f7f8 ffb0 	bl	8002e34 <HAL_ETH_IsRxDataAvailable>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d04a      	beq.n	8009f70 <low_level_input+0xfc>
  {
    HAL_ETH_GetRxDataBuffer(&heth, RxBuff);
 8009eda:	f107 030c 	add.w	r3, r7, #12
 8009ede:	4619      	mov	r1, r3
 8009ee0:	4826      	ldr	r0, [pc, #152]	; (8009f7c <low_level_input+0x108>)
 8009ee2:	f7f9 f897 	bl	8003014 <HAL_ETH_GetRxDataBuffer>
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 8009ee6:	f107 0308 	add.w	r3, r7, #8
 8009eea:	4619      	mov	r1, r3
 8009eec:	4823      	ldr	r0, [pc, #140]	; (8009f7c <low_level_input+0x108>)
 8009eee:	f7f9 f92f 	bl	8003150 <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 8009ef2:	4822      	ldr	r0, [pc, #136]	; (8009f7c <low_level_input+0x108>)
 8009ef4:	f7f9 f95f 	bl	80031b6 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	68ba      	ldr	r2, [r7, #8]
 8009efc:	64bb      	str	r3, [r7, #72]	; 0x48
 8009efe:	647a      	str	r2, [r7, #68]	; 0x44
    if ( dsize > 0 ) { 
 8009f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	dd1d      	ble.n	8009f42 <low_level_input+0xce>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8009f06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f08:	f003 021f 	and.w	r2, r3, #31
 8009f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f0e:	4413      	add	r3, r2
 8009f10:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8009f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f14:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 8009f16:	f3bf 8f4f 	dsb	sy
}
 8009f1a:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8009f1c:	4a18      	ldr	r2, [pc, #96]	; (8009f80 <low_level_input+0x10c>)
 8009f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f20:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8009f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f26:	3320      	adds	r3, #32
 8009f28:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8009f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f2c:	3b20      	subs	r3, #32
 8009f2e:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 8009f30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	dcf2      	bgt.n	8009f1c <low_level_input+0xa8>
  __ASM volatile ("dsb 0xF":::"memory");
 8009f36:	f3bf 8f4f 	dsb	sy
}
 8009f3a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009f3c:	f3bf 8f6f 	isb	sy
}
 8009f40:	bf00      	nop
}
 8009f42:	bf00      	nop
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 8009f44:	480f      	ldr	r0, [pc, #60]	; (8009f84 <low_level_input+0x110>)
 8009f46:	f000 fe67 	bl	800ac18 <memp_malloc_pool>
 8009f4a:	64f8      	str	r0, [r7, #76]	; 0x4c
    custom_pbuf->custom_free_function = pbuf_free_custom;
 8009f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f4e:	4a0e      	ldr	r2, [pc, #56]	; (8009f88 <low_level_input+0x114>)
 8009f50:	611a      	str	r2, [r3, #16]

    p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	b299      	uxth	r1, r3
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	68ba      	ldr	r2, [r7, #8]
 8009f5a:	b292      	uxth	r2, r2
 8009f5c:	9201      	str	r2, [sp, #4]
 8009f5e:	9300      	str	r3, [sp, #0]
 8009f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f62:	2241      	movs	r2, #65	; 0x41
 8009f64:	2000      	movs	r0, #0
 8009f66:	f001 fba5 	bl	800b6b4 <pbuf_alloced_custom>
 8009f6a:	6538      	str	r0, [r7, #80]	; 0x50

    return p;
 8009f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f6e:	e000      	b.n	8009f72 <low_level_input+0xfe>
  }
  else
  {
    return NULL;
 8009f70:	2300      	movs	r3, #0
  }
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3758      	adds	r7, #88	; 0x58
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	24000658 	.word	0x24000658
 8009f80:	e000ed00 	.word	0xe000ed00
 8009f84:	080196fc 	.word	0x080196fc
 8009f88:	0800a029 	.word	0x0800a029

08009f8c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f7ff ff6d 	bl	8009e74 <low_level_input>
 8009f9a:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d010      	beq.n	8009fc4 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	691b      	ldr	r3, [r3, #16]
 8009fa6:	6879      	ldr	r1, [r7, #4]
 8009fa8:	68f8      	ldr	r0, [r7, #12]
 8009faa:	4798      	blx	r3
 8009fac:	4603      	mov	r3, r0
 8009fae:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8009fb0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d006      	beq.n	8009fc6 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8009fb8:	68f8      	ldr	r0, [r7, #12]
 8009fba:	f001 fd35 	bl	800ba28 <pbuf_free>
    p = NULL;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	60fb      	str	r3, [r7, #12]
 8009fc2:	e000      	b.n	8009fc6 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8009fc4:	bf00      	nop
  }

}
 8009fc6:	3710      	adds	r7, #16
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d106      	bne.n	8009fe8 <ethernetif_init+0x1c>
 8009fda:	4b0e      	ldr	r3, [pc, #56]	; (800a014 <ethernetif_init+0x48>)
 8009fdc:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8009fe0:	490d      	ldr	r1, [pc, #52]	; (800a018 <ethernetif_init+0x4c>)
 8009fe2:	480e      	ldr	r0, [pc, #56]	; (800a01c <ethernetif_init+0x50>)
 8009fe4:	f00a fed2 	bl	8014d8c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2273      	movs	r2, #115	; 0x73
 8009fec:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2274      	movs	r2, #116	; 0x74
 8009ff4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	4a09      	ldr	r2, [pc, #36]	; (800a020 <ethernetif_init+0x54>)
 8009ffc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	4a08      	ldr	r2, [pc, #32]	; (800a024 <ethernetif_init+0x58>)
 800a002:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f7ff fe0b 	bl	8009c20 <low_level_init>

  return ERR_OK;
 800a00a:	2300      	movs	r3, #0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3708      	adds	r7, #8
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}
 800a014:	08015f04 	.word	0x08015f04
 800a018:	08015f20 	.word	0x08015f20
 800a01c:	08015f30 	.word	0x08015f30
 800a020:	08012ea5 	.word	0x08012ea5
 800a024:	08009d81 	.word	0x08009d81

0800a028 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b084      	sub	sp, #16
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800a034:	68f9      	ldr	r1, [r7, #12]
 800a036:	4803      	ldr	r0, [pc, #12]	; (800a044 <pbuf_free_custom+0x1c>)
 800a038:	f000 fe5c 	bl	800acf4 <memp_free_pool>
}
 800a03c:	bf00      	nop
 800a03e:	3710      	adds	r7, #16
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}
 800a044:	080196fc 	.word	0x080196fc

0800a048 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a04c:	f7f8 fad2 	bl	80025f4 <HAL_GetTick>
 800a050:	4603      	mov	r3, r0
}
 800a052:	4618      	mov	r0, r3
 800a054:	bd80      	pop	{r7, pc}
	...

0800a058 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800a05c:	4802      	ldr	r0, [pc, #8]	; (800a068 <ETH_PHY_IO_Init+0x10>)
 800a05e:	f7f9 fbb7 	bl	80037d0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800a062:	2300      	movs	r3, #0
}
 800a064:	4618      	mov	r0, r3
 800a066:	bd80      	pop	{r7, pc}
 800a068:	24000658 	.word	0x24000658

0800a06c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800a06c:	b480      	push	{r7}
 800a06e:	af00      	add	r7, sp, #0
  return 0;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr

0800a07c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	68ba      	ldr	r2, [r7, #8]
 800a08c:	68f9      	ldr	r1, [r7, #12]
 800a08e:	4807      	ldr	r0, [pc, #28]	; (800a0ac <ETH_PHY_IO_ReadReg+0x30>)
 800a090:	f7f9 f907 	bl	80032a2 <HAL_ETH_ReadPHYRegister>
 800a094:	4603      	mov	r3, r0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d002      	beq.n	800a0a0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800a09a:	f04f 33ff 	mov.w	r3, #4294967295
 800a09e:	e000      	b.n	800a0a2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800a0a0:	2300      	movs	r3, #0
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	24000658 	.word	0x24000658

0800a0b0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	68ba      	ldr	r2, [r7, #8]
 800a0c0:	68f9      	ldr	r1, [r7, #12]
 800a0c2:	4807      	ldr	r0, [pc, #28]	; (800a0e0 <ETH_PHY_IO_WriteReg+0x30>)
 800a0c4:	f7f9 f942 	bl	800334c <HAL_ETH_WritePHYRegister>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d002      	beq.n	800a0d4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800a0ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a0d2:	e000      	b.n	800a0d6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800a0d4:	2300      	movs	r3, #0
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3710      	adds	r7, #16
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop
 800a0e0:	24000658 	.word	0x24000658

0800a0e4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a0e8:	f7f8 fa84 	bl	80025f4 <HAL_GetTick>
 800a0ec:	4603      	mov	r3, r0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	bd80      	pop	{r7, pc}
	...

0800a0f4 <ethernet_link_check_state>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b0a0      	sub	sp, #128	; 0x80
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a100:	2300      	movs	r3, #0
 800a102:	67bb      	str	r3, [r7, #120]	; 0x78
 800a104:	2300      	movs	r3, #0
 800a106:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a108:	483a      	ldr	r0, [pc, #232]	; (800a1f4 <ethernet_link_check_state+0x100>)
 800a10a:	f7f8 f966 	bl	80023da <LAN8742_GetLinkState>
 800a10e:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a116:	089b      	lsrs	r3, r3, #2
 800a118:	f003 0301 	and.w	r3, r3, #1
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d00c      	beq.n	800a13c <ethernet_link_check_state+0x48>
 800a122:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a124:	2b01      	cmp	r3, #1
 800a126:	dc09      	bgt.n	800a13c <ethernet_link_check_state+0x48>
  {
    HAL_ETH_Stop(&heth);
 800a128:	4833      	ldr	r0, [pc, #204]	; (800a1f8 <ethernet_link_check_state+0x104>)
 800a12a:	f7f8 fdaa 	bl	8002c82 <HAL_ETH_Stop>
    netif_set_down(netif);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f001 f864 	bl	800b1fc <netif_set_down>
    netif_set_link_down(netif);
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f001 f8c7 	bl	800b2c8 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800a13a:	e056      	b.n	800a1ea <ethernet_link_check_state+0xf6>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a142:	f003 0304 	and.w	r3, r3, #4
 800a146:	2b00      	cmp	r3, #0
 800a148:	d14f      	bne.n	800a1ea <ethernet_link_check_state+0xf6>
 800a14a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	dd4c      	ble.n	800a1ea <ethernet_link_check_state+0xf6>
 800a150:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a152:	3b02      	subs	r3, #2
 800a154:	2b03      	cmp	r3, #3
 800a156:	d82b      	bhi.n	800a1b0 <ethernet_link_check_state+0xbc>
 800a158:	a201      	add	r2, pc, #4	; (adr r2, 800a160 <ethernet_link_check_state+0x6c>)
 800a15a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a15e:	bf00      	nop
 800a160:	0800a171 	.word	0x0800a171
 800a164:	0800a183 	.word	0x0800a183
 800a168:	0800a193 	.word	0x0800a193
 800a16c:	0800a1a3 	.word	0x0800a1a3
      duplex = ETH_FULLDUPLEX_MODE;
 800a170:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a174:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a176:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a17a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a17c:	2301      	movs	r3, #1
 800a17e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a180:	e017      	b.n	800a1b2 <ethernet_link_check_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 800a182:	2300      	movs	r3, #0
 800a184:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a186:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a18a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a18c:	2301      	movs	r3, #1
 800a18e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a190:	e00f      	b.n	800a1b2 <ethernet_link_check_state+0xbe>
      duplex = ETH_FULLDUPLEX_MODE;
 800a192:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a196:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800a198:	2300      	movs	r3, #0
 800a19a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a19c:	2301      	movs	r3, #1
 800a19e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a1a0:	e007      	b.n	800a1b2 <ethernet_link_check_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a1ae:	e000      	b.n	800a1b2 <ethernet_link_check_state+0xbe>
      break;
 800a1b0:	bf00      	nop
    if(linkchanged)
 800a1b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d018      	beq.n	800a1ea <ethernet_link_check_state+0xf6>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a1b8:	f107 030c 	add.w	r3, r7, #12
 800a1bc:	4619      	mov	r1, r3
 800a1be:	480e      	ldr	r0, [pc, #56]	; (800a1f8 <ethernet_link_check_state+0x104>)
 800a1c0:	f7f9 f918 	bl	80033f4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800a1c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a1c6:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800a1c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a1ca:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a1cc:	f107 030c 	add.w	r3, r7, #12
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	4809      	ldr	r0, [pc, #36]	; (800a1f8 <ethernet_link_check_state+0x104>)
 800a1d4:	f7f9 fae2 	bl	800379c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800a1d8:	4807      	ldr	r0, [pc, #28]	; (800a1f8 <ethernet_link_check_state+0x104>)
 800a1da:	f7f8 fcf6 	bl	8002bca <HAL_ETH_Start>
      netif_set_up(netif);
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 ffa0 	bl	800b124 <netif_set_up>
      netif_set_link_up(netif);
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f001 f83b 	bl	800b260 <netif_set_link_up>
}
 800a1ea:	bf00      	nop
 800a1ec:	3780      	adds	r7, #128	; 0x80
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	24000638 	.word	0x24000638
 800a1f8:	24000658 	.word	0x24000658

0800a1fc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b083      	sub	sp, #12
 800a200:	af00      	add	r7, sp, #0
 800a202:	4603      	mov	r3, r0
 800a204:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a206:	88fb      	ldrh	r3, [r7, #6]
 800a208:	021b      	lsls	r3, r3, #8
 800a20a:	b21a      	sxth	r2, r3
 800a20c:	88fb      	ldrh	r3, [r7, #6]
 800a20e:	0a1b      	lsrs	r3, r3, #8
 800a210:	b29b      	uxth	r3, r3
 800a212:	b21b      	sxth	r3, r3
 800a214:	4313      	orrs	r3, r2
 800a216:	b21b      	sxth	r3, r3
 800a218:	b29b      	uxth	r3, r3
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	370c      	adds	r7, #12
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr

0800a226 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a226:	b480      	push	{r7}
 800a228:	b083      	sub	sp, #12
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	061a      	lsls	r2, r3, #24
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	021b      	lsls	r3, r3, #8
 800a236:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a23a:	431a      	orrs	r2, r3
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	0a1b      	lsrs	r3, r3, #8
 800a240:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a244:	431a      	orrs	r2, r3
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	0e1b      	lsrs	r3, r3, #24
 800a24a:	4313      	orrs	r3, r2
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800a258:	b480      	push	{r7}
 800a25a:	b089      	sub	sp, #36	; 0x24
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800a266:	2300      	movs	r3, #0
 800a268:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800a26a:	2300      	movs	r3, #0
 800a26c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800a26e:	69fb      	ldr	r3, [r7, #28]
 800a270:	f003 0301 	and.w	r3, r3, #1
 800a274:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d00d      	beq.n	800a298 <lwip_standard_chksum+0x40>
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	dd0a      	ble.n	800a298 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800a282:	69fa      	ldr	r2, [r7, #28]
 800a284:	1c53      	adds	r3, r2, #1
 800a286:	61fb      	str	r3, [r7, #28]
 800a288:	f107 030e 	add.w	r3, r7, #14
 800a28c:	3301      	adds	r3, #1
 800a28e:	7812      	ldrb	r2, [r2, #0]
 800a290:	701a      	strb	r2, [r3, #0]
    len--;
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	3b01      	subs	r3, #1
 800a296:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800a298:	69fb      	ldr	r3, [r7, #28]
 800a29a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800a29c:	e00a      	b.n	800a2b4 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	1c9a      	adds	r2, r3, #2
 800a2a2:	61ba      	str	r2, [r7, #24]
 800a2a4:	881b      	ldrh	r3, [r3, #0]
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	4413      	add	r3, r2
 800a2ac:	617b      	str	r3, [r7, #20]
    len -= 2;
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	3b02      	subs	r3, #2
 800a2b2:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	dcf1      	bgt.n	800a29e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	dd04      	ble.n	800a2ca <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800a2c0:	f107 030e 	add.w	r3, r7, #14
 800a2c4:	69ba      	ldr	r2, [r7, #24]
 800a2c6:	7812      	ldrb	r2, [r2, #0]
 800a2c8:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800a2ca:	89fb      	ldrh	r3, [r7, #14]
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	0c1a      	lsrs	r2, r3, #16
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	4413      	add	r3, r2
 800a2de:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	0c1a      	lsrs	r2, r3, #16
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	4413      	add	r3, r2
 800a2ea:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d007      	beq.n	800a302 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	021b      	lsls	r3, r3, #8
 800a2f6:	b29a      	uxth	r2, r3
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	0a1b      	lsrs	r3, r3, #8
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	4313      	orrs	r3, r2
 800a300:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	b29b      	uxth	r3, r3
}
 800a306:	4618      	mov	r0, r3
 800a308:	3724      	adds	r7, #36	; 0x24
 800a30a:	46bd      	mov	sp, r7
 800a30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a310:	4770      	bx	lr

0800a312 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800a312:	b580      	push	{r7, lr}
 800a314:	b082      	sub	sp, #8
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
 800a31a:	460b      	mov	r3, r1
 800a31c:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800a31e:	887b      	ldrh	r3, [r7, #2]
 800a320:	4619      	mov	r1, r3
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f7ff ff98 	bl	800a258 <lwip_standard_chksum>
 800a328:	4603      	mov	r3, r0
 800a32a:	43db      	mvns	r3, r3
 800a32c:	b29b      	uxth	r3, r3
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3708      	adds	r7, #8
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}

0800a336 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800a336:	b580      	push	{r7, lr}
 800a338:	b086      	sub	sp, #24
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800a33e:	2300      	movs	r3, #0
 800a340:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800a342:	2300      	movs	r3, #0
 800a344:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	613b      	str	r3, [r7, #16]
 800a34a:	e02b      	b.n	800a3a4 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	685a      	ldr	r2, [r3, #4]
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	895b      	ldrh	r3, [r3, #10]
 800a354:	4619      	mov	r1, r3
 800a356:	4610      	mov	r0, r2
 800a358:	f7ff ff7e 	bl	800a258 <lwip_standard_chksum>
 800a35c:	4603      	mov	r3, r0
 800a35e:	461a      	mov	r2, r3
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	4413      	add	r3, r2
 800a364:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	0c1a      	lsrs	r2, r3, #16
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	b29b      	uxth	r3, r3
 800a36e:	4413      	add	r3, r2
 800a370:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	895b      	ldrh	r3, [r3, #10]
 800a376:	f003 0301 	and.w	r3, r3, #1
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d00e      	beq.n	800a39e <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2b00      	cmp	r3, #0
 800a384:	bf0c      	ite	eq
 800a386:	2301      	moveq	r3, #1
 800a388:	2300      	movne	r3, #0
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	021b      	lsls	r3, r3, #8
 800a392:	b29a      	uxth	r2, r3
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	0a1b      	lsrs	r3, r3, #8
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	4313      	orrs	r3, r2
 800a39c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	613b      	str	r3, [r7, #16]
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d1d0      	bne.n	800a34c <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d007      	beq.n	800a3c0 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	021b      	lsls	r3, r3, #8
 800a3b4:	b29a      	uxth	r2, r3
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	0a1b      	lsrs	r3, r3, #8
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	b29b      	uxth	r3, r3
 800a3c4:	43db      	mvns	r3, r3
 800a3c6:	b29b      	uxth	r3, r3
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3718      	adds	r7, #24
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b082      	sub	sp, #8
 800a3d4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800a3da:	f000 f8d5 	bl	800a588 <mem_init>
  memp_init();
 800a3de:	f000 fbd7 	bl	800ab90 <memp_init>
  pbuf_init();
  netif_init();
 800a3e2:	f000 fcd5 	bl	800ad90 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a3e6:	f007 ff57 	bl	8012298 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a3ea:	f001 fdbb 	bl	800bf64 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a3ee:	f007 fec9 	bl	8012184 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a3f2:	bf00      	nop
 800a3f4:	3708      	adds	r7, #8
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
	...

0800a3fc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b083      	sub	sp, #12
 800a400:	af00      	add	r7, sp, #0
 800a402:	4603      	mov	r3, r0
 800a404:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a406:	4b05      	ldr	r3, [pc, #20]	; (800a41c <ptr_to_mem+0x20>)
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	88fb      	ldrh	r3, [r7, #6]
 800a40c:	4413      	add	r3, r2
}
 800a40e:	4618      	mov	r0, r3
 800a410:	370c      	adds	r7, #12
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop
 800a41c:	240000c0 	.word	0x240000c0

0800a420 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a420:	b480      	push	{r7}
 800a422:	b083      	sub	sp, #12
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a428:	4b05      	ldr	r3, [pc, #20]	; (800a440 <mem_to_ptr+0x20>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	1ad3      	subs	r3, r2, r3
 800a430:	b29b      	uxth	r3, r3
}
 800a432:	4618      	mov	r0, r3
 800a434:	370c      	adds	r7, #12
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr
 800a43e:	bf00      	nop
 800a440:	240000c0 	.word	0x240000c0

0800a444 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a444:	b590      	push	{r4, r7, lr}
 800a446:	b085      	sub	sp, #20
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a44c:	4b45      	ldr	r3, [pc, #276]	; (800a564 <plug_holes+0x120>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	429a      	cmp	r2, r3
 800a454:	d206      	bcs.n	800a464 <plug_holes+0x20>
 800a456:	4b44      	ldr	r3, [pc, #272]	; (800a568 <plug_holes+0x124>)
 800a458:	f240 12df 	movw	r2, #479	; 0x1df
 800a45c:	4943      	ldr	r1, [pc, #268]	; (800a56c <plug_holes+0x128>)
 800a45e:	4844      	ldr	r0, [pc, #272]	; (800a570 <plug_holes+0x12c>)
 800a460:	f00a fc94 	bl	8014d8c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a464:	4b43      	ldr	r3, [pc, #268]	; (800a574 <plug_holes+0x130>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d306      	bcc.n	800a47c <plug_holes+0x38>
 800a46e:	4b3e      	ldr	r3, [pc, #248]	; (800a568 <plug_holes+0x124>)
 800a470:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a474:	4940      	ldr	r1, [pc, #256]	; (800a578 <plug_holes+0x134>)
 800a476:	483e      	ldr	r0, [pc, #248]	; (800a570 <plug_holes+0x12c>)
 800a478:	f00a fc88 	bl	8014d8c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	791b      	ldrb	r3, [r3, #4]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d006      	beq.n	800a492 <plug_holes+0x4e>
 800a484:	4b38      	ldr	r3, [pc, #224]	; (800a568 <plug_holes+0x124>)
 800a486:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a48a:	493c      	ldr	r1, [pc, #240]	; (800a57c <plug_holes+0x138>)
 800a48c:	4838      	ldr	r0, [pc, #224]	; (800a570 <plug_holes+0x12c>)
 800a48e:	f00a fc7d 	bl	8014d8c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	881b      	ldrh	r3, [r3, #0]
 800a496:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a49a:	d906      	bls.n	800a4aa <plug_holes+0x66>
 800a49c:	4b32      	ldr	r3, [pc, #200]	; (800a568 <plug_holes+0x124>)
 800a49e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a4a2:	4937      	ldr	r1, [pc, #220]	; (800a580 <plug_holes+0x13c>)
 800a4a4:	4832      	ldr	r0, [pc, #200]	; (800a570 <plug_holes+0x12c>)
 800a4a6:	f00a fc71 	bl	8014d8c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	881b      	ldrh	r3, [r3, #0]
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7ff ffa4 	bl	800a3fc <ptr_to_mem>
 800a4b4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d024      	beq.n	800a508 <plug_holes+0xc4>
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	791b      	ldrb	r3, [r3, #4]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d120      	bne.n	800a508 <plug_holes+0xc4>
 800a4c6:	4b2b      	ldr	r3, [pc, #172]	; (800a574 <plug_holes+0x130>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	68fa      	ldr	r2, [r7, #12]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d01b      	beq.n	800a508 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a4d0:	4b2c      	ldr	r3, [pc, #176]	; (800a584 <plug_holes+0x140>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	68fa      	ldr	r2, [r7, #12]
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d102      	bne.n	800a4e0 <plug_holes+0x9c>
      lfree = mem;
 800a4da:	4a2a      	ldr	r2, [pc, #168]	; (800a584 <plug_holes+0x140>)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	881a      	ldrh	r2, [r3, #0]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	881b      	ldrh	r3, [r3, #0]
 800a4ec:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a4f0:	d00a      	beq.n	800a508 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	881b      	ldrh	r3, [r3, #0]
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7ff ff80 	bl	800a3fc <ptr_to_mem>
 800a4fc:	4604      	mov	r4, r0
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f7ff ff8e 	bl	800a420 <mem_to_ptr>
 800a504:	4603      	mov	r3, r0
 800a506:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	885b      	ldrh	r3, [r3, #2]
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7ff ff75 	bl	800a3fc <ptr_to_mem>
 800a512:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a514:	68ba      	ldr	r2, [r7, #8]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	429a      	cmp	r2, r3
 800a51a:	d01f      	beq.n	800a55c <plug_holes+0x118>
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	791b      	ldrb	r3, [r3, #4]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d11b      	bne.n	800a55c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a524:	4b17      	ldr	r3, [pc, #92]	; (800a584 <plug_holes+0x140>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	687a      	ldr	r2, [r7, #4]
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d102      	bne.n	800a534 <plug_holes+0xf0>
      lfree = pmem;
 800a52e:	4a15      	ldr	r2, [pc, #84]	; (800a584 <plug_holes+0x140>)
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	881a      	ldrh	r2, [r3, #0]
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	881b      	ldrh	r3, [r3, #0]
 800a540:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a544:	d00a      	beq.n	800a55c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	881b      	ldrh	r3, [r3, #0]
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7ff ff56 	bl	800a3fc <ptr_to_mem>
 800a550:	4604      	mov	r4, r0
 800a552:	68b8      	ldr	r0, [r7, #8]
 800a554:	f7ff ff64 	bl	800a420 <mem_to_ptr>
 800a558:	4603      	mov	r3, r0
 800a55a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a55c:	bf00      	nop
 800a55e:	3714      	adds	r7, #20
 800a560:	46bd      	mov	sp, r7
 800a562:	bd90      	pop	{r4, r7, pc}
 800a564:	240000c0 	.word	0x240000c0
 800a568:	08015f58 	.word	0x08015f58
 800a56c:	08015f88 	.word	0x08015f88
 800a570:	08015fa0 	.word	0x08015fa0
 800a574:	240000c4 	.word	0x240000c4
 800a578:	08015fc8 	.word	0x08015fc8
 800a57c:	08015fe4 	.word	0x08015fe4
 800a580:	08016000 	.word	0x08016000
 800a584:	240000c8 	.word	0x240000c8

0800a588 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b082      	sub	sp, #8
 800a58c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a58e:	4b16      	ldr	r3, [pc, #88]	; (800a5e8 <mem_init+0x60>)
 800a590:	4a16      	ldr	r2, [pc, #88]	; (800a5ec <mem_init+0x64>)
 800a592:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a594:	4b14      	ldr	r3, [pc, #80]	; (800a5e8 <mem_init+0x60>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a5a0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a5ae:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800a5b2:	f7ff ff23 	bl	800a3fc <ptr_to_mem>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	4a0d      	ldr	r2, [pc, #52]	; (800a5f0 <mem_init+0x68>)
 800a5ba:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a5bc:	4b0c      	ldr	r3, [pc, #48]	; (800a5f0 <mem_init+0x68>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a5c4:	4b0a      	ldr	r3, [pc, #40]	; (800a5f0 <mem_init+0x68>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a5cc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a5ce:	4b08      	ldr	r3, [pc, #32]	; (800a5f0 <mem_init+0x68>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a5d6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a5d8:	4b03      	ldr	r3, [pc, #12]	; (800a5e8 <mem_init+0x60>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a05      	ldr	r2, [pc, #20]	; (800a5f4 <mem_init+0x6c>)
 800a5de:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800a5e0:	bf00      	nop
 800a5e2:	3708      	adds	r7, #8
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}
 800a5e8:	240000c0 	.word	0x240000c0
 800a5ec:	30002000 	.word	0x30002000
 800a5f0:	240000c4 	.word	0x240000c4
 800a5f4:	240000c8 	.word	0x240000c8

0800a5f8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b086      	sub	sp, #24
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f7ff ff0d 	bl	800a420 <mem_to_ptr>
 800a606:	4603      	mov	r3, r0
 800a608:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	881b      	ldrh	r3, [r3, #0]
 800a60e:	4618      	mov	r0, r3
 800a610:	f7ff fef4 	bl	800a3fc <ptr_to_mem>
 800a614:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	885b      	ldrh	r3, [r3, #2]
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7ff feee 	bl	800a3fc <ptr_to_mem>
 800a620:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	881b      	ldrh	r3, [r3, #0]
 800a626:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a62a:	d818      	bhi.n	800a65e <mem_link_valid+0x66>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	885b      	ldrh	r3, [r3, #2]
 800a630:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a634:	d813      	bhi.n	800a65e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a63a:	8afa      	ldrh	r2, [r7, #22]
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d004      	beq.n	800a64a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	881b      	ldrh	r3, [r3, #0]
 800a644:	8afa      	ldrh	r2, [r7, #22]
 800a646:	429a      	cmp	r2, r3
 800a648:	d109      	bne.n	800a65e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a64a:	4b08      	ldr	r3, [pc, #32]	; (800a66c <mem_link_valid+0x74>)
 800a64c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a64e:	693a      	ldr	r2, [r7, #16]
 800a650:	429a      	cmp	r2, r3
 800a652:	d006      	beq.n	800a662 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	885b      	ldrh	r3, [r3, #2]
 800a658:	8afa      	ldrh	r2, [r7, #22]
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d001      	beq.n	800a662 <mem_link_valid+0x6a>
    return 0;
 800a65e:	2300      	movs	r3, #0
 800a660:	e000      	b.n	800a664 <mem_link_valid+0x6c>
  }
  return 1;
 800a662:	2301      	movs	r3, #1
}
 800a664:	4618      	mov	r0, r3
 800a666:	3718      	adds	r7, #24
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}
 800a66c:	240000c4 	.word	0x240000c4

0800a670 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b084      	sub	sp, #16
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d04c      	beq.n	800a718 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f003 0303 	and.w	r3, r3, #3
 800a684:	2b00      	cmp	r3, #0
 800a686:	d007      	beq.n	800a698 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a688:	4b25      	ldr	r3, [pc, #148]	; (800a720 <mem_free+0xb0>)
 800a68a:	f240 2273 	movw	r2, #627	; 0x273
 800a68e:	4925      	ldr	r1, [pc, #148]	; (800a724 <mem_free+0xb4>)
 800a690:	4825      	ldr	r0, [pc, #148]	; (800a728 <mem_free+0xb8>)
 800a692:	f00a fb7b 	bl	8014d8c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a696:	e040      	b.n	800a71a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	3b08      	subs	r3, #8
 800a69c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a69e:	4b23      	ldr	r3, [pc, #140]	; (800a72c <mem_free+0xbc>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	68fa      	ldr	r2, [r7, #12]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d306      	bcc.n	800a6b6 <mem_free+0x46>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f103 020c 	add.w	r2, r3, #12
 800a6ae:	4b20      	ldr	r3, [pc, #128]	; (800a730 <mem_free+0xc0>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d907      	bls.n	800a6c6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a6b6:	4b1a      	ldr	r3, [pc, #104]	; (800a720 <mem_free+0xb0>)
 800a6b8:	f240 227f 	movw	r2, #639	; 0x27f
 800a6bc:	491d      	ldr	r1, [pc, #116]	; (800a734 <mem_free+0xc4>)
 800a6be:	481a      	ldr	r0, [pc, #104]	; (800a728 <mem_free+0xb8>)
 800a6c0:	f00a fb64 	bl	8014d8c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a6c4:	e029      	b.n	800a71a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	791b      	ldrb	r3, [r3, #4]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d107      	bne.n	800a6de <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a6ce:	4b14      	ldr	r3, [pc, #80]	; (800a720 <mem_free+0xb0>)
 800a6d0:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a6d4:	4918      	ldr	r1, [pc, #96]	; (800a738 <mem_free+0xc8>)
 800a6d6:	4814      	ldr	r0, [pc, #80]	; (800a728 <mem_free+0xb8>)
 800a6d8:	f00a fb58 	bl	8014d8c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a6dc:	e01d      	b.n	800a71a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800a6de:	68f8      	ldr	r0, [r7, #12]
 800a6e0:	f7ff ff8a 	bl	800a5f8 <mem_link_valid>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d107      	bne.n	800a6fa <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a6ea:	4b0d      	ldr	r3, [pc, #52]	; (800a720 <mem_free+0xb0>)
 800a6ec:	f240 2295 	movw	r2, #661	; 0x295
 800a6f0:	4912      	ldr	r1, [pc, #72]	; (800a73c <mem_free+0xcc>)
 800a6f2:	480d      	ldr	r0, [pc, #52]	; (800a728 <mem_free+0xb8>)
 800a6f4:	f00a fb4a 	bl	8014d8c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a6f8:	e00f      	b.n	800a71a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a700:	4b0f      	ldr	r3, [pc, #60]	; (800a740 <mem_free+0xd0>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	68fa      	ldr	r2, [r7, #12]
 800a706:	429a      	cmp	r2, r3
 800a708:	d202      	bcs.n	800a710 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a70a:	4a0d      	ldr	r2, [pc, #52]	; (800a740 <mem_free+0xd0>)
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a710:	68f8      	ldr	r0, [r7, #12]
 800a712:	f7ff fe97 	bl	800a444 <plug_holes>
 800a716:	e000      	b.n	800a71a <mem_free+0xaa>
    return;
 800a718:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800a71a:	3710      	adds	r7, #16
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}
 800a720:	08015f58 	.word	0x08015f58
 800a724:	0801602c 	.word	0x0801602c
 800a728:	08015fa0 	.word	0x08015fa0
 800a72c:	240000c0 	.word	0x240000c0
 800a730:	240000c4 	.word	0x240000c4
 800a734:	08016050 	.word	0x08016050
 800a738:	0801606c 	.word	0x0801606c
 800a73c:	08016094 	.word	0x08016094
 800a740:	240000c8 	.word	0x240000c8

0800a744 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b088      	sub	sp, #32
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	460b      	mov	r3, r1
 800a74e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a750:	887b      	ldrh	r3, [r7, #2]
 800a752:	3303      	adds	r3, #3
 800a754:	b29b      	uxth	r3, r3
 800a756:	f023 0303 	bic.w	r3, r3, #3
 800a75a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a75c:	8bfb      	ldrh	r3, [r7, #30]
 800a75e:	2b0b      	cmp	r3, #11
 800a760:	d801      	bhi.n	800a766 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a762:	230c      	movs	r3, #12
 800a764:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a766:	8bfb      	ldrh	r3, [r7, #30]
 800a768:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a76c:	d803      	bhi.n	800a776 <mem_trim+0x32>
 800a76e:	8bfa      	ldrh	r2, [r7, #30]
 800a770:	887b      	ldrh	r3, [r7, #2]
 800a772:	429a      	cmp	r2, r3
 800a774:	d201      	bcs.n	800a77a <mem_trim+0x36>
    return NULL;
 800a776:	2300      	movs	r3, #0
 800a778:	e0cc      	b.n	800a914 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a77a:	4b68      	ldr	r3, [pc, #416]	; (800a91c <mem_trim+0x1d8>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	429a      	cmp	r2, r3
 800a782:	d304      	bcc.n	800a78e <mem_trim+0x4a>
 800a784:	4b66      	ldr	r3, [pc, #408]	; (800a920 <mem_trim+0x1dc>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d306      	bcc.n	800a79c <mem_trim+0x58>
 800a78e:	4b65      	ldr	r3, [pc, #404]	; (800a924 <mem_trim+0x1e0>)
 800a790:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a794:	4964      	ldr	r1, [pc, #400]	; (800a928 <mem_trim+0x1e4>)
 800a796:	4865      	ldr	r0, [pc, #404]	; (800a92c <mem_trim+0x1e8>)
 800a798:	f00a faf8 	bl	8014d8c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a79c:	4b5f      	ldr	r3, [pc, #380]	; (800a91c <mem_trim+0x1d8>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d304      	bcc.n	800a7b0 <mem_trim+0x6c>
 800a7a6:	4b5e      	ldr	r3, [pc, #376]	; (800a920 <mem_trim+0x1dc>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	687a      	ldr	r2, [r7, #4]
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d301      	bcc.n	800a7b4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	e0af      	b.n	800a914 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	3b08      	subs	r3, #8
 800a7b8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a7ba:	69b8      	ldr	r0, [r7, #24]
 800a7bc:	f7ff fe30 	bl	800a420 <mem_to_ptr>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a7c4:	69bb      	ldr	r3, [r7, #24]
 800a7c6:	881a      	ldrh	r2, [r3, #0]
 800a7c8:	8afb      	ldrh	r3, [r7, #22]
 800a7ca:	1ad3      	subs	r3, r2, r3
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	3b08      	subs	r3, #8
 800a7d0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a7d2:	8bfa      	ldrh	r2, [r7, #30]
 800a7d4:	8abb      	ldrh	r3, [r7, #20]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d906      	bls.n	800a7e8 <mem_trim+0xa4>
 800a7da:	4b52      	ldr	r3, [pc, #328]	; (800a924 <mem_trim+0x1e0>)
 800a7dc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a7e0:	4953      	ldr	r1, [pc, #332]	; (800a930 <mem_trim+0x1ec>)
 800a7e2:	4852      	ldr	r0, [pc, #328]	; (800a92c <mem_trim+0x1e8>)
 800a7e4:	f00a fad2 	bl	8014d8c <iprintf>
  if (newsize > size) {
 800a7e8:	8bfa      	ldrh	r2, [r7, #30]
 800a7ea:	8abb      	ldrh	r3, [r7, #20]
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	d901      	bls.n	800a7f4 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	e08f      	b.n	800a914 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800a7f4:	8bfa      	ldrh	r2, [r7, #30]
 800a7f6:	8abb      	ldrh	r3, [r7, #20]
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d101      	bne.n	800a800 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	e089      	b.n	800a914 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800a800:	69bb      	ldr	r3, [r7, #24]
 800a802:	881b      	ldrh	r3, [r3, #0]
 800a804:	4618      	mov	r0, r3
 800a806:	f7ff fdf9 	bl	800a3fc <ptr_to_mem>
 800a80a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	791b      	ldrb	r3, [r3, #4]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d13f      	bne.n	800a894 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a814:	69bb      	ldr	r3, [r7, #24]
 800a816:	881b      	ldrh	r3, [r3, #0]
 800a818:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a81c:	d106      	bne.n	800a82c <mem_trim+0xe8>
 800a81e:	4b41      	ldr	r3, [pc, #260]	; (800a924 <mem_trim+0x1e0>)
 800a820:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a824:	4943      	ldr	r1, [pc, #268]	; (800a934 <mem_trim+0x1f0>)
 800a826:	4841      	ldr	r0, [pc, #260]	; (800a92c <mem_trim+0x1e8>)
 800a828:	f00a fab0 	bl	8014d8c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	881b      	ldrh	r3, [r3, #0]
 800a830:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a832:	8afa      	ldrh	r2, [r7, #22]
 800a834:	8bfb      	ldrh	r3, [r7, #30]
 800a836:	4413      	add	r3, r2
 800a838:	b29b      	uxth	r3, r3
 800a83a:	3308      	adds	r3, #8
 800a83c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a83e:	4b3e      	ldr	r3, [pc, #248]	; (800a938 <mem_trim+0x1f4>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	693a      	ldr	r2, [r7, #16]
 800a844:	429a      	cmp	r2, r3
 800a846:	d106      	bne.n	800a856 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800a848:	89fb      	ldrh	r3, [r7, #14]
 800a84a:	4618      	mov	r0, r3
 800a84c:	f7ff fdd6 	bl	800a3fc <ptr_to_mem>
 800a850:	4603      	mov	r3, r0
 800a852:	4a39      	ldr	r2, [pc, #228]	; (800a938 <mem_trim+0x1f4>)
 800a854:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a856:	89fb      	ldrh	r3, [r7, #14]
 800a858:	4618      	mov	r0, r3
 800a85a:	f7ff fdcf 	bl	800a3fc <ptr_to_mem>
 800a85e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	2200      	movs	r2, #0
 800a864:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	89ba      	ldrh	r2, [r7, #12]
 800a86a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	8afa      	ldrh	r2, [r7, #22]
 800a870:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a872:	69bb      	ldr	r3, [r7, #24]
 800a874:	89fa      	ldrh	r2, [r7, #14]
 800a876:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	881b      	ldrh	r3, [r3, #0]
 800a87c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a880:	d047      	beq.n	800a912 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	881b      	ldrh	r3, [r3, #0]
 800a886:	4618      	mov	r0, r3
 800a888:	f7ff fdb8 	bl	800a3fc <ptr_to_mem>
 800a88c:	4602      	mov	r2, r0
 800a88e:	89fb      	ldrh	r3, [r7, #14]
 800a890:	8053      	strh	r3, [r2, #2]
 800a892:	e03e      	b.n	800a912 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a894:	8bfb      	ldrh	r3, [r7, #30]
 800a896:	f103 0214 	add.w	r2, r3, #20
 800a89a:	8abb      	ldrh	r3, [r7, #20]
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d838      	bhi.n	800a912 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a8a0:	8afa      	ldrh	r2, [r7, #22]
 800a8a2:	8bfb      	ldrh	r3, [r7, #30]
 800a8a4:	4413      	add	r3, r2
 800a8a6:	b29b      	uxth	r3, r3
 800a8a8:	3308      	adds	r3, #8
 800a8aa:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a8ac:	69bb      	ldr	r3, [r7, #24]
 800a8ae:	881b      	ldrh	r3, [r3, #0]
 800a8b0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a8b4:	d106      	bne.n	800a8c4 <mem_trim+0x180>
 800a8b6:	4b1b      	ldr	r3, [pc, #108]	; (800a924 <mem_trim+0x1e0>)
 800a8b8:	f240 3216 	movw	r2, #790	; 0x316
 800a8bc:	491d      	ldr	r1, [pc, #116]	; (800a934 <mem_trim+0x1f0>)
 800a8be:	481b      	ldr	r0, [pc, #108]	; (800a92c <mem_trim+0x1e8>)
 800a8c0:	f00a fa64 	bl	8014d8c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a8c4:	89fb      	ldrh	r3, [r7, #14]
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7ff fd98 	bl	800a3fc <ptr_to_mem>
 800a8cc:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a8ce:	4b1a      	ldr	r3, [pc, #104]	; (800a938 <mem_trim+0x1f4>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	693a      	ldr	r2, [r7, #16]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d202      	bcs.n	800a8de <mem_trim+0x19a>
      lfree = mem2;
 800a8d8:	4a17      	ldr	r2, [pc, #92]	; (800a938 <mem_trim+0x1f4>)
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a8e4:	69bb      	ldr	r3, [r7, #24]
 800a8e6:	881a      	ldrh	r2, [r3, #0]
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	8afa      	ldrh	r2, [r7, #22]
 800a8f0:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a8f2:	69bb      	ldr	r3, [r7, #24]
 800a8f4:	89fa      	ldrh	r2, [r7, #14]
 800a8f6:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	881b      	ldrh	r3, [r3, #0]
 800a8fc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a900:	d007      	beq.n	800a912 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	881b      	ldrh	r3, [r3, #0]
 800a906:	4618      	mov	r0, r3
 800a908:	f7ff fd78 	bl	800a3fc <ptr_to_mem>
 800a90c:	4602      	mov	r2, r0
 800a90e:	89fb      	ldrh	r3, [r7, #14]
 800a910:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800a912:	687b      	ldr	r3, [r7, #4]
}
 800a914:	4618      	mov	r0, r3
 800a916:	3720      	adds	r7, #32
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}
 800a91c:	240000c0 	.word	0x240000c0
 800a920:	240000c4 	.word	0x240000c4
 800a924:	08015f58 	.word	0x08015f58
 800a928:	080160c8 	.word	0x080160c8
 800a92c:	08015fa0 	.word	0x08015fa0
 800a930:	080160e0 	.word	0x080160e0
 800a934:	08016100 	.word	0x08016100
 800a938:	240000c8 	.word	0x240000c8

0800a93c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b088      	sub	sp, #32
 800a940:	af00      	add	r7, sp, #0
 800a942:	4603      	mov	r3, r0
 800a944:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a946:	88fb      	ldrh	r3, [r7, #6]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d101      	bne.n	800a950 <mem_malloc+0x14>
    return NULL;
 800a94c:	2300      	movs	r3, #0
 800a94e:	e0d9      	b.n	800ab04 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a950:	88fb      	ldrh	r3, [r7, #6]
 800a952:	3303      	adds	r3, #3
 800a954:	b29b      	uxth	r3, r3
 800a956:	f023 0303 	bic.w	r3, r3, #3
 800a95a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a95c:	8bbb      	ldrh	r3, [r7, #28]
 800a95e:	2b0b      	cmp	r3, #11
 800a960:	d801      	bhi.n	800a966 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a962:	230c      	movs	r3, #12
 800a964:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a966:	8bbb      	ldrh	r3, [r7, #28]
 800a968:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a96c:	d803      	bhi.n	800a976 <mem_malloc+0x3a>
 800a96e:	8bba      	ldrh	r2, [r7, #28]
 800a970:	88fb      	ldrh	r3, [r7, #6]
 800a972:	429a      	cmp	r2, r3
 800a974:	d201      	bcs.n	800a97a <mem_malloc+0x3e>
    return NULL;
 800a976:	2300      	movs	r3, #0
 800a978:	e0c4      	b.n	800ab04 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a97a:	4b64      	ldr	r3, [pc, #400]	; (800ab0c <mem_malloc+0x1d0>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4618      	mov	r0, r3
 800a980:	f7ff fd4e 	bl	800a420 <mem_to_ptr>
 800a984:	4603      	mov	r3, r0
 800a986:	83fb      	strh	r3, [r7, #30]
 800a988:	e0b4      	b.n	800aaf4 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a98a:	8bfb      	ldrh	r3, [r7, #30]
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7ff fd35 	bl	800a3fc <ptr_to_mem>
 800a992:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	791b      	ldrb	r3, [r3, #4]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	f040 80a4 	bne.w	800aae6 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	881b      	ldrh	r3, [r3, #0]
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	8bfb      	ldrh	r3, [r7, #30]
 800a9a6:	1ad3      	subs	r3, r2, r3
 800a9a8:	f1a3 0208 	sub.w	r2, r3, #8
 800a9ac:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	f0c0 8099 	bcc.w	800aae6 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	881b      	ldrh	r3, [r3, #0]
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	8bfb      	ldrh	r3, [r7, #30]
 800a9bc:	1ad3      	subs	r3, r2, r3
 800a9be:	f1a3 0208 	sub.w	r2, r3, #8
 800a9c2:	8bbb      	ldrh	r3, [r7, #28]
 800a9c4:	3314      	adds	r3, #20
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d333      	bcc.n	800aa32 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a9ca:	8bfa      	ldrh	r2, [r7, #30]
 800a9cc:	8bbb      	ldrh	r3, [r7, #28]
 800a9ce:	4413      	add	r3, r2
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	3308      	adds	r3, #8
 800a9d4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a9d6:	8a7b      	ldrh	r3, [r7, #18]
 800a9d8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a9dc:	d106      	bne.n	800a9ec <mem_malloc+0xb0>
 800a9de:	4b4c      	ldr	r3, [pc, #304]	; (800ab10 <mem_malloc+0x1d4>)
 800a9e0:	f240 3287 	movw	r2, #903	; 0x387
 800a9e4:	494b      	ldr	r1, [pc, #300]	; (800ab14 <mem_malloc+0x1d8>)
 800a9e6:	484c      	ldr	r0, [pc, #304]	; (800ab18 <mem_malloc+0x1dc>)
 800a9e8:	f00a f9d0 	bl	8014d8c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a9ec:	8a7b      	ldrh	r3, [r7, #18]
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7ff fd04 	bl	800a3fc <ptr_to_mem>
 800a9f4:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	881a      	ldrh	r2, [r3, #0]
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	8bfa      	ldrh	r2, [r7, #30]
 800aa08:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	8a7a      	ldrh	r2, [r7, #18]
 800aa0e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	2201      	movs	r2, #1
 800aa14:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	881b      	ldrh	r3, [r3, #0]
 800aa1a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800aa1e:	d00b      	beq.n	800aa38 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	881b      	ldrh	r3, [r3, #0]
 800aa24:	4618      	mov	r0, r3
 800aa26:	f7ff fce9 	bl	800a3fc <ptr_to_mem>
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	8a7b      	ldrh	r3, [r7, #18]
 800aa2e:	8053      	strh	r3, [r2, #2]
 800aa30:	e002      	b.n	800aa38 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	2201      	movs	r2, #1
 800aa36:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800aa38:	4b34      	ldr	r3, [pc, #208]	; (800ab0c <mem_malloc+0x1d0>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	697a      	ldr	r2, [r7, #20]
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d127      	bne.n	800aa92 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800aa42:	4b32      	ldr	r3, [pc, #200]	; (800ab0c <mem_malloc+0x1d0>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800aa48:	e005      	b.n	800aa56 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800aa4a:	69bb      	ldr	r3, [r7, #24]
 800aa4c:	881b      	ldrh	r3, [r3, #0]
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f7ff fcd4 	bl	800a3fc <ptr_to_mem>
 800aa54:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800aa56:	69bb      	ldr	r3, [r7, #24]
 800aa58:	791b      	ldrb	r3, [r3, #4]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d004      	beq.n	800aa68 <mem_malloc+0x12c>
 800aa5e:	4b2f      	ldr	r3, [pc, #188]	; (800ab1c <mem_malloc+0x1e0>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	69ba      	ldr	r2, [r7, #24]
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d1f0      	bne.n	800aa4a <mem_malloc+0x10e>
          }
          lfree = cur;
 800aa68:	4a28      	ldr	r2, [pc, #160]	; (800ab0c <mem_malloc+0x1d0>)
 800aa6a:	69bb      	ldr	r3, [r7, #24]
 800aa6c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800aa6e:	4b27      	ldr	r3, [pc, #156]	; (800ab0c <mem_malloc+0x1d0>)
 800aa70:	681a      	ldr	r2, [r3, #0]
 800aa72:	4b2a      	ldr	r3, [pc, #168]	; (800ab1c <mem_malloc+0x1e0>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d00b      	beq.n	800aa92 <mem_malloc+0x156>
 800aa7a:	4b24      	ldr	r3, [pc, #144]	; (800ab0c <mem_malloc+0x1d0>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	791b      	ldrb	r3, [r3, #4]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d006      	beq.n	800aa92 <mem_malloc+0x156>
 800aa84:	4b22      	ldr	r3, [pc, #136]	; (800ab10 <mem_malloc+0x1d4>)
 800aa86:	f240 32b5 	movw	r2, #949	; 0x3b5
 800aa8a:	4925      	ldr	r1, [pc, #148]	; (800ab20 <mem_malloc+0x1e4>)
 800aa8c:	4822      	ldr	r0, [pc, #136]	; (800ab18 <mem_malloc+0x1dc>)
 800aa8e:	f00a f97d 	bl	8014d8c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800aa92:	8bba      	ldrh	r2, [r7, #28]
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	4413      	add	r3, r2
 800aa98:	3308      	adds	r3, #8
 800aa9a:	4a20      	ldr	r2, [pc, #128]	; (800ab1c <mem_malloc+0x1e0>)
 800aa9c:	6812      	ldr	r2, [r2, #0]
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d906      	bls.n	800aab0 <mem_malloc+0x174>
 800aaa2:	4b1b      	ldr	r3, [pc, #108]	; (800ab10 <mem_malloc+0x1d4>)
 800aaa4:	f240 32b9 	movw	r2, #953	; 0x3b9
 800aaa8:	491e      	ldr	r1, [pc, #120]	; (800ab24 <mem_malloc+0x1e8>)
 800aaaa:	481b      	ldr	r0, [pc, #108]	; (800ab18 <mem_malloc+0x1dc>)
 800aaac:	f00a f96e 	bl	8014d8c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	f003 0303 	and.w	r3, r3, #3
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d006      	beq.n	800aac8 <mem_malloc+0x18c>
 800aaba:	4b15      	ldr	r3, [pc, #84]	; (800ab10 <mem_malloc+0x1d4>)
 800aabc:	f240 32bb 	movw	r2, #955	; 0x3bb
 800aac0:	4919      	ldr	r1, [pc, #100]	; (800ab28 <mem_malloc+0x1ec>)
 800aac2:	4815      	ldr	r0, [pc, #84]	; (800ab18 <mem_malloc+0x1dc>)
 800aac4:	f00a f962 	bl	8014d8c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	f003 0303 	and.w	r3, r3, #3
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d006      	beq.n	800aae0 <mem_malloc+0x1a4>
 800aad2:	4b0f      	ldr	r3, [pc, #60]	; (800ab10 <mem_malloc+0x1d4>)
 800aad4:	f240 32bd 	movw	r2, #957	; 0x3bd
 800aad8:	4914      	ldr	r1, [pc, #80]	; (800ab2c <mem_malloc+0x1f0>)
 800aada:	480f      	ldr	r0, [pc, #60]	; (800ab18 <mem_malloc+0x1dc>)
 800aadc:	f00a f956 	bl	8014d8c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	3308      	adds	r3, #8
 800aae4:	e00e      	b.n	800ab04 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800aae6:	8bfb      	ldrh	r3, [r7, #30]
 800aae8:	4618      	mov	r0, r3
 800aaea:	f7ff fc87 	bl	800a3fc <ptr_to_mem>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	881b      	ldrh	r3, [r3, #0]
 800aaf2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800aaf4:	8bfa      	ldrh	r2, [r7, #30]
 800aaf6:	8bbb      	ldrh	r3, [r7, #28]
 800aaf8:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800aafc:	429a      	cmp	r2, r3
 800aafe:	f4ff af44 	bcc.w	800a98a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ab02:	2300      	movs	r3, #0
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3720      	adds	r7, #32
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}
 800ab0c:	240000c8 	.word	0x240000c8
 800ab10:	08015f58 	.word	0x08015f58
 800ab14:	08016100 	.word	0x08016100
 800ab18:	08015fa0 	.word	0x08015fa0
 800ab1c:	240000c4 	.word	0x240000c4
 800ab20:	08016114 	.word	0x08016114
 800ab24:	08016130 	.word	0x08016130
 800ab28:	08016160 	.word	0x08016160
 800ab2c:	08016190 	.word	0x08016190

0800ab30 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b085      	sub	sp, #20
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	689b      	ldr	r3, [r3, #8]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	3303      	adds	r3, #3
 800ab46:	f023 0303 	bic.w	r3, r3, #3
 800ab4a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	60fb      	str	r3, [r7, #12]
 800ab50:	e011      	b.n	800ab76 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	689b      	ldr	r3, [r3, #8]
 800ab60:	68ba      	ldr	r2, [r7, #8]
 800ab62:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	881b      	ldrh	r3, [r3, #0]
 800ab68:	461a      	mov	r2, r3
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	4413      	add	r3, r2
 800ab6e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	3301      	adds	r3, #1
 800ab74:	60fb      	str	r3, [r7, #12]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	885b      	ldrh	r3, [r3, #2]
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	dbe7      	blt.n	800ab52 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ab82:	bf00      	nop
 800ab84:	bf00      	nop
 800ab86:	3714      	adds	r7, #20
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8e:	4770      	bx	lr

0800ab90 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ab96:	2300      	movs	r3, #0
 800ab98:	80fb      	strh	r3, [r7, #6]
 800ab9a:	e009      	b.n	800abb0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800ab9c:	88fb      	ldrh	r3, [r7, #6]
 800ab9e:	4a08      	ldr	r2, [pc, #32]	; (800abc0 <memp_init+0x30>)
 800aba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aba4:	4618      	mov	r0, r3
 800aba6:	f7ff ffc3 	bl	800ab30 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800abaa:	88fb      	ldrh	r3, [r7, #6]
 800abac:	3301      	adds	r3, #1
 800abae:	80fb      	strh	r3, [r7, #6]
 800abb0:	88fb      	ldrh	r3, [r7, #6]
 800abb2:	2b08      	cmp	r3, #8
 800abb4:	d9f2      	bls.n	800ab9c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800abb6:	bf00      	nop
 800abb8:	bf00      	nop
 800abba:	3708      	adds	r7, #8
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}
 800abc0:	08019774 	.word	0x08019774

0800abc4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	689b      	ldr	r3, [r3, #8]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d012      	beq.n	800ac00 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	689b      	ldr	r3, [r3, #8]
 800abde:	68fa      	ldr	r2, [r7, #12]
 800abe0:	6812      	ldr	r2, [r2, #0]
 800abe2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f003 0303 	and.w	r3, r3, #3
 800abea:	2b00      	cmp	r3, #0
 800abec:	d006      	beq.n	800abfc <do_memp_malloc_pool+0x38>
 800abee:	4b07      	ldr	r3, [pc, #28]	; (800ac0c <do_memp_malloc_pool+0x48>)
 800abf0:	f44f 728c 	mov.w	r2, #280	; 0x118
 800abf4:	4906      	ldr	r1, [pc, #24]	; (800ac10 <do_memp_malloc_pool+0x4c>)
 800abf6:	4807      	ldr	r0, [pc, #28]	; (800ac14 <do_memp_malloc_pool+0x50>)
 800abf8:	f00a f8c8 	bl	8014d8c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	e000      	b.n	800ac02 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800ac00:	2300      	movs	r3, #0
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3710      	adds	r7, #16
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}
 800ac0a:	bf00      	nop
 800ac0c:	080161b4 	.word	0x080161b4
 800ac10:	080161e4 	.word	0x080161e4
 800ac14:	08016208 	.word	0x08016208

0800ac18 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d106      	bne.n	800ac34 <memp_malloc_pool+0x1c>
 800ac26:	4b0a      	ldr	r3, [pc, #40]	; (800ac50 <memp_malloc_pool+0x38>)
 800ac28:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800ac2c:	4909      	ldr	r1, [pc, #36]	; (800ac54 <memp_malloc_pool+0x3c>)
 800ac2e:	480a      	ldr	r0, [pc, #40]	; (800ac58 <memp_malloc_pool+0x40>)
 800ac30:	f00a f8ac 	bl	8014d8c <iprintf>
  if (desc == NULL) {
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d101      	bne.n	800ac3e <memp_malloc_pool+0x26>
    return NULL;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	e003      	b.n	800ac46 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f7ff ffc0 	bl	800abc4 <do_memp_malloc_pool>
 800ac44:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3708      	adds	r7, #8
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	bf00      	nop
 800ac50:	080161b4 	.word	0x080161b4
 800ac54:	08016230 	.word	0x08016230
 800ac58:	08016208 	.word	0x08016208

0800ac5c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b084      	sub	sp, #16
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	4603      	mov	r3, r0
 800ac64:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ac66:	79fb      	ldrb	r3, [r7, #7]
 800ac68:	2b08      	cmp	r3, #8
 800ac6a:	d908      	bls.n	800ac7e <memp_malloc+0x22>
 800ac6c:	4b0a      	ldr	r3, [pc, #40]	; (800ac98 <memp_malloc+0x3c>)
 800ac6e:	f240 1257 	movw	r2, #343	; 0x157
 800ac72:	490a      	ldr	r1, [pc, #40]	; (800ac9c <memp_malloc+0x40>)
 800ac74:	480a      	ldr	r0, [pc, #40]	; (800aca0 <memp_malloc+0x44>)
 800ac76:	f00a f889 	bl	8014d8c <iprintf>
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	e008      	b.n	800ac90 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ac7e:	79fb      	ldrb	r3, [r7, #7]
 800ac80:	4a08      	ldr	r2, [pc, #32]	; (800aca4 <memp_malloc+0x48>)
 800ac82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac86:	4618      	mov	r0, r3
 800ac88:	f7ff ff9c 	bl	800abc4 <do_memp_malloc_pool>
 800ac8c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3710      	adds	r7, #16
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}
 800ac98:	080161b4 	.word	0x080161b4
 800ac9c:	08016244 	.word	0x08016244
 800aca0:	08016208 	.word	0x08016208
 800aca4:	08019774 	.word	0x08019774

0800aca8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b084      	sub	sp, #16
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	f003 0303 	and.w	r3, r3, #3
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d006      	beq.n	800acca <do_memp_free_pool+0x22>
 800acbc:	4b0a      	ldr	r3, [pc, #40]	; (800ace8 <do_memp_free_pool+0x40>)
 800acbe:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800acc2:	490a      	ldr	r1, [pc, #40]	; (800acec <do_memp_free_pool+0x44>)
 800acc4:	480a      	ldr	r0, [pc, #40]	; (800acf0 <do_memp_free_pool+0x48>)
 800acc6:	f00a f861 	bl	8014d8c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	689b      	ldr	r3, [r3, #8]
 800acd2:	681a      	ldr	r2, [r3, #0]
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	689b      	ldr	r3, [r3, #8]
 800acdc:	68fa      	ldr	r2, [r7, #12]
 800acde:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800ace0:	bf00      	nop
 800ace2:	3710      	adds	r7, #16
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	080161b4 	.word	0x080161b4
 800acec:	08016264 	.word	0x08016264
 800acf0:	08016208 	.word	0x08016208

0800acf4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d106      	bne.n	800ad12 <memp_free_pool+0x1e>
 800ad04:	4b0a      	ldr	r3, [pc, #40]	; (800ad30 <memp_free_pool+0x3c>)
 800ad06:	f240 1295 	movw	r2, #405	; 0x195
 800ad0a:	490a      	ldr	r1, [pc, #40]	; (800ad34 <memp_free_pool+0x40>)
 800ad0c:	480a      	ldr	r0, [pc, #40]	; (800ad38 <memp_free_pool+0x44>)
 800ad0e:	f00a f83d 	bl	8014d8c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d007      	beq.n	800ad28 <memp_free_pool+0x34>
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d004      	beq.n	800ad28 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800ad1e:	6839      	ldr	r1, [r7, #0]
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f7ff ffc1 	bl	800aca8 <do_memp_free_pool>
 800ad26:	e000      	b.n	800ad2a <memp_free_pool+0x36>
    return;
 800ad28:	bf00      	nop
}
 800ad2a:	3708      	adds	r7, #8
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}
 800ad30:	080161b4 	.word	0x080161b4
 800ad34:	08016230 	.word	0x08016230
 800ad38:	08016208 	.word	0x08016208

0800ad3c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b082      	sub	sp, #8
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	4603      	mov	r3, r0
 800ad44:	6039      	str	r1, [r7, #0]
 800ad46:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ad48:	79fb      	ldrb	r3, [r7, #7]
 800ad4a:	2b08      	cmp	r3, #8
 800ad4c:	d907      	bls.n	800ad5e <memp_free+0x22>
 800ad4e:	4b0c      	ldr	r3, [pc, #48]	; (800ad80 <memp_free+0x44>)
 800ad50:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800ad54:	490b      	ldr	r1, [pc, #44]	; (800ad84 <memp_free+0x48>)
 800ad56:	480c      	ldr	r0, [pc, #48]	; (800ad88 <memp_free+0x4c>)
 800ad58:	f00a f818 	bl	8014d8c <iprintf>
 800ad5c:	e00c      	b.n	800ad78 <memp_free+0x3c>

  if (mem == NULL) {
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d008      	beq.n	800ad76 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ad64:	79fb      	ldrb	r3, [r7, #7]
 800ad66:	4a09      	ldr	r2, [pc, #36]	; (800ad8c <memp_free+0x50>)
 800ad68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad6c:	6839      	ldr	r1, [r7, #0]
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7ff ff9a 	bl	800aca8 <do_memp_free_pool>
 800ad74:	e000      	b.n	800ad78 <memp_free+0x3c>
    return;
 800ad76:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ad78:	3708      	adds	r7, #8
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	080161b4 	.word	0x080161b4
 800ad84:	08016284 	.word	0x08016284
 800ad88:	08016208 	.word	0x08016208
 800ad8c:	08019774 	.word	0x08019774

0800ad90 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ad90:	b480      	push	{r7}
 800ad92:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ad94:	bf00      	nop
 800ad96:	46bd      	mov	sp, r7
 800ad98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9c:	4770      	bx	lr
	...

0800ada0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b086      	sub	sp, #24
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	60f8      	str	r0, [r7, #12]
 800ada8:	60b9      	str	r1, [r7, #8]
 800adaa:	607a      	str	r2, [r7, #4]
 800adac:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d108      	bne.n	800adc6 <netif_add+0x26>
 800adb4:	4b57      	ldr	r3, [pc, #348]	; (800af14 <netif_add+0x174>)
 800adb6:	f240 1227 	movw	r2, #295	; 0x127
 800adba:	4957      	ldr	r1, [pc, #348]	; (800af18 <netif_add+0x178>)
 800adbc:	4857      	ldr	r0, [pc, #348]	; (800af1c <netif_add+0x17c>)
 800adbe:	f009 ffe5 	bl	8014d8c <iprintf>
 800adc2:	2300      	movs	r3, #0
 800adc4:	e0a2      	b.n	800af0c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800adc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d108      	bne.n	800adde <netif_add+0x3e>
 800adcc:	4b51      	ldr	r3, [pc, #324]	; (800af14 <netif_add+0x174>)
 800adce:	f44f 7294 	mov.w	r2, #296	; 0x128
 800add2:	4953      	ldr	r1, [pc, #332]	; (800af20 <netif_add+0x180>)
 800add4:	4851      	ldr	r0, [pc, #324]	; (800af1c <netif_add+0x17c>)
 800add6:	f009 ffd9 	bl	8014d8c <iprintf>
 800adda:	2300      	movs	r3, #0
 800addc:	e096      	b.n	800af0c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d101      	bne.n	800ade8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ade4:	4b4f      	ldr	r3, [pc, #316]	; (800af24 <netif_add+0x184>)
 800ade6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d101      	bne.n	800adf2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800adee:	4b4d      	ldr	r3, [pc, #308]	; (800af24 <netif_add+0x184>)
 800adf0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d101      	bne.n	800adfc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800adf8:	4b4a      	ldr	r3, [pc, #296]	; (800af24 <netif_add+0x184>)
 800adfa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	2200      	movs	r2, #0
 800ae00:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2200      	movs	r2, #0
 800ae06:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	4a45      	ldr	r2, [pc, #276]	; (800af28 <netif_add+0x188>)
 800ae12:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2200      	movs	r2, #0
 800ae18:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2200      	movs	r2, #0
 800ae26:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	6a3a      	ldr	r2, [r7, #32]
 800ae2c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ae2e:	4b3f      	ldr	r3, [pc, #252]	; (800af2c <netif_add+0x18c>)
 800ae30:	781a      	ldrb	r2, [r3, #0]
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae3c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	68b9      	ldr	r1, [r7, #8]
 800ae44:	68f8      	ldr	r0, [r7, #12]
 800ae46:	f000 f913 	bl	800b070 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ae4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae4c:	68f8      	ldr	r0, [r7, #12]
 800ae4e:	4798      	blx	r3
 800ae50:	4603      	mov	r3, r0
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d001      	beq.n	800ae5a <netif_add+0xba>
    return NULL;
 800ae56:	2300      	movs	r3, #0
 800ae58:	e058      	b.n	800af0c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ae60:	2bff      	cmp	r3, #255	; 0xff
 800ae62:	d103      	bne.n	800ae6c <netif_add+0xcc>
        netif->num = 0;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	2200      	movs	r2, #0
 800ae68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ae70:	4b2f      	ldr	r3, [pc, #188]	; (800af30 <netif_add+0x190>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	617b      	str	r3, [r7, #20]
 800ae76:	e02b      	b.n	800aed0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ae78:	697a      	ldr	r2, [r7, #20]
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d106      	bne.n	800ae8e <netif_add+0xee>
 800ae80:	4b24      	ldr	r3, [pc, #144]	; (800af14 <netif_add+0x174>)
 800ae82:	f240 128b 	movw	r2, #395	; 0x18b
 800ae86:	492b      	ldr	r1, [pc, #172]	; (800af34 <netif_add+0x194>)
 800ae88:	4824      	ldr	r0, [pc, #144]	; (800af1c <netif_add+0x17c>)
 800ae8a:	f009 ff7f 	bl	8014d8c <iprintf>
        num_netifs++;
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	3301      	adds	r3, #1
 800ae92:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	2bff      	cmp	r3, #255	; 0xff
 800ae98:	dd06      	ble.n	800aea8 <netif_add+0x108>
 800ae9a:	4b1e      	ldr	r3, [pc, #120]	; (800af14 <netif_add+0x174>)
 800ae9c:	f240 128d 	movw	r2, #397	; 0x18d
 800aea0:	4925      	ldr	r1, [pc, #148]	; (800af38 <netif_add+0x198>)
 800aea2:	481e      	ldr	r0, [pc, #120]	; (800af1c <netif_add+0x17c>)
 800aea4:	f009 ff72 	bl	8014d8c <iprintf>
        if (netif2->num == netif->num) {
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d108      	bne.n	800aeca <netif_add+0x12a>
          netif->num++;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aebe:	3301      	adds	r3, #1
 800aec0:	b2da      	uxtb	r2, r3
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800aec8:	e005      	b.n	800aed6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	617b      	str	r3, [r7, #20]
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d1d0      	bne.n	800ae78 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d1be      	bne.n	800ae5a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aee2:	2bfe      	cmp	r3, #254	; 0xfe
 800aee4:	d103      	bne.n	800aeee <netif_add+0x14e>
    netif_num = 0;
 800aee6:	4b11      	ldr	r3, [pc, #68]	; (800af2c <netif_add+0x18c>)
 800aee8:	2200      	movs	r2, #0
 800aeea:	701a      	strb	r2, [r3, #0]
 800aeec:	e006      	b.n	800aefc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aef4:	3301      	adds	r3, #1
 800aef6:	b2da      	uxtb	r2, r3
 800aef8:	4b0c      	ldr	r3, [pc, #48]	; (800af2c <netif_add+0x18c>)
 800aefa:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800aefc:	4b0c      	ldr	r3, [pc, #48]	; (800af30 <netif_add+0x190>)
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800af04:	4a0a      	ldr	r2, [pc, #40]	; (800af30 <netif_add+0x190>)
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800af0a:	68fb      	ldr	r3, [r7, #12]
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3718      	adds	r7, #24
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}
 800af14:	080162a0 	.word	0x080162a0
 800af18:	08016334 	.word	0x08016334
 800af1c:	080162f0 	.word	0x080162f0
 800af20:	08016350 	.word	0x08016350
 800af24:	080197d8 	.word	0x080197d8
 800af28:	0800b34b 	.word	0x0800b34b
 800af2c:	240000f0 	.word	0x240000f0
 800af30:	240035f4 	.word	0x240035f4
 800af34:	08016374 	.word	0x08016374
 800af38:	08016388 	.word	0x08016388

0800af3c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800af46:	6839      	ldr	r1, [r7, #0]
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f002 fdf3 	bl	800db34 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800af4e:	6839      	ldr	r1, [r7, #0]
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f007 fb2b 	bl	80125ac <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800af56:	bf00      	nop
 800af58:	3708      	adds	r7, #8
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
	...

0800af60 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b086      	sub	sp, #24
 800af64:	af00      	add	r7, sp, #0
 800af66:	60f8      	str	r0, [r7, #12]
 800af68:	60b9      	str	r1, [r7, #8]
 800af6a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d106      	bne.n	800af80 <netif_do_set_ipaddr+0x20>
 800af72:	4b1d      	ldr	r3, [pc, #116]	; (800afe8 <netif_do_set_ipaddr+0x88>)
 800af74:	f240 12cb 	movw	r2, #459	; 0x1cb
 800af78:	491c      	ldr	r1, [pc, #112]	; (800afec <netif_do_set_ipaddr+0x8c>)
 800af7a:	481d      	ldr	r0, [pc, #116]	; (800aff0 <netif_do_set_ipaddr+0x90>)
 800af7c:	f009 ff06 	bl	8014d8c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d106      	bne.n	800af94 <netif_do_set_ipaddr+0x34>
 800af86:	4b18      	ldr	r3, [pc, #96]	; (800afe8 <netif_do_set_ipaddr+0x88>)
 800af88:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800af8c:	4917      	ldr	r1, [pc, #92]	; (800afec <netif_do_set_ipaddr+0x8c>)
 800af8e:	4818      	ldr	r0, [pc, #96]	; (800aff0 <netif_do_set_ipaddr+0x90>)
 800af90:	f009 fefc 	bl	8014d8c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	681a      	ldr	r2, [r3, #0]
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	3304      	adds	r3, #4
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d01c      	beq.n	800afdc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	3304      	adds	r3, #4
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800afb2:	f107 0314 	add.w	r3, r7, #20
 800afb6:	4619      	mov	r1, r3
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f7ff ffbf 	bl	800af3c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d002      	beq.n	800afca <netif_do_set_ipaddr+0x6a>
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	e000      	b.n	800afcc <netif_do_set_ipaddr+0x6c>
 800afca:	2300      	movs	r3, #0
 800afcc:	68fa      	ldr	r2, [r7, #12]
 800afce:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800afd0:	2101      	movs	r1, #1
 800afd2:	68f8      	ldr	r0, [r7, #12]
 800afd4:	f000 f8d2 	bl	800b17c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800afd8:	2301      	movs	r3, #1
 800afda:	e000      	b.n	800afde <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800afdc:	2300      	movs	r3, #0
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3718      	adds	r7, #24
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	080162a0 	.word	0x080162a0
 800afec:	080163b8 	.word	0x080163b8
 800aff0:	080162f0 	.word	0x080162f0

0800aff4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800aff4:	b480      	push	{r7}
 800aff6:	b085      	sub	sp, #20
 800aff8:	af00      	add	r7, sp, #0
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	60b9      	str	r1, [r7, #8]
 800affe:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	3308      	adds	r3, #8
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	429a      	cmp	r2, r3
 800b00c:	d00a      	beq.n	800b024 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d002      	beq.n	800b01a <netif_do_set_netmask+0x26>
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	e000      	b.n	800b01c <netif_do_set_netmask+0x28>
 800b01a:	2300      	movs	r3, #0
 800b01c:	68fa      	ldr	r2, [r7, #12]
 800b01e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b020:	2301      	movs	r3, #1
 800b022:	e000      	b.n	800b026 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b024:	2300      	movs	r3, #0
}
 800b026:	4618      	mov	r0, r3
 800b028:	3714      	adds	r7, #20
 800b02a:	46bd      	mov	sp, r7
 800b02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b030:	4770      	bx	lr

0800b032 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b032:	b480      	push	{r7}
 800b034:	b085      	sub	sp, #20
 800b036:	af00      	add	r7, sp, #0
 800b038:	60f8      	str	r0, [r7, #12]
 800b03a:	60b9      	str	r1, [r7, #8]
 800b03c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	681a      	ldr	r2, [r3, #0]
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	330c      	adds	r3, #12
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	429a      	cmp	r2, r3
 800b04a:	d00a      	beq.n	800b062 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d002      	beq.n	800b058 <netif_do_set_gw+0x26>
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	e000      	b.n	800b05a <netif_do_set_gw+0x28>
 800b058:	2300      	movs	r3, #0
 800b05a:	68fa      	ldr	r2, [r7, #12]
 800b05c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b05e:	2301      	movs	r3, #1
 800b060:	e000      	b.n	800b064 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b062:	2300      	movs	r3, #0
}
 800b064:	4618      	mov	r0, r3
 800b066:	3714      	adds	r7, #20
 800b068:	46bd      	mov	sp, r7
 800b06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06e:	4770      	bx	lr

0800b070 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b088      	sub	sp, #32
 800b074:	af00      	add	r7, sp, #0
 800b076:	60f8      	str	r0, [r7, #12]
 800b078:	60b9      	str	r1, [r7, #8]
 800b07a:	607a      	str	r2, [r7, #4]
 800b07c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b07e:	2300      	movs	r3, #0
 800b080:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b082:	2300      	movs	r3, #0
 800b084:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d101      	bne.n	800b090 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b08c:	4b1c      	ldr	r3, [pc, #112]	; (800b100 <netif_set_addr+0x90>)
 800b08e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d101      	bne.n	800b09a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b096:	4b1a      	ldr	r3, [pc, #104]	; (800b100 <netif_set_addr+0x90>)
 800b098:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d101      	bne.n	800b0a4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b0a0:	4b17      	ldr	r3, [pc, #92]	; (800b100 <netif_set_addr+0x90>)
 800b0a2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d003      	beq.n	800b0b2 <netif_set_addr+0x42>
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d101      	bne.n	800b0b6 <netif_set_addr+0x46>
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	e000      	b.n	800b0b8 <netif_set_addr+0x48>
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d006      	beq.n	800b0ce <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b0c0:	f107 0310 	add.w	r3, r7, #16
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	68b9      	ldr	r1, [r7, #8]
 800b0c8:	68f8      	ldr	r0, [r7, #12]
 800b0ca:	f7ff ff49 	bl	800af60 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b0ce:	69fa      	ldr	r2, [r7, #28]
 800b0d0:	6879      	ldr	r1, [r7, #4]
 800b0d2:	68f8      	ldr	r0, [r7, #12]
 800b0d4:	f7ff ff8e 	bl	800aff4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b0d8:	69ba      	ldr	r2, [r7, #24]
 800b0da:	6839      	ldr	r1, [r7, #0]
 800b0dc:	68f8      	ldr	r0, [r7, #12]
 800b0de:	f7ff ffa8 	bl	800b032 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d106      	bne.n	800b0f6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b0e8:	f107 0310 	add.w	r3, r7, #16
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	68b9      	ldr	r1, [r7, #8]
 800b0f0:	68f8      	ldr	r0, [r7, #12]
 800b0f2:	f7ff ff35 	bl	800af60 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b0f6:	bf00      	nop
 800b0f8:	3720      	adds	r7, #32
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}
 800b0fe:	bf00      	nop
 800b100:	080197d8 	.word	0x080197d8

0800b104 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b104:	b480      	push	{r7}
 800b106:	b083      	sub	sp, #12
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b10c:	4a04      	ldr	r2, [pc, #16]	; (800b120 <netif_set_default+0x1c>)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b112:	bf00      	nop
 800b114:	370c      	adds	r7, #12
 800b116:	46bd      	mov	sp, r7
 800b118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11c:	4770      	bx	lr
 800b11e:	bf00      	nop
 800b120:	240035f8 	.word	0x240035f8

0800b124 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b082      	sub	sp, #8
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d107      	bne.n	800b142 <netif_set_up+0x1e>
 800b132:	4b0f      	ldr	r3, [pc, #60]	; (800b170 <netif_set_up+0x4c>)
 800b134:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b138:	490e      	ldr	r1, [pc, #56]	; (800b174 <netif_set_up+0x50>)
 800b13a:	480f      	ldr	r0, [pc, #60]	; (800b178 <netif_set_up+0x54>)
 800b13c:	f009 fe26 	bl	8014d8c <iprintf>
 800b140:	e013      	b.n	800b16a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b148:	f003 0301 	and.w	r3, r3, #1
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d10c      	bne.n	800b16a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b156:	f043 0301 	orr.w	r3, r3, #1
 800b15a:	b2da      	uxtb	r2, r3
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b162:	2103      	movs	r1, #3
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f000 f809 	bl	800b17c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b16a:	3708      	adds	r7, #8
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}
 800b170:	080162a0 	.word	0x080162a0
 800b174:	08016428 	.word	0x08016428
 800b178:	080162f0 	.word	0x080162f0

0800b17c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b082      	sub	sp, #8
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	460b      	mov	r3, r1
 800b186:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d106      	bne.n	800b19c <netif_issue_reports+0x20>
 800b18e:	4b18      	ldr	r3, [pc, #96]	; (800b1f0 <netif_issue_reports+0x74>)
 800b190:	f240 326d 	movw	r2, #877	; 0x36d
 800b194:	4917      	ldr	r1, [pc, #92]	; (800b1f4 <netif_issue_reports+0x78>)
 800b196:	4818      	ldr	r0, [pc, #96]	; (800b1f8 <netif_issue_reports+0x7c>)
 800b198:	f009 fdf8 	bl	8014d8c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b1a2:	f003 0304 	and.w	r3, r3, #4
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d01e      	beq.n	800b1e8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b1b0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d017      	beq.n	800b1e8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b1b8:	78fb      	ldrb	r3, [r7, #3]
 800b1ba:	f003 0301 	and.w	r3, r3, #1
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d013      	beq.n	800b1ea <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	3304      	adds	r3, #4
 800b1c6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d00e      	beq.n	800b1ea <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b1d2:	f003 0308 	and.w	r3, r3, #8
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d007      	beq.n	800b1ea <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	3304      	adds	r3, #4
 800b1de:	4619      	mov	r1, r3
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f008 f94d 	bl	8013480 <etharp_request>
 800b1e6:	e000      	b.n	800b1ea <netif_issue_reports+0x6e>
    return;
 800b1e8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b1ea:	3708      	adds	r7, #8
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}
 800b1f0:	080162a0 	.word	0x080162a0
 800b1f4:	08016444 	.word	0x08016444
 800b1f8:	080162f0 	.word	0x080162f0

0800b1fc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b082      	sub	sp, #8
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d107      	bne.n	800b21a <netif_set_down+0x1e>
 800b20a:	4b12      	ldr	r3, [pc, #72]	; (800b254 <netif_set_down+0x58>)
 800b20c:	f240 329b 	movw	r2, #923	; 0x39b
 800b210:	4911      	ldr	r1, [pc, #68]	; (800b258 <netif_set_down+0x5c>)
 800b212:	4812      	ldr	r0, [pc, #72]	; (800b25c <netif_set_down+0x60>)
 800b214:	f009 fdba 	bl	8014d8c <iprintf>
 800b218:	e019      	b.n	800b24e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b220:	f003 0301 	and.w	r3, r3, #1
 800b224:	2b00      	cmp	r3, #0
 800b226:	d012      	beq.n	800b24e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b22e:	f023 0301 	bic.w	r3, r3, #1
 800b232:	b2da      	uxtb	r2, r3
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b240:	f003 0308 	and.w	r3, r3, #8
 800b244:	2b00      	cmp	r3, #0
 800b246:	d002      	beq.n	800b24e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f007 fcd7 	bl	8012bfc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b24e:	3708      	adds	r7, #8
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}
 800b254:	080162a0 	.word	0x080162a0
 800b258:	08016468 	.word	0x08016468
 800b25c:	080162f0 	.word	0x080162f0

0800b260 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d107      	bne.n	800b27e <netif_set_link_up+0x1e>
 800b26e:	4b13      	ldr	r3, [pc, #76]	; (800b2bc <netif_set_link_up+0x5c>)
 800b270:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800b274:	4912      	ldr	r1, [pc, #72]	; (800b2c0 <netif_set_link_up+0x60>)
 800b276:	4813      	ldr	r0, [pc, #76]	; (800b2c4 <netif_set_link_up+0x64>)
 800b278:	f009 fd88 	bl	8014d8c <iprintf>
 800b27c:	e01b      	b.n	800b2b6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b284:	f003 0304 	and.w	r3, r3, #4
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d114      	bne.n	800b2b6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b292:	f043 0304 	orr.w	r3, r3, #4
 800b296:	b2da      	uxtb	r2, r3
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b29e:	2103      	movs	r1, #3
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f7ff ff6b 	bl	800b17c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	69db      	ldr	r3, [r3, #28]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d003      	beq.n	800b2b6 <netif_set_link_up+0x56>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	69db      	ldr	r3, [r3, #28]
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b2b6:	3708      	adds	r7, #8
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}
 800b2bc:	080162a0 	.word	0x080162a0
 800b2c0:	08016488 	.word	0x08016488
 800b2c4:	080162f0 	.word	0x080162f0

0800b2c8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d107      	bne.n	800b2e6 <netif_set_link_down+0x1e>
 800b2d6:	4b11      	ldr	r3, [pc, #68]	; (800b31c <netif_set_link_down+0x54>)
 800b2d8:	f240 4206 	movw	r2, #1030	; 0x406
 800b2dc:	4910      	ldr	r1, [pc, #64]	; (800b320 <netif_set_link_down+0x58>)
 800b2de:	4811      	ldr	r0, [pc, #68]	; (800b324 <netif_set_link_down+0x5c>)
 800b2e0:	f009 fd54 	bl	8014d8c <iprintf>
 800b2e4:	e017      	b.n	800b316 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b2ec:	f003 0304 	and.w	r3, r3, #4
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d010      	beq.n	800b316 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b2fa:	f023 0304 	bic.w	r3, r3, #4
 800b2fe:	b2da      	uxtb	r2, r3
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	69db      	ldr	r3, [r3, #28]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d003      	beq.n	800b316 <netif_set_link_down+0x4e>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	69db      	ldr	r3, [r3, #28]
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b316:	3708      	adds	r7, #8
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}
 800b31c:	080162a0 	.word	0x080162a0
 800b320:	080164ac 	.word	0x080164ac
 800b324:	080162f0 	.word	0x080162f0

0800b328 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d002      	beq.n	800b33e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	683a      	ldr	r2, [r7, #0]
 800b33c:	61da      	str	r2, [r3, #28]
  }
}
 800b33e:	bf00      	nop
 800b340:	370c      	adds	r7, #12
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr

0800b34a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b34a:	b480      	push	{r7}
 800b34c:	b085      	sub	sp, #20
 800b34e:	af00      	add	r7, sp, #0
 800b350:	60f8      	str	r0, [r7, #12]
 800b352:	60b9      	str	r1, [r7, #8]
 800b354:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b356:	f06f 030b 	mvn.w	r3, #11
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3714      	adds	r7, #20
 800b35e:	46bd      	mov	sp, r7
 800b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b364:	4770      	bx	lr
	...

0800b368 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b368:	b480      	push	{r7}
 800b36a:	b085      	sub	sp, #20
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	4603      	mov	r3, r0
 800b370:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b372:	79fb      	ldrb	r3, [r7, #7]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d013      	beq.n	800b3a0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b378:	4b0d      	ldr	r3, [pc, #52]	; (800b3b0 <netif_get_by_index+0x48>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	60fb      	str	r3, [r7, #12]
 800b37e:	e00c      	b.n	800b39a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b386:	3301      	adds	r3, #1
 800b388:	b2db      	uxtb	r3, r3
 800b38a:	79fa      	ldrb	r2, [r7, #7]
 800b38c:	429a      	cmp	r2, r3
 800b38e:	d101      	bne.n	800b394 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	e006      	b.n	800b3a2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	60fb      	str	r3, [r7, #12]
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d1ef      	bne.n	800b380 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b3a0:	2300      	movs	r3, #0
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3714      	adds	r7, #20
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ac:	4770      	bx	lr
 800b3ae:	bf00      	nop
 800b3b0:	240035f4 	.word	0x240035f4

0800b3b4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b082      	sub	sp, #8
 800b3b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b3ba:	4b0c      	ldr	r3, [pc, #48]	; (800b3ec <pbuf_free_ooseq+0x38>)
 800b3bc:	2200      	movs	r2, #0
 800b3be:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b3c0:	4b0b      	ldr	r3, [pc, #44]	; (800b3f0 <pbuf_free_ooseq+0x3c>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	607b      	str	r3, [r7, #4]
 800b3c6:	e00a      	b.n	800b3de <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d003      	beq.n	800b3d8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f002 fbed 	bl	800dbb0 <tcp_free_ooseq>
      return;
 800b3d6:	e005      	b.n	800b3e4 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	68db      	ldr	r3, [r3, #12]
 800b3dc:	607b      	str	r3, [r7, #4]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d1f1      	bne.n	800b3c8 <pbuf_free_ooseq+0x14>
    }
  }
}
 800b3e4:	3708      	adds	r7, #8
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
 800b3ea:	bf00      	nop
 800b3ec:	240035fc 	.word	0x240035fc
 800b3f0:	24003604 	.word	0x24003604

0800b3f4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800b3f8:	4b03      	ldr	r3, [pc, #12]	; (800b408 <pbuf_pool_is_empty+0x14>)
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b3fe:	bf00      	nop
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr
 800b408:	240035fc 	.word	0x240035fc

0800b40c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b085      	sub	sp, #20
 800b410:	af00      	add	r7, sp, #0
 800b412:	60f8      	str	r0, [r7, #12]
 800b414:	60b9      	str	r1, [r7, #8]
 800b416:	4611      	mov	r1, r2
 800b418:	461a      	mov	r2, r3
 800b41a:	460b      	mov	r3, r1
 800b41c:	80fb      	strh	r3, [r7, #6]
 800b41e:	4613      	mov	r3, r2
 800b420:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	2200      	movs	r2, #0
 800b426:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	68ba      	ldr	r2, [r7, #8]
 800b42c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	88fa      	ldrh	r2, [r7, #6]
 800b432:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	88ba      	ldrh	r2, [r7, #4]
 800b438:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b43a:	8b3b      	ldrh	r3, [r7, #24]
 800b43c:	b2da      	uxtb	r2, r3
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	7f3a      	ldrb	r2, [r7, #28]
 800b446:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2201      	movs	r2, #1
 800b44c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2200      	movs	r2, #0
 800b452:	73da      	strb	r2, [r3, #15]
}
 800b454:	bf00      	nop
 800b456:	3714      	adds	r7, #20
 800b458:	46bd      	mov	sp, r7
 800b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45e:	4770      	bx	lr

0800b460 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b08c      	sub	sp, #48	; 0x30
 800b464:	af02      	add	r7, sp, #8
 800b466:	4603      	mov	r3, r0
 800b468:	71fb      	strb	r3, [r7, #7]
 800b46a:	460b      	mov	r3, r1
 800b46c:	80bb      	strh	r3, [r7, #4]
 800b46e:	4613      	mov	r3, r2
 800b470:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b472:	79fb      	ldrb	r3, [r7, #7]
 800b474:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b476:	887b      	ldrh	r3, [r7, #2]
 800b478:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b47c:	d07f      	beq.n	800b57e <pbuf_alloc+0x11e>
 800b47e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b482:	f300 80c8 	bgt.w	800b616 <pbuf_alloc+0x1b6>
 800b486:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b48a:	d010      	beq.n	800b4ae <pbuf_alloc+0x4e>
 800b48c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b490:	f300 80c1 	bgt.w	800b616 <pbuf_alloc+0x1b6>
 800b494:	2b01      	cmp	r3, #1
 800b496:	d002      	beq.n	800b49e <pbuf_alloc+0x3e>
 800b498:	2b41      	cmp	r3, #65	; 0x41
 800b49a:	f040 80bc 	bne.w	800b616 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b49e:	887a      	ldrh	r2, [r7, #2]
 800b4a0:	88bb      	ldrh	r3, [r7, #4]
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	2000      	movs	r0, #0
 800b4a6:	f000 f8d1 	bl	800b64c <pbuf_alloc_reference>
 800b4aa:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b4ac:	e0bd      	b.n	800b62a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b4b6:	88bb      	ldrh	r3, [r7, #4]
 800b4b8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b4ba:	2008      	movs	r0, #8
 800b4bc:	f7ff fbce 	bl	800ac5c <memp_malloc>
 800b4c0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d109      	bne.n	800b4dc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b4c8:	f7ff ff94 	bl	800b3f4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d002      	beq.n	800b4d8 <pbuf_alloc+0x78>
            pbuf_free(p);
 800b4d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4d4:	f000 faa8 	bl	800ba28 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	e0a7      	b.n	800b62c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b4dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b4de:	3303      	adds	r3, #3
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	f023 0303 	bic.w	r3, r3, #3
 800b4e6:	b29b      	uxth	r3, r3
 800b4e8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b4ec:	b29b      	uxth	r3, r3
 800b4ee:	8b7a      	ldrh	r2, [r7, #26]
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	bf28      	it	cs
 800b4f4:	4613      	movcs	r3, r2
 800b4f6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b4f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b4fa:	3310      	adds	r3, #16
 800b4fc:	693a      	ldr	r2, [r7, #16]
 800b4fe:	4413      	add	r3, r2
 800b500:	3303      	adds	r3, #3
 800b502:	f023 0303 	bic.w	r3, r3, #3
 800b506:	4618      	mov	r0, r3
 800b508:	89f9      	ldrh	r1, [r7, #14]
 800b50a:	8b7a      	ldrh	r2, [r7, #26]
 800b50c:	2300      	movs	r3, #0
 800b50e:	9301      	str	r3, [sp, #4]
 800b510:	887b      	ldrh	r3, [r7, #2]
 800b512:	9300      	str	r3, [sp, #0]
 800b514:	460b      	mov	r3, r1
 800b516:	4601      	mov	r1, r0
 800b518:	6938      	ldr	r0, [r7, #16]
 800b51a:	f7ff ff77 	bl	800b40c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	f003 0303 	and.w	r3, r3, #3
 800b526:	2b00      	cmp	r3, #0
 800b528:	d006      	beq.n	800b538 <pbuf_alloc+0xd8>
 800b52a:	4b42      	ldr	r3, [pc, #264]	; (800b634 <pbuf_alloc+0x1d4>)
 800b52c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b530:	4941      	ldr	r1, [pc, #260]	; (800b638 <pbuf_alloc+0x1d8>)
 800b532:	4842      	ldr	r0, [pc, #264]	; (800b63c <pbuf_alloc+0x1dc>)
 800b534:	f009 fc2a 	bl	8014d8c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b538:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b53a:	3303      	adds	r3, #3
 800b53c:	f023 0303 	bic.w	r3, r3, #3
 800b540:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b544:	d106      	bne.n	800b554 <pbuf_alloc+0xf4>
 800b546:	4b3b      	ldr	r3, [pc, #236]	; (800b634 <pbuf_alloc+0x1d4>)
 800b548:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b54c:	493c      	ldr	r1, [pc, #240]	; (800b640 <pbuf_alloc+0x1e0>)
 800b54e:	483b      	ldr	r0, [pc, #236]	; (800b63c <pbuf_alloc+0x1dc>)
 800b550:	f009 fc1c 	bl	8014d8c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b556:	2b00      	cmp	r3, #0
 800b558:	d102      	bne.n	800b560 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	627b      	str	r3, [r7, #36]	; 0x24
 800b55e:	e002      	b.n	800b566 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b560:	69fb      	ldr	r3, [r7, #28]
 800b562:	693a      	ldr	r2, [r7, #16]
 800b564:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b56a:	8b7a      	ldrh	r2, [r7, #26]
 800b56c:	89fb      	ldrh	r3, [r7, #14]
 800b56e:	1ad3      	subs	r3, r2, r3
 800b570:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b572:	2300      	movs	r3, #0
 800b574:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b576:	8b7b      	ldrh	r3, [r7, #26]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d19e      	bne.n	800b4ba <pbuf_alloc+0x5a>
      break;
 800b57c:	e055      	b.n	800b62a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b57e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b580:	3303      	adds	r3, #3
 800b582:	b29b      	uxth	r3, r3
 800b584:	f023 0303 	bic.w	r3, r3, #3
 800b588:	b29a      	uxth	r2, r3
 800b58a:	88bb      	ldrh	r3, [r7, #4]
 800b58c:	3303      	adds	r3, #3
 800b58e:	b29b      	uxth	r3, r3
 800b590:	f023 0303 	bic.w	r3, r3, #3
 800b594:	b29b      	uxth	r3, r3
 800b596:	4413      	add	r3, r2
 800b598:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b59a:	8b3b      	ldrh	r3, [r7, #24]
 800b59c:	3310      	adds	r3, #16
 800b59e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b5a0:	8b3a      	ldrh	r2, [r7, #24]
 800b5a2:	88bb      	ldrh	r3, [r7, #4]
 800b5a4:	3303      	adds	r3, #3
 800b5a6:	f023 0303 	bic.w	r3, r3, #3
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d306      	bcc.n	800b5bc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b5ae:	8afa      	ldrh	r2, [r7, #22]
 800b5b0:	88bb      	ldrh	r3, [r7, #4]
 800b5b2:	3303      	adds	r3, #3
 800b5b4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	d201      	bcs.n	800b5c0 <pbuf_alloc+0x160>
        return NULL;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	e035      	b.n	800b62c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b5c0:	8afb      	ldrh	r3, [r7, #22]
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7ff f9ba 	bl	800a93c <mem_malloc>
 800b5c8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d101      	bne.n	800b5d4 <pbuf_alloc+0x174>
        return NULL;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	e02b      	b.n	800b62c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b5d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b5d6:	3310      	adds	r3, #16
 800b5d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5da:	4413      	add	r3, r2
 800b5dc:	3303      	adds	r3, #3
 800b5de:	f023 0303 	bic.w	r3, r3, #3
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	88b9      	ldrh	r1, [r7, #4]
 800b5e6:	88ba      	ldrh	r2, [r7, #4]
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	9301      	str	r3, [sp, #4]
 800b5ec:	887b      	ldrh	r3, [r7, #2]
 800b5ee:	9300      	str	r3, [sp, #0]
 800b5f0:	460b      	mov	r3, r1
 800b5f2:	4601      	mov	r1, r0
 800b5f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b5f6:	f7ff ff09 	bl	800b40c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fc:	685b      	ldr	r3, [r3, #4]
 800b5fe:	f003 0303 	and.w	r3, r3, #3
 800b602:	2b00      	cmp	r3, #0
 800b604:	d010      	beq.n	800b628 <pbuf_alloc+0x1c8>
 800b606:	4b0b      	ldr	r3, [pc, #44]	; (800b634 <pbuf_alloc+0x1d4>)
 800b608:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b60c:	490d      	ldr	r1, [pc, #52]	; (800b644 <pbuf_alloc+0x1e4>)
 800b60e:	480b      	ldr	r0, [pc, #44]	; (800b63c <pbuf_alloc+0x1dc>)
 800b610:	f009 fbbc 	bl	8014d8c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b614:	e008      	b.n	800b628 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b616:	4b07      	ldr	r3, [pc, #28]	; (800b634 <pbuf_alloc+0x1d4>)
 800b618:	f240 1227 	movw	r2, #295	; 0x127
 800b61c:	490a      	ldr	r1, [pc, #40]	; (800b648 <pbuf_alloc+0x1e8>)
 800b61e:	4807      	ldr	r0, [pc, #28]	; (800b63c <pbuf_alloc+0x1dc>)
 800b620:	f009 fbb4 	bl	8014d8c <iprintf>
      return NULL;
 800b624:	2300      	movs	r3, #0
 800b626:	e001      	b.n	800b62c <pbuf_alloc+0x1cc>
      break;
 800b628:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3728      	adds	r7, #40	; 0x28
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}
 800b634:	080164d0 	.word	0x080164d0
 800b638:	08016500 	.word	0x08016500
 800b63c:	08016530 	.word	0x08016530
 800b640:	08016558 	.word	0x08016558
 800b644:	0801658c 	.word	0x0801658c
 800b648:	080165b8 	.word	0x080165b8

0800b64c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b086      	sub	sp, #24
 800b650:	af02      	add	r7, sp, #8
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	460b      	mov	r3, r1
 800b656:	807b      	strh	r3, [r7, #2]
 800b658:	4613      	mov	r3, r2
 800b65a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b65c:	883b      	ldrh	r3, [r7, #0]
 800b65e:	2b41      	cmp	r3, #65	; 0x41
 800b660:	d009      	beq.n	800b676 <pbuf_alloc_reference+0x2a>
 800b662:	883b      	ldrh	r3, [r7, #0]
 800b664:	2b01      	cmp	r3, #1
 800b666:	d006      	beq.n	800b676 <pbuf_alloc_reference+0x2a>
 800b668:	4b0f      	ldr	r3, [pc, #60]	; (800b6a8 <pbuf_alloc_reference+0x5c>)
 800b66a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b66e:	490f      	ldr	r1, [pc, #60]	; (800b6ac <pbuf_alloc_reference+0x60>)
 800b670:	480f      	ldr	r0, [pc, #60]	; (800b6b0 <pbuf_alloc_reference+0x64>)
 800b672:	f009 fb8b 	bl	8014d8c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b676:	2007      	movs	r0, #7
 800b678:	f7ff faf0 	bl	800ac5c <memp_malloc>
 800b67c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d101      	bne.n	800b688 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b684:	2300      	movs	r3, #0
 800b686:	e00b      	b.n	800b6a0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b688:	8879      	ldrh	r1, [r7, #2]
 800b68a:	887a      	ldrh	r2, [r7, #2]
 800b68c:	2300      	movs	r3, #0
 800b68e:	9301      	str	r3, [sp, #4]
 800b690:	883b      	ldrh	r3, [r7, #0]
 800b692:	9300      	str	r3, [sp, #0]
 800b694:	460b      	mov	r3, r1
 800b696:	6879      	ldr	r1, [r7, #4]
 800b698:	68f8      	ldr	r0, [r7, #12]
 800b69a:	f7ff feb7 	bl	800b40c <pbuf_init_alloced_pbuf>
  return p;
 800b69e:	68fb      	ldr	r3, [r7, #12]
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3710      	adds	r7, #16
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}
 800b6a8:	080164d0 	.word	0x080164d0
 800b6ac:	080165d4 	.word	0x080165d4
 800b6b0:	08016530 	.word	0x08016530

0800b6b4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b088      	sub	sp, #32
 800b6b8:	af02      	add	r7, sp, #8
 800b6ba:	607b      	str	r3, [r7, #4]
 800b6bc:	4603      	mov	r3, r0
 800b6be:	73fb      	strb	r3, [r7, #15]
 800b6c0:	460b      	mov	r3, r1
 800b6c2:	81bb      	strh	r3, [r7, #12]
 800b6c4:	4613      	mov	r3, r2
 800b6c6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b6c8:	7bfb      	ldrb	r3, [r7, #15]
 800b6ca:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b6cc:	8a7b      	ldrh	r3, [r7, #18]
 800b6ce:	3303      	adds	r3, #3
 800b6d0:	f023 0203 	bic.w	r2, r3, #3
 800b6d4:	89bb      	ldrh	r3, [r7, #12]
 800b6d6:	441a      	add	r2, r3
 800b6d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d901      	bls.n	800b6e2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	e018      	b.n	800b714 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b6e2:	6a3b      	ldr	r3, [r7, #32]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d007      	beq.n	800b6f8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b6e8:	8a7b      	ldrh	r3, [r7, #18]
 800b6ea:	3303      	adds	r3, #3
 800b6ec:	f023 0303 	bic.w	r3, r3, #3
 800b6f0:	6a3a      	ldr	r2, [r7, #32]
 800b6f2:	4413      	add	r3, r2
 800b6f4:	617b      	str	r3, [r7, #20]
 800b6f6:	e001      	b.n	800b6fc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	89b9      	ldrh	r1, [r7, #12]
 800b700:	89ba      	ldrh	r2, [r7, #12]
 800b702:	2302      	movs	r3, #2
 800b704:	9301      	str	r3, [sp, #4]
 800b706:	897b      	ldrh	r3, [r7, #10]
 800b708:	9300      	str	r3, [sp, #0]
 800b70a:	460b      	mov	r3, r1
 800b70c:	6979      	ldr	r1, [r7, #20]
 800b70e:	f7ff fe7d 	bl	800b40c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b712:	687b      	ldr	r3, [r7, #4]
}
 800b714:	4618      	mov	r0, r3
 800b716:	3718      	adds	r7, #24
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b084      	sub	sp, #16
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	460b      	mov	r3, r1
 800b726:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d106      	bne.n	800b73c <pbuf_realloc+0x20>
 800b72e:	4b3a      	ldr	r3, [pc, #232]	; (800b818 <pbuf_realloc+0xfc>)
 800b730:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b734:	4939      	ldr	r1, [pc, #228]	; (800b81c <pbuf_realloc+0x100>)
 800b736:	483a      	ldr	r0, [pc, #232]	; (800b820 <pbuf_realloc+0x104>)
 800b738:	f009 fb28 	bl	8014d8c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	891b      	ldrh	r3, [r3, #8]
 800b740:	887a      	ldrh	r2, [r7, #2]
 800b742:	429a      	cmp	r2, r3
 800b744:	d263      	bcs.n	800b80e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	891a      	ldrh	r2, [r3, #8]
 800b74a:	887b      	ldrh	r3, [r7, #2]
 800b74c:	1ad3      	subs	r3, r2, r3
 800b74e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b750:	887b      	ldrh	r3, [r7, #2]
 800b752:	817b      	strh	r3, [r7, #10]
  q = p;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b758:	e018      	b.n	800b78c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	895b      	ldrh	r3, [r3, #10]
 800b75e:	897a      	ldrh	r2, [r7, #10]
 800b760:	1ad3      	subs	r3, r2, r3
 800b762:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	891a      	ldrh	r2, [r3, #8]
 800b768:	893b      	ldrh	r3, [r7, #8]
 800b76a:	1ad3      	subs	r3, r2, r3
 800b76c:	b29a      	uxth	r2, r3
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d106      	bne.n	800b78c <pbuf_realloc+0x70>
 800b77e:	4b26      	ldr	r3, [pc, #152]	; (800b818 <pbuf_realloc+0xfc>)
 800b780:	f240 12af 	movw	r2, #431	; 0x1af
 800b784:	4927      	ldr	r1, [pc, #156]	; (800b824 <pbuf_realloc+0x108>)
 800b786:	4826      	ldr	r0, [pc, #152]	; (800b820 <pbuf_realloc+0x104>)
 800b788:	f009 fb00 	bl	8014d8c <iprintf>
  while (rem_len > q->len) {
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	895b      	ldrh	r3, [r3, #10]
 800b790:	897a      	ldrh	r2, [r7, #10]
 800b792:	429a      	cmp	r2, r3
 800b794:	d8e1      	bhi.n	800b75a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	7b1b      	ldrb	r3, [r3, #12]
 800b79a:	f003 030f 	and.w	r3, r3, #15
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d121      	bne.n	800b7e6 <pbuf_realloc+0xca>
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	895b      	ldrh	r3, [r3, #10]
 800b7a6:	897a      	ldrh	r2, [r7, #10]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d01c      	beq.n	800b7e6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	7b5b      	ldrb	r3, [r3, #13]
 800b7b0:	f003 0302 	and.w	r3, r3, #2
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d116      	bne.n	800b7e6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	685a      	ldr	r2, [r3, #4]
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	1ad3      	subs	r3, r2, r3
 800b7c0:	b29a      	uxth	r2, r3
 800b7c2:	897b      	ldrh	r3, [r7, #10]
 800b7c4:	4413      	add	r3, r2
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	68f8      	ldr	r0, [r7, #12]
 800b7cc:	f7fe ffba 	bl	800a744 <mem_trim>
 800b7d0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d106      	bne.n	800b7e6 <pbuf_realloc+0xca>
 800b7d8:	4b0f      	ldr	r3, [pc, #60]	; (800b818 <pbuf_realloc+0xfc>)
 800b7da:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b7de:	4912      	ldr	r1, [pc, #72]	; (800b828 <pbuf_realloc+0x10c>)
 800b7e0:	480f      	ldr	r0, [pc, #60]	; (800b820 <pbuf_realloc+0x104>)
 800b7e2:	f009 fad3 	bl	8014d8c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	897a      	ldrh	r2, [r7, #10]
 800b7ea:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	895a      	ldrh	r2, [r3, #10]
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d004      	beq.n	800b806 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4618      	mov	r0, r3
 800b802:	f000 f911 	bl	800ba28 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2200      	movs	r2, #0
 800b80a:	601a      	str	r2, [r3, #0]
 800b80c:	e000      	b.n	800b810 <pbuf_realloc+0xf4>
    return;
 800b80e:	bf00      	nop

}
 800b810:	3710      	adds	r7, #16
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop
 800b818:	080164d0 	.word	0x080164d0
 800b81c:	080165e8 	.word	0x080165e8
 800b820:	08016530 	.word	0x08016530
 800b824:	08016600 	.word	0x08016600
 800b828:	08016618 	.word	0x08016618

0800b82c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b086      	sub	sp, #24
 800b830:	af00      	add	r7, sp, #0
 800b832:	60f8      	str	r0, [r7, #12]
 800b834:	60b9      	str	r1, [r7, #8]
 800b836:	4613      	mov	r3, r2
 800b838:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d106      	bne.n	800b84e <pbuf_add_header_impl+0x22>
 800b840:	4b2b      	ldr	r3, [pc, #172]	; (800b8f0 <pbuf_add_header_impl+0xc4>)
 800b842:	f240 12df 	movw	r2, #479	; 0x1df
 800b846:	492b      	ldr	r1, [pc, #172]	; (800b8f4 <pbuf_add_header_impl+0xc8>)
 800b848:	482b      	ldr	r0, [pc, #172]	; (800b8f8 <pbuf_add_header_impl+0xcc>)
 800b84a:	f009 fa9f 	bl	8014d8c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d003      	beq.n	800b85c <pbuf_add_header_impl+0x30>
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b85a:	d301      	bcc.n	800b860 <pbuf_add_header_impl+0x34>
    return 1;
 800b85c:	2301      	movs	r3, #1
 800b85e:	e043      	b.n	800b8e8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d101      	bne.n	800b86a <pbuf_add_header_impl+0x3e>
    return 0;
 800b866:	2300      	movs	r3, #0
 800b868:	e03e      	b.n	800b8e8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	891a      	ldrh	r2, [r3, #8]
 800b872:	8a7b      	ldrh	r3, [r7, #18]
 800b874:	4413      	add	r3, r2
 800b876:	b29b      	uxth	r3, r3
 800b878:	8a7a      	ldrh	r2, [r7, #18]
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d901      	bls.n	800b882 <pbuf_add_header_impl+0x56>
    return 1;
 800b87e:	2301      	movs	r3, #1
 800b880:	e032      	b.n	800b8e8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	7b1b      	ldrb	r3, [r3, #12]
 800b886:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b888:	8a3b      	ldrh	r3, [r7, #16]
 800b88a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d00c      	beq.n	800b8ac <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	685a      	ldr	r2, [r3, #4]
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	425b      	negs	r3, r3
 800b89a:	4413      	add	r3, r2
 800b89c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	3310      	adds	r3, #16
 800b8a2:	697a      	ldr	r2, [r7, #20]
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d20d      	bcs.n	800b8c4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e01d      	b.n	800b8e8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b8ac:	79fb      	ldrb	r3, [r7, #7]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d006      	beq.n	800b8c0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	685a      	ldr	r2, [r3, #4]
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	425b      	negs	r3, r3
 800b8ba:	4413      	add	r3, r2
 800b8bc:	617b      	str	r3, [r7, #20]
 800b8be:	e001      	b.n	800b8c4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	e011      	b.n	800b8e8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	697a      	ldr	r2, [r7, #20]
 800b8c8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	895a      	ldrh	r2, [r3, #10]
 800b8ce:	8a7b      	ldrh	r3, [r7, #18]
 800b8d0:	4413      	add	r3, r2
 800b8d2:	b29a      	uxth	r2, r3
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	891a      	ldrh	r2, [r3, #8]
 800b8dc:	8a7b      	ldrh	r3, [r7, #18]
 800b8de:	4413      	add	r3, r2
 800b8e0:	b29a      	uxth	r2, r3
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	811a      	strh	r2, [r3, #8]


  return 0;
 800b8e6:	2300      	movs	r3, #0
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3718      	adds	r7, #24
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}
 800b8f0:	080164d0 	.word	0x080164d0
 800b8f4:	08016634 	.word	0x08016634
 800b8f8:	08016530 	.word	0x08016530

0800b8fc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b082      	sub	sp, #8
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b906:	2200      	movs	r2, #0
 800b908:	6839      	ldr	r1, [r7, #0]
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f7ff ff8e 	bl	800b82c <pbuf_add_header_impl>
 800b910:	4603      	mov	r3, r0
}
 800b912:	4618      	mov	r0, r3
 800b914:	3708      	adds	r7, #8
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
	...

0800b91c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b084      	sub	sp, #16
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d106      	bne.n	800b93a <pbuf_remove_header+0x1e>
 800b92c:	4b20      	ldr	r3, [pc, #128]	; (800b9b0 <pbuf_remove_header+0x94>)
 800b92e:	f240 224b 	movw	r2, #587	; 0x24b
 800b932:	4920      	ldr	r1, [pc, #128]	; (800b9b4 <pbuf_remove_header+0x98>)
 800b934:	4820      	ldr	r0, [pc, #128]	; (800b9b8 <pbuf_remove_header+0x9c>)
 800b936:	f009 fa29 	bl	8014d8c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d003      	beq.n	800b948 <pbuf_remove_header+0x2c>
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b946:	d301      	bcc.n	800b94c <pbuf_remove_header+0x30>
    return 1;
 800b948:	2301      	movs	r3, #1
 800b94a:	e02c      	b.n	800b9a6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d101      	bne.n	800b956 <pbuf_remove_header+0x3a>
    return 0;
 800b952:	2300      	movs	r3, #0
 800b954:	e027      	b.n	800b9a6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	895b      	ldrh	r3, [r3, #10]
 800b95e:	89fa      	ldrh	r2, [r7, #14]
 800b960:	429a      	cmp	r2, r3
 800b962:	d908      	bls.n	800b976 <pbuf_remove_header+0x5a>
 800b964:	4b12      	ldr	r3, [pc, #72]	; (800b9b0 <pbuf_remove_header+0x94>)
 800b966:	f240 2255 	movw	r2, #597	; 0x255
 800b96a:	4914      	ldr	r1, [pc, #80]	; (800b9bc <pbuf_remove_header+0xa0>)
 800b96c:	4812      	ldr	r0, [pc, #72]	; (800b9b8 <pbuf_remove_header+0x9c>)
 800b96e:	f009 fa0d 	bl	8014d8c <iprintf>
 800b972:	2301      	movs	r3, #1
 800b974:	e017      	b.n	800b9a6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	685a      	ldr	r2, [r3, #4]
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	441a      	add	r2, r3
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	895a      	ldrh	r2, [r3, #10]
 800b98c:	89fb      	ldrh	r3, [r7, #14]
 800b98e:	1ad3      	subs	r3, r2, r3
 800b990:	b29a      	uxth	r2, r3
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	891a      	ldrh	r2, [r3, #8]
 800b99a:	89fb      	ldrh	r3, [r7, #14]
 800b99c:	1ad3      	subs	r3, r2, r3
 800b99e:	b29a      	uxth	r2, r3
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b9a4:	2300      	movs	r3, #0
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3710      	adds	r7, #16
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
 800b9ae:	bf00      	nop
 800b9b0:	080164d0 	.word	0x080164d0
 800b9b4:	08016634 	.word	0x08016634
 800b9b8:	08016530 	.word	0x08016530
 800b9bc:	08016640 	.word	0x08016640

0800b9c0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	807b      	strh	r3, [r7, #2]
 800b9cc:	4613      	mov	r3, r2
 800b9ce:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b9d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	da08      	bge.n	800b9ea <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b9d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b9dc:	425b      	negs	r3, r3
 800b9de:	4619      	mov	r1, r3
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f7ff ff9b 	bl	800b91c <pbuf_remove_header>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	e007      	b.n	800b9fa <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b9ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b9ee:	787a      	ldrb	r2, [r7, #1]
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f7ff ff1a 	bl	800b82c <pbuf_add_header_impl>
 800b9f8:	4603      	mov	r3, r0
  }
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3708      	adds	r7, #8
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}

0800ba02 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ba02:	b580      	push	{r7, lr}
 800ba04:	b082      	sub	sp, #8
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	6078      	str	r0, [r7, #4]
 800ba0a:	460b      	mov	r3, r1
 800ba0c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ba0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ba12:	2201      	movs	r2, #1
 800ba14:	4619      	mov	r1, r3
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f7ff ffd2 	bl	800b9c0 <pbuf_header_impl>
 800ba1c:	4603      	mov	r3, r0
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3708      	adds	r7, #8
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
	...

0800ba28 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b086      	sub	sp, #24
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d10b      	bne.n	800ba4e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d106      	bne.n	800ba4a <pbuf_free+0x22>
 800ba3c:	4b38      	ldr	r3, [pc, #224]	; (800bb20 <pbuf_free+0xf8>)
 800ba3e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ba42:	4938      	ldr	r1, [pc, #224]	; (800bb24 <pbuf_free+0xfc>)
 800ba44:	4838      	ldr	r0, [pc, #224]	; (800bb28 <pbuf_free+0x100>)
 800ba46:	f009 f9a1 	bl	8014d8c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	e063      	b.n	800bb16 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ba52:	e05c      	b.n	800bb0e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	7b9b      	ldrb	r3, [r3, #14]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d106      	bne.n	800ba6a <pbuf_free+0x42>
 800ba5c:	4b30      	ldr	r3, [pc, #192]	; (800bb20 <pbuf_free+0xf8>)
 800ba5e:	f240 22f1 	movw	r2, #753	; 0x2f1
 800ba62:	4932      	ldr	r1, [pc, #200]	; (800bb2c <pbuf_free+0x104>)
 800ba64:	4830      	ldr	r0, [pc, #192]	; (800bb28 <pbuf_free+0x100>)
 800ba66:	f009 f991 	bl	8014d8c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	7b9b      	ldrb	r3, [r3, #14]
 800ba6e:	3b01      	subs	r3, #1
 800ba70:	b2da      	uxtb	r2, r3
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	739a      	strb	r2, [r3, #14]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	7b9b      	ldrb	r3, [r3, #14]
 800ba7a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ba7c:	7dbb      	ldrb	r3, [r7, #22]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d143      	bne.n	800bb0a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	7b1b      	ldrb	r3, [r3, #12]
 800ba8c:	f003 030f 	and.w	r3, r3, #15
 800ba90:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	7b5b      	ldrb	r3, [r3, #13]
 800ba96:	f003 0302 	and.w	r3, r3, #2
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d011      	beq.n	800bac2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	691b      	ldr	r3, [r3, #16]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d106      	bne.n	800bab8 <pbuf_free+0x90>
 800baaa:	4b1d      	ldr	r3, [pc, #116]	; (800bb20 <pbuf_free+0xf8>)
 800baac:	f240 22ff 	movw	r2, #767	; 0x2ff
 800bab0:	491f      	ldr	r1, [pc, #124]	; (800bb30 <pbuf_free+0x108>)
 800bab2:	481d      	ldr	r0, [pc, #116]	; (800bb28 <pbuf_free+0x100>)
 800bab4:	f009 f96a 	bl	8014d8c <iprintf>
        pc->custom_free_function(p);
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	691b      	ldr	r3, [r3, #16]
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	4798      	blx	r3
 800bac0:	e01d      	b.n	800bafe <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800bac2:	7bfb      	ldrb	r3, [r7, #15]
 800bac4:	2b02      	cmp	r3, #2
 800bac6:	d104      	bne.n	800bad2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800bac8:	6879      	ldr	r1, [r7, #4]
 800baca:	2008      	movs	r0, #8
 800bacc:	f7ff f936 	bl	800ad3c <memp_free>
 800bad0:	e015      	b.n	800bafe <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800bad2:	7bfb      	ldrb	r3, [r7, #15]
 800bad4:	2b01      	cmp	r3, #1
 800bad6:	d104      	bne.n	800bae2 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800bad8:	6879      	ldr	r1, [r7, #4]
 800bada:	2007      	movs	r0, #7
 800badc:	f7ff f92e 	bl	800ad3c <memp_free>
 800bae0:	e00d      	b.n	800bafe <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800bae2:	7bfb      	ldrb	r3, [r7, #15]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d103      	bne.n	800baf0 <pbuf_free+0xc8>
          mem_free(p);
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f7fe fdc1 	bl	800a670 <mem_free>
 800baee:	e006      	b.n	800bafe <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800baf0:	4b0b      	ldr	r3, [pc, #44]	; (800bb20 <pbuf_free+0xf8>)
 800baf2:	f240 320f 	movw	r2, #783	; 0x30f
 800baf6:	490f      	ldr	r1, [pc, #60]	; (800bb34 <pbuf_free+0x10c>)
 800baf8:	480b      	ldr	r0, [pc, #44]	; (800bb28 <pbuf_free+0x100>)
 800bafa:	f009 f947 	bl	8014d8c <iprintf>
        }
      }
      count++;
 800bafe:	7dfb      	ldrb	r3, [r7, #23]
 800bb00:	3301      	adds	r3, #1
 800bb02:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	607b      	str	r3, [r7, #4]
 800bb08:	e001      	b.n	800bb0e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d19f      	bne.n	800ba54 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800bb14:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3718      	adds	r7, #24
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
 800bb1e:	bf00      	nop
 800bb20:	080164d0 	.word	0x080164d0
 800bb24:	08016634 	.word	0x08016634
 800bb28:	08016530 	.word	0x08016530
 800bb2c:	08016660 	.word	0x08016660
 800bb30:	08016678 	.word	0x08016678
 800bb34:	0801669c 	.word	0x0801669c

0800bb38 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b085      	sub	sp, #20
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800bb40:	2300      	movs	r3, #0
 800bb42:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800bb44:	e005      	b.n	800bb52 <pbuf_clen+0x1a>
    ++len;
 800bb46:	89fb      	ldrh	r3, [r7, #14]
 800bb48:	3301      	adds	r3, #1
 800bb4a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d1f6      	bne.n	800bb46 <pbuf_clen+0xe>
  }
  return len;
 800bb58:	89fb      	ldrh	r3, [r7, #14]
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3714      	adds	r7, #20
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr
	...

0800bb68 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b082      	sub	sp, #8
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d010      	beq.n	800bb98 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	7b9b      	ldrb	r3, [r3, #14]
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	b2da      	uxtb	r2, r3
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	7b9b      	ldrb	r3, [r3, #14]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d106      	bne.n	800bb98 <pbuf_ref+0x30>
 800bb8a:	4b05      	ldr	r3, [pc, #20]	; (800bba0 <pbuf_ref+0x38>)
 800bb8c:	f240 3242 	movw	r2, #834	; 0x342
 800bb90:	4904      	ldr	r1, [pc, #16]	; (800bba4 <pbuf_ref+0x3c>)
 800bb92:	4805      	ldr	r0, [pc, #20]	; (800bba8 <pbuf_ref+0x40>)
 800bb94:	f009 f8fa 	bl	8014d8c <iprintf>
  }
}
 800bb98:	bf00      	nop
 800bb9a:	3708      	adds	r7, #8
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	080164d0 	.word	0x080164d0
 800bba4:	080166b0 	.word	0x080166b0
 800bba8:	08016530 	.word	0x08016530

0800bbac <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b084      	sub	sp, #16
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d002      	beq.n	800bbc2 <pbuf_cat+0x16>
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d107      	bne.n	800bbd2 <pbuf_cat+0x26>
 800bbc2:	4b20      	ldr	r3, [pc, #128]	; (800bc44 <pbuf_cat+0x98>)
 800bbc4:	f240 3259 	movw	r2, #857	; 0x359
 800bbc8:	491f      	ldr	r1, [pc, #124]	; (800bc48 <pbuf_cat+0x9c>)
 800bbca:	4820      	ldr	r0, [pc, #128]	; (800bc4c <pbuf_cat+0xa0>)
 800bbcc:	f009 f8de 	bl	8014d8c <iprintf>
 800bbd0:	e034      	b.n	800bc3c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	60fb      	str	r3, [r7, #12]
 800bbd6:	e00a      	b.n	800bbee <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	891a      	ldrh	r2, [r3, #8]
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	891b      	ldrh	r3, [r3, #8]
 800bbe0:	4413      	add	r3, r2
 800bbe2:	b29a      	uxth	r2, r3
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	60fb      	str	r3, [r7, #12]
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d1f0      	bne.n	800bbd8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	891a      	ldrh	r2, [r3, #8]
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	895b      	ldrh	r3, [r3, #10]
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d006      	beq.n	800bc10 <pbuf_cat+0x64>
 800bc02:	4b10      	ldr	r3, [pc, #64]	; (800bc44 <pbuf_cat+0x98>)
 800bc04:	f240 3262 	movw	r2, #866	; 0x362
 800bc08:	4911      	ldr	r1, [pc, #68]	; (800bc50 <pbuf_cat+0xa4>)
 800bc0a:	4810      	ldr	r0, [pc, #64]	; (800bc4c <pbuf_cat+0xa0>)
 800bc0c:	f009 f8be 	bl	8014d8c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d006      	beq.n	800bc26 <pbuf_cat+0x7a>
 800bc18:	4b0a      	ldr	r3, [pc, #40]	; (800bc44 <pbuf_cat+0x98>)
 800bc1a:	f240 3263 	movw	r2, #867	; 0x363
 800bc1e:	490d      	ldr	r1, [pc, #52]	; (800bc54 <pbuf_cat+0xa8>)
 800bc20:	480a      	ldr	r0, [pc, #40]	; (800bc4c <pbuf_cat+0xa0>)
 800bc22:	f009 f8b3 	bl	8014d8c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	891a      	ldrh	r2, [r3, #8]
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	891b      	ldrh	r3, [r3, #8]
 800bc2e:	4413      	add	r3, r2
 800bc30:	b29a      	uxth	r2, r3
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	683a      	ldr	r2, [r7, #0]
 800bc3a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800bc3c:	3710      	adds	r7, #16
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	080164d0 	.word	0x080164d0
 800bc48:	080166c4 	.word	0x080166c4
 800bc4c:	08016530 	.word	0x08016530
 800bc50:	080166fc 	.word	0x080166fc
 800bc54:	0801672c 	.word	0x0801672c

0800bc58 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b082      	sub	sp, #8
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800bc62:	6839      	ldr	r1, [r7, #0]
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f7ff ffa1 	bl	800bbac <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800bc6a:	6838      	ldr	r0, [r7, #0]
 800bc6c:	f7ff ff7c 	bl	800bb68 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800bc70:	bf00      	nop
 800bc72:	3708      	adds	r7, #8
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b086      	sub	sp, #24
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800bc82:	2300      	movs	r3, #0
 800bc84:	617b      	str	r3, [r7, #20]
 800bc86:	2300      	movs	r3, #0
 800bc88:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d008      	beq.n	800bca2 <pbuf_copy+0x2a>
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d005      	beq.n	800bca2 <pbuf_copy+0x2a>
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	891a      	ldrh	r2, [r3, #8]
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	891b      	ldrh	r3, [r3, #8]
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d209      	bcs.n	800bcb6 <pbuf_copy+0x3e>
 800bca2:	4b57      	ldr	r3, [pc, #348]	; (800be00 <pbuf_copy+0x188>)
 800bca4:	f240 32c9 	movw	r2, #969	; 0x3c9
 800bca8:	4956      	ldr	r1, [pc, #344]	; (800be04 <pbuf_copy+0x18c>)
 800bcaa:	4857      	ldr	r0, [pc, #348]	; (800be08 <pbuf_copy+0x190>)
 800bcac:	f009 f86e 	bl	8014d8c <iprintf>
 800bcb0:	f06f 030f 	mvn.w	r3, #15
 800bcb4:	e09f      	b.n	800bdf6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	895b      	ldrh	r3, [r3, #10]
 800bcba:	461a      	mov	r2, r3
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	1ad2      	subs	r2, r2, r3
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	895b      	ldrh	r3, [r3, #10]
 800bcc4:	4619      	mov	r1, r3
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	1acb      	subs	r3, r1, r3
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d306      	bcc.n	800bcdc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	895b      	ldrh	r3, [r3, #10]
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	1ad3      	subs	r3, r2, r3
 800bcd8:	60fb      	str	r3, [r7, #12]
 800bcda:	e005      	b.n	800bce8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	895b      	ldrh	r3, [r3, #10]
 800bce0:	461a      	mov	r2, r3
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	1ad3      	subs	r3, r2, r3
 800bce6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	685a      	ldr	r2, [r3, #4]
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	18d0      	adds	r0, r2, r3
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	685a      	ldr	r2, [r3, #4]
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	68fa      	ldr	r2, [r7, #12]
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	f009 f830 	bl	8014d60 <memcpy>
    offset_to += len;
 800bd00:	697a      	ldr	r2, [r7, #20]
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	4413      	add	r3, r2
 800bd06:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800bd08:	693a      	ldr	r2, [r7, #16]
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	4413      	add	r3, r2
 800bd0e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	895b      	ldrh	r3, [r3, #10]
 800bd14:	461a      	mov	r2, r3
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d906      	bls.n	800bd2a <pbuf_copy+0xb2>
 800bd1c:	4b38      	ldr	r3, [pc, #224]	; (800be00 <pbuf_copy+0x188>)
 800bd1e:	f240 32d9 	movw	r2, #985	; 0x3d9
 800bd22:	493a      	ldr	r1, [pc, #232]	; (800be0c <pbuf_copy+0x194>)
 800bd24:	4838      	ldr	r0, [pc, #224]	; (800be08 <pbuf_copy+0x190>)
 800bd26:	f009 f831 	bl	8014d8c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	895b      	ldrh	r3, [r3, #10]
 800bd2e:	461a      	mov	r2, r3
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d906      	bls.n	800bd44 <pbuf_copy+0xcc>
 800bd36:	4b32      	ldr	r3, [pc, #200]	; (800be00 <pbuf_copy+0x188>)
 800bd38:	f240 32da 	movw	r2, #986	; 0x3da
 800bd3c:	4934      	ldr	r1, [pc, #208]	; (800be10 <pbuf_copy+0x198>)
 800bd3e:	4832      	ldr	r0, [pc, #200]	; (800be08 <pbuf_copy+0x190>)
 800bd40:	f009 f824 	bl	8014d8c <iprintf>
    if (offset_from >= p_from->len) {
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	895b      	ldrh	r3, [r3, #10]
 800bd48:	461a      	mov	r2, r3
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	d304      	bcc.n	800bd5a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800bd50:	2300      	movs	r3, #0
 800bd52:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	895b      	ldrh	r3, [r3, #10]
 800bd5e:	461a      	mov	r2, r3
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d114      	bne.n	800bd90 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800bd66:	2300      	movs	r3, #0
 800bd68:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d10c      	bne.n	800bd90 <pbuf_copy+0x118>
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d009      	beq.n	800bd90 <pbuf_copy+0x118>
 800bd7c:	4b20      	ldr	r3, [pc, #128]	; (800be00 <pbuf_copy+0x188>)
 800bd7e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800bd82:	4924      	ldr	r1, [pc, #144]	; (800be14 <pbuf_copy+0x19c>)
 800bd84:	4820      	ldr	r0, [pc, #128]	; (800be08 <pbuf_copy+0x190>)
 800bd86:	f009 f801 	bl	8014d8c <iprintf>
 800bd8a:	f06f 030f 	mvn.w	r3, #15
 800bd8e:	e032      	b.n	800bdf6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d013      	beq.n	800bdbe <pbuf_copy+0x146>
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	895a      	ldrh	r2, [r3, #10]
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	891b      	ldrh	r3, [r3, #8]
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d10d      	bne.n	800bdbe <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d009      	beq.n	800bdbe <pbuf_copy+0x146>
 800bdaa:	4b15      	ldr	r3, [pc, #84]	; (800be00 <pbuf_copy+0x188>)
 800bdac:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800bdb0:	4919      	ldr	r1, [pc, #100]	; (800be18 <pbuf_copy+0x1a0>)
 800bdb2:	4815      	ldr	r0, [pc, #84]	; (800be08 <pbuf_copy+0x190>)
 800bdb4:	f008 ffea 	bl	8014d8c <iprintf>
 800bdb8:	f06f 0305 	mvn.w	r3, #5
 800bdbc:	e01b      	b.n	800bdf6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d013      	beq.n	800bdec <pbuf_copy+0x174>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	895a      	ldrh	r2, [r3, #10]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	891b      	ldrh	r3, [r3, #8]
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d10d      	bne.n	800bdec <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d009      	beq.n	800bdec <pbuf_copy+0x174>
 800bdd8:	4b09      	ldr	r3, [pc, #36]	; (800be00 <pbuf_copy+0x188>)
 800bdda:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800bdde:	490e      	ldr	r1, [pc, #56]	; (800be18 <pbuf_copy+0x1a0>)
 800bde0:	4809      	ldr	r0, [pc, #36]	; (800be08 <pbuf_copy+0x190>)
 800bde2:	f008 ffd3 	bl	8014d8c <iprintf>
 800bde6:	f06f 0305 	mvn.w	r3, #5
 800bdea:	e004      	b.n	800bdf6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	f47f af61 	bne.w	800bcb6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800bdf4:	2300      	movs	r3, #0
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3718      	adds	r7, #24
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	080164d0 	.word	0x080164d0
 800be04:	08016778 	.word	0x08016778
 800be08:	08016530 	.word	0x08016530
 800be0c:	080167a8 	.word	0x080167a8
 800be10:	080167c0 	.word	0x080167c0
 800be14:	080167dc 	.word	0x080167dc
 800be18:	080167ec 	.word	0x080167ec

0800be1c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b088      	sub	sp, #32
 800be20:	af00      	add	r7, sp, #0
 800be22:	60f8      	str	r0, [r7, #12]
 800be24:	60b9      	str	r1, [r7, #8]
 800be26:	4611      	mov	r1, r2
 800be28:	461a      	mov	r2, r3
 800be2a:	460b      	mov	r3, r1
 800be2c:	80fb      	strh	r3, [r7, #6]
 800be2e:	4613      	mov	r3, r2
 800be30:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800be32:	2300      	movs	r3, #0
 800be34:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800be36:	2300      	movs	r3, #0
 800be38:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d108      	bne.n	800be52 <pbuf_copy_partial+0x36>
 800be40:	4b2b      	ldr	r3, [pc, #172]	; (800bef0 <pbuf_copy_partial+0xd4>)
 800be42:	f240 420a 	movw	r2, #1034	; 0x40a
 800be46:	492b      	ldr	r1, [pc, #172]	; (800bef4 <pbuf_copy_partial+0xd8>)
 800be48:	482b      	ldr	r0, [pc, #172]	; (800bef8 <pbuf_copy_partial+0xdc>)
 800be4a:	f008 ff9f 	bl	8014d8c <iprintf>
 800be4e:	2300      	movs	r3, #0
 800be50:	e04a      	b.n	800bee8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d108      	bne.n	800be6a <pbuf_copy_partial+0x4e>
 800be58:	4b25      	ldr	r3, [pc, #148]	; (800bef0 <pbuf_copy_partial+0xd4>)
 800be5a:	f240 420b 	movw	r2, #1035	; 0x40b
 800be5e:	4927      	ldr	r1, [pc, #156]	; (800befc <pbuf_copy_partial+0xe0>)
 800be60:	4825      	ldr	r0, [pc, #148]	; (800bef8 <pbuf_copy_partial+0xdc>)
 800be62:	f008 ff93 	bl	8014d8c <iprintf>
 800be66:	2300      	movs	r3, #0
 800be68:	e03e      	b.n	800bee8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	61fb      	str	r3, [r7, #28]
 800be6e:	e034      	b.n	800beda <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800be70:	88bb      	ldrh	r3, [r7, #4]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d00a      	beq.n	800be8c <pbuf_copy_partial+0x70>
 800be76:	69fb      	ldr	r3, [r7, #28]
 800be78:	895b      	ldrh	r3, [r3, #10]
 800be7a:	88ba      	ldrh	r2, [r7, #4]
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d305      	bcc.n	800be8c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800be80:	69fb      	ldr	r3, [r7, #28]
 800be82:	895b      	ldrh	r3, [r3, #10]
 800be84:	88ba      	ldrh	r2, [r7, #4]
 800be86:	1ad3      	subs	r3, r2, r3
 800be88:	80bb      	strh	r3, [r7, #4]
 800be8a:	e023      	b.n	800bed4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800be8c:	69fb      	ldr	r3, [r7, #28]
 800be8e:	895a      	ldrh	r2, [r3, #10]
 800be90:	88bb      	ldrh	r3, [r7, #4]
 800be92:	1ad3      	subs	r3, r2, r3
 800be94:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800be96:	8b3a      	ldrh	r2, [r7, #24]
 800be98:	88fb      	ldrh	r3, [r7, #6]
 800be9a:	429a      	cmp	r2, r3
 800be9c:	d901      	bls.n	800bea2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800be9e:	88fb      	ldrh	r3, [r7, #6]
 800bea0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800bea2:	8b7b      	ldrh	r3, [r7, #26]
 800bea4:	68ba      	ldr	r2, [r7, #8]
 800bea6:	18d0      	adds	r0, r2, r3
 800bea8:	69fb      	ldr	r3, [r7, #28]
 800beaa:	685a      	ldr	r2, [r3, #4]
 800beac:	88bb      	ldrh	r3, [r7, #4]
 800beae:	4413      	add	r3, r2
 800beb0:	8b3a      	ldrh	r2, [r7, #24]
 800beb2:	4619      	mov	r1, r3
 800beb4:	f008 ff54 	bl	8014d60 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800beb8:	8afa      	ldrh	r2, [r7, #22]
 800beba:	8b3b      	ldrh	r3, [r7, #24]
 800bebc:	4413      	add	r3, r2
 800bebe:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800bec0:	8b7a      	ldrh	r2, [r7, #26]
 800bec2:	8b3b      	ldrh	r3, [r7, #24]
 800bec4:	4413      	add	r3, r2
 800bec6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800bec8:	88fa      	ldrh	r2, [r7, #6]
 800beca:	8b3b      	ldrh	r3, [r7, #24]
 800becc:	1ad3      	subs	r3, r2, r3
 800bece:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800bed0:	2300      	movs	r3, #0
 800bed2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bed4:	69fb      	ldr	r3, [r7, #28]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	61fb      	str	r3, [r7, #28]
 800beda:	88fb      	ldrh	r3, [r7, #6]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d002      	beq.n	800bee6 <pbuf_copy_partial+0xca>
 800bee0:	69fb      	ldr	r3, [r7, #28]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d1c4      	bne.n	800be70 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800bee6:	8afb      	ldrh	r3, [r7, #22]
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3720      	adds	r7, #32
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}
 800bef0:	080164d0 	.word	0x080164d0
 800bef4:	08016818 	.word	0x08016818
 800bef8:	08016530 	.word	0x08016530
 800befc:	08016838 	.word	0x08016838

0800bf00 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b084      	sub	sp, #16
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	4603      	mov	r3, r0
 800bf08:	603a      	str	r2, [r7, #0]
 800bf0a:	71fb      	strb	r3, [r7, #7]
 800bf0c:	460b      	mov	r3, r1
 800bf0e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	8919      	ldrh	r1, [r3, #8]
 800bf14:	88ba      	ldrh	r2, [r7, #4]
 800bf16:	79fb      	ldrb	r3, [r7, #7]
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f7ff faa1 	bl	800b460 <pbuf_alloc>
 800bf1e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d101      	bne.n	800bf2a <pbuf_clone+0x2a>
    return NULL;
 800bf26:	2300      	movs	r3, #0
 800bf28:	e011      	b.n	800bf4e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800bf2a:	6839      	ldr	r1, [r7, #0]
 800bf2c:	68f8      	ldr	r0, [r7, #12]
 800bf2e:	f7ff fea3 	bl	800bc78 <pbuf_copy>
 800bf32:	4603      	mov	r3, r0
 800bf34:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800bf36:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d006      	beq.n	800bf4c <pbuf_clone+0x4c>
 800bf3e:	4b06      	ldr	r3, [pc, #24]	; (800bf58 <pbuf_clone+0x58>)
 800bf40:	f240 5224 	movw	r2, #1316	; 0x524
 800bf44:	4905      	ldr	r1, [pc, #20]	; (800bf5c <pbuf_clone+0x5c>)
 800bf46:	4806      	ldr	r0, [pc, #24]	; (800bf60 <pbuf_clone+0x60>)
 800bf48:	f008 ff20 	bl	8014d8c <iprintf>
  return q;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	3710      	adds	r7, #16
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}
 800bf56:	bf00      	nop
 800bf58:	080164d0 	.word	0x080164d0
 800bf5c:	08016944 	.word	0x08016944
 800bf60:	08016530 	.word	0x08016530

0800bf64 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bf68:	f008 ff28 	bl	8014dbc <rand>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	b29b      	uxth	r3, r3
 800bf70:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bf74:	b29b      	uxth	r3, r3
 800bf76:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bf7a:	b29a      	uxth	r2, r3
 800bf7c:	4b01      	ldr	r3, [pc, #4]	; (800bf84 <tcp_init+0x20>)
 800bf7e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bf80:	bf00      	nop
 800bf82:	bd80      	pop	{r7, pc}
 800bf84:	2400002c 	.word	0x2400002c

0800bf88 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b082      	sub	sp, #8
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	7d1b      	ldrb	r3, [r3, #20]
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	d105      	bne.n	800bfa4 <tcp_free+0x1c>
 800bf98:	4b06      	ldr	r3, [pc, #24]	; (800bfb4 <tcp_free+0x2c>)
 800bf9a:	22d4      	movs	r2, #212	; 0xd4
 800bf9c:	4906      	ldr	r1, [pc, #24]	; (800bfb8 <tcp_free+0x30>)
 800bf9e:	4807      	ldr	r0, [pc, #28]	; (800bfbc <tcp_free+0x34>)
 800bfa0:	f008 fef4 	bl	8014d8c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800bfa4:	6879      	ldr	r1, [r7, #4]
 800bfa6:	2001      	movs	r0, #1
 800bfa8:	f7fe fec8 	bl	800ad3c <memp_free>
}
 800bfac:	bf00      	nop
 800bfae:	3708      	adds	r7, #8
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}
 800bfb4:	080169d0 	.word	0x080169d0
 800bfb8:	08016a00 	.word	0x08016a00
 800bfbc:	08016a14 	.word	0x08016a14

0800bfc0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	7d1b      	ldrb	r3, [r3, #20]
 800bfcc:	2b01      	cmp	r3, #1
 800bfce:	d105      	bne.n	800bfdc <tcp_free_listen+0x1c>
 800bfd0:	4b06      	ldr	r3, [pc, #24]	; (800bfec <tcp_free_listen+0x2c>)
 800bfd2:	22df      	movs	r2, #223	; 0xdf
 800bfd4:	4906      	ldr	r1, [pc, #24]	; (800bff0 <tcp_free_listen+0x30>)
 800bfd6:	4807      	ldr	r0, [pc, #28]	; (800bff4 <tcp_free_listen+0x34>)
 800bfd8:	f008 fed8 	bl	8014d8c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800bfdc:	6879      	ldr	r1, [r7, #4]
 800bfde:	2002      	movs	r0, #2
 800bfe0:	f7fe feac 	bl	800ad3c <memp_free>
}
 800bfe4:	bf00      	nop
 800bfe6:	3708      	adds	r7, #8
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}
 800bfec:	080169d0 	.word	0x080169d0
 800bff0:	08016a3c 	.word	0x08016a3c
 800bff4:	08016a14 	.word	0x08016a14

0800bff8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800bffc:	f001 f85c 	bl	800d0b8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c000:	4b07      	ldr	r3, [pc, #28]	; (800c020 <tcp_tmr+0x28>)
 800c002:	781b      	ldrb	r3, [r3, #0]
 800c004:	3301      	adds	r3, #1
 800c006:	b2da      	uxtb	r2, r3
 800c008:	4b05      	ldr	r3, [pc, #20]	; (800c020 <tcp_tmr+0x28>)
 800c00a:	701a      	strb	r2, [r3, #0]
 800c00c:	4b04      	ldr	r3, [pc, #16]	; (800c020 <tcp_tmr+0x28>)
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	f003 0301 	and.w	r3, r3, #1
 800c014:	2b00      	cmp	r3, #0
 800c016:	d001      	beq.n	800c01c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c018:	f000 fd0e 	bl	800ca38 <tcp_slowtmr>
  }
}
 800c01c:	bf00      	nop
 800c01e:	bd80      	pop	{r7, pc}
 800c020:	240000f1 	.word	0x240000f1

0800c024 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d105      	bne.n	800c040 <tcp_remove_listener+0x1c>
 800c034:	4b0d      	ldr	r3, [pc, #52]	; (800c06c <tcp_remove_listener+0x48>)
 800c036:	22ff      	movs	r2, #255	; 0xff
 800c038:	490d      	ldr	r1, [pc, #52]	; (800c070 <tcp_remove_listener+0x4c>)
 800c03a:	480e      	ldr	r0, [pc, #56]	; (800c074 <tcp_remove_listener+0x50>)
 800c03c:	f008 fea6 	bl	8014d8c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	60fb      	str	r3, [r7, #12]
 800c044:	e00a      	b.n	800c05c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c04a:	683a      	ldr	r2, [r7, #0]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d102      	bne.n	800c056 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	2200      	movs	r2, #0
 800c054:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	68db      	ldr	r3, [r3, #12]
 800c05a:	60fb      	str	r3, [r7, #12]
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d1f1      	bne.n	800c046 <tcp_remove_listener+0x22>
    }
  }
}
 800c062:	bf00      	nop
 800c064:	bf00      	nop
 800c066:	3710      	adds	r7, #16
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	080169d0 	.word	0x080169d0
 800c070:	08016a58 	.word	0x08016a58
 800c074:	08016a14 	.word	0x08016a14

0800c078 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d106      	bne.n	800c094 <tcp_listen_closed+0x1c>
 800c086:	4b14      	ldr	r3, [pc, #80]	; (800c0d8 <tcp_listen_closed+0x60>)
 800c088:	f240 1211 	movw	r2, #273	; 0x111
 800c08c:	4913      	ldr	r1, [pc, #76]	; (800c0dc <tcp_listen_closed+0x64>)
 800c08e:	4814      	ldr	r0, [pc, #80]	; (800c0e0 <tcp_listen_closed+0x68>)
 800c090:	f008 fe7c 	bl	8014d8c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	7d1b      	ldrb	r3, [r3, #20]
 800c098:	2b01      	cmp	r3, #1
 800c09a:	d006      	beq.n	800c0aa <tcp_listen_closed+0x32>
 800c09c:	4b0e      	ldr	r3, [pc, #56]	; (800c0d8 <tcp_listen_closed+0x60>)
 800c09e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c0a2:	4910      	ldr	r1, [pc, #64]	; (800c0e4 <tcp_listen_closed+0x6c>)
 800c0a4:	480e      	ldr	r0, [pc, #56]	; (800c0e0 <tcp_listen_closed+0x68>)
 800c0a6:	f008 fe71 	bl	8014d8c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	60fb      	str	r3, [r7, #12]
 800c0ae:	e00b      	b.n	800c0c8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c0b0:	4a0d      	ldr	r2, [pc, #52]	; (800c0e8 <tcp_listen_closed+0x70>)
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	6879      	ldr	r1, [r7, #4]
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f7ff ffb1 	bl	800c024 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	3301      	adds	r3, #1
 800c0c6:	60fb      	str	r3, [r7, #12]
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	2b03      	cmp	r3, #3
 800c0cc:	d9f0      	bls.n	800c0b0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c0ce:	bf00      	nop
 800c0d0:	bf00      	nop
 800c0d2:	3710      	adds	r7, #16
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}
 800c0d8:	080169d0 	.word	0x080169d0
 800c0dc:	08016a80 	.word	0x08016a80
 800c0e0:	08016a14 	.word	0x08016a14
 800c0e4:	08016a8c 	.word	0x08016a8c
 800c0e8:	080197b0 	.word	0x080197b0

0800c0ec <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c0ec:	b5b0      	push	{r4, r5, r7, lr}
 800c0ee:	b088      	sub	sp, #32
 800c0f0:	af04      	add	r7, sp, #16
 800c0f2:	6078      	str	r0, [r7, #4]
 800c0f4:	460b      	mov	r3, r1
 800c0f6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d106      	bne.n	800c10c <tcp_close_shutdown+0x20>
 800c0fe:	4b63      	ldr	r3, [pc, #396]	; (800c28c <tcp_close_shutdown+0x1a0>)
 800c100:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c104:	4962      	ldr	r1, [pc, #392]	; (800c290 <tcp_close_shutdown+0x1a4>)
 800c106:	4863      	ldr	r0, [pc, #396]	; (800c294 <tcp_close_shutdown+0x1a8>)
 800c108:	f008 fe40 	bl	8014d8c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c10c:	78fb      	ldrb	r3, [r7, #3]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d066      	beq.n	800c1e0 <tcp_close_shutdown+0xf4>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	7d1b      	ldrb	r3, [r3, #20]
 800c116:	2b04      	cmp	r3, #4
 800c118:	d003      	beq.n	800c122 <tcp_close_shutdown+0x36>
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	7d1b      	ldrb	r3, [r3, #20]
 800c11e:	2b07      	cmp	r3, #7
 800c120:	d15e      	bne.n	800c1e0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c126:	2b00      	cmp	r3, #0
 800c128:	d104      	bne.n	800c134 <tcp_close_shutdown+0x48>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c12e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c132:	d055      	beq.n	800c1e0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	8b5b      	ldrh	r3, [r3, #26]
 800c138:	f003 0310 	and.w	r3, r3, #16
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d106      	bne.n	800c14e <tcp_close_shutdown+0x62>
 800c140:	4b52      	ldr	r3, [pc, #328]	; (800c28c <tcp_close_shutdown+0x1a0>)
 800c142:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c146:	4954      	ldr	r1, [pc, #336]	; (800c298 <tcp_close_shutdown+0x1ac>)
 800c148:	4852      	ldr	r0, [pc, #328]	; (800c294 <tcp_close_shutdown+0x1a8>)
 800c14a:	f008 fe1f 	bl	8014d8c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c156:	687d      	ldr	r5, [r7, #4]
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	3304      	adds	r3, #4
 800c15c:	687a      	ldr	r2, [r7, #4]
 800c15e:	8ad2      	ldrh	r2, [r2, #22]
 800c160:	6879      	ldr	r1, [r7, #4]
 800c162:	8b09      	ldrh	r1, [r1, #24]
 800c164:	9102      	str	r1, [sp, #8]
 800c166:	9201      	str	r2, [sp, #4]
 800c168:	9300      	str	r3, [sp, #0]
 800c16a:	462b      	mov	r3, r5
 800c16c:	4622      	mov	r2, r4
 800c16e:	4601      	mov	r1, r0
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f005 fd85 	bl	8011c80 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f001 fb66 	bl	800d848 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c17c:	4b47      	ldr	r3, [pc, #284]	; (800c29c <tcp_close_shutdown+0x1b0>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	687a      	ldr	r2, [r7, #4]
 800c182:	429a      	cmp	r2, r3
 800c184:	d105      	bne.n	800c192 <tcp_close_shutdown+0xa6>
 800c186:	4b45      	ldr	r3, [pc, #276]	; (800c29c <tcp_close_shutdown+0x1b0>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	68db      	ldr	r3, [r3, #12]
 800c18c:	4a43      	ldr	r2, [pc, #268]	; (800c29c <tcp_close_shutdown+0x1b0>)
 800c18e:	6013      	str	r3, [r2, #0]
 800c190:	e013      	b.n	800c1ba <tcp_close_shutdown+0xce>
 800c192:	4b42      	ldr	r3, [pc, #264]	; (800c29c <tcp_close_shutdown+0x1b0>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	60fb      	str	r3, [r7, #12]
 800c198:	e00c      	b.n	800c1b4 <tcp_close_shutdown+0xc8>
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	68db      	ldr	r3, [r3, #12]
 800c19e:	687a      	ldr	r2, [r7, #4]
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d104      	bne.n	800c1ae <tcp_close_shutdown+0xc2>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	68da      	ldr	r2, [r3, #12]
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	60da      	str	r2, [r3, #12]
 800c1ac:	e005      	b.n	800c1ba <tcp_close_shutdown+0xce>
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	68db      	ldr	r3, [r3, #12]
 800c1b2:	60fb      	str	r3, [r7, #12]
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d1ef      	bne.n	800c19a <tcp_close_shutdown+0xae>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	60da      	str	r2, [r3, #12]
 800c1c0:	4b37      	ldr	r3, [pc, #220]	; (800c2a0 <tcp_close_shutdown+0x1b4>)
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c1c6:	4b37      	ldr	r3, [pc, #220]	; (800c2a4 <tcp_close_shutdown+0x1b8>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	687a      	ldr	r2, [r7, #4]
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d102      	bne.n	800c1d6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c1d0:	f003 fffa 	bl	80101c8 <tcp_trigger_input_pcb_close>
 800c1d4:	e002      	b.n	800c1dc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f7ff fed6 	bl	800bf88 <tcp_free>
      }
      return ERR_OK;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	e050      	b.n	800c282 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	7d1b      	ldrb	r3, [r3, #20]
 800c1e4:	2b02      	cmp	r3, #2
 800c1e6:	d03b      	beq.n	800c260 <tcp_close_shutdown+0x174>
 800c1e8:	2b02      	cmp	r3, #2
 800c1ea:	dc44      	bgt.n	800c276 <tcp_close_shutdown+0x18a>
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d002      	beq.n	800c1f6 <tcp_close_shutdown+0x10a>
 800c1f0:	2b01      	cmp	r3, #1
 800c1f2:	d02a      	beq.n	800c24a <tcp_close_shutdown+0x15e>
 800c1f4:	e03f      	b.n	800c276 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	8adb      	ldrh	r3, [r3, #22]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d021      	beq.n	800c242 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c1fe:	4b2a      	ldr	r3, [pc, #168]	; (800c2a8 <tcp_close_shutdown+0x1bc>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	687a      	ldr	r2, [r7, #4]
 800c204:	429a      	cmp	r2, r3
 800c206:	d105      	bne.n	800c214 <tcp_close_shutdown+0x128>
 800c208:	4b27      	ldr	r3, [pc, #156]	; (800c2a8 <tcp_close_shutdown+0x1bc>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	68db      	ldr	r3, [r3, #12]
 800c20e:	4a26      	ldr	r2, [pc, #152]	; (800c2a8 <tcp_close_shutdown+0x1bc>)
 800c210:	6013      	str	r3, [r2, #0]
 800c212:	e013      	b.n	800c23c <tcp_close_shutdown+0x150>
 800c214:	4b24      	ldr	r3, [pc, #144]	; (800c2a8 <tcp_close_shutdown+0x1bc>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	60bb      	str	r3, [r7, #8]
 800c21a:	e00c      	b.n	800c236 <tcp_close_shutdown+0x14a>
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	68db      	ldr	r3, [r3, #12]
 800c220:	687a      	ldr	r2, [r7, #4]
 800c222:	429a      	cmp	r2, r3
 800c224:	d104      	bne.n	800c230 <tcp_close_shutdown+0x144>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	68da      	ldr	r2, [r3, #12]
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	60da      	str	r2, [r3, #12]
 800c22e:	e005      	b.n	800c23c <tcp_close_shutdown+0x150>
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	68db      	ldr	r3, [r3, #12]
 800c234:	60bb      	str	r3, [r7, #8]
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d1ef      	bne.n	800c21c <tcp_close_shutdown+0x130>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2200      	movs	r2, #0
 800c240:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f7ff fea0 	bl	800bf88 <tcp_free>
      break;
 800c248:	e01a      	b.n	800c280 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f7ff ff14 	bl	800c078 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c250:	6879      	ldr	r1, [r7, #4]
 800c252:	4816      	ldr	r0, [pc, #88]	; (800c2ac <tcp_close_shutdown+0x1c0>)
 800c254:	f001 fb48 	bl	800d8e8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f7ff feb1 	bl	800bfc0 <tcp_free_listen>
      break;
 800c25e:	e00f      	b.n	800c280 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c260:	6879      	ldr	r1, [r7, #4]
 800c262:	480e      	ldr	r0, [pc, #56]	; (800c29c <tcp_close_shutdown+0x1b0>)
 800c264:	f001 fb40 	bl	800d8e8 <tcp_pcb_remove>
 800c268:	4b0d      	ldr	r3, [pc, #52]	; (800c2a0 <tcp_close_shutdown+0x1b4>)
 800c26a:	2201      	movs	r2, #1
 800c26c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f7ff fe8a 	bl	800bf88 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c274:	e004      	b.n	800c280 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 f81a 	bl	800c2b0 <tcp_close_shutdown_fin>
 800c27c:	4603      	mov	r3, r0
 800c27e:	e000      	b.n	800c282 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c280:	2300      	movs	r3, #0
}
 800c282:	4618      	mov	r0, r3
 800c284:	3710      	adds	r7, #16
 800c286:	46bd      	mov	sp, r7
 800c288:	bdb0      	pop	{r4, r5, r7, pc}
 800c28a:	bf00      	nop
 800c28c:	080169d0 	.word	0x080169d0
 800c290:	08016aa4 	.word	0x08016aa4
 800c294:	08016a14 	.word	0x08016a14
 800c298:	08016ac4 	.word	0x08016ac4
 800c29c:	24003604 	.word	0x24003604
 800c2a0:	24003600 	.word	0x24003600
 800c2a4:	24003618 	.word	0x24003618
 800c2a8:	24003610 	.word	0x24003610
 800c2ac:	2400360c 	.word	0x2400360c

0800c2b0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b084      	sub	sp, #16
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d106      	bne.n	800c2cc <tcp_close_shutdown_fin+0x1c>
 800c2be:	4b2e      	ldr	r3, [pc, #184]	; (800c378 <tcp_close_shutdown_fin+0xc8>)
 800c2c0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c2c4:	492d      	ldr	r1, [pc, #180]	; (800c37c <tcp_close_shutdown_fin+0xcc>)
 800c2c6:	482e      	ldr	r0, [pc, #184]	; (800c380 <tcp_close_shutdown_fin+0xd0>)
 800c2c8:	f008 fd60 	bl	8014d8c <iprintf>

  switch (pcb->state) {
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	7d1b      	ldrb	r3, [r3, #20]
 800c2d0:	2b07      	cmp	r3, #7
 800c2d2:	d020      	beq.n	800c316 <tcp_close_shutdown_fin+0x66>
 800c2d4:	2b07      	cmp	r3, #7
 800c2d6:	dc2b      	bgt.n	800c330 <tcp_close_shutdown_fin+0x80>
 800c2d8:	2b03      	cmp	r3, #3
 800c2da:	d002      	beq.n	800c2e2 <tcp_close_shutdown_fin+0x32>
 800c2dc:	2b04      	cmp	r3, #4
 800c2de:	d00d      	beq.n	800c2fc <tcp_close_shutdown_fin+0x4c>
 800c2e0:	e026      	b.n	800c330 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f004 fdda 	bl	8010e9c <tcp_send_fin>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c2ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d11f      	bne.n	800c334 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2205      	movs	r2, #5
 800c2f8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c2fa:	e01b      	b.n	800c334 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f004 fdcd 	bl	8010e9c <tcp_send_fin>
 800c302:	4603      	mov	r3, r0
 800c304:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d114      	bne.n	800c338 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2205      	movs	r2, #5
 800c312:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c314:	e010      	b.n	800c338 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f004 fdc0 	bl	8010e9c <tcp_send_fin>
 800c31c:	4603      	mov	r3, r0
 800c31e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d109      	bne.n	800c33c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2209      	movs	r2, #9
 800c32c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c32e:	e005      	b.n	800c33c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c330:	2300      	movs	r3, #0
 800c332:	e01c      	b.n	800c36e <tcp_close_shutdown_fin+0xbe>
      break;
 800c334:	bf00      	nop
 800c336:	e002      	b.n	800c33e <tcp_close_shutdown_fin+0x8e>
      break;
 800c338:	bf00      	nop
 800c33a:	e000      	b.n	800c33e <tcp_close_shutdown_fin+0x8e>
      break;
 800c33c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c33e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d103      	bne.n	800c34e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f004 fee6 	bl	8011118 <tcp_output>
 800c34c:	e00d      	b.n	800c36a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c34e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c352:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c356:	d108      	bne.n	800c36a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	8b5b      	ldrh	r3, [r3, #26]
 800c35c:	f043 0308 	orr.w	r3, r3, #8
 800c360:	b29a      	uxth	r2, r3
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c366:	2300      	movs	r3, #0
 800c368:	e001      	b.n	800c36e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c36a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3710      	adds	r7, #16
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}
 800c376:	bf00      	nop
 800c378:	080169d0 	.word	0x080169d0
 800c37c:	08016a80 	.word	0x08016a80
 800c380:	08016a14 	.word	0x08016a14

0800c384 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b082      	sub	sp, #8
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d109      	bne.n	800c3a6 <tcp_close+0x22>
 800c392:	4b0f      	ldr	r3, [pc, #60]	; (800c3d0 <tcp_close+0x4c>)
 800c394:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c398:	490e      	ldr	r1, [pc, #56]	; (800c3d4 <tcp_close+0x50>)
 800c39a:	480f      	ldr	r0, [pc, #60]	; (800c3d8 <tcp_close+0x54>)
 800c39c:	f008 fcf6 	bl	8014d8c <iprintf>
 800c3a0:	f06f 030f 	mvn.w	r3, #15
 800c3a4:	e00f      	b.n	800c3c6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	7d1b      	ldrb	r3, [r3, #20]
 800c3aa:	2b01      	cmp	r3, #1
 800c3ac:	d006      	beq.n	800c3bc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	8b5b      	ldrh	r3, [r3, #26]
 800c3b2:	f043 0310 	orr.w	r3, r3, #16
 800c3b6:	b29a      	uxth	r2, r3
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c3bc:	2101      	movs	r1, #1
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f7ff fe94 	bl	800c0ec <tcp_close_shutdown>
 800c3c4:	4603      	mov	r3, r0
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3708      	adds	r7, #8
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}
 800c3ce:	bf00      	nop
 800c3d0:	080169d0 	.word	0x080169d0
 800c3d4:	08016ae0 	.word	0x08016ae0
 800c3d8:	08016a14 	.word	0x08016a14

0800c3dc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b08e      	sub	sp, #56	; 0x38
 800c3e0:	af04      	add	r7, sp, #16
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d107      	bne.n	800c3fc <tcp_abandon+0x20>
 800c3ec:	4b52      	ldr	r3, [pc, #328]	; (800c538 <tcp_abandon+0x15c>)
 800c3ee:	f240 223d 	movw	r2, #573	; 0x23d
 800c3f2:	4952      	ldr	r1, [pc, #328]	; (800c53c <tcp_abandon+0x160>)
 800c3f4:	4852      	ldr	r0, [pc, #328]	; (800c540 <tcp_abandon+0x164>)
 800c3f6:	f008 fcc9 	bl	8014d8c <iprintf>
 800c3fa:	e099      	b.n	800c530 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	7d1b      	ldrb	r3, [r3, #20]
 800c400:	2b01      	cmp	r3, #1
 800c402:	d106      	bne.n	800c412 <tcp_abandon+0x36>
 800c404:	4b4c      	ldr	r3, [pc, #304]	; (800c538 <tcp_abandon+0x15c>)
 800c406:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c40a:	494e      	ldr	r1, [pc, #312]	; (800c544 <tcp_abandon+0x168>)
 800c40c:	484c      	ldr	r0, [pc, #304]	; (800c540 <tcp_abandon+0x164>)
 800c40e:	f008 fcbd 	bl	8014d8c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	7d1b      	ldrb	r3, [r3, #20]
 800c416:	2b0a      	cmp	r3, #10
 800c418:	d107      	bne.n	800c42a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c41a:	6879      	ldr	r1, [r7, #4]
 800c41c:	484a      	ldr	r0, [pc, #296]	; (800c548 <tcp_abandon+0x16c>)
 800c41e:	f001 fa63 	bl	800d8e8 <tcp_pcb_remove>
    tcp_free(pcb);
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f7ff fdb0 	bl	800bf88 <tcp_free>
 800c428:	e082      	b.n	800c530 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c42a:	2300      	movs	r3, #0
 800c42c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c42e:	2300      	movs	r3, #0
 800c430:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c436:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c43c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c444:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	691b      	ldr	r3, [r3, #16]
 800c44a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	7d1b      	ldrb	r3, [r3, #20]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d126      	bne.n	800c4a2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	8adb      	ldrh	r3, [r3, #22]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d02e      	beq.n	800c4ba <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c45c:	4b3b      	ldr	r3, [pc, #236]	; (800c54c <tcp_abandon+0x170>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	429a      	cmp	r2, r3
 800c464:	d105      	bne.n	800c472 <tcp_abandon+0x96>
 800c466:	4b39      	ldr	r3, [pc, #228]	; (800c54c <tcp_abandon+0x170>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	68db      	ldr	r3, [r3, #12]
 800c46c:	4a37      	ldr	r2, [pc, #220]	; (800c54c <tcp_abandon+0x170>)
 800c46e:	6013      	str	r3, [r2, #0]
 800c470:	e013      	b.n	800c49a <tcp_abandon+0xbe>
 800c472:	4b36      	ldr	r3, [pc, #216]	; (800c54c <tcp_abandon+0x170>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	61fb      	str	r3, [r7, #28]
 800c478:	e00c      	b.n	800c494 <tcp_abandon+0xb8>
 800c47a:	69fb      	ldr	r3, [r7, #28]
 800c47c:	68db      	ldr	r3, [r3, #12]
 800c47e:	687a      	ldr	r2, [r7, #4]
 800c480:	429a      	cmp	r2, r3
 800c482:	d104      	bne.n	800c48e <tcp_abandon+0xb2>
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	68da      	ldr	r2, [r3, #12]
 800c488:	69fb      	ldr	r3, [r7, #28]
 800c48a:	60da      	str	r2, [r3, #12]
 800c48c:	e005      	b.n	800c49a <tcp_abandon+0xbe>
 800c48e:	69fb      	ldr	r3, [r7, #28]
 800c490:	68db      	ldr	r3, [r3, #12]
 800c492:	61fb      	str	r3, [r7, #28]
 800c494:	69fb      	ldr	r3, [r7, #28]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d1ef      	bne.n	800c47a <tcp_abandon+0x9e>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2200      	movs	r2, #0
 800c49e:	60da      	str	r2, [r3, #12]
 800c4a0:	e00b      	b.n	800c4ba <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	8adb      	ldrh	r3, [r3, #22]
 800c4aa:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c4ac:	6879      	ldr	r1, [r7, #4]
 800c4ae:	4828      	ldr	r0, [pc, #160]	; (800c550 <tcp_abandon+0x174>)
 800c4b0:	f001 fa1a 	bl	800d8e8 <tcp_pcb_remove>
 800c4b4:	4b27      	ldr	r3, [pc, #156]	; (800c554 <tcp_abandon+0x178>)
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d004      	beq.n	800c4cc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f000 fed6 	bl	800d278 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d004      	beq.n	800c4de <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4d8:	4618      	mov	r0, r3
 800c4da:	f000 fecd 	bl	800d278 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d004      	beq.n	800c4f0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f000 fec4 	bl	800d278 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d00e      	beq.n	800c514 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c4f6:	6879      	ldr	r1, [r7, #4]
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	3304      	adds	r3, #4
 800c4fc:	687a      	ldr	r2, [r7, #4]
 800c4fe:	8b12      	ldrh	r2, [r2, #24]
 800c500:	9202      	str	r2, [sp, #8]
 800c502:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c504:	9201      	str	r2, [sp, #4]
 800c506:	9300      	str	r3, [sp, #0]
 800c508:	460b      	mov	r3, r1
 800c50a:	697a      	ldr	r2, [r7, #20]
 800c50c:	69b9      	ldr	r1, [r7, #24]
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f005 fbb6 	bl	8011c80 <tcp_rst>
    }
    last_state = pcb->state;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	7d1b      	ldrb	r3, [r3, #20]
 800c518:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f7ff fd34 	bl	800bf88 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d004      	beq.n	800c530 <tcp_abandon+0x154>
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	f06f 010c 	mvn.w	r1, #12
 800c52c:	68f8      	ldr	r0, [r7, #12]
 800c52e:	4798      	blx	r3
  }
}
 800c530:	3728      	adds	r7, #40	; 0x28
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}
 800c536:	bf00      	nop
 800c538:	080169d0 	.word	0x080169d0
 800c53c:	08016b14 	.word	0x08016b14
 800c540:	08016a14 	.word	0x08016a14
 800c544:	08016b30 	.word	0x08016b30
 800c548:	24003614 	.word	0x24003614
 800c54c:	24003610 	.word	0x24003610
 800c550:	24003604 	.word	0x24003604
 800c554:	24003600 	.word	0x24003600

0800c558 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b082      	sub	sp, #8
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c560:	2101      	movs	r1, #1
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f7ff ff3a 	bl	800c3dc <tcp_abandon>
}
 800c568:	bf00      	nop
 800c56a:	3708      	adds	r7, #8
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}

0800c570 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b088      	sub	sp, #32
 800c574:	af00      	add	r7, sp, #0
 800c576:	60f8      	str	r0, [r7, #12]
 800c578:	60b9      	str	r1, [r7, #8]
 800c57a:	4613      	mov	r3, r2
 800c57c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800c57e:	2304      	movs	r3, #4
 800c580:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d101      	bne.n	800c58c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800c588:	4b3e      	ldr	r3, [pc, #248]	; (800c684 <tcp_bind+0x114>)
 800c58a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d109      	bne.n	800c5a6 <tcp_bind+0x36>
 800c592:	4b3d      	ldr	r3, [pc, #244]	; (800c688 <tcp_bind+0x118>)
 800c594:	f240 22a9 	movw	r2, #681	; 0x2a9
 800c598:	493c      	ldr	r1, [pc, #240]	; (800c68c <tcp_bind+0x11c>)
 800c59a:	483d      	ldr	r0, [pc, #244]	; (800c690 <tcp_bind+0x120>)
 800c59c:	f008 fbf6 	bl	8014d8c <iprintf>
 800c5a0:	f06f 030f 	mvn.w	r3, #15
 800c5a4:	e06a      	b.n	800c67c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	7d1b      	ldrb	r3, [r3, #20]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d009      	beq.n	800c5c2 <tcp_bind+0x52>
 800c5ae:	4b36      	ldr	r3, [pc, #216]	; (800c688 <tcp_bind+0x118>)
 800c5b0:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c5b4:	4937      	ldr	r1, [pc, #220]	; (800c694 <tcp_bind+0x124>)
 800c5b6:	4836      	ldr	r0, [pc, #216]	; (800c690 <tcp_bind+0x120>)
 800c5b8:	f008 fbe8 	bl	8014d8c <iprintf>
 800c5bc:	f06f 0305 	mvn.w	r3, #5
 800c5c0:	e05c      	b.n	800c67c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800c5c2:	88fb      	ldrh	r3, [r7, #6]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d109      	bne.n	800c5dc <tcp_bind+0x6c>
    port = tcp_new_port();
 800c5c8:	f000 f9f0 	bl	800c9ac <tcp_new_port>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c5d0:	88fb      	ldrh	r3, [r7, #6]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d135      	bne.n	800c642 <tcp_bind+0xd2>
      return ERR_BUF;
 800c5d6:	f06f 0301 	mvn.w	r3, #1
 800c5da:	e04f      	b.n	800c67c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800c5dc:	2300      	movs	r3, #0
 800c5de:	61fb      	str	r3, [r7, #28]
 800c5e0:	e02b      	b.n	800c63a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c5e2:	4a2d      	ldr	r2, [pc, #180]	; (800c698 <tcp_bind+0x128>)
 800c5e4:	69fb      	ldr	r3, [r7, #28]
 800c5e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	61bb      	str	r3, [r7, #24]
 800c5ee:	e01e      	b.n	800c62e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800c5f0:	69bb      	ldr	r3, [r7, #24]
 800c5f2:	8adb      	ldrh	r3, [r3, #22]
 800c5f4:	88fa      	ldrh	r2, [r7, #6]
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d116      	bne.n	800c628 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800c5fa:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d010      	beq.n	800c622 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800c600:	69bb      	ldr	r3, [r7, #24]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d00c      	beq.n	800c622 <tcp_bind+0xb2>
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d009      	beq.n	800c622 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800c60e:	68bb      	ldr	r3, [r7, #8]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d005      	beq.n	800c622 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800c616:	69bb      	ldr	r3, [r7, #24]
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c61e:	429a      	cmp	r2, r3
 800c620:	d102      	bne.n	800c628 <tcp_bind+0xb8>
              return ERR_USE;
 800c622:	f06f 0307 	mvn.w	r3, #7
 800c626:	e029      	b.n	800c67c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c628:	69bb      	ldr	r3, [r7, #24]
 800c62a:	68db      	ldr	r3, [r3, #12]
 800c62c:	61bb      	str	r3, [r7, #24]
 800c62e:	69bb      	ldr	r3, [r7, #24]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d1dd      	bne.n	800c5f0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800c634:	69fb      	ldr	r3, [r7, #28]
 800c636:	3301      	adds	r3, #1
 800c638:	61fb      	str	r3, [r7, #28]
 800c63a:	69fa      	ldr	r2, [r7, #28]
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	429a      	cmp	r2, r3
 800c640:	dbcf      	blt.n	800c5e2 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d00c      	beq.n	800c662 <tcp_bind+0xf2>
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d008      	beq.n	800c662 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d002      	beq.n	800c65c <tcp_bind+0xec>
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	e000      	b.n	800c65e <tcp_bind+0xee>
 800c65c:	2300      	movs	r3, #0
 800c65e:	68fa      	ldr	r2, [r7, #12]
 800c660:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	88fa      	ldrh	r2, [r7, #6]
 800c666:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800c668:	4b0c      	ldr	r3, [pc, #48]	; (800c69c <tcp_bind+0x12c>)
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	60da      	str	r2, [r3, #12]
 800c670:	4a0a      	ldr	r2, [pc, #40]	; (800c69c <tcp_bind+0x12c>)
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	6013      	str	r3, [r2, #0]
 800c676:	f005 fcc5 	bl	8012004 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800c67a:	2300      	movs	r3, #0
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	3720      	adds	r7, #32
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}
 800c684:	080197d8 	.word	0x080197d8
 800c688:	080169d0 	.word	0x080169d0
 800c68c:	08016b64 	.word	0x08016b64
 800c690:	08016a14 	.word	0x08016a14
 800c694:	08016b7c 	.word	0x08016b7c
 800c698:	080197b0 	.word	0x080197b0
 800c69c:	24003610 	.word	0x24003610

0800c6a0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b084      	sub	sp, #16
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	60f8      	str	r0, [r7, #12]
 800c6a8:	60b9      	str	r1, [r7, #8]
 800c6aa:	4613      	mov	r3, r2
 800c6ac:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d106      	bne.n	800c6c2 <tcp_accept_null+0x22>
 800c6b4:	4b07      	ldr	r3, [pc, #28]	; (800c6d4 <tcp_accept_null+0x34>)
 800c6b6:	f240 320f 	movw	r2, #783	; 0x30f
 800c6ba:	4907      	ldr	r1, [pc, #28]	; (800c6d8 <tcp_accept_null+0x38>)
 800c6bc:	4807      	ldr	r0, [pc, #28]	; (800c6dc <tcp_accept_null+0x3c>)
 800c6be:	f008 fb65 	bl	8014d8c <iprintf>

  tcp_abort(pcb);
 800c6c2:	68b8      	ldr	r0, [r7, #8]
 800c6c4:	f7ff ff48 	bl	800c558 <tcp_abort>

  return ERR_ABRT;
 800c6c8:	f06f 030c 	mvn.w	r3, #12
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3710      	adds	r7, #16
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	080169d0 	.word	0x080169d0
 800c6d8:	08016ba4 	.word	0x08016ba4
 800c6dc:	08016a14 	.word	0x08016a14

0800c6e0 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b082      	sub	sp, #8
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	460b      	mov	r3, r1
 800c6ea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800c6ec:	78fb      	ldrb	r3, [r7, #3]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	4619      	mov	r1, r3
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f000 f806 	bl	800c704 <tcp_listen_with_backlog_and_err>
 800c6f8:	4603      	mov	r3, r0
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3708      	adds	r7, #8
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
	...

0800c704 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b088      	sub	sp, #32
 800c708:	af00      	add	r7, sp, #0
 800c70a:	60f8      	str	r0, [r7, #12]
 800c70c:	460b      	mov	r3, r1
 800c70e:	607a      	str	r2, [r7, #4]
 800c710:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800c712:	2300      	movs	r3, #0
 800c714:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d109      	bne.n	800c730 <tcp_listen_with_backlog_and_err+0x2c>
 800c71c:	4b47      	ldr	r3, [pc, #284]	; (800c83c <tcp_listen_with_backlog_and_err+0x138>)
 800c71e:	f240 3259 	movw	r2, #857	; 0x359
 800c722:	4947      	ldr	r1, [pc, #284]	; (800c840 <tcp_listen_with_backlog_and_err+0x13c>)
 800c724:	4847      	ldr	r0, [pc, #284]	; (800c844 <tcp_listen_with_backlog_and_err+0x140>)
 800c726:	f008 fb31 	bl	8014d8c <iprintf>
 800c72a:	23f0      	movs	r3, #240	; 0xf0
 800c72c:	76fb      	strb	r3, [r7, #27]
 800c72e:	e079      	b.n	800c824 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	7d1b      	ldrb	r3, [r3, #20]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d009      	beq.n	800c74c <tcp_listen_with_backlog_and_err+0x48>
 800c738:	4b40      	ldr	r3, [pc, #256]	; (800c83c <tcp_listen_with_backlog_and_err+0x138>)
 800c73a:	f240 325a 	movw	r2, #858	; 0x35a
 800c73e:	4942      	ldr	r1, [pc, #264]	; (800c848 <tcp_listen_with_backlog_and_err+0x144>)
 800c740:	4840      	ldr	r0, [pc, #256]	; (800c844 <tcp_listen_with_backlog_and_err+0x140>)
 800c742:	f008 fb23 	bl	8014d8c <iprintf>
 800c746:	23f1      	movs	r3, #241	; 0xf1
 800c748:	76fb      	strb	r3, [r7, #27]
 800c74a:	e06b      	b.n	800c824 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	7d1b      	ldrb	r3, [r3, #20]
 800c750:	2b01      	cmp	r3, #1
 800c752:	d104      	bne.n	800c75e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800c758:	23f7      	movs	r3, #247	; 0xf7
 800c75a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c75c:	e062      	b.n	800c824 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800c75e:	2002      	movs	r0, #2
 800c760:	f7fe fa7c 	bl	800ac5c <memp_malloc>
 800c764:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800c766:	69fb      	ldr	r3, [r7, #28]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d102      	bne.n	800c772 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800c76c:	23ff      	movs	r3, #255	; 0xff
 800c76e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c770:	e058      	b.n	800c824 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	691a      	ldr	r2, [r3, #16]
 800c776:	69fb      	ldr	r3, [r7, #28]
 800c778:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	8ada      	ldrh	r2, [r3, #22]
 800c77e:	69fb      	ldr	r3, [r7, #28]
 800c780:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800c782:	69fb      	ldr	r3, [r7, #28]
 800c784:	2201      	movs	r2, #1
 800c786:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	7d5a      	ldrb	r2, [r3, #21]
 800c78c:	69fb      	ldr	r3, [r7, #28]
 800c78e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	7a5a      	ldrb	r2, [r3, #9]
 800c794:	69fb      	ldr	r3, [r7, #28]
 800c796:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800c798:	69fb      	ldr	r3, [r7, #28]
 800c79a:	2200      	movs	r2, #0
 800c79c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	7ada      	ldrb	r2, [r3, #11]
 800c7a2:	69fb      	ldr	r3, [r7, #28]
 800c7a4:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	7a9a      	ldrb	r2, [r3, #10]
 800c7aa:	69fb      	ldr	r3, [r7, #28]
 800c7ac:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	681a      	ldr	r2, [r3, #0]
 800c7b2:	69fb      	ldr	r3, [r7, #28]
 800c7b4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	8adb      	ldrh	r3, [r3, #22]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d021      	beq.n	800c802 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800c7be:	4b23      	ldr	r3, [pc, #140]	; (800c84c <tcp_listen_with_backlog_and_err+0x148>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	68fa      	ldr	r2, [r7, #12]
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	d105      	bne.n	800c7d4 <tcp_listen_with_backlog_and_err+0xd0>
 800c7c8:	4b20      	ldr	r3, [pc, #128]	; (800c84c <tcp_listen_with_backlog_and_err+0x148>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	68db      	ldr	r3, [r3, #12]
 800c7ce:	4a1f      	ldr	r2, [pc, #124]	; (800c84c <tcp_listen_with_backlog_and_err+0x148>)
 800c7d0:	6013      	str	r3, [r2, #0]
 800c7d2:	e013      	b.n	800c7fc <tcp_listen_with_backlog_and_err+0xf8>
 800c7d4:	4b1d      	ldr	r3, [pc, #116]	; (800c84c <tcp_listen_with_backlog_and_err+0x148>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	617b      	str	r3, [r7, #20]
 800c7da:	e00c      	b.n	800c7f6 <tcp_listen_with_backlog_and_err+0xf2>
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	68db      	ldr	r3, [r3, #12]
 800c7e0:	68fa      	ldr	r2, [r7, #12]
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d104      	bne.n	800c7f0 <tcp_listen_with_backlog_and_err+0xec>
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	68da      	ldr	r2, [r3, #12]
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	60da      	str	r2, [r3, #12]
 800c7ee:	e005      	b.n	800c7fc <tcp_listen_with_backlog_and_err+0xf8>
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	68db      	ldr	r3, [r3, #12]
 800c7f4:	617b      	str	r3, [r7, #20]
 800c7f6:	697b      	ldr	r3, [r7, #20]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d1ef      	bne.n	800c7dc <tcp_listen_with_backlog_and_err+0xd8>
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	2200      	movs	r2, #0
 800c800:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800c802:	68f8      	ldr	r0, [r7, #12]
 800c804:	f7ff fbc0 	bl	800bf88 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800c808:	69fb      	ldr	r3, [r7, #28]
 800c80a:	4a11      	ldr	r2, [pc, #68]	; (800c850 <tcp_listen_with_backlog_and_err+0x14c>)
 800c80c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800c80e:	4b11      	ldr	r3, [pc, #68]	; (800c854 <tcp_listen_with_backlog_and_err+0x150>)
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	69fb      	ldr	r3, [r7, #28]
 800c814:	60da      	str	r2, [r3, #12]
 800c816:	4a0f      	ldr	r2, [pc, #60]	; (800c854 <tcp_listen_with_backlog_and_err+0x150>)
 800c818:	69fb      	ldr	r3, [r7, #28]
 800c81a:	6013      	str	r3, [r2, #0]
 800c81c:	f005 fbf2 	bl	8012004 <tcp_timer_needed>
  res = ERR_OK;
 800c820:	2300      	movs	r3, #0
 800c822:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d002      	beq.n	800c830 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	7efa      	ldrb	r2, [r7, #27]
 800c82e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800c830:	69fb      	ldr	r3, [r7, #28]
}
 800c832:	4618      	mov	r0, r3
 800c834:	3720      	adds	r7, #32
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}
 800c83a:	bf00      	nop
 800c83c:	080169d0 	.word	0x080169d0
 800c840:	08016bc4 	.word	0x08016bc4
 800c844:	08016a14 	.word	0x08016a14
 800c848:	08016bf4 	.word	0x08016bf4
 800c84c:	24003610 	.word	0x24003610
 800c850:	0800c6a1 	.word	0x0800c6a1
 800c854:	2400360c 	.word	0x2400360c

0800c858 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b084      	sub	sp, #16
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d106      	bne.n	800c874 <tcp_update_rcv_ann_wnd+0x1c>
 800c866:	4b25      	ldr	r3, [pc, #148]	; (800c8fc <tcp_update_rcv_ann_wnd+0xa4>)
 800c868:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c86c:	4924      	ldr	r1, [pc, #144]	; (800c900 <tcp_update_rcv_ann_wnd+0xa8>)
 800c86e:	4825      	ldr	r0, [pc, #148]	; (800c904 <tcp_update_rcv_ann_wnd+0xac>)
 800c870:	f008 fa8c 	bl	8014d8c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c878:	687a      	ldr	r2, [r7, #4]
 800c87a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c87c:	4413      	add	r3, r2
 800c87e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c884:	687a      	ldr	r2, [r7, #4]
 800c886:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c888:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c88c:	bf28      	it	cs
 800c88e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c892:	b292      	uxth	r2, r2
 800c894:	4413      	add	r3, r2
 800c896:	68fa      	ldr	r2, [r7, #12]
 800c898:	1ad3      	subs	r3, r2, r3
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	db08      	blt.n	800c8b0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8aa:	68fa      	ldr	r2, [r7, #12]
 800c8ac:	1ad3      	subs	r3, r2, r3
 800c8ae:	e020      	b.n	800c8f2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8b8:	1ad3      	subs	r3, r2, r3
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	dd03      	ble.n	800c8c6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c8c4:	e014      	b.n	800c8f0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ce:	1ad3      	subs	r3, r2, r3
 800c8d0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8d8:	d306      	bcc.n	800c8e8 <tcp_update_rcv_ann_wnd+0x90>
 800c8da:	4b08      	ldr	r3, [pc, #32]	; (800c8fc <tcp_update_rcv_ann_wnd+0xa4>)
 800c8dc:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c8e0:	4909      	ldr	r1, [pc, #36]	; (800c908 <tcp_update_rcv_ann_wnd+0xb0>)
 800c8e2:	4808      	ldr	r0, [pc, #32]	; (800c904 <tcp_update_rcv_ann_wnd+0xac>)
 800c8e4:	f008 fa52 	bl	8014d8c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	b29a      	uxth	r2, r3
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c8f0:	2300      	movs	r3, #0
  }
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3710      	adds	r7, #16
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
 800c8fa:	bf00      	nop
 800c8fc:	080169d0 	.word	0x080169d0
 800c900:	08016c2c 	.word	0x08016c2c
 800c904:	08016a14 	.word	0x08016a14
 800c908:	08016c50 	.word	0x08016c50

0800c90c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b084      	sub	sp, #16
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	460b      	mov	r3, r1
 800c916:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d107      	bne.n	800c92e <tcp_recved+0x22>
 800c91e:	4b1f      	ldr	r3, [pc, #124]	; (800c99c <tcp_recved+0x90>)
 800c920:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c924:	491e      	ldr	r1, [pc, #120]	; (800c9a0 <tcp_recved+0x94>)
 800c926:	481f      	ldr	r0, [pc, #124]	; (800c9a4 <tcp_recved+0x98>)
 800c928:	f008 fa30 	bl	8014d8c <iprintf>
 800c92c:	e032      	b.n	800c994 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	7d1b      	ldrb	r3, [r3, #20]
 800c932:	2b01      	cmp	r3, #1
 800c934:	d106      	bne.n	800c944 <tcp_recved+0x38>
 800c936:	4b19      	ldr	r3, [pc, #100]	; (800c99c <tcp_recved+0x90>)
 800c938:	f240 32d2 	movw	r2, #978	; 0x3d2
 800c93c:	491a      	ldr	r1, [pc, #104]	; (800c9a8 <tcp_recved+0x9c>)
 800c93e:	4819      	ldr	r0, [pc, #100]	; (800c9a4 <tcp_recved+0x98>)
 800c940:	f008 fa24 	bl	8014d8c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c948:	887b      	ldrh	r3, [r7, #2]
 800c94a:	4413      	add	r3, r2
 800c94c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c94e:	89fb      	ldrh	r3, [r7, #14]
 800c950:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c954:	d804      	bhi.n	800c960 <tcp_recved+0x54>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c95a:	89fa      	ldrh	r2, [r7, #14]
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d204      	bcs.n	800c96a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c966:	851a      	strh	r2, [r3, #40]	; 0x28
 800c968:	e002      	b.n	800c970 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	89fa      	ldrh	r2, [r7, #14]
 800c96e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f7ff ff71 	bl	800c858 <tcp_update_rcv_ann_wnd>
 800c976:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c97e:	d309      	bcc.n	800c994 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	8b5b      	ldrh	r3, [r3, #26]
 800c984:	f043 0302 	orr.w	r3, r3, #2
 800c988:	b29a      	uxth	r2, r3
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f004 fbc2 	bl	8011118 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c994:	3710      	adds	r7, #16
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}
 800c99a:	bf00      	nop
 800c99c:	080169d0 	.word	0x080169d0
 800c9a0:	08016c6c 	.word	0x08016c6c
 800c9a4:	08016a14 	.word	0x08016a14
 800c9a8:	08016c84 	.word	0x08016c84

0800c9ac <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b083      	sub	sp, #12
 800c9b0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800c9b6:	4b1e      	ldr	r3, [pc, #120]	; (800ca30 <tcp_new_port+0x84>)
 800c9b8:	881b      	ldrh	r3, [r3, #0]
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	b29a      	uxth	r2, r3
 800c9be:	4b1c      	ldr	r3, [pc, #112]	; (800ca30 <tcp_new_port+0x84>)
 800c9c0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800c9c2:	4b1b      	ldr	r3, [pc, #108]	; (800ca30 <tcp_new_port+0x84>)
 800c9c4:	881b      	ldrh	r3, [r3, #0]
 800c9c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d103      	bne.n	800c9d6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800c9ce:	4b18      	ldr	r3, [pc, #96]	; (800ca30 <tcp_new_port+0x84>)
 800c9d0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800c9d4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	71fb      	strb	r3, [r7, #7]
 800c9da:	e01e      	b.n	800ca1a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c9dc:	79fb      	ldrb	r3, [r7, #7]
 800c9de:	4a15      	ldr	r2, [pc, #84]	; (800ca34 <tcp_new_port+0x88>)
 800c9e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	603b      	str	r3, [r7, #0]
 800c9e8:	e011      	b.n	800ca0e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	8ada      	ldrh	r2, [r3, #22]
 800c9ee:	4b10      	ldr	r3, [pc, #64]	; (800ca30 <tcp_new_port+0x84>)
 800c9f0:	881b      	ldrh	r3, [r3, #0]
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	d108      	bne.n	800ca08 <tcp_new_port+0x5c>
        n++;
 800c9f6:	88bb      	ldrh	r3, [r7, #4]
 800c9f8:	3301      	adds	r3, #1
 800c9fa:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800c9fc:	88bb      	ldrh	r3, [r7, #4]
 800c9fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca02:	d3d8      	bcc.n	800c9b6 <tcp_new_port+0xa>
          return 0;
 800ca04:	2300      	movs	r3, #0
 800ca06:	e00d      	b.n	800ca24 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	68db      	ldr	r3, [r3, #12]
 800ca0c:	603b      	str	r3, [r7, #0]
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d1ea      	bne.n	800c9ea <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ca14:	79fb      	ldrb	r3, [r7, #7]
 800ca16:	3301      	adds	r3, #1
 800ca18:	71fb      	strb	r3, [r7, #7]
 800ca1a:	79fb      	ldrb	r3, [r7, #7]
 800ca1c:	2b03      	cmp	r3, #3
 800ca1e:	d9dd      	bls.n	800c9dc <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800ca20:	4b03      	ldr	r3, [pc, #12]	; (800ca30 <tcp_new_port+0x84>)
 800ca22:	881b      	ldrh	r3, [r3, #0]
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	370c      	adds	r7, #12
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2e:	4770      	bx	lr
 800ca30:	2400002c 	.word	0x2400002c
 800ca34:	080197b0 	.word	0x080197b0

0800ca38 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ca38:	b5b0      	push	{r4, r5, r7, lr}
 800ca3a:	b090      	sub	sp, #64	; 0x40
 800ca3c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800ca44:	4b94      	ldr	r3, [pc, #592]	; (800cc98 <tcp_slowtmr+0x260>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	3301      	adds	r3, #1
 800ca4a:	4a93      	ldr	r2, [pc, #588]	; (800cc98 <tcp_slowtmr+0x260>)
 800ca4c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800ca4e:	4b93      	ldr	r3, [pc, #588]	; (800cc9c <tcp_slowtmr+0x264>)
 800ca50:	781b      	ldrb	r3, [r3, #0]
 800ca52:	3301      	adds	r3, #1
 800ca54:	b2da      	uxtb	r2, r3
 800ca56:	4b91      	ldr	r3, [pc, #580]	; (800cc9c <tcp_slowtmr+0x264>)
 800ca58:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800ca5e:	4b90      	ldr	r3, [pc, #576]	; (800cca0 <tcp_slowtmr+0x268>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800ca64:	e29d      	b.n	800cfa2 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ca66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca68:	7d1b      	ldrb	r3, [r3, #20]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d106      	bne.n	800ca7c <tcp_slowtmr+0x44>
 800ca6e:	4b8d      	ldr	r3, [pc, #564]	; (800cca4 <tcp_slowtmr+0x26c>)
 800ca70:	f240 42be 	movw	r2, #1214	; 0x4be
 800ca74:	498c      	ldr	r1, [pc, #560]	; (800cca8 <tcp_slowtmr+0x270>)
 800ca76:	488d      	ldr	r0, [pc, #564]	; (800ccac <tcp_slowtmr+0x274>)
 800ca78:	f008 f988 	bl	8014d8c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ca7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca7e:	7d1b      	ldrb	r3, [r3, #20]
 800ca80:	2b01      	cmp	r3, #1
 800ca82:	d106      	bne.n	800ca92 <tcp_slowtmr+0x5a>
 800ca84:	4b87      	ldr	r3, [pc, #540]	; (800cca4 <tcp_slowtmr+0x26c>)
 800ca86:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800ca8a:	4989      	ldr	r1, [pc, #548]	; (800ccb0 <tcp_slowtmr+0x278>)
 800ca8c:	4887      	ldr	r0, [pc, #540]	; (800ccac <tcp_slowtmr+0x274>)
 800ca8e:	f008 f97d 	bl	8014d8c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ca92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca94:	7d1b      	ldrb	r3, [r3, #20]
 800ca96:	2b0a      	cmp	r3, #10
 800ca98:	d106      	bne.n	800caa8 <tcp_slowtmr+0x70>
 800ca9a:	4b82      	ldr	r3, [pc, #520]	; (800cca4 <tcp_slowtmr+0x26c>)
 800ca9c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800caa0:	4984      	ldr	r1, [pc, #528]	; (800ccb4 <tcp_slowtmr+0x27c>)
 800caa2:	4882      	ldr	r0, [pc, #520]	; (800ccac <tcp_slowtmr+0x274>)
 800caa4:	f008 f972 	bl	8014d8c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800caa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caaa:	7f9a      	ldrb	r2, [r3, #30]
 800caac:	4b7b      	ldr	r3, [pc, #492]	; (800cc9c <tcp_slowtmr+0x264>)
 800caae:	781b      	ldrb	r3, [r3, #0]
 800cab0:	429a      	cmp	r2, r3
 800cab2:	d105      	bne.n	800cac0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800cab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caba:	68db      	ldr	r3, [r3, #12]
 800cabc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800cabe:	e270      	b.n	800cfa2 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800cac0:	4b76      	ldr	r3, [pc, #472]	; (800cc9c <tcp_slowtmr+0x264>)
 800cac2:	781a      	ldrb	r2, [r3, #0]
 800cac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800cac8:	2300      	movs	r3, #0
 800caca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800cace:	2300      	movs	r3, #0
 800cad0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800cad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad6:	7d1b      	ldrb	r3, [r3, #20]
 800cad8:	2b02      	cmp	r3, #2
 800cada:	d10a      	bne.n	800caf2 <tcp_slowtmr+0xba>
 800cadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cade:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cae2:	2b05      	cmp	r3, #5
 800cae4:	d905      	bls.n	800caf2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800cae6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800caea:	3301      	adds	r3, #1
 800caec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800caf0:	e11e      	b.n	800cd30 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800caf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800caf8:	2b0b      	cmp	r3, #11
 800cafa:	d905      	bls.n	800cb08 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800cafc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb00:	3301      	adds	r3, #1
 800cb02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cb06:	e113      	b.n	800cd30 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800cb08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb0a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d075      	beq.n	800cbfe <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800cb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d006      	beq.n	800cb28 <tcp_slowtmr+0xf0>
 800cb1a:	4b62      	ldr	r3, [pc, #392]	; (800cca4 <tcp_slowtmr+0x26c>)
 800cb1c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800cb20:	4965      	ldr	r1, [pc, #404]	; (800ccb8 <tcp_slowtmr+0x280>)
 800cb22:	4862      	ldr	r0, [pc, #392]	; (800ccac <tcp_slowtmr+0x274>)
 800cb24:	f008 f932 	bl	8014d8c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800cb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d106      	bne.n	800cb3e <tcp_slowtmr+0x106>
 800cb30:	4b5c      	ldr	r3, [pc, #368]	; (800cca4 <tcp_slowtmr+0x26c>)
 800cb32:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800cb36:	4961      	ldr	r1, [pc, #388]	; (800ccbc <tcp_slowtmr+0x284>)
 800cb38:	485c      	ldr	r0, [pc, #368]	; (800ccac <tcp_slowtmr+0x274>)
 800cb3a:	f008 f927 	bl	8014d8c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800cb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb40:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800cb44:	2b0b      	cmp	r3, #11
 800cb46:	d905      	bls.n	800cb54 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800cb48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cb52:	e0ed      	b.n	800cd30 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800cb54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb56:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cb5a:	3b01      	subs	r3, #1
 800cb5c:	4a58      	ldr	r2, [pc, #352]	; (800ccc0 <tcp_slowtmr+0x288>)
 800cb5e:	5cd3      	ldrb	r3, [r2, r3]
 800cb60:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800cb62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb64:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cb68:	7c7a      	ldrb	r2, [r7, #17]
 800cb6a:	429a      	cmp	r2, r3
 800cb6c:	d907      	bls.n	800cb7e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800cb6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb70:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cb74:	3301      	adds	r3, #1
 800cb76:	b2da      	uxtb	r2, r3
 800cb78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb7a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800cb7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb80:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cb84:	7c7a      	ldrb	r2, [r7, #17]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	f200 80d2 	bhi.w	800cd30 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800cb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d108      	bne.n	800cbac <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800cb9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb9c:	f005 f964 	bl	8011e68 <tcp_zero_window_probe>
 800cba0:	4603      	mov	r3, r0
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d014      	beq.n	800cbd0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800cba6:	2300      	movs	r3, #0
 800cba8:	623b      	str	r3, [r7, #32]
 800cbaa:	e011      	b.n	800cbd0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800cbac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cbb2:	4619      	mov	r1, r3
 800cbb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbb6:	f004 f829 	bl	8010c0c <tcp_split_unsent_seg>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d107      	bne.n	800cbd0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800cbc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbc2:	f004 faa9 	bl	8011118 <tcp_output>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d101      	bne.n	800cbd0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800cbd0:	6a3b      	ldr	r3, [r7, #32]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	f000 80ac 	beq.w	800cd30 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800cbd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbda:	2200      	movs	r2, #0
 800cbdc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800cbe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cbe6:	2b06      	cmp	r3, #6
 800cbe8:	f200 80a2 	bhi.w	800cd30 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800cbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cbf2:	3301      	adds	r3, #1
 800cbf4:	b2da      	uxtb	r2, r3
 800cbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800cbfc:	e098      	b.n	800cd30 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800cbfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc00:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	db0f      	blt.n	800cc28 <tcp_slowtmr+0x1f0>
 800cc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc0a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cc0e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d008      	beq.n	800cc28 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800cc16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc18:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cc1c:	b29b      	uxth	r3, r3
 800cc1e:	3301      	adds	r3, #1
 800cc20:	b29b      	uxth	r3, r3
 800cc22:	b21a      	sxth	r2, r3
 800cc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc26:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800cc28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc2a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800cc2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc30:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cc34:	429a      	cmp	r2, r3
 800cc36:	db7b      	blt.n	800cd30 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800cc38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc3a:	f004 fd5f 	bl	80116fc <tcp_rexmit_rto_prepare>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d007      	beq.n	800cc54 <tcp_slowtmr+0x21c>
 800cc44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d171      	bne.n	800cd30 <tcp_slowtmr+0x2f8>
 800cc4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d06d      	beq.n	800cd30 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800cc54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc56:	7d1b      	ldrb	r3, [r3, #20]
 800cc58:	2b02      	cmp	r3, #2
 800cc5a:	d03a      	beq.n	800ccd2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800cc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cc62:	2b0c      	cmp	r3, #12
 800cc64:	bf28      	it	cs
 800cc66:	230c      	movcs	r3, #12
 800cc68:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800cc6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc6c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cc70:	10db      	asrs	r3, r3, #3
 800cc72:	b21b      	sxth	r3, r3
 800cc74:	461a      	mov	r2, r3
 800cc76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc78:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cc7c:	4413      	add	r3, r2
 800cc7e:	7efa      	ldrb	r2, [r7, #27]
 800cc80:	4910      	ldr	r1, [pc, #64]	; (800ccc4 <tcp_slowtmr+0x28c>)
 800cc82:	5c8a      	ldrb	r2, [r1, r2]
 800cc84:	4093      	lsls	r3, r2
 800cc86:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800cc8e:	4293      	cmp	r3, r2
 800cc90:	dc1a      	bgt.n	800ccc8 <tcp_slowtmr+0x290>
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	b21a      	sxth	r2, r3
 800cc96:	e019      	b.n	800cccc <tcp_slowtmr+0x294>
 800cc98:	24003608 	.word	0x24003608
 800cc9c:	240000f2 	.word	0x240000f2
 800cca0:	24003604 	.word	0x24003604
 800cca4:	080169d0 	.word	0x080169d0
 800cca8:	08016d14 	.word	0x08016d14
 800ccac:	08016a14 	.word	0x08016a14
 800ccb0:	08016d40 	.word	0x08016d40
 800ccb4:	08016d6c 	.word	0x08016d6c
 800ccb8:	08016d9c 	.word	0x08016d9c
 800ccbc:	08016dd0 	.word	0x08016dd0
 800ccc0:	080197a8 	.word	0x080197a8
 800ccc4:	08019798 	.word	0x08019798
 800ccc8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800ccd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ccd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccda:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ccde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cce4:	4293      	cmp	r3, r2
 800cce6:	bf28      	it	cs
 800cce8:	4613      	movcs	r3, r2
 800ccea:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ccec:	8a7b      	ldrh	r3, [r7, #18]
 800ccee:	085b      	lsrs	r3, r3, #1
 800ccf0:	b29a      	uxth	r2, r3
 800ccf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ccf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccfa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ccfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd02:	005b      	lsls	r3, r3, #1
 800cd04:	b29b      	uxth	r3, r3
 800cd06:	429a      	cmp	r2, r3
 800cd08:	d206      	bcs.n	800cd18 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800cd0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd0e:	005b      	lsls	r3, r3, #1
 800cd10:	b29a      	uxth	r2, r3
 800cd12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd14:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800cd18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd1a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800cd1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd1e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800cd22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd24:	2200      	movs	r2, #0
 800cd26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800cd2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd2c:	f004 fd56 	bl	80117dc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800cd30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd32:	7d1b      	ldrb	r3, [r3, #20]
 800cd34:	2b06      	cmp	r3, #6
 800cd36:	d111      	bne.n	800cd5c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800cd38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd3a:	8b5b      	ldrh	r3, [r3, #26]
 800cd3c:	f003 0310 	and.w	r3, r3, #16
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d00b      	beq.n	800cd5c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cd44:	4b9c      	ldr	r3, [pc, #624]	; (800cfb8 <tcp_slowtmr+0x580>)
 800cd46:	681a      	ldr	r2, [r3, #0]
 800cd48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd4a:	6a1b      	ldr	r3, [r3, #32]
 800cd4c:	1ad3      	subs	r3, r2, r3
 800cd4e:	2b28      	cmp	r3, #40	; 0x28
 800cd50:	d904      	bls.n	800cd5c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800cd52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd56:	3301      	adds	r3, #1
 800cd58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cd5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd5e:	7a5b      	ldrb	r3, [r3, #9]
 800cd60:	f003 0308 	and.w	r3, r3, #8
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d04a      	beq.n	800cdfe <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800cd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd6a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cd6c:	2b04      	cmp	r3, #4
 800cd6e:	d003      	beq.n	800cd78 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800cd70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd72:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800cd74:	2b07      	cmp	r3, #7
 800cd76:	d142      	bne.n	800cdfe <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cd78:	4b8f      	ldr	r3, [pc, #572]	; (800cfb8 <tcp_slowtmr+0x580>)
 800cd7a:	681a      	ldr	r2, [r3, #0]
 800cd7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd7e:	6a1b      	ldr	r3, [r3, #32]
 800cd80:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800cd82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd84:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800cd88:	4b8c      	ldr	r3, [pc, #560]	; (800cfbc <tcp_slowtmr+0x584>)
 800cd8a:	440b      	add	r3, r1
 800cd8c:	498c      	ldr	r1, [pc, #560]	; (800cfc0 <tcp_slowtmr+0x588>)
 800cd8e:	fba1 1303 	umull	r1, r3, r1, r3
 800cd92:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cd94:	429a      	cmp	r2, r3
 800cd96:	d90a      	bls.n	800cdae <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800cd98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd9c:	3301      	adds	r3, #1
 800cd9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800cda2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cda6:	3301      	adds	r3, #1
 800cda8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cdac:	e027      	b.n	800cdfe <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cdae:	4b82      	ldr	r3, [pc, #520]	; (800cfb8 <tcp_slowtmr+0x580>)
 800cdb0:	681a      	ldr	r2, [r3, #0]
 800cdb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb4:	6a1b      	ldr	r3, [r3, #32]
 800cdb6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800cdb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdba:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800cdbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	4b7f      	ldr	r3, [pc, #508]	; (800cfc4 <tcp_slowtmr+0x58c>)
 800cdc8:	fb03 f300 	mul.w	r3, r3, r0
 800cdcc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800cdce:	497c      	ldr	r1, [pc, #496]	; (800cfc0 <tcp_slowtmr+0x588>)
 800cdd0:	fba1 1303 	umull	r1, r3, r1, r3
 800cdd4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	d911      	bls.n	800cdfe <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800cdda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cddc:	f005 f804 	bl	8011de8 <tcp_keepalive>
 800cde0:	4603      	mov	r3, r0
 800cde2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800cde6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d107      	bne.n	800cdfe <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800cdee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdf0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800cdf4:	3301      	adds	r3, #1
 800cdf6:	b2da      	uxtb	r2, r3
 800cdf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdfa:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800cdfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d011      	beq.n	800ce2a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ce06:	4b6c      	ldr	r3, [pc, #432]	; (800cfb8 <tcp_slowtmr+0x580>)
 800ce08:	681a      	ldr	r2, [r3, #0]
 800ce0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0c:	6a1b      	ldr	r3, [r3, #32]
 800ce0e:	1ad2      	subs	r2, r2, r3
 800ce10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce12:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ce16:	4619      	mov	r1, r3
 800ce18:	460b      	mov	r3, r1
 800ce1a:	005b      	lsls	r3, r3, #1
 800ce1c:	440b      	add	r3, r1
 800ce1e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ce20:	429a      	cmp	r2, r3
 800ce22:	d302      	bcc.n	800ce2a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800ce24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce26:	f000 fec3 	bl	800dbb0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ce2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce2c:	7d1b      	ldrb	r3, [r3, #20]
 800ce2e:	2b03      	cmp	r3, #3
 800ce30:	d10b      	bne.n	800ce4a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ce32:	4b61      	ldr	r3, [pc, #388]	; (800cfb8 <tcp_slowtmr+0x580>)
 800ce34:	681a      	ldr	r2, [r3, #0]
 800ce36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce38:	6a1b      	ldr	r3, [r3, #32]
 800ce3a:	1ad3      	subs	r3, r2, r3
 800ce3c:	2b28      	cmp	r3, #40	; 0x28
 800ce3e:	d904      	bls.n	800ce4a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800ce40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce44:	3301      	adds	r3, #1
 800ce46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800ce4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce4c:	7d1b      	ldrb	r3, [r3, #20]
 800ce4e:	2b09      	cmp	r3, #9
 800ce50:	d10b      	bne.n	800ce6a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ce52:	4b59      	ldr	r3, [pc, #356]	; (800cfb8 <tcp_slowtmr+0x580>)
 800ce54:	681a      	ldr	r2, [r3, #0]
 800ce56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce58:	6a1b      	ldr	r3, [r3, #32]
 800ce5a:	1ad3      	subs	r3, r2, r3
 800ce5c:	2bf0      	cmp	r3, #240	; 0xf0
 800ce5e:	d904      	bls.n	800ce6a <tcp_slowtmr+0x432>
        ++pcb_remove;
 800ce60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce64:	3301      	adds	r3, #1
 800ce66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ce6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d060      	beq.n	800cf34 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800ce72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce78:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800ce7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce7c:	f000 fce4 	bl	800d848 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800ce80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d010      	beq.n	800cea8 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ce86:	4b50      	ldr	r3, [pc, #320]	; (800cfc8 <tcp_slowtmr+0x590>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d106      	bne.n	800ce9e <tcp_slowtmr+0x466>
 800ce90:	4b4e      	ldr	r3, [pc, #312]	; (800cfcc <tcp_slowtmr+0x594>)
 800ce92:	f240 526d 	movw	r2, #1389	; 0x56d
 800ce96:	494e      	ldr	r1, [pc, #312]	; (800cfd0 <tcp_slowtmr+0x598>)
 800ce98:	484e      	ldr	r0, [pc, #312]	; (800cfd4 <tcp_slowtmr+0x59c>)
 800ce9a:	f007 ff77 	bl	8014d8c <iprintf>
        prev->next = pcb->next;
 800ce9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea0:	68da      	ldr	r2, [r3, #12]
 800cea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea4:	60da      	str	r2, [r3, #12]
 800cea6:	e00f      	b.n	800cec8 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800cea8:	4b47      	ldr	r3, [pc, #284]	; (800cfc8 <tcp_slowtmr+0x590>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ceae:	429a      	cmp	r2, r3
 800ceb0:	d006      	beq.n	800cec0 <tcp_slowtmr+0x488>
 800ceb2:	4b46      	ldr	r3, [pc, #280]	; (800cfcc <tcp_slowtmr+0x594>)
 800ceb4:	f240 5271 	movw	r2, #1393	; 0x571
 800ceb8:	4947      	ldr	r1, [pc, #284]	; (800cfd8 <tcp_slowtmr+0x5a0>)
 800ceba:	4846      	ldr	r0, [pc, #280]	; (800cfd4 <tcp_slowtmr+0x59c>)
 800cebc:	f007 ff66 	bl	8014d8c <iprintf>
        tcp_active_pcbs = pcb->next;
 800cec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec2:	68db      	ldr	r3, [r3, #12]
 800cec4:	4a40      	ldr	r2, [pc, #256]	; (800cfc8 <tcp_slowtmr+0x590>)
 800cec6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800cec8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d013      	beq.n	800cef8 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ced0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ced4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ced8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800ceda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cedc:	3304      	adds	r3, #4
 800cede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cee0:	8ad2      	ldrh	r2, [r2, #22]
 800cee2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cee4:	8b09      	ldrh	r1, [r1, #24]
 800cee6:	9102      	str	r1, [sp, #8]
 800cee8:	9201      	str	r2, [sp, #4]
 800ceea:	9300      	str	r3, [sp, #0]
 800ceec:	462b      	mov	r3, r5
 800ceee:	4622      	mov	r2, r4
 800cef0:	4601      	mov	r1, r0
 800cef2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cef4:	f004 fec4 	bl	8011c80 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800cef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cefa:	691b      	ldr	r3, [r3, #16]
 800cefc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800cefe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf00:	7d1b      	ldrb	r3, [r3, #20]
 800cf02:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800cf04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf06:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800cf08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf0a:	68db      	ldr	r3, [r3, #12]
 800cf0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cf0e:	6838      	ldr	r0, [r7, #0]
 800cf10:	f7ff f83a 	bl	800bf88 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800cf14:	4b31      	ldr	r3, [pc, #196]	; (800cfdc <tcp_slowtmr+0x5a4>)
 800cf16:	2200      	movs	r2, #0
 800cf18:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d004      	beq.n	800cf2a <tcp_slowtmr+0x4f2>
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	f06f 010c 	mvn.w	r1, #12
 800cf26:	68b8      	ldr	r0, [r7, #8]
 800cf28:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800cf2a:	4b2c      	ldr	r3, [pc, #176]	; (800cfdc <tcp_slowtmr+0x5a4>)
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d037      	beq.n	800cfa2 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800cf32:	e592      	b.n	800ca5a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800cf34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf36:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cf38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf3a:	68db      	ldr	r3, [r3, #12]
 800cf3c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800cf3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf40:	7f1b      	ldrb	r3, [r3, #28]
 800cf42:	3301      	adds	r3, #1
 800cf44:	b2da      	uxtb	r2, r3
 800cf46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf48:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800cf4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf4c:	7f1a      	ldrb	r2, [r3, #28]
 800cf4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf50:	7f5b      	ldrb	r3, [r3, #29]
 800cf52:	429a      	cmp	r2, r3
 800cf54:	d325      	bcc.n	800cfa2 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800cf56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf58:	2200      	movs	r2, #0
 800cf5a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800cf5c:	4b1f      	ldr	r3, [pc, #124]	; (800cfdc <tcp_slowtmr+0x5a4>)
 800cf5e:	2200      	movs	r2, #0
 800cf60:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800cf62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d00b      	beq.n	800cf84 <tcp_slowtmr+0x54c>
 800cf6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf74:	6912      	ldr	r2, [r2, #16]
 800cf76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf78:	4610      	mov	r0, r2
 800cf7a:	4798      	blx	r3
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800cf82:	e002      	b.n	800cf8a <tcp_slowtmr+0x552>
 800cf84:	2300      	movs	r3, #0
 800cf86:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800cf8a:	4b14      	ldr	r3, [pc, #80]	; (800cfdc <tcp_slowtmr+0x5a4>)
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d000      	beq.n	800cf94 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800cf92:	e562      	b.n	800ca5a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800cf94:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d102      	bne.n	800cfa2 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800cf9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf9e:	f004 f8bb 	bl	8011118 <tcp_output>
  while (pcb != NULL) {
 800cfa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	f47f ad5e 	bne.w	800ca66 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800cfae:	4b0c      	ldr	r3, [pc, #48]	; (800cfe0 <tcp_slowtmr+0x5a8>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800cfb4:	e069      	b.n	800d08a <tcp_slowtmr+0x652>
 800cfb6:	bf00      	nop
 800cfb8:	24003608 	.word	0x24003608
 800cfbc:	000a4cb8 	.word	0x000a4cb8
 800cfc0:	10624dd3 	.word	0x10624dd3
 800cfc4:	000124f8 	.word	0x000124f8
 800cfc8:	24003604 	.word	0x24003604
 800cfcc:	080169d0 	.word	0x080169d0
 800cfd0:	08016e08 	.word	0x08016e08
 800cfd4:	08016a14 	.word	0x08016a14
 800cfd8:	08016e34 	.word	0x08016e34
 800cfdc:	24003600 	.word	0x24003600
 800cfe0:	24003614 	.word	0x24003614
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cfe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe6:	7d1b      	ldrb	r3, [r3, #20]
 800cfe8:	2b0a      	cmp	r3, #10
 800cfea:	d006      	beq.n	800cffa <tcp_slowtmr+0x5c2>
 800cfec:	4b2b      	ldr	r3, [pc, #172]	; (800d09c <tcp_slowtmr+0x664>)
 800cfee:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800cff2:	492b      	ldr	r1, [pc, #172]	; (800d0a0 <tcp_slowtmr+0x668>)
 800cff4:	482b      	ldr	r0, [pc, #172]	; (800d0a4 <tcp_slowtmr+0x66c>)
 800cff6:	f007 fec9 	bl	8014d8c <iprintf>
    pcb_remove = 0;
 800cffa:	2300      	movs	r3, #0
 800cffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d000:	4b29      	ldr	r3, [pc, #164]	; (800d0a8 <tcp_slowtmr+0x670>)
 800d002:	681a      	ldr	r2, [r3, #0]
 800d004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d006:	6a1b      	ldr	r3, [r3, #32]
 800d008:	1ad3      	subs	r3, r2, r3
 800d00a:	2bf0      	cmp	r3, #240	; 0xf0
 800d00c:	d904      	bls.n	800d018 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d00e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d012:	3301      	adds	r3, #1
 800d014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d018:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d02f      	beq.n	800d080 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d020:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d022:	f000 fc11 	bl	800d848 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d010      	beq.n	800d04e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d02c:	4b1f      	ldr	r3, [pc, #124]	; (800d0ac <tcp_slowtmr+0x674>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d032:	429a      	cmp	r2, r3
 800d034:	d106      	bne.n	800d044 <tcp_slowtmr+0x60c>
 800d036:	4b19      	ldr	r3, [pc, #100]	; (800d09c <tcp_slowtmr+0x664>)
 800d038:	f240 52af 	movw	r2, #1455	; 0x5af
 800d03c:	491c      	ldr	r1, [pc, #112]	; (800d0b0 <tcp_slowtmr+0x678>)
 800d03e:	4819      	ldr	r0, [pc, #100]	; (800d0a4 <tcp_slowtmr+0x66c>)
 800d040:	f007 fea4 	bl	8014d8c <iprintf>
        prev->next = pcb->next;
 800d044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d046:	68da      	ldr	r2, [r3, #12]
 800d048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d04a:	60da      	str	r2, [r3, #12]
 800d04c:	e00f      	b.n	800d06e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d04e:	4b17      	ldr	r3, [pc, #92]	; (800d0ac <tcp_slowtmr+0x674>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d054:	429a      	cmp	r2, r3
 800d056:	d006      	beq.n	800d066 <tcp_slowtmr+0x62e>
 800d058:	4b10      	ldr	r3, [pc, #64]	; (800d09c <tcp_slowtmr+0x664>)
 800d05a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d05e:	4915      	ldr	r1, [pc, #84]	; (800d0b4 <tcp_slowtmr+0x67c>)
 800d060:	4810      	ldr	r0, [pc, #64]	; (800d0a4 <tcp_slowtmr+0x66c>)
 800d062:	f007 fe93 	bl	8014d8c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d068:	68db      	ldr	r3, [r3, #12]
 800d06a:	4a10      	ldr	r2, [pc, #64]	; (800d0ac <tcp_slowtmr+0x674>)
 800d06c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d070:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d074:	68db      	ldr	r3, [r3, #12]
 800d076:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d078:	69f8      	ldr	r0, [r7, #28]
 800d07a:	f7fe ff85 	bl	800bf88 <tcp_free>
 800d07e:	e004      	b.n	800d08a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d082:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d086:	68db      	ldr	r3, [r3, #12]
 800d088:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d1a9      	bne.n	800cfe4 <tcp_slowtmr+0x5ac>
    }
  }
}
 800d090:	bf00      	nop
 800d092:	bf00      	nop
 800d094:	3730      	adds	r7, #48	; 0x30
 800d096:	46bd      	mov	sp, r7
 800d098:	bdb0      	pop	{r4, r5, r7, pc}
 800d09a:	bf00      	nop
 800d09c:	080169d0 	.word	0x080169d0
 800d0a0:	08016e60 	.word	0x08016e60
 800d0a4:	08016a14 	.word	0x08016a14
 800d0a8:	24003608 	.word	0x24003608
 800d0ac:	24003614 	.word	0x24003614
 800d0b0:	08016e90 	.word	0x08016e90
 800d0b4:	08016eb8 	.word	0x08016eb8

0800d0b8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b082      	sub	sp, #8
 800d0bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d0be:	4b2d      	ldr	r3, [pc, #180]	; (800d174 <tcp_fasttmr+0xbc>)
 800d0c0:	781b      	ldrb	r3, [r3, #0]
 800d0c2:	3301      	adds	r3, #1
 800d0c4:	b2da      	uxtb	r2, r3
 800d0c6:	4b2b      	ldr	r3, [pc, #172]	; (800d174 <tcp_fasttmr+0xbc>)
 800d0c8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d0ca:	4b2b      	ldr	r3, [pc, #172]	; (800d178 <tcp_fasttmr+0xc0>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d0d0:	e048      	b.n	800d164 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	7f9a      	ldrb	r2, [r3, #30]
 800d0d6:	4b27      	ldr	r3, [pc, #156]	; (800d174 <tcp_fasttmr+0xbc>)
 800d0d8:	781b      	ldrb	r3, [r3, #0]
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d03f      	beq.n	800d15e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d0de:	4b25      	ldr	r3, [pc, #148]	; (800d174 <tcp_fasttmr+0xbc>)
 800d0e0:	781a      	ldrb	r2, [r3, #0]
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	8b5b      	ldrh	r3, [r3, #26]
 800d0ea:	f003 0301 	and.w	r3, r3, #1
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d010      	beq.n	800d114 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	8b5b      	ldrh	r3, [r3, #26]
 800d0f6:	f043 0302 	orr.w	r3, r3, #2
 800d0fa:	b29a      	uxth	r2, r3
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f004 f809 	bl	8011118 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	8b5b      	ldrh	r3, [r3, #26]
 800d10a:	f023 0303 	bic.w	r3, r3, #3
 800d10e:	b29a      	uxth	r2, r3
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	8b5b      	ldrh	r3, [r3, #26]
 800d118:	f003 0308 	and.w	r3, r3, #8
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d009      	beq.n	800d134 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	8b5b      	ldrh	r3, [r3, #26]
 800d124:	f023 0308 	bic.w	r3, r3, #8
 800d128:	b29a      	uxth	r2, r3
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f7ff f8be 	bl	800c2b0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	68db      	ldr	r3, [r3, #12]
 800d138:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d00a      	beq.n	800d158 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d142:	4b0e      	ldr	r3, [pc, #56]	; (800d17c <tcp_fasttmr+0xc4>)
 800d144:	2200      	movs	r2, #0
 800d146:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f000 f819 	bl	800d180 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d14e:	4b0b      	ldr	r3, [pc, #44]	; (800d17c <tcp_fasttmr+0xc4>)
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d000      	beq.n	800d158 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d156:	e7b8      	b.n	800d0ca <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	607b      	str	r3, [r7, #4]
 800d15c:	e002      	b.n	800d164 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	68db      	ldr	r3, [r3, #12]
 800d162:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d1b3      	bne.n	800d0d2 <tcp_fasttmr+0x1a>
    }
  }
}
 800d16a:	bf00      	nop
 800d16c:	bf00      	nop
 800d16e:	3708      	adds	r7, #8
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}
 800d174:	240000f2 	.word	0x240000f2
 800d178:	24003604 	.word	0x24003604
 800d17c:	24003600 	.word	0x24003600

0800d180 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d180:	b590      	push	{r4, r7, lr}
 800d182:	b085      	sub	sp, #20
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d109      	bne.n	800d1a2 <tcp_process_refused_data+0x22>
 800d18e:	4b37      	ldr	r3, [pc, #220]	; (800d26c <tcp_process_refused_data+0xec>)
 800d190:	f240 6209 	movw	r2, #1545	; 0x609
 800d194:	4936      	ldr	r1, [pc, #216]	; (800d270 <tcp_process_refused_data+0xf0>)
 800d196:	4837      	ldr	r0, [pc, #220]	; (800d274 <tcp_process_refused_data+0xf4>)
 800d198:	f007 fdf8 	bl	8014d8c <iprintf>
 800d19c:	f06f 030f 	mvn.w	r3, #15
 800d1a0:	e060      	b.n	800d264 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d1a6:	7b5b      	ldrb	r3, [r3, #13]
 800d1a8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d1ae:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d00b      	beq.n	800d1d8 <tcp_process_refused_data+0x58>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6918      	ldr	r0, [r3, #16]
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	68ba      	ldr	r2, [r7, #8]
 800d1ce:	6879      	ldr	r1, [r7, #4]
 800d1d0:	47a0      	blx	r4
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	73fb      	strb	r3, [r7, #15]
 800d1d6:	e007      	b.n	800d1e8 <tcp_process_refused_data+0x68>
 800d1d8:	2300      	movs	r3, #0
 800d1da:	68ba      	ldr	r2, [r7, #8]
 800d1dc:	6879      	ldr	r1, [r7, #4]
 800d1de:	2000      	movs	r0, #0
 800d1e0:	f000 f8c2 	bl	800d368 <tcp_recv_null>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d1e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d12a      	bne.n	800d246 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d1f0:	7bbb      	ldrb	r3, [r7, #14]
 800d1f2:	f003 0320 	and.w	r3, r3, #32
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d033      	beq.n	800d262 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d1fe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d202:	d005      	beq.n	800d210 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d208:	3301      	adds	r3, #1
 800d20a:	b29a      	uxth	r2, r3
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d216:	2b00      	cmp	r3, #0
 800d218:	d00b      	beq.n	800d232 <tcp_process_refused_data+0xb2>
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6918      	ldr	r0, [r3, #16]
 800d224:	2300      	movs	r3, #0
 800d226:	2200      	movs	r2, #0
 800d228:	6879      	ldr	r1, [r7, #4]
 800d22a:	47a0      	blx	r4
 800d22c:	4603      	mov	r3, r0
 800d22e:	73fb      	strb	r3, [r7, #15]
 800d230:	e001      	b.n	800d236 <tcp_process_refused_data+0xb6>
 800d232:	2300      	movs	r3, #0
 800d234:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d23a:	f113 0f0d 	cmn.w	r3, #13
 800d23e:	d110      	bne.n	800d262 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d240:	f06f 030c 	mvn.w	r3, #12
 800d244:	e00e      	b.n	800d264 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d24a:	f113 0f0d 	cmn.w	r3, #13
 800d24e:	d102      	bne.n	800d256 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d250:	f06f 030c 	mvn.w	r3, #12
 800d254:	e006      	b.n	800d264 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	68ba      	ldr	r2, [r7, #8]
 800d25a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d25c:	f06f 0304 	mvn.w	r3, #4
 800d260:	e000      	b.n	800d264 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d262:	2300      	movs	r3, #0
}
 800d264:	4618      	mov	r0, r3
 800d266:	3714      	adds	r7, #20
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd90      	pop	{r4, r7, pc}
 800d26c:	080169d0 	.word	0x080169d0
 800d270:	08016ee0 	.word	0x08016ee0
 800d274:	08016a14 	.word	0x08016a14

0800d278 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b084      	sub	sp, #16
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d280:	e007      	b.n	800d292 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f000 f80a 	bl	800d2a2 <tcp_seg_free>
    seg = next;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d1f4      	bne.n	800d282 <tcp_segs_free+0xa>
  }
}
 800d298:	bf00      	nop
 800d29a:	bf00      	nop
 800d29c:	3710      	adds	r7, #16
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}

0800d2a2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d2a2:	b580      	push	{r7, lr}
 800d2a4:	b082      	sub	sp, #8
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d00c      	beq.n	800d2ca <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d004      	beq.n	800d2c2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	685b      	ldr	r3, [r3, #4]
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f7fe fbb3 	bl	800ba28 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d2c2:	6879      	ldr	r1, [r7, #4]
 800d2c4:	2003      	movs	r0, #3
 800d2c6:	f7fd fd39 	bl	800ad3c <memp_free>
  }
}
 800d2ca:	bf00      	nop
 800d2cc:	3708      	adds	r7, #8
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}
	...

0800d2d4 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b082      	sub	sp, #8
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	460b      	mov	r3, r1
 800d2de:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d107      	bne.n	800d2f6 <tcp_setprio+0x22>
 800d2e6:	4b07      	ldr	r3, [pc, #28]	; (800d304 <tcp_setprio+0x30>)
 800d2e8:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800d2ec:	4906      	ldr	r1, [pc, #24]	; (800d308 <tcp_setprio+0x34>)
 800d2ee:	4807      	ldr	r0, [pc, #28]	; (800d30c <tcp_setprio+0x38>)
 800d2f0:	f007 fd4c 	bl	8014d8c <iprintf>
 800d2f4:	e002      	b.n	800d2fc <tcp_setprio+0x28>

  pcb->prio = prio;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	78fa      	ldrb	r2, [r7, #3]
 800d2fa:	755a      	strb	r2, [r3, #21]
}
 800d2fc:	3708      	adds	r7, #8
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}
 800d302:	bf00      	nop
 800d304:	080169d0 	.word	0x080169d0
 800d308:	08016f08 	.word	0x08016f08
 800d30c:	08016a14 	.word	0x08016a14

0800d310 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b084      	sub	sp, #16
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d106      	bne.n	800d32c <tcp_seg_copy+0x1c>
 800d31e:	4b0f      	ldr	r3, [pc, #60]	; (800d35c <tcp_seg_copy+0x4c>)
 800d320:	f240 6282 	movw	r2, #1666	; 0x682
 800d324:	490e      	ldr	r1, [pc, #56]	; (800d360 <tcp_seg_copy+0x50>)
 800d326:	480f      	ldr	r0, [pc, #60]	; (800d364 <tcp_seg_copy+0x54>)
 800d328:	f007 fd30 	bl	8014d8c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d32c:	2003      	movs	r0, #3
 800d32e:	f7fd fc95 	bl	800ac5c <memp_malloc>
 800d332:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d101      	bne.n	800d33e <tcp_seg_copy+0x2e>
    return NULL;
 800d33a:	2300      	movs	r3, #0
 800d33c:	e00a      	b.n	800d354 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d33e:	2210      	movs	r2, #16
 800d340:	6879      	ldr	r1, [r7, #4]
 800d342:	68f8      	ldr	r0, [r7, #12]
 800d344:	f007 fd0c 	bl	8014d60 <memcpy>
  pbuf_ref(cseg->p);
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	685b      	ldr	r3, [r3, #4]
 800d34c:	4618      	mov	r0, r3
 800d34e:	f7fe fc0b 	bl	800bb68 <pbuf_ref>
  return cseg;
 800d352:	68fb      	ldr	r3, [r7, #12]
}
 800d354:	4618      	mov	r0, r3
 800d356:	3710      	adds	r7, #16
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}
 800d35c:	080169d0 	.word	0x080169d0
 800d360:	08016f24 	.word	0x08016f24
 800d364:	08016a14 	.word	0x08016a14

0800d368 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b084      	sub	sp, #16
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	60f8      	str	r0, [r7, #12]
 800d370:	60b9      	str	r1, [r7, #8]
 800d372:	607a      	str	r2, [r7, #4]
 800d374:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d109      	bne.n	800d390 <tcp_recv_null+0x28>
 800d37c:	4b12      	ldr	r3, [pc, #72]	; (800d3c8 <tcp_recv_null+0x60>)
 800d37e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d382:	4912      	ldr	r1, [pc, #72]	; (800d3cc <tcp_recv_null+0x64>)
 800d384:	4812      	ldr	r0, [pc, #72]	; (800d3d0 <tcp_recv_null+0x68>)
 800d386:	f007 fd01 	bl	8014d8c <iprintf>
 800d38a:	f06f 030f 	mvn.w	r3, #15
 800d38e:	e016      	b.n	800d3be <tcp_recv_null+0x56>

  if (p != NULL) {
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d009      	beq.n	800d3aa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	891b      	ldrh	r3, [r3, #8]
 800d39a:	4619      	mov	r1, r3
 800d39c:	68b8      	ldr	r0, [r7, #8]
 800d39e:	f7ff fab5 	bl	800c90c <tcp_recved>
    pbuf_free(p);
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	f7fe fb40 	bl	800ba28 <pbuf_free>
 800d3a8:	e008      	b.n	800d3bc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d3aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d104      	bne.n	800d3bc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d3b2:	68b8      	ldr	r0, [r7, #8]
 800d3b4:	f7fe ffe6 	bl	800c384 <tcp_close>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	e000      	b.n	800d3be <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d3bc:	2300      	movs	r3, #0
}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	3710      	adds	r7, #16
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}
 800d3c6:	bf00      	nop
 800d3c8:	080169d0 	.word	0x080169d0
 800d3cc:	08016f40 	.word	0x08016f40
 800d3d0:	08016a14 	.word	0x08016a14

0800d3d4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b086      	sub	sp, #24
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	4603      	mov	r3, r0
 800d3dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d3de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	db01      	blt.n	800d3ea <tcp_kill_prio+0x16>
 800d3e6:	79fb      	ldrb	r3, [r7, #7]
 800d3e8:	e000      	b.n	800d3ec <tcp_kill_prio+0x18>
 800d3ea:	237f      	movs	r3, #127	; 0x7f
 800d3ec:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d3ee:	7afb      	ldrb	r3, [r7, #11]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d034      	beq.n	800d45e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d3f4:	7afb      	ldrb	r3, [r7, #11]
 800d3f6:	3b01      	subs	r3, #1
 800d3f8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d3fe:	2300      	movs	r3, #0
 800d400:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d402:	4b19      	ldr	r3, [pc, #100]	; (800d468 <tcp_kill_prio+0x94>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	617b      	str	r3, [r7, #20]
 800d408:	e01f      	b.n	800d44a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	7d5b      	ldrb	r3, [r3, #21]
 800d40e:	7afa      	ldrb	r2, [r7, #11]
 800d410:	429a      	cmp	r2, r3
 800d412:	d80c      	bhi.n	800d42e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d418:	7afa      	ldrb	r2, [r7, #11]
 800d41a:	429a      	cmp	r2, r3
 800d41c:	d112      	bne.n	800d444 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d41e:	4b13      	ldr	r3, [pc, #76]	; (800d46c <tcp_kill_prio+0x98>)
 800d420:	681a      	ldr	r2, [r3, #0]
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	6a1b      	ldr	r3, [r3, #32]
 800d426:	1ad3      	subs	r3, r2, r3
 800d428:	68fa      	ldr	r2, [r7, #12]
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d80a      	bhi.n	800d444 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d42e:	4b0f      	ldr	r3, [pc, #60]	; (800d46c <tcp_kill_prio+0x98>)
 800d430:	681a      	ldr	r2, [r3, #0]
 800d432:	697b      	ldr	r3, [r7, #20]
 800d434:	6a1b      	ldr	r3, [r3, #32]
 800d436:	1ad3      	subs	r3, r2, r3
 800d438:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d43a:	697b      	ldr	r3, [r7, #20]
 800d43c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d43e:	697b      	ldr	r3, [r7, #20]
 800d440:	7d5b      	ldrb	r3, [r3, #21]
 800d442:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	68db      	ldr	r3, [r3, #12]
 800d448:	617b      	str	r3, [r7, #20]
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d1dc      	bne.n	800d40a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d450:	693b      	ldr	r3, [r7, #16]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d004      	beq.n	800d460 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d456:	6938      	ldr	r0, [r7, #16]
 800d458:	f7ff f87e 	bl	800c558 <tcp_abort>
 800d45c:	e000      	b.n	800d460 <tcp_kill_prio+0x8c>
    return;
 800d45e:	bf00      	nop
  }
}
 800d460:	3718      	adds	r7, #24
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	24003604 	.word	0x24003604
 800d46c:	24003608 	.word	0x24003608

0800d470 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b086      	sub	sp, #24
 800d474:	af00      	add	r7, sp, #0
 800d476:	4603      	mov	r3, r0
 800d478:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d47a:	79fb      	ldrb	r3, [r7, #7]
 800d47c:	2b08      	cmp	r3, #8
 800d47e:	d009      	beq.n	800d494 <tcp_kill_state+0x24>
 800d480:	79fb      	ldrb	r3, [r7, #7]
 800d482:	2b09      	cmp	r3, #9
 800d484:	d006      	beq.n	800d494 <tcp_kill_state+0x24>
 800d486:	4b1a      	ldr	r3, [pc, #104]	; (800d4f0 <tcp_kill_state+0x80>)
 800d488:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d48c:	4919      	ldr	r1, [pc, #100]	; (800d4f4 <tcp_kill_state+0x84>)
 800d48e:	481a      	ldr	r0, [pc, #104]	; (800d4f8 <tcp_kill_state+0x88>)
 800d490:	f007 fc7c 	bl	8014d8c <iprintf>

  inactivity = 0;
 800d494:	2300      	movs	r3, #0
 800d496:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d498:	2300      	movs	r3, #0
 800d49a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d49c:	4b17      	ldr	r3, [pc, #92]	; (800d4fc <tcp_kill_state+0x8c>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	617b      	str	r3, [r7, #20]
 800d4a2:	e017      	b.n	800d4d4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d4a4:	697b      	ldr	r3, [r7, #20]
 800d4a6:	7d1b      	ldrb	r3, [r3, #20]
 800d4a8:	79fa      	ldrb	r2, [r7, #7]
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d10f      	bne.n	800d4ce <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d4ae:	4b14      	ldr	r3, [pc, #80]	; (800d500 <tcp_kill_state+0x90>)
 800d4b0:	681a      	ldr	r2, [r3, #0]
 800d4b2:	697b      	ldr	r3, [r7, #20]
 800d4b4:	6a1b      	ldr	r3, [r3, #32]
 800d4b6:	1ad3      	subs	r3, r2, r3
 800d4b8:	68fa      	ldr	r2, [r7, #12]
 800d4ba:	429a      	cmp	r2, r3
 800d4bc:	d807      	bhi.n	800d4ce <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d4be:	4b10      	ldr	r3, [pc, #64]	; (800d500 <tcp_kill_state+0x90>)
 800d4c0:	681a      	ldr	r2, [r3, #0]
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	6a1b      	ldr	r3, [r3, #32]
 800d4c6:	1ad3      	subs	r3, r2, r3
 800d4c8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d4ce:	697b      	ldr	r3, [r7, #20]
 800d4d0:	68db      	ldr	r3, [r3, #12]
 800d4d2:	617b      	str	r3, [r7, #20]
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d1e4      	bne.n	800d4a4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d003      	beq.n	800d4e8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d4e0:	2100      	movs	r1, #0
 800d4e2:	6938      	ldr	r0, [r7, #16]
 800d4e4:	f7fe ff7a 	bl	800c3dc <tcp_abandon>
  }
}
 800d4e8:	bf00      	nop
 800d4ea:	3718      	adds	r7, #24
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}
 800d4f0:	080169d0 	.word	0x080169d0
 800d4f4:	08016f5c 	.word	0x08016f5c
 800d4f8:	08016a14 	.word	0x08016a14
 800d4fc:	24003604 	.word	0x24003604
 800d500:	24003608 	.word	0x24003608

0800d504 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b084      	sub	sp, #16
 800d508:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d50a:	2300      	movs	r3, #0
 800d50c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d50e:	2300      	movs	r3, #0
 800d510:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d512:	4b12      	ldr	r3, [pc, #72]	; (800d55c <tcp_kill_timewait+0x58>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	60fb      	str	r3, [r7, #12]
 800d518:	e012      	b.n	800d540 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d51a:	4b11      	ldr	r3, [pc, #68]	; (800d560 <tcp_kill_timewait+0x5c>)
 800d51c:	681a      	ldr	r2, [r3, #0]
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	6a1b      	ldr	r3, [r3, #32]
 800d522:	1ad3      	subs	r3, r2, r3
 800d524:	687a      	ldr	r2, [r7, #4]
 800d526:	429a      	cmp	r2, r3
 800d528:	d807      	bhi.n	800d53a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d52a:	4b0d      	ldr	r3, [pc, #52]	; (800d560 <tcp_kill_timewait+0x5c>)
 800d52c:	681a      	ldr	r2, [r3, #0]
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	6a1b      	ldr	r3, [r3, #32]
 800d532:	1ad3      	subs	r3, r2, r3
 800d534:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	68db      	ldr	r3, [r3, #12]
 800d53e:	60fb      	str	r3, [r7, #12]
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d1e9      	bne.n	800d51a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d002      	beq.n	800d552 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d54c:	68b8      	ldr	r0, [r7, #8]
 800d54e:	f7ff f803 	bl	800c558 <tcp_abort>
  }
}
 800d552:	bf00      	nop
 800d554:	3710      	adds	r7, #16
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}
 800d55a:	bf00      	nop
 800d55c:	24003614 	.word	0x24003614
 800d560:	24003608 	.word	0x24003608

0800d564 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b082      	sub	sp, #8
 800d568:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d56a:	4b10      	ldr	r3, [pc, #64]	; (800d5ac <tcp_handle_closepend+0x48>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d570:	e014      	b.n	800d59c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	68db      	ldr	r3, [r3, #12]
 800d576:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	8b5b      	ldrh	r3, [r3, #26]
 800d57c:	f003 0308 	and.w	r3, r3, #8
 800d580:	2b00      	cmp	r3, #0
 800d582:	d009      	beq.n	800d598 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	8b5b      	ldrh	r3, [r3, #26]
 800d588:	f023 0308 	bic.w	r3, r3, #8
 800d58c:	b29a      	uxth	r2, r3
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f7fe fe8c 	bl	800c2b0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d1e7      	bne.n	800d572 <tcp_handle_closepend+0xe>
  }
}
 800d5a2:	bf00      	nop
 800d5a4:	bf00      	nop
 800d5a6:	3708      	adds	r7, #8
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}
 800d5ac:	24003604 	.word	0x24003604

0800d5b0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b084      	sub	sp, #16
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d5ba:	2001      	movs	r0, #1
 800d5bc:	f7fd fb4e 	bl	800ac5c <memp_malloc>
 800d5c0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d126      	bne.n	800d616 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d5c8:	f7ff ffcc 	bl	800d564 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d5cc:	f7ff ff9a 	bl	800d504 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d5d0:	2001      	movs	r0, #1
 800d5d2:	f7fd fb43 	bl	800ac5c <memp_malloc>
 800d5d6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d11b      	bne.n	800d616 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d5de:	2009      	movs	r0, #9
 800d5e0:	f7ff ff46 	bl	800d470 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d5e4:	2001      	movs	r0, #1
 800d5e6:	f7fd fb39 	bl	800ac5c <memp_malloc>
 800d5ea:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d111      	bne.n	800d616 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d5f2:	2008      	movs	r0, #8
 800d5f4:	f7ff ff3c 	bl	800d470 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d5f8:	2001      	movs	r0, #1
 800d5fa:	f7fd fb2f 	bl	800ac5c <memp_malloc>
 800d5fe:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d107      	bne.n	800d616 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d606:	79fb      	ldrb	r3, [r7, #7]
 800d608:	4618      	mov	r0, r3
 800d60a:	f7ff fee3 	bl	800d3d4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d60e:	2001      	movs	r0, #1
 800d610:	f7fd fb24 	bl	800ac5c <memp_malloc>
 800d614:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d03f      	beq.n	800d69c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d61c:	229c      	movs	r2, #156	; 0x9c
 800d61e:	2100      	movs	r1, #0
 800d620:	68f8      	ldr	r0, [r7, #12]
 800d622:	f007 fbab 	bl	8014d7c <memset>
    pcb->prio = prio;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	79fa      	ldrb	r2, [r7, #7]
 800d62a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d632:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d63c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	22ff      	movs	r2, #255	; 0xff
 800d64a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d652:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	2206      	movs	r2, #6
 800d658:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	2206      	movs	r2, #6
 800d660:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d668:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	2201      	movs	r2, #1
 800d66e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d672:	4b0d      	ldr	r3, [pc, #52]	; (800d6a8 <tcp_alloc+0xf8>)
 800d674:	681a      	ldr	r2, [r3, #0]
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d67a:	4b0c      	ldr	r3, [pc, #48]	; (800d6ac <tcp_alloc+0xfc>)
 800d67c:	781a      	ldrb	r2, [r3, #0]
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d688:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	4a08      	ldr	r2, [pc, #32]	; (800d6b0 <tcp_alloc+0x100>)
 800d690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	4a07      	ldr	r2, [pc, #28]	; (800d6b4 <tcp_alloc+0x104>)
 800d698:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d69c:	68fb      	ldr	r3, [r7, #12]
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3710      	adds	r7, #16
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}
 800d6a6:	bf00      	nop
 800d6a8:	24003608 	.word	0x24003608
 800d6ac:	240000f2 	.word	0x240000f2
 800d6b0:	0800d369 	.word	0x0800d369
 800d6b4:	006ddd00 	.word	0x006ddd00

0800d6b8 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800d6bc:	2040      	movs	r0, #64	; 0x40
 800d6be:	f7ff ff77 	bl	800d5b0 <tcp_alloc>
 800d6c2:	4603      	mov	r3, r0
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	bd80      	pop	{r7, pc}

0800d6c8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800d6c8:	b480      	push	{r7}
 800d6ca:	b083      	sub	sp, #12
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
 800d6d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d002      	beq.n	800d6de <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	683a      	ldr	r2, [r7, #0]
 800d6dc:	611a      	str	r2, [r3, #16]
  }
}
 800d6de:	bf00      	nop
 800d6e0:	370c      	adds	r7, #12
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e8:	4770      	bx	lr
	...

0800d6ec <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b082      	sub	sp, #8
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d00e      	beq.n	800d71a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	7d1b      	ldrb	r3, [r3, #20]
 800d700:	2b01      	cmp	r3, #1
 800d702:	d106      	bne.n	800d712 <tcp_recv+0x26>
 800d704:	4b07      	ldr	r3, [pc, #28]	; (800d724 <tcp_recv+0x38>)
 800d706:	f240 72df 	movw	r2, #2015	; 0x7df
 800d70a:	4907      	ldr	r1, [pc, #28]	; (800d728 <tcp_recv+0x3c>)
 800d70c:	4807      	ldr	r0, [pc, #28]	; (800d72c <tcp_recv+0x40>)
 800d70e:	f007 fb3d 	bl	8014d8c <iprintf>
    pcb->recv = recv;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	683a      	ldr	r2, [r7, #0]
 800d716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800d71a:	bf00      	nop
 800d71c:	3708      	adds	r7, #8
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}
 800d722:	bf00      	nop
 800d724:	080169d0 	.word	0x080169d0
 800d728:	08016f6c 	.word	0x08016f6c
 800d72c:	08016a14 	.word	0x08016a14

0800d730 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b082      	sub	sp, #8
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
 800d738:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d00e      	beq.n	800d75e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	7d1b      	ldrb	r3, [r3, #20]
 800d744:	2b01      	cmp	r3, #1
 800d746:	d106      	bne.n	800d756 <tcp_sent+0x26>
 800d748:	4b07      	ldr	r3, [pc, #28]	; (800d768 <tcp_sent+0x38>)
 800d74a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800d74e:	4907      	ldr	r1, [pc, #28]	; (800d76c <tcp_sent+0x3c>)
 800d750:	4807      	ldr	r0, [pc, #28]	; (800d770 <tcp_sent+0x40>)
 800d752:	f007 fb1b 	bl	8014d8c <iprintf>
    pcb->sent = sent;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	683a      	ldr	r2, [r7, #0]
 800d75a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800d75e:	bf00      	nop
 800d760:	3708      	adds	r7, #8
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}
 800d766:	bf00      	nop
 800d768:	080169d0 	.word	0x080169d0
 800d76c:	08016f94 	.word	0x08016f94
 800d770:	08016a14 	.word	0x08016a14

0800d774 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b082      	sub	sp, #8
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
 800d77c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d00e      	beq.n	800d7a2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	7d1b      	ldrb	r3, [r3, #20]
 800d788:	2b01      	cmp	r3, #1
 800d78a:	d106      	bne.n	800d79a <tcp_err+0x26>
 800d78c:	4b07      	ldr	r3, [pc, #28]	; (800d7ac <tcp_err+0x38>)
 800d78e:	f640 020d 	movw	r2, #2061	; 0x80d
 800d792:	4907      	ldr	r1, [pc, #28]	; (800d7b0 <tcp_err+0x3c>)
 800d794:	4807      	ldr	r0, [pc, #28]	; (800d7b4 <tcp_err+0x40>)
 800d796:	f007 faf9 	bl	8014d8c <iprintf>
    pcb->errf = err;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	683a      	ldr	r2, [r7, #0]
 800d79e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800d7a2:	bf00      	nop
 800d7a4:	3708      	adds	r7, #8
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}
 800d7aa:	bf00      	nop
 800d7ac:	080169d0 	.word	0x080169d0
 800d7b0:	08016fbc 	.word	0x08016fbc
 800d7b4:	08016a14 	.word	0x08016a14

0800d7b8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b085      	sub	sp, #20
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d008      	beq.n	800d7da <tcp_accept+0x22>
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	7d1b      	ldrb	r3, [r3, #20]
 800d7cc:	2b01      	cmp	r3, #1
 800d7ce:	d104      	bne.n	800d7da <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	683a      	ldr	r2, [r7, #0]
 800d7d8:	619a      	str	r2, [r3, #24]
  }
}
 800d7da:	bf00      	nop
 800d7dc:	3714      	adds	r7, #20
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e4:	4770      	bx	lr
	...

0800d7e8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b084      	sub	sp, #16
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	60f8      	str	r0, [r7, #12]
 800d7f0:	60b9      	str	r1, [r7, #8]
 800d7f2:	4613      	mov	r3, r2
 800d7f4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d107      	bne.n	800d80c <tcp_poll+0x24>
 800d7fc:	4b0e      	ldr	r3, [pc, #56]	; (800d838 <tcp_poll+0x50>)
 800d7fe:	f640 023d 	movw	r2, #2109	; 0x83d
 800d802:	490e      	ldr	r1, [pc, #56]	; (800d83c <tcp_poll+0x54>)
 800d804:	480e      	ldr	r0, [pc, #56]	; (800d840 <tcp_poll+0x58>)
 800d806:	f007 fac1 	bl	8014d8c <iprintf>
 800d80a:	e011      	b.n	800d830 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	7d1b      	ldrb	r3, [r3, #20]
 800d810:	2b01      	cmp	r3, #1
 800d812:	d106      	bne.n	800d822 <tcp_poll+0x3a>
 800d814:	4b08      	ldr	r3, [pc, #32]	; (800d838 <tcp_poll+0x50>)
 800d816:	f640 023e 	movw	r2, #2110	; 0x83e
 800d81a:	490a      	ldr	r1, [pc, #40]	; (800d844 <tcp_poll+0x5c>)
 800d81c:	4808      	ldr	r0, [pc, #32]	; (800d840 <tcp_poll+0x58>)
 800d81e:	f007 fab5 	bl	8014d8c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	68ba      	ldr	r2, [r7, #8]
 800d826:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	79fa      	ldrb	r2, [r7, #7]
 800d82e:	775a      	strb	r2, [r3, #29]
}
 800d830:	3710      	adds	r7, #16
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}
 800d836:	bf00      	nop
 800d838:	080169d0 	.word	0x080169d0
 800d83c:	08016fe4 	.word	0x08016fe4
 800d840:	08016a14 	.word	0x08016a14
 800d844:	08016ffc 	.word	0x08016ffc

0800d848 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b082      	sub	sp, #8
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d107      	bne.n	800d866 <tcp_pcb_purge+0x1e>
 800d856:	4b21      	ldr	r3, [pc, #132]	; (800d8dc <tcp_pcb_purge+0x94>)
 800d858:	f640 0251 	movw	r2, #2129	; 0x851
 800d85c:	4920      	ldr	r1, [pc, #128]	; (800d8e0 <tcp_pcb_purge+0x98>)
 800d85e:	4821      	ldr	r0, [pc, #132]	; (800d8e4 <tcp_pcb_purge+0x9c>)
 800d860:	f007 fa94 	bl	8014d8c <iprintf>
 800d864:	e037      	b.n	800d8d6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	7d1b      	ldrb	r3, [r3, #20]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d033      	beq.n	800d8d6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d872:	2b0a      	cmp	r3, #10
 800d874:	d02f      	beq.n	800d8d6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d87a:	2b01      	cmp	r3, #1
 800d87c:	d02b      	beq.n	800d8d6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d882:	2b00      	cmp	r3, #0
 800d884:	d007      	beq.n	800d896 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d88a:	4618      	mov	r0, r3
 800d88c:	f7fe f8cc 	bl	800ba28 <pbuf_free>
      pcb->refused_data = NULL;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2200      	movs	r2, #0
 800d894:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d002      	beq.n	800d8a4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f000 f986 	bl	800dbb0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d8aa:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f7ff fce1 	bl	800d278 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f7ff fcdc 	bl	800d278 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	66da      	str	r2, [r3, #108]	; 0x6c
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d8d6:	3708      	adds	r7, #8
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd80      	pop	{r7, pc}
 800d8dc:	080169d0 	.word	0x080169d0
 800d8e0:	0801701c 	.word	0x0801701c
 800d8e4:	08016a14 	.word	0x08016a14

0800d8e8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b084      	sub	sp, #16
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
 800d8f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d106      	bne.n	800d906 <tcp_pcb_remove+0x1e>
 800d8f8:	4b3e      	ldr	r3, [pc, #248]	; (800d9f4 <tcp_pcb_remove+0x10c>)
 800d8fa:	f640 0283 	movw	r2, #2179	; 0x883
 800d8fe:	493e      	ldr	r1, [pc, #248]	; (800d9f8 <tcp_pcb_remove+0x110>)
 800d900:	483e      	ldr	r0, [pc, #248]	; (800d9fc <tcp_pcb_remove+0x114>)
 800d902:	f007 fa43 	bl	8014d8c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d106      	bne.n	800d91a <tcp_pcb_remove+0x32>
 800d90c:	4b39      	ldr	r3, [pc, #228]	; (800d9f4 <tcp_pcb_remove+0x10c>)
 800d90e:	f640 0284 	movw	r2, #2180	; 0x884
 800d912:	493b      	ldr	r1, [pc, #236]	; (800da00 <tcp_pcb_remove+0x118>)
 800d914:	4839      	ldr	r0, [pc, #228]	; (800d9fc <tcp_pcb_remove+0x114>)
 800d916:	f007 fa39 	bl	8014d8c <iprintf>

  TCP_RMV(pcblist, pcb);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	683a      	ldr	r2, [r7, #0]
 800d920:	429a      	cmp	r2, r3
 800d922:	d105      	bne.n	800d930 <tcp_pcb_remove+0x48>
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	68da      	ldr	r2, [r3, #12]
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	601a      	str	r2, [r3, #0]
 800d92e:	e013      	b.n	800d958 <tcp_pcb_remove+0x70>
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	60fb      	str	r3, [r7, #12]
 800d936:	e00c      	b.n	800d952 <tcp_pcb_remove+0x6a>
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	68db      	ldr	r3, [r3, #12]
 800d93c:	683a      	ldr	r2, [r7, #0]
 800d93e:	429a      	cmp	r2, r3
 800d940:	d104      	bne.n	800d94c <tcp_pcb_remove+0x64>
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	68da      	ldr	r2, [r3, #12]
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	60da      	str	r2, [r3, #12]
 800d94a:	e005      	b.n	800d958 <tcp_pcb_remove+0x70>
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	68db      	ldr	r3, [r3, #12]
 800d950:	60fb      	str	r3, [r7, #12]
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d1ef      	bne.n	800d938 <tcp_pcb_remove+0x50>
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	2200      	movs	r2, #0
 800d95c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d95e:	6838      	ldr	r0, [r7, #0]
 800d960:	f7ff ff72 	bl	800d848 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	7d1b      	ldrb	r3, [r3, #20]
 800d968:	2b0a      	cmp	r3, #10
 800d96a:	d013      	beq.n	800d994 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d970:	2b01      	cmp	r3, #1
 800d972:	d00f      	beq.n	800d994 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	8b5b      	ldrh	r3, [r3, #26]
 800d978:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d009      	beq.n	800d994 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	8b5b      	ldrh	r3, [r3, #26]
 800d984:	f043 0302 	orr.w	r3, r3, #2
 800d988:	b29a      	uxth	r2, r3
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d98e:	6838      	ldr	r0, [r7, #0]
 800d990:	f003 fbc2 	bl	8011118 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	7d1b      	ldrb	r3, [r3, #20]
 800d998:	2b01      	cmp	r3, #1
 800d99a:	d020      	beq.n	800d9de <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d006      	beq.n	800d9b2 <tcp_pcb_remove+0xca>
 800d9a4:	4b13      	ldr	r3, [pc, #76]	; (800d9f4 <tcp_pcb_remove+0x10c>)
 800d9a6:	f640 0293 	movw	r2, #2195	; 0x893
 800d9aa:	4916      	ldr	r1, [pc, #88]	; (800da04 <tcp_pcb_remove+0x11c>)
 800d9ac:	4813      	ldr	r0, [pc, #76]	; (800d9fc <tcp_pcb_remove+0x114>)
 800d9ae:	f007 f9ed 	bl	8014d8c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d006      	beq.n	800d9c8 <tcp_pcb_remove+0xe0>
 800d9ba:	4b0e      	ldr	r3, [pc, #56]	; (800d9f4 <tcp_pcb_remove+0x10c>)
 800d9bc:	f640 0294 	movw	r2, #2196	; 0x894
 800d9c0:	4911      	ldr	r1, [pc, #68]	; (800da08 <tcp_pcb_remove+0x120>)
 800d9c2:	480e      	ldr	r0, [pc, #56]	; (800d9fc <tcp_pcb_remove+0x114>)
 800d9c4:	f007 f9e2 	bl	8014d8c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d006      	beq.n	800d9de <tcp_pcb_remove+0xf6>
 800d9d0:	4b08      	ldr	r3, [pc, #32]	; (800d9f4 <tcp_pcb_remove+0x10c>)
 800d9d2:	f640 0296 	movw	r2, #2198	; 0x896
 800d9d6:	490d      	ldr	r1, [pc, #52]	; (800da0c <tcp_pcb_remove+0x124>)
 800d9d8:	4808      	ldr	r0, [pc, #32]	; (800d9fc <tcp_pcb_remove+0x114>)
 800d9da:	f007 f9d7 	bl	8014d8c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d9ea:	bf00      	nop
 800d9ec:	3710      	adds	r7, #16
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}
 800d9f2:	bf00      	nop
 800d9f4:	080169d0 	.word	0x080169d0
 800d9f8:	08017038 	.word	0x08017038
 800d9fc:	08016a14 	.word	0x08016a14
 800da00:	08017054 	.word	0x08017054
 800da04:	08017074 	.word	0x08017074
 800da08:	0801708c 	.word	0x0801708c
 800da0c:	080170a8 	.word	0x080170a8

0800da10 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b082      	sub	sp, #8
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d106      	bne.n	800da2c <tcp_next_iss+0x1c>
 800da1e:	4b0a      	ldr	r3, [pc, #40]	; (800da48 <tcp_next_iss+0x38>)
 800da20:	f640 02af 	movw	r2, #2223	; 0x8af
 800da24:	4909      	ldr	r1, [pc, #36]	; (800da4c <tcp_next_iss+0x3c>)
 800da26:	480a      	ldr	r0, [pc, #40]	; (800da50 <tcp_next_iss+0x40>)
 800da28:	f007 f9b0 	bl	8014d8c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800da2c:	4b09      	ldr	r3, [pc, #36]	; (800da54 <tcp_next_iss+0x44>)
 800da2e:	681a      	ldr	r2, [r3, #0]
 800da30:	4b09      	ldr	r3, [pc, #36]	; (800da58 <tcp_next_iss+0x48>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	4413      	add	r3, r2
 800da36:	4a07      	ldr	r2, [pc, #28]	; (800da54 <tcp_next_iss+0x44>)
 800da38:	6013      	str	r3, [r2, #0]
  return iss;
 800da3a:	4b06      	ldr	r3, [pc, #24]	; (800da54 <tcp_next_iss+0x44>)
 800da3c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800da3e:	4618      	mov	r0, r3
 800da40:	3708      	adds	r7, #8
 800da42:	46bd      	mov	sp, r7
 800da44:	bd80      	pop	{r7, pc}
 800da46:	bf00      	nop
 800da48:	080169d0 	.word	0x080169d0
 800da4c:	080170c0 	.word	0x080170c0
 800da50:	08016a14 	.word	0x08016a14
 800da54:	24000030 	.word	0x24000030
 800da58:	24003608 	.word	0x24003608

0800da5c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b086      	sub	sp, #24
 800da60:	af00      	add	r7, sp, #0
 800da62:	4603      	mov	r3, r0
 800da64:	60b9      	str	r1, [r7, #8]
 800da66:	607a      	str	r2, [r7, #4]
 800da68:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d106      	bne.n	800da7e <tcp_eff_send_mss_netif+0x22>
 800da70:	4b14      	ldr	r3, [pc, #80]	; (800dac4 <tcp_eff_send_mss_netif+0x68>)
 800da72:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800da76:	4914      	ldr	r1, [pc, #80]	; (800dac8 <tcp_eff_send_mss_netif+0x6c>)
 800da78:	4814      	ldr	r0, [pc, #80]	; (800dacc <tcp_eff_send_mss_netif+0x70>)
 800da7a:	f007 f987 	bl	8014d8c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d101      	bne.n	800da88 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800da84:	89fb      	ldrh	r3, [r7, #14]
 800da86:	e019      	b.n	800dabc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800da8c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800da8e:	8afb      	ldrh	r3, [r7, #22]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d012      	beq.n	800daba <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800da94:	2328      	movs	r3, #40	; 0x28
 800da96:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800da98:	8afa      	ldrh	r2, [r7, #22]
 800da9a:	8abb      	ldrh	r3, [r7, #20]
 800da9c:	429a      	cmp	r2, r3
 800da9e:	d904      	bls.n	800daaa <tcp_eff_send_mss_netif+0x4e>
 800daa0:	8afa      	ldrh	r2, [r7, #22]
 800daa2:	8abb      	ldrh	r3, [r7, #20]
 800daa4:	1ad3      	subs	r3, r2, r3
 800daa6:	b29b      	uxth	r3, r3
 800daa8:	e000      	b.n	800daac <tcp_eff_send_mss_netif+0x50>
 800daaa:	2300      	movs	r3, #0
 800daac:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800daae:	8a7a      	ldrh	r2, [r7, #18]
 800dab0:	89fb      	ldrh	r3, [r7, #14]
 800dab2:	4293      	cmp	r3, r2
 800dab4:	bf28      	it	cs
 800dab6:	4613      	movcs	r3, r2
 800dab8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800daba:	89fb      	ldrh	r3, [r7, #14]
}
 800dabc:	4618      	mov	r0, r3
 800dabe:	3718      	adds	r7, #24
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}
 800dac4:	080169d0 	.word	0x080169d0
 800dac8:	080170dc 	.word	0x080170dc
 800dacc:	08016a14 	.word	0x08016a14

0800dad0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b084      	sub	sp, #16
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
 800dad8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d119      	bne.n	800db18 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800dae4:	4b10      	ldr	r3, [pc, #64]	; (800db28 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800dae6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800daea:	4910      	ldr	r1, [pc, #64]	; (800db2c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800daec:	4810      	ldr	r0, [pc, #64]	; (800db30 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800daee:	f007 f94d 	bl	8014d8c <iprintf>

  while (pcb != NULL) {
 800daf2:	e011      	b.n	800db18 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	681a      	ldr	r2, [r3, #0]
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	429a      	cmp	r2, r3
 800dafe:	d108      	bne.n	800db12 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	68db      	ldr	r3, [r3, #12]
 800db04:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800db06:	68f8      	ldr	r0, [r7, #12]
 800db08:	f7fe fd26 	bl	800c558 <tcp_abort>
      pcb = next;
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	60fb      	str	r3, [r7, #12]
 800db10:	e002      	b.n	800db18 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	68db      	ldr	r3, [r3, #12]
 800db16:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d1ea      	bne.n	800daf4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800db1e:	bf00      	nop
 800db20:	bf00      	nop
 800db22:	3710      	adds	r7, #16
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}
 800db28:	080169d0 	.word	0x080169d0
 800db2c:	08017104 	.word	0x08017104
 800db30:	08016a14 	.word	0x08016a14

0800db34 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b084      	sub	sp, #16
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
 800db3c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d02a      	beq.n	800db9a <tcp_netif_ip_addr_changed+0x66>
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d026      	beq.n	800db9a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800db4c:	4b15      	ldr	r3, [pc, #84]	; (800dba4 <tcp_netif_ip_addr_changed+0x70>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	4619      	mov	r1, r3
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f7ff ffbc 	bl	800dad0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800db58:	4b13      	ldr	r3, [pc, #76]	; (800dba8 <tcp_netif_ip_addr_changed+0x74>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	4619      	mov	r1, r3
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f7ff ffb6 	bl	800dad0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d017      	beq.n	800db9a <tcp_netif_ip_addr_changed+0x66>
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d013      	beq.n	800db9a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800db72:	4b0e      	ldr	r3, [pc, #56]	; (800dbac <tcp_netif_ip_addr_changed+0x78>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	60fb      	str	r3, [r7, #12]
 800db78:	e00c      	b.n	800db94 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	681a      	ldr	r2, [r3, #0]
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	429a      	cmp	r2, r3
 800db84:	d103      	bne.n	800db8e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	681a      	ldr	r2, [r3, #0]
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	68db      	ldr	r3, [r3, #12]
 800db92:	60fb      	str	r3, [r7, #12]
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d1ef      	bne.n	800db7a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800db9a:	bf00      	nop
 800db9c:	3710      	adds	r7, #16
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}
 800dba2:	bf00      	nop
 800dba4:	24003604 	.word	0x24003604
 800dba8:	24003610 	.word	0x24003610
 800dbac:	2400360c 	.word	0x2400360c

0800dbb0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b082      	sub	sp, #8
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d007      	beq.n	800dbd0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7ff fb57 	bl	800d278 <tcp_segs_free>
    pcb->ooseq = NULL;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800dbd0:	bf00      	nop
 800dbd2:	3708      	adds	r7, #8
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}

0800dbd8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800dbd8:	b590      	push	{r4, r7, lr}
 800dbda:	b08d      	sub	sp, #52	; 0x34
 800dbdc:	af04      	add	r7, sp, #16
 800dbde:	6078      	str	r0, [r7, #4]
 800dbe0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d105      	bne.n	800dbf4 <tcp_input+0x1c>
 800dbe8:	4b9b      	ldr	r3, [pc, #620]	; (800de58 <tcp_input+0x280>)
 800dbea:	2283      	movs	r2, #131	; 0x83
 800dbec:	499b      	ldr	r1, [pc, #620]	; (800de5c <tcp_input+0x284>)
 800dbee:	489c      	ldr	r0, [pc, #624]	; (800de60 <tcp_input+0x288>)
 800dbf0:	f007 f8cc 	bl	8014d8c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	685b      	ldr	r3, [r3, #4]
 800dbf8:	4a9a      	ldr	r2, [pc, #616]	; (800de64 <tcp_input+0x28c>)
 800dbfa:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	895b      	ldrh	r3, [r3, #10]
 800dc00:	2b13      	cmp	r3, #19
 800dc02:	f240 83c4 	bls.w	800e38e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800dc06:	4b98      	ldr	r3, [pc, #608]	; (800de68 <tcp_input+0x290>)
 800dc08:	695b      	ldr	r3, [r3, #20]
 800dc0a:	4a97      	ldr	r2, [pc, #604]	; (800de68 <tcp_input+0x290>)
 800dc0c:	6812      	ldr	r2, [r2, #0]
 800dc0e:	4611      	mov	r1, r2
 800dc10:	4618      	mov	r0, r3
 800dc12:	f006 f891 	bl	8013d38 <ip4_addr_isbroadcast_u32>
 800dc16:	4603      	mov	r3, r0
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	f040 83ba 	bne.w	800e392 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800dc1e:	4b92      	ldr	r3, [pc, #584]	; (800de68 <tcp_input+0x290>)
 800dc20:	695b      	ldr	r3, [r3, #20]
 800dc22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800dc26:	2be0      	cmp	r3, #224	; 0xe0
 800dc28:	f000 83b3 	beq.w	800e392 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800dc2c:	4b8d      	ldr	r3, [pc, #564]	; (800de64 <tcp_input+0x28c>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	899b      	ldrh	r3, [r3, #12]
 800dc32:	b29b      	uxth	r3, r3
 800dc34:	4618      	mov	r0, r3
 800dc36:	f7fc fae1 	bl	800a1fc <lwip_htons>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	0b1b      	lsrs	r3, r3, #12
 800dc3e:	b29b      	uxth	r3, r3
 800dc40:	b2db      	uxtb	r3, r3
 800dc42:	009b      	lsls	r3, r3, #2
 800dc44:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800dc46:	7cbb      	ldrb	r3, [r7, #18]
 800dc48:	2b13      	cmp	r3, #19
 800dc4a:	f240 83a4 	bls.w	800e396 <tcp_input+0x7be>
 800dc4e:	7cbb      	ldrb	r3, [r7, #18]
 800dc50:	b29a      	uxth	r2, r3
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	891b      	ldrh	r3, [r3, #8]
 800dc56:	429a      	cmp	r2, r3
 800dc58:	f200 839d 	bhi.w	800e396 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800dc5c:	7cbb      	ldrb	r3, [r7, #18]
 800dc5e:	b29b      	uxth	r3, r3
 800dc60:	3b14      	subs	r3, #20
 800dc62:	b29a      	uxth	r2, r3
 800dc64:	4b81      	ldr	r3, [pc, #516]	; (800de6c <tcp_input+0x294>)
 800dc66:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800dc68:	4b81      	ldr	r3, [pc, #516]	; (800de70 <tcp_input+0x298>)
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	895a      	ldrh	r2, [r3, #10]
 800dc72:	7cbb      	ldrb	r3, [r7, #18]
 800dc74:	b29b      	uxth	r3, r3
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d309      	bcc.n	800dc8e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800dc7a:	4b7c      	ldr	r3, [pc, #496]	; (800de6c <tcp_input+0x294>)
 800dc7c:	881a      	ldrh	r2, [r3, #0]
 800dc7e:	4b7d      	ldr	r3, [pc, #500]	; (800de74 <tcp_input+0x29c>)
 800dc80:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800dc82:	7cbb      	ldrb	r3, [r7, #18]
 800dc84:	4619      	mov	r1, r3
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f7fd fe48 	bl	800b91c <pbuf_remove_header>
 800dc8c:	e04e      	b.n	800dd2c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d105      	bne.n	800dca2 <tcp_input+0xca>
 800dc96:	4b70      	ldr	r3, [pc, #448]	; (800de58 <tcp_input+0x280>)
 800dc98:	22c2      	movs	r2, #194	; 0xc2
 800dc9a:	4977      	ldr	r1, [pc, #476]	; (800de78 <tcp_input+0x2a0>)
 800dc9c:	4870      	ldr	r0, [pc, #448]	; (800de60 <tcp_input+0x288>)
 800dc9e:	f007 f875 	bl	8014d8c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800dca2:	2114      	movs	r1, #20
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f7fd fe39 	bl	800b91c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	895a      	ldrh	r2, [r3, #10]
 800dcae:	4b71      	ldr	r3, [pc, #452]	; (800de74 <tcp_input+0x29c>)
 800dcb0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800dcb2:	4b6e      	ldr	r3, [pc, #440]	; (800de6c <tcp_input+0x294>)
 800dcb4:	881a      	ldrh	r2, [r3, #0]
 800dcb6:	4b6f      	ldr	r3, [pc, #444]	; (800de74 <tcp_input+0x29c>)
 800dcb8:	881b      	ldrh	r3, [r3, #0]
 800dcba:	1ad3      	subs	r3, r2, r3
 800dcbc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800dcbe:	4b6d      	ldr	r3, [pc, #436]	; (800de74 <tcp_input+0x29c>)
 800dcc0:	881b      	ldrh	r3, [r3, #0]
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f7fd fe29 	bl	800b91c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	895b      	ldrh	r3, [r3, #10]
 800dcd0:	8a3a      	ldrh	r2, [r7, #16]
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	f200 8361 	bhi.w	800e39a <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	685b      	ldr	r3, [r3, #4]
 800dcde:	4a64      	ldr	r2, [pc, #400]	; (800de70 <tcp_input+0x298>)
 800dce0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	8a3a      	ldrh	r2, [r7, #16]
 800dce8:	4611      	mov	r1, r2
 800dcea:	4618      	mov	r0, r3
 800dcec:	f7fd fe16 	bl	800b91c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	891a      	ldrh	r2, [r3, #8]
 800dcf4:	8a3b      	ldrh	r3, [r7, #16]
 800dcf6:	1ad3      	subs	r3, r2, r3
 800dcf8:	b29a      	uxth	r2, r3
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	895b      	ldrh	r3, [r3, #10]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d005      	beq.n	800dd12 <tcp_input+0x13a>
 800dd06:	4b54      	ldr	r3, [pc, #336]	; (800de58 <tcp_input+0x280>)
 800dd08:	22df      	movs	r2, #223	; 0xdf
 800dd0a:	495c      	ldr	r1, [pc, #368]	; (800de7c <tcp_input+0x2a4>)
 800dd0c:	4854      	ldr	r0, [pc, #336]	; (800de60 <tcp_input+0x288>)
 800dd0e:	f007 f83d 	bl	8014d8c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	891a      	ldrh	r2, [r3, #8]
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	891b      	ldrh	r3, [r3, #8]
 800dd1c:	429a      	cmp	r2, r3
 800dd1e:	d005      	beq.n	800dd2c <tcp_input+0x154>
 800dd20:	4b4d      	ldr	r3, [pc, #308]	; (800de58 <tcp_input+0x280>)
 800dd22:	22e0      	movs	r2, #224	; 0xe0
 800dd24:	4956      	ldr	r1, [pc, #344]	; (800de80 <tcp_input+0x2a8>)
 800dd26:	484e      	ldr	r0, [pc, #312]	; (800de60 <tcp_input+0x288>)
 800dd28:	f007 f830 	bl	8014d8c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800dd2c:	4b4d      	ldr	r3, [pc, #308]	; (800de64 <tcp_input+0x28c>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	881b      	ldrh	r3, [r3, #0]
 800dd32:	b29b      	uxth	r3, r3
 800dd34:	4a4b      	ldr	r2, [pc, #300]	; (800de64 <tcp_input+0x28c>)
 800dd36:	6814      	ldr	r4, [r2, #0]
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f7fc fa5f 	bl	800a1fc <lwip_htons>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800dd42:	4b48      	ldr	r3, [pc, #288]	; (800de64 <tcp_input+0x28c>)
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	885b      	ldrh	r3, [r3, #2]
 800dd48:	b29b      	uxth	r3, r3
 800dd4a:	4a46      	ldr	r2, [pc, #280]	; (800de64 <tcp_input+0x28c>)
 800dd4c:	6814      	ldr	r4, [r2, #0]
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f7fc fa54 	bl	800a1fc <lwip_htons>
 800dd54:	4603      	mov	r3, r0
 800dd56:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800dd58:	4b42      	ldr	r3, [pc, #264]	; (800de64 <tcp_input+0x28c>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	685b      	ldr	r3, [r3, #4]
 800dd5e:	4a41      	ldr	r2, [pc, #260]	; (800de64 <tcp_input+0x28c>)
 800dd60:	6814      	ldr	r4, [r2, #0]
 800dd62:	4618      	mov	r0, r3
 800dd64:	f7fc fa5f 	bl	800a226 <lwip_htonl>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	6063      	str	r3, [r4, #4]
 800dd6c:	6863      	ldr	r3, [r4, #4]
 800dd6e:	4a45      	ldr	r2, [pc, #276]	; (800de84 <tcp_input+0x2ac>)
 800dd70:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800dd72:	4b3c      	ldr	r3, [pc, #240]	; (800de64 <tcp_input+0x28c>)
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	689b      	ldr	r3, [r3, #8]
 800dd78:	4a3a      	ldr	r2, [pc, #232]	; (800de64 <tcp_input+0x28c>)
 800dd7a:	6814      	ldr	r4, [r2, #0]
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f7fc fa52 	bl	800a226 <lwip_htonl>
 800dd82:	4603      	mov	r3, r0
 800dd84:	60a3      	str	r3, [r4, #8]
 800dd86:	68a3      	ldr	r3, [r4, #8]
 800dd88:	4a3f      	ldr	r2, [pc, #252]	; (800de88 <tcp_input+0x2b0>)
 800dd8a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800dd8c:	4b35      	ldr	r3, [pc, #212]	; (800de64 <tcp_input+0x28c>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	89db      	ldrh	r3, [r3, #14]
 800dd92:	b29b      	uxth	r3, r3
 800dd94:	4a33      	ldr	r2, [pc, #204]	; (800de64 <tcp_input+0x28c>)
 800dd96:	6814      	ldr	r4, [r2, #0]
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f7fc fa2f 	bl	800a1fc <lwip_htons>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800dda2:	4b30      	ldr	r3, [pc, #192]	; (800de64 <tcp_input+0x28c>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	899b      	ldrh	r3, [r3, #12]
 800dda8:	b29b      	uxth	r3, r3
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f7fc fa26 	bl	800a1fc <lwip_htons>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	b2db      	uxtb	r3, r3
 800ddb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ddb8:	b2da      	uxtb	r2, r3
 800ddba:	4b34      	ldr	r3, [pc, #208]	; (800de8c <tcp_input+0x2b4>)
 800ddbc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	891a      	ldrh	r2, [r3, #8]
 800ddc2:	4b33      	ldr	r3, [pc, #204]	; (800de90 <tcp_input+0x2b8>)
 800ddc4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ddc6:	4b31      	ldr	r3, [pc, #196]	; (800de8c <tcp_input+0x2b4>)
 800ddc8:	781b      	ldrb	r3, [r3, #0]
 800ddca:	f003 0303 	and.w	r3, r3, #3
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d00c      	beq.n	800ddec <tcp_input+0x214>
    tcplen++;
 800ddd2:	4b2f      	ldr	r3, [pc, #188]	; (800de90 <tcp_input+0x2b8>)
 800ddd4:	881b      	ldrh	r3, [r3, #0]
 800ddd6:	3301      	adds	r3, #1
 800ddd8:	b29a      	uxth	r2, r3
 800ddda:	4b2d      	ldr	r3, [pc, #180]	; (800de90 <tcp_input+0x2b8>)
 800dddc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	891a      	ldrh	r2, [r3, #8]
 800dde2:	4b2b      	ldr	r3, [pc, #172]	; (800de90 <tcp_input+0x2b8>)
 800dde4:	881b      	ldrh	r3, [r3, #0]
 800dde6:	429a      	cmp	r2, r3
 800dde8:	f200 82d9 	bhi.w	800e39e <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800ddec:	2300      	movs	r3, #0
 800ddee:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ddf0:	4b28      	ldr	r3, [pc, #160]	; (800de94 <tcp_input+0x2bc>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	61fb      	str	r3, [r7, #28]
 800ddf6:	e09d      	b.n	800df34 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ddf8:	69fb      	ldr	r3, [r7, #28]
 800ddfa:	7d1b      	ldrb	r3, [r3, #20]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d105      	bne.n	800de0c <tcp_input+0x234>
 800de00:	4b15      	ldr	r3, [pc, #84]	; (800de58 <tcp_input+0x280>)
 800de02:	22fb      	movs	r2, #251	; 0xfb
 800de04:	4924      	ldr	r1, [pc, #144]	; (800de98 <tcp_input+0x2c0>)
 800de06:	4816      	ldr	r0, [pc, #88]	; (800de60 <tcp_input+0x288>)
 800de08:	f006 ffc0 	bl	8014d8c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800de0c:	69fb      	ldr	r3, [r7, #28]
 800de0e:	7d1b      	ldrb	r3, [r3, #20]
 800de10:	2b0a      	cmp	r3, #10
 800de12:	d105      	bne.n	800de20 <tcp_input+0x248>
 800de14:	4b10      	ldr	r3, [pc, #64]	; (800de58 <tcp_input+0x280>)
 800de16:	22fc      	movs	r2, #252	; 0xfc
 800de18:	4920      	ldr	r1, [pc, #128]	; (800de9c <tcp_input+0x2c4>)
 800de1a:	4811      	ldr	r0, [pc, #68]	; (800de60 <tcp_input+0x288>)
 800de1c:	f006 ffb6 	bl	8014d8c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800de20:	69fb      	ldr	r3, [r7, #28]
 800de22:	7d1b      	ldrb	r3, [r3, #20]
 800de24:	2b01      	cmp	r3, #1
 800de26:	d105      	bne.n	800de34 <tcp_input+0x25c>
 800de28:	4b0b      	ldr	r3, [pc, #44]	; (800de58 <tcp_input+0x280>)
 800de2a:	22fd      	movs	r2, #253	; 0xfd
 800de2c:	491c      	ldr	r1, [pc, #112]	; (800dea0 <tcp_input+0x2c8>)
 800de2e:	480c      	ldr	r0, [pc, #48]	; (800de60 <tcp_input+0x288>)
 800de30:	f006 ffac 	bl	8014d8c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800de34:	69fb      	ldr	r3, [r7, #28]
 800de36:	7a1b      	ldrb	r3, [r3, #8]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d033      	beq.n	800dea4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800de3c:	69fb      	ldr	r3, [r7, #28]
 800de3e:	7a1a      	ldrb	r2, [r3, #8]
 800de40:	4b09      	ldr	r3, [pc, #36]	; (800de68 <tcp_input+0x290>)
 800de42:	685b      	ldr	r3, [r3, #4]
 800de44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800de48:	3301      	adds	r3, #1
 800de4a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d029      	beq.n	800dea4 <tcp_input+0x2cc>
      prev = pcb;
 800de50:	69fb      	ldr	r3, [r7, #28]
 800de52:	61bb      	str	r3, [r7, #24]
      continue;
 800de54:	e06b      	b.n	800df2e <tcp_input+0x356>
 800de56:	bf00      	nop
 800de58:	08017138 	.word	0x08017138
 800de5c:	0801716c 	.word	0x0801716c
 800de60:	08017184 	.word	0x08017184
 800de64:	24000104 	.word	0x24000104
 800de68:	24000714 	.word	0x24000714
 800de6c:	24000108 	.word	0x24000108
 800de70:	2400010c 	.word	0x2400010c
 800de74:	2400010a 	.word	0x2400010a
 800de78:	080171ac 	.word	0x080171ac
 800de7c:	080171bc 	.word	0x080171bc
 800de80:	080171c8 	.word	0x080171c8
 800de84:	24000114 	.word	0x24000114
 800de88:	24000118 	.word	0x24000118
 800de8c:	24000120 	.word	0x24000120
 800de90:	2400011e 	.word	0x2400011e
 800de94:	24003604 	.word	0x24003604
 800de98:	080171e8 	.word	0x080171e8
 800de9c:	08017210 	.word	0x08017210
 800dea0:	0801723c 	.word	0x0801723c
    }

    if (pcb->remote_port == tcphdr->src &&
 800dea4:	69fb      	ldr	r3, [r7, #28]
 800dea6:	8b1a      	ldrh	r2, [r3, #24]
 800dea8:	4b94      	ldr	r3, [pc, #592]	; (800e0fc <tcp_input+0x524>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	881b      	ldrh	r3, [r3, #0]
 800deae:	b29b      	uxth	r3, r3
 800deb0:	429a      	cmp	r2, r3
 800deb2:	d13a      	bne.n	800df2a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800deb4:	69fb      	ldr	r3, [r7, #28]
 800deb6:	8ada      	ldrh	r2, [r3, #22]
 800deb8:	4b90      	ldr	r3, [pc, #576]	; (800e0fc <tcp_input+0x524>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	885b      	ldrh	r3, [r3, #2]
 800debe:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800dec0:	429a      	cmp	r2, r3
 800dec2:	d132      	bne.n	800df2a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dec4:	69fb      	ldr	r3, [r7, #28]
 800dec6:	685a      	ldr	r2, [r3, #4]
 800dec8:	4b8d      	ldr	r3, [pc, #564]	; (800e100 <tcp_input+0x528>)
 800deca:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800decc:	429a      	cmp	r2, r3
 800dece:	d12c      	bne.n	800df2a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ded0:	69fb      	ldr	r3, [r7, #28]
 800ded2:	681a      	ldr	r2, [r3, #0]
 800ded4:	4b8a      	ldr	r3, [pc, #552]	; (800e100 <tcp_input+0x528>)
 800ded6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ded8:	429a      	cmp	r2, r3
 800deda:	d126      	bne.n	800df2a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800dedc:	69fb      	ldr	r3, [r7, #28]
 800dede:	68db      	ldr	r3, [r3, #12]
 800dee0:	69fa      	ldr	r2, [r7, #28]
 800dee2:	429a      	cmp	r2, r3
 800dee4:	d106      	bne.n	800def4 <tcp_input+0x31c>
 800dee6:	4b87      	ldr	r3, [pc, #540]	; (800e104 <tcp_input+0x52c>)
 800dee8:	f240 120d 	movw	r2, #269	; 0x10d
 800deec:	4986      	ldr	r1, [pc, #536]	; (800e108 <tcp_input+0x530>)
 800deee:	4887      	ldr	r0, [pc, #540]	; (800e10c <tcp_input+0x534>)
 800def0:	f006 ff4c 	bl	8014d8c <iprintf>
      if (prev != NULL) {
 800def4:	69bb      	ldr	r3, [r7, #24]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d00a      	beq.n	800df10 <tcp_input+0x338>
        prev->next = pcb->next;
 800defa:	69fb      	ldr	r3, [r7, #28]
 800defc:	68da      	ldr	r2, [r3, #12]
 800defe:	69bb      	ldr	r3, [r7, #24]
 800df00:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800df02:	4b83      	ldr	r3, [pc, #524]	; (800e110 <tcp_input+0x538>)
 800df04:	681a      	ldr	r2, [r3, #0]
 800df06:	69fb      	ldr	r3, [r7, #28]
 800df08:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800df0a:	4a81      	ldr	r2, [pc, #516]	; (800e110 <tcp_input+0x538>)
 800df0c:	69fb      	ldr	r3, [r7, #28]
 800df0e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800df10:	69fb      	ldr	r3, [r7, #28]
 800df12:	68db      	ldr	r3, [r3, #12]
 800df14:	69fa      	ldr	r2, [r7, #28]
 800df16:	429a      	cmp	r2, r3
 800df18:	d111      	bne.n	800df3e <tcp_input+0x366>
 800df1a:	4b7a      	ldr	r3, [pc, #488]	; (800e104 <tcp_input+0x52c>)
 800df1c:	f240 1215 	movw	r2, #277	; 0x115
 800df20:	497c      	ldr	r1, [pc, #496]	; (800e114 <tcp_input+0x53c>)
 800df22:	487a      	ldr	r0, [pc, #488]	; (800e10c <tcp_input+0x534>)
 800df24:	f006 ff32 	bl	8014d8c <iprintf>
      break;
 800df28:	e009      	b.n	800df3e <tcp_input+0x366>
    }
    prev = pcb;
 800df2a:	69fb      	ldr	r3, [r7, #28]
 800df2c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800df2e:	69fb      	ldr	r3, [r7, #28]
 800df30:	68db      	ldr	r3, [r3, #12]
 800df32:	61fb      	str	r3, [r7, #28]
 800df34:	69fb      	ldr	r3, [r7, #28]
 800df36:	2b00      	cmp	r3, #0
 800df38:	f47f af5e 	bne.w	800ddf8 <tcp_input+0x220>
 800df3c:	e000      	b.n	800df40 <tcp_input+0x368>
      break;
 800df3e:	bf00      	nop
  }

  if (pcb == NULL) {
 800df40:	69fb      	ldr	r3, [r7, #28]
 800df42:	2b00      	cmp	r3, #0
 800df44:	f040 8095 	bne.w	800e072 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800df48:	4b73      	ldr	r3, [pc, #460]	; (800e118 <tcp_input+0x540>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	61fb      	str	r3, [r7, #28]
 800df4e:	e03f      	b.n	800dfd0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800df50:	69fb      	ldr	r3, [r7, #28]
 800df52:	7d1b      	ldrb	r3, [r3, #20]
 800df54:	2b0a      	cmp	r3, #10
 800df56:	d006      	beq.n	800df66 <tcp_input+0x38e>
 800df58:	4b6a      	ldr	r3, [pc, #424]	; (800e104 <tcp_input+0x52c>)
 800df5a:	f240 121f 	movw	r2, #287	; 0x11f
 800df5e:	496f      	ldr	r1, [pc, #444]	; (800e11c <tcp_input+0x544>)
 800df60:	486a      	ldr	r0, [pc, #424]	; (800e10c <tcp_input+0x534>)
 800df62:	f006 ff13 	bl	8014d8c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800df66:	69fb      	ldr	r3, [r7, #28]
 800df68:	7a1b      	ldrb	r3, [r3, #8]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d009      	beq.n	800df82 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800df6e:	69fb      	ldr	r3, [r7, #28]
 800df70:	7a1a      	ldrb	r2, [r3, #8]
 800df72:	4b63      	ldr	r3, [pc, #396]	; (800e100 <tcp_input+0x528>)
 800df74:	685b      	ldr	r3, [r3, #4]
 800df76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800df7a:	3301      	adds	r3, #1
 800df7c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800df7e:	429a      	cmp	r2, r3
 800df80:	d122      	bne.n	800dfc8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800df82:	69fb      	ldr	r3, [r7, #28]
 800df84:	8b1a      	ldrh	r2, [r3, #24]
 800df86:	4b5d      	ldr	r3, [pc, #372]	; (800e0fc <tcp_input+0x524>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	881b      	ldrh	r3, [r3, #0]
 800df8c:	b29b      	uxth	r3, r3
 800df8e:	429a      	cmp	r2, r3
 800df90:	d11b      	bne.n	800dfca <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800df92:	69fb      	ldr	r3, [r7, #28]
 800df94:	8ada      	ldrh	r2, [r3, #22]
 800df96:	4b59      	ldr	r3, [pc, #356]	; (800e0fc <tcp_input+0x524>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	885b      	ldrh	r3, [r3, #2]
 800df9c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800df9e:	429a      	cmp	r2, r3
 800dfa0:	d113      	bne.n	800dfca <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dfa2:	69fb      	ldr	r3, [r7, #28]
 800dfa4:	685a      	ldr	r2, [r3, #4]
 800dfa6:	4b56      	ldr	r3, [pc, #344]	; (800e100 <tcp_input+0x528>)
 800dfa8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800dfaa:	429a      	cmp	r2, r3
 800dfac:	d10d      	bne.n	800dfca <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dfae:	69fb      	ldr	r3, [r7, #28]
 800dfb0:	681a      	ldr	r2, [r3, #0]
 800dfb2:	4b53      	ldr	r3, [pc, #332]	; (800e100 <tcp_input+0x528>)
 800dfb4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	d107      	bne.n	800dfca <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800dfba:	69f8      	ldr	r0, [r7, #28]
 800dfbc:	f000 fb54 	bl	800e668 <tcp_timewait_input>
        }
        pbuf_free(p);
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f7fd fd31 	bl	800ba28 <pbuf_free>
        return;
 800dfc6:	e1f0      	b.n	800e3aa <tcp_input+0x7d2>
        continue;
 800dfc8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dfca:	69fb      	ldr	r3, [r7, #28]
 800dfcc:	68db      	ldr	r3, [r3, #12]
 800dfce:	61fb      	str	r3, [r7, #28]
 800dfd0:	69fb      	ldr	r3, [r7, #28]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d1bc      	bne.n	800df50 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dfda:	4b51      	ldr	r3, [pc, #324]	; (800e120 <tcp_input+0x548>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	617b      	str	r3, [r7, #20]
 800dfe0:	e02a      	b.n	800e038 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	7a1b      	ldrb	r3, [r3, #8]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d00c      	beq.n	800e004 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	7a1a      	ldrb	r2, [r3, #8]
 800dfee:	4b44      	ldr	r3, [pc, #272]	; (800e100 <tcp_input+0x528>)
 800dff0:	685b      	ldr	r3, [r3, #4]
 800dff2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dff6:	3301      	adds	r3, #1
 800dff8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800dffa:	429a      	cmp	r2, r3
 800dffc:	d002      	beq.n	800e004 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800dffe:	697b      	ldr	r3, [r7, #20]
 800e000:	61bb      	str	r3, [r7, #24]
        continue;
 800e002:	e016      	b.n	800e032 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e004:	697b      	ldr	r3, [r7, #20]
 800e006:	8ada      	ldrh	r2, [r3, #22]
 800e008:	4b3c      	ldr	r3, [pc, #240]	; (800e0fc <tcp_input+0x524>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	885b      	ldrh	r3, [r3, #2]
 800e00e:	b29b      	uxth	r3, r3
 800e010:	429a      	cmp	r2, r3
 800e012:	d10c      	bne.n	800e02e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	681a      	ldr	r2, [r3, #0]
 800e018:	4b39      	ldr	r3, [pc, #228]	; (800e100 <tcp_input+0x528>)
 800e01a:	695b      	ldr	r3, [r3, #20]
 800e01c:	429a      	cmp	r2, r3
 800e01e:	d00f      	beq.n	800e040 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e020:	697b      	ldr	r3, [r7, #20]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d00d      	beq.n	800e042 <tcp_input+0x46a>
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d009      	beq.n	800e042 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e02e:	697b      	ldr	r3, [r7, #20]
 800e030:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	68db      	ldr	r3, [r3, #12]
 800e036:	617b      	str	r3, [r7, #20]
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d1d1      	bne.n	800dfe2 <tcp_input+0x40a>
 800e03e:	e000      	b.n	800e042 <tcp_input+0x46a>
            break;
 800e040:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e042:	697b      	ldr	r3, [r7, #20]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d014      	beq.n	800e072 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e048:	69bb      	ldr	r3, [r7, #24]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d00a      	beq.n	800e064 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e04e:	697b      	ldr	r3, [r7, #20]
 800e050:	68da      	ldr	r2, [r3, #12]
 800e052:	69bb      	ldr	r3, [r7, #24]
 800e054:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e056:	4b32      	ldr	r3, [pc, #200]	; (800e120 <tcp_input+0x548>)
 800e058:	681a      	ldr	r2, [r3, #0]
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e05e:	4a30      	ldr	r2, [pc, #192]	; (800e120 <tcp_input+0x548>)
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e064:	6978      	ldr	r0, [r7, #20]
 800e066:	f000 fa01 	bl	800e46c <tcp_listen_input>
      }
      pbuf_free(p);
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f7fd fcdc 	bl	800ba28 <pbuf_free>
      return;
 800e070:	e19b      	b.n	800e3aa <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e072:	69fb      	ldr	r3, [r7, #28]
 800e074:	2b00      	cmp	r3, #0
 800e076:	f000 8160 	beq.w	800e33a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e07a:	4b2a      	ldr	r3, [pc, #168]	; (800e124 <tcp_input+0x54c>)
 800e07c:	2200      	movs	r2, #0
 800e07e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	891a      	ldrh	r2, [r3, #8]
 800e084:	4b27      	ldr	r3, [pc, #156]	; (800e124 <tcp_input+0x54c>)
 800e086:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e088:	4a26      	ldr	r2, [pc, #152]	; (800e124 <tcp_input+0x54c>)
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e08e:	4b1b      	ldr	r3, [pc, #108]	; (800e0fc <tcp_input+0x524>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	4a24      	ldr	r2, [pc, #144]	; (800e124 <tcp_input+0x54c>)
 800e094:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e096:	4b24      	ldr	r3, [pc, #144]	; (800e128 <tcp_input+0x550>)
 800e098:	2200      	movs	r2, #0
 800e09a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e09c:	4b23      	ldr	r3, [pc, #140]	; (800e12c <tcp_input+0x554>)
 800e09e:	2200      	movs	r2, #0
 800e0a0:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e0a2:	4b23      	ldr	r3, [pc, #140]	; (800e130 <tcp_input+0x558>)
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e0a8:	4b22      	ldr	r3, [pc, #136]	; (800e134 <tcp_input+0x55c>)
 800e0aa:	781b      	ldrb	r3, [r3, #0]
 800e0ac:	f003 0308 	and.w	r3, r3, #8
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d006      	beq.n	800e0c2 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	7b5b      	ldrb	r3, [r3, #13]
 800e0b8:	f043 0301 	orr.w	r3, r3, #1
 800e0bc:	b2da      	uxtb	r2, r3
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e0c2:	69fb      	ldr	r3, [r7, #28]
 800e0c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d038      	beq.n	800e13c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e0ca:	69f8      	ldr	r0, [r7, #28]
 800e0cc:	f7ff f858 	bl	800d180 <tcp_process_refused_data>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	f113 0f0d 	cmn.w	r3, #13
 800e0d6:	d007      	beq.n	800e0e8 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e0d8:	69fb      	ldr	r3, [r7, #28]
 800e0da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d02d      	beq.n	800e13c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e0e0:	4b15      	ldr	r3, [pc, #84]	; (800e138 <tcp_input+0x560>)
 800e0e2:	881b      	ldrh	r3, [r3, #0]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d029      	beq.n	800e13c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e0e8:	69fb      	ldr	r3, [r7, #28]
 800e0ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	f040 8104 	bne.w	800e2fa <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e0f2:	69f8      	ldr	r0, [r7, #28]
 800e0f4:	f003 fe16 	bl	8011d24 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e0f8:	e0ff      	b.n	800e2fa <tcp_input+0x722>
 800e0fa:	bf00      	nop
 800e0fc:	24000104 	.word	0x24000104
 800e100:	24000714 	.word	0x24000714
 800e104:	08017138 	.word	0x08017138
 800e108:	08017264 	.word	0x08017264
 800e10c:	08017184 	.word	0x08017184
 800e110:	24003604 	.word	0x24003604
 800e114:	08017290 	.word	0x08017290
 800e118:	24003614 	.word	0x24003614
 800e11c:	080172bc 	.word	0x080172bc
 800e120:	2400360c 	.word	0x2400360c
 800e124:	240000f4 	.word	0x240000f4
 800e128:	24000124 	.word	0x24000124
 800e12c:	24000121 	.word	0x24000121
 800e130:	2400011c 	.word	0x2400011c
 800e134:	24000120 	.word	0x24000120
 800e138:	2400011e 	.word	0x2400011e
      }
    }
    tcp_input_pcb = pcb;
 800e13c:	4a9c      	ldr	r2, [pc, #624]	; (800e3b0 <tcp_input+0x7d8>)
 800e13e:	69fb      	ldr	r3, [r7, #28]
 800e140:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e142:	69f8      	ldr	r0, [r7, #28]
 800e144:	f000 fb0a 	bl	800e75c <tcp_process>
 800e148:	4603      	mov	r3, r0
 800e14a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e14c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e150:	f113 0f0d 	cmn.w	r3, #13
 800e154:	f000 80d3 	beq.w	800e2fe <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800e158:	4b96      	ldr	r3, [pc, #600]	; (800e3b4 <tcp_input+0x7dc>)
 800e15a:	781b      	ldrb	r3, [r3, #0]
 800e15c:	f003 0308 	and.w	r3, r3, #8
 800e160:	2b00      	cmp	r3, #0
 800e162:	d015      	beq.n	800e190 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e164:	69fb      	ldr	r3, [r7, #28]
 800e166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d008      	beq.n	800e180 <tcp_input+0x5a8>
 800e16e:	69fb      	ldr	r3, [r7, #28]
 800e170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e174:	69fa      	ldr	r2, [r7, #28]
 800e176:	6912      	ldr	r2, [r2, #16]
 800e178:	f06f 010d 	mvn.w	r1, #13
 800e17c:	4610      	mov	r0, r2
 800e17e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e180:	69f9      	ldr	r1, [r7, #28]
 800e182:	488d      	ldr	r0, [pc, #564]	; (800e3b8 <tcp_input+0x7e0>)
 800e184:	f7ff fbb0 	bl	800d8e8 <tcp_pcb_remove>
        tcp_free(pcb);
 800e188:	69f8      	ldr	r0, [r7, #28]
 800e18a:	f7fd fefd 	bl	800bf88 <tcp_free>
 800e18e:	e0c1      	b.n	800e314 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800e190:	2300      	movs	r3, #0
 800e192:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e194:	4b89      	ldr	r3, [pc, #548]	; (800e3bc <tcp_input+0x7e4>)
 800e196:	881b      	ldrh	r3, [r3, #0]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d01d      	beq.n	800e1d8 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e19c:	4b87      	ldr	r3, [pc, #540]	; (800e3bc <tcp_input+0x7e4>)
 800e19e:	881b      	ldrh	r3, [r3, #0]
 800e1a0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e1a2:	69fb      	ldr	r3, [r7, #28]
 800e1a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d00a      	beq.n	800e1c2 <tcp_input+0x5ea>
 800e1ac:	69fb      	ldr	r3, [r7, #28]
 800e1ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1b2:	69fa      	ldr	r2, [r7, #28]
 800e1b4:	6910      	ldr	r0, [r2, #16]
 800e1b6:	89fa      	ldrh	r2, [r7, #14]
 800e1b8:	69f9      	ldr	r1, [r7, #28]
 800e1ba:	4798      	blx	r3
 800e1bc:	4603      	mov	r3, r0
 800e1be:	74fb      	strb	r3, [r7, #19]
 800e1c0:	e001      	b.n	800e1c6 <tcp_input+0x5ee>
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e1c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e1ca:	f113 0f0d 	cmn.w	r3, #13
 800e1ce:	f000 8098 	beq.w	800e302 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e1d2:	4b7a      	ldr	r3, [pc, #488]	; (800e3bc <tcp_input+0x7e4>)
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e1d8:	69f8      	ldr	r0, [r7, #28]
 800e1da:	f000 f907 	bl	800e3ec <tcp_input_delayed_close>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	f040 8090 	bne.w	800e306 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e1e6:	4b76      	ldr	r3, [pc, #472]	; (800e3c0 <tcp_input+0x7e8>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d041      	beq.n	800e272 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e1ee:	69fb      	ldr	r3, [r7, #28]
 800e1f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d006      	beq.n	800e204 <tcp_input+0x62c>
 800e1f6:	4b73      	ldr	r3, [pc, #460]	; (800e3c4 <tcp_input+0x7ec>)
 800e1f8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e1fc:	4972      	ldr	r1, [pc, #456]	; (800e3c8 <tcp_input+0x7f0>)
 800e1fe:	4873      	ldr	r0, [pc, #460]	; (800e3cc <tcp_input+0x7f4>)
 800e200:	f006 fdc4 	bl	8014d8c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e204:	69fb      	ldr	r3, [r7, #28]
 800e206:	8b5b      	ldrh	r3, [r3, #26]
 800e208:	f003 0310 	and.w	r3, r3, #16
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d008      	beq.n	800e222 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e210:	4b6b      	ldr	r3, [pc, #428]	; (800e3c0 <tcp_input+0x7e8>)
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	4618      	mov	r0, r3
 800e216:	f7fd fc07 	bl	800ba28 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e21a:	69f8      	ldr	r0, [r7, #28]
 800e21c:	f7fe f99c 	bl	800c558 <tcp_abort>
            goto aborted;
 800e220:	e078      	b.n	800e314 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e222:	69fb      	ldr	r3, [r7, #28]
 800e224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d00c      	beq.n	800e246 <tcp_input+0x66e>
 800e22c:	69fb      	ldr	r3, [r7, #28]
 800e22e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e232:	69fb      	ldr	r3, [r7, #28]
 800e234:	6918      	ldr	r0, [r3, #16]
 800e236:	4b62      	ldr	r3, [pc, #392]	; (800e3c0 <tcp_input+0x7e8>)
 800e238:	681a      	ldr	r2, [r3, #0]
 800e23a:	2300      	movs	r3, #0
 800e23c:	69f9      	ldr	r1, [r7, #28]
 800e23e:	47a0      	blx	r4
 800e240:	4603      	mov	r3, r0
 800e242:	74fb      	strb	r3, [r7, #19]
 800e244:	e008      	b.n	800e258 <tcp_input+0x680>
 800e246:	4b5e      	ldr	r3, [pc, #376]	; (800e3c0 <tcp_input+0x7e8>)
 800e248:	681a      	ldr	r2, [r3, #0]
 800e24a:	2300      	movs	r3, #0
 800e24c:	69f9      	ldr	r1, [r7, #28]
 800e24e:	2000      	movs	r0, #0
 800e250:	f7ff f88a 	bl	800d368 <tcp_recv_null>
 800e254:	4603      	mov	r3, r0
 800e256:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e258:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e25c:	f113 0f0d 	cmn.w	r3, #13
 800e260:	d053      	beq.n	800e30a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e262:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d003      	beq.n	800e272 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e26a:	4b55      	ldr	r3, [pc, #340]	; (800e3c0 <tcp_input+0x7e8>)
 800e26c:	681a      	ldr	r2, [r3, #0]
 800e26e:	69fb      	ldr	r3, [r7, #28]
 800e270:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e272:	4b50      	ldr	r3, [pc, #320]	; (800e3b4 <tcp_input+0x7dc>)
 800e274:	781b      	ldrb	r3, [r3, #0]
 800e276:	f003 0320 	and.w	r3, r3, #32
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d030      	beq.n	800e2e0 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800e27e:	69fb      	ldr	r3, [r7, #28]
 800e280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e282:	2b00      	cmp	r3, #0
 800e284:	d009      	beq.n	800e29a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e286:	69fb      	ldr	r3, [r7, #28]
 800e288:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e28a:	7b5a      	ldrb	r2, [r3, #13]
 800e28c:	69fb      	ldr	r3, [r7, #28]
 800e28e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e290:	f042 0220 	orr.w	r2, r2, #32
 800e294:	b2d2      	uxtb	r2, r2
 800e296:	735a      	strb	r2, [r3, #13]
 800e298:	e022      	b.n	800e2e0 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e29a:	69fb      	ldr	r3, [r7, #28]
 800e29c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e29e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e2a2:	d005      	beq.n	800e2b0 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800e2a4:	69fb      	ldr	r3, [r7, #28]
 800e2a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e2a8:	3301      	adds	r3, #1
 800e2aa:	b29a      	uxth	r2, r3
 800e2ac:	69fb      	ldr	r3, [r7, #28]
 800e2ae:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e2b0:	69fb      	ldr	r3, [r7, #28]
 800e2b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d00b      	beq.n	800e2d2 <tcp_input+0x6fa>
 800e2ba:	69fb      	ldr	r3, [r7, #28]
 800e2bc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e2c0:	69fb      	ldr	r3, [r7, #28]
 800e2c2:	6918      	ldr	r0, [r3, #16]
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	69f9      	ldr	r1, [r7, #28]
 800e2ca:	47a0      	blx	r4
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	74fb      	strb	r3, [r7, #19]
 800e2d0:	e001      	b.n	800e2d6 <tcp_input+0x6fe>
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e2d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e2da:	f113 0f0d 	cmn.w	r3, #13
 800e2de:	d016      	beq.n	800e30e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e2e0:	4b33      	ldr	r3, [pc, #204]	; (800e3b0 <tcp_input+0x7d8>)
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e2e6:	69f8      	ldr	r0, [r7, #28]
 800e2e8:	f000 f880 	bl	800e3ec <tcp_input_delayed_close>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d10f      	bne.n	800e312 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e2f2:	69f8      	ldr	r0, [r7, #28]
 800e2f4:	f002 ff10 	bl	8011118 <tcp_output>
 800e2f8:	e00c      	b.n	800e314 <tcp_input+0x73c>
        goto aborted;
 800e2fa:	bf00      	nop
 800e2fc:	e00a      	b.n	800e314 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e2fe:	bf00      	nop
 800e300:	e008      	b.n	800e314 <tcp_input+0x73c>
              goto aborted;
 800e302:	bf00      	nop
 800e304:	e006      	b.n	800e314 <tcp_input+0x73c>
          goto aborted;
 800e306:	bf00      	nop
 800e308:	e004      	b.n	800e314 <tcp_input+0x73c>
            goto aborted;
 800e30a:	bf00      	nop
 800e30c:	e002      	b.n	800e314 <tcp_input+0x73c>
              goto aborted;
 800e30e:	bf00      	nop
 800e310:	e000      	b.n	800e314 <tcp_input+0x73c>
          goto aborted;
 800e312:	bf00      	nop
    tcp_input_pcb = NULL;
 800e314:	4b26      	ldr	r3, [pc, #152]	; (800e3b0 <tcp_input+0x7d8>)
 800e316:	2200      	movs	r2, #0
 800e318:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e31a:	4b29      	ldr	r3, [pc, #164]	; (800e3c0 <tcp_input+0x7e8>)
 800e31c:	2200      	movs	r2, #0
 800e31e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e320:	4b2b      	ldr	r3, [pc, #172]	; (800e3d0 <tcp_input+0x7f8>)
 800e322:	685b      	ldr	r3, [r3, #4]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d03f      	beq.n	800e3a8 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800e328:	4b29      	ldr	r3, [pc, #164]	; (800e3d0 <tcp_input+0x7f8>)
 800e32a:	685b      	ldr	r3, [r3, #4]
 800e32c:	4618      	mov	r0, r3
 800e32e:	f7fd fb7b 	bl	800ba28 <pbuf_free>
      inseg.p = NULL;
 800e332:	4b27      	ldr	r3, [pc, #156]	; (800e3d0 <tcp_input+0x7f8>)
 800e334:	2200      	movs	r2, #0
 800e336:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e338:	e036      	b.n	800e3a8 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e33a:	4b26      	ldr	r3, [pc, #152]	; (800e3d4 <tcp_input+0x7fc>)
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	899b      	ldrh	r3, [r3, #12]
 800e340:	b29b      	uxth	r3, r3
 800e342:	4618      	mov	r0, r3
 800e344:	f7fb ff5a 	bl	800a1fc <lwip_htons>
 800e348:	4603      	mov	r3, r0
 800e34a:	b2db      	uxtb	r3, r3
 800e34c:	f003 0304 	and.w	r3, r3, #4
 800e350:	2b00      	cmp	r3, #0
 800e352:	d118      	bne.n	800e386 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e354:	4b20      	ldr	r3, [pc, #128]	; (800e3d8 <tcp_input+0x800>)
 800e356:	6819      	ldr	r1, [r3, #0]
 800e358:	4b20      	ldr	r3, [pc, #128]	; (800e3dc <tcp_input+0x804>)
 800e35a:	881b      	ldrh	r3, [r3, #0]
 800e35c:	461a      	mov	r2, r3
 800e35e:	4b20      	ldr	r3, [pc, #128]	; (800e3e0 <tcp_input+0x808>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e364:	4b1b      	ldr	r3, [pc, #108]	; (800e3d4 <tcp_input+0x7fc>)
 800e366:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e368:	885b      	ldrh	r3, [r3, #2]
 800e36a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e36c:	4a19      	ldr	r2, [pc, #100]	; (800e3d4 <tcp_input+0x7fc>)
 800e36e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e370:	8812      	ldrh	r2, [r2, #0]
 800e372:	b292      	uxth	r2, r2
 800e374:	9202      	str	r2, [sp, #8]
 800e376:	9301      	str	r3, [sp, #4]
 800e378:	4b1a      	ldr	r3, [pc, #104]	; (800e3e4 <tcp_input+0x80c>)
 800e37a:	9300      	str	r3, [sp, #0]
 800e37c:	4b1a      	ldr	r3, [pc, #104]	; (800e3e8 <tcp_input+0x810>)
 800e37e:	4602      	mov	r2, r0
 800e380:	2000      	movs	r0, #0
 800e382:	f003 fc7d 	bl	8011c80 <tcp_rst>
    pbuf_free(p);
 800e386:	6878      	ldr	r0, [r7, #4]
 800e388:	f7fd fb4e 	bl	800ba28 <pbuf_free>
  return;
 800e38c:	e00c      	b.n	800e3a8 <tcp_input+0x7d0>
    goto dropped;
 800e38e:	bf00      	nop
 800e390:	e006      	b.n	800e3a0 <tcp_input+0x7c8>
    goto dropped;
 800e392:	bf00      	nop
 800e394:	e004      	b.n	800e3a0 <tcp_input+0x7c8>
    goto dropped;
 800e396:	bf00      	nop
 800e398:	e002      	b.n	800e3a0 <tcp_input+0x7c8>
      goto dropped;
 800e39a:	bf00      	nop
 800e39c:	e000      	b.n	800e3a0 <tcp_input+0x7c8>
      goto dropped;
 800e39e:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e3a0:	6878      	ldr	r0, [r7, #4]
 800e3a2:	f7fd fb41 	bl	800ba28 <pbuf_free>
 800e3a6:	e000      	b.n	800e3aa <tcp_input+0x7d2>
  return;
 800e3a8:	bf00      	nop
}
 800e3aa:	3724      	adds	r7, #36	; 0x24
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd90      	pop	{r4, r7, pc}
 800e3b0:	24003618 	.word	0x24003618
 800e3b4:	24000121 	.word	0x24000121
 800e3b8:	24003604 	.word	0x24003604
 800e3bc:	2400011c 	.word	0x2400011c
 800e3c0:	24000124 	.word	0x24000124
 800e3c4:	08017138 	.word	0x08017138
 800e3c8:	080172ec 	.word	0x080172ec
 800e3cc:	08017184 	.word	0x08017184
 800e3d0:	240000f4 	.word	0x240000f4
 800e3d4:	24000104 	.word	0x24000104
 800e3d8:	24000118 	.word	0x24000118
 800e3dc:	2400011e 	.word	0x2400011e
 800e3e0:	24000114 	.word	0x24000114
 800e3e4:	24000724 	.word	0x24000724
 800e3e8:	24000728 	.word	0x24000728

0800e3ec <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b082      	sub	sp, #8
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d106      	bne.n	800e408 <tcp_input_delayed_close+0x1c>
 800e3fa:	4b17      	ldr	r3, [pc, #92]	; (800e458 <tcp_input_delayed_close+0x6c>)
 800e3fc:	f240 225a 	movw	r2, #602	; 0x25a
 800e400:	4916      	ldr	r1, [pc, #88]	; (800e45c <tcp_input_delayed_close+0x70>)
 800e402:	4817      	ldr	r0, [pc, #92]	; (800e460 <tcp_input_delayed_close+0x74>)
 800e404:	f006 fcc2 	bl	8014d8c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e408:	4b16      	ldr	r3, [pc, #88]	; (800e464 <tcp_input_delayed_close+0x78>)
 800e40a:	781b      	ldrb	r3, [r3, #0]
 800e40c:	f003 0310 	and.w	r3, r3, #16
 800e410:	2b00      	cmp	r3, #0
 800e412:	d01c      	beq.n	800e44e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	8b5b      	ldrh	r3, [r3, #26]
 800e418:	f003 0310 	and.w	r3, r3, #16
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d10d      	bne.n	800e43c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e426:	2b00      	cmp	r3, #0
 800e428:	d008      	beq.n	800e43c <tcp_input_delayed_close+0x50>
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e430:	687a      	ldr	r2, [r7, #4]
 800e432:	6912      	ldr	r2, [r2, #16]
 800e434:	f06f 010e 	mvn.w	r1, #14
 800e438:	4610      	mov	r0, r2
 800e43a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e43c:	6879      	ldr	r1, [r7, #4]
 800e43e:	480a      	ldr	r0, [pc, #40]	; (800e468 <tcp_input_delayed_close+0x7c>)
 800e440:	f7ff fa52 	bl	800d8e8 <tcp_pcb_remove>
    tcp_free(pcb);
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f7fd fd9f 	bl	800bf88 <tcp_free>
    return 1;
 800e44a:	2301      	movs	r3, #1
 800e44c:	e000      	b.n	800e450 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e44e:	2300      	movs	r3, #0
}
 800e450:	4618      	mov	r0, r3
 800e452:	3708      	adds	r7, #8
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}
 800e458:	08017138 	.word	0x08017138
 800e45c:	08017308 	.word	0x08017308
 800e460:	08017184 	.word	0x08017184
 800e464:	24000121 	.word	0x24000121
 800e468:	24003604 	.word	0x24003604

0800e46c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e46c:	b590      	push	{r4, r7, lr}
 800e46e:	b08b      	sub	sp, #44	; 0x2c
 800e470:	af04      	add	r7, sp, #16
 800e472:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e474:	4b6f      	ldr	r3, [pc, #444]	; (800e634 <tcp_listen_input+0x1c8>)
 800e476:	781b      	ldrb	r3, [r3, #0]
 800e478:	f003 0304 	and.w	r3, r3, #4
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	f040 80d2 	bne.w	800e626 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d106      	bne.n	800e496 <tcp_listen_input+0x2a>
 800e488:	4b6b      	ldr	r3, [pc, #428]	; (800e638 <tcp_listen_input+0x1cc>)
 800e48a:	f240 2281 	movw	r2, #641	; 0x281
 800e48e:	496b      	ldr	r1, [pc, #428]	; (800e63c <tcp_listen_input+0x1d0>)
 800e490:	486b      	ldr	r0, [pc, #428]	; (800e640 <tcp_listen_input+0x1d4>)
 800e492:	f006 fc7b 	bl	8014d8c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e496:	4b67      	ldr	r3, [pc, #412]	; (800e634 <tcp_listen_input+0x1c8>)
 800e498:	781b      	ldrb	r3, [r3, #0]
 800e49a:	f003 0310 	and.w	r3, r3, #16
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d019      	beq.n	800e4d6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e4a2:	4b68      	ldr	r3, [pc, #416]	; (800e644 <tcp_listen_input+0x1d8>)
 800e4a4:	6819      	ldr	r1, [r3, #0]
 800e4a6:	4b68      	ldr	r3, [pc, #416]	; (800e648 <tcp_listen_input+0x1dc>)
 800e4a8:	881b      	ldrh	r3, [r3, #0]
 800e4aa:	461a      	mov	r2, r3
 800e4ac:	4b67      	ldr	r3, [pc, #412]	; (800e64c <tcp_listen_input+0x1e0>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e4b2:	4b67      	ldr	r3, [pc, #412]	; (800e650 <tcp_listen_input+0x1e4>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e4b6:	885b      	ldrh	r3, [r3, #2]
 800e4b8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e4ba:	4a65      	ldr	r2, [pc, #404]	; (800e650 <tcp_listen_input+0x1e4>)
 800e4bc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e4be:	8812      	ldrh	r2, [r2, #0]
 800e4c0:	b292      	uxth	r2, r2
 800e4c2:	9202      	str	r2, [sp, #8]
 800e4c4:	9301      	str	r3, [sp, #4]
 800e4c6:	4b63      	ldr	r3, [pc, #396]	; (800e654 <tcp_listen_input+0x1e8>)
 800e4c8:	9300      	str	r3, [sp, #0]
 800e4ca:	4b63      	ldr	r3, [pc, #396]	; (800e658 <tcp_listen_input+0x1ec>)
 800e4cc:	4602      	mov	r2, r0
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	f003 fbd6 	bl	8011c80 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e4d4:	e0a9      	b.n	800e62a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e4d6:	4b57      	ldr	r3, [pc, #348]	; (800e634 <tcp_listen_input+0x1c8>)
 800e4d8:	781b      	ldrb	r3, [r3, #0]
 800e4da:	f003 0302 	and.w	r3, r3, #2
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	f000 80a3 	beq.w	800e62a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	7d5b      	ldrb	r3, [r3, #21]
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f7ff f861 	bl	800d5b0 <tcp_alloc>
 800e4ee:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e4f0:	697b      	ldr	r3, [r7, #20]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d111      	bne.n	800e51a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	699b      	ldr	r3, [r3, #24]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d00a      	beq.n	800e514 <tcp_listen_input+0xa8>
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	699b      	ldr	r3, [r3, #24]
 800e502:	687a      	ldr	r2, [r7, #4]
 800e504:	6910      	ldr	r0, [r2, #16]
 800e506:	f04f 32ff 	mov.w	r2, #4294967295
 800e50a:	2100      	movs	r1, #0
 800e50c:	4798      	blx	r3
 800e50e:	4603      	mov	r3, r0
 800e510:	73bb      	strb	r3, [r7, #14]
      return;
 800e512:	e08b      	b.n	800e62c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e514:	23f0      	movs	r3, #240	; 0xf0
 800e516:	73bb      	strb	r3, [r7, #14]
      return;
 800e518:	e088      	b.n	800e62c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e51a:	4b50      	ldr	r3, [pc, #320]	; (800e65c <tcp_listen_input+0x1f0>)
 800e51c:	695a      	ldr	r2, [r3, #20]
 800e51e:	697b      	ldr	r3, [r7, #20]
 800e520:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e522:	4b4e      	ldr	r3, [pc, #312]	; (800e65c <tcp_listen_input+0x1f0>)
 800e524:	691a      	ldr	r2, [r3, #16]
 800e526:	697b      	ldr	r3, [r7, #20]
 800e528:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	8ada      	ldrh	r2, [r3, #22]
 800e52e:	697b      	ldr	r3, [r7, #20]
 800e530:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e532:	4b47      	ldr	r3, [pc, #284]	; (800e650 <tcp_listen_input+0x1e4>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	881b      	ldrh	r3, [r3, #0]
 800e538:	b29a      	uxth	r2, r3
 800e53a:	697b      	ldr	r3, [r7, #20]
 800e53c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e53e:	697b      	ldr	r3, [r7, #20]
 800e540:	2203      	movs	r2, #3
 800e542:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e544:	4b41      	ldr	r3, [pc, #260]	; (800e64c <tcp_listen_input+0x1e0>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	1c5a      	adds	r2, r3, #1
 800e54a:	697b      	ldr	r3, [r7, #20]
 800e54c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e54e:	697b      	ldr	r3, [r7, #20]
 800e550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e556:	6978      	ldr	r0, [r7, #20]
 800e558:	f7ff fa5a 	bl	800da10 <tcp_next_iss>
 800e55c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e55e:	697b      	ldr	r3, [r7, #20]
 800e560:	693a      	ldr	r2, [r7, #16]
 800e562:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e564:	697b      	ldr	r3, [r7, #20]
 800e566:	693a      	ldr	r2, [r7, #16]
 800e568:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	693a      	ldr	r2, [r7, #16]
 800e56e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e570:	697b      	ldr	r3, [r7, #20]
 800e572:	693a      	ldr	r2, [r7, #16]
 800e574:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e576:	4b35      	ldr	r3, [pc, #212]	; (800e64c <tcp_listen_input+0x1e0>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	1e5a      	subs	r2, r3, #1
 800e57c:	697b      	ldr	r3, [r7, #20]
 800e57e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	691a      	ldr	r2, [r3, #16]
 800e584:	697b      	ldr	r3, [r7, #20]
 800e586:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e588:	697b      	ldr	r3, [r7, #20]
 800e58a:	687a      	ldr	r2, [r7, #4]
 800e58c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	7a5b      	ldrb	r3, [r3, #9]
 800e592:	f003 030c 	and.w	r3, r3, #12
 800e596:	b2da      	uxtb	r2, r3
 800e598:	697b      	ldr	r3, [r7, #20]
 800e59a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	7a1a      	ldrb	r2, [r3, #8]
 800e5a0:	697b      	ldr	r3, [r7, #20]
 800e5a2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e5a4:	4b2e      	ldr	r3, [pc, #184]	; (800e660 <tcp_listen_input+0x1f4>)
 800e5a6:	681a      	ldr	r2, [r3, #0]
 800e5a8:	697b      	ldr	r3, [r7, #20]
 800e5aa:	60da      	str	r2, [r3, #12]
 800e5ac:	4a2c      	ldr	r2, [pc, #176]	; (800e660 <tcp_listen_input+0x1f4>)
 800e5ae:	697b      	ldr	r3, [r7, #20]
 800e5b0:	6013      	str	r3, [r2, #0]
 800e5b2:	f003 fd27 	bl	8012004 <tcp_timer_needed>
 800e5b6:	4b2b      	ldr	r3, [pc, #172]	; (800e664 <tcp_listen_input+0x1f8>)
 800e5b8:	2201      	movs	r2, #1
 800e5ba:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e5bc:	6978      	ldr	r0, [r7, #20]
 800e5be:	f001 fd8d 	bl	80100dc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e5c2:	4b23      	ldr	r3, [pc, #140]	; (800e650 <tcp_listen_input+0x1e4>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	89db      	ldrh	r3, [r3, #14]
 800e5c8:	b29a      	uxth	r2, r3
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e5d0:	697b      	ldr	r3, [r7, #20]
 800e5d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e5d6:	697b      	ldr	r3, [r7, #20]
 800e5d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e5dc:	697b      	ldr	r3, [r7, #20]
 800e5de:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e5e0:	697b      	ldr	r3, [r7, #20]
 800e5e2:	3304      	adds	r3, #4
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f005 f911 	bl	801380c <ip4_route>
 800e5ea:	4601      	mov	r1, r0
 800e5ec:	697b      	ldr	r3, [r7, #20]
 800e5ee:	3304      	adds	r3, #4
 800e5f0:	461a      	mov	r2, r3
 800e5f2:	4620      	mov	r0, r4
 800e5f4:	f7ff fa32 	bl	800da5c <tcp_eff_send_mss_netif>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	461a      	mov	r2, r3
 800e5fc:	697b      	ldr	r3, [r7, #20]
 800e5fe:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e600:	2112      	movs	r1, #18
 800e602:	6978      	ldr	r0, [r7, #20]
 800e604:	f002 fc9a 	bl	8010f3c <tcp_enqueue_flags>
 800e608:	4603      	mov	r3, r0
 800e60a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e60c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d004      	beq.n	800e61e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e614:	2100      	movs	r1, #0
 800e616:	6978      	ldr	r0, [r7, #20]
 800e618:	f7fd fee0 	bl	800c3dc <tcp_abandon>
      return;
 800e61c:	e006      	b.n	800e62c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e61e:	6978      	ldr	r0, [r7, #20]
 800e620:	f002 fd7a 	bl	8011118 <tcp_output>
  return;
 800e624:	e001      	b.n	800e62a <tcp_listen_input+0x1be>
    return;
 800e626:	bf00      	nop
 800e628:	e000      	b.n	800e62c <tcp_listen_input+0x1c0>
  return;
 800e62a:	bf00      	nop
}
 800e62c:	371c      	adds	r7, #28
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd90      	pop	{r4, r7, pc}
 800e632:	bf00      	nop
 800e634:	24000120 	.word	0x24000120
 800e638:	08017138 	.word	0x08017138
 800e63c:	08017330 	.word	0x08017330
 800e640:	08017184 	.word	0x08017184
 800e644:	24000118 	.word	0x24000118
 800e648:	2400011e 	.word	0x2400011e
 800e64c:	24000114 	.word	0x24000114
 800e650:	24000104 	.word	0x24000104
 800e654:	24000724 	.word	0x24000724
 800e658:	24000728 	.word	0x24000728
 800e65c:	24000714 	.word	0x24000714
 800e660:	24003604 	.word	0x24003604
 800e664:	24003600 	.word	0x24003600

0800e668 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b086      	sub	sp, #24
 800e66c:	af04      	add	r7, sp, #16
 800e66e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e670:	4b2f      	ldr	r3, [pc, #188]	; (800e730 <tcp_timewait_input+0xc8>)
 800e672:	781b      	ldrb	r3, [r3, #0]
 800e674:	f003 0304 	and.w	r3, r3, #4
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d153      	bne.n	800e724 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d106      	bne.n	800e690 <tcp_timewait_input+0x28>
 800e682:	4b2c      	ldr	r3, [pc, #176]	; (800e734 <tcp_timewait_input+0xcc>)
 800e684:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e688:	492b      	ldr	r1, [pc, #172]	; (800e738 <tcp_timewait_input+0xd0>)
 800e68a:	482c      	ldr	r0, [pc, #176]	; (800e73c <tcp_timewait_input+0xd4>)
 800e68c:	f006 fb7e 	bl	8014d8c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e690:	4b27      	ldr	r3, [pc, #156]	; (800e730 <tcp_timewait_input+0xc8>)
 800e692:	781b      	ldrb	r3, [r3, #0]
 800e694:	f003 0302 	and.w	r3, r3, #2
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d02a      	beq.n	800e6f2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e69c:	4b28      	ldr	r3, [pc, #160]	; (800e740 <tcp_timewait_input+0xd8>)
 800e69e:	681a      	ldr	r2, [r3, #0]
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6a4:	1ad3      	subs	r3, r2, r3
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	db2d      	blt.n	800e706 <tcp_timewait_input+0x9e>
 800e6aa:	4b25      	ldr	r3, [pc, #148]	; (800e740 <tcp_timewait_input+0xd8>)
 800e6ac:	681a      	ldr	r2, [r3, #0]
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6b2:	6879      	ldr	r1, [r7, #4]
 800e6b4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e6b6:	440b      	add	r3, r1
 800e6b8:	1ad3      	subs	r3, r2, r3
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	dc23      	bgt.n	800e706 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e6be:	4b21      	ldr	r3, [pc, #132]	; (800e744 <tcp_timewait_input+0xdc>)
 800e6c0:	6819      	ldr	r1, [r3, #0]
 800e6c2:	4b21      	ldr	r3, [pc, #132]	; (800e748 <tcp_timewait_input+0xe0>)
 800e6c4:	881b      	ldrh	r3, [r3, #0]
 800e6c6:	461a      	mov	r2, r3
 800e6c8:	4b1d      	ldr	r3, [pc, #116]	; (800e740 <tcp_timewait_input+0xd8>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e6ce:	4b1f      	ldr	r3, [pc, #124]	; (800e74c <tcp_timewait_input+0xe4>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e6d2:	885b      	ldrh	r3, [r3, #2]
 800e6d4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e6d6:	4a1d      	ldr	r2, [pc, #116]	; (800e74c <tcp_timewait_input+0xe4>)
 800e6d8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e6da:	8812      	ldrh	r2, [r2, #0]
 800e6dc:	b292      	uxth	r2, r2
 800e6de:	9202      	str	r2, [sp, #8]
 800e6e0:	9301      	str	r3, [sp, #4]
 800e6e2:	4b1b      	ldr	r3, [pc, #108]	; (800e750 <tcp_timewait_input+0xe8>)
 800e6e4:	9300      	str	r3, [sp, #0]
 800e6e6:	4b1b      	ldr	r3, [pc, #108]	; (800e754 <tcp_timewait_input+0xec>)
 800e6e8:	4602      	mov	r2, r0
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	f003 fac8 	bl	8011c80 <tcp_rst>
      return;
 800e6f0:	e01b      	b.n	800e72a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e6f2:	4b0f      	ldr	r3, [pc, #60]	; (800e730 <tcp_timewait_input+0xc8>)
 800e6f4:	781b      	ldrb	r3, [r3, #0]
 800e6f6:	f003 0301 	and.w	r3, r3, #1
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d003      	beq.n	800e706 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e6fe:	4b16      	ldr	r3, [pc, #88]	; (800e758 <tcp_timewait_input+0xf0>)
 800e700:	681a      	ldr	r2, [r3, #0]
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e706:	4b10      	ldr	r3, [pc, #64]	; (800e748 <tcp_timewait_input+0xe0>)
 800e708:	881b      	ldrh	r3, [r3, #0]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d00c      	beq.n	800e728 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	8b5b      	ldrh	r3, [r3, #26]
 800e712:	f043 0302 	orr.w	r3, r3, #2
 800e716:	b29a      	uxth	r2, r3
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e71c:	6878      	ldr	r0, [r7, #4]
 800e71e:	f002 fcfb 	bl	8011118 <tcp_output>
  }
  return;
 800e722:	e001      	b.n	800e728 <tcp_timewait_input+0xc0>
    return;
 800e724:	bf00      	nop
 800e726:	e000      	b.n	800e72a <tcp_timewait_input+0xc2>
  return;
 800e728:	bf00      	nop
}
 800e72a:	3708      	adds	r7, #8
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}
 800e730:	24000120 	.word	0x24000120
 800e734:	08017138 	.word	0x08017138
 800e738:	08017350 	.word	0x08017350
 800e73c:	08017184 	.word	0x08017184
 800e740:	24000114 	.word	0x24000114
 800e744:	24000118 	.word	0x24000118
 800e748:	2400011e 	.word	0x2400011e
 800e74c:	24000104 	.word	0x24000104
 800e750:	24000724 	.word	0x24000724
 800e754:	24000728 	.word	0x24000728
 800e758:	24003608 	.word	0x24003608

0800e75c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e75c:	b590      	push	{r4, r7, lr}
 800e75e:	b08d      	sub	sp, #52	; 0x34
 800e760:	af04      	add	r7, sp, #16
 800e762:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e764:	2300      	movs	r3, #0
 800e766:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e768:	2300      	movs	r3, #0
 800e76a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d106      	bne.n	800e780 <tcp_process+0x24>
 800e772:	4ba5      	ldr	r3, [pc, #660]	; (800ea08 <tcp_process+0x2ac>)
 800e774:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e778:	49a4      	ldr	r1, [pc, #656]	; (800ea0c <tcp_process+0x2b0>)
 800e77a:	48a5      	ldr	r0, [pc, #660]	; (800ea10 <tcp_process+0x2b4>)
 800e77c:	f006 fb06 	bl	8014d8c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e780:	4ba4      	ldr	r3, [pc, #656]	; (800ea14 <tcp_process+0x2b8>)
 800e782:	781b      	ldrb	r3, [r3, #0]
 800e784:	f003 0304 	and.w	r3, r3, #4
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d04e      	beq.n	800e82a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	7d1b      	ldrb	r3, [r3, #20]
 800e790:	2b02      	cmp	r3, #2
 800e792:	d108      	bne.n	800e7a6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e798:	4b9f      	ldr	r3, [pc, #636]	; (800ea18 <tcp_process+0x2bc>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	429a      	cmp	r2, r3
 800e79e:	d123      	bne.n	800e7e8 <tcp_process+0x8c>
        acceptable = 1;
 800e7a0:	2301      	movs	r3, #1
 800e7a2:	76fb      	strb	r3, [r7, #27]
 800e7a4:	e020      	b.n	800e7e8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e7aa:	4b9c      	ldr	r3, [pc, #624]	; (800ea1c <tcp_process+0x2c0>)
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d102      	bne.n	800e7b8 <tcp_process+0x5c>
        acceptable = 1;
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	76fb      	strb	r3, [r7, #27]
 800e7b6:	e017      	b.n	800e7e8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e7b8:	4b98      	ldr	r3, [pc, #608]	; (800ea1c <tcp_process+0x2c0>)
 800e7ba:	681a      	ldr	r2, [r3, #0]
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7c0:	1ad3      	subs	r3, r2, r3
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	db10      	blt.n	800e7e8 <tcp_process+0x8c>
 800e7c6:	4b95      	ldr	r3, [pc, #596]	; (800ea1c <tcp_process+0x2c0>)
 800e7c8:	681a      	ldr	r2, [r3, #0]
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7ce:	6879      	ldr	r1, [r7, #4]
 800e7d0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e7d2:	440b      	add	r3, r1
 800e7d4:	1ad3      	subs	r3, r2, r3
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	dc06      	bgt.n	800e7e8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	8b5b      	ldrh	r3, [r3, #26]
 800e7de:	f043 0302 	orr.w	r3, r3, #2
 800e7e2:	b29a      	uxth	r2, r3
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e7e8:	7efb      	ldrb	r3, [r7, #27]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d01b      	beq.n	800e826 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	7d1b      	ldrb	r3, [r3, #20]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d106      	bne.n	800e804 <tcp_process+0xa8>
 800e7f6:	4b84      	ldr	r3, [pc, #528]	; (800ea08 <tcp_process+0x2ac>)
 800e7f8:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e7fc:	4988      	ldr	r1, [pc, #544]	; (800ea20 <tcp_process+0x2c4>)
 800e7fe:	4884      	ldr	r0, [pc, #528]	; (800ea10 <tcp_process+0x2b4>)
 800e800:	f006 fac4 	bl	8014d8c <iprintf>
      recv_flags |= TF_RESET;
 800e804:	4b87      	ldr	r3, [pc, #540]	; (800ea24 <tcp_process+0x2c8>)
 800e806:	781b      	ldrb	r3, [r3, #0]
 800e808:	f043 0308 	orr.w	r3, r3, #8
 800e80c:	b2da      	uxtb	r2, r3
 800e80e:	4b85      	ldr	r3, [pc, #532]	; (800ea24 <tcp_process+0x2c8>)
 800e810:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	8b5b      	ldrh	r3, [r3, #26]
 800e816:	f023 0301 	bic.w	r3, r3, #1
 800e81a:	b29a      	uxth	r2, r3
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e820:	f06f 030d 	mvn.w	r3, #13
 800e824:	e37a      	b.n	800ef1c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e826:	2300      	movs	r3, #0
 800e828:	e378      	b.n	800ef1c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e82a:	4b7a      	ldr	r3, [pc, #488]	; (800ea14 <tcp_process+0x2b8>)
 800e82c:	781b      	ldrb	r3, [r3, #0]
 800e82e:	f003 0302 	and.w	r3, r3, #2
 800e832:	2b00      	cmp	r3, #0
 800e834:	d010      	beq.n	800e858 <tcp_process+0xfc>
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	7d1b      	ldrb	r3, [r3, #20]
 800e83a:	2b02      	cmp	r3, #2
 800e83c:	d00c      	beq.n	800e858 <tcp_process+0xfc>
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	7d1b      	ldrb	r3, [r3, #20]
 800e842:	2b03      	cmp	r3, #3
 800e844:	d008      	beq.n	800e858 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	8b5b      	ldrh	r3, [r3, #26]
 800e84a:	f043 0302 	orr.w	r3, r3, #2
 800e84e:	b29a      	uxth	r2, r3
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e854:	2300      	movs	r3, #0
 800e856:	e361      	b.n	800ef1c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	8b5b      	ldrh	r3, [r3, #26]
 800e85c:	f003 0310 	and.w	r3, r3, #16
 800e860:	2b00      	cmp	r3, #0
 800e862:	d103      	bne.n	800e86c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e864:	4b70      	ldr	r3, [pc, #448]	; (800ea28 <tcp_process+0x2cc>)
 800e866:	681a      	ldr	r2, [r3, #0]
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2200      	movs	r2, #0
 800e870:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2200      	movs	r2, #0
 800e878:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	f001 fc2d 	bl	80100dc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	7d1b      	ldrb	r3, [r3, #20]
 800e886:	3b02      	subs	r3, #2
 800e888:	2b07      	cmp	r3, #7
 800e88a:	f200 8337 	bhi.w	800eefc <tcp_process+0x7a0>
 800e88e:	a201      	add	r2, pc, #4	; (adr r2, 800e894 <tcp_process+0x138>)
 800e890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e894:	0800e8b5 	.word	0x0800e8b5
 800e898:	0800eae5 	.word	0x0800eae5
 800e89c:	0800ec5d 	.word	0x0800ec5d
 800e8a0:	0800ec87 	.word	0x0800ec87
 800e8a4:	0800edab 	.word	0x0800edab
 800e8a8:	0800ec5d 	.word	0x0800ec5d
 800e8ac:	0800ee37 	.word	0x0800ee37
 800e8b0:	0800eec7 	.word	0x0800eec7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e8b4:	4b57      	ldr	r3, [pc, #348]	; (800ea14 <tcp_process+0x2b8>)
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	f003 0310 	and.w	r3, r3, #16
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	f000 80e4 	beq.w	800ea8a <tcp_process+0x32e>
 800e8c2:	4b54      	ldr	r3, [pc, #336]	; (800ea14 <tcp_process+0x2b8>)
 800e8c4:	781b      	ldrb	r3, [r3, #0]
 800e8c6:	f003 0302 	and.w	r3, r3, #2
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	f000 80dd 	beq.w	800ea8a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8d4:	1c5a      	adds	r2, r3, #1
 800e8d6:	4b50      	ldr	r3, [pc, #320]	; (800ea18 <tcp_process+0x2bc>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	f040 80d5 	bne.w	800ea8a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e8e0:	4b4e      	ldr	r3, [pc, #312]	; (800ea1c <tcp_process+0x2c0>)
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	1c5a      	adds	r2, r3, #1
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800e8f2:	4b49      	ldr	r3, [pc, #292]	; (800ea18 <tcp_process+0x2bc>)
 800e8f4:	681a      	ldr	r2, [r3, #0]
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e8fa:	4b4c      	ldr	r3, [pc, #304]	; (800ea2c <tcp_process+0x2d0>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	89db      	ldrh	r3, [r3, #14]
 800e900:	b29a      	uxth	r2, r3
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e914:	4b41      	ldr	r3, [pc, #260]	; (800ea1c <tcp_process+0x2c0>)
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	1e5a      	subs	r2, r3, #1
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2204      	movs	r2, #4
 800e922:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	3304      	adds	r3, #4
 800e92c:	4618      	mov	r0, r3
 800e92e:	f004 ff6d 	bl	801380c <ip4_route>
 800e932:	4601      	mov	r1, r0
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	3304      	adds	r3, #4
 800e938:	461a      	mov	r2, r3
 800e93a:	4620      	mov	r0, r4
 800e93c:	f7ff f88e 	bl	800da5c <tcp_eff_send_mss_netif>
 800e940:	4603      	mov	r3, r0
 800e942:	461a      	mov	r2, r3
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e94c:	009a      	lsls	r2, r3, #2
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e952:	005b      	lsls	r3, r3, #1
 800e954:	f241 111c 	movw	r1, #4380	; 0x111c
 800e958:	428b      	cmp	r3, r1
 800e95a:	bf38      	it	cc
 800e95c:	460b      	movcc	r3, r1
 800e95e:	429a      	cmp	r2, r3
 800e960:	d204      	bcs.n	800e96c <tcp_process+0x210>
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e966:	009b      	lsls	r3, r3, #2
 800e968:	b29b      	uxth	r3, r3
 800e96a:	e00d      	b.n	800e988 <tcp_process+0x22c>
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e970:	005b      	lsls	r3, r3, #1
 800e972:	f241 121c 	movw	r2, #4380	; 0x111c
 800e976:	4293      	cmp	r3, r2
 800e978:	d904      	bls.n	800e984 <tcp_process+0x228>
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e97e:	005b      	lsls	r3, r3, #1
 800e980:	b29b      	uxth	r3, r3
 800e982:	e001      	b.n	800e988 <tcp_process+0x22c>
 800e984:	f241 131c 	movw	r3, #4380	; 0x111c
 800e988:	687a      	ldr	r2, [r7, #4]
 800e98a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e994:	2b00      	cmp	r3, #0
 800e996:	d106      	bne.n	800e9a6 <tcp_process+0x24a>
 800e998:	4b1b      	ldr	r3, [pc, #108]	; (800ea08 <tcp_process+0x2ac>)
 800e99a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e99e:	4924      	ldr	r1, [pc, #144]	; (800ea30 <tcp_process+0x2d4>)
 800e9a0:	481b      	ldr	r0, [pc, #108]	; (800ea10 <tcp_process+0x2b4>)
 800e9a2:	f006 f9f3 	bl	8014d8c <iprintf>
        --pcb->snd_queuelen;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e9ac:	3b01      	subs	r3, #1
 800e9ae:	b29a      	uxth	r2, r3
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9ba:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e9bc:	69fb      	ldr	r3, [r7, #28]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d111      	bne.n	800e9e6 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9c6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e9c8:	69fb      	ldr	r3, [r7, #28]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d106      	bne.n	800e9dc <tcp_process+0x280>
 800e9ce:	4b0e      	ldr	r3, [pc, #56]	; (800ea08 <tcp_process+0x2ac>)
 800e9d0:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e9d4:	4917      	ldr	r1, [pc, #92]	; (800ea34 <tcp_process+0x2d8>)
 800e9d6:	480e      	ldr	r0, [pc, #56]	; (800ea10 <tcp_process+0x2b4>)
 800e9d8:	f006 f9d8 	bl	8014d8c <iprintf>
          pcb->unsent = rseg->next;
 800e9dc:	69fb      	ldr	r3, [r7, #28]
 800e9de:	681a      	ldr	r2, [r3, #0]
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	66da      	str	r2, [r3, #108]	; 0x6c
 800e9e4:	e003      	b.n	800e9ee <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800e9e6:	69fb      	ldr	r3, [r7, #28]
 800e9e8:	681a      	ldr	r2, [r3, #0]
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800e9ee:	69f8      	ldr	r0, [r7, #28]
 800e9f0:	f7fe fc57 	bl	800d2a2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d11d      	bne.n	800ea38 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea02:	861a      	strh	r2, [r3, #48]	; 0x30
 800ea04:	e01f      	b.n	800ea46 <tcp_process+0x2ea>
 800ea06:	bf00      	nop
 800ea08:	08017138 	.word	0x08017138
 800ea0c:	08017370 	.word	0x08017370
 800ea10:	08017184 	.word	0x08017184
 800ea14:	24000120 	.word	0x24000120
 800ea18:	24000118 	.word	0x24000118
 800ea1c:	24000114 	.word	0x24000114
 800ea20:	0801738c 	.word	0x0801738c
 800ea24:	24000121 	.word	0x24000121
 800ea28:	24003608 	.word	0x24003608
 800ea2c:	24000104 	.word	0x24000104
 800ea30:	080173ac 	.word	0x080173ac
 800ea34:	080173c4 	.word	0x080173c4
        } else {
          pcb->rtime = 0;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	2200      	movs	r2, #0
 800ea42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d00a      	beq.n	800ea66 <tcp_process+0x30a>
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea56:	687a      	ldr	r2, [r7, #4]
 800ea58:	6910      	ldr	r0, [r2, #16]
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	6879      	ldr	r1, [r7, #4]
 800ea5e:	4798      	blx	r3
 800ea60:	4603      	mov	r3, r0
 800ea62:	76bb      	strb	r3, [r7, #26]
 800ea64:	e001      	b.n	800ea6a <tcp_process+0x30e>
 800ea66:	2300      	movs	r3, #0
 800ea68:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ea6a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ea6e:	f113 0f0d 	cmn.w	r3, #13
 800ea72:	d102      	bne.n	800ea7a <tcp_process+0x31e>
          return ERR_ABRT;
 800ea74:	f06f 030c 	mvn.w	r3, #12
 800ea78:	e250      	b.n	800ef1c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	8b5b      	ldrh	r3, [r3, #26]
 800ea7e:	f043 0302 	orr.w	r3, r3, #2
 800ea82:	b29a      	uxth	r2, r3
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800ea88:	e23a      	b.n	800ef00 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ea8a:	4b9d      	ldr	r3, [pc, #628]	; (800ed00 <tcp_process+0x5a4>)
 800ea8c:	781b      	ldrb	r3, [r3, #0]
 800ea8e:	f003 0310 	and.w	r3, r3, #16
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	f000 8234 	beq.w	800ef00 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea98:	4b9a      	ldr	r3, [pc, #616]	; (800ed04 <tcp_process+0x5a8>)
 800ea9a:	6819      	ldr	r1, [r3, #0]
 800ea9c:	4b9a      	ldr	r3, [pc, #616]	; (800ed08 <tcp_process+0x5ac>)
 800ea9e:	881b      	ldrh	r3, [r3, #0]
 800eaa0:	461a      	mov	r2, r3
 800eaa2:	4b9a      	ldr	r3, [pc, #616]	; (800ed0c <tcp_process+0x5b0>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eaa8:	4b99      	ldr	r3, [pc, #612]	; (800ed10 <tcp_process+0x5b4>)
 800eaaa:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eaac:	885b      	ldrh	r3, [r3, #2]
 800eaae:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eab0:	4a97      	ldr	r2, [pc, #604]	; (800ed10 <tcp_process+0x5b4>)
 800eab2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eab4:	8812      	ldrh	r2, [r2, #0]
 800eab6:	b292      	uxth	r2, r2
 800eab8:	9202      	str	r2, [sp, #8]
 800eaba:	9301      	str	r3, [sp, #4]
 800eabc:	4b95      	ldr	r3, [pc, #596]	; (800ed14 <tcp_process+0x5b8>)
 800eabe:	9300      	str	r3, [sp, #0]
 800eac0:	4b95      	ldr	r3, [pc, #596]	; (800ed18 <tcp_process+0x5bc>)
 800eac2:	4602      	mov	r2, r0
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f003 f8db 	bl	8011c80 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ead0:	2b05      	cmp	r3, #5
 800ead2:	f200 8215 	bhi.w	800ef00 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2200      	movs	r2, #0
 800eada:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800eadc:	6878      	ldr	r0, [r7, #4]
 800eade:	f002 fea5 	bl	801182c <tcp_rexmit_rto>
      break;
 800eae2:	e20d      	b.n	800ef00 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800eae4:	4b86      	ldr	r3, [pc, #536]	; (800ed00 <tcp_process+0x5a4>)
 800eae6:	781b      	ldrb	r3, [r3, #0]
 800eae8:	f003 0310 	and.w	r3, r3, #16
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	f000 80a1 	beq.w	800ec34 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800eaf2:	4b84      	ldr	r3, [pc, #528]	; (800ed04 <tcp_process+0x5a8>)
 800eaf4:	681a      	ldr	r2, [r3, #0]
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eafa:	1ad3      	subs	r3, r2, r3
 800eafc:	3b01      	subs	r3, #1
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	db7e      	blt.n	800ec00 <tcp_process+0x4a4>
 800eb02:	4b80      	ldr	r3, [pc, #512]	; (800ed04 <tcp_process+0x5a8>)
 800eb04:	681a      	ldr	r2, [r3, #0]
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb0a:	1ad3      	subs	r3, r2, r3
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	dc77      	bgt.n	800ec00 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2204      	movs	r2, #4
 800eb14:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d102      	bne.n	800eb24 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800eb1e:	23fa      	movs	r3, #250	; 0xfa
 800eb20:	76bb      	strb	r3, [r7, #26]
 800eb22:	e01d      	b.n	800eb60 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb28:	699b      	ldr	r3, [r3, #24]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d106      	bne.n	800eb3c <tcp_process+0x3e0>
 800eb2e:	4b7b      	ldr	r3, [pc, #492]	; (800ed1c <tcp_process+0x5c0>)
 800eb30:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800eb34:	497a      	ldr	r1, [pc, #488]	; (800ed20 <tcp_process+0x5c4>)
 800eb36:	487b      	ldr	r0, [pc, #492]	; (800ed24 <tcp_process+0x5c8>)
 800eb38:	f006 f928 	bl	8014d8c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb40:	699b      	ldr	r3, [r3, #24]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d00a      	beq.n	800eb5c <tcp_process+0x400>
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb4a:	699b      	ldr	r3, [r3, #24]
 800eb4c:	687a      	ldr	r2, [r7, #4]
 800eb4e:	6910      	ldr	r0, [r2, #16]
 800eb50:	2200      	movs	r2, #0
 800eb52:	6879      	ldr	r1, [r7, #4]
 800eb54:	4798      	blx	r3
 800eb56:	4603      	mov	r3, r0
 800eb58:	76bb      	strb	r3, [r7, #26]
 800eb5a:	e001      	b.n	800eb60 <tcp_process+0x404>
 800eb5c:	23f0      	movs	r3, #240	; 0xf0
 800eb5e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800eb60:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d00a      	beq.n	800eb7e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800eb68:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800eb6c:	f113 0f0d 	cmn.w	r3, #13
 800eb70:	d002      	beq.n	800eb78 <tcp_process+0x41c>
              tcp_abort(pcb);
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f7fd fcf0 	bl	800c558 <tcp_abort>
            }
            return ERR_ABRT;
 800eb78:	f06f 030c 	mvn.w	r3, #12
 800eb7c:	e1ce      	b.n	800ef1c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800eb7e:	6878      	ldr	r0, [r7, #4]
 800eb80:	f000 fae0 	bl	800f144 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800eb84:	4b68      	ldr	r3, [pc, #416]	; (800ed28 <tcp_process+0x5cc>)
 800eb86:	881b      	ldrh	r3, [r3, #0]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d005      	beq.n	800eb98 <tcp_process+0x43c>
            recv_acked--;
 800eb8c:	4b66      	ldr	r3, [pc, #408]	; (800ed28 <tcp_process+0x5cc>)
 800eb8e:	881b      	ldrh	r3, [r3, #0]
 800eb90:	3b01      	subs	r3, #1
 800eb92:	b29a      	uxth	r2, r3
 800eb94:	4b64      	ldr	r3, [pc, #400]	; (800ed28 <tcp_process+0x5cc>)
 800eb96:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb9c:	009a      	lsls	r2, r3, #2
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eba2:	005b      	lsls	r3, r3, #1
 800eba4:	f241 111c 	movw	r1, #4380	; 0x111c
 800eba8:	428b      	cmp	r3, r1
 800ebaa:	bf38      	it	cc
 800ebac:	460b      	movcc	r3, r1
 800ebae:	429a      	cmp	r2, r3
 800ebb0:	d204      	bcs.n	800ebbc <tcp_process+0x460>
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ebb6:	009b      	lsls	r3, r3, #2
 800ebb8:	b29b      	uxth	r3, r3
 800ebba:	e00d      	b.n	800ebd8 <tcp_process+0x47c>
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ebc0:	005b      	lsls	r3, r3, #1
 800ebc2:	f241 121c 	movw	r2, #4380	; 0x111c
 800ebc6:	4293      	cmp	r3, r2
 800ebc8:	d904      	bls.n	800ebd4 <tcp_process+0x478>
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ebce:	005b      	lsls	r3, r3, #1
 800ebd0:	b29b      	uxth	r3, r3
 800ebd2:	e001      	b.n	800ebd8 <tcp_process+0x47c>
 800ebd4:	f241 131c 	movw	r3, #4380	; 0x111c
 800ebd8:	687a      	ldr	r2, [r7, #4]
 800ebda:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ebde:	4b53      	ldr	r3, [pc, #332]	; (800ed2c <tcp_process+0x5d0>)
 800ebe0:	781b      	ldrb	r3, [r3, #0]
 800ebe2:	f003 0320 	and.w	r3, r3, #32
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d037      	beq.n	800ec5a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	8b5b      	ldrh	r3, [r3, #26]
 800ebee:	f043 0302 	orr.w	r3, r3, #2
 800ebf2:	b29a      	uxth	r2, r3
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2207      	movs	r2, #7
 800ebfc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ebfe:	e02c      	b.n	800ec5a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec00:	4b40      	ldr	r3, [pc, #256]	; (800ed04 <tcp_process+0x5a8>)
 800ec02:	6819      	ldr	r1, [r3, #0]
 800ec04:	4b40      	ldr	r3, [pc, #256]	; (800ed08 <tcp_process+0x5ac>)
 800ec06:	881b      	ldrh	r3, [r3, #0]
 800ec08:	461a      	mov	r2, r3
 800ec0a:	4b40      	ldr	r3, [pc, #256]	; (800ed0c <tcp_process+0x5b0>)
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ec10:	4b3f      	ldr	r3, [pc, #252]	; (800ed10 <tcp_process+0x5b4>)
 800ec12:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec14:	885b      	ldrh	r3, [r3, #2]
 800ec16:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ec18:	4a3d      	ldr	r2, [pc, #244]	; (800ed10 <tcp_process+0x5b4>)
 800ec1a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec1c:	8812      	ldrh	r2, [r2, #0]
 800ec1e:	b292      	uxth	r2, r2
 800ec20:	9202      	str	r2, [sp, #8]
 800ec22:	9301      	str	r3, [sp, #4]
 800ec24:	4b3b      	ldr	r3, [pc, #236]	; (800ed14 <tcp_process+0x5b8>)
 800ec26:	9300      	str	r3, [sp, #0]
 800ec28:	4b3b      	ldr	r3, [pc, #236]	; (800ed18 <tcp_process+0x5bc>)
 800ec2a:	4602      	mov	r2, r0
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f003 f827 	bl	8011c80 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ec32:	e167      	b.n	800ef04 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ec34:	4b32      	ldr	r3, [pc, #200]	; (800ed00 <tcp_process+0x5a4>)
 800ec36:	781b      	ldrb	r3, [r3, #0]
 800ec38:	f003 0302 	and.w	r3, r3, #2
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	f000 8161 	beq.w	800ef04 <tcp_process+0x7a8>
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec46:	1e5a      	subs	r2, r3, #1
 800ec48:	4b30      	ldr	r3, [pc, #192]	; (800ed0c <tcp_process+0x5b0>)
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	429a      	cmp	r2, r3
 800ec4e:	f040 8159 	bne.w	800ef04 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f002 fe0c 	bl	8011870 <tcp_rexmit>
      break;
 800ec58:	e154      	b.n	800ef04 <tcp_process+0x7a8>
 800ec5a:	e153      	b.n	800ef04 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f000 fa71 	bl	800f144 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ec62:	4b32      	ldr	r3, [pc, #200]	; (800ed2c <tcp_process+0x5d0>)
 800ec64:	781b      	ldrb	r3, [r3, #0]
 800ec66:	f003 0320 	and.w	r3, r3, #32
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	f000 814c 	beq.w	800ef08 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	8b5b      	ldrh	r3, [r3, #26]
 800ec74:	f043 0302 	orr.w	r3, r3, #2
 800ec78:	b29a      	uxth	r2, r3
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	2207      	movs	r2, #7
 800ec82:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ec84:	e140      	b.n	800ef08 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ec86:	6878      	ldr	r0, [r7, #4]
 800ec88:	f000 fa5c 	bl	800f144 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ec8c:	4b27      	ldr	r3, [pc, #156]	; (800ed2c <tcp_process+0x5d0>)
 800ec8e:	781b      	ldrb	r3, [r3, #0]
 800ec90:	f003 0320 	and.w	r3, r3, #32
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d071      	beq.n	800ed7c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ec98:	4b19      	ldr	r3, [pc, #100]	; (800ed00 <tcp_process+0x5a4>)
 800ec9a:	781b      	ldrb	r3, [r3, #0]
 800ec9c:	f003 0310 	and.w	r3, r3, #16
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d060      	beq.n	800ed66 <tcp_process+0x60a>
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eca8:	4b16      	ldr	r3, [pc, #88]	; (800ed04 <tcp_process+0x5a8>)
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d15a      	bne.n	800ed66 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d156      	bne.n	800ed66 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	8b5b      	ldrh	r3, [r3, #26]
 800ecbc:	f043 0302 	orr.w	r3, r3, #2
 800ecc0:	b29a      	uxth	r2, r3
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ecc6:	6878      	ldr	r0, [r7, #4]
 800ecc8:	f7fe fdbe 	bl	800d848 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800eccc:	4b18      	ldr	r3, [pc, #96]	; (800ed30 <tcp_process+0x5d4>)
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	687a      	ldr	r2, [r7, #4]
 800ecd2:	429a      	cmp	r2, r3
 800ecd4:	d105      	bne.n	800ece2 <tcp_process+0x586>
 800ecd6:	4b16      	ldr	r3, [pc, #88]	; (800ed30 <tcp_process+0x5d4>)
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	68db      	ldr	r3, [r3, #12]
 800ecdc:	4a14      	ldr	r2, [pc, #80]	; (800ed30 <tcp_process+0x5d4>)
 800ecde:	6013      	str	r3, [r2, #0]
 800ece0:	e02e      	b.n	800ed40 <tcp_process+0x5e4>
 800ece2:	4b13      	ldr	r3, [pc, #76]	; (800ed30 <tcp_process+0x5d4>)
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	617b      	str	r3, [r7, #20]
 800ece8:	e027      	b.n	800ed3a <tcp_process+0x5de>
 800ecea:	697b      	ldr	r3, [r7, #20]
 800ecec:	68db      	ldr	r3, [r3, #12]
 800ecee:	687a      	ldr	r2, [r7, #4]
 800ecf0:	429a      	cmp	r2, r3
 800ecf2:	d11f      	bne.n	800ed34 <tcp_process+0x5d8>
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	68da      	ldr	r2, [r3, #12]
 800ecf8:	697b      	ldr	r3, [r7, #20]
 800ecfa:	60da      	str	r2, [r3, #12]
 800ecfc:	e020      	b.n	800ed40 <tcp_process+0x5e4>
 800ecfe:	bf00      	nop
 800ed00:	24000120 	.word	0x24000120
 800ed04:	24000118 	.word	0x24000118
 800ed08:	2400011e 	.word	0x2400011e
 800ed0c:	24000114 	.word	0x24000114
 800ed10:	24000104 	.word	0x24000104
 800ed14:	24000724 	.word	0x24000724
 800ed18:	24000728 	.word	0x24000728
 800ed1c:	08017138 	.word	0x08017138
 800ed20:	080173d8 	.word	0x080173d8
 800ed24:	08017184 	.word	0x08017184
 800ed28:	2400011c 	.word	0x2400011c
 800ed2c:	24000121 	.word	0x24000121
 800ed30:	24003604 	.word	0x24003604
 800ed34:	697b      	ldr	r3, [r7, #20]
 800ed36:	68db      	ldr	r3, [r3, #12]
 800ed38:	617b      	str	r3, [r7, #20]
 800ed3a:	697b      	ldr	r3, [r7, #20]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d1d4      	bne.n	800ecea <tcp_process+0x58e>
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2200      	movs	r2, #0
 800ed44:	60da      	str	r2, [r3, #12]
 800ed46:	4b77      	ldr	r3, [pc, #476]	; (800ef24 <tcp_process+0x7c8>)
 800ed48:	2201      	movs	r2, #1
 800ed4a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	220a      	movs	r2, #10
 800ed50:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ed52:	4b75      	ldr	r3, [pc, #468]	; (800ef28 <tcp_process+0x7cc>)
 800ed54:	681a      	ldr	r2, [r3, #0]
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	60da      	str	r2, [r3, #12]
 800ed5a:	4a73      	ldr	r2, [pc, #460]	; (800ef28 <tcp_process+0x7cc>)
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	6013      	str	r3, [r2, #0]
 800ed60:	f003 f950 	bl	8012004 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ed64:	e0d2      	b.n	800ef0c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	8b5b      	ldrh	r3, [r3, #26]
 800ed6a:	f043 0302 	orr.w	r3, r3, #2
 800ed6e:	b29a      	uxth	r2, r3
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	2208      	movs	r2, #8
 800ed78:	751a      	strb	r2, [r3, #20]
      break;
 800ed7a:	e0c7      	b.n	800ef0c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ed7c:	4b6b      	ldr	r3, [pc, #428]	; (800ef2c <tcp_process+0x7d0>)
 800ed7e:	781b      	ldrb	r3, [r3, #0]
 800ed80:	f003 0310 	and.w	r3, r3, #16
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	f000 80c1 	beq.w	800ef0c <tcp_process+0x7b0>
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ed8e:	4b68      	ldr	r3, [pc, #416]	; (800ef30 <tcp_process+0x7d4>)
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	429a      	cmp	r2, r3
 800ed94:	f040 80ba 	bne.w	800ef0c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	f040 80b5 	bne.w	800ef0c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2206      	movs	r2, #6
 800eda6:	751a      	strb	r2, [r3, #20]
      break;
 800eda8:	e0b0      	b.n	800ef0c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800edaa:	6878      	ldr	r0, [r7, #4]
 800edac:	f000 f9ca 	bl	800f144 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800edb0:	4b60      	ldr	r3, [pc, #384]	; (800ef34 <tcp_process+0x7d8>)
 800edb2:	781b      	ldrb	r3, [r3, #0]
 800edb4:	f003 0320 	and.w	r3, r3, #32
 800edb8:	2b00      	cmp	r3, #0
 800edba:	f000 80a9 	beq.w	800ef10 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	8b5b      	ldrh	r3, [r3, #26]
 800edc2:	f043 0302 	orr.w	r3, r3, #2
 800edc6:	b29a      	uxth	r2, r3
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f7fe fd3b 	bl	800d848 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800edd2:	4b59      	ldr	r3, [pc, #356]	; (800ef38 <tcp_process+0x7dc>)
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	687a      	ldr	r2, [r7, #4]
 800edd8:	429a      	cmp	r2, r3
 800edda:	d105      	bne.n	800ede8 <tcp_process+0x68c>
 800eddc:	4b56      	ldr	r3, [pc, #344]	; (800ef38 <tcp_process+0x7dc>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	68db      	ldr	r3, [r3, #12]
 800ede2:	4a55      	ldr	r2, [pc, #340]	; (800ef38 <tcp_process+0x7dc>)
 800ede4:	6013      	str	r3, [r2, #0]
 800ede6:	e013      	b.n	800ee10 <tcp_process+0x6b4>
 800ede8:	4b53      	ldr	r3, [pc, #332]	; (800ef38 <tcp_process+0x7dc>)
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	613b      	str	r3, [r7, #16]
 800edee:	e00c      	b.n	800ee0a <tcp_process+0x6ae>
 800edf0:	693b      	ldr	r3, [r7, #16]
 800edf2:	68db      	ldr	r3, [r3, #12]
 800edf4:	687a      	ldr	r2, [r7, #4]
 800edf6:	429a      	cmp	r2, r3
 800edf8:	d104      	bne.n	800ee04 <tcp_process+0x6a8>
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	68da      	ldr	r2, [r3, #12]
 800edfe:	693b      	ldr	r3, [r7, #16]
 800ee00:	60da      	str	r2, [r3, #12]
 800ee02:	e005      	b.n	800ee10 <tcp_process+0x6b4>
 800ee04:	693b      	ldr	r3, [r7, #16]
 800ee06:	68db      	ldr	r3, [r3, #12]
 800ee08:	613b      	str	r3, [r7, #16]
 800ee0a:	693b      	ldr	r3, [r7, #16]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d1ef      	bne.n	800edf0 <tcp_process+0x694>
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2200      	movs	r2, #0
 800ee14:	60da      	str	r2, [r3, #12]
 800ee16:	4b43      	ldr	r3, [pc, #268]	; (800ef24 <tcp_process+0x7c8>)
 800ee18:	2201      	movs	r2, #1
 800ee1a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	220a      	movs	r2, #10
 800ee20:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ee22:	4b41      	ldr	r3, [pc, #260]	; (800ef28 <tcp_process+0x7cc>)
 800ee24:	681a      	ldr	r2, [r3, #0]
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	60da      	str	r2, [r3, #12]
 800ee2a:	4a3f      	ldr	r2, [pc, #252]	; (800ef28 <tcp_process+0x7cc>)
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	6013      	str	r3, [r2, #0]
 800ee30:	f003 f8e8 	bl	8012004 <tcp_timer_needed>
      }
      break;
 800ee34:	e06c      	b.n	800ef10 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ee36:	6878      	ldr	r0, [r7, #4]
 800ee38:	f000 f984 	bl	800f144 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ee3c:	4b3b      	ldr	r3, [pc, #236]	; (800ef2c <tcp_process+0x7d0>)
 800ee3e:	781b      	ldrb	r3, [r3, #0]
 800ee40:	f003 0310 	and.w	r3, r3, #16
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d065      	beq.n	800ef14 <tcp_process+0x7b8>
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ee4c:	4b38      	ldr	r3, [pc, #224]	; (800ef30 <tcp_process+0x7d4>)
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	429a      	cmp	r2, r3
 800ee52:	d15f      	bne.n	800ef14 <tcp_process+0x7b8>
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d15b      	bne.n	800ef14 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ee5c:	6878      	ldr	r0, [r7, #4]
 800ee5e:	f7fe fcf3 	bl	800d848 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ee62:	4b35      	ldr	r3, [pc, #212]	; (800ef38 <tcp_process+0x7dc>)
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	687a      	ldr	r2, [r7, #4]
 800ee68:	429a      	cmp	r2, r3
 800ee6a:	d105      	bne.n	800ee78 <tcp_process+0x71c>
 800ee6c:	4b32      	ldr	r3, [pc, #200]	; (800ef38 <tcp_process+0x7dc>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	68db      	ldr	r3, [r3, #12]
 800ee72:	4a31      	ldr	r2, [pc, #196]	; (800ef38 <tcp_process+0x7dc>)
 800ee74:	6013      	str	r3, [r2, #0]
 800ee76:	e013      	b.n	800eea0 <tcp_process+0x744>
 800ee78:	4b2f      	ldr	r3, [pc, #188]	; (800ef38 <tcp_process+0x7dc>)
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	60fb      	str	r3, [r7, #12]
 800ee7e:	e00c      	b.n	800ee9a <tcp_process+0x73e>
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	68db      	ldr	r3, [r3, #12]
 800ee84:	687a      	ldr	r2, [r7, #4]
 800ee86:	429a      	cmp	r2, r3
 800ee88:	d104      	bne.n	800ee94 <tcp_process+0x738>
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	68da      	ldr	r2, [r3, #12]
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	60da      	str	r2, [r3, #12]
 800ee92:	e005      	b.n	800eea0 <tcp_process+0x744>
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	68db      	ldr	r3, [r3, #12]
 800ee98:	60fb      	str	r3, [r7, #12]
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d1ef      	bne.n	800ee80 <tcp_process+0x724>
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2200      	movs	r2, #0
 800eea4:	60da      	str	r2, [r3, #12]
 800eea6:	4b1f      	ldr	r3, [pc, #124]	; (800ef24 <tcp_process+0x7c8>)
 800eea8:	2201      	movs	r2, #1
 800eeaa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	220a      	movs	r2, #10
 800eeb0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800eeb2:	4b1d      	ldr	r3, [pc, #116]	; (800ef28 <tcp_process+0x7cc>)
 800eeb4:	681a      	ldr	r2, [r3, #0]
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	60da      	str	r2, [r3, #12]
 800eeba:	4a1b      	ldr	r2, [pc, #108]	; (800ef28 <tcp_process+0x7cc>)
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	6013      	str	r3, [r2, #0]
 800eec0:	f003 f8a0 	bl	8012004 <tcp_timer_needed>
      }
      break;
 800eec4:	e026      	b.n	800ef14 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f000 f93c 	bl	800f144 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800eecc:	4b17      	ldr	r3, [pc, #92]	; (800ef2c <tcp_process+0x7d0>)
 800eece:	781b      	ldrb	r3, [r3, #0]
 800eed0:	f003 0310 	and.w	r3, r3, #16
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d01f      	beq.n	800ef18 <tcp_process+0x7bc>
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eedc:	4b14      	ldr	r3, [pc, #80]	; (800ef30 <tcp_process+0x7d4>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	429a      	cmp	r2, r3
 800eee2:	d119      	bne.n	800ef18 <tcp_process+0x7bc>
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d115      	bne.n	800ef18 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800eeec:	4b11      	ldr	r3, [pc, #68]	; (800ef34 <tcp_process+0x7d8>)
 800eeee:	781b      	ldrb	r3, [r3, #0]
 800eef0:	f043 0310 	orr.w	r3, r3, #16
 800eef4:	b2da      	uxtb	r2, r3
 800eef6:	4b0f      	ldr	r3, [pc, #60]	; (800ef34 <tcp_process+0x7d8>)
 800eef8:	701a      	strb	r2, [r3, #0]
      }
      break;
 800eefa:	e00d      	b.n	800ef18 <tcp_process+0x7bc>
    default:
      break;
 800eefc:	bf00      	nop
 800eefe:	e00c      	b.n	800ef1a <tcp_process+0x7be>
      break;
 800ef00:	bf00      	nop
 800ef02:	e00a      	b.n	800ef1a <tcp_process+0x7be>
      break;
 800ef04:	bf00      	nop
 800ef06:	e008      	b.n	800ef1a <tcp_process+0x7be>
      break;
 800ef08:	bf00      	nop
 800ef0a:	e006      	b.n	800ef1a <tcp_process+0x7be>
      break;
 800ef0c:	bf00      	nop
 800ef0e:	e004      	b.n	800ef1a <tcp_process+0x7be>
      break;
 800ef10:	bf00      	nop
 800ef12:	e002      	b.n	800ef1a <tcp_process+0x7be>
      break;
 800ef14:	bf00      	nop
 800ef16:	e000      	b.n	800ef1a <tcp_process+0x7be>
      break;
 800ef18:	bf00      	nop
  }
  return ERR_OK;
 800ef1a:	2300      	movs	r3, #0
}
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	3724      	adds	r7, #36	; 0x24
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd90      	pop	{r4, r7, pc}
 800ef24:	24003600 	.word	0x24003600
 800ef28:	24003614 	.word	0x24003614
 800ef2c:	24000120 	.word	0x24000120
 800ef30:	24000118 	.word	0x24000118
 800ef34:	24000121 	.word	0x24000121
 800ef38:	24003604 	.word	0x24003604

0800ef3c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ef3c:	b590      	push	{r4, r7, lr}
 800ef3e:	b085      	sub	sp, #20
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
 800ef44:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d106      	bne.n	800ef5a <tcp_oos_insert_segment+0x1e>
 800ef4c:	4b3b      	ldr	r3, [pc, #236]	; (800f03c <tcp_oos_insert_segment+0x100>)
 800ef4e:	f240 421f 	movw	r2, #1055	; 0x41f
 800ef52:	493b      	ldr	r1, [pc, #236]	; (800f040 <tcp_oos_insert_segment+0x104>)
 800ef54:	483b      	ldr	r0, [pc, #236]	; (800f044 <tcp_oos_insert_segment+0x108>)
 800ef56:	f005 ff19 	bl	8014d8c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	68db      	ldr	r3, [r3, #12]
 800ef5e:	899b      	ldrh	r3, [r3, #12]
 800ef60:	b29b      	uxth	r3, r3
 800ef62:	4618      	mov	r0, r3
 800ef64:	f7fb f94a 	bl	800a1fc <lwip_htons>
 800ef68:	4603      	mov	r3, r0
 800ef6a:	b2db      	uxtb	r3, r3
 800ef6c:	f003 0301 	and.w	r3, r3, #1
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d028      	beq.n	800efc6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ef74:	6838      	ldr	r0, [r7, #0]
 800ef76:	f7fe f97f 	bl	800d278 <tcp_segs_free>
    next = NULL;
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	603b      	str	r3, [r7, #0]
 800ef7e:	e056      	b.n	800f02e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	68db      	ldr	r3, [r3, #12]
 800ef84:	899b      	ldrh	r3, [r3, #12]
 800ef86:	b29b      	uxth	r3, r3
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f7fb f937 	bl	800a1fc <lwip_htons>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	b2db      	uxtb	r3, r3
 800ef92:	f003 0301 	and.w	r3, r3, #1
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d00d      	beq.n	800efb6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	68db      	ldr	r3, [r3, #12]
 800ef9e:	899b      	ldrh	r3, [r3, #12]
 800efa0:	b29c      	uxth	r4, r3
 800efa2:	2001      	movs	r0, #1
 800efa4:	f7fb f92a 	bl	800a1fc <lwip_htons>
 800efa8:	4603      	mov	r3, r0
 800efaa:	461a      	mov	r2, r3
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	68db      	ldr	r3, [r3, #12]
 800efb0:	4322      	orrs	r2, r4
 800efb2:	b292      	uxth	r2, r2
 800efb4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800efb6:	683b      	ldr	r3, [r7, #0]
 800efb8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800efc0:	68f8      	ldr	r0, [r7, #12]
 800efc2:	f7fe f96e 	bl	800d2a2 <tcp_seg_free>
    while (next &&
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d00e      	beq.n	800efea <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	891b      	ldrh	r3, [r3, #8]
 800efd0:	461a      	mov	r2, r3
 800efd2:	4b1d      	ldr	r3, [pc, #116]	; (800f048 <tcp_oos_insert_segment+0x10c>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	441a      	add	r2, r3
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	68db      	ldr	r3, [r3, #12]
 800efdc:	685b      	ldr	r3, [r3, #4]
 800efde:	6839      	ldr	r1, [r7, #0]
 800efe0:	8909      	ldrh	r1, [r1, #8]
 800efe2:	440b      	add	r3, r1
 800efe4:	1ad3      	subs	r3, r2, r3
    while (next &&
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	daca      	bge.n	800ef80 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800efea:	683b      	ldr	r3, [r7, #0]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d01e      	beq.n	800f02e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	891b      	ldrh	r3, [r3, #8]
 800eff4:	461a      	mov	r2, r3
 800eff6:	4b14      	ldr	r3, [pc, #80]	; (800f048 <tcp_oos_insert_segment+0x10c>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	441a      	add	r2, r3
 800effc:	683b      	ldr	r3, [r7, #0]
 800effe:	68db      	ldr	r3, [r3, #12]
 800f000:	685b      	ldr	r3, [r3, #4]
 800f002:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f004:	2b00      	cmp	r3, #0
 800f006:	dd12      	ble.n	800f02e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	68db      	ldr	r3, [r3, #12]
 800f00c:	685b      	ldr	r3, [r3, #4]
 800f00e:	b29a      	uxth	r2, r3
 800f010:	4b0d      	ldr	r3, [pc, #52]	; (800f048 <tcp_oos_insert_segment+0x10c>)
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	b29b      	uxth	r3, r3
 800f016:	1ad3      	subs	r3, r2, r3
 800f018:	b29a      	uxth	r2, r3
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	685a      	ldr	r2, [r3, #4]
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	891b      	ldrh	r3, [r3, #8]
 800f026:	4619      	mov	r1, r3
 800f028:	4610      	mov	r0, r2
 800f02a:	f7fc fb77 	bl	800b71c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	683a      	ldr	r2, [r7, #0]
 800f032:	601a      	str	r2, [r3, #0]
}
 800f034:	bf00      	nop
 800f036:	3714      	adds	r7, #20
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd90      	pop	{r4, r7, pc}
 800f03c:	08017138 	.word	0x08017138
 800f040:	080173f8 	.word	0x080173f8
 800f044:	08017184 	.word	0x08017184
 800f048:	24000114 	.word	0x24000114

0800f04c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f04c:	b5b0      	push	{r4, r5, r7, lr}
 800f04e:	b086      	sub	sp, #24
 800f050:	af00      	add	r7, sp, #0
 800f052:	60f8      	str	r0, [r7, #12]
 800f054:	60b9      	str	r1, [r7, #8]
 800f056:	607a      	str	r2, [r7, #4]
 800f058:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f05a:	e03e      	b.n	800f0da <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	685b      	ldr	r3, [r3, #4]
 800f06a:	4618      	mov	r0, r3
 800f06c:	f7fc fd64 	bl	800bb38 <pbuf_clen>
 800f070:	4603      	mov	r3, r0
 800f072:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f07a:	8a7a      	ldrh	r2, [r7, #18]
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d906      	bls.n	800f08e <tcp_free_acked_segments+0x42>
 800f080:	4b2a      	ldr	r3, [pc, #168]	; (800f12c <tcp_free_acked_segments+0xe0>)
 800f082:	f240 4257 	movw	r2, #1111	; 0x457
 800f086:	492a      	ldr	r1, [pc, #168]	; (800f130 <tcp_free_acked_segments+0xe4>)
 800f088:	482a      	ldr	r0, [pc, #168]	; (800f134 <tcp_free_acked_segments+0xe8>)
 800f08a:	f005 fe7f 	bl	8014d8c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f094:	8a7b      	ldrh	r3, [r7, #18]
 800f096:	1ad3      	subs	r3, r2, r3
 800f098:	b29a      	uxth	r2, r3
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f0a0:	697b      	ldr	r3, [r7, #20]
 800f0a2:	891a      	ldrh	r2, [r3, #8]
 800f0a4:	4b24      	ldr	r3, [pc, #144]	; (800f138 <tcp_free_acked_segments+0xec>)
 800f0a6:	881b      	ldrh	r3, [r3, #0]
 800f0a8:	4413      	add	r3, r2
 800f0aa:	b29a      	uxth	r2, r3
 800f0ac:	4b22      	ldr	r3, [pc, #136]	; (800f138 <tcp_free_acked_segments+0xec>)
 800f0ae:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f0b0:	6978      	ldr	r0, [r7, #20]
 800f0b2:	f7fe f8f6 	bl	800d2a2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d00c      	beq.n	800f0da <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f0c0:	68bb      	ldr	r3, [r7, #8]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d109      	bne.n	800f0da <tcp_free_acked_segments+0x8e>
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d106      	bne.n	800f0da <tcp_free_acked_segments+0x8e>
 800f0cc:	4b17      	ldr	r3, [pc, #92]	; (800f12c <tcp_free_acked_segments+0xe0>)
 800f0ce:	f240 4261 	movw	r2, #1121	; 0x461
 800f0d2:	491a      	ldr	r1, [pc, #104]	; (800f13c <tcp_free_acked_segments+0xf0>)
 800f0d4:	4817      	ldr	r0, [pc, #92]	; (800f134 <tcp_free_acked_segments+0xe8>)
 800f0d6:	f005 fe59 	bl	8014d8c <iprintf>
  while (seg_list != NULL &&
 800f0da:	68bb      	ldr	r3, [r7, #8]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d020      	beq.n	800f122 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	68db      	ldr	r3, [r3, #12]
 800f0e4:	685b      	ldr	r3, [r3, #4]
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	f7fb f89d 	bl	800a226 <lwip_htonl>
 800f0ec:	4604      	mov	r4, r0
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	891b      	ldrh	r3, [r3, #8]
 800f0f2:	461d      	mov	r5, r3
 800f0f4:	68bb      	ldr	r3, [r7, #8]
 800f0f6:	68db      	ldr	r3, [r3, #12]
 800f0f8:	899b      	ldrh	r3, [r3, #12]
 800f0fa:	b29b      	uxth	r3, r3
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f7fb f87d 	bl	800a1fc <lwip_htons>
 800f102:	4603      	mov	r3, r0
 800f104:	b2db      	uxtb	r3, r3
 800f106:	f003 0303 	and.w	r3, r3, #3
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d001      	beq.n	800f112 <tcp_free_acked_segments+0xc6>
 800f10e:	2301      	movs	r3, #1
 800f110:	e000      	b.n	800f114 <tcp_free_acked_segments+0xc8>
 800f112:	2300      	movs	r3, #0
 800f114:	442b      	add	r3, r5
 800f116:	18e2      	adds	r2, r4, r3
 800f118:	4b09      	ldr	r3, [pc, #36]	; (800f140 <tcp_free_acked_segments+0xf4>)
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f11e:	2b00      	cmp	r3, #0
 800f120:	dd9c      	ble.n	800f05c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f122:	68bb      	ldr	r3, [r7, #8]
}
 800f124:	4618      	mov	r0, r3
 800f126:	3718      	adds	r7, #24
 800f128:	46bd      	mov	sp, r7
 800f12a:	bdb0      	pop	{r4, r5, r7, pc}
 800f12c:	08017138 	.word	0x08017138
 800f130:	08017420 	.word	0x08017420
 800f134:	08017184 	.word	0x08017184
 800f138:	2400011c 	.word	0x2400011c
 800f13c:	08017448 	.word	0x08017448
 800f140:	24000118 	.word	0x24000118

0800f144 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f144:	b5b0      	push	{r4, r5, r7, lr}
 800f146:	b094      	sub	sp, #80	; 0x50
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f14c:	2300      	movs	r3, #0
 800f14e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d106      	bne.n	800f164 <tcp_receive+0x20>
 800f156:	4ba6      	ldr	r3, [pc, #664]	; (800f3f0 <tcp_receive+0x2ac>)
 800f158:	f240 427b 	movw	r2, #1147	; 0x47b
 800f15c:	49a5      	ldr	r1, [pc, #660]	; (800f3f4 <tcp_receive+0x2b0>)
 800f15e:	48a6      	ldr	r0, [pc, #664]	; (800f3f8 <tcp_receive+0x2b4>)
 800f160:	f005 fe14 	bl	8014d8c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	7d1b      	ldrb	r3, [r3, #20]
 800f168:	2b03      	cmp	r3, #3
 800f16a:	d806      	bhi.n	800f17a <tcp_receive+0x36>
 800f16c:	4ba0      	ldr	r3, [pc, #640]	; (800f3f0 <tcp_receive+0x2ac>)
 800f16e:	f240 427c 	movw	r2, #1148	; 0x47c
 800f172:	49a2      	ldr	r1, [pc, #648]	; (800f3fc <tcp_receive+0x2b8>)
 800f174:	48a0      	ldr	r0, [pc, #640]	; (800f3f8 <tcp_receive+0x2b4>)
 800f176:	f005 fe09 	bl	8014d8c <iprintf>

  if (flags & TCP_ACK) {
 800f17a:	4ba1      	ldr	r3, [pc, #644]	; (800f400 <tcp_receive+0x2bc>)
 800f17c:	781b      	ldrb	r3, [r3, #0]
 800f17e:	f003 0310 	and.w	r3, r3, #16
 800f182:	2b00      	cmp	r3, #0
 800f184:	f000 8263 	beq.w	800f64e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f18e:	461a      	mov	r2, r3
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f194:	4413      	add	r3, r2
 800f196:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f19c:	4b99      	ldr	r3, [pc, #612]	; (800f404 <tcp_receive+0x2c0>)
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	1ad3      	subs	r3, r2, r3
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	db1b      	blt.n	800f1de <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f1aa:	4b96      	ldr	r3, [pc, #600]	; (800f404 <tcp_receive+0x2c0>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f1ae:	429a      	cmp	r2, r3
 800f1b0:	d106      	bne.n	800f1c0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f1b6:	4b94      	ldr	r3, [pc, #592]	; (800f408 <tcp_receive+0x2c4>)
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	1ad3      	subs	r3, r2, r3
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	db0e      	blt.n	800f1de <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f1c4:	4b90      	ldr	r3, [pc, #576]	; (800f408 <tcp_receive+0x2c4>)
 800f1c6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f1c8:	429a      	cmp	r2, r3
 800f1ca:	d125      	bne.n	800f218 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f1cc:	4b8f      	ldr	r3, [pc, #572]	; (800f40c <tcp_receive+0x2c8>)
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	89db      	ldrh	r3, [r3, #14]
 800f1d2:	b29a      	uxth	r2, r3
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f1da:	429a      	cmp	r2, r3
 800f1dc:	d91c      	bls.n	800f218 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f1de:	4b8b      	ldr	r3, [pc, #556]	; (800f40c <tcp_receive+0x2c8>)
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	89db      	ldrh	r3, [r3, #14]
 800f1e4:	b29a      	uxth	r2, r3
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f1f8:	429a      	cmp	r2, r3
 800f1fa:	d205      	bcs.n	800f208 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800f208:	4b7e      	ldr	r3, [pc, #504]	; (800f404 <tcp_receive+0x2c0>)
 800f20a:	681a      	ldr	r2, [r3, #0]
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800f210:	4b7d      	ldr	r3, [pc, #500]	; (800f408 <tcp_receive+0x2c4>)
 800f212:	681a      	ldr	r2, [r3, #0]
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f218:	4b7b      	ldr	r3, [pc, #492]	; (800f408 <tcp_receive+0x2c4>)
 800f21a:	681a      	ldr	r2, [r3, #0]
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f220:	1ad3      	subs	r3, r2, r3
 800f222:	2b00      	cmp	r3, #0
 800f224:	dc58      	bgt.n	800f2d8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f226:	4b7a      	ldr	r3, [pc, #488]	; (800f410 <tcp_receive+0x2cc>)
 800f228:	881b      	ldrh	r3, [r3, #0]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d14b      	bne.n	800f2c6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f232:	687a      	ldr	r2, [r7, #4]
 800f234:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f238:	4413      	add	r3, r2
 800f23a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f23c:	429a      	cmp	r2, r3
 800f23e:	d142      	bne.n	800f2c6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f246:	2b00      	cmp	r3, #0
 800f248:	db3d      	blt.n	800f2c6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f24e:	4b6e      	ldr	r3, [pc, #440]	; (800f408 <tcp_receive+0x2c4>)
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	429a      	cmp	r2, r3
 800f254:	d137      	bne.n	800f2c6 <tcp_receive+0x182>
              found_dupack = 1;
 800f256:	2301      	movs	r3, #1
 800f258:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f260:	2bff      	cmp	r3, #255	; 0xff
 800f262:	d007      	beq.n	800f274 <tcp_receive+0x130>
                ++pcb->dupacks;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f26a:	3301      	adds	r3, #1
 800f26c:	b2da      	uxtb	r2, r3
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f27a:	2b03      	cmp	r3, #3
 800f27c:	d91b      	bls.n	800f2b6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f288:	4413      	add	r3, r2
 800f28a:	b29a      	uxth	r2, r3
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f292:	429a      	cmp	r2, r3
 800f294:	d30a      	bcc.n	800f2ac <tcp_receive+0x168>
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f2a0:	4413      	add	r3, r2
 800f2a2:	b29a      	uxth	r2, r3
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f2aa:	e004      	b.n	800f2b6 <tcp_receive+0x172>
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f2b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f2bc:	2b02      	cmp	r3, #2
 800f2be:	d902      	bls.n	800f2c6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	f002 fb41 	bl	8011948 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f2c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	f040 8160 	bne.w	800f58e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f2d6:	e15a      	b.n	800f58e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f2d8:	4b4b      	ldr	r3, [pc, #300]	; (800f408 <tcp_receive+0x2c4>)
 800f2da:	681a      	ldr	r2, [r3, #0]
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2e0:	1ad3      	subs	r3, r2, r3
 800f2e2:	3b01      	subs	r3, #1
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	f2c0 814d 	blt.w	800f584 <tcp_receive+0x440>
 800f2ea:	4b47      	ldr	r3, [pc, #284]	; (800f408 <tcp_receive+0x2c4>)
 800f2ec:	681a      	ldr	r2, [r3, #0]
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f2f2:	1ad3      	subs	r3, r2, r3
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	f300 8145 	bgt.w	800f584 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	8b5b      	ldrh	r3, [r3, #26]
 800f2fe:	f003 0304 	and.w	r3, r3, #4
 800f302:	2b00      	cmp	r3, #0
 800f304:	d010      	beq.n	800f328 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	8b5b      	ldrh	r3, [r3, #26]
 800f30a:	f023 0304 	bic.w	r3, r3, #4
 800f30e:	b29a      	uxth	r2, r3
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2200      	movs	r2, #0
 800f324:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2200      	movs	r2, #0
 800f32c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f336:	10db      	asrs	r3, r3, #3
 800f338:	b21b      	sxth	r3, r3
 800f33a:	b29a      	uxth	r2, r3
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f342:	b29b      	uxth	r3, r3
 800f344:	4413      	add	r3, r2
 800f346:	b29b      	uxth	r3, r3
 800f348:	b21a      	sxth	r2, r3
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f350:	4b2d      	ldr	r3, [pc, #180]	; (800f408 <tcp_receive+0x2c4>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	b29a      	uxth	r2, r3
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f35a:	b29b      	uxth	r3, r3
 800f35c:	1ad3      	subs	r3, r2, r3
 800f35e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	2200      	movs	r2, #0
 800f364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f368:	4b27      	ldr	r3, [pc, #156]	; (800f408 <tcp_receive+0x2c4>)
 800f36a:	681a      	ldr	r2, [r3, #0]
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	7d1b      	ldrb	r3, [r3, #20]
 800f374:	2b03      	cmp	r3, #3
 800f376:	f240 8096 	bls.w	800f4a6 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f386:	429a      	cmp	r2, r3
 800f388:	d244      	bcs.n	800f414 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	8b5b      	ldrh	r3, [r3, #26]
 800f38e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f392:	2b00      	cmp	r3, #0
 800f394:	d001      	beq.n	800f39a <tcp_receive+0x256>
 800f396:	2301      	movs	r3, #1
 800f398:	e000      	b.n	800f39c <tcp_receive+0x258>
 800f39a:	2302      	movs	r3, #2
 800f39c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f3a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f3a4:	b29a      	uxth	r2, r3
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3aa:	fb12 f303 	smulbb	r3, r2, r3
 800f3ae:	b29b      	uxth	r3, r3
 800f3b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f3b2:	4293      	cmp	r3, r2
 800f3b4:	bf28      	it	cs
 800f3b6:	4613      	movcs	r3, r2
 800f3b8:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f3c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f3c2:	4413      	add	r3, r2
 800f3c4:	b29a      	uxth	r2, r3
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f3cc:	429a      	cmp	r2, r3
 800f3ce:	d309      	bcc.n	800f3e4 <tcp_receive+0x2a0>
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f3d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f3d8:	4413      	add	r3, r2
 800f3da:	b29a      	uxth	r2, r3
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f3e2:	e060      	b.n	800f4a6 <tcp_receive+0x362>
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f3ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f3ee:	e05a      	b.n	800f4a6 <tcp_receive+0x362>
 800f3f0:	08017138 	.word	0x08017138
 800f3f4:	08017468 	.word	0x08017468
 800f3f8:	08017184 	.word	0x08017184
 800f3fc:	08017484 	.word	0x08017484
 800f400:	24000120 	.word	0x24000120
 800f404:	24000114 	.word	0x24000114
 800f408:	24000118 	.word	0x24000118
 800f40c:	24000104 	.word	0x24000104
 800f410:	2400011e 	.word	0x2400011e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f41a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f41c:	4413      	add	r3, r2
 800f41e:	b29a      	uxth	r2, r3
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f426:	429a      	cmp	r2, r3
 800f428:	d309      	bcc.n	800f43e <tcp_receive+0x2fa>
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f430:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f432:	4413      	add	r3, r2
 800f434:	b29a      	uxth	r2, r3
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f43c:	e004      	b.n	800f448 <tcp_receive+0x304>
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f444:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f454:	429a      	cmp	r2, r3
 800f456:	d326      	bcc.n	800f4a6 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f464:	1ad3      	subs	r3, r2, r3
 800f466:	b29a      	uxth	r2, r3
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f478:	4413      	add	r3, r2
 800f47a:	b29a      	uxth	r2, r3
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f482:	429a      	cmp	r2, r3
 800f484:	d30a      	bcc.n	800f49c <tcp_receive+0x358>
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f490:	4413      	add	r3, r2
 800f492:	b29a      	uxth	r2, r3
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f49a:	e004      	b.n	800f4a6 <tcp_receive+0x362>
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f4a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4ae:	4a98      	ldr	r2, [pc, #608]	; (800f710 <tcp_receive+0x5cc>)
 800f4b0:	6878      	ldr	r0, [r7, #4]
 800f4b2:	f7ff fdcb 	bl	800f04c <tcp_free_acked_segments>
 800f4b6:	4602      	mov	r2, r0
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4c4:	4a93      	ldr	r2, [pc, #588]	; (800f714 <tcp_receive+0x5d0>)
 800f4c6:	6878      	ldr	r0, [r7, #4]
 800f4c8:	f7ff fdc0 	bl	800f04c <tcp_free_acked_segments>
 800f4cc:	4602      	mov	r2, r0
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d104      	bne.n	800f4e4 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f4e0:	861a      	strh	r2, [r3, #48]	; 0x30
 800f4e2:	e002      	b.n	800f4ea <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d103      	bne.n	800f500 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f506:	4b84      	ldr	r3, [pc, #528]	; (800f718 <tcp_receive+0x5d4>)
 800f508:	881b      	ldrh	r3, [r3, #0]
 800f50a:	4413      	add	r3, r2
 800f50c:	b29a      	uxth	r2, r3
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	8b5b      	ldrh	r3, [r3, #26]
 800f518:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d035      	beq.n	800f58c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f524:	2b00      	cmp	r3, #0
 800f526:	d118      	bne.n	800f55a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d00c      	beq.n	800f54a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f538:	68db      	ldr	r3, [r3, #12]
 800f53a:	685b      	ldr	r3, [r3, #4]
 800f53c:	4618      	mov	r0, r3
 800f53e:	f7fa fe72 	bl	800a226 <lwip_htonl>
 800f542:	4603      	mov	r3, r0
 800f544:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f546:	2b00      	cmp	r3, #0
 800f548:	dc20      	bgt.n	800f58c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	8b5b      	ldrh	r3, [r3, #26]
 800f54e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f552:	b29a      	uxth	r2, r3
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f558:	e018      	b.n	800f58c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f562:	68db      	ldr	r3, [r3, #12]
 800f564:	685b      	ldr	r3, [r3, #4]
 800f566:	4618      	mov	r0, r3
 800f568:	f7fa fe5d 	bl	800a226 <lwip_htonl>
 800f56c:	4603      	mov	r3, r0
 800f56e:	1ae3      	subs	r3, r4, r3
 800f570:	2b00      	cmp	r3, #0
 800f572:	dc0b      	bgt.n	800f58c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	8b5b      	ldrh	r3, [r3, #26]
 800f578:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f57c:	b29a      	uxth	r2, r3
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f582:	e003      	b.n	800f58c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f584:	6878      	ldr	r0, [r7, #4]
 800f586:	f002 fbcd 	bl	8011d24 <tcp_send_empty_ack>
 800f58a:	e000      	b.n	800f58e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f58c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f592:	2b00      	cmp	r3, #0
 800f594:	d05b      	beq.n	800f64e <tcp_receive+0x50a>
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f59a:	4b60      	ldr	r3, [pc, #384]	; (800f71c <tcp_receive+0x5d8>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	1ad3      	subs	r3, r2, r3
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	da54      	bge.n	800f64e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f5a4:	4b5e      	ldr	r3, [pc, #376]	; (800f720 <tcp_receive+0x5dc>)
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	b29a      	uxth	r2, r3
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5ae:	b29b      	uxth	r3, r3
 800f5b0:	1ad3      	subs	r3, r2, r3
 800f5b2:	b29b      	uxth	r3, r3
 800f5b4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f5b8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f5c2:	10db      	asrs	r3, r3, #3
 800f5c4:	b21b      	sxth	r3, r3
 800f5c6:	b29b      	uxth	r3, r3
 800f5c8:	1ad3      	subs	r3, r2, r3
 800f5ca:	b29b      	uxth	r3, r3
 800f5cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f5d6:	b29a      	uxth	r2, r3
 800f5d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f5dc:	4413      	add	r3, r2
 800f5de:	b29b      	uxth	r3, r3
 800f5e0:	b21a      	sxth	r2, r3
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f5e6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	da05      	bge.n	800f5fa <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800f5ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f5f2:	425b      	negs	r3, r3
 800f5f4:	b29b      	uxth	r3, r3
 800f5f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f5fa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f604:	109b      	asrs	r3, r3, #2
 800f606:	b21b      	sxth	r3, r3
 800f608:	b29b      	uxth	r3, r3
 800f60a:	1ad3      	subs	r3, r2, r3
 800f60c:	b29b      	uxth	r3, r3
 800f60e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f618:	b29a      	uxth	r2, r3
 800f61a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f61e:	4413      	add	r3, r2
 800f620:	b29b      	uxth	r3, r3
 800f622:	b21a      	sxth	r2, r3
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f62e:	10db      	asrs	r3, r3, #3
 800f630:	b21b      	sxth	r3, r3
 800f632:	b29a      	uxth	r2, r3
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f63a:	b29b      	uxth	r3, r3
 800f63c:	4413      	add	r3, r2
 800f63e:	b29b      	uxth	r3, r3
 800f640:	b21a      	sxth	r2, r3
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	2200      	movs	r2, #0
 800f64c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f64e:	4b35      	ldr	r3, [pc, #212]	; (800f724 <tcp_receive+0x5e0>)
 800f650:	881b      	ldrh	r3, [r3, #0]
 800f652:	2b00      	cmp	r3, #0
 800f654:	f000 84e1 	beq.w	801001a <tcp_receive+0xed6>
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	7d1b      	ldrb	r3, [r3, #20]
 800f65c:	2b06      	cmp	r3, #6
 800f65e:	f200 84dc 	bhi.w	801001a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f666:	4b30      	ldr	r3, [pc, #192]	; (800f728 <tcp_receive+0x5e4>)
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	1ad3      	subs	r3, r2, r3
 800f66c:	3b01      	subs	r3, #1
 800f66e:	2b00      	cmp	r3, #0
 800f670:	f2c0 808e 	blt.w	800f790 <tcp_receive+0x64c>
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f678:	4b2a      	ldr	r3, [pc, #168]	; (800f724 <tcp_receive+0x5e0>)
 800f67a:	881b      	ldrh	r3, [r3, #0]
 800f67c:	4619      	mov	r1, r3
 800f67e:	4b2a      	ldr	r3, [pc, #168]	; (800f728 <tcp_receive+0x5e4>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	440b      	add	r3, r1
 800f684:	1ad3      	subs	r3, r2, r3
 800f686:	3301      	adds	r3, #1
 800f688:	2b00      	cmp	r3, #0
 800f68a:	f300 8081 	bgt.w	800f790 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f68e:	4b27      	ldr	r3, [pc, #156]	; (800f72c <tcp_receive+0x5e8>)
 800f690:	685b      	ldr	r3, [r3, #4]
 800f692:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f698:	4b23      	ldr	r3, [pc, #140]	; (800f728 <tcp_receive+0x5e4>)
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	1ad3      	subs	r3, r2, r3
 800f69e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f6a0:	4b22      	ldr	r3, [pc, #136]	; (800f72c <tcp_receive+0x5e8>)
 800f6a2:	685b      	ldr	r3, [r3, #4]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d106      	bne.n	800f6b6 <tcp_receive+0x572>
 800f6a8:	4b21      	ldr	r3, [pc, #132]	; (800f730 <tcp_receive+0x5ec>)
 800f6aa:	f240 5294 	movw	r2, #1428	; 0x594
 800f6ae:	4921      	ldr	r1, [pc, #132]	; (800f734 <tcp_receive+0x5f0>)
 800f6b0:	4821      	ldr	r0, [pc, #132]	; (800f738 <tcp_receive+0x5f4>)
 800f6b2:	f005 fb6b 	bl	8014d8c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f6bc:	4293      	cmp	r3, r2
 800f6be:	d906      	bls.n	800f6ce <tcp_receive+0x58a>
 800f6c0:	4b1b      	ldr	r3, [pc, #108]	; (800f730 <tcp_receive+0x5ec>)
 800f6c2:	f240 5295 	movw	r2, #1429	; 0x595
 800f6c6:	491d      	ldr	r1, [pc, #116]	; (800f73c <tcp_receive+0x5f8>)
 800f6c8:	481b      	ldr	r0, [pc, #108]	; (800f738 <tcp_receive+0x5f4>)
 800f6ca:	f005 fb5f 	bl	8014d8c <iprintf>
      off = (u16_t)off32;
 800f6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f6d4:	4b15      	ldr	r3, [pc, #84]	; (800f72c <tcp_receive+0x5e8>)
 800f6d6:	685b      	ldr	r3, [r3, #4]
 800f6d8:	891b      	ldrh	r3, [r3, #8]
 800f6da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f6de:	429a      	cmp	r2, r3
 800f6e0:	d906      	bls.n	800f6f0 <tcp_receive+0x5ac>
 800f6e2:	4b13      	ldr	r3, [pc, #76]	; (800f730 <tcp_receive+0x5ec>)
 800f6e4:	f240 5297 	movw	r2, #1431	; 0x597
 800f6e8:	4915      	ldr	r1, [pc, #84]	; (800f740 <tcp_receive+0x5fc>)
 800f6ea:	4813      	ldr	r0, [pc, #76]	; (800f738 <tcp_receive+0x5f4>)
 800f6ec:	f005 fb4e 	bl	8014d8c <iprintf>
      inseg.len -= off;
 800f6f0:	4b0e      	ldr	r3, [pc, #56]	; (800f72c <tcp_receive+0x5e8>)
 800f6f2:	891a      	ldrh	r2, [r3, #8]
 800f6f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f6f8:	1ad3      	subs	r3, r2, r3
 800f6fa:	b29a      	uxth	r2, r3
 800f6fc:	4b0b      	ldr	r3, [pc, #44]	; (800f72c <tcp_receive+0x5e8>)
 800f6fe:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f700:	4b0a      	ldr	r3, [pc, #40]	; (800f72c <tcp_receive+0x5e8>)
 800f702:	685b      	ldr	r3, [r3, #4]
 800f704:	891a      	ldrh	r2, [r3, #8]
 800f706:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f70a:	1ad3      	subs	r3, r2, r3
 800f70c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f70e:	e029      	b.n	800f764 <tcp_receive+0x620>
 800f710:	080174a0 	.word	0x080174a0
 800f714:	080174a8 	.word	0x080174a8
 800f718:	2400011c 	.word	0x2400011c
 800f71c:	24000118 	.word	0x24000118
 800f720:	24003608 	.word	0x24003608
 800f724:	2400011e 	.word	0x2400011e
 800f728:	24000114 	.word	0x24000114
 800f72c:	240000f4 	.word	0x240000f4
 800f730:	08017138 	.word	0x08017138
 800f734:	080174b0 	.word	0x080174b0
 800f738:	08017184 	.word	0x08017184
 800f73c:	080174c0 	.word	0x080174c0
 800f740:	080174d0 	.word	0x080174d0
        off -= p->len;
 800f744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f746:	895b      	ldrh	r3, [r3, #10]
 800f748:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f74c:	1ad3      	subs	r3, r2, r3
 800f74e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f754:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f756:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f75a:	2200      	movs	r2, #0
 800f75c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f75e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f766:	895b      	ldrh	r3, [r3, #10]
 800f768:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f76c:	429a      	cmp	r2, r3
 800f76e:	d8e9      	bhi.n	800f744 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f770:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f774:	4619      	mov	r1, r3
 800f776:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f778:	f7fc f8d0 	bl	800b91c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f780:	4a91      	ldr	r2, [pc, #580]	; (800f9c8 <tcp_receive+0x884>)
 800f782:	6013      	str	r3, [r2, #0]
 800f784:	4b91      	ldr	r3, [pc, #580]	; (800f9cc <tcp_receive+0x888>)
 800f786:	68db      	ldr	r3, [r3, #12]
 800f788:	4a8f      	ldr	r2, [pc, #572]	; (800f9c8 <tcp_receive+0x884>)
 800f78a:	6812      	ldr	r2, [r2, #0]
 800f78c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f78e:	e00d      	b.n	800f7ac <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f790:	4b8d      	ldr	r3, [pc, #564]	; (800f9c8 <tcp_receive+0x884>)
 800f792:	681a      	ldr	r2, [r3, #0]
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f798:	1ad3      	subs	r3, r2, r3
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	da06      	bge.n	800f7ac <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	8b5b      	ldrh	r3, [r3, #26]
 800f7a2:	f043 0302 	orr.w	r3, r3, #2
 800f7a6:	b29a      	uxth	r2, r3
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f7ac:	4b86      	ldr	r3, [pc, #536]	; (800f9c8 <tcp_receive+0x884>)
 800f7ae:	681a      	ldr	r2, [r3, #0]
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7b4:	1ad3      	subs	r3, r2, r3
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	f2c0 842a 	blt.w	8010010 <tcp_receive+0xecc>
 800f7bc:	4b82      	ldr	r3, [pc, #520]	; (800f9c8 <tcp_receive+0x884>)
 800f7be:	681a      	ldr	r2, [r3, #0]
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7c4:	6879      	ldr	r1, [r7, #4]
 800f7c6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f7c8:	440b      	add	r3, r1
 800f7ca:	1ad3      	subs	r3, r2, r3
 800f7cc:	3301      	adds	r3, #1
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	f300 841e 	bgt.w	8010010 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f7d8:	4b7b      	ldr	r3, [pc, #492]	; (800f9c8 <tcp_receive+0x884>)
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	429a      	cmp	r2, r3
 800f7de:	f040 829a 	bne.w	800fd16 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f7e2:	4b7a      	ldr	r3, [pc, #488]	; (800f9cc <tcp_receive+0x888>)
 800f7e4:	891c      	ldrh	r4, [r3, #8]
 800f7e6:	4b79      	ldr	r3, [pc, #484]	; (800f9cc <tcp_receive+0x888>)
 800f7e8:	68db      	ldr	r3, [r3, #12]
 800f7ea:	899b      	ldrh	r3, [r3, #12]
 800f7ec:	b29b      	uxth	r3, r3
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	f7fa fd04 	bl	800a1fc <lwip_htons>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	b2db      	uxtb	r3, r3
 800f7f8:	f003 0303 	and.w	r3, r3, #3
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d001      	beq.n	800f804 <tcp_receive+0x6c0>
 800f800:	2301      	movs	r3, #1
 800f802:	e000      	b.n	800f806 <tcp_receive+0x6c2>
 800f804:	2300      	movs	r3, #0
 800f806:	4423      	add	r3, r4
 800f808:	b29a      	uxth	r2, r3
 800f80a:	4b71      	ldr	r3, [pc, #452]	; (800f9d0 <tcp_receive+0x88c>)
 800f80c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f812:	4b6f      	ldr	r3, [pc, #444]	; (800f9d0 <tcp_receive+0x88c>)
 800f814:	881b      	ldrh	r3, [r3, #0]
 800f816:	429a      	cmp	r2, r3
 800f818:	d275      	bcs.n	800f906 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f81a:	4b6c      	ldr	r3, [pc, #432]	; (800f9cc <tcp_receive+0x888>)
 800f81c:	68db      	ldr	r3, [r3, #12]
 800f81e:	899b      	ldrh	r3, [r3, #12]
 800f820:	b29b      	uxth	r3, r3
 800f822:	4618      	mov	r0, r3
 800f824:	f7fa fcea 	bl	800a1fc <lwip_htons>
 800f828:	4603      	mov	r3, r0
 800f82a:	b2db      	uxtb	r3, r3
 800f82c:	f003 0301 	and.w	r3, r3, #1
 800f830:	2b00      	cmp	r3, #0
 800f832:	d01f      	beq.n	800f874 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f834:	4b65      	ldr	r3, [pc, #404]	; (800f9cc <tcp_receive+0x888>)
 800f836:	68db      	ldr	r3, [r3, #12]
 800f838:	899b      	ldrh	r3, [r3, #12]
 800f83a:	b29b      	uxth	r3, r3
 800f83c:	b21b      	sxth	r3, r3
 800f83e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f842:	b21c      	sxth	r4, r3
 800f844:	4b61      	ldr	r3, [pc, #388]	; (800f9cc <tcp_receive+0x888>)
 800f846:	68db      	ldr	r3, [r3, #12]
 800f848:	899b      	ldrh	r3, [r3, #12]
 800f84a:	b29b      	uxth	r3, r3
 800f84c:	4618      	mov	r0, r3
 800f84e:	f7fa fcd5 	bl	800a1fc <lwip_htons>
 800f852:	4603      	mov	r3, r0
 800f854:	b2db      	uxtb	r3, r3
 800f856:	b29b      	uxth	r3, r3
 800f858:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f85c:	b29b      	uxth	r3, r3
 800f85e:	4618      	mov	r0, r3
 800f860:	f7fa fccc 	bl	800a1fc <lwip_htons>
 800f864:	4603      	mov	r3, r0
 800f866:	b21b      	sxth	r3, r3
 800f868:	4323      	orrs	r3, r4
 800f86a:	b21a      	sxth	r2, r3
 800f86c:	4b57      	ldr	r3, [pc, #348]	; (800f9cc <tcp_receive+0x888>)
 800f86e:	68db      	ldr	r3, [r3, #12]
 800f870:	b292      	uxth	r2, r2
 800f872:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f878:	4b54      	ldr	r3, [pc, #336]	; (800f9cc <tcp_receive+0x888>)
 800f87a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f87c:	4b53      	ldr	r3, [pc, #332]	; (800f9cc <tcp_receive+0x888>)
 800f87e:	68db      	ldr	r3, [r3, #12]
 800f880:	899b      	ldrh	r3, [r3, #12]
 800f882:	b29b      	uxth	r3, r3
 800f884:	4618      	mov	r0, r3
 800f886:	f7fa fcb9 	bl	800a1fc <lwip_htons>
 800f88a:	4603      	mov	r3, r0
 800f88c:	b2db      	uxtb	r3, r3
 800f88e:	f003 0302 	and.w	r3, r3, #2
 800f892:	2b00      	cmp	r3, #0
 800f894:	d005      	beq.n	800f8a2 <tcp_receive+0x75e>
            inseg.len -= 1;
 800f896:	4b4d      	ldr	r3, [pc, #308]	; (800f9cc <tcp_receive+0x888>)
 800f898:	891b      	ldrh	r3, [r3, #8]
 800f89a:	3b01      	subs	r3, #1
 800f89c:	b29a      	uxth	r2, r3
 800f89e:	4b4b      	ldr	r3, [pc, #300]	; (800f9cc <tcp_receive+0x888>)
 800f8a0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f8a2:	4b4a      	ldr	r3, [pc, #296]	; (800f9cc <tcp_receive+0x888>)
 800f8a4:	685b      	ldr	r3, [r3, #4]
 800f8a6:	4a49      	ldr	r2, [pc, #292]	; (800f9cc <tcp_receive+0x888>)
 800f8a8:	8912      	ldrh	r2, [r2, #8]
 800f8aa:	4611      	mov	r1, r2
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f7fb ff35 	bl	800b71c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f8b2:	4b46      	ldr	r3, [pc, #280]	; (800f9cc <tcp_receive+0x888>)
 800f8b4:	891c      	ldrh	r4, [r3, #8]
 800f8b6:	4b45      	ldr	r3, [pc, #276]	; (800f9cc <tcp_receive+0x888>)
 800f8b8:	68db      	ldr	r3, [r3, #12]
 800f8ba:	899b      	ldrh	r3, [r3, #12]
 800f8bc:	b29b      	uxth	r3, r3
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f7fa fc9c 	bl	800a1fc <lwip_htons>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	b2db      	uxtb	r3, r3
 800f8c8:	f003 0303 	and.w	r3, r3, #3
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d001      	beq.n	800f8d4 <tcp_receive+0x790>
 800f8d0:	2301      	movs	r3, #1
 800f8d2:	e000      	b.n	800f8d6 <tcp_receive+0x792>
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	4423      	add	r3, r4
 800f8d8:	b29a      	uxth	r2, r3
 800f8da:	4b3d      	ldr	r3, [pc, #244]	; (800f9d0 <tcp_receive+0x88c>)
 800f8dc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f8de:	4b3c      	ldr	r3, [pc, #240]	; (800f9d0 <tcp_receive+0x88c>)
 800f8e0:	881b      	ldrh	r3, [r3, #0]
 800f8e2:	461a      	mov	r2, r3
 800f8e4:	4b38      	ldr	r3, [pc, #224]	; (800f9c8 <tcp_receive+0x884>)
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	441a      	add	r2, r3
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8ee:	6879      	ldr	r1, [r7, #4]
 800f8f0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f8f2:	440b      	add	r3, r1
 800f8f4:	429a      	cmp	r2, r3
 800f8f6:	d006      	beq.n	800f906 <tcp_receive+0x7c2>
 800f8f8:	4b36      	ldr	r3, [pc, #216]	; (800f9d4 <tcp_receive+0x890>)
 800f8fa:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800f8fe:	4936      	ldr	r1, [pc, #216]	; (800f9d8 <tcp_receive+0x894>)
 800f900:	4836      	ldr	r0, [pc, #216]	; (800f9dc <tcp_receive+0x898>)
 800f902:	f005 fa43 	bl	8014d8c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	f000 80e7 	beq.w	800fade <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f910:	4b2e      	ldr	r3, [pc, #184]	; (800f9cc <tcp_receive+0x888>)
 800f912:	68db      	ldr	r3, [r3, #12]
 800f914:	899b      	ldrh	r3, [r3, #12]
 800f916:	b29b      	uxth	r3, r3
 800f918:	4618      	mov	r0, r3
 800f91a:	f7fa fc6f 	bl	800a1fc <lwip_htons>
 800f91e:	4603      	mov	r3, r0
 800f920:	b2db      	uxtb	r3, r3
 800f922:	f003 0301 	and.w	r3, r3, #1
 800f926:	2b00      	cmp	r3, #0
 800f928:	d010      	beq.n	800f94c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f92a:	e00a      	b.n	800f942 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f930:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f936:	681a      	ldr	r2, [r3, #0]
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800f93c:	68f8      	ldr	r0, [r7, #12]
 800f93e:	f7fd fcb0 	bl	800d2a2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f946:	2b00      	cmp	r3, #0
 800f948:	d1f0      	bne.n	800f92c <tcp_receive+0x7e8>
 800f94a:	e0c8      	b.n	800fade <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f950:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f952:	e052      	b.n	800f9fa <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f956:	68db      	ldr	r3, [r3, #12]
 800f958:	899b      	ldrh	r3, [r3, #12]
 800f95a:	b29b      	uxth	r3, r3
 800f95c:	4618      	mov	r0, r3
 800f95e:	f7fa fc4d 	bl	800a1fc <lwip_htons>
 800f962:	4603      	mov	r3, r0
 800f964:	b2db      	uxtb	r3, r3
 800f966:	f003 0301 	and.w	r3, r3, #1
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d03d      	beq.n	800f9ea <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f96e:	4b17      	ldr	r3, [pc, #92]	; (800f9cc <tcp_receive+0x888>)
 800f970:	68db      	ldr	r3, [r3, #12]
 800f972:	899b      	ldrh	r3, [r3, #12]
 800f974:	b29b      	uxth	r3, r3
 800f976:	4618      	mov	r0, r3
 800f978:	f7fa fc40 	bl	800a1fc <lwip_htons>
 800f97c:	4603      	mov	r3, r0
 800f97e:	b2db      	uxtb	r3, r3
 800f980:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f984:	2b00      	cmp	r3, #0
 800f986:	d130      	bne.n	800f9ea <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f988:	4b10      	ldr	r3, [pc, #64]	; (800f9cc <tcp_receive+0x888>)
 800f98a:	68db      	ldr	r3, [r3, #12]
 800f98c:	899b      	ldrh	r3, [r3, #12]
 800f98e:	b29c      	uxth	r4, r3
 800f990:	2001      	movs	r0, #1
 800f992:	f7fa fc33 	bl	800a1fc <lwip_htons>
 800f996:	4603      	mov	r3, r0
 800f998:	461a      	mov	r2, r3
 800f99a:	4b0c      	ldr	r3, [pc, #48]	; (800f9cc <tcp_receive+0x888>)
 800f99c:	68db      	ldr	r3, [r3, #12]
 800f99e:	4322      	orrs	r2, r4
 800f9a0:	b292      	uxth	r2, r2
 800f9a2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f9a4:	4b09      	ldr	r3, [pc, #36]	; (800f9cc <tcp_receive+0x888>)
 800f9a6:	891c      	ldrh	r4, [r3, #8]
 800f9a8:	4b08      	ldr	r3, [pc, #32]	; (800f9cc <tcp_receive+0x888>)
 800f9aa:	68db      	ldr	r3, [r3, #12]
 800f9ac:	899b      	ldrh	r3, [r3, #12]
 800f9ae:	b29b      	uxth	r3, r3
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	f7fa fc23 	bl	800a1fc <lwip_htons>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	b2db      	uxtb	r3, r3
 800f9ba:	f003 0303 	and.w	r3, r3, #3
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d00e      	beq.n	800f9e0 <tcp_receive+0x89c>
 800f9c2:	2301      	movs	r3, #1
 800f9c4:	e00d      	b.n	800f9e2 <tcp_receive+0x89e>
 800f9c6:	bf00      	nop
 800f9c8:	24000114 	.word	0x24000114
 800f9cc:	240000f4 	.word	0x240000f4
 800f9d0:	2400011e 	.word	0x2400011e
 800f9d4:	08017138 	.word	0x08017138
 800f9d8:	080174e0 	.word	0x080174e0
 800f9dc:	08017184 	.word	0x08017184
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	4423      	add	r3, r4
 800f9e4:	b29a      	uxth	r2, r3
 800f9e6:	4b98      	ldr	r3, [pc, #608]	; (800fc48 <tcp_receive+0xb04>)
 800f9e8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f9ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9ec:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f9ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800f9f4:	6938      	ldr	r0, [r7, #16]
 800f9f6:	f7fd fc54 	bl	800d2a2 <tcp_seg_free>
            while (next &&
 800f9fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d00e      	beq.n	800fa1e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800fa00:	4b91      	ldr	r3, [pc, #580]	; (800fc48 <tcp_receive+0xb04>)
 800fa02:	881b      	ldrh	r3, [r3, #0]
 800fa04:	461a      	mov	r2, r3
 800fa06:	4b91      	ldr	r3, [pc, #580]	; (800fc4c <tcp_receive+0xb08>)
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	441a      	add	r2, r3
 800fa0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa0e:	68db      	ldr	r3, [r3, #12]
 800fa10:	685b      	ldr	r3, [r3, #4]
 800fa12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fa14:	8909      	ldrh	r1, [r1, #8]
 800fa16:	440b      	add	r3, r1
 800fa18:	1ad3      	subs	r3, r2, r3
            while (next &&
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	da9a      	bge.n	800f954 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800fa1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d059      	beq.n	800fad8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800fa24:	4b88      	ldr	r3, [pc, #544]	; (800fc48 <tcp_receive+0xb04>)
 800fa26:	881b      	ldrh	r3, [r3, #0]
 800fa28:	461a      	mov	r2, r3
 800fa2a:	4b88      	ldr	r3, [pc, #544]	; (800fc4c <tcp_receive+0xb08>)
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	441a      	add	r2, r3
 800fa30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa32:	68db      	ldr	r3, [r3, #12]
 800fa34:	685b      	ldr	r3, [r3, #4]
 800fa36:	1ad3      	subs	r3, r2, r3
            if (next &&
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	dd4d      	ble.n	800fad8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800fa3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa3e:	68db      	ldr	r3, [r3, #12]
 800fa40:	685b      	ldr	r3, [r3, #4]
 800fa42:	b29a      	uxth	r2, r3
 800fa44:	4b81      	ldr	r3, [pc, #516]	; (800fc4c <tcp_receive+0xb08>)
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	b29b      	uxth	r3, r3
 800fa4a:	1ad3      	subs	r3, r2, r3
 800fa4c:	b29a      	uxth	r2, r3
 800fa4e:	4b80      	ldr	r3, [pc, #512]	; (800fc50 <tcp_receive+0xb0c>)
 800fa50:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fa52:	4b7f      	ldr	r3, [pc, #508]	; (800fc50 <tcp_receive+0xb0c>)
 800fa54:	68db      	ldr	r3, [r3, #12]
 800fa56:	899b      	ldrh	r3, [r3, #12]
 800fa58:	b29b      	uxth	r3, r3
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f7fa fbce 	bl	800a1fc <lwip_htons>
 800fa60:	4603      	mov	r3, r0
 800fa62:	b2db      	uxtb	r3, r3
 800fa64:	f003 0302 	and.w	r3, r3, #2
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d005      	beq.n	800fa78 <tcp_receive+0x934>
                inseg.len -= 1;
 800fa6c:	4b78      	ldr	r3, [pc, #480]	; (800fc50 <tcp_receive+0xb0c>)
 800fa6e:	891b      	ldrh	r3, [r3, #8]
 800fa70:	3b01      	subs	r3, #1
 800fa72:	b29a      	uxth	r2, r3
 800fa74:	4b76      	ldr	r3, [pc, #472]	; (800fc50 <tcp_receive+0xb0c>)
 800fa76:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800fa78:	4b75      	ldr	r3, [pc, #468]	; (800fc50 <tcp_receive+0xb0c>)
 800fa7a:	685b      	ldr	r3, [r3, #4]
 800fa7c:	4a74      	ldr	r2, [pc, #464]	; (800fc50 <tcp_receive+0xb0c>)
 800fa7e:	8912      	ldrh	r2, [r2, #8]
 800fa80:	4611      	mov	r1, r2
 800fa82:	4618      	mov	r0, r3
 800fa84:	f7fb fe4a 	bl	800b71c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800fa88:	4b71      	ldr	r3, [pc, #452]	; (800fc50 <tcp_receive+0xb0c>)
 800fa8a:	891c      	ldrh	r4, [r3, #8]
 800fa8c:	4b70      	ldr	r3, [pc, #448]	; (800fc50 <tcp_receive+0xb0c>)
 800fa8e:	68db      	ldr	r3, [r3, #12]
 800fa90:	899b      	ldrh	r3, [r3, #12]
 800fa92:	b29b      	uxth	r3, r3
 800fa94:	4618      	mov	r0, r3
 800fa96:	f7fa fbb1 	bl	800a1fc <lwip_htons>
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	b2db      	uxtb	r3, r3
 800fa9e:	f003 0303 	and.w	r3, r3, #3
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d001      	beq.n	800faaa <tcp_receive+0x966>
 800faa6:	2301      	movs	r3, #1
 800faa8:	e000      	b.n	800faac <tcp_receive+0x968>
 800faaa:	2300      	movs	r3, #0
 800faac:	4423      	add	r3, r4
 800faae:	b29a      	uxth	r2, r3
 800fab0:	4b65      	ldr	r3, [pc, #404]	; (800fc48 <tcp_receive+0xb04>)
 800fab2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800fab4:	4b64      	ldr	r3, [pc, #400]	; (800fc48 <tcp_receive+0xb04>)
 800fab6:	881b      	ldrh	r3, [r3, #0]
 800fab8:	461a      	mov	r2, r3
 800faba:	4b64      	ldr	r3, [pc, #400]	; (800fc4c <tcp_receive+0xb08>)
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	441a      	add	r2, r3
 800fac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fac2:	68db      	ldr	r3, [r3, #12]
 800fac4:	685b      	ldr	r3, [r3, #4]
 800fac6:	429a      	cmp	r2, r3
 800fac8:	d006      	beq.n	800fad8 <tcp_receive+0x994>
 800faca:	4b62      	ldr	r3, [pc, #392]	; (800fc54 <tcp_receive+0xb10>)
 800facc:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800fad0:	4961      	ldr	r1, [pc, #388]	; (800fc58 <tcp_receive+0xb14>)
 800fad2:	4862      	ldr	r0, [pc, #392]	; (800fc5c <tcp_receive+0xb18>)
 800fad4:	f005 f95a 	bl	8014d8c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fadc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800fade:	4b5a      	ldr	r3, [pc, #360]	; (800fc48 <tcp_receive+0xb04>)
 800fae0:	881b      	ldrh	r3, [r3, #0]
 800fae2:	461a      	mov	r2, r3
 800fae4:	4b59      	ldr	r3, [pc, #356]	; (800fc4c <tcp_receive+0xb08>)
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	441a      	add	r2, r3
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800faf2:	4b55      	ldr	r3, [pc, #340]	; (800fc48 <tcp_receive+0xb04>)
 800faf4:	881b      	ldrh	r3, [r3, #0]
 800faf6:	429a      	cmp	r2, r3
 800faf8:	d206      	bcs.n	800fb08 <tcp_receive+0x9c4>
 800fafa:	4b56      	ldr	r3, [pc, #344]	; (800fc54 <tcp_receive+0xb10>)
 800fafc:	f240 6207 	movw	r2, #1543	; 0x607
 800fb00:	4957      	ldr	r1, [pc, #348]	; (800fc60 <tcp_receive+0xb1c>)
 800fb02:	4856      	ldr	r0, [pc, #344]	; (800fc5c <tcp_receive+0xb18>)
 800fb04:	f005 f942 	bl	8014d8c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fb0c:	4b4e      	ldr	r3, [pc, #312]	; (800fc48 <tcp_receive+0xb04>)
 800fb0e:	881b      	ldrh	r3, [r3, #0]
 800fb10:	1ad3      	subs	r3, r2, r3
 800fb12:	b29a      	uxth	r2, r3
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f7fc fe9d 	bl	800c858 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800fb1e:	4b4c      	ldr	r3, [pc, #304]	; (800fc50 <tcp_receive+0xb0c>)
 800fb20:	685b      	ldr	r3, [r3, #4]
 800fb22:	891b      	ldrh	r3, [r3, #8]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d006      	beq.n	800fb36 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800fb28:	4b49      	ldr	r3, [pc, #292]	; (800fc50 <tcp_receive+0xb0c>)
 800fb2a:	685b      	ldr	r3, [r3, #4]
 800fb2c:	4a4d      	ldr	r2, [pc, #308]	; (800fc64 <tcp_receive+0xb20>)
 800fb2e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800fb30:	4b47      	ldr	r3, [pc, #284]	; (800fc50 <tcp_receive+0xb0c>)
 800fb32:	2200      	movs	r2, #0
 800fb34:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fb36:	4b46      	ldr	r3, [pc, #280]	; (800fc50 <tcp_receive+0xb0c>)
 800fb38:	68db      	ldr	r3, [r3, #12]
 800fb3a:	899b      	ldrh	r3, [r3, #12]
 800fb3c:	b29b      	uxth	r3, r3
 800fb3e:	4618      	mov	r0, r3
 800fb40:	f7fa fb5c 	bl	800a1fc <lwip_htons>
 800fb44:	4603      	mov	r3, r0
 800fb46:	b2db      	uxtb	r3, r3
 800fb48:	f003 0301 	and.w	r3, r3, #1
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	f000 80b8 	beq.w	800fcc2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800fb52:	4b45      	ldr	r3, [pc, #276]	; (800fc68 <tcp_receive+0xb24>)
 800fb54:	781b      	ldrb	r3, [r3, #0]
 800fb56:	f043 0320 	orr.w	r3, r3, #32
 800fb5a:	b2da      	uxtb	r2, r3
 800fb5c:	4b42      	ldr	r3, [pc, #264]	; (800fc68 <tcp_receive+0xb24>)
 800fb5e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800fb60:	e0af      	b.n	800fcc2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb66:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb6c:	68db      	ldr	r3, [r3, #12]
 800fb6e:	685b      	ldr	r3, [r3, #4]
 800fb70:	4a36      	ldr	r2, [pc, #216]	; (800fc4c <tcp_receive+0xb08>)
 800fb72:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800fb74:	68bb      	ldr	r3, [r7, #8]
 800fb76:	891b      	ldrh	r3, [r3, #8]
 800fb78:	461c      	mov	r4, r3
 800fb7a:	68bb      	ldr	r3, [r7, #8]
 800fb7c:	68db      	ldr	r3, [r3, #12]
 800fb7e:	899b      	ldrh	r3, [r3, #12]
 800fb80:	b29b      	uxth	r3, r3
 800fb82:	4618      	mov	r0, r3
 800fb84:	f7fa fb3a 	bl	800a1fc <lwip_htons>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	b2db      	uxtb	r3, r3
 800fb8c:	f003 0303 	and.w	r3, r3, #3
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d001      	beq.n	800fb98 <tcp_receive+0xa54>
 800fb94:	2301      	movs	r3, #1
 800fb96:	e000      	b.n	800fb9a <tcp_receive+0xa56>
 800fb98:	2300      	movs	r3, #0
 800fb9a:	191a      	adds	r2, r3, r4
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fba0:	441a      	add	r2, r3
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fbaa:	461c      	mov	r4, r3
 800fbac:	68bb      	ldr	r3, [r7, #8]
 800fbae:	891b      	ldrh	r3, [r3, #8]
 800fbb0:	461d      	mov	r5, r3
 800fbb2:	68bb      	ldr	r3, [r7, #8]
 800fbb4:	68db      	ldr	r3, [r3, #12]
 800fbb6:	899b      	ldrh	r3, [r3, #12]
 800fbb8:	b29b      	uxth	r3, r3
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f7fa fb1e 	bl	800a1fc <lwip_htons>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	b2db      	uxtb	r3, r3
 800fbc4:	f003 0303 	and.w	r3, r3, #3
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d001      	beq.n	800fbd0 <tcp_receive+0xa8c>
 800fbcc:	2301      	movs	r3, #1
 800fbce:	e000      	b.n	800fbd2 <tcp_receive+0xa8e>
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	442b      	add	r3, r5
 800fbd4:	429c      	cmp	r4, r3
 800fbd6:	d206      	bcs.n	800fbe6 <tcp_receive+0xaa2>
 800fbd8:	4b1e      	ldr	r3, [pc, #120]	; (800fc54 <tcp_receive+0xb10>)
 800fbda:	f240 622b 	movw	r2, #1579	; 0x62b
 800fbde:	4923      	ldr	r1, [pc, #140]	; (800fc6c <tcp_receive+0xb28>)
 800fbe0:	481e      	ldr	r0, [pc, #120]	; (800fc5c <tcp_receive+0xb18>)
 800fbe2:	f005 f8d3 	bl	8014d8c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800fbe6:	68bb      	ldr	r3, [r7, #8]
 800fbe8:	891b      	ldrh	r3, [r3, #8]
 800fbea:	461c      	mov	r4, r3
 800fbec:	68bb      	ldr	r3, [r7, #8]
 800fbee:	68db      	ldr	r3, [r3, #12]
 800fbf0:	899b      	ldrh	r3, [r3, #12]
 800fbf2:	b29b      	uxth	r3, r3
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f7fa fb01 	bl	800a1fc <lwip_htons>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	b2db      	uxtb	r3, r3
 800fbfe:	f003 0303 	and.w	r3, r3, #3
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d001      	beq.n	800fc0a <tcp_receive+0xac6>
 800fc06:	2301      	movs	r3, #1
 800fc08:	e000      	b.n	800fc0c <tcp_receive+0xac8>
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	1919      	adds	r1, r3, r4
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fc12:	b28b      	uxth	r3, r1
 800fc14:	1ad3      	subs	r3, r2, r3
 800fc16:	b29a      	uxth	r2, r3
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800fc1c:	6878      	ldr	r0, [r7, #4]
 800fc1e:	f7fc fe1b 	bl	800c858 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800fc22:	68bb      	ldr	r3, [r7, #8]
 800fc24:	685b      	ldr	r3, [r3, #4]
 800fc26:	891b      	ldrh	r3, [r3, #8]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d028      	beq.n	800fc7e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800fc2c:	4b0d      	ldr	r3, [pc, #52]	; (800fc64 <tcp_receive+0xb20>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d01d      	beq.n	800fc70 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800fc34:	4b0b      	ldr	r3, [pc, #44]	; (800fc64 <tcp_receive+0xb20>)
 800fc36:	681a      	ldr	r2, [r3, #0]
 800fc38:	68bb      	ldr	r3, [r7, #8]
 800fc3a:	685b      	ldr	r3, [r3, #4]
 800fc3c:	4619      	mov	r1, r3
 800fc3e:	4610      	mov	r0, r2
 800fc40:	f7fb ffb4 	bl	800bbac <pbuf_cat>
 800fc44:	e018      	b.n	800fc78 <tcp_receive+0xb34>
 800fc46:	bf00      	nop
 800fc48:	2400011e 	.word	0x2400011e
 800fc4c:	24000114 	.word	0x24000114
 800fc50:	240000f4 	.word	0x240000f4
 800fc54:	08017138 	.word	0x08017138
 800fc58:	08017518 	.word	0x08017518
 800fc5c:	08017184 	.word	0x08017184
 800fc60:	08017554 	.word	0x08017554
 800fc64:	24000124 	.word	0x24000124
 800fc68:	24000121 	.word	0x24000121
 800fc6c:	08017574 	.word	0x08017574
            } else {
              recv_data = cseg->p;
 800fc70:	68bb      	ldr	r3, [r7, #8]
 800fc72:	685b      	ldr	r3, [r3, #4]
 800fc74:	4a70      	ldr	r2, [pc, #448]	; (800fe38 <tcp_receive+0xcf4>)
 800fc76:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800fc78:	68bb      	ldr	r3, [r7, #8]
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fc7e:	68bb      	ldr	r3, [r7, #8]
 800fc80:	68db      	ldr	r3, [r3, #12]
 800fc82:	899b      	ldrh	r3, [r3, #12]
 800fc84:	b29b      	uxth	r3, r3
 800fc86:	4618      	mov	r0, r3
 800fc88:	f7fa fab8 	bl	800a1fc <lwip_htons>
 800fc8c:	4603      	mov	r3, r0
 800fc8e:	b2db      	uxtb	r3, r3
 800fc90:	f003 0301 	and.w	r3, r3, #1
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d00d      	beq.n	800fcb4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800fc98:	4b68      	ldr	r3, [pc, #416]	; (800fe3c <tcp_receive+0xcf8>)
 800fc9a:	781b      	ldrb	r3, [r3, #0]
 800fc9c:	f043 0320 	orr.w	r3, r3, #32
 800fca0:	b2da      	uxtb	r2, r3
 800fca2:	4b66      	ldr	r3, [pc, #408]	; (800fe3c <tcp_receive+0xcf8>)
 800fca4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	7d1b      	ldrb	r3, [r3, #20]
 800fcaa:	2b04      	cmp	r3, #4
 800fcac:	d102      	bne.n	800fcb4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2207      	movs	r2, #7
 800fcb2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800fcb4:	68bb      	ldr	r3, [r7, #8]
 800fcb6:	681a      	ldr	r2, [r3, #0]
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800fcbc:	68b8      	ldr	r0, [r7, #8]
 800fcbe:	f7fd faf0 	bl	800d2a2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d008      	beq.n	800fcdc <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fcce:	68db      	ldr	r3, [r3, #12]
 800fcd0:	685a      	ldr	r2, [r3, #4]
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	f43f af43 	beq.w	800fb62 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	8b5b      	ldrh	r3, [r3, #26]
 800fce0:	f003 0301 	and.w	r3, r3, #1
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d00e      	beq.n	800fd06 <tcp_receive+0xbc2>
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	8b5b      	ldrh	r3, [r3, #26]
 800fcec:	f023 0301 	bic.w	r3, r3, #1
 800fcf0:	b29a      	uxth	r2, r3
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	835a      	strh	r2, [r3, #26]
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	8b5b      	ldrh	r3, [r3, #26]
 800fcfa:	f043 0302 	orr.w	r3, r3, #2
 800fcfe:	b29a      	uxth	r2, r3
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fd04:	e188      	b.n	8010018 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	8b5b      	ldrh	r3, [r3, #26]
 800fd0a:	f043 0301 	orr.w	r3, r3, #1
 800fd0e:	b29a      	uxth	r2, r3
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fd14:	e180      	b.n	8010018 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d106      	bne.n	800fd2c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800fd1e:	4848      	ldr	r0, [pc, #288]	; (800fe40 <tcp_receive+0xcfc>)
 800fd20:	f7fd faf6 	bl	800d310 <tcp_seg_copy>
 800fd24:	4602      	mov	r2, r0
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	675a      	str	r2, [r3, #116]	; 0x74
 800fd2a:	e16d      	b.n	8010008 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd34:	63bb      	str	r3, [r7, #56]	; 0x38
 800fd36:	e157      	b.n	800ffe8 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800fd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd3a:	68db      	ldr	r3, [r3, #12]
 800fd3c:	685a      	ldr	r2, [r3, #4]
 800fd3e:	4b41      	ldr	r3, [pc, #260]	; (800fe44 <tcp_receive+0xd00>)
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	429a      	cmp	r2, r3
 800fd44:	d11d      	bne.n	800fd82 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800fd46:	4b3e      	ldr	r3, [pc, #248]	; (800fe40 <tcp_receive+0xcfc>)
 800fd48:	891a      	ldrh	r2, [r3, #8]
 800fd4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd4c:	891b      	ldrh	r3, [r3, #8]
 800fd4e:	429a      	cmp	r2, r3
 800fd50:	f240 814f 	bls.w	800fff2 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fd54:	483a      	ldr	r0, [pc, #232]	; (800fe40 <tcp_receive+0xcfc>)
 800fd56:	f7fd fadb 	bl	800d310 <tcp_seg_copy>
 800fd5a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800fd5c:	697b      	ldr	r3, [r7, #20]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	f000 8149 	beq.w	800fff6 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800fd64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d003      	beq.n	800fd72 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800fd6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd6c:	697a      	ldr	r2, [r7, #20]
 800fd6e:	601a      	str	r2, [r3, #0]
 800fd70:	e002      	b.n	800fd78 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	697a      	ldr	r2, [r7, #20]
 800fd76:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800fd78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fd7a:	6978      	ldr	r0, [r7, #20]
 800fd7c:	f7ff f8de 	bl	800ef3c <tcp_oos_insert_segment>
                }
                break;
 800fd80:	e139      	b.n	800fff6 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800fd82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d117      	bne.n	800fdb8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800fd88:	4b2e      	ldr	r3, [pc, #184]	; (800fe44 <tcp_receive+0xd00>)
 800fd8a:	681a      	ldr	r2, [r3, #0]
 800fd8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd8e:	68db      	ldr	r3, [r3, #12]
 800fd90:	685b      	ldr	r3, [r3, #4]
 800fd92:	1ad3      	subs	r3, r2, r3
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	da57      	bge.n	800fe48 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fd98:	4829      	ldr	r0, [pc, #164]	; (800fe40 <tcp_receive+0xcfc>)
 800fd9a:	f7fd fab9 	bl	800d310 <tcp_seg_copy>
 800fd9e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800fda0:	69bb      	ldr	r3, [r7, #24]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	f000 8129 	beq.w	800fffa <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	69ba      	ldr	r2, [r7, #24]
 800fdac:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800fdae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fdb0:	69b8      	ldr	r0, [r7, #24]
 800fdb2:	f7ff f8c3 	bl	800ef3c <tcp_oos_insert_segment>
                  }
                  break;
 800fdb6:	e120      	b.n	800fffa <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800fdb8:	4b22      	ldr	r3, [pc, #136]	; (800fe44 <tcp_receive+0xd00>)
 800fdba:	681a      	ldr	r2, [r3, #0]
 800fdbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdbe:	68db      	ldr	r3, [r3, #12]
 800fdc0:	685b      	ldr	r3, [r3, #4]
 800fdc2:	1ad3      	subs	r3, r2, r3
 800fdc4:	3b01      	subs	r3, #1
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	db3e      	blt.n	800fe48 <tcp_receive+0xd04>
 800fdca:	4b1e      	ldr	r3, [pc, #120]	; (800fe44 <tcp_receive+0xd00>)
 800fdcc:	681a      	ldr	r2, [r3, #0]
 800fdce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdd0:	68db      	ldr	r3, [r3, #12]
 800fdd2:	685b      	ldr	r3, [r3, #4]
 800fdd4:	1ad3      	subs	r3, r2, r3
 800fdd6:	3301      	adds	r3, #1
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	dc35      	bgt.n	800fe48 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fddc:	4818      	ldr	r0, [pc, #96]	; (800fe40 <tcp_receive+0xcfc>)
 800fdde:	f7fd fa97 	bl	800d310 <tcp_seg_copy>
 800fde2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800fde4:	69fb      	ldr	r3, [r7, #28]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	f000 8109 	beq.w	800fffe <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800fdec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdee:	68db      	ldr	r3, [r3, #12]
 800fdf0:	685b      	ldr	r3, [r3, #4]
 800fdf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fdf4:	8912      	ldrh	r2, [r2, #8]
 800fdf6:	441a      	add	r2, r3
 800fdf8:	4b12      	ldr	r3, [pc, #72]	; (800fe44 <tcp_receive+0xd00>)
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	1ad3      	subs	r3, r2, r3
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	dd12      	ble.n	800fe28 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800fe02:	4b10      	ldr	r3, [pc, #64]	; (800fe44 <tcp_receive+0xd00>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	b29a      	uxth	r2, r3
 800fe08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe0a:	68db      	ldr	r3, [r3, #12]
 800fe0c:	685b      	ldr	r3, [r3, #4]
 800fe0e:	b29b      	uxth	r3, r3
 800fe10:	1ad3      	subs	r3, r2, r3
 800fe12:	b29a      	uxth	r2, r3
 800fe14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe16:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800fe18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe1a:	685a      	ldr	r2, [r3, #4]
 800fe1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe1e:	891b      	ldrh	r3, [r3, #8]
 800fe20:	4619      	mov	r1, r3
 800fe22:	4610      	mov	r0, r2
 800fe24:	f7fb fc7a 	bl	800b71c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800fe28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe2a:	69fa      	ldr	r2, [r7, #28]
 800fe2c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800fe2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fe30:	69f8      	ldr	r0, [r7, #28]
 800fe32:	f7ff f883 	bl	800ef3c <tcp_oos_insert_segment>
                  }
                  break;
 800fe36:	e0e2      	b.n	800fffe <tcp_receive+0xeba>
 800fe38:	24000124 	.word	0x24000124
 800fe3c:	24000121 	.word	0x24000121
 800fe40:	240000f4 	.word	0x240000f4
 800fe44:	24000114 	.word	0x24000114
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800fe48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe4a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800fe4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	f040 80c6 	bne.w	800ffe2 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800fe56:	4b80      	ldr	r3, [pc, #512]	; (8010058 <tcp_receive+0xf14>)
 800fe58:	681a      	ldr	r2, [r3, #0]
 800fe5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe5c:	68db      	ldr	r3, [r3, #12]
 800fe5e:	685b      	ldr	r3, [r3, #4]
 800fe60:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	f340 80bd 	ble.w	800ffe2 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fe68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe6a:	68db      	ldr	r3, [r3, #12]
 800fe6c:	899b      	ldrh	r3, [r3, #12]
 800fe6e:	b29b      	uxth	r3, r3
 800fe70:	4618      	mov	r0, r3
 800fe72:	f7fa f9c3 	bl	800a1fc <lwip_htons>
 800fe76:	4603      	mov	r3, r0
 800fe78:	b2db      	uxtb	r3, r3
 800fe7a:	f003 0301 	and.w	r3, r3, #1
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	f040 80bf 	bne.w	8010002 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800fe84:	4875      	ldr	r0, [pc, #468]	; (801005c <tcp_receive+0xf18>)
 800fe86:	f7fd fa43 	bl	800d310 <tcp_seg_copy>
 800fe8a:	4602      	mov	r2, r0
 800fe8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe8e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800fe90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	f000 80b6 	beq.w	8010006 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800fe9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe9c:	68db      	ldr	r3, [r3, #12]
 800fe9e:	685b      	ldr	r3, [r3, #4]
 800fea0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fea2:	8912      	ldrh	r2, [r2, #8]
 800fea4:	441a      	add	r2, r3
 800fea6:	4b6c      	ldr	r3, [pc, #432]	; (8010058 <tcp_receive+0xf14>)
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	1ad3      	subs	r3, r2, r3
 800feac:	2b00      	cmp	r3, #0
 800feae:	dd12      	ble.n	800fed6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800feb0:	4b69      	ldr	r3, [pc, #420]	; (8010058 <tcp_receive+0xf14>)
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	b29a      	uxth	r2, r3
 800feb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feb8:	68db      	ldr	r3, [r3, #12]
 800feba:	685b      	ldr	r3, [r3, #4]
 800febc:	b29b      	uxth	r3, r3
 800febe:	1ad3      	subs	r3, r2, r3
 800fec0:	b29a      	uxth	r2, r3
 800fec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fec4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800fec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fec8:	685a      	ldr	r2, [r3, #4]
 800feca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fecc:	891b      	ldrh	r3, [r3, #8]
 800fece:	4619      	mov	r1, r3
 800fed0:	4610      	mov	r0, r2
 800fed2:	f7fb fc23 	bl	800b71c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800fed6:	4b62      	ldr	r3, [pc, #392]	; (8010060 <tcp_receive+0xf1c>)
 800fed8:	881b      	ldrh	r3, [r3, #0]
 800feda:	461a      	mov	r2, r3
 800fedc:	4b5e      	ldr	r3, [pc, #376]	; (8010058 <tcp_receive+0xf14>)
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	441a      	add	r2, r3
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fee6:	6879      	ldr	r1, [r7, #4]
 800fee8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800feea:	440b      	add	r3, r1
 800feec:	1ad3      	subs	r3, r2, r3
 800feee:	2b00      	cmp	r3, #0
 800fef0:	f340 8089 	ble.w	8010006 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800fef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	68db      	ldr	r3, [r3, #12]
 800fefa:	899b      	ldrh	r3, [r3, #12]
 800fefc:	b29b      	uxth	r3, r3
 800fefe:	4618      	mov	r0, r3
 800ff00:	f7fa f97c 	bl	800a1fc <lwip_htons>
 800ff04:	4603      	mov	r3, r0
 800ff06:	b2db      	uxtb	r3, r3
 800ff08:	f003 0301 	and.w	r3, r3, #1
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d022      	beq.n	800ff56 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800ff10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	68db      	ldr	r3, [r3, #12]
 800ff16:	899b      	ldrh	r3, [r3, #12]
 800ff18:	b29b      	uxth	r3, r3
 800ff1a:	b21b      	sxth	r3, r3
 800ff1c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ff20:	b21c      	sxth	r4, r3
 800ff22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	68db      	ldr	r3, [r3, #12]
 800ff28:	899b      	ldrh	r3, [r3, #12]
 800ff2a:	b29b      	uxth	r3, r3
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	f7fa f965 	bl	800a1fc <lwip_htons>
 800ff32:	4603      	mov	r3, r0
 800ff34:	b2db      	uxtb	r3, r3
 800ff36:	b29b      	uxth	r3, r3
 800ff38:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ff3c:	b29b      	uxth	r3, r3
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f7fa f95c 	bl	800a1fc <lwip_htons>
 800ff44:	4603      	mov	r3, r0
 800ff46:	b21b      	sxth	r3, r3
 800ff48:	4323      	orrs	r3, r4
 800ff4a:	b21a      	sxth	r2, r3
 800ff4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	68db      	ldr	r3, [r3, #12]
 800ff52:	b292      	uxth	r2, r2
 800ff54:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff5a:	b29a      	uxth	r2, r3
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ff60:	4413      	add	r3, r2
 800ff62:	b299      	uxth	r1, r3
 800ff64:	4b3c      	ldr	r3, [pc, #240]	; (8010058 <tcp_receive+0xf14>)
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	b29a      	uxth	r2, r3
 800ff6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	1a8a      	subs	r2, r1, r2
 800ff70:	b292      	uxth	r2, r2
 800ff72:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800ff74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	685a      	ldr	r2, [r3, #4]
 800ff7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	891b      	ldrh	r3, [r3, #8]
 800ff80:	4619      	mov	r1, r3
 800ff82:	4610      	mov	r0, r2
 800ff84:	f7fb fbca 	bl	800b71c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ff88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	891c      	ldrh	r4, [r3, #8]
 800ff8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	68db      	ldr	r3, [r3, #12]
 800ff94:	899b      	ldrh	r3, [r3, #12]
 800ff96:	b29b      	uxth	r3, r3
 800ff98:	4618      	mov	r0, r3
 800ff9a:	f7fa f92f 	bl	800a1fc <lwip_htons>
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	b2db      	uxtb	r3, r3
 800ffa2:	f003 0303 	and.w	r3, r3, #3
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d001      	beq.n	800ffae <tcp_receive+0xe6a>
 800ffaa:	2301      	movs	r3, #1
 800ffac:	e000      	b.n	800ffb0 <tcp_receive+0xe6c>
 800ffae:	2300      	movs	r3, #0
 800ffb0:	4423      	add	r3, r4
 800ffb2:	b29a      	uxth	r2, r3
 800ffb4:	4b2a      	ldr	r3, [pc, #168]	; (8010060 <tcp_receive+0xf1c>)
 800ffb6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ffb8:	4b29      	ldr	r3, [pc, #164]	; (8010060 <tcp_receive+0xf1c>)
 800ffba:	881b      	ldrh	r3, [r3, #0]
 800ffbc:	461a      	mov	r2, r3
 800ffbe:	4b26      	ldr	r3, [pc, #152]	; (8010058 <tcp_receive+0xf14>)
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	441a      	add	r2, r3
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffc8:	6879      	ldr	r1, [r7, #4]
 800ffca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ffcc:	440b      	add	r3, r1
 800ffce:	429a      	cmp	r2, r3
 800ffd0:	d019      	beq.n	8010006 <tcp_receive+0xec2>
 800ffd2:	4b24      	ldr	r3, [pc, #144]	; (8010064 <tcp_receive+0xf20>)
 800ffd4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800ffd8:	4923      	ldr	r1, [pc, #140]	; (8010068 <tcp_receive+0xf24>)
 800ffda:	4824      	ldr	r0, [pc, #144]	; (801006c <tcp_receive+0xf28>)
 800ffdc:	f004 fed6 	bl	8014d8c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ffe0:	e011      	b.n	8010006 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ffe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	63bb      	str	r3, [r7, #56]	; 0x38
 800ffe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	f47f aea4 	bne.w	800fd38 <tcp_receive+0xbf4>
 800fff0:	e00a      	b.n	8010008 <tcp_receive+0xec4>
                break;
 800fff2:	bf00      	nop
 800fff4:	e008      	b.n	8010008 <tcp_receive+0xec4>
                break;
 800fff6:	bf00      	nop
 800fff8:	e006      	b.n	8010008 <tcp_receive+0xec4>
                  break;
 800fffa:	bf00      	nop
 800fffc:	e004      	b.n	8010008 <tcp_receive+0xec4>
                  break;
 800fffe:	bf00      	nop
 8010000:	e002      	b.n	8010008 <tcp_receive+0xec4>
                  break;
 8010002:	bf00      	nop
 8010004:	e000      	b.n	8010008 <tcp_receive+0xec4>
                break;
 8010006:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010008:	6878      	ldr	r0, [r7, #4]
 801000a:	f001 fe8b 	bl	8011d24 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801000e:	e003      	b.n	8010018 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010010:	6878      	ldr	r0, [r7, #4]
 8010012:	f001 fe87 	bl	8011d24 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010016:	e01a      	b.n	801004e <tcp_receive+0xf0a>
 8010018:	e019      	b.n	801004e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801001a:	4b0f      	ldr	r3, [pc, #60]	; (8010058 <tcp_receive+0xf14>)
 801001c:	681a      	ldr	r2, [r3, #0]
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010022:	1ad3      	subs	r3, r2, r3
 8010024:	2b00      	cmp	r3, #0
 8010026:	db0a      	blt.n	801003e <tcp_receive+0xefa>
 8010028:	4b0b      	ldr	r3, [pc, #44]	; (8010058 <tcp_receive+0xf14>)
 801002a:	681a      	ldr	r2, [r3, #0]
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010030:	6879      	ldr	r1, [r7, #4]
 8010032:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010034:	440b      	add	r3, r1
 8010036:	1ad3      	subs	r3, r2, r3
 8010038:	3301      	adds	r3, #1
 801003a:	2b00      	cmp	r3, #0
 801003c:	dd07      	ble.n	801004e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	8b5b      	ldrh	r3, [r3, #26]
 8010042:	f043 0302 	orr.w	r3, r3, #2
 8010046:	b29a      	uxth	r2, r3
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801004c:	e7ff      	b.n	801004e <tcp_receive+0xf0a>
 801004e:	bf00      	nop
 8010050:	3750      	adds	r7, #80	; 0x50
 8010052:	46bd      	mov	sp, r7
 8010054:	bdb0      	pop	{r4, r5, r7, pc}
 8010056:	bf00      	nop
 8010058:	24000114 	.word	0x24000114
 801005c:	240000f4 	.word	0x240000f4
 8010060:	2400011e 	.word	0x2400011e
 8010064:	08017138 	.word	0x08017138
 8010068:	080174e0 	.word	0x080174e0
 801006c:	08017184 	.word	0x08017184

08010070 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010070:	b480      	push	{r7}
 8010072:	b083      	sub	sp, #12
 8010074:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010076:	4b15      	ldr	r3, [pc, #84]	; (80100cc <tcp_get_next_optbyte+0x5c>)
 8010078:	881b      	ldrh	r3, [r3, #0]
 801007a:	1c5a      	adds	r2, r3, #1
 801007c:	b291      	uxth	r1, r2
 801007e:	4a13      	ldr	r2, [pc, #76]	; (80100cc <tcp_get_next_optbyte+0x5c>)
 8010080:	8011      	strh	r1, [r2, #0]
 8010082:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010084:	4b12      	ldr	r3, [pc, #72]	; (80100d0 <tcp_get_next_optbyte+0x60>)
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d004      	beq.n	8010096 <tcp_get_next_optbyte+0x26>
 801008c:	4b11      	ldr	r3, [pc, #68]	; (80100d4 <tcp_get_next_optbyte+0x64>)
 801008e:	881b      	ldrh	r3, [r3, #0]
 8010090:	88fa      	ldrh	r2, [r7, #6]
 8010092:	429a      	cmp	r2, r3
 8010094:	d208      	bcs.n	80100a8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010096:	4b10      	ldr	r3, [pc, #64]	; (80100d8 <tcp_get_next_optbyte+0x68>)
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	3314      	adds	r3, #20
 801009c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801009e:	88fb      	ldrh	r3, [r7, #6]
 80100a0:	683a      	ldr	r2, [r7, #0]
 80100a2:	4413      	add	r3, r2
 80100a4:	781b      	ldrb	r3, [r3, #0]
 80100a6:	e00b      	b.n	80100c0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80100a8:	88fb      	ldrh	r3, [r7, #6]
 80100aa:	b2da      	uxtb	r2, r3
 80100ac:	4b09      	ldr	r3, [pc, #36]	; (80100d4 <tcp_get_next_optbyte+0x64>)
 80100ae:	881b      	ldrh	r3, [r3, #0]
 80100b0:	b2db      	uxtb	r3, r3
 80100b2:	1ad3      	subs	r3, r2, r3
 80100b4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80100b6:	4b06      	ldr	r3, [pc, #24]	; (80100d0 <tcp_get_next_optbyte+0x60>)
 80100b8:	681a      	ldr	r2, [r3, #0]
 80100ba:	797b      	ldrb	r3, [r7, #5]
 80100bc:	4413      	add	r3, r2
 80100be:	781b      	ldrb	r3, [r3, #0]
  }
}
 80100c0:	4618      	mov	r0, r3
 80100c2:	370c      	adds	r7, #12
 80100c4:	46bd      	mov	sp, r7
 80100c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ca:	4770      	bx	lr
 80100cc:	24000110 	.word	0x24000110
 80100d0:	2400010c 	.word	0x2400010c
 80100d4:	2400010a 	.word	0x2400010a
 80100d8:	24000104 	.word	0x24000104

080100dc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80100dc:	b580      	push	{r7, lr}
 80100de:	b084      	sub	sp, #16
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d106      	bne.n	80100f8 <tcp_parseopt+0x1c>
 80100ea:	4b32      	ldr	r3, [pc, #200]	; (80101b4 <tcp_parseopt+0xd8>)
 80100ec:	f240 727d 	movw	r2, #1917	; 0x77d
 80100f0:	4931      	ldr	r1, [pc, #196]	; (80101b8 <tcp_parseopt+0xdc>)
 80100f2:	4832      	ldr	r0, [pc, #200]	; (80101bc <tcp_parseopt+0xe0>)
 80100f4:	f004 fe4a 	bl	8014d8c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80100f8:	4b31      	ldr	r3, [pc, #196]	; (80101c0 <tcp_parseopt+0xe4>)
 80100fa:	881b      	ldrh	r3, [r3, #0]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d055      	beq.n	80101ac <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010100:	4b30      	ldr	r3, [pc, #192]	; (80101c4 <tcp_parseopt+0xe8>)
 8010102:	2200      	movs	r2, #0
 8010104:	801a      	strh	r2, [r3, #0]
 8010106:	e045      	b.n	8010194 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8010108:	f7ff ffb2 	bl	8010070 <tcp_get_next_optbyte>
 801010c:	4603      	mov	r3, r0
 801010e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010110:	7bfb      	ldrb	r3, [r7, #15]
 8010112:	2b02      	cmp	r3, #2
 8010114:	d006      	beq.n	8010124 <tcp_parseopt+0x48>
 8010116:	2b02      	cmp	r3, #2
 8010118:	dc2b      	bgt.n	8010172 <tcp_parseopt+0x96>
 801011a:	2b00      	cmp	r3, #0
 801011c:	d041      	beq.n	80101a2 <tcp_parseopt+0xc6>
 801011e:	2b01      	cmp	r3, #1
 8010120:	d127      	bne.n	8010172 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8010122:	e037      	b.n	8010194 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010124:	f7ff ffa4 	bl	8010070 <tcp_get_next_optbyte>
 8010128:	4603      	mov	r3, r0
 801012a:	2b04      	cmp	r3, #4
 801012c:	d13b      	bne.n	80101a6 <tcp_parseopt+0xca>
 801012e:	4b25      	ldr	r3, [pc, #148]	; (80101c4 <tcp_parseopt+0xe8>)
 8010130:	881b      	ldrh	r3, [r3, #0]
 8010132:	3301      	adds	r3, #1
 8010134:	4a22      	ldr	r2, [pc, #136]	; (80101c0 <tcp_parseopt+0xe4>)
 8010136:	8812      	ldrh	r2, [r2, #0]
 8010138:	4293      	cmp	r3, r2
 801013a:	da34      	bge.n	80101a6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801013c:	f7ff ff98 	bl	8010070 <tcp_get_next_optbyte>
 8010140:	4603      	mov	r3, r0
 8010142:	b29b      	uxth	r3, r3
 8010144:	021b      	lsls	r3, r3, #8
 8010146:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010148:	f7ff ff92 	bl	8010070 <tcp_get_next_optbyte>
 801014c:	4603      	mov	r3, r0
 801014e:	b29a      	uxth	r2, r3
 8010150:	89bb      	ldrh	r3, [r7, #12]
 8010152:	4313      	orrs	r3, r2
 8010154:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010156:	89bb      	ldrh	r3, [r7, #12]
 8010158:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801015c:	d804      	bhi.n	8010168 <tcp_parseopt+0x8c>
 801015e:	89bb      	ldrh	r3, [r7, #12]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d001      	beq.n	8010168 <tcp_parseopt+0x8c>
 8010164:	89ba      	ldrh	r2, [r7, #12]
 8010166:	e001      	b.n	801016c <tcp_parseopt+0x90>
 8010168:	f44f 7206 	mov.w	r2, #536	; 0x218
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8010170:	e010      	b.n	8010194 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8010172:	f7ff ff7d 	bl	8010070 <tcp_get_next_optbyte>
 8010176:	4603      	mov	r3, r0
 8010178:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801017a:	7afb      	ldrb	r3, [r7, #11]
 801017c:	2b01      	cmp	r3, #1
 801017e:	d914      	bls.n	80101aa <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010180:	7afb      	ldrb	r3, [r7, #11]
 8010182:	b29a      	uxth	r2, r3
 8010184:	4b0f      	ldr	r3, [pc, #60]	; (80101c4 <tcp_parseopt+0xe8>)
 8010186:	881b      	ldrh	r3, [r3, #0]
 8010188:	4413      	add	r3, r2
 801018a:	b29b      	uxth	r3, r3
 801018c:	3b02      	subs	r3, #2
 801018e:	b29a      	uxth	r2, r3
 8010190:	4b0c      	ldr	r3, [pc, #48]	; (80101c4 <tcp_parseopt+0xe8>)
 8010192:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010194:	4b0b      	ldr	r3, [pc, #44]	; (80101c4 <tcp_parseopt+0xe8>)
 8010196:	881a      	ldrh	r2, [r3, #0]
 8010198:	4b09      	ldr	r3, [pc, #36]	; (80101c0 <tcp_parseopt+0xe4>)
 801019a:	881b      	ldrh	r3, [r3, #0]
 801019c:	429a      	cmp	r2, r3
 801019e:	d3b3      	bcc.n	8010108 <tcp_parseopt+0x2c>
 80101a0:	e004      	b.n	80101ac <tcp_parseopt+0xd0>
          return;
 80101a2:	bf00      	nop
 80101a4:	e002      	b.n	80101ac <tcp_parseopt+0xd0>
            return;
 80101a6:	bf00      	nop
 80101a8:	e000      	b.n	80101ac <tcp_parseopt+0xd0>
            return;
 80101aa:	bf00      	nop
      }
    }
  }
}
 80101ac:	3710      	adds	r7, #16
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}
 80101b2:	bf00      	nop
 80101b4:	08017138 	.word	0x08017138
 80101b8:	0801759c 	.word	0x0801759c
 80101bc:	08017184 	.word	0x08017184
 80101c0:	24000108 	.word	0x24000108
 80101c4:	24000110 	.word	0x24000110

080101c8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80101c8:	b480      	push	{r7}
 80101ca:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80101cc:	4b05      	ldr	r3, [pc, #20]	; (80101e4 <tcp_trigger_input_pcb_close+0x1c>)
 80101ce:	781b      	ldrb	r3, [r3, #0]
 80101d0:	f043 0310 	orr.w	r3, r3, #16
 80101d4:	b2da      	uxtb	r2, r3
 80101d6:	4b03      	ldr	r3, [pc, #12]	; (80101e4 <tcp_trigger_input_pcb_close+0x1c>)
 80101d8:	701a      	strb	r2, [r3, #0]
}
 80101da:	bf00      	nop
 80101dc:	46bd      	mov	sp, r7
 80101de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e2:	4770      	bx	lr
 80101e4:	24000121 	.word	0x24000121

080101e8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b084      	sub	sp, #16
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	60f8      	str	r0, [r7, #12]
 80101f0:	60b9      	str	r1, [r7, #8]
 80101f2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d00a      	beq.n	8010210 <tcp_route+0x28>
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	7a1b      	ldrb	r3, [r3, #8]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d006      	beq.n	8010210 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	7a1b      	ldrb	r3, [r3, #8]
 8010206:	4618      	mov	r0, r3
 8010208:	f7fb f8ae 	bl	800b368 <netif_get_by_index>
 801020c:	4603      	mov	r3, r0
 801020e:	e003      	b.n	8010218 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010210:	6878      	ldr	r0, [r7, #4]
 8010212:	f003 fafb 	bl	801380c <ip4_route>
 8010216:	4603      	mov	r3, r0
  }
}
 8010218:	4618      	mov	r0, r3
 801021a:	3710      	adds	r7, #16
 801021c:	46bd      	mov	sp, r7
 801021e:	bd80      	pop	{r7, pc}

08010220 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010220:	b590      	push	{r4, r7, lr}
 8010222:	b087      	sub	sp, #28
 8010224:	af00      	add	r7, sp, #0
 8010226:	60f8      	str	r0, [r7, #12]
 8010228:	60b9      	str	r1, [r7, #8]
 801022a:	603b      	str	r3, [r7, #0]
 801022c:	4613      	mov	r3, r2
 801022e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d105      	bne.n	8010242 <tcp_create_segment+0x22>
 8010236:	4b44      	ldr	r3, [pc, #272]	; (8010348 <tcp_create_segment+0x128>)
 8010238:	22a3      	movs	r2, #163	; 0xa3
 801023a:	4944      	ldr	r1, [pc, #272]	; (801034c <tcp_create_segment+0x12c>)
 801023c:	4844      	ldr	r0, [pc, #272]	; (8010350 <tcp_create_segment+0x130>)
 801023e:	f004 fda5 	bl	8014d8c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8010242:	68bb      	ldr	r3, [r7, #8]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d105      	bne.n	8010254 <tcp_create_segment+0x34>
 8010248:	4b3f      	ldr	r3, [pc, #252]	; (8010348 <tcp_create_segment+0x128>)
 801024a:	22a4      	movs	r2, #164	; 0xa4
 801024c:	4941      	ldr	r1, [pc, #260]	; (8010354 <tcp_create_segment+0x134>)
 801024e:	4840      	ldr	r0, [pc, #256]	; (8010350 <tcp_create_segment+0x130>)
 8010250:	f004 fd9c 	bl	8014d8c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010254:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010258:	009b      	lsls	r3, r3, #2
 801025a:	b2db      	uxtb	r3, r3
 801025c:	f003 0304 	and.w	r3, r3, #4
 8010260:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010262:	2003      	movs	r0, #3
 8010264:	f7fa fcfa 	bl	800ac5c <memp_malloc>
 8010268:	6138      	str	r0, [r7, #16]
 801026a:	693b      	ldr	r3, [r7, #16]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d104      	bne.n	801027a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010270:	68b8      	ldr	r0, [r7, #8]
 8010272:	f7fb fbd9 	bl	800ba28 <pbuf_free>
    return NULL;
 8010276:	2300      	movs	r3, #0
 8010278:	e061      	b.n	801033e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801027a:	693b      	ldr	r3, [r7, #16]
 801027c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010280:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010282:	693b      	ldr	r3, [r7, #16]
 8010284:	2200      	movs	r2, #0
 8010286:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010288:	693b      	ldr	r3, [r7, #16]
 801028a:	68ba      	ldr	r2, [r7, #8]
 801028c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801028e:	68bb      	ldr	r3, [r7, #8]
 8010290:	891a      	ldrh	r2, [r3, #8]
 8010292:	7dfb      	ldrb	r3, [r7, #23]
 8010294:	b29b      	uxth	r3, r3
 8010296:	429a      	cmp	r2, r3
 8010298:	d205      	bcs.n	80102a6 <tcp_create_segment+0x86>
 801029a:	4b2b      	ldr	r3, [pc, #172]	; (8010348 <tcp_create_segment+0x128>)
 801029c:	22b0      	movs	r2, #176	; 0xb0
 801029e:	492e      	ldr	r1, [pc, #184]	; (8010358 <tcp_create_segment+0x138>)
 80102a0:	482b      	ldr	r0, [pc, #172]	; (8010350 <tcp_create_segment+0x130>)
 80102a2:	f004 fd73 	bl	8014d8c <iprintf>
  seg->len = p->tot_len - optlen;
 80102a6:	68bb      	ldr	r3, [r7, #8]
 80102a8:	891a      	ldrh	r2, [r3, #8]
 80102aa:	7dfb      	ldrb	r3, [r7, #23]
 80102ac:	b29b      	uxth	r3, r3
 80102ae:	1ad3      	subs	r3, r2, r3
 80102b0:	b29a      	uxth	r2, r3
 80102b2:	693b      	ldr	r3, [r7, #16]
 80102b4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80102b6:	2114      	movs	r1, #20
 80102b8:	68b8      	ldr	r0, [r7, #8]
 80102ba:	f7fb fb1f 	bl	800b8fc <pbuf_add_header>
 80102be:	4603      	mov	r3, r0
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d004      	beq.n	80102ce <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80102c4:	6938      	ldr	r0, [r7, #16]
 80102c6:	f7fc ffec 	bl	800d2a2 <tcp_seg_free>
    return NULL;
 80102ca:	2300      	movs	r3, #0
 80102cc:	e037      	b.n	801033e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80102ce:	693b      	ldr	r3, [r7, #16]
 80102d0:	685b      	ldr	r3, [r3, #4]
 80102d2:	685a      	ldr	r2, [r3, #4]
 80102d4:	693b      	ldr	r3, [r7, #16]
 80102d6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	8ada      	ldrh	r2, [r3, #22]
 80102dc:	693b      	ldr	r3, [r7, #16]
 80102de:	68dc      	ldr	r4, [r3, #12]
 80102e0:	4610      	mov	r0, r2
 80102e2:	f7f9 ff8b 	bl	800a1fc <lwip_htons>
 80102e6:	4603      	mov	r3, r0
 80102e8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	8b1a      	ldrh	r2, [r3, #24]
 80102ee:	693b      	ldr	r3, [r7, #16]
 80102f0:	68dc      	ldr	r4, [r3, #12]
 80102f2:	4610      	mov	r0, r2
 80102f4:	f7f9 ff82 	bl	800a1fc <lwip_htons>
 80102f8:	4603      	mov	r3, r0
 80102fa:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80102fc:	693b      	ldr	r3, [r7, #16]
 80102fe:	68dc      	ldr	r4, [r3, #12]
 8010300:	6838      	ldr	r0, [r7, #0]
 8010302:	f7f9 ff90 	bl	800a226 <lwip_htonl>
 8010306:	4603      	mov	r3, r0
 8010308:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801030a:	7dfb      	ldrb	r3, [r7, #23]
 801030c:	089b      	lsrs	r3, r3, #2
 801030e:	b2db      	uxtb	r3, r3
 8010310:	b29b      	uxth	r3, r3
 8010312:	3305      	adds	r3, #5
 8010314:	b29b      	uxth	r3, r3
 8010316:	031b      	lsls	r3, r3, #12
 8010318:	b29a      	uxth	r2, r3
 801031a:	79fb      	ldrb	r3, [r7, #7]
 801031c:	b29b      	uxth	r3, r3
 801031e:	4313      	orrs	r3, r2
 8010320:	b29a      	uxth	r2, r3
 8010322:	693b      	ldr	r3, [r7, #16]
 8010324:	68dc      	ldr	r4, [r3, #12]
 8010326:	4610      	mov	r0, r2
 8010328:	f7f9 ff68 	bl	800a1fc <lwip_htons>
 801032c:	4603      	mov	r3, r0
 801032e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010330:	693b      	ldr	r3, [r7, #16]
 8010332:	68db      	ldr	r3, [r3, #12]
 8010334:	2200      	movs	r2, #0
 8010336:	749a      	strb	r2, [r3, #18]
 8010338:	2200      	movs	r2, #0
 801033a:	74da      	strb	r2, [r3, #19]
  return seg;
 801033c:	693b      	ldr	r3, [r7, #16]
}
 801033e:	4618      	mov	r0, r3
 8010340:	371c      	adds	r7, #28
 8010342:	46bd      	mov	sp, r7
 8010344:	bd90      	pop	{r4, r7, pc}
 8010346:	bf00      	nop
 8010348:	080175b8 	.word	0x080175b8
 801034c:	080175ec 	.word	0x080175ec
 8010350:	0801760c 	.word	0x0801760c
 8010354:	08017634 	.word	0x08017634
 8010358:	08017658 	.word	0x08017658

0801035c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b086      	sub	sp, #24
 8010360:	af00      	add	r7, sp, #0
 8010362:	607b      	str	r3, [r7, #4]
 8010364:	4603      	mov	r3, r0
 8010366:	73fb      	strb	r3, [r7, #15]
 8010368:	460b      	mov	r3, r1
 801036a:	81bb      	strh	r3, [r7, #12]
 801036c:	4613      	mov	r3, r2
 801036e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010370:	89bb      	ldrh	r3, [r7, #12]
 8010372:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d105      	bne.n	8010386 <tcp_pbuf_prealloc+0x2a>
 801037a:	4b30      	ldr	r3, [pc, #192]	; (801043c <tcp_pbuf_prealloc+0xe0>)
 801037c:	22e8      	movs	r2, #232	; 0xe8
 801037e:	4930      	ldr	r1, [pc, #192]	; (8010440 <tcp_pbuf_prealloc+0xe4>)
 8010380:	4830      	ldr	r0, [pc, #192]	; (8010444 <tcp_pbuf_prealloc+0xe8>)
 8010382:	f004 fd03 	bl	8014d8c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8010386:	6a3b      	ldr	r3, [r7, #32]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d105      	bne.n	8010398 <tcp_pbuf_prealloc+0x3c>
 801038c:	4b2b      	ldr	r3, [pc, #172]	; (801043c <tcp_pbuf_prealloc+0xe0>)
 801038e:	22e9      	movs	r2, #233	; 0xe9
 8010390:	492d      	ldr	r1, [pc, #180]	; (8010448 <tcp_pbuf_prealloc+0xec>)
 8010392:	482c      	ldr	r0, [pc, #176]	; (8010444 <tcp_pbuf_prealloc+0xe8>)
 8010394:	f004 fcfa 	bl	8014d8c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8010398:	89ba      	ldrh	r2, [r7, #12]
 801039a:	897b      	ldrh	r3, [r7, #10]
 801039c:	429a      	cmp	r2, r3
 801039e:	d221      	bcs.n	80103e4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80103a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80103a4:	f003 0302 	and.w	r3, r3, #2
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d111      	bne.n	80103d0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80103ac:	6a3b      	ldr	r3, [r7, #32]
 80103ae:	8b5b      	ldrh	r3, [r3, #26]
 80103b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d115      	bne.n	80103e4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80103b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d007      	beq.n	80103d0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80103c0:	6a3b      	ldr	r3, [r7, #32]
 80103c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d103      	bne.n	80103d0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80103c8:	6a3b      	ldr	r3, [r7, #32]
 80103ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d009      	beq.n	80103e4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80103d0:	89bb      	ldrh	r3, [r7, #12]
 80103d2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80103d6:	f023 0203 	bic.w	r2, r3, #3
 80103da:	897b      	ldrh	r3, [r7, #10]
 80103dc:	4293      	cmp	r3, r2
 80103de:	bf28      	it	cs
 80103e0:	4613      	movcs	r3, r2
 80103e2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80103e4:	8af9      	ldrh	r1, [r7, #22]
 80103e6:	7bfb      	ldrb	r3, [r7, #15]
 80103e8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80103ec:	4618      	mov	r0, r3
 80103ee:	f7fb f837 	bl	800b460 <pbuf_alloc>
 80103f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80103f4:	693b      	ldr	r3, [r7, #16]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d101      	bne.n	80103fe <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80103fa:	2300      	movs	r3, #0
 80103fc:	e019      	b.n	8010432 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80103fe:	693b      	ldr	r3, [r7, #16]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d006      	beq.n	8010414 <tcp_pbuf_prealloc+0xb8>
 8010406:	4b0d      	ldr	r3, [pc, #52]	; (801043c <tcp_pbuf_prealloc+0xe0>)
 8010408:	f240 120b 	movw	r2, #267	; 0x10b
 801040c:	490f      	ldr	r1, [pc, #60]	; (801044c <tcp_pbuf_prealloc+0xf0>)
 801040e:	480d      	ldr	r0, [pc, #52]	; (8010444 <tcp_pbuf_prealloc+0xe8>)
 8010410:	f004 fcbc 	bl	8014d8c <iprintf>
  *oversize = p->len - length;
 8010414:	693b      	ldr	r3, [r7, #16]
 8010416:	895a      	ldrh	r2, [r3, #10]
 8010418:	89bb      	ldrh	r3, [r7, #12]
 801041a:	1ad3      	subs	r3, r2, r3
 801041c:	b29a      	uxth	r2, r3
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8010422:	693b      	ldr	r3, [r7, #16]
 8010424:	89ba      	ldrh	r2, [r7, #12]
 8010426:	811a      	strh	r2, [r3, #8]
 8010428:	693b      	ldr	r3, [r7, #16]
 801042a:	891a      	ldrh	r2, [r3, #8]
 801042c:	693b      	ldr	r3, [r7, #16]
 801042e:	815a      	strh	r2, [r3, #10]
  return p;
 8010430:	693b      	ldr	r3, [r7, #16]
}
 8010432:	4618      	mov	r0, r3
 8010434:	3718      	adds	r7, #24
 8010436:	46bd      	mov	sp, r7
 8010438:	bd80      	pop	{r7, pc}
 801043a:	bf00      	nop
 801043c:	080175b8 	.word	0x080175b8
 8010440:	08017670 	.word	0x08017670
 8010444:	0801760c 	.word	0x0801760c
 8010448:	08017694 	.word	0x08017694
 801044c:	080176b4 	.word	0x080176b4

08010450 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b082      	sub	sp, #8
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
 8010458:	460b      	mov	r3, r1
 801045a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d106      	bne.n	8010470 <tcp_write_checks+0x20>
 8010462:	4b33      	ldr	r3, [pc, #204]	; (8010530 <tcp_write_checks+0xe0>)
 8010464:	f240 1233 	movw	r2, #307	; 0x133
 8010468:	4932      	ldr	r1, [pc, #200]	; (8010534 <tcp_write_checks+0xe4>)
 801046a:	4833      	ldr	r0, [pc, #204]	; (8010538 <tcp_write_checks+0xe8>)
 801046c:	f004 fc8e 	bl	8014d8c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	7d1b      	ldrb	r3, [r3, #20]
 8010474:	2b04      	cmp	r3, #4
 8010476:	d00e      	beq.n	8010496 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801047c:	2b07      	cmp	r3, #7
 801047e:	d00a      	beq.n	8010496 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8010484:	2b02      	cmp	r3, #2
 8010486:	d006      	beq.n	8010496 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801048c:	2b03      	cmp	r3, #3
 801048e:	d002      	beq.n	8010496 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8010490:	f06f 030a 	mvn.w	r3, #10
 8010494:	e048      	b.n	8010528 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8010496:	887b      	ldrh	r3, [r7, #2]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d101      	bne.n	80104a0 <tcp_write_checks+0x50>
    return ERR_OK;
 801049c:	2300      	movs	r3, #0
 801049e:	e043      	b.n	8010528 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80104a6:	887a      	ldrh	r2, [r7, #2]
 80104a8:	429a      	cmp	r2, r3
 80104aa:	d909      	bls.n	80104c0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	8b5b      	ldrh	r3, [r3, #26]
 80104b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104b4:	b29a      	uxth	r2, r3
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80104ba:	f04f 33ff 	mov.w	r3, #4294967295
 80104be:	e033      	b.n	8010528 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80104c6:	2b08      	cmp	r3, #8
 80104c8:	d909      	bls.n	80104de <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	8b5b      	ldrh	r3, [r3, #26]
 80104ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104d2:	b29a      	uxth	r2, r3
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80104d8:	f04f 33ff 	mov.w	r3, #4294967295
 80104dc:	e024      	b.n	8010528 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d00f      	beq.n	8010508 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d11a      	bne.n	8010526 <tcp_write_checks+0xd6>
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d116      	bne.n	8010526 <tcp_write_checks+0xd6>
 80104f8:	4b0d      	ldr	r3, [pc, #52]	; (8010530 <tcp_write_checks+0xe0>)
 80104fa:	f240 1255 	movw	r2, #341	; 0x155
 80104fe:	490f      	ldr	r1, [pc, #60]	; (801053c <tcp_write_checks+0xec>)
 8010500:	480d      	ldr	r0, [pc, #52]	; (8010538 <tcp_write_checks+0xe8>)
 8010502:	f004 fc43 	bl	8014d8c <iprintf>
 8010506:	e00e      	b.n	8010526 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801050c:	2b00      	cmp	r3, #0
 801050e:	d103      	bne.n	8010518 <tcp_write_checks+0xc8>
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010514:	2b00      	cmp	r3, #0
 8010516:	d006      	beq.n	8010526 <tcp_write_checks+0xd6>
 8010518:	4b05      	ldr	r3, [pc, #20]	; (8010530 <tcp_write_checks+0xe0>)
 801051a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801051e:	4908      	ldr	r1, [pc, #32]	; (8010540 <tcp_write_checks+0xf0>)
 8010520:	4805      	ldr	r0, [pc, #20]	; (8010538 <tcp_write_checks+0xe8>)
 8010522:	f004 fc33 	bl	8014d8c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8010526:	2300      	movs	r3, #0
}
 8010528:	4618      	mov	r0, r3
 801052a:	3708      	adds	r7, #8
 801052c:	46bd      	mov	sp, r7
 801052e:	bd80      	pop	{r7, pc}
 8010530:	080175b8 	.word	0x080175b8
 8010534:	080176c8 	.word	0x080176c8
 8010538:	0801760c 	.word	0x0801760c
 801053c:	080176e8 	.word	0x080176e8
 8010540:	08017724 	.word	0x08017724

08010544 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010544:	b590      	push	{r4, r7, lr}
 8010546:	b09b      	sub	sp, #108	; 0x6c
 8010548:	af04      	add	r7, sp, #16
 801054a:	60f8      	str	r0, [r7, #12]
 801054c:	60b9      	str	r1, [r7, #8]
 801054e:	4611      	mov	r1, r2
 8010550:	461a      	mov	r2, r3
 8010552:	460b      	mov	r3, r1
 8010554:	80fb      	strh	r3, [r7, #6]
 8010556:	4613      	mov	r3, r2
 8010558:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801055a:	2300      	movs	r3, #0
 801055c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801055e:	2300      	movs	r3, #0
 8010560:	653b      	str	r3, [r7, #80]	; 0x50
 8010562:	2300      	movs	r3, #0
 8010564:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010566:	2300      	movs	r3, #0
 8010568:	64bb      	str	r3, [r7, #72]	; 0x48
 801056a:	2300      	movs	r3, #0
 801056c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801056e:	2300      	movs	r3, #0
 8010570:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8010574:	2300      	movs	r3, #0
 8010576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801057a:	2300      	movs	r3, #0
 801057c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801057e:	2300      	movs	r3, #0
 8010580:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8010582:	2300      	movs	r3, #0
 8010584:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d109      	bne.n	80105a0 <tcp_write+0x5c>
 801058c:	4ba4      	ldr	r3, [pc, #656]	; (8010820 <tcp_write+0x2dc>)
 801058e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8010592:	49a4      	ldr	r1, [pc, #656]	; (8010824 <tcp_write+0x2e0>)
 8010594:	48a4      	ldr	r0, [pc, #656]	; (8010828 <tcp_write+0x2e4>)
 8010596:	f004 fbf9 	bl	8014d8c <iprintf>
 801059a:	f06f 030f 	mvn.w	r3, #15
 801059e:	e32a      	b.n	8010bf6 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80105a6:	085b      	lsrs	r3, r3, #1
 80105a8:	b29a      	uxth	r2, r3
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80105ae:	4293      	cmp	r3, r2
 80105b0:	bf28      	it	cs
 80105b2:	4613      	movcs	r3, r2
 80105b4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80105b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d102      	bne.n	80105c2 <tcp_write+0x7e>
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80105c0:	e000      	b.n	80105c4 <tcp_write+0x80>
 80105c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80105c4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80105c6:	68bb      	ldr	r3, [r7, #8]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d109      	bne.n	80105e0 <tcp_write+0x9c>
 80105cc:	4b94      	ldr	r3, [pc, #592]	; (8010820 <tcp_write+0x2dc>)
 80105ce:	f240 12ad 	movw	r2, #429	; 0x1ad
 80105d2:	4996      	ldr	r1, [pc, #600]	; (801082c <tcp_write+0x2e8>)
 80105d4:	4894      	ldr	r0, [pc, #592]	; (8010828 <tcp_write+0x2e4>)
 80105d6:	f004 fbd9 	bl	8014d8c <iprintf>
 80105da:	f06f 030f 	mvn.w	r3, #15
 80105de:	e30a      	b.n	8010bf6 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80105e0:	88fb      	ldrh	r3, [r7, #6]
 80105e2:	4619      	mov	r1, r3
 80105e4:	68f8      	ldr	r0, [r7, #12]
 80105e6:	f7ff ff33 	bl	8010450 <tcp_write_checks>
 80105ea:	4603      	mov	r3, r0
 80105ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80105f0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d002      	beq.n	80105fe <tcp_write+0xba>
    return err;
 80105f8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80105fc:	e2fb      	b.n	8010bf6 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010604:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010608:	2300      	movs	r3, #0
 801060a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010612:	2b00      	cmp	r3, #0
 8010614:	f000 80f6 	beq.w	8010804 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801061c:	653b      	str	r3, [r7, #80]	; 0x50
 801061e:	e002      	b.n	8010626 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8010620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	2b00      	cmp	r3, #0
 801062c:	d1f8      	bne.n	8010620 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801062e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010630:	7a9b      	ldrb	r3, [r3, #10]
 8010632:	009b      	lsls	r3, r3, #2
 8010634:	b29b      	uxth	r3, r3
 8010636:	f003 0304 	and.w	r3, r3, #4
 801063a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801063c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801063e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010640:	891b      	ldrh	r3, [r3, #8]
 8010642:	4619      	mov	r1, r3
 8010644:	8c3b      	ldrh	r3, [r7, #32]
 8010646:	440b      	add	r3, r1
 8010648:	429a      	cmp	r2, r3
 801064a:	da06      	bge.n	801065a <tcp_write+0x116>
 801064c:	4b74      	ldr	r3, [pc, #464]	; (8010820 <tcp_write+0x2dc>)
 801064e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010652:	4977      	ldr	r1, [pc, #476]	; (8010830 <tcp_write+0x2ec>)
 8010654:	4874      	ldr	r0, [pc, #464]	; (8010828 <tcp_write+0x2e4>)
 8010656:	f004 fb99 	bl	8014d8c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801065a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801065c:	891a      	ldrh	r2, [r3, #8]
 801065e:	8c3b      	ldrh	r3, [r7, #32]
 8010660:	4413      	add	r3, r2
 8010662:	b29b      	uxth	r3, r3
 8010664:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010666:	1ad3      	subs	r3, r2, r3
 8010668:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010670:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8010672:	8a7b      	ldrh	r3, [r7, #18]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d026      	beq.n	80106c6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010678:	8a7b      	ldrh	r3, [r7, #18]
 801067a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801067c:	429a      	cmp	r2, r3
 801067e:	d206      	bcs.n	801068e <tcp_write+0x14a>
 8010680:	4b67      	ldr	r3, [pc, #412]	; (8010820 <tcp_write+0x2dc>)
 8010682:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8010686:	496b      	ldr	r1, [pc, #428]	; (8010834 <tcp_write+0x2f0>)
 8010688:	4867      	ldr	r0, [pc, #412]	; (8010828 <tcp_write+0x2e4>)
 801068a:	f004 fb7f 	bl	8014d8c <iprintf>
      seg = last_unsent;
 801068e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010690:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8010692:	8a7b      	ldrh	r3, [r7, #18]
 8010694:	88fa      	ldrh	r2, [r7, #6]
 8010696:	4293      	cmp	r3, r2
 8010698:	bf28      	it	cs
 801069a:	4613      	movcs	r3, r2
 801069c:	b29b      	uxth	r3, r3
 801069e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80106a0:	4293      	cmp	r3, r2
 80106a2:	bf28      	it	cs
 80106a4:	4613      	movcs	r3, r2
 80106a6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80106a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80106ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80106ae:	4413      	add	r3, r2
 80106b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80106b4:	8a7a      	ldrh	r2, [r7, #18]
 80106b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80106b8:	1ad3      	subs	r3, r2, r3
 80106ba:	b29b      	uxth	r3, r3
 80106bc:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80106be:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80106c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80106c2:	1ad3      	subs	r3, r2, r3
 80106c4:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80106c6:	8a7b      	ldrh	r3, [r7, #18]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d00b      	beq.n	80106e4 <tcp_write+0x1a0>
 80106cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80106d0:	88fb      	ldrh	r3, [r7, #6]
 80106d2:	429a      	cmp	r2, r3
 80106d4:	d006      	beq.n	80106e4 <tcp_write+0x1a0>
 80106d6:	4b52      	ldr	r3, [pc, #328]	; (8010820 <tcp_write+0x2dc>)
 80106d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80106dc:	4956      	ldr	r1, [pc, #344]	; (8010838 <tcp_write+0x2f4>)
 80106de:	4852      	ldr	r0, [pc, #328]	; (8010828 <tcp_write+0x2e4>)
 80106e0:	f004 fb54 	bl	8014d8c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80106e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80106e8:	88fb      	ldrh	r3, [r7, #6]
 80106ea:	429a      	cmp	r2, r3
 80106ec:	f080 8167 	bcs.w	80109be <tcp_write+0x47a>
 80106f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	f000 8163 	beq.w	80109be <tcp_write+0x47a>
 80106f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106fa:	891b      	ldrh	r3, [r3, #8]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	f000 815e 	beq.w	80109be <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8010702:	88fa      	ldrh	r2, [r7, #6]
 8010704:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010708:	1ad2      	subs	r2, r2, r3
 801070a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801070c:	4293      	cmp	r3, r2
 801070e:	bfa8      	it	ge
 8010710:	4613      	movge	r3, r2
 8010712:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8010714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010716:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010718:	797b      	ldrb	r3, [r7, #5]
 801071a:	f003 0301 	and.w	r3, r3, #1
 801071e:	2b00      	cmp	r3, #0
 8010720:	d027      	beq.n	8010772 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8010722:	f107 0012 	add.w	r0, r7, #18
 8010726:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010728:	8bf9      	ldrh	r1, [r7, #30]
 801072a:	2301      	movs	r3, #1
 801072c:	9302      	str	r3, [sp, #8]
 801072e:	797b      	ldrb	r3, [r7, #5]
 8010730:	9301      	str	r3, [sp, #4]
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	9300      	str	r3, [sp, #0]
 8010736:	4603      	mov	r3, r0
 8010738:	2000      	movs	r0, #0
 801073a:	f7ff fe0f 	bl	801035c <tcp_pbuf_prealloc>
 801073e:	6578      	str	r0, [r7, #84]	; 0x54
 8010740:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010742:	2b00      	cmp	r3, #0
 8010744:	f000 8225 	beq.w	8010b92 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8010748:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801074a:	6858      	ldr	r0, [r3, #4]
 801074c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010750:	68ba      	ldr	r2, [r7, #8]
 8010752:	4413      	add	r3, r2
 8010754:	8bfa      	ldrh	r2, [r7, #30]
 8010756:	4619      	mov	r1, r3
 8010758:	f004 fb02 	bl	8014d60 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801075c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801075e:	f7fb f9eb 	bl	800bb38 <pbuf_clen>
 8010762:	4603      	mov	r3, r0
 8010764:	461a      	mov	r2, r3
 8010766:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801076a:	4413      	add	r3, r2
 801076c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8010770:	e041      	b.n	80107f6 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8010772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010774:	685b      	ldr	r3, [r3, #4]
 8010776:	637b      	str	r3, [r7, #52]	; 0x34
 8010778:	e002      	b.n	8010780 <tcp_write+0x23c>
 801077a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	637b      	str	r3, [r7, #52]	; 0x34
 8010780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d1f8      	bne.n	801077a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801078a:	7b1b      	ldrb	r3, [r3, #12]
 801078c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010790:	2b00      	cmp	r3, #0
 8010792:	d115      	bne.n	80107c0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8010794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010796:	685b      	ldr	r3, [r3, #4]
 8010798:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801079a:	8952      	ldrh	r2, [r2, #10]
 801079c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801079e:	68ba      	ldr	r2, [r7, #8]
 80107a0:	429a      	cmp	r2, r3
 80107a2:	d10d      	bne.n	80107c0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80107a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d006      	beq.n	80107ba <tcp_write+0x276>
 80107ac:	4b1c      	ldr	r3, [pc, #112]	; (8010820 <tcp_write+0x2dc>)
 80107ae:	f240 2231 	movw	r2, #561	; 0x231
 80107b2:	4922      	ldr	r1, [pc, #136]	; (801083c <tcp_write+0x2f8>)
 80107b4:	481c      	ldr	r0, [pc, #112]	; (8010828 <tcp_write+0x2e4>)
 80107b6:	f004 fae9 	bl	8014d8c <iprintf>
          extendlen = seglen;
 80107ba:	8bfb      	ldrh	r3, [r7, #30]
 80107bc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80107be:	e01a      	b.n	80107f6 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80107c0:	8bfb      	ldrh	r3, [r7, #30]
 80107c2:	2201      	movs	r2, #1
 80107c4:	4619      	mov	r1, r3
 80107c6:	2000      	movs	r0, #0
 80107c8:	f7fa fe4a 	bl	800b460 <pbuf_alloc>
 80107cc:	6578      	str	r0, [r7, #84]	; 0x54
 80107ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	f000 81e0 	beq.w	8010b96 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80107d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80107da:	68ba      	ldr	r2, [r7, #8]
 80107dc:	441a      	add	r2, r3
 80107de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80107e0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80107e2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80107e4:	f7fb f9a8 	bl	800bb38 <pbuf_clen>
 80107e8:	4603      	mov	r3, r0
 80107ea:	461a      	mov	r2, r3
 80107ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80107f0:	4413      	add	r3, r2
 80107f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80107f6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80107fa:	8bfb      	ldrh	r3, [r7, #30]
 80107fc:	4413      	add	r3, r2
 80107fe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010802:	e0dc      	b.n	80109be <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801080a:	2b00      	cmp	r3, #0
 801080c:	f000 80d7 	beq.w	80109be <tcp_write+0x47a>
 8010810:	4b03      	ldr	r3, [pc, #12]	; (8010820 <tcp_write+0x2dc>)
 8010812:	f240 224a 	movw	r2, #586	; 0x24a
 8010816:	490a      	ldr	r1, [pc, #40]	; (8010840 <tcp_write+0x2fc>)
 8010818:	4803      	ldr	r0, [pc, #12]	; (8010828 <tcp_write+0x2e4>)
 801081a:	f004 fab7 	bl	8014d8c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801081e:	e0ce      	b.n	80109be <tcp_write+0x47a>
 8010820:	080175b8 	.word	0x080175b8
 8010824:	08017758 	.word	0x08017758
 8010828:	0801760c 	.word	0x0801760c
 801082c:	08017770 	.word	0x08017770
 8010830:	080177a4 	.word	0x080177a4
 8010834:	080177bc 	.word	0x080177bc
 8010838:	080177dc 	.word	0x080177dc
 801083c:	080177fc 	.word	0x080177fc
 8010840:	08017828 	.word	0x08017828
    struct pbuf *p;
    u16_t left = len - pos;
 8010844:	88fa      	ldrh	r2, [r7, #6]
 8010846:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801084a:	1ad3      	subs	r3, r2, r3
 801084c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801084e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010852:	b29b      	uxth	r3, r3
 8010854:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010856:	1ad3      	subs	r3, r2, r3
 8010858:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801085a:	8b7a      	ldrh	r2, [r7, #26]
 801085c:	8bbb      	ldrh	r3, [r7, #28]
 801085e:	4293      	cmp	r3, r2
 8010860:	bf28      	it	cs
 8010862:	4613      	movcs	r3, r2
 8010864:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010866:	797b      	ldrb	r3, [r7, #5]
 8010868:	f003 0301 	and.w	r3, r3, #1
 801086c:	2b00      	cmp	r3, #0
 801086e:	d036      	beq.n	80108de <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8010870:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010874:	b29a      	uxth	r2, r3
 8010876:	8b3b      	ldrh	r3, [r7, #24]
 8010878:	4413      	add	r3, r2
 801087a:	b299      	uxth	r1, r3
 801087c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801087e:	2b00      	cmp	r3, #0
 8010880:	bf0c      	ite	eq
 8010882:	2301      	moveq	r3, #1
 8010884:	2300      	movne	r3, #0
 8010886:	b2db      	uxtb	r3, r3
 8010888:	f107 0012 	add.w	r0, r7, #18
 801088c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801088e:	9302      	str	r3, [sp, #8]
 8010890:	797b      	ldrb	r3, [r7, #5]
 8010892:	9301      	str	r3, [sp, #4]
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	9300      	str	r3, [sp, #0]
 8010898:	4603      	mov	r3, r0
 801089a:	2036      	movs	r0, #54	; 0x36
 801089c:	f7ff fd5e 	bl	801035c <tcp_pbuf_prealloc>
 80108a0:	6338      	str	r0, [r7, #48]	; 0x30
 80108a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	f000 8178 	beq.w	8010b9a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80108aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ac:	895b      	ldrh	r3, [r3, #10]
 80108ae:	8b3a      	ldrh	r2, [r7, #24]
 80108b0:	429a      	cmp	r2, r3
 80108b2:	d906      	bls.n	80108c2 <tcp_write+0x37e>
 80108b4:	4b8c      	ldr	r3, [pc, #560]	; (8010ae8 <tcp_write+0x5a4>)
 80108b6:	f240 2266 	movw	r2, #614	; 0x266
 80108ba:	498c      	ldr	r1, [pc, #560]	; (8010aec <tcp_write+0x5a8>)
 80108bc:	488c      	ldr	r0, [pc, #560]	; (8010af0 <tcp_write+0x5ac>)
 80108be:	f004 fa65 	bl	8014d8c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80108c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108c4:	685a      	ldr	r2, [r3, #4]
 80108c6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80108ca:	18d0      	adds	r0, r2, r3
 80108cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80108d0:	68ba      	ldr	r2, [r7, #8]
 80108d2:	4413      	add	r3, r2
 80108d4:	8b3a      	ldrh	r2, [r7, #24]
 80108d6:	4619      	mov	r1, r3
 80108d8:	f004 fa42 	bl	8014d60 <memcpy>
 80108dc:	e02f      	b.n	801093e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80108de:	8a7b      	ldrh	r3, [r7, #18]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d006      	beq.n	80108f2 <tcp_write+0x3ae>
 80108e4:	4b80      	ldr	r3, [pc, #512]	; (8010ae8 <tcp_write+0x5a4>)
 80108e6:	f240 2271 	movw	r2, #625	; 0x271
 80108ea:	4982      	ldr	r1, [pc, #520]	; (8010af4 <tcp_write+0x5b0>)
 80108ec:	4880      	ldr	r0, [pc, #512]	; (8010af0 <tcp_write+0x5ac>)
 80108ee:	f004 fa4d 	bl	8014d8c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80108f2:	8b3b      	ldrh	r3, [r7, #24]
 80108f4:	2201      	movs	r2, #1
 80108f6:	4619      	mov	r1, r3
 80108f8:	2036      	movs	r0, #54	; 0x36
 80108fa:	f7fa fdb1 	bl	800b460 <pbuf_alloc>
 80108fe:	6178      	str	r0, [r7, #20]
 8010900:	697b      	ldr	r3, [r7, #20]
 8010902:	2b00      	cmp	r3, #0
 8010904:	f000 814b 	beq.w	8010b9e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8010908:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801090c:	68ba      	ldr	r2, [r7, #8]
 801090e:	441a      	add	r2, r3
 8010910:	697b      	ldr	r3, [r7, #20]
 8010912:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010914:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010918:	b29b      	uxth	r3, r3
 801091a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801091e:	4619      	mov	r1, r3
 8010920:	2036      	movs	r0, #54	; 0x36
 8010922:	f7fa fd9d 	bl	800b460 <pbuf_alloc>
 8010926:	6338      	str	r0, [r7, #48]	; 0x30
 8010928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801092a:	2b00      	cmp	r3, #0
 801092c:	d103      	bne.n	8010936 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801092e:	6978      	ldr	r0, [r7, #20]
 8010930:	f7fb f87a 	bl	800ba28 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8010934:	e136      	b.n	8010ba4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8010936:	6979      	ldr	r1, [r7, #20]
 8010938:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801093a:	f7fb f937 	bl	800bbac <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801093e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010940:	f7fb f8fa 	bl	800bb38 <pbuf_clen>
 8010944:	4603      	mov	r3, r0
 8010946:	461a      	mov	r2, r3
 8010948:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801094c:	4413      	add	r3, r2
 801094e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8010952:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010956:	2b09      	cmp	r3, #9
 8010958:	d903      	bls.n	8010962 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801095a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801095c:	f7fb f864 	bl	800ba28 <pbuf_free>
      goto memerr;
 8010960:	e120      	b.n	8010ba4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010966:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801096a:	441a      	add	r2, r3
 801096c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010970:	9300      	str	r3, [sp, #0]
 8010972:	4613      	mov	r3, r2
 8010974:	2200      	movs	r2, #0
 8010976:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010978:	68f8      	ldr	r0, [r7, #12]
 801097a:	f7ff fc51 	bl	8010220 <tcp_create_segment>
 801097e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010982:	2b00      	cmp	r3, #0
 8010984:	f000 810d 	beq.w	8010ba2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8010988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801098a:	2b00      	cmp	r3, #0
 801098c:	d102      	bne.n	8010994 <tcp_write+0x450>
      queue = seg;
 801098e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010990:	647b      	str	r3, [r7, #68]	; 0x44
 8010992:	e00c      	b.n	80109ae <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8010994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010996:	2b00      	cmp	r3, #0
 8010998:	d106      	bne.n	80109a8 <tcp_write+0x464>
 801099a:	4b53      	ldr	r3, [pc, #332]	; (8010ae8 <tcp_write+0x5a4>)
 801099c:	f240 22ab 	movw	r2, #683	; 0x2ab
 80109a0:	4955      	ldr	r1, [pc, #340]	; (8010af8 <tcp_write+0x5b4>)
 80109a2:	4853      	ldr	r0, [pc, #332]	; (8010af0 <tcp_write+0x5ac>)
 80109a4:	f004 f9f2 	bl	8014d8c <iprintf>
      prev_seg->next = seg;
 80109a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80109ac:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80109ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109b0:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80109b2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80109b6:	8b3b      	ldrh	r3, [r7, #24]
 80109b8:	4413      	add	r3, r2
 80109ba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80109be:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80109c2:	88fb      	ldrh	r3, [r7, #6]
 80109c4:	429a      	cmp	r2, r3
 80109c6:	f4ff af3d 	bcc.w	8010844 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80109ca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d02c      	beq.n	8010a2a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80109d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109d2:	685b      	ldr	r3, [r3, #4]
 80109d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80109d6:	e01e      	b.n	8010a16 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80109d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109da:	891a      	ldrh	r2, [r3, #8]
 80109dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80109de:	4413      	add	r3, r2
 80109e0:	b29a      	uxth	r2, r3
 80109e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109e4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80109e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d110      	bne.n	8010a10 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80109ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109f0:	685b      	ldr	r3, [r3, #4]
 80109f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80109f4:	8952      	ldrh	r2, [r2, #10]
 80109f6:	4413      	add	r3, r2
 80109f8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80109fa:	68b9      	ldr	r1, [r7, #8]
 80109fc:	4618      	mov	r0, r3
 80109fe:	f004 f9af 	bl	8014d60 <memcpy>
        p->len += oversize_used;
 8010a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a04:	895a      	ldrh	r2, [r3, #10]
 8010a06:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010a08:	4413      	add	r3, r2
 8010a0a:	b29a      	uxth	r2, r3
 8010a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a0e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8010a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d1dd      	bne.n	80109d8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8010a1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a1e:	891a      	ldrh	r2, [r3, #8]
 8010a20:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010a22:	4413      	add	r3, r2
 8010a24:	b29a      	uxth	r2, r3
 8010a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a28:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8010a2a:	8a7a      	ldrh	r2, [r7, #18]
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8010a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d018      	beq.n	8010a6a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8010a38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d106      	bne.n	8010a4c <tcp_write+0x508>
 8010a3e:	4b2a      	ldr	r3, [pc, #168]	; (8010ae8 <tcp_write+0x5a4>)
 8010a40:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8010a44:	492d      	ldr	r1, [pc, #180]	; (8010afc <tcp_write+0x5b8>)
 8010a46:	482a      	ldr	r0, [pc, #168]	; (8010af0 <tcp_write+0x5ac>)
 8010a48:	f004 f9a0 	bl	8014d8c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8010a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a4e:	685b      	ldr	r3, [r3, #4]
 8010a50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010a52:	4618      	mov	r0, r3
 8010a54:	f7fb f8aa 	bl	800bbac <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8010a58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a5a:	891a      	ldrh	r2, [r3, #8]
 8010a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a5e:	891b      	ldrh	r3, [r3, #8]
 8010a60:	4413      	add	r3, r2
 8010a62:	b29a      	uxth	r2, r3
 8010a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a66:	811a      	strh	r2, [r3, #8]
 8010a68:	e037      	b.n	8010ada <tcp_write+0x596>
  } else if (extendlen > 0) {
 8010a6a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d034      	beq.n	8010ada <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8010a70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d003      	beq.n	8010a7e <tcp_write+0x53a>
 8010a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a78:	685b      	ldr	r3, [r3, #4]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d106      	bne.n	8010a8c <tcp_write+0x548>
 8010a7e:	4b1a      	ldr	r3, [pc, #104]	; (8010ae8 <tcp_write+0x5a4>)
 8010a80:	f240 22e6 	movw	r2, #742	; 0x2e6
 8010a84:	491e      	ldr	r1, [pc, #120]	; (8010b00 <tcp_write+0x5bc>)
 8010a86:	481a      	ldr	r0, [pc, #104]	; (8010af0 <tcp_write+0x5ac>)
 8010a88:	f004 f980 	bl	8014d8c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a8e:	685b      	ldr	r3, [r3, #4]
 8010a90:	62bb      	str	r3, [r7, #40]	; 0x28
 8010a92:	e009      	b.n	8010aa8 <tcp_write+0x564>
      p->tot_len += extendlen;
 8010a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a96:	891a      	ldrh	r2, [r3, #8]
 8010a98:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010a9a:	4413      	add	r3, r2
 8010a9c:	b29a      	uxth	r2, r3
 8010a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aa0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8010aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d1f1      	bne.n	8010a94 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8010ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ab2:	891a      	ldrh	r2, [r3, #8]
 8010ab4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010ab6:	4413      	add	r3, r2
 8010ab8:	b29a      	uxth	r2, r3
 8010aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010abc:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8010abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ac0:	895a      	ldrh	r2, [r3, #10]
 8010ac2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010ac4:	4413      	add	r3, r2
 8010ac6:	b29a      	uxth	r2, r3
 8010ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aca:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8010acc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ace:	891a      	ldrh	r2, [r3, #8]
 8010ad0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010ad2:	4413      	add	r3, r2
 8010ad4:	b29a      	uxth	r2, r3
 8010ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ad8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8010ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d111      	bne.n	8010b04 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010ae4:	66da      	str	r2, [r3, #108]	; 0x6c
 8010ae6:	e010      	b.n	8010b0a <tcp_write+0x5c6>
 8010ae8:	080175b8 	.word	0x080175b8
 8010aec:	08017858 	.word	0x08017858
 8010af0:	0801760c 	.word	0x0801760c
 8010af4:	08017898 	.word	0x08017898
 8010af8:	080178a8 	.word	0x080178a8
 8010afc:	080178bc 	.word	0x080178bc
 8010b00:	080178f4 	.word	0x080178f4
  } else {
    last_unsent->next = queue;
 8010b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010b08:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010b0e:	88fb      	ldrh	r3, [r7, #6]
 8010b10:	441a      	add	r2, r3
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010b1c:	88fb      	ldrh	r3, [r7, #6]
 8010b1e:	1ad3      	subs	r3, r2, r3
 8010b20:	b29a      	uxth	r2, r3
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010b2e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d00e      	beq.n	8010b5a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d10a      	bne.n	8010b5a <tcp_write+0x616>
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d106      	bne.n	8010b5a <tcp_write+0x616>
 8010b4c:	4b2c      	ldr	r3, [pc, #176]	; (8010c00 <tcp_write+0x6bc>)
 8010b4e:	f240 3212 	movw	r2, #786	; 0x312
 8010b52:	492c      	ldr	r1, [pc, #176]	; (8010c04 <tcp_write+0x6c0>)
 8010b54:	482c      	ldr	r0, [pc, #176]	; (8010c08 <tcp_write+0x6c4>)
 8010b56:	f004 f919 	bl	8014d8c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8010b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d016      	beq.n	8010b8e <tcp_write+0x64a>
 8010b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b62:	68db      	ldr	r3, [r3, #12]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d012      	beq.n	8010b8e <tcp_write+0x64a>
 8010b68:	797b      	ldrb	r3, [r7, #5]
 8010b6a:	f003 0302 	and.w	r3, r3, #2
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d10d      	bne.n	8010b8e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8010b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b74:	68db      	ldr	r3, [r3, #12]
 8010b76:	899b      	ldrh	r3, [r3, #12]
 8010b78:	b29c      	uxth	r4, r3
 8010b7a:	2008      	movs	r0, #8
 8010b7c:	f7f9 fb3e 	bl	800a1fc <lwip_htons>
 8010b80:	4603      	mov	r3, r0
 8010b82:	461a      	mov	r2, r3
 8010b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b86:	68db      	ldr	r3, [r3, #12]
 8010b88:	4322      	orrs	r2, r4
 8010b8a:	b292      	uxth	r2, r2
 8010b8c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8010b8e:	2300      	movs	r3, #0
 8010b90:	e031      	b.n	8010bf6 <tcp_write+0x6b2>
          goto memerr;
 8010b92:	bf00      	nop
 8010b94:	e006      	b.n	8010ba4 <tcp_write+0x660>
            goto memerr;
 8010b96:	bf00      	nop
 8010b98:	e004      	b.n	8010ba4 <tcp_write+0x660>
        goto memerr;
 8010b9a:	bf00      	nop
 8010b9c:	e002      	b.n	8010ba4 <tcp_write+0x660>
        goto memerr;
 8010b9e:	bf00      	nop
 8010ba0:	e000      	b.n	8010ba4 <tcp_write+0x660>
      goto memerr;
 8010ba2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	8b5b      	ldrh	r3, [r3, #26]
 8010ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bac:	b29a      	uxth	r2, r3
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8010bb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d002      	beq.n	8010bbe <tcp_write+0x67a>
    pbuf_free(concat_p);
 8010bb8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010bba:	f7fa ff35 	bl	800ba28 <pbuf_free>
  }
  if (queue != NULL) {
 8010bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d002      	beq.n	8010bca <tcp_write+0x686>
    tcp_segs_free(queue);
 8010bc4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010bc6:	f7fc fb57 	bl	800d278 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d00e      	beq.n	8010bf2 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d10a      	bne.n	8010bf2 <tcp_write+0x6ae>
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d106      	bne.n	8010bf2 <tcp_write+0x6ae>
 8010be4:	4b06      	ldr	r3, [pc, #24]	; (8010c00 <tcp_write+0x6bc>)
 8010be6:	f240 3227 	movw	r2, #807	; 0x327
 8010bea:	4906      	ldr	r1, [pc, #24]	; (8010c04 <tcp_write+0x6c0>)
 8010bec:	4806      	ldr	r0, [pc, #24]	; (8010c08 <tcp_write+0x6c4>)
 8010bee:	f004 f8cd 	bl	8014d8c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8010bf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	375c      	adds	r7, #92	; 0x5c
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	bd90      	pop	{r4, r7, pc}
 8010bfe:	bf00      	nop
 8010c00:	080175b8 	.word	0x080175b8
 8010c04:	0801792c 	.word	0x0801792c
 8010c08:	0801760c 	.word	0x0801760c

08010c0c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010c0c:	b590      	push	{r4, r7, lr}
 8010c0e:	b08b      	sub	sp, #44	; 0x2c
 8010c10:	af02      	add	r7, sp, #8
 8010c12:	6078      	str	r0, [r7, #4]
 8010c14:	460b      	mov	r3, r1
 8010c16:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010c18:	2300      	movs	r3, #0
 8010c1a:	61fb      	str	r3, [r7, #28]
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010c20:	2300      	movs	r3, #0
 8010c22:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d106      	bne.n	8010c38 <tcp_split_unsent_seg+0x2c>
 8010c2a:	4b95      	ldr	r3, [pc, #596]	; (8010e80 <tcp_split_unsent_seg+0x274>)
 8010c2c:	f240 324b 	movw	r2, #843	; 0x34b
 8010c30:	4994      	ldr	r1, [pc, #592]	; (8010e84 <tcp_split_unsent_seg+0x278>)
 8010c32:	4895      	ldr	r0, [pc, #596]	; (8010e88 <tcp_split_unsent_seg+0x27c>)
 8010c34:	f004 f8aa 	bl	8014d8c <iprintf>

  useg = pcb->unsent;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c3c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010c3e:	697b      	ldr	r3, [r7, #20]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d102      	bne.n	8010c4a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010c44:	f04f 33ff 	mov.w	r3, #4294967295
 8010c48:	e116      	b.n	8010e78 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010c4a:	887b      	ldrh	r3, [r7, #2]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d109      	bne.n	8010c64 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010c50:	4b8b      	ldr	r3, [pc, #556]	; (8010e80 <tcp_split_unsent_seg+0x274>)
 8010c52:	f240 3253 	movw	r2, #851	; 0x353
 8010c56:	498d      	ldr	r1, [pc, #564]	; (8010e8c <tcp_split_unsent_seg+0x280>)
 8010c58:	488b      	ldr	r0, [pc, #556]	; (8010e88 <tcp_split_unsent_seg+0x27c>)
 8010c5a:	f004 f897 	bl	8014d8c <iprintf>
    return ERR_VAL;
 8010c5e:	f06f 0305 	mvn.w	r3, #5
 8010c62:	e109      	b.n	8010e78 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010c64:	697b      	ldr	r3, [r7, #20]
 8010c66:	891b      	ldrh	r3, [r3, #8]
 8010c68:	887a      	ldrh	r2, [r7, #2]
 8010c6a:	429a      	cmp	r2, r3
 8010c6c:	d301      	bcc.n	8010c72 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010c6e:	2300      	movs	r3, #0
 8010c70:	e102      	b.n	8010e78 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c76:	887a      	ldrh	r2, [r7, #2]
 8010c78:	429a      	cmp	r2, r3
 8010c7a:	d906      	bls.n	8010c8a <tcp_split_unsent_seg+0x7e>
 8010c7c:	4b80      	ldr	r3, [pc, #512]	; (8010e80 <tcp_split_unsent_seg+0x274>)
 8010c7e:	f240 325b 	movw	r2, #859	; 0x35b
 8010c82:	4983      	ldr	r1, [pc, #524]	; (8010e90 <tcp_split_unsent_seg+0x284>)
 8010c84:	4880      	ldr	r0, [pc, #512]	; (8010e88 <tcp_split_unsent_seg+0x27c>)
 8010c86:	f004 f881 	bl	8014d8c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010c8a:	697b      	ldr	r3, [r7, #20]
 8010c8c:	891b      	ldrh	r3, [r3, #8]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d106      	bne.n	8010ca0 <tcp_split_unsent_seg+0x94>
 8010c92:	4b7b      	ldr	r3, [pc, #492]	; (8010e80 <tcp_split_unsent_seg+0x274>)
 8010c94:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8010c98:	497e      	ldr	r1, [pc, #504]	; (8010e94 <tcp_split_unsent_seg+0x288>)
 8010c9a:	487b      	ldr	r0, [pc, #492]	; (8010e88 <tcp_split_unsent_seg+0x27c>)
 8010c9c:	f004 f876 	bl	8014d8c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010ca0:	697b      	ldr	r3, [r7, #20]
 8010ca2:	7a9b      	ldrb	r3, [r3, #10]
 8010ca4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010ca6:	7bfb      	ldrb	r3, [r7, #15]
 8010ca8:	009b      	lsls	r3, r3, #2
 8010caa:	b2db      	uxtb	r3, r3
 8010cac:	f003 0304 	and.w	r3, r3, #4
 8010cb0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8010cb2:	697b      	ldr	r3, [r7, #20]
 8010cb4:	891a      	ldrh	r2, [r3, #8]
 8010cb6:	887b      	ldrh	r3, [r7, #2]
 8010cb8:	1ad3      	subs	r3, r2, r3
 8010cba:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010cbc:	7bbb      	ldrb	r3, [r7, #14]
 8010cbe:	b29a      	uxth	r2, r3
 8010cc0:	89bb      	ldrh	r3, [r7, #12]
 8010cc2:	4413      	add	r3, r2
 8010cc4:	b29b      	uxth	r3, r3
 8010cc6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010cca:	4619      	mov	r1, r3
 8010ccc:	2036      	movs	r0, #54	; 0x36
 8010cce:	f7fa fbc7 	bl	800b460 <pbuf_alloc>
 8010cd2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010cd4:	693b      	ldr	r3, [r7, #16]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	f000 80b7 	beq.w	8010e4a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010cdc:	697b      	ldr	r3, [r7, #20]
 8010cde:	685b      	ldr	r3, [r3, #4]
 8010ce0:	891a      	ldrh	r2, [r3, #8]
 8010ce2:	697b      	ldr	r3, [r7, #20]
 8010ce4:	891b      	ldrh	r3, [r3, #8]
 8010ce6:	1ad3      	subs	r3, r2, r3
 8010ce8:	b29a      	uxth	r2, r3
 8010cea:	887b      	ldrh	r3, [r7, #2]
 8010cec:	4413      	add	r3, r2
 8010cee:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010cf0:	697b      	ldr	r3, [r7, #20]
 8010cf2:	6858      	ldr	r0, [r3, #4]
 8010cf4:	693b      	ldr	r3, [r7, #16]
 8010cf6:	685a      	ldr	r2, [r3, #4]
 8010cf8:	7bbb      	ldrb	r3, [r7, #14]
 8010cfa:	18d1      	adds	r1, r2, r3
 8010cfc:	897b      	ldrh	r3, [r7, #10]
 8010cfe:	89ba      	ldrh	r2, [r7, #12]
 8010d00:	f7fb f88c 	bl	800be1c <pbuf_copy_partial>
 8010d04:	4603      	mov	r3, r0
 8010d06:	461a      	mov	r2, r3
 8010d08:	89bb      	ldrh	r3, [r7, #12]
 8010d0a:	4293      	cmp	r3, r2
 8010d0c:	f040 809f 	bne.w	8010e4e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010d10:	697b      	ldr	r3, [r7, #20]
 8010d12:	68db      	ldr	r3, [r3, #12]
 8010d14:	899b      	ldrh	r3, [r3, #12]
 8010d16:	b29b      	uxth	r3, r3
 8010d18:	4618      	mov	r0, r3
 8010d1a:	f7f9 fa6f 	bl	800a1fc <lwip_htons>
 8010d1e:	4603      	mov	r3, r0
 8010d20:	b2db      	uxtb	r3, r3
 8010d22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010d26:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010d28:	2300      	movs	r3, #0
 8010d2a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010d2c:	7efb      	ldrb	r3, [r7, #27]
 8010d2e:	f003 0308 	and.w	r3, r3, #8
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d007      	beq.n	8010d46 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010d36:	7efb      	ldrb	r3, [r7, #27]
 8010d38:	f023 0308 	bic.w	r3, r3, #8
 8010d3c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010d3e:	7ebb      	ldrb	r3, [r7, #26]
 8010d40:	f043 0308 	orr.w	r3, r3, #8
 8010d44:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010d46:	7efb      	ldrb	r3, [r7, #27]
 8010d48:	f003 0301 	and.w	r3, r3, #1
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d007      	beq.n	8010d60 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010d50:	7efb      	ldrb	r3, [r7, #27]
 8010d52:	f023 0301 	bic.w	r3, r3, #1
 8010d56:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010d58:	7ebb      	ldrb	r3, [r7, #26]
 8010d5a:	f043 0301 	orr.w	r3, r3, #1
 8010d5e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010d60:	697b      	ldr	r3, [r7, #20]
 8010d62:	68db      	ldr	r3, [r3, #12]
 8010d64:	685b      	ldr	r3, [r3, #4]
 8010d66:	4618      	mov	r0, r3
 8010d68:	f7f9 fa5d 	bl	800a226 <lwip_htonl>
 8010d6c:	4602      	mov	r2, r0
 8010d6e:	887b      	ldrh	r3, [r7, #2]
 8010d70:	18d1      	adds	r1, r2, r3
 8010d72:	7eba      	ldrb	r2, [r7, #26]
 8010d74:	7bfb      	ldrb	r3, [r7, #15]
 8010d76:	9300      	str	r3, [sp, #0]
 8010d78:	460b      	mov	r3, r1
 8010d7a:	6939      	ldr	r1, [r7, #16]
 8010d7c:	6878      	ldr	r0, [r7, #4]
 8010d7e:	f7ff fa4f 	bl	8010220 <tcp_create_segment>
 8010d82:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010d84:	69fb      	ldr	r3, [r7, #28]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d063      	beq.n	8010e52 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010d8a:	697b      	ldr	r3, [r7, #20]
 8010d8c:	685b      	ldr	r3, [r3, #4]
 8010d8e:	4618      	mov	r0, r3
 8010d90:	f7fa fed2 	bl	800bb38 <pbuf_clen>
 8010d94:	4603      	mov	r3, r0
 8010d96:	461a      	mov	r2, r3
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010d9e:	1a9b      	subs	r3, r3, r2
 8010da0:	b29a      	uxth	r2, r3
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010da8:	697b      	ldr	r3, [r7, #20]
 8010daa:	6858      	ldr	r0, [r3, #4]
 8010dac:	697b      	ldr	r3, [r7, #20]
 8010dae:	685b      	ldr	r3, [r3, #4]
 8010db0:	891a      	ldrh	r2, [r3, #8]
 8010db2:	89bb      	ldrh	r3, [r7, #12]
 8010db4:	1ad3      	subs	r3, r2, r3
 8010db6:	b29b      	uxth	r3, r3
 8010db8:	4619      	mov	r1, r3
 8010dba:	f7fa fcaf 	bl	800b71c <pbuf_realloc>
  useg->len -= remainder;
 8010dbe:	697b      	ldr	r3, [r7, #20]
 8010dc0:	891a      	ldrh	r2, [r3, #8]
 8010dc2:	89bb      	ldrh	r3, [r7, #12]
 8010dc4:	1ad3      	subs	r3, r2, r3
 8010dc6:	b29a      	uxth	r2, r3
 8010dc8:	697b      	ldr	r3, [r7, #20]
 8010dca:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010dcc:	697b      	ldr	r3, [r7, #20]
 8010dce:	68db      	ldr	r3, [r3, #12]
 8010dd0:	899b      	ldrh	r3, [r3, #12]
 8010dd2:	b29c      	uxth	r4, r3
 8010dd4:	7efb      	ldrb	r3, [r7, #27]
 8010dd6:	b29b      	uxth	r3, r3
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f7f9 fa0f 	bl	800a1fc <lwip_htons>
 8010dde:	4603      	mov	r3, r0
 8010de0:	461a      	mov	r2, r3
 8010de2:	697b      	ldr	r3, [r7, #20]
 8010de4:	68db      	ldr	r3, [r3, #12]
 8010de6:	4322      	orrs	r2, r4
 8010de8:	b292      	uxth	r2, r2
 8010dea:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010dec:	697b      	ldr	r3, [r7, #20]
 8010dee:	685b      	ldr	r3, [r3, #4]
 8010df0:	4618      	mov	r0, r3
 8010df2:	f7fa fea1 	bl	800bb38 <pbuf_clen>
 8010df6:	4603      	mov	r3, r0
 8010df8:	461a      	mov	r2, r3
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010e00:	4413      	add	r3, r2
 8010e02:	b29a      	uxth	r2, r3
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010e0a:	69fb      	ldr	r3, [r7, #28]
 8010e0c:	685b      	ldr	r3, [r3, #4]
 8010e0e:	4618      	mov	r0, r3
 8010e10:	f7fa fe92 	bl	800bb38 <pbuf_clen>
 8010e14:	4603      	mov	r3, r0
 8010e16:	461a      	mov	r2, r3
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010e1e:	4413      	add	r3, r2
 8010e20:	b29a      	uxth	r2, r3
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010e28:	697b      	ldr	r3, [r7, #20]
 8010e2a:	681a      	ldr	r2, [r3, #0]
 8010e2c:	69fb      	ldr	r3, [r7, #28]
 8010e2e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010e30:	697b      	ldr	r3, [r7, #20]
 8010e32:	69fa      	ldr	r2, [r7, #28]
 8010e34:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010e36:	69fb      	ldr	r3, [r7, #28]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d103      	bne.n	8010e46 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	2200      	movs	r2, #0
 8010e42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010e46:	2300      	movs	r3, #0
 8010e48:	e016      	b.n	8010e78 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010e4a:	bf00      	nop
 8010e4c:	e002      	b.n	8010e54 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010e4e:	bf00      	nop
 8010e50:	e000      	b.n	8010e54 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010e52:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010e54:	69fb      	ldr	r3, [r7, #28]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d006      	beq.n	8010e68 <tcp_split_unsent_seg+0x25c>
 8010e5a:	4b09      	ldr	r3, [pc, #36]	; (8010e80 <tcp_split_unsent_seg+0x274>)
 8010e5c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010e60:	490d      	ldr	r1, [pc, #52]	; (8010e98 <tcp_split_unsent_seg+0x28c>)
 8010e62:	4809      	ldr	r0, [pc, #36]	; (8010e88 <tcp_split_unsent_seg+0x27c>)
 8010e64:	f003 ff92 	bl	8014d8c <iprintf>
  if (p != NULL) {
 8010e68:	693b      	ldr	r3, [r7, #16]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d002      	beq.n	8010e74 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010e6e:	6938      	ldr	r0, [r7, #16]
 8010e70:	f7fa fdda 	bl	800ba28 <pbuf_free>
  }

  return ERR_MEM;
 8010e74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010e78:	4618      	mov	r0, r3
 8010e7a:	3724      	adds	r7, #36	; 0x24
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	bd90      	pop	{r4, r7, pc}
 8010e80:	080175b8 	.word	0x080175b8
 8010e84:	0801794c 	.word	0x0801794c
 8010e88:	0801760c 	.word	0x0801760c
 8010e8c:	08017970 	.word	0x08017970
 8010e90:	08017994 	.word	0x08017994
 8010e94:	080179a4 	.word	0x080179a4
 8010e98:	080179b4 	.word	0x080179b4

08010e9c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010e9c:	b590      	push	{r4, r7, lr}
 8010e9e:	b085      	sub	sp, #20
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d106      	bne.n	8010eb8 <tcp_send_fin+0x1c>
 8010eaa:	4b21      	ldr	r3, [pc, #132]	; (8010f30 <tcp_send_fin+0x94>)
 8010eac:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8010eb0:	4920      	ldr	r1, [pc, #128]	; (8010f34 <tcp_send_fin+0x98>)
 8010eb2:	4821      	ldr	r0, [pc, #132]	; (8010f38 <tcp_send_fin+0x9c>)
 8010eb4:	f003 ff6a 	bl	8014d8c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d02e      	beq.n	8010f1e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ec4:	60fb      	str	r3, [r7, #12]
 8010ec6:	e002      	b.n	8010ece <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d1f8      	bne.n	8010ec8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	68db      	ldr	r3, [r3, #12]
 8010eda:	899b      	ldrh	r3, [r3, #12]
 8010edc:	b29b      	uxth	r3, r3
 8010ede:	4618      	mov	r0, r3
 8010ee0:	f7f9 f98c 	bl	800a1fc <lwip_htons>
 8010ee4:	4603      	mov	r3, r0
 8010ee6:	b2db      	uxtb	r3, r3
 8010ee8:	f003 0307 	and.w	r3, r3, #7
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d116      	bne.n	8010f1e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	68db      	ldr	r3, [r3, #12]
 8010ef4:	899b      	ldrh	r3, [r3, #12]
 8010ef6:	b29c      	uxth	r4, r3
 8010ef8:	2001      	movs	r0, #1
 8010efa:	f7f9 f97f 	bl	800a1fc <lwip_htons>
 8010efe:	4603      	mov	r3, r0
 8010f00:	461a      	mov	r2, r3
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	68db      	ldr	r3, [r3, #12]
 8010f06:	4322      	orrs	r2, r4
 8010f08:	b292      	uxth	r2, r2
 8010f0a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	8b5b      	ldrh	r3, [r3, #26]
 8010f10:	f043 0320 	orr.w	r3, r3, #32
 8010f14:	b29a      	uxth	r2, r3
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	e004      	b.n	8010f28 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010f1e:	2101      	movs	r1, #1
 8010f20:	6878      	ldr	r0, [r7, #4]
 8010f22:	f000 f80b 	bl	8010f3c <tcp_enqueue_flags>
 8010f26:	4603      	mov	r3, r0
}
 8010f28:	4618      	mov	r0, r3
 8010f2a:	3714      	adds	r7, #20
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	bd90      	pop	{r4, r7, pc}
 8010f30:	080175b8 	.word	0x080175b8
 8010f34:	080179c0 	.word	0x080179c0
 8010f38:	0801760c 	.word	0x0801760c

08010f3c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010f3c:	b580      	push	{r7, lr}
 8010f3e:	b08a      	sub	sp, #40	; 0x28
 8010f40:	af02      	add	r7, sp, #8
 8010f42:	6078      	str	r0, [r7, #4]
 8010f44:	460b      	mov	r3, r1
 8010f46:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010f48:	2300      	movs	r3, #0
 8010f4a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010f50:	78fb      	ldrb	r3, [r7, #3]
 8010f52:	f003 0303 	and.w	r3, r3, #3
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d106      	bne.n	8010f68 <tcp_enqueue_flags+0x2c>
 8010f5a:	4b67      	ldr	r3, [pc, #412]	; (80110f8 <tcp_enqueue_flags+0x1bc>)
 8010f5c:	f240 4211 	movw	r2, #1041	; 0x411
 8010f60:	4966      	ldr	r1, [pc, #408]	; (80110fc <tcp_enqueue_flags+0x1c0>)
 8010f62:	4867      	ldr	r0, [pc, #412]	; (8011100 <tcp_enqueue_flags+0x1c4>)
 8010f64:	f003 ff12 	bl	8014d8c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d106      	bne.n	8010f7c <tcp_enqueue_flags+0x40>
 8010f6e:	4b62      	ldr	r3, [pc, #392]	; (80110f8 <tcp_enqueue_flags+0x1bc>)
 8010f70:	f240 4213 	movw	r2, #1043	; 0x413
 8010f74:	4963      	ldr	r1, [pc, #396]	; (8011104 <tcp_enqueue_flags+0x1c8>)
 8010f76:	4862      	ldr	r0, [pc, #392]	; (8011100 <tcp_enqueue_flags+0x1c4>)
 8010f78:	f003 ff08 	bl	8014d8c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010f7c:	78fb      	ldrb	r3, [r7, #3]
 8010f7e:	f003 0302 	and.w	r3, r3, #2
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d001      	beq.n	8010f8a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010f86:	2301      	movs	r3, #1
 8010f88:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010f8a:	7ffb      	ldrb	r3, [r7, #31]
 8010f8c:	009b      	lsls	r3, r3, #2
 8010f8e:	b2db      	uxtb	r3, r3
 8010f90:	f003 0304 	and.w	r3, r3, #4
 8010f94:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010f96:	7dfb      	ldrb	r3, [r7, #23]
 8010f98:	b29b      	uxth	r3, r3
 8010f9a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010f9e:	4619      	mov	r1, r3
 8010fa0:	2036      	movs	r0, #54	; 0x36
 8010fa2:	f7fa fa5d 	bl	800b460 <pbuf_alloc>
 8010fa6:	6138      	str	r0, [r7, #16]
 8010fa8:	693b      	ldr	r3, [r7, #16]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d109      	bne.n	8010fc2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	8b5b      	ldrh	r3, [r3, #26]
 8010fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010fb6:	b29a      	uxth	r2, r3
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8010fc0:	e095      	b.n	80110ee <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010fc2:	693b      	ldr	r3, [r7, #16]
 8010fc4:	895a      	ldrh	r2, [r3, #10]
 8010fc6:	7dfb      	ldrb	r3, [r7, #23]
 8010fc8:	b29b      	uxth	r3, r3
 8010fca:	429a      	cmp	r2, r3
 8010fcc:	d206      	bcs.n	8010fdc <tcp_enqueue_flags+0xa0>
 8010fce:	4b4a      	ldr	r3, [pc, #296]	; (80110f8 <tcp_enqueue_flags+0x1bc>)
 8010fd0:	f240 4239 	movw	r2, #1081	; 0x439
 8010fd4:	494c      	ldr	r1, [pc, #304]	; (8011108 <tcp_enqueue_flags+0x1cc>)
 8010fd6:	484a      	ldr	r0, [pc, #296]	; (8011100 <tcp_enqueue_flags+0x1c4>)
 8010fd8:	f003 fed8 	bl	8014d8c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8010fe0:	78fa      	ldrb	r2, [r7, #3]
 8010fe2:	7ffb      	ldrb	r3, [r7, #31]
 8010fe4:	9300      	str	r3, [sp, #0]
 8010fe6:	460b      	mov	r3, r1
 8010fe8:	6939      	ldr	r1, [r7, #16]
 8010fea:	6878      	ldr	r0, [r7, #4]
 8010fec:	f7ff f918 	bl	8010220 <tcp_create_segment>
 8010ff0:	60f8      	str	r0, [r7, #12]
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d109      	bne.n	801100c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	8b5b      	ldrh	r3, [r3, #26]
 8010ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011000:	b29a      	uxth	r2, r3
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011006:	f04f 33ff 	mov.w	r3, #4294967295
 801100a:	e070      	b.n	80110ee <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	68db      	ldr	r3, [r3, #12]
 8011010:	f003 0303 	and.w	r3, r3, #3
 8011014:	2b00      	cmp	r3, #0
 8011016:	d006      	beq.n	8011026 <tcp_enqueue_flags+0xea>
 8011018:	4b37      	ldr	r3, [pc, #220]	; (80110f8 <tcp_enqueue_flags+0x1bc>)
 801101a:	f240 4242 	movw	r2, #1090	; 0x442
 801101e:	493b      	ldr	r1, [pc, #236]	; (801110c <tcp_enqueue_flags+0x1d0>)
 8011020:	4837      	ldr	r0, [pc, #220]	; (8011100 <tcp_enqueue_flags+0x1c4>)
 8011022:	f003 feb3 	bl	8014d8c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	891b      	ldrh	r3, [r3, #8]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d006      	beq.n	801103c <tcp_enqueue_flags+0x100>
 801102e:	4b32      	ldr	r3, [pc, #200]	; (80110f8 <tcp_enqueue_flags+0x1bc>)
 8011030:	f240 4243 	movw	r2, #1091	; 0x443
 8011034:	4936      	ldr	r1, [pc, #216]	; (8011110 <tcp_enqueue_flags+0x1d4>)
 8011036:	4832      	ldr	r0, [pc, #200]	; (8011100 <tcp_enqueue_flags+0x1c4>)
 8011038:	f003 fea8 	bl	8014d8c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011040:	2b00      	cmp	r3, #0
 8011042:	d103      	bne.n	801104c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	68fa      	ldr	r2, [r7, #12]
 8011048:	66da      	str	r2, [r3, #108]	; 0x6c
 801104a:	e00d      	b.n	8011068 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011050:	61bb      	str	r3, [r7, #24]
 8011052:	e002      	b.n	801105a <tcp_enqueue_flags+0x11e>
 8011054:	69bb      	ldr	r3, [r7, #24]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	61bb      	str	r3, [r7, #24]
 801105a:	69bb      	ldr	r3, [r7, #24]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d1f8      	bne.n	8011054 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011062:	69bb      	ldr	r3, [r7, #24]
 8011064:	68fa      	ldr	r2, [r7, #12]
 8011066:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2200      	movs	r2, #0
 801106c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011070:	78fb      	ldrb	r3, [r7, #3]
 8011072:	f003 0302 	and.w	r3, r3, #2
 8011076:	2b00      	cmp	r3, #0
 8011078:	d104      	bne.n	8011084 <tcp_enqueue_flags+0x148>
 801107a:	78fb      	ldrb	r3, [r7, #3]
 801107c:	f003 0301 	and.w	r3, r3, #1
 8011080:	2b00      	cmp	r3, #0
 8011082:	d004      	beq.n	801108e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011088:	1c5a      	adds	r2, r3, #1
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801108e:	78fb      	ldrb	r3, [r7, #3]
 8011090:	f003 0301 	and.w	r3, r3, #1
 8011094:	2b00      	cmp	r3, #0
 8011096:	d006      	beq.n	80110a6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	8b5b      	ldrh	r3, [r3, #26]
 801109c:	f043 0320 	orr.w	r3, r3, #32
 80110a0:	b29a      	uxth	r2, r3
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	685b      	ldr	r3, [r3, #4]
 80110aa:	4618      	mov	r0, r3
 80110ac:	f7fa fd44 	bl	800bb38 <pbuf_clen>
 80110b0:	4603      	mov	r3, r0
 80110b2:	461a      	mov	r2, r3
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80110ba:	4413      	add	r3, r2
 80110bc:	b29a      	uxth	r2, r3
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d00e      	beq.n	80110ec <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d10a      	bne.n	80110ec <tcp_enqueue_flags+0x1b0>
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d106      	bne.n	80110ec <tcp_enqueue_flags+0x1b0>
 80110de:	4b06      	ldr	r3, [pc, #24]	; (80110f8 <tcp_enqueue_flags+0x1bc>)
 80110e0:	f240 4265 	movw	r2, #1125	; 0x465
 80110e4:	490b      	ldr	r1, [pc, #44]	; (8011114 <tcp_enqueue_flags+0x1d8>)
 80110e6:	4806      	ldr	r0, [pc, #24]	; (8011100 <tcp_enqueue_flags+0x1c4>)
 80110e8:	f003 fe50 	bl	8014d8c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80110ec:	2300      	movs	r3, #0
}
 80110ee:	4618      	mov	r0, r3
 80110f0:	3720      	adds	r7, #32
 80110f2:	46bd      	mov	sp, r7
 80110f4:	bd80      	pop	{r7, pc}
 80110f6:	bf00      	nop
 80110f8:	080175b8 	.word	0x080175b8
 80110fc:	080179dc 	.word	0x080179dc
 8011100:	0801760c 	.word	0x0801760c
 8011104:	08017a34 	.word	0x08017a34
 8011108:	08017a54 	.word	0x08017a54
 801110c:	08017a90 	.word	0x08017a90
 8011110:	08017aa8 	.word	0x08017aa8
 8011114:	08017ad4 	.word	0x08017ad4

08011118 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011118:	b5b0      	push	{r4, r5, r7, lr}
 801111a:	b08a      	sub	sp, #40	; 0x28
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d106      	bne.n	8011134 <tcp_output+0x1c>
 8011126:	4b9e      	ldr	r3, [pc, #632]	; (80113a0 <tcp_output+0x288>)
 8011128:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801112c:	499d      	ldr	r1, [pc, #628]	; (80113a4 <tcp_output+0x28c>)
 801112e:	489e      	ldr	r0, [pc, #632]	; (80113a8 <tcp_output+0x290>)
 8011130:	f003 fe2c 	bl	8014d8c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	7d1b      	ldrb	r3, [r3, #20]
 8011138:	2b01      	cmp	r3, #1
 801113a:	d106      	bne.n	801114a <tcp_output+0x32>
 801113c:	4b98      	ldr	r3, [pc, #608]	; (80113a0 <tcp_output+0x288>)
 801113e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8011142:	499a      	ldr	r1, [pc, #616]	; (80113ac <tcp_output+0x294>)
 8011144:	4898      	ldr	r0, [pc, #608]	; (80113a8 <tcp_output+0x290>)
 8011146:	f003 fe21 	bl	8014d8c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801114a:	4b99      	ldr	r3, [pc, #612]	; (80113b0 <tcp_output+0x298>)
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	687a      	ldr	r2, [r7, #4]
 8011150:	429a      	cmp	r2, r3
 8011152:	d101      	bne.n	8011158 <tcp_output+0x40>
    return ERR_OK;
 8011154:	2300      	movs	r3, #0
 8011156:	e1ce      	b.n	80114f6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011164:	4293      	cmp	r3, r2
 8011166:	bf28      	it	cs
 8011168:	4613      	movcs	r3, r2
 801116a:	b29b      	uxth	r3, r3
 801116c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011172:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8011174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011176:	2b00      	cmp	r3, #0
 8011178:	d10b      	bne.n	8011192 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	8b5b      	ldrh	r3, [r3, #26]
 801117e:	f003 0302 	and.w	r3, r3, #2
 8011182:	2b00      	cmp	r3, #0
 8011184:	f000 81aa 	beq.w	80114dc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011188:	6878      	ldr	r0, [r7, #4]
 801118a:	f000 fdcb 	bl	8011d24 <tcp_send_empty_ack>
 801118e:	4603      	mov	r3, r0
 8011190:	e1b1      	b.n	80114f6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011192:	6879      	ldr	r1, [r7, #4]
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	3304      	adds	r3, #4
 8011198:	461a      	mov	r2, r3
 801119a:	6878      	ldr	r0, [r7, #4]
 801119c:	f7ff f824 	bl	80101e8 <tcp_route>
 80111a0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80111a2:	697b      	ldr	r3, [r7, #20]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d102      	bne.n	80111ae <tcp_output+0x96>
    return ERR_RTE;
 80111a8:	f06f 0303 	mvn.w	r3, #3
 80111ac:	e1a3      	b.n	80114f6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d003      	beq.n	80111bc <tcp_output+0xa4>
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d111      	bne.n	80111e0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80111bc:	697b      	ldr	r3, [r7, #20]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d002      	beq.n	80111c8 <tcp_output+0xb0>
 80111c2:	697b      	ldr	r3, [r7, #20]
 80111c4:	3304      	adds	r3, #4
 80111c6:	e000      	b.n	80111ca <tcp_output+0xb2>
 80111c8:	2300      	movs	r3, #0
 80111ca:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80111cc:	693b      	ldr	r3, [r7, #16]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d102      	bne.n	80111d8 <tcp_output+0xc0>
      return ERR_RTE;
 80111d2:	f06f 0303 	mvn.w	r3, #3
 80111d6:	e18e      	b.n	80114f6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80111d8:	693b      	ldr	r3, [r7, #16]
 80111da:	681a      	ldr	r2, [r3, #0]
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80111e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111e2:	68db      	ldr	r3, [r3, #12]
 80111e4:	685b      	ldr	r3, [r3, #4]
 80111e6:	4618      	mov	r0, r3
 80111e8:	f7f9 f81d 	bl	800a226 <lwip_htonl>
 80111ec:	4602      	mov	r2, r0
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80111f2:	1ad3      	subs	r3, r2, r3
 80111f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80111f6:	8912      	ldrh	r2, [r2, #8]
 80111f8:	4413      	add	r3, r2
 80111fa:	69ba      	ldr	r2, [r7, #24]
 80111fc:	429a      	cmp	r2, r3
 80111fe:	d227      	bcs.n	8011250 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011206:	461a      	mov	r2, r3
 8011208:	69bb      	ldr	r3, [r7, #24]
 801120a:	4293      	cmp	r3, r2
 801120c:	d114      	bne.n	8011238 <tcp_output+0x120>
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011212:	2b00      	cmp	r3, #0
 8011214:	d110      	bne.n	8011238 <tcp_output+0x120>
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801121c:	2b00      	cmp	r3, #0
 801121e:	d10b      	bne.n	8011238 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2200      	movs	r2, #0
 8011224:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	2201      	movs	r2, #1
 801122c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	2200      	movs	r2, #0
 8011234:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	8b5b      	ldrh	r3, [r3, #26]
 801123c:	f003 0302 	and.w	r3, r3, #2
 8011240:	2b00      	cmp	r3, #0
 8011242:	f000 814d 	beq.w	80114e0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8011246:	6878      	ldr	r0, [r7, #4]
 8011248:	f000 fd6c 	bl	8011d24 <tcp_send_empty_ack>
 801124c:	4603      	mov	r3, r0
 801124e:	e152      	b.n	80114f6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	2200      	movs	r2, #0
 8011254:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801125c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801125e:	6a3b      	ldr	r3, [r7, #32]
 8011260:	2b00      	cmp	r3, #0
 8011262:	f000 811c 	beq.w	801149e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8011266:	e002      	b.n	801126e <tcp_output+0x156>
 8011268:	6a3b      	ldr	r3, [r7, #32]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	623b      	str	r3, [r7, #32]
 801126e:	6a3b      	ldr	r3, [r7, #32]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d1f8      	bne.n	8011268 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011276:	e112      	b.n	801149e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801127a:	68db      	ldr	r3, [r3, #12]
 801127c:	899b      	ldrh	r3, [r3, #12]
 801127e:	b29b      	uxth	r3, r3
 8011280:	4618      	mov	r0, r3
 8011282:	f7f8 ffbb 	bl	800a1fc <lwip_htons>
 8011286:	4603      	mov	r3, r0
 8011288:	b2db      	uxtb	r3, r3
 801128a:	f003 0304 	and.w	r3, r3, #4
 801128e:	2b00      	cmp	r3, #0
 8011290:	d006      	beq.n	80112a0 <tcp_output+0x188>
 8011292:	4b43      	ldr	r3, [pc, #268]	; (80113a0 <tcp_output+0x288>)
 8011294:	f240 5236 	movw	r2, #1334	; 0x536
 8011298:	4946      	ldr	r1, [pc, #280]	; (80113b4 <tcp_output+0x29c>)
 801129a:	4843      	ldr	r0, [pc, #268]	; (80113a8 <tcp_output+0x290>)
 801129c:	f003 fd76 	bl	8014d8c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d01f      	beq.n	80112e8 <tcp_output+0x1d0>
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	8b5b      	ldrh	r3, [r3, #26]
 80112ac:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d119      	bne.n	80112e8 <tcp_output+0x1d0>
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d00b      	beq.n	80112d4 <tcp_output+0x1bc>
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d110      	bne.n	80112e8 <tcp_output+0x1d0>
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112ca:	891a      	ldrh	r2, [r3, #8]
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80112d0:	429a      	cmp	r2, r3
 80112d2:	d209      	bcs.n	80112e8 <tcp_output+0x1d0>
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d004      	beq.n	80112e8 <tcp_output+0x1d0>
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80112e4:	2b08      	cmp	r3, #8
 80112e6:	d901      	bls.n	80112ec <tcp_output+0x1d4>
 80112e8:	2301      	movs	r3, #1
 80112ea:	e000      	b.n	80112ee <tcp_output+0x1d6>
 80112ec:	2300      	movs	r3, #0
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d106      	bne.n	8011300 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	8b5b      	ldrh	r3, [r3, #26]
 80112f6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	f000 80e4 	beq.w	80114c8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	7d1b      	ldrb	r3, [r3, #20]
 8011304:	2b02      	cmp	r3, #2
 8011306:	d00d      	beq.n	8011324 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801130a:	68db      	ldr	r3, [r3, #12]
 801130c:	899b      	ldrh	r3, [r3, #12]
 801130e:	b29c      	uxth	r4, r3
 8011310:	2010      	movs	r0, #16
 8011312:	f7f8 ff73 	bl	800a1fc <lwip_htons>
 8011316:	4603      	mov	r3, r0
 8011318:	461a      	mov	r2, r3
 801131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801131c:	68db      	ldr	r3, [r3, #12]
 801131e:	4322      	orrs	r2, r4
 8011320:	b292      	uxth	r2, r2
 8011322:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011324:	697a      	ldr	r2, [r7, #20]
 8011326:	6879      	ldr	r1, [r7, #4]
 8011328:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801132a:	f000 f909 	bl	8011540 <tcp_output_segment>
 801132e:	4603      	mov	r3, r0
 8011330:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d009      	beq.n	801134e <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	8b5b      	ldrh	r3, [r3, #26]
 801133e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011342:	b29a      	uxth	r2, r3
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	835a      	strh	r2, [r3, #26]
      return err;
 8011348:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801134c:	e0d3      	b.n	80114f6 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011350:	681a      	ldr	r2, [r3, #0]
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	7d1b      	ldrb	r3, [r3, #20]
 801135a:	2b02      	cmp	r3, #2
 801135c:	d006      	beq.n	801136c <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	8b5b      	ldrh	r3, [r3, #26]
 8011362:	f023 0303 	bic.w	r3, r3, #3
 8011366:	b29a      	uxth	r2, r3
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801136e:	68db      	ldr	r3, [r3, #12]
 8011370:	685b      	ldr	r3, [r3, #4]
 8011372:	4618      	mov	r0, r3
 8011374:	f7f8 ff57 	bl	800a226 <lwip_htonl>
 8011378:	4604      	mov	r4, r0
 801137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801137c:	891b      	ldrh	r3, [r3, #8]
 801137e:	461d      	mov	r5, r3
 8011380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011382:	68db      	ldr	r3, [r3, #12]
 8011384:	899b      	ldrh	r3, [r3, #12]
 8011386:	b29b      	uxth	r3, r3
 8011388:	4618      	mov	r0, r3
 801138a:	f7f8 ff37 	bl	800a1fc <lwip_htons>
 801138e:	4603      	mov	r3, r0
 8011390:	b2db      	uxtb	r3, r3
 8011392:	f003 0303 	and.w	r3, r3, #3
 8011396:	2b00      	cmp	r3, #0
 8011398:	d00e      	beq.n	80113b8 <tcp_output+0x2a0>
 801139a:	2301      	movs	r3, #1
 801139c:	e00d      	b.n	80113ba <tcp_output+0x2a2>
 801139e:	bf00      	nop
 80113a0:	080175b8 	.word	0x080175b8
 80113a4:	08017afc 	.word	0x08017afc
 80113a8:	0801760c 	.word	0x0801760c
 80113ac:	08017b14 	.word	0x08017b14
 80113b0:	24003618 	.word	0x24003618
 80113b4:	08017b3c 	.word	0x08017b3c
 80113b8:	2300      	movs	r3, #0
 80113ba:	442b      	add	r3, r5
 80113bc:	4423      	add	r3, r4
 80113be:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80113c4:	68bb      	ldr	r3, [r7, #8]
 80113c6:	1ad3      	subs	r3, r2, r3
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	da02      	bge.n	80113d2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	68ba      	ldr	r2, [r7, #8]
 80113d0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80113d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113d4:	891b      	ldrh	r3, [r3, #8]
 80113d6:	461c      	mov	r4, r3
 80113d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113da:	68db      	ldr	r3, [r3, #12]
 80113dc:	899b      	ldrh	r3, [r3, #12]
 80113de:	b29b      	uxth	r3, r3
 80113e0:	4618      	mov	r0, r3
 80113e2:	f7f8 ff0b 	bl	800a1fc <lwip_htons>
 80113e6:	4603      	mov	r3, r0
 80113e8:	b2db      	uxtb	r3, r3
 80113ea:	f003 0303 	and.w	r3, r3, #3
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d001      	beq.n	80113f6 <tcp_output+0x2de>
 80113f2:	2301      	movs	r3, #1
 80113f4:	e000      	b.n	80113f8 <tcp_output+0x2e0>
 80113f6:	2300      	movs	r3, #0
 80113f8:	4423      	add	r3, r4
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d049      	beq.n	8011492 <tcp_output+0x37a>
      seg->next = NULL;
 80113fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011400:	2200      	movs	r2, #0
 8011402:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011408:	2b00      	cmp	r3, #0
 801140a:	d105      	bne.n	8011418 <tcp_output+0x300>
        pcb->unacked = seg;
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011410:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8011412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011414:	623b      	str	r3, [r7, #32]
 8011416:	e03f      	b.n	8011498 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801141a:	68db      	ldr	r3, [r3, #12]
 801141c:	685b      	ldr	r3, [r3, #4]
 801141e:	4618      	mov	r0, r3
 8011420:	f7f8 ff01 	bl	800a226 <lwip_htonl>
 8011424:	4604      	mov	r4, r0
 8011426:	6a3b      	ldr	r3, [r7, #32]
 8011428:	68db      	ldr	r3, [r3, #12]
 801142a:	685b      	ldr	r3, [r3, #4]
 801142c:	4618      	mov	r0, r3
 801142e:	f7f8 fefa 	bl	800a226 <lwip_htonl>
 8011432:	4603      	mov	r3, r0
 8011434:	1ae3      	subs	r3, r4, r3
 8011436:	2b00      	cmp	r3, #0
 8011438:	da24      	bge.n	8011484 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	3370      	adds	r3, #112	; 0x70
 801143e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011440:	e002      	b.n	8011448 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011442:	69fb      	ldr	r3, [r7, #28]
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011448:	69fb      	ldr	r3, [r7, #28]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d011      	beq.n	8011474 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011450:	69fb      	ldr	r3, [r7, #28]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	68db      	ldr	r3, [r3, #12]
 8011456:	685b      	ldr	r3, [r3, #4]
 8011458:	4618      	mov	r0, r3
 801145a:	f7f8 fee4 	bl	800a226 <lwip_htonl>
 801145e:	4604      	mov	r4, r0
 8011460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011462:	68db      	ldr	r3, [r3, #12]
 8011464:	685b      	ldr	r3, [r3, #4]
 8011466:	4618      	mov	r0, r3
 8011468:	f7f8 fedd 	bl	800a226 <lwip_htonl>
 801146c:	4603      	mov	r3, r0
 801146e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011470:	2b00      	cmp	r3, #0
 8011472:	dbe6      	blt.n	8011442 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8011474:	69fb      	ldr	r3, [r7, #28]
 8011476:	681a      	ldr	r2, [r3, #0]
 8011478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801147a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801147c:	69fb      	ldr	r3, [r7, #28]
 801147e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011480:	601a      	str	r2, [r3, #0]
 8011482:	e009      	b.n	8011498 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011484:	6a3b      	ldr	r3, [r7, #32]
 8011486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011488:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801148a:	6a3b      	ldr	r3, [r7, #32]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	623b      	str	r3, [r7, #32]
 8011490:	e002      	b.n	8011498 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011492:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011494:	f7fb ff05 	bl	800d2a2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801149c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d012      	beq.n	80114ca <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80114a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114a6:	68db      	ldr	r3, [r3, #12]
 80114a8:	685b      	ldr	r3, [r3, #4]
 80114aa:	4618      	mov	r0, r3
 80114ac:	f7f8 febb 	bl	800a226 <lwip_htonl>
 80114b0:	4602      	mov	r2, r0
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114b6:	1ad3      	subs	r3, r2, r3
 80114b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80114ba:	8912      	ldrh	r2, [r2, #8]
 80114bc:	4413      	add	r3, r2
  while (seg != NULL &&
 80114be:	69ba      	ldr	r2, [r7, #24]
 80114c0:	429a      	cmp	r2, r3
 80114c2:	f4bf aed9 	bcs.w	8011278 <tcp_output+0x160>
 80114c6:	e000      	b.n	80114ca <tcp_output+0x3b2>
      break;
 80114c8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d108      	bne.n	80114e4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	2200      	movs	r2, #0
 80114d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80114da:	e004      	b.n	80114e6 <tcp_output+0x3ce>
    goto output_done;
 80114dc:	bf00      	nop
 80114de:	e002      	b.n	80114e6 <tcp_output+0x3ce>
    goto output_done;
 80114e0:	bf00      	nop
 80114e2:	e000      	b.n	80114e6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80114e4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	8b5b      	ldrh	r3, [r3, #26]
 80114ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80114ee:	b29a      	uxth	r2, r3
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80114f4:	2300      	movs	r3, #0
}
 80114f6:	4618      	mov	r0, r3
 80114f8:	3728      	adds	r7, #40	; 0x28
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bdb0      	pop	{r4, r5, r7, pc}
 80114fe:	bf00      	nop

08011500 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011500:	b580      	push	{r7, lr}
 8011502:	b082      	sub	sp, #8
 8011504:	af00      	add	r7, sp, #0
 8011506:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d106      	bne.n	801151c <tcp_output_segment_busy+0x1c>
 801150e:	4b09      	ldr	r3, [pc, #36]	; (8011534 <tcp_output_segment_busy+0x34>)
 8011510:	f240 529a 	movw	r2, #1434	; 0x59a
 8011514:	4908      	ldr	r1, [pc, #32]	; (8011538 <tcp_output_segment_busy+0x38>)
 8011516:	4809      	ldr	r0, [pc, #36]	; (801153c <tcp_output_segment_busy+0x3c>)
 8011518:	f003 fc38 	bl	8014d8c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	685b      	ldr	r3, [r3, #4]
 8011520:	7b9b      	ldrb	r3, [r3, #14]
 8011522:	2b01      	cmp	r3, #1
 8011524:	d001      	beq.n	801152a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011526:	2301      	movs	r3, #1
 8011528:	e000      	b.n	801152c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801152a:	2300      	movs	r3, #0
}
 801152c:	4618      	mov	r0, r3
 801152e:	3708      	adds	r7, #8
 8011530:	46bd      	mov	sp, r7
 8011532:	bd80      	pop	{r7, pc}
 8011534:	080175b8 	.word	0x080175b8
 8011538:	08017b54 	.word	0x08017b54
 801153c:	0801760c 	.word	0x0801760c

08011540 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011540:	b5b0      	push	{r4, r5, r7, lr}
 8011542:	b08c      	sub	sp, #48	; 0x30
 8011544:	af04      	add	r7, sp, #16
 8011546:	60f8      	str	r0, [r7, #12]
 8011548:	60b9      	str	r1, [r7, #8]
 801154a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d106      	bne.n	8011560 <tcp_output_segment+0x20>
 8011552:	4b63      	ldr	r3, [pc, #396]	; (80116e0 <tcp_output_segment+0x1a0>)
 8011554:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011558:	4962      	ldr	r1, [pc, #392]	; (80116e4 <tcp_output_segment+0x1a4>)
 801155a:	4863      	ldr	r0, [pc, #396]	; (80116e8 <tcp_output_segment+0x1a8>)
 801155c:	f003 fc16 	bl	8014d8c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011560:	68bb      	ldr	r3, [r7, #8]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d106      	bne.n	8011574 <tcp_output_segment+0x34>
 8011566:	4b5e      	ldr	r3, [pc, #376]	; (80116e0 <tcp_output_segment+0x1a0>)
 8011568:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801156c:	495f      	ldr	r1, [pc, #380]	; (80116ec <tcp_output_segment+0x1ac>)
 801156e:	485e      	ldr	r0, [pc, #376]	; (80116e8 <tcp_output_segment+0x1a8>)
 8011570:	f003 fc0c 	bl	8014d8c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d106      	bne.n	8011588 <tcp_output_segment+0x48>
 801157a:	4b59      	ldr	r3, [pc, #356]	; (80116e0 <tcp_output_segment+0x1a0>)
 801157c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011580:	495b      	ldr	r1, [pc, #364]	; (80116f0 <tcp_output_segment+0x1b0>)
 8011582:	4859      	ldr	r0, [pc, #356]	; (80116e8 <tcp_output_segment+0x1a8>)
 8011584:	f003 fc02 	bl	8014d8c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011588:	68f8      	ldr	r0, [r7, #12]
 801158a:	f7ff ffb9 	bl	8011500 <tcp_output_segment_busy>
 801158e:	4603      	mov	r3, r0
 8011590:	2b00      	cmp	r3, #0
 8011592:	d001      	beq.n	8011598 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011594:	2300      	movs	r3, #0
 8011596:	e09f      	b.n	80116d8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011598:	68bb      	ldr	r3, [r7, #8]
 801159a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	68dc      	ldr	r4, [r3, #12]
 80115a0:	4610      	mov	r0, r2
 80115a2:	f7f8 fe40 	bl	800a226 <lwip_htonl>
 80115a6:	4603      	mov	r3, r0
 80115a8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80115aa:	68bb      	ldr	r3, [r7, #8]
 80115ac:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	68dc      	ldr	r4, [r3, #12]
 80115b2:	4610      	mov	r0, r2
 80115b4:	f7f8 fe22 	bl	800a1fc <lwip_htons>
 80115b8:	4603      	mov	r3, r0
 80115ba:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80115bc:	68bb      	ldr	r3, [r7, #8]
 80115be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115c0:	68ba      	ldr	r2, [r7, #8]
 80115c2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80115c4:	441a      	add	r2, r3
 80115c6:	68bb      	ldr	r3, [r7, #8]
 80115c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	68db      	ldr	r3, [r3, #12]
 80115ce:	3314      	adds	r3, #20
 80115d0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	7a9b      	ldrb	r3, [r3, #10]
 80115d6:	f003 0301 	and.w	r3, r3, #1
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d015      	beq.n	801160a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80115de:	68bb      	ldr	r3, [r7, #8]
 80115e0:	3304      	adds	r3, #4
 80115e2:	461a      	mov	r2, r3
 80115e4:	6879      	ldr	r1, [r7, #4]
 80115e6:	f44f 7006 	mov.w	r0, #536	; 0x218
 80115ea:	f7fc fa37 	bl	800da5c <tcp_eff_send_mss_netif>
 80115ee:	4603      	mov	r3, r0
 80115f0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80115f2:	8b7b      	ldrh	r3, [r7, #26]
 80115f4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80115f8:	4618      	mov	r0, r3
 80115fa:	f7f8 fe14 	bl	800a226 <lwip_htonl>
 80115fe:	4602      	mov	r2, r0
 8011600:	69fb      	ldr	r3, [r7, #28]
 8011602:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011604:	69fb      	ldr	r3, [r7, #28]
 8011606:	3304      	adds	r3, #4
 8011608:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801160a:	68bb      	ldr	r3, [r7, #8]
 801160c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011610:	2b00      	cmp	r3, #0
 8011612:	da02      	bge.n	801161a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011614:	68bb      	ldr	r3, [r7, #8]
 8011616:	2200      	movs	r2, #0
 8011618:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801161a:	68bb      	ldr	r3, [r7, #8]
 801161c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801161e:	2b00      	cmp	r3, #0
 8011620:	d10c      	bne.n	801163c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011622:	4b34      	ldr	r3, [pc, #208]	; (80116f4 <tcp_output_segment+0x1b4>)
 8011624:	681a      	ldr	r2, [r3, #0]
 8011626:	68bb      	ldr	r3, [r7, #8]
 8011628:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	68db      	ldr	r3, [r3, #12]
 801162e:	685b      	ldr	r3, [r3, #4]
 8011630:	4618      	mov	r0, r3
 8011632:	f7f8 fdf8 	bl	800a226 <lwip_htonl>
 8011636:	4602      	mov	r2, r0
 8011638:	68bb      	ldr	r3, [r7, #8]
 801163a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	68da      	ldr	r2, [r3, #12]
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	685b      	ldr	r3, [r3, #4]
 8011644:	685b      	ldr	r3, [r3, #4]
 8011646:	1ad3      	subs	r3, r2, r3
 8011648:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	685b      	ldr	r3, [r3, #4]
 801164e:	8959      	ldrh	r1, [r3, #10]
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	685b      	ldr	r3, [r3, #4]
 8011654:	8b3a      	ldrh	r2, [r7, #24]
 8011656:	1a8a      	subs	r2, r1, r2
 8011658:	b292      	uxth	r2, r2
 801165a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	685b      	ldr	r3, [r3, #4]
 8011660:	8919      	ldrh	r1, [r3, #8]
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	685b      	ldr	r3, [r3, #4]
 8011666:	8b3a      	ldrh	r2, [r7, #24]
 8011668:	1a8a      	subs	r2, r1, r2
 801166a:	b292      	uxth	r2, r2
 801166c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	685b      	ldr	r3, [r3, #4]
 8011672:	68fa      	ldr	r2, [r7, #12]
 8011674:	68d2      	ldr	r2, [r2, #12]
 8011676:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	68db      	ldr	r3, [r3, #12]
 801167c:	2200      	movs	r2, #0
 801167e:	741a      	strb	r2, [r3, #16]
 8011680:	2200      	movs	r2, #0
 8011682:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	68db      	ldr	r3, [r3, #12]
 8011688:	f103 0214 	add.w	r2, r3, #20
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	7a9b      	ldrb	r3, [r3, #10]
 8011690:	009b      	lsls	r3, r3, #2
 8011692:	f003 0304 	and.w	r3, r3, #4
 8011696:	4413      	add	r3, r2
 8011698:	69fa      	ldr	r2, [r7, #28]
 801169a:	429a      	cmp	r2, r3
 801169c:	d006      	beq.n	80116ac <tcp_output_segment+0x16c>
 801169e:	4b10      	ldr	r3, [pc, #64]	; (80116e0 <tcp_output_segment+0x1a0>)
 80116a0:	f240 621c 	movw	r2, #1564	; 0x61c
 80116a4:	4914      	ldr	r1, [pc, #80]	; (80116f8 <tcp_output_segment+0x1b8>)
 80116a6:	4810      	ldr	r0, [pc, #64]	; (80116e8 <tcp_output_segment+0x1a8>)
 80116a8:	f003 fb70 	bl	8014d8c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	6858      	ldr	r0, [r3, #4]
 80116b0:	68b9      	ldr	r1, [r7, #8]
 80116b2:	68bb      	ldr	r3, [r7, #8]
 80116b4:	1d1c      	adds	r4, r3, #4
 80116b6:	68bb      	ldr	r3, [r7, #8]
 80116b8:	7add      	ldrb	r5, [r3, #11]
 80116ba:	68bb      	ldr	r3, [r7, #8]
 80116bc:	7a9b      	ldrb	r3, [r3, #10]
 80116be:	687a      	ldr	r2, [r7, #4]
 80116c0:	9202      	str	r2, [sp, #8]
 80116c2:	2206      	movs	r2, #6
 80116c4:	9201      	str	r2, [sp, #4]
 80116c6:	9300      	str	r3, [sp, #0]
 80116c8:	462b      	mov	r3, r5
 80116ca:	4622      	mov	r2, r4
 80116cc:	f002 fa5c 	bl	8013b88 <ip4_output_if>
 80116d0:	4603      	mov	r3, r0
 80116d2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80116d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80116d8:	4618      	mov	r0, r3
 80116da:	3720      	adds	r7, #32
 80116dc:	46bd      	mov	sp, r7
 80116de:	bdb0      	pop	{r4, r5, r7, pc}
 80116e0:	080175b8 	.word	0x080175b8
 80116e4:	08017b7c 	.word	0x08017b7c
 80116e8:	0801760c 	.word	0x0801760c
 80116ec:	08017b9c 	.word	0x08017b9c
 80116f0:	08017bbc 	.word	0x08017bbc
 80116f4:	24003608 	.word	0x24003608
 80116f8:	08017be0 	.word	0x08017be0

080116fc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80116fc:	b5b0      	push	{r4, r5, r7, lr}
 80116fe:	b084      	sub	sp, #16
 8011700:	af00      	add	r7, sp, #0
 8011702:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d106      	bne.n	8011718 <tcp_rexmit_rto_prepare+0x1c>
 801170a:	4b31      	ldr	r3, [pc, #196]	; (80117d0 <tcp_rexmit_rto_prepare+0xd4>)
 801170c:	f240 6263 	movw	r2, #1635	; 0x663
 8011710:	4930      	ldr	r1, [pc, #192]	; (80117d4 <tcp_rexmit_rto_prepare+0xd8>)
 8011712:	4831      	ldr	r0, [pc, #196]	; (80117d8 <tcp_rexmit_rto_prepare+0xdc>)
 8011714:	f003 fb3a 	bl	8014d8c <iprintf>

  if (pcb->unacked == NULL) {
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801171c:	2b00      	cmp	r3, #0
 801171e:	d102      	bne.n	8011726 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011720:	f06f 0305 	mvn.w	r3, #5
 8011724:	e050      	b.n	80117c8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801172a:	60fb      	str	r3, [r7, #12]
 801172c:	e00b      	b.n	8011746 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801172e:	68f8      	ldr	r0, [r7, #12]
 8011730:	f7ff fee6 	bl	8011500 <tcp_output_segment_busy>
 8011734:	4603      	mov	r3, r0
 8011736:	2b00      	cmp	r3, #0
 8011738:	d002      	beq.n	8011740 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801173a:	f06f 0305 	mvn.w	r3, #5
 801173e:	e043      	b.n	80117c8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	60fb      	str	r3, [r7, #12]
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d1ef      	bne.n	801172e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801174e:	68f8      	ldr	r0, [r7, #12]
 8011750:	f7ff fed6 	bl	8011500 <tcp_output_segment_busy>
 8011754:	4603      	mov	r3, r0
 8011756:	2b00      	cmp	r3, #0
 8011758:	d002      	beq.n	8011760 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801175a:	f06f 0305 	mvn.w	r3, #5
 801175e:	e033      	b.n	80117c8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	2200      	movs	r2, #0
 8011774:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	8b5b      	ldrh	r3, [r3, #26]
 801177a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801177e:	b29a      	uxth	r2, r3
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	68db      	ldr	r3, [r3, #12]
 8011788:	685b      	ldr	r3, [r3, #4]
 801178a:	4618      	mov	r0, r3
 801178c:	f7f8 fd4b 	bl	800a226 <lwip_htonl>
 8011790:	4604      	mov	r4, r0
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	891b      	ldrh	r3, [r3, #8]
 8011796:	461d      	mov	r5, r3
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	68db      	ldr	r3, [r3, #12]
 801179c:	899b      	ldrh	r3, [r3, #12]
 801179e:	b29b      	uxth	r3, r3
 80117a0:	4618      	mov	r0, r3
 80117a2:	f7f8 fd2b 	bl	800a1fc <lwip_htons>
 80117a6:	4603      	mov	r3, r0
 80117a8:	b2db      	uxtb	r3, r3
 80117aa:	f003 0303 	and.w	r3, r3, #3
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d001      	beq.n	80117b6 <tcp_rexmit_rto_prepare+0xba>
 80117b2:	2301      	movs	r3, #1
 80117b4:	e000      	b.n	80117b8 <tcp_rexmit_rto_prepare+0xbc>
 80117b6:	2300      	movs	r3, #0
 80117b8:	442b      	add	r3, r5
 80117ba:	18e2      	adds	r2, r4, r3
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	2200      	movs	r2, #0
 80117c4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80117c6:	2300      	movs	r3, #0
}
 80117c8:	4618      	mov	r0, r3
 80117ca:	3710      	adds	r7, #16
 80117cc:	46bd      	mov	sp, r7
 80117ce:	bdb0      	pop	{r4, r5, r7, pc}
 80117d0:	080175b8 	.word	0x080175b8
 80117d4:	08017bf4 	.word	0x08017bf4
 80117d8:	0801760c 	.word	0x0801760c

080117dc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b082      	sub	sp, #8
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d106      	bne.n	80117f8 <tcp_rexmit_rto_commit+0x1c>
 80117ea:	4b0d      	ldr	r3, [pc, #52]	; (8011820 <tcp_rexmit_rto_commit+0x44>)
 80117ec:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80117f0:	490c      	ldr	r1, [pc, #48]	; (8011824 <tcp_rexmit_rto_commit+0x48>)
 80117f2:	480d      	ldr	r0, [pc, #52]	; (8011828 <tcp_rexmit_rto_commit+0x4c>)
 80117f4:	f003 faca 	bl	8014d8c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80117fe:	2bff      	cmp	r3, #255	; 0xff
 8011800:	d007      	beq.n	8011812 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011808:	3301      	adds	r3, #1
 801180a:	b2da      	uxtb	r2, r3
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8011812:	6878      	ldr	r0, [r7, #4]
 8011814:	f7ff fc80 	bl	8011118 <tcp_output>
}
 8011818:	bf00      	nop
 801181a:	3708      	adds	r7, #8
 801181c:	46bd      	mov	sp, r7
 801181e:	bd80      	pop	{r7, pc}
 8011820:	080175b8 	.word	0x080175b8
 8011824:	08017c18 	.word	0x08017c18
 8011828:	0801760c 	.word	0x0801760c

0801182c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801182c:	b580      	push	{r7, lr}
 801182e:	b082      	sub	sp, #8
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d106      	bne.n	8011848 <tcp_rexmit_rto+0x1c>
 801183a:	4b0a      	ldr	r3, [pc, #40]	; (8011864 <tcp_rexmit_rto+0x38>)
 801183c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8011840:	4909      	ldr	r1, [pc, #36]	; (8011868 <tcp_rexmit_rto+0x3c>)
 8011842:	480a      	ldr	r0, [pc, #40]	; (801186c <tcp_rexmit_rto+0x40>)
 8011844:	f003 faa2 	bl	8014d8c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011848:	6878      	ldr	r0, [r7, #4]
 801184a:	f7ff ff57 	bl	80116fc <tcp_rexmit_rto_prepare>
 801184e:	4603      	mov	r3, r0
 8011850:	2b00      	cmp	r3, #0
 8011852:	d102      	bne.n	801185a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011854:	6878      	ldr	r0, [r7, #4]
 8011856:	f7ff ffc1 	bl	80117dc <tcp_rexmit_rto_commit>
  }
}
 801185a:	bf00      	nop
 801185c:	3708      	adds	r7, #8
 801185e:	46bd      	mov	sp, r7
 8011860:	bd80      	pop	{r7, pc}
 8011862:	bf00      	nop
 8011864:	080175b8 	.word	0x080175b8
 8011868:	08017c3c 	.word	0x08017c3c
 801186c:	0801760c 	.word	0x0801760c

08011870 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011870:	b590      	push	{r4, r7, lr}
 8011872:	b085      	sub	sp, #20
 8011874:	af00      	add	r7, sp, #0
 8011876:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d106      	bne.n	801188c <tcp_rexmit+0x1c>
 801187e:	4b2f      	ldr	r3, [pc, #188]	; (801193c <tcp_rexmit+0xcc>)
 8011880:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8011884:	492e      	ldr	r1, [pc, #184]	; (8011940 <tcp_rexmit+0xd0>)
 8011886:	482f      	ldr	r0, [pc, #188]	; (8011944 <tcp_rexmit+0xd4>)
 8011888:	f003 fa80 	bl	8014d8c <iprintf>

  if (pcb->unacked == NULL) {
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011890:	2b00      	cmp	r3, #0
 8011892:	d102      	bne.n	801189a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8011894:	f06f 0305 	mvn.w	r3, #5
 8011898:	e04c      	b.n	8011934 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801189e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80118a0:	68b8      	ldr	r0, [r7, #8]
 80118a2:	f7ff fe2d 	bl	8011500 <tcp_output_segment_busy>
 80118a6:	4603      	mov	r3, r0
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d002      	beq.n	80118b2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80118ac:	f06f 0305 	mvn.w	r3, #5
 80118b0:	e040      	b.n	8011934 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80118b2:	68bb      	ldr	r3, [r7, #8]
 80118b4:	681a      	ldr	r2, [r3, #0]
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	336c      	adds	r3, #108	; 0x6c
 80118be:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80118c0:	e002      	b.n	80118c8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d011      	beq.n	80118f4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	68db      	ldr	r3, [r3, #12]
 80118d6:	685b      	ldr	r3, [r3, #4]
 80118d8:	4618      	mov	r0, r3
 80118da:	f7f8 fca4 	bl	800a226 <lwip_htonl>
 80118de:	4604      	mov	r4, r0
 80118e0:	68bb      	ldr	r3, [r7, #8]
 80118e2:	68db      	ldr	r3, [r3, #12]
 80118e4:	685b      	ldr	r3, [r3, #4]
 80118e6:	4618      	mov	r0, r3
 80118e8:	f7f8 fc9d 	bl	800a226 <lwip_htonl>
 80118ec:	4603      	mov	r3, r0
 80118ee:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	dbe6      	blt.n	80118c2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	681a      	ldr	r2, [r3, #0]
 80118f8:	68bb      	ldr	r3, [r7, #8]
 80118fa:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	68ba      	ldr	r2, [r7, #8]
 8011900:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011902:	68bb      	ldr	r3, [r7, #8]
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d103      	bne.n	8011912 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	2200      	movs	r2, #0
 801190e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011918:	2bff      	cmp	r3, #255	; 0xff
 801191a:	d007      	beq.n	801192c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011922:	3301      	adds	r3, #1
 8011924:	b2da      	uxtb	r2, r3
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	2200      	movs	r2, #0
 8011930:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8011932:	2300      	movs	r3, #0
}
 8011934:	4618      	mov	r0, r3
 8011936:	3714      	adds	r7, #20
 8011938:	46bd      	mov	sp, r7
 801193a:	bd90      	pop	{r4, r7, pc}
 801193c:	080175b8 	.word	0x080175b8
 8011940:	08017c58 	.word	0x08017c58
 8011944:	0801760c 	.word	0x0801760c

08011948 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011948:	b580      	push	{r7, lr}
 801194a:	b082      	sub	sp, #8
 801194c:	af00      	add	r7, sp, #0
 801194e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	2b00      	cmp	r3, #0
 8011954:	d106      	bne.n	8011964 <tcp_rexmit_fast+0x1c>
 8011956:	4b2a      	ldr	r3, [pc, #168]	; (8011a00 <tcp_rexmit_fast+0xb8>)
 8011958:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801195c:	4929      	ldr	r1, [pc, #164]	; (8011a04 <tcp_rexmit_fast+0xbc>)
 801195e:	482a      	ldr	r0, [pc, #168]	; (8011a08 <tcp_rexmit_fast+0xc0>)
 8011960:	f003 fa14 	bl	8014d8c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011968:	2b00      	cmp	r3, #0
 801196a:	d045      	beq.n	80119f8 <tcp_rexmit_fast+0xb0>
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	8b5b      	ldrh	r3, [r3, #26]
 8011970:	f003 0304 	and.w	r3, r3, #4
 8011974:	2b00      	cmp	r3, #0
 8011976:	d13f      	bne.n	80119f8 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8011978:	6878      	ldr	r0, [r7, #4]
 801197a:	f7ff ff79 	bl	8011870 <tcp_rexmit>
 801197e:	4603      	mov	r3, r0
 8011980:	2b00      	cmp	r3, #0
 8011982:	d139      	bne.n	80119f8 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011990:	4293      	cmp	r3, r2
 8011992:	bf28      	it	cs
 8011994:	4613      	movcs	r3, r2
 8011996:	b29b      	uxth	r3, r3
 8011998:	2b00      	cmp	r3, #0
 801199a:	da00      	bge.n	801199e <tcp_rexmit_fast+0x56>
 801199c:	3301      	adds	r3, #1
 801199e:	105b      	asrs	r3, r3, #1
 80119a0:	b29a      	uxth	r2, r3
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80119ae:	461a      	mov	r2, r3
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80119b4:	005b      	lsls	r3, r3, #1
 80119b6:	429a      	cmp	r2, r3
 80119b8:	d206      	bcs.n	80119c8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80119be:	005b      	lsls	r3, r3, #1
 80119c0:	b29a      	uxth	r2, r3
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80119d2:	4619      	mov	r1, r3
 80119d4:	0049      	lsls	r1, r1, #1
 80119d6:	440b      	add	r3, r1
 80119d8:	b29b      	uxth	r3, r3
 80119da:	4413      	add	r3, r2
 80119dc:	b29a      	uxth	r2, r3
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	8b5b      	ldrh	r3, [r3, #26]
 80119e8:	f043 0304 	orr.w	r3, r3, #4
 80119ec:	b29a      	uxth	r2, r3
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	2200      	movs	r2, #0
 80119f6:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80119f8:	bf00      	nop
 80119fa:	3708      	adds	r7, #8
 80119fc:	46bd      	mov	sp, r7
 80119fe:	bd80      	pop	{r7, pc}
 8011a00:	080175b8 	.word	0x080175b8
 8011a04:	08017c70 	.word	0x08017c70
 8011a08:	0801760c 	.word	0x0801760c

08011a0c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011a0c:	b580      	push	{r7, lr}
 8011a0e:	b086      	sub	sp, #24
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	60f8      	str	r0, [r7, #12]
 8011a14:	607b      	str	r3, [r7, #4]
 8011a16:	460b      	mov	r3, r1
 8011a18:	817b      	strh	r3, [r7, #10]
 8011a1a:	4613      	mov	r3, r2
 8011a1c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8011a1e:	897a      	ldrh	r2, [r7, #10]
 8011a20:	893b      	ldrh	r3, [r7, #8]
 8011a22:	4413      	add	r3, r2
 8011a24:	b29b      	uxth	r3, r3
 8011a26:	3314      	adds	r3, #20
 8011a28:	b29b      	uxth	r3, r3
 8011a2a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011a2e:	4619      	mov	r1, r3
 8011a30:	2022      	movs	r0, #34	; 0x22
 8011a32:	f7f9 fd15 	bl	800b460 <pbuf_alloc>
 8011a36:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011a38:	697b      	ldr	r3, [r7, #20]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d04d      	beq.n	8011ada <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011a3e:	897b      	ldrh	r3, [r7, #10]
 8011a40:	3313      	adds	r3, #19
 8011a42:	697a      	ldr	r2, [r7, #20]
 8011a44:	8952      	ldrh	r2, [r2, #10]
 8011a46:	4293      	cmp	r3, r2
 8011a48:	db06      	blt.n	8011a58 <tcp_output_alloc_header_common+0x4c>
 8011a4a:	4b26      	ldr	r3, [pc, #152]	; (8011ae4 <tcp_output_alloc_header_common+0xd8>)
 8011a4c:	f240 7223 	movw	r2, #1827	; 0x723
 8011a50:	4925      	ldr	r1, [pc, #148]	; (8011ae8 <tcp_output_alloc_header_common+0xdc>)
 8011a52:	4826      	ldr	r0, [pc, #152]	; (8011aec <tcp_output_alloc_header_common+0xe0>)
 8011a54:	f003 f99a 	bl	8014d8c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011a58:	697b      	ldr	r3, [r7, #20]
 8011a5a:	685b      	ldr	r3, [r3, #4]
 8011a5c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8011a5e:	8c3b      	ldrh	r3, [r7, #32]
 8011a60:	4618      	mov	r0, r3
 8011a62:	f7f8 fbcb 	bl	800a1fc <lwip_htons>
 8011a66:	4603      	mov	r3, r0
 8011a68:	461a      	mov	r2, r3
 8011a6a:	693b      	ldr	r3, [r7, #16]
 8011a6c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8011a6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011a70:	4618      	mov	r0, r3
 8011a72:	f7f8 fbc3 	bl	800a1fc <lwip_htons>
 8011a76:	4603      	mov	r3, r0
 8011a78:	461a      	mov	r2, r3
 8011a7a:	693b      	ldr	r3, [r7, #16]
 8011a7c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8011a7e:	693b      	ldr	r3, [r7, #16]
 8011a80:	687a      	ldr	r2, [r7, #4]
 8011a82:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8011a84:	68f8      	ldr	r0, [r7, #12]
 8011a86:	f7f8 fbce 	bl	800a226 <lwip_htonl>
 8011a8a:	4602      	mov	r2, r0
 8011a8c:	693b      	ldr	r3, [r7, #16]
 8011a8e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8011a90:	897b      	ldrh	r3, [r7, #10]
 8011a92:	089b      	lsrs	r3, r3, #2
 8011a94:	b29b      	uxth	r3, r3
 8011a96:	3305      	adds	r3, #5
 8011a98:	b29b      	uxth	r3, r3
 8011a9a:	031b      	lsls	r3, r3, #12
 8011a9c:	b29a      	uxth	r2, r3
 8011a9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011aa2:	b29b      	uxth	r3, r3
 8011aa4:	4313      	orrs	r3, r2
 8011aa6:	b29b      	uxth	r3, r3
 8011aa8:	4618      	mov	r0, r3
 8011aaa:	f7f8 fba7 	bl	800a1fc <lwip_htons>
 8011aae:	4603      	mov	r3, r0
 8011ab0:	461a      	mov	r2, r3
 8011ab2:	693b      	ldr	r3, [r7, #16]
 8011ab4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8011ab6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011ab8:	4618      	mov	r0, r3
 8011aba:	f7f8 fb9f 	bl	800a1fc <lwip_htons>
 8011abe:	4603      	mov	r3, r0
 8011ac0:	461a      	mov	r2, r3
 8011ac2:	693b      	ldr	r3, [r7, #16]
 8011ac4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011ac6:	693b      	ldr	r3, [r7, #16]
 8011ac8:	2200      	movs	r2, #0
 8011aca:	741a      	strb	r2, [r3, #16]
 8011acc:	2200      	movs	r2, #0
 8011ace:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011ad0:	693b      	ldr	r3, [r7, #16]
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	749a      	strb	r2, [r3, #18]
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8011ada:	697b      	ldr	r3, [r7, #20]
}
 8011adc:	4618      	mov	r0, r3
 8011ade:	3718      	adds	r7, #24
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	bd80      	pop	{r7, pc}
 8011ae4:	080175b8 	.word	0x080175b8
 8011ae8:	08017c90 	.word	0x08017c90
 8011aec:	0801760c 	.word	0x0801760c

08011af0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011af0:	b5b0      	push	{r4, r5, r7, lr}
 8011af2:	b08a      	sub	sp, #40	; 0x28
 8011af4:	af04      	add	r7, sp, #16
 8011af6:	60f8      	str	r0, [r7, #12]
 8011af8:	607b      	str	r3, [r7, #4]
 8011afa:	460b      	mov	r3, r1
 8011afc:	817b      	strh	r3, [r7, #10]
 8011afe:	4613      	mov	r3, r2
 8011b00:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d106      	bne.n	8011b16 <tcp_output_alloc_header+0x26>
 8011b08:	4b15      	ldr	r3, [pc, #84]	; (8011b60 <tcp_output_alloc_header+0x70>)
 8011b0a:	f240 7242 	movw	r2, #1858	; 0x742
 8011b0e:	4915      	ldr	r1, [pc, #84]	; (8011b64 <tcp_output_alloc_header+0x74>)
 8011b10:	4815      	ldr	r0, [pc, #84]	; (8011b68 <tcp_output_alloc_header+0x78>)
 8011b12:	f003 f93b 	bl	8014d8c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	8adb      	ldrh	r3, [r3, #22]
 8011b1e:	68fa      	ldr	r2, [r7, #12]
 8011b20:	8b12      	ldrh	r2, [r2, #24]
 8011b22:	68f9      	ldr	r1, [r7, #12]
 8011b24:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8011b26:	893d      	ldrh	r5, [r7, #8]
 8011b28:	897c      	ldrh	r4, [r7, #10]
 8011b2a:	9103      	str	r1, [sp, #12]
 8011b2c:	2110      	movs	r1, #16
 8011b2e:	9102      	str	r1, [sp, #8]
 8011b30:	9201      	str	r2, [sp, #4]
 8011b32:	9300      	str	r3, [sp, #0]
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	462a      	mov	r2, r5
 8011b38:	4621      	mov	r1, r4
 8011b3a:	f7ff ff67 	bl	8011a0c <tcp_output_alloc_header_common>
 8011b3e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011b40:	697b      	ldr	r3, [r7, #20]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d006      	beq.n	8011b54 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b4a:	68fa      	ldr	r2, [r7, #12]
 8011b4c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011b4e:	441a      	add	r2, r3
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8011b54:	697b      	ldr	r3, [r7, #20]
}
 8011b56:	4618      	mov	r0, r3
 8011b58:	3718      	adds	r7, #24
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	bdb0      	pop	{r4, r5, r7, pc}
 8011b5e:	bf00      	nop
 8011b60:	080175b8 	.word	0x080175b8
 8011b64:	08017cc0 	.word	0x08017cc0
 8011b68:	0801760c 	.word	0x0801760c

08011b6c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b088      	sub	sp, #32
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	60f8      	str	r0, [r7, #12]
 8011b74:	60b9      	str	r1, [r7, #8]
 8011b76:	4611      	mov	r1, r2
 8011b78:	461a      	mov	r2, r3
 8011b7a:	460b      	mov	r3, r1
 8011b7c:	71fb      	strb	r3, [r7, #7]
 8011b7e:	4613      	mov	r3, r2
 8011b80:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8011b82:	2300      	movs	r3, #0
 8011b84:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8011b86:	68bb      	ldr	r3, [r7, #8]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d106      	bne.n	8011b9a <tcp_output_fill_options+0x2e>
 8011b8c:	4b13      	ldr	r3, [pc, #76]	; (8011bdc <tcp_output_fill_options+0x70>)
 8011b8e:	f240 7256 	movw	r2, #1878	; 0x756
 8011b92:	4913      	ldr	r1, [pc, #76]	; (8011be0 <tcp_output_fill_options+0x74>)
 8011b94:	4813      	ldr	r0, [pc, #76]	; (8011be4 <tcp_output_fill_options+0x78>)
 8011b96:	f003 f8f9 	bl	8014d8c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8011b9a:	68bb      	ldr	r3, [r7, #8]
 8011b9c:	685b      	ldr	r3, [r3, #4]
 8011b9e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011ba0:	69bb      	ldr	r3, [r7, #24]
 8011ba2:	3314      	adds	r3, #20
 8011ba4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8011ba6:	69bb      	ldr	r3, [r7, #24]
 8011ba8:	f103 0214 	add.w	r2, r3, #20
 8011bac:	8bfb      	ldrh	r3, [r7, #30]
 8011bae:	009b      	lsls	r3, r3, #2
 8011bb0:	4619      	mov	r1, r3
 8011bb2:	79fb      	ldrb	r3, [r7, #7]
 8011bb4:	009b      	lsls	r3, r3, #2
 8011bb6:	f003 0304 	and.w	r3, r3, #4
 8011bba:	440b      	add	r3, r1
 8011bbc:	4413      	add	r3, r2
 8011bbe:	697a      	ldr	r2, [r7, #20]
 8011bc0:	429a      	cmp	r2, r3
 8011bc2:	d006      	beq.n	8011bd2 <tcp_output_fill_options+0x66>
 8011bc4:	4b05      	ldr	r3, [pc, #20]	; (8011bdc <tcp_output_fill_options+0x70>)
 8011bc6:	f240 7275 	movw	r2, #1909	; 0x775
 8011bca:	4907      	ldr	r1, [pc, #28]	; (8011be8 <tcp_output_fill_options+0x7c>)
 8011bcc:	4805      	ldr	r0, [pc, #20]	; (8011be4 <tcp_output_fill_options+0x78>)
 8011bce:	f003 f8dd 	bl	8014d8c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011bd2:	bf00      	nop
 8011bd4:	3720      	adds	r7, #32
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	bd80      	pop	{r7, pc}
 8011bda:	bf00      	nop
 8011bdc:	080175b8 	.word	0x080175b8
 8011be0:	08017ce8 	.word	0x08017ce8
 8011be4:	0801760c 	.word	0x0801760c
 8011be8:	08017be0 	.word	0x08017be0

08011bec <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b08a      	sub	sp, #40	; 0x28
 8011bf0:	af04      	add	r7, sp, #16
 8011bf2:	60f8      	str	r0, [r7, #12]
 8011bf4:	60b9      	str	r1, [r7, #8]
 8011bf6:	607a      	str	r2, [r7, #4]
 8011bf8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011bfa:	68bb      	ldr	r3, [r7, #8]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d106      	bne.n	8011c0e <tcp_output_control_segment+0x22>
 8011c00:	4b1c      	ldr	r3, [pc, #112]	; (8011c74 <tcp_output_control_segment+0x88>)
 8011c02:	f240 7287 	movw	r2, #1927	; 0x787
 8011c06:	491c      	ldr	r1, [pc, #112]	; (8011c78 <tcp_output_control_segment+0x8c>)
 8011c08:	481c      	ldr	r0, [pc, #112]	; (8011c7c <tcp_output_control_segment+0x90>)
 8011c0a:	f003 f8bf 	bl	8014d8c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011c0e:	683a      	ldr	r2, [r7, #0]
 8011c10:	6879      	ldr	r1, [r7, #4]
 8011c12:	68f8      	ldr	r0, [r7, #12]
 8011c14:	f7fe fae8 	bl	80101e8 <tcp_route>
 8011c18:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011c1a:	693b      	ldr	r3, [r7, #16]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d102      	bne.n	8011c26 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011c20:	23fc      	movs	r3, #252	; 0xfc
 8011c22:	75fb      	strb	r3, [r7, #23]
 8011c24:	e01c      	b.n	8011c60 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d006      	beq.n	8011c3a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	7adb      	ldrb	r3, [r3, #11]
 8011c30:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	7a9b      	ldrb	r3, [r3, #10]
 8011c36:	757b      	strb	r3, [r7, #21]
 8011c38:	e003      	b.n	8011c42 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011c3a:	23ff      	movs	r3, #255	; 0xff
 8011c3c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011c3e:	2300      	movs	r3, #0
 8011c40:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011c42:	7dba      	ldrb	r2, [r7, #22]
 8011c44:	693b      	ldr	r3, [r7, #16]
 8011c46:	9302      	str	r3, [sp, #8]
 8011c48:	2306      	movs	r3, #6
 8011c4a:	9301      	str	r3, [sp, #4]
 8011c4c:	7d7b      	ldrb	r3, [r7, #21]
 8011c4e:	9300      	str	r3, [sp, #0]
 8011c50:	4613      	mov	r3, r2
 8011c52:	683a      	ldr	r2, [r7, #0]
 8011c54:	6879      	ldr	r1, [r7, #4]
 8011c56:	68b8      	ldr	r0, [r7, #8]
 8011c58:	f001 ff96 	bl	8013b88 <ip4_output_if>
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011c60:	68b8      	ldr	r0, [r7, #8]
 8011c62:	f7f9 fee1 	bl	800ba28 <pbuf_free>
  return err;
 8011c66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	3718      	adds	r7, #24
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	bd80      	pop	{r7, pc}
 8011c72:	bf00      	nop
 8011c74:	080175b8 	.word	0x080175b8
 8011c78:	08017d10 	.word	0x08017d10
 8011c7c:	0801760c 	.word	0x0801760c

08011c80 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011c80:	b590      	push	{r4, r7, lr}
 8011c82:	b08b      	sub	sp, #44	; 0x2c
 8011c84:	af04      	add	r7, sp, #16
 8011c86:	60f8      	str	r0, [r7, #12]
 8011c88:	60b9      	str	r1, [r7, #8]
 8011c8a:	607a      	str	r2, [r7, #4]
 8011c8c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011c8e:	683b      	ldr	r3, [r7, #0]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d106      	bne.n	8011ca2 <tcp_rst+0x22>
 8011c94:	4b1f      	ldr	r3, [pc, #124]	; (8011d14 <tcp_rst+0x94>)
 8011c96:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8011c9a:	491f      	ldr	r1, [pc, #124]	; (8011d18 <tcp_rst+0x98>)
 8011c9c:	481f      	ldr	r0, [pc, #124]	; (8011d1c <tcp_rst+0x9c>)
 8011c9e:	f003 f875 	bl	8014d8c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d106      	bne.n	8011cb6 <tcp_rst+0x36>
 8011ca8:	4b1a      	ldr	r3, [pc, #104]	; (8011d14 <tcp_rst+0x94>)
 8011caa:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8011cae:	491c      	ldr	r1, [pc, #112]	; (8011d20 <tcp_rst+0xa0>)
 8011cb0:	481a      	ldr	r0, [pc, #104]	; (8011d1c <tcp_rst+0x9c>)
 8011cb2:	f003 f86b 	bl	8014d8c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011cba:	f246 0308 	movw	r3, #24584	; 0x6008
 8011cbe:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011cc0:	7dfb      	ldrb	r3, [r7, #23]
 8011cc2:	b29c      	uxth	r4, r3
 8011cc4:	68b8      	ldr	r0, [r7, #8]
 8011cc6:	f7f8 faae 	bl	800a226 <lwip_htonl>
 8011cca:	4602      	mov	r2, r0
 8011ccc:	8abb      	ldrh	r3, [r7, #20]
 8011cce:	9303      	str	r3, [sp, #12]
 8011cd0:	2314      	movs	r3, #20
 8011cd2:	9302      	str	r3, [sp, #8]
 8011cd4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011cd6:	9301      	str	r3, [sp, #4]
 8011cd8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011cda:	9300      	str	r3, [sp, #0]
 8011cdc:	4613      	mov	r3, r2
 8011cde:	2200      	movs	r2, #0
 8011ce0:	4621      	mov	r1, r4
 8011ce2:	6878      	ldr	r0, [r7, #4]
 8011ce4:	f7ff fe92 	bl	8011a0c <tcp_output_alloc_header_common>
 8011ce8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011cea:	693b      	ldr	r3, [r7, #16]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d00c      	beq.n	8011d0a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011cf0:	7dfb      	ldrb	r3, [r7, #23]
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	6939      	ldr	r1, [r7, #16]
 8011cf6:	68f8      	ldr	r0, [r7, #12]
 8011cf8:	f7ff ff38 	bl	8011b6c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cfe:	683a      	ldr	r2, [r7, #0]
 8011d00:	6939      	ldr	r1, [r7, #16]
 8011d02:	68f8      	ldr	r0, [r7, #12]
 8011d04:	f7ff ff72 	bl	8011bec <tcp_output_control_segment>
 8011d08:	e000      	b.n	8011d0c <tcp_rst+0x8c>
    return;
 8011d0a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011d0c:	371c      	adds	r7, #28
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	bd90      	pop	{r4, r7, pc}
 8011d12:	bf00      	nop
 8011d14:	080175b8 	.word	0x080175b8
 8011d18:	08017d3c 	.word	0x08017d3c
 8011d1c:	0801760c 	.word	0x0801760c
 8011d20:	08017d58 	.word	0x08017d58

08011d24 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011d24:	b590      	push	{r4, r7, lr}
 8011d26:	b087      	sub	sp, #28
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011d30:	2300      	movs	r3, #0
 8011d32:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d106      	bne.n	8011d48 <tcp_send_empty_ack+0x24>
 8011d3a:	4b28      	ldr	r3, [pc, #160]	; (8011ddc <tcp_send_empty_ack+0xb8>)
 8011d3c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8011d40:	4927      	ldr	r1, [pc, #156]	; (8011de0 <tcp_send_empty_ack+0xbc>)
 8011d42:	4828      	ldr	r0, [pc, #160]	; (8011de4 <tcp_send_empty_ack+0xc0>)
 8011d44:	f003 f822 	bl	8014d8c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011d48:	7dfb      	ldrb	r3, [r7, #23]
 8011d4a:	009b      	lsls	r3, r3, #2
 8011d4c:	b2db      	uxtb	r3, r3
 8011d4e:	f003 0304 	and.w	r3, r3, #4
 8011d52:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011d54:	7d7b      	ldrb	r3, [r7, #21]
 8011d56:	b29c      	uxth	r4, r3
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	f7f8 fa62 	bl	800a226 <lwip_htonl>
 8011d62:	4603      	mov	r3, r0
 8011d64:	2200      	movs	r2, #0
 8011d66:	4621      	mov	r1, r4
 8011d68:	6878      	ldr	r0, [r7, #4]
 8011d6a:	f7ff fec1 	bl	8011af0 <tcp_output_alloc_header>
 8011d6e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011d70:	693b      	ldr	r3, [r7, #16]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d109      	bne.n	8011d8a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	8b5b      	ldrh	r3, [r3, #26]
 8011d7a:	f043 0303 	orr.w	r3, r3, #3
 8011d7e:	b29a      	uxth	r2, r3
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011d84:	f06f 0301 	mvn.w	r3, #1
 8011d88:	e023      	b.n	8011dd2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011d8a:	7dbb      	ldrb	r3, [r7, #22]
 8011d8c:	7dfa      	ldrb	r2, [r7, #23]
 8011d8e:	6939      	ldr	r1, [r7, #16]
 8011d90:	6878      	ldr	r0, [r7, #4]
 8011d92:	f7ff feeb 	bl	8011b6c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011d96:	687a      	ldr	r2, [r7, #4]
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	3304      	adds	r3, #4
 8011d9c:	6939      	ldr	r1, [r7, #16]
 8011d9e:	6878      	ldr	r0, [r7, #4]
 8011da0:	f7ff ff24 	bl	8011bec <tcp_output_control_segment>
 8011da4:	4603      	mov	r3, r0
 8011da6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011da8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d007      	beq.n	8011dc0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	8b5b      	ldrh	r3, [r3, #26]
 8011db4:	f043 0303 	orr.w	r3, r3, #3
 8011db8:	b29a      	uxth	r2, r3
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	835a      	strh	r2, [r3, #26]
 8011dbe:	e006      	b.n	8011dce <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	8b5b      	ldrh	r3, [r3, #26]
 8011dc4:	f023 0303 	bic.w	r3, r3, #3
 8011dc8:	b29a      	uxth	r2, r3
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	371c      	adds	r7, #28
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	bd90      	pop	{r4, r7, pc}
 8011dda:	bf00      	nop
 8011ddc:	080175b8 	.word	0x080175b8
 8011de0:	08017d74 	.word	0x08017d74
 8011de4:	0801760c 	.word	0x0801760c

08011de8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011de8:	b590      	push	{r4, r7, lr}
 8011dea:	b087      	sub	sp, #28
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011df0:	2300      	movs	r3, #0
 8011df2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d106      	bne.n	8011e08 <tcp_keepalive+0x20>
 8011dfa:	4b18      	ldr	r3, [pc, #96]	; (8011e5c <tcp_keepalive+0x74>)
 8011dfc:	f640 0224 	movw	r2, #2084	; 0x824
 8011e00:	4917      	ldr	r1, [pc, #92]	; (8011e60 <tcp_keepalive+0x78>)
 8011e02:	4818      	ldr	r0, [pc, #96]	; (8011e64 <tcp_keepalive+0x7c>)
 8011e04:	f002 ffc2 	bl	8014d8c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011e08:	7dfb      	ldrb	r3, [r7, #23]
 8011e0a:	b29c      	uxth	r4, r3
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e10:	3b01      	subs	r3, #1
 8011e12:	4618      	mov	r0, r3
 8011e14:	f7f8 fa07 	bl	800a226 <lwip_htonl>
 8011e18:	4603      	mov	r3, r0
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	4621      	mov	r1, r4
 8011e1e:	6878      	ldr	r0, [r7, #4]
 8011e20:	f7ff fe66 	bl	8011af0 <tcp_output_alloc_header>
 8011e24:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011e26:	693b      	ldr	r3, [r7, #16]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d102      	bne.n	8011e32 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8011e30:	e010      	b.n	8011e54 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011e32:	7dfb      	ldrb	r3, [r7, #23]
 8011e34:	2200      	movs	r2, #0
 8011e36:	6939      	ldr	r1, [r7, #16]
 8011e38:	6878      	ldr	r0, [r7, #4]
 8011e3a:	f7ff fe97 	bl	8011b6c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011e3e:	687a      	ldr	r2, [r7, #4]
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	3304      	adds	r3, #4
 8011e44:	6939      	ldr	r1, [r7, #16]
 8011e46:	6878      	ldr	r0, [r7, #4]
 8011e48:	f7ff fed0 	bl	8011bec <tcp_output_control_segment>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011e50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011e54:	4618      	mov	r0, r3
 8011e56:	371c      	adds	r7, #28
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	bd90      	pop	{r4, r7, pc}
 8011e5c:	080175b8 	.word	0x080175b8
 8011e60:	08017d94 	.word	0x08017d94
 8011e64:	0801760c 	.word	0x0801760c

08011e68 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011e68:	b590      	push	{r4, r7, lr}
 8011e6a:	b08b      	sub	sp, #44	; 0x2c
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011e70:	2300      	movs	r3, #0
 8011e72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d106      	bne.n	8011e8a <tcp_zero_window_probe+0x22>
 8011e7c:	4b4c      	ldr	r3, [pc, #304]	; (8011fb0 <tcp_zero_window_probe+0x148>)
 8011e7e:	f640 024f 	movw	r2, #2127	; 0x84f
 8011e82:	494c      	ldr	r1, [pc, #304]	; (8011fb4 <tcp_zero_window_probe+0x14c>)
 8011e84:	484c      	ldr	r0, [pc, #304]	; (8011fb8 <tcp_zero_window_probe+0x150>)
 8011e86:	f002 ff81 	bl	8014d8c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e8e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011e90:	6a3b      	ldr	r3, [r7, #32]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d101      	bne.n	8011e9a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011e96:	2300      	movs	r3, #0
 8011e98:	e086      	b.n	8011fa8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011ea0:	2bff      	cmp	r3, #255	; 0xff
 8011ea2:	d007      	beq.n	8011eb4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011eaa:	3301      	adds	r3, #1
 8011eac:	b2da      	uxtb	r2, r3
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011eb4:	6a3b      	ldr	r3, [r7, #32]
 8011eb6:	68db      	ldr	r3, [r3, #12]
 8011eb8:	899b      	ldrh	r3, [r3, #12]
 8011eba:	b29b      	uxth	r3, r3
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	f7f8 f99d 	bl	800a1fc <lwip_htons>
 8011ec2:	4603      	mov	r3, r0
 8011ec4:	b2db      	uxtb	r3, r3
 8011ec6:	f003 0301 	and.w	r3, r3, #1
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d005      	beq.n	8011eda <tcp_zero_window_probe+0x72>
 8011ece:	6a3b      	ldr	r3, [r7, #32]
 8011ed0:	891b      	ldrh	r3, [r3, #8]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d101      	bne.n	8011eda <tcp_zero_window_probe+0x72>
 8011ed6:	2301      	movs	r3, #1
 8011ed8:	e000      	b.n	8011edc <tcp_zero_window_probe+0x74>
 8011eda:	2300      	movs	r3, #0
 8011edc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011ede:	7ffb      	ldrb	r3, [r7, #31]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	bf0c      	ite	eq
 8011ee4:	2301      	moveq	r3, #1
 8011ee6:	2300      	movne	r3, #0
 8011ee8:	b2db      	uxtb	r3, r3
 8011eea:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011eec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ef0:	b299      	uxth	r1, r3
 8011ef2:	6a3b      	ldr	r3, [r7, #32]
 8011ef4:	68db      	ldr	r3, [r3, #12]
 8011ef6:	685b      	ldr	r3, [r3, #4]
 8011ef8:	8bba      	ldrh	r2, [r7, #28]
 8011efa:	6878      	ldr	r0, [r7, #4]
 8011efc:	f7ff fdf8 	bl	8011af0 <tcp_output_alloc_header>
 8011f00:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011f02:	69bb      	ldr	r3, [r7, #24]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d102      	bne.n	8011f0e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011f08:	f04f 33ff 	mov.w	r3, #4294967295
 8011f0c:	e04c      	b.n	8011fa8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011f0e:	69bb      	ldr	r3, [r7, #24]
 8011f10:	685b      	ldr	r3, [r3, #4]
 8011f12:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011f14:	7ffb      	ldrb	r3, [r7, #31]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d011      	beq.n	8011f3e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011f1a:	697b      	ldr	r3, [r7, #20]
 8011f1c:	899b      	ldrh	r3, [r3, #12]
 8011f1e:	b29b      	uxth	r3, r3
 8011f20:	b21b      	sxth	r3, r3
 8011f22:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011f26:	b21c      	sxth	r4, r3
 8011f28:	2011      	movs	r0, #17
 8011f2a:	f7f8 f967 	bl	800a1fc <lwip_htons>
 8011f2e:	4603      	mov	r3, r0
 8011f30:	b21b      	sxth	r3, r3
 8011f32:	4323      	orrs	r3, r4
 8011f34:	b21b      	sxth	r3, r3
 8011f36:	b29a      	uxth	r2, r3
 8011f38:	697b      	ldr	r3, [r7, #20]
 8011f3a:	819a      	strh	r2, [r3, #12]
 8011f3c:	e010      	b.n	8011f60 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011f3e:	69bb      	ldr	r3, [r7, #24]
 8011f40:	685b      	ldr	r3, [r3, #4]
 8011f42:	3314      	adds	r3, #20
 8011f44:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011f46:	6a3b      	ldr	r3, [r7, #32]
 8011f48:	6858      	ldr	r0, [r3, #4]
 8011f4a:	6a3b      	ldr	r3, [r7, #32]
 8011f4c:	685b      	ldr	r3, [r3, #4]
 8011f4e:	891a      	ldrh	r2, [r3, #8]
 8011f50:	6a3b      	ldr	r3, [r7, #32]
 8011f52:	891b      	ldrh	r3, [r3, #8]
 8011f54:	1ad3      	subs	r3, r2, r3
 8011f56:	b29b      	uxth	r3, r3
 8011f58:	2201      	movs	r2, #1
 8011f5a:	6939      	ldr	r1, [r7, #16]
 8011f5c:	f7f9 ff5e 	bl	800be1c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011f60:	6a3b      	ldr	r3, [r7, #32]
 8011f62:	68db      	ldr	r3, [r3, #12]
 8011f64:	685b      	ldr	r3, [r3, #4]
 8011f66:	4618      	mov	r0, r3
 8011f68:	f7f8 f95d 	bl	800a226 <lwip_htonl>
 8011f6c:	4603      	mov	r3, r0
 8011f6e:	3301      	adds	r3, #1
 8011f70:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	1ad3      	subs	r3, r2, r3
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	da02      	bge.n	8011f84 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	68fa      	ldr	r2, [r7, #12]
 8011f82:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011f84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f88:	2200      	movs	r2, #0
 8011f8a:	69b9      	ldr	r1, [r7, #24]
 8011f8c:	6878      	ldr	r0, [r7, #4]
 8011f8e:	f7ff fded 	bl	8011b6c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011f92:	687a      	ldr	r2, [r7, #4]
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	3304      	adds	r3, #4
 8011f98:	69b9      	ldr	r1, [r7, #24]
 8011f9a:	6878      	ldr	r0, [r7, #4]
 8011f9c:	f7ff fe26 	bl	8011bec <tcp_output_control_segment>
 8011fa0:	4603      	mov	r3, r0
 8011fa2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011fa4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011fa8:	4618      	mov	r0, r3
 8011faa:	372c      	adds	r7, #44	; 0x2c
 8011fac:	46bd      	mov	sp, r7
 8011fae:	bd90      	pop	{r4, r7, pc}
 8011fb0:	080175b8 	.word	0x080175b8
 8011fb4:	08017db0 	.word	0x08017db0
 8011fb8:	0801760c 	.word	0x0801760c

08011fbc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	b082      	sub	sp, #8
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011fc4:	f7fa f818 	bl	800bff8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011fc8:	4b0a      	ldr	r3, [pc, #40]	; (8011ff4 <tcpip_tcp_timer+0x38>)
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d103      	bne.n	8011fd8 <tcpip_tcp_timer+0x1c>
 8011fd0:	4b09      	ldr	r3, [pc, #36]	; (8011ff8 <tcpip_tcp_timer+0x3c>)
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d005      	beq.n	8011fe4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011fd8:	2200      	movs	r2, #0
 8011fda:	4908      	ldr	r1, [pc, #32]	; (8011ffc <tcpip_tcp_timer+0x40>)
 8011fdc:	20fa      	movs	r0, #250	; 0xfa
 8011fde:	f000 f8f3 	bl	80121c8 <sys_timeout>
 8011fe2:	e003      	b.n	8011fec <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011fe4:	4b06      	ldr	r3, [pc, #24]	; (8012000 <tcpip_tcp_timer+0x44>)
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	601a      	str	r2, [r3, #0]
  }
}
 8011fea:	bf00      	nop
 8011fec:	bf00      	nop
 8011fee:	3708      	adds	r7, #8
 8011ff0:	46bd      	mov	sp, r7
 8011ff2:	bd80      	pop	{r7, pc}
 8011ff4:	24003604 	.word	0x24003604
 8011ff8:	24003614 	.word	0x24003614
 8011ffc:	08011fbd 	.word	0x08011fbd
 8012000:	24000130 	.word	0x24000130

08012004 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012004:	b580      	push	{r7, lr}
 8012006:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012008:	4b0a      	ldr	r3, [pc, #40]	; (8012034 <tcp_timer_needed+0x30>)
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d10f      	bne.n	8012030 <tcp_timer_needed+0x2c>
 8012010:	4b09      	ldr	r3, [pc, #36]	; (8012038 <tcp_timer_needed+0x34>)
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d103      	bne.n	8012020 <tcp_timer_needed+0x1c>
 8012018:	4b08      	ldr	r3, [pc, #32]	; (801203c <tcp_timer_needed+0x38>)
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d007      	beq.n	8012030 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012020:	4b04      	ldr	r3, [pc, #16]	; (8012034 <tcp_timer_needed+0x30>)
 8012022:	2201      	movs	r2, #1
 8012024:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012026:	2200      	movs	r2, #0
 8012028:	4905      	ldr	r1, [pc, #20]	; (8012040 <tcp_timer_needed+0x3c>)
 801202a:	20fa      	movs	r0, #250	; 0xfa
 801202c:	f000 f8cc 	bl	80121c8 <sys_timeout>
  }
}
 8012030:	bf00      	nop
 8012032:	bd80      	pop	{r7, pc}
 8012034:	24000130 	.word	0x24000130
 8012038:	24003604 	.word	0x24003604
 801203c:	24003614 	.word	0x24003614
 8012040:	08011fbd 	.word	0x08011fbd

08012044 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012044:	b580      	push	{r7, lr}
 8012046:	b086      	sub	sp, #24
 8012048:	af00      	add	r7, sp, #0
 801204a:	60f8      	str	r0, [r7, #12]
 801204c:	60b9      	str	r1, [r7, #8]
 801204e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012050:	2006      	movs	r0, #6
 8012052:	f7f8 fe03 	bl	800ac5c <memp_malloc>
 8012056:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012058:	693b      	ldr	r3, [r7, #16]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d109      	bne.n	8012072 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801205e:	693b      	ldr	r3, [r7, #16]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d151      	bne.n	8012108 <sys_timeout_abs+0xc4>
 8012064:	4b2a      	ldr	r3, [pc, #168]	; (8012110 <sys_timeout_abs+0xcc>)
 8012066:	22be      	movs	r2, #190	; 0xbe
 8012068:	492a      	ldr	r1, [pc, #168]	; (8012114 <sys_timeout_abs+0xd0>)
 801206a:	482b      	ldr	r0, [pc, #172]	; (8012118 <sys_timeout_abs+0xd4>)
 801206c:	f002 fe8e 	bl	8014d8c <iprintf>
    return;
 8012070:	e04a      	b.n	8012108 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012072:	693b      	ldr	r3, [r7, #16]
 8012074:	2200      	movs	r2, #0
 8012076:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012078:	693b      	ldr	r3, [r7, #16]
 801207a:	68ba      	ldr	r2, [r7, #8]
 801207c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801207e:	693b      	ldr	r3, [r7, #16]
 8012080:	687a      	ldr	r2, [r7, #4]
 8012082:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012084:	693b      	ldr	r3, [r7, #16]
 8012086:	68fa      	ldr	r2, [r7, #12]
 8012088:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801208a:	4b24      	ldr	r3, [pc, #144]	; (801211c <sys_timeout_abs+0xd8>)
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d103      	bne.n	801209a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012092:	4a22      	ldr	r2, [pc, #136]	; (801211c <sys_timeout_abs+0xd8>)
 8012094:	693b      	ldr	r3, [r7, #16]
 8012096:	6013      	str	r3, [r2, #0]
    return;
 8012098:	e037      	b.n	801210a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801209a:	693b      	ldr	r3, [r7, #16]
 801209c:	685a      	ldr	r2, [r3, #4]
 801209e:	4b1f      	ldr	r3, [pc, #124]	; (801211c <sys_timeout_abs+0xd8>)
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	685b      	ldr	r3, [r3, #4]
 80120a4:	1ad3      	subs	r3, r2, r3
 80120a6:	0fdb      	lsrs	r3, r3, #31
 80120a8:	f003 0301 	and.w	r3, r3, #1
 80120ac:	b2db      	uxtb	r3, r3
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d007      	beq.n	80120c2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80120b2:	4b1a      	ldr	r3, [pc, #104]	; (801211c <sys_timeout_abs+0xd8>)
 80120b4:	681a      	ldr	r2, [r3, #0]
 80120b6:	693b      	ldr	r3, [r7, #16]
 80120b8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80120ba:	4a18      	ldr	r2, [pc, #96]	; (801211c <sys_timeout_abs+0xd8>)
 80120bc:	693b      	ldr	r3, [r7, #16]
 80120be:	6013      	str	r3, [r2, #0]
 80120c0:	e023      	b.n	801210a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80120c2:	4b16      	ldr	r3, [pc, #88]	; (801211c <sys_timeout_abs+0xd8>)
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	617b      	str	r3, [r7, #20]
 80120c8:	e01a      	b.n	8012100 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80120ca:	697b      	ldr	r3, [r7, #20]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d00b      	beq.n	80120ea <sys_timeout_abs+0xa6>
 80120d2:	693b      	ldr	r3, [r7, #16]
 80120d4:	685a      	ldr	r2, [r3, #4]
 80120d6:	697b      	ldr	r3, [r7, #20]
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	685b      	ldr	r3, [r3, #4]
 80120dc:	1ad3      	subs	r3, r2, r3
 80120de:	0fdb      	lsrs	r3, r3, #31
 80120e0:	f003 0301 	and.w	r3, r3, #1
 80120e4:	b2db      	uxtb	r3, r3
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d007      	beq.n	80120fa <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80120ea:	697b      	ldr	r3, [r7, #20]
 80120ec:	681a      	ldr	r2, [r3, #0]
 80120ee:	693b      	ldr	r3, [r7, #16]
 80120f0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80120f2:	697b      	ldr	r3, [r7, #20]
 80120f4:	693a      	ldr	r2, [r7, #16]
 80120f6:	601a      	str	r2, [r3, #0]
        break;
 80120f8:	e007      	b.n	801210a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80120fa:	697b      	ldr	r3, [r7, #20]
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	617b      	str	r3, [r7, #20]
 8012100:	697b      	ldr	r3, [r7, #20]
 8012102:	2b00      	cmp	r3, #0
 8012104:	d1e1      	bne.n	80120ca <sys_timeout_abs+0x86>
 8012106:	e000      	b.n	801210a <sys_timeout_abs+0xc6>
    return;
 8012108:	bf00      	nop
      }
    }
  }
}
 801210a:	3718      	adds	r7, #24
 801210c:	46bd      	mov	sp, r7
 801210e:	bd80      	pop	{r7, pc}
 8012110:	08017dd4 	.word	0x08017dd4
 8012114:	08017e08 	.word	0x08017e08
 8012118:	08017e48 	.word	0x08017e48
 801211c:	24000128 	.word	0x24000128

08012120 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012120:	b580      	push	{r7, lr}
 8012122:	b086      	sub	sp, #24
 8012124:	af00      	add	r7, sp, #0
 8012126:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801212c:	697b      	ldr	r3, [r7, #20]
 801212e:	685b      	ldr	r3, [r3, #4]
 8012130:	4798      	blx	r3

  now = sys_now();
 8012132:	f7f7 ff89 	bl	800a048 <sys_now>
 8012136:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012138:	697b      	ldr	r3, [r7, #20]
 801213a:	681a      	ldr	r2, [r3, #0]
 801213c:	4b0f      	ldr	r3, [pc, #60]	; (801217c <lwip_cyclic_timer+0x5c>)
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	4413      	add	r3, r2
 8012142:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012144:	68fa      	ldr	r2, [r7, #12]
 8012146:	693b      	ldr	r3, [r7, #16]
 8012148:	1ad3      	subs	r3, r2, r3
 801214a:	0fdb      	lsrs	r3, r3, #31
 801214c:	f003 0301 	and.w	r3, r3, #1
 8012150:	b2db      	uxtb	r3, r3
 8012152:	2b00      	cmp	r3, #0
 8012154:	d009      	beq.n	801216a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012156:	697b      	ldr	r3, [r7, #20]
 8012158:	681a      	ldr	r2, [r3, #0]
 801215a:	693b      	ldr	r3, [r7, #16]
 801215c:	4413      	add	r3, r2
 801215e:	687a      	ldr	r2, [r7, #4]
 8012160:	4907      	ldr	r1, [pc, #28]	; (8012180 <lwip_cyclic_timer+0x60>)
 8012162:	4618      	mov	r0, r3
 8012164:	f7ff ff6e 	bl	8012044 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012168:	e004      	b.n	8012174 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801216a:	687a      	ldr	r2, [r7, #4]
 801216c:	4904      	ldr	r1, [pc, #16]	; (8012180 <lwip_cyclic_timer+0x60>)
 801216e:	68f8      	ldr	r0, [r7, #12]
 8012170:	f7ff ff68 	bl	8012044 <sys_timeout_abs>
}
 8012174:	bf00      	nop
 8012176:	3718      	adds	r7, #24
 8012178:	46bd      	mov	sp, r7
 801217a:	bd80      	pop	{r7, pc}
 801217c:	2400012c 	.word	0x2400012c
 8012180:	08012121 	.word	0x08012121

08012184 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012184:	b580      	push	{r7, lr}
 8012186:	b082      	sub	sp, #8
 8012188:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801218a:	2301      	movs	r3, #1
 801218c:	607b      	str	r3, [r7, #4]
 801218e:	e00e      	b.n	80121ae <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012190:	4a0b      	ldr	r2, [pc, #44]	; (80121c0 <sys_timeouts_init+0x3c>)
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	00db      	lsls	r3, r3, #3
 801219c:	4a08      	ldr	r2, [pc, #32]	; (80121c0 <sys_timeouts_init+0x3c>)
 801219e:	4413      	add	r3, r2
 80121a0:	461a      	mov	r2, r3
 80121a2:	4908      	ldr	r1, [pc, #32]	; (80121c4 <sys_timeouts_init+0x40>)
 80121a4:	f000 f810 	bl	80121c8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	3301      	adds	r3, #1
 80121ac:	607b      	str	r3, [r7, #4]
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	2b02      	cmp	r3, #2
 80121b2:	d9ed      	bls.n	8012190 <sys_timeouts_init+0xc>
  }
}
 80121b4:	bf00      	nop
 80121b6:	bf00      	nop
 80121b8:	3708      	adds	r7, #8
 80121ba:	46bd      	mov	sp, r7
 80121bc:	bd80      	pop	{r7, pc}
 80121be:	bf00      	nop
 80121c0:	080197c0 	.word	0x080197c0
 80121c4:	08012121 	.word	0x08012121

080121c8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b086      	sub	sp, #24
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	60f8      	str	r0, [r7, #12]
 80121d0:	60b9      	str	r1, [r7, #8]
 80121d2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80121da:	d306      	bcc.n	80121ea <sys_timeout+0x22>
 80121dc:	4b0a      	ldr	r3, [pc, #40]	; (8012208 <sys_timeout+0x40>)
 80121de:	f240 1229 	movw	r2, #297	; 0x129
 80121e2:	490a      	ldr	r1, [pc, #40]	; (801220c <sys_timeout+0x44>)
 80121e4:	480a      	ldr	r0, [pc, #40]	; (8012210 <sys_timeout+0x48>)
 80121e6:	f002 fdd1 	bl	8014d8c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80121ea:	f7f7 ff2d 	bl	800a048 <sys_now>
 80121ee:	4602      	mov	r2, r0
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	4413      	add	r3, r2
 80121f4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80121f6:	687a      	ldr	r2, [r7, #4]
 80121f8:	68b9      	ldr	r1, [r7, #8]
 80121fa:	6978      	ldr	r0, [r7, #20]
 80121fc:	f7ff ff22 	bl	8012044 <sys_timeout_abs>
#endif
}
 8012200:	bf00      	nop
 8012202:	3718      	adds	r7, #24
 8012204:	46bd      	mov	sp, r7
 8012206:	bd80      	pop	{r7, pc}
 8012208:	08017dd4 	.word	0x08017dd4
 801220c:	08017e70 	.word	0x08017e70
 8012210:	08017e48 	.word	0x08017e48

08012214 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012214:	b580      	push	{r7, lr}
 8012216:	b084      	sub	sp, #16
 8012218:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801221a:	f7f7 ff15 	bl	800a048 <sys_now>
 801221e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8012220:	4b1a      	ldr	r3, [pc, #104]	; (801228c <sys_check_timeouts+0x78>)
 8012222:	781b      	ldrb	r3, [r3, #0]
 8012224:	b2db      	uxtb	r3, r3
 8012226:	2b00      	cmp	r3, #0
 8012228:	d001      	beq.n	801222e <sys_check_timeouts+0x1a>
 801222a:	f7f9 f8c3 	bl	800b3b4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 801222e:	4b18      	ldr	r3, [pc, #96]	; (8012290 <sys_check_timeouts+0x7c>)
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012234:	68bb      	ldr	r3, [r7, #8]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d022      	beq.n	8012280 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801223a:	68bb      	ldr	r3, [r7, #8]
 801223c:	685b      	ldr	r3, [r3, #4]
 801223e:	68fa      	ldr	r2, [r7, #12]
 8012240:	1ad3      	subs	r3, r2, r3
 8012242:	0fdb      	lsrs	r3, r3, #31
 8012244:	f003 0301 	and.w	r3, r3, #1
 8012248:	b2db      	uxtb	r3, r3
 801224a:	2b00      	cmp	r3, #0
 801224c:	d11a      	bne.n	8012284 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801224e:	68bb      	ldr	r3, [r7, #8]
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	4a0f      	ldr	r2, [pc, #60]	; (8012290 <sys_check_timeouts+0x7c>)
 8012254:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012256:	68bb      	ldr	r3, [r7, #8]
 8012258:	689b      	ldr	r3, [r3, #8]
 801225a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801225c:	68bb      	ldr	r3, [r7, #8]
 801225e:	68db      	ldr	r3, [r3, #12]
 8012260:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012262:	68bb      	ldr	r3, [r7, #8]
 8012264:	685b      	ldr	r3, [r3, #4]
 8012266:	4a0b      	ldr	r2, [pc, #44]	; (8012294 <sys_check_timeouts+0x80>)
 8012268:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801226a:	68b9      	ldr	r1, [r7, #8]
 801226c:	2006      	movs	r0, #6
 801226e:	f7f8 fd65 	bl	800ad3c <memp_free>
    if (handler != NULL) {
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d0d3      	beq.n	8012220 <sys_check_timeouts+0xc>
      handler(arg);
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	6838      	ldr	r0, [r7, #0]
 801227c:	4798      	blx	r3
  do {
 801227e:	e7cf      	b.n	8012220 <sys_check_timeouts+0xc>
      return;
 8012280:	bf00      	nop
 8012282:	e000      	b.n	8012286 <sys_check_timeouts+0x72>
      return;
 8012284:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012286:	3710      	adds	r7, #16
 8012288:	46bd      	mov	sp, r7
 801228a:	bd80      	pop	{r7, pc}
 801228c:	240035fc 	.word	0x240035fc
 8012290:	24000128 	.word	0x24000128
 8012294:	2400012c 	.word	0x2400012c

08012298 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012298:	b580      	push	{r7, lr}
 801229a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801229c:	f002 fd8e 	bl	8014dbc <rand>
 80122a0:	4603      	mov	r3, r0
 80122a2:	b29b      	uxth	r3, r3
 80122a4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80122a8:	b29b      	uxth	r3, r3
 80122aa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80122ae:	b29a      	uxth	r2, r3
 80122b0:	4b01      	ldr	r3, [pc, #4]	; (80122b8 <udp_init+0x20>)
 80122b2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80122b4:	bf00      	nop
 80122b6:	bd80      	pop	{r7, pc}
 80122b8:	24000034 	.word	0x24000034

080122bc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80122bc:	b580      	push	{r7, lr}
 80122be:	b084      	sub	sp, #16
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	60f8      	str	r0, [r7, #12]
 80122c4:	60b9      	str	r1, [r7, #8]
 80122c6:	4613      	mov	r3, r2
 80122c8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d105      	bne.n	80122dc <udp_input_local_match+0x20>
 80122d0:	4b27      	ldr	r3, [pc, #156]	; (8012370 <udp_input_local_match+0xb4>)
 80122d2:	2287      	movs	r2, #135	; 0x87
 80122d4:	4927      	ldr	r1, [pc, #156]	; (8012374 <udp_input_local_match+0xb8>)
 80122d6:	4828      	ldr	r0, [pc, #160]	; (8012378 <udp_input_local_match+0xbc>)
 80122d8:	f002 fd58 	bl	8014d8c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80122dc:	68bb      	ldr	r3, [r7, #8]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d105      	bne.n	80122ee <udp_input_local_match+0x32>
 80122e2:	4b23      	ldr	r3, [pc, #140]	; (8012370 <udp_input_local_match+0xb4>)
 80122e4:	2288      	movs	r2, #136	; 0x88
 80122e6:	4925      	ldr	r1, [pc, #148]	; (801237c <udp_input_local_match+0xc0>)
 80122e8:	4823      	ldr	r0, [pc, #140]	; (8012378 <udp_input_local_match+0xbc>)
 80122ea:	f002 fd4f 	bl	8014d8c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	7a1b      	ldrb	r3, [r3, #8]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d00b      	beq.n	801230e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	7a1a      	ldrb	r2, [r3, #8]
 80122fa:	4b21      	ldr	r3, [pc, #132]	; (8012380 <udp_input_local_match+0xc4>)
 80122fc:	685b      	ldr	r3, [r3, #4]
 80122fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012302:	3301      	adds	r3, #1
 8012304:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012306:	429a      	cmp	r2, r3
 8012308:	d001      	beq.n	801230e <udp_input_local_match+0x52>
    return 0;
 801230a:	2300      	movs	r3, #0
 801230c:	e02b      	b.n	8012366 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801230e:	79fb      	ldrb	r3, [r7, #7]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d018      	beq.n	8012346 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d013      	beq.n	8012342 <udp_input_local_match+0x86>
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d00f      	beq.n	8012342 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012322:	4b17      	ldr	r3, [pc, #92]	; (8012380 <udp_input_local_match+0xc4>)
 8012324:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012326:	f1b3 3fff 	cmp.w	r3, #4294967295
 801232a:	d00a      	beq.n	8012342 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	681a      	ldr	r2, [r3, #0]
 8012330:	4b13      	ldr	r3, [pc, #76]	; (8012380 <udp_input_local_match+0xc4>)
 8012332:	695b      	ldr	r3, [r3, #20]
 8012334:	405a      	eors	r2, r3
 8012336:	68bb      	ldr	r3, [r7, #8]
 8012338:	3308      	adds	r3, #8
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801233e:	2b00      	cmp	r3, #0
 8012340:	d110      	bne.n	8012364 <udp_input_local_match+0xa8>
          return 1;
 8012342:	2301      	movs	r3, #1
 8012344:	e00f      	b.n	8012366 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d009      	beq.n	8012360 <udp_input_local_match+0xa4>
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d005      	beq.n	8012360 <udp_input_local_match+0xa4>
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	681a      	ldr	r2, [r3, #0]
 8012358:	4b09      	ldr	r3, [pc, #36]	; (8012380 <udp_input_local_match+0xc4>)
 801235a:	695b      	ldr	r3, [r3, #20]
 801235c:	429a      	cmp	r2, r3
 801235e:	d101      	bne.n	8012364 <udp_input_local_match+0xa8>
        return 1;
 8012360:	2301      	movs	r3, #1
 8012362:	e000      	b.n	8012366 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012364:	2300      	movs	r3, #0
}
 8012366:	4618      	mov	r0, r3
 8012368:	3710      	adds	r7, #16
 801236a:	46bd      	mov	sp, r7
 801236c:	bd80      	pop	{r7, pc}
 801236e:	bf00      	nop
 8012370:	08017ebc 	.word	0x08017ebc
 8012374:	08017eec 	.word	0x08017eec
 8012378:	08017f10 	.word	0x08017f10
 801237c:	08017f38 	.word	0x08017f38
 8012380:	24000714 	.word	0x24000714

08012384 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012384:	b590      	push	{r4, r7, lr}
 8012386:	b08d      	sub	sp, #52	; 0x34
 8012388:	af02      	add	r7, sp, #8
 801238a:	6078      	str	r0, [r7, #4]
 801238c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801238e:	2300      	movs	r3, #0
 8012390:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d105      	bne.n	80123a4 <udp_input+0x20>
 8012398:	4b7c      	ldr	r3, [pc, #496]	; (801258c <udp_input+0x208>)
 801239a:	22cf      	movs	r2, #207	; 0xcf
 801239c:	497c      	ldr	r1, [pc, #496]	; (8012590 <udp_input+0x20c>)
 801239e:	487d      	ldr	r0, [pc, #500]	; (8012594 <udp_input+0x210>)
 80123a0:	f002 fcf4 	bl	8014d8c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80123a4:	683b      	ldr	r3, [r7, #0]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d105      	bne.n	80123b6 <udp_input+0x32>
 80123aa:	4b78      	ldr	r3, [pc, #480]	; (801258c <udp_input+0x208>)
 80123ac:	22d0      	movs	r2, #208	; 0xd0
 80123ae:	497a      	ldr	r1, [pc, #488]	; (8012598 <udp_input+0x214>)
 80123b0:	4878      	ldr	r0, [pc, #480]	; (8012594 <udp_input+0x210>)
 80123b2:	f002 fceb 	bl	8014d8c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	895b      	ldrh	r3, [r3, #10]
 80123ba:	2b07      	cmp	r3, #7
 80123bc:	d803      	bhi.n	80123c6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80123be:	6878      	ldr	r0, [r7, #4]
 80123c0:	f7f9 fb32 	bl	800ba28 <pbuf_free>
    goto end;
 80123c4:	e0de      	b.n	8012584 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	685b      	ldr	r3, [r3, #4]
 80123ca:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80123cc:	4b73      	ldr	r3, [pc, #460]	; (801259c <udp_input+0x218>)
 80123ce:	695b      	ldr	r3, [r3, #20]
 80123d0:	4a72      	ldr	r2, [pc, #456]	; (801259c <udp_input+0x218>)
 80123d2:	6812      	ldr	r2, [r2, #0]
 80123d4:	4611      	mov	r1, r2
 80123d6:	4618      	mov	r0, r3
 80123d8:	f001 fcae 	bl	8013d38 <ip4_addr_isbroadcast_u32>
 80123dc:	4603      	mov	r3, r0
 80123de:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80123e0:	697b      	ldr	r3, [r7, #20]
 80123e2:	881b      	ldrh	r3, [r3, #0]
 80123e4:	b29b      	uxth	r3, r3
 80123e6:	4618      	mov	r0, r3
 80123e8:	f7f7 ff08 	bl	800a1fc <lwip_htons>
 80123ec:	4603      	mov	r3, r0
 80123ee:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80123f0:	697b      	ldr	r3, [r7, #20]
 80123f2:	885b      	ldrh	r3, [r3, #2]
 80123f4:	b29b      	uxth	r3, r3
 80123f6:	4618      	mov	r0, r3
 80123f8:	f7f7 ff00 	bl	800a1fc <lwip_htons>
 80123fc:	4603      	mov	r3, r0
 80123fe:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012400:	2300      	movs	r3, #0
 8012402:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012404:	2300      	movs	r3, #0
 8012406:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012408:	2300      	movs	r3, #0
 801240a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801240c:	4b64      	ldr	r3, [pc, #400]	; (80125a0 <udp_input+0x21c>)
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	627b      	str	r3, [r7, #36]	; 0x24
 8012412:	e054      	b.n	80124be <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012416:	8a5b      	ldrh	r3, [r3, #18]
 8012418:	89fa      	ldrh	r2, [r7, #14]
 801241a:	429a      	cmp	r2, r3
 801241c:	d14a      	bne.n	80124b4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801241e:	7cfb      	ldrb	r3, [r7, #19]
 8012420:	461a      	mov	r2, r3
 8012422:	6839      	ldr	r1, [r7, #0]
 8012424:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012426:	f7ff ff49 	bl	80122bc <udp_input_local_match>
 801242a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801242c:	2b00      	cmp	r3, #0
 801242e:	d041      	beq.n	80124b4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012432:	7c1b      	ldrb	r3, [r3, #16]
 8012434:	f003 0304 	and.w	r3, r3, #4
 8012438:	2b00      	cmp	r3, #0
 801243a:	d11d      	bne.n	8012478 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801243c:	69fb      	ldr	r3, [r7, #28]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d102      	bne.n	8012448 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8012442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012444:	61fb      	str	r3, [r7, #28]
 8012446:	e017      	b.n	8012478 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012448:	7cfb      	ldrb	r3, [r7, #19]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d014      	beq.n	8012478 <udp_input+0xf4>
 801244e:	4b53      	ldr	r3, [pc, #332]	; (801259c <udp_input+0x218>)
 8012450:	695b      	ldr	r3, [r3, #20]
 8012452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012456:	d10f      	bne.n	8012478 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012458:	69fb      	ldr	r3, [r7, #28]
 801245a:	681a      	ldr	r2, [r3, #0]
 801245c:	683b      	ldr	r3, [r7, #0]
 801245e:	3304      	adds	r3, #4
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	429a      	cmp	r2, r3
 8012464:	d008      	beq.n	8012478 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012468:	681a      	ldr	r2, [r3, #0]
 801246a:	683b      	ldr	r3, [r7, #0]
 801246c:	3304      	adds	r3, #4
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	429a      	cmp	r2, r3
 8012472:	d101      	bne.n	8012478 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012476:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801247a:	8a9b      	ldrh	r3, [r3, #20]
 801247c:	8a3a      	ldrh	r2, [r7, #16]
 801247e:	429a      	cmp	r2, r3
 8012480:	d118      	bne.n	80124b4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012484:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012486:	2b00      	cmp	r3, #0
 8012488:	d005      	beq.n	8012496 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801248c:	685a      	ldr	r2, [r3, #4]
 801248e:	4b43      	ldr	r3, [pc, #268]	; (801259c <udp_input+0x218>)
 8012490:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012492:	429a      	cmp	r2, r3
 8012494:	d10e      	bne.n	80124b4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012496:	6a3b      	ldr	r3, [r7, #32]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d014      	beq.n	80124c6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801249e:	68da      	ldr	r2, [r3, #12]
 80124a0:	6a3b      	ldr	r3, [r7, #32]
 80124a2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80124a4:	4b3e      	ldr	r3, [pc, #248]	; (80125a0 <udp_input+0x21c>)
 80124a6:	681a      	ldr	r2, [r3, #0]
 80124a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124aa:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80124ac:	4a3c      	ldr	r2, [pc, #240]	; (80125a0 <udp_input+0x21c>)
 80124ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124b0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80124b2:	e008      	b.n	80124c6 <udp_input+0x142>
      }
    }

    prev = pcb;
 80124b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124b6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80124b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ba:	68db      	ldr	r3, [r3, #12]
 80124bc:	627b      	str	r3, [r7, #36]	; 0x24
 80124be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d1a7      	bne.n	8012414 <udp_input+0x90>
 80124c4:	e000      	b.n	80124c8 <udp_input+0x144>
        break;
 80124c6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80124c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d101      	bne.n	80124d2 <udp_input+0x14e>
    pcb = uncon_pcb;
 80124ce:	69fb      	ldr	r3, [r7, #28]
 80124d0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80124d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d002      	beq.n	80124de <udp_input+0x15a>
    for_us = 1;
 80124d8:	2301      	movs	r3, #1
 80124da:	76fb      	strb	r3, [r7, #27]
 80124dc:	e00a      	b.n	80124f4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80124de:	683b      	ldr	r3, [r7, #0]
 80124e0:	3304      	adds	r3, #4
 80124e2:	681a      	ldr	r2, [r3, #0]
 80124e4:	4b2d      	ldr	r3, [pc, #180]	; (801259c <udp_input+0x218>)
 80124e6:	695b      	ldr	r3, [r3, #20]
 80124e8:	429a      	cmp	r2, r3
 80124ea:	bf0c      	ite	eq
 80124ec:	2301      	moveq	r3, #1
 80124ee:	2300      	movne	r3, #0
 80124f0:	b2db      	uxtb	r3, r3
 80124f2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80124f4:	7efb      	ldrb	r3, [r7, #27]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d041      	beq.n	801257e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80124fa:	2108      	movs	r1, #8
 80124fc:	6878      	ldr	r0, [r7, #4]
 80124fe:	f7f9 fa0d 	bl	800b91c <pbuf_remove_header>
 8012502:	4603      	mov	r3, r0
 8012504:	2b00      	cmp	r3, #0
 8012506:	d00a      	beq.n	801251e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012508:	4b20      	ldr	r3, [pc, #128]	; (801258c <udp_input+0x208>)
 801250a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801250e:	4925      	ldr	r1, [pc, #148]	; (80125a4 <udp_input+0x220>)
 8012510:	4820      	ldr	r0, [pc, #128]	; (8012594 <udp_input+0x210>)
 8012512:	f002 fc3b 	bl	8014d8c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012516:	6878      	ldr	r0, [r7, #4]
 8012518:	f7f9 fa86 	bl	800ba28 <pbuf_free>
      goto end;
 801251c:	e032      	b.n	8012584 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012520:	2b00      	cmp	r3, #0
 8012522:	d012      	beq.n	801254a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012526:	699b      	ldr	r3, [r3, #24]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d00a      	beq.n	8012542 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801252e:	699c      	ldr	r4, [r3, #24]
 8012530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012532:	69d8      	ldr	r0, [r3, #28]
 8012534:	8a3b      	ldrh	r3, [r7, #16]
 8012536:	9300      	str	r3, [sp, #0]
 8012538:	4b1b      	ldr	r3, [pc, #108]	; (80125a8 <udp_input+0x224>)
 801253a:	687a      	ldr	r2, [r7, #4]
 801253c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801253e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012540:	e021      	b.n	8012586 <udp_input+0x202>
        pbuf_free(p);
 8012542:	6878      	ldr	r0, [r7, #4]
 8012544:	f7f9 fa70 	bl	800ba28 <pbuf_free>
        goto end;
 8012548:	e01c      	b.n	8012584 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801254a:	7cfb      	ldrb	r3, [r7, #19]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d112      	bne.n	8012576 <udp_input+0x1f2>
 8012550:	4b12      	ldr	r3, [pc, #72]	; (801259c <udp_input+0x218>)
 8012552:	695b      	ldr	r3, [r3, #20]
 8012554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012558:	2be0      	cmp	r3, #224	; 0xe0
 801255a:	d00c      	beq.n	8012576 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801255c:	4b0f      	ldr	r3, [pc, #60]	; (801259c <udp_input+0x218>)
 801255e:	899b      	ldrh	r3, [r3, #12]
 8012560:	3308      	adds	r3, #8
 8012562:	b29b      	uxth	r3, r3
 8012564:	b21b      	sxth	r3, r3
 8012566:	4619      	mov	r1, r3
 8012568:	6878      	ldr	r0, [r7, #4]
 801256a:	f7f9 fa4a 	bl	800ba02 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801256e:	2103      	movs	r1, #3
 8012570:	6878      	ldr	r0, [r7, #4]
 8012572:	f001 f8b7 	bl	80136e4 <icmp_dest_unreach>
      pbuf_free(p);
 8012576:	6878      	ldr	r0, [r7, #4]
 8012578:	f7f9 fa56 	bl	800ba28 <pbuf_free>
  return;
 801257c:	e003      	b.n	8012586 <udp_input+0x202>
    pbuf_free(p);
 801257e:	6878      	ldr	r0, [r7, #4]
 8012580:	f7f9 fa52 	bl	800ba28 <pbuf_free>
  return;
 8012584:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012586:	372c      	adds	r7, #44	; 0x2c
 8012588:	46bd      	mov	sp, r7
 801258a:	bd90      	pop	{r4, r7, pc}
 801258c:	08017ebc 	.word	0x08017ebc
 8012590:	08017f60 	.word	0x08017f60
 8012594:	08017f10 	.word	0x08017f10
 8012598:	08017f78 	.word	0x08017f78
 801259c:	24000714 	.word	0x24000714
 80125a0:	2400361c 	.word	0x2400361c
 80125a4:	08017f94 	.word	0x08017f94
 80125a8:	24000724 	.word	0x24000724

080125ac <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80125ac:	b480      	push	{r7}
 80125ae:	b085      	sub	sp, #20
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
 80125b4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d01e      	beq.n	80125fa <udp_netif_ip_addr_changed+0x4e>
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d01a      	beq.n	80125fa <udp_netif_ip_addr_changed+0x4e>
 80125c4:	683b      	ldr	r3, [r7, #0]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d017      	beq.n	80125fa <udp_netif_ip_addr_changed+0x4e>
 80125ca:	683b      	ldr	r3, [r7, #0]
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d013      	beq.n	80125fa <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80125d2:	4b0d      	ldr	r3, [pc, #52]	; (8012608 <udp_netif_ip_addr_changed+0x5c>)
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	60fb      	str	r3, [r7, #12]
 80125d8:	e00c      	b.n	80125f4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	681a      	ldr	r2, [r3, #0]
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	429a      	cmp	r2, r3
 80125e4:	d103      	bne.n	80125ee <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80125e6:	683b      	ldr	r3, [r7, #0]
 80125e8:	681a      	ldr	r2, [r3, #0]
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	68db      	ldr	r3, [r3, #12]
 80125f2:	60fb      	str	r3, [r7, #12]
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d1ef      	bne.n	80125da <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80125fa:	bf00      	nop
 80125fc:	3714      	adds	r7, #20
 80125fe:	46bd      	mov	sp, r7
 8012600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012604:	4770      	bx	lr
 8012606:	bf00      	nop
 8012608:	2400361c 	.word	0x2400361c

0801260c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b082      	sub	sp, #8
 8012610:	af00      	add	r7, sp, #0
 8012612:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8012614:	4915      	ldr	r1, [pc, #84]	; (801266c <etharp_free_entry+0x60>)
 8012616:	687a      	ldr	r2, [r7, #4]
 8012618:	4613      	mov	r3, r2
 801261a:	005b      	lsls	r3, r3, #1
 801261c:	4413      	add	r3, r2
 801261e:	00db      	lsls	r3, r3, #3
 8012620:	440b      	add	r3, r1
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d013      	beq.n	8012650 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012628:	4910      	ldr	r1, [pc, #64]	; (801266c <etharp_free_entry+0x60>)
 801262a:	687a      	ldr	r2, [r7, #4]
 801262c:	4613      	mov	r3, r2
 801262e:	005b      	lsls	r3, r3, #1
 8012630:	4413      	add	r3, r2
 8012632:	00db      	lsls	r3, r3, #3
 8012634:	440b      	add	r3, r1
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	4618      	mov	r0, r3
 801263a:	f7f9 f9f5 	bl	800ba28 <pbuf_free>
    arp_table[i].q = NULL;
 801263e:	490b      	ldr	r1, [pc, #44]	; (801266c <etharp_free_entry+0x60>)
 8012640:	687a      	ldr	r2, [r7, #4]
 8012642:	4613      	mov	r3, r2
 8012644:	005b      	lsls	r3, r3, #1
 8012646:	4413      	add	r3, r2
 8012648:	00db      	lsls	r3, r3, #3
 801264a:	440b      	add	r3, r1
 801264c:	2200      	movs	r2, #0
 801264e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012650:	4906      	ldr	r1, [pc, #24]	; (801266c <etharp_free_entry+0x60>)
 8012652:	687a      	ldr	r2, [r7, #4]
 8012654:	4613      	mov	r3, r2
 8012656:	005b      	lsls	r3, r3, #1
 8012658:	4413      	add	r3, r2
 801265a:	00db      	lsls	r3, r3, #3
 801265c:	440b      	add	r3, r1
 801265e:	3314      	adds	r3, #20
 8012660:	2200      	movs	r2, #0
 8012662:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8012664:	bf00      	nop
 8012666:	3708      	adds	r7, #8
 8012668:	46bd      	mov	sp, r7
 801266a:	bd80      	pop	{r7, pc}
 801266c:	24000134 	.word	0x24000134

08012670 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8012670:	b580      	push	{r7, lr}
 8012672:	b082      	sub	sp, #8
 8012674:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012676:	2300      	movs	r3, #0
 8012678:	607b      	str	r3, [r7, #4]
 801267a:	e096      	b.n	80127aa <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801267c:	494f      	ldr	r1, [pc, #316]	; (80127bc <etharp_tmr+0x14c>)
 801267e:	687a      	ldr	r2, [r7, #4]
 8012680:	4613      	mov	r3, r2
 8012682:	005b      	lsls	r3, r3, #1
 8012684:	4413      	add	r3, r2
 8012686:	00db      	lsls	r3, r3, #3
 8012688:	440b      	add	r3, r1
 801268a:	3314      	adds	r3, #20
 801268c:	781b      	ldrb	r3, [r3, #0]
 801268e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8012690:	78fb      	ldrb	r3, [r7, #3]
 8012692:	2b00      	cmp	r3, #0
 8012694:	f000 8086 	beq.w	80127a4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8012698:	4948      	ldr	r1, [pc, #288]	; (80127bc <etharp_tmr+0x14c>)
 801269a:	687a      	ldr	r2, [r7, #4]
 801269c:	4613      	mov	r3, r2
 801269e:	005b      	lsls	r3, r3, #1
 80126a0:	4413      	add	r3, r2
 80126a2:	00db      	lsls	r3, r3, #3
 80126a4:	440b      	add	r3, r1
 80126a6:	3312      	adds	r3, #18
 80126a8:	881b      	ldrh	r3, [r3, #0]
 80126aa:	3301      	adds	r3, #1
 80126ac:	b298      	uxth	r0, r3
 80126ae:	4943      	ldr	r1, [pc, #268]	; (80127bc <etharp_tmr+0x14c>)
 80126b0:	687a      	ldr	r2, [r7, #4]
 80126b2:	4613      	mov	r3, r2
 80126b4:	005b      	lsls	r3, r3, #1
 80126b6:	4413      	add	r3, r2
 80126b8:	00db      	lsls	r3, r3, #3
 80126ba:	440b      	add	r3, r1
 80126bc:	3312      	adds	r3, #18
 80126be:	4602      	mov	r2, r0
 80126c0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80126c2:	493e      	ldr	r1, [pc, #248]	; (80127bc <etharp_tmr+0x14c>)
 80126c4:	687a      	ldr	r2, [r7, #4]
 80126c6:	4613      	mov	r3, r2
 80126c8:	005b      	lsls	r3, r3, #1
 80126ca:	4413      	add	r3, r2
 80126cc:	00db      	lsls	r3, r3, #3
 80126ce:	440b      	add	r3, r1
 80126d0:	3312      	adds	r3, #18
 80126d2:	881b      	ldrh	r3, [r3, #0]
 80126d4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80126d8:	d215      	bcs.n	8012706 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80126da:	4938      	ldr	r1, [pc, #224]	; (80127bc <etharp_tmr+0x14c>)
 80126dc:	687a      	ldr	r2, [r7, #4]
 80126de:	4613      	mov	r3, r2
 80126e0:	005b      	lsls	r3, r3, #1
 80126e2:	4413      	add	r3, r2
 80126e4:	00db      	lsls	r3, r3, #3
 80126e6:	440b      	add	r3, r1
 80126e8:	3314      	adds	r3, #20
 80126ea:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80126ec:	2b01      	cmp	r3, #1
 80126ee:	d10e      	bne.n	801270e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80126f0:	4932      	ldr	r1, [pc, #200]	; (80127bc <etharp_tmr+0x14c>)
 80126f2:	687a      	ldr	r2, [r7, #4]
 80126f4:	4613      	mov	r3, r2
 80126f6:	005b      	lsls	r3, r3, #1
 80126f8:	4413      	add	r3, r2
 80126fa:	00db      	lsls	r3, r3, #3
 80126fc:	440b      	add	r3, r1
 80126fe:	3312      	adds	r3, #18
 8012700:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012702:	2b04      	cmp	r3, #4
 8012704:	d903      	bls.n	801270e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012706:	6878      	ldr	r0, [r7, #4]
 8012708:	f7ff ff80 	bl	801260c <etharp_free_entry>
 801270c:	e04a      	b.n	80127a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801270e:	492b      	ldr	r1, [pc, #172]	; (80127bc <etharp_tmr+0x14c>)
 8012710:	687a      	ldr	r2, [r7, #4]
 8012712:	4613      	mov	r3, r2
 8012714:	005b      	lsls	r3, r3, #1
 8012716:	4413      	add	r3, r2
 8012718:	00db      	lsls	r3, r3, #3
 801271a:	440b      	add	r3, r1
 801271c:	3314      	adds	r3, #20
 801271e:	781b      	ldrb	r3, [r3, #0]
 8012720:	2b03      	cmp	r3, #3
 8012722:	d10a      	bne.n	801273a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012724:	4925      	ldr	r1, [pc, #148]	; (80127bc <etharp_tmr+0x14c>)
 8012726:	687a      	ldr	r2, [r7, #4]
 8012728:	4613      	mov	r3, r2
 801272a:	005b      	lsls	r3, r3, #1
 801272c:	4413      	add	r3, r2
 801272e:	00db      	lsls	r3, r3, #3
 8012730:	440b      	add	r3, r1
 8012732:	3314      	adds	r3, #20
 8012734:	2204      	movs	r2, #4
 8012736:	701a      	strb	r2, [r3, #0]
 8012738:	e034      	b.n	80127a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801273a:	4920      	ldr	r1, [pc, #128]	; (80127bc <etharp_tmr+0x14c>)
 801273c:	687a      	ldr	r2, [r7, #4]
 801273e:	4613      	mov	r3, r2
 8012740:	005b      	lsls	r3, r3, #1
 8012742:	4413      	add	r3, r2
 8012744:	00db      	lsls	r3, r3, #3
 8012746:	440b      	add	r3, r1
 8012748:	3314      	adds	r3, #20
 801274a:	781b      	ldrb	r3, [r3, #0]
 801274c:	2b04      	cmp	r3, #4
 801274e:	d10a      	bne.n	8012766 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012750:	491a      	ldr	r1, [pc, #104]	; (80127bc <etharp_tmr+0x14c>)
 8012752:	687a      	ldr	r2, [r7, #4]
 8012754:	4613      	mov	r3, r2
 8012756:	005b      	lsls	r3, r3, #1
 8012758:	4413      	add	r3, r2
 801275a:	00db      	lsls	r3, r3, #3
 801275c:	440b      	add	r3, r1
 801275e:	3314      	adds	r3, #20
 8012760:	2202      	movs	r2, #2
 8012762:	701a      	strb	r2, [r3, #0]
 8012764:	e01e      	b.n	80127a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012766:	4915      	ldr	r1, [pc, #84]	; (80127bc <etharp_tmr+0x14c>)
 8012768:	687a      	ldr	r2, [r7, #4]
 801276a:	4613      	mov	r3, r2
 801276c:	005b      	lsls	r3, r3, #1
 801276e:	4413      	add	r3, r2
 8012770:	00db      	lsls	r3, r3, #3
 8012772:	440b      	add	r3, r1
 8012774:	3314      	adds	r3, #20
 8012776:	781b      	ldrb	r3, [r3, #0]
 8012778:	2b01      	cmp	r3, #1
 801277a:	d113      	bne.n	80127a4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801277c:	490f      	ldr	r1, [pc, #60]	; (80127bc <etharp_tmr+0x14c>)
 801277e:	687a      	ldr	r2, [r7, #4]
 8012780:	4613      	mov	r3, r2
 8012782:	005b      	lsls	r3, r3, #1
 8012784:	4413      	add	r3, r2
 8012786:	00db      	lsls	r3, r3, #3
 8012788:	440b      	add	r3, r1
 801278a:	3308      	adds	r3, #8
 801278c:	6818      	ldr	r0, [r3, #0]
 801278e:	687a      	ldr	r2, [r7, #4]
 8012790:	4613      	mov	r3, r2
 8012792:	005b      	lsls	r3, r3, #1
 8012794:	4413      	add	r3, r2
 8012796:	00db      	lsls	r3, r3, #3
 8012798:	4a08      	ldr	r2, [pc, #32]	; (80127bc <etharp_tmr+0x14c>)
 801279a:	4413      	add	r3, r2
 801279c:	3304      	adds	r3, #4
 801279e:	4619      	mov	r1, r3
 80127a0:	f000 fe6e 	bl	8013480 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	3301      	adds	r3, #1
 80127a8:	607b      	str	r3, [r7, #4]
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	2b09      	cmp	r3, #9
 80127ae:	f77f af65 	ble.w	801267c <etharp_tmr+0xc>
      }
    }
  }
}
 80127b2:	bf00      	nop
 80127b4:	bf00      	nop
 80127b6:	3708      	adds	r7, #8
 80127b8:	46bd      	mov	sp, r7
 80127ba:	bd80      	pop	{r7, pc}
 80127bc:	24000134 	.word	0x24000134

080127c0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80127c0:	b580      	push	{r7, lr}
 80127c2:	b08a      	sub	sp, #40	; 0x28
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	60f8      	str	r0, [r7, #12]
 80127c8:	460b      	mov	r3, r1
 80127ca:	607a      	str	r2, [r7, #4]
 80127cc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80127ce:	230a      	movs	r3, #10
 80127d0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80127d2:	230a      	movs	r3, #10
 80127d4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80127d6:	230a      	movs	r3, #10
 80127d8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80127da:	2300      	movs	r3, #0
 80127dc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80127de:	230a      	movs	r3, #10
 80127e0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80127e2:	2300      	movs	r3, #0
 80127e4:	83bb      	strh	r3, [r7, #28]
 80127e6:	2300      	movs	r3, #0
 80127e8:	837b      	strh	r3, [r7, #26]
 80127ea:	2300      	movs	r3, #0
 80127ec:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80127ee:	2300      	movs	r3, #0
 80127f0:	843b      	strh	r3, [r7, #32]
 80127f2:	e0ae      	b.n	8012952 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80127f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80127f8:	49a6      	ldr	r1, [pc, #664]	; (8012a94 <etharp_find_entry+0x2d4>)
 80127fa:	4613      	mov	r3, r2
 80127fc:	005b      	lsls	r3, r3, #1
 80127fe:	4413      	add	r3, r2
 8012800:	00db      	lsls	r3, r3, #3
 8012802:	440b      	add	r3, r1
 8012804:	3314      	adds	r3, #20
 8012806:	781b      	ldrb	r3, [r3, #0]
 8012808:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801280a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801280e:	2b0a      	cmp	r3, #10
 8012810:	d105      	bne.n	801281e <etharp_find_entry+0x5e>
 8012812:	7dfb      	ldrb	r3, [r7, #23]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d102      	bne.n	801281e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012818:	8c3b      	ldrh	r3, [r7, #32]
 801281a:	847b      	strh	r3, [r7, #34]	; 0x22
 801281c:	e095      	b.n	801294a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801281e:	7dfb      	ldrb	r3, [r7, #23]
 8012820:	2b00      	cmp	r3, #0
 8012822:	f000 8092 	beq.w	801294a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8012826:	7dfb      	ldrb	r3, [r7, #23]
 8012828:	2b01      	cmp	r3, #1
 801282a:	d009      	beq.n	8012840 <etharp_find_entry+0x80>
 801282c:	7dfb      	ldrb	r3, [r7, #23]
 801282e:	2b01      	cmp	r3, #1
 8012830:	d806      	bhi.n	8012840 <etharp_find_entry+0x80>
 8012832:	4b99      	ldr	r3, [pc, #612]	; (8012a98 <etharp_find_entry+0x2d8>)
 8012834:	f240 1223 	movw	r2, #291	; 0x123
 8012838:	4998      	ldr	r1, [pc, #608]	; (8012a9c <etharp_find_entry+0x2dc>)
 801283a:	4899      	ldr	r0, [pc, #612]	; (8012aa0 <etharp_find_entry+0x2e0>)
 801283c:	f002 faa6 	bl	8014d8c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d020      	beq.n	8012888 <etharp_find_entry+0xc8>
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	6819      	ldr	r1, [r3, #0]
 801284a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801284e:	4891      	ldr	r0, [pc, #580]	; (8012a94 <etharp_find_entry+0x2d4>)
 8012850:	4613      	mov	r3, r2
 8012852:	005b      	lsls	r3, r3, #1
 8012854:	4413      	add	r3, r2
 8012856:	00db      	lsls	r3, r3, #3
 8012858:	4403      	add	r3, r0
 801285a:	3304      	adds	r3, #4
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	4299      	cmp	r1, r3
 8012860:	d112      	bne.n	8012888 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	2b00      	cmp	r3, #0
 8012866:	d00c      	beq.n	8012882 <etharp_find_entry+0xc2>
 8012868:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801286c:	4989      	ldr	r1, [pc, #548]	; (8012a94 <etharp_find_entry+0x2d4>)
 801286e:	4613      	mov	r3, r2
 8012870:	005b      	lsls	r3, r3, #1
 8012872:	4413      	add	r3, r2
 8012874:	00db      	lsls	r3, r3, #3
 8012876:	440b      	add	r3, r1
 8012878:	3308      	adds	r3, #8
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	687a      	ldr	r2, [r7, #4]
 801287e:	429a      	cmp	r2, r3
 8012880:	d102      	bne.n	8012888 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8012882:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012886:	e100      	b.n	8012a8a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012888:	7dfb      	ldrb	r3, [r7, #23]
 801288a:	2b01      	cmp	r3, #1
 801288c:	d140      	bne.n	8012910 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801288e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012892:	4980      	ldr	r1, [pc, #512]	; (8012a94 <etharp_find_entry+0x2d4>)
 8012894:	4613      	mov	r3, r2
 8012896:	005b      	lsls	r3, r3, #1
 8012898:	4413      	add	r3, r2
 801289a:	00db      	lsls	r3, r3, #3
 801289c:	440b      	add	r3, r1
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d01a      	beq.n	80128da <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80128a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80128a8:	497a      	ldr	r1, [pc, #488]	; (8012a94 <etharp_find_entry+0x2d4>)
 80128aa:	4613      	mov	r3, r2
 80128ac:	005b      	lsls	r3, r3, #1
 80128ae:	4413      	add	r3, r2
 80128b0:	00db      	lsls	r3, r3, #3
 80128b2:	440b      	add	r3, r1
 80128b4:	3312      	adds	r3, #18
 80128b6:	881b      	ldrh	r3, [r3, #0]
 80128b8:	8bba      	ldrh	r2, [r7, #28]
 80128ba:	429a      	cmp	r2, r3
 80128bc:	d845      	bhi.n	801294a <etharp_find_entry+0x18a>
            old_queue = i;
 80128be:	8c3b      	ldrh	r3, [r7, #32]
 80128c0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80128c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80128c6:	4973      	ldr	r1, [pc, #460]	; (8012a94 <etharp_find_entry+0x2d4>)
 80128c8:	4613      	mov	r3, r2
 80128ca:	005b      	lsls	r3, r3, #1
 80128cc:	4413      	add	r3, r2
 80128ce:	00db      	lsls	r3, r3, #3
 80128d0:	440b      	add	r3, r1
 80128d2:	3312      	adds	r3, #18
 80128d4:	881b      	ldrh	r3, [r3, #0]
 80128d6:	83bb      	strh	r3, [r7, #28]
 80128d8:	e037      	b.n	801294a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80128da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80128de:	496d      	ldr	r1, [pc, #436]	; (8012a94 <etharp_find_entry+0x2d4>)
 80128e0:	4613      	mov	r3, r2
 80128e2:	005b      	lsls	r3, r3, #1
 80128e4:	4413      	add	r3, r2
 80128e6:	00db      	lsls	r3, r3, #3
 80128e8:	440b      	add	r3, r1
 80128ea:	3312      	adds	r3, #18
 80128ec:	881b      	ldrh	r3, [r3, #0]
 80128ee:	8b7a      	ldrh	r2, [r7, #26]
 80128f0:	429a      	cmp	r2, r3
 80128f2:	d82a      	bhi.n	801294a <etharp_find_entry+0x18a>
            old_pending = i;
 80128f4:	8c3b      	ldrh	r3, [r7, #32]
 80128f6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80128f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80128fc:	4965      	ldr	r1, [pc, #404]	; (8012a94 <etharp_find_entry+0x2d4>)
 80128fe:	4613      	mov	r3, r2
 8012900:	005b      	lsls	r3, r3, #1
 8012902:	4413      	add	r3, r2
 8012904:	00db      	lsls	r3, r3, #3
 8012906:	440b      	add	r3, r1
 8012908:	3312      	adds	r3, #18
 801290a:	881b      	ldrh	r3, [r3, #0]
 801290c:	837b      	strh	r3, [r7, #26]
 801290e:	e01c      	b.n	801294a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012910:	7dfb      	ldrb	r3, [r7, #23]
 8012912:	2b01      	cmp	r3, #1
 8012914:	d919      	bls.n	801294a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012916:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801291a:	495e      	ldr	r1, [pc, #376]	; (8012a94 <etharp_find_entry+0x2d4>)
 801291c:	4613      	mov	r3, r2
 801291e:	005b      	lsls	r3, r3, #1
 8012920:	4413      	add	r3, r2
 8012922:	00db      	lsls	r3, r3, #3
 8012924:	440b      	add	r3, r1
 8012926:	3312      	adds	r3, #18
 8012928:	881b      	ldrh	r3, [r3, #0]
 801292a:	8b3a      	ldrh	r2, [r7, #24]
 801292c:	429a      	cmp	r2, r3
 801292e:	d80c      	bhi.n	801294a <etharp_find_entry+0x18a>
            old_stable = i;
 8012930:	8c3b      	ldrh	r3, [r7, #32]
 8012932:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8012934:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012938:	4956      	ldr	r1, [pc, #344]	; (8012a94 <etharp_find_entry+0x2d4>)
 801293a:	4613      	mov	r3, r2
 801293c:	005b      	lsls	r3, r3, #1
 801293e:	4413      	add	r3, r2
 8012940:	00db      	lsls	r3, r3, #3
 8012942:	440b      	add	r3, r1
 8012944:	3312      	adds	r3, #18
 8012946:	881b      	ldrh	r3, [r3, #0]
 8012948:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801294a:	8c3b      	ldrh	r3, [r7, #32]
 801294c:	3301      	adds	r3, #1
 801294e:	b29b      	uxth	r3, r3
 8012950:	843b      	strh	r3, [r7, #32]
 8012952:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012956:	2b09      	cmp	r3, #9
 8012958:	f77f af4c 	ble.w	80127f4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801295c:	7afb      	ldrb	r3, [r7, #11]
 801295e:	f003 0302 	and.w	r3, r3, #2
 8012962:	2b00      	cmp	r3, #0
 8012964:	d108      	bne.n	8012978 <etharp_find_entry+0x1b8>
 8012966:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801296a:	2b0a      	cmp	r3, #10
 801296c:	d107      	bne.n	801297e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801296e:	7afb      	ldrb	r3, [r7, #11]
 8012970:	f003 0301 	and.w	r3, r3, #1
 8012974:	2b00      	cmp	r3, #0
 8012976:	d102      	bne.n	801297e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012978:	f04f 33ff 	mov.w	r3, #4294967295
 801297c:	e085      	b.n	8012a8a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801297e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012982:	2b09      	cmp	r3, #9
 8012984:	dc02      	bgt.n	801298c <etharp_find_entry+0x1cc>
    i = empty;
 8012986:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012988:	843b      	strh	r3, [r7, #32]
 801298a:	e039      	b.n	8012a00 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801298c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012990:	2b09      	cmp	r3, #9
 8012992:	dc14      	bgt.n	80129be <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012994:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012996:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012998:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801299c:	493d      	ldr	r1, [pc, #244]	; (8012a94 <etharp_find_entry+0x2d4>)
 801299e:	4613      	mov	r3, r2
 80129a0:	005b      	lsls	r3, r3, #1
 80129a2:	4413      	add	r3, r2
 80129a4:	00db      	lsls	r3, r3, #3
 80129a6:	440b      	add	r3, r1
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d018      	beq.n	80129e0 <etharp_find_entry+0x220>
 80129ae:	4b3a      	ldr	r3, [pc, #232]	; (8012a98 <etharp_find_entry+0x2d8>)
 80129b0:	f240 126d 	movw	r2, #365	; 0x16d
 80129b4:	493b      	ldr	r1, [pc, #236]	; (8012aa4 <etharp_find_entry+0x2e4>)
 80129b6:	483a      	ldr	r0, [pc, #232]	; (8012aa0 <etharp_find_entry+0x2e0>)
 80129b8:	f002 f9e8 	bl	8014d8c <iprintf>
 80129bc:	e010      	b.n	80129e0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80129be:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80129c2:	2b09      	cmp	r3, #9
 80129c4:	dc02      	bgt.n	80129cc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80129c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80129c8:	843b      	strh	r3, [r7, #32]
 80129ca:	e009      	b.n	80129e0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80129cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80129d0:	2b09      	cmp	r3, #9
 80129d2:	dc02      	bgt.n	80129da <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80129d4:	8bfb      	ldrh	r3, [r7, #30]
 80129d6:	843b      	strh	r3, [r7, #32]
 80129d8:	e002      	b.n	80129e0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80129da:	f04f 33ff 	mov.w	r3, #4294967295
 80129de:	e054      	b.n	8012a8a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80129e0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80129e4:	2b09      	cmp	r3, #9
 80129e6:	dd06      	ble.n	80129f6 <etharp_find_entry+0x236>
 80129e8:	4b2b      	ldr	r3, [pc, #172]	; (8012a98 <etharp_find_entry+0x2d8>)
 80129ea:	f240 127f 	movw	r2, #383	; 0x17f
 80129ee:	492e      	ldr	r1, [pc, #184]	; (8012aa8 <etharp_find_entry+0x2e8>)
 80129f0:	482b      	ldr	r0, [pc, #172]	; (8012aa0 <etharp_find_entry+0x2e0>)
 80129f2:	f002 f9cb 	bl	8014d8c <iprintf>
    etharp_free_entry(i);
 80129f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80129fa:	4618      	mov	r0, r3
 80129fc:	f7ff fe06 	bl	801260c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012a00:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012a04:	2b09      	cmp	r3, #9
 8012a06:	dd06      	ble.n	8012a16 <etharp_find_entry+0x256>
 8012a08:	4b23      	ldr	r3, [pc, #140]	; (8012a98 <etharp_find_entry+0x2d8>)
 8012a0a:	f240 1283 	movw	r2, #387	; 0x183
 8012a0e:	4926      	ldr	r1, [pc, #152]	; (8012aa8 <etharp_find_entry+0x2e8>)
 8012a10:	4823      	ldr	r0, [pc, #140]	; (8012aa0 <etharp_find_entry+0x2e0>)
 8012a12:	f002 f9bb 	bl	8014d8c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012a16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a1a:	491e      	ldr	r1, [pc, #120]	; (8012a94 <etharp_find_entry+0x2d4>)
 8012a1c:	4613      	mov	r3, r2
 8012a1e:	005b      	lsls	r3, r3, #1
 8012a20:	4413      	add	r3, r2
 8012a22:	00db      	lsls	r3, r3, #3
 8012a24:	440b      	add	r3, r1
 8012a26:	3314      	adds	r3, #20
 8012a28:	781b      	ldrb	r3, [r3, #0]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d006      	beq.n	8012a3c <etharp_find_entry+0x27c>
 8012a2e:	4b1a      	ldr	r3, [pc, #104]	; (8012a98 <etharp_find_entry+0x2d8>)
 8012a30:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8012a34:	491d      	ldr	r1, [pc, #116]	; (8012aac <etharp_find_entry+0x2ec>)
 8012a36:	481a      	ldr	r0, [pc, #104]	; (8012aa0 <etharp_find_entry+0x2e0>)
 8012a38:	f002 f9a8 	bl	8014d8c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d00b      	beq.n	8012a5a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012a42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	6819      	ldr	r1, [r3, #0]
 8012a4a:	4812      	ldr	r0, [pc, #72]	; (8012a94 <etharp_find_entry+0x2d4>)
 8012a4c:	4613      	mov	r3, r2
 8012a4e:	005b      	lsls	r3, r3, #1
 8012a50:	4413      	add	r3, r2
 8012a52:	00db      	lsls	r3, r3, #3
 8012a54:	4403      	add	r3, r0
 8012a56:	3304      	adds	r3, #4
 8012a58:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8012a5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a5e:	490d      	ldr	r1, [pc, #52]	; (8012a94 <etharp_find_entry+0x2d4>)
 8012a60:	4613      	mov	r3, r2
 8012a62:	005b      	lsls	r3, r3, #1
 8012a64:	4413      	add	r3, r2
 8012a66:	00db      	lsls	r3, r3, #3
 8012a68:	440b      	add	r3, r1
 8012a6a:	3312      	adds	r3, #18
 8012a6c:	2200      	movs	r2, #0
 8012a6e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012a70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a74:	4907      	ldr	r1, [pc, #28]	; (8012a94 <etharp_find_entry+0x2d4>)
 8012a76:	4613      	mov	r3, r2
 8012a78:	005b      	lsls	r3, r3, #1
 8012a7a:	4413      	add	r3, r2
 8012a7c:	00db      	lsls	r3, r3, #3
 8012a7e:	440b      	add	r3, r1
 8012a80:	3308      	adds	r3, #8
 8012a82:	687a      	ldr	r2, [r7, #4]
 8012a84:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8012a86:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8012a8a:	4618      	mov	r0, r3
 8012a8c:	3728      	adds	r7, #40	; 0x28
 8012a8e:	46bd      	mov	sp, r7
 8012a90:	bd80      	pop	{r7, pc}
 8012a92:	bf00      	nop
 8012a94:	24000134 	.word	0x24000134
 8012a98:	08018220 	.word	0x08018220
 8012a9c:	08018258 	.word	0x08018258
 8012aa0:	08018298 	.word	0x08018298
 8012aa4:	080182c0 	.word	0x080182c0
 8012aa8:	080182d8 	.word	0x080182d8
 8012aac:	080182ec 	.word	0x080182ec

08012ab0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012ab0:	b580      	push	{r7, lr}
 8012ab2:	b088      	sub	sp, #32
 8012ab4:	af02      	add	r7, sp, #8
 8012ab6:	60f8      	str	r0, [r7, #12]
 8012ab8:	60b9      	str	r1, [r7, #8]
 8012aba:	607a      	str	r2, [r7, #4]
 8012abc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012ac4:	2b06      	cmp	r3, #6
 8012ac6:	d006      	beq.n	8012ad6 <etharp_update_arp_entry+0x26>
 8012ac8:	4b48      	ldr	r3, [pc, #288]	; (8012bec <etharp_update_arp_entry+0x13c>)
 8012aca:	f240 12a9 	movw	r2, #425	; 0x1a9
 8012ace:	4948      	ldr	r1, [pc, #288]	; (8012bf0 <etharp_update_arp_entry+0x140>)
 8012ad0:	4848      	ldr	r0, [pc, #288]	; (8012bf4 <etharp_update_arp_entry+0x144>)
 8012ad2:	f002 f95b 	bl	8014d8c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012ad6:	68bb      	ldr	r3, [r7, #8]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d012      	beq.n	8012b02 <etharp_update_arp_entry+0x52>
 8012adc:	68bb      	ldr	r3, [r7, #8]
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d00e      	beq.n	8012b02 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012ae4:	68bb      	ldr	r3, [r7, #8]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	68f9      	ldr	r1, [r7, #12]
 8012aea:	4618      	mov	r0, r3
 8012aec:	f001 f924 	bl	8013d38 <ip4_addr_isbroadcast_u32>
 8012af0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d105      	bne.n	8012b02 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012af6:	68bb      	ldr	r3, [r7, #8]
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012afe:	2be0      	cmp	r3, #224	; 0xe0
 8012b00:	d102      	bne.n	8012b08 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012b02:	f06f 030f 	mvn.w	r3, #15
 8012b06:	e06c      	b.n	8012be2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012b08:	78fb      	ldrb	r3, [r7, #3]
 8012b0a:	68fa      	ldr	r2, [r7, #12]
 8012b0c:	4619      	mov	r1, r3
 8012b0e:	68b8      	ldr	r0, [r7, #8]
 8012b10:	f7ff fe56 	bl	80127c0 <etharp_find_entry>
 8012b14:	4603      	mov	r3, r0
 8012b16:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012b18:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	da02      	bge.n	8012b26 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012b20:	8afb      	ldrh	r3, [r7, #22]
 8012b22:	b25b      	sxtb	r3, r3
 8012b24:	e05d      	b.n	8012be2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012b26:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012b2a:	4933      	ldr	r1, [pc, #204]	; (8012bf8 <etharp_update_arp_entry+0x148>)
 8012b2c:	4613      	mov	r3, r2
 8012b2e:	005b      	lsls	r3, r3, #1
 8012b30:	4413      	add	r3, r2
 8012b32:	00db      	lsls	r3, r3, #3
 8012b34:	440b      	add	r3, r1
 8012b36:	3314      	adds	r3, #20
 8012b38:	2202      	movs	r2, #2
 8012b3a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012b3c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012b40:	492d      	ldr	r1, [pc, #180]	; (8012bf8 <etharp_update_arp_entry+0x148>)
 8012b42:	4613      	mov	r3, r2
 8012b44:	005b      	lsls	r3, r3, #1
 8012b46:	4413      	add	r3, r2
 8012b48:	00db      	lsls	r3, r3, #3
 8012b4a:	440b      	add	r3, r1
 8012b4c:	3308      	adds	r3, #8
 8012b4e:	68fa      	ldr	r2, [r7, #12]
 8012b50:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012b52:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012b56:	4613      	mov	r3, r2
 8012b58:	005b      	lsls	r3, r3, #1
 8012b5a:	4413      	add	r3, r2
 8012b5c:	00db      	lsls	r3, r3, #3
 8012b5e:	3308      	adds	r3, #8
 8012b60:	4a25      	ldr	r2, [pc, #148]	; (8012bf8 <etharp_update_arp_entry+0x148>)
 8012b62:	4413      	add	r3, r2
 8012b64:	3304      	adds	r3, #4
 8012b66:	2206      	movs	r2, #6
 8012b68:	6879      	ldr	r1, [r7, #4]
 8012b6a:	4618      	mov	r0, r3
 8012b6c:	f002 f8f8 	bl	8014d60 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012b70:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012b74:	4920      	ldr	r1, [pc, #128]	; (8012bf8 <etharp_update_arp_entry+0x148>)
 8012b76:	4613      	mov	r3, r2
 8012b78:	005b      	lsls	r3, r3, #1
 8012b7a:	4413      	add	r3, r2
 8012b7c:	00db      	lsls	r3, r3, #3
 8012b7e:	440b      	add	r3, r1
 8012b80:	3312      	adds	r3, #18
 8012b82:	2200      	movs	r2, #0
 8012b84:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012b86:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012b8a:	491b      	ldr	r1, [pc, #108]	; (8012bf8 <etharp_update_arp_entry+0x148>)
 8012b8c:	4613      	mov	r3, r2
 8012b8e:	005b      	lsls	r3, r3, #1
 8012b90:	4413      	add	r3, r2
 8012b92:	00db      	lsls	r3, r3, #3
 8012b94:	440b      	add	r3, r1
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d021      	beq.n	8012be0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012b9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012ba0:	4915      	ldr	r1, [pc, #84]	; (8012bf8 <etharp_update_arp_entry+0x148>)
 8012ba2:	4613      	mov	r3, r2
 8012ba4:	005b      	lsls	r3, r3, #1
 8012ba6:	4413      	add	r3, r2
 8012ba8:	00db      	lsls	r3, r3, #3
 8012baa:	440b      	add	r3, r1
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012bb0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012bb4:	4910      	ldr	r1, [pc, #64]	; (8012bf8 <etharp_update_arp_entry+0x148>)
 8012bb6:	4613      	mov	r3, r2
 8012bb8:	005b      	lsls	r3, r3, #1
 8012bba:	4413      	add	r3, r2
 8012bbc:	00db      	lsls	r3, r3, #3
 8012bbe:	440b      	add	r3, r1
 8012bc0:	2200      	movs	r2, #0
 8012bc2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8012bca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012bce:	9300      	str	r3, [sp, #0]
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	6939      	ldr	r1, [r7, #16]
 8012bd4:	68f8      	ldr	r0, [r7, #12]
 8012bd6:	f002 f849 	bl	8014c6c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012bda:	6938      	ldr	r0, [r7, #16]
 8012bdc:	f7f8 ff24 	bl	800ba28 <pbuf_free>
  }
  return ERR_OK;
 8012be0:	2300      	movs	r3, #0
}
 8012be2:	4618      	mov	r0, r3
 8012be4:	3718      	adds	r7, #24
 8012be6:	46bd      	mov	sp, r7
 8012be8:	bd80      	pop	{r7, pc}
 8012bea:	bf00      	nop
 8012bec:	08018220 	.word	0x08018220
 8012bf0:	08018318 	.word	0x08018318
 8012bf4:	08018298 	.word	0x08018298
 8012bf8:	24000134 	.word	0x24000134

08012bfc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	b084      	sub	sp, #16
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012c04:	2300      	movs	r3, #0
 8012c06:	60fb      	str	r3, [r7, #12]
 8012c08:	e01e      	b.n	8012c48 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8012c0a:	4913      	ldr	r1, [pc, #76]	; (8012c58 <etharp_cleanup_netif+0x5c>)
 8012c0c:	68fa      	ldr	r2, [r7, #12]
 8012c0e:	4613      	mov	r3, r2
 8012c10:	005b      	lsls	r3, r3, #1
 8012c12:	4413      	add	r3, r2
 8012c14:	00db      	lsls	r3, r3, #3
 8012c16:	440b      	add	r3, r1
 8012c18:	3314      	adds	r3, #20
 8012c1a:	781b      	ldrb	r3, [r3, #0]
 8012c1c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012c1e:	7afb      	ldrb	r3, [r7, #11]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d00e      	beq.n	8012c42 <etharp_cleanup_netif+0x46>
 8012c24:	490c      	ldr	r1, [pc, #48]	; (8012c58 <etharp_cleanup_netif+0x5c>)
 8012c26:	68fa      	ldr	r2, [r7, #12]
 8012c28:	4613      	mov	r3, r2
 8012c2a:	005b      	lsls	r3, r3, #1
 8012c2c:	4413      	add	r3, r2
 8012c2e:	00db      	lsls	r3, r3, #3
 8012c30:	440b      	add	r3, r1
 8012c32:	3308      	adds	r3, #8
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	687a      	ldr	r2, [r7, #4]
 8012c38:	429a      	cmp	r2, r3
 8012c3a:	d102      	bne.n	8012c42 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012c3c:	68f8      	ldr	r0, [r7, #12]
 8012c3e:	f7ff fce5 	bl	801260c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	3301      	adds	r3, #1
 8012c46:	60fb      	str	r3, [r7, #12]
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	2b09      	cmp	r3, #9
 8012c4c:	dddd      	ble.n	8012c0a <etharp_cleanup_netif+0xe>
    }
  }
}
 8012c4e:	bf00      	nop
 8012c50:	bf00      	nop
 8012c52:	3710      	adds	r7, #16
 8012c54:	46bd      	mov	sp, r7
 8012c56:	bd80      	pop	{r7, pc}
 8012c58:	24000134 	.word	0x24000134

08012c5c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012c5c:	b5b0      	push	{r4, r5, r7, lr}
 8012c5e:	b08a      	sub	sp, #40	; 0x28
 8012c60:	af04      	add	r7, sp, #16
 8012c62:	6078      	str	r0, [r7, #4]
 8012c64:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012c66:	683b      	ldr	r3, [r7, #0]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d107      	bne.n	8012c7c <etharp_input+0x20>
 8012c6c:	4b3d      	ldr	r3, [pc, #244]	; (8012d64 <etharp_input+0x108>)
 8012c6e:	f240 228a 	movw	r2, #650	; 0x28a
 8012c72:	493d      	ldr	r1, [pc, #244]	; (8012d68 <etharp_input+0x10c>)
 8012c74:	483d      	ldr	r0, [pc, #244]	; (8012d6c <etharp_input+0x110>)
 8012c76:	f002 f889 	bl	8014d8c <iprintf>
 8012c7a:	e06f      	b.n	8012d5c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	685b      	ldr	r3, [r3, #4]
 8012c80:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012c82:	693b      	ldr	r3, [r7, #16]
 8012c84:	881b      	ldrh	r3, [r3, #0]
 8012c86:	b29b      	uxth	r3, r3
 8012c88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012c8c:	d10c      	bne.n	8012ca8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012c8e:	693b      	ldr	r3, [r7, #16]
 8012c90:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012c92:	2b06      	cmp	r3, #6
 8012c94:	d108      	bne.n	8012ca8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012c96:	693b      	ldr	r3, [r7, #16]
 8012c98:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012c9a:	2b04      	cmp	r3, #4
 8012c9c:	d104      	bne.n	8012ca8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012c9e:	693b      	ldr	r3, [r7, #16]
 8012ca0:	885b      	ldrh	r3, [r3, #2]
 8012ca2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012ca4:	2b08      	cmp	r3, #8
 8012ca6:	d003      	beq.n	8012cb0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012ca8:	6878      	ldr	r0, [r7, #4]
 8012caa:	f7f8 febd 	bl	800ba28 <pbuf_free>
    return;
 8012cae:	e055      	b.n	8012d5c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8012cb0:	693b      	ldr	r3, [r7, #16]
 8012cb2:	330e      	adds	r3, #14
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012cb8:	693b      	ldr	r3, [r7, #16]
 8012cba:	3318      	adds	r3, #24
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012cc0:	683b      	ldr	r3, [r7, #0]
 8012cc2:	3304      	adds	r3, #4
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d102      	bne.n	8012cd0 <etharp_input+0x74>
    for_us = 0;
 8012cca:	2300      	movs	r3, #0
 8012ccc:	75fb      	strb	r3, [r7, #23]
 8012cce:	e009      	b.n	8012ce4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012cd0:	68ba      	ldr	r2, [r7, #8]
 8012cd2:	683b      	ldr	r3, [r7, #0]
 8012cd4:	3304      	adds	r3, #4
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	429a      	cmp	r2, r3
 8012cda:	bf0c      	ite	eq
 8012cdc:	2301      	moveq	r3, #1
 8012cde:	2300      	movne	r3, #0
 8012ce0:	b2db      	uxtb	r3, r3
 8012ce2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012ce4:	693b      	ldr	r3, [r7, #16]
 8012ce6:	f103 0208 	add.w	r2, r3, #8
 8012cea:	7dfb      	ldrb	r3, [r7, #23]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d001      	beq.n	8012cf4 <etharp_input+0x98>
 8012cf0:	2301      	movs	r3, #1
 8012cf2:	e000      	b.n	8012cf6 <etharp_input+0x9a>
 8012cf4:	2302      	movs	r3, #2
 8012cf6:	f107 010c 	add.w	r1, r7, #12
 8012cfa:	6838      	ldr	r0, [r7, #0]
 8012cfc:	f7ff fed8 	bl	8012ab0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012d00:	693b      	ldr	r3, [r7, #16]
 8012d02:	88db      	ldrh	r3, [r3, #6]
 8012d04:	b29b      	uxth	r3, r3
 8012d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012d0a:	d003      	beq.n	8012d14 <etharp_input+0xb8>
 8012d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012d10:	d01e      	beq.n	8012d50 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8012d12:	e020      	b.n	8012d56 <etharp_input+0xfa>
      if (for_us) {
 8012d14:	7dfb      	ldrb	r3, [r7, #23]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d01c      	beq.n	8012d54 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012d1a:	683b      	ldr	r3, [r7, #0]
 8012d1c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012d20:	693b      	ldr	r3, [r7, #16]
 8012d22:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012d26:	683b      	ldr	r3, [r7, #0]
 8012d28:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8012d2c:	683b      	ldr	r3, [r7, #0]
 8012d2e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012d30:	693a      	ldr	r2, [r7, #16]
 8012d32:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012d34:	2102      	movs	r1, #2
 8012d36:	9103      	str	r1, [sp, #12]
 8012d38:	f107 010c 	add.w	r1, r7, #12
 8012d3c:	9102      	str	r1, [sp, #8]
 8012d3e:	9201      	str	r2, [sp, #4]
 8012d40:	9300      	str	r3, [sp, #0]
 8012d42:	462b      	mov	r3, r5
 8012d44:	4622      	mov	r2, r4
 8012d46:	4601      	mov	r1, r0
 8012d48:	6838      	ldr	r0, [r7, #0]
 8012d4a:	f000 faeb 	bl	8013324 <etharp_raw>
      break;
 8012d4e:	e001      	b.n	8012d54 <etharp_input+0xf8>
      break;
 8012d50:	bf00      	nop
 8012d52:	e000      	b.n	8012d56 <etharp_input+0xfa>
      break;
 8012d54:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012d56:	6878      	ldr	r0, [r7, #4]
 8012d58:	f7f8 fe66 	bl	800ba28 <pbuf_free>
}
 8012d5c:	3718      	adds	r7, #24
 8012d5e:	46bd      	mov	sp, r7
 8012d60:	bdb0      	pop	{r4, r5, r7, pc}
 8012d62:	bf00      	nop
 8012d64:	08018220 	.word	0x08018220
 8012d68:	08018370 	.word	0x08018370
 8012d6c:	08018298 	.word	0x08018298

08012d70 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b086      	sub	sp, #24
 8012d74:	af02      	add	r7, sp, #8
 8012d76:	60f8      	str	r0, [r7, #12]
 8012d78:	60b9      	str	r1, [r7, #8]
 8012d7a:	4613      	mov	r3, r2
 8012d7c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012d7e:	79fa      	ldrb	r2, [r7, #7]
 8012d80:	4944      	ldr	r1, [pc, #272]	; (8012e94 <etharp_output_to_arp_index+0x124>)
 8012d82:	4613      	mov	r3, r2
 8012d84:	005b      	lsls	r3, r3, #1
 8012d86:	4413      	add	r3, r2
 8012d88:	00db      	lsls	r3, r3, #3
 8012d8a:	440b      	add	r3, r1
 8012d8c:	3314      	adds	r3, #20
 8012d8e:	781b      	ldrb	r3, [r3, #0]
 8012d90:	2b01      	cmp	r3, #1
 8012d92:	d806      	bhi.n	8012da2 <etharp_output_to_arp_index+0x32>
 8012d94:	4b40      	ldr	r3, [pc, #256]	; (8012e98 <etharp_output_to_arp_index+0x128>)
 8012d96:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012d9a:	4940      	ldr	r1, [pc, #256]	; (8012e9c <etharp_output_to_arp_index+0x12c>)
 8012d9c:	4840      	ldr	r0, [pc, #256]	; (8012ea0 <etharp_output_to_arp_index+0x130>)
 8012d9e:	f001 fff5 	bl	8014d8c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012da2:	79fa      	ldrb	r2, [r7, #7]
 8012da4:	493b      	ldr	r1, [pc, #236]	; (8012e94 <etharp_output_to_arp_index+0x124>)
 8012da6:	4613      	mov	r3, r2
 8012da8:	005b      	lsls	r3, r3, #1
 8012daa:	4413      	add	r3, r2
 8012dac:	00db      	lsls	r3, r3, #3
 8012dae:	440b      	add	r3, r1
 8012db0:	3314      	adds	r3, #20
 8012db2:	781b      	ldrb	r3, [r3, #0]
 8012db4:	2b02      	cmp	r3, #2
 8012db6:	d153      	bne.n	8012e60 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012db8:	79fa      	ldrb	r2, [r7, #7]
 8012dba:	4936      	ldr	r1, [pc, #216]	; (8012e94 <etharp_output_to_arp_index+0x124>)
 8012dbc:	4613      	mov	r3, r2
 8012dbe:	005b      	lsls	r3, r3, #1
 8012dc0:	4413      	add	r3, r2
 8012dc2:	00db      	lsls	r3, r3, #3
 8012dc4:	440b      	add	r3, r1
 8012dc6:	3312      	adds	r3, #18
 8012dc8:	881b      	ldrh	r3, [r3, #0]
 8012dca:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8012dce:	d919      	bls.n	8012e04 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012dd0:	79fa      	ldrb	r2, [r7, #7]
 8012dd2:	4613      	mov	r3, r2
 8012dd4:	005b      	lsls	r3, r3, #1
 8012dd6:	4413      	add	r3, r2
 8012dd8:	00db      	lsls	r3, r3, #3
 8012dda:	4a2e      	ldr	r2, [pc, #184]	; (8012e94 <etharp_output_to_arp_index+0x124>)
 8012ddc:	4413      	add	r3, r2
 8012dde:	3304      	adds	r3, #4
 8012de0:	4619      	mov	r1, r3
 8012de2:	68f8      	ldr	r0, [r7, #12]
 8012de4:	f000 fb4c 	bl	8013480 <etharp_request>
 8012de8:	4603      	mov	r3, r0
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d138      	bne.n	8012e60 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012dee:	79fa      	ldrb	r2, [r7, #7]
 8012df0:	4928      	ldr	r1, [pc, #160]	; (8012e94 <etharp_output_to_arp_index+0x124>)
 8012df2:	4613      	mov	r3, r2
 8012df4:	005b      	lsls	r3, r3, #1
 8012df6:	4413      	add	r3, r2
 8012df8:	00db      	lsls	r3, r3, #3
 8012dfa:	440b      	add	r3, r1
 8012dfc:	3314      	adds	r3, #20
 8012dfe:	2203      	movs	r2, #3
 8012e00:	701a      	strb	r2, [r3, #0]
 8012e02:	e02d      	b.n	8012e60 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012e04:	79fa      	ldrb	r2, [r7, #7]
 8012e06:	4923      	ldr	r1, [pc, #140]	; (8012e94 <etharp_output_to_arp_index+0x124>)
 8012e08:	4613      	mov	r3, r2
 8012e0a:	005b      	lsls	r3, r3, #1
 8012e0c:	4413      	add	r3, r2
 8012e0e:	00db      	lsls	r3, r3, #3
 8012e10:	440b      	add	r3, r1
 8012e12:	3312      	adds	r3, #18
 8012e14:	881b      	ldrh	r3, [r3, #0]
 8012e16:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012e1a:	d321      	bcc.n	8012e60 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012e1c:	79fa      	ldrb	r2, [r7, #7]
 8012e1e:	4613      	mov	r3, r2
 8012e20:	005b      	lsls	r3, r3, #1
 8012e22:	4413      	add	r3, r2
 8012e24:	00db      	lsls	r3, r3, #3
 8012e26:	4a1b      	ldr	r2, [pc, #108]	; (8012e94 <etharp_output_to_arp_index+0x124>)
 8012e28:	4413      	add	r3, r2
 8012e2a:	1d19      	adds	r1, r3, #4
 8012e2c:	79fa      	ldrb	r2, [r7, #7]
 8012e2e:	4613      	mov	r3, r2
 8012e30:	005b      	lsls	r3, r3, #1
 8012e32:	4413      	add	r3, r2
 8012e34:	00db      	lsls	r3, r3, #3
 8012e36:	3308      	adds	r3, #8
 8012e38:	4a16      	ldr	r2, [pc, #88]	; (8012e94 <etharp_output_to_arp_index+0x124>)
 8012e3a:	4413      	add	r3, r2
 8012e3c:	3304      	adds	r3, #4
 8012e3e:	461a      	mov	r2, r3
 8012e40:	68f8      	ldr	r0, [r7, #12]
 8012e42:	f000 fafb 	bl	801343c <etharp_request_dst>
 8012e46:	4603      	mov	r3, r0
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d109      	bne.n	8012e60 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012e4c:	79fa      	ldrb	r2, [r7, #7]
 8012e4e:	4911      	ldr	r1, [pc, #68]	; (8012e94 <etharp_output_to_arp_index+0x124>)
 8012e50:	4613      	mov	r3, r2
 8012e52:	005b      	lsls	r3, r3, #1
 8012e54:	4413      	add	r3, r2
 8012e56:	00db      	lsls	r3, r3, #3
 8012e58:	440b      	add	r3, r1
 8012e5a:	3314      	adds	r3, #20
 8012e5c:	2203      	movs	r2, #3
 8012e5e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8012e66:	79fa      	ldrb	r2, [r7, #7]
 8012e68:	4613      	mov	r3, r2
 8012e6a:	005b      	lsls	r3, r3, #1
 8012e6c:	4413      	add	r3, r2
 8012e6e:	00db      	lsls	r3, r3, #3
 8012e70:	3308      	adds	r3, #8
 8012e72:	4a08      	ldr	r2, [pc, #32]	; (8012e94 <etharp_output_to_arp_index+0x124>)
 8012e74:	4413      	add	r3, r2
 8012e76:	3304      	adds	r3, #4
 8012e78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012e7c:	9200      	str	r2, [sp, #0]
 8012e7e:	460a      	mov	r2, r1
 8012e80:	68b9      	ldr	r1, [r7, #8]
 8012e82:	68f8      	ldr	r0, [r7, #12]
 8012e84:	f001 fef2 	bl	8014c6c <ethernet_output>
 8012e88:	4603      	mov	r3, r0
}
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	3710      	adds	r7, #16
 8012e8e:	46bd      	mov	sp, r7
 8012e90:	bd80      	pop	{r7, pc}
 8012e92:	bf00      	nop
 8012e94:	24000134 	.word	0x24000134
 8012e98:	08018220 	.word	0x08018220
 8012e9c:	08018390 	.word	0x08018390
 8012ea0:	08018298 	.word	0x08018298

08012ea4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b08a      	sub	sp, #40	; 0x28
 8012ea8:	af02      	add	r7, sp, #8
 8012eaa:	60f8      	str	r0, [r7, #12]
 8012eac:	60b9      	str	r1, [r7, #8]
 8012eae:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d106      	bne.n	8012ec8 <etharp_output+0x24>
 8012eba:	4b73      	ldr	r3, [pc, #460]	; (8013088 <etharp_output+0x1e4>)
 8012ebc:	f240 321e 	movw	r2, #798	; 0x31e
 8012ec0:	4972      	ldr	r1, [pc, #456]	; (801308c <etharp_output+0x1e8>)
 8012ec2:	4873      	ldr	r0, [pc, #460]	; (8013090 <etharp_output+0x1ec>)
 8012ec4:	f001 ff62 	bl	8014d8c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012ec8:	68bb      	ldr	r3, [r7, #8]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d106      	bne.n	8012edc <etharp_output+0x38>
 8012ece:	4b6e      	ldr	r3, [pc, #440]	; (8013088 <etharp_output+0x1e4>)
 8012ed0:	f240 321f 	movw	r2, #799	; 0x31f
 8012ed4:	496f      	ldr	r1, [pc, #444]	; (8013094 <etharp_output+0x1f0>)
 8012ed6:	486e      	ldr	r0, [pc, #440]	; (8013090 <etharp_output+0x1ec>)
 8012ed8:	f001 ff58 	bl	8014d8c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d106      	bne.n	8012ef0 <etharp_output+0x4c>
 8012ee2:	4b69      	ldr	r3, [pc, #420]	; (8013088 <etharp_output+0x1e4>)
 8012ee4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8012ee8:	496b      	ldr	r1, [pc, #428]	; (8013098 <etharp_output+0x1f4>)
 8012eea:	4869      	ldr	r0, [pc, #420]	; (8013090 <etharp_output+0x1ec>)
 8012eec:	f001 ff4e 	bl	8014d8c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	68f9      	ldr	r1, [r7, #12]
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	f000 ff1e 	bl	8013d38 <ip4_addr_isbroadcast_u32>
 8012efc:	4603      	mov	r3, r0
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d002      	beq.n	8012f08 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8012f02:	4b66      	ldr	r3, [pc, #408]	; (801309c <etharp_output+0x1f8>)
 8012f04:	61fb      	str	r3, [r7, #28]
 8012f06:	e0af      	b.n	8013068 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012f10:	2be0      	cmp	r3, #224	; 0xe0
 8012f12:	d118      	bne.n	8012f46 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012f14:	2301      	movs	r3, #1
 8012f16:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012f18:	2300      	movs	r3, #0
 8012f1a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012f1c:	235e      	movs	r3, #94	; 0x5e
 8012f1e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	3301      	adds	r3, #1
 8012f24:	781b      	ldrb	r3, [r3, #0]
 8012f26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012f2a:	b2db      	uxtb	r3, r3
 8012f2c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	3302      	adds	r3, #2
 8012f32:	781b      	ldrb	r3, [r3, #0]
 8012f34:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	3303      	adds	r3, #3
 8012f3a:	781b      	ldrb	r3, [r3, #0]
 8012f3c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8012f3e:	f107 0310 	add.w	r3, r7, #16
 8012f42:	61fb      	str	r3, [r7, #28]
 8012f44:	e090      	b.n	8013068 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	681a      	ldr	r2, [r3, #0]
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	3304      	adds	r3, #4
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	405a      	eors	r2, r3
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	3308      	adds	r3, #8
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	4013      	ands	r3, r2
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d012      	beq.n	8012f84 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012f64:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8012f68:	4293      	cmp	r3, r2
 8012f6a:	d00b      	beq.n	8012f84 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	330c      	adds	r3, #12
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d003      	beq.n	8012f7e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	330c      	adds	r3, #12
 8012f7a:	61bb      	str	r3, [r7, #24]
 8012f7c:	e002      	b.n	8012f84 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8012f7e:	f06f 0303 	mvn.w	r3, #3
 8012f82:	e07d      	b.n	8013080 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012f84:	4b46      	ldr	r3, [pc, #280]	; (80130a0 <etharp_output+0x1fc>)
 8012f86:	781b      	ldrb	r3, [r3, #0]
 8012f88:	4619      	mov	r1, r3
 8012f8a:	4a46      	ldr	r2, [pc, #280]	; (80130a4 <etharp_output+0x200>)
 8012f8c:	460b      	mov	r3, r1
 8012f8e:	005b      	lsls	r3, r3, #1
 8012f90:	440b      	add	r3, r1
 8012f92:	00db      	lsls	r3, r3, #3
 8012f94:	4413      	add	r3, r2
 8012f96:	3314      	adds	r3, #20
 8012f98:	781b      	ldrb	r3, [r3, #0]
 8012f9a:	2b01      	cmp	r3, #1
 8012f9c:	d925      	bls.n	8012fea <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012f9e:	4b40      	ldr	r3, [pc, #256]	; (80130a0 <etharp_output+0x1fc>)
 8012fa0:	781b      	ldrb	r3, [r3, #0]
 8012fa2:	4619      	mov	r1, r3
 8012fa4:	4a3f      	ldr	r2, [pc, #252]	; (80130a4 <etharp_output+0x200>)
 8012fa6:	460b      	mov	r3, r1
 8012fa8:	005b      	lsls	r3, r3, #1
 8012faa:	440b      	add	r3, r1
 8012fac:	00db      	lsls	r3, r3, #3
 8012fae:	4413      	add	r3, r2
 8012fb0:	3308      	adds	r3, #8
 8012fb2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012fb4:	68fa      	ldr	r2, [r7, #12]
 8012fb6:	429a      	cmp	r2, r3
 8012fb8:	d117      	bne.n	8012fea <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012fba:	69bb      	ldr	r3, [r7, #24]
 8012fbc:	681a      	ldr	r2, [r3, #0]
 8012fbe:	4b38      	ldr	r3, [pc, #224]	; (80130a0 <etharp_output+0x1fc>)
 8012fc0:	781b      	ldrb	r3, [r3, #0]
 8012fc2:	4618      	mov	r0, r3
 8012fc4:	4937      	ldr	r1, [pc, #220]	; (80130a4 <etharp_output+0x200>)
 8012fc6:	4603      	mov	r3, r0
 8012fc8:	005b      	lsls	r3, r3, #1
 8012fca:	4403      	add	r3, r0
 8012fcc:	00db      	lsls	r3, r3, #3
 8012fce:	440b      	add	r3, r1
 8012fd0:	3304      	adds	r3, #4
 8012fd2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012fd4:	429a      	cmp	r2, r3
 8012fd6:	d108      	bne.n	8012fea <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012fd8:	4b31      	ldr	r3, [pc, #196]	; (80130a0 <etharp_output+0x1fc>)
 8012fda:	781b      	ldrb	r3, [r3, #0]
 8012fdc:	461a      	mov	r2, r3
 8012fde:	68b9      	ldr	r1, [r7, #8]
 8012fe0:	68f8      	ldr	r0, [r7, #12]
 8012fe2:	f7ff fec5 	bl	8012d70 <etharp_output_to_arp_index>
 8012fe6:	4603      	mov	r3, r0
 8012fe8:	e04a      	b.n	8013080 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012fea:	2300      	movs	r3, #0
 8012fec:	75fb      	strb	r3, [r7, #23]
 8012fee:	e031      	b.n	8013054 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012ff0:	7dfa      	ldrb	r2, [r7, #23]
 8012ff2:	492c      	ldr	r1, [pc, #176]	; (80130a4 <etharp_output+0x200>)
 8012ff4:	4613      	mov	r3, r2
 8012ff6:	005b      	lsls	r3, r3, #1
 8012ff8:	4413      	add	r3, r2
 8012ffa:	00db      	lsls	r3, r3, #3
 8012ffc:	440b      	add	r3, r1
 8012ffe:	3314      	adds	r3, #20
 8013000:	781b      	ldrb	r3, [r3, #0]
 8013002:	2b01      	cmp	r3, #1
 8013004:	d923      	bls.n	801304e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8013006:	7dfa      	ldrb	r2, [r7, #23]
 8013008:	4926      	ldr	r1, [pc, #152]	; (80130a4 <etharp_output+0x200>)
 801300a:	4613      	mov	r3, r2
 801300c:	005b      	lsls	r3, r3, #1
 801300e:	4413      	add	r3, r2
 8013010:	00db      	lsls	r3, r3, #3
 8013012:	440b      	add	r3, r1
 8013014:	3308      	adds	r3, #8
 8013016:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013018:	68fa      	ldr	r2, [r7, #12]
 801301a:	429a      	cmp	r2, r3
 801301c:	d117      	bne.n	801304e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801301e:	69bb      	ldr	r3, [r7, #24]
 8013020:	6819      	ldr	r1, [r3, #0]
 8013022:	7dfa      	ldrb	r2, [r7, #23]
 8013024:	481f      	ldr	r0, [pc, #124]	; (80130a4 <etharp_output+0x200>)
 8013026:	4613      	mov	r3, r2
 8013028:	005b      	lsls	r3, r3, #1
 801302a:	4413      	add	r3, r2
 801302c:	00db      	lsls	r3, r3, #3
 801302e:	4403      	add	r3, r0
 8013030:	3304      	adds	r3, #4
 8013032:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013034:	4299      	cmp	r1, r3
 8013036:	d10a      	bne.n	801304e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8013038:	4a19      	ldr	r2, [pc, #100]	; (80130a0 <etharp_output+0x1fc>)
 801303a:	7dfb      	ldrb	r3, [r7, #23]
 801303c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801303e:	7dfb      	ldrb	r3, [r7, #23]
 8013040:	461a      	mov	r2, r3
 8013042:	68b9      	ldr	r1, [r7, #8]
 8013044:	68f8      	ldr	r0, [r7, #12]
 8013046:	f7ff fe93 	bl	8012d70 <etharp_output_to_arp_index>
 801304a:	4603      	mov	r3, r0
 801304c:	e018      	b.n	8013080 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801304e:	7dfb      	ldrb	r3, [r7, #23]
 8013050:	3301      	adds	r3, #1
 8013052:	75fb      	strb	r3, [r7, #23]
 8013054:	7dfb      	ldrb	r3, [r7, #23]
 8013056:	2b09      	cmp	r3, #9
 8013058:	d9ca      	bls.n	8012ff0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801305a:	68ba      	ldr	r2, [r7, #8]
 801305c:	69b9      	ldr	r1, [r7, #24]
 801305e:	68f8      	ldr	r0, [r7, #12]
 8013060:	f000 f822 	bl	80130a8 <etharp_query>
 8013064:	4603      	mov	r3, r0
 8013066:	e00b      	b.n	8013080 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801306e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013072:	9300      	str	r3, [sp, #0]
 8013074:	69fb      	ldr	r3, [r7, #28]
 8013076:	68b9      	ldr	r1, [r7, #8]
 8013078:	68f8      	ldr	r0, [r7, #12]
 801307a:	f001 fdf7 	bl	8014c6c <ethernet_output>
 801307e:	4603      	mov	r3, r0
}
 8013080:	4618      	mov	r0, r3
 8013082:	3720      	adds	r7, #32
 8013084:	46bd      	mov	sp, r7
 8013086:	bd80      	pop	{r7, pc}
 8013088:	08018220 	.word	0x08018220
 801308c:	08018370 	.word	0x08018370
 8013090:	08018298 	.word	0x08018298
 8013094:	080183c0 	.word	0x080183c0
 8013098:	08018360 	.word	0x08018360
 801309c:	080197dc 	.word	0x080197dc
 80130a0:	24000224 	.word	0x24000224
 80130a4:	24000134 	.word	0x24000134

080130a8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80130a8:	b580      	push	{r7, lr}
 80130aa:	b08c      	sub	sp, #48	; 0x30
 80130ac:	af02      	add	r7, sp, #8
 80130ae:	60f8      	str	r0, [r7, #12]
 80130b0:	60b9      	str	r1, [r7, #8]
 80130b2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	3326      	adds	r3, #38	; 0x26
 80130b8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80130ba:	23ff      	movs	r3, #255	; 0xff
 80130bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80130c0:	2300      	movs	r3, #0
 80130c2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80130c4:	68bb      	ldr	r3, [r7, #8]
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	68f9      	ldr	r1, [r7, #12]
 80130ca:	4618      	mov	r0, r3
 80130cc:	f000 fe34 	bl	8013d38 <ip4_addr_isbroadcast_u32>
 80130d0:	4603      	mov	r3, r0
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d10c      	bne.n	80130f0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80130d6:	68bb      	ldr	r3, [r7, #8]
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80130de:	2be0      	cmp	r3, #224	; 0xe0
 80130e0:	d006      	beq.n	80130f0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80130e2:	68bb      	ldr	r3, [r7, #8]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d003      	beq.n	80130f0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80130e8:	68bb      	ldr	r3, [r7, #8]
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d102      	bne.n	80130f6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80130f0:	f06f 030f 	mvn.w	r3, #15
 80130f4:	e101      	b.n	80132fa <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80130f6:	68fa      	ldr	r2, [r7, #12]
 80130f8:	2101      	movs	r1, #1
 80130fa:	68b8      	ldr	r0, [r7, #8]
 80130fc:	f7ff fb60 	bl	80127c0 <etharp_find_entry>
 8013100:	4603      	mov	r3, r0
 8013102:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8013104:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013108:	2b00      	cmp	r3, #0
 801310a:	da02      	bge.n	8013112 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801310c:	8a7b      	ldrh	r3, [r7, #18]
 801310e:	b25b      	sxtb	r3, r3
 8013110:	e0f3      	b.n	80132fa <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8013112:	8a7b      	ldrh	r3, [r7, #18]
 8013114:	2b7e      	cmp	r3, #126	; 0x7e
 8013116:	d906      	bls.n	8013126 <etharp_query+0x7e>
 8013118:	4b7a      	ldr	r3, [pc, #488]	; (8013304 <etharp_query+0x25c>)
 801311a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801311e:	497a      	ldr	r1, [pc, #488]	; (8013308 <etharp_query+0x260>)
 8013120:	487a      	ldr	r0, [pc, #488]	; (801330c <etharp_query+0x264>)
 8013122:	f001 fe33 	bl	8014d8c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8013126:	8a7b      	ldrh	r3, [r7, #18]
 8013128:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801312a:	7c7a      	ldrb	r2, [r7, #17]
 801312c:	4978      	ldr	r1, [pc, #480]	; (8013310 <etharp_query+0x268>)
 801312e:	4613      	mov	r3, r2
 8013130:	005b      	lsls	r3, r3, #1
 8013132:	4413      	add	r3, r2
 8013134:	00db      	lsls	r3, r3, #3
 8013136:	440b      	add	r3, r1
 8013138:	3314      	adds	r3, #20
 801313a:	781b      	ldrb	r3, [r3, #0]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d115      	bne.n	801316c <etharp_query+0xc4>
    is_new_entry = 1;
 8013140:	2301      	movs	r3, #1
 8013142:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013144:	7c7a      	ldrb	r2, [r7, #17]
 8013146:	4972      	ldr	r1, [pc, #456]	; (8013310 <etharp_query+0x268>)
 8013148:	4613      	mov	r3, r2
 801314a:	005b      	lsls	r3, r3, #1
 801314c:	4413      	add	r3, r2
 801314e:	00db      	lsls	r3, r3, #3
 8013150:	440b      	add	r3, r1
 8013152:	3314      	adds	r3, #20
 8013154:	2201      	movs	r2, #1
 8013156:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013158:	7c7a      	ldrb	r2, [r7, #17]
 801315a:	496d      	ldr	r1, [pc, #436]	; (8013310 <etharp_query+0x268>)
 801315c:	4613      	mov	r3, r2
 801315e:	005b      	lsls	r3, r3, #1
 8013160:	4413      	add	r3, r2
 8013162:	00db      	lsls	r3, r3, #3
 8013164:	440b      	add	r3, r1
 8013166:	3308      	adds	r3, #8
 8013168:	68fa      	ldr	r2, [r7, #12]
 801316a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801316c:	7c7a      	ldrb	r2, [r7, #17]
 801316e:	4968      	ldr	r1, [pc, #416]	; (8013310 <etharp_query+0x268>)
 8013170:	4613      	mov	r3, r2
 8013172:	005b      	lsls	r3, r3, #1
 8013174:	4413      	add	r3, r2
 8013176:	00db      	lsls	r3, r3, #3
 8013178:	440b      	add	r3, r1
 801317a:	3314      	adds	r3, #20
 801317c:	781b      	ldrb	r3, [r3, #0]
 801317e:	2b01      	cmp	r3, #1
 8013180:	d011      	beq.n	80131a6 <etharp_query+0xfe>
 8013182:	7c7a      	ldrb	r2, [r7, #17]
 8013184:	4962      	ldr	r1, [pc, #392]	; (8013310 <etharp_query+0x268>)
 8013186:	4613      	mov	r3, r2
 8013188:	005b      	lsls	r3, r3, #1
 801318a:	4413      	add	r3, r2
 801318c:	00db      	lsls	r3, r3, #3
 801318e:	440b      	add	r3, r1
 8013190:	3314      	adds	r3, #20
 8013192:	781b      	ldrb	r3, [r3, #0]
 8013194:	2b01      	cmp	r3, #1
 8013196:	d806      	bhi.n	80131a6 <etharp_query+0xfe>
 8013198:	4b5a      	ldr	r3, [pc, #360]	; (8013304 <etharp_query+0x25c>)
 801319a:	f240 32cd 	movw	r2, #973	; 0x3cd
 801319e:	495d      	ldr	r1, [pc, #372]	; (8013314 <etharp_query+0x26c>)
 80131a0:	485a      	ldr	r0, [pc, #360]	; (801330c <etharp_query+0x264>)
 80131a2:	f001 fdf3 	bl	8014d8c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80131a6:	6a3b      	ldr	r3, [r7, #32]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d102      	bne.n	80131b2 <etharp_query+0x10a>
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d10c      	bne.n	80131cc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80131b2:	68b9      	ldr	r1, [r7, #8]
 80131b4:	68f8      	ldr	r0, [r7, #12]
 80131b6:	f000 f963 	bl	8013480 <etharp_request>
 80131ba:	4603      	mov	r3, r0
 80131bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d102      	bne.n	80131cc <etharp_query+0x124>
      return result;
 80131c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80131ca:	e096      	b.n	80132fa <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d106      	bne.n	80131e0 <etharp_query+0x138>
 80131d2:	4b4c      	ldr	r3, [pc, #304]	; (8013304 <etharp_query+0x25c>)
 80131d4:	f240 32e1 	movw	r2, #993	; 0x3e1
 80131d8:	494f      	ldr	r1, [pc, #316]	; (8013318 <etharp_query+0x270>)
 80131da:	484c      	ldr	r0, [pc, #304]	; (801330c <etharp_query+0x264>)
 80131dc:	f001 fdd6 	bl	8014d8c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80131e0:	7c7a      	ldrb	r2, [r7, #17]
 80131e2:	494b      	ldr	r1, [pc, #300]	; (8013310 <etharp_query+0x268>)
 80131e4:	4613      	mov	r3, r2
 80131e6:	005b      	lsls	r3, r3, #1
 80131e8:	4413      	add	r3, r2
 80131ea:	00db      	lsls	r3, r3, #3
 80131ec:	440b      	add	r3, r1
 80131ee:	3314      	adds	r3, #20
 80131f0:	781b      	ldrb	r3, [r3, #0]
 80131f2:	2b01      	cmp	r3, #1
 80131f4:	d917      	bls.n	8013226 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80131f6:	4a49      	ldr	r2, [pc, #292]	; (801331c <etharp_query+0x274>)
 80131f8:	7c7b      	ldrb	r3, [r7, #17]
 80131fa:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80131fc:	7c7a      	ldrb	r2, [r7, #17]
 80131fe:	4613      	mov	r3, r2
 8013200:	005b      	lsls	r3, r3, #1
 8013202:	4413      	add	r3, r2
 8013204:	00db      	lsls	r3, r3, #3
 8013206:	3308      	adds	r3, #8
 8013208:	4a41      	ldr	r2, [pc, #260]	; (8013310 <etharp_query+0x268>)
 801320a:	4413      	add	r3, r2
 801320c:	3304      	adds	r3, #4
 801320e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013212:	9200      	str	r2, [sp, #0]
 8013214:	697a      	ldr	r2, [r7, #20]
 8013216:	6879      	ldr	r1, [r7, #4]
 8013218:	68f8      	ldr	r0, [r7, #12]
 801321a:	f001 fd27 	bl	8014c6c <ethernet_output>
 801321e:	4603      	mov	r3, r0
 8013220:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013224:	e067      	b.n	80132f6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013226:	7c7a      	ldrb	r2, [r7, #17]
 8013228:	4939      	ldr	r1, [pc, #228]	; (8013310 <etharp_query+0x268>)
 801322a:	4613      	mov	r3, r2
 801322c:	005b      	lsls	r3, r3, #1
 801322e:	4413      	add	r3, r2
 8013230:	00db      	lsls	r3, r3, #3
 8013232:	440b      	add	r3, r1
 8013234:	3314      	adds	r3, #20
 8013236:	781b      	ldrb	r3, [r3, #0]
 8013238:	2b01      	cmp	r3, #1
 801323a:	d15c      	bne.n	80132f6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801323c:	2300      	movs	r3, #0
 801323e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013244:	e01c      	b.n	8013280 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8013246:	69fb      	ldr	r3, [r7, #28]
 8013248:	895a      	ldrh	r2, [r3, #10]
 801324a:	69fb      	ldr	r3, [r7, #28]
 801324c:	891b      	ldrh	r3, [r3, #8]
 801324e:	429a      	cmp	r2, r3
 8013250:	d10a      	bne.n	8013268 <etharp_query+0x1c0>
 8013252:	69fb      	ldr	r3, [r7, #28]
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d006      	beq.n	8013268 <etharp_query+0x1c0>
 801325a:	4b2a      	ldr	r3, [pc, #168]	; (8013304 <etharp_query+0x25c>)
 801325c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8013260:	492f      	ldr	r1, [pc, #188]	; (8013320 <etharp_query+0x278>)
 8013262:	482a      	ldr	r0, [pc, #168]	; (801330c <etharp_query+0x264>)
 8013264:	f001 fd92 	bl	8014d8c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8013268:	69fb      	ldr	r3, [r7, #28]
 801326a:	7b1b      	ldrb	r3, [r3, #12]
 801326c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013270:	2b00      	cmp	r3, #0
 8013272:	d002      	beq.n	801327a <etharp_query+0x1d2>
        copy_needed = 1;
 8013274:	2301      	movs	r3, #1
 8013276:	61bb      	str	r3, [r7, #24]
        break;
 8013278:	e005      	b.n	8013286 <etharp_query+0x1de>
      }
      p = p->next;
 801327a:	69fb      	ldr	r3, [r7, #28]
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013280:	69fb      	ldr	r3, [r7, #28]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d1df      	bne.n	8013246 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8013286:	69bb      	ldr	r3, [r7, #24]
 8013288:	2b00      	cmp	r3, #0
 801328a:	d007      	beq.n	801329c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801328c:	687a      	ldr	r2, [r7, #4]
 801328e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8013292:	200e      	movs	r0, #14
 8013294:	f7f8 fe34 	bl	800bf00 <pbuf_clone>
 8013298:	61f8      	str	r0, [r7, #28]
 801329a:	e004      	b.n	80132a6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80132a0:	69f8      	ldr	r0, [r7, #28]
 80132a2:	f7f8 fc61 	bl	800bb68 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80132a6:	69fb      	ldr	r3, [r7, #28]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d021      	beq.n	80132f0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80132ac:	7c7a      	ldrb	r2, [r7, #17]
 80132ae:	4918      	ldr	r1, [pc, #96]	; (8013310 <etharp_query+0x268>)
 80132b0:	4613      	mov	r3, r2
 80132b2:	005b      	lsls	r3, r3, #1
 80132b4:	4413      	add	r3, r2
 80132b6:	00db      	lsls	r3, r3, #3
 80132b8:	440b      	add	r3, r1
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d00a      	beq.n	80132d6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80132c0:	7c7a      	ldrb	r2, [r7, #17]
 80132c2:	4913      	ldr	r1, [pc, #76]	; (8013310 <etharp_query+0x268>)
 80132c4:	4613      	mov	r3, r2
 80132c6:	005b      	lsls	r3, r3, #1
 80132c8:	4413      	add	r3, r2
 80132ca:	00db      	lsls	r3, r3, #3
 80132cc:	440b      	add	r3, r1
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	4618      	mov	r0, r3
 80132d2:	f7f8 fba9 	bl	800ba28 <pbuf_free>
      }
      arp_table[i].q = p;
 80132d6:	7c7a      	ldrb	r2, [r7, #17]
 80132d8:	490d      	ldr	r1, [pc, #52]	; (8013310 <etharp_query+0x268>)
 80132da:	4613      	mov	r3, r2
 80132dc:	005b      	lsls	r3, r3, #1
 80132de:	4413      	add	r3, r2
 80132e0:	00db      	lsls	r3, r3, #3
 80132e2:	440b      	add	r3, r1
 80132e4:	69fa      	ldr	r2, [r7, #28]
 80132e6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80132e8:	2300      	movs	r3, #0
 80132ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80132ee:	e002      	b.n	80132f6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80132f0:	23ff      	movs	r3, #255	; 0xff
 80132f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80132f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80132fa:	4618      	mov	r0, r3
 80132fc:	3728      	adds	r7, #40	; 0x28
 80132fe:	46bd      	mov	sp, r7
 8013300:	bd80      	pop	{r7, pc}
 8013302:	bf00      	nop
 8013304:	08018220 	.word	0x08018220
 8013308:	080183cc 	.word	0x080183cc
 801330c:	08018298 	.word	0x08018298
 8013310:	24000134 	.word	0x24000134
 8013314:	080183dc 	.word	0x080183dc
 8013318:	080183c0 	.word	0x080183c0
 801331c:	24000224 	.word	0x24000224
 8013320:	08018404 	.word	0x08018404

08013324 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8013324:	b580      	push	{r7, lr}
 8013326:	b08a      	sub	sp, #40	; 0x28
 8013328:	af02      	add	r7, sp, #8
 801332a:	60f8      	str	r0, [r7, #12]
 801332c:	60b9      	str	r1, [r7, #8]
 801332e:	607a      	str	r2, [r7, #4]
 8013330:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8013332:	2300      	movs	r3, #0
 8013334:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d106      	bne.n	801334a <etharp_raw+0x26>
 801333c:	4b3a      	ldr	r3, [pc, #232]	; (8013428 <etharp_raw+0x104>)
 801333e:	f240 4257 	movw	r2, #1111	; 0x457
 8013342:	493a      	ldr	r1, [pc, #232]	; (801342c <etharp_raw+0x108>)
 8013344:	483a      	ldr	r0, [pc, #232]	; (8013430 <etharp_raw+0x10c>)
 8013346:	f001 fd21 	bl	8014d8c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801334a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801334e:	211c      	movs	r1, #28
 8013350:	200e      	movs	r0, #14
 8013352:	f7f8 f885 	bl	800b460 <pbuf_alloc>
 8013356:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8013358:	69bb      	ldr	r3, [r7, #24]
 801335a:	2b00      	cmp	r3, #0
 801335c:	d102      	bne.n	8013364 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801335e:	f04f 33ff 	mov.w	r3, #4294967295
 8013362:	e05d      	b.n	8013420 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8013364:	69bb      	ldr	r3, [r7, #24]
 8013366:	895b      	ldrh	r3, [r3, #10]
 8013368:	2b1b      	cmp	r3, #27
 801336a:	d806      	bhi.n	801337a <etharp_raw+0x56>
 801336c:	4b2e      	ldr	r3, [pc, #184]	; (8013428 <etharp_raw+0x104>)
 801336e:	f240 4262 	movw	r2, #1122	; 0x462
 8013372:	4930      	ldr	r1, [pc, #192]	; (8013434 <etharp_raw+0x110>)
 8013374:	482e      	ldr	r0, [pc, #184]	; (8013430 <etharp_raw+0x10c>)
 8013376:	f001 fd09 	bl	8014d8c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801337a:	69bb      	ldr	r3, [r7, #24]
 801337c:	685b      	ldr	r3, [r3, #4]
 801337e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8013380:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013382:	4618      	mov	r0, r3
 8013384:	f7f6 ff3a 	bl	800a1fc <lwip_htons>
 8013388:	4603      	mov	r3, r0
 801338a:	461a      	mov	r2, r3
 801338c:	697b      	ldr	r3, [r7, #20]
 801338e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013396:	2b06      	cmp	r3, #6
 8013398:	d006      	beq.n	80133a8 <etharp_raw+0x84>
 801339a:	4b23      	ldr	r3, [pc, #140]	; (8013428 <etharp_raw+0x104>)
 801339c:	f240 4269 	movw	r2, #1129	; 0x469
 80133a0:	4925      	ldr	r1, [pc, #148]	; (8013438 <etharp_raw+0x114>)
 80133a2:	4823      	ldr	r0, [pc, #140]	; (8013430 <etharp_raw+0x10c>)
 80133a4:	f001 fcf2 	bl	8014d8c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80133a8:	697b      	ldr	r3, [r7, #20]
 80133aa:	3308      	adds	r3, #8
 80133ac:	2206      	movs	r2, #6
 80133ae:	6839      	ldr	r1, [r7, #0]
 80133b0:	4618      	mov	r0, r3
 80133b2:	f001 fcd5 	bl	8014d60 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80133b6:	697b      	ldr	r3, [r7, #20]
 80133b8:	3312      	adds	r3, #18
 80133ba:	2206      	movs	r2, #6
 80133bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80133be:	4618      	mov	r0, r3
 80133c0:	f001 fcce 	bl	8014d60 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80133c4:	697b      	ldr	r3, [r7, #20]
 80133c6:	330e      	adds	r3, #14
 80133c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80133ca:	6812      	ldr	r2, [r2, #0]
 80133cc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80133ce:	697b      	ldr	r3, [r7, #20]
 80133d0:	3318      	adds	r3, #24
 80133d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80133d4:	6812      	ldr	r2, [r2, #0]
 80133d6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80133d8:	697b      	ldr	r3, [r7, #20]
 80133da:	2200      	movs	r2, #0
 80133dc:	701a      	strb	r2, [r3, #0]
 80133de:	2200      	movs	r2, #0
 80133e0:	f042 0201 	orr.w	r2, r2, #1
 80133e4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80133e6:	697b      	ldr	r3, [r7, #20]
 80133e8:	2200      	movs	r2, #0
 80133ea:	f042 0208 	orr.w	r2, r2, #8
 80133ee:	709a      	strb	r2, [r3, #2]
 80133f0:	2200      	movs	r2, #0
 80133f2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80133f4:	697b      	ldr	r3, [r7, #20]
 80133f6:	2206      	movs	r2, #6
 80133f8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80133fa:	697b      	ldr	r3, [r7, #20]
 80133fc:	2204      	movs	r2, #4
 80133fe:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013400:	f640 0306 	movw	r3, #2054	; 0x806
 8013404:	9300      	str	r3, [sp, #0]
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	68ba      	ldr	r2, [r7, #8]
 801340a:	69b9      	ldr	r1, [r7, #24]
 801340c:	68f8      	ldr	r0, [r7, #12]
 801340e:	f001 fc2d 	bl	8014c6c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8013412:	69b8      	ldr	r0, [r7, #24]
 8013414:	f7f8 fb08 	bl	800ba28 <pbuf_free>
  p = NULL;
 8013418:	2300      	movs	r3, #0
 801341a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801341c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013420:	4618      	mov	r0, r3
 8013422:	3720      	adds	r7, #32
 8013424:	46bd      	mov	sp, r7
 8013426:	bd80      	pop	{r7, pc}
 8013428:	08018220 	.word	0x08018220
 801342c:	08018370 	.word	0x08018370
 8013430:	08018298 	.word	0x08018298
 8013434:	08018420 	.word	0x08018420
 8013438:	08018454 	.word	0x08018454

0801343c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801343c:	b580      	push	{r7, lr}
 801343e:	b088      	sub	sp, #32
 8013440:	af04      	add	r7, sp, #16
 8013442:	60f8      	str	r0, [r7, #12]
 8013444:	60b9      	str	r1, [r7, #8]
 8013446:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013458:	2201      	movs	r2, #1
 801345a:	9203      	str	r2, [sp, #12]
 801345c:	68ba      	ldr	r2, [r7, #8]
 801345e:	9202      	str	r2, [sp, #8]
 8013460:	4a06      	ldr	r2, [pc, #24]	; (801347c <etharp_request_dst+0x40>)
 8013462:	9201      	str	r2, [sp, #4]
 8013464:	9300      	str	r3, [sp, #0]
 8013466:	4603      	mov	r3, r0
 8013468:	687a      	ldr	r2, [r7, #4]
 801346a:	68f8      	ldr	r0, [r7, #12]
 801346c:	f7ff ff5a 	bl	8013324 <etharp_raw>
 8013470:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8013472:	4618      	mov	r0, r3
 8013474:	3710      	adds	r7, #16
 8013476:	46bd      	mov	sp, r7
 8013478:	bd80      	pop	{r7, pc}
 801347a:	bf00      	nop
 801347c:	080197e4 	.word	0x080197e4

08013480 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013480:	b580      	push	{r7, lr}
 8013482:	b082      	sub	sp, #8
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]
 8013488:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801348a:	4a05      	ldr	r2, [pc, #20]	; (80134a0 <etharp_request+0x20>)
 801348c:	6839      	ldr	r1, [r7, #0]
 801348e:	6878      	ldr	r0, [r7, #4]
 8013490:	f7ff ffd4 	bl	801343c <etharp_request_dst>
 8013494:	4603      	mov	r3, r0
}
 8013496:	4618      	mov	r0, r3
 8013498:	3708      	adds	r7, #8
 801349a:	46bd      	mov	sp, r7
 801349c:	bd80      	pop	{r7, pc}
 801349e:	bf00      	nop
 80134a0:	080197dc 	.word	0x080197dc

080134a4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80134a4:	b580      	push	{r7, lr}
 80134a6:	b08e      	sub	sp, #56	; 0x38
 80134a8:	af04      	add	r7, sp, #16
 80134aa:	6078      	str	r0, [r7, #4]
 80134ac:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80134ae:	4b87      	ldr	r3, [pc, #540]	; (80136cc <icmp_input+0x228>)
 80134b0:	689b      	ldr	r3, [r3, #8]
 80134b2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80134b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134b6:	781b      	ldrb	r3, [r3, #0]
 80134b8:	f003 030f 	and.w	r3, r3, #15
 80134bc:	b2db      	uxtb	r3, r3
 80134be:	009b      	lsls	r3, r3, #2
 80134c0:	b2db      	uxtb	r3, r3
 80134c2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80134c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80134c6:	2b13      	cmp	r3, #19
 80134c8:	f240 80e8 	bls.w	801369c <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	895b      	ldrh	r3, [r3, #10]
 80134d0:	2b03      	cmp	r3, #3
 80134d2:	f240 80e5 	bls.w	80136a0 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	685b      	ldr	r3, [r3, #4]
 80134da:	781b      	ldrb	r3, [r3, #0]
 80134dc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80134e0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	f000 80d2 	beq.w	801368e <icmp_input+0x1ea>
 80134ea:	2b08      	cmp	r3, #8
 80134ec:	f040 80d2 	bne.w	8013694 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80134f0:	4b77      	ldr	r3, [pc, #476]	; (80136d0 <icmp_input+0x22c>)
 80134f2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80134f4:	4b75      	ldr	r3, [pc, #468]	; (80136cc <icmp_input+0x228>)
 80134f6:	695b      	ldr	r3, [r3, #20]
 80134f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80134fc:	2be0      	cmp	r3, #224	; 0xe0
 80134fe:	f000 80d6 	beq.w	80136ae <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8013502:	4b72      	ldr	r3, [pc, #456]	; (80136cc <icmp_input+0x228>)
 8013504:	695b      	ldr	r3, [r3, #20]
 8013506:	4a71      	ldr	r2, [pc, #452]	; (80136cc <icmp_input+0x228>)
 8013508:	6812      	ldr	r2, [r2, #0]
 801350a:	4611      	mov	r1, r2
 801350c:	4618      	mov	r0, r3
 801350e:	f000 fc13 	bl	8013d38 <ip4_addr_isbroadcast_u32>
 8013512:	4603      	mov	r3, r0
 8013514:	2b00      	cmp	r3, #0
 8013516:	f040 80cc 	bne.w	80136b2 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	891b      	ldrh	r3, [r3, #8]
 801351e:	2b07      	cmp	r3, #7
 8013520:	f240 80c0 	bls.w	80136a4 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8013524:	6878      	ldr	r0, [r7, #4]
 8013526:	f7f6 ff06 	bl	800a336 <inet_chksum_pbuf>
 801352a:	4603      	mov	r3, r0
 801352c:	2b00      	cmp	r3, #0
 801352e:	d003      	beq.n	8013538 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8013530:	6878      	ldr	r0, [r7, #4]
 8013532:	f7f8 fa79 	bl	800ba28 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8013536:	e0c5      	b.n	80136c4 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013538:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801353a:	330e      	adds	r3, #14
 801353c:	4619      	mov	r1, r3
 801353e:	6878      	ldr	r0, [r7, #4]
 8013540:	f7f8 f9dc 	bl	800b8fc <pbuf_add_header>
 8013544:	4603      	mov	r3, r0
 8013546:	2b00      	cmp	r3, #0
 8013548:	d04b      	beq.n	80135e2 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	891a      	ldrh	r2, [r3, #8]
 801354e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013550:	4413      	add	r3, r2
 8013552:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	891b      	ldrh	r3, [r3, #8]
 8013558:	8b7a      	ldrh	r2, [r7, #26]
 801355a:	429a      	cmp	r2, r3
 801355c:	f0c0 80ab 	bcc.w	80136b6 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013560:	8b7b      	ldrh	r3, [r7, #26]
 8013562:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013566:	4619      	mov	r1, r3
 8013568:	200e      	movs	r0, #14
 801356a:	f7f7 ff79 	bl	800b460 <pbuf_alloc>
 801356e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013570:	697b      	ldr	r3, [r7, #20]
 8013572:	2b00      	cmp	r3, #0
 8013574:	f000 80a1 	beq.w	80136ba <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013578:	697b      	ldr	r3, [r7, #20]
 801357a:	895b      	ldrh	r3, [r3, #10]
 801357c:	461a      	mov	r2, r3
 801357e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013580:	3308      	adds	r3, #8
 8013582:	429a      	cmp	r2, r3
 8013584:	d203      	bcs.n	801358e <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8013586:	6978      	ldr	r0, [r7, #20]
 8013588:	f7f8 fa4e 	bl	800ba28 <pbuf_free>
          goto icmperr;
 801358c:	e096      	b.n	80136bc <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801358e:	697b      	ldr	r3, [r7, #20]
 8013590:	685b      	ldr	r3, [r3, #4]
 8013592:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013594:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013596:	4618      	mov	r0, r3
 8013598:	f001 fbe2 	bl	8014d60 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801359c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801359e:	4619      	mov	r1, r3
 80135a0:	6978      	ldr	r0, [r7, #20]
 80135a2:	f7f8 f9bb 	bl	800b91c <pbuf_remove_header>
 80135a6:	4603      	mov	r3, r0
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d009      	beq.n	80135c0 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80135ac:	4b49      	ldr	r3, [pc, #292]	; (80136d4 <icmp_input+0x230>)
 80135ae:	22b6      	movs	r2, #182	; 0xb6
 80135b0:	4949      	ldr	r1, [pc, #292]	; (80136d8 <icmp_input+0x234>)
 80135b2:	484a      	ldr	r0, [pc, #296]	; (80136dc <icmp_input+0x238>)
 80135b4:	f001 fbea 	bl	8014d8c <iprintf>
          pbuf_free(r);
 80135b8:	6978      	ldr	r0, [r7, #20]
 80135ba:	f7f8 fa35 	bl	800ba28 <pbuf_free>
          goto icmperr;
 80135be:	e07d      	b.n	80136bc <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80135c0:	6879      	ldr	r1, [r7, #4]
 80135c2:	6978      	ldr	r0, [r7, #20]
 80135c4:	f7f8 fb58 	bl	800bc78 <pbuf_copy>
 80135c8:	4603      	mov	r3, r0
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d003      	beq.n	80135d6 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80135ce:	6978      	ldr	r0, [r7, #20]
 80135d0:	f7f8 fa2a 	bl	800ba28 <pbuf_free>
          goto icmperr;
 80135d4:	e072      	b.n	80136bc <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 80135d6:	6878      	ldr	r0, [r7, #4]
 80135d8:	f7f8 fa26 	bl	800ba28 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80135dc:	697b      	ldr	r3, [r7, #20]
 80135de:	607b      	str	r3, [r7, #4]
 80135e0:	e00f      	b.n	8013602 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80135e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80135e4:	330e      	adds	r3, #14
 80135e6:	4619      	mov	r1, r3
 80135e8:	6878      	ldr	r0, [r7, #4]
 80135ea:	f7f8 f997 	bl	800b91c <pbuf_remove_header>
 80135ee:	4603      	mov	r3, r0
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d006      	beq.n	8013602 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80135f4:	4b37      	ldr	r3, [pc, #220]	; (80136d4 <icmp_input+0x230>)
 80135f6:	22c7      	movs	r2, #199	; 0xc7
 80135f8:	4939      	ldr	r1, [pc, #228]	; (80136e0 <icmp_input+0x23c>)
 80135fa:	4838      	ldr	r0, [pc, #224]	; (80136dc <icmp_input+0x238>)
 80135fc:	f001 fbc6 	bl	8014d8c <iprintf>
          goto icmperr;
 8013600:	e05c      	b.n	80136bc <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	685b      	ldr	r3, [r3, #4]
 8013606:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8013608:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801360a:	4619      	mov	r1, r3
 801360c:	6878      	ldr	r0, [r7, #4]
 801360e:	f7f8 f975 	bl	800b8fc <pbuf_add_header>
 8013612:	4603      	mov	r3, r0
 8013614:	2b00      	cmp	r3, #0
 8013616:	d13c      	bne.n	8013692 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	685b      	ldr	r3, [r3, #4]
 801361c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801361e:	69fb      	ldr	r3, [r7, #28]
 8013620:	681a      	ldr	r2, [r3, #0]
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8013626:	4b29      	ldr	r3, [pc, #164]	; (80136cc <icmp_input+0x228>)
 8013628:	691a      	ldr	r2, [r3, #16]
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801362e:	693b      	ldr	r3, [r7, #16]
 8013630:	2200      	movs	r2, #0
 8013632:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8013634:	693b      	ldr	r3, [r7, #16]
 8013636:	885b      	ldrh	r3, [r3, #2]
 8013638:	b29b      	uxth	r3, r3
 801363a:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801363e:	4293      	cmp	r3, r2
 8013640:	d907      	bls.n	8013652 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8013642:	693b      	ldr	r3, [r7, #16]
 8013644:	885b      	ldrh	r3, [r3, #2]
 8013646:	b29b      	uxth	r3, r3
 8013648:	3309      	adds	r3, #9
 801364a:	b29a      	uxth	r2, r3
 801364c:	693b      	ldr	r3, [r7, #16]
 801364e:	805a      	strh	r2, [r3, #2]
 8013650:	e006      	b.n	8013660 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8013652:	693b      	ldr	r3, [r7, #16]
 8013654:	885b      	ldrh	r3, [r3, #2]
 8013656:	b29b      	uxth	r3, r3
 8013658:	3308      	adds	r3, #8
 801365a:	b29a      	uxth	r2, r3
 801365c:	693b      	ldr	r3, [r7, #16]
 801365e:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	22ff      	movs	r2, #255	; 0xff
 8013664:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	2200      	movs	r2, #0
 801366a:	729a      	strb	r2, [r3, #10]
 801366c:	2200      	movs	r2, #0
 801366e:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8013670:	683b      	ldr	r3, [r7, #0]
 8013672:	9302      	str	r3, [sp, #8]
 8013674:	2301      	movs	r3, #1
 8013676:	9301      	str	r3, [sp, #4]
 8013678:	2300      	movs	r3, #0
 801367a:	9300      	str	r3, [sp, #0]
 801367c:	23ff      	movs	r3, #255	; 0xff
 801367e:	2200      	movs	r2, #0
 8013680:	69f9      	ldr	r1, [r7, #28]
 8013682:	6878      	ldr	r0, [r7, #4]
 8013684:	f000 fa80 	bl	8013b88 <ip4_output_if>
 8013688:	4603      	mov	r3, r0
 801368a:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801368c:	e001      	b.n	8013692 <icmp_input+0x1ee>
      break;
 801368e:	bf00      	nop
 8013690:	e000      	b.n	8013694 <icmp_input+0x1f0>
      break;
 8013692:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8013694:	6878      	ldr	r0, [r7, #4]
 8013696:	f7f8 f9c7 	bl	800ba28 <pbuf_free>
  return;
 801369a:	e013      	b.n	80136c4 <icmp_input+0x220>
    goto lenerr;
 801369c:	bf00      	nop
 801369e:	e002      	b.n	80136a6 <icmp_input+0x202>
    goto lenerr;
 80136a0:	bf00      	nop
 80136a2:	e000      	b.n	80136a6 <icmp_input+0x202>
        goto lenerr;
 80136a4:	bf00      	nop
lenerr:
  pbuf_free(p);
 80136a6:	6878      	ldr	r0, [r7, #4]
 80136a8:	f7f8 f9be 	bl	800ba28 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80136ac:	e00a      	b.n	80136c4 <icmp_input+0x220>
        goto icmperr;
 80136ae:	bf00      	nop
 80136b0:	e004      	b.n	80136bc <icmp_input+0x218>
        goto icmperr;
 80136b2:	bf00      	nop
 80136b4:	e002      	b.n	80136bc <icmp_input+0x218>
          goto icmperr;
 80136b6:	bf00      	nop
 80136b8:	e000      	b.n	80136bc <icmp_input+0x218>
          goto icmperr;
 80136ba:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80136bc:	6878      	ldr	r0, [r7, #4]
 80136be:	f7f8 f9b3 	bl	800ba28 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80136c2:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80136c4:	3728      	adds	r7, #40	; 0x28
 80136c6:	46bd      	mov	sp, r7
 80136c8:	bd80      	pop	{r7, pc}
 80136ca:	bf00      	nop
 80136cc:	24000714 	.word	0x24000714
 80136d0:	24000728 	.word	0x24000728
 80136d4:	08018498 	.word	0x08018498
 80136d8:	080184d0 	.word	0x080184d0
 80136dc:	08018508 	.word	0x08018508
 80136e0:	08018530 	.word	0x08018530

080136e4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80136e4:	b580      	push	{r7, lr}
 80136e6:	b082      	sub	sp, #8
 80136e8:	af00      	add	r7, sp, #0
 80136ea:	6078      	str	r0, [r7, #4]
 80136ec:	460b      	mov	r3, r1
 80136ee:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80136f0:	78fb      	ldrb	r3, [r7, #3]
 80136f2:	461a      	mov	r2, r3
 80136f4:	2103      	movs	r1, #3
 80136f6:	6878      	ldr	r0, [r7, #4]
 80136f8:	f000 f814 	bl	8013724 <icmp_send_response>
}
 80136fc:	bf00      	nop
 80136fe:	3708      	adds	r7, #8
 8013700:	46bd      	mov	sp, r7
 8013702:	bd80      	pop	{r7, pc}

08013704 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013704:	b580      	push	{r7, lr}
 8013706:	b082      	sub	sp, #8
 8013708:	af00      	add	r7, sp, #0
 801370a:	6078      	str	r0, [r7, #4]
 801370c:	460b      	mov	r3, r1
 801370e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013710:	78fb      	ldrb	r3, [r7, #3]
 8013712:	461a      	mov	r2, r3
 8013714:	210b      	movs	r1, #11
 8013716:	6878      	ldr	r0, [r7, #4]
 8013718:	f000 f804 	bl	8013724 <icmp_send_response>
}
 801371c:	bf00      	nop
 801371e:	3708      	adds	r7, #8
 8013720:	46bd      	mov	sp, r7
 8013722:	bd80      	pop	{r7, pc}

08013724 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013724:	b580      	push	{r7, lr}
 8013726:	b08c      	sub	sp, #48	; 0x30
 8013728:	af04      	add	r7, sp, #16
 801372a:	6078      	str	r0, [r7, #4]
 801372c:	460b      	mov	r3, r1
 801372e:	70fb      	strb	r3, [r7, #3]
 8013730:	4613      	mov	r3, r2
 8013732:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013734:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013738:	2124      	movs	r1, #36	; 0x24
 801373a:	2022      	movs	r0, #34	; 0x22
 801373c:	f7f7 fe90 	bl	800b460 <pbuf_alloc>
 8013740:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8013742:	69fb      	ldr	r3, [r7, #28]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d056      	beq.n	80137f6 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013748:	69fb      	ldr	r3, [r7, #28]
 801374a:	895b      	ldrh	r3, [r3, #10]
 801374c:	2b23      	cmp	r3, #35	; 0x23
 801374e:	d806      	bhi.n	801375e <icmp_send_response+0x3a>
 8013750:	4b2b      	ldr	r3, [pc, #172]	; (8013800 <icmp_send_response+0xdc>)
 8013752:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8013756:	492b      	ldr	r1, [pc, #172]	; (8013804 <icmp_send_response+0xe0>)
 8013758:	482b      	ldr	r0, [pc, #172]	; (8013808 <icmp_send_response+0xe4>)
 801375a:	f001 fb17 	bl	8014d8c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	685b      	ldr	r3, [r3, #4]
 8013762:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013764:	69fb      	ldr	r3, [r7, #28]
 8013766:	685b      	ldr	r3, [r3, #4]
 8013768:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801376a:	697b      	ldr	r3, [r7, #20]
 801376c:	78fa      	ldrb	r2, [r7, #3]
 801376e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013770:	697b      	ldr	r3, [r7, #20]
 8013772:	78ba      	ldrb	r2, [r7, #2]
 8013774:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8013776:	697b      	ldr	r3, [r7, #20]
 8013778:	2200      	movs	r2, #0
 801377a:	711a      	strb	r2, [r3, #4]
 801377c:	2200      	movs	r2, #0
 801377e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013780:	697b      	ldr	r3, [r7, #20]
 8013782:	2200      	movs	r2, #0
 8013784:	719a      	strb	r2, [r3, #6]
 8013786:	2200      	movs	r2, #0
 8013788:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801378a:	69fb      	ldr	r3, [r7, #28]
 801378c:	685b      	ldr	r3, [r3, #4]
 801378e:	f103 0008 	add.w	r0, r3, #8
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	685b      	ldr	r3, [r3, #4]
 8013796:	221c      	movs	r2, #28
 8013798:	4619      	mov	r1, r3
 801379a:	f001 fae1 	bl	8014d60 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801379e:	69bb      	ldr	r3, [r7, #24]
 80137a0:	68db      	ldr	r3, [r3, #12]
 80137a2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80137a4:	f107 030c 	add.w	r3, r7, #12
 80137a8:	4618      	mov	r0, r3
 80137aa:	f000 f82f 	bl	801380c <ip4_route>
 80137ae:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80137b0:	693b      	ldr	r3, [r7, #16]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d01b      	beq.n	80137ee <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80137b6:	697b      	ldr	r3, [r7, #20]
 80137b8:	2200      	movs	r2, #0
 80137ba:	709a      	strb	r2, [r3, #2]
 80137bc:	2200      	movs	r2, #0
 80137be:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80137c0:	69fb      	ldr	r3, [r7, #28]
 80137c2:	895b      	ldrh	r3, [r3, #10]
 80137c4:	4619      	mov	r1, r3
 80137c6:	6978      	ldr	r0, [r7, #20]
 80137c8:	f7f6 fda3 	bl	800a312 <inet_chksum>
 80137cc:	4603      	mov	r3, r0
 80137ce:	461a      	mov	r2, r3
 80137d0:	697b      	ldr	r3, [r7, #20]
 80137d2:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80137d4:	f107 020c 	add.w	r2, r7, #12
 80137d8:	693b      	ldr	r3, [r7, #16]
 80137da:	9302      	str	r3, [sp, #8]
 80137dc:	2301      	movs	r3, #1
 80137de:	9301      	str	r3, [sp, #4]
 80137e0:	2300      	movs	r3, #0
 80137e2:	9300      	str	r3, [sp, #0]
 80137e4:	23ff      	movs	r3, #255	; 0xff
 80137e6:	2100      	movs	r1, #0
 80137e8:	69f8      	ldr	r0, [r7, #28]
 80137ea:	f000 f9cd 	bl	8013b88 <ip4_output_if>
  }
  pbuf_free(q);
 80137ee:	69f8      	ldr	r0, [r7, #28]
 80137f0:	f7f8 f91a 	bl	800ba28 <pbuf_free>
 80137f4:	e000      	b.n	80137f8 <icmp_send_response+0xd4>
    return;
 80137f6:	bf00      	nop
}
 80137f8:	3720      	adds	r7, #32
 80137fa:	46bd      	mov	sp, r7
 80137fc:	bd80      	pop	{r7, pc}
 80137fe:	bf00      	nop
 8013800:	08018498 	.word	0x08018498
 8013804:	08018564 	.word	0x08018564
 8013808:	08018508 	.word	0x08018508

0801380c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801380c:	b480      	push	{r7}
 801380e:	b085      	sub	sp, #20
 8013810:	af00      	add	r7, sp, #0
 8013812:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013814:	4b33      	ldr	r3, [pc, #204]	; (80138e4 <ip4_route+0xd8>)
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	60fb      	str	r3, [r7, #12]
 801381a:	e036      	b.n	801388a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013822:	f003 0301 	and.w	r3, r3, #1
 8013826:	b2db      	uxtb	r3, r3
 8013828:	2b00      	cmp	r3, #0
 801382a:	d02b      	beq.n	8013884 <ip4_route+0x78>
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013832:	089b      	lsrs	r3, r3, #2
 8013834:	f003 0301 	and.w	r3, r3, #1
 8013838:	b2db      	uxtb	r3, r3
 801383a:	2b00      	cmp	r3, #0
 801383c:	d022      	beq.n	8013884 <ip4_route+0x78>
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	3304      	adds	r3, #4
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d01d      	beq.n	8013884 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	681a      	ldr	r2, [r3, #0]
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	3304      	adds	r3, #4
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	405a      	eors	r2, r3
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	3308      	adds	r3, #8
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	4013      	ands	r3, r2
 801385c:	2b00      	cmp	r3, #0
 801385e:	d101      	bne.n	8013864 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	e038      	b.n	80138d6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801386a:	f003 0302 	and.w	r3, r3, #2
 801386e:	2b00      	cmp	r3, #0
 8013870:	d108      	bne.n	8013884 <ip4_route+0x78>
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	681a      	ldr	r2, [r3, #0]
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	330c      	adds	r3, #12
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	429a      	cmp	r2, r3
 801387e:	d101      	bne.n	8013884 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	e028      	b.n	80138d6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	60fb      	str	r3, [r7, #12]
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d1c5      	bne.n	801381c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013890:	4b15      	ldr	r3, [pc, #84]	; (80138e8 <ip4_route+0xdc>)
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d01a      	beq.n	80138ce <ip4_route+0xc2>
 8013898:	4b13      	ldr	r3, [pc, #76]	; (80138e8 <ip4_route+0xdc>)
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80138a0:	f003 0301 	and.w	r3, r3, #1
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d012      	beq.n	80138ce <ip4_route+0xc2>
 80138a8:	4b0f      	ldr	r3, [pc, #60]	; (80138e8 <ip4_route+0xdc>)
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80138b0:	f003 0304 	and.w	r3, r3, #4
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d00a      	beq.n	80138ce <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80138b8:	4b0b      	ldr	r3, [pc, #44]	; (80138e8 <ip4_route+0xdc>)
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	3304      	adds	r3, #4
 80138be:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d004      	beq.n	80138ce <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	b2db      	uxtb	r3, r3
 80138ca:	2b7f      	cmp	r3, #127	; 0x7f
 80138cc:	d101      	bne.n	80138d2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80138ce:	2300      	movs	r3, #0
 80138d0:	e001      	b.n	80138d6 <ip4_route+0xca>
  }

  return netif_default;
 80138d2:	4b05      	ldr	r3, [pc, #20]	; (80138e8 <ip4_route+0xdc>)
 80138d4:	681b      	ldr	r3, [r3, #0]
}
 80138d6:	4618      	mov	r0, r3
 80138d8:	3714      	adds	r7, #20
 80138da:	46bd      	mov	sp, r7
 80138dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138e0:	4770      	bx	lr
 80138e2:	bf00      	nop
 80138e4:	240035f4 	.word	0x240035f4
 80138e8:	240035f8 	.word	0x240035f8

080138ec <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80138ec:	b580      	push	{r7, lr}
 80138ee:	b082      	sub	sp, #8
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80138fa:	f003 0301 	and.w	r3, r3, #1
 80138fe:	b2db      	uxtb	r3, r3
 8013900:	2b00      	cmp	r3, #0
 8013902:	d016      	beq.n	8013932 <ip4_input_accept+0x46>
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	3304      	adds	r3, #4
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d011      	beq.n	8013932 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801390e:	4b0b      	ldr	r3, [pc, #44]	; (801393c <ip4_input_accept+0x50>)
 8013910:	695a      	ldr	r2, [r3, #20]
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	3304      	adds	r3, #4
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	429a      	cmp	r2, r3
 801391a:	d008      	beq.n	801392e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801391c:	4b07      	ldr	r3, [pc, #28]	; (801393c <ip4_input_accept+0x50>)
 801391e:	695b      	ldr	r3, [r3, #20]
 8013920:	6879      	ldr	r1, [r7, #4]
 8013922:	4618      	mov	r0, r3
 8013924:	f000 fa08 	bl	8013d38 <ip4_addr_isbroadcast_u32>
 8013928:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801392a:	2b00      	cmp	r3, #0
 801392c:	d001      	beq.n	8013932 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801392e:	2301      	movs	r3, #1
 8013930:	e000      	b.n	8013934 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8013932:	2300      	movs	r3, #0
}
 8013934:	4618      	mov	r0, r3
 8013936:	3708      	adds	r7, #8
 8013938:	46bd      	mov	sp, r7
 801393a:	bd80      	pop	{r7, pc}
 801393c:	24000714 	.word	0x24000714

08013940 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8013940:	b580      	push	{r7, lr}
 8013942:	b086      	sub	sp, #24
 8013944:	af00      	add	r7, sp, #0
 8013946:	6078      	str	r0, [r7, #4]
 8013948:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	685b      	ldr	r3, [r3, #4]
 801394e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8013950:	697b      	ldr	r3, [r7, #20]
 8013952:	781b      	ldrb	r3, [r3, #0]
 8013954:	091b      	lsrs	r3, r3, #4
 8013956:	b2db      	uxtb	r3, r3
 8013958:	2b04      	cmp	r3, #4
 801395a:	d004      	beq.n	8013966 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801395c:	6878      	ldr	r0, [r7, #4]
 801395e:	f7f8 f863 	bl	800ba28 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8013962:	2300      	movs	r3, #0
 8013964:	e107      	b.n	8013b76 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8013966:	697b      	ldr	r3, [r7, #20]
 8013968:	781b      	ldrb	r3, [r3, #0]
 801396a:	f003 030f 	and.w	r3, r3, #15
 801396e:	b2db      	uxtb	r3, r3
 8013970:	009b      	lsls	r3, r3, #2
 8013972:	b2db      	uxtb	r3, r3
 8013974:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013976:	697b      	ldr	r3, [r7, #20]
 8013978:	885b      	ldrh	r3, [r3, #2]
 801397a:	b29b      	uxth	r3, r3
 801397c:	4618      	mov	r0, r3
 801397e:	f7f6 fc3d 	bl	800a1fc <lwip_htons>
 8013982:	4603      	mov	r3, r0
 8013984:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	891b      	ldrh	r3, [r3, #8]
 801398a:	89ba      	ldrh	r2, [r7, #12]
 801398c:	429a      	cmp	r2, r3
 801398e:	d204      	bcs.n	801399a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8013990:	89bb      	ldrh	r3, [r7, #12]
 8013992:	4619      	mov	r1, r3
 8013994:	6878      	ldr	r0, [r7, #4]
 8013996:	f7f7 fec1 	bl	800b71c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	895b      	ldrh	r3, [r3, #10]
 801399e:	89fa      	ldrh	r2, [r7, #14]
 80139a0:	429a      	cmp	r2, r3
 80139a2:	d807      	bhi.n	80139b4 <ip4_input+0x74>
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	891b      	ldrh	r3, [r3, #8]
 80139a8:	89ba      	ldrh	r2, [r7, #12]
 80139aa:	429a      	cmp	r2, r3
 80139ac:	d802      	bhi.n	80139b4 <ip4_input+0x74>
 80139ae:	89fb      	ldrh	r3, [r7, #14]
 80139b0:	2b13      	cmp	r3, #19
 80139b2:	d804      	bhi.n	80139be <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80139b4:	6878      	ldr	r0, [r7, #4]
 80139b6:	f7f8 f837 	bl	800ba28 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80139ba:	2300      	movs	r3, #0
 80139bc:	e0db      	b.n	8013b76 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80139be:	697b      	ldr	r3, [r7, #20]
 80139c0:	691b      	ldr	r3, [r3, #16]
 80139c2:	4a6f      	ldr	r2, [pc, #444]	; (8013b80 <ip4_input+0x240>)
 80139c4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80139c6:	697b      	ldr	r3, [r7, #20]
 80139c8:	68db      	ldr	r3, [r3, #12]
 80139ca:	4a6d      	ldr	r2, [pc, #436]	; (8013b80 <ip4_input+0x240>)
 80139cc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80139ce:	4b6c      	ldr	r3, [pc, #432]	; (8013b80 <ip4_input+0x240>)
 80139d0:	695b      	ldr	r3, [r3, #20]
 80139d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80139d6:	2be0      	cmp	r3, #224	; 0xe0
 80139d8:	d112      	bne.n	8013a00 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80139da:	683b      	ldr	r3, [r7, #0]
 80139dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80139e0:	f003 0301 	and.w	r3, r3, #1
 80139e4:	b2db      	uxtb	r3, r3
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d007      	beq.n	80139fa <ip4_input+0xba>
 80139ea:	683b      	ldr	r3, [r7, #0]
 80139ec:	3304      	adds	r3, #4
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d002      	beq.n	80139fa <ip4_input+0xba>
      netif = inp;
 80139f4:	683b      	ldr	r3, [r7, #0]
 80139f6:	613b      	str	r3, [r7, #16]
 80139f8:	e02a      	b.n	8013a50 <ip4_input+0x110>
    } else {
      netif = NULL;
 80139fa:	2300      	movs	r3, #0
 80139fc:	613b      	str	r3, [r7, #16]
 80139fe:	e027      	b.n	8013a50 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013a00:	6838      	ldr	r0, [r7, #0]
 8013a02:	f7ff ff73 	bl	80138ec <ip4_input_accept>
 8013a06:	4603      	mov	r3, r0
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d002      	beq.n	8013a12 <ip4_input+0xd2>
      netif = inp;
 8013a0c:	683b      	ldr	r3, [r7, #0]
 8013a0e:	613b      	str	r3, [r7, #16]
 8013a10:	e01e      	b.n	8013a50 <ip4_input+0x110>
    } else {
      netif = NULL;
 8013a12:	2300      	movs	r3, #0
 8013a14:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8013a16:	4b5a      	ldr	r3, [pc, #360]	; (8013b80 <ip4_input+0x240>)
 8013a18:	695b      	ldr	r3, [r3, #20]
 8013a1a:	b2db      	uxtb	r3, r3
 8013a1c:	2b7f      	cmp	r3, #127	; 0x7f
 8013a1e:	d017      	beq.n	8013a50 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8013a20:	4b58      	ldr	r3, [pc, #352]	; (8013b84 <ip4_input+0x244>)
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	613b      	str	r3, [r7, #16]
 8013a26:	e00e      	b.n	8013a46 <ip4_input+0x106>
          if (netif == inp) {
 8013a28:	693a      	ldr	r2, [r7, #16]
 8013a2a:	683b      	ldr	r3, [r7, #0]
 8013a2c:	429a      	cmp	r2, r3
 8013a2e:	d006      	beq.n	8013a3e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8013a30:	6938      	ldr	r0, [r7, #16]
 8013a32:	f7ff ff5b 	bl	80138ec <ip4_input_accept>
 8013a36:	4603      	mov	r3, r0
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d108      	bne.n	8013a4e <ip4_input+0x10e>
 8013a3c:	e000      	b.n	8013a40 <ip4_input+0x100>
            continue;
 8013a3e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8013a40:	693b      	ldr	r3, [r7, #16]
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	613b      	str	r3, [r7, #16]
 8013a46:	693b      	ldr	r3, [r7, #16]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d1ed      	bne.n	8013a28 <ip4_input+0xe8>
 8013a4c:	e000      	b.n	8013a50 <ip4_input+0x110>
            break;
 8013a4e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013a50:	4b4b      	ldr	r3, [pc, #300]	; (8013b80 <ip4_input+0x240>)
 8013a52:	691b      	ldr	r3, [r3, #16]
 8013a54:	6839      	ldr	r1, [r7, #0]
 8013a56:	4618      	mov	r0, r3
 8013a58:	f000 f96e 	bl	8013d38 <ip4_addr_isbroadcast_u32>
 8013a5c:	4603      	mov	r3, r0
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d105      	bne.n	8013a6e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8013a62:	4b47      	ldr	r3, [pc, #284]	; (8013b80 <ip4_input+0x240>)
 8013a64:	691b      	ldr	r3, [r3, #16]
 8013a66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013a6a:	2be0      	cmp	r3, #224	; 0xe0
 8013a6c:	d104      	bne.n	8013a78 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8013a6e:	6878      	ldr	r0, [r7, #4]
 8013a70:	f7f7 ffda 	bl	800ba28 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013a74:	2300      	movs	r3, #0
 8013a76:	e07e      	b.n	8013b76 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013a78:	693b      	ldr	r3, [r7, #16]
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d104      	bne.n	8013a88 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8013a7e:	6878      	ldr	r0, [r7, #4]
 8013a80:	f7f7 ffd2 	bl	800ba28 <pbuf_free>
    return ERR_OK;
 8013a84:	2300      	movs	r3, #0
 8013a86:	e076      	b.n	8013b76 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013a88:	697b      	ldr	r3, [r7, #20]
 8013a8a:	88db      	ldrh	r3, [r3, #6]
 8013a8c:	b29b      	uxth	r3, r3
 8013a8e:	461a      	mov	r2, r3
 8013a90:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8013a94:	4013      	ands	r3, r2
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d00b      	beq.n	8013ab2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8013a9a:	6878      	ldr	r0, [r7, #4]
 8013a9c:	f000 fd24 	bl	80144e8 <ip4_reass>
 8013aa0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d101      	bne.n	8013aac <ip4_input+0x16c>
      return ERR_OK;
 8013aa8:	2300      	movs	r3, #0
 8013aaa:	e064      	b.n	8013b76 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	685b      	ldr	r3, [r3, #4]
 8013ab0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8013ab2:	4a33      	ldr	r2, [pc, #204]	; (8013b80 <ip4_input+0x240>)
 8013ab4:	693b      	ldr	r3, [r7, #16]
 8013ab6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013ab8:	4a31      	ldr	r2, [pc, #196]	; (8013b80 <ip4_input+0x240>)
 8013aba:	683b      	ldr	r3, [r7, #0]
 8013abc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013abe:	4a30      	ldr	r2, [pc, #192]	; (8013b80 <ip4_input+0x240>)
 8013ac0:	697b      	ldr	r3, [r7, #20]
 8013ac2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013ac4:	697b      	ldr	r3, [r7, #20]
 8013ac6:	781b      	ldrb	r3, [r3, #0]
 8013ac8:	f003 030f 	and.w	r3, r3, #15
 8013acc:	b2db      	uxtb	r3, r3
 8013ace:	009b      	lsls	r3, r3, #2
 8013ad0:	b2db      	uxtb	r3, r3
 8013ad2:	b29a      	uxth	r2, r3
 8013ad4:	4b2a      	ldr	r3, [pc, #168]	; (8013b80 <ip4_input+0x240>)
 8013ad6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013ad8:	89fb      	ldrh	r3, [r7, #14]
 8013ada:	4619      	mov	r1, r3
 8013adc:	6878      	ldr	r0, [r7, #4]
 8013ade:	f7f7 ff1d 	bl	800b91c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8013ae2:	697b      	ldr	r3, [r7, #20]
 8013ae4:	7a5b      	ldrb	r3, [r3, #9]
 8013ae6:	2b11      	cmp	r3, #17
 8013ae8:	d006      	beq.n	8013af8 <ip4_input+0x1b8>
 8013aea:	2b11      	cmp	r3, #17
 8013aec:	dc13      	bgt.n	8013b16 <ip4_input+0x1d6>
 8013aee:	2b01      	cmp	r3, #1
 8013af0:	d00c      	beq.n	8013b0c <ip4_input+0x1cc>
 8013af2:	2b06      	cmp	r3, #6
 8013af4:	d005      	beq.n	8013b02 <ip4_input+0x1c2>
 8013af6:	e00e      	b.n	8013b16 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013af8:	6839      	ldr	r1, [r7, #0]
 8013afa:	6878      	ldr	r0, [r7, #4]
 8013afc:	f7fe fc42 	bl	8012384 <udp_input>
        break;
 8013b00:	e026      	b.n	8013b50 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013b02:	6839      	ldr	r1, [r7, #0]
 8013b04:	6878      	ldr	r0, [r7, #4]
 8013b06:	f7fa f867 	bl	800dbd8 <tcp_input>
        break;
 8013b0a:	e021      	b.n	8013b50 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8013b0c:	6839      	ldr	r1, [r7, #0]
 8013b0e:	6878      	ldr	r0, [r7, #4]
 8013b10:	f7ff fcc8 	bl	80134a4 <icmp_input>
        break;
 8013b14:	e01c      	b.n	8013b50 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013b16:	4b1a      	ldr	r3, [pc, #104]	; (8013b80 <ip4_input+0x240>)
 8013b18:	695b      	ldr	r3, [r3, #20]
 8013b1a:	6939      	ldr	r1, [r7, #16]
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	f000 f90b 	bl	8013d38 <ip4_addr_isbroadcast_u32>
 8013b22:	4603      	mov	r3, r0
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d10f      	bne.n	8013b48 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013b28:	4b15      	ldr	r3, [pc, #84]	; (8013b80 <ip4_input+0x240>)
 8013b2a:	695b      	ldr	r3, [r3, #20]
 8013b2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013b30:	2be0      	cmp	r3, #224	; 0xe0
 8013b32:	d009      	beq.n	8013b48 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013b34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013b38:	4619      	mov	r1, r3
 8013b3a:	6878      	ldr	r0, [r7, #4]
 8013b3c:	f7f7 ff61 	bl	800ba02 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013b40:	2102      	movs	r1, #2
 8013b42:	6878      	ldr	r0, [r7, #4]
 8013b44:	f7ff fdce 	bl	80136e4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013b48:	6878      	ldr	r0, [r7, #4]
 8013b4a:	f7f7 ff6d 	bl	800ba28 <pbuf_free>
        break;
 8013b4e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013b50:	4b0b      	ldr	r3, [pc, #44]	; (8013b80 <ip4_input+0x240>)
 8013b52:	2200      	movs	r2, #0
 8013b54:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013b56:	4b0a      	ldr	r3, [pc, #40]	; (8013b80 <ip4_input+0x240>)
 8013b58:	2200      	movs	r2, #0
 8013b5a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8013b5c:	4b08      	ldr	r3, [pc, #32]	; (8013b80 <ip4_input+0x240>)
 8013b5e:	2200      	movs	r2, #0
 8013b60:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013b62:	4b07      	ldr	r3, [pc, #28]	; (8013b80 <ip4_input+0x240>)
 8013b64:	2200      	movs	r2, #0
 8013b66:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013b68:	4b05      	ldr	r3, [pc, #20]	; (8013b80 <ip4_input+0x240>)
 8013b6a:	2200      	movs	r2, #0
 8013b6c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8013b6e:	4b04      	ldr	r3, [pc, #16]	; (8013b80 <ip4_input+0x240>)
 8013b70:	2200      	movs	r2, #0
 8013b72:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013b74:	2300      	movs	r3, #0
}
 8013b76:	4618      	mov	r0, r3
 8013b78:	3718      	adds	r7, #24
 8013b7a:	46bd      	mov	sp, r7
 8013b7c:	bd80      	pop	{r7, pc}
 8013b7e:	bf00      	nop
 8013b80:	24000714 	.word	0x24000714
 8013b84:	240035f4 	.word	0x240035f4

08013b88 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b08a      	sub	sp, #40	; 0x28
 8013b8c:	af04      	add	r7, sp, #16
 8013b8e:	60f8      	str	r0, [r7, #12]
 8013b90:	60b9      	str	r1, [r7, #8]
 8013b92:	607a      	str	r2, [r7, #4]
 8013b94:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013b96:	68bb      	ldr	r3, [r7, #8]
 8013b98:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d009      	beq.n	8013bb4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013ba0:	68bb      	ldr	r3, [r7, #8]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d003      	beq.n	8013bae <ip4_output_if+0x26>
 8013ba6:	68bb      	ldr	r3, [r7, #8]
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d102      	bne.n	8013bb4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bb0:	3304      	adds	r3, #4
 8013bb2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013bb4:	78fa      	ldrb	r2, [r7, #3]
 8013bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bb8:	9302      	str	r3, [sp, #8]
 8013bba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013bbe:	9301      	str	r3, [sp, #4]
 8013bc0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013bc4:	9300      	str	r3, [sp, #0]
 8013bc6:	4613      	mov	r3, r2
 8013bc8:	687a      	ldr	r2, [r7, #4]
 8013bca:	6979      	ldr	r1, [r7, #20]
 8013bcc:	68f8      	ldr	r0, [r7, #12]
 8013bce:	f000 f805 	bl	8013bdc <ip4_output_if_src>
 8013bd2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	3718      	adds	r7, #24
 8013bd8:	46bd      	mov	sp, r7
 8013bda:	bd80      	pop	{r7, pc}

08013bdc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013bdc:	b580      	push	{r7, lr}
 8013bde:	b088      	sub	sp, #32
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	60f8      	str	r0, [r7, #12]
 8013be4:	60b9      	str	r1, [r7, #8]
 8013be6:	607a      	str	r2, [r7, #4]
 8013be8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	7b9b      	ldrb	r3, [r3, #14]
 8013bee:	2b01      	cmp	r3, #1
 8013bf0:	d006      	beq.n	8013c00 <ip4_output_if_src+0x24>
 8013bf2:	4b4b      	ldr	r3, [pc, #300]	; (8013d20 <ip4_output_if_src+0x144>)
 8013bf4:	f44f 7255 	mov.w	r2, #852	; 0x354
 8013bf8:	494a      	ldr	r1, [pc, #296]	; (8013d24 <ip4_output_if_src+0x148>)
 8013bfa:	484b      	ldr	r0, [pc, #300]	; (8013d28 <ip4_output_if_src+0x14c>)
 8013bfc:	f001 f8c6 	bl	8014d8c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d060      	beq.n	8013cc8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013c06:	2314      	movs	r3, #20
 8013c08:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8013c0a:	2114      	movs	r1, #20
 8013c0c:	68f8      	ldr	r0, [r7, #12]
 8013c0e:	f7f7 fe75 	bl	800b8fc <pbuf_add_header>
 8013c12:	4603      	mov	r3, r0
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d002      	beq.n	8013c1e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013c18:	f06f 0301 	mvn.w	r3, #1
 8013c1c:	e07c      	b.n	8013d18 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	685b      	ldr	r3, [r3, #4]
 8013c22:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	895b      	ldrh	r3, [r3, #10]
 8013c28:	2b13      	cmp	r3, #19
 8013c2a:	d806      	bhi.n	8013c3a <ip4_output_if_src+0x5e>
 8013c2c:	4b3c      	ldr	r3, [pc, #240]	; (8013d20 <ip4_output_if_src+0x144>)
 8013c2e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8013c32:	493e      	ldr	r1, [pc, #248]	; (8013d2c <ip4_output_if_src+0x150>)
 8013c34:	483c      	ldr	r0, [pc, #240]	; (8013d28 <ip4_output_if_src+0x14c>)
 8013c36:	f001 f8a9 	bl	8014d8c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013c3a:	69fb      	ldr	r3, [r7, #28]
 8013c3c:	78fa      	ldrb	r2, [r7, #3]
 8013c3e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013c40:	69fb      	ldr	r3, [r7, #28]
 8013c42:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013c46:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	681a      	ldr	r2, [r3, #0]
 8013c4c:	69fb      	ldr	r3, [r7, #28]
 8013c4e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013c50:	8b7b      	ldrh	r3, [r7, #26]
 8013c52:	089b      	lsrs	r3, r3, #2
 8013c54:	b29b      	uxth	r3, r3
 8013c56:	b2db      	uxtb	r3, r3
 8013c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c5c:	b2da      	uxtb	r2, r3
 8013c5e:	69fb      	ldr	r3, [r7, #28]
 8013c60:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013c62:	69fb      	ldr	r3, [r7, #28]
 8013c64:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013c68:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	891b      	ldrh	r3, [r3, #8]
 8013c6e:	4618      	mov	r0, r3
 8013c70:	f7f6 fac4 	bl	800a1fc <lwip_htons>
 8013c74:	4603      	mov	r3, r0
 8013c76:	461a      	mov	r2, r3
 8013c78:	69fb      	ldr	r3, [r7, #28]
 8013c7a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013c7c:	69fb      	ldr	r3, [r7, #28]
 8013c7e:	2200      	movs	r2, #0
 8013c80:	719a      	strb	r2, [r3, #6]
 8013c82:	2200      	movs	r2, #0
 8013c84:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013c86:	4b2a      	ldr	r3, [pc, #168]	; (8013d30 <ip4_output_if_src+0x154>)
 8013c88:	881b      	ldrh	r3, [r3, #0]
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	f7f6 fab6 	bl	800a1fc <lwip_htons>
 8013c90:	4603      	mov	r3, r0
 8013c92:	461a      	mov	r2, r3
 8013c94:	69fb      	ldr	r3, [r7, #28]
 8013c96:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013c98:	4b25      	ldr	r3, [pc, #148]	; (8013d30 <ip4_output_if_src+0x154>)
 8013c9a:	881b      	ldrh	r3, [r3, #0]
 8013c9c:	3301      	adds	r3, #1
 8013c9e:	b29a      	uxth	r2, r3
 8013ca0:	4b23      	ldr	r3, [pc, #140]	; (8013d30 <ip4_output_if_src+0x154>)
 8013ca2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013ca4:	68bb      	ldr	r3, [r7, #8]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d104      	bne.n	8013cb4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013caa:	4b22      	ldr	r3, [pc, #136]	; (8013d34 <ip4_output_if_src+0x158>)
 8013cac:	681a      	ldr	r2, [r3, #0]
 8013cae:	69fb      	ldr	r3, [r7, #28]
 8013cb0:	60da      	str	r2, [r3, #12]
 8013cb2:	e003      	b.n	8013cbc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013cb4:	68bb      	ldr	r3, [r7, #8]
 8013cb6:	681a      	ldr	r2, [r3, #0]
 8013cb8:	69fb      	ldr	r3, [r7, #28]
 8013cba:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013cbc:	69fb      	ldr	r3, [r7, #28]
 8013cbe:	2200      	movs	r2, #0
 8013cc0:	729a      	strb	r2, [r3, #10]
 8013cc2:	2200      	movs	r2, #0
 8013cc4:	72da      	strb	r2, [r3, #11]
 8013cc6:	e00f      	b.n	8013ce8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	895b      	ldrh	r3, [r3, #10]
 8013ccc:	2b13      	cmp	r3, #19
 8013cce:	d802      	bhi.n	8013cd6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013cd0:	f06f 0301 	mvn.w	r3, #1
 8013cd4:	e020      	b.n	8013d18 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	685b      	ldr	r3, [r3, #4]
 8013cda:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013cdc:	69fb      	ldr	r3, [r7, #28]
 8013cde:	691b      	ldr	r3, [r3, #16]
 8013ce0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013ce2:	f107 0314 	add.w	r3, r7, #20
 8013ce6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d00c      	beq.n	8013d0a <ip4_output_if_src+0x12e>
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	891a      	ldrh	r2, [r3, #8]
 8013cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cf6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013cf8:	429a      	cmp	r2, r3
 8013cfa:	d906      	bls.n	8013d0a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8013cfc:	687a      	ldr	r2, [r7, #4]
 8013cfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013d00:	68f8      	ldr	r0, [r7, #12]
 8013d02:	f000 fddf 	bl	80148c4 <ip4_frag>
 8013d06:	4603      	mov	r3, r0
 8013d08:	e006      	b.n	8013d18 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d0c:	695b      	ldr	r3, [r3, #20]
 8013d0e:	687a      	ldr	r2, [r7, #4]
 8013d10:	68f9      	ldr	r1, [r7, #12]
 8013d12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013d14:	4798      	blx	r3
 8013d16:	4603      	mov	r3, r0
}
 8013d18:	4618      	mov	r0, r3
 8013d1a:	3720      	adds	r7, #32
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	bd80      	pop	{r7, pc}
 8013d20:	08018590 	.word	0x08018590
 8013d24:	080185c4 	.word	0x080185c4
 8013d28:	080185d0 	.word	0x080185d0
 8013d2c:	080185f8 	.word	0x080185f8
 8013d30:	24000226 	.word	0x24000226
 8013d34:	080197d8 	.word	0x080197d8

08013d38 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013d38:	b480      	push	{r7}
 8013d3a:	b085      	sub	sp, #20
 8013d3c:	af00      	add	r7, sp, #0
 8013d3e:	6078      	str	r0, [r7, #4]
 8013d40:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d4c:	d002      	beq.n	8013d54 <ip4_addr_isbroadcast_u32+0x1c>
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d101      	bne.n	8013d58 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013d54:	2301      	movs	r3, #1
 8013d56:	e02a      	b.n	8013dae <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013d58:	683b      	ldr	r3, [r7, #0]
 8013d5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013d5e:	f003 0302 	and.w	r3, r3, #2
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d101      	bne.n	8013d6a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013d66:	2300      	movs	r3, #0
 8013d68:	e021      	b.n	8013dae <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013d6a:	683b      	ldr	r3, [r7, #0]
 8013d6c:	3304      	adds	r3, #4
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	687a      	ldr	r2, [r7, #4]
 8013d72:	429a      	cmp	r2, r3
 8013d74:	d101      	bne.n	8013d7a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013d76:	2300      	movs	r3, #0
 8013d78:	e019      	b.n	8013dae <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013d7a:	68fa      	ldr	r2, [r7, #12]
 8013d7c:	683b      	ldr	r3, [r7, #0]
 8013d7e:	3304      	adds	r3, #4
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	405a      	eors	r2, r3
 8013d84:	683b      	ldr	r3, [r7, #0]
 8013d86:	3308      	adds	r3, #8
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	4013      	ands	r3, r2
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d10d      	bne.n	8013dac <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013d90:	683b      	ldr	r3, [r7, #0]
 8013d92:	3308      	adds	r3, #8
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	43da      	mvns	r2, r3
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013d9c:	683b      	ldr	r3, [r7, #0]
 8013d9e:	3308      	adds	r3, #8
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013da4:	429a      	cmp	r2, r3
 8013da6:	d101      	bne.n	8013dac <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013da8:	2301      	movs	r3, #1
 8013daa:	e000      	b.n	8013dae <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013dac:	2300      	movs	r3, #0
  }
}
 8013dae:	4618      	mov	r0, r3
 8013db0:	3714      	adds	r7, #20
 8013db2:	46bd      	mov	sp, r7
 8013db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013db8:	4770      	bx	lr
	...

08013dbc <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	b082      	sub	sp, #8
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8013dc4:	2210      	movs	r2, #16
 8013dc6:	4904      	ldr	r1, [pc, #16]	; (8013dd8 <ip4addr_ntoa+0x1c>)
 8013dc8:	6878      	ldr	r0, [r7, #4]
 8013dca:	f000 f807 	bl	8013ddc <ip4addr_ntoa_r>
 8013dce:	4603      	mov	r3, r0
}
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	3708      	adds	r7, #8
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	bd80      	pop	{r7, pc}
 8013dd8:	24000228 	.word	0x24000228

08013ddc <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8013ddc:	b480      	push	{r7}
 8013dde:	b08d      	sub	sp, #52	; 0x34
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	60f8      	str	r0, [r7, #12]
 8013de4:	60b9      	str	r1, [r7, #8]
 8013de6:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8013de8:	2300      	movs	r3, #0
 8013dea:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8013df2:	68bb      	ldr	r3, [r7, #8]
 8013df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 8013df6:	f107 0318 	add.w	r3, r7, #24
 8013dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8013dfc:	2300      	movs	r3, #0
 8013dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013e02:	e059      	b.n	8013eb8 <ip4addr_ntoa_r+0xdc>
    i = 0;
 8013e04:	2300      	movs	r3, #0
 8013e06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 8013e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e0c:	781a      	ldrb	r2, [r3, #0]
 8013e0e:	4b33      	ldr	r3, [pc, #204]	; (8013edc <ip4addr_ntoa_r+0x100>)
 8013e10:	fba3 1302 	umull	r1, r3, r3, r2
 8013e14:	08d9      	lsrs	r1, r3, #3
 8013e16:	460b      	mov	r3, r1
 8013e18:	009b      	lsls	r3, r3, #2
 8013e1a:	440b      	add	r3, r1
 8013e1c:	005b      	lsls	r3, r3, #1
 8013e1e:	1ad3      	subs	r3, r2, r3
 8013e20:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8013e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e24:	781b      	ldrb	r3, [r3, #0]
 8013e26:	4a2d      	ldr	r2, [pc, #180]	; (8013edc <ip4addr_ntoa_r+0x100>)
 8013e28:	fba2 2303 	umull	r2, r3, r2, r3
 8013e2c:	08db      	lsrs	r3, r3, #3
 8013e2e:	b2da      	uxtb	r2, r3
 8013e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e32:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8013e34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013e38:	1c5a      	adds	r2, r3, #1
 8013e3a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8013e3e:	4619      	mov	r1, r3
 8013e40:	7ffb      	ldrb	r3, [r7, #31]
 8013e42:	3330      	adds	r3, #48	; 0x30
 8013e44:	b2da      	uxtb	r2, r3
 8013e46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013e4a:	440b      	add	r3, r1
 8013e4c:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8013e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e52:	781b      	ldrb	r3, [r3, #0]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d1d8      	bne.n	8013e0a <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8013e58:	e012      	b.n	8013e80 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 8013e5a:	6a3b      	ldr	r3, [r7, #32]
 8013e5c:	1c5a      	adds	r2, r3, #1
 8013e5e:	623a      	str	r2, [r7, #32]
 8013e60:	687a      	ldr	r2, [r7, #4]
 8013e62:	429a      	cmp	r2, r3
 8013e64:	dc01      	bgt.n	8013e6a <ip4addr_ntoa_r+0x8e>
        return NULL;
 8013e66:	2300      	movs	r3, #0
 8013e68:	e031      	b.n	8013ece <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 8013e6a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8013e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e70:	1c59      	adds	r1, r3, #1
 8013e72:	62f9      	str	r1, [r7, #44]	; 0x2c
 8013e74:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8013e78:	440a      	add	r2, r1
 8013e7a:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8013e7e:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8013e80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013e84:	1e5a      	subs	r2, r3, #1
 8013e86:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d1e5      	bne.n	8013e5a <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8013e8e:	6a3b      	ldr	r3, [r7, #32]
 8013e90:	1c5a      	adds	r2, r3, #1
 8013e92:	623a      	str	r2, [r7, #32]
 8013e94:	687a      	ldr	r2, [r7, #4]
 8013e96:	429a      	cmp	r2, r3
 8013e98:	dc01      	bgt.n	8013e9e <ip4addr_ntoa_r+0xc2>
      return NULL;
 8013e9a:	2300      	movs	r3, #0
 8013e9c:	e017      	b.n	8013ece <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 8013e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ea0:	1c5a      	adds	r2, r3, #1
 8013ea2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013ea4:	222e      	movs	r2, #46	; 0x2e
 8013ea6:	701a      	strb	r2, [r3, #0]
    ap++;
 8013ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eaa:	3301      	adds	r3, #1
 8013eac:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8013eae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013eb2:	3301      	adds	r3, #1
 8013eb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013ebc:	2b03      	cmp	r3, #3
 8013ebe:	d9a1      	bls.n	8013e04 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8013ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ec2:	3b01      	subs	r3, #1
 8013ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ec8:	2200      	movs	r2, #0
 8013eca:	701a      	strb	r2, [r3, #0]
  return buf;
 8013ecc:	68bb      	ldr	r3, [r7, #8]
}
 8013ece:	4618      	mov	r0, r3
 8013ed0:	3734      	adds	r7, #52	; 0x34
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed8:	4770      	bx	lr
 8013eda:	bf00      	nop
 8013edc:	cccccccd 	.word	0xcccccccd

08013ee0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013ee0:	b580      	push	{r7, lr}
 8013ee2:	b084      	sub	sp, #16
 8013ee4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013ee6:	2300      	movs	r3, #0
 8013ee8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013eea:	4b12      	ldr	r3, [pc, #72]	; (8013f34 <ip_reass_tmr+0x54>)
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013ef0:	e018      	b.n	8013f24 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	7fdb      	ldrb	r3, [r3, #31]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d00b      	beq.n	8013f12 <ip_reass_tmr+0x32>
      r->timer--;
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	7fdb      	ldrb	r3, [r3, #31]
 8013efe:	3b01      	subs	r3, #1
 8013f00:	b2da      	uxtb	r2, r3
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	60fb      	str	r3, [r7, #12]
 8013f10:	e008      	b.n	8013f24 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013f1c:	68b9      	ldr	r1, [r7, #8]
 8013f1e:	6878      	ldr	r0, [r7, #4]
 8013f20:	f000 f80a 	bl	8013f38 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d1e3      	bne.n	8013ef2 <ip_reass_tmr+0x12>
    }
  }
}
 8013f2a:	bf00      	nop
 8013f2c:	bf00      	nop
 8013f2e:	3710      	adds	r7, #16
 8013f30:	46bd      	mov	sp, r7
 8013f32:	bd80      	pop	{r7, pc}
 8013f34:	24000238 	.word	0x24000238

08013f38 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013f38:	b580      	push	{r7, lr}
 8013f3a:	b088      	sub	sp, #32
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	6078      	str	r0, [r7, #4]
 8013f40:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8013f42:	2300      	movs	r3, #0
 8013f44:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013f46:	683a      	ldr	r2, [r7, #0]
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	429a      	cmp	r2, r3
 8013f4c:	d105      	bne.n	8013f5a <ip_reass_free_complete_datagram+0x22>
 8013f4e:	4b45      	ldr	r3, [pc, #276]	; (8014064 <ip_reass_free_complete_datagram+0x12c>)
 8013f50:	22ab      	movs	r2, #171	; 0xab
 8013f52:	4945      	ldr	r1, [pc, #276]	; (8014068 <ip_reass_free_complete_datagram+0x130>)
 8013f54:	4845      	ldr	r0, [pc, #276]	; (801406c <ip_reass_free_complete_datagram+0x134>)
 8013f56:	f000 ff19 	bl	8014d8c <iprintf>
  if (prev != NULL) {
 8013f5a:	683b      	ldr	r3, [r7, #0]
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d00a      	beq.n	8013f76 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013f60:	683b      	ldr	r3, [r7, #0]
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	687a      	ldr	r2, [r7, #4]
 8013f66:	429a      	cmp	r2, r3
 8013f68:	d005      	beq.n	8013f76 <ip_reass_free_complete_datagram+0x3e>
 8013f6a:	4b3e      	ldr	r3, [pc, #248]	; (8014064 <ip_reass_free_complete_datagram+0x12c>)
 8013f6c:	22ad      	movs	r2, #173	; 0xad
 8013f6e:	4940      	ldr	r1, [pc, #256]	; (8014070 <ip_reass_free_complete_datagram+0x138>)
 8013f70:	483e      	ldr	r0, [pc, #248]	; (801406c <ip_reass_free_complete_datagram+0x134>)
 8013f72:	f000 ff0b 	bl	8014d8c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	685b      	ldr	r3, [r3, #4]
 8013f7a:	685b      	ldr	r3, [r3, #4]
 8013f7c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8013f7e:	697b      	ldr	r3, [r7, #20]
 8013f80:	889b      	ldrh	r3, [r3, #4]
 8013f82:	b29b      	uxth	r3, r3
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d12a      	bne.n	8013fde <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	685b      	ldr	r3, [r3, #4]
 8013f8c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013f8e:	697b      	ldr	r3, [r7, #20]
 8013f90:	681a      	ldr	r2, [r3, #0]
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013f96:	69bb      	ldr	r3, [r7, #24]
 8013f98:	6858      	ldr	r0, [r3, #4]
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	3308      	adds	r3, #8
 8013f9e:	2214      	movs	r2, #20
 8013fa0:	4619      	mov	r1, r3
 8013fa2:	f000 fedd 	bl	8014d60 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013fa6:	2101      	movs	r1, #1
 8013fa8:	69b8      	ldr	r0, [r7, #24]
 8013faa:	f7ff fbab 	bl	8013704 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013fae:	69b8      	ldr	r0, [r7, #24]
 8013fb0:	f7f7 fdc2 	bl	800bb38 <pbuf_clen>
 8013fb4:	4603      	mov	r3, r0
 8013fb6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013fb8:	8bfa      	ldrh	r2, [r7, #30]
 8013fba:	8a7b      	ldrh	r3, [r7, #18]
 8013fbc:	4413      	add	r3, r2
 8013fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013fc2:	db05      	blt.n	8013fd0 <ip_reass_free_complete_datagram+0x98>
 8013fc4:	4b27      	ldr	r3, [pc, #156]	; (8014064 <ip_reass_free_complete_datagram+0x12c>)
 8013fc6:	22bc      	movs	r2, #188	; 0xbc
 8013fc8:	492a      	ldr	r1, [pc, #168]	; (8014074 <ip_reass_free_complete_datagram+0x13c>)
 8013fca:	4828      	ldr	r0, [pc, #160]	; (801406c <ip_reass_free_complete_datagram+0x134>)
 8013fcc:	f000 fede 	bl	8014d8c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013fd0:	8bfa      	ldrh	r2, [r7, #30]
 8013fd2:	8a7b      	ldrh	r3, [r7, #18]
 8013fd4:	4413      	add	r3, r2
 8013fd6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013fd8:	69b8      	ldr	r0, [r7, #24]
 8013fda:	f7f7 fd25 	bl	800ba28 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	685b      	ldr	r3, [r3, #4]
 8013fe2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013fe4:	e01f      	b.n	8014026 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013fe6:	69bb      	ldr	r3, [r7, #24]
 8013fe8:	685b      	ldr	r3, [r3, #4]
 8013fea:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013fec:	69bb      	ldr	r3, [r7, #24]
 8013fee:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013ff0:	697b      	ldr	r3, [r7, #20]
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013ff6:	68f8      	ldr	r0, [r7, #12]
 8013ff8:	f7f7 fd9e 	bl	800bb38 <pbuf_clen>
 8013ffc:	4603      	mov	r3, r0
 8013ffe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014000:	8bfa      	ldrh	r2, [r7, #30]
 8014002:	8a7b      	ldrh	r3, [r7, #18]
 8014004:	4413      	add	r3, r2
 8014006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801400a:	db05      	blt.n	8014018 <ip_reass_free_complete_datagram+0xe0>
 801400c:	4b15      	ldr	r3, [pc, #84]	; (8014064 <ip_reass_free_complete_datagram+0x12c>)
 801400e:	22cc      	movs	r2, #204	; 0xcc
 8014010:	4918      	ldr	r1, [pc, #96]	; (8014074 <ip_reass_free_complete_datagram+0x13c>)
 8014012:	4816      	ldr	r0, [pc, #88]	; (801406c <ip_reass_free_complete_datagram+0x134>)
 8014014:	f000 feba 	bl	8014d8c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014018:	8bfa      	ldrh	r2, [r7, #30]
 801401a:	8a7b      	ldrh	r3, [r7, #18]
 801401c:	4413      	add	r3, r2
 801401e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014020:	68f8      	ldr	r0, [r7, #12]
 8014022:	f7f7 fd01 	bl	800ba28 <pbuf_free>
  while (p != NULL) {
 8014026:	69bb      	ldr	r3, [r7, #24]
 8014028:	2b00      	cmp	r3, #0
 801402a:	d1dc      	bne.n	8013fe6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801402c:	6839      	ldr	r1, [r7, #0]
 801402e:	6878      	ldr	r0, [r7, #4]
 8014030:	f000 f8c2 	bl	80141b8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014034:	4b10      	ldr	r3, [pc, #64]	; (8014078 <ip_reass_free_complete_datagram+0x140>)
 8014036:	881b      	ldrh	r3, [r3, #0]
 8014038:	8bfa      	ldrh	r2, [r7, #30]
 801403a:	429a      	cmp	r2, r3
 801403c:	d905      	bls.n	801404a <ip_reass_free_complete_datagram+0x112>
 801403e:	4b09      	ldr	r3, [pc, #36]	; (8014064 <ip_reass_free_complete_datagram+0x12c>)
 8014040:	22d2      	movs	r2, #210	; 0xd2
 8014042:	490e      	ldr	r1, [pc, #56]	; (801407c <ip_reass_free_complete_datagram+0x144>)
 8014044:	4809      	ldr	r0, [pc, #36]	; (801406c <ip_reass_free_complete_datagram+0x134>)
 8014046:	f000 fea1 	bl	8014d8c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801404a:	4b0b      	ldr	r3, [pc, #44]	; (8014078 <ip_reass_free_complete_datagram+0x140>)
 801404c:	881a      	ldrh	r2, [r3, #0]
 801404e:	8bfb      	ldrh	r3, [r7, #30]
 8014050:	1ad3      	subs	r3, r2, r3
 8014052:	b29a      	uxth	r2, r3
 8014054:	4b08      	ldr	r3, [pc, #32]	; (8014078 <ip_reass_free_complete_datagram+0x140>)
 8014056:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014058:	8bfb      	ldrh	r3, [r7, #30]
}
 801405a:	4618      	mov	r0, r3
 801405c:	3720      	adds	r7, #32
 801405e:	46bd      	mov	sp, r7
 8014060:	bd80      	pop	{r7, pc}
 8014062:	bf00      	nop
 8014064:	08018628 	.word	0x08018628
 8014068:	08018664 	.word	0x08018664
 801406c:	08018670 	.word	0x08018670
 8014070:	08018698 	.word	0x08018698
 8014074:	080186ac 	.word	0x080186ac
 8014078:	2400023c 	.word	0x2400023c
 801407c:	080186cc 	.word	0x080186cc

08014080 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014080:	b580      	push	{r7, lr}
 8014082:	b08a      	sub	sp, #40	; 0x28
 8014084:	af00      	add	r7, sp, #0
 8014086:	6078      	str	r0, [r7, #4]
 8014088:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801408a:	2300      	movs	r3, #0
 801408c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801408e:	2300      	movs	r3, #0
 8014090:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8014092:	2300      	movs	r3, #0
 8014094:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014096:	2300      	movs	r3, #0
 8014098:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801409a:	2300      	movs	r3, #0
 801409c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801409e:	4b28      	ldr	r3, [pc, #160]	; (8014140 <ip_reass_remove_oldest_datagram+0xc0>)
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80140a4:	e030      	b.n	8014108 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80140a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140a8:	695a      	ldr	r2, [r3, #20]
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	68db      	ldr	r3, [r3, #12]
 80140ae:	429a      	cmp	r2, r3
 80140b0:	d10c      	bne.n	80140cc <ip_reass_remove_oldest_datagram+0x4c>
 80140b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140b4:	699a      	ldr	r2, [r3, #24]
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	691b      	ldr	r3, [r3, #16]
 80140ba:	429a      	cmp	r2, r3
 80140bc:	d106      	bne.n	80140cc <ip_reass_remove_oldest_datagram+0x4c>
 80140be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140c0:	899a      	ldrh	r2, [r3, #12]
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	889b      	ldrh	r3, [r3, #4]
 80140c6:	b29b      	uxth	r3, r3
 80140c8:	429a      	cmp	r2, r3
 80140ca:	d014      	beq.n	80140f6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80140cc:	693b      	ldr	r3, [r7, #16]
 80140ce:	3301      	adds	r3, #1
 80140d0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80140d2:	6a3b      	ldr	r3, [r7, #32]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d104      	bne.n	80140e2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80140d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140da:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80140dc:	69fb      	ldr	r3, [r7, #28]
 80140de:	61bb      	str	r3, [r7, #24]
 80140e0:	e009      	b.n	80140f6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80140e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140e4:	7fda      	ldrb	r2, [r3, #31]
 80140e6:	6a3b      	ldr	r3, [r7, #32]
 80140e8:	7fdb      	ldrb	r3, [r3, #31]
 80140ea:	429a      	cmp	r2, r3
 80140ec:	d803      	bhi.n	80140f6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80140ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140f0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80140f2:	69fb      	ldr	r3, [r7, #28]
 80140f4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80140f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d001      	beq.n	8014102 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80140fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014100:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8014102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801410a:	2b00      	cmp	r3, #0
 801410c:	d1cb      	bne.n	80140a6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801410e:	6a3b      	ldr	r3, [r7, #32]
 8014110:	2b00      	cmp	r3, #0
 8014112:	d008      	beq.n	8014126 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8014114:	69b9      	ldr	r1, [r7, #24]
 8014116:	6a38      	ldr	r0, [r7, #32]
 8014118:	f7ff ff0e 	bl	8013f38 <ip_reass_free_complete_datagram>
 801411c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801411e:	697a      	ldr	r2, [r7, #20]
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	4413      	add	r3, r2
 8014124:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8014126:	697a      	ldr	r2, [r7, #20]
 8014128:	683b      	ldr	r3, [r7, #0]
 801412a:	429a      	cmp	r2, r3
 801412c:	da02      	bge.n	8014134 <ip_reass_remove_oldest_datagram+0xb4>
 801412e:	693b      	ldr	r3, [r7, #16]
 8014130:	2b01      	cmp	r3, #1
 8014132:	dcac      	bgt.n	801408e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8014134:	697b      	ldr	r3, [r7, #20]
}
 8014136:	4618      	mov	r0, r3
 8014138:	3728      	adds	r7, #40	; 0x28
 801413a:	46bd      	mov	sp, r7
 801413c:	bd80      	pop	{r7, pc}
 801413e:	bf00      	nop
 8014140:	24000238 	.word	0x24000238

08014144 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014144:	b580      	push	{r7, lr}
 8014146:	b084      	sub	sp, #16
 8014148:	af00      	add	r7, sp, #0
 801414a:	6078      	str	r0, [r7, #4]
 801414c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801414e:	2004      	movs	r0, #4
 8014150:	f7f6 fd84 	bl	800ac5c <memp_malloc>
 8014154:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	2b00      	cmp	r3, #0
 801415a:	d110      	bne.n	801417e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801415c:	6839      	ldr	r1, [r7, #0]
 801415e:	6878      	ldr	r0, [r7, #4]
 8014160:	f7ff ff8e 	bl	8014080 <ip_reass_remove_oldest_datagram>
 8014164:	4602      	mov	r2, r0
 8014166:	683b      	ldr	r3, [r7, #0]
 8014168:	4293      	cmp	r3, r2
 801416a:	dc03      	bgt.n	8014174 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801416c:	2004      	movs	r0, #4
 801416e:	f7f6 fd75 	bl	800ac5c <memp_malloc>
 8014172:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014174:	68fb      	ldr	r3, [r7, #12]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d101      	bne.n	801417e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801417a:	2300      	movs	r3, #0
 801417c:	e016      	b.n	80141ac <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801417e:	2220      	movs	r2, #32
 8014180:	2100      	movs	r1, #0
 8014182:	68f8      	ldr	r0, [r7, #12]
 8014184:	f000 fdfa 	bl	8014d7c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	220f      	movs	r2, #15
 801418c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801418e:	4b09      	ldr	r3, [pc, #36]	; (80141b4 <ip_reass_enqueue_new_datagram+0x70>)
 8014190:	681a      	ldr	r2, [r3, #0]
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8014196:	4a07      	ldr	r2, [pc, #28]	; (80141b4 <ip_reass_enqueue_new_datagram+0x70>)
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801419c:	68fb      	ldr	r3, [r7, #12]
 801419e:	3308      	adds	r3, #8
 80141a0:	2214      	movs	r2, #20
 80141a2:	6879      	ldr	r1, [r7, #4]
 80141a4:	4618      	mov	r0, r3
 80141a6:	f000 fddb 	bl	8014d60 <memcpy>
  return ipr;
 80141aa:	68fb      	ldr	r3, [r7, #12]
}
 80141ac:	4618      	mov	r0, r3
 80141ae:	3710      	adds	r7, #16
 80141b0:	46bd      	mov	sp, r7
 80141b2:	bd80      	pop	{r7, pc}
 80141b4:	24000238 	.word	0x24000238

080141b8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80141b8:	b580      	push	{r7, lr}
 80141ba:	b082      	sub	sp, #8
 80141bc:	af00      	add	r7, sp, #0
 80141be:	6078      	str	r0, [r7, #4]
 80141c0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80141c2:	4b10      	ldr	r3, [pc, #64]	; (8014204 <ip_reass_dequeue_datagram+0x4c>)
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	687a      	ldr	r2, [r7, #4]
 80141c8:	429a      	cmp	r2, r3
 80141ca:	d104      	bne.n	80141d6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	4a0c      	ldr	r2, [pc, #48]	; (8014204 <ip_reass_dequeue_datagram+0x4c>)
 80141d2:	6013      	str	r3, [r2, #0]
 80141d4:	e00d      	b.n	80141f2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80141d6:	683b      	ldr	r3, [r7, #0]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d106      	bne.n	80141ea <ip_reass_dequeue_datagram+0x32>
 80141dc:	4b0a      	ldr	r3, [pc, #40]	; (8014208 <ip_reass_dequeue_datagram+0x50>)
 80141de:	f240 1245 	movw	r2, #325	; 0x145
 80141e2:	490a      	ldr	r1, [pc, #40]	; (801420c <ip_reass_dequeue_datagram+0x54>)
 80141e4:	480a      	ldr	r0, [pc, #40]	; (8014210 <ip_reass_dequeue_datagram+0x58>)
 80141e6:	f000 fdd1 	bl	8014d8c <iprintf>
    prev->next = ipr->next;
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	681a      	ldr	r2, [r3, #0]
 80141ee:	683b      	ldr	r3, [r7, #0]
 80141f0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80141f2:	6879      	ldr	r1, [r7, #4]
 80141f4:	2004      	movs	r0, #4
 80141f6:	f7f6 fda1 	bl	800ad3c <memp_free>
}
 80141fa:	bf00      	nop
 80141fc:	3708      	adds	r7, #8
 80141fe:	46bd      	mov	sp, r7
 8014200:	bd80      	pop	{r7, pc}
 8014202:	bf00      	nop
 8014204:	24000238 	.word	0x24000238
 8014208:	08018628 	.word	0x08018628
 801420c:	080186f0 	.word	0x080186f0
 8014210:	08018670 	.word	0x08018670

08014214 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8014214:	b580      	push	{r7, lr}
 8014216:	b08c      	sub	sp, #48	; 0x30
 8014218:	af00      	add	r7, sp, #0
 801421a:	60f8      	str	r0, [r7, #12]
 801421c:	60b9      	str	r1, [r7, #8]
 801421e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8014220:	2300      	movs	r3, #0
 8014222:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8014224:	2301      	movs	r3, #1
 8014226:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8014228:	68bb      	ldr	r3, [r7, #8]
 801422a:	685b      	ldr	r3, [r3, #4]
 801422c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801422e:	69fb      	ldr	r3, [r7, #28]
 8014230:	885b      	ldrh	r3, [r3, #2]
 8014232:	b29b      	uxth	r3, r3
 8014234:	4618      	mov	r0, r3
 8014236:	f7f5 ffe1 	bl	800a1fc <lwip_htons>
 801423a:	4603      	mov	r3, r0
 801423c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801423e:	69fb      	ldr	r3, [r7, #28]
 8014240:	781b      	ldrb	r3, [r3, #0]
 8014242:	f003 030f 	and.w	r3, r3, #15
 8014246:	b2db      	uxtb	r3, r3
 8014248:	009b      	lsls	r3, r3, #2
 801424a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801424c:	7e7b      	ldrb	r3, [r7, #25]
 801424e:	b29b      	uxth	r3, r3
 8014250:	8b7a      	ldrh	r2, [r7, #26]
 8014252:	429a      	cmp	r2, r3
 8014254:	d202      	bcs.n	801425c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014256:	f04f 33ff 	mov.w	r3, #4294967295
 801425a:	e135      	b.n	80144c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801425c:	7e7b      	ldrb	r3, [r7, #25]
 801425e:	b29b      	uxth	r3, r3
 8014260:	8b7a      	ldrh	r2, [r7, #26]
 8014262:	1ad3      	subs	r3, r2, r3
 8014264:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8014266:	69fb      	ldr	r3, [r7, #28]
 8014268:	88db      	ldrh	r3, [r3, #6]
 801426a:	b29b      	uxth	r3, r3
 801426c:	4618      	mov	r0, r3
 801426e:	f7f5 ffc5 	bl	800a1fc <lwip_htons>
 8014272:	4603      	mov	r3, r0
 8014274:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014278:	b29b      	uxth	r3, r3
 801427a:	00db      	lsls	r3, r3, #3
 801427c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801427e:	68bb      	ldr	r3, [r7, #8]
 8014280:	685b      	ldr	r3, [r3, #4]
 8014282:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8014284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014286:	2200      	movs	r2, #0
 8014288:	701a      	strb	r2, [r3, #0]
 801428a:	2200      	movs	r2, #0
 801428c:	705a      	strb	r2, [r3, #1]
 801428e:	2200      	movs	r2, #0
 8014290:	709a      	strb	r2, [r3, #2]
 8014292:	2200      	movs	r2, #0
 8014294:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8014296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014298:	8afa      	ldrh	r2, [r7, #22]
 801429a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801429c:	8afa      	ldrh	r2, [r7, #22]
 801429e:	8b7b      	ldrh	r3, [r7, #26]
 80142a0:	4413      	add	r3, r2
 80142a2:	b29a      	uxth	r2, r3
 80142a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142a6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80142a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142aa:	88db      	ldrh	r3, [r3, #6]
 80142ac:	b29b      	uxth	r3, r3
 80142ae:	8afa      	ldrh	r2, [r7, #22]
 80142b0:	429a      	cmp	r2, r3
 80142b2:	d902      	bls.n	80142ba <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80142b4:	f04f 33ff 	mov.w	r3, #4294967295
 80142b8:	e106      	b.n	80144c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	685b      	ldr	r3, [r3, #4]
 80142be:	627b      	str	r3, [r7, #36]	; 0x24
 80142c0:	e068      	b.n	8014394 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80142c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142c4:	685b      	ldr	r3, [r3, #4]
 80142c6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80142c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142ca:	889b      	ldrh	r3, [r3, #4]
 80142cc:	b29a      	uxth	r2, r3
 80142ce:	693b      	ldr	r3, [r7, #16]
 80142d0:	889b      	ldrh	r3, [r3, #4]
 80142d2:	b29b      	uxth	r3, r3
 80142d4:	429a      	cmp	r2, r3
 80142d6:	d235      	bcs.n	8014344 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80142d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80142dc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80142de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d020      	beq.n	8014326 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80142e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142e6:	889b      	ldrh	r3, [r3, #4]
 80142e8:	b29a      	uxth	r2, r3
 80142ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142ec:	88db      	ldrh	r3, [r3, #6]
 80142ee:	b29b      	uxth	r3, r3
 80142f0:	429a      	cmp	r2, r3
 80142f2:	d307      	bcc.n	8014304 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80142f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142f6:	88db      	ldrh	r3, [r3, #6]
 80142f8:	b29a      	uxth	r2, r3
 80142fa:	693b      	ldr	r3, [r7, #16]
 80142fc:	889b      	ldrh	r3, [r3, #4]
 80142fe:	b29b      	uxth	r3, r3
 8014300:	429a      	cmp	r2, r3
 8014302:	d902      	bls.n	801430a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014304:	f04f 33ff 	mov.w	r3, #4294967295
 8014308:	e0de      	b.n	80144c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801430c:	68ba      	ldr	r2, [r7, #8]
 801430e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8014310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014312:	88db      	ldrh	r3, [r3, #6]
 8014314:	b29a      	uxth	r2, r3
 8014316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014318:	889b      	ldrh	r3, [r3, #4]
 801431a:	b29b      	uxth	r3, r3
 801431c:	429a      	cmp	r2, r3
 801431e:	d03d      	beq.n	801439c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014320:	2300      	movs	r3, #0
 8014322:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8014324:	e03a      	b.n	801439c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8014326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014328:	88db      	ldrh	r3, [r3, #6]
 801432a:	b29a      	uxth	r2, r3
 801432c:	693b      	ldr	r3, [r7, #16]
 801432e:	889b      	ldrh	r3, [r3, #4]
 8014330:	b29b      	uxth	r3, r3
 8014332:	429a      	cmp	r2, r3
 8014334:	d902      	bls.n	801433c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014336:	f04f 33ff 	mov.w	r3, #4294967295
 801433a:	e0c5      	b.n	80144c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801433c:	68fb      	ldr	r3, [r7, #12]
 801433e:	68ba      	ldr	r2, [r7, #8]
 8014340:	605a      	str	r2, [r3, #4]
      break;
 8014342:	e02b      	b.n	801439c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8014344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014346:	889b      	ldrh	r3, [r3, #4]
 8014348:	b29a      	uxth	r2, r3
 801434a:	693b      	ldr	r3, [r7, #16]
 801434c:	889b      	ldrh	r3, [r3, #4]
 801434e:	b29b      	uxth	r3, r3
 8014350:	429a      	cmp	r2, r3
 8014352:	d102      	bne.n	801435a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014354:	f04f 33ff 	mov.w	r3, #4294967295
 8014358:	e0b6      	b.n	80144c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801435a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801435c:	889b      	ldrh	r3, [r3, #4]
 801435e:	b29a      	uxth	r2, r3
 8014360:	693b      	ldr	r3, [r7, #16]
 8014362:	88db      	ldrh	r3, [r3, #6]
 8014364:	b29b      	uxth	r3, r3
 8014366:	429a      	cmp	r2, r3
 8014368:	d202      	bcs.n	8014370 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801436a:	f04f 33ff 	mov.w	r3, #4294967295
 801436e:	e0ab      	b.n	80144c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8014370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014372:	2b00      	cmp	r3, #0
 8014374:	d009      	beq.n	801438a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8014376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014378:	88db      	ldrh	r3, [r3, #6]
 801437a:	b29a      	uxth	r2, r3
 801437c:	693b      	ldr	r3, [r7, #16]
 801437e:	889b      	ldrh	r3, [r3, #4]
 8014380:	b29b      	uxth	r3, r3
 8014382:	429a      	cmp	r2, r3
 8014384:	d001      	beq.n	801438a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014386:	2300      	movs	r3, #0
 8014388:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801438a:	693b      	ldr	r3, [r7, #16]
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8014390:	693b      	ldr	r3, [r7, #16]
 8014392:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8014394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014396:	2b00      	cmp	r3, #0
 8014398:	d193      	bne.n	80142c2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801439a:	e000      	b.n	801439e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801439c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d12d      	bne.n	8014400 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80143a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d01c      	beq.n	80143e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80143aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143ac:	88db      	ldrh	r3, [r3, #6]
 80143ae:	b29a      	uxth	r2, r3
 80143b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143b2:	889b      	ldrh	r3, [r3, #4]
 80143b4:	b29b      	uxth	r3, r3
 80143b6:	429a      	cmp	r2, r3
 80143b8:	d906      	bls.n	80143c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80143ba:	4b45      	ldr	r3, [pc, #276]	; (80144d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80143bc:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80143c0:	4944      	ldr	r1, [pc, #272]	; (80144d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80143c2:	4845      	ldr	r0, [pc, #276]	; (80144d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80143c4:	f000 fce2 	bl	8014d8c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80143c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143ca:	68ba      	ldr	r2, [r7, #8]
 80143cc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80143ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143d0:	88db      	ldrh	r3, [r3, #6]
 80143d2:	b29a      	uxth	r2, r3
 80143d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143d6:	889b      	ldrh	r3, [r3, #4]
 80143d8:	b29b      	uxth	r3, r3
 80143da:	429a      	cmp	r2, r3
 80143dc:	d010      	beq.n	8014400 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80143de:	2300      	movs	r3, #0
 80143e0:	623b      	str	r3, [r7, #32]
 80143e2:	e00d      	b.n	8014400 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	685b      	ldr	r3, [r3, #4]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d006      	beq.n	80143fa <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80143ec:	4b38      	ldr	r3, [pc, #224]	; (80144d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80143ee:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80143f2:	493a      	ldr	r1, [pc, #232]	; (80144dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80143f4:	4838      	ldr	r0, [pc, #224]	; (80144d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80143f6:	f000 fcc9 	bl	8014d8c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	68ba      	ldr	r2, [r7, #8]
 80143fe:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	2b00      	cmp	r3, #0
 8014404:	d105      	bne.n	8014412 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	7f9b      	ldrb	r3, [r3, #30]
 801440a:	f003 0301 	and.w	r3, r3, #1
 801440e:	2b00      	cmp	r3, #0
 8014410:	d059      	beq.n	80144c6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8014412:	6a3b      	ldr	r3, [r7, #32]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d04f      	beq.n	80144b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	685b      	ldr	r3, [r3, #4]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d006      	beq.n	801442e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	685b      	ldr	r3, [r3, #4]
 8014424:	685b      	ldr	r3, [r3, #4]
 8014426:	889b      	ldrh	r3, [r3, #4]
 8014428:	b29b      	uxth	r3, r3
 801442a:	2b00      	cmp	r3, #0
 801442c:	d002      	beq.n	8014434 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801442e:	2300      	movs	r3, #0
 8014430:	623b      	str	r3, [r7, #32]
 8014432:	e041      	b.n	80144b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8014434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014436:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8014438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801443e:	e012      	b.n	8014466 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8014440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014442:	685b      	ldr	r3, [r3, #4]
 8014444:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8014446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014448:	88db      	ldrh	r3, [r3, #6]
 801444a:	b29a      	uxth	r2, r3
 801444c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801444e:	889b      	ldrh	r3, [r3, #4]
 8014450:	b29b      	uxth	r3, r3
 8014452:	429a      	cmp	r2, r3
 8014454:	d002      	beq.n	801445c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8014456:	2300      	movs	r3, #0
 8014458:	623b      	str	r3, [r7, #32]
            break;
 801445a:	e007      	b.n	801446c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801445c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801445e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8014460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014468:	2b00      	cmp	r3, #0
 801446a:	d1e9      	bne.n	8014440 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801446c:	6a3b      	ldr	r3, [r7, #32]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d022      	beq.n	80144b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	685b      	ldr	r3, [r3, #4]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d106      	bne.n	8014488 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801447a:	4b15      	ldr	r3, [pc, #84]	; (80144d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801447c:	f240 12df 	movw	r2, #479	; 0x1df
 8014480:	4917      	ldr	r1, [pc, #92]	; (80144e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014482:	4815      	ldr	r0, [pc, #84]	; (80144d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014484:	f000 fc82 	bl	8014d8c <iprintf>
          LWIP_ASSERT("sanity check",
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	685b      	ldr	r3, [r3, #4]
 801448c:	685b      	ldr	r3, [r3, #4]
 801448e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014490:	429a      	cmp	r2, r3
 8014492:	d106      	bne.n	80144a2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014494:	4b0e      	ldr	r3, [pc, #56]	; (80144d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014496:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801449a:	4911      	ldr	r1, [pc, #68]	; (80144e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801449c:	480e      	ldr	r0, [pc, #56]	; (80144d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801449e:	f000 fc75 	bl	8014d8c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80144a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d006      	beq.n	80144b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80144aa:	4b09      	ldr	r3, [pc, #36]	; (80144d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80144ac:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80144b0:	490c      	ldr	r1, [pc, #48]	; (80144e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80144b2:	4809      	ldr	r0, [pc, #36]	; (80144d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80144b4:	f000 fc6a 	bl	8014d8c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80144b8:	6a3b      	ldr	r3, [r7, #32]
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	bf14      	ite	ne
 80144be:	2301      	movne	r3, #1
 80144c0:	2300      	moveq	r3, #0
 80144c2:	b2db      	uxtb	r3, r3
 80144c4:	e000      	b.n	80144c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80144c6:	2300      	movs	r3, #0
}
 80144c8:	4618      	mov	r0, r3
 80144ca:	3730      	adds	r7, #48	; 0x30
 80144cc:	46bd      	mov	sp, r7
 80144ce:	bd80      	pop	{r7, pc}
 80144d0:	08018628 	.word	0x08018628
 80144d4:	0801870c 	.word	0x0801870c
 80144d8:	08018670 	.word	0x08018670
 80144dc:	0801872c 	.word	0x0801872c
 80144e0:	08018764 	.word	0x08018764
 80144e4:	08018774 	.word	0x08018774

080144e8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80144e8:	b580      	push	{r7, lr}
 80144ea:	b08e      	sub	sp, #56	; 0x38
 80144ec:	af00      	add	r7, sp, #0
 80144ee:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	685b      	ldr	r3, [r3, #4]
 80144f4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80144f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144f8:	781b      	ldrb	r3, [r3, #0]
 80144fa:	f003 030f 	and.w	r3, r3, #15
 80144fe:	b2db      	uxtb	r3, r3
 8014500:	009b      	lsls	r3, r3, #2
 8014502:	b2db      	uxtb	r3, r3
 8014504:	2b14      	cmp	r3, #20
 8014506:	f040 8167 	bne.w	80147d8 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801450a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801450c:	88db      	ldrh	r3, [r3, #6]
 801450e:	b29b      	uxth	r3, r3
 8014510:	4618      	mov	r0, r3
 8014512:	f7f5 fe73 	bl	800a1fc <lwip_htons>
 8014516:	4603      	mov	r3, r0
 8014518:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801451c:	b29b      	uxth	r3, r3
 801451e:	00db      	lsls	r3, r3, #3
 8014520:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014524:	885b      	ldrh	r3, [r3, #2]
 8014526:	b29b      	uxth	r3, r3
 8014528:	4618      	mov	r0, r3
 801452a:	f7f5 fe67 	bl	800a1fc <lwip_htons>
 801452e:	4603      	mov	r3, r0
 8014530:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8014532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014534:	781b      	ldrb	r3, [r3, #0]
 8014536:	f003 030f 	and.w	r3, r3, #15
 801453a:	b2db      	uxtb	r3, r3
 801453c:	009b      	lsls	r3, r3, #2
 801453e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8014542:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014546:	b29b      	uxth	r3, r3
 8014548:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801454a:	429a      	cmp	r2, r3
 801454c:	f0c0 8146 	bcc.w	80147dc <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8014550:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014554:	b29b      	uxth	r3, r3
 8014556:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014558:	1ad3      	subs	r3, r2, r3
 801455a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801455c:	6878      	ldr	r0, [r7, #4]
 801455e:	f7f7 faeb 	bl	800bb38 <pbuf_clen>
 8014562:	4603      	mov	r3, r0
 8014564:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8014566:	4b9f      	ldr	r3, [pc, #636]	; (80147e4 <ip4_reass+0x2fc>)
 8014568:	881b      	ldrh	r3, [r3, #0]
 801456a:	461a      	mov	r2, r3
 801456c:	8c3b      	ldrh	r3, [r7, #32]
 801456e:	4413      	add	r3, r2
 8014570:	2b0a      	cmp	r3, #10
 8014572:	dd10      	ble.n	8014596 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014574:	8c3b      	ldrh	r3, [r7, #32]
 8014576:	4619      	mov	r1, r3
 8014578:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801457a:	f7ff fd81 	bl	8014080 <ip_reass_remove_oldest_datagram>
 801457e:	4603      	mov	r3, r0
 8014580:	2b00      	cmp	r3, #0
 8014582:	f000 812d 	beq.w	80147e0 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8014586:	4b97      	ldr	r3, [pc, #604]	; (80147e4 <ip4_reass+0x2fc>)
 8014588:	881b      	ldrh	r3, [r3, #0]
 801458a:	461a      	mov	r2, r3
 801458c:	8c3b      	ldrh	r3, [r7, #32]
 801458e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014590:	2b0a      	cmp	r3, #10
 8014592:	f300 8125 	bgt.w	80147e0 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014596:	4b94      	ldr	r3, [pc, #592]	; (80147e8 <ip4_reass+0x300>)
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	633b      	str	r3, [r7, #48]	; 0x30
 801459c:	e015      	b.n	80145ca <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801459e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145a0:	695a      	ldr	r2, [r3, #20]
 80145a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145a4:	68db      	ldr	r3, [r3, #12]
 80145a6:	429a      	cmp	r2, r3
 80145a8:	d10c      	bne.n	80145c4 <ip4_reass+0xdc>
 80145aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145ac:	699a      	ldr	r2, [r3, #24]
 80145ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145b0:	691b      	ldr	r3, [r3, #16]
 80145b2:	429a      	cmp	r2, r3
 80145b4:	d106      	bne.n	80145c4 <ip4_reass+0xdc>
 80145b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145b8:	899a      	ldrh	r2, [r3, #12]
 80145ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145bc:	889b      	ldrh	r3, [r3, #4]
 80145be:	b29b      	uxth	r3, r3
 80145c0:	429a      	cmp	r2, r3
 80145c2:	d006      	beq.n	80145d2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80145c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	633b      	str	r3, [r7, #48]	; 0x30
 80145ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d1e6      	bne.n	801459e <ip4_reass+0xb6>
 80145d0:	e000      	b.n	80145d4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80145d2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80145d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d109      	bne.n	80145ee <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80145da:	8c3b      	ldrh	r3, [r7, #32]
 80145dc:	4619      	mov	r1, r3
 80145de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80145e0:	f7ff fdb0 	bl	8014144 <ip_reass_enqueue_new_datagram>
 80145e4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80145e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d11c      	bne.n	8014626 <ip4_reass+0x13e>
      goto nullreturn;
 80145ec:	e109      	b.n	8014802 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80145ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145f0:	88db      	ldrh	r3, [r3, #6]
 80145f2:	b29b      	uxth	r3, r3
 80145f4:	4618      	mov	r0, r3
 80145f6:	f7f5 fe01 	bl	800a1fc <lwip_htons>
 80145fa:	4603      	mov	r3, r0
 80145fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014600:	2b00      	cmp	r3, #0
 8014602:	d110      	bne.n	8014626 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8014604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014606:	89db      	ldrh	r3, [r3, #14]
 8014608:	4618      	mov	r0, r3
 801460a:	f7f5 fdf7 	bl	800a1fc <lwip_htons>
 801460e:	4603      	mov	r3, r0
 8014610:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014614:	2b00      	cmp	r3, #0
 8014616:	d006      	beq.n	8014626 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801461a:	3308      	adds	r3, #8
 801461c:	2214      	movs	r2, #20
 801461e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014620:	4618      	mov	r0, r3
 8014622:	f000 fb9d 	bl	8014d60 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8014626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014628:	88db      	ldrh	r3, [r3, #6]
 801462a:	b29b      	uxth	r3, r3
 801462c:	f003 0320 	and.w	r3, r3, #32
 8014630:	2b00      	cmp	r3, #0
 8014632:	bf0c      	ite	eq
 8014634:	2301      	moveq	r3, #1
 8014636:	2300      	movne	r3, #0
 8014638:	b2db      	uxtb	r3, r3
 801463a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801463c:	69fb      	ldr	r3, [r7, #28]
 801463e:	2b00      	cmp	r3, #0
 8014640:	d00e      	beq.n	8014660 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8014642:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014644:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014646:	4413      	add	r3, r2
 8014648:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801464a:	8b7a      	ldrh	r2, [r7, #26]
 801464c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801464e:	429a      	cmp	r2, r3
 8014650:	f0c0 80a0 	bcc.w	8014794 <ip4_reass+0x2ac>
 8014654:	8b7b      	ldrh	r3, [r7, #26]
 8014656:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801465a:	4293      	cmp	r3, r2
 801465c:	f200 809a 	bhi.w	8014794 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8014660:	69fa      	ldr	r2, [r7, #28]
 8014662:	6879      	ldr	r1, [r7, #4]
 8014664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014666:	f7ff fdd5 	bl	8014214 <ip_reass_chain_frag_into_datagram_and_validate>
 801466a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801466c:	697b      	ldr	r3, [r7, #20]
 801466e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014672:	f000 8091 	beq.w	8014798 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8014676:	4b5b      	ldr	r3, [pc, #364]	; (80147e4 <ip4_reass+0x2fc>)
 8014678:	881a      	ldrh	r2, [r3, #0]
 801467a:	8c3b      	ldrh	r3, [r7, #32]
 801467c:	4413      	add	r3, r2
 801467e:	b29a      	uxth	r2, r3
 8014680:	4b58      	ldr	r3, [pc, #352]	; (80147e4 <ip4_reass+0x2fc>)
 8014682:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8014684:	69fb      	ldr	r3, [r7, #28]
 8014686:	2b00      	cmp	r3, #0
 8014688:	d00d      	beq.n	80146a6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801468a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801468c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801468e:	4413      	add	r3, r2
 8014690:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8014692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014694:	8a7a      	ldrh	r2, [r7, #18]
 8014696:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801469a:	7f9b      	ldrb	r3, [r3, #30]
 801469c:	f043 0301 	orr.w	r3, r3, #1
 80146a0:	b2da      	uxtb	r2, r3
 80146a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146a4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80146a6:	697b      	ldr	r3, [r7, #20]
 80146a8:	2b01      	cmp	r3, #1
 80146aa:	d171      	bne.n	8014790 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80146ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146ae:	8b9b      	ldrh	r3, [r3, #28]
 80146b0:	3314      	adds	r3, #20
 80146b2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80146b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146b6:	685b      	ldr	r3, [r3, #4]
 80146b8:	685b      	ldr	r3, [r3, #4]
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80146be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146c0:	685b      	ldr	r3, [r3, #4]
 80146c2:	685b      	ldr	r3, [r3, #4]
 80146c4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80146c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146c8:	3308      	adds	r3, #8
 80146ca:	2214      	movs	r2, #20
 80146cc:	4619      	mov	r1, r3
 80146ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80146d0:	f000 fb46 	bl	8014d60 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80146d4:	8a3b      	ldrh	r3, [r7, #16]
 80146d6:	4618      	mov	r0, r3
 80146d8:	f7f5 fd90 	bl	800a1fc <lwip_htons>
 80146dc:	4603      	mov	r3, r0
 80146de:	461a      	mov	r2, r3
 80146e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146e2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80146e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146e6:	2200      	movs	r2, #0
 80146e8:	719a      	strb	r2, [r3, #6]
 80146ea:	2200      	movs	r2, #0
 80146ec:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80146ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146f0:	2200      	movs	r2, #0
 80146f2:	729a      	strb	r2, [r3, #10]
 80146f4:	2200      	movs	r2, #0
 80146f6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80146f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146fa:	685b      	ldr	r3, [r3, #4]
 80146fc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80146fe:	e00d      	b.n	801471c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8014700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014702:	685b      	ldr	r3, [r3, #4]
 8014704:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8014706:	2114      	movs	r1, #20
 8014708:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801470a:	f7f7 f907 	bl	800b91c <pbuf_remove_header>
      pbuf_cat(p, r);
 801470e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014710:	6878      	ldr	r0, [r7, #4]
 8014712:	f7f7 fa4b 	bl	800bbac <pbuf_cat>
      r = iprh->next_pbuf;
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801471c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801471e:	2b00      	cmp	r3, #0
 8014720:	d1ee      	bne.n	8014700 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8014722:	4b31      	ldr	r3, [pc, #196]	; (80147e8 <ip4_reass+0x300>)
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014728:	429a      	cmp	r2, r3
 801472a:	d102      	bne.n	8014732 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801472c:	2300      	movs	r3, #0
 801472e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014730:	e010      	b.n	8014754 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014732:	4b2d      	ldr	r3, [pc, #180]	; (80147e8 <ip4_reass+0x300>)
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014738:	e007      	b.n	801474a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801473a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014740:	429a      	cmp	r2, r3
 8014742:	d006      	beq.n	8014752 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	62fb      	str	r3, [r7, #44]	; 0x2c
 801474a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801474c:	2b00      	cmp	r3, #0
 801474e:	d1f4      	bne.n	801473a <ip4_reass+0x252>
 8014750:	e000      	b.n	8014754 <ip4_reass+0x26c>
          break;
 8014752:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8014754:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014756:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014758:	f7ff fd2e 	bl	80141b8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801475c:	6878      	ldr	r0, [r7, #4]
 801475e:	f7f7 f9eb 	bl	800bb38 <pbuf_clen>
 8014762:	4603      	mov	r3, r0
 8014764:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8014766:	4b1f      	ldr	r3, [pc, #124]	; (80147e4 <ip4_reass+0x2fc>)
 8014768:	881b      	ldrh	r3, [r3, #0]
 801476a:	8c3a      	ldrh	r2, [r7, #32]
 801476c:	429a      	cmp	r2, r3
 801476e:	d906      	bls.n	801477e <ip4_reass+0x296>
 8014770:	4b1e      	ldr	r3, [pc, #120]	; (80147ec <ip4_reass+0x304>)
 8014772:	f240 229b 	movw	r2, #667	; 0x29b
 8014776:	491e      	ldr	r1, [pc, #120]	; (80147f0 <ip4_reass+0x308>)
 8014778:	481e      	ldr	r0, [pc, #120]	; (80147f4 <ip4_reass+0x30c>)
 801477a:	f000 fb07 	bl	8014d8c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801477e:	4b19      	ldr	r3, [pc, #100]	; (80147e4 <ip4_reass+0x2fc>)
 8014780:	881a      	ldrh	r2, [r3, #0]
 8014782:	8c3b      	ldrh	r3, [r7, #32]
 8014784:	1ad3      	subs	r3, r2, r3
 8014786:	b29a      	uxth	r2, r3
 8014788:	4b16      	ldr	r3, [pc, #88]	; (80147e4 <ip4_reass+0x2fc>)
 801478a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	e03c      	b.n	801480a <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8014790:	2300      	movs	r3, #0
 8014792:	e03a      	b.n	801480a <ip4_reass+0x322>
      goto nullreturn_ipr;
 8014794:	bf00      	nop
 8014796:	e000      	b.n	801479a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8014798:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801479c:	2b00      	cmp	r3, #0
 801479e:	d106      	bne.n	80147ae <ip4_reass+0x2c6>
 80147a0:	4b12      	ldr	r3, [pc, #72]	; (80147ec <ip4_reass+0x304>)
 80147a2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80147a6:	4914      	ldr	r1, [pc, #80]	; (80147f8 <ip4_reass+0x310>)
 80147a8:	4812      	ldr	r0, [pc, #72]	; (80147f4 <ip4_reass+0x30c>)
 80147aa:	f000 faef 	bl	8014d8c <iprintf>
  if (ipr->p == NULL) {
 80147ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147b0:	685b      	ldr	r3, [r3, #4]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d124      	bne.n	8014800 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80147b6:	4b0c      	ldr	r3, [pc, #48]	; (80147e8 <ip4_reass+0x300>)
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80147bc:	429a      	cmp	r2, r3
 80147be:	d006      	beq.n	80147ce <ip4_reass+0x2e6>
 80147c0:	4b0a      	ldr	r3, [pc, #40]	; (80147ec <ip4_reass+0x304>)
 80147c2:	f240 22ab 	movw	r2, #683	; 0x2ab
 80147c6:	490d      	ldr	r1, [pc, #52]	; (80147fc <ip4_reass+0x314>)
 80147c8:	480a      	ldr	r0, [pc, #40]	; (80147f4 <ip4_reass+0x30c>)
 80147ca:	f000 fadf 	bl	8014d8c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80147ce:	2100      	movs	r1, #0
 80147d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80147d2:	f7ff fcf1 	bl	80141b8 <ip_reass_dequeue_datagram>
 80147d6:	e014      	b.n	8014802 <ip4_reass+0x31a>
    goto nullreturn;
 80147d8:	bf00      	nop
 80147da:	e012      	b.n	8014802 <ip4_reass+0x31a>
    goto nullreturn;
 80147dc:	bf00      	nop
 80147de:	e010      	b.n	8014802 <ip4_reass+0x31a>
      goto nullreturn;
 80147e0:	bf00      	nop
 80147e2:	e00e      	b.n	8014802 <ip4_reass+0x31a>
 80147e4:	2400023c 	.word	0x2400023c
 80147e8:	24000238 	.word	0x24000238
 80147ec:	08018628 	.word	0x08018628
 80147f0:	08018798 	.word	0x08018798
 80147f4:	08018670 	.word	0x08018670
 80147f8:	080187b4 	.word	0x080187b4
 80147fc:	080187c0 	.word	0x080187c0
  }

nullreturn:
 8014800:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8014802:	6878      	ldr	r0, [r7, #4]
 8014804:	f7f7 f910 	bl	800ba28 <pbuf_free>
  return NULL;
 8014808:	2300      	movs	r3, #0
}
 801480a:	4618      	mov	r0, r3
 801480c:	3738      	adds	r7, #56	; 0x38
 801480e:	46bd      	mov	sp, r7
 8014810:	bd80      	pop	{r7, pc}
 8014812:	bf00      	nop

08014814 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014814:	b580      	push	{r7, lr}
 8014816:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014818:	2005      	movs	r0, #5
 801481a:	f7f6 fa1f 	bl	800ac5c <memp_malloc>
 801481e:	4603      	mov	r3, r0
}
 8014820:	4618      	mov	r0, r3
 8014822:	bd80      	pop	{r7, pc}

08014824 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014824:	b580      	push	{r7, lr}
 8014826:	b082      	sub	sp, #8
 8014828:	af00      	add	r7, sp, #0
 801482a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d106      	bne.n	8014840 <ip_frag_free_pbuf_custom_ref+0x1c>
 8014832:	4b07      	ldr	r3, [pc, #28]	; (8014850 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014834:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8014838:	4906      	ldr	r1, [pc, #24]	; (8014854 <ip_frag_free_pbuf_custom_ref+0x30>)
 801483a:	4807      	ldr	r0, [pc, #28]	; (8014858 <ip_frag_free_pbuf_custom_ref+0x34>)
 801483c:	f000 faa6 	bl	8014d8c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014840:	6879      	ldr	r1, [r7, #4]
 8014842:	2005      	movs	r0, #5
 8014844:	f7f6 fa7a 	bl	800ad3c <memp_free>
}
 8014848:	bf00      	nop
 801484a:	3708      	adds	r7, #8
 801484c:	46bd      	mov	sp, r7
 801484e:	bd80      	pop	{r7, pc}
 8014850:	08018628 	.word	0x08018628
 8014854:	080187e0 	.word	0x080187e0
 8014858:	08018670 	.word	0x08018670

0801485c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801485c:	b580      	push	{r7, lr}
 801485e:	b084      	sub	sp, #16
 8014860:	af00      	add	r7, sp, #0
 8014862:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	2b00      	cmp	r3, #0
 801486c:	d106      	bne.n	801487c <ipfrag_free_pbuf_custom+0x20>
 801486e:	4b11      	ldr	r3, [pc, #68]	; (80148b4 <ipfrag_free_pbuf_custom+0x58>)
 8014870:	f240 22ce 	movw	r2, #718	; 0x2ce
 8014874:	4910      	ldr	r1, [pc, #64]	; (80148b8 <ipfrag_free_pbuf_custom+0x5c>)
 8014876:	4811      	ldr	r0, [pc, #68]	; (80148bc <ipfrag_free_pbuf_custom+0x60>)
 8014878:	f000 fa88 	bl	8014d8c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801487c:	68fa      	ldr	r2, [r7, #12]
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	429a      	cmp	r2, r3
 8014882:	d006      	beq.n	8014892 <ipfrag_free_pbuf_custom+0x36>
 8014884:	4b0b      	ldr	r3, [pc, #44]	; (80148b4 <ipfrag_free_pbuf_custom+0x58>)
 8014886:	f240 22cf 	movw	r2, #719	; 0x2cf
 801488a:	490d      	ldr	r1, [pc, #52]	; (80148c0 <ipfrag_free_pbuf_custom+0x64>)
 801488c:	480b      	ldr	r0, [pc, #44]	; (80148bc <ipfrag_free_pbuf_custom+0x60>)
 801488e:	f000 fa7d 	bl	8014d8c <iprintf>
  if (pcr->original != NULL) {
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	695b      	ldr	r3, [r3, #20]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d004      	beq.n	80148a4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	695b      	ldr	r3, [r3, #20]
 801489e:	4618      	mov	r0, r3
 80148a0:	f7f7 f8c2 	bl	800ba28 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80148a4:	68f8      	ldr	r0, [r7, #12]
 80148a6:	f7ff ffbd 	bl	8014824 <ip_frag_free_pbuf_custom_ref>
}
 80148aa:	bf00      	nop
 80148ac:	3710      	adds	r7, #16
 80148ae:	46bd      	mov	sp, r7
 80148b0:	bd80      	pop	{r7, pc}
 80148b2:	bf00      	nop
 80148b4:	08018628 	.word	0x08018628
 80148b8:	080187ec 	.word	0x080187ec
 80148bc:	08018670 	.word	0x08018670
 80148c0:	080187f8 	.word	0x080187f8

080148c4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80148c4:	b580      	push	{r7, lr}
 80148c6:	b094      	sub	sp, #80	; 0x50
 80148c8:	af02      	add	r7, sp, #8
 80148ca:	60f8      	str	r0, [r7, #12]
 80148cc:	60b9      	str	r1, [r7, #8]
 80148ce:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80148d0:	2300      	movs	r3, #0
 80148d2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80148d6:	68bb      	ldr	r3, [r7, #8]
 80148d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80148da:	3b14      	subs	r3, #20
 80148dc:	2b00      	cmp	r3, #0
 80148de:	da00      	bge.n	80148e2 <ip4_frag+0x1e>
 80148e0:	3307      	adds	r3, #7
 80148e2:	10db      	asrs	r3, r3, #3
 80148e4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80148e6:	2314      	movs	r3, #20
 80148e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	685b      	ldr	r3, [r3, #4]
 80148ee:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80148f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148f2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80148f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148f6:	781b      	ldrb	r3, [r3, #0]
 80148f8:	f003 030f 	and.w	r3, r3, #15
 80148fc:	b2db      	uxtb	r3, r3
 80148fe:	009b      	lsls	r3, r3, #2
 8014900:	b2db      	uxtb	r3, r3
 8014902:	2b14      	cmp	r3, #20
 8014904:	d002      	beq.n	801490c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8014906:	f06f 0305 	mvn.w	r3, #5
 801490a:	e110      	b.n	8014b2e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	895b      	ldrh	r3, [r3, #10]
 8014910:	2b13      	cmp	r3, #19
 8014912:	d809      	bhi.n	8014928 <ip4_frag+0x64>
 8014914:	4b88      	ldr	r3, [pc, #544]	; (8014b38 <ip4_frag+0x274>)
 8014916:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801491a:	4988      	ldr	r1, [pc, #544]	; (8014b3c <ip4_frag+0x278>)
 801491c:	4888      	ldr	r0, [pc, #544]	; (8014b40 <ip4_frag+0x27c>)
 801491e:	f000 fa35 	bl	8014d8c <iprintf>
 8014922:	f06f 0305 	mvn.w	r3, #5
 8014926:	e102      	b.n	8014b2e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801492a:	88db      	ldrh	r3, [r3, #6]
 801492c:	b29b      	uxth	r3, r3
 801492e:	4618      	mov	r0, r3
 8014930:	f7f5 fc64 	bl	800a1fc <lwip_htons>
 8014934:	4603      	mov	r3, r0
 8014936:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8014938:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801493a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801493e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8014942:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014944:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014948:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	891b      	ldrh	r3, [r3, #8]
 801494e:	3b14      	subs	r3, #20
 8014950:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8014954:	e0e1      	b.n	8014b1a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8014956:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014958:	00db      	lsls	r3, r3, #3
 801495a:	b29b      	uxth	r3, r3
 801495c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014960:	4293      	cmp	r3, r2
 8014962:	bf28      	it	cs
 8014964:	4613      	movcs	r3, r2
 8014966:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014968:	f44f 7220 	mov.w	r2, #640	; 0x280
 801496c:	2114      	movs	r1, #20
 801496e:	200e      	movs	r0, #14
 8014970:	f7f6 fd76 	bl	800b460 <pbuf_alloc>
 8014974:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8014976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014978:	2b00      	cmp	r3, #0
 801497a:	f000 80d5 	beq.w	8014b28 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014980:	895b      	ldrh	r3, [r3, #10]
 8014982:	2b13      	cmp	r3, #19
 8014984:	d806      	bhi.n	8014994 <ip4_frag+0xd0>
 8014986:	4b6c      	ldr	r3, [pc, #432]	; (8014b38 <ip4_frag+0x274>)
 8014988:	f44f 7249 	mov.w	r2, #804	; 0x324
 801498c:	496d      	ldr	r1, [pc, #436]	; (8014b44 <ip4_frag+0x280>)
 801498e:	486c      	ldr	r0, [pc, #432]	; (8014b40 <ip4_frag+0x27c>)
 8014990:	f000 f9fc 	bl	8014d8c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014996:	685b      	ldr	r3, [r3, #4]
 8014998:	2214      	movs	r2, #20
 801499a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801499c:	4618      	mov	r0, r3
 801499e:	f000 f9df 	bl	8014d60 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80149a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149a4:	685b      	ldr	r3, [r3, #4]
 80149a6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80149a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80149aa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80149ae:	e064      	b.n	8014a7a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	895a      	ldrh	r2, [r3, #10]
 80149b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80149b6:	1ad3      	subs	r3, r2, r3
 80149b8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	895b      	ldrh	r3, [r3, #10]
 80149be:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80149c0:	429a      	cmp	r2, r3
 80149c2:	d906      	bls.n	80149d2 <ip4_frag+0x10e>
 80149c4:	4b5c      	ldr	r3, [pc, #368]	; (8014b38 <ip4_frag+0x274>)
 80149c6:	f240 322d 	movw	r2, #813	; 0x32d
 80149ca:	495f      	ldr	r1, [pc, #380]	; (8014b48 <ip4_frag+0x284>)
 80149cc:	485c      	ldr	r0, [pc, #368]	; (8014b40 <ip4_frag+0x27c>)
 80149ce:	f000 f9dd 	bl	8014d8c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80149d2:	8bfa      	ldrh	r2, [r7, #30]
 80149d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80149d8:	4293      	cmp	r3, r2
 80149da:	bf28      	it	cs
 80149dc:	4613      	movcs	r3, r2
 80149de:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80149e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d105      	bne.n	80149f6 <ip4_frag+0x132>
        poff = 0;
 80149ea:	2300      	movs	r3, #0
 80149ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	681b      	ldr	r3, [r3, #0]
 80149f2:	60fb      	str	r3, [r7, #12]
        continue;
 80149f4:	e041      	b.n	8014a7a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80149f6:	f7ff ff0d 	bl	8014814 <ip_frag_alloc_pbuf_custom_ref>
 80149fa:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80149fc:	69bb      	ldr	r3, [r7, #24]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d103      	bne.n	8014a0a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8014a02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a04:	f7f7 f810 	bl	800ba28 <pbuf_free>
        goto memerr;
 8014a08:	e08f      	b.n	8014b2a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014a0a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014a10:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014a12:	4413      	add	r3, r2
 8014a14:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8014a18:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8014a1c:	9201      	str	r2, [sp, #4]
 8014a1e:	9300      	str	r3, [sp, #0]
 8014a20:	4603      	mov	r3, r0
 8014a22:	2241      	movs	r2, #65	; 0x41
 8014a24:	2000      	movs	r0, #0
 8014a26:	f7f6 fe45 	bl	800b6b4 <pbuf_alloced_custom>
 8014a2a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014a2c:	697b      	ldr	r3, [r7, #20]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d106      	bne.n	8014a40 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8014a32:	69b8      	ldr	r0, [r7, #24]
 8014a34:	f7ff fef6 	bl	8014824 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014a38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a3a:	f7f6 fff5 	bl	800ba28 <pbuf_free>
        goto memerr;
 8014a3e:	e074      	b.n	8014b2a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8014a40:	68f8      	ldr	r0, [r7, #12]
 8014a42:	f7f7 f891 	bl	800bb68 <pbuf_ref>
      pcr->original = p;
 8014a46:	69bb      	ldr	r3, [r7, #24]
 8014a48:	68fa      	ldr	r2, [r7, #12]
 8014a4a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014a4c:	69bb      	ldr	r3, [r7, #24]
 8014a4e:	4a3f      	ldr	r2, [pc, #252]	; (8014b4c <ip4_frag+0x288>)
 8014a50:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8014a52:	6979      	ldr	r1, [r7, #20]
 8014a54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a56:	f7f7 f8a9 	bl	800bbac <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014a5a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8014a5e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014a62:	1ad3      	subs	r3, r2, r3
 8014a64:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8014a68:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d004      	beq.n	8014a7a <ip4_frag+0x1b6>
        poff = 0;
 8014a70:	2300      	movs	r3, #0
 8014a72:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014a7a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d196      	bne.n	80149b0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8014a82:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014a84:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014a88:	4413      	add	r3, r2
 8014a8a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014a8c:	68bb      	ldr	r3, [r7, #8]
 8014a8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014a90:	f1a3 0213 	sub.w	r2, r3, #19
 8014a94:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014a98:	429a      	cmp	r2, r3
 8014a9a:	bfcc      	ite	gt
 8014a9c:	2301      	movgt	r3, #1
 8014a9e:	2300      	movle	r3, #0
 8014aa0:	b2db      	uxtb	r3, r3
 8014aa2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014aa4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014aa8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014aac:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8014aae:	6a3b      	ldr	r3, [r7, #32]
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d002      	beq.n	8014aba <ip4_frag+0x1f6>
 8014ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d003      	beq.n	8014ac2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8014aba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014abc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014ac0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014ac2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014ac4:	4618      	mov	r0, r3
 8014ac6:	f7f5 fb99 	bl	800a1fc <lwip_htons>
 8014aca:	4603      	mov	r3, r0
 8014acc:	461a      	mov	r2, r3
 8014ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ad0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014ad2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014ad4:	3314      	adds	r3, #20
 8014ad6:	b29b      	uxth	r3, r3
 8014ad8:	4618      	mov	r0, r3
 8014ada:	f7f5 fb8f 	bl	800a1fc <lwip_htons>
 8014ade:	4603      	mov	r3, r0
 8014ae0:	461a      	mov	r2, r3
 8014ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ae4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8014ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ae8:	2200      	movs	r2, #0
 8014aea:	729a      	strb	r2, [r3, #10]
 8014aec:	2200      	movs	r2, #0
 8014aee:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014af0:	68bb      	ldr	r3, [r7, #8]
 8014af2:	695b      	ldr	r3, [r3, #20]
 8014af4:	687a      	ldr	r2, [r7, #4]
 8014af6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014af8:	68b8      	ldr	r0, [r7, #8]
 8014afa:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014afc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014afe:	f7f6 ff93 	bl	800ba28 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8014b02:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014b06:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014b08:	1ad3      	subs	r3, r2, r3
 8014b0a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8014b0e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8014b12:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014b14:	4413      	add	r3, r2
 8014b16:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8014b1a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	f47f af19 	bne.w	8014956 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014b24:	2300      	movs	r3, #0
 8014b26:	e002      	b.n	8014b2e <ip4_frag+0x26a>
      goto memerr;
 8014b28:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8014b2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014b2e:	4618      	mov	r0, r3
 8014b30:	3748      	adds	r7, #72	; 0x48
 8014b32:	46bd      	mov	sp, r7
 8014b34:	bd80      	pop	{r7, pc}
 8014b36:	bf00      	nop
 8014b38:	08018628 	.word	0x08018628
 8014b3c:	08018804 	.word	0x08018804
 8014b40:	08018670 	.word	0x08018670
 8014b44:	08018820 	.word	0x08018820
 8014b48:	08018840 	.word	0x08018840
 8014b4c:	0801485d 	.word	0x0801485d

08014b50 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014b50:	b580      	push	{r7, lr}
 8014b52:	b086      	sub	sp, #24
 8014b54:	af00      	add	r7, sp, #0
 8014b56:	6078      	str	r0, [r7, #4]
 8014b58:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014b5a:	230e      	movs	r3, #14
 8014b5c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	895b      	ldrh	r3, [r3, #10]
 8014b62:	2b0e      	cmp	r3, #14
 8014b64:	d96e      	bls.n	8014c44 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	7bdb      	ldrb	r3, [r3, #15]
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d106      	bne.n	8014b7c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8014b6e:	683b      	ldr	r3, [r7, #0]
 8014b70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014b74:	3301      	adds	r3, #1
 8014b76:	b2da      	uxtb	r2, r3
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	685b      	ldr	r3, [r3, #4]
 8014b80:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8014b82:	693b      	ldr	r3, [r7, #16]
 8014b84:	7b1a      	ldrb	r2, [r3, #12]
 8014b86:	7b5b      	ldrb	r3, [r3, #13]
 8014b88:	021b      	lsls	r3, r3, #8
 8014b8a:	4313      	orrs	r3, r2
 8014b8c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014b8e:	693b      	ldr	r3, [r7, #16]
 8014b90:	781b      	ldrb	r3, [r3, #0]
 8014b92:	f003 0301 	and.w	r3, r3, #1
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d023      	beq.n	8014be2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014b9a:	693b      	ldr	r3, [r7, #16]
 8014b9c:	781b      	ldrb	r3, [r3, #0]
 8014b9e:	2b01      	cmp	r3, #1
 8014ba0:	d10f      	bne.n	8014bc2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014ba2:	693b      	ldr	r3, [r7, #16]
 8014ba4:	785b      	ldrb	r3, [r3, #1]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d11b      	bne.n	8014be2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014baa:	693b      	ldr	r3, [r7, #16]
 8014bac:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014bae:	2b5e      	cmp	r3, #94	; 0x5e
 8014bb0:	d117      	bne.n	8014be2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	7b5b      	ldrb	r3, [r3, #13]
 8014bb6:	f043 0310 	orr.w	r3, r3, #16
 8014bba:	b2da      	uxtb	r2, r3
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	735a      	strb	r2, [r3, #13]
 8014bc0:	e00f      	b.n	8014be2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014bc2:	693b      	ldr	r3, [r7, #16]
 8014bc4:	2206      	movs	r2, #6
 8014bc6:	4928      	ldr	r1, [pc, #160]	; (8014c68 <ethernet_input+0x118>)
 8014bc8:	4618      	mov	r0, r3
 8014bca:	f000 f8bb 	bl	8014d44 <memcmp>
 8014bce:	4603      	mov	r3, r0
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d106      	bne.n	8014be2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	7b5b      	ldrb	r3, [r3, #13]
 8014bd8:	f043 0308 	orr.w	r3, r3, #8
 8014bdc:	b2da      	uxtb	r2, r3
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014be2:	89fb      	ldrh	r3, [r7, #14]
 8014be4:	2b08      	cmp	r3, #8
 8014be6:	d003      	beq.n	8014bf0 <ethernet_input+0xa0>
 8014be8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8014bec:	d014      	beq.n	8014c18 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014bee:	e032      	b.n	8014c56 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014bf0:	683b      	ldr	r3, [r7, #0]
 8014bf2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014bf6:	f003 0308 	and.w	r3, r3, #8
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d024      	beq.n	8014c48 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014bfe:	8afb      	ldrh	r3, [r7, #22]
 8014c00:	4619      	mov	r1, r3
 8014c02:	6878      	ldr	r0, [r7, #4]
 8014c04:	f7f6 fe8a 	bl	800b91c <pbuf_remove_header>
 8014c08:	4603      	mov	r3, r0
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d11e      	bne.n	8014c4c <ethernet_input+0xfc>
        ip4_input(p, netif);
 8014c0e:	6839      	ldr	r1, [r7, #0]
 8014c10:	6878      	ldr	r0, [r7, #4]
 8014c12:	f7fe fe95 	bl	8013940 <ip4_input>
      break;
 8014c16:	e013      	b.n	8014c40 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014c18:	683b      	ldr	r3, [r7, #0]
 8014c1a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014c1e:	f003 0308 	and.w	r3, r3, #8
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d014      	beq.n	8014c50 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014c26:	8afb      	ldrh	r3, [r7, #22]
 8014c28:	4619      	mov	r1, r3
 8014c2a:	6878      	ldr	r0, [r7, #4]
 8014c2c:	f7f6 fe76 	bl	800b91c <pbuf_remove_header>
 8014c30:	4603      	mov	r3, r0
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d10e      	bne.n	8014c54 <ethernet_input+0x104>
        etharp_input(p, netif);
 8014c36:	6839      	ldr	r1, [r7, #0]
 8014c38:	6878      	ldr	r0, [r7, #4]
 8014c3a:	f7fe f80f 	bl	8012c5c <etharp_input>
      break;
 8014c3e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014c40:	2300      	movs	r3, #0
 8014c42:	e00c      	b.n	8014c5e <ethernet_input+0x10e>
    goto free_and_return;
 8014c44:	bf00      	nop
 8014c46:	e006      	b.n	8014c56 <ethernet_input+0x106>
        goto free_and_return;
 8014c48:	bf00      	nop
 8014c4a:	e004      	b.n	8014c56 <ethernet_input+0x106>
        goto free_and_return;
 8014c4c:	bf00      	nop
 8014c4e:	e002      	b.n	8014c56 <ethernet_input+0x106>
        goto free_and_return;
 8014c50:	bf00      	nop
 8014c52:	e000      	b.n	8014c56 <ethernet_input+0x106>
        goto free_and_return;
 8014c54:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014c56:	6878      	ldr	r0, [r7, #4]
 8014c58:	f7f6 fee6 	bl	800ba28 <pbuf_free>
  return ERR_OK;
 8014c5c:	2300      	movs	r3, #0
}
 8014c5e:	4618      	mov	r0, r3
 8014c60:	3718      	adds	r7, #24
 8014c62:	46bd      	mov	sp, r7
 8014c64:	bd80      	pop	{r7, pc}
 8014c66:	bf00      	nop
 8014c68:	080197dc 	.word	0x080197dc

08014c6c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	b086      	sub	sp, #24
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	60f8      	str	r0, [r7, #12]
 8014c74:	60b9      	str	r1, [r7, #8]
 8014c76:	607a      	str	r2, [r7, #4]
 8014c78:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014c7a:	8c3b      	ldrh	r3, [r7, #32]
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	f7f5 fabd 	bl	800a1fc <lwip_htons>
 8014c82:	4603      	mov	r3, r0
 8014c84:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014c86:	210e      	movs	r1, #14
 8014c88:	68b8      	ldr	r0, [r7, #8]
 8014c8a:	f7f6 fe37 	bl	800b8fc <pbuf_add_header>
 8014c8e:	4603      	mov	r3, r0
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d125      	bne.n	8014ce0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014c94:	68bb      	ldr	r3, [r7, #8]
 8014c96:	685b      	ldr	r3, [r3, #4]
 8014c98:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014c9a:	693b      	ldr	r3, [r7, #16]
 8014c9c:	8afa      	ldrh	r2, [r7, #22]
 8014c9e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014ca0:	693b      	ldr	r3, [r7, #16]
 8014ca2:	2206      	movs	r2, #6
 8014ca4:	6839      	ldr	r1, [r7, #0]
 8014ca6:	4618      	mov	r0, r3
 8014ca8:	f000 f85a 	bl	8014d60 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014cac:	693b      	ldr	r3, [r7, #16]
 8014cae:	3306      	adds	r3, #6
 8014cb0:	2206      	movs	r2, #6
 8014cb2:	6879      	ldr	r1, [r7, #4]
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	f000 f853 	bl	8014d60 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014cc0:	2b06      	cmp	r3, #6
 8014cc2:	d006      	beq.n	8014cd2 <ethernet_output+0x66>
 8014cc4:	4b0a      	ldr	r3, [pc, #40]	; (8014cf0 <ethernet_output+0x84>)
 8014cc6:	f44f 7299 	mov.w	r2, #306	; 0x132
 8014cca:	490a      	ldr	r1, [pc, #40]	; (8014cf4 <ethernet_output+0x88>)
 8014ccc:	480a      	ldr	r0, [pc, #40]	; (8014cf8 <ethernet_output+0x8c>)
 8014cce:	f000 f85d 	bl	8014d8c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	699b      	ldr	r3, [r3, #24]
 8014cd6:	68b9      	ldr	r1, [r7, #8]
 8014cd8:	68f8      	ldr	r0, [r7, #12]
 8014cda:	4798      	blx	r3
 8014cdc:	4603      	mov	r3, r0
 8014cde:	e002      	b.n	8014ce6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014ce0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014ce2:	f06f 0301 	mvn.w	r3, #1
}
 8014ce6:	4618      	mov	r0, r3
 8014ce8:	3718      	adds	r7, #24
 8014cea:	46bd      	mov	sp, r7
 8014cec:	bd80      	pop	{r7, pc}
 8014cee:	bf00      	nop
 8014cf0:	08018850 	.word	0x08018850
 8014cf4:	08018888 	.word	0x08018888
 8014cf8:	080188bc 	.word	0x080188bc

08014cfc <__libc_init_array>:
 8014cfc:	b570      	push	{r4, r5, r6, lr}
 8014cfe:	4d0d      	ldr	r5, [pc, #52]	; (8014d34 <__libc_init_array+0x38>)
 8014d00:	4c0d      	ldr	r4, [pc, #52]	; (8014d38 <__libc_init_array+0x3c>)
 8014d02:	1b64      	subs	r4, r4, r5
 8014d04:	10a4      	asrs	r4, r4, #2
 8014d06:	2600      	movs	r6, #0
 8014d08:	42a6      	cmp	r6, r4
 8014d0a:	d109      	bne.n	8014d20 <__libc_init_array+0x24>
 8014d0c:	4d0b      	ldr	r5, [pc, #44]	; (8014d3c <__libc_init_array+0x40>)
 8014d0e:	4c0c      	ldr	r4, [pc, #48]	; (8014d40 <__libc_init_array+0x44>)
 8014d10:	f001 f872 	bl	8015df8 <_init>
 8014d14:	1b64      	subs	r4, r4, r5
 8014d16:	10a4      	asrs	r4, r4, #2
 8014d18:	2600      	movs	r6, #0
 8014d1a:	42a6      	cmp	r6, r4
 8014d1c:	d105      	bne.n	8014d2a <__libc_init_array+0x2e>
 8014d1e:	bd70      	pop	{r4, r5, r6, pc}
 8014d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8014d24:	4798      	blx	r3
 8014d26:	3601      	adds	r6, #1
 8014d28:	e7ee      	b.n	8014d08 <__libc_init_array+0xc>
 8014d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8014d2e:	4798      	blx	r3
 8014d30:	3601      	adds	r6, #1
 8014d32:	e7f2      	b.n	8014d1a <__libc_init_array+0x1e>
 8014d34:	08019940 	.word	0x08019940
 8014d38:	08019940 	.word	0x08019940
 8014d3c:	08019940 	.word	0x08019940
 8014d40:	08019944 	.word	0x08019944

08014d44 <memcmp>:
 8014d44:	b530      	push	{r4, r5, lr}
 8014d46:	3901      	subs	r1, #1
 8014d48:	2400      	movs	r4, #0
 8014d4a:	42a2      	cmp	r2, r4
 8014d4c:	d101      	bne.n	8014d52 <memcmp+0xe>
 8014d4e:	2000      	movs	r0, #0
 8014d50:	e005      	b.n	8014d5e <memcmp+0x1a>
 8014d52:	5d03      	ldrb	r3, [r0, r4]
 8014d54:	3401      	adds	r4, #1
 8014d56:	5d0d      	ldrb	r5, [r1, r4]
 8014d58:	42ab      	cmp	r3, r5
 8014d5a:	d0f6      	beq.n	8014d4a <memcmp+0x6>
 8014d5c:	1b58      	subs	r0, r3, r5
 8014d5e:	bd30      	pop	{r4, r5, pc}

08014d60 <memcpy>:
 8014d60:	440a      	add	r2, r1
 8014d62:	4291      	cmp	r1, r2
 8014d64:	f100 33ff 	add.w	r3, r0, #4294967295
 8014d68:	d100      	bne.n	8014d6c <memcpy+0xc>
 8014d6a:	4770      	bx	lr
 8014d6c:	b510      	push	{r4, lr}
 8014d6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014d72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014d76:	4291      	cmp	r1, r2
 8014d78:	d1f9      	bne.n	8014d6e <memcpy+0xe>
 8014d7a:	bd10      	pop	{r4, pc}

08014d7c <memset>:
 8014d7c:	4402      	add	r2, r0
 8014d7e:	4603      	mov	r3, r0
 8014d80:	4293      	cmp	r3, r2
 8014d82:	d100      	bne.n	8014d86 <memset+0xa>
 8014d84:	4770      	bx	lr
 8014d86:	f803 1b01 	strb.w	r1, [r3], #1
 8014d8a:	e7f9      	b.n	8014d80 <memset+0x4>

08014d8c <iprintf>:
 8014d8c:	b40f      	push	{r0, r1, r2, r3}
 8014d8e:	4b0a      	ldr	r3, [pc, #40]	; (8014db8 <iprintf+0x2c>)
 8014d90:	b513      	push	{r0, r1, r4, lr}
 8014d92:	681c      	ldr	r4, [r3, #0]
 8014d94:	b124      	cbz	r4, 8014da0 <iprintf+0x14>
 8014d96:	69a3      	ldr	r3, [r4, #24]
 8014d98:	b913      	cbnz	r3, 8014da0 <iprintf+0x14>
 8014d9a:	4620      	mov	r0, r4
 8014d9c:	f000 f8e0 	bl	8014f60 <__sinit>
 8014da0:	ab05      	add	r3, sp, #20
 8014da2:	9a04      	ldr	r2, [sp, #16]
 8014da4:	68a1      	ldr	r1, [r4, #8]
 8014da6:	9301      	str	r3, [sp, #4]
 8014da8:	4620      	mov	r0, r4
 8014daa:	f000 fa67 	bl	801527c <_vfiprintf_r>
 8014dae:	b002      	add	sp, #8
 8014db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014db4:	b004      	add	sp, #16
 8014db6:	4770      	bx	lr
 8014db8:	24000038 	.word	0x24000038

08014dbc <rand>:
 8014dbc:	4b17      	ldr	r3, [pc, #92]	; (8014e1c <rand+0x60>)
 8014dbe:	b510      	push	{r4, lr}
 8014dc0:	681c      	ldr	r4, [r3, #0]
 8014dc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014dc4:	b9b3      	cbnz	r3, 8014df4 <rand+0x38>
 8014dc6:	2018      	movs	r0, #24
 8014dc8:	f000 f97c 	bl	80150c4 <malloc>
 8014dcc:	63a0      	str	r0, [r4, #56]	; 0x38
 8014dce:	b928      	cbnz	r0, 8014ddc <rand+0x20>
 8014dd0:	4602      	mov	r2, r0
 8014dd2:	4b13      	ldr	r3, [pc, #76]	; (8014e20 <rand+0x64>)
 8014dd4:	4813      	ldr	r0, [pc, #76]	; (8014e24 <rand+0x68>)
 8014dd6:	214e      	movs	r1, #78	; 0x4e
 8014dd8:	f000 f84c 	bl	8014e74 <__assert_func>
 8014ddc:	4a12      	ldr	r2, [pc, #72]	; (8014e28 <rand+0x6c>)
 8014dde:	4b13      	ldr	r3, [pc, #76]	; (8014e2c <rand+0x70>)
 8014de0:	e9c0 2300 	strd	r2, r3, [r0]
 8014de4:	4b12      	ldr	r3, [pc, #72]	; (8014e30 <rand+0x74>)
 8014de6:	6083      	str	r3, [r0, #8]
 8014de8:	230b      	movs	r3, #11
 8014dea:	8183      	strh	r3, [r0, #12]
 8014dec:	2201      	movs	r2, #1
 8014dee:	2300      	movs	r3, #0
 8014df0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8014df4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014df6:	480f      	ldr	r0, [pc, #60]	; (8014e34 <rand+0x78>)
 8014df8:	690a      	ldr	r2, [r1, #16]
 8014dfa:	694b      	ldr	r3, [r1, #20]
 8014dfc:	4c0e      	ldr	r4, [pc, #56]	; (8014e38 <rand+0x7c>)
 8014dfe:	4350      	muls	r0, r2
 8014e00:	fb04 0003 	mla	r0, r4, r3, r0
 8014e04:	fba2 3404 	umull	r3, r4, r2, r4
 8014e08:	1c5a      	adds	r2, r3, #1
 8014e0a:	4404      	add	r4, r0
 8014e0c:	f144 0000 	adc.w	r0, r4, #0
 8014e10:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8014e14:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014e18:	bd10      	pop	{r4, pc}
 8014e1a:	bf00      	nop
 8014e1c:	24000038 	.word	0x24000038
 8014e20:	080197f0 	.word	0x080197f0
 8014e24:	08019807 	.word	0x08019807
 8014e28:	abcd330e 	.word	0xabcd330e
 8014e2c:	e66d1234 	.word	0xe66d1234
 8014e30:	0005deec 	.word	0x0005deec
 8014e34:	5851f42d 	.word	0x5851f42d
 8014e38:	4c957f2d 	.word	0x4c957f2d

08014e3c <strcpy>:
 8014e3c:	4603      	mov	r3, r0
 8014e3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014e42:	f803 2b01 	strb.w	r2, [r3], #1
 8014e46:	2a00      	cmp	r2, #0
 8014e48:	d1f9      	bne.n	8014e3e <strcpy+0x2>
 8014e4a:	4770      	bx	lr

08014e4c <strncpy>:
 8014e4c:	b510      	push	{r4, lr}
 8014e4e:	3901      	subs	r1, #1
 8014e50:	4603      	mov	r3, r0
 8014e52:	b132      	cbz	r2, 8014e62 <strncpy+0x16>
 8014e54:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014e58:	f803 4b01 	strb.w	r4, [r3], #1
 8014e5c:	3a01      	subs	r2, #1
 8014e5e:	2c00      	cmp	r4, #0
 8014e60:	d1f7      	bne.n	8014e52 <strncpy+0x6>
 8014e62:	441a      	add	r2, r3
 8014e64:	2100      	movs	r1, #0
 8014e66:	4293      	cmp	r3, r2
 8014e68:	d100      	bne.n	8014e6c <strncpy+0x20>
 8014e6a:	bd10      	pop	{r4, pc}
 8014e6c:	f803 1b01 	strb.w	r1, [r3], #1
 8014e70:	e7f9      	b.n	8014e66 <strncpy+0x1a>
	...

08014e74 <__assert_func>:
 8014e74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014e76:	4614      	mov	r4, r2
 8014e78:	461a      	mov	r2, r3
 8014e7a:	4b09      	ldr	r3, [pc, #36]	; (8014ea0 <__assert_func+0x2c>)
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	4605      	mov	r5, r0
 8014e80:	68d8      	ldr	r0, [r3, #12]
 8014e82:	b14c      	cbz	r4, 8014e98 <__assert_func+0x24>
 8014e84:	4b07      	ldr	r3, [pc, #28]	; (8014ea4 <__assert_func+0x30>)
 8014e86:	9100      	str	r1, [sp, #0]
 8014e88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014e8c:	4906      	ldr	r1, [pc, #24]	; (8014ea8 <__assert_func+0x34>)
 8014e8e:	462b      	mov	r3, r5
 8014e90:	f000 f8e4 	bl	801505c <fiprintf>
 8014e94:	f000 fddc 	bl	8015a50 <abort>
 8014e98:	4b04      	ldr	r3, [pc, #16]	; (8014eac <__assert_func+0x38>)
 8014e9a:	461c      	mov	r4, r3
 8014e9c:	e7f3      	b.n	8014e86 <__assert_func+0x12>
 8014e9e:	bf00      	nop
 8014ea0:	24000038 	.word	0x24000038
 8014ea4:	08019866 	.word	0x08019866
 8014ea8:	08019873 	.word	0x08019873
 8014eac:	080198a1 	.word	0x080198a1

08014eb0 <std>:
 8014eb0:	2300      	movs	r3, #0
 8014eb2:	b510      	push	{r4, lr}
 8014eb4:	4604      	mov	r4, r0
 8014eb6:	e9c0 3300 	strd	r3, r3, [r0]
 8014eba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014ebe:	6083      	str	r3, [r0, #8]
 8014ec0:	8181      	strh	r1, [r0, #12]
 8014ec2:	6643      	str	r3, [r0, #100]	; 0x64
 8014ec4:	81c2      	strh	r2, [r0, #14]
 8014ec6:	6183      	str	r3, [r0, #24]
 8014ec8:	4619      	mov	r1, r3
 8014eca:	2208      	movs	r2, #8
 8014ecc:	305c      	adds	r0, #92	; 0x5c
 8014ece:	f7ff ff55 	bl	8014d7c <memset>
 8014ed2:	4b05      	ldr	r3, [pc, #20]	; (8014ee8 <std+0x38>)
 8014ed4:	6263      	str	r3, [r4, #36]	; 0x24
 8014ed6:	4b05      	ldr	r3, [pc, #20]	; (8014eec <std+0x3c>)
 8014ed8:	62a3      	str	r3, [r4, #40]	; 0x28
 8014eda:	4b05      	ldr	r3, [pc, #20]	; (8014ef0 <std+0x40>)
 8014edc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014ede:	4b05      	ldr	r3, [pc, #20]	; (8014ef4 <std+0x44>)
 8014ee0:	6224      	str	r4, [r4, #32]
 8014ee2:	6323      	str	r3, [r4, #48]	; 0x30
 8014ee4:	bd10      	pop	{r4, pc}
 8014ee6:	bf00      	nop
 8014ee8:	08015825 	.word	0x08015825
 8014eec:	08015847 	.word	0x08015847
 8014ef0:	0801587f 	.word	0x0801587f
 8014ef4:	080158a3 	.word	0x080158a3

08014ef8 <_cleanup_r>:
 8014ef8:	4901      	ldr	r1, [pc, #4]	; (8014f00 <_cleanup_r+0x8>)
 8014efa:	f000 b8c1 	b.w	8015080 <_fwalk_reent>
 8014efe:	bf00      	nop
 8014f00:	08015b8d 	.word	0x08015b8d

08014f04 <__sfmoreglue>:
 8014f04:	b570      	push	{r4, r5, r6, lr}
 8014f06:	1e4a      	subs	r2, r1, #1
 8014f08:	2568      	movs	r5, #104	; 0x68
 8014f0a:	4355      	muls	r5, r2
 8014f0c:	460e      	mov	r6, r1
 8014f0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014f12:	f000 f92f 	bl	8015174 <_malloc_r>
 8014f16:	4604      	mov	r4, r0
 8014f18:	b140      	cbz	r0, 8014f2c <__sfmoreglue+0x28>
 8014f1a:	2100      	movs	r1, #0
 8014f1c:	e9c0 1600 	strd	r1, r6, [r0]
 8014f20:	300c      	adds	r0, #12
 8014f22:	60a0      	str	r0, [r4, #8]
 8014f24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014f28:	f7ff ff28 	bl	8014d7c <memset>
 8014f2c:	4620      	mov	r0, r4
 8014f2e:	bd70      	pop	{r4, r5, r6, pc}

08014f30 <__sfp_lock_acquire>:
 8014f30:	4801      	ldr	r0, [pc, #4]	; (8014f38 <__sfp_lock_acquire+0x8>)
 8014f32:	f000 b8c5 	b.w	80150c0 <__retarget_lock_acquire_recursive>
 8014f36:	bf00      	nop
 8014f38:	2400362c 	.word	0x2400362c

08014f3c <__sfp_lock_release>:
 8014f3c:	4801      	ldr	r0, [pc, #4]	; (8014f44 <__sfp_lock_release+0x8>)
 8014f3e:	f000 b8c0 	b.w	80150c2 <__retarget_lock_release_recursive>
 8014f42:	bf00      	nop
 8014f44:	2400362c 	.word	0x2400362c

08014f48 <__sinit_lock_acquire>:
 8014f48:	4801      	ldr	r0, [pc, #4]	; (8014f50 <__sinit_lock_acquire+0x8>)
 8014f4a:	f000 b8b9 	b.w	80150c0 <__retarget_lock_acquire_recursive>
 8014f4e:	bf00      	nop
 8014f50:	24003627 	.word	0x24003627

08014f54 <__sinit_lock_release>:
 8014f54:	4801      	ldr	r0, [pc, #4]	; (8014f5c <__sinit_lock_release+0x8>)
 8014f56:	f000 b8b4 	b.w	80150c2 <__retarget_lock_release_recursive>
 8014f5a:	bf00      	nop
 8014f5c:	24003627 	.word	0x24003627

08014f60 <__sinit>:
 8014f60:	b510      	push	{r4, lr}
 8014f62:	4604      	mov	r4, r0
 8014f64:	f7ff fff0 	bl	8014f48 <__sinit_lock_acquire>
 8014f68:	69a3      	ldr	r3, [r4, #24]
 8014f6a:	b11b      	cbz	r3, 8014f74 <__sinit+0x14>
 8014f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f70:	f7ff bff0 	b.w	8014f54 <__sinit_lock_release>
 8014f74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014f78:	6523      	str	r3, [r4, #80]	; 0x50
 8014f7a:	4b13      	ldr	r3, [pc, #76]	; (8014fc8 <__sinit+0x68>)
 8014f7c:	4a13      	ldr	r2, [pc, #76]	; (8014fcc <__sinit+0x6c>)
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	62a2      	str	r2, [r4, #40]	; 0x28
 8014f82:	42a3      	cmp	r3, r4
 8014f84:	bf04      	itt	eq
 8014f86:	2301      	moveq	r3, #1
 8014f88:	61a3      	streq	r3, [r4, #24]
 8014f8a:	4620      	mov	r0, r4
 8014f8c:	f000 f820 	bl	8014fd0 <__sfp>
 8014f90:	6060      	str	r0, [r4, #4]
 8014f92:	4620      	mov	r0, r4
 8014f94:	f000 f81c 	bl	8014fd0 <__sfp>
 8014f98:	60a0      	str	r0, [r4, #8]
 8014f9a:	4620      	mov	r0, r4
 8014f9c:	f000 f818 	bl	8014fd0 <__sfp>
 8014fa0:	2200      	movs	r2, #0
 8014fa2:	60e0      	str	r0, [r4, #12]
 8014fa4:	2104      	movs	r1, #4
 8014fa6:	6860      	ldr	r0, [r4, #4]
 8014fa8:	f7ff ff82 	bl	8014eb0 <std>
 8014fac:	68a0      	ldr	r0, [r4, #8]
 8014fae:	2201      	movs	r2, #1
 8014fb0:	2109      	movs	r1, #9
 8014fb2:	f7ff ff7d 	bl	8014eb0 <std>
 8014fb6:	68e0      	ldr	r0, [r4, #12]
 8014fb8:	2202      	movs	r2, #2
 8014fba:	2112      	movs	r1, #18
 8014fbc:	f7ff ff78 	bl	8014eb0 <std>
 8014fc0:	2301      	movs	r3, #1
 8014fc2:	61a3      	str	r3, [r4, #24]
 8014fc4:	e7d2      	b.n	8014f6c <__sinit+0xc>
 8014fc6:	bf00      	nop
 8014fc8:	080197ec 	.word	0x080197ec
 8014fcc:	08014ef9 	.word	0x08014ef9

08014fd0 <__sfp>:
 8014fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fd2:	4607      	mov	r7, r0
 8014fd4:	f7ff ffac 	bl	8014f30 <__sfp_lock_acquire>
 8014fd8:	4b1e      	ldr	r3, [pc, #120]	; (8015054 <__sfp+0x84>)
 8014fda:	681e      	ldr	r6, [r3, #0]
 8014fdc:	69b3      	ldr	r3, [r6, #24]
 8014fde:	b913      	cbnz	r3, 8014fe6 <__sfp+0x16>
 8014fe0:	4630      	mov	r0, r6
 8014fe2:	f7ff ffbd 	bl	8014f60 <__sinit>
 8014fe6:	3648      	adds	r6, #72	; 0x48
 8014fe8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014fec:	3b01      	subs	r3, #1
 8014fee:	d503      	bpl.n	8014ff8 <__sfp+0x28>
 8014ff0:	6833      	ldr	r3, [r6, #0]
 8014ff2:	b30b      	cbz	r3, 8015038 <__sfp+0x68>
 8014ff4:	6836      	ldr	r6, [r6, #0]
 8014ff6:	e7f7      	b.n	8014fe8 <__sfp+0x18>
 8014ff8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014ffc:	b9d5      	cbnz	r5, 8015034 <__sfp+0x64>
 8014ffe:	4b16      	ldr	r3, [pc, #88]	; (8015058 <__sfp+0x88>)
 8015000:	60e3      	str	r3, [r4, #12]
 8015002:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015006:	6665      	str	r5, [r4, #100]	; 0x64
 8015008:	f000 f859 	bl	80150be <__retarget_lock_init_recursive>
 801500c:	f7ff ff96 	bl	8014f3c <__sfp_lock_release>
 8015010:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015014:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015018:	6025      	str	r5, [r4, #0]
 801501a:	61a5      	str	r5, [r4, #24]
 801501c:	2208      	movs	r2, #8
 801501e:	4629      	mov	r1, r5
 8015020:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015024:	f7ff feaa 	bl	8014d7c <memset>
 8015028:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801502c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015030:	4620      	mov	r0, r4
 8015032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015034:	3468      	adds	r4, #104	; 0x68
 8015036:	e7d9      	b.n	8014fec <__sfp+0x1c>
 8015038:	2104      	movs	r1, #4
 801503a:	4638      	mov	r0, r7
 801503c:	f7ff ff62 	bl	8014f04 <__sfmoreglue>
 8015040:	4604      	mov	r4, r0
 8015042:	6030      	str	r0, [r6, #0]
 8015044:	2800      	cmp	r0, #0
 8015046:	d1d5      	bne.n	8014ff4 <__sfp+0x24>
 8015048:	f7ff ff78 	bl	8014f3c <__sfp_lock_release>
 801504c:	230c      	movs	r3, #12
 801504e:	603b      	str	r3, [r7, #0]
 8015050:	e7ee      	b.n	8015030 <__sfp+0x60>
 8015052:	bf00      	nop
 8015054:	080197ec 	.word	0x080197ec
 8015058:	ffff0001 	.word	0xffff0001

0801505c <fiprintf>:
 801505c:	b40e      	push	{r1, r2, r3}
 801505e:	b503      	push	{r0, r1, lr}
 8015060:	4601      	mov	r1, r0
 8015062:	ab03      	add	r3, sp, #12
 8015064:	4805      	ldr	r0, [pc, #20]	; (801507c <fiprintf+0x20>)
 8015066:	f853 2b04 	ldr.w	r2, [r3], #4
 801506a:	6800      	ldr	r0, [r0, #0]
 801506c:	9301      	str	r3, [sp, #4]
 801506e:	f000 f905 	bl	801527c <_vfiprintf_r>
 8015072:	b002      	add	sp, #8
 8015074:	f85d eb04 	ldr.w	lr, [sp], #4
 8015078:	b003      	add	sp, #12
 801507a:	4770      	bx	lr
 801507c:	24000038 	.word	0x24000038

08015080 <_fwalk_reent>:
 8015080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015084:	4606      	mov	r6, r0
 8015086:	4688      	mov	r8, r1
 8015088:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801508c:	2700      	movs	r7, #0
 801508e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015092:	f1b9 0901 	subs.w	r9, r9, #1
 8015096:	d505      	bpl.n	80150a4 <_fwalk_reent+0x24>
 8015098:	6824      	ldr	r4, [r4, #0]
 801509a:	2c00      	cmp	r4, #0
 801509c:	d1f7      	bne.n	801508e <_fwalk_reent+0xe>
 801509e:	4638      	mov	r0, r7
 80150a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80150a4:	89ab      	ldrh	r3, [r5, #12]
 80150a6:	2b01      	cmp	r3, #1
 80150a8:	d907      	bls.n	80150ba <_fwalk_reent+0x3a>
 80150aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80150ae:	3301      	adds	r3, #1
 80150b0:	d003      	beq.n	80150ba <_fwalk_reent+0x3a>
 80150b2:	4629      	mov	r1, r5
 80150b4:	4630      	mov	r0, r6
 80150b6:	47c0      	blx	r8
 80150b8:	4307      	orrs	r7, r0
 80150ba:	3568      	adds	r5, #104	; 0x68
 80150bc:	e7e9      	b.n	8015092 <_fwalk_reent+0x12>

080150be <__retarget_lock_init_recursive>:
 80150be:	4770      	bx	lr

080150c0 <__retarget_lock_acquire_recursive>:
 80150c0:	4770      	bx	lr

080150c2 <__retarget_lock_release_recursive>:
 80150c2:	4770      	bx	lr

080150c4 <malloc>:
 80150c4:	4b02      	ldr	r3, [pc, #8]	; (80150d0 <malloc+0xc>)
 80150c6:	4601      	mov	r1, r0
 80150c8:	6818      	ldr	r0, [r3, #0]
 80150ca:	f000 b853 	b.w	8015174 <_malloc_r>
 80150ce:	bf00      	nop
 80150d0:	24000038 	.word	0x24000038

080150d4 <_free_r>:
 80150d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80150d6:	2900      	cmp	r1, #0
 80150d8:	d048      	beq.n	801516c <_free_r+0x98>
 80150da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80150de:	9001      	str	r0, [sp, #4]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	f1a1 0404 	sub.w	r4, r1, #4
 80150e6:	bfb8      	it	lt
 80150e8:	18e4      	addlt	r4, r4, r3
 80150ea:	f000 fe01 	bl	8015cf0 <__malloc_lock>
 80150ee:	4a20      	ldr	r2, [pc, #128]	; (8015170 <_free_r+0x9c>)
 80150f0:	9801      	ldr	r0, [sp, #4]
 80150f2:	6813      	ldr	r3, [r2, #0]
 80150f4:	4615      	mov	r5, r2
 80150f6:	b933      	cbnz	r3, 8015106 <_free_r+0x32>
 80150f8:	6063      	str	r3, [r4, #4]
 80150fa:	6014      	str	r4, [r2, #0]
 80150fc:	b003      	add	sp, #12
 80150fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015102:	f000 bdfb 	b.w	8015cfc <__malloc_unlock>
 8015106:	42a3      	cmp	r3, r4
 8015108:	d90b      	bls.n	8015122 <_free_r+0x4e>
 801510a:	6821      	ldr	r1, [r4, #0]
 801510c:	1862      	adds	r2, r4, r1
 801510e:	4293      	cmp	r3, r2
 8015110:	bf04      	itt	eq
 8015112:	681a      	ldreq	r2, [r3, #0]
 8015114:	685b      	ldreq	r3, [r3, #4]
 8015116:	6063      	str	r3, [r4, #4]
 8015118:	bf04      	itt	eq
 801511a:	1852      	addeq	r2, r2, r1
 801511c:	6022      	streq	r2, [r4, #0]
 801511e:	602c      	str	r4, [r5, #0]
 8015120:	e7ec      	b.n	80150fc <_free_r+0x28>
 8015122:	461a      	mov	r2, r3
 8015124:	685b      	ldr	r3, [r3, #4]
 8015126:	b10b      	cbz	r3, 801512c <_free_r+0x58>
 8015128:	42a3      	cmp	r3, r4
 801512a:	d9fa      	bls.n	8015122 <_free_r+0x4e>
 801512c:	6811      	ldr	r1, [r2, #0]
 801512e:	1855      	adds	r5, r2, r1
 8015130:	42a5      	cmp	r5, r4
 8015132:	d10b      	bne.n	801514c <_free_r+0x78>
 8015134:	6824      	ldr	r4, [r4, #0]
 8015136:	4421      	add	r1, r4
 8015138:	1854      	adds	r4, r2, r1
 801513a:	42a3      	cmp	r3, r4
 801513c:	6011      	str	r1, [r2, #0]
 801513e:	d1dd      	bne.n	80150fc <_free_r+0x28>
 8015140:	681c      	ldr	r4, [r3, #0]
 8015142:	685b      	ldr	r3, [r3, #4]
 8015144:	6053      	str	r3, [r2, #4]
 8015146:	4421      	add	r1, r4
 8015148:	6011      	str	r1, [r2, #0]
 801514a:	e7d7      	b.n	80150fc <_free_r+0x28>
 801514c:	d902      	bls.n	8015154 <_free_r+0x80>
 801514e:	230c      	movs	r3, #12
 8015150:	6003      	str	r3, [r0, #0]
 8015152:	e7d3      	b.n	80150fc <_free_r+0x28>
 8015154:	6825      	ldr	r5, [r4, #0]
 8015156:	1961      	adds	r1, r4, r5
 8015158:	428b      	cmp	r3, r1
 801515a:	bf04      	itt	eq
 801515c:	6819      	ldreq	r1, [r3, #0]
 801515e:	685b      	ldreq	r3, [r3, #4]
 8015160:	6063      	str	r3, [r4, #4]
 8015162:	bf04      	itt	eq
 8015164:	1949      	addeq	r1, r1, r5
 8015166:	6021      	streq	r1, [r4, #0]
 8015168:	6054      	str	r4, [r2, #4]
 801516a:	e7c7      	b.n	80150fc <_free_r+0x28>
 801516c:	b003      	add	sp, #12
 801516e:	bd30      	pop	{r4, r5, pc}
 8015170:	24000240 	.word	0x24000240

08015174 <_malloc_r>:
 8015174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015176:	1ccd      	adds	r5, r1, #3
 8015178:	f025 0503 	bic.w	r5, r5, #3
 801517c:	3508      	adds	r5, #8
 801517e:	2d0c      	cmp	r5, #12
 8015180:	bf38      	it	cc
 8015182:	250c      	movcc	r5, #12
 8015184:	2d00      	cmp	r5, #0
 8015186:	4606      	mov	r6, r0
 8015188:	db01      	blt.n	801518e <_malloc_r+0x1a>
 801518a:	42a9      	cmp	r1, r5
 801518c:	d903      	bls.n	8015196 <_malloc_r+0x22>
 801518e:	230c      	movs	r3, #12
 8015190:	6033      	str	r3, [r6, #0]
 8015192:	2000      	movs	r0, #0
 8015194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015196:	f000 fdab 	bl	8015cf0 <__malloc_lock>
 801519a:	4921      	ldr	r1, [pc, #132]	; (8015220 <_malloc_r+0xac>)
 801519c:	680a      	ldr	r2, [r1, #0]
 801519e:	4614      	mov	r4, r2
 80151a0:	b99c      	cbnz	r4, 80151ca <_malloc_r+0x56>
 80151a2:	4f20      	ldr	r7, [pc, #128]	; (8015224 <_malloc_r+0xb0>)
 80151a4:	683b      	ldr	r3, [r7, #0]
 80151a6:	b923      	cbnz	r3, 80151b2 <_malloc_r+0x3e>
 80151a8:	4621      	mov	r1, r4
 80151aa:	4630      	mov	r0, r6
 80151ac:	f000 fb2a 	bl	8015804 <_sbrk_r>
 80151b0:	6038      	str	r0, [r7, #0]
 80151b2:	4629      	mov	r1, r5
 80151b4:	4630      	mov	r0, r6
 80151b6:	f000 fb25 	bl	8015804 <_sbrk_r>
 80151ba:	1c43      	adds	r3, r0, #1
 80151bc:	d123      	bne.n	8015206 <_malloc_r+0x92>
 80151be:	230c      	movs	r3, #12
 80151c0:	6033      	str	r3, [r6, #0]
 80151c2:	4630      	mov	r0, r6
 80151c4:	f000 fd9a 	bl	8015cfc <__malloc_unlock>
 80151c8:	e7e3      	b.n	8015192 <_malloc_r+0x1e>
 80151ca:	6823      	ldr	r3, [r4, #0]
 80151cc:	1b5b      	subs	r3, r3, r5
 80151ce:	d417      	bmi.n	8015200 <_malloc_r+0x8c>
 80151d0:	2b0b      	cmp	r3, #11
 80151d2:	d903      	bls.n	80151dc <_malloc_r+0x68>
 80151d4:	6023      	str	r3, [r4, #0]
 80151d6:	441c      	add	r4, r3
 80151d8:	6025      	str	r5, [r4, #0]
 80151da:	e004      	b.n	80151e6 <_malloc_r+0x72>
 80151dc:	6863      	ldr	r3, [r4, #4]
 80151de:	42a2      	cmp	r2, r4
 80151e0:	bf0c      	ite	eq
 80151e2:	600b      	streq	r3, [r1, #0]
 80151e4:	6053      	strne	r3, [r2, #4]
 80151e6:	4630      	mov	r0, r6
 80151e8:	f000 fd88 	bl	8015cfc <__malloc_unlock>
 80151ec:	f104 000b 	add.w	r0, r4, #11
 80151f0:	1d23      	adds	r3, r4, #4
 80151f2:	f020 0007 	bic.w	r0, r0, #7
 80151f6:	1ac2      	subs	r2, r0, r3
 80151f8:	d0cc      	beq.n	8015194 <_malloc_r+0x20>
 80151fa:	1a1b      	subs	r3, r3, r0
 80151fc:	50a3      	str	r3, [r4, r2]
 80151fe:	e7c9      	b.n	8015194 <_malloc_r+0x20>
 8015200:	4622      	mov	r2, r4
 8015202:	6864      	ldr	r4, [r4, #4]
 8015204:	e7cc      	b.n	80151a0 <_malloc_r+0x2c>
 8015206:	1cc4      	adds	r4, r0, #3
 8015208:	f024 0403 	bic.w	r4, r4, #3
 801520c:	42a0      	cmp	r0, r4
 801520e:	d0e3      	beq.n	80151d8 <_malloc_r+0x64>
 8015210:	1a21      	subs	r1, r4, r0
 8015212:	4630      	mov	r0, r6
 8015214:	f000 faf6 	bl	8015804 <_sbrk_r>
 8015218:	3001      	adds	r0, #1
 801521a:	d1dd      	bne.n	80151d8 <_malloc_r+0x64>
 801521c:	e7cf      	b.n	80151be <_malloc_r+0x4a>
 801521e:	bf00      	nop
 8015220:	24000240 	.word	0x24000240
 8015224:	24000244 	.word	0x24000244

08015228 <__sfputc_r>:
 8015228:	6893      	ldr	r3, [r2, #8]
 801522a:	3b01      	subs	r3, #1
 801522c:	2b00      	cmp	r3, #0
 801522e:	b410      	push	{r4}
 8015230:	6093      	str	r3, [r2, #8]
 8015232:	da08      	bge.n	8015246 <__sfputc_r+0x1e>
 8015234:	6994      	ldr	r4, [r2, #24]
 8015236:	42a3      	cmp	r3, r4
 8015238:	db01      	blt.n	801523e <__sfputc_r+0x16>
 801523a:	290a      	cmp	r1, #10
 801523c:	d103      	bne.n	8015246 <__sfputc_r+0x1e>
 801523e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015242:	f000 bb33 	b.w	80158ac <__swbuf_r>
 8015246:	6813      	ldr	r3, [r2, #0]
 8015248:	1c58      	adds	r0, r3, #1
 801524a:	6010      	str	r0, [r2, #0]
 801524c:	7019      	strb	r1, [r3, #0]
 801524e:	4608      	mov	r0, r1
 8015250:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015254:	4770      	bx	lr

08015256 <__sfputs_r>:
 8015256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015258:	4606      	mov	r6, r0
 801525a:	460f      	mov	r7, r1
 801525c:	4614      	mov	r4, r2
 801525e:	18d5      	adds	r5, r2, r3
 8015260:	42ac      	cmp	r4, r5
 8015262:	d101      	bne.n	8015268 <__sfputs_r+0x12>
 8015264:	2000      	movs	r0, #0
 8015266:	e007      	b.n	8015278 <__sfputs_r+0x22>
 8015268:	f814 1b01 	ldrb.w	r1, [r4], #1
 801526c:	463a      	mov	r2, r7
 801526e:	4630      	mov	r0, r6
 8015270:	f7ff ffda 	bl	8015228 <__sfputc_r>
 8015274:	1c43      	adds	r3, r0, #1
 8015276:	d1f3      	bne.n	8015260 <__sfputs_r+0xa>
 8015278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801527c <_vfiprintf_r>:
 801527c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015280:	460d      	mov	r5, r1
 8015282:	b09d      	sub	sp, #116	; 0x74
 8015284:	4614      	mov	r4, r2
 8015286:	4698      	mov	r8, r3
 8015288:	4606      	mov	r6, r0
 801528a:	b118      	cbz	r0, 8015294 <_vfiprintf_r+0x18>
 801528c:	6983      	ldr	r3, [r0, #24]
 801528e:	b90b      	cbnz	r3, 8015294 <_vfiprintf_r+0x18>
 8015290:	f7ff fe66 	bl	8014f60 <__sinit>
 8015294:	4b89      	ldr	r3, [pc, #548]	; (80154bc <_vfiprintf_r+0x240>)
 8015296:	429d      	cmp	r5, r3
 8015298:	d11b      	bne.n	80152d2 <_vfiprintf_r+0x56>
 801529a:	6875      	ldr	r5, [r6, #4]
 801529c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801529e:	07d9      	lsls	r1, r3, #31
 80152a0:	d405      	bmi.n	80152ae <_vfiprintf_r+0x32>
 80152a2:	89ab      	ldrh	r3, [r5, #12]
 80152a4:	059a      	lsls	r2, r3, #22
 80152a6:	d402      	bmi.n	80152ae <_vfiprintf_r+0x32>
 80152a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80152aa:	f7ff ff09 	bl	80150c0 <__retarget_lock_acquire_recursive>
 80152ae:	89ab      	ldrh	r3, [r5, #12]
 80152b0:	071b      	lsls	r3, r3, #28
 80152b2:	d501      	bpl.n	80152b8 <_vfiprintf_r+0x3c>
 80152b4:	692b      	ldr	r3, [r5, #16]
 80152b6:	b9eb      	cbnz	r3, 80152f4 <_vfiprintf_r+0x78>
 80152b8:	4629      	mov	r1, r5
 80152ba:	4630      	mov	r0, r6
 80152bc:	f000 fb5a 	bl	8015974 <__swsetup_r>
 80152c0:	b1c0      	cbz	r0, 80152f4 <_vfiprintf_r+0x78>
 80152c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80152c4:	07dc      	lsls	r4, r3, #31
 80152c6:	d50e      	bpl.n	80152e6 <_vfiprintf_r+0x6a>
 80152c8:	f04f 30ff 	mov.w	r0, #4294967295
 80152cc:	b01d      	add	sp, #116	; 0x74
 80152ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152d2:	4b7b      	ldr	r3, [pc, #492]	; (80154c0 <_vfiprintf_r+0x244>)
 80152d4:	429d      	cmp	r5, r3
 80152d6:	d101      	bne.n	80152dc <_vfiprintf_r+0x60>
 80152d8:	68b5      	ldr	r5, [r6, #8]
 80152da:	e7df      	b.n	801529c <_vfiprintf_r+0x20>
 80152dc:	4b79      	ldr	r3, [pc, #484]	; (80154c4 <_vfiprintf_r+0x248>)
 80152de:	429d      	cmp	r5, r3
 80152e0:	bf08      	it	eq
 80152e2:	68f5      	ldreq	r5, [r6, #12]
 80152e4:	e7da      	b.n	801529c <_vfiprintf_r+0x20>
 80152e6:	89ab      	ldrh	r3, [r5, #12]
 80152e8:	0598      	lsls	r0, r3, #22
 80152ea:	d4ed      	bmi.n	80152c8 <_vfiprintf_r+0x4c>
 80152ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80152ee:	f7ff fee8 	bl	80150c2 <__retarget_lock_release_recursive>
 80152f2:	e7e9      	b.n	80152c8 <_vfiprintf_r+0x4c>
 80152f4:	2300      	movs	r3, #0
 80152f6:	9309      	str	r3, [sp, #36]	; 0x24
 80152f8:	2320      	movs	r3, #32
 80152fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80152fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8015302:	2330      	movs	r3, #48	; 0x30
 8015304:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80154c8 <_vfiprintf_r+0x24c>
 8015308:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801530c:	f04f 0901 	mov.w	r9, #1
 8015310:	4623      	mov	r3, r4
 8015312:	469a      	mov	sl, r3
 8015314:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015318:	b10a      	cbz	r2, 801531e <_vfiprintf_r+0xa2>
 801531a:	2a25      	cmp	r2, #37	; 0x25
 801531c:	d1f9      	bne.n	8015312 <_vfiprintf_r+0x96>
 801531e:	ebba 0b04 	subs.w	fp, sl, r4
 8015322:	d00b      	beq.n	801533c <_vfiprintf_r+0xc0>
 8015324:	465b      	mov	r3, fp
 8015326:	4622      	mov	r2, r4
 8015328:	4629      	mov	r1, r5
 801532a:	4630      	mov	r0, r6
 801532c:	f7ff ff93 	bl	8015256 <__sfputs_r>
 8015330:	3001      	adds	r0, #1
 8015332:	f000 80aa 	beq.w	801548a <_vfiprintf_r+0x20e>
 8015336:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015338:	445a      	add	r2, fp
 801533a:	9209      	str	r2, [sp, #36]	; 0x24
 801533c:	f89a 3000 	ldrb.w	r3, [sl]
 8015340:	2b00      	cmp	r3, #0
 8015342:	f000 80a2 	beq.w	801548a <_vfiprintf_r+0x20e>
 8015346:	2300      	movs	r3, #0
 8015348:	f04f 32ff 	mov.w	r2, #4294967295
 801534c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015350:	f10a 0a01 	add.w	sl, sl, #1
 8015354:	9304      	str	r3, [sp, #16]
 8015356:	9307      	str	r3, [sp, #28]
 8015358:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801535c:	931a      	str	r3, [sp, #104]	; 0x68
 801535e:	4654      	mov	r4, sl
 8015360:	2205      	movs	r2, #5
 8015362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015366:	4858      	ldr	r0, [pc, #352]	; (80154c8 <_vfiprintf_r+0x24c>)
 8015368:	f7ea ffda 	bl	8000320 <memchr>
 801536c:	9a04      	ldr	r2, [sp, #16]
 801536e:	b9d8      	cbnz	r0, 80153a8 <_vfiprintf_r+0x12c>
 8015370:	06d1      	lsls	r1, r2, #27
 8015372:	bf44      	itt	mi
 8015374:	2320      	movmi	r3, #32
 8015376:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801537a:	0713      	lsls	r3, r2, #28
 801537c:	bf44      	itt	mi
 801537e:	232b      	movmi	r3, #43	; 0x2b
 8015380:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015384:	f89a 3000 	ldrb.w	r3, [sl]
 8015388:	2b2a      	cmp	r3, #42	; 0x2a
 801538a:	d015      	beq.n	80153b8 <_vfiprintf_r+0x13c>
 801538c:	9a07      	ldr	r2, [sp, #28]
 801538e:	4654      	mov	r4, sl
 8015390:	2000      	movs	r0, #0
 8015392:	f04f 0c0a 	mov.w	ip, #10
 8015396:	4621      	mov	r1, r4
 8015398:	f811 3b01 	ldrb.w	r3, [r1], #1
 801539c:	3b30      	subs	r3, #48	; 0x30
 801539e:	2b09      	cmp	r3, #9
 80153a0:	d94e      	bls.n	8015440 <_vfiprintf_r+0x1c4>
 80153a2:	b1b0      	cbz	r0, 80153d2 <_vfiprintf_r+0x156>
 80153a4:	9207      	str	r2, [sp, #28]
 80153a6:	e014      	b.n	80153d2 <_vfiprintf_r+0x156>
 80153a8:	eba0 0308 	sub.w	r3, r0, r8
 80153ac:	fa09 f303 	lsl.w	r3, r9, r3
 80153b0:	4313      	orrs	r3, r2
 80153b2:	9304      	str	r3, [sp, #16]
 80153b4:	46a2      	mov	sl, r4
 80153b6:	e7d2      	b.n	801535e <_vfiprintf_r+0xe2>
 80153b8:	9b03      	ldr	r3, [sp, #12]
 80153ba:	1d19      	adds	r1, r3, #4
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	9103      	str	r1, [sp, #12]
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	bfbb      	ittet	lt
 80153c4:	425b      	neglt	r3, r3
 80153c6:	f042 0202 	orrlt.w	r2, r2, #2
 80153ca:	9307      	strge	r3, [sp, #28]
 80153cc:	9307      	strlt	r3, [sp, #28]
 80153ce:	bfb8      	it	lt
 80153d0:	9204      	strlt	r2, [sp, #16]
 80153d2:	7823      	ldrb	r3, [r4, #0]
 80153d4:	2b2e      	cmp	r3, #46	; 0x2e
 80153d6:	d10c      	bne.n	80153f2 <_vfiprintf_r+0x176>
 80153d8:	7863      	ldrb	r3, [r4, #1]
 80153da:	2b2a      	cmp	r3, #42	; 0x2a
 80153dc:	d135      	bne.n	801544a <_vfiprintf_r+0x1ce>
 80153de:	9b03      	ldr	r3, [sp, #12]
 80153e0:	1d1a      	adds	r2, r3, #4
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	9203      	str	r2, [sp, #12]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	bfb8      	it	lt
 80153ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80153ee:	3402      	adds	r4, #2
 80153f0:	9305      	str	r3, [sp, #20]
 80153f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80154d8 <_vfiprintf_r+0x25c>
 80153f6:	7821      	ldrb	r1, [r4, #0]
 80153f8:	2203      	movs	r2, #3
 80153fa:	4650      	mov	r0, sl
 80153fc:	f7ea ff90 	bl	8000320 <memchr>
 8015400:	b140      	cbz	r0, 8015414 <_vfiprintf_r+0x198>
 8015402:	2340      	movs	r3, #64	; 0x40
 8015404:	eba0 000a 	sub.w	r0, r0, sl
 8015408:	fa03 f000 	lsl.w	r0, r3, r0
 801540c:	9b04      	ldr	r3, [sp, #16]
 801540e:	4303      	orrs	r3, r0
 8015410:	3401      	adds	r4, #1
 8015412:	9304      	str	r3, [sp, #16]
 8015414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015418:	482c      	ldr	r0, [pc, #176]	; (80154cc <_vfiprintf_r+0x250>)
 801541a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801541e:	2206      	movs	r2, #6
 8015420:	f7ea ff7e 	bl	8000320 <memchr>
 8015424:	2800      	cmp	r0, #0
 8015426:	d03f      	beq.n	80154a8 <_vfiprintf_r+0x22c>
 8015428:	4b29      	ldr	r3, [pc, #164]	; (80154d0 <_vfiprintf_r+0x254>)
 801542a:	bb1b      	cbnz	r3, 8015474 <_vfiprintf_r+0x1f8>
 801542c:	9b03      	ldr	r3, [sp, #12]
 801542e:	3307      	adds	r3, #7
 8015430:	f023 0307 	bic.w	r3, r3, #7
 8015434:	3308      	adds	r3, #8
 8015436:	9303      	str	r3, [sp, #12]
 8015438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801543a:	443b      	add	r3, r7
 801543c:	9309      	str	r3, [sp, #36]	; 0x24
 801543e:	e767      	b.n	8015310 <_vfiprintf_r+0x94>
 8015440:	fb0c 3202 	mla	r2, ip, r2, r3
 8015444:	460c      	mov	r4, r1
 8015446:	2001      	movs	r0, #1
 8015448:	e7a5      	b.n	8015396 <_vfiprintf_r+0x11a>
 801544a:	2300      	movs	r3, #0
 801544c:	3401      	adds	r4, #1
 801544e:	9305      	str	r3, [sp, #20]
 8015450:	4619      	mov	r1, r3
 8015452:	f04f 0c0a 	mov.w	ip, #10
 8015456:	4620      	mov	r0, r4
 8015458:	f810 2b01 	ldrb.w	r2, [r0], #1
 801545c:	3a30      	subs	r2, #48	; 0x30
 801545e:	2a09      	cmp	r2, #9
 8015460:	d903      	bls.n	801546a <_vfiprintf_r+0x1ee>
 8015462:	2b00      	cmp	r3, #0
 8015464:	d0c5      	beq.n	80153f2 <_vfiprintf_r+0x176>
 8015466:	9105      	str	r1, [sp, #20]
 8015468:	e7c3      	b.n	80153f2 <_vfiprintf_r+0x176>
 801546a:	fb0c 2101 	mla	r1, ip, r1, r2
 801546e:	4604      	mov	r4, r0
 8015470:	2301      	movs	r3, #1
 8015472:	e7f0      	b.n	8015456 <_vfiprintf_r+0x1da>
 8015474:	ab03      	add	r3, sp, #12
 8015476:	9300      	str	r3, [sp, #0]
 8015478:	462a      	mov	r2, r5
 801547a:	4b16      	ldr	r3, [pc, #88]	; (80154d4 <_vfiprintf_r+0x258>)
 801547c:	a904      	add	r1, sp, #16
 801547e:	4630      	mov	r0, r6
 8015480:	f3af 8000 	nop.w
 8015484:	4607      	mov	r7, r0
 8015486:	1c78      	adds	r0, r7, #1
 8015488:	d1d6      	bne.n	8015438 <_vfiprintf_r+0x1bc>
 801548a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801548c:	07d9      	lsls	r1, r3, #31
 801548e:	d405      	bmi.n	801549c <_vfiprintf_r+0x220>
 8015490:	89ab      	ldrh	r3, [r5, #12]
 8015492:	059a      	lsls	r2, r3, #22
 8015494:	d402      	bmi.n	801549c <_vfiprintf_r+0x220>
 8015496:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015498:	f7ff fe13 	bl	80150c2 <__retarget_lock_release_recursive>
 801549c:	89ab      	ldrh	r3, [r5, #12]
 801549e:	065b      	lsls	r3, r3, #25
 80154a0:	f53f af12 	bmi.w	80152c8 <_vfiprintf_r+0x4c>
 80154a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80154a6:	e711      	b.n	80152cc <_vfiprintf_r+0x50>
 80154a8:	ab03      	add	r3, sp, #12
 80154aa:	9300      	str	r3, [sp, #0]
 80154ac:	462a      	mov	r2, r5
 80154ae:	4b09      	ldr	r3, [pc, #36]	; (80154d4 <_vfiprintf_r+0x258>)
 80154b0:	a904      	add	r1, sp, #16
 80154b2:	4630      	mov	r0, r6
 80154b4:	f000 f880 	bl	80155b8 <_printf_i>
 80154b8:	e7e4      	b.n	8015484 <_vfiprintf_r+0x208>
 80154ba:	bf00      	nop
 80154bc:	080198c4 	.word	0x080198c4
 80154c0:	080198e4 	.word	0x080198e4
 80154c4:	080198a4 	.word	0x080198a4
 80154c8:	08019904 	.word	0x08019904
 80154cc:	0801990e 	.word	0x0801990e
 80154d0:	00000000 	.word	0x00000000
 80154d4:	08015257 	.word	0x08015257
 80154d8:	0801990a 	.word	0x0801990a

080154dc <_printf_common>:
 80154dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80154e0:	4616      	mov	r6, r2
 80154e2:	4699      	mov	r9, r3
 80154e4:	688a      	ldr	r2, [r1, #8]
 80154e6:	690b      	ldr	r3, [r1, #16]
 80154e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80154ec:	4293      	cmp	r3, r2
 80154ee:	bfb8      	it	lt
 80154f0:	4613      	movlt	r3, r2
 80154f2:	6033      	str	r3, [r6, #0]
 80154f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80154f8:	4607      	mov	r7, r0
 80154fa:	460c      	mov	r4, r1
 80154fc:	b10a      	cbz	r2, 8015502 <_printf_common+0x26>
 80154fe:	3301      	adds	r3, #1
 8015500:	6033      	str	r3, [r6, #0]
 8015502:	6823      	ldr	r3, [r4, #0]
 8015504:	0699      	lsls	r1, r3, #26
 8015506:	bf42      	ittt	mi
 8015508:	6833      	ldrmi	r3, [r6, #0]
 801550a:	3302      	addmi	r3, #2
 801550c:	6033      	strmi	r3, [r6, #0]
 801550e:	6825      	ldr	r5, [r4, #0]
 8015510:	f015 0506 	ands.w	r5, r5, #6
 8015514:	d106      	bne.n	8015524 <_printf_common+0x48>
 8015516:	f104 0a19 	add.w	sl, r4, #25
 801551a:	68e3      	ldr	r3, [r4, #12]
 801551c:	6832      	ldr	r2, [r6, #0]
 801551e:	1a9b      	subs	r3, r3, r2
 8015520:	42ab      	cmp	r3, r5
 8015522:	dc26      	bgt.n	8015572 <_printf_common+0x96>
 8015524:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015528:	1e13      	subs	r3, r2, #0
 801552a:	6822      	ldr	r2, [r4, #0]
 801552c:	bf18      	it	ne
 801552e:	2301      	movne	r3, #1
 8015530:	0692      	lsls	r2, r2, #26
 8015532:	d42b      	bmi.n	801558c <_printf_common+0xb0>
 8015534:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015538:	4649      	mov	r1, r9
 801553a:	4638      	mov	r0, r7
 801553c:	47c0      	blx	r8
 801553e:	3001      	adds	r0, #1
 8015540:	d01e      	beq.n	8015580 <_printf_common+0xa4>
 8015542:	6823      	ldr	r3, [r4, #0]
 8015544:	68e5      	ldr	r5, [r4, #12]
 8015546:	6832      	ldr	r2, [r6, #0]
 8015548:	f003 0306 	and.w	r3, r3, #6
 801554c:	2b04      	cmp	r3, #4
 801554e:	bf08      	it	eq
 8015550:	1aad      	subeq	r5, r5, r2
 8015552:	68a3      	ldr	r3, [r4, #8]
 8015554:	6922      	ldr	r2, [r4, #16]
 8015556:	bf0c      	ite	eq
 8015558:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801555c:	2500      	movne	r5, #0
 801555e:	4293      	cmp	r3, r2
 8015560:	bfc4      	itt	gt
 8015562:	1a9b      	subgt	r3, r3, r2
 8015564:	18ed      	addgt	r5, r5, r3
 8015566:	2600      	movs	r6, #0
 8015568:	341a      	adds	r4, #26
 801556a:	42b5      	cmp	r5, r6
 801556c:	d11a      	bne.n	80155a4 <_printf_common+0xc8>
 801556e:	2000      	movs	r0, #0
 8015570:	e008      	b.n	8015584 <_printf_common+0xa8>
 8015572:	2301      	movs	r3, #1
 8015574:	4652      	mov	r2, sl
 8015576:	4649      	mov	r1, r9
 8015578:	4638      	mov	r0, r7
 801557a:	47c0      	blx	r8
 801557c:	3001      	adds	r0, #1
 801557e:	d103      	bne.n	8015588 <_printf_common+0xac>
 8015580:	f04f 30ff 	mov.w	r0, #4294967295
 8015584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015588:	3501      	adds	r5, #1
 801558a:	e7c6      	b.n	801551a <_printf_common+0x3e>
 801558c:	18e1      	adds	r1, r4, r3
 801558e:	1c5a      	adds	r2, r3, #1
 8015590:	2030      	movs	r0, #48	; 0x30
 8015592:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015596:	4422      	add	r2, r4
 8015598:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801559c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80155a0:	3302      	adds	r3, #2
 80155a2:	e7c7      	b.n	8015534 <_printf_common+0x58>
 80155a4:	2301      	movs	r3, #1
 80155a6:	4622      	mov	r2, r4
 80155a8:	4649      	mov	r1, r9
 80155aa:	4638      	mov	r0, r7
 80155ac:	47c0      	blx	r8
 80155ae:	3001      	adds	r0, #1
 80155b0:	d0e6      	beq.n	8015580 <_printf_common+0xa4>
 80155b2:	3601      	adds	r6, #1
 80155b4:	e7d9      	b.n	801556a <_printf_common+0x8e>
	...

080155b8 <_printf_i>:
 80155b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80155bc:	460c      	mov	r4, r1
 80155be:	4691      	mov	r9, r2
 80155c0:	7e27      	ldrb	r7, [r4, #24]
 80155c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80155c4:	2f78      	cmp	r7, #120	; 0x78
 80155c6:	4680      	mov	r8, r0
 80155c8:	469a      	mov	sl, r3
 80155ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80155ce:	d807      	bhi.n	80155e0 <_printf_i+0x28>
 80155d0:	2f62      	cmp	r7, #98	; 0x62
 80155d2:	d80a      	bhi.n	80155ea <_printf_i+0x32>
 80155d4:	2f00      	cmp	r7, #0
 80155d6:	f000 80d8 	beq.w	801578a <_printf_i+0x1d2>
 80155da:	2f58      	cmp	r7, #88	; 0x58
 80155dc:	f000 80a3 	beq.w	8015726 <_printf_i+0x16e>
 80155e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80155e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80155e8:	e03a      	b.n	8015660 <_printf_i+0xa8>
 80155ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80155ee:	2b15      	cmp	r3, #21
 80155f0:	d8f6      	bhi.n	80155e0 <_printf_i+0x28>
 80155f2:	a001      	add	r0, pc, #4	; (adr r0, 80155f8 <_printf_i+0x40>)
 80155f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80155f8:	08015651 	.word	0x08015651
 80155fc:	08015665 	.word	0x08015665
 8015600:	080155e1 	.word	0x080155e1
 8015604:	080155e1 	.word	0x080155e1
 8015608:	080155e1 	.word	0x080155e1
 801560c:	080155e1 	.word	0x080155e1
 8015610:	08015665 	.word	0x08015665
 8015614:	080155e1 	.word	0x080155e1
 8015618:	080155e1 	.word	0x080155e1
 801561c:	080155e1 	.word	0x080155e1
 8015620:	080155e1 	.word	0x080155e1
 8015624:	08015771 	.word	0x08015771
 8015628:	08015695 	.word	0x08015695
 801562c:	08015753 	.word	0x08015753
 8015630:	080155e1 	.word	0x080155e1
 8015634:	080155e1 	.word	0x080155e1
 8015638:	08015793 	.word	0x08015793
 801563c:	080155e1 	.word	0x080155e1
 8015640:	08015695 	.word	0x08015695
 8015644:	080155e1 	.word	0x080155e1
 8015648:	080155e1 	.word	0x080155e1
 801564c:	0801575b 	.word	0x0801575b
 8015650:	680b      	ldr	r3, [r1, #0]
 8015652:	1d1a      	adds	r2, r3, #4
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	600a      	str	r2, [r1, #0]
 8015658:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801565c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015660:	2301      	movs	r3, #1
 8015662:	e0a3      	b.n	80157ac <_printf_i+0x1f4>
 8015664:	6825      	ldr	r5, [r4, #0]
 8015666:	6808      	ldr	r0, [r1, #0]
 8015668:	062e      	lsls	r6, r5, #24
 801566a:	f100 0304 	add.w	r3, r0, #4
 801566e:	d50a      	bpl.n	8015686 <_printf_i+0xce>
 8015670:	6805      	ldr	r5, [r0, #0]
 8015672:	600b      	str	r3, [r1, #0]
 8015674:	2d00      	cmp	r5, #0
 8015676:	da03      	bge.n	8015680 <_printf_i+0xc8>
 8015678:	232d      	movs	r3, #45	; 0x2d
 801567a:	426d      	negs	r5, r5
 801567c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015680:	485e      	ldr	r0, [pc, #376]	; (80157fc <_printf_i+0x244>)
 8015682:	230a      	movs	r3, #10
 8015684:	e019      	b.n	80156ba <_printf_i+0x102>
 8015686:	f015 0f40 	tst.w	r5, #64	; 0x40
 801568a:	6805      	ldr	r5, [r0, #0]
 801568c:	600b      	str	r3, [r1, #0]
 801568e:	bf18      	it	ne
 8015690:	b22d      	sxthne	r5, r5
 8015692:	e7ef      	b.n	8015674 <_printf_i+0xbc>
 8015694:	680b      	ldr	r3, [r1, #0]
 8015696:	6825      	ldr	r5, [r4, #0]
 8015698:	1d18      	adds	r0, r3, #4
 801569a:	6008      	str	r0, [r1, #0]
 801569c:	0628      	lsls	r0, r5, #24
 801569e:	d501      	bpl.n	80156a4 <_printf_i+0xec>
 80156a0:	681d      	ldr	r5, [r3, #0]
 80156a2:	e002      	b.n	80156aa <_printf_i+0xf2>
 80156a4:	0669      	lsls	r1, r5, #25
 80156a6:	d5fb      	bpl.n	80156a0 <_printf_i+0xe8>
 80156a8:	881d      	ldrh	r5, [r3, #0]
 80156aa:	4854      	ldr	r0, [pc, #336]	; (80157fc <_printf_i+0x244>)
 80156ac:	2f6f      	cmp	r7, #111	; 0x6f
 80156ae:	bf0c      	ite	eq
 80156b0:	2308      	moveq	r3, #8
 80156b2:	230a      	movne	r3, #10
 80156b4:	2100      	movs	r1, #0
 80156b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80156ba:	6866      	ldr	r6, [r4, #4]
 80156bc:	60a6      	str	r6, [r4, #8]
 80156be:	2e00      	cmp	r6, #0
 80156c0:	bfa2      	ittt	ge
 80156c2:	6821      	ldrge	r1, [r4, #0]
 80156c4:	f021 0104 	bicge.w	r1, r1, #4
 80156c8:	6021      	strge	r1, [r4, #0]
 80156ca:	b90d      	cbnz	r5, 80156d0 <_printf_i+0x118>
 80156cc:	2e00      	cmp	r6, #0
 80156ce:	d04d      	beq.n	801576c <_printf_i+0x1b4>
 80156d0:	4616      	mov	r6, r2
 80156d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80156d6:	fb03 5711 	mls	r7, r3, r1, r5
 80156da:	5dc7      	ldrb	r7, [r0, r7]
 80156dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80156e0:	462f      	mov	r7, r5
 80156e2:	42bb      	cmp	r3, r7
 80156e4:	460d      	mov	r5, r1
 80156e6:	d9f4      	bls.n	80156d2 <_printf_i+0x11a>
 80156e8:	2b08      	cmp	r3, #8
 80156ea:	d10b      	bne.n	8015704 <_printf_i+0x14c>
 80156ec:	6823      	ldr	r3, [r4, #0]
 80156ee:	07df      	lsls	r7, r3, #31
 80156f0:	d508      	bpl.n	8015704 <_printf_i+0x14c>
 80156f2:	6923      	ldr	r3, [r4, #16]
 80156f4:	6861      	ldr	r1, [r4, #4]
 80156f6:	4299      	cmp	r1, r3
 80156f8:	bfde      	ittt	le
 80156fa:	2330      	movle	r3, #48	; 0x30
 80156fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015700:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015704:	1b92      	subs	r2, r2, r6
 8015706:	6122      	str	r2, [r4, #16]
 8015708:	f8cd a000 	str.w	sl, [sp]
 801570c:	464b      	mov	r3, r9
 801570e:	aa03      	add	r2, sp, #12
 8015710:	4621      	mov	r1, r4
 8015712:	4640      	mov	r0, r8
 8015714:	f7ff fee2 	bl	80154dc <_printf_common>
 8015718:	3001      	adds	r0, #1
 801571a:	d14c      	bne.n	80157b6 <_printf_i+0x1fe>
 801571c:	f04f 30ff 	mov.w	r0, #4294967295
 8015720:	b004      	add	sp, #16
 8015722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015726:	4835      	ldr	r0, [pc, #212]	; (80157fc <_printf_i+0x244>)
 8015728:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801572c:	6823      	ldr	r3, [r4, #0]
 801572e:	680e      	ldr	r6, [r1, #0]
 8015730:	061f      	lsls	r7, r3, #24
 8015732:	f856 5b04 	ldr.w	r5, [r6], #4
 8015736:	600e      	str	r6, [r1, #0]
 8015738:	d514      	bpl.n	8015764 <_printf_i+0x1ac>
 801573a:	07d9      	lsls	r1, r3, #31
 801573c:	bf44      	itt	mi
 801573e:	f043 0320 	orrmi.w	r3, r3, #32
 8015742:	6023      	strmi	r3, [r4, #0]
 8015744:	b91d      	cbnz	r5, 801574e <_printf_i+0x196>
 8015746:	6823      	ldr	r3, [r4, #0]
 8015748:	f023 0320 	bic.w	r3, r3, #32
 801574c:	6023      	str	r3, [r4, #0]
 801574e:	2310      	movs	r3, #16
 8015750:	e7b0      	b.n	80156b4 <_printf_i+0xfc>
 8015752:	6823      	ldr	r3, [r4, #0]
 8015754:	f043 0320 	orr.w	r3, r3, #32
 8015758:	6023      	str	r3, [r4, #0]
 801575a:	2378      	movs	r3, #120	; 0x78
 801575c:	4828      	ldr	r0, [pc, #160]	; (8015800 <_printf_i+0x248>)
 801575e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015762:	e7e3      	b.n	801572c <_printf_i+0x174>
 8015764:	065e      	lsls	r6, r3, #25
 8015766:	bf48      	it	mi
 8015768:	b2ad      	uxthmi	r5, r5
 801576a:	e7e6      	b.n	801573a <_printf_i+0x182>
 801576c:	4616      	mov	r6, r2
 801576e:	e7bb      	b.n	80156e8 <_printf_i+0x130>
 8015770:	680b      	ldr	r3, [r1, #0]
 8015772:	6826      	ldr	r6, [r4, #0]
 8015774:	6960      	ldr	r0, [r4, #20]
 8015776:	1d1d      	adds	r5, r3, #4
 8015778:	600d      	str	r5, [r1, #0]
 801577a:	0635      	lsls	r5, r6, #24
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	d501      	bpl.n	8015784 <_printf_i+0x1cc>
 8015780:	6018      	str	r0, [r3, #0]
 8015782:	e002      	b.n	801578a <_printf_i+0x1d2>
 8015784:	0671      	lsls	r1, r6, #25
 8015786:	d5fb      	bpl.n	8015780 <_printf_i+0x1c8>
 8015788:	8018      	strh	r0, [r3, #0]
 801578a:	2300      	movs	r3, #0
 801578c:	6123      	str	r3, [r4, #16]
 801578e:	4616      	mov	r6, r2
 8015790:	e7ba      	b.n	8015708 <_printf_i+0x150>
 8015792:	680b      	ldr	r3, [r1, #0]
 8015794:	1d1a      	adds	r2, r3, #4
 8015796:	600a      	str	r2, [r1, #0]
 8015798:	681e      	ldr	r6, [r3, #0]
 801579a:	6862      	ldr	r2, [r4, #4]
 801579c:	2100      	movs	r1, #0
 801579e:	4630      	mov	r0, r6
 80157a0:	f7ea fdbe 	bl	8000320 <memchr>
 80157a4:	b108      	cbz	r0, 80157aa <_printf_i+0x1f2>
 80157a6:	1b80      	subs	r0, r0, r6
 80157a8:	6060      	str	r0, [r4, #4]
 80157aa:	6863      	ldr	r3, [r4, #4]
 80157ac:	6123      	str	r3, [r4, #16]
 80157ae:	2300      	movs	r3, #0
 80157b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80157b4:	e7a8      	b.n	8015708 <_printf_i+0x150>
 80157b6:	6923      	ldr	r3, [r4, #16]
 80157b8:	4632      	mov	r2, r6
 80157ba:	4649      	mov	r1, r9
 80157bc:	4640      	mov	r0, r8
 80157be:	47d0      	blx	sl
 80157c0:	3001      	adds	r0, #1
 80157c2:	d0ab      	beq.n	801571c <_printf_i+0x164>
 80157c4:	6823      	ldr	r3, [r4, #0]
 80157c6:	079b      	lsls	r3, r3, #30
 80157c8:	d413      	bmi.n	80157f2 <_printf_i+0x23a>
 80157ca:	68e0      	ldr	r0, [r4, #12]
 80157cc:	9b03      	ldr	r3, [sp, #12]
 80157ce:	4298      	cmp	r0, r3
 80157d0:	bfb8      	it	lt
 80157d2:	4618      	movlt	r0, r3
 80157d4:	e7a4      	b.n	8015720 <_printf_i+0x168>
 80157d6:	2301      	movs	r3, #1
 80157d8:	4632      	mov	r2, r6
 80157da:	4649      	mov	r1, r9
 80157dc:	4640      	mov	r0, r8
 80157de:	47d0      	blx	sl
 80157e0:	3001      	adds	r0, #1
 80157e2:	d09b      	beq.n	801571c <_printf_i+0x164>
 80157e4:	3501      	adds	r5, #1
 80157e6:	68e3      	ldr	r3, [r4, #12]
 80157e8:	9903      	ldr	r1, [sp, #12]
 80157ea:	1a5b      	subs	r3, r3, r1
 80157ec:	42ab      	cmp	r3, r5
 80157ee:	dcf2      	bgt.n	80157d6 <_printf_i+0x21e>
 80157f0:	e7eb      	b.n	80157ca <_printf_i+0x212>
 80157f2:	2500      	movs	r5, #0
 80157f4:	f104 0619 	add.w	r6, r4, #25
 80157f8:	e7f5      	b.n	80157e6 <_printf_i+0x22e>
 80157fa:	bf00      	nop
 80157fc:	08019915 	.word	0x08019915
 8015800:	08019926 	.word	0x08019926

08015804 <_sbrk_r>:
 8015804:	b538      	push	{r3, r4, r5, lr}
 8015806:	4d06      	ldr	r5, [pc, #24]	; (8015820 <_sbrk_r+0x1c>)
 8015808:	2300      	movs	r3, #0
 801580a:	4604      	mov	r4, r0
 801580c:	4608      	mov	r0, r1
 801580e:	602b      	str	r3, [r5, #0]
 8015810:	f7ec f8a4 	bl	800195c <_sbrk>
 8015814:	1c43      	adds	r3, r0, #1
 8015816:	d102      	bne.n	801581e <_sbrk_r+0x1a>
 8015818:	682b      	ldr	r3, [r5, #0]
 801581a:	b103      	cbz	r3, 801581e <_sbrk_r+0x1a>
 801581c:	6023      	str	r3, [r4, #0]
 801581e:	bd38      	pop	{r3, r4, r5, pc}
 8015820:	24003620 	.word	0x24003620

08015824 <__sread>:
 8015824:	b510      	push	{r4, lr}
 8015826:	460c      	mov	r4, r1
 8015828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801582c:	f000 fa6c 	bl	8015d08 <_read_r>
 8015830:	2800      	cmp	r0, #0
 8015832:	bfab      	itete	ge
 8015834:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015836:	89a3      	ldrhlt	r3, [r4, #12]
 8015838:	181b      	addge	r3, r3, r0
 801583a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801583e:	bfac      	ite	ge
 8015840:	6563      	strge	r3, [r4, #84]	; 0x54
 8015842:	81a3      	strhlt	r3, [r4, #12]
 8015844:	bd10      	pop	{r4, pc}

08015846 <__swrite>:
 8015846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801584a:	461f      	mov	r7, r3
 801584c:	898b      	ldrh	r3, [r1, #12]
 801584e:	05db      	lsls	r3, r3, #23
 8015850:	4605      	mov	r5, r0
 8015852:	460c      	mov	r4, r1
 8015854:	4616      	mov	r6, r2
 8015856:	d505      	bpl.n	8015864 <__swrite+0x1e>
 8015858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801585c:	2302      	movs	r3, #2
 801585e:	2200      	movs	r2, #0
 8015860:	f000 f9d0 	bl	8015c04 <_lseek_r>
 8015864:	89a3      	ldrh	r3, [r4, #12]
 8015866:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801586a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801586e:	81a3      	strh	r3, [r4, #12]
 8015870:	4632      	mov	r2, r6
 8015872:	463b      	mov	r3, r7
 8015874:	4628      	mov	r0, r5
 8015876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801587a:	f000 b869 	b.w	8015950 <_write_r>

0801587e <__sseek>:
 801587e:	b510      	push	{r4, lr}
 8015880:	460c      	mov	r4, r1
 8015882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015886:	f000 f9bd 	bl	8015c04 <_lseek_r>
 801588a:	1c43      	adds	r3, r0, #1
 801588c:	89a3      	ldrh	r3, [r4, #12]
 801588e:	bf15      	itete	ne
 8015890:	6560      	strne	r0, [r4, #84]	; 0x54
 8015892:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015896:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801589a:	81a3      	strheq	r3, [r4, #12]
 801589c:	bf18      	it	ne
 801589e:	81a3      	strhne	r3, [r4, #12]
 80158a0:	bd10      	pop	{r4, pc}

080158a2 <__sclose>:
 80158a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80158a6:	f000 b8db 	b.w	8015a60 <_close_r>
	...

080158ac <__swbuf_r>:
 80158ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158ae:	460e      	mov	r6, r1
 80158b0:	4614      	mov	r4, r2
 80158b2:	4605      	mov	r5, r0
 80158b4:	b118      	cbz	r0, 80158be <__swbuf_r+0x12>
 80158b6:	6983      	ldr	r3, [r0, #24]
 80158b8:	b90b      	cbnz	r3, 80158be <__swbuf_r+0x12>
 80158ba:	f7ff fb51 	bl	8014f60 <__sinit>
 80158be:	4b21      	ldr	r3, [pc, #132]	; (8015944 <__swbuf_r+0x98>)
 80158c0:	429c      	cmp	r4, r3
 80158c2:	d12b      	bne.n	801591c <__swbuf_r+0x70>
 80158c4:	686c      	ldr	r4, [r5, #4]
 80158c6:	69a3      	ldr	r3, [r4, #24]
 80158c8:	60a3      	str	r3, [r4, #8]
 80158ca:	89a3      	ldrh	r3, [r4, #12]
 80158cc:	071a      	lsls	r2, r3, #28
 80158ce:	d52f      	bpl.n	8015930 <__swbuf_r+0x84>
 80158d0:	6923      	ldr	r3, [r4, #16]
 80158d2:	b36b      	cbz	r3, 8015930 <__swbuf_r+0x84>
 80158d4:	6923      	ldr	r3, [r4, #16]
 80158d6:	6820      	ldr	r0, [r4, #0]
 80158d8:	1ac0      	subs	r0, r0, r3
 80158da:	6963      	ldr	r3, [r4, #20]
 80158dc:	b2f6      	uxtb	r6, r6
 80158de:	4283      	cmp	r3, r0
 80158e0:	4637      	mov	r7, r6
 80158e2:	dc04      	bgt.n	80158ee <__swbuf_r+0x42>
 80158e4:	4621      	mov	r1, r4
 80158e6:	4628      	mov	r0, r5
 80158e8:	f000 f950 	bl	8015b8c <_fflush_r>
 80158ec:	bb30      	cbnz	r0, 801593c <__swbuf_r+0x90>
 80158ee:	68a3      	ldr	r3, [r4, #8]
 80158f0:	3b01      	subs	r3, #1
 80158f2:	60a3      	str	r3, [r4, #8]
 80158f4:	6823      	ldr	r3, [r4, #0]
 80158f6:	1c5a      	adds	r2, r3, #1
 80158f8:	6022      	str	r2, [r4, #0]
 80158fa:	701e      	strb	r6, [r3, #0]
 80158fc:	6963      	ldr	r3, [r4, #20]
 80158fe:	3001      	adds	r0, #1
 8015900:	4283      	cmp	r3, r0
 8015902:	d004      	beq.n	801590e <__swbuf_r+0x62>
 8015904:	89a3      	ldrh	r3, [r4, #12]
 8015906:	07db      	lsls	r3, r3, #31
 8015908:	d506      	bpl.n	8015918 <__swbuf_r+0x6c>
 801590a:	2e0a      	cmp	r6, #10
 801590c:	d104      	bne.n	8015918 <__swbuf_r+0x6c>
 801590e:	4621      	mov	r1, r4
 8015910:	4628      	mov	r0, r5
 8015912:	f000 f93b 	bl	8015b8c <_fflush_r>
 8015916:	b988      	cbnz	r0, 801593c <__swbuf_r+0x90>
 8015918:	4638      	mov	r0, r7
 801591a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801591c:	4b0a      	ldr	r3, [pc, #40]	; (8015948 <__swbuf_r+0x9c>)
 801591e:	429c      	cmp	r4, r3
 8015920:	d101      	bne.n	8015926 <__swbuf_r+0x7a>
 8015922:	68ac      	ldr	r4, [r5, #8]
 8015924:	e7cf      	b.n	80158c6 <__swbuf_r+0x1a>
 8015926:	4b09      	ldr	r3, [pc, #36]	; (801594c <__swbuf_r+0xa0>)
 8015928:	429c      	cmp	r4, r3
 801592a:	bf08      	it	eq
 801592c:	68ec      	ldreq	r4, [r5, #12]
 801592e:	e7ca      	b.n	80158c6 <__swbuf_r+0x1a>
 8015930:	4621      	mov	r1, r4
 8015932:	4628      	mov	r0, r5
 8015934:	f000 f81e 	bl	8015974 <__swsetup_r>
 8015938:	2800      	cmp	r0, #0
 801593a:	d0cb      	beq.n	80158d4 <__swbuf_r+0x28>
 801593c:	f04f 37ff 	mov.w	r7, #4294967295
 8015940:	e7ea      	b.n	8015918 <__swbuf_r+0x6c>
 8015942:	bf00      	nop
 8015944:	080198c4 	.word	0x080198c4
 8015948:	080198e4 	.word	0x080198e4
 801594c:	080198a4 	.word	0x080198a4

08015950 <_write_r>:
 8015950:	b538      	push	{r3, r4, r5, lr}
 8015952:	4d07      	ldr	r5, [pc, #28]	; (8015970 <_write_r+0x20>)
 8015954:	4604      	mov	r4, r0
 8015956:	4608      	mov	r0, r1
 8015958:	4611      	mov	r1, r2
 801595a:	2200      	movs	r2, #0
 801595c:	602a      	str	r2, [r5, #0]
 801595e:	461a      	mov	r2, r3
 8015960:	f7eb ffab 	bl	80018ba <_write>
 8015964:	1c43      	adds	r3, r0, #1
 8015966:	d102      	bne.n	801596e <_write_r+0x1e>
 8015968:	682b      	ldr	r3, [r5, #0]
 801596a:	b103      	cbz	r3, 801596e <_write_r+0x1e>
 801596c:	6023      	str	r3, [r4, #0]
 801596e:	bd38      	pop	{r3, r4, r5, pc}
 8015970:	24003620 	.word	0x24003620

08015974 <__swsetup_r>:
 8015974:	4b32      	ldr	r3, [pc, #200]	; (8015a40 <__swsetup_r+0xcc>)
 8015976:	b570      	push	{r4, r5, r6, lr}
 8015978:	681d      	ldr	r5, [r3, #0]
 801597a:	4606      	mov	r6, r0
 801597c:	460c      	mov	r4, r1
 801597e:	b125      	cbz	r5, 801598a <__swsetup_r+0x16>
 8015980:	69ab      	ldr	r3, [r5, #24]
 8015982:	b913      	cbnz	r3, 801598a <__swsetup_r+0x16>
 8015984:	4628      	mov	r0, r5
 8015986:	f7ff faeb 	bl	8014f60 <__sinit>
 801598a:	4b2e      	ldr	r3, [pc, #184]	; (8015a44 <__swsetup_r+0xd0>)
 801598c:	429c      	cmp	r4, r3
 801598e:	d10f      	bne.n	80159b0 <__swsetup_r+0x3c>
 8015990:	686c      	ldr	r4, [r5, #4]
 8015992:	89a3      	ldrh	r3, [r4, #12]
 8015994:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015998:	0719      	lsls	r1, r3, #28
 801599a:	d42c      	bmi.n	80159f6 <__swsetup_r+0x82>
 801599c:	06dd      	lsls	r5, r3, #27
 801599e:	d411      	bmi.n	80159c4 <__swsetup_r+0x50>
 80159a0:	2309      	movs	r3, #9
 80159a2:	6033      	str	r3, [r6, #0]
 80159a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80159a8:	81a3      	strh	r3, [r4, #12]
 80159aa:	f04f 30ff 	mov.w	r0, #4294967295
 80159ae:	e03e      	b.n	8015a2e <__swsetup_r+0xba>
 80159b0:	4b25      	ldr	r3, [pc, #148]	; (8015a48 <__swsetup_r+0xd4>)
 80159b2:	429c      	cmp	r4, r3
 80159b4:	d101      	bne.n	80159ba <__swsetup_r+0x46>
 80159b6:	68ac      	ldr	r4, [r5, #8]
 80159b8:	e7eb      	b.n	8015992 <__swsetup_r+0x1e>
 80159ba:	4b24      	ldr	r3, [pc, #144]	; (8015a4c <__swsetup_r+0xd8>)
 80159bc:	429c      	cmp	r4, r3
 80159be:	bf08      	it	eq
 80159c0:	68ec      	ldreq	r4, [r5, #12]
 80159c2:	e7e6      	b.n	8015992 <__swsetup_r+0x1e>
 80159c4:	0758      	lsls	r0, r3, #29
 80159c6:	d512      	bpl.n	80159ee <__swsetup_r+0x7a>
 80159c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80159ca:	b141      	cbz	r1, 80159de <__swsetup_r+0x6a>
 80159cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80159d0:	4299      	cmp	r1, r3
 80159d2:	d002      	beq.n	80159da <__swsetup_r+0x66>
 80159d4:	4630      	mov	r0, r6
 80159d6:	f7ff fb7d 	bl	80150d4 <_free_r>
 80159da:	2300      	movs	r3, #0
 80159dc:	6363      	str	r3, [r4, #52]	; 0x34
 80159de:	89a3      	ldrh	r3, [r4, #12]
 80159e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80159e4:	81a3      	strh	r3, [r4, #12]
 80159e6:	2300      	movs	r3, #0
 80159e8:	6063      	str	r3, [r4, #4]
 80159ea:	6923      	ldr	r3, [r4, #16]
 80159ec:	6023      	str	r3, [r4, #0]
 80159ee:	89a3      	ldrh	r3, [r4, #12]
 80159f0:	f043 0308 	orr.w	r3, r3, #8
 80159f4:	81a3      	strh	r3, [r4, #12]
 80159f6:	6923      	ldr	r3, [r4, #16]
 80159f8:	b94b      	cbnz	r3, 8015a0e <__swsetup_r+0x9a>
 80159fa:	89a3      	ldrh	r3, [r4, #12]
 80159fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015a00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015a04:	d003      	beq.n	8015a0e <__swsetup_r+0x9a>
 8015a06:	4621      	mov	r1, r4
 8015a08:	4630      	mov	r0, r6
 8015a0a:	f000 f931 	bl	8015c70 <__smakebuf_r>
 8015a0e:	89a0      	ldrh	r0, [r4, #12]
 8015a10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015a14:	f010 0301 	ands.w	r3, r0, #1
 8015a18:	d00a      	beq.n	8015a30 <__swsetup_r+0xbc>
 8015a1a:	2300      	movs	r3, #0
 8015a1c:	60a3      	str	r3, [r4, #8]
 8015a1e:	6963      	ldr	r3, [r4, #20]
 8015a20:	425b      	negs	r3, r3
 8015a22:	61a3      	str	r3, [r4, #24]
 8015a24:	6923      	ldr	r3, [r4, #16]
 8015a26:	b943      	cbnz	r3, 8015a3a <__swsetup_r+0xc6>
 8015a28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015a2c:	d1ba      	bne.n	80159a4 <__swsetup_r+0x30>
 8015a2e:	bd70      	pop	{r4, r5, r6, pc}
 8015a30:	0781      	lsls	r1, r0, #30
 8015a32:	bf58      	it	pl
 8015a34:	6963      	ldrpl	r3, [r4, #20]
 8015a36:	60a3      	str	r3, [r4, #8]
 8015a38:	e7f4      	b.n	8015a24 <__swsetup_r+0xb0>
 8015a3a:	2000      	movs	r0, #0
 8015a3c:	e7f7      	b.n	8015a2e <__swsetup_r+0xba>
 8015a3e:	bf00      	nop
 8015a40:	24000038 	.word	0x24000038
 8015a44:	080198c4 	.word	0x080198c4
 8015a48:	080198e4 	.word	0x080198e4
 8015a4c:	080198a4 	.word	0x080198a4

08015a50 <abort>:
 8015a50:	b508      	push	{r3, lr}
 8015a52:	2006      	movs	r0, #6
 8015a54:	f000 f992 	bl	8015d7c <raise>
 8015a58:	2001      	movs	r0, #1
 8015a5a:	f7eb ff07 	bl	800186c <_exit>
	...

08015a60 <_close_r>:
 8015a60:	b538      	push	{r3, r4, r5, lr}
 8015a62:	4d06      	ldr	r5, [pc, #24]	; (8015a7c <_close_r+0x1c>)
 8015a64:	2300      	movs	r3, #0
 8015a66:	4604      	mov	r4, r0
 8015a68:	4608      	mov	r0, r1
 8015a6a:	602b      	str	r3, [r5, #0]
 8015a6c:	f7eb ff41 	bl	80018f2 <_close>
 8015a70:	1c43      	adds	r3, r0, #1
 8015a72:	d102      	bne.n	8015a7a <_close_r+0x1a>
 8015a74:	682b      	ldr	r3, [r5, #0]
 8015a76:	b103      	cbz	r3, 8015a7a <_close_r+0x1a>
 8015a78:	6023      	str	r3, [r4, #0]
 8015a7a:	bd38      	pop	{r3, r4, r5, pc}
 8015a7c:	24003620 	.word	0x24003620

08015a80 <__sflush_r>:
 8015a80:	898a      	ldrh	r2, [r1, #12]
 8015a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a86:	4605      	mov	r5, r0
 8015a88:	0710      	lsls	r0, r2, #28
 8015a8a:	460c      	mov	r4, r1
 8015a8c:	d458      	bmi.n	8015b40 <__sflush_r+0xc0>
 8015a8e:	684b      	ldr	r3, [r1, #4]
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	dc05      	bgt.n	8015aa0 <__sflush_r+0x20>
 8015a94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	dc02      	bgt.n	8015aa0 <__sflush_r+0x20>
 8015a9a:	2000      	movs	r0, #0
 8015a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015aa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015aa2:	2e00      	cmp	r6, #0
 8015aa4:	d0f9      	beq.n	8015a9a <__sflush_r+0x1a>
 8015aa6:	2300      	movs	r3, #0
 8015aa8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015aac:	682f      	ldr	r7, [r5, #0]
 8015aae:	602b      	str	r3, [r5, #0]
 8015ab0:	d032      	beq.n	8015b18 <__sflush_r+0x98>
 8015ab2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015ab4:	89a3      	ldrh	r3, [r4, #12]
 8015ab6:	075a      	lsls	r2, r3, #29
 8015ab8:	d505      	bpl.n	8015ac6 <__sflush_r+0x46>
 8015aba:	6863      	ldr	r3, [r4, #4]
 8015abc:	1ac0      	subs	r0, r0, r3
 8015abe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015ac0:	b10b      	cbz	r3, 8015ac6 <__sflush_r+0x46>
 8015ac2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015ac4:	1ac0      	subs	r0, r0, r3
 8015ac6:	2300      	movs	r3, #0
 8015ac8:	4602      	mov	r2, r0
 8015aca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015acc:	6a21      	ldr	r1, [r4, #32]
 8015ace:	4628      	mov	r0, r5
 8015ad0:	47b0      	blx	r6
 8015ad2:	1c43      	adds	r3, r0, #1
 8015ad4:	89a3      	ldrh	r3, [r4, #12]
 8015ad6:	d106      	bne.n	8015ae6 <__sflush_r+0x66>
 8015ad8:	6829      	ldr	r1, [r5, #0]
 8015ada:	291d      	cmp	r1, #29
 8015adc:	d82c      	bhi.n	8015b38 <__sflush_r+0xb8>
 8015ade:	4a2a      	ldr	r2, [pc, #168]	; (8015b88 <__sflush_r+0x108>)
 8015ae0:	40ca      	lsrs	r2, r1
 8015ae2:	07d6      	lsls	r6, r2, #31
 8015ae4:	d528      	bpl.n	8015b38 <__sflush_r+0xb8>
 8015ae6:	2200      	movs	r2, #0
 8015ae8:	6062      	str	r2, [r4, #4]
 8015aea:	04d9      	lsls	r1, r3, #19
 8015aec:	6922      	ldr	r2, [r4, #16]
 8015aee:	6022      	str	r2, [r4, #0]
 8015af0:	d504      	bpl.n	8015afc <__sflush_r+0x7c>
 8015af2:	1c42      	adds	r2, r0, #1
 8015af4:	d101      	bne.n	8015afa <__sflush_r+0x7a>
 8015af6:	682b      	ldr	r3, [r5, #0]
 8015af8:	b903      	cbnz	r3, 8015afc <__sflush_r+0x7c>
 8015afa:	6560      	str	r0, [r4, #84]	; 0x54
 8015afc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015afe:	602f      	str	r7, [r5, #0]
 8015b00:	2900      	cmp	r1, #0
 8015b02:	d0ca      	beq.n	8015a9a <__sflush_r+0x1a>
 8015b04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015b08:	4299      	cmp	r1, r3
 8015b0a:	d002      	beq.n	8015b12 <__sflush_r+0x92>
 8015b0c:	4628      	mov	r0, r5
 8015b0e:	f7ff fae1 	bl	80150d4 <_free_r>
 8015b12:	2000      	movs	r0, #0
 8015b14:	6360      	str	r0, [r4, #52]	; 0x34
 8015b16:	e7c1      	b.n	8015a9c <__sflush_r+0x1c>
 8015b18:	6a21      	ldr	r1, [r4, #32]
 8015b1a:	2301      	movs	r3, #1
 8015b1c:	4628      	mov	r0, r5
 8015b1e:	47b0      	blx	r6
 8015b20:	1c41      	adds	r1, r0, #1
 8015b22:	d1c7      	bne.n	8015ab4 <__sflush_r+0x34>
 8015b24:	682b      	ldr	r3, [r5, #0]
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d0c4      	beq.n	8015ab4 <__sflush_r+0x34>
 8015b2a:	2b1d      	cmp	r3, #29
 8015b2c:	d001      	beq.n	8015b32 <__sflush_r+0xb2>
 8015b2e:	2b16      	cmp	r3, #22
 8015b30:	d101      	bne.n	8015b36 <__sflush_r+0xb6>
 8015b32:	602f      	str	r7, [r5, #0]
 8015b34:	e7b1      	b.n	8015a9a <__sflush_r+0x1a>
 8015b36:	89a3      	ldrh	r3, [r4, #12]
 8015b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015b3c:	81a3      	strh	r3, [r4, #12]
 8015b3e:	e7ad      	b.n	8015a9c <__sflush_r+0x1c>
 8015b40:	690f      	ldr	r7, [r1, #16]
 8015b42:	2f00      	cmp	r7, #0
 8015b44:	d0a9      	beq.n	8015a9a <__sflush_r+0x1a>
 8015b46:	0793      	lsls	r3, r2, #30
 8015b48:	680e      	ldr	r6, [r1, #0]
 8015b4a:	bf08      	it	eq
 8015b4c:	694b      	ldreq	r3, [r1, #20]
 8015b4e:	600f      	str	r7, [r1, #0]
 8015b50:	bf18      	it	ne
 8015b52:	2300      	movne	r3, #0
 8015b54:	eba6 0807 	sub.w	r8, r6, r7
 8015b58:	608b      	str	r3, [r1, #8]
 8015b5a:	f1b8 0f00 	cmp.w	r8, #0
 8015b5e:	dd9c      	ble.n	8015a9a <__sflush_r+0x1a>
 8015b60:	6a21      	ldr	r1, [r4, #32]
 8015b62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015b64:	4643      	mov	r3, r8
 8015b66:	463a      	mov	r2, r7
 8015b68:	4628      	mov	r0, r5
 8015b6a:	47b0      	blx	r6
 8015b6c:	2800      	cmp	r0, #0
 8015b6e:	dc06      	bgt.n	8015b7e <__sflush_r+0xfe>
 8015b70:	89a3      	ldrh	r3, [r4, #12]
 8015b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015b76:	81a3      	strh	r3, [r4, #12]
 8015b78:	f04f 30ff 	mov.w	r0, #4294967295
 8015b7c:	e78e      	b.n	8015a9c <__sflush_r+0x1c>
 8015b7e:	4407      	add	r7, r0
 8015b80:	eba8 0800 	sub.w	r8, r8, r0
 8015b84:	e7e9      	b.n	8015b5a <__sflush_r+0xda>
 8015b86:	bf00      	nop
 8015b88:	20400001 	.word	0x20400001

08015b8c <_fflush_r>:
 8015b8c:	b538      	push	{r3, r4, r5, lr}
 8015b8e:	690b      	ldr	r3, [r1, #16]
 8015b90:	4605      	mov	r5, r0
 8015b92:	460c      	mov	r4, r1
 8015b94:	b913      	cbnz	r3, 8015b9c <_fflush_r+0x10>
 8015b96:	2500      	movs	r5, #0
 8015b98:	4628      	mov	r0, r5
 8015b9a:	bd38      	pop	{r3, r4, r5, pc}
 8015b9c:	b118      	cbz	r0, 8015ba6 <_fflush_r+0x1a>
 8015b9e:	6983      	ldr	r3, [r0, #24]
 8015ba0:	b90b      	cbnz	r3, 8015ba6 <_fflush_r+0x1a>
 8015ba2:	f7ff f9dd 	bl	8014f60 <__sinit>
 8015ba6:	4b14      	ldr	r3, [pc, #80]	; (8015bf8 <_fflush_r+0x6c>)
 8015ba8:	429c      	cmp	r4, r3
 8015baa:	d11b      	bne.n	8015be4 <_fflush_r+0x58>
 8015bac:	686c      	ldr	r4, [r5, #4]
 8015bae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d0ef      	beq.n	8015b96 <_fflush_r+0xa>
 8015bb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015bb8:	07d0      	lsls	r0, r2, #31
 8015bba:	d404      	bmi.n	8015bc6 <_fflush_r+0x3a>
 8015bbc:	0599      	lsls	r1, r3, #22
 8015bbe:	d402      	bmi.n	8015bc6 <_fflush_r+0x3a>
 8015bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015bc2:	f7ff fa7d 	bl	80150c0 <__retarget_lock_acquire_recursive>
 8015bc6:	4628      	mov	r0, r5
 8015bc8:	4621      	mov	r1, r4
 8015bca:	f7ff ff59 	bl	8015a80 <__sflush_r>
 8015bce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015bd0:	07da      	lsls	r2, r3, #31
 8015bd2:	4605      	mov	r5, r0
 8015bd4:	d4e0      	bmi.n	8015b98 <_fflush_r+0xc>
 8015bd6:	89a3      	ldrh	r3, [r4, #12]
 8015bd8:	059b      	lsls	r3, r3, #22
 8015bda:	d4dd      	bmi.n	8015b98 <_fflush_r+0xc>
 8015bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015bde:	f7ff fa70 	bl	80150c2 <__retarget_lock_release_recursive>
 8015be2:	e7d9      	b.n	8015b98 <_fflush_r+0xc>
 8015be4:	4b05      	ldr	r3, [pc, #20]	; (8015bfc <_fflush_r+0x70>)
 8015be6:	429c      	cmp	r4, r3
 8015be8:	d101      	bne.n	8015bee <_fflush_r+0x62>
 8015bea:	68ac      	ldr	r4, [r5, #8]
 8015bec:	e7df      	b.n	8015bae <_fflush_r+0x22>
 8015bee:	4b04      	ldr	r3, [pc, #16]	; (8015c00 <_fflush_r+0x74>)
 8015bf0:	429c      	cmp	r4, r3
 8015bf2:	bf08      	it	eq
 8015bf4:	68ec      	ldreq	r4, [r5, #12]
 8015bf6:	e7da      	b.n	8015bae <_fflush_r+0x22>
 8015bf8:	080198c4 	.word	0x080198c4
 8015bfc:	080198e4 	.word	0x080198e4
 8015c00:	080198a4 	.word	0x080198a4

08015c04 <_lseek_r>:
 8015c04:	b538      	push	{r3, r4, r5, lr}
 8015c06:	4d07      	ldr	r5, [pc, #28]	; (8015c24 <_lseek_r+0x20>)
 8015c08:	4604      	mov	r4, r0
 8015c0a:	4608      	mov	r0, r1
 8015c0c:	4611      	mov	r1, r2
 8015c0e:	2200      	movs	r2, #0
 8015c10:	602a      	str	r2, [r5, #0]
 8015c12:	461a      	mov	r2, r3
 8015c14:	f7eb fe94 	bl	8001940 <_lseek>
 8015c18:	1c43      	adds	r3, r0, #1
 8015c1a:	d102      	bne.n	8015c22 <_lseek_r+0x1e>
 8015c1c:	682b      	ldr	r3, [r5, #0]
 8015c1e:	b103      	cbz	r3, 8015c22 <_lseek_r+0x1e>
 8015c20:	6023      	str	r3, [r4, #0]
 8015c22:	bd38      	pop	{r3, r4, r5, pc}
 8015c24:	24003620 	.word	0x24003620

08015c28 <__swhatbuf_r>:
 8015c28:	b570      	push	{r4, r5, r6, lr}
 8015c2a:	460e      	mov	r6, r1
 8015c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c30:	2900      	cmp	r1, #0
 8015c32:	b096      	sub	sp, #88	; 0x58
 8015c34:	4614      	mov	r4, r2
 8015c36:	461d      	mov	r5, r3
 8015c38:	da07      	bge.n	8015c4a <__swhatbuf_r+0x22>
 8015c3a:	2300      	movs	r3, #0
 8015c3c:	602b      	str	r3, [r5, #0]
 8015c3e:	89b3      	ldrh	r3, [r6, #12]
 8015c40:	061a      	lsls	r2, r3, #24
 8015c42:	d410      	bmi.n	8015c66 <__swhatbuf_r+0x3e>
 8015c44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015c48:	e00e      	b.n	8015c68 <__swhatbuf_r+0x40>
 8015c4a:	466a      	mov	r2, sp
 8015c4c:	f000 f8b2 	bl	8015db4 <_fstat_r>
 8015c50:	2800      	cmp	r0, #0
 8015c52:	dbf2      	blt.n	8015c3a <__swhatbuf_r+0x12>
 8015c54:	9a01      	ldr	r2, [sp, #4]
 8015c56:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015c5a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015c5e:	425a      	negs	r2, r3
 8015c60:	415a      	adcs	r2, r3
 8015c62:	602a      	str	r2, [r5, #0]
 8015c64:	e7ee      	b.n	8015c44 <__swhatbuf_r+0x1c>
 8015c66:	2340      	movs	r3, #64	; 0x40
 8015c68:	2000      	movs	r0, #0
 8015c6a:	6023      	str	r3, [r4, #0]
 8015c6c:	b016      	add	sp, #88	; 0x58
 8015c6e:	bd70      	pop	{r4, r5, r6, pc}

08015c70 <__smakebuf_r>:
 8015c70:	898b      	ldrh	r3, [r1, #12]
 8015c72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015c74:	079d      	lsls	r5, r3, #30
 8015c76:	4606      	mov	r6, r0
 8015c78:	460c      	mov	r4, r1
 8015c7a:	d507      	bpl.n	8015c8c <__smakebuf_r+0x1c>
 8015c7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015c80:	6023      	str	r3, [r4, #0]
 8015c82:	6123      	str	r3, [r4, #16]
 8015c84:	2301      	movs	r3, #1
 8015c86:	6163      	str	r3, [r4, #20]
 8015c88:	b002      	add	sp, #8
 8015c8a:	bd70      	pop	{r4, r5, r6, pc}
 8015c8c:	ab01      	add	r3, sp, #4
 8015c8e:	466a      	mov	r2, sp
 8015c90:	f7ff ffca 	bl	8015c28 <__swhatbuf_r>
 8015c94:	9900      	ldr	r1, [sp, #0]
 8015c96:	4605      	mov	r5, r0
 8015c98:	4630      	mov	r0, r6
 8015c9a:	f7ff fa6b 	bl	8015174 <_malloc_r>
 8015c9e:	b948      	cbnz	r0, 8015cb4 <__smakebuf_r+0x44>
 8015ca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ca4:	059a      	lsls	r2, r3, #22
 8015ca6:	d4ef      	bmi.n	8015c88 <__smakebuf_r+0x18>
 8015ca8:	f023 0303 	bic.w	r3, r3, #3
 8015cac:	f043 0302 	orr.w	r3, r3, #2
 8015cb0:	81a3      	strh	r3, [r4, #12]
 8015cb2:	e7e3      	b.n	8015c7c <__smakebuf_r+0xc>
 8015cb4:	4b0d      	ldr	r3, [pc, #52]	; (8015cec <__smakebuf_r+0x7c>)
 8015cb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8015cb8:	89a3      	ldrh	r3, [r4, #12]
 8015cba:	6020      	str	r0, [r4, #0]
 8015cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015cc0:	81a3      	strh	r3, [r4, #12]
 8015cc2:	9b00      	ldr	r3, [sp, #0]
 8015cc4:	6163      	str	r3, [r4, #20]
 8015cc6:	9b01      	ldr	r3, [sp, #4]
 8015cc8:	6120      	str	r0, [r4, #16]
 8015cca:	b15b      	cbz	r3, 8015ce4 <__smakebuf_r+0x74>
 8015ccc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015cd0:	4630      	mov	r0, r6
 8015cd2:	f000 f881 	bl	8015dd8 <_isatty_r>
 8015cd6:	b128      	cbz	r0, 8015ce4 <__smakebuf_r+0x74>
 8015cd8:	89a3      	ldrh	r3, [r4, #12]
 8015cda:	f023 0303 	bic.w	r3, r3, #3
 8015cde:	f043 0301 	orr.w	r3, r3, #1
 8015ce2:	81a3      	strh	r3, [r4, #12]
 8015ce4:	89a0      	ldrh	r0, [r4, #12]
 8015ce6:	4305      	orrs	r5, r0
 8015ce8:	81a5      	strh	r5, [r4, #12]
 8015cea:	e7cd      	b.n	8015c88 <__smakebuf_r+0x18>
 8015cec:	08014ef9 	.word	0x08014ef9

08015cf0 <__malloc_lock>:
 8015cf0:	4801      	ldr	r0, [pc, #4]	; (8015cf8 <__malloc_lock+0x8>)
 8015cf2:	f7ff b9e5 	b.w	80150c0 <__retarget_lock_acquire_recursive>
 8015cf6:	bf00      	nop
 8015cf8:	24003628 	.word	0x24003628

08015cfc <__malloc_unlock>:
 8015cfc:	4801      	ldr	r0, [pc, #4]	; (8015d04 <__malloc_unlock+0x8>)
 8015cfe:	f7ff b9e0 	b.w	80150c2 <__retarget_lock_release_recursive>
 8015d02:	bf00      	nop
 8015d04:	24003628 	.word	0x24003628

08015d08 <_read_r>:
 8015d08:	b538      	push	{r3, r4, r5, lr}
 8015d0a:	4d07      	ldr	r5, [pc, #28]	; (8015d28 <_read_r+0x20>)
 8015d0c:	4604      	mov	r4, r0
 8015d0e:	4608      	mov	r0, r1
 8015d10:	4611      	mov	r1, r2
 8015d12:	2200      	movs	r2, #0
 8015d14:	602a      	str	r2, [r5, #0]
 8015d16:	461a      	mov	r2, r3
 8015d18:	f7eb fdb2 	bl	8001880 <_read>
 8015d1c:	1c43      	adds	r3, r0, #1
 8015d1e:	d102      	bne.n	8015d26 <_read_r+0x1e>
 8015d20:	682b      	ldr	r3, [r5, #0]
 8015d22:	b103      	cbz	r3, 8015d26 <_read_r+0x1e>
 8015d24:	6023      	str	r3, [r4, #0]
 8015d26:	bd38      	pop	{r3, r4, r5, pc}
 8015d28:	24003620 	.word	0x24003620

08015d2c <_raise_r>:
 8015d2c:	291f      	cmp	r1, #31
 8015d2e:	b538      	push	{r3, r4, r5, lr}
 8015d30:	4604      	mov	r4, r0
 8015d32:	460d      	mov	r5, r1
 8015d34:	d904      	bls.n	8015d40 <_raise_r+0x14>
 8015d36:	2316      	movs	r3, #22
 8015d38:	6003      	str	r3, [r0, #0]
 8015d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8015d3e:	bd38      	pop	{r3, r4, r5, pc}
 8015d40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015d42:	b112      	cbz	r2, 8015d4a <_raise_r+0x1e>
 8015d44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015d48:	b94b      	cbnz	r3, 8015d5e <_raise_r+0x32>
 8015d4a:	4620      	mov	r0, r4
 8015d4c:	f000 f830 	bl	8015db0 <_getpid_r>
 8015d50:	462a      	mov	r2, r5
 8015d52:	4601      	mov	r1, r0
 8015d54:	4620      	mov	r0, r4
 8015d56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015d5a:	f000 b817 	b.w	8015d8c <_kill_r>
 8015d5e:	2b01      	cmp	r3, #1
 8015d60:	d00a      	beq.n	8015d78 <_raise_r+0x4c>
 8015d62:	1c59      	adds	r1, r3, #1
 8015d64:	d103      	bne.n	8015d6e <_raise_r+0x42>
 8015d66:	2316      	movs	r3, #22
 8015d68:	6003      	str	r3, [r0, #0]
 8015d6a:	2001      	movs	r0, #1
 8015d6c:	e7e7      	b.n	8015d3e <_raise_r+0x12>
 8015d6e:	2400      	movs	r4, #0
 8015d70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015d74:	4628      	mov	r0, r5
 8015d76:	4798      	blx	r3
 8015d78:	2000      	movs	r0, #0
 8015d7a:	e7e0      	b.n	8015d3e <_raise_r+0x12>

08015d7c <raise>:
 8015d7c:	4b02      	ldr	r3, [pc, #8]	; (8015d88 <raise+0xc>)
 8015d7e:	4601      	mov	r1, r0
 8015d80:	6818      	ldr	r0, [r3, #0]
 8015d82:	f7ff bfd3 	b.w	8015d2c <_raise_r>
 8015d86:	bf00      	nop
 8015d88:	24000038 	.word	0x24000038

08015d8c <_kill_r>:
 8015d8c:	b538      	push	{r3, r4, r5, lr}
 8015d8e:	4d07      	ldr	r5, [pc, #28]	; (8015dac <_kill_r+0x20>)
 8015d90:	2300      	movs	r3, #0
 8015d92:	4604      	mov	r4, r0
 8015d94:	4608      	mov	r0, r1
 8015d96:	4611      	mov	r1, r2
 8015d98:	602b      	str	r3, [r5, #0]
 8015d9a:	f7eb fd55 	bl	8001848 <_kill>
 8015d9e:	1c43      	adds	r3, r0, #1
 8015da0:	d102      	bne.n	8015da8 <_kill_r+0x1c>
 8015da2:	682b      	ldr	r3, [r5, #0]
 8015da4:	b103      	cbz	r3, 8015da8 <_kill_r+0x1c>
 8015da6:	6023      	str	r3, [r4, #0]
 8015da8:	bd38      	pop	{r3, r4, r5, pc}
 8015daa:	bf00      	nop
 8015dac:	24003620 	.word	0x24003620

08015db0 <_getpid_r>:
 8015db0:	f7eb bd42 	b.w	8001838 <_getpid>

08015db4 <_fstat_r>:
 8015db4:	b538      	push	{r3, r4, r5, lr}
 8015db6:	4d07      	ldr	r5, [pc, #28]	; (8015dd4 <_fstat_r+0x20>)
 8015db8:	2300      	movs	r3, #0
 8015dba:	4604      	mov	r4, r0
 8015dbc:	4608      	mov	r0, r1
 8015dbe:	4611      	mov	r1, r2
 8015dc0:	602b      	str	r3, [r5, #0]
 8015dc2:	f7eb fda2 	bl	800190a <_fstat>
 8015dc6:	1c43      	adds	r3, r0, #1
 8015dc8:	d102      	bne.n	8015dd0 <_fstat_r+0x1c>
 8015dca:	682b      	ldr	r3, [r5, #0]
 8015dcc:	b103      	cbz	r3, 8015dd0 <_fstat_r+0x1c>
 8015dce:	6023      	str	r3, [r4, #0]
 8015dd0:	bd38      	pop	{r3, r4, r5, pc}
 8015dd2:	bf00      	nop
 8015dd4:	24003620 	.word	0x24003620

08015dd8 <_isatty_r>:
 8015dd8:	b538      	push	{r3, r4, r5, lr}
 8015dda:	4d06      	ldr	r5, [pc, #24]	; (8015df4 <_isatty_r+0x1c>)
 8015ddc:	2300      	movs	r3, #0
 8015dde:	4604      	mov	r4, r0
 8015de0:	4608      	mov	r0, r1
 8015de2:	602b      	str	r3, [r5, #0]
 8015de4:	f7eb fda1 	bl	800192a <_isatty>
 8015de8:	1c43      	adds	r3, r0, #1
 8015dea:	d102      	bne.n	8015df2 <_isatty_r+0x1a>
 8015dec:	682b      	ldr	r3, [r5, #0]
 8015dee:	b103      	cbz	r3, 8015df2 <_isatty_r+0x1a>
 8015df0:	6023      	str	r3, [r4, #0]
 8015df2:	bd38      	pop	{r3, r4, r5, pc}
 8015df4:	24003620 	.word	0x24003620

08015df8 <_init>:
 8015df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015dfa:	bf00      	nop
 8015dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015dfe:	bc08      	pop	{r3}
 8015e00:	469e      	mov	lr, r3
 8015e02:	4770      	bx	lr

08015e04 <_fini>:
 8015e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e06:	bf00      	nop
 8015e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e0a:	bc08      	pop	{r3}
 8015e0c:	469e      	mov	lr, r3
 8015e0e:	4770      	bx	lr
